id ContactRelation.__allocating_init(relationship:relatedFullName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;

  v9 = objc_allocWithZone(v4);
  v10 = static String.EMPTY.getter();
  v11 = (void *)MEMORY[0x2207D7CB8](v10);
  swift_bridgeObjectRelease();
  v12 = objc_msgSend(v9, sel_initWithIdentifier_displayString_, 0, v11);

  v13 = v12;
  if (a4)
  {
    v14 = (void *)MEMORY[0x2207D7CB8](a3, a4);
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = 0;
  }
  objc_msgSend(v12, sel_setRelatedFullName_, v14);

  if (a2)
  {
    v15 = (void *)MEMORY[0x2207D7CB8](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = 0;
  }
  objc_msgSend(v12, sel_setRelationship_, v15);

  return v12;
}

uint64_t protocol witness for SetAlgebra.init() in conformance NSPersonNameComponentsFormatterOptions@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = specialized OptionSet<>.init()();
  *a1 = result;
  return result;
}

_QWORD *protocol witness for OptionSet.init(rawValue:) in conformance NSPersonNameComponentsFormatterOptions@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t SiriKitContactIntent.me.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  Class isa;
  char v6;

  v2 = (*(uint64_t (**)(void))(a2 + 24))();
  if (!v2)
    return 0;
  v3 = (void *)v2;
  type metadata accessor for NSNumber();
  v4 = 1;
  isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  v6 = static NSObject.== infix(_:_:)();

  if ((v6 & 1) == 0)
    return 0;
  return v4;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

double SiriKitContactIntent.value(forSlot:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  double result;

  v4 = a1[3];
  v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v4, v5);
  v7 = (void *)MEMORY[0x2207D7CB8](v6);
  OUTLINED_FUNCTION_5();
  v8 = objc_msgSend(v2, sel_valueForKey_, v7);

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t SiriKitContactIntent.shouldRunReferenceResolution(given:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  OUTLINED_FUNCTION_32();
  v1 = v0;
  type metadata accessor for UsoEntity_common_Person.DefinedValues();
  OUTLINED_FUNCTION_51();
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_50();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_15();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  OUTLINED_FUNCTION_28();
  v2 = MEMORY[0x24BDAC7A8]();
  ((void (*)(uint64_t))MEMORY[0x24BDAC7A8])(v2);
  OUTLINED_FUNCTION_69();
  MEMORY[0x24BDAC7A8]();
  if (v1)
  {
    swift_retain();
    UsoEntity_common_Person.contactId.getter();
    OUTLINED_FUNCTION_60();
    OUTLINED_FUNCTION_45();
    v3 = 0;
  }
  else
  {
    v3 = 1;
  }
  return v3 & 1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x2207D8690]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t __swift_storeEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t outlined init with copy of UsoEntity_common_Person.DefinedValues?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t __swift_getEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

unint64_t lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues;
  if (!lazy protocol witness table cache variable for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues)
  {
    v1 = type metadata accessor for UsoEntity_common_Person.DefinedValues();
    result = MEMORY[0x2207D86A8](MEMORY[0x24BEA0488], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues);
  }
  return result;
}

void specialized static SiriKitContactIntent.runReferenceResolution(_:completion:)()
{
  OUTLINED_FUNCTION_36();
}

{
  OUTLINED_FUNCTION_36();
}

{
  NSObject *v0;
  uint64_t v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_32();
  v4 = v3;
  v40[1] = v5;
  v7 = v6;
  v9 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for RREntity();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_15();
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v15 = OUTLINED_FUNCTION_26();
  v41 = __swift_project_value_buffer(v15, (uint64_t)static Logger.siriContacts);
  OUTLINED_FUNCTION_70();
  v16 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_42(v16))
  {
    v17 = (uint8_t *)OUTLINED_FUNCTION_1();
    v40[0] = v4;
    *(_WORD *)v17 = 0;
    OUTLINED_FUNCTION_31(&dword_21FE16000, v0, v2, "#SiriKitContactIntent: running reference resolution", v17);
    OUTLINED_FUNCTION_0();
  }

  v18 = v9[3];
  v19 = (char *)v9[4];
  __swift_project_boxed_opaque_existential_1(v9, v18);
  RRReferenceResolverProtocol.resolveCommonPerson()(v18, v19, (uint64_t)v12);
  OUTLINED_FUNCTION_10((uint64_t)v12);
  if (!v20)
  {
    OUTLINED_FUNCTION_56(v1, (uint64_t)v12, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 32));
    RREntity.usoEntity.getter();
    OUTLINED_FUNCTION_71();
    OUTLINED_FUNCTION_59();
    v26 = OUTLINED_FUNCTION_2();
    if (v42)
    {
      if (MEMORY[0x2207D6AAC](v26))
      {
        CodeGenBase.entity.getter();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_76();
        OUTLINED_FUNCTION_73();
        OUTLINED_FUNCTION_27();
        v27 = OUTLINED_FUNCTION_47();
        if (v42)
        {
          v28 = MEMORY[0x2207D6C14](v27);
          OUTLINED_FUNCTION_14(v28, v29, 2);
          OUTLINED_FUNCTION_47();
          OUTLINED_FUNCTION_46();
LABEL_19:
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_27;
        }
        OUTLINED_FUNCTION_75();
        OUTLINED_FUNCTION_73();
        OUTLINED_FUNCTION_27();
        v32 = OUTLINED_FUNCTION_47();
        if (v42)
        {
          v33 = MEMORY[0x2207D6C68](v32);
          OUTLINED_FUNCTION_14(v33, v34, 1);
          OUTLINED_FUNCTION_47();
          OUTLINED_FUNCTION_2();
          goto LABEL_19;
        }
        OUTLINED_FUNCTION_46();
      }
      else if ((RREntity.isFromContactSource.getter() & 1) != 0)
      {
        v30 = RREntity.id.getter();
        OUTLINED_FUNCTION_14(v30, v31, 0);
        OUTLINED_FUNCTION_5();
        OUTLINED_FUNCTION_46();
LABEL_27:
        OUTLINED_FUNCTION_67(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8));
        goto LABEL_28;
      }
      swift_release();
    }
    OUTLINED_FUNCTION_23();
    v35 = MEMORY[0x2207D87F8](v7);
    if (v35)
    {
      v36 = (void *)v35;
      v37 = v41;
      Logger.logObject.getter();
      v38 = OUTLINED_FUNCTION_8();
      if (OUTLINED_FUNCTION_42(v38))
      {
        v39 = (uint8_t *)OUTLINED_FUNCTION_1();
        *(_WORD *)v39 = 0;
        OUTLINED_FUNCTION_31(&dword_21FE16000, v37, (os_log_type_t)v19, "#SiriKitGetEntityIntent: no value found from reference resolution", v39);
        OUTLINED_FUNCTION_0();
      }

    }
    goto LABEL_27;
  }
  outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v12, &demangling cache variable for type metadata for RREntity?);
  OUTLINED_FUNCTION_23();
  v21 = MEMORY[0x2207D87F8](v7);
  if (v21)
  {
    v22 = (void *)v21;
    v23 = v41;
    Logger.logObject.getter();
    v24 = OUTLINED_FUNCTION_8();
    if (OUTLINED_FUNCTION_3(v24))
    {
      v25 = (uint8_t *)OUTLINED_FUNCTION_1();
      *(_WORD *)v25 = 0;
      OUTLINED_FUNCTION_31(&dword_21FE16000, v23, (os_log_type_t)v1, "#SiriKitGetEntityIntent: no value found from reference resolution", v25);
      OUTLINED_FUNCTION_0();
    }

  }
LABEL_28:
  OUTLINED_FUNCTION_7();
}

void static SiriKitContactIntent.runReferenceResolution(_:completion:)()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_32();
  v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_50();
  type metadata accessor for RREntity();
  OUTLINED_FUNCTION_51();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_15();
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v8 = OUTLINED_FUNCTION_26();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.siriContacts);
  OUTLINED_FUNCTION_70();
  v9 = OUTLINED_FUNCTION_8();
  if (os_log_type_enabled(v0, v9))
  {
    v10 = (uint8_t *)OUTLINED_FUNCTION_1();
    *(_WORD *)v10 = 0;
    OUTLINED_FUNCTION_31(&dword_21FE16000, v0, v9, "#SiriKitContactIntent: running reference resolution", v10);
    OUTLINED_FUNCTION_0();
  }

  v11 = v5[3];
  v12 = (char *)v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v11);
  RRReferenceResolverProtocol.resolveCommonPerson()(v11, v12, v2);
  OUTLINED_FUNCTION_10(v2);
  if (!v13)
  {
    OUTLINED_FUNCTION_56(v1, v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
    RREntity.usoEntity.getter();
    OUTLINED_FUNCTION_71();
    OUTLINED_FUNCTION_59();
    v14 = OUTLINED_FUNCTION_2();
    if (v16)
    {
      if (MEMORY[0x2207D6AAC](v14))
      {
        CodeGenBase.entity.getter();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_76();
        OUTLINED_FUNCTION_72();
        OUTLINED_FUNCTION_27();
        v15 = OUTLINED_FUNCTION_52();
        MEMORY[0x2207D6C14](v15);
        OUTLINED_FUNCTION_38();
        OUTLINED_FUNCTION_52();
        OUTLINED_FUNCTION_66();
        swift_release();
        swift_bridgeObjectRelease();
LABEL_15:
        OUTLINED_FUNCTION_67(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
        goto LABEL_16;
      }
      if ((RREntity.isFromContactSource.getter() & 1) != 0)
      {
        RREntity.id.getter();
        OUTLINED_FUNCTION_38();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_66();
        goto LABEL_15;
      }
      swift_release();
    }
    OUTLINED_FUNCTION_38();
    goto LABEL_15;
  }
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v2, &demangling cache variable for type metadata for RREntity?);
  OUTLINED_FUNCTION_38();
LABEL_16:
  OUTLINED_FUNCTION_7();
}

uint64_t SiriKitGetEntityIntent.runReferenceResolution(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  char v7;

  swift_unknownObjectWeakInit();
  v5 = (_QWORD *)OUTLINED_FUNCTION_55();
  v5[2] = a2;
  v5[3] = a3;
  v5[4] = &v7;
  static SiriKitContactIntent.runReferenceResolution(_:completion:)();
  OUTLINED_FUNCTION_2();
  return swift_unknownObjectWeakDestroy();
}

uint64_t specialized closure #1 in SiriKitGetEntityIntent.runReferenceResolution(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t result;

  OUTLINED_FUNCTION_23();
  result = MEMORY[0x2207D87F8](a4);
  if (result)
    __asm { BR              X10 }
  return result;
}

{
  uint64_t result;

  swift_beginAccess();
  result = MEMORY[0x2207D87F8](a4);
  if (result)
    __asm { BR              X10 }
  return result;
}

uint64_t sub_21FE1AE10()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in SiriKitGetEntityIntent.runReferenceResolution(_:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return specialized closure #1 in SiriKitGetEntityIntent.runReferenceResolution(_:)(a1, a2, a3, *(_QWORD *)(v3 + 32));
}

void static SiriKitGetEntityIntent.resolveAddressType(from:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint8_t *v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v35;
  unint64_t v36;
  uint64_t *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v56)(NSObject *, uint64_t, uint64_t);
  unint64_t v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  _BOOL4 v64;
  uint64_t *v65;
  uint8_t *v66;
  uint64_t v67;
  NSObject *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  uint64_t *v85;
  os_log_type_t v86;
  _DWORD *v87;
  uint64_t v88;
  unint64_t v89;
  os_log_type_t v90;
  _DWORD *v91;
  uint64_t v92;
  unint64_t v93;
  os_log_type_t v94;
  _DWORD *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  uint64_t *v103;
  uint64_t v104;
  NSObject *v105;
  uint8_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  OUTLINED_FUNCTION_32();
  v5 = v4;
  v103 = v6;
  v109 = type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_51();
  MEMORY[0x24BDAC7A8](v7);
  v105 = ((char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_68();
  v104 = v10;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_68();
  v107 = v12;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_69();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_68();
  v101 = v15;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_68();
  v108 = v17;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v101 - v19;
  if (one-time initialization token for siriContacts != -1)
    goto LABEL_105;
  while (1)
  {
    v21 = OUTLINED_FUNCTION_26();
    v22 = __swift_project_value_buffer(v21, (uint64_t)static Logger.siriContacts);
    swift_retain_n();
    v102 = v22;
    Logger.logObject.getter();
    v23 = OUTLINED_FUNCTION_8();
    if (OUTLINED_FUNCTION_3(v23))
    {
      v24 = (uint8_t *)OUTLINED_FUNCTION_1();
      v112 = OUTLINED_FUNCTION_1();
      *(_DWORD *)v24 = 136315138;
      v106 = v24 + 4;
      *(_QWORD *)&v111 = v5;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_ContactAddress?);
      v25 = String.init<A>(describing:)();
      *(_QWORD *)&v111 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_74();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21FE16000, v22, (os_log_type_t)v0, "#SiriKitGetEntityIntent resolveAddressType from address %s", v24, 0xCu);
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }

    OUTLINED_FUNCTION_74();
    if (!v5)
    {
      v37 = v103;
      *v103 = 0;
      v37[1] = 0;
      v38 = -1;
LABEL_92:
      *((_BYTE *)v37 + 16) = v38;
      goto LABEL_93;
    }
    swift_retain();
    v106 = v5;
    CodeGenBase.entity.getter();
    static UsoEntity_CodeGenConverter.convert(entity:)();
    v27 = OUTLINED_FUNCTION_49();
    if (!v114)
      break;
    OUTLINED_FUNCTION_76();
    if ((OUTLINED_FUNCTION_24() & 1) == 0)
      goto LABEL_27;
    v28 = v111;
    OUTLINED_FUNCTION_44();
    v1 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
    OUTLINED_FUNCTION_2();
    v29 = MEMORY[0x24BEE4AF8];
    v112 = MEMORY[0x24BEE4AF8];
    v0 = *(_QWORD *)(v1 + 16);
    v105 = v28;
    if (!v0)
    {
LABEL_68:
      swift_bridgeObjectRelease();
      if (*(_QWORD *)(v29 + 16))
      {
        OUTLINED_FUNCTION_11();
        OUTLINED_FUNCTION_2();
        v58 = v0;
        v59 = UsoIdentifier.value.getter();
        v61 = v60;
        OUTLINED_FUNCTION_39(v0, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
      }
      else
      {
        v72 = OUTLINED_FUNCTION_2();
        v58 = v28;
        v59 = MEMORY[0x2207D6C08](v72);
        if (v73)
        {
          v58 = v73;
          v59 = String.convertToContactAttributeLabel.getter();
          v61 = v74;
          OUTLINED_FUNCTION_5();
        }
        else
        {
          v61 = 0;
        }
      }
      OUTLINED_FUNCTION_29();
      OUTLINED_FUNCTION_61();
      v90 = OUTLINED_FUNCTION_8();
      if (OUTLINED_FUNCTION_3(v90))
      {
        v91 = (_DWORD *)OUTLINED_FUNCTION_1();
        *(_QWORD *)&v111 = OUTLINED_FUNCTION_1();
        *v91 = 136315138;
        v112 = v59;
        v113 = v61;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        v92 = OUTLINED_FUNCTION_64();
        v112 = OUTLINED_FUNCTION_78(v92, v93);
        OUTLINED_FUNCTION_25();
        OUTLINED_FUNCTION_30();
        OUTLINED_FUNCTION_48();
        OUTLINED_FUNCTION_4(&dword_21FE16000, v58, (os_log_type_t)v0, "#SiriKitGetEntityIntent address was converted to a phone number with value %s");
        OUTLINED_FUNCTION_16();
        OUTLINED_FUNCTION_0();
      }

      OUTLINED_FUNCTION_46();
      OUTLINED_FUNCTION_30();
      swift_release();
      v37 = v103;
      *v103 = v59;
      v37[1] = v61;
      v38 = 1;
      goto LABEL_92;
    }
    v2 = 0;
    v107 = v0;
    while (v2 < *(_QWORD *)(v1 + 16))
    {
      v30 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      v5 = *(uint8_t **)(v3 + 72);
      OUTLINED_FUNCTION_33((uint64_t)v20, v1 + v30 + (_QWORD)v5 * v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
      v31 = UsoIdentifier.namespace.getter();
      if (v32)
      {
        v33 = v32;
        if (v31 == 0x707954656E6F6870 && v32 == 0xE900000000000065)
        {
          OUTLINED_FUNCTION_5();
LABEL_18:
          OUTLINED_FUNCTION_43(v108, (uint64_t)v20);
          if ((OUTLINED_FUNCTION_34() & 1) == 0)
          {
            OUTLINED_FUNCTION_9();
            v33 = v112;
          }
          v36 = *(_QWORD *)(v33 + 16);
          if (v36 >= *(_QWORD *)(v33 + 24) >> 1)
          {
            OUTLINED_FUNCTION_6();
            v33 = v112;
          }
          *(_QWORD *)(v33 + 16) = v36 + 1;
          OUTLINED_FUNCTION_43(v33 + v30 + v36 * (_QWORD)v5, v108);
          v112 = v33;
          v0 = v107;
          goto LABEL_23;
        }
        v35 = OUTLINED_FUNCTION_41();
        OUTLINED_FUNCTION_5();
        if ((v35 & 1) != 0)
          goto LABEL_18;
      }
      OUTLINED_FUNCTION_39((uint64_t)v20, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
LABEL_23:
      if (v0 == ++v2)
      {
        v29 = v112;
        v28 = v105;
        goto LABEL_68;
      }
    }
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    swift_once();
  }
  OUTLINED_FUNCTION_63(v27, &demangling cache variable for type metadata for Any?);
LABEL_27:
  swift_retain();
  CodeGenBase.entity.getter();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_65();
  v39 = OUTLINED_FUNCTION_49();
  v0 = MEMORY[0x24BEE4AD8];
  if (!v114)
  {
    OUTLINED_FUNCTION_63(v39, &demangling cache variable for type metadata for Any?);
LABEL_48:
    OUTLINED_FUNCTION_44();
    CodeGenBase.entity.getter();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_65();
    v48 = OUTLINED_FUNCTION_49();
    v1 = v104;
    if (v114)
    {
      type metadata accessor for UsoEntity_common_PostalAddress();
      if ((OUTLINED_FUNCTION_24() & 1) != 0)
      {
        v108 = v111;
        OUTLINED_FUNCTION_44();
        v49 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
        OUTLINED_FUNCTION_2();
        v50 = MEMORY[0x24BEE4AF8];
        v112 = MEMORY[0x24BEE4AF8];
        v20 = *(char **)(v49 + 16);
        if (!v20)
          goto LABEL_78;
        v51 = 0;
        while (1)
        {
          if (v51 >= *(_QWORD *)(v49 + 16))
            goto LABEL_104;
          OUTLINED_FUNCTION_62();
          (*(void (**)(uint64_t, uint8_t *, uint64_t))(v3 + 16))(v1, &v5[v49 + v2 * v51], v109);
          v52 = UsoIdentifier.namespace.getter();
          if (v53)
          {
            v54 = v53;
            if (v52 == 0x5473736572646461 && v53 == 0xEB00000000657079)
            {
              OUTLINED_FUNCTION_5();
LABEL_61:
              v56 = *(void (**)(NSObject *, uint64_t, uint64_t))(v3 + 32);
              v56(v105, v1, v109);
              if ((OUTLINED_FUNCTION_34() & 1) == 0)
              {
                OUTLINED_FUNCTION_9();
                v54 = v112;
              }
              v57 = *(_QWORD *)(v54 + 16);
              v0 = v57 + 1;
              if (v57 >= *(_QWORD *)(v54 + 24) >> 1)
              {
                OUTLINED_FUNCTION_6();
                v54 = v112;
              }
              *(_QWORD *)(v54 + 16) = v0;
              v56(&v5[v54 + v57 * v2], (uint64_t)v105, v109);
              v112 = v54;
              v1 = v104;
              goto LABEL_66;
            }
            v0 = _stringCompareWithSmolCheck(_:_:expecting:)();
            OUTLINED_FUNCTION_5();
            if ((v0 & 1) != 0)
              goto LABEL_61;
          }
          (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v109);
LABEL_66:
          if (v20 == (char *)++v51)
          {
            v50 = v112;
LABEL_78:
            swift_bridgeObjectRelease();
            if (*(_QWORD *)(v50 + 16))
            {
              OUTLINED_FUNCTION_11();
              OUTLINED_FUNCTION_2();
              v75 = UsoIdentifier.value.getter();
              v77 = v76;
              OUTLINED_FUNCTION_39(v0, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
              goto LABEL_84;
            }
            v81 = OUTLINED_FUNCTION_2();
            MEMORY[0x2207D6CF8](v81);
            if (v82)
            {
              LOBYTE(v0) = v82;
              v75 = String.convertToContactAttributeLabel.getter();
              v77 = v83;
              swift_bridgeObjectRelease();
LABEL_84:
              *(_QWORD *)&v111 = v75;
              v84 = v102;
              v85 = v103;
            }
            else
            {
              if (UsoEntity_common_PostalAddress.requestedAddressField.getter() == 5)
              {
                v75 = 0;
                v77 = 0;
              }
              else
              {
                ContactNLIntent.ContactPostalAddressField.rawValue.getter();
                v75 = v99;
                v77 = v100;
              }
              v84 = v102;
              v85 = v103;
              *(_QWORD *)&v111 = v75;
            }
            *((_QWORD *)&v111 + 1) = v77;
            OUTLINED_FUNCTION_29();
            Logger.logObject.getter();
            v86 = OUTLINED_FUNCTION_8();
            if (OUTLINED_FUNCTION_3(v86))
            {
              v87 = (_DWORD *)OUTLINED_FUNCTION_1();
              v110 = OUTLINED_FUNCTION_1();
              *v87 = 136315138;
              v112 = v75;
              v113 = v77;
              swift_bridgeObjectRetain();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
              v88 = OUTLINED_FUNCTION_64();
              v112 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v89, &v110);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              OUTLINED_FUNCTION_30();
              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_4(&dword_21FE16000, v84, (os_log_type_t)v0, "#SiriKitGetEntityIntent address was converted to a postal address with value %s");
              OUTLINED_FUNCTION_16();
              OUTLINED_FUNCTION_0();
            }

            swift_release();
            OUTLINED_FUNCTION_30();
            swift_release();
            OUTLINED_FUNCTION_23();
            *(_OWORD *)v85 = v111;
            *((_BYTE *)v85 + 16) = 2;
            goto LABEL_93;
          }
        }
      }
    }
    else
    {
      OUTLINED_FUNCTION_63(v48, &demangling cache variable for type metadata for Any?);
    }
    v62 = OUTLINED_FUNCTION_61();
    v63 = static os_log_type_t.debug.getter();
    v64 = os_log_type_enabled(v62, v63);
    v65 = v103;
    if (v64)
    {
      v66 = (uint8_t *)OUTLINED_FUNCTION_1();
      *(_WORD *)v66 = 0;
      OUTLINED_FUNCTION_31(&dword_21FE16000, v62, v63, "#SiriKitGetEntityIntent address did not convert to a known contact address type", v66);
      OUTLINED_FUNCTION_0();
    }

    OUTLINED_FUNCTION_37();
    *v65 = 0;
    v65[1] = 0;
    *((_BYTE *)v65 + 16) = -1;
    goto LABEL_93;
  }
  OUTLINED_FUNCTION_75();
  if ((OUTLINED_FUNCTION_24() & 1) == 0)
    goto LABEL_48;
  v105 = v111;
  OUTLINED_FUNCTION_44();
  v20 = (char *)dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  OUTLINED_FUNCTION_2();
  v40 = MEMORY[0x24BEE4AF8];
  v112 = MEMORY[0x24BEE4AF8];
  v41 = *((_QWORD *)v20 + 2);
  if (!v41)
    goto LABEL_74;
  v42 = 0;
  v108 = *((_QWORD *)v20 + 2);
  while (2)
  {
    if (v42 >= *((_QWORD *)v20 + 2))
      goto LABEL_103;
    OUTLINED_FUNCTION_62();
    OUTLINED_FUNCTION_33(v1, (uint64_t)&v5[(_QWORD)v20 + v2 * v42], *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
    v43 = UsoIdentifier.namespace.getter();
    if (v44)
    {
      v45 = v44;
      if (v43 == 0x7079546C69616D65 && v44 == 0xE900000000000065)
      {
        OUTLINED_FUNCTION_5();
      }
      else
      {
        LOBYTE(v0) = OUTLINED_FUNCTION_41();
        OUTLINED_FUNCTION_5();
        if ((v0 & 1) == 0)
          goto LABEL_38;
      }
      OUTLINED_FUNCTION_43(v107, v1);
      if ((OUTLINED_FUNCTION_34() & 1) == 0)
      {
        OUTLINED_FUNCTION_9();
        v45 = v112;
      }
      v47 = *(_QWORD *)(v45 + 16);
      v0 = v47 + 1;
      if (v47 >= *(_QWORD *)(v45 + 24) >> 1)
      {
        OUTLINED_FUNCTION_6();
        v45 = v112;
      }
      *(_QWORD *)(v45 + 16) = v0;
      OUTLINED_FUNCTION_43((uint64_t)&v5[v45 + v47 * v2], v107);
      v112 = v45;
      v41 = v108;
    }
    else
    {
LABEL_38:
      OUTLINED_FUNCTION_39(v1, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    }
    if (v41 != ++v42)
      continue;
    break;
  }
  v40 = v112;
LABEL_74:
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v40 + 16))
  {
    v67 = v101;
    OUTLINED_FUNCTION_33(v101, v40 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
    OUTLINED_FUNCTION_2();
    v68 = v67;
    v69 = UsoIdentifier.value.getter();
    v71 = v70;
    OUTLINED_FUNCTION_39(v67, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  }
  else
  {
    v78 = OUTLINED_FUNCTION_2();
    v68 = v105;
    v69 = MEMORY[0x2207D6C5C](v78);
    if (v79)
    {
      v68 = v79;
      v69 = String.convertToContactAttributeLabel.getter();
      v71 = v80;
      OUTLINED_FUNCTION_5();
    }
    else
    {
      v71 = 0;
    }
  }
  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_61();
  v94 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_3(v94))
  {
    v95 = (_DWORD *)OUTLINED_FUNCTION_1();
    *(_QWORD *)&v111 = OUTLINED_FUNCTION_1();
    *v95 = 136315138;
    v112 = v69;
    v113 = v71;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    v96 = OUTLINED_FUNCTION_64();
    v112 = OUTLINED_FUNCTION_78(v96, v97);
    OUTLINED_FUNCTION_25();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_4(&dword_21FE16000, v68, (os_log_type_t)v0, "#SiriKitGetEntityIntent address was converted to an email with value %s");
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }

  swift_release();
  OUTLINED_FUNCTION_30();
  swift_release();
  v98 = v103;
  *v103 = v69;
  v98[1] = v71;
  *((_BYTE *)v98 + 16) = 0;
LABEL_93:
  OUTLINED_FUNCTION_7();
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t serialize(_:at:)(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  result = OUTLINED_FUNCTION_5();
  *a1 = v8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    OUTLINED_FUNCTION_13();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(_QWORD *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  Swift::Int v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v2 = String.UTF8View._foreignCount()();
    if (v2)
      goto LABEL_6;
    return MEMORY[0x24BEE4AF8];
  }
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return MEMORY[0x24BEE4AF8];
LABEL_6:
  v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v4 = v3;
    v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2)
      goto LABEL_14;
    return (uint64_t)v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

{
  if ((__len & 0x8000000000000000) != 0)
  {
    OUTLINED_FUNCTION_2_31();
    __src = (char *)OUTLINED_FUNCTION_6_23();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

_BYTE **closure #1 in OSLogArguments.append(_:)(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

{
  _QWORD *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *v0 = v1;
}

uint64_t dispatch thunk of SiriKitContactIntent.siriInferenceContact.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SiriKitContactIntent.contactIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of SiriKitContactIntent.requestedName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of SiriKitContactIntent.value(forSlot:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of SiriKitGetEntityIntent.fullName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of SiriKitGetEntityIntent.phoneNumber.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of SiriKitGetEntityIntent.phoneNumber.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of SiriKitGetEntityIntent.phoneNumber.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of SiriKitGetEntityIntent.emailAddress.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of SiriKitGetEntityIntent.emailAddress.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 88))();
}

uint64_t dispatch thunk of SiriKitGetEntityIntent.emailAddress.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of SiriKitGetEntityIntent.siriMatches.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of SiriKitGetEntityIntent.siriMatches.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t dispatch thunk of SiriKitGetEntityIntent.siriMatches.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t dispatch thunk of SiriKitGetEntityIntent.contactIdentifier.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 128))();
}

uint64_t dispatch thunk of SiriKitGetEntityIntent.contactIdentifier.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 136))();
}

uint64_t outlined copy of SpecifyingContactAddressType(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for SpecifyingContactAddressType(uint64_t a1)
{
  return outlined consume of SiriKitContactIntentResolvedValue(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for SpecifyingContactAddressType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of SpecifyingContactAddressType(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SpecifyingContactAddressType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of SpecifyingContactAddressType(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of SiriKitContactIntentResolvedValue(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SpecifyingContactAddressType(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of SiriKitContactIntentResolvedValue(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpecifyingContactAddressType(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 2)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SpecifyingContactAddressType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for SpecifyingContactAddressType(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for SpecifyingContactAddressType(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SpecifyingContactAddressType()
{
  return &type metadata for SpecifyingContactAddressType;
}

size_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(size_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  size_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

size_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(displayHints: [DisplayHint], idValue: SemanticValue)>);
  v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue))
                  - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_24;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue))
                                       - 8)
                           + 80);
  v16 = a4 + ((v15 + 32) & ~v15);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v16, v8);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v16, v8);
  }
  swift_release();
  return (size_t)v13;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  int64_t v0;
  uint64_t v1;
  uint64_t *v2;
  void (*v3)(uint64_t, uint64_t, char *);
  void (*v4)(uint64_t, uint64_t, char *);
  void (*v5)(uint64_t, uint64_t, char *);
  void (*v6)(uint64_t, uint64_t, char *);
  uint64_t (*v7)(_QWORD);
  uint64_t (*v8)(_QWORD);
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  size_t v21;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;

  OUTLINED_FUNCTION_32();
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = v1;
  v11 = v10;
  if ((v12 & 1) != 0)
  {
    v13 = *(_QWORD *)(v1 + 24);
    v14 = v13 >> 1;
    if ((uint64_t)(v13 >> 1) < v0)
    {
      if (v14 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return;
      }
      v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v13 & 0xFFFFFFFFFFFFFFFELL) <= v0)
        v14 = v0;
    }
  }
  else
  {
    v14 = v0;
  }
  v15 = *(_QWORD *)(v1 + 16);
  if (v14 <= v15)
    v16 = *(_QWORD *)(v1 + 16);
  else
    v16 = v14;
  if (!v16)
  {
    v20 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(v2);
  v17 = *(_QWORD *)(v8(0) - 8);
  v18 = *(_QWORD *)(v17 + 72);
  v19 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v20 = (_QWORD *)swift_allocObject();
  v21 = _swift_stdlib_malloc_size(v20);
  if (!v18)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v21 - v19 == 0x8000000000000000 && v18 == -1)
    goto LABEL_24;
  v20[2] = v15;
  v20[3] = 2 * ((uint64_t)(v21 - v19) / v18);
LABEL_19:
  v23 = *(unsigned __int8 *)(*(_QWORD *)(v8(0) - 8) + 80);
  v24 = (v23 + 32) & ~v23;
  v25 = (char *)v20 + v24;
  v26 = v9 + v24;
  if ((v11 & 1) != 0)
  {
    v6(v26, v15, v25);
    *(_QWORD *)(v9 + 16) = 0;
  }
  else
  {
    v4(v26, v15, v25);
  }
  OUTLINED_FUNCTION_49();
}

uint64_t outlined destroy of UsoEntity_common_Person.DefinedValues?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined consume of SiriKitContactIntentResolvedValue(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void OUTLINED_FUNCTION_0()
{
  JUMPOUT(0x2207D8768);
}

uint64_t OUTLINED_FUNCTION_1()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_2()
{
  return swift_release();
}

BOOL OUTLINED_FUNCTION_3(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_4(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t OUTLINED_FUNCTION_5()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_6()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_8()
{
  return static os_log_type_t.debug.getter();
}

void OUTLINED_FUNCTION_9()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_10(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_11()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(v2 + 16))(*(_QWORD *)(v3 - 208), v0 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)), v1);
}

uint64_t OUTLINED_FUNCTION_12(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t OUTLINED_FUNCTION_13()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_14(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return specialized closure #1 in SiriKitGetEntityIntent.runReferenceResolution(_:)(a1, a2, a3, v3);
}

uint64_t OUTLINED_FUNCTION_16()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_17(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return swift_bridgeObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_18()
{
  uint64_t v0;
  uint64_t v1;

  return outlined consume of SiriKitContactIntentResolvedValue(v1, v0, 0);
}

uint64_t OUTLINED_FUNCTION_19()
{
  uint64_t v0;
  uint64_t v1;

  return outlined consume of SiriKitContactIntentResolvedValue(v1, v0, 1u);
}

uint64_t OUTLINED_FUNCTION_20()
{
  uint64_t v0;
  uint64_t v1;

  return outlined consume of SiriKitContactIntentResolvedValue(v1, v0, 2u);
}

void OUTLINED_FUNCTION_21()
{
  JUMPOUT(0x2207D7CB8);
}

uint64_t OUTLINED_FUNCTION_22()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_23()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_24()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_25()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_26()
{
  return type metadata accessor for Logger();
}

uint64_t OUTLINED_FUNCTION_27()
{
  return static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
}

uint64_t OUTLINED_FUNCTION_29()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_30()
{
  return swift_bridgeObjectRelease_n();
}

void OUTLINED_FUNCTION_31(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 2u);
}

uint64_t OUTLINED_FUNCTION_33@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_34()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_35(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

void OUTLINED_FUNCTION_36()
{
  specialized static SiriKitContactIntent.runReferenceResolution(_:completion:)();
}

uint64_t OUTLINED_FUNCTION_37()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_38()
{
  uint64_t (*v0)(void);

  return v0();
}

uint64_t OUTLINED_FUNCTION_39@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_40(uint64_t a1)
{
  uint64_t *v1;

  return outlined destroy of UsoEntity_common_Person.DefinedValues?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_41()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

BOOL OUTLINED_FUNCTION_42(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_43(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_44()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_45()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_46()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_47()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_48()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_49()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_52()
{
  return swift_release();
}

BOOL OUTLINED_FUNCTION_53(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_55()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_56@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

id OUTLINED_FUNCTION_57(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_58()
{
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_59()
{
  return static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
}

uint64_t OUTLINED_FUNCTION_60()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_61()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_63(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return outlined destroy of UsoEntity_common_Person.DefinedValues?(v2 - 112, a2);
}

uint64_t OUTLINED_FUNCTION_64()
{
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_65()
{
  return static UsoEntity_CodeGenConverter.convert(entity:)();
}

uint64_t OUTLINED_FUNCTION_66()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_67@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_70()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_71()
{
  return type metadata accessor for UsoEntity_common_Person();
}

uint64_t OUTLINED_FUNCTION_72()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_73()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_74()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_75()
{
  return type metadata accessor for UsoEntity_common_EmailAddress();
}

uint64_t OUTLINED_FUNCTION_76()
{
  return type metadata accessor for UsoEntity_common_PhoneNumber();
}

uint64_t OUTLINED_FUNCTION_77(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_78(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 128));
}

uint64_t GetContactAttributeHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for SiriKitIntentHandler();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t GetContactAttributeHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  id v13;
  uint64_t v14;

  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v2 = (void *)__swift_project_value_buffer(v1, (uint64_t)static Logger.siriContacts);
  Logger.logObject.getter();
  v3 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_15_0(v3))
  {
    *(_WORD *)OUTLINED_FUNCTION_1() = 0;
    OUTLINED_FUNCTION_10_0(&dword_21FE16000, v4, v5, "#GetContactAttributeHandleIntentStrategy makeIntentExecutionBehavior");
    OUTLINED_FUNCTION_0();
  }

  type metadata accessor for SiriKitIntentExecutionBehavior();
  v6 = one-time initialization token for current;
  swift_retain();
  if (v6 != -1)
    swift_once();
  v8 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 48);
  v9 = *(void **)(v0 + 24);
  v10 = static ContactService.current;
  type metadata accessor for ContactResolver();
  OUTLINED_FUNCTION_32_0();
  swift_retain();
  v11 = ContactResolver.init()();
  v12 = objc_allocWithZone((Class)type metadata accessor for GetContactAttributeIntentHandler());
  specialized BaseIntentHandler.init(contactService:contactResolver:)(v10, v11, v12);
  type metadata accessor for GetContactAttributeIntent();
  v13 = v9;
  SiriKitIntentHandler.init<A>(app:intentHandler:intent:)();
  v14 = static SiriKitIntentExecutionBehavior.embeddedIntentHandler(intentHandler:)();
  OUTLINED_FUNCTION_28_0(v7, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  OUTLINED_FUNCTION_13_0();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v14);
}

uint64_t GetContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ContactAttributeSnippetModel;
  uint64_t v9;

  v3[25] = a2;
  v3[26] = v2;
  v3[24] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[27] = OUTLINED_FUNCTION_0_0();
  v4 = type metadata accessor for TemplatingResult();
  v3[28] = v4;
  v3[29] = *(_QWORD *)(v4 - 8);
  v3[30] = OUTLINED_FUNCTION_0_0();
  type metadata accessor for DialogPhase();
  v3[31] = OUTLINED_FUNCTION_0_0();
  v5 = type metadata accessor for OutputGenerationManifest();
  v3[32] = v5;
  v3[33] = *(_QWORD *)(v5 - 8);
  v3[34] = OUTLINED_FUNCTION_0_0();
  type metadata accessor for CATOption();
  v3[35] = OUTLINED_FUNCTION_0_0();
  v6 = type metadata accessor for ContactsSnippetPluginModel();
  v3[36] = v6;
  v3[37] = *(_QWORD *)(v6 - 8);
  v3[38] = OUTLINED_FUNCTION_0_0();
  v7 = type metadata accessor for Locale();
  v3[39] = v7;
  v3[40] = *(_QWORD *)(v7 - 8);
  v3[41] = OUTLINED_FUNCTION_25_0();
  v3[42] = OUTLINED_FUNCTION_25_0();
  v3[43] = OUTLINED_FUNCTION_25_0();
  ContactAttributeSnippetModel = type metadata accessor for GetContactAttributeSnippetModel();
  v3[44] = ContactAttributeSnippetModel;
  v3[45] = *(_QWORD *)(ContactAttributeSnippetModel - 8);
  v3[46] = OUTLINED_FUNCTION_0_0();
  v9 = type metadata accessor for NLContextUpdate();
  v3[47] = v9;
  v3[48] = *(_QWORD *)(v9 - 8);
  v3[49] = OUTLINED_FUNCTION_0_0();
  v3[50] = type metadata accessor for Signpost.OpenSignpost();
  v3[51] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t GetContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t ContactAttributeIntent;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  id v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  NSObject *v25;
  _QWORD *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  _QWORD *v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(void);
  void *v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  char v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  _QWORD *v61;
  Class isa;
  id v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  os_log_type_t v67;
  uint8_t *v68;
  _QWORD *v69;
  id v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  os_log_type_t type;
  uint8_t *bufa;
  uint8_t *buf;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  NSObject *v99;
  uint64_t v100;
  void *v101;
  _QWORD *v102;
  uint64_t v103[2];

  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 400);
  v1 = *(_QWORD *)(v0 + 408);
  v3 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v4 = *(int *)(v2 + 20);
  *(_DWORD *)(v0 + 544) = v4;
  v5 = v1 + v4;
  *(_QWORD *)v5 = "MakeGetContactAttributeIntentHandledResponse";
  *(_QWORD *)(v5 + 8) = 44;
  *(_BYTE *)(v5 + 16) = 2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<GetContactAttributeIntent, GetContactAttributeIntentResponse>);
  v6 = (void *)IntentResolutionRecord.intentResponse.getter();
  ContactAttributeIntent = outlined bridged method (ob) of @objc GetContactAttributeIntentResponse.contactIdentifiers.getter(v6);
  if (!ContactAttributeIntent)
    goto LABEL_10;
  v8 = (_QWORD *)ContactAttributeIntent;
  if (!*(_QWORD *)(ContactAttributeIntent + 16))
  {
    OUTLINED_FUNCTION_9_0();
LABEL_10:
    OUTLINED_FUNCTION_30_0();
    lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (uint64_t (*)(uint64_t))type metadata accessor for ContactsError, (uint64_t)&protocol conformance descriptor for ContactsError);
    OUTLINED_FUNCTION_4_0();
    swift_storeEnumTagMultiPayload();
    OUTLINED_FUNCTION_27_0();
    goto LABEL_19;
  }
  v9 = *(_QWORD **)(v0 + 200);
  v10 = (void *)OUTLINED_FUNCTION_11_0();
  LODWORD(v1) = (_DWORD)v10;
  v11 = objc_msgSend(v10, sel_isMe);
  OUTLINED_FUNCTION_26_0();
  if (v9 && (LOBYTE(v103[0]) = 2, MEMORY[0x2207D7E38](v9, v103), v9, (v103[0] & 1) != 0))
  {
    v19 = *(_QWORD **)(v0 + 208);
    v20 = v19[10];
    v21 = v19[11];
    v9 = __swift_project_boxed_opaque_existential_1(v19 + 7, v20);
    v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 24))(v20, v21);
    v1 = 1;
  }
  else
  {
    v12 = *(_QWORD **)(v0 + 208);
    v13 = v12[10];
    v14 = v12[11];
    v15 = __swift_project_boxed_opaque_existential_1(v12 + 7, v13);
    if (!v8[2])
    {
      __break(1u);
      goto LABEL_35;
    }
    v9 = v15;
    v17 = v8[4];
    v16 = v8[5];
    v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 8);
    swift_bridgeObjectRetain();
    v22 = (void *)v18(v17, v16, v13, v14);
    OUTLINED_FUNCTION_5_0();
    v1 = 0;
  }
  *(_BYTE *)(v0 + 548) = v1;
  *(_QWORD *)(v0 + 416) = v22;
  if (v22)
  {
    OUTLINED_FUNCTION_9_0();
    v23 = (void *)OUTLINED_FUNCTION_11_0();
    v9 = objc_msgSend(v23, sel_contactAttributeToGet);
    *(_QWORD *)(v0 + 424) = v9;

    if (v9)
    {
      v101 = v22;
      v97 = v0 + 548;
      if (one-time initialization token for siriContacts == -1)
        goto LABEL_15;
      goto LABEL_36;
    }
    OUTLINED_FUNCTION_30_0();
    lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (uint64_t (*)(uint64_t))type metadata accessor for ContactsError, (uint64_t)&protocol conformance descriptor for ContactsError);
    OUTLINED_FUNCTION_4_0();
    swift_storeEnumTagMultiPayload();
    OUTLINED_FUNCTION_27_0();

LABEL_19:
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    OUTLINED_FUNCTION_7_0();
    outlined destroy of Signpost.OpenSignpost(v1);
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_13_0();
    swift_task_dealloc();
    OUTLINED_FUNCTION_17_0();
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_24_0();
    OUTLINED_FUNCTION_23_0();
    OUTLINED_FUNCTION_22_0();
    OUTLINED_FUNCTION_14_0();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v39 = *(uint64_t (**)(void))(v0 + 8);
    return v39();
  }
  type metadata accessor for ContactsError();
  lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (uint64_t (*)(uint64_t))type metadata accessor for ContactsError, (uint64_t)&protocol conformance descriptor for ContactsError);
  OUTLINED_FUNCTION_4_0();
  if (v8[2])
  {
    v36 = v35;
    v1 = *(_QWORD *)(v0 + 408);
    v37 = v8[4];
    v38 = v8[5];
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_9_0();
    *v36 = v37;
    v36[1] = v38;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    goto LABEL_19;
  }
LABEL_35:
  __break(1u);
LABEL_36:
  swift_once();
LABEL_15:
  v24 = type metadata accessor for Logger();
  v25 = __swift_project_value_buffer(v24, (uint64_t)static Logger.siriContacts);
  v26 = v9;
  v99 = v25;
  v27 = v25;
  Logger.logObject.getter();
  v28 = OUTLINED_FUNCTION_8();
  v93 = v1;
  if (os_log_type_enabled(v25, v28))
  {
    v29 = (uint8_t *)OUTLINED_FUNCTION_1();
    v103[0] = OUTLINED_FUNCTION_1();
    bufa = v29;
    *(_DWORD *)v29 = 136315138;
    v30 = v26;
    type = v28;
    v31 = objc_msgSend(v30, sel_description);
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v34 = v33;

    *(_QWORD *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_5_0();

    _os_log_impl(&dword_21FE16000, v27, type, "#GetContactAttributeHandleIntentStrategy Attempting to create views for %s lookup.", bufa, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0();
  }

  v41 = (void *)OUTLINED_FUNCTION_11_0();
  outlined bridged method (ob) of @objc GetContactAttributeIntent.contactHandleMatches.getter(v41, (SEL *)&selRef_contactHandleMatches);
  v43 = v42;
  *(_QWORD *)(v0 + 432) = v42;
  v44 = (void *)OUTLINED_FUNCTION_11_0();
  outlined bridged method (ob) of @objc GetContactAttributeIntent.contactHandleMatches.getter(v44, (SEL *)&selRef_contactHandleAlternatives);
  *(_QWORD *)(v0 + 440) = v45;
  v92 = v45;
  v46 = specialized ContactsStrategy.handles(matches:alternatives:)(v43, v45);
  *(_QWORD *)(v0 + 448) = v46;
  v47 = OUTLINED_FUNCTION_29_0();
  static ContactsContextProvider.getContactAttribute(contact:handles:contactAttributeType:needsSDA:)(v101, v46, v47, 0);
  if (OUTLINED_FUNCTION_29_0() == (id)9)
    v48 = 1;
  else
    v48 = *(_BYTE *)(*(_QWORD *)(v0 + 208) + 112);
  *(_BYTE *)(v97 + 1) = v48;
  if ((specialized ContactsStrategy.isSmartEnabled.getter() & 1) == 0)
  {
    isa = *(Class *)(v0 + 200);
    v63 = objc_msgSend((id)OUTLINED_FUNCTION_11_0(), sel_isMe);
    OUTLINED_FUNCTION_26_0();
    if (!isa)
    {
      type metadata accessor for NSNumber();
      isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
    }
    v64 = *(_QWORD *)(v0 + 208);
    buf = (uint8_t *)(v64 + 16);
    outlined init with copy of DeviceState(v64 + 16, v0 + 48);
    v65 = *(_QWORD *)(v64 + 104);
    *(_QWORD *)(v0 + 16) = v46;
    *(_QWORD *)(v0 + 24) = v101;
    *(_QWORD *)(v0 + 32) = isa;
    *(_QWORD *)(v0 + 40) = v26;
    *(_QWORD *)(v0 + 88) = v65;
    v66 = v26;
    swift_retain();
    v98 = v101;
    specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:)();
    outlined destroy of GetContactAttributeViewBuilder((id *)(v0 + 16));
    v102 = v66;
    Logger.logObject.getter();
    v67 = OUTLINED_FUNCTION_8();
    if (os_log_type_enabled(v25, v67))
    {
      v68 = (uint8_t *)OUTLINED_FUNCTION_1();
      v103[0] = OUTLINED_FUNCTION_1();
      *(_DWORD *)v68 = 136315138;
      v69 = v102;
      v70 = objc_msgSend(v69, sel_description);
      v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v73 = v72;

      *(_QWORD *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v73, v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_21FE16000, v99, v67, "#GetContactAttributeHandleIntentStrategy Attempting to create intentHandledResponse for %s lookup.", v68, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_0();
    }

    v75 = *(_QWORD *)(v0 + 320);
    v74 = *(_QWORD *)(v0 + 328);
    v95 = *(_QWORD *)(v0 + 240);
    v76 = *(_QWORD *)(v0 + 208);
    __swift_project_boxed_opaque_existential_1(buf, *(_QWORD *)(v76 + 40));
    dispatch thunk of DeviceState.siriLocale.getter();
    v77 = Locale.identifier.getter();
    v79 = v78;
    OUTLINED_FUNCTION_28_0(v74, *(uint64_t (**)(uint64_t, uint64_t))(v75 + 8));
    __swift_project_boxed_opaque_existential_1(buf, *(_QWORD *)(v76 + 40));
    v80 = DeviceState.isVox.getter();
    GetContactAttributeCATs.intentHandledResponse(matches:alternatives:attribute:contact:isMe:localeString:isVoiceMode:mockGlobals:)(v43, v92, v102, v98, v93, v77, v79, v80 & 1, v95, 0);
    v81 = *(_QWORD *)(v0 + 384);
    v100 = *(_QWORD *)(v0 + 392);
    v82 = *(_QWORD *)(v0 + 376);
    v83 = *(_QWORD *)(v0 + 240);
    v84 = *(_QWORD *)(v0 + 216);
    v94 = *(_QWORD *)(v0 + 232);
    v96 = *(_QWORD *)(v0 + 224);
    v85 = *(uint64_t **)(v0 + 192);
    OUTLINED_FUNCTION_18_0();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_5_0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 16))(v84, v100, v82);
    __swift_storeEnumTagSinglePayload(v84, 0, 1, v82);
    v86 = type metadata accessor for AceOutput();
    *(_OWORD *)(v0 + 112) = 0u;
    *(_QWORD *)(v0 + 128) = 0;
    *(_OWORD *)(v0 + 96) = 0u;
    v87 = MEMORY[0x24BE99088];
    v85[3] = v86;
    v85[4] = v87;
    __swift_allocate_boxed_opaque_existential_1(v85);
    static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    OUTLINED_FUNCTION_5_0();

    outlined destroy of FlowActivity?(v0 + 96, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of FlowActivity?(v84, &demangling cache variable for type metadata for NLContextUpdate?);
    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v83, v96);
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v100, v82);
    v88 = *(_QWORD *)(v0 + 408);
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost(v88);
    OUTLINED_FUNCTION_17_0();
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_24_0();
    OUTLINED_FUNCTION_23_0();
    OUTLINED_FUNCTION_22_0();
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_13_0();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v39 = *(uint64_t (**)(void))(v0 + 8);
    return v39();
  }
  Logger.logObject.getter();
  v49 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_15_0(v49))
  {
    *(_WORD *)OUTLINED_FUNCTION_1() = 0;
    OUTLINED_FUNCTION_10_0(&dword_21FE16000, v50, v51, "#GetContactAttributeHandleIntentStrategy makeIntentHandledResponse constructing SMART snippet");
    OUTLINED_FUNCTION_0();
  }
  v52 = *(_QWORD *)(v0 + 344);
  v53 = *(_QWORD *)(v0 + 312);
  v54 = *(_QWORD *)(v0 + 320);
  v55 = *(_QWORD **)(v0 + 208);

  __swift_project_boxed_opaque_existential_1(v55 + 2, v55[5]);
  dispatch thunk of DeviceState.siriLocale.getter();
  v56 = Locale.identifier.getter();
  v58 = v57;
  *(_QWORD *)(v0 + 456) = v57;
  v59 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
  *(_QWORD *)(v0 + 464) = v59;
  v59(v52, v53);
  v60 = v55[15];
  v61 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 472) = v61;
  *v61 = v0;
  v61[1] = GetContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  return static GetContactAttributeSnippetModel.from(_:requestedAttribute:handlesToReturn:locale:mockGlobals:)(*(_QWORD *)(v0 + 368), (uint64_t)v101, (uint64_t)v26, v46, v56, v58, v60);
}

{
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_5_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20_0();
  return swift_task_switch();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 464);
  v13 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 304);
  v4 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 288);
  v6 = *(_QWORD *)(v0 + 296);
  v7 = *(_QWORD *)(v0 + 208);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 360) + 16))(v3, *(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 352));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v3, *MEMORY[0x24BE91C80], v5);
  type metadata accessor for GetContactAttributeCATsModern();
  static CATOption.defaultMode.getter();
  *(_QWORD *)(v0 + 480) = CATWrapperSimple.__allocating_init(options:globals:)();
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 40));
  dispatch thunk of DeviceState.siriLocale.getter();
  v8 = Locale.identifier.getter();
  v10 = v9;
  *(_QWORD *)(v0 + 488) = v9;
  v1(v2, v4);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 40));
  LOBYTE(v3) = DeviceState.isVox.getter();
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 496) = v11;
  *v11 = v0;
  v11[1] = GetContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  return GetContactAttributeCATsModern.intentHandledResponse(matches:alternatives:attribute:contact:isMe:localeString:isVoiceMode:mockGlobals:isModern:)(*(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 424), v13, *(_BYTE *)(v0 + 548), v8, v10, v3 & 1);
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  id v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t (*v14)(_QWORD, uint64_t, uint64_t, _QWORD);
  void *v15;
  uint64_t v16;

  v1 = *(_BYTE *)(v0 + 549);
  v2 = *(_QWORD *)(v0 + 424);
  v3 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 304);
  v13 = *(_QWORD *)(v0 + 296);
  v15 = *(void **)(v0 + 512);
  v5 = *(_QWORD *)(v0 + 288);
  static DialogPhase.completion.getter();
  v6 = swift_task_alloc();
  *(_BYTE *)(v6 + 16) = v1;
  *(_QWORD *)(v6 + 24) = v3;
  *(_QWORD *)(v6 + 32) = v4;
  *(_QWORD *)(v6 + 40) = v2;
  OutputGenerationManifest.init(dialogPhase:_:)();
  OUTLINED_FUNCTION_12_0();
  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_32_0();
  *(_QWORD *)(v0 + 520) = ResponseFactory.init()();
  *(_QWORD *)(v0 + 160) = v5;
  lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy(&lazy protocol witness table cache variable for type ContactsSnippetPluginModel and conformance ContactsSnippetPluginModel, (uint64_t (*)(uint64_t))MEMORY[0x24BE91C90], MEMORY[0x24BE91C68]);
  *(_QWORD *)(v0 + 168) = v7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 136));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v13 + 16))(boxed_opaque_existential_1, v4, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_21FED8AB0;
  *(_QWORD *)(v9 + 32) = v15;
  v16 = v9;
  specialized Array._endMutation()();
  *(_QWORD *)(v0 + 528) = v16;
  v14 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))((int)*MEMORY[0x24BE97EE0] + MEMORY[0x24BE97EE0]);
  v10 = v15;
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 536) = v11;
  *v11 = v0;
  v11[1] = GetContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  return v14(*(_QWORD *)(v0 + 192), v0 + 136, v16, *(_QWORD *)(v0 + 272));
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 + 136;
  OUTLINED_FUNCTION_3_0();
  swift_release();
  OUTLINED_FUNCTION_5_0();
  __swift_destroy_boxed_opaque_existential_0(v1);
  OUTLINED_FUNCTION_20_0();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(void **)(v0 + 416);
  v2 = *(void **)(v0 + 424);
  v3 = *(_QWORD *)(v0 + 368);
  v22 = *(_QWORD *)(v0 + 376);
  v23 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 360);
  v5 = *(_QWORD *)(v0 + 296);
  v20 = *(_QWORD *)(v0 + 304);
  v21 = *(_QWORD *)(v0 + 384);
  v19 = *(_QWORD *)(v0 + 288);
  v6 = *(_QWORD *)(v0 + 264);
  v7 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 256);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  OUTLINED_FUNCTION_28_0(v3, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v20, v19);
  OUTLINED_FUNCTION_19_0(v9, v10, v11, v12, v13, v14, v15, v16, v19, v20, v21, v22, v23);
  v17 = *(_QWORD *)(v0 + 408);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v17);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_17_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_2_0(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(void **)(v0 + 416);
  v19 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 368);
  v20 = *(_QWORD *)(v0 + 376);
  v21 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 352);
  v3 = *(_QWORD *)(v0 + 360);
  v5 = *(_QWORD *)(v0 + 296);
  v6 = *(_QWORD *)(v0 + 304);
  v7 = *(_QWORD *)(v0 + 288);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  OUTLINED_FUNCTION_19_0(v8, v9, v10, v11, v12, v13, v14, v15, v17, v18, v19, v20, v21);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_7_0();
  outlined destroy of Signpost.OpenSignpost(v5);
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_14_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_2_0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t GetContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 504) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_9_0();
    OUTLINED_FUNCTION_18_0();
    swift_release();
  }
  else
  {
    OUTLINED_FUNCTION_18_0();
    swift_release();
    *(_QWORD *)(v4 + 512) = a1;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_9_0();
  }
  OUTLINED_FUNCTION_20_0();
  return swift_task_switch();
}

char *closure #1 in GetContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *result;
  uint64_t v11;

  type metadata accessor for ResponseMode();
  MEMORY[0x24BDAC7A8]();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  OutputGenerationManifest.canUseServerTTS.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  v9 = type metadata accessor for NLContextUpdate();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v8, a3, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v9);
  OutputGenerationManifest.nlContextUpdate.setter();
  ContactsSnippetPluginModel.responseViewID.getter();
  OutputGenerationManifest.responseViewId.setter();
  result = (char *)objc_msgSend(a5, sel_contactAttributeType);
  if ((unint64_t)(result - 6) <= 3)
  {
    static ResponseMode.voiceForward.getter();
    return (char *)OutputGenerationManifest.responseMode.setter();
  }
  return result;
}

uint64_t GetContactAttributeHandleIntentStrategy.__deallocating_deinit()
{
  ContactsUnsupportedValueStrategy.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for GetContactAttributeHandleIntentStrategy()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GetContactAttributeHandleIntentStrategy;
  if (!type metadata singleton initialization cache for GetContactAttributeHandleIntentStrategy)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for GetContactAttributeHandleIntentStrategy()
{
  return swift_initClassMetadata2();
}

uint64_t specialized ContactsStrategy.handles(matches:alternatives:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = a1;
  }
  else
  {
    v2 = a2;
    if (a2)
      swift_bridgeObjectRetain();
    else
      v2 = MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:) in conformance GetContactAttributeHandleIntentStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for GetContactAttributeHandleIntentStrategy();
  *v1 = v0;
  v1[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactAttributeHandleIntentStrategy;
  return HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactAttributeHandleIntentStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for GetContactAttributeHandleIntentStrategy();
  *v1 = v0;
  v1[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactAttributeHandleIntentStrategy;
  return HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:) in conformance GetContactAttributeHandleIntentStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for GetContactAttributeHandleIntentStrategy();
  *v1 = v0;
  v1[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactAttributeHandleIntentStrategy;
  return HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:) in conformance GetContactAttributeHandleIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactAttributeHandleIntentStrategy;
  return GetContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(a1, a2);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:) in conformance GetContactAttributeHandleIntentStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for GetContactAttributeHandleIntentStrategy();
  *v1 = v0;
  v1[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactAttributeHandleIntentStrategy;
  return HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:) in conformance GetContactAttributeHandleIntentStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for GetContactAttributeHandleIntentStrategy();
  *v1 = v0;
  v1[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactAttributeHandleIntentStrategy;
  return HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance GetContactAttributeHandleIntentStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for GetContactAttributeHandleIntentStrategy();
  *v1 = v0;
  v1[1] = protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance GetContactAttributeHandleIntentStrategy;
  return HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:)();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_3_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance GetContactAttributeHandleIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance GetContactAttributeHandleIntentStrategy;
  return GetContactAttributeHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:)(a1, a2);
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance GetContactAttributeHandleIntentStrategy(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_3_0();
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(a1);
}

void base witness table accessor for IntentExtensionCommunicatingAsync in GetContactAttributeHandleIntentStrategy()
{
  lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy(&lazy protocol witness table cache variable for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy, (uint64_t (*)(uint64_t))type metadata accessor for GetContactAttributeHandleIntentStrategy, (uint64_t)&protocol conformance descriptor for GetContactAttributeHandleIntentStrategy);
}

uint64_t outlined bridged method (ob) of @objc GetContactAttributeIntentResponse.contactIdentifiers.getter(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, sel_contactIdentifiers);

  if (!v2)
    return 0;
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined destroy of Signpost.OpenSignpost(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Signpost.OpenSignpost();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void outlined bridged method (ob) of @objc GetContactAttributeIntent.contactHandleMatches.getter(void *a1, SEL *a2)
{
  id v3;

  v3 = objc_msgSend(a1, *a2);

  if (v3)
  {
    type metadata accessor for ContactAttribute();
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_26_0();
  }
  OUTLINED_FUNCTION_31_0();
}

uint64_t outlined init with copy of DeviceState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

id *outlined destroy of GetContactAttributeViewBuilder(id *a1)
{
  destroy for GetContactAttributeViewBuilder(a1);
  return a1;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void outlined destroy of FlowActivity?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  OUTLINED_FUNCTION_31_0();
}

char *partial apply for closure #1 in GetContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in GetContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(a1, *(unsigned __int8 *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

void lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = a2(255);
    atomic_store(MEMORY[0x2207D86A8](a3, v5), a1);
  }
  OUTLINED_FUNCTION_31_0();
}

uint64_t OUTLINED_FUNCTION_0_0()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_2_0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_3_0()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_4_0()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_5_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_8_0()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_9_0()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_10_0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  os_log_type_t v4;
  NSObject *v5;
  uint8_t *v6;

  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_11_0()
{
  return IntentResolutionRecord.intent.getter();
}

uint64_t OUTLINED_FUNCTION_12_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_13_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_14_0()
{
  return swift_task_dealloc();
}

BOOL OUTLINED_FUNCTION_15_0(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_17_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_18_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_19_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a11 + 8))(a13, a12);
}

uint64_t OUTLINED_FUNCTION_21_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_22_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_23_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_24_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_25_0()
{
  return swift_task_alloc();
}

void OUTLINED_FUNCTION_26_0()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_27_0()
{
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_28_0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

id OUTLINED_FUNCTION_29_0()
{
  uint64_t v0;
  void *v1;

  return objc_msgSend(v1, (SEL)(v0 + 1439));
}

uint64_t OUTLINED_FUNCTION_30_0()
{
  return type metadata accessor for ContactsError();
}

uint64_t OUTLINED_FUNCTION_32_0()
{
  return swift_allocObject();
}

uint64_t ContactsDelegateFlow.__allocating_init(flowFactory:)(__int128 *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  ContactsDelegateFlow.init(flowFactory:)(a1);
  return v2;
}

uint64_t ContactsDelegateFlow.init(flowFactory:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = OBJC_IVAR____TtC19SiriContactsIntents20ContactsDelegateFlow_restrictionGuards;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CommonFlowGuard>);
  type metadata accessor for CommonFlowGuard();
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_21FED8CA0;
  static CommonFlowGuard.ensuringPersonalRequestsAreEnabledWhenApplicable.getter();
  static CommonFlowGuard.ensuringDeviceIsAuthenticated.getter();
  static CommonFlowGuard.disallowInSharingMode.getter();
  *(_QWORD *)(v1 + v3) = v4;
  type metadata accessor for ContactsFlowState(0);
  swift_storeEnumTagMultiPayload();
  outlined init with take of FlowProviding(a1, v1 + OBJC_IVAR____TtC19SiriContactsIntents20ContactsDelegateFlow_flowFactory);
  return v1;
}

uint64_t type metadata accessor for ContactsFlowState(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for ContactsFlowState);
}

uint64_t outlined init with take of FlowProviding(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

BOOL ContactsDelegateFlow.on(input:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int EnumCaseMultiPayload;
  _QWORD v26[5];
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[3];

  v29 = a1;
  v2 = type metadata accessor for ContactsFlowState(0);
  OUTLINED_FUNCTION_28();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v28 = (uint64_t)v26 - v7;
  v26[4] = type metadata accessor for Parse();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_55_0();
  v9 = OUTLINED_FUNCTION_38_0();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_55_0();
  v13 = v12 - v11;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v14 = OUTLINED_FUNCTION_26();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.siriContacts);
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  v27(v13, v29, v9);
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = OUTLINED_FUNCTION_1();
    v26[1] = v1;
    v18 = (uint8_t *)v17;
    v19 = OUTLINED_FUNCTION_1();
    v26[3] = v6;
    v31[0] = v19;
    v26[2] = v2;
    *(_DWORD *)v18 = 136315138;
    v26[0] = v18 + 4;
    Input.parse.getter();
    v20 = String.init<A>(describing:)();
    v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_44_0();
    OUTLINED_FUNCTION_43_0(&dword_21FE16000, v15, v16, "#ContactsDelegateFlow on(input:) %s", v18);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }
  OUTLINED_FUNCTION_44_0();

  v22 = v1 + OBJC_IVAR____TtC19SiriContactsIntents20ContactsDelegateFlow_flowState;
  OUTLINED_FUNCTION_23();
  v23 = v28;
  outlined init with copy of ContactsFlowState(v22, v28);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  outlined destroy of ContactsFlowState(v23, type metadata accessor for ContactsFlowState);
  if (EnumCaseMultiPayload == 2)
  {
    v27((uint64_t)v6, v29, v13);
    swift_storeEnumTagMultiPayload();
    OUTLINED_FUNCTION_32_1();
    outlined assign with take of ContactsFlowState((uint64_t)v6, v22);
    swift_endAccess();
  }
  return EnumCaseMultiPayload == 2;
}

uint64_t ContactsDelegateFlow.execute(completion:)()
{
  type metadata accessor for ContactsDelegateFlow(0);
  lazy protocol witness table accessor for type ContactsDelegateFlow and conformance ContactsDelegateFlow();
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t ContactsDelegateFlow.execute()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[11] = a1;
  v2[12] = v1;
  v3 = OUTLINED_FUNCTION_38_0();
  v2[13] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[14] = v4;
  v2[15] = *(_QWORD *)(v4 + 64);
  v2[16] = OUTLINED_FUNCTION_30_1();
  v2[17] = OUTLINED_FUNCTION_25_0();
  v2[18] = OUTLINED_FUNCTION_25_0();
  v2[19] = type metadata accessor for ContactsFlowState(0);
  v2[20] = OUTLINED_FUNCTION_30_1();
  v2[21] = OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ContactsDelegateFlow.execute()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t EnumCaseMultiPayload;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  OUTLINED_FUNCTION_52_0();
  v17 = v16[21];
  v18 = v16[12];
  v19 = OBJC_IVAR____TtC19SiriContactsIntents20ContactsDelegateFlow_flowState;
  v16[22] = OBJC_IVAR____TtC19SiriContactsIntents20ContactsDelegateFlow_flowState;
  v20 = v18 + v19;
  OUTLINED_FUNCTION_23();
  outlined init with copy of ContactsFlowState(v20, v17);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)sub_21FE1F3F4 + 4 * byte_21FED8CC0[EnumCaseMultiPayload]))(EnumCaseMultiPayload, v22, v23, v24, v25, v26, v27, v28, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_21FE1F3F4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v21)(unint64_t, uint64_t, uint64_t);
  uint64_t v22;

  v3 = v1[12];
  v21 = *(void (**)(unint64_t, uint64_t, uint64_t))(v1[14] + 32);
  v21(v1[18], v1[21], v1[13]);
  OUTLINED_FUNCTION_66_0((_QWORD *)(v3 + OBJC_IVAR____TtC19SiriContactsIntents20ContactsDelegateFlow_flowFactory));
  v22 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v2 + 80))(*(_QWORD *)(v3 + OBJC_IVAR____TtC19SiriContactsIntents20ContactsDelegateFlow_restrictionGuards), v0, v2);
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v4 = OUTLINED_FUNCTION_26();
  v5 = OUTLINED_FUNCTION_10_1(v4, (uint64_t)static Logger.siriContacts);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)OUTLINED_FUNCTION_2_1();
    *(_WORD *)v7 = 0;
    OUTLINED_FUNCTION_31(&dword_21FE16000, v5, v6, "#ContactsDelegateFlow runningGuardFlow ...", v7);
    OUTLINED_FUNCTION_0();
  }
  v9 = v1[17];
  v8 = v1[18];
  v10 = v1[14];
  v12 = v1[12];
  v11 = v1[13];

  v1[10] = v22;
  OUTLINED_FUNCTION_69_0(v9, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16));
  v13 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v12;
  v21(v14 + v13, v9, v11);
  type metadata accessor for GuardFlow();
  swift_retain();
  static ExecuteResponse.ongoing<A>(next:childCompletion:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v11);
  swift_release();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_31_1();
  return v15(v15, v16, v17, v18, v19);
}

uint64_t ContactsDelegateFlow.execute()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_48_0();
  *(_QWORD *)(v2 + 200) = v1;
  OUTLINED_FUNCTION_67_0();
  if (v0)

  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_QWORD *)(v0 + 200))
  {
    v1 = *(_QWORD *)(v0 + 128);
    v2 = *(_QWORD *)(v0 + 104);
    v3 = *(_QWORD *)(v0 + 112);
    OUTLINED_FUNCTION_62_0();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  }
  else
  {
    v4 = *(NSObject **)(v0 + 184);
    Logger.logObject.getter();
    v5 = OUTLINED_FUNCTION_8();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)OUTLINED_FUNCTION_2_1();
      *(_WORD *)v6 = 0;
      OUTLINED_FUNCTION_31(&dword_21FE16000, v4, v5, "#ContactsDelegateFlow FlowFactory returned nil for getFlow, returning .complete response", v6);
      OUTLINED_FUNCTION_0();
    }
    v7 = *(_QWORD *)(v0 + 128);
    v8 = *(_QWORD *)(v0 + 104);
    v9 = *(_QWORD *)(v0 + 112);

    OUTLINED_FUNCTION_51_0();
    OUTLINED_FUNCTION_32_1();
    OUTLINED_FUNCTION_65_0();
    swift_endAccess();
    static ExecuteResponse.complete()();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  return OUTLINED_FUNCTION_19_1(*(uint64_t (**)(void))(v0 + 8));
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_48_0();
  *(_QWORD *)(v2 + 216) = v1;
  OUTLINED_FUNCTION_67_0();
  if (v0)

  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v2 = OUTLINED_FUNCTION_26();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriContacts);
  OUTLINED_FUNCTION_57_0();
  Logger.logObject.getter();
  v3 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_15_0(v3))
  {
    v11 = *(_QWORD *)(v1 + 152);
    v4 = (uint8_t *)OUTLINED_FUNCTION_1();
    v12 = OUTLINED_FUNCTION_1();
    OUTLINED_FUNCTION_35_0(4.8149e-34);
    v5 = OUTLINED_FUNCTION_60_0();
    *(_QWORD *)(v1 + 72) = OUTLINED_FUNCTION_59_0(v5, v6, v7, v8, v11, v1 + 72, v12);
    OUTLINED_FUNCTION_58_0();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_50_0();
    OUTLINED_FUNCTION_43_0(&dword_21FE16000, v0, (os_log_type_t)v0, "#ContactsDelegateFlow Returning unsupported flow after encountering unexpected state %s", v4);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }
  OUTLINED_FUNCTION_50_0();

  v9 = *(_QWORD *)(v1 + 168);
  OUTLINED_FUNCTION_62_0();
  swift_release();
  outlined destroy of ContactsFlowState(v9, type metadata accessor for ContactsFlowState);
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  return OUTLINED_FUNCTION_21_1(*(uint64_t (**)(void))(v1 + 8));
}

{
  os_log_type_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v2 = OUTLINED_FUNCTION_26();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriContacts);
  OUTLINED_FUNCTION_57_0();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_15_0(v4))
  {
    v12 = *(_QWORD *)(v1 + 152);
    v5 = (uint8_t *)OUTLINED_FUNCTION_1();
    v13 = OUTLINED_FUNCTION_1();
    OUTLINED_FUNCTION_35_0(4.8149e-34);
    v6 = OUTLINED_FUNCTION_60_0();
    *(_QWORD *)(v1 + 64) = OUTLINED_FUNCTION_59_0(v6, v7, v8, v9, v12, v1 + 64, v13);
    OUTLINED_FUNCTION_58_0();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_50_0();
    OUTLINED_FUNCTION_43_0(&dword_21FE16000, v3, v0, "#ContactsDelegateFlow Failed to make unsupported flow after encountering unexpected state %s, completing current flow", v5);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }
  OUTLINED_FUNCTION_50_0();

  v10 = *(_QWORD *)(v1 + 168);
  static ExecuteResponse.complete()();
  outlined destroy of ContactsFlowState(v10, type metadata accessor for ContactsFlowState);
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  return OUTLINED_FUNCTION_21_1(*(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v0;
  void *v1;
  os_log_type_t v2;
  _WORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(void **)(v0 + 184);
  Logger.logObject.getter();
  v2 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_15_0(v2))
  {
    v3 = (_WORD *)OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_54_0(v3);
    OUTLINED_FUNCTION_10_0(&dword_21FE16000, v4, v5, "#ContactsDelegateFlow FlowFactory returned nil for getFlow, returning .complete response");
    OUTLINED_FUNCTION_0();
  }
  v9 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 112);

  OUTLINED_FUNCTION_51_0();
  OUTLINED_FUNCTION_32_1();
  OUTLINED_FUNCTION_65_0();
  swift_endAccess();
  static ExecuteResponse.complete()();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  return OUTLINED_FUNCTION_19_1(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t closure #1 in ContactsDelegateFlow.execute()(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return ContactsDelegateFlow.handleGuardFlowResult(_:input:)(*a1, a3);
}

uint64_t ContactsDelegateFlow.handleGuardFlowResult(_:input:)(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19[3];

  type metadata accessor for ContactsFlowState(0);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_55_0();
  v7 = v6 - v5;
  if ((static GuardFlowResult.== infix(_:_:)() & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v8 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v8, (uint64_t)static Logger.siriContacts);
    v9 = OUTLINED_FUNCTION_8();
    if (os_log_type_enabled(v2, v9))
    {
      v10 = (uint8_t *)OUTLINED_FUNCTION_2_1();
      *(_WORD *)v10 = 0;
      OUTLINED_FUNCTION_31(&dword_21FE16000, v2, v9, "#ContactsDelegateFlow Moved state to runningContactsFlow", v10);
      OUTLINED_FUNCTION_0();
    }

    v11 = OUTLINED_FUNCTION_38_0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v7, a2, v11);
  }
  else
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v12 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v12, (uint64_t)static Logger.siriContacts);
    v13 = OUTLINED_FUNCTION_8();
    if (os_log_type_enabled(v2, v13))
    {
      v14 = (uint8_t *)OUTLINED_FUNCTION_1();
      v19[0] = OUTLINED_FUNCTION_1();
      *(_DWORD *)v14 = 136315138;
      v15 = GuardFlowResult.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_43_0(&dword_21FE16000, v2, v13, "#ContactsDelegateFlow GuardFlow yielded an ExitValue that is either invalid or not passing: %s. Ending the flow.", v14);
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }

  }
  swift_storeEnumTagMultiPayload();
  v17 = (uint64_t)v2 + OBJC_IVAR____TtC19SiriContactsIntents20ContactsDelegateFlow_flowState;
  OUTLINED_FUNCTION_32_1();
  outlined assign with take of ContactsFlowState(v7, v17);
  return swift_endAccess();
}

uint64_t ContactsDelegateFlow.getFlow(for:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[15] = a1;
  v2[16] = v1;
  v3 = OUTLINED_FUNCTION_38_0();
  v2[17] = v3;
  v2[18] = *(_QWORD *)(v3 - 8);
  v2[19] = OUTLINED_FUNCTION_0_0();
  v2[20] = type metadata accessor for Signpost.OpenSignpost();
  v2[21] = OUTLINED_FUNCTION_0_0();
  v4 = type metadata accessor for Parse();
  v2[22] = v4;
  v2[23] = *(_QWORD *)(v4 - 8);
  v2[24] = OUTLINED_FUNCTION_30_1();
  v2[25] = OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ContactsDelegateFlow.getFlow(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void (**v5)(_QWORD, id);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_52_0();
  Input.parse.getter();
  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 104) = 0xE000000000000000;
  _print_unlocked<A, B>(_:_:)();
  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  *(_QWORD *)(v0 + 40) = MEMORY[0x24BEE0D00];
  v3 = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v0 + 16) = v1;
  *(_QWORD *)(v0 + 48) = v3;
  *(_QWORD *)(v0 + 24) = v2;
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v4 = *(_QWORD *)(v0 + 168);
  v15 = *(_QWORD *)(v0 + 160);
  v16 = *(_QWORD *)(v0 + 128);
  v5 = (void (**)(_QWORD, id))(id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_21FED8CB0;
  outlined init with copy of DeviceState(v0 + 16, v6 + 32);
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  swift_bridgeObjectRelease();
  v7 = *(int *)(v15 + 20);
  *(_DWORD *)(v0 + 304) = v7;
  v8 = v4 + v7;
  *(_QWORD *)v8 = "GetFlowForInput";
  *(_QWORD *)(v8 + 8) = 15;
  *(_BYTE *)(v8 + 16) = 2;
  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  v9 = OBJC_IVAR____TtC19SiriContactsIntents20ContactsDelegateFlow_flowFactory;
  *(_QWORD *)(v0 + 208) = OBJC_IVAR____TtC19SiriContactsIntents20ContactsDelegateFlow_flowFactory;
  OUTLINED_FUNCTION_66_0((_QWORD *)(v16 + v9));
  v5[3](v4, v5);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 216) = v10;
  *v10 = v0;
  v10[1] = ContactsDelegateFlow.getFlow(for:);
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_31_1();
  return Parse.toSiriKitIntent(referenceResolver:previousIntent:)(v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_49_0();
  v1 = v0 + 56;
  OUTLINED_FUNCTION_48_0();
  *(_QWORD *)(v3 + 224) = v2;
  OUTLINED_FUNCTION_67_0();
  __swift_destroy_boxed_opaque_existential_0(v1);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  OUTLINED_FUNCTION_40_0();
  *v4 = *v3;
  *(_QWORD *)(v2 + 240) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v2 + 248) = v0;
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_14_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_63_0();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_37_0();
  v0 = OUTLINED_FUNCTION_27_1();
  OUTLINED_FUNCTION_28_1(v0, (uint64_t (*)(_QWORD))type metadata accessor for Signpost.OpenSignpost);
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  v1 = OUTLINED_FUNCTION_36_0();
  return OUTLINED_FUNCTION_7_1(v1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  OUTLINED_FUNCTION_40_0();
  *v4 = *v3;
  *(_QWORD *)(v2 + 264) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v2 + 272) = v0;
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_14_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_63_0();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_37_0();
  v0 = OUTLINED_FUNCTION_27_1();
  OUTLINED_FUNCTION_28_1(v0, (uint64_t (*)(_QWORD))type metadata accessor for Signpost.OpenSignpost);
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  v1 = OUTLINED_FUNCTION_36_0();
  return OUTLINED_FUNCTION_7_1(v1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  OUTLINED_FUNCTION_40_0();
  *v4 = *v3;
  *(_QWORD *)(v2 + 288) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v2 + 296) = v0;
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_14_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_63_0();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_37_0();
  v0 = OUTLINED_FUNCTION_27_1();
  OUTLINED_FUNCTION_28_1(v0, (uint64_t (*)(_QWORD))type metadata accessor for Signpost.OpenSignpost);
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  v1 = OUTLINED_FUNCTION_36_0();
  return OUTLINED_FUNCTION_7_1(v1, v2);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_11_1();
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_37_0();
  v1 = OUTLINED_FUNCTION_27_1();
  OUTLINED_FUNCTION_28_1(v1, (uint64_t (*)(_QWORD))type metadata accessor for Signpost.OpenSignpost);
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_8_1(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_11_1();
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_37_0();
  v1 = OUTLINED_FUNCTION_27_1();
  OUTLINED_FUNCTION_28_1(v1, (uint64_t (*)(_QWORD))type metadata accessor for Signpost.OpenSignpost);
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_8_1(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_11_1();
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_37_0();
  v1 = OUTLINED_FUNCTION_27_1();
  OUTLINED_FUNCTION_28_1(v1, (uint64_t (*)(_QWORD))type metadata accessor for Signpost.OpenSignpost);
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_8_1(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ContactsDelegateFlow.getFlow(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t (*a12)(void), uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void (**v27)(_QWORD, _QWORD, _QWORD);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  char *v34;
  uint64_t v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  char *v41;
  uint64_t v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  char *v48;
  uint64_t v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(void), uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v62;
  uint64_t v63;
  os_log_type_t v64;
  _WORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t (*v69)();
  char v70;
  uint64_t v71;
  os_log_type_t v72;
  _WORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint64_t v81;
  uint8_t *v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  OUTLINED_FUNCTION_52_0();
  a23 = v28;
  a24 = v29;
  a22 = v25;
  v30 = (char *)v25[28];
  if (v30)
  {
    type metadata accessor for GetContactIntent();
    v31 = OUTLINED_FUNCTION_41_0();
    if (v31)
    {
      v32 = v31;
      v33 = one-time initialization token for siriContacts;
      v34 = v30;
      if (v33 != -1)
        swift_once();
      v35 = OUTLINED_FUNCTION_26();
      OUTLINED_FUNCTION_10_1(v35, (uint64_t)static Logger.siriContacts);
      v36 = OUTLINED_FUNCTION_8();
      if (OUTLINED_FUNCTION_42(v36))
      {
        v37 = (uint8_t *)OUTLINED_FUNCTION_2_1();
        *(_WORD *)v37 = 0;
        OUTLINED_FUNCTION_31(&dword_21FE16000, v33, (os_log_type_t)v26, "#ContactsDelegateFlow Returning GetContactFlow", v37);
        OUTLINED_FUNCTION_0();
      }
      OUTLINED_FUNCTION_46_0();
      OUTLINED_FUNCTION_39_0();
      v27[4](v32, v26, v27);
LABEL_20:

      OUTLINED_FUNCTION_6_0();
      OUTLINED_FUNCTION_37_0();
      v52 = OUTLINED_FUNCTION_27_1();
      OUTLINED_FUNCTION_28_1(v52, (uint64_t (*)(_QWORD))type metadata accessor for Signpost.OpenSignpost);
      OUTLINED_FUNCTION_5_1();
      OUTLINED_FUNCTION_21_0();
      OUTLINED_FUNCTION_13_0();
      OUTLINED_FUNCTION_17_0();
      OUTLINED_FUNCTION_12_0();
      OUTLINED_FUNCTION_36_0();
      OUTLINED_FUNCTION_31_1();
      return v54(v53, v54, v55, v56, v57, v58, v59, v60, a9, a10, a11, a12, a13, a14, a15, a16);
    }
    type metadata accessor for GetContactAttributeIntent();
    v38 = OUTLINED_FUNCTION_41_0();
    if (v38)
    {
      v39 = v38;
      v40 = one-time initialization token for siriContacts;
      v41 = v30;
      if (v40 != -1)
        swift_once();
      v42 = OUTLINED_FUNCTION_26();
      OUTLINED_FUNCTION_10_1(v42, (uint64_t)static Logger.siriContacts);
      v43 = OUTLINED_FUNCTION_8();
      if (OUTLINED_FUNCTION_42(v43))
      {
        v44 = (uint8_t *)OUTLINED_FUNCTION_2_1();
        *(_WORD *)v44 = 0;
        OUTLINED_FUNCTION_31(&dword_21FE16000, v40, (os_log_type_t)v26, "#ContactsDelegateFlow Returning GetContactAttributeFlow", v44);
        OUTLINED_FUNCTION_0();
      }
      OUTLINED_FUNCTION_46_0();
      OUTLINED_FUNCTION_39_0();
      v27[5](v39, v26, v27);
      goto LABEL_20;
    }
    type metadata accessor for ModifyContactAttributeIntent();
    v45 = OUTLINED_FUNCTION_41_0();
    if (v45)
    {
      v46 = v45;
      v47 = one-time initialization token for siriContacts;
      v48 = v30;
      if (v47 != -1)
        swift_once();
      v49 = OUTLINED_FUNCTION_26();
      OUTLINED_FUNCTION_10_1(v49, (uint64_t)static Logger.siriContacts);
      v50 = OUTLINED_FUNCTION_8();
      if (OUTLINED_FUNCTION_42(v50))
      {
        v51 = (uint8_t *)OUTLINED_FUNCTION_2_1();
        *(_WORD *)v51 = 0;
        OUTLINED_FUNCTION_31(&dword_21FE16000, v47, (os_log_type_t)v26, "#ContactsDelegateFlow Returning ModifyContactAttributeFlow)", v51);
        OUTLINED_FUNCTION_0();
      }
      OUTLINED_FUNCTION_46_0();
      OUTLINED_FUNCTION_39_0();
      v27[6](v46, v26, v27);
      goto LABEL_20;
    }
  }
  Parse.isLearnPronunciation.getter();
  if ((v62 & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v63 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v63, (uint64_t)static Logger.siriContacts);
    v64 = OUTLINED_FUNCTION_8();
    if (OUTLINED_FUNCTION_15_0(v64))
    {
      v65 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_54_0(v65);
      OUTLINED_FUNCTION_10_0(&dword_21FE16000, v66, v67, "#ContactsDelegateFlow Returning UnsupportedLearnPronunciationFlow");
      OUTLINED_FUNCTION_0();
    }
    OUTLINED_FUNCTION_64_0();
    __swift_project_boxed_opaque_existential_1(&v30[v24], *(_QWORD *)&v30[v24 + 24]);
    v68 = (_QWORD *)OUTLINED_FUNCTION_22_1();
    v25[29] = v68;
    v69 = ContactsDelegateFlow.getFlow(for:);
  }
  else
  {
    Parse.isRequestForMultipleContacts.getter();
    if ((v70 & 1) != 0)
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v71 = OUTLINED_FUNCTION_26();
      OUTLINED_FUNCTION_10_1(v71, (uint64_t)static Logger.siriContacts);
      v72 = OUTLINED_FUNCTION_8();
      if (OUTLINED_FUNCTION_15_0(v72))
      {
        v73 = (_WORD *)OUTLINED_FUNCTION_2_1();
        OUTLINED_FUNCTION_54_0(v73);
        OUTLINED_FUNCTION_10_0(&dword_21FE16000, v74, v75, "#ContactsDelegateFlow Returning UnsupportedRequestForMultipleContacts Flow");
        OUTLINED_FUNCTION_0();
      }
      OUTLINED_FUNCTION_64_0();
      __swift_project_boxed_opaque_existential_1(&v30[v24], *(_QWORD *)&v30[v24 + 24]);
      v68 = (_QWORD *)OUTLINED_FUNCTION_22_1();
      v25[32] = v68;
      v69 = ContactsDelegateFlow.getFlow(for:);
    }
    else
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v77 = v25[18];
      v76 = v25[19];
      v78 = OUTLINED_FUNCTION_26();
      __swift_project_value_buffer(v78, (uint64_t)static Logger.siriContacts);
      OUTLINED_FUNCTION_69_0(v76, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 16));
      v79 = Logger.logObject.getter();
      v80 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v79, v80))
      {
        v81 = v25[19];
        v88 = v25[18];
        v89 = v25[17];
        v82 = (uint8_t *)OUTLINED_FUNCTION_1();
        a13 = OUTLINED_FUNCTION_1();
        *(_DWORD *)v82 = 136315138;
        Input.parse.getter();
        v83 = OUTLINED_FUNCTION_60_0();
        v25[14] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v84, &a13);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v81, v89);
        OUTLINED_FUNCTION_43_0(&dword_21FE16000, v79, v80, "#ContactsDelegateFlow Falling back to UnsupportedActionFlow for parse: %s", v82);
        OUTLINED_FUNCTION_16();
        OUTLINED_FUNCTION_0();
      }
      (*(void (**)(_QWORD, _QWORD))(v25[18] + 8))(v25[19], v25[17]);

      v85 = (_QWORD *)(v25[16] + v25[26]);
      __swift_project_boxed_opaque_existential_1(v85, v85[3]);
      v68 = (_QWORD *)OUTLINED_FUNCTION_22_1();
      v25[35] = v68;
      v69 = ContactsDelegateFlow.getFlow(for:);
    }
  }
  v86 = OUTLINED_FUNCTION_68_0(v68, (uint64_t)v69);
  return OUTLINED_FUNCTION_20_1(v86, v87, a12);
}

uint64_t ContactsDelegateFlow.deinit()
{
  uint64_t v0;

  outlined destroy of ContactsFlowState(v0 + OBJC_IVAR____TtC19SiriContactsIntents20ContactsDelegateFlow_flowState, type metadata accessor for ContactsFlowState);
  __swift_destroy_boxed_opaque_existential_0(v0 + OBJC_IVAR____TtC19SiriContactsIntents20ContactsDelegateFlow_flowFactory);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ContactsDelegateFlow.__deallocating_deinit()
{
  ContactsDelegateFlow.deinit();
  return swift_deallocClassInstance();
}

BOOL protocol witness for Flow.on(input:) in conformance ContactsDelegateFlow(uint64_t a1)
{
  return ContactsDelegateFlow.on(input:)(a1);
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance ContactsDelegateFlow()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for Flow.onAsync(input:) in conformance ContactsDelegateFlow;
  return Flow.onAsync(input:)();
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance ContactsDelegateFlow(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_25_1();
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(a1);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance ContactsDelegateFlow()
{
  return ContactsDelegateFlow.execute(completion:)();
}

uint64_t protocol witness for Flow.execute() in conformance ContactsDelegateFlow(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for Flow.execute() in conformance ContactsDelegateFlow;
  return ContactsDelegateFlow.execute()(a1);
}

uint64_t protocol witness for Flow.execute() in conformance ContactsDelegateFlow()
{
  uint64_t v0;

  OUTLINED_FUNCTION_25_1();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for Flow.exitValue.getter in conformance ContactsDelegateFlow()
{
  type metadata accessor for ContactsDelegateFlow(0);
  return Flow<>.exitValue.getter();
}

uint64_t outlined init with copy of ContactsFlowState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ContactsFlowState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of ContactsFlowState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ContactsFlowState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ContactsDelegateFlow(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for ContactsDelegateFlow);
}

uint64_t type metadata accessor for ContactsFlowState(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t lazy protocol witness table accessor for type ContactsDelegateFlow and conformance ContactsDelegateFlow()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ContactsDelegateFlow and conformance ContactsDelegateFlow;
  if (!lazy protocol witness table cache variable for type ContactsDelegateFlow and conformance ContactsDelegateFlow)
  {
    v1 = type metadata accessor for ContactsDelegateFlow(255);
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactsDelegateFlow, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsDelegateFlow and conformance ContactsDelegateFlow);
  }
  return result;
}

uint64_t sub_21FE20E10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = OUTLINED_FUNCTION_38_0();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ContactsDelegateFlow.execute()(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(OUTLINED_FUNCTION_38_0() - 8) + 80);
  return closure #1 in ContactsDelegateFlow.execute()(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

uint64_t ObjC metadata update function for ContactsDelegateFlow()
{
  return type metadata accessor for ContactsDelegateFlow(0);
}

uint64_t type metadata completion function for ContactsDelegateFlow()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ContactsFlowState(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for ContactsDelegateFlow()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ContactsDelegateFlow.__allocating_init(flowFactory:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of ContactsDelegateFlow.on(input:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of ContactsDelegateFlow.execute(completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of ContactsDelegateFlow.execute()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 152) + *(_QWORD *)(*(_QWORD *)v1 + 152));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return v6(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for ContactsFlowState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  else
  {
    v8 = type metadata accessor for Input();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for ContactsFlowState(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if (result <= 1)
  {
    v3 = type metadata accessor for Input();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
  return result;
}

void *initializeWithCopy for ContactsFlowState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for Input();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithCopy for ContactsFlowState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of ContactsFlowState((uint64_t)a1, type metadata accessor for ContactsFlowState);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for Input();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *initializeWithTake for ContactsFlowState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload() > 1)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for Input();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for ContactsFlowState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of ContactsFlowState((uint64_t)a1, type metadata accessor for ContactsFlowState);
    if (swift_getEnumCaseMultiPayload() > 1)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for Input();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destructiveInjectEnumTag for ContactsFlowState()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for ContactsFlowState()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Input();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x2207D86A8](MEMORY[0x24BDCFB50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x2207D86A8](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x2207D86A8](MEMORY[0x24BEE0D18], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x2207D86A8](MEMORY[0x24BEE5E60], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t outlined destroy of ContactsFlowState(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t OUTLINED_FUNCTION_2_1()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_5_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_6_0()
{
  return static os_signpost_type_t.end.getter();
}

uint64_t OUTLINED_FUNCTION_7_1(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_8_1(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_10_1(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return Logger.logObject.getter();
}

void OUTLINED_FUNCTION_11_1()
{
  uint64_t v0;

}

uint64_t OUTLINED_FUNCTION_13_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_14_1()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_19_1(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_20_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t OUTLINED_FUNCTION_21_1(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_22_1()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_25_1()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_27_1()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OUTLINED_FUNCTION_28_1(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  return outlined destroy of ContactsFlowState(v2, a2);
}

uint64_t OUTLINED_FUNCTION_30_1()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_32_1()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_35_0(float a1)
{
  float *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = a1;
  return outlined init with copy of ContactsFlowState(v3, v2);
}

uint64_t OUTLINED_FUNCTION_36_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_38_0()
{
  return type metadata accessor for Input();
}

_QWORD *OUTLINED_FUNCTION_39_0()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + v0), *(_QWORD *)(v1 + v0 + 24));
}

void OUTLINED_FUNCTION_40_0()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_41_0()
{
  return swift_dynamicCastClass();
}

void OUTLINED_FUNCTION_43_0(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_44_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_45_0()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_46_0()
{
  void *v0;

}

void OUTLINED_FUNCTION_48_0()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

void OUTLINED_FUNCTION_49_0()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_50_0()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_51_0()
{
  return swift_storeEnumTagMultiPayload();
}

_WORD *OUTLINED_FUNCTION_54_0(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_57_0()
{
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_58_0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_59_0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_60_0()
{
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_62_0()
{
  return static ExecuteResponse.complete(next:)();
}

void OUTLINED_FUNCTION_63_0()
{
  uint64_t v0;

}

void OUTLINED_FUNCTION_64_0()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_65_0()
{
  uint64_t v0;
  uint64_t v1;

  return outlined assign with take of ContactsFlowState(v1, v0);
}

_QWORD *OUTLINED_FUNCTION_66_0(_QWORD *a1)
{
  return __swift_project_boxed_opaque_existential_1(a1, a1[3]);
}

uint64_t OUTLINED_FUNCTION_67_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_68_0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t OUTLINED_FUNCTION_69_0@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

uint64_t GetContactHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for SiriKitIntentHandler();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t GetContactHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  id v13;
  uint64_t v14;

  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.siriContacts);
  Logger.logObject.getter();
  v3 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_15_0(v3))
  {
    *(_WORD *)OUTLINED_FUNCTION_1() = 0;
    OUTLINED_FUNCTION_47_0(&dword_21FE16000, v2, v4, "#GetContactHandleIntentStrategy makeIntentExecutionBehavior");
    OUTLINED_FUNCTION_0();
  }

  type metadata accessor for SiriKitIntentExecutionBehavior();
  v5 = one-time initialization token for current;
  swift_retain();
  if (v5 != -1)
    swift_once();
  v7 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v9 = *(void **)(v0 + 24);
  v8 = *(_QWORD *)(v0 + 32);
  v10 = static ContactService.current;
  type metadata accessor for ContactResolver();
  OUTLINED_FUNCTION_32_0();
  swift_retain();
  v11 = ContactResolver.init()();
  v12 = objc_allocWithZone((Class)type metadata accessor for GetContactIntentHandler());
  specialized BaseIntentHandler.init(contactService:contactResolver:)(v10, v11, v12);
  type metadata accessor for GetContactIntent();
  v13 = v9;
  SiriKitIntentHandler.init<A>(app:intentHandler:intent:)();
  v14 = static SiriKitIntentExecutionBehavior.embeddedIntentHandler(intentHandler:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  OUTLINED_FUNCTION_13_0();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v14);
}

uint64_t GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ContactSnippetModel;
  uint64_t ContactDirectInvocationsModel;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3[26] = a2;
  v3[27] = v2;
  v3[25] = a1;
  type metadata accessor for DialogPhase();
  v3[28] = OUTLINED_FUNCTION_0_0();
  v4 = type metadata accessor for OutputGenerationManifest();
  v3[29] = v4;
  v3[30] = *(_QWORD *)(v4 - 8);
  v3[31] = OUTLINED_FUNCTION_0_0();
  v5 = type metadata accessor for ContactsSnippetPluginModel();
  v3[32] = v5;
  v3[33] = *(_QWORD *)(v5 - 8);
  v3[34] = OUTLINED_FUNCTION_0_0();
  v6 = type metadata accessor for ContactsSnippetFlowState();
  v3[35] = v6;
  v3[36] = *(_QWORD *)(v6 - 8);
  v3[37] = OUTLINED_FUNCTION_0_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableContact<CNContact>);
  v3[38] = OUTLINED_FUNCTION_0_0();
  ContactSnippetModel = type metadata accessor for GetContactSnippetModel();
  v3[39] = ContactSnippetModel;
  v3[40] = *(_QWORD *)(ContactSnippetModel - 8);
  v3[41] = OUTLINED_FUNCTION_0_0();
  ContactDirectInvocationsModel = type metadata accessor for GetContactDirectInvocationsModel();
  v3[42] = ContactDirectInvocationsModel;
  v3[43] = *(_QWORD *)(ContactDirectInvocationsModel - 8);
  v3[44] = OUTLINED_FUNCTION_9_1();
  v3[45] = OUTLINED_FUNCTION_25_0();
  v9 = type metadata accessor for Locale();
  v3[46] = v9;
  v3[47] = *(_QWORD *)(v9 - 8);
  v3[48] = OUTLINED_FUNCTION_0_0();
  v10 = type metadata accessor for ContactsLabelCATContainer();
  v3[49] = v10;
  v3[50] = *(_QWORD *)(v10 - 8);
  v3[51] = OUTLINED_FUNCTION_9_1();
  v3[52] = OUTLINED_FUNCTION_25_0();
  v11 = type metadata accessor for ContactsLabelCATContainer.LabelType();
  v3[53] = v11;
  v3[54] = *(_QWORD *)(v11 - 8);
  v3[55] = OUTLINED_FUNCTION_0_0();
  v12 = type metadata accessor for TemplatingText();
  v3[56] = v12;
  v3[57] = *(_QWORD *)(v12 - 8);
  v3[58] = OUTLINED_FUNCTION_0_0();
  v13 = type metadata accessor for TemplatingResult();
  v3[59] = v13;
  v3[60] = *(_QWORD *)(v13 - 8);
  v3[61] = OUTLINED_FUNCTION_9_1();
  v3[62] = OUTLINED_FUNCTION_25_0();
  v3[63] = OUTLINED_FUNCTION_25_0();
  v3[64] = OUTLINED_FUNCTION_25_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingSection?);
  v3[65] = OUTLINED_FUNCTION_9_1();
  v3[66] = OUTLINED_FUNCTION_25_0();
  v3[67] = OUTLINED_FUNCTION_25_0();
  type metadata accessor for CATOption();
  v3[68] = OUTLINED_FUNCTION_0_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[69] = OUTLINED_FUNCTION_0_0();
  v14 = type metadata accessor for NLContextUpdate();
  v3[70] = v14;
  v3[71] = *(_QWORD *)(v14 - 8);
  v3[72] = OUTLINED_FUNCTION_0_0();
  v3[73] = type metadata accessor for Signpost.OpenSignpost();
  v3[74] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *ContactAttributeIntent;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char v30;
  _BOOL4 ContactHandleIntent;
  uint64_t v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  NSObject *v42;
  id v43;
  os_log_type_t v44;
  uint8_t *v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t *v53;
  void *v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  id v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  _OWORD v79[2];
  uint64_t v80;

  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v1 = *(_QWORD *)(v0 + 592);
  v2 = *(_QWORD *)(v0 + 584);
  v3 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_53_0();
  v4 = *(int *)(v2 + 20);
  *(_DWORD *)(v0 + 864) = v4;
  v5 = v1 + v4;
  *(_QWORD *)v5 = "MakeGetContactIntentHandledResponse";
  *(_QWORD *)(v5 + 8) = 35;
  *(_BYTE *)(v5 + 16) = 2;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.siriContacts);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    *(_WORD *)OUTLINED_FUNCTION_1() = 0;
    OUTLINED_FUNCTION_47_0(&dword_21FE16000, v7, v9, "#GetContactHandleIntentStrategy makeIntentHandledResponse");
    OUTLINED_FUNCTION_0();
  }

  *(_QWORD *)(v0 + 600) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<GetContactIntent, GetContactIntentResponse>);
  v10 = (void *)IntentResolutionRecord.intentResponse.getter();
  ContactAttributeIntent = (_QWORD *)outlined bridged method (ob) of @objc GetContactAttributeIntentResponse.contactIdentifiers.getter(v10);
  if (!ContactAttributeIntent)
    goto LABEL_14;
  if (!ContactAttributeIntent[2])
  {
    OUTLINED_FUNCTION_55_1();
LABEL_14:
    v25 = OUTLINED_FUNCTION_77_0();
    v26 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_15_0(v26))
    {
      *(_WORD *)OUTLINED_FUNCTION_1() = 0;
      OUTLINED_FUNCTION_47_0(&dword_21FE16000, v25, v27, "#GetContactHandleIntentStrategy found no contactIdentifiers in intent response, throwing exception");
      OUTLINED_FUNCTION_0();
    }

    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (uint64_t (*)(uint64_t))type metadata accessor for ContactsError, (uint64_t)&protocol conformance descriptor for ContactsError);
    OUTLINED_FUNCTION_76_0();
    goto LABEL_28;
  }
  v13 = ContactAttributeIntent[4];
  v12 = ContactAttributeIntent[5];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_55_1();
  v14 = (void *)IntentResolutionRecord.intent.getter();
  v15 = objc_msgSend(v14, sel_isMe);

  if (v15 && (v16 = objc_msgSend(v15, sel_BOOLValue), v15, v16))
  {
    v17 = *(_QWORD **)(v0 + 216);
    v18 = v17[10];
    v19 = v17[11];
    __swift_project_boxed_opaque_existential_1(v17 + 7, v18);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 24))(v18, v19);
    v21 = 1;
  }
  else
  {
    v22 = *(_QWORD **)(v0 + 216);
    v23 = v22[10];
    v24 = v22[11];
    OUTLINED_FUNCTION_91(v22 + 7, v23);
    LOBYTE(v19) = 0;
    v20 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v24 + 8))(v13, v12, v23, v24);
    v21 = 0;
  }
  *(_BYTE *)(v0 + 885) = v21;
  *(_QWORD *)(v0 + 608) = v20;
  if (!v20)
  {
    swift_bridgeObjectRetain_n();
    v50 = OUTLINED_FUNCTION_77_0();
    v51 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_3(v51))
    {
      v52 = (uint8_t *)OUTLINED_FUNCTION_1();
      *(_QWORD *)&v79[0] = OUTLINED_FUNCTION_1();
      *(_DWORD *)v52 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 192) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v12, (uint64_t *)v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_21FE16000, v50, (os_log_type_t)v19, "#GetContactHandleIntentStrategy failed to fetch contact for identifier: %s, throwing exception", v52, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_0();
    }
    swift_bridgeObjectRelease_n();

    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (uint64_t (*)(uint64_t))type metadata accessor for ContactsError, (uint64_t)&protocol conformance descriptor for ContactsError);
    OUTLINED_FUNCTION_76_0();
    *v53 = v13;
    v53[1] = v12;
LABEL_28:
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost(*(_QWORD *)(v0 + 592));
    OUTLINED_FUNCTION_24_0();
    OUTLINED_FUNCTION_23_0();
    OUTLINED_FUNCTION_22_0();
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_45_0();
    OUTLINED_FUNCTION_17_0();
    OUTLINED_FUNCTION_12_0();
    swift_task_dealloc();
    OUTLINED_FUNCTION_33_0();
    OUTLINED_FUNCTION_32_2();
    OUTLINED_FUNCTION_31_2();
    OUTLINED_FUNCTION_30_2();
    OUTLINED_FUNCTION_29_1();
    OUTLINED_FUNCTION_28_2();
    OUTLINED_FUNCTION_27_2();
    OUTLINED_FUNCTION_26_1();
    OUTLINED_FUNCTION_25_2();
    OUTLINED_FUNCTION_24_2();
    OUTLINED_FUNCTION_23_1();
    OUTLINED_FUNCTION_21_2();
    OUTLINED_FUNCTION_20_2();
    swift_task_dealloc();
    goto LABEL_29;
  }
  v28 = *(_QWORD *)(v0 + 216);
  v29 = (void *)v20;
  v30 = OUTLINED_FUNCTION_58_1();
  v78 = v29;
  static ContactsContextProvider.handleGetContact(contact:needsSDA:)(v29, v30 & 1);
  ContactHandleIntent = GetContactHandleIntentStrategy.shouldAuthStateAllowPunchout()();
  if ((OUTLINED_FUNCTION_58_1() & 1) != 0
    || (v32 = *(_QWORD *)(v28 + 40),
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v28 + 16), v32),
        (DeviceState.supportsCompactView.getter(v32) & ContactHandleIntent & 1) == 0))
  {
    v36 = swift_bridgeObjectRelease();
  }
  else
  {
    v33 = (void *)(*(_QWORD *)(v0 + 216) + 168);
    AppUtil.buildPunchoutFor(contactIdentifier:)();
    v35 = v34;
    v36 = swift_bridgeObjectRelease();
    if (v35)
    {
      OUTLINED_FUNCTION_77_0();
      v37 = OUTLINED_FUNCTION_8();
      if (OUTLINED_FUNCTION_3(v37))
      {
        *(_WORD *)OUTLINED_FUNCTION_1() = 0;
        OUTLINED_FUNCTION_70_0(&dword_21FE16000, v38, v39, "#GetContactHandleIntentStrategy SiriKitEventSender Sending UUFR ready for contact app punchout.");
        OUTLINED_FUNCTION_0();
      }
      v40 = *(_QWORD *)(v0 + 216);

      v41 = __swift_project_boxed_opaque_existential_1((_QWORD *)(v40 + 208), *(_QWORD *)(v40 + 232));
      type metadata accessor for SiriKitEvent();
      static SiriKitEvent.uufrReady()();
      v42 = v41;
      dispatch thunk of SiriKitEventSending.send(_:)();
      swift_release();
      v43 = v35;
      OUTLINED_FUNCTION_77_0();
      v44 = OUTLINED_FUNCTION_8();
      if (os_log_type_enabled(v41, v44))
      {
        v45 = (uint8_t *)OUTLINED_FUNCTION_1();
        *(_QWORD *)&v79[0] = OUTLINED_FUNCTION_1();
        *(_DWORD *)v45 = 136315138;
        v46 = objc_msgSend(v43, sel_description);
        v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v49 = v48;

        *(_QWORD *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v49, (uint64_t *)v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_21FE16000, v42, v44, "#GetContactHandleIntentStrategy Constructed intent handled response for iOS, returning punchout for contact: %s.", v45, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_0();
      }

      v69 = *(_QWORD *)(v0 + 576);
      v70 = *(_QWORD *)(v0 + 568);
      v71 = *(_QWORD *)(v0 + 560);
      v72 = *(_QWORD *)(v0 + 552);
      v73 = *(uint64_t **)(v0 + 200);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v74 = OUTLINED_FUNCTION_55();
      *(_OWORD *)(v74 + 16) = xmmword_21FED8AB0;
      *(_QWORD *)(v74 + 32) = v43;
      specialized Array._endMutation()();
      v80 = 0;
      memset(v79, 0, sizeof(v79));
      OUTLINED_FUNCTION_95(v72, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v70 + 16));
      __swift_storeEnumTagSinglePayload(v72, 0, 1, v71);
      v75 = type metadata accessor for AceOutput();
      v76 = MEMORY[0x24BE99088];
      v73[3] = v75;
      v73[4] = v76;
      __swift_allocate_boxed_opaque_existential_1(v73);
      AceOutput.init(commands:flowActivity:nlContextUpdate:)();

      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v69, v71);
      v77 = *(_QWORD *)(v0 + 592);
      static os_signpost_type_t.end.getter();
      os_signpost(_:dso:log:name:signpostID:)();
      outlined destroy of Signpost.OpenSignpost(v77);
      OUTLINED_FUNCTION_13_0();
      OUTLINED_FUNCTION_45_0();
      OUTLINED_FUNCTION_17_0();
      OUTLINED_FUNCTION_12_0();
      OUTLINED_FUNCTION_21_0();
      OUTLINED_FUNCTION_14_0();
      OUTLINED_FUNCTION_22_0();
      OUTLINED_FUNCTION_23_0();
      swift_task_dealloc();
      OUTLINED_FUNCTION_33_0();
      OUTLINED_FUNCTION_32_2();
      OUTLINED_FUNCTION_31_2();
      OUTLINED_FUNCTION_30_2();
      OUTLINED_FUNCTION_29_1();
      OUTLINED_FUNCTION_28_2();
      OUTLINED_FUNCTION_27_2();
      OUTLINED_FUNCTION_26_1();
      OUTLINED_FUNCTION_25_2();
      OUTLINED_FUNCTION_24_2();
      OUTLINED_FUNCTION_23_1();
      OUTLINED_FUNCTION_21_2();
      OUTLINED_FUNCTION_20_2();
      swift_task_dealloc();
      swift_task_dealloc();
LABEL_29:
      OUTLINED_FUNCTION_19_2();
      __asm { BR              X0 }
    }
  }
  v55 = *(void **)(v0 + 216);
  if ((specialized ContactsStrategy.isSmartEnabled.getter(v36) & 1) != 0)
  {
    OUTLINED_FUNCTION_77_0();
    v56 = OUTLINED_FUNCTION_8();
    if (OUTLINED_FUNCTION_3(v56))
    {
      *(_WORD *)OUTLINED_FUNCTION_1() = 0;
      OUTLINED_FUNCTION_70_0(&dword_21FE16000, v57, v58, "#GetContactHandleIntentStrategy makeIntentHandledResponse constructing SMART snippet");
      OUTLINED_FUNCTION_0();
    }

    type metadata accessor for ContactsLabelCATsModern();
    static CATOption.defaultMode.getter();
    *(_QWORD *)(v0 + 616) = CATWrapperSimple.__allocating_init(options:globals:)();
    *(_QWORD *)(v0 + 624) = CNContact.toDialogPerson(useConversationalName:)();
    v59 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 632) = v59;
    *v59 = v0;
    v59[1] = GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    OUTLINED_FUNCTION_19_2();
    return ContactsLabelCATsModern.quickActionButtonLabels(contact:)(v60);
  }
  else
  {
    type metadata accessor for DialogPerson();
    OUTLINED_FUNCTION_91((_QWORD *)(v28 + 16), *(_QWORD *)(v28 + 40));
    v62 = v29;
    dispatch thunk of DeviceState.siriLocale.getter();
    OUTLINED_FUNCTION_65_1(v62);
    *(_QWORD *)(v0 + 832) = v63;
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v28 + 16), *(_QWORD *)(v28 + 40));
    OUTLINED_FUNCTION_100();
    *(_QWORD *)(v0 + 840) = DeviceState.toSiriKitDeviceState.getter();
    v64 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 848) = v64;
    *v64 = v0;
    v64[1] = GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    OUTLINED_FUNCTION_19_2();
    return GetContactCATs.intentHandledResponse(isMe:requestedContact:device:)(v65, v66, v67, v68);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_41_1();
  *(_QWORD *)(v0 + 640) = v2;
  *(_QWORD *)(v0 + 648) = v1;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, unint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  id v59;
  uint64_t v60;
  _QWORD *v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v1 = *(_QWORD *)(v0 + 432);
  v97 = *(_QWORD *)(v0 + 216);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(ContactsLabelCATContainer.LabelType, String)>);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ContactsLabelCATContainer.LabelType, String));
  v3 = (*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_21FED8DB0;
  v5 = v4 + v3;
  v6 = (uint64_t *)(v5 + *(int *)(v2 + 48));
  v7 = *MEMORY[0x24BE91BD8];
  *(_DWORD *)(v0 + 868) = v7;
  *(_QWORD *)(v0 + 656) = *(_QWORD *)(v1 + 104);
  OUTLINED_FUNCTION_71_0(v5, v7);
  *(_BYTE *)(v0 + 883) = 1;
  *v6 = dispatch thunk of LabelExecutionResult.subscript.getter();
  v6[1] = v8;
  OUTLINED_FUNCTION_101();
  v9 = *MEMORY[0x24BE91BD0];
  *(_DWORD *)(v0 + 872) = v9;
  OUTLINED_FUNCTION_71_0(v10, v9);
  *(_BYTE *)(v0 + 880) = 7;
  *(_QWORD *)(v0 + 883) = dispatch thunk of LabelExecutionResult.subscript.getter();
  *(_QWORD *)(v0 + 891) = v11;
  OUTLINED_FUNCTION_101();
  v12 = *MEMORY[0x24BE91BE0];
  *(_DWORD *)(v0 + 876) = v12;
  OUTLINED_FUNCTION_71_0(v13, v12);
  *(_BYTE *)(v0 + 884) = 8;
  *(_QWORD *)(v0 + 883) = dispatch thunk of LabelExecutionResult.subscript.getter();
  *(_QWORD *)(v0 + 891) = v14;
  OUTLINED_FUNCTION_101();
  OUTLINED_FUNCTION_71_0(v15, *MEMORY[0x24BE91C08]);
  *(_BYTE *)(v0 + 881) = 9;
  *(_QWORD *)(v0 + 883) = dispatch thunk of LabelExecutionResult.subscript.getter();
  *(_QWORD *)(v0 + 891) = v16;
  OUTLINED_FUNCTION_101();
  OUTLINED_FUNCTION_71_0(v17, *MEMORY[0x24BE91BF8]);
  *(_BYTE *)(v0 + 882) = 14;
  *(_QWORD *)(v0 + 883) = dispatch thunk of LabelExecutionResult.subscript.getter();
  *(_QWORD *)(v0 + 891) = v18;
  lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsLabelCATContainer.LabelType and conformance ContactsLabelCATContainer.LabelType, (uint64_t (*)(uint64_t))MEMORY[0x24BE91C18], MEMORY[0x24BE91C28]);
  v19 = (_QWORD *)Dictionary.init(dictionaryLiteral:)();
  *(_QWORD *)(v0 + 664) = v19;
  v20 = *(_QWORD *)(v97 + 40);
  OUTLINED_FUNCTION_91((_QWORD *)(v97 + 16), v20);
  if ((dispatch thunk of DeviceState.isWatch.getter() & 1) != 0)
  {
    *(_QWORD *)(v0 + 672) = *(_QWORD *)(*(_QWORD *)(v0 + 216) + 104);
    v21 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 680) = v21;
    *v21 = v0;
    v21[1] = GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
    OUTLINED_FUNCTION_19_2();
    return ContactsLabelCATs.phone()();
  }
  else
  {
    v23 = *(void **)(v0 + 608);
    OUTLINED_FUNCTION_90();
    v24 = *(_QWORD *)(v0 + 376);
    v67 = *(_QWORD *)(v0 + 368);
    v69 = v25;
    v71 = *(_QWORD *)(v0 + 360);
    OUTLINED_FUNCTION_37_1();
    v95 = v26;
    v73 = *(_QWORD *)(v0 + 304);
    OUTLINED_FUNCTION_50_1();
    v94 = v27;
    v28 = *(_QWORD **)(v0 + 216);
    v96 = *(_QWORD *)(v0 + 256);
    v29 = v28[13];
    OUTLINED_FUNCTION_91(v28 + 2, v28[5]);
    v30 = v23;
    swift_retain();
    OUTLINED_FUNCTION_85();
    v31 = Locale.identifier.getter();
    v33 = v32;
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v20, v67);
    v34 = v69;
    ContactsLabelCATContainer.init(labels:contact:labelMapper:siriLocale:)(v19, v30, v29, v31, v33, v69);
    v35 = v30;
    GetContactDirectInvocationsModel.init(contact:)(v35, v71);
    type metadata accessor for CNContact();
    v36 = v35;
    CodableContact.init(wrappedValue:)();
    (*(void (**)(uint64_t, unint64_t))(v75 + 16))(v79, v71);
    v37 = (*(uint64_t (**)(uint64_t, _QWORD))(v77 + 104))(v83, *MEMORY[0x24BE91BB8]);
    v45 = OUTLINED_FUNCTION_106(v37, v38, v39, v40, v41, v42, v43, v44, v65, v67, v69, v71, v73, v75, v77, v79, v81, v83, v85,
            v87,
            v89,
            v91,
            v93);
    v46(v45, v34);
    v47 = v88;
    v48 = GetContactSnippetModel.init(contact:directInvocationsModel:flowState:labelCATs:)();
    v56 = OUTLINED_FUNCTION_103(v48, v49, v50, v51, v52, v53, v54, v55, v66, v68, v70, v72, v74, v76, v78, v80, v82, v84, v86,
            v88,
            v90,
            v92);
    v57(v56, v47, v95);
    (*(void (**)(id, _QWORD, uint64_t))(v94 + 104))(v35, *MEMORY[0x24BE91C70], v96);
    type metadata accessor for GetContactCATsModern();
    type metadata accessor for CATGlobals();
    outlined init with copy of DeviceState((uint64_t)(v28 + 2), v0 + 144);
    CATGlobals.__allocating_init(device:)();
    static CATOption.defaultMode.getter();
    v58 = CATWrapperSimple.__allocating_init(options:globals:)();
    OUTLINED_FUNCTION_82(v58);
    __swift_project_boxed_opaque_existential_1(v28 + 2, v28[5]);
    v59 = v36;
    OUTLINED_FUNCTION_85();
    DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v59, 0, v20, 0);
    *(_QWORD *)(v0 + 768) = v60;
    __swift_project_boxed_opaque_existential_1(v28 + 2, v28[5]);
    *(_QWORD *)(v0 + 776) = DeviceState.toSiriKitDeviceState.getter();
    v61 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 784) = v61;
    OUTLINED_FUNCTION_54_1(v61, (uint64_t)GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:));
    OUTLINED_FUNCTION_19_2();
    return GetContactCATsModern.intentHandledResponse(isMe:requestedContact:device:)(v62, v63, v64);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  OUTLINED_FUNCTION_41_1();
  OUTLINED_FUNCTION_87(v2);
  *(_QWORD *)(v0 + 688) = v1;
  swift_task_dealloc();
  if (v1)
    swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t (*v38)(uint64_t, _QWORD, uint64_t);
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 536);
  v2 = *(_QWORD *)(v0 + 512);
  v3 = *(_QWORD *)(v0 + 480);
  v4 = TemplatingResult.sections.getter();
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v0 + 696) = v5;
  OUTLINED_FUNCTION_92(v2, v5);
  specialized Collection.first.getter(v4, v1);
  OUTLINED_FUNCTION_96();
  v6 = type metadata accessor for TemplatingSection();
  *(_QWORD *)(v0 + 704) = v6;
  OUTLINED_FUNCTION_56_0();
  if (v7)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?(*(_QWORD *)(v0 + 536), &demangling cache variable for type metadata for TemplatingSection?);
    v22 = *(_QWORD *)(v0 + 664);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 664);
    v37 = *(_DWORD *)(v0 + 868);
    v9 = *(_QWORD *)(v0 + 536);
    OUTLINED_FUNCTION_61_0();
    OUTLINED_FUNCTION_92(v9, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8));
    v10 = OUTLINED_FUNCTION_114();
    v11 = OUTLINED_FUNCTION_52_1();
    OUTLINED_FUNCTION_78_0(v11, v12, v13, v14, v15, v16, v17, v18, v33, v35, v37, v38);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    OUTLINED_FUNCTION_110(v10, v20, v21, isUniquelyReferenced_nonNull_native);
    v22 = v8;
    v23 = OUTLINED_FUNCTION_59_1();
    OUTLINED_FUNCTION_74_0(v23, v24, v25, v26, v27, v28, v29, v30, v34, v36, v39, v40);
  }
  *(_QWORD *)(v0 + 712) = v22;
  v31 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 720) = v31;
  *v31 = v0;
  v31[1] = GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  return ContactsLabelCATs.email()();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  OUTLINED_FUNCTION_41_1();
  OUTLINED_FUNCTION_87(v2);
  *(_QWORD *)(v0 + 728) = v1;
  swift_task_dealloc();
  if (v1)
    swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t (*v33)(uint64_t, _QWORD, uint64_t);
  uint64_t v34;
  uint64_t v35;

  TemplatingResult.sections.getter();
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_98();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_56_0();
  if (v1)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?(*(_QWORD *)(v0 + 528), &demangling cache variable for type metadata for TemplatingSection?);
    v17 = *(_QWORD *)(v0 + 712);
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 712);
    v3 = *(_QWORD *)(v0 + 704);
    v32 = *(_DWORD *)(v0 + 876);
    v4 = *(_QWORD *)(v0 + 528);
    OUTLINED_FUNCTION_61_0();
    OUTLINED_FUNCTION_35_1(v4, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8));
    v5 = OUTLINED_FUNCTION_114();
    v6 = OUTLINED_FUNCTION_52_1();
    OUTLINED_FUNCTION_78_0(v6, v7, v8, v9, v10, v11, v12, v13, v28, v30, v32, v33);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    OUTLINED_FUNCTION_110(v5, v15, v16, isUniquelyReferenced_nonNull_native);
    v17 = v2;
    v18 = OUTLINED_FUNCTION_59_1();
    OUTLINED_FUNCTION_74_0(v18, v19, v20, v21, v22, v23, v24, v25, v29, v31, v34, v35);
  }
  *(_QWORD *)(v0 + 736) = v17;
  v26 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 744) = v26;
  *v26 = v0;
  v26[1] = GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  return ContactsLabelCATs.address()(*(_QWORD *)(v0 + 496));
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  OUTLINED_FUNCTION_41_1();
  OUTLINED_FUNCTION_87(v2);
  *(_QWORD *)(v0 + 752) = v1;
  swift_task_dealloc();
  if (v1)
    swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

{
  uint64_t v0;
  _QWORD *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, unint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  id v48;
  uint64_t v49;
  _QWORD *v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  void (*v88)(uint64_t, _QWORD, uint64_t);
  uint64_t v89;

  v1 = *(_QWORD **)(v0 + 704);
  TemplatingResult.sections.getter();
  OUTLINED_FUNCTION_83();
  OUTLINED_FUNCTION_98();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_56_0();
  if (v2)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?(*(_QWORD *)(v0 + 520), &demangling cache variable for type metadata for TemplatingSection?);
    v63 = *(_QWORD **)(v0 + 736);
  }
  else
  {
    v1 = *(_QWORD **)(v0 + 736);
    v3 = *(_QWORD *)(v0 + 704);
    v87 = *(_DWORD *)(v0 + 872);
    v4 = *(_QWORD *)(v0 + 520);
    v5 = *(_QWORD *)(v0 + 440);
    v6 = *(_QWORD *)(v0 + 424);
    v88 = *(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 656);
    v89 = *(_QWORD *)(v0 + 432);
    TemplatingSection.content.getter();
    OUTLINED_FUNCTION_35_1(v4, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8));
    v7 = OUTLINED_FUNCTION_114();
    v9 = v8;
    OUTLINED_FUNCTION_52_1();
    v88(v5, v87, v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, v9, v5, isUniquelyReferenced_nonNull_native);
    v63 = v1;
    OUTLINED_FUNCTION_59_1();
    OUTLINED_FUNCTION_99(*(uint64_t (**)(uint64_t, uint64_t))(v89 + 8));
  }
  v11 = *(void **)(v0 + 608);
  OUTLINED_FUNCTION_90();
  v12 = *(_QWORD *)(v0 + 368);
  v13 = *(_QWORD *)(v0 + 376);
  v57 = v14;
  v59 = *(_QWORD *)(v0 + 360);
  OUTLINED_FUNCTION_37_1();
  v85 = v15;
  v61 = *(_QWORD *)(v0 + 304);
  OUTLINED_FUNCTION_50_1();
  v84 = v16;
  v17 = *(_QWORD **)(v0 + 216);
  v86 = *(_QWORD *)(v0 + 256);
  v18 = v17[13];
  OUTLINED_FUNCTION_91(v17 + 2, v17[5]);
  v19 = v11;
  swift_retain();
  dispatch thunk of DeviceState.siriLocale.getter();
  v20 = Locale.identifier.getter();
  v22 = v21;
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v1, v12);
  v23 = v57;
  ContactsLabelCATContainer.init(labels:contact:labelMapper:siriLocale:)(v63, v19, v18, v20, v22, v57);
  v24 = v19;
  GetContactDirectInvocationsModel.init(contact:)(v24, v59);
  type metadata accessor for CNContact();
  v25 = v24;
  CodableContact.init(wrappedValue:)();
  (*(void (**)(uint64_t, unint64_t))(v65 + 16))(v69, v59);
  v26 = (*(uint64_t (**)(uint64_t, _QWORD))(v67 + 104))(v73, *MEMORY[0x24BE91BB8]);
  v34 = OUTLINED_FUNCTION_106(v26, v27, v28, v29, v30, v31, v32, v33, v55, v57, v59, v61, (uint64_t)v63, v65, v67, v69, v71, v73, v75,
          v77,
          v79,
          v81,
          v83);
  v35(v34, v23);
  v36 = v78;
  v37 = GetContactSnippetModel.init(contact:directInvocationsModel:flowState:labelCATs:)();
  v45 = OUTLINED_FUNCTION_103(v37, v38, v39, v40, v41, v42, v43, v44, v56, v58, v60, v62, v64, v66, v68, v70, v72, v74, v76,
          v78,
          v80,
          v82);
  v46(v45, v36, v85);
  (*(void (**)(id, _QWORD, uint64_t))(v84 + 104))(v24, *MEMORY[0x24BE91C70], v86);
  type metadata accessor for GetContactCATsModern();
  type metadata accessor for CATGlobals();
  outlined init with copy of DeviceState((uint64_t)(v17 + 2), v0 + 144);
  CATGlobals.__allocating_init(device:)();
  static CATOption.defaultMode.getter();
  v47 = CATWrapperSimple.__allocating_init(options:globals:)();
  OUTLINED_FUNCTION_82(v47);
  __swift_project_boxed_opaque_existential_1(v17 + 2, v17[5]);
  v48 = v25;
  dispatch thunk of DeviceState.siriLocale.getter();
  OUTLINED_FUNCTION_65_1(v48);
  *(_QWORD *)(v0 + 768) = v49;
  __swift_project_boxed_opaque_existential_1(v17 + 2, v17[5]);
  *(_QWORD *)(v0 + 776) = DeviceState.toSiriKitDeviceState.getter();
  v50 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 784) = v50;
  v51 = OUTLINED_FUNCTION_54_1(v50, (uint64_t)GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:));
  return GetContactCATsModern.intentHandledResponse(isMe:requestedContact:device:)(v51, v52, v53);
}

{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v8;
  id v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t *, uint64_t, uint64_t);
  uint64_t v14;

  v1 = (void *)v0[100];
  v2 = v0[72];
  v3 = v0[34];
  v12 = v0[33];
  v4 = v0[32];
  v5 = v0[27];
  static DialogPhase.completion.getter();
  v6 = (_QWORD *)swift_task_alloc();
  v6[2] = v5;
  v6[3] = v2;
  v6[4] = v3;
  OutputGenerationManifest.init(dialogPhase:_:)();
  OUTLINED_FUNCTION_12_0();
  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_32_0();
  v0[101] = ResponseFactory.init()();
  v0[11] = v4;
  v0[12] = lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type ContactsSnippetPluginModel and conformance ContactsSnippetPluginModel, (uint64_t (*)(uint64_t))MEMORY[0x24BE91C90], MEMORY[0x24BE91C68]);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 8);
  OUTLINED_FUNCTION_95((uint64_t)boxed_opaque_existential_1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v8 = OUTLINED_FUNCTION_55();
  *(_OWORD *)(v8 + 16) = xmmword_21FED8AB0;
  *(_QWORD *)(v8 + 32) = v1;
  v14 = v8;
  specialized Array._endMutation()();
  v0[102] = v14;
  v13 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))((int)*MEMORY[0x24BE97EE0] + MEMORY[0x24BE97EE0]);
  v9 = v1;
  v10 = (_QWORD *)swift_task_alloc();
  v0[103] = (uint64_t)v10;
  *v10 = v0;
  v10[1] = GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  return v13(v0[25], v0 + 8, v14, v0[31]);
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 + 64;
  swift_task_dealloc();
  OUTLINED_FUNCTION_67_1();
  OUTLINED_FUNCTION_5_0();
  __swift_destroy_boxed_opaque_existential_0(v1);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_14_1();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  OUTLINED_FUNCTION_41_1();
  OUTLINED_FUNCTION_87(v2);
  *(_QWORD *)(v0 + 856) = v1;
  swift_task_dealloc();
  if (v1)
  {
    OUTLINED_FUNCTION_67_1();
    OUTLINED_FUNCTION_49();
  }
  else
  {
    OUTLINED_FUNCTION_49();
    OUTLINED_FUNCTION_67_1();
  }
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_14_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_4_1();
  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v1 + 104);
  outlined init with copy of DeviceState(v1 + 16, v0 + 24);
  *(_QWORD *)(v0 + 16) = v2;
  swift_retain();
  v3 = (void *)IntentResolutionRecord.intent.getter();
  v4 = objc_msgSend(v3, sel_isMe);

  if (v4)
  {
    v5 = objc_msgSend(v4, sel_BOOLValue);

  }
  else
  {
    v5 = OS_LOG_TYPE_DEFAULT;
  }
  v16 = *(void **)(v0 + 608);
  v6 = *(_QWORD *)(v0 + 576);
  v7 = *(_QWORD *)(v0 + 568);
  v14 = *(_QWORD *)(v0 + 560);
  v8 = *(_QWORD *)(v0 + 552);
  v15 = *(_QWORD *)(v0 + 488);
  v17 = *(_QWORD *)(v0 + 480);
  v18 = *(_QWORD *)(v0 + 472);
  v9 = *(_QWORD *)(v0 + 216);
  v10 = *(uint64_t **)(v0 + 200);
  Views.buildViews(for:isMe:mockGlobals:)(v16, v5);
  outlined destroy of Views(v0 + 16);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v9 + 16), *(_QWORD *)(v9 + 40));
  OUTLINED_FUNCTION_100();
  DeviceState.isVox.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v8, v6, v14);
  __swift_storeEnumTagSinglePayload(v8, 0, 1, v14);
  v11 = type metadata accessor for AceOutput();
  *(_OWORD *)(v0 + 120) = 0u;
  *(_QWORD *)(v0 + 136) = 0;
  *(_OWORD *)(v0 + 104) = 0u;
  v12 = MEMORY[0x24BE99088];
  v10[3] = v11;
  v10[4] = v12;
  __swift_allocate_boxed_opaque_existential_1(v10);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();

  outlined destroy of UsoEntity_common_Person.DefinedValues?(v0 + 104, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v8, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v18);
  OUTLINED_FUNCTION_35_1(v6, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_111();
  outlined destroy of Signpost.OpenSignpost(v0 + 104);
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_43_1();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_1_0(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_46_1();
  OUTLINED_FUNCTION_10_2(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_84();
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_0_1(*(_QWORD *)(v0 + 648));
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_43_1();
  v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_73_0();
  return OUTLINED_FUNCTION_1_0(v2);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_7_2();

  OUTLINED_FUNCTION_10_2(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_84();
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_0_1(*(_QWORD *)(v0 + 688));
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_43_1();
  v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_73_0();
  return OUTLINED_FUNCTION_1_0(v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_7_2();

  OUTLINED_FUNCTION_10_2(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_84();
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_0_1(*(_QWORD *)(v0 + 728));
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_43_1();
  v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_73_0();
  return OUTLINED_FUNCTION_1_0(v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_7_2();

  OUTLINED_FUNCTION_10_2(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_84();
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_0_1(*(_QWORD *)(v0 + 752));
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_43_1();
  v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_73_0();
  return OUTLINED_FUNCTION_1_0(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_46_1();
  OUTLINED_FUNCTION_10_2(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_84();
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_0_1(*(_QWORD *)(v0 + 856));
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_43_1();
  v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_73_0();
  return OUTLINED_FUNCTION_1_0(v2);
}

uint64_t GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v6;

  v6 = *v2;
  v4 = v6;
  OUTLINED_FUNCTION_87(&v6);
  *(_QWORD *)(v4 + 792) = v1;
  swift_task_dealloc();
  if (v1)
  {
    OUTLINED_FUNCTION_49();
    swift_release();
    OUTLINED_FUNCTION_67_1();
  }
  else
  {
    swift_release();
    OUTLINED_FUNCTION_67_1();
    OUTLINED_FUNCTION_49();
    *(_QWORD *)(v4 + 800) = a1;
  }
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

#error "21FE236CC: call analysis failed (funcsize=74)"

#error "21FE23DBC: call analysis failed (funcsize=68)"

uint64_t ContactsLabelCATContainer.init(labels:contact:labelMapper:siriLocale:)@<X0>(_QWORD *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  id v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  objc_class *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  id v30;
  char v31;
  BOOL v32;
  char v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  objc_class *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  id v70;
  char v71;
  char v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  objc_class *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  id v109;
  char v110;
  unint64_t v111;
  char v112;
  unint64_t v113;
  char v114;
  unint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  unint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t result;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  id v154;
  id v155;
  id v156;
  id v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177[8];
  char v178[8];

  v174 = a4;
  v175 = a5;
  v176 = a3;
  v154 = a2;
  v10 = objc_msgSend(a2, sel_emailAddresses);
  v150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v11 >> 62)
    goto LABEL_64;
  v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v130 = a6;
    v140 = (uint64_t)a1;
    if (v12)
      break;
    a1 = (_QWORD *)MEMORY[0x24BEE4B00];
LABEL_22:
    OUTLINED_FUNCTION_96();
    v52 = objc_msgSend(v154, sel_phoneNumbers);
    a6 = OUTLINED_FUNCTION_105();

    if (a6 >> 62)
    {
      OUTLINED_FUNCTION_63_1();
      v53 = OUTLINED_FUNCTION_94();
      OUTLINED_FUNCTION_55_1();
      if (v53)
      {
LABEL_24:
        if (v53 < 1)
          goto LABEL_70;
        OUTLINED_FUNCTION_113();
        do
        {
          if (v166)
            OUTLINED_FUNCTION_112();
          if (objc_msgSend(OUTLINED_FUNCTION_104(), sel_label))
          {
            OUTLINED_FUNCTION_97();
            OUTLINED_FUNCTION_72_0();
          }
          else
          {
            a6 = 0;
          }
          v54 = (objc_class *)OUTLINED_FUNCTION_86();
          v11 = OUTLINED_FUNCTION_109(v54, v55, v56, v57, 2, v58, v59, v60, v130, v140, v150, (uint64_t)v154, v158, v162, 0, (uint64_t)v170, v174, v175, v176);
          v62 = v61;
          v63 = OUTLINED_FUNCTION_5_0();
          v70 = OUTLINED_FUNCTION_75_0(v63, sel_identifier, v64, v65, v66, v67, v68, v69, v135, v145, v152, (uint64_t)v156, v160, v164, v168, v172);
          OUTLINED_FUNCTION_107();
          OUTLINED_FUNCTION_64_1();
          OUTLINED_FUNCTION_108();
          OUTLINED_FUNCTION_11_2();
          OUTLINED_FUNCTION_57_1();
          if (v32)
            goto LABEL_59;
          v72 = v71;
          v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
          if (OUTLINED_FUNCTION_66_1(v73, v74, v75, v76, v77, v78, v79, v80, v136, v146, v150, (uint64_t)v154, v158, v162, v166, (uint64_t)v170, v174, v175, v176,
                 (char)a1))
          {
            OUTLINED_FUNCTION_11_2();
            if ((v72 & 1) != (v81 & 1))
              goto LABEL_72;
          }
          a1 = *(_QWORD **)v178;
          if ((v72 & 1) != 0)
          {
            v82 = OUTLINED_FUNCTION_49_1();
            *(_QWORD *)a6 = v11;
            *(_QWORD *)(a6 + 8) = v62;
          }
          else
          {
            OUTLINED_FUNCTION_8_2();
            if (v32)
              goto LABEL_62;
            v82 = OUTLINED_FUNCTION_69_1(v90);
          }
          OUTLINED_FUNCTION_68_1(v82, v83, v84, v85, v86, v87, v88, v89, v137, v147, v150, (uint64_t)v154, v158, v162, v166, v170);
          OUTLINED_FUNCTION_5_0();
          OUTLINED_FUNCTION_59_1();
          v53 = v158;
          a6 = v162;
        }
        while (v158 != v6);
      }
    }
    else
    {
      v53 = *(_QWORD *)((a6 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v53)
        goto LABEL_24;
    }
    OUTLINED_FUNCTION_55_1();
    v91 = objc_msgSend(v154, sel_postalAddresses);
    a6 = OUTLINED_FUNCTION_105();

    if (a6 >> 62)
    {
      OUTLINED_FUNCTION_63_1();
      v92 = OUTLINED_FUNCTION_94();
      OUTLINED_FUNCTION_55_1();
      if (!v92)
      {
LABEL_57:
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_55_1();
        ContactsLabelCATContainer.init(labels:localizedAttributeLabels:)();

        return swift_release();
      }
    }
    else
    {
      v92 = *(_QWORD *)((a6 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v92)
        goto LABEL_57;
    }
    if (v92 < 1)
      goto LABEL_71;
    OUTLINED_FUNCTION_113();
    while (1)
    {
      if (v166)
        OUTLINED_FUNCTION_112();
      if (objc_msgSend(OUTLINED_FUNCTION_104(), sel_label))
      {
        OUTLINED_FUNCTION_97();
        OUTLINED_FUNCTION_72_0();
      }
      else
      {
        a6 = 0;
        v92 = 0;
      }
      v93 = (objc_class *)OUTLINED_FUNCTION_86();
      v11 = OUTLINED_FUNCTION_109(v93, v94, v95, v96, 3, v97, v98, v99, v130, v140, v150, (uint64_t)v154, v158, v162, 0, (uint64_t)v170, v174, v175, v176);
      v101 = v100;
      v102 = OUTLINED_FUNCTION_5_0();
      v109 = OUTLINED_FUNCTION_75_0(v102, sel_identifier, v103, v104, v105, v106, v107, v108, v138, v148, v153, (uint64_t)v157, v161, v165, v169, v173);
      OUTLINED_FUNCTION_107();
      OUTLINED_FUNCTION_64_1();
      v110 = OUTLINED_FUNCTION_108();
      OUTLINED_FUNCTION_11_2();
      OUTLINED_FUNCTION_57_1();
      if (v32)
        break;
      v113 = v111;
      v114 = v112;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v110, a6))
      {
        v115 = OUTLINED_FUNCTION_11_2();
        if ((v114 & 1) != (v116 & 1))
          goto LABEL_72;
        v113 = v115;
      }
      if ((v114 & 1) != 0)
      {
        v117 = OUTLINED_FUNCTION_49_1();
        *(_QWORD *)a6 = v11;
        *(_QWORD *)(a6 + 8) = v101;
      }
      else
      {
        a1[(v113 >> 6) + 8] |= 1 << v113;
        v125 = (_QWORD *)(a1[6] + 16 * v113);
        *v125 = v7;
        v125[1] = v92;
        v126 = (unint64_t *)(a1[7] + 16 * v113);
        *v126 = v11;
        v126[1] = v101;
        v127 = a1[2];
        v32 = __OFADD__(v127, 1);
        v128 = v127 + 1;
        if (v32)
          goto LABEL_63;
        v117 = OUTLINED_FUNCTION_69_1(v128);
      }
      OUTLINED_FUNCTION_68_1(v117, v118, v119, v120, v121, v122, v123, v124, v139, v149, v150, (uint64_t)v154, v158, v162, v166, v170);
      OUTLINED_FUNCTION_5_0();
      OUTLINED_FUNCTION_59_1();
      a6 = v162;
      if (v158 == v6)
        goto LABEL_57;
    }
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    swift_bridgeObjectRetain();
    v12 = OUTLINED_FUNCTION_94();
    OUTLINED_FUNCTION_96();
  }
  if (v12 >= 1)
  {
    v6 = 0;
    v166 = v11 & 0xC000000000000001;
    a1 = (_QWORD *)MEMORY[0x24BEE4B00];
    v158 = v12;
    v162 = v11;
    while (1)
    {
      v13 = v166 ? (id)MEMORY[0x2207D80C0](0, v11) : *(id *)(v11 + 32);
      if (objc_msgSend(v13, sel_label, v130, v140))
      {
        OUTLINED_FUNCTION_97();
        OUTLINED_FUNCTION_72_0();
      }
      else
      {
        a6 = 0;
        v12 = 0;
      }
      v14 = (objc_class *)OUTLINED_FUNCTION_86();
      v11 = OUTLINED_FUNCTION_109(v14, v15, v16, v17, 1, v18, v19, v20, v131, v141, v150, (uint64_t)v154, v158, v162, v166, (uint64_t)v170, v174, v175, v176);
      v22 = v21;
      v23 = OUTLINED_FUNCTION_5_0();
      v30 = OUTLINED_FUNCTION_75_0(v23, sel_identifier, v24, v25, v26, v27, v28, v29, v132, v142, v151, (uint64_t)v155, v159, v163, v167, v171);
      OUTLINED_FUNCTION_107();
      OUTLINED_FUNCTION_64_1();
      OUTLINED_FUNCTION_108();
      OUTLINED_FUNCTION_11_2();
      OUTLINED_FUNCTION_57_1();
      if (v32)
        break;
      v33 = v31;
      v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, String>);
      if (OUTLINED_FUNCTION_66_1(v34, v35, v36, v37, v38, v39, v40, v41, v133, v143, v150, (uint64_t)v154, v158, v162, v166, (uint64_t)v170, v174, v175, v176,
             (char)a1))
      {
        OUTLINED_FUNCTION_11_2();
        if ((v33 & 1) != (v42 & 1))
          goto LABEL_72;
      }
      a1 = *(_QWORD **)v177;
      if ((v33 & 1) != 0)
      {
        v43 = OUTLINED_FUNCTION_49_1();
        *(_QWORD *)a6 = v11;
        *(_QWORD *)(a6 + 8) = v22;
      }
      else
      {
        OUTLINED_FUNCTION_8_2();
        if (v32)
          goto LABEL_61;
        v43 = OUTLINED_FUNCTION_69_1(v51);
      }
      OUTLINED_FUNCTION_68_1(v43, v44, v45, v46, v47, v48, v49, v50, v134, v144, v150, (uint64_t)v154, v158, v162, v166, v170);
      OUTLINED_FUNCTION_5_0();
      OUTLINED_FUNCTION_59_1();
      v11 = v162;
      if (!v158)
        goto LABEL_22;
    }
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  OutputGenerationManifest.canUseServerTTS.setter();
  __swift_project_boxed_opaque_existential_1((_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 40));
  DeviceState.isVox.getter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  v8 = type metadata accessor for NLContextUpdate();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v7, a3, v8);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v8);
  OutputGenerationManifest.nlContextUpdate.setter();
  ContactsSnippetPluginModel.responseViewID.getter();
  return OutputGenerationManifest.responseViewId.setter();
}

Swift::Bool __swiftcall GetContactHandleIntentStrategy.shouldAuthStateAllowPunchout()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;
  uint64_t v7;

  v1 = type metadata accessor for UnlockDevicePolicy();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_91((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  static UnlockDevicePolicy.requiringDeviceUnlock.getter();
  v5 = dispatch thunk of DeviceState.isAuthenticated(for:)();
  OUTLINED_FUNCTION_92((uint64_t)v4, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  return v5 & 1;
}

uint64_t GetContactHandleIntentStrategy.__ivar_destroyer()
{
  uint64_t v0;

  outlined destroy of AppUtil(v0 + 168);
  return __swift_destroy_boxed_opaque_existential_0(v0 + 208);
}

uint64_t GetContactHandleIntentStrategy.__deallocating_deinit()
{
  uint64_t v0;

  v0 = ContactsUnsupportedValueStrategy.deinit();
  outlined destroy of AppUtil(v0 + 168);
  __swift_destroy_boxed_opaque_existential_0(v0 + 208);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for GetContactHandleIntentStrategy()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GetContactHandleIntentStrategy;
  if (!type metadata singleton initialization cache for GetContactHandleIntentStrategy)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for GetContactHandleIntentStrategy()
{
  return swift_initClassMetadata2();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:) in conformance GetContactHandleIntentStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for GetContactHandleIntentStrategy();
  *v1 = v0;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactHandleIntentStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for GetContactHandleIntentStrategy();
  *v1 = v0;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:) in conformance GetContactHandleIntentStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for GetContactHandleIntentStrategy();
  *v1 = v0;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:) in conformance GetContactHandleIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(a1, a2);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:) in conformance GetContactHandleIntentStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for GetContactHandleIntentStrategy();
  *v1 = v0;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:) in conformance GetContactHandleIntentStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for GetContactHandleIntentStrategy();
  *v1 = v0;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance GetContactHandleIntentStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for GetContactHandleIntentStrategy();
  *v1 = v0;
  v1[1] = protocol witness for Flow.execute() in conformance ContactsDelegateFlow;
  return HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:)();
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance GetContactHandleIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for Flow.onAsync(input:) in conformance ContactsDelegateFlow;
  return GetContactHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:)(a1, a2);
}

uint64_t base witness table accessor for IntentExtensionCommunicatingAsync in GetContactHandleIntentStrategy()
{
  return lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy, (uint64_t (*)(uint64_t))type metadata accessor for GetContactHandleIntentStrategy, (uint64_t)&protocol conformance descriptor for GetContactHandleIntentStrategy);
}

uint64_t outlined destroy of AppUtil(uint64_t a1)
{
  destroy for AppUtil();
  return a1;
}

uint64_t outlined destroy of Views(uint64_t a1)
{
  destroy for Views(a1);
  return a1;
}

unint64_t type metadata accessor for CNContact()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CNContact;
  if (!lazy cache variable for type metadata for CNContact)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CNContact);
  }
  return result;
}

uint64_t partial apply for closure #1 in GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in GetContactHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x2207D86A8](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_1@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v2 - 80) = a1;
  v3 = v1[74];
  v4 = v1[28];
  *(_QWORD *)(v2 - 96) = v1[31];
  *(_QWORD *)(v2 - 88) = v4;
  return outlined destroy of Signpost.OpenSignpost(v3);
}

uint64_t OUTLINED_FUNCTION_1_0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_3_1()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = v0[31];
  *(_QWORD *)(v1 - 96) = v0[34];
  *(_QWORD *)(v1 - 88) = v2;
  *(_QWORD *)(v1 - 80) = v0[28];
  return static os_signpost_type_t.end.getter();
}

uint64_t OUTLINED_FUNCTION_6_1()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_7_2()
{
  return swift_release();
}

void OUTLINED_FUNCTION_8_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  *(_QWORD *)(v1 + 8 * (v3 >> 6) + 64) |= 1 << v3;
  v6 = (_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * v3);
  *v6 = v4;
  v6[1] = v0;
  v7 = (_QWORD *)(*(_QWORD *)(v1 + 56) + 16 * v3);
  *v7 = v2;
  v7[1] = v5;
}

uint64_t OUTLINED_FUNCTION_9_1()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_10_2@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

unint64_t OUTLINED_FUNCTION_11_2()
{
  uint64_t v0;
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(v1, v0);
}

uint64_t OUTLINED_FUNCTION_20_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_21_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_23_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_24_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_25_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_26_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_27_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_28_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_29_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_30_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_31_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_32_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_33_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_35_1@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_38_1()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_39_1()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = v0[72];
  *(_QWORD *)(v1 - 96) = v0[71];
  *(_QWORD *)(v1 - 88) = v0[70];
  *(_QWORD *)(v1 - 80) = v2;
}

void OUTLINED_FUNCTION_41_1()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_43_1()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_46_1()
{
  uint64_t v0;

}

void OUTLINED_FUNCTION_47_0(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  os_log_type_t v4;
  uint8_t *v5;

  _os_log_impl(a1, a2, v4, a4, v5, 2u);
}

uint64_t OUTLINED_FUNCTION_49_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_52_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t OUTLINED_FUNCTION_53_0()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OUTLINED_FUNCTION_54_1@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = v2;
  a1[1] = a2;
  return *(unsigned __int8 *)(v2 + 885);
}

uint64_t OUTLINED_FUNCTION_55_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_56_0()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_58_1()
{
  uint64_t v0;
  _QWORD *v1;

  __swift_project_boxed_opaque_existential_1(v1, v0);
  return DeviceState.isVox.getter();
}

uint64_t OUTLINED_FUNCTION_59_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_61_0()
{
  return TemplatingSection.content.getter();
}

uint64_t OUTLINED_FUNCTION_63_1()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_64_1()
{
  void *v0;

}

void OUTLINED_FUNCTION_65_1(void *a1)
{
  uint64_t v1;

  DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(a1, 0, v1, 0);
}

BOOL OUTLINED_FUNCTION_66_1(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  Swift::Int v20;
  Swift::Bool v21;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v21, v20);
}

uint64_t OUTLINED_FUNCTION_67_1()
{
  return swift_release();
}

void OUTLINED_FUNCTION_68_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

}

uint64_t OUTLINED_FUNCTION_69_1@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_70_0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint8_t *v4;
  NSObject *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v5, v6, a4, v4, 2u);
}

uint64_t OUTLINED_FUNCTION_71_0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

void OUTLINED_FUNCTION_72_0()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_73_0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t OUTLINED_FUNCTION_74_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a12 + 8))(v12, v13);
}

id OUTLINED_FUNCTION_75_0(int a1, const char *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v16;

  return objc_msgSend(v16, a2);
}

uint64_t OUTLINED_FUNCTION_76_0()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_77_0()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_78_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, unsigned int a11, uint64_t (*a12)(uint64_t, _QWORD, uint64_t))
{
  uint64_t v12;
  uint64_t v13;

  return a12(v12, a11, v13);
}

uint64_t OUTLINED_FUNCTION_79()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 96) + 8))(*(_QWORD *)(v0 - 80), *(_QWORD *)(v0 - 88));
}

uint64_t OUTLINED_FUNCTION_80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a17 + 8))(a19, a18);
}

uint64_t OUTLINED_FUNCTION_81(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a20 + 8))(a22, a21);
}

uint64_t OUTLINED_FUNCTION_82(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 760) = a1;
  return type metadata accessor for DialogPerson();
}

uint64_t OUTLINED_FUNCTION_83()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t OUTLINED_FUNCTION_85()
{
  return dispatch thunk of DeviceState.siriLocale.getter();
}

uint64_t OUTLINED_FUNCTION_86()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_87(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

_QWORD *OUTLINED_FUNCTION_91(_QWORD *a1, uint64_t a2)
{
  return __swift_project_boxed_opaque_existential_1(a1, a2);
}

uint64_t OUTLINED_FUNCTION_92@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_94()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t OUTLINED_FUNCTION_95@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

uint64_t OUTLINED_FUNCTION_96()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_97()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_98()
{
  uint64_t v0;
  uint64_t v1;

  return specialized Collection.first.getter(v1, v0);
}

uint64_t OUTLINED_FUNCTION_99@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_100()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_103(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  return a22;
}

id OUTLINED_FUNCTION_104()
{
  uint64_t v0;
  uint64_t v1;

  return *(id *)(v0 + 8 * v1 + 32);
}

uint64_t OUTLINED_FUNCTION_105()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_106(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  return a23;
}

uint64_t OUTLINED_FUNCTION_107()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_108()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_109(objc_class *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return LabelMapper.localizedLabel(handleLabel:localeString:type:)(a1, a2, a3, a4, a5, a19);
}

uint64_t OUTLINED_FUNCTION_110(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;

  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, v5, v4, a4);
}

uint64_t OUTLINED_FUNCTION_111()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

void OUTLINED_FUNCTION_112()
{
  JUMPOUT(0x2207D80C0);
}

uint64_t OUTLINED_FUNCTION_114()
{
  return TemplatingText.text.getter();
}

uint64_t DateComponents.setImplicitYear(from:now:qualifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t result;
  uint64_t v48;
  int EnumTagSinglePayload;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  void (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  BOOL v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char v89;
  char v90;
  void (*v91)(char *, uint64_t, uint64_t);
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v110 = a2;
  v105 = a3;
  v102 = type metadata accessor for TerminalElement.Qualifier();
  v106 = *(_QWORD *)(v102 - 8);
  MEMORY[0x24BDAC7A8](v102);
  OUTLINED_FUNCTION_55_0();
  v93 = v6 - v5;
  v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (TerminalElement.Qualifier?, TerminalElement.Qualifier?));
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_5_2();
  v97 = v8;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v9);
  v107 = (void (*)(uint64_t, uint64_t, uint64_t))((char *)&v91 - v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Qualifier?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_5_2();
  v101 = v12;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_68();
  v103 = (void (*)(uint64_t, uint64_t))v14;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_68();
  v94 = v16;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v17);
  v98 = (char *)&v91 - v18;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_7_3();
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v91 - v21;
  v23 = type metadata accessor for Date();
  v109 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  OUTLINED_FUNCTION_5_2();
  v95 = v24;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_68();
  v96 = v26;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_68();
  v99 = v28;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_68();
  v100 = v30;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_68();
  v108 = v32;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v33);
  v35 = (char *)&v91 - v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.DayOfWeek?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v36);
  OUTLINED_FUNCTION_55_0();
  v39 = v38 - v37;
  v40 = type metadata accessor for TerminalElement.Date();
  v41 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  OUTLINED_FUNCTION_55_0();
  v44 = v43 - v42;
  TerminalElement.Date.year.getter();
  v46 = v45;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v44, a1, v40);
  if ((v46 & 1) == 0)
    return OUTLINED_FUNCTION_10_3();
  TerminalElement.Date.dayOfWeek.getter();
  OUTLINED_FUNCTION_10_3();
  v48 = type metadata accessor for TerminalElement.DayOfWeek();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v39, 1, v48);
  result = outlined destroy of UsoEntity_common_Person.DefinedValues?(v39, &demangling cache variable for type metadata for TerminalElement.DayOfWeek?);
  if (EnumTagSinglePayload == 1)
  {
    DateComponents.day.getter();
    if ((v50 & 1) != 0)
    {
      DateComponents.day.getter();
      DateComponents.day.setter();
    }
    DateComponents.date.getter();
    v51 = v23;
    OUTLINED_FUNCTION_6_2((uint64_t)v22, 1, v23);
    if (v55)
    {
      v52 = (uint64_t)v22;
    }
    else
    {
      v53 = v109;
      v54 = *(void (**)(char *, char *, uint64_t))(v109 + 32);
      v54(v35, v22, v51);
      DateComponents.date.getter();
      OUTLINED_FUNCTION_6_2(v3, 1, v51);
      if (!v55)
      {
        v92 = v35;
        v54((char *)v108, (char *)v3, v51);
        v56 = *MEMORY[0x24BE9FE20];
        v57 = (uint64_t)v98;
        v58 = v102;
        v91 = *(void (**)(char *, uint64_t, uint64_t))(v106 + 104);
        v91(v98, v56, v102);
        v59 = OUTLINED_FUNCTION_14_2(v57);
        v60 = v107;
        v62 = (uint64_t)v107 + v61;
        outlined init with copy of TerminalElement.Qualifier?(v59, (uint64_t)v107);
        outlined init with copy of TerminalElement.Qualifier?(v57, v62);
        OUTLINED_FUNCTION_6_2((uint64_t)v60, 1, v58);
        if (v63)
        {
          OUTLINED_FUNCTION_13_2(v57);
          OUTLINED_FUNCTION_6_2(v62, 1, v58);
          if (v55)
            v64 = -1;
          else
            v64 = 0;
        }
        else
        {
          v65 = v94;
          outlined init with copy of TerminalElement.Qualifier?((uint64_t)v60, v94);
          OUTLINED_FUNCTION_6_2(v62, 1, v58);
          if (v66)
          {
            outlined destroy of UsoEntity_common_Person.DefinedValues?(v57, &demangling cache variable for type metadata for TerminalElement.Qualifier?);
            (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v65, v58);
            v64 = 0;
          }
          else
          {
            v67 = v106;
            v68 = v93;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v106 + 32))(v93, v62, v58);
            lazy protocol witness table accessor for type TerminalElement.Qualifier and conformance TerminalElement.Qualifier();
            v64 = dispatch thunk of static Equatable.== infix(_:_:)();
            v69 = v57;
            v70 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
            v70(v68, v58);
            OUTLINED_FUNCTION_13_2(v69);
            v70(v65, v58);
          }
        }
        v71 = v101;
        v72 = v103;
        OUTLINED_FUNCTION_13_2((uint64_t)v107);
        v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(v109 + 16);
        v74 = v100;
        v73(v100, v108, v51);
        v75 = v99;
        v107 = v73;
        v73(v99, (uint64_t)v92, v51);
        if ((v64 & 1) != 0)
        {
          v76 = static Date.> infix(_:_:)();
          OUTLINED_FUNCTION_1_1(v75);
          OUTLINED_FUNCTION_1_1(v74);
          if ((v76 & 1) == 0)
            goto LABEL_29;
          result = OUTLINED_FUNCTION_9_2();
          if ((v77 & 1) != 0)
          {
LABEL_52:
            __break(1u);
            goto LABEL_53;
          }
          v78 = __OFSUB__(result--, 1);
          if (v78)
          {
            __break(1u);
          }
          else
          {
            OUTLINED_FUNCTION_16_0();
            result = OUTLINED_FUNCTION_9_2();
            if ((v79 & 1) != 0)
            {
LABEL_53:
              __break(1u);
              goto LABEL_54;
            }
            v78 = __OFSUB__(result--, 1);
            if (!v78)
            {
              OUTLINED_FUNCTION_15_1();
              goto LABEL_29;
            }
          }
          __break(1u);
          goto LABEL_50;
        }
        OUTLINED_FUNCTION_1_1(v75);
        OUTLINED_FUNCTION_1_1(v74);
LABEL_29:
        v91((char *)v72, *MEMORY[0x24BE9FE18], v58);
        v80 = OUTLINED_FUNCTION_14_2((uint64_t)v72);
        v81 = v58;
        v82 = v97;
        v84 = v97 + v83;
        outlined init with copy of TerminalElement.Qualifier?(v80, v97);
        outlined init with copy of TerminalElement.Qualifier?((uint64_t)v72, v84);
        OUTLINED_FUNCTION_6_2(v82, 1, v81);
        if (v55)
        {
          outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v72, &demangling cache variable for type metadata for TerminalElement.Qualifier?);
          OUTLINED_FUNCTION_6_2(v84, 1, v81);
          if (v55)
          {
            outlined destroy of UsoEntity_common_Person.DefinedValues?(v82, &demangling cache variable for type metadata for TerminalElement.Qualifier?);
            OUTLINED_FUNCTION_4_2();
            OUTLINED_FUNCTION_0_2();
            goto LABEL_40;
          }
        }
        else
        {
          outlined init with copy of TerminalElement.Qualifier?(v82, v71);
          OUTLINED_FUNCTION_6_2(v84, 1, v81);
          if (!v85)
          {
            v86 = v106;
            v87 = v93;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v106 + 32))(v93, v84, v81);
            lazy protocol witness table accessor for type TerminalElement.Qualifier and conformance TerminalElement.Qualifier();
            LODWORD(v109) = dispatch thunk of static Equatable.== infix(_:_:)();
            v72 = *(void (**)(uint64_t, uint64_t))(v86 + 8);
            v72(v87, v81);
            outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v103, &demangling cache variable for type metadata for TerminalElement.Qualifier?);
            v72(v71, v81);
            v74 = v108;
            outlined destroy of UsoEntity_common_Person.DefinedValues?(v82, &demangling cache variable for type metadata for TerminalElement.Qualifier?);
            v82 = v96;
            v107(v96, v74, v51);
            OUTLINED_FUNCTION_0_2();
            if ((v109 & 1) != 0)
            {
LABEL_40:
              v88 = static Date.< infix(_:_:)();
              OUTLINED_FUNCTION_1_1(v81);
              OUTLINED_FUNCTION_1_1(v82);
              if ((v88 & 1) != 0)
              {
                result = OUTLINED_FUNCTION_9_2();
                if ((v89 & 1) != 0)
                {
LABEL_54:
                  __break(1u);
                  goto LABEL_55;
                }
                v78 = __OFADD__(result++, 1);
                if (!v78)
                {
                  OUTLINED_FUNCTION_16_0();
                  result = OUTLINED_FUNCTION_9_2();
                  if ((v90 & 1) != 0)
                  {
LABEL_55:
                    __break(1u);
                    return result;
                  }
                  v78 = __OFADD__(result++, 1);
                  if (!v78)
                  {
                    OUTLINED_FUNCTION_15_1();
                    goto LABEL_46;
                  }
                  goto LABEL_51;
                }
LABEL_50:
                __break(1u);
LABEL_51:
                __break(1u);
                goto LABEL_52;
              }
LABEL_46:
              OUTLINED_FUNCTION_1_1(v74);
              return OUTLINED_FUNCTION_1_1((uint64_t)v72);
            }
LABEL_38:
            OUTLINED_FUNCTION_1_1(v81);
            OUTLINED_FUNCTION_1_1(v82);
            goto LABEL_46;
          }
          outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v72, &demangling cache variable for type metadata for TerminalElement.Qualifier?);
          (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v71, v81);
        }
        outlined destroy of UsoEntity_common_Person.DefinedValues?(v82, &demangling cache variable for type metadata for (TerminalElement.Qualifier?, TerminalElement.Qualifier?));
        OUTLINED_FUNCTION_4_2();
        OUTLINED_FUNCTION_0_2();
        goto LABEL_38;
      }
      (*(void (**)(char *, uint64_t))(v53 + 8))(v35, v51);
      v52 = v3;
    }
    return outlined destroy of UsoEntity_common_Person.DefinedValues?(v52, (uint64_t *)&demangling cache variable for type metadata for Date?);
  }
  return result;
}

uint64_t outlined init with copy of TerminalElement.Qualifier?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Qualifier?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type TerminalElement.Qualifier and conformance TerminalElement.Qualifier()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TerminalElement.Qualifier and conformance TerminalElement.Qualifier;
  if (!lazy protocol witness table cache variable for type TerminalElement.Qualifier and conformance TerminalElement.Qualifier)
  {
    v1 = type metadata accessor for TerminalElement.Qualifier();
    result = MEMORY[0x2207D86A8](MEMORY[0x24BE9FE38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TerminalElement.Qualifier and conformance TerminalElement.Qualifier);
  }
  return result;
}

Swift::Bool __swiftcall DateComponents.hasYearOnly()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char v6;
  char v7;
  char v8;
  _BOOL4 v9;
  void (*v10)(char *, uint64_t);
  char v11;
  uint64_t v13;

  v1 = type metadata accessor for DateComponents();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_7_3();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v13 - v4;
  DateComponents.year.getter();
  v7 = v6;
  OUTLINED_FUNCTION_12_1((uint64_t)v5);
  if ((v7 & 1) != 0)
  {
    v9 = 0;
  }
  else
  {
    DateComponents.day.getter();
    v9 = v8 & 1;
  }
  v10 = *(void (**)(char *, uint64_t))(v2 + 8);
  v10(v5, v1);
  OUTLINED_FUNCTION_12_1(v0);
  if (v9)
  {
    DateComponents.month.getter();
    LOBYTE(v9) = v11 & 1;
  }
  v10((char *)v0, v1);
  return v9;
}

uint64_t OUTLINED_FUNCTION_0_2()
{
  uint64_t (*v0)(_QWORD, _QWORD, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(*(_QWORD *)(v2 - 224), *(_QWORD *)(v2 - 248), v1);
}

uint64_t OUTLINED_FUNCTION_1_1(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_4_2()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(v1 - 128))(*(_QWORD *)(v1 - 216), *(_QWORD *)(v1 - 120), v0);
}

uint64_t OUTLINED_FUNCTION_6_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_getEnumTagSinglePayload(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_9_2()
{
  return DateComponents.year.getter();
}

uint64_t OUTLINED_FUNCTION_10_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_12_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_13_2(uint64_t a1)
{
  uint64_t *v1;

  return outlined destroy of UsoEntity_common_Person.DefinedValues?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_14_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
  return *(_QWORD *)(v2 - 144);
}

uint64_t OUTLINED_FUNCTION_15_1()
{
  return DateComponents.yearForWeekOfYear.setter();
}

uint64_t OUTLINED_FUNCTION_16_0()
{
  return DateComponents.year.setter();
}

uint64_t type metadata accessor for ContactsLabelCATsModern()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ContactsLabelCATsModern;
  if (!type metadata singleton initialization cache for ContactsLabelCATsModern)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for ContactsLabelCATsModern()
{
  return swift_initClassMetadata2();
}

SiriContactsIntents::ContactsLabelCATsModern::ContactsLabelDialogIDs_optional __swiftcall ContactsLabelCATsModern.ContactsLabelDialogIDs.init(rawValue:)(Swift::String rawValue)
{
  unint64_t v1;

  v1 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v1 >= 0x13)
    return (SiriContactsIntents::ContactsLabelCATsModern::ContactsLabelDialogIDs_optional)19;
  else
    return (SiriContactsIntents::ContactsLabelCATsModern::ContactsLabelDialogIDs_optional)v1;
}

uint64_t ContactsLabelCATsModern.ContactsLabelDialogIDs.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_21FE25D98 + 4 * byte_21FED8ED0[a1]))(0xD000000000000011, 0x800000021FEDF860);
}

uint64_t sub_21FE25D98()
{
  return 1819042147;
}

uint64_t sub_21FE25DA8()
{
  return 0x6C65636E6163;
}

uint64_t sub_21FE25DBC()
{
  return 7954788;
}

uint64_t sub_21FE25DCC()
{
  return 1937334628;
}

unint64_t sub_21FE25DDC()
{
  OUTLINED_FUNCTION_12_2();
  return 0xD000000000000010;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ContactsLabelCATsModern.ContactsLabelDialogIDs(unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance ContactsLabelCATsModern.ContactsLabelDialogIDs()
{
  unsigned __int8 *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactsLabelCATsModern.ContactsLabelDialogIDs(uint64_t a1)
{
  unsigned __int8 *v1;

  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ContactsLabelCATsModern.ContactsLabelDialogIDs(uint64_t a1)
{
  unsigned __int8 *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriContactsIntents::ContactsLabelCATsModern::ContactsLabelDialogIDs_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactsLabelCATsModern.ContactsLabelDialogIDs@<W0>(Swift::String *a1@<X0>, SiriContactsIntents::ContactsLabelCATsModern::ContactsLabelDialogIDs_optional *a2@<X8>)
{
  SiriContactsIntents::ContactsLabelCATsModern::ContactsLabelDialogIDs_optional result;

  result.value = ContactsLabelCATsModern.ContactsLabelDialogIDs.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ContactsLabelCATsModern.ContactsLabelDialogIDs@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = ContactsLabelCATsModern.ContactsLabelDialogIDs.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t ContactsLabelCATsModern.cancelAsLabel()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_7_4();
  OUTLINED_FUNCTION_9_3(v2);
  *v0 = v1;
  v0[1] = ContactsLabelCATsModern.cancelAsLabel();
  OUTLINED_FUNCTION_12_2();
  return OUTLINED_FUNCTION_0_3(0xD000000000000014, v3, MEMORY[0x24BEE4AF8], (uint64_t)&type metadata for ContactsLabelCATsModern.ContactsLabelDialogIDs, v4, v6);
}

uint64_t ContactsLabelCATsModern.saveAsLabel()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_7_4();
  OUTLINED_FUNCTION_9_3(v2);
  *v0 = v1;
  v0[1] = ContactsLabelCATsModern.saveAsLabel();
  OUTLINED_FUNCTION_12_2();
  return OUTLINED_FUNCTION_0_3(0xD000000000000012, v3, MEMORY[0x24BEE4AF8], (uint64_t)&type metadata for ContactsLabelCATsModern.ContactsLabelDialogIDs, v4, v6);
}

uint64_t ContactsLabelCATsModern.saveAsLabel()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t ContactsLabelCATsModern.savedAsLabel()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(void);

  v2 = OUTLINED_FUNCTION_7_4();
  OUTLINED_FUNCTION_9_3(v2);
  *v0 = v1;
  v0[1] = ContactsLabelCATsModern.cancelAsLabel();
  OUTLINED_FUNCTION_12_2();
  return OUTLINED_FUNCTION_0_3(0xD000000000000013, v3, MEMORY[0x24BEE4AF8], (uint64_t)&type metadata for ContactsLabelCATsModern.ContactsLabelDialogIDs, v4, v6);
}

uint64_t ContactsLabelCATsModern.ageUnitsAsLabels(age:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_4_3();
}

uint64_t ContactsLabelCATsModern.ageUnitsAsLabels(age:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v8)(void);

  v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v2 = OUTLINED_FUNCTION_13_3();
  v0[4] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_21FED8CB0;
  *(_QWORD *)(v2 + 32) = 6645601;
  *(_QWORD *)(v2 + 40) = 0xE300000000000000;
  v3 = 0;
  if (v1)
  {
    v3 = type metadata accessor for DialogDuration();
  }
  else
  {
    *(_QWORD *)(v2 + 56) = 0;
    *(_QWORD *)(v2 + 64) = 0;
  }
  *(_QWORD *)(v2 + 48) = v1;
  *(_QWORD *)(v2 + 72) = v3;
  v8 = (uint64_t (*)(void))((int)*MEMORY[0x24BE929F8] + MEMORY[0x24BE929F8]);
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[5] = v4;
  lazy protocol witness table accessor for type ContactsLabelCATsModern.ContactsLabelDialogIDs and conformance ContactsLabelCATsModern.ContactsLabelDialogIDs();
  *v4 = v0;
  v4[1] = ContactsLabelCATsModern.ageUnitsAsLabels(age:);
  OUTLINED_FUNCTION_12_2();
  return OUTLINED_FUNCTION_8_3(0xD000000000000016, v5, v2, (uint64_t)&type metadata for ContactsLabelCATsModern.ContactsLabelDialogIDs, v6, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_6_3();
  if (v1)
    return OUTLINED_FUNCTION_14_1();
  swift_bridgeObjectRelease();
  return OUTLINED_FUNCTION_1_2(v0, *(uint64_t (**)(void))(v2 + 8));
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return OUTLINED_FUNCTION_3_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ContactsLabelCATsModern.modernBirthdayAsLabels(contact:birthdayInfo:isToday:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 64) = a3;
  *(_QWORD *)(v4 + 16) = a1;
  return OUTLINED_FUNCTION_4_3();
}

uint64_t ContactsLabelCATsModern.modernBirthdayAsLabels(contact:birthdayInfo:isToday:)()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v11)(void);

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v3 = (__n128 *)OUTLINED_FUNCTION_13_3();
  *(_QWORD *)(v0 + 40) = v3;
  v4 = OUTLINED_FUNCTION_5_3(v3, (__n128)xmmword_21FED8CA0);
  v3[3].n128_u64[0] = v2;
  v3[4].n128_u64[1] = v4;
  strcpy((char *)&v3[5], "birthdayInfo");
  v3[5].n128_u8[13] = 0;
  v3[5].n128_u16[7] = -5120;
  v5 = 0;
  if (v1)
  {
    v5 = type metadata accessor for DialogCalendar();
  }
  else
  {
    v3[6].n128_u64[1] = 0;
    v3[7].n128_u64[0] = 0;
  }
  v6 = *(_BYTE *)(v0 + 64);
  v3[6].n128_u64[0] = v1;
  v3[7].n128_u64[1] = v5;
  v3[8].n128_u64[0] = 0x7961646F547369;
  v3[8].n128_u64[1] = 0xE700000000000000;
  v3[10].n128_u64[1] = MEMORY[0x24BEE1328];
  v3[9].n128_u8[0] = v6;
  v11 = (uint64_t (*)(void))((int)*MEMORY[0x24BE929F8] + MEMORY[0x24BE929F8]);
  swift_retain();
  swift_retain();
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v7;
  lazy protocol witness table accessor for type ContactsLabelCATsModern.ContactsLabelDialogIDs and conformance ContactsLabelCATsModern.ContactsLabelDialogIDs();
  *v7 = v0;
  v7[1] = ContactsLabelCATsModern.modernBirthdayAsLabels(contact:birthdayInfo:isToday:);
  OUTLINED_FUNCTION_12_2();
  return OUTLINED_FUNCTION_8_3(0xD00000000000001CLL, v8, (uint64_t)v3, (uint64_t)&type metadata for ContactsLabelCATsModern.ContactsLabelDialogIDs, v9, v11);
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return OUTLINED_FUNCTION_3_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ContactsLabelCATsModern.modernBirthdayAsLabels(contact:birthdayInfo:isToday:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 56) = v1;
  swift_task_dealloc();
  if (v1)
    return OUTLINED_FUNCTION_14_1();
  swift_bridgeObjectRelease();
  return OUTLINED_FUNCTION_1_2(a1, *(uint64_t (**)(void))(v4 + 8));
}

uint64_t ContactsLabelCATsModern.quickActionButtonLabels(contact:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return OUTLINED_FUNCTION_4_3();
}

uint64_t ContactsLabelCATsModern.quickActionButtonLabels(contact:)()
{
  _QWORD *v0;
  unint64_t v1;
  __n128 *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v7)(void);

  v1 = v0[2];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v2 = (__n128 *)OUTLINED_FUNCTION_13_3();
  v0[4] = v2;
  v2[4].n128_u64[1] = OUTLINED_FUNCTION_5_3(v2, (__n128)xmmword_21FED8CB0);
  v2[3].n128_u64[0] = v1;
  v7 = (uint64_t (*)(void))((int)*MEMORY[0x24BE929F8] + MEMORY[0x24BE929F8]);
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc();
  v0[5] = v3;
  lazy protocol witness table accessor for type ContactsLabelCATsModern.ContactsLabelDialogIDs and conformance ContactsLabelCATsModern.ContactsLabelDialogIDs();
  *v3 = v0;
  v3[1] = ContactsLabelCATsModern.ageUnitsAsLabels(age:);
  OUTLINED_FUNCTION_12_2();
  return OUTLINED_FUNCTION_0_3(0xD000000000000025, v4, (uint64_t)v2, (uint64_t)&type metadata for ContactsLabelCATsModern.ContactsLabelDialogIDs, v5, v7);
}

uint64_t ContactsLabelCATsModern.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_10_4();
  return ContactsLabelCATsModern.init(templateDir:options:globals:)(a1, a2);
}

uint64_t ContactsLabelCATsModern.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = type metadata accessor for CATOption();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_55_0();
  v8 = v7 - v6;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_55_0();
  outlined init with copy of URL?(a1, v11 - v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  v12 = CATWrapperSimple.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  outlined destroy of URL?(a1);
  return v12;
}

uint64_t ContactsLabelCATsModern.__allocating_init(useResponseMode:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = type metadata accessor for CATOption();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_55_0();
  v7 = v6 - v5;
  OUTLINED_FUNCTION_10_4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7, a2, v3);
  v8 = CATWrapperSimple.init(useResponseMode:options:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a2, v3);
  return v8;
}

uint64_t ContactsLabelCATsModern.__deallocating_deinit()
{
  CATWrapperSimple.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for ContactsLabelCATsModern()
{
  return type metadata accessor for ContactsLabelCATsModern();
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ContactsLabelCATsModern.ContactsLabelDialogIDs and conformance ContactsLabelCATsModern.ContactsLabelDialogIDs()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactsLabelCATsModern.ContactsLabelDialogIDs and conformance ContactsLabelCATsModern.ContactsLabelDialogIDs;
  if (!lazy protocol witness table cache variable for type ContactsLabelCATsModern.ContactsLabelDialogIDs and conformance ContactsLabelCATsModern.ContactsLabelDialogIDs)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactsLabelCATsModern.ContactsLabelDialogIDs, &type metadata for ContactsLabelCATsModern.ContactsLabelDialogIDs);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsLabelCATsModern.ContactsLabelDialogIDs and conformance ContactsLabelCATsModern.ContactsLabelDialogIDs);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactsLabelCATsModern.ContactsLabelDialogIDs and conformance ContactsLabelCATsModern.ContactsLabelDialogIDs;
  if (!lazy protocol witness table cache variable for type ContactsLabelCATsModern.ContactsLabelDialogIDs and conformance ContactsLabelCATsModern.ContactsLabelDialogIDs)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactsLabelCATsModern.ContactsLabelDialogIDs, &type metadata for ContactsLabelCATsModern.ContactsLabelDialogIDs);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsLabelCATsModern.ContactsLabelDialogIDs and conformance ContactsLabelCATsModern.ContactsLabelDialogIDs);
  }
  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ContactsLabelCATsModern.ContactsLabelDialogIDs(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xEE)
  {
    if (a2 + 18 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 18) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 19;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x13;
  v5 = v6 - 19;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ContactsLabelCATsModern.ContactsLabelDialogIDs(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 18 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 18) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xED)
    return ((uint64_t (*)(void))((char *)&loc_21FE268E8 + 4 * byte_21FED8EE8[v4]))();
  *a1 = a2 + 18;
  return ((uint64_t (*)(void))((char *)sub_21FE2691C + 4 * byte_21FED8EE3[v4]))();
}

uint64_t sub_21FE2691C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE26924(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FE2692CLL);
  return result;
}

uint64_t sub_21FE26938(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FE26940);
  *(_BYTE *)result = a2 + 18;
  return result;
}

uint64_t sub_21FE26944(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE2694C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for ContactsLabelCATsModern.ContactsLabelDialogIDs(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for ContactsLabelCATsModern.ContactsLabelDialogIDs(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ContactsLabelCATsModern.ContactsLabelDialogIDs()
{
  return &type metadata for ContactsLabelCATsModern.ContactsLabelDialogIDs;
}

uint64_t OUTLINED_FUNCTION_0_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

uint64_t OUTLINED_FUNCTION_1_2(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_3_2(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_4_3()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_5_3(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = 0x746361746E6F63;
  a1[2].n128_u64[1] = 0xE700000000000000;
  return type metadata accessor for DialogPerson();
}

uint64_t OUTLINED_FUNCTION_6_3()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 48) = v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_7_4()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_8_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

unint64_t OUTLINED_FUNCTION_9_3(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return lazy protocol witness table accessor for type ContactsLabelCATsModern.ContactsLabelDialogIDs and conformance ContactsLabelCATsModern.ContactsLabelDialogIDs();
}

uint64_t OUTLINED_FUNCTION_10_4()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_13_3()
{
  return swift_allocObject();
}

id ContactService.contactStore.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    v2 = *(id *)(v0 + 16);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBACF8]), sel_init);
    v4 = *(void **)(v0 + 16);
    *(_QWORD *)(v0 + 16) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

uint64_t one-time initialization function for current()
{
  uint64_t result;

  type metadata accessor for ContactService();
  OUTLINED_FUNCTION_13_3();
  result = ContactService.().init()();
  static ContactService.current = result;
  return result;
}

uint64_t static ContactService.current.getter()
{
  if (one-time initialization token for current != -1)
    swift_once();
  return swift_retain();
}

void ContactService.cachedMeCard.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = a1;

}

uint64_t ContactService.().init()()
{
  uint64_t v0;
  id v1;

  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  objc_msgSend(v1, sel_addObserver_selector_name_object_, v0, sel_clearCachedMeCard, *MEMORY[0x24BDBA3D8], 0);

  return v0;
}

void ContactService.clearCachedMeCard()()
{
  ContactService.cachedMeCard.setter(0);
}

uint64_t static ContactService.defaultProperties.getter()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void **v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  char v62;
  id v63;
  id v64;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  uint64_t v89;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v0 = OUTLINED_FUNCTION_13_3();
  *(_OWORD *)(v0 + 16) = xmmword_21FED9000;
  v1 = (void *)*MEMORY[0x24BDBA2E0];
  v2 = (void *)*MEMORY[0x24BDBA318];
  v3 = (void **)MEMORY[0x24BDBA2C8];
  *(_QWORD *)(v0 + 32) = *MEMORY[0x24BDBA2E0];
  *(_QWORD *)(v0 + 40) = v2;
  v4 = *v3;
  v5 = (void *)*MEMORY[0x24BDBA310];
  *(_QWORD *)(v0 + 48) = *v3;
  *(_QWORD *)(v0 + 56) = v5;
  v6 = (void *)*MEMORY[0x24BDBA2C0];
  v7 = (void *)*MEMORY[0x24BDBA320];
  *(_QWORD *)(v0 + 64) = *MEMORY[0x24BDBA2C0];
  *(_QWORD *)(v0 + 72) = v7;
  v8 = (void *)*MEMORY[0x24BDBA328];
  v9 = (void *)*MEMORY[0x24BDBA360];
  v10 = (void **)MEMORY[0x24BDBA368];
  *(_QWORD *)(v0 + 80) = *MEMORY[0x24BDBA328];
  *(_QWORD *)(v0 + 88) = v9;
  v11 = *v10;
  v68 = (void *)*MEMORY[0x24BDBA358];
  v12 = *MEMORY[0x24BDBA358];
  *(_QWORD *)(v0 + 96) = v11;
  *(_QWORD *)(v0 + 104) = v12;
  v66 = (void *)*MEMORY[0x24BDBA370];
  v69 = (void *)*MEMORY[0x24BDBA350];
  v13 = *MEMORY[0x24BDBA350];
  *(_QWORD *)(v0 + 112) = *MEMORY[0x24BDBA370];
  *(_QWORD *)(v0 + 120) = v13;
  v67 = (void *)*MEMORY[0x24BDBA3E8];
  v70 = (void *)*MEMORY[0x24BDBA340];
  v14 = *MEMORY[0x24BDBA340];
  v15 = (void **)MEMORY[0x24BDBA280];
  *(_QWORD *)(v0 + 128) = *MEMORY[0x24BDBA3E8];
  *(_QWORD *)(v0 + 136) = v14;
  v71 = *v15;
  v74 = (void *)*MEMORY[0x24BDBA300];
  v16 = *MEMORY[0x24BDBA300];
  *(_QWORD *)(v0 + 144) = v71;
  *(_QWORD *)(v0 + 152) = v16;
  v72 = (void *)*MEMORY[0x24BDBA348];
  v75 = (void *)*MEMORY[0x24BDBA288];
  v17 = *MEMORY[0x24BDBA288];
  *(_QWORD *)(v0 + 160) = *MEMORY[0x24BDBA348];
  *(_QWORD *)(v0 + 168) = v17;
  v73 = (void *)*MEMORY[0x24BDBA378];
  v76 = (void *)*MEMORY[0x24BDBA3F8];
  v18 = *MEMORY[0x24BDBA3F8];
  v19 = (void **)MEMORY[0x24BDBA3C0];
  *(_QWORD *)(v0 + 176) = *MEMORY[0x24BDBA378];
  *(_QWORD *)(v0 + 184) = v18;
  v77 = *v19;
  v80 = (void *)*MEMORY[0x24BDBA2F8];
  v20 = *MEMORY[0x24BDBA2F8];
  *(_QWORD *)(v0 + 192) = v77;
  *(_QWORD *)(v0 + 200) = v20;
  v78 = (void *)*MEMORY[0x24BDBA258];
  v81 = (void *)*MEMORY[0x24BDBA330];
  v21 = *MEMORY[0x24BDBA330];
  *(_QWORD *)(v0 + 208) = *MEMORY[0x24BDBA258];
  *(_QWORD *)(v0 + 216) = v21;
  v79 = (void *)*MEMORY[0x24BDBA3F0];
  v82 = (void *)*MEMORY[0x24BDBA278];
  v22 = *MEMORY[0x24BDBA278];
  v23 = (void **)MEMORY[0x24BDBA2F0];
  *(_QWORD *)(v0 + 224) = *MEMORY[0x24BDBA3F0];
  *(_QWORD *)(v0 + 232) = v22;
  v83 = *v23;
  v24 = *v23;
  v25 = *MEMORY[0x24BDBA2E8];
  v85 = (void *)*MEMORY[0x24BDBA2E8];
  *(_QWORD *)(v0 + 240) = v24;
  *(_QWORD *)(v0 + 248) = v25;
  v84 = (void *)*MEMORY[0x24BDBA338];
  v26 = *MEMORY[0x24BDBA380];
  v87 = (void *)*MEMORY[0x24BDBA380];
  *(_QWORD *)(v0 + 256) = *MEMORY[0x24BDBA338];
  *(_QWORD *)(v0 + 264) = v26;
  v86 = (void *)*MEMORY[0x24BDBA3C8];
  v27 = *MEMORY[0x24BDBA250];
  v88 = (void *)*MEMORY[0x24BDBA250];
  v89 = v0;
  *(_QWORD *)(v0 + 272) = *MEMORY[0x24BDBA3C8];
  *(_QWORD *)(v0 + 280) = v27;
  specialized Array._endMutation()();
  v28 = (void *)*MEMORY[0x24BDBA390];
  v29 = v1;
  v30 = v2;
  v31 = v4;
  v32 = v5;
  v33 = v6;
  v34 = v7;
  v35 = v8;
  v36 = v9;
  v37 = v11;
  v38 = v68;
  v39 = v66;
  v40 = v69;
  v41 = v67;
  v42 = v70;
  v43 = v71;
  v44 = v74;
  v45 = v72;
  v46 = v75;
  v47 = v73;
  v48 = v76;
  v49 = v77;
  v50 = v80;
  v51 = v78;
  v52 = v81;
  v53 = v79;
  v54 = v82;
  v55 = v83;
  v56 = v85;
  v57 = v84;
  v58 = v87;
  v59 = v86;
  v60 = v88;
  v61 = v28;
  MEMORY[0x2207D7DC0]();
  OUTLINED_FUNCTION_13_4();
  if (v62)
    OUTLINED_FUNCTION_4_4();
  OUTLINED_FUNCTION_25_3();
  specialized Array._endMutation()();
  v63 = (id)*MEMORY[0x24BDBA388];
  MEMORY[0x2207D7DC0]();
  OUTLINED_FUNCTION_13_4();
  if (v62)
    OUTLINED_FUNCTION_4_4();
  OUTLINED_FUNCTION_25_3();
  specialized Array._endMutation()();
  v64 = (id)*MEMORY[0x24BDBA290];
  MEMORY[0x2207D7DC0]();
  OUTLINED_FUNCTION_13_4();
  if (v62)
    OUTLINED_FUNCTION_4_4();
  OUTLINED_FUNCTION_25_3();
  specialized Array._endMutation()();
  return v89;
}

_QWORD *static ContactService.defaultPropertiesString.getter()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  char v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v44;
  _QWORD *v45;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_21FED9010;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 40) = v2;
  *(_QWORD *)(inited + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 56) = v3;
  *(_QWORD *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 72) = v4;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 88) = v5;
  *(_QWORD *)(inited + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 104) = v6;
  *(_QWORD *)(inited + 112) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 120) = v7;
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 136) = v8;
  *(_QWORD *)(inited + 144) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 152) = v9;
  *(_QWORD *)(inited + 160) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 168) = v10;
  *(_QWORD *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 184) = v11;
  *(_QWORD *)(inited + 192) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 200) = v12;
  *(_QWORD *)(inited + 208) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 216) = v13;
  *(_QWORD *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 232) = v14;
  *(_QWORD *)(inited + 240) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 248) = v15;
  *(_QWORD *)(inited + 256) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 264) = v16;
  *(_QWORD *)(inited + 272) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 280) = v17;
  *(_QWORD *)(inited + 288) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 296) = v18;
  *(_QWORD *)(inited + 304) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 312) = v19;
  *(_QWORD *)(inited + 320) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 328) = v20;
  *(_QWORD *)(inited + 336) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 344) = v21;
  *(_QWORD *)(inited + 352) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 360) = v22;
  *(_QWORD *)(inited + 368) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 376) = v23;
  *(_QWORD *)(inited + 384) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 392) = v24;
  *(_QWORD *)(inited + 400) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 408) = v25;
  *(_QWORD *)(inited + 416) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 424) = v26;
  *(_QWORD *)(inited + 432) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 440) = v27;
  *(_QWORD *)(inited + 448) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 456) = v28;
  *(_QWORD *)(inited + 464) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 472) = v29;
  *(_QWORD *)(inited + 480) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 488) = v30;
  *(_QWORD *)(inited + 496) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 504) = v31;
  *(_QWORD *)(inited + 512) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 520) = v32;
  v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v35 = v34;
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(1, 32, 1, inited);
  v37 = v36;
  v36[2] = 32;
  v36[66] = v33;
  v36[67] = v35;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_34_0();
  if (v39)
  {
    OUTLINED_FUNCTION_17_1(v38);
    v37 = v44;
  }
  v37[2] = 32;
  v40 = &v37[2 * v0];
  v40[4] = v33;
  v40[5] = v35;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_34_0();
  if (v39)
  {
    OUTLINED_FUNCTION_17_1(v41);
    v37 = v45;
  }
  v37[2] = 32;
  v42 = &v37[2 * v0];
  v42[4] = v33;
  v42[5] = v35;
  return v37;
}

Swift::Bool __swiftcall ContactService.isAuthorized()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  id v16;
  void *v17;
  char v18;
  uint64_t aBlock[6];

  v1 = type metadata accessor for Signpost.OpenSignpost();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_37_2();
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v3 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_27_3();
  v4 = v0 + *(int *)(v1 + 20);
  *(_QWORD *)v4 = "CheckAuthorizationStatus";
  *(_QWORD *)(v4 + 8) = 24;
  *(_BYTE *)(v4 + 16) = 2;
  v5 = objc_msgSend((id)objc_opt_self(), sel_authorizationStatusForEntityType_, 0);
  v6 = OUTLINED_FUNCTION_13_3();
  *(_BYTE *)(v6 + 16) = v5 == (id)3;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.siriContacts);
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)OUTLINED_FUNCTION_1();
    aBlock[0] = OUTLINED_FUNCTION_1();
    *(_DWORD *)v10 = 136315138;
    lazy protocol witness table accessor for type Int and conformance Int();
    v11 = BinaryInteger.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FE16000, v8, v9, "[ContactsService] Contacts App authorization status: %s", v10, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0();
  }

  if (v5 != (id)3)
  {
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)OUTLINED_FUNCTION_1();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_21FE16000, v13, v14, "[ContactsService] Requesting authorization to access Contacts App...", v15, 2u);
      OUTLINED_FUNCTION_0();
    }

    v16 = ContactService.contactStore.getter();
    aBlock[4] = (uint64_t)partial apply for closure #1 in ContactService.isAuthorized();
    aBlock[5] = v6;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
    aBlock[3] = (uint64_t)&block_descriptor;
    v17 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v16, sel_requestAccessForEntityType_completionHandler_, 0, v17);
    _Block_release(v17);

  }
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_27_3();
  outlined destroy of ContactsFlowState(v0, (uint64_t (*)(_QWORD))type metadata accessor for Signpost.OpenSignpost);
  swift_beginAccess();
  v18 = *(_BYTE *)(v6 + 16);
  swift_release();
  return v18;
}

void closure #1 in ContactService.isAuthorized()(char a1, void *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint8_t *v16;
  _BYTE *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24[3];

  v5 = &unk_2540B0000;
  if (a2)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.siriContacts);
    v8 = a2;
    v9 = a2;
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v24[0] = v13;
      *(_DWORD *)v12 = 136315138;
      swift_getErrorValue();
      v14 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_21FE16000, v10, v11, "[ContactsService] Error occurred when trying to gain access to Contacts App: %s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207D8768](v13, -1, -1);
      v16 = v12;
      v5 = (_QWORD *)&unk_2540B0000;
      MEMORY[0x2207D8768](v16, -1, -1);
    }
    else
    {

    }
  }
  v17 = (_BYTE *)(a3 + 16);
  if ((a1 & 1) != 0)
  {
    swift_beginAccess();
    *v17 = 1;
    if (v5[368] != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.siriContacts);
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      v22 = "[ContactsService] User has authorized access to Contacts App.";
LABEL_17:
      _os_log_impl(&dword_21FE16000, v19, v20, v22, v21, 2u);
      MEMORY[0x2207D8768](v21, -1, -1);
    }
  }
  else
  {
    swift_beginAccess();
    *v17 = 0;
    if (v5[368] != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.siriContacts);
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      v22 = "[ContactsService] User has NOT authorized access to Contacts App.";
      goto LABEL_17;
    }
  }

}

void thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

CNContact_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ContactService.fetchContact(matchingIdentifier:)(Swift::String matchingIdentifier)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  char *v8;
  id v9;
  void *v10;
  Class isa;
  objc_class *v12;
  id v13;
  void *v14;
  void *v15;
  Swift::Bool v16;
  objc_class *v17;
  id v19[2];
  CNContact_optional result;

  object = matchingIdentifier._object;
  countAndFlagsBits = matchingIdentifier._countAndFlagsBits;
  v19[1] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = type metadata accessor for Signpost.OpenSignpost();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v7 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_33_1();
  v8 = &v6[*(int *)(v3 + 20)];
  *(_QWORD *)v8 = "FetchContactByID";
  *((_QWORD *)v8 + 1) = 16;
  v8[16] = 2;
  v9 = ContactService.contactStore.getter();
  v10 = (void *)MEMORY[0x2207D7CB8](countAndFlagsBits, object);
  type metadata accessor for ContactService();
  static ContactService.defaultProperties.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNKeyDescriptor);
  isa = Array._bridgeToObjectiveC()().super.isa;
  OUTLINED_FUNCTION_5();
  v19[0] = 0;
  v12 = (objc_class *)objc_msgSend(v9, sel_unifiedContactWithIdentifier_keysToFetch_error_, v10, isa, v19);

  v13 = v19[0];
  if (!v12)
  {
    v14 = v13;
    v15 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
  }
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_33_1();
  outlined destroy of ContactsFlowState((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Signpost.OpenSignpost);
  v17 = v12;
  result.value.super.isa = v17;
  result.is_nil = v16;
  return result;
}

CNContact_optional __swiftcall ContactService.getMeCard()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  char v10;
  id v11;
  Swift::Bool v12;
  objc_class *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CNContact_optional result;

  v27 = type metadata accessor for ContactsError();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v2);
  v26 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Signpost.OpenSignpost();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_37_2();
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_27_3();
  v6 = v0 + *(int *)(v4 + 20);
  *(_QWORD *)v6 = "FetchMeCard";
  *(_QWORD *)(v6 + 8) = 11;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *(void **)(v1 + 24);
  if (v7)
  {
    v8 = v7;
    static os_signpost_type_t.end.getter();
LABEL_7:
    OUTLINED_FUNCTION_27_3();
    goto LABEL_8;
  }
  swift_retain();
  v9 = (void *)_ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfCSo9CNContactC_s5Error_pTgm5092_s19SiriContactsIntents14ContactServiceC11fetchMeCard33_C7DADC940B50ACE7E9088A70F979DA7CLLs6a5OySo9c3Cs5D14_pGyFAIyKXEfU_0fG7Intents0iJ0CAKXDXMTTf1c_n();
  v7 = v9;
  if ((v10 & 1) == 0)
  {
    v11 = v9;
    ContactService.cachedMeCard.setter((uint64_t)v7);
    outlined consume of Result<CNContact, Error>(v7);
    static os_signpost_type_t.end.getter();
    goto LABEL_7;
  }
  OUTLINED_FUNCTION_49_2();
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.siriContacts);
  OUTLINED_FUNCTION_49_2();
  OUTLINED_FUNCTION_49_2();
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = OUTLINED_FUNCTION_1();
    v25 = OUTLINED_FUNCTION_1();
    v29 = v25;
    *(_DWORD *)v17 = 136315394;
    v18 = (uint64_t)v26;
    swift_storeEnumTagMultiPayload();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    v19 = Error.localizedDescription.getter();
    v21 = v20;
    outlined destroy of ContactsFlowState(v18, (uint64_t (*)(_QWORD))type metadata accessor for ContactsError);
    v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    swift_getErrorValue();
    v22 = Error.localizedDescription.getter();
    v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of Result<CNContact, Error>(v7);
    OUTLINED_FUNCTION_24_3();
    _os_log_impl(&dword_21FE16000, v15, v16, "%s: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0();
  }
  outlined consume of Result<CNContact, Error>(v7);
  outlined consume of Result<CNContact, Error>(v7);

  OUTLINED_FUNCTION_24_3();
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_27_3();
  v7 = 0;
LABEL_8:
  outlined destroy of ContactsFlowState(v0, (uint64_t (*)(_QWORD))type metadata accessor for Signpost.OpenSignpost);
  v13 = (objc_class *)v7;
  result.value.super.isa = v13;
  result.is_nil = v12;
  return result;
}

id closure #1 in ContactService.fetchMeCard()@<X0>(uint64_t *a1@<X2>, _QWORD *a2@<X8>)
{
  id v4;
  Class isa;
  id v6;
  id v7;
  id result;
  id v9;
  uint64_t v10;
  id v11[2];

  v11[1] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = ContactService.contactStore.getter();
  static ContactService.defaultProperties.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNKeyDescriptor);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v11[0] = 0;
  v6 = objc_msgSend(v4, sel__crossPlatformUnifiedMeContactWithKeysToFetch_error_, isa, v11);

  v7 = v11[0];
  if (v6)
  {
    *a2 = v6;
    return v7;
  }
  else
  {
    v9 = v11[0];
    v10 = _convertNSErrorToError(_:)();

    result = (id)swift_willThrow();
    *a1 = v10;
  }
  return result;
}

uint64_t _ss6ResultOsRi_zrlE8catchingAByxq_Gxyq_YKXE_tcfCSo9CNContactC_s5Error_pTgm5092_s19SiriContactsIntents14ContactServiceC11fetchMeCard33_C7DADC940B50ACE7E9088A70F979DA7CLLs6a5OySo9c3Cs5D14_pGyFAIyKXEfU_0fG7Intents0iJ0CAKXDXMTTf1c_n()
{
  uint64_t v1;
  uint64_t v2;

  closure #1 in ContactService.fetchMeCard()(&v1, &v2);
  swift_release();
  return v2;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ContactService.setMeCardNickName(toNickname:forMeCard:)(Swift::String toNickname, CNContact forMeCard)
{
  void *v2;
  os_log_type_t v3;
  void *object;
  uint64_t countAndFlagsBits;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;

  object = toNickname._object;
  countAndFlagsBits = toNickname._countAndFlagsBits;
  -[objc_class mutableCopy](forMeCard.super.isa, sel_mutableCopy);
  OUTLINED_FUNCTION_53_1();
  OUTLINED_FUNCTION_36_1();
  OUTLINED_FUNCTION_32_3();
  OUTLINED_FUNCTION_21_3();
  v6 = (void *)MEMORY[0x2207D7CB8](countAndFlagsBits, object);
  objc_msgSend(v37, sel_setNickname_, v6);

  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBADA8]), sel_init);
  OUTLINED_FUNCTION_46_2(v7, sel_updateContact_);
  v8 = ContactService.contactStore.getter();
  LODWORD(countAndFlagsBits) = OUTLINED_FUNCTION_43_2(v8, sel_executeSaveRequest_error_, v9, v10, v11, v12, v13, v14, v35);

  if ((_DWORD)countAndFlagsBits)
  {
    v15 = one-time initialization token for siriContacts;
    v16 = 0;
    if (v15 != -1)
      swift_once();
    v17 = OUTLINED_FUNCTION_26();
    v18 = (void *)__swift_project_value_buffer(v17, (uint64_t)static Logger.siriContacts);
    Logger.logObject.getter();
    v19 = OUTLINED_FUNCTION_8();
    if (OUTLINED_FUNCTION_53(v19))
    {
      *(_WORD *)OUTLINED_FUNCTION_1() = 0;
      OUTLINED_FUNCTION_19_3(&dword_21FE16000, v20, v21, "[ContactsService] Nickname was updated successfully!");
      OUTLINED_FUNCTION_0();
    }

  }
  else
  {
    v22 = 0;
    OUTLINED_FUNCTION_48_1();

    OUTLINED_FUNCTION_41_2();
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v23 = OUTLINED_FUNCTION_26();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.siriContacts);
    OUTLINED_FUNCTION_15_2();
    OUTLINED_FUNCTION_15_2();
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_29_2(v25))
    {
      v26 = (uint8_t *)OUTLINED_FUNCTION_1();
      OUTLINED_FUNCTION_1();
      OUTLINED_FUNCTION_6_4(4.8149e-34);
      v27 = OUTLINED_FUNCTION_40_1();
      OUTLINED_FUNCTION_42_0(v27, v28, v29, v30, v31, v32, v33, v34, v36);
      OUTLINED_FUNCTION_9_4();
      OUTLINED_FUNCTION_5();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_43_0(&dword_21FE16000, v24, v3, "[ContactsService] Call to setMeCardNickName() threw an exception: %s", v26);
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();

    OUTLINED_FUNCTION_31_3();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    OUTLINED_FUNCTION_11_3();
    swift_storeEnumTagMultiPayload();
    OUTLINED_FUNCTION_38_2();
    OUTLINED_FUNCTION_2_2();

  }
  OUTLINED_FUNCTION_12_3();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ContactService.deleteMeCardNickName(forMeCard:)(CNContact forMeCard)
{
  void *v1;
  os_log_type_t v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;

  -[objc_class mutableCopy](forMeCard.super.isa, sel_mutableCopy);
  OUTLINED_FUNCTION_53_1();
  OUTLINED_FUNCTION_36_1();
  OUTLINED_FUNCTION_32_3();
  OUTLINED_FUNCTION_21_3();
  objc_msgSend(v34, sel_setValue_forKeyPath_, 0, *MEMORY[0x24BDBA328]);
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBADA8]), sel_init);
  OUTLINED_FUNCTION_46_2(v3, sel_updateContact_);
  v4 = ContactService.contactStore.getter();
  v11 = OUTLINED_FUNCTION_43_2(v4, sel_executeSaveRequest_error_, v5, v6, v7, v8, v9, v10, v32);

  if (v11)
  {
    v12 = one-time initialization token for siriContacts;
    v13 = 0;
    if (v12 != -1)
      swift_once();
    v14 = OUTLINED_FUNCTION_26();
    v15 = (void *)__swift_project_value_buffer(v14, (uint64_t)static Logger.siriContacts);
    Logger.logObject.getter();
    v16 = OUTLINED_FUNCTION_8();
    if (OUTLINED_FUNCTION_53(v16))
    {
      *(_WORD *)OUTLINED_FUNCTION_1() = 0;
      OUTLINED_FUNCTION_19_3(&dword_21FE16000, v17, v18, "[ContactsService] Nickname was deleted successfully!");
      OUTLINED_FUNCTION_0();
    }

  }
  else
  {
    v19 = 0;
    OUTLINED_FUNCTION_48_1();

    OUTLINED_FUNCTION_41_2();
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v20 = OUTLINED_FUNCTION_26();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.siriContacts);
    OUTLINED_FUNCTION_15_2();
    OUTLINED_FUNCTION_15_2();
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_29_2(v22))
    {
      v23 = (uint8_t *)OUTLINED_FUNCTION_1();
      OUTLINED_FUNCTION_1();
      OUTLINED_FUNCTION_6_4(4.8149e-34);
      v24 = OUTLINED_FUNCTION_40_1();
      OUTLINED_FUNCTION_42_0(v24, v25, v26, v27, v28, v29, v30, v31, v33);
      OUTLINED_FUNCTION_9_4();
      OUTLINED_FUNCTION_5();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_43_0(&dword_21FE16000, v21, v2, "[ContactsService] Call to deleteMeCardNickName() threw an exception: %s", v23);
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();

    OUTLINED_FUNCTION_31_3();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    OUTLINED_FUNCTION_11_3();
    swift_storeEnumTagMultiPayload();
    OUTLINED_FUNCTION_38_2();
    OUTLINED_FUNCTION_2_2();
  }

  OUTLINED_FUNCTION_12_3();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ContactService.setMeCardRelationship(relationLabel:contactName:forMeCard:)(Swift::String relationLabel, Swift::String contactName, CNContact forMeCard)
{
  NSObject *v3;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v7;
  objc_class *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  void *v23;
  Class isa;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  unint64_t v38;
  void *v40;
  uint64_t v41;
  id v42[5];

  object = contactName._object;
  countAndFlagsBits = contactName._countAndFlagsBits;
  v42[4] = *(id *)MEMORY[0x24BDAC8D0];
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v7 = OUTLINED_FUNCTION_26();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.siriContacts);
  v8 = forMeCard.super.isa;
  OUTLINED_FUNCTION_51_1();
  v9 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_15_0(v9))
  {
    v10 = (uint8_t *)OUTLINED_FUNCTION_1();
    v11 = (void *)OUTLINED_FUNCTION_1();
    v42[0] = v11;
    *(_DWORD *)v10 = 136315138;
    v12 = OUTLINED_FUNCTION_45_1((uint64_t)v11, sel_contactRelations);
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
    v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v15 = MEMORY[0x2207D7DE4](v14, v13);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_47_1(v15, v16, (uint64_t *)v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_43_0(&dword_21FE16000, v3, (os_log_type_t)forMeCard.super.isa, "#ContactService contactRelations: %s", v10);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CNLabeledValue<>.init(relationLabel:contactName:)(relationLabel._countAndFlagsBits, (uint64_t)relationLabel._object, countAndFlagsBits, object);
  v18 = (void *)v17;
  v19 = OUTLINED_FUNCTION_45_1(v17, sel_contactRelations);
  v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v41 = v20;
  v21 = v18;
  MEMORY[0x2207D7DC0]();
  if (*(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  v22 = specialized Array._endMutation()();
  OUTLINED_FUNCTION_45_1(v22, sel_mutableCopy);
  _bridgeAnyObjectToAny(_:)();
  OUTLINED_FUNCTION_36_1();
  OUTLINED_FUNCTION_32_3();
  swift_dynamicCast();
  v23 = v40;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v40, sel_setContactRelations_, isa);

  v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBADA8]), sel_init);
  objc_msgSend(v25, sel_updateContact_, v40);
  v26 = ContactService.contactStore.getter();
  v42[0] = 0;
  v27 = objc_msgSend(v26, sel_executeSaveRequest_error_, v25, v42);

  v28 = v42[0];
  if ((_DWORD)v27)
  {
    v29 = v42[0];
    OUTLINED_FUNCTION_51_1();
    v30 = OUTLINED_FUNCTION_54_2();
    if (OUTLINED_FUNCTION_30_3(v30))
    {
      *(_WORD *)OUTLINED_FUNCTION_1() = 0;
      OUTLINED_FUNCTION_23_2(&dword_21FE16000, v31, v32, "[ContactsService] Relationship was updated successfully!");
      OUTLINED_FUNCTION_0();
    }
    v23 = v25;
    v25 = v21;

  }
  else
  {
    v33 = v42[0];
    OUTLINED_FUNCTION_50_2();

    OUTLINED_FUNCTION_41_2();
    OUTLINED_FUNCTION_15_2();
    OUTLINED_FUNCTION_15_2();
    v34 = OUTLINED_FUNCTION_51_1();
    v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)OUTLINED_FUNCTION_1();
      v42[0] = (id)OUTLINED_FUNCTION_1();
      *(_DWORD *)v36 = 136315138;
      swift_getErrorValue();
      v37 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, (uint64_t *)v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_5();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_43_0(&dword_21FE16000, v34, v35, "[ContactsService] Call to setMeCardRelationship() threw an exception: %s", v36);
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();

    OUTLINED_FUNCTION_31_3();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    OUTLINED_FUNCTION_11_3();
    swift_storeEnumTagMultiPayload();
    OUTLINED_FUNCTION_38_2();

    OUTLINED_FUNCTION_2_2();
  }

}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ContactService.deleteMeCardRelationship(relationLabel:contactName:forMeCard:)(Swift::String relationLabel, Swift::String contactName, CNContact forMeCard)
{
  NSObject *v3;
  void *object;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  objc_class *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  id v14;
  objc_class *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  Class isa;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v50;
  uint64_t countAndFlagsBits;
  void *v52;
  id v53[5];

  countAndFlagsBits = relationLabel._countAndFlagsBits;
  object = relationLabel._object;
  v53[4] = *(id *)MEMORY[0x24BDAC8D0];
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v6 = OUTLINED_FUNCTION_26();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.siriContacts);
  swift_bridgeObjectRetain_n();
  OUTLINED_FUNCTION_28_3();
  v7 = OUTLINED_FUNCTION_54_2();
  v50 = (uint64_t)object;
  if (os_log_type_enabled(v3, v7))
  {
    v8 = (uint8_t *)OUTLINED_FUNCTION_1();
    v53[0] = (id)OUTLINED_FUNCTION_1();
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_47_1(countAndFlagsBits, v9, (uint64_t *)v53);
    OUTLINED_FUNCTION_5_4();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_43_0(&dword_21FE16000, v3, v7, "[ContactsService] Relation label: %s", v8);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }

  swift_bridgeObjectRelease_n();
  v10 = forMeCard.super.isa;
  OUTLINED_FUNCTION_28_3();
  v11 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_15_0(v11))
  {
    v12 = (uint8_t *)OUTLINED_FUNCTION_1();
    v13 = (void *)OUTLINED_FUNCTION_1();
    v53[0] = v13;
    *(_DWORD *)v12 = 136315138;
    v14 = OUTLINED_FUNCTION_39_2((uint64_t)v13, sel_contactRelations);
    v15 = v10;
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
    v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v18 = MEMORY[0x2207D7DE4](v17, v16);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_47_1(v18, v19, (uint64_t *)v53);
    OUTLINED_FUNCTION_5_4();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_43_0(&dword_21FE16000, swift_getObjCClassMetadata, (os_log_type_t)v3, "[ContactsService] Relations before: %s", v12);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }

  v21 = OUTLINED_FUNCTION_39_2(v20, sel_contactRelations);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  Array<A>.removeAllWhere(contactName:relationLabel:)(contactName._countAndFlagsBits, (uint64_t)contactName._object, countAndFlagsBits, v50, (unint64_t)v23);
  OUTLINED_FUNCTION_5();
  swift_bridgeObjectRetain_n();
  OUTLINED_FUNCTION_28_3();
  v24 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_53(v24))
  {
    v25 = (uint8_t *)OUTLINED_FUNCTION_1();
    v53[0] = (id)OUTLINED_FUNCTION_1();
    *(_DWORD *)v25 = 136315138;
    v26 = swift_bridgeObjectRetain();
    v27 = MEMORY[0x2207D7DE4](v26, v22);
    v29 = v28;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, (uint64_t *)v53);
    OUTLINED_FUNCTION_5_4();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_44_1();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_43_0(&dword_21FE16000, v23, (os_log_type_t)&stru_24E5C6FF8.attr, "[ContactsService] Relations after: %s", v25);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }

  v30 = OUTLINED_FUNCTION_44_1();
  OUTLINED_FUNCTION_39_2(v30, sel_mutableCopy);
  _bridgeAnyObjectToAny(_:)();
  OUTLINED_FUNCTION_36_1();
  OUTLINED_FUNCTION_32_3();
  swift_dynamicCast();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_46_2(v52, sel_setContactRelations_);

  v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBADA8]), sel_init);
  objc_msgSend(v32, sel_updateContact_, v52);
  v33 = ContactService.contactStore.getter();
  v53[0] = 0;
  v34 = objc_msgSend(v33, sel_executeSaveRequest_error_, v32, v53);

  v35 = v53[0];
  if ((_DWORD)v34)
  {
    v36 = v53[0];
    OUTLINED_FUNCTION_28_3();
    v37 = OUTLINED_FUNCTION_54_2();
    if (OUTLINED_FUNCTION_30_3(v37))
    {
      *(_WORD *)OUTLINED_FUNCTION_1() = 0;
      OUTLINED_FUNCTION_23_2(&dword_21FE16000, v38, v39, "[ContactsService] Relationship was deleted successfully!");
      OUTLINED_FUNCTION_0();
    }

  }
  else
  {
    v40 = v53[0];
    v41 = (void *)OUTLINED_FUNCTION_50_2();

    OUTLINED_FUNCTION_38_2();
    v42 = v41;
    v43 = v41;
    v44 = OUTLINED_FUNCTION_28_3();
    v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)OUTLINED_FUNCTION_1();
      v53[0] = (id)OUTLINED_FUNCTION_1();
      *(_DWORD *)v46 = 136315138;
      swift_getErrorValue();
      v47 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, (uint64_t *)v53);
      OUTLINED_FUNCTION_5_4();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_5();
      OUTLINED_FUNCTION_20_3();
      OUTLINED_FUNCTION_20_3();
      OUTLINED_FUNCTION_43_0(&dword_21FE16000, v44, v45, "[ContactsService] Call to deleteMeCardRelationship() threw an exception: %s", v46);
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }
    OUTLINED_FUNCTION_20_3();
    OUTLINED_FUNCTION_20_3();

    OUTLINED_FUNCTION_31_3();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    OUTLINED_FUNCTION_11_3();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    OUTLINED_FUNCTION_20_3();

  }
}

uint64_t ContactService.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t ContactService.__deallocating_deinit()
{
  ContactService.deinit();
  return swift_deallocClassInstance();
}

unint64_t protocol witness for ContactServiceProtocol.fetchContact(matchingIdentifier:) in conformance ContactService(uint64_t a1, uint64_t a2)
{
  return (unint64_t)ContactService.fetchContact(matchingIdentifier:)(*(Swift::String *)&a1);
}

BOOL protocol witness for ContactServiceProtocol.isAuthorized() in conformance ContactService()
{
  return ContactService.isAuthorized()();
}

unint64_t protocol witness for ContactServiceProtocol.getMeCard() in conformance ContactService()
{
  return (unint64_t)ContactService.getMeCard()();
}

void protocol witness for ContactServiceProtocol.setMeCardNickName(toNickname:forMeCard:) in conformance ContactService(uint64_t a1, uint64_t a2, CNContact a3)
{
  ContactService.setMeCardNickName(toNickname:forMeCard:)(*(Swift::String *)&a1, a3);
}

void protocol witness for ContactServiceProtocol.deleteMeCardNickName(forMeCard:) in conformance ContactService(CNContact a1)
{
  ContactService.deleteMeCardNickName(forMeCard:)(a1);
}

void protocol witness for ContactServiceProtocol.setMeCardRelationship(relationLabel:contactName:forMeCard:) in conformance ContactService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CNContact a5)
{
  ContactService.setMeCardRelationship(relationLabel:contactName:forMeCard:)(*(Swift::String *)&a1, *(Swift::String *)&a3, a5);
}

void protocol witness for ContactServiceProtocol.deleteMeCardRelationship(relationLabel:contactName:forMeCard:) in conformance ContactService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CNContact a5)
{
  ContactService.deleteMeCardRelationship(relationLabel:contactName:forMeCard:)(*(Swift::String *)&a1, *(Swift::String *)&a3, a5);
}

uint64_t sub_21FE2955C()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in ContactService.isAuthorized()(char a1, void *a2)
{
  uint64_t v2;

  closure #1 in ContactService.isAuthorized()(a1, a2, v2);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x2207D86A8](MEMORY[0x24BEE17B0], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t type metadata accessor for ContactService()
{
  return objc_opt_self();
}

void outlined consume of Result<CNContact, Error>(id a1)
{

}

unint64_t lazy protocol witness table accessor for type ContactsError and conformance ContactsError()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ContactsError and conformance ContactsError;
  if (!lazy protocol witness table cache variable for type ContactsError and conformance ContactsError)
  {
    v1 = type metadata accessor for ContactsError();
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactsError, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError);
  }
  return result;
}

unint64_t type metadata accessor for CNMutableContact()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CNMutableContact;
  if (!lazy cache variable for type metadata for CNMutableContact)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CNMutableContact);
  }
  return result;
}

uint64_t dispatch thunk of ContactServiceProtocol.fetchContact(matchingIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of ContactServiceProtocol.isAuthorized()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ContactServiceProtocol.getMeCard()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ContactServiceProtocol.setMeCardNickName(toNickname:forMeCard:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of ContactServiceProtocol.deleteMeCardNickName(forMeCard:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ContactServiceProtocol.setMeCardRelationship(relationLabel:contactName:forMeCard:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 48))();
}

uint64_t dispatch thunk of ContactServiceProtocol.deleteMeCardRelationship(relationLabel:contactName:forMeCard:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 56))();
}

uint64_t method lookup function for ContactService()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ContactService.isAuthorized()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of ContactService.fetchContact(matchingIdentifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of ContactService.getMeCard()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of ContactService.setMeCardNickName(toNickname:forMeCard:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of ContactService.deleteMeCardNickName(forMeCard:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of ContactService.setMeCardRelationship(relationLabel:contactName:forMeCard:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of ContactService.deleteMeCardRelationship(relationLabel:contactName:forMeCard:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

void OUTLINED_FUNCTION_2_2()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_4_4()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_6_4(float a1)
{
  float *v1;

  *v1 = a1;
  return swift_getErrorValue();
}

uint64_t OUTLINED_FUNCTION_9_4()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_11_3()
{
  return swift_allocError();
}

id OUTLINED_FUNCTION_15_2()
{
  void *v0;

  return v0;
}

void OUTLINED_FUNCTION_17_1(unint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1, v2, 1, v1);
}

void OUTLINED_FUNCTION_19_3(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void OUTLINED_FUNCTION_20_3()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_21_3()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_23_2(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void OUTLINED_FUNCTION_24_3()
{
  void *v0;

  outlined consume of Result<CNContact, Error>(v0);
}

uint64_t OUTLINED_FUNCTION_25_3()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t OUTLINED_FUNCTION_27_3()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OUTLINED_FUNCTION_28_3()
{
  return Logger.logObject.getter();
}

BOOL OUTLINED_FUNCTION_29_2(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

BOOL OUTLINED_FUNCTION_30_3(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_31_3()
{
  return type metadata accessor for ContactsError();
}

unint64_t OUTLINED_FUNCTION_32_3()
{
  return type metadata accessor for CNMutableContact();
}

uint64_t OUTLINED_FUNCTION_33_1()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OUTLINED_FUNCTION_36_1()
{
  return swift_unknownObjectRelease();
}

uint64_t OUTLINED_FUNCTION_38_2()
{
  return swift_willThrow();
}

id OUTLINED_FUNCTION_39_2(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t OUTLINED_FUNCTION_40_1()
{
  return Error.localizedDescription.getter();
}

uint64_t OUTLINED_FUNCTION_41_2()
{
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_42_0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

id OUTLINED_FUNCTION_43_2(id a1, SEL a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  return objc_msgSend(a1, a2, v9, va);
}

uint64_t OUTLINED_FUNCTION_44_1()
{
  return swift_bridgeObjectRelease_n();
}

id OUTLINED_FUNCTION_45_1(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

id OUTLINED_FUNCTION_46_2(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_47_1(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_48_1()
{
  return _convertNSErrorToError(_:)();
}

id OUTLINED_FUNCTION_49_2()
{
  void *v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_50_2()
{
  return _convertNSErrorToError(_:)();
}

uint64_t OUTLINED_FUNCTION_51_1()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_53_1()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t OUTLINED_FUNCTION_54_2()
{
  return static os_log_type_t.debug.getter();
}

uint64_t dispatch thunk of ModifyOperationProtocol.stringify.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t ModifyOperation.stringify.getter(unint64_t a1)
{
  uint64_t result;

  if (a1 < 4)
    return *(_QWORD *)&aUnknown[8 * a1];
  result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

uint64_t static ModifyOperation.from(_:)(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  BOOL v6;

  if (!a2)
    return 1;
  v4 = a1 == 0x6574656C6564 && a2 == 0xE600000000000000;
  if (v4 || (OUTLINED_FUNCTION_0_4() & 1) != 0)
    return 3;
  v6 = a1 == 0x6563616C706572 && a2 == 0xE700000000000000;
  if (v6 || (OUTLINED_FUNCTION_0_4() & 1) != 0)
    return 2;
  else
    return 1;
}

uint64_t OUTLINED_FUNCTION_0_4()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t static Siri_Nlu_External_UserStatedTask.from(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t vars0;
  uint64_t vars8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_11_4();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v23 - v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoBuilderOptions?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_55_0();
  v10 = v9 - v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v11 = OUTLINED_FUNCTION_55();
  *(_OWORD *)(v11 + 16) = xmmword_21FED8AB0;
  *(_QWORD *)(v11 + 32) = a1;
  v24 = v11;
  specialized Array._endMutation()();
  v12 = v24;
  v13 = type metadata accessor for UsoBuilderOptions();
  OUTLINED_FUNCTION_19_4(v10, 1, v14, v13);
  swift_retain();
  MEMORY[0x2207D6920](v12, v10);
  swift_bridgeObjectRelease();
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v10, &demangling cache variable for type metadata for UsoBuilderOptions?);
  OUTLINED_FUNCTION_21_4();
  if (a1)
  {
    OUTLINED_FUNCTION_22_2();
    a1 = 1;
  }
  v15 = OUTLINED_FUNCTION_13_5();
  OUTLINED_FUNCTION_19_4((uint64_t)v6, a1, v16, v15);
  outlined init with copy of Siri_Nlu_External_UsoGraph?((uint64_t)v6, v1);
  Siri_Nlu_External_UserStatedTask.init(_:)(v1, MEMORY[0x24BE9CB20], MEMORY[0x24BE9CB18], v17, v18, v19, v20, v21, v23, v24, v25, v26, v27, v28, v29, v30, v31, v32, vars0,
    vars8);
  swift_release();
  return outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v6, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
}

void Siri_Nlu_External_UserStatedTask.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  Siri_Nlu_External_UserStatedTask.init(_:)(a1, MEMORY[0x24BE9CB20], MEMORY[0x24BE9CB18], a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t);
  void (*v25)(uint64_t);
  void (*v26)(uint64_t);
  void (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;

  OUTLINED_FUNCTION_32();
  a19 = v22;
  a20 = v23;
  v25 = v24;
  v27 = v26;
  v29 = v28;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_55_0();
  v33 = v32 - v31;
  v34 = OUTLINED_FUNCTION_13_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v35);
  OUTLINED_FUNCTION_2_3();
  v37 = MEMORY[0x24BDAC7A8](v36);
  v39 = (char *)&a9 - v38;
  v27(v37);
  outlined init with copy of Siri_Nlu_External_UsoGraph?(v29, v33);
  if (__swift_getEnumTagSinglePayload(v33, 1, v34) == 1)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v29, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v33, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  }
  else
  {
    OUTLINED_FUNCTION_26_2((uint64_t)v39, v33, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 32));
    OUTLINED_FUNCTION_26_2(v20, (uint64_t)v39, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 16));
    v25(v20);
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v29, &demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v39, v34);
  }
  OUTLINED_FUNCTION_7();
}

uint64_t Siri_Nlu_External_UserDialogAct.usoTask.getter()
{
  unint64_t v0;
  uint64_t v1;

  v0 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  if (v0 >> 62)
  {
    swift_bridgeObjectRetain();
    v1 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v1)
      goto LABEL_5;
  }
  else
  {
    v1 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v1)
      goto LABEL_5;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v0 & 0xC000000000000001) == 0, v0);
  if ((v0 & 0xC000000000000001) != 0)
  {
    v1 = MEMORY[0x2207D80C0](0, v0);
  }
  else
  {
    v1 = *(_QWORD *)(v0 + 32);
    swift_retain();
  }
LABEL_5:
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t Siri_Nlu_External_UserDialogAct.contactId.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  BOOL v22;
  char v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  OUTLINED_FUNCTION_32();
  v39 = v3;
  v40 = v4;
  v5 = type metadata accessor for Google_Protobuf_StringValue();
  v36 = *(_QWORD *)(v5 - 8);
  v37 = v5;
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_9_5();
  v35 = v6;
  v7 = OUTLINED_FUNCTION_25_4();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_2_3();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v33 - v10;
  v38 = OUTLINED_FUNCTION_13_5();
  v12 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v13 = OUTLINED_FUNCTION_6_5();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_17_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_9_5();
  v34 = v16;
  Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
  OUTLINED_FUNCTION_29_3();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0, v13);
  v17 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v2, v38);
  v18 = *(_QWORD *)(v17 + 16);
  if (!v18)
  {
LABEL_17:
    v29 = 1;
    v30 = v34;
    goto LABEL_20;
  }
  v19 = v17 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  v38 = *(_QWORD *)(v8 + 72);
  v20 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  v33 = v17;
  swift_bridgeObjectRetain();
  while (1)
  {
    v20(v11, v19, v7);
    Siri_Nlu_External_UsoEntityIdentifier.backingAppBundleID.getter();
    OUTLINED_FUNCTION_10_5();
    v22 = v22 && v21 == 0xE800000000000000;
    if (v22)
    {
      OUTLINED_FUNCTION_5();
      OUTLINED_FUNCTION_20_4();
    }
    else
    {
      v23 = OUTLINED_FUNCTION_5_5();
      OUTLINED_FUNCTION_5();
      OUTLINED_FUNCTION_20_4();
      if ((v23 & 1) == 0)
      {
        v24 = *(void (**)(char *, uint64_t))(v8 + 8);
        OUTLINED_FUNCTION_7_5();
        goto LABEL_15;
      }
    }
    OUTLINED_FUNCTION_28_4();
    Google_Protobuf_StringValue.value.getter();
    v26 = v25;
    OUTLINED_FUNCTION_24_4(v36);
    OUTLINED_FUNCTION_18_1();
    if (v22 && v26 == 0xE700000000000000)
      break;
    v28 = OUTLINED_FUNCTION_4_5();
    OUTLINED_FUNCTION_5();
    v24 = *(void (**)(char *, uint64_t))(v8 + 8);
    OUTLINED_FUNCTION_7_5();
    if ((v28 & 1) != 0)
      goto LABEL_19;
LABEL_15:
    v24(v11, v7);
    v19 += v38;
    if (!--v18)
    {
      OUTLINED_FUNCTION_5();
      goto LABEL_17;
    }
  }
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_12_4(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
LABEL_19:
  OUTLINED_FUNCTION_5();
  v30 = v34;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v34, v11, v7);
  v29 = 0;
LABEL_20:
  __swift_storeEnumTagSinglePayload(v30, v29, 1, v7);
  OUTLINED_FUNCTION_5();
  if (__swift_getEnumTagSinglePayload(v30, 1, v7) == 1)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v30, &demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
    return 0;
  }
  else
  {
    v31 = Siri_Nlu_External_UsoEntityIdentifier.value.getter();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v30, v7);
  }
  return v31;
}

uint64_t Siri_Nlu_External_UserDialogAct.contactIds.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  char v28;
  uint64_t (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  OUTLINED_FUNCTION_32();
  v61 = v2;
  v62 = v3;
  v4 = type metadata accessor for Google_Protobuf_StringValue();
  v53 = *(_QWORD *)(v4 - 8);
  v54 = v4;
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_9_5();
  v52[1] = v5;
  v6 = OUTLINED_FUNCTION_25_4();
  v59 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v58 = (char *)v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v52 - v10;
  v12 = MEMORY[0x24BDAC7A8](v9);
  v57 = (char *)v52 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v52 - v14;
  v16 = OUTLINED_FUNCTION_13_5();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v18 = OUTLINED_FUNCTION_6_5();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_17_2();
  Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
  OUTLINED_FUNCTION_29_3();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v0, v18);
  v20 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v1, v16);
  v22 = MEMORY[0x24BEE4AF8];
  v60 = MEMORY[0x24BEE4AF8];
  v56 = *(_QWORD *)(v20 + 16);
  if (v56)
  {
    v23 = 0;
    v52[0] = v11;
    v55 = v20;
    while (1)
    {
      if (v23 >= *(_QWORD *)(v20 + 16))
      {
        __break(1u);
        return result;
      }
      v24 = (*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
      v25 = *(_QWORD *)(v59 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v59 + 16))(v15, v20 + v24 + v25 * v23, v6);
      Siri_Nlu_External_UsoEntityIdentifier.backingAppBundleID.getter();
      OUTLINED_FUNCTION_10_5();
      v27 = v27 && v26 == 0xE800000000000000;
      if (v27)
      {
        OUTLINED_FUNCTION_5();
        OUTLINED_FUNCTION_14_3();
      }
      else
      {
        v28 = OUTLINED_FUNCTION_5_5();
        OUTLINED_FUNCTION_5();
        OUTLINED_FUNCTION_14_3();
        if ((v28 & 1) == 0)
        {
          v29 = *(uint64_t (**)(char *, uint64_t))(v59 + 8);
          OUTLINED_FUNCTION_7_5();
          goto LABEL_16;
        }
      }
      OUTLINED_FUNCTION_28_4();
      Google_Protobuf_StringValue.value.getter();
      v31 = v30;
      OUTLINED_FUNCTION_24_4(v53);
      OUTLINED_FUNCTION_18_1();
      if (v27 && v31 == 0xE700000000000000)
      {
        OUTLINED_FUNCTION_5();
        v34 = v59;
        OUTLINED_FUNCTION_12_4(*(uint64_t (**)(uint64_t, uint64_t))(v59 + 8));
LABEL_18:
        v35 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
        v35(v11, v15, v6);
        v36 = v60;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v36 = v60;
        }
        v37 = *(_QWORD *)(v36 + 16);
        if (v37 >= *(_QWORD *)(v36 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          v36 = v60;
        }
        *(_QWORD *)(v36 + 16) = v37 + 1;
        v11 = (char *)v52[0];
        result = ((uint64_t (*)(unint64_t, _QWORD, uint64_t))v35)(v36 + v24 + v37 * v25, v52[0], v6);
        v60 = v36;
        goto LABEL_23;
      }
      v33 = OUTLINED_FUNCTION_4_5();
      OUTLINED_FUNCTION_5();
      v34 = v59;
      v29 = *(uint64_t (**)(char *, uint64_t))(v59 + 8);
      OUTLINED_FUNCTION_7_5();
      if ((v33 & 1) != 0)
        goto LABEL_18;
LABEL_16:
      result = v29(v15, v6);
LABEL_23:
      ++v23;
      v20 = v55;
      if (v56 == v23)
      {
        v22 = v60;
        break;
      }
    }
  }
  OUTLINED_FUNCTION_5();
  v38 = *(_QWORD *)(v22 + 16);
  v39 = v59;
  if (v38)
  {
    v40 = v22 + ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80));
    v41 = *(char **)(v59 + 72);
    v56 = v22;
    v57 = v41;
    v42 = *(void (**)(char *, uint64_t, uint64_t))(v59 + 16);
    swift_retain();
    v43 = MEMORY[0x24BEE4AF8];
    do
    {
      v42(v58, v40, v6);
      v44 = Siri_Nlu_External_UsoEntityIdentifier.value.getter();
      v46 = v45;
      OUTLINED_FUNCTION_12_4(*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8));
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_23_3(0, *(_QWORD *)(v43 + 16) + 1);
        v43 = v50;
      }
      v48 = *(_QWORD *)(v43 + 16);
      v47 = *(_QWORD *)(v43 + 24);
      if (v48 >= v47 >> 1)
      {
        OUTLINED_FUNCTION_23_3(v47 > 1, v48 + 1);
        v43 = v51;
      }
      *(_QWORD *)(v43 + 16) = v48 + 1;
      v49 = v43 + 16 * v48;
      *(_QWORD *)(v49 + 32) = v44;
      *(_QWORD *)(v49 + 40) = v46;
      v40 += (uint64_t)v57;
      --v38;
    }
    while (v38);
    swift_release_n();
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4AF8];
  }
  return v43;
}

uint64_t static Siri_Nlu_External_SystemPrompted.from(_:)(uint64_t a1)
{
  return static Siri_Nlu_External_SystemPrompted.from(_:)(a1, MEMORY[0x24BE9CAE8], MEMORY[0x24BE9CAD8]);
}

uint64_t outlined init with copy of Siri_Nlu_External_UsoGraph?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static Siri_Nlu_External_UserWantedToProceed.from(_:)(uint64_t a1)
{
  return static Siri_Nlu_External_SystemPrompted.from(_:)(a1, MEMORY[0x24BE9D0E8], MEMORY[0x24BE9D0E0]);
}

#error "21FE2A760: call analysis failed (funcsize=92)"

void static Siri_Nlu_External_SystemOffered.from(_:)()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_32();
  v16 = v3;
  v4 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
  OUTLINED_FUNCTION_15_3();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_11_4();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v15 - v7;
  v9 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_2_3();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v15 - v12;
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v14(v8, v16, v4);
  Siri_Nlu_External_UserDialogAct.init()();
  v14(v0, (uint64_t)v8, v4);
  Siri_Nlu_External_UserDialogAct.wantedToProceed.setter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v8, v4);
  Siri_Nlu_External_SystemOffered.init()();
  OUTLINED_FUNCTION_26_2(v1, (uint64_t)v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16));
  Siri_Nlu_External_SystemOffered.offeredAct.setter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  OUTLINED_FUNCTION_7();
}

uint64_t OUTLINED_FUNCTION_4_5()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_5_5()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_6_5()
{
  return type metadata accessor for Siri_Nlu_External_UserStatedTask();
}

uint64_t OUTLINED_FUNCTION_7_5()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v2, v0);
}

uint64_t OUTLINED_FUNCTION_12_4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_13_5()
{
  return type metadata accessor for Siri_Nlu_External_UsoGraph();
}

uint64_t OUTLINED_FUNCTION_14_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD, uint64_t, uint64_t);
  uint64_t v3;

  return v2(*(_QWORD *)(v3 - 112), v1, v0);
}

uint64_t OUTLINED_FUNCTION_19_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1, a4);
}

uint64_t OUTLINED_FUNCTION_20_4()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(v3, v2, v0);
}

uint64_t OUTLINED_FUNCTION_21_4()
{
  return static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
}

void OUTLINED_FUNCTION_22_2()
{
  void *v0;

}

void OUTLINED_FUNCTION_23_3(char a1, uint64_t a2)
{
  uint64_t v2;

  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_24_4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t OUTLINED_FUNCTION_25_4()
{
  return type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
}

uint64_t OUTLINED_FUNCTION_26_2@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_28_4()
{
  return Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
}

uint64_t OUTLINED_FUNCTION_29_3()
{
  return Siri_Nlu_External_UserStatedTask.task.getter();
}

uint64_t type metadata accessor for ModifyContactAttributeCATs()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ModifyContactAttributeCATs;
  if (!type metadata singleton initialization cache for ModifyContactAttributeCATs)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for ModifyContactAttributeCATs()
{
  return swift_initClassMetadata2();
}

uint64_t ModifyContactAttributeCATs.confirmModifyNickname(requestedNickname:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[5] = OUTLINED_FUNCTION_22_3();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ModifyContactAttributeCATs.confirmModifyNickname(requestedNickname:)()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);

  OUTLINED_FUNCTION_26_3();
  OUTLINED_FUNCTION_42_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v2 = (_OWORD *)OUTLINED_FUNCTION_13_3();
  *(_QWORD *)(v1 + 48) = v2;
  v2[1] = xmmword_21FED8CB0;
  OUTLINED_FUNCTION_34_1((uint64_t)v2, (uint64_t)"requestedNickname");
  OUTLINED_FUNCTION_10_6(v0, v3, &demangling cache variable for type metadata for SpeakableString?);
  v4 = OUTLINED_FUNCTION_31_4();
  v5 = OUTLINED_FUNCTION_20_5(v4);
  if (v6)
  {
    OUTLINED_FUNCTION_12_5(v5, &demangling cache variable for type metadata for SpeakableString?);
    v2[3] = 0u;
    v2[4] = 0u;
  }
  else
  {
    v7 = OUTLINED_FUNCTION_39_3();
    OUTLINED_FUNCTION_24_5((uint64_t)v7);
  }
  v8 = (_QWORD *)OUTLINED_FUNCTION_7_4();
  *(_QWORD *)(v1 + 56) = v8;
  OUTLINED_FUNCTION_46_3(v8);
  OUTLINED_FUNCTION_6_6();
  return OUTLINED_FUNCTION_1_3(v9, v10, v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t (*v2)(void);

  OUTLINED_FUNCTION_8_4();
  if (v0)
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_6_1();
  }
  else
  {
    OUTLINED_FUNCTION_47_2();
    OUTLINED_FUNCTION_14_0();
    v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
    return OUTLINED_FUNCTION_2_4(v2);
  }
}

uint64_t ModifyContactAttributeCATs.confirmModifyRelationship(requestedRelationship:existingRelationship:contactName:modifyOperation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v6[8] = OUTLINED_FUNCTION_25_0();
  v6[9] = OUTLINED_FUNCTION_25_0();
  v6[10] = OUTLINED_FUNCTION_25_0();
  v6[11] = OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ModifyContactAttributeCATs.confirmModifyRelationship(requestedRelationship:existingRelationship:contactName:modifyOperation:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void);

  OUTLINED_FUNCTION_26_3();
  v1 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v2 = OUTLINED_FUNCTION_13_3();
  v0[12] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_21FED9150;
  *(_QWORD *)(v2 + 32) = 0xD000000000000015;
  *(_QWORD *)(v2 + 40) = 0x800000021FEE0780;
  OUTLINED_FUNCTION_10_6(v1, v3, &demangling cache variable for type metadata for SpeakableString?);
  v4 = OUTLINED_FUNCTION_31_4();
  v5 = OUTLINED_FUNCTION_41_3(v4);
  if (v6)
  {
    OUTLINED_FUNCTION_12_5(v5, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_19_5();
  }
  else
  {
    *(_QWORD *)(v2 + 72) = v1;
    v7 = OUTLINED_FUNCTION_13_6();
    OUTLINED_FUNCTION_0_5((uint64_t)v7);
  }
  v9 = v0[4];
  *(_QWORD *)(v2 + 80) = 0xD000000000000014;
  *(_QWORD *)(v2 + 88) = 0x800000021FEE0900;
  OUTLINED_FUNCTION_10_6(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  v10 = OUTLINED_FUNCTION_48_2();
  if (v6)
  {
    OUTLINED_FUNCTION_12_5(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_19_5();
  }
  else
  {
    *(_QWORD *)(v2 + 120) = v1;
    v11 = OUTLINED_FUNCTION_13_6();
    OUTLINED_FUNCTION_0_5((uint64_t)v11);
  }
  v12 = OUTLINED_FUNCTION_18_2();
  OUTLINED_FUNCTION_10_6(v12, v13, &demangling cache variable for type metadata for SpeakableString?);
  v14 = OUTLINED_FUNCTION_27_4();
  if (v6)
  {
    OUTLINED_FUNCTION_12_5(v14, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_19_5();
  }
  else
  {
    *(_QWORD *)(v2 + 168) = v1;
    v15 = OUTLINED_FUNCTION_13_6();
    OUTLINED_FUNCTION_0_5((uint64_t)v15);
  }
  v16 = OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_10_6(v16, v17, &demangling cache variable for type metadata for SpeakableString?);
  v18 = OUTLINED_FUNCTION_28_5();
  if (v6)
  {
    OUTLINED_FUNCTION_12_5(v18, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_19_5();
  }
  else
  {
    *(_QWORD *)(v2 + 216) = v1;
    v19 = OUTLINED_FUNCTION_13_6();
    OUTLINED_FUNCTION_0_5((uint64_t)v19);
  }
  v20 = (_QWORD *)OUTLINED_FUNCTION_7_4();
  v0[13] = v20;
  *v20 = v0;
  v20[1] = ModifyContactAttributeCATs.confirmModifyRelationship(requestedRelationship:existingRelationship:contactName:modifyOperation:);
  OUTLINED_FUNCTION_6_6();
  return OUTLINED_FUNCTION_1_3(v21, v22, v23, v24, v25);
}

{
  uint64_t v0;
  uint64_t (*v2)(void);

  OUTLINED_FUNCTION_25_5();
  if (v0)
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_6_1();
  }
  else
  {
    OUTLINED_FUNCTION_43_3();
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_45_0();
    v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
    return OUTLINED_FUNCTION_2_4(v2);
  }
}

uint64_t ModifyContactAttributeCATs.intentHandledModifyNickname(updatedNickname:existingNickname:contactName:modifyOperation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = v5;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v6[8] = OUTLINED_FUNCTION_25_0();
  v6[9] = OUTLINED_FUNCTION_25_0();
  v6[10] = OUTLINED_FUNCTION_25_0();
  v6[11] = OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ModifyContactAttributeCATs.intentHandledModifyNickname(updatedNickname:existingNickname:contactName:modifyOperation:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void);

  OUTLINED_FUNCTION_26_3();
  v1 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v2 = OUTLINED_FUNCTION_13_3();
  v0[12] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_21FED9150;
  *(_QWORD *)(v2 + 32) = 0x4E64657461647075;
  *(_QWORD *)(v2 + 40) = 0xEF656D616E6B6369;
  OUTLINED_FUNCTION_10_6(v1, v3, &demangling cache variable for type metadata for SpeakableString?);
  v4 = OUTLINED_FUNCTION_31_4();
  v5 = OUTLINED_FUNCTION_41_3(v4);
  if (v6)
  {
    OUTLINED_FUNCTION_12_5(v5, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_19_5();
  }
  else
  {
    *(_QWORD *)(v2 + 72) = v1;
    v7 = OUTLINED_FUNCTION_13_6();
    OUTLINED_FUNCTION_0_5((uint64_t)v7);
  }
  v9 = v0[4];
  *(_QWORD *)(v2 + 80) = 0xD000000000000010;
  *(_QWORD *)(v2 + 88) = 0x800000021FEE08A0;
  OUTLINED_FUNCTION_10_6(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  v10 = OUTLINED_FUNCTION_48_2();
  if (v6)
  {
    OUTLINED_FUNCTION_12_5(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_19_5();
  }
  else
  {
    *(_QWORD *)(v2 + 120) = v1;
    v11 = OUTLINED_FUNCTION_13_6();
    OUTLINED_FUNCTION_0_5((uint64_t)v11);
  }
  v12 = OUTLINED_FUNCTION_18_2();
  OUTLINED_FUNCTION_10_6(v12, v13, &demangling cache variable for type metadata for SpeakableString?);
  v14 = OUTLINED_FUNCTION_27_4();
  if (v6)
  {
    OUTLINED_FUNCTION_12_5(v14, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_19_5();
  }
  else
  {
    *(_QWORD *)(v2 + 168) = v1;
    v15 = OUTLINED_FUNCTION_13_6();
    OUTLINED_FUNCTION_0_5((uint64_t)v15);
  }
  v16 = OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_10_6(v16, v17, &demangling cache variable for type metadata for SpeakableString?);
  v18 = OUTLINED_FUNCTION_28_5();
  if (v6)
  {
    OUTLINED_FUNCTION_12_5(v18, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_19_5();
  }
  else
  {
    *(_QWORD *)(v2 + 216) = v1;
    v19 = OUTLINED_FUNCTION_13_6();
    OUTLINED_FUNCTION_0_5((uint64_t)v19);
  }
  v20 = (_QWORD *)OUTLINED_FUNCTION_7_4();
  v0[13] = v20;
  *v20 = v0;
  v20[1] = ModifyContactAttributeCATs.intentHandledModifyNickname(updatedNickname:existingNickname:contactName:modifyOperation:);
  OUTLINED_FUNCTION_6_6();
  return OUTLINED_FUNCTION_1_3(v21, v22, v23, v24, v25);
}

{
  uint64_t v0;
  uint64_t (*v2)(void);

  OUTLINED_FUNCTION_25_5();
  if (v0)
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_6_1();
  }
  else
  {
    OUTLINED_FUNCTION_43_3();
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_45_0();
    v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
    return OUTLINED_FUNCTION_2_4(v2);
  }
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  return OUTLINED_FUNCTION_2_4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ModifyContactAttributeCATs.intentHandledModifyRelationship(updatedRelationship:contactName:modifyOperation:isVoiceMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 40) = a4;
  *(_QWORD *)(v6 + 48) = v5;
  *(_BYTE *)(v6 + 104) = a5;
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = a3;
  *(_QWORD *)(v6 + 16) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(_QWORD *)(v6 + 56) = OUTLINED_FUNCTION_25_0();
  *(_QWORD *)(v6 + 64) = OUTLINED_FUNCTION_25_0();
  *(_QWORD *)(v6 + 72) = OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ModifyContactAttributeCATs.intentHandledModifyRelationship(updatedRelationship:contactName:modifyOperation:isVoiceMode:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t EnumTagSinglePayload;
  uint64_t *v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);

  OUTLINED_FUNCTION_26_3();
  v1 = *(_QWORD *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v2 = OUTLINED_FUNCTION_13_3();
  *(_QWORD *)(v0 + 80) = v2;
  *(_OWORD *)(v2 + 16) = xmmword_21FED9150;
  OUTLINED_FUNCTION_34_1(v2, (uint64_t)"updatedRelationship");
  OUTLINED_FUNCTION_10_6(v1, v3, &demangling cache variable for type metadata for SpeakableString?);
  v4 = OUTLINED_FUNCTION_31_4();
  v5 = OUTLINED_FUNCTION_27_4();
  if (v6)
  {
    OUTLINED_FUNCTION_12_5(v5, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_19_5();
  }
  else
  {
    *(_QWORD *)(v2 + 72) = v4;
    v7 = OUTLINED_FUNCTION_13_6();
    OUTLINED_FUNCTION_0_5((uint64_t)v7);
  }
  v9 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v2 + 80) = 0x4E746361746E6F63;
  *(_QWORD *)(v2 + 88) = 0xEB00000000656D61;
  OUTLINED_FUNCTION_10_6(v9, v8, &demangling cache variable for type metadata for SpeakableString?);
  v10 = OUTLINED_FUNCTION_28_5();
  if (v6)
  {
    OUTLINED_FUNCTION_12_5(v10, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_19_5();
  }
  else
  {
    *(_QWORD *)(v2 + 120) = v4;
    v11 = OUTLINED_FUNCTION_13_6();
    OUTLINED_FUNCTION_0_5((uint64_t)v11);
  }
  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v2 + 128) = 0x704F796669646F6DLL;
  *(_QWORD *)(v2 + 136) = 0xEF6E6F6974617265;
  OUTLINED_FUNCTION_10_6(v14, v12, &demangling cache variable for type metadata for SpeakableString?);
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v13, 1, v4);
  if ((_DWORD)EnumTagSinglePayload == 1)
  {
    OUTLINED_FUNCTION_12_5(EnumTagSinglePayload, &demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_19_5();
  }
  else
  {
    *(_QWORD *)(v2 + 168) = v4;
    v16 = OUTLINED_FUNCTION_13_6();
    OUTLINED_FUNCTION_0_5((uint64_t)v16);
  }
  v17 = *(_BYTE *)(v0 + 104);
  *(_QWORD *)(v2 + 176) = 0x4D6563696F567369;
  *(_QWORD *)(v2 + 184) = 0xEB0000000065646FLL;
  *(_QWORD *)(v2 + 216) = MEMORY[0x24BEE1328];
  *(_BYTE *)(v2 + 192) = v17;
  v18 = (_QWORD *)OUTLINED_FUNCTION_7_4();
  *(_QWORD *)(v0 + 88) = v18;
  *v18 = v0;
  v18[1] = ModifyContactAttributeCATs.intentHandledModifyRelationship(updatedRelationship:contactName:modifyOperation:isVoiceMode:);
  OUTLINED_FUNCTION_6_6();
  return OUTLINED_FUNCTION_1_3(v19, v20, v21, v22, v23);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v3)(void);

  *(_QWORD *)(*(_QWORD *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_20_0();
    return swift_task_switch();
  }
  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_13_0();
    v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
    return OUTLINED_FUNCTION_30_4(v3);
  }
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  return OUTLINED_FUNCTION_30_4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ModifyContactAttributeCATs.promptForNickname()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v3 = (_QWORD *)OUTLINED_FUNCTION_7_4();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = ModifyContactAttributeCATs.promptForNickname();
  return OUTLINED_FUNCTION_32_4(a1, 0xD000000000000028, 0x800000021FEE0810, MEMORY[0x24BEE4AF8], v5);
}

uint64_t ModifyContactAttributeCATs.promptForNickname()()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return OUTLINED_FUNCTION_3_2(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t ModifyContactAttributeCATs.promptForRelationship(contact:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_4_3();
}

uint64_t ModifyContactAttributeCATs.promptForRelationship(contact:)()
{
  _QWORD *v0;
  unint64_t v1;
  __n128 *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v8)(void);

  v1 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v2 = (__n128 *)OUTLINED_FUNCTION_13_3();
  v0[5] = v2;
  v3 = OUTLINED_FUNCTION_29_4(v2, (__n128)xmmword_21FED8CB0);
  if (v1)
  {
    v3 = type metadata accessor for DialogPerson();
  }
  else
  {
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  v2[3].n128_u64[0] = v1;
  v2[4].n128_u64[1] = v3;
  OUTLINED_FUNCTION_35_2();
  v4 = (_QWORD *)OUTLINED_FUNCTION_45_2();
  v0[6] = v4;
  OUTLINED_FUNCTION_33_2(v4);
  OUTLINED_FUNCTION_40_2();
  return OUTLINED_FUNCTION_14_4(v5, 0xD00000000000002CLL, v6, (uint64_t)v2, v8);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_6();
  if (v0)
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_6_1();
  }
  else
  {
    OUTLINED_FUNCTION_44_2();
    return OUTLINED_FUNCTION_2_4(*(uint64_t (**)(void))(v1 + 8));
  }
}

uint64_t ModifyContactAttributeCATs.promptForRelationshipContact(requestedRelationship:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[5] = OUTLINED_FUNCTION_22_3();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ModifyContactAttributeCATs.promptForRelationshipContact(requestedRelationship:)()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);

  OUTLINED_FUNCTION_26_3();
  OUTLINED_FUNCTION_42_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v2 = (_OWORD *)OUTLINED_FUNCTION_13_3();
  *(_QWORD *)(v1 + 48) = v2;
  v2[1] = xmmword_21FED8CB0;
  OUTLINED_FUNCTION_34_1((uint64_t)v2, (uint64_t)"requestedRelationship");
  OUTLINED_FUNCTION_10_6(v0, v3, &demangling cache variable for type metadata for SpeakableString?);
  v4 = OUTLINED_FUNCTION_31_4();
  v5 = OUTLINED_FUNCTION_20_5(v4);
  if (v6)
  {
    OUTLINED_FUNCTION_12_5(v5, &demangling cache variable for type metadata for SpeakableString?);
    v2[3] = 0u;
    v2[4] = 0u;
  }
  else
  {
    v7 = OUTLINED_FUNCTION_39_3();
    OUTLINED_FUNCTION_24_5((uint64_t)v7);
  }
  v8 = (_QWORD *)OUTLINED_FUNCTION_7_4();
  *(_QWORD *)(v1 + 56) = v8;
  OUTLINED_FUNCTION_33_2(v8);
  OUTLINED_FUNCTION_6_6();
  return OUTLINED_FUNCTION_1_3(v9, v10, v11, v12, v13);
}

{
  uint64_t v0;
  uint64_t (*v2)(void);

  OUTLINED_FUNCTION_8_4();
  if (v0)
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_6_1();
  }
  else
  {
    OUTLINED_FUNCTION_47_2();
    OUTLINED_FUNCTION_14_0();
    v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
    return OUTLINED_FUNCTION_2_4(v2);
  }
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_14_0();
  return OUTLINED_FUNCTION_3_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ModifyContactAttributeCATs.relationshipExists()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v3 = (_QWORD *)OUTLINED_FUNCTION_7_4();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = ModifyContactAttributeCATs.relationshipExists();
  return OUTLINED_FUNCTION_32_4(a1, 0xD000000000000029, 0x800000021FEE0750, MEMORY[0x24BEE4AF8], v5);
}

uint64_t ModifyContactAttributeCATs.relationshipNotFound(contact:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_4_3();
}

uint64_t ModifyContactAttributeCATs.relationshipNotFound(contact:)()
{
  _QWORD *v0;
  unint64_t v1;
  __n128 *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v8)(void);

  v1 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v2 = (__n128 *)OUTLINED_FUNCTION_13_3();
  v0[5] = v2;
  v3 = OUTLINED_FUNCTION_29_4(v2, (__n128)xmmword_21FED8CB0);
  if (v1)
  {
    v3 = type metadata accessor for DialogPerson();
  }
  else
  {
    v2[3].n128_u64[1] = 0;
    v2[4].n128_u64[0] = 0;
  }
  v2[3].n128_u64[0] = v1;
  v2[4].n128_u64[1] = v3;
  OUTLINED_FUNCTION_35_2();
  v4 = (_QWORD *)OUTLINED_FUNCTION_45_2();
  v0[6] = v4;
  OUTLINED_FUNCTION_33_2(v4);
  OUTLINED_FUNCTION_40_2();
  return OUTLINED_FUNCTION_14_4(v5, 0xD00000000000002BLL, v6, (uint64_t)v2, v8);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_9_6();
  if (v0)
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_6_1();
  }
  else
  {
    OUTLINED_FUNCTION_44_2();
    return OUTLINED_FUNCTION_2_4(*(uint64_t (**)(void))(v1 + 8));
  }
}

uint64_t ModifyContactAttributeCATs.unsupportedAttributeToModify(device:contactsAppUnavailable:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 64) = a3;
  *(_QWORD *)(v4 + 16) = a1;
  return OUTLINED_FUNCTION_4_3();
}

uint64_t ModifyContactAttributeCATs.unsupportedAttributeToModify(device:contactsAppUnavailable:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v10)(void);

  v1 = *(_QWORD *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v2 = OUTLINED_FUNCTION_13_3();
  *(_QWORD *)(v0 + 40) = v2;
  *(_OWORD *)(v2 + 16) = xmmword_21FED9160;
  *(_QWORD *)(v2 + 32) = 0x656369766564;
  *(_QWORD *)(v2 + 40) = 0xE600000000000000;
  v3 = 0;
  if (v1)
  {
    v3 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(_QWORD *)(v2 + 56) = 0;
    *(_QWORD *)(v2 + 64) = 0;
  }
  v4 = *(_BYTE *)(v0 + 64);
  *(_QWORD *)(v2 + 48) = v1;
  *(_QWORD *)(v2 + 88) = 0x800000021FEE0700;
  *(_QWORD *)(v2 + 120) = MEMORY[0x24BEE1328];
  *(_BYTE *)(v2 + 96) = v4;
  v10 = (uint64_t (*)(void))((int)*MEMORY[0x24BE92870] + MEMORY[0x24BE92870]);
  *(_QWORD *)(v2 + 72) = v3;
  *(_QWORD *)(v2 + 80) = 0xD000000000000016;
  swift_retain();
  v5 = (_QWORD *)OUTLINED_FUNCTION_45_2();
  *(_QWORD *)(v0 + 48) = v5;
  OUTLINED_FUNCTION_33_2(v5);
  OUTLINED_FUNCTION_40_2();
  return OUTLINED_FUNCTION_14_4(v6, v7, v8, v2, v10);
}

uint64_t ModifyContactAttributeCATs.unsupportedMissingMeCard(contactAttributeType:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[5] = OUTLINED_FUNCTION_22_3();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ModifyContactAttributeCATs.unsupportedMissingMeCard(contactAttributeType:)()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);

  OUTLINED_FUNCTION_26_3();
  OUTLINED_FUNCTION_42_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v2 = (_OWORD *)OUTLINED_FUNCTION_13_3();
  *(_QWORD *)(v1 + 48) = v2;
  v2[1] = xmmword_21FED8CB0;
  OUTLINED_FUNCTION_34_1((uint64_t)v2, (uint64_t)"contactAttributeType");
  OUTLINED_FUNCTION_10_6(v0, v3, &demangling cache variable for type metadata for SpeakableString?);
  v4 = OUTLINED_FUNCTION_31_4();
  v5 = OUTLINED_FUNCTION_20_5(v4);
  if (v6)
  {
    OUTLINED_FUNCTION_12_5(v5, &demangling cache variable for type metadata for SpeakableString?);
    v2[3] = 0u;
    v2[4] = 0u;
  }
  else
  {
    v7 = OUTLINED_FUNCTION_39_3();
    OUTLINED_FUNCTION_24_5((uint64_t)v7);
  }
  v8 = (_QWORD *)OUTLINED_FUNCTION_7_4();
  *(_QWORD *)(v1 + 56) = v8;
  OUTLINED_FUNCTION_46_3(v8);
  OUTLINED_FUNCTION_6_6();
  return OUTLINED_FUNCTION_1_3(v9, v10, v11, v12, v13);
}

uint64_t ModifyContactAttributeCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  return ModifyContactAttributeCATs.init(templateDir:options:globals:)(a1, a2);
}

uint64_t ModifyContactAttributeCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v4 = type metadata accessor for CATOption();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of URL?(a1, (uint64_t)v10, &demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  v11 = ContactsCommonCATs.init(templateDir:options:globals:)((uint64_t)v10, (uint64_t)v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  outlined destroy of UsoEntity_common_Person.DefinedValues?(a1, &demangling cache variable for type metadata for URL?);
  return v11;
}

uint64_t ModifyContactAttributeCATs.__deallocating_deinit()
{
  CATWrapper.deinit();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for ModifyContactAttributeCATs()
{
  return type metadata accessor for ModifyContactAttributeCATs();
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t OUTLINED_FUNCTION_0_5(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_1_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t OUTLINED_FUNCTION_2_4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_8_4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 64) = v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_9_6()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 56) = v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_10_6(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return outlined init with copy of URL?(a1, v3, a3);
}

uint64_t OUTLINED_FUNCTION_12_5(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return outlined destroy of UsoEntity_common_Person.DefinedValues?(v2, a2);
}

uint64_t *OUTLINED_FUNCTION_13_6()
{
  uint64_t *v0;

  return __swift_allocate_boxed_opaque_existential_1(v0);
}

uint64_t OUTLINED_FUNCTION_14_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t OUTLINED_FUNCTION_16_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 176) = 0x704F796669646F6DLL;
  *(_QWORD *)(v1 + 184) = 0xEF6E6F6974617265;
  return result;
}

uint64_t OUTLINED_FUNCTION_18_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  result = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v1 + 128) = 0x4E746361746E6F63;
  *(_QWORD *)(v1 + 136) = 0xEB00000000656D61;
  return result;
}

double OUTLINED_FUNCTION_19_5()
{
  _OWORD *v0;
  double result;

  result = 0.0;
  *v0 = 0u;
  v0[1] = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_20_5(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_22_3()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_24_5(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 32))(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_25_5()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 112) = v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_27_4()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_28_5()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_29_4(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[2].n128_u64[0] = 0x746361746E6F63;
  a1[2].n128_u64[1] = 0xE700000000000000;
  return 0;
}

uint64_t OUTLINED_FUNCTION_30_4(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_31_4()
{
  return type metadata accessor for SpeakableString();
}

uint64_t OUTLINED_FUNCTION_32_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t OUTLINED_FUNCTION_33_2(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 16);
}

uint64_t OUTLINED_FUNCTION_34_1@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(result + 32) = v2;
  *(_QWORD *)(result + 40) = (a2 - 32) | 0x8000000000000000;
  return result;
}

uint64_t OUTLINED_FUNCTION_35_2()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_37_3()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t *OUTLINED_FUNCTION_39_3()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 72) = v1;
  return __swift_allocate_boxed_opaque_existential_1(v0);
}

uint64_t OUTLINED_FUNCTION_41_3(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_43_3()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_44_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_45_2()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_46_3(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 16);
}

uint64_t OUTLINED_FUNCTION_47_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_48_2()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v1, 1, v0);
}

uint64_t ContactsBirthdayInfo.__allocating_init(contact:shouldAccountForYearless:)(void *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  void *v30;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_55_0();
  v7 = v6 - v5;
  v8 = type metadata accessor for DateComponents();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_55_0();
  v12 = v11 - v10;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_55_0();
  v16 = v15 - v14;
  v17 = type metadata accessor for Date();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_55_0();
  v21 = v20 - v19;
  CNContact.timezonedBirthdate.getter(v16);
  if (__swift_getEnumTagSinglePayload(v16, 1, v17) != 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v21, v16, v17);
    v23 = a1;
    if ((a2 & 1) != 0)
    {
      CNContact.timezonedBirthday.getter(v7);
      if (__swift_getEnumTagSinglePayload(v7, 1, v8) == 1)
      {
        outlined destroy of UsoEntity_common_Person.DefinedValues?(v7, &demangling cache variable for type metadata for DateComponents?);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v12, v7, v8);
        DateComponents.year.getter();
        if ((v24 & 1) != 0)
        {
          type metadata accessor for DialogDateFormatter.Builder();
          OUTLINED_FUNCTION_32_0();
          DialogDateFormatter.Builder.init()();
          dispatch thunk of DialogDateFormatter.Builder.withOmitYear(_:)();
          OUTLINED_FUNCTION_2();
          dispatch thunk of DialogDateFormatter.Builder.build()();
          swift_release();
          type metadata accessor for ContactsBirthdayInfo.Builder(0);
          *(_QWORD *)(OUTLINED_FUNCTION_32_0() + 16) = 0;
          v28 = OUTLINED_FUNCTION_19_6();
          OUTLINED_FUNCTION_8_5(v28);
          OUTLINED_FUNCTION_32_0();
          OUTLINED_FUNCTION_14_5();
          swift_retain();
          v30 = a1;
          dispatch thunk of DialogCalendar.Builder.withDateFormatter(_:)();
          OUTLINED_FUNCTION_2();
          OUTLINED_FUNCTION_52();
          OUTLINED_FUNCTION_24_6();
          v29 = dispatch thunk of DialogCalendar.Builder.withSecs(_:)();
          swift_release();
          ContactsBirthdayInfo.Builder.withBirthday(_:)(v29);
          swift_release();
          OUTLINED_FUNCTION_52();
          type metadata accessor for ContactsBirthdayInfo(0);
          OUTLINED_FUNCTION_32_0();
          v22 = OUTLINED_FUNCTION_15_4();
          swift_release();

          OUTLINED_FUNCTION_16_2();
          goto LABEL_9;
        }
        OUTLINED_FUNCTION_16_2();
      }
    }
    type metadata accessor for ContactsBirthdayInfo.Builder(0);
    *(_QWORD *)(OUTLINED_FUNCTION_32_0() + 16) = 0;
    v25 = OUTLINED_FUNCTION_19_6();
    OUTLINED_FUNCTION_8_5(v25);
    OUTLINED_FUNCTION_32_0();
    OUTLINED_FUNCTION_14_5();
    OUTLINED_FUNCTION_24_6();
    v26 = dispatch thunk of DialogCalendar.Builder.withSecs(_:)();
    swift_release();
    ContactsBirthdayInfo.Builder.withBirthday(_:)(v26);
    swift_release();
    OUTLINED_FUNCTION_52();
    type metadata accessor for ContactsBirthdayInfo(0);
    OUTLINED_FUNCTION_32_0();
    v22 = OUTLINED_FUNCTION_15_4();

LABEL_9:
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v21, v17);
    return v22;
  }

  outlined destroy of UsoEntity_common_Person.DefinedValues?(v16, (uint64_t *)&demangling cache variable for type metadata for Date?);
  return 0;
}

uint64_t DialogCalendar.init(contact:mockGlobals:)(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (**v20)(char *, void *);
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (**v26)(char *, void *);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  os_log_type_t v30;
  BOOL v31;
  id v32;
  _WORD *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, void *);
  uint64_t v37;
  char v38;
  uint64_t v39;
  double v40;
  double v41;
  void (*v42)(char *, uint64_t);
  BOOL v43;
  NSObject *v44;
  void (**v45)(char *, void *);
  uint64_t v46;
  os_log_type_t v47;
  BOOL v48;
  id v49;
  _WORD *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, void *);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char v58;
  uint64_t v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void (*v65)(char *, uint64_t);
  void (**v66)(char *, void *);
  void (*v67)(char *, void *);
  uint64_t v68;
  double v70;
  double v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  int v78;
  void *v79;
  char v80;
  char v81;
  uint64_t v82;
  char v83;
  void *v84;
  int v85;
  void *v86;
  uint64_t v87;
  os_log_type_t v88;
  _WORD *v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  char v93;
  char v94;
  uint64_t v95;
  char v96;
  char v97;
  char v98;
  uint64_t v99;
  os_log_type_t v100;
  _WORD *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD v104[2];
  int v105;
  uint64_t v106;
  void (**v107)(char *, void *);
  void (**v108)(char *, void *);
  uint64_t v109;
  char *v110;
  NSObject *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  uint64_t v117;

  v115 = a2;
  v3 = type metadata accessor for Date();
  v112 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_5_2();
  v109 = v4;
  MEMORY[0x24BDAC7A8](v5);
  v110 = (char *)v104 - v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_5_2();
  v111 = v8;
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v104 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v104 - v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_55_0();
  v18 = v17 - v16;
  v19 = type metadata accessor for DateComponents();
  v20 = *(void (***)(char *, void *))(v19 - 8);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)v104 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x24BDAC7A8](v21);
  v26 = (void (**)(char *, void *))((char *)v104 - v25);
  MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)v104 - v27;
  v114 = a1;
  CNContact.timezonedBirthday.getter(v18);
  if (__swift_getEnumTagSinglePayload(v18, 1, v19) == 1)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v18, &demangling cache variable for type metadata for DateComponents?);
    OUTLINED_FUNCTION_17_3();
    if (!v43)
      swift_once();
    v29 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v29, (uint64_t)static Logger.siriContacts);
    v30 = OUTLINED_FUNCTION_54_2();
    v31 = OUTLINED_FUNCTION_30_3(v30);
    v32 = v115;
    if (v31)
    {
      v33 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_54_0(v33);
      OUTLINED_FUNCTION_2_5(&dword_21FE16000, v34, v35, "[DialogCalendar] no birthday set, returning nil");
      OUTLINED_FUNCTION_1_4();
    }

    OUTLINED_FUNCTION_25_6();
    return 0;
  }
  v108 = v20;
  v36 = v20[4];
  v106 = v19;
  ((void (*)(char *, uint64_t, uint64_t))v36)(v28, v18, v19);
  static DateComponents.startOfToday.getter();
  DateComponents.year.getter();
  v107 = v26;
  v37 = v3;
  v113 = v28;
  if ((v38 & 1) != 0)
    goto LABEL_15;
  OUTLINED_FUNCTION_23_4();
  DateComponents.yearForWeekOfYear.setter();
  DateComponents.date.getter();
  OUTLINED_FUNCTION_13_7((uint64_t)v14);
  if (v43)
  {
    v39 = (uint64_t)v14;
LABEL_14:
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v39, (uint64_t *)&demangling cache variable for type metadata for Date?);
    goto LABEL_15;
  }
  Date.timeIntervalSince1970.getter();
  v41 = v40;
  v42 = *(void (**)(char *, uint64_t))(v112 + 8);
  v42(v14, v3);
  DateComponents.date.getter();
  OUTLINED_FUNCTION_13_7((uint64_t)v12);
  if (v43)
  {
    v39 = (uint64_t)v12;
    goto LABEL_14;
  }
  Date.timeIntervalSince1970.getter();
  v71 = v70;
  v42(v12, v3);
  v72 = DateComponents.year.getter();
  if ((v73 & 1) == 0)
  {
    v74 = v72;
    type metadata accessor for DialogCalendar.Builder();
    OUTLINED_FUNCTION_32_0();
    OUTLINED_FUNCTION_14_5();
    dispatch thunk of DialogCalendar.Builder.withSecs(_:)();
    OUTLINED_FUNCTION_2();
    type metadata accessor for DialogCalendar();
    OUTLINED_FUNCTION_32_0();
    v75 = DialogCalendar.init(builder:)();
    if (v115)
    {
      v76 = v115;
      dispatch thunk of DialogCalendar.mockGlobals.setter();
    }
    if (v41 >= v71 || (dispatch thunk of DialogCalendar.isYesterday.getter() & 1) != 0)
    {
      v77 = v75;
      v78 = 0;
    }
    else
    {
      v77 = v75;
      v78 = dispatch thunk of DialogCalendar.withinPastWeek.getter() ^ 1;
    }
    v79 = (void *)DateComponents.month.getter();
    v81 = v80;
    v82 = DateComponents.month.getter();
    if ((v81 & 1) != 0)
    {
      if ((v83 & 1) != 0)
      {
        OUTLINED_FUNCTION_7_6();
        goto LABEL_53;
      }
    }
    else if ((v83 & 1) == 0)
    {
      v84 = (void *)v82;
      v26 = v108;
      v85 = v78;
      v86 = (void *)v106;
      ((void (*)(char *, void (**)(char *, void *), uint64_t))v108[2])(v23, v107, v106);
      v43 = v79 == v84;
      v79 = v86;
      v78 = v85;
      if (!v43)
      {
LABEL_45:
        v26[1](v23, v79);
        if ((v78 & 1) != 0)
        {
LABEL_46:
          OUTLINED_FUNCTION_17_3();
          if (!v43)
            swift_once();
          v87 = OUTLINED_FUNCTION_26();
          OUTLINED_FUNCTION_10_1(v87, (uint64_t)static Logger.siriContacts);
          v88 = OUTLINED_FUNCTION_54_2();
          if (OUTLINED_FUNCTION_30_3(v88))
          {
            v89 = (_WORD *)OUTLINED_FUNCTION_2_1();
            OUTLINED_FUNCTION_54_0(v89);
            OUTLINED_FUNCTION_2_5(&dword_21FE16000, v90, v91, "[DialogCalendar] birthday passed already this year, set the birthday year to next year");
            OUTLINED_FUNCTION_1_4();
          }

          v79 = (void *)(v74 + 1);
          if (!__OFADD__(v74, 1))
          {
            OUTLINED_FUNCTION_23_4();
            DateComponents.yearForWeekOfYear.setter();
LABEL_63:
            swift_release();
            goto LABEL_15;
          }
          __break(1u);
          goto LABEL_67;
        }
        goto LABEL_58;
      }
LABEL_53:
      v105 = v78;
      v104[0] = v74;
      v104[1] = v77;
      v92 = v79;
      v79 = (void *)DateComponents.day.getter();
      v94 = v93;
      v95 = DateComponents.day.getter();
      v97 = v96;
      v26[1](v23, v92);
      if ((v94 & 1) != 0)
      {
        v98 = ((v97 & 1) == 0) & v105;
      }
      else
      {
        if ((v97 & 1) != 0)
        {
          v74 = v104[0];
          if ((v105 & 1) != 0)
            goto LABEL_46;
          goto LABEL_58;
        }
        v98 = v105 & (v79 != (void *)v95);
      }
      v74 = v104[0];
      if ((v98 & 1) != 0)
        goto LABEL_46;
LABEL_58:
      OUTLINED_FUNCTION_17_3();
      if (v43)
      {
LABEL_60:
        v99 = OUTLINED_FUNCTION_26();
        OUTLINED_FUNCTION_10_1(v99, (uint64_t)static Logger.siriContacts);
        v100 = OUTLINED_FUNCTION_54_2();
        if (OUTLINED_FUNCTION_30_3(v100))
        {
          v101 = (_WORD *)OUTLINED_FUNCTION_2_1();
          OUTLINED_FUNCTION_54_0(v101);
          OUTLINED_FUNCTION_2_5(&dword_21FE16000, v102, v103, "[DialogCalendar] birthday has not passed yet this year, keep birthday year as current year");
          OUTLINED_FUNCTION_1_4();
        }

        goto LABEL_63;
      }
LABEL_67:
      swift_once();
      goto LABEL_60;
    }
    OUTLINED_FUNCTION_7_6();
    goto LABEL_45;
  }
LABEL_15:
  v44 = v111;
  DateComponents.date.getter();
  OUTLINED_FUNCTION_13_7((uint64_t)v44);
  if (v43)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v44, (uint64_t *)&demangling cache variable for type metadata for Date?);
    OUTLINED_FUNCTION_17_3();
    v45 = v108;
    if (!v43)
      swift_once();
    v46 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v46, (uint64_t)static Logger.siriContacts);
    v47 = OUTLINED_FUNCTION_54_2();
    v48 = OUTLINED_FUNCTION_30_3(v47);
    v49 = v115;
    if (v48)
    {
      v50 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_54_0(v50);
      OUTLINED_FUNCTION_2_5(&dword_21FE16000, v51, v52, "[DialogCalendar] no date set for timezoned birthday, returning nil");
      OUTLINED_FUNCTION_1_4();
    }
    OUTLINED_FUNCTION_25_6();

    v53 = v45[1];
    v54 = v106;
    v53((char *)v107, (void *)v106);
    v53(v113, (void *)v54);
    return 0;
  }
  v56 = v112;
  v57 = v110;
  (*(void (**)(char *, NSObject *, uint64_t))(v112 + 32))(v110, v44, v37);
  OUTLINED_FUNCTION_17_3();
  if (!v58)
    swift_once();
  v59 = OUTLINED_FUNCTION_26();
  __swift_project_value_buffer(v59, (uint64_t)static Logger.siriContacts);
  (*(void (**)(uint64_t, char *, uint64_t))(v56 + 16))(v109, v57, v37);
  Logger.logObject.getter();
  v60 = OUTLINED_FUNCTION_54_2();
  if (os_log_type_enabled(v44, v60))
  {
    v61 = (uint8_t *)swift_slowAlloc();
    v62 = swift_slowAlloc();
    v117 = v62;
    *(_DWORD *)v61 = 136315138;
    lazy protocol witness table accessor for type Date and conformance Date();
    v63 = dispatch thunk of CustomStringConvertible.description.getter();
    v116 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, &v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_20_6();
    _os_log_impl(&dword_21FE16000, v44, v60, "[DialogCalendar] timezonedBirthdate: %s", v61, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207D8768](v62, -1, -1);
    OUTLINED_FUNCTION_1_4();
  }
  v65 = *(void (**)(char *, uint64_t))(v56 + 8);
  OUTLINED_FUNCTION_20_6();

  v66 = v108;
  type metadata accessor for DialogCalendar.Builder();
  OUTLINED_FUNCTION_32_0();
  OUTLINED_FUNCTION_14_5();
  OUTLINED_FUNCTION_24_6();
  dispatch thunk of DialogCalendar.Builder.withSecs(_:)();
  swift_release();
  swift_retain();
  v55 = dispatch thunk of DialogCalendar.__allocating_init(builder:)();
  if (v115)
  {
    swift_retain();
    dispatch thunk of DialogCalendar.mockGlobals.setter();
    OUTLINED_FUNCTION_2();
  }
  swift_release();
  OUTLINED_FUNCTION_25_6();
  v65(v57, v37);
  v67 = v66[1];
  v68 = v106;
  v67((char *)v107, (void *)v106);
  v67(v113, (void *)v68);
  return v55;
}

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    v1 = type metadata accessor for Date();
    result = MEMORY[0x2207D86A8](MEMORY[0x24BDCE988], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

void OUTLINED_FUNCTION_1_4()
{
  JUMPOUT(0x2207D8768);
}

void OUTLINED_FUNCTION_2_5(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_7_6()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 - 184) + 16))(v0, *(_QWORD *)(v1 - 192), *(_QWORD *)(v1 - 200));
}

uint64_t OUTLINED_FUNCTION_8_5(uint64_t a1)
{
  uint64_t v1;

  __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
  return type metadata accessor for DialogCalendar.Builder();
}

uint64_t OUTLINED_FUNCTION_13_7(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_14_5()
{
  return DialogCalendar.Builder.init()();
}

uint64_t OUTLINED_FUNCTION_15_4()
{
  uint64_t v0;

  return ContactsBirthdayInfo.init(builder:)(v0);
}

uint64_t OUTLINED_FUNCTION_16_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_19_6()
{
  return type metadata accessor for SpeakableString();
}

uint64_t OUTLINED_FUNCTION_20_6()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

uint64_t OUTLINED_FUNCTION_23_4()
{
  return DateComponents.year.setter();
}

uint64_t OUTLINED_FUNCTION_24_6()
{
  return Date.timeIntervalSince1970.getter();
}

void OUTLINED_FUNCTION_25_6()
{
  uint64_t v0;

}

uint64_t GetContactAttributeNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[13] = a3;
  v4[14] = v3;
  v4[11] = a1;
  v4[12] = a2;
  v5 = type metadata accessor for Parse();
  v4[15] = v5;
  v4[16] = *(_QWORD *)(v5 - 8);
  v4[17] = OUTLINED_FUNCTION_0_0();
  v6 = type metadata accessor for Input();
  v4[18] = v6;
  v4[19] = *(_QWORD *)(v6 - 8);
  v4[20] = OUTLINED_FUNCTION_0_0();
  v7 = type metadata accessor for ParameterIdentifier();
  v4[21] = v7;
  v4[22] = *(_QWORD *)(v7 - 8);
  v4[23] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t GetContactAttributeNeedsValueStrategy.parseValueResponse(input:resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  SiriContactsIntents::GetContactAttributeSlots_optional v8;
  uint64_t *v9;
  SiriContactsIntents::GetContactAttributeSlots value;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26[2];

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 168);
  *(_QWORD *)(v0 + 192) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<GetContactAttributeIntent>);
  ParameterResolutionRecord.parameter.getter();
  v4 = ParameterIdentifier.name.getter();
  v6 = v5;
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  v8.value = GetContactAttributeSlots.init(rawValue:)(v7).value;
  *(SiriContactsIntents::GetContactAttributeSlots_optional *)(v0 + 233) = v8;
  if (v8.value == SiriContactsIntents_GetContactAttributeSlots_unknownDefault)
  {
    OUTLINED_FUNCTION_31_3();
    lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
    swift_allocError();
    *v9 = v4;
    v9[1] = (uint64_t)v6;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_45_0();
    OUTLINED_FUNCTION_17_0();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    value = v8.value;
    OUTLINED_FUNCTION_5();
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    *(_QWORD *)(v0 + 200) = __swift_project_value_buffer(v12, (uint64_t)static Logger.siriContacts);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)OUTLINED_FUNCTION_1();
      v26[0] = OUTLINED_FUNCTION_1();
      *(_DWORD *)v15 = 136315138;
      *(_BYTE *)(v0 + 232) = value;
      v16 = String.init<A>(describing:)();
      *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_18_0();
      OUTLINED_FUNCTION_43_0(&dword_21FE16000, v13, v14, "#GetContactAttributeNeedsValueStrategy Slot: %s.", v15);
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }

    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 16))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 144));
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)OUTLINED_FUNCTION_1();
      v26[0] = OUTLINED_FUNCTION_1();
      *(_DWORD *)v20 = 136315138;
      Input.parse.getter();
      v21 = String.init<A>(describing:)();
      *(_QWORD *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v26);
      OUTLINED_FUNCTION_20_7();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_19_7();
      OUTLINED_FUNCTION_43_0(&dword_21FE16000, v18, v19, "#GetContactAttributeNeedsValueStrategy Parse: %s.", v20);
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }
    OUTLINED_FUNCTION_19_7();

    v23 = *(_QWORD *)(v0 + 112);
    Input.parse.getter();
    v24 = ParameterResolutionRecord.intent.getter();
    *(_QWORD *)(v0 + 208) = v24;
    v25 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 216) = v25;
    *v25 = v0;
    v25[1] = GetContactAttributeNeedsValueStrategy.parseValueResponse(input:resolveRecord:);
    return Parse.toSiriKitIntent(referenceResolver:previousIntent:)(v23 + 176, v24, (uint64_t)&protocol witness table for GetContactAttributeIntent);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  id v15;
  char v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;
  _OWORD v24[2];

  v1 = *(void **)(v0 + 224);
  if (v1)
  {
    type metadata accessor for GetContactAttributeIntent();
    v2 = swift_dynamicCastClass();
    if (v2)
    {
      v3 = (void *)v2;
      if (GetContactAttributeSlots.rawValue.getter(*(_BYTE *)(v0 + 233)) == 0x6374614D69726973
        && v4 == 0xEB00000000736568)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        LOBYTE(v6) = _stringCompareWithSmolCheck(_:_:expecting:)();
        OUTLINED_FUNCTION_5();
        if ((v6 & 1) == 0)
          goto LABEL_15;
      }
      v10 = (void *)ParameterResolutionRecord.intent.getter();
      v6 = objc_msgSend(v10, sel_contactAttributeToGet);

      objc_msgSend(v3, sel_setContactAttributeToGet_, v6);
LABEL_15:
      v11 = v1;
      v12 = Logger.logObject.getter();
      v13 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_21_5(v13))
      {
        v14 = (uint8_t *)OUTLINED_FUNCTION_1();
        v23 = (_QWORD *)OUTLINED_FUNCTION_1();
        *(_DWORD *)v14 = 138412290;
        *(_QWORD *)(v0 + 64) = v3;
        v15 = v11;
        OUTLINED_FUNCTION_20_7();
        *v23 = v3;

        OUTLINED_FUNCTION_43_0(&dword_21FE16000, v12, (os_log_type_t)v6, "#GetContactAttributeNeedsValueStrategy Converted ContactIntent to SK intent: %@", v14);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        OUTLINED_FUNCTION_16();
        OUTLINED_FUNCTION_0();
      }

      v16 = *(_BYTE *)(v0 + 233);
      v17 = (void *)ParameterResolutionRecord.intent.getter();
      *(_QWORD *)(v0 + 40) = &type metadata for GetContactAttributeSlots;
      *(_QWORD *)(v0 + 48) = &protocol witness table for GetContactAttributeSlots;
      *(_BYTE *)(v0 + 16) = v16;
      specialized SiriKitContactIntent.value(forSlot:)(v24, v0 + 16);

      __swift_destroy_boxed_opaque_existential_0(v0 + 16);
      goto LABEL_18;
    }

  }
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)OUTLINED_FUNCTION_1();
    *(_QWORD *)&v24[0] = OUTLINED_FUNCTION_1();
    *(_DWORD *)v9 = 136315138;
    *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, 0x800000021FEE0A00, (uint64_t *)v24);
    OUTLINED_FUNCTION_20_7();
    OUTLINED_FUNCTION_43_0(&dword_21FE16000, v7, v8, "#GetContactAttributeNeedsValueStrategy parseValueResponse: failed to convert parse to expected intent type %s, returning empty answeredValue and same intent", v9);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }

  memset(v24, 0, sizeof(v24));
  ParameterResolutionRecord.intent.getter();
  type metadata accessor for GetContactAttributeIntent();
LABEL_18:
  IntentPromptAnswer.init(answeredValue:updatedIntent:)();
  v18 = *(_QWORD *)(v0 + 88);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentPromptAnswer<GetContactAttributeIntent>);
  OUTLINED_FUNCTION_26_4(v18, v20, v21, v19);
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GetContactAttributeNeedsValueStrategy.parseValueResponse(input:resolveRecord:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(void **)(*(_QWORD *)v1 + 208);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = a1;
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

uint64_t GetContactAttributeNeedsValueStrategy.makePromptForValue(resolveRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v4 = type metadata accessor for NLContextUpdate();
  v3[6] = v4;
  v3[7] = *(_QWORD *)(v4 - 8);
  v3[8] = OUTLINED_FUNCTION_9_1();
  v3[9] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[10] = OUTLINED_FUNCTION_0_0();
  v5 = type metadata accessor for TemplatingResult();
  v3[11] = v5;
  v3[12] = *(_QWORD *)(v5 - 8);
  v3[13] = OUTLINED_FUNCTION_9_1();
  v3[14] = swift_task_alloc();
  v6 = type metadata accessor for ParameterIdentifier();
  v3[15] = v6;
  v3[16] = *(_QWORD *)(v6 - 8);
  v3[17] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t GetContactAttributeNeedsValueStrategy.makePromptForValue(resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  SiriContactsIntents::GetContactAttributeSlots_optional v8;
  uint64_t *v9;
  SiriContactsIntents::GetContactAttributeSlots value;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  _QWORD *v26;
  void *v28;
  Class isa;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 120);
  *(_QWORD *)(v0 + 144) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<GetContactAttributeIntent>);
  ParameterResolutionRecord.parameter.getter();
  v4 = ParameterIdentifier.name.getter();
  v6 = v5;
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  v8.value = GetContactAttributeSlots.init(rawValue:)(v7).value;
  if (v8.value == SiriContactsIntents_GetContactAttributeSlots_unknownDefault)
  {
    OUTLINED_FUNCTION_31_3();
    OUTLINED_FUNCTION_25_7();
    OUTLINED_FUNCTION_6_7();
    *v9 = v4;
LABEL_3:
    v9[1] = (uint64_t)v6;
    goto LABEL_4;
  }
  value = v8.value;
  v49 = v4;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.siriContacts);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_21_5(v14))
  {
    v15 = (uint8_t *)OUTLINED_FUNCTION_1();
    v50 = OUTLINED_FUNCTION_1();
    *(_DWORD *)v15 = 136315138;
    *(_BYTE *)(v0 + 184) = value;
    v16 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v50);
    OUTLINED_FUNCTION_20_7();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_43_0(&dword_21FE16000, v13, (os_log_type_t)v4, "#GetContactAttributeNeedsValueStrategy Slot: %s.", v15);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }

  if (value == SiriContactsIntents_GetContactAttributeSlots_contactAttributeToGet)
  {
    v18 = (void *)OUTLINED_FUNCTION_14_6();
    GetContactAttributeIntent.requestedName.getter((uint64_t)v18);
    v20 = v19;

    if (v20)
    {
      OUTLINED_FUNCTION_96();
    }
    else
    {
      v28 = (void *)OUTLINED_FUNCTION_14_6();
      isa = (Class)objc_msgSend(v28, sel_isMe);

      if (!isa)
      {
        type metadata accessor for NSNumber();
        isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
      }
      v30 = -[objc_class BOOLValue](isa, sel_BOOLValue);

      if (v30)
      {
        v31 = *(_QWORD **)(v0 + 40);
        OUTLINED_FUNCTION_96();
        v32 = v31[10];
        v33 = v31[11];
        __swift_project_boxed_opaque_existential_1(v31 + 7, v32);
        v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 24))(v32, v33);
        if (!v34)
        {
          type metadata accessor for ContactsError();
          OUTLINED_FUNCTION_25_7();
          OUTLINED_FUNCTION_6_7();
LABEL_4:
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          OUTLINED_FUNCTION_5_6();
          OUTLINED_FUNCTION_21_0();
          OUTLINED_FUNCTION_13_0();
          OUTLINED_FUNCTION_45_0();
          OUTLINED_FUNCTION_17_0();
          OUTLINED_FUNCTION_12_0();
          OUTLINED_FUNCTION_31_1();
          __asm { BR              X0 }
        }
        v35 = (void *)v34;
        CNContact.formattedFullName.getter();

      }
      else
      {
        v40 = (void *)OUTLINED_FUNCTION_14_6();
        v41 = outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(v40, (SEL *)&selRef_contactIdentifier);
        if (!v42)
          goto LABEL_23;
        v43 = v41;
        v44 = v42;
        v45 = *(_QWORD **)(v0 + 40);
        v46 = v45[10];
        v47 = v45[11];
        __swift_project_boxed_opaque_existential_1(v45 + 7, v46);
        v48 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 8))(v43, v44, v46, v47);
        OUTLINED_FUNCTION_9_0();
        if (!v48)
        {
LABEL_23:
          OUTLINED_FUNCTION_31_3();
          OUTLINED_FUNCTION_25_7();
          OUTLINED_FUNCTION_6_7();
          *v9 = v49;
          goto LABEL_3;
        }
        OUTLINED_FUNCTION_96();
        CNContact.formattedFullName.getter();

      }
    }
    v21 = *(void **)(v0 + 80);
    SpeakableString.init(print:speak:)();
    v22 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_26_4((uint64_t)v21, v23, v24, v22);
    v25 = objc_msgSend((id)ParameterResolutionRecord.intent.getter(), sel_isMe);
    OUTLINED_FUNCTION_24_7();
    if (v21)
    {
      objc_msgSend(v21, sel_BOOLValue);

    }
    v36 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 152) = v36;
    *v36 = v0;
    v36[1] = GetContactAttributeNeedsValueStrategy.makePromptForValue(resolveRecord:);
    OUTLINED_FUNCTION_31_1();
    return GetContactAttributeCATs.promptForContactAttribute(contactName:isMe:)(v37, v38, v39);
  }
  else
  {
    OUTLINED_FUNCTION_96();
    v26 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v26;
    *v26 = v0;
    v26[1] = GetContactAttributeNeedsValueStrategy.makePromptForValue(resolveRecord:);
    OUTLINED_FUNCTION_31_1();
    return ContactsCommonCATs.promptForContact()();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 160) = v0;
  swift_task_dealloc();
  outlined destroy of SpeakableString?(*(_QWORD *)(v2 + 80));
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(uint64_t **)(v0 + 24);
  v4 = (void *)ParameterResolutionRecord.intent.getter();
  v5 = outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(v4, (SEL *)&selRef_contactIdentifier);
  static ContactsContextProvider.needsValueGetContactAttribute(contactIdentifier:contactAttributeValue:contactTypeValue:)(v5, v6, 0, 0, 0, 0);
  OUTLINED_FUNCTION_5();
  v7 = type metadata accessor for AceOutput();
  v8 = MEMORY[0x24BE99088];
  v3[3] = v7;
  v3[4] = v8;
  __swift_allocate_boxed_opaque_existential_1(v3);
  specialized ContactsNeedsValueStrategy.needsValueOutput(templateResult:nlContextUpdate:)(v1, v2);
  v9 = *(_QWORD *)(v0 + 112);
  v10 = *(_QWORD *)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 96);
  OUTLINED_FUNCTION_18_3(*(_QWORD *)(v0 + 56));
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_2_4(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  void *v0;
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = objc_msgSend((id)ParameterResolutionRecord.intent.getter(), sel_contactAttributeToGet);
  OUTLINED_FUNCTION_24_7();
  if (v0)
  {
    v3 = v0;
    v4 = outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(v3, (SEL *)&selRef_handleLabel);
    v6 = v5;
    v7 = objc_msgSend(v3, sel_contactAttributeType);
    if (v6)
    {
      v8 = (uint64_t)v7;
      String.mapToNLAttributeValue(forType:)((uint64_t)v7, v4, v6);
      v10 = v9;
      v12 = v11;
      String.mapToNLContactTypeValue(forType:)(v8, v4, v6);
      v4 = v13;
      v15 = v14;
      OUTLINED_FUNCTION_9_0();
    }
    else
    {
      v15 = 0;
      v12 = 0;
      v10 = v4;
    }
  }
  else
  {
    v4 = 0;
    v15 = 0;
    v10 = 0;
    v12 = 0;
  }
  v16 = *(_QWORD *)(v1 + 104);
  v17 = *(_QWORD *)(v1 + 64);
  v18 = *(uint64_t **)(v1 + 24);
  static ContactsContextProvider.needsValueGetContactAttribute(contactIdentifier:contactAttributeValue:contactTypeValue:)(0, 0, v10, v12, v4, v15);
  OUTLINED_FUNCTION_18_0();
  swift_bridgeObjectRelease();
  v19 = type metadata accessor for AceOutput();
  v20 = MEMORY[0x24BE99088];
  v18[3] = v19;
  v18[4] = v20;
  __swift_allocate_boxed_opaque_existential_1(v18);
  specialized ContactsNeedsValueStrategy.needsValueOutput(templateResult:nlContextUpdate:)(v16, v17);

  v21 = *(_QWORD *)(v1 + 104);
  v22 = *(_QWORD *)(v1 + 88);
  v23 = *(_QWORD *)(v1 + 96);
  OUTLINED_FUNCTION_18_3(*(_QWORD *)(v1 + 56));
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_17_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_0();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_5_6();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_2_4(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_5_6();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_2_4(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t GetContactAttributeNeedsValueStrategy.__deallocating_deinit()
{
  uint64_t v0;

  v0 = ContactsUnsupportedValueStrategy.deinit();
  __swift_destroy_boxed_opaque_existential_0(v0 + 176);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for GetContactAttributeNeedsValueStrategy()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GetContactAttributeNeedsValueStrategy;
  if (!type metadata singleton initialization cache for GetContactAttributeNeedsValueStrategy)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for GetContactAttributeNeedsValueStrategy()
{
  return swift_initClassMetadata2();
}

uint64_t outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(void *a1)
{
  return outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(a1, (SEL *)&selRef_handleLabel);
}

uint64_t outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(void *a1, SEL *a2)
{
  void *v2;
  id v3;
  uint64_t v4;

  v3 = objc_msgSend(a1, *a2);
  OUTLINED_FUNCTION_24_7();
  if (!v2)
    return 0;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t outlined destroy of SpeakableString?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_5_6()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_6_7()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_14_6()
{
  return ParameterResolutionRecord.intent.getter();
}

uint64_t OUTLINED_FUNCTION_18_3@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 8))(v2, *(_QWORD *)(v1 + 48));
}

uint64_t OUTLINED_FUNCTION_19_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_20_7()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

BOOL OUTLINED_FUNCTION_21_5(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_24_7()
{
  void *v0;

}

unint64_t OUTLINED_FUNCTION_25_7()
{
  return lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
}

uint64_t OUTLINED_FUNCTION_26_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, 0, 1, a4);
}

uint64_t type metadata completion function for ContactsUnsetRelationshipFlowStrategy()
{
  return swift_initClassMetadata2();
}

uint64_t ContactsUnsetRelationshipFlowStrategy.parseRequestedRelationship(resolveRecord:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *v2;
  return OUTLINED_FUNCTION_4_3();
}

uint64_t ContactsUnsetRelationshipFlowStrategy.parseRequestedRelationship(resolveRecord:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _WORD *v15;
  uint64_t v16;
  uint64_t v17;

  v1 = v0[5];
  v2 = *(_QWORD *)(v1 + 296);
  type metadata accessor for ParameterResolutionRecord();
  v3 = (void *)ParameterResolutionRecord.intent.getter();
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 312) + 16))(v2);
  v6 = v5;

  if (v6)
  {
    v7 = v0[4];
    v8 = (uint64_t *)v0[2];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (value: String, locale: Locale));
    *v8 = v4;
    v8[1] = v6;
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 40));
    dispatch thunk of DeviceState.siriLocale.getter();
    v9 = *MEMORY[0x24BE980E8];
    v10 = type metadata accessor for RelationshipLabel();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v8, v9, v10);
    v11 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  }
  else
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v12 = OUTLINED_FUNCTION_26();
    v13 = OUTLINED_FUNCTION_10_1(v12, (uint64_t)static Logger.siriContacts);
    v14 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_15_0(v14))
    {
      v15 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_54_0(v15);
      OUTLINED_FUNCTION_15_5(&dword_21FE16000, v13, OS_LOG_TYPE_DEFAULT, "#ContactsUnsetRelationshipFlowStrategy parseRequestedRelationship throwing error");
      OUTLINED_FUNCTION_1_4();
    }

    OUTLINED_FUNCTION_31_3();
    lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (uint64_t (*)(uint64_t))type metadata accessor for ContactsError, (uint64_t)&protocol conformance descriptor for ContactsError);
    v16 = OUTLINED_FUNCTION_11_3();
    OUTLINED_FUNCTION_144(v16, v17);
    swift_storeEnumTagMultiPayload();
    OUTLINED_FUNCTION_143();
    v11 = (uint64_t (*)(void))v0[1];
  }
  return OUTLINED_FUNCTION_25_8(v11);
}

uint64_t ContactsUnsetRelationshipFlowStrategy.applyPersonToIntent(person:requestedRelationship:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v5[4] = a3;
  v5[5] = a4;
  v5[2] = a1;
  v5[3] = a2;
  v5[6] = *v4;
  return OUTLINED_FUNCTION_4_3();
}

void ContactsUnsetRelationshipFlowStrategy.applyPersonToIntent(person:requestedRelationship:resolveRecord:)()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  id v4;

  type metadata accessor for ParameterResolutionRecord();
  v0 = (void *)ParameterResolutionRecord.intent.getter();
  v1 = OUTLINED_FUNCTION_106_0((uint64_t)v0, sel_firstName);
  v2 = (void *)MEMORY[0x2207D7CB8](0x6D614E7473726966, 0xE900000000000065);
  OUTLINED_FUNCTION_22_4();

  v3 = OUTLINED_FUNCTION_39_4();
  v4 = OUTLINED_FUNCTION_106_0(v3, sel_fullName);
  OUTLINED_FUNCTION_77_1();
}

void sub_21FE2E418(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  id v5;

  OUTLINED_FUNCTION_22_4();

  v4 = OUTLINED_FUNCTION_39_4();
  v5 = OUTLINED_FUNCTION_106_0(v4, sel_lastName);
  OUTLINED_FUNCTION_77_1();
}

void sub_21FE2E458(void *a1)
{
  void *v1;
  void *v2;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;

  OUTLINED_FUNCTION_22_4();

  v4 = (void *)OUTLINED_FUNCTION_39_4();
  v5 = OUTLINED_FUNCTION_106_0((uint64_t)v4, sel_middleName);
  v6 = (void *)MEMORY[0x2207D7CB8](0x614E656C6464696DLL, 0xEA0000000000656DLL);
  OUTLINED_FUNCTION_22_4();

  v7 = OUTLINED_FUNCTION_39_4();
  v8 = OUTLINED_FUNCTION_106_0(v7, sel_nickName);
  OUTLINED_FUNCTION_77_1();
}

uint64_t sub_21FE2E4E8(void *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;

  OUTLINED_FUNCTION_22_4();

  v6 = (void *)OUTLINED_FUNCTION_39_4();
  v7 = RelationshipLabel.asUnboundedSemanticValue.getter();
  v8 = (void *)MEMORY[0x2207D7CB8](v7);
  swift_bridgeObjectRelease();
  v9 = (void *)MEMORY[0x2207D7CB8](0x52746361746E6F63, 0xEF6E6F6974616C65);
  objc_msgSend(v6, *(SEL *)(v1 + 1736), v8, v9);

  OUTLINED_FUNCTION_33_3(v10, (unint64_t *)&lazy cache variable for type metadata for SAPerson);
  v11 = v3;
  OUTLINED_FUNCTION_39_4();
  IntentPromptAnswer.init(answeredValue:updatedIntent:)();
  v12 = type metadata accessor for IntentPromptAnswer();
  OUTLINED_FUNCTION_19_4(v16, 0, v13, v12);
  v14 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return v14();
}

void ContactsUnsetRelationshipFlowStrategy.actionForPromptForNameInput(_:resolveRecord:)(NSObject *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  OUTLINED_FUNCTION_95_0(a1, a2, "#ContactsUnsetRelationshipFlowStrategy actionForPromptForNameInput", a3);
}

uint64_t ContactsUnsetRelationshipFlowStrategy.parseUnsetRelationshipPersonFromResponse(input:resolveRecord:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = a2;
  v3 = OUTLINED_FUNCTION_104_0();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ContactsUnsetRelationshipFlowStrategy.parseUnsetRelationshipPersonFromResponse(input:resolveRecord:)()
{
  _QWORD *v0;
  uint8_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v2 = v0[5];
  v1 = (uint8_t *)v0[6];
  v3 = v0[2];
  OUTLINED_FUNCTION_92_0();
  static UnsetRelationshipPerson.from(parse:)(v1, v3);
  OUTLINED_FUNCTION_10_2(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  OUTLINED_FUNCTION_21_0();
  v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_25_8(v4);
}

uint64_t static UnsetRelationshipPerson.from(parse:)@<X0>(uint8_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint8_t *, uint64_t);
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint8_t *v46;
  char *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint8_t *v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  void (*v85)(char *, char *, uint64_t);
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[2];
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint8_t *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint8_t *v117;
  uint64_t v118[5];
  uint64_t v119;

  v114 = (char *)a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsetRelationshipPerson?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for UnsetRelationshipPerson();
  v95 = *(_QWORD *)(v115 - 8);
  MEMORY[0x24BDAC7A8](v115);
  v96 = (char *)v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x24BDAC7A8](v7);
  v102 = (uint64_t)v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v98 = *(_QWORD *)(v103 - 8);
  MEMORY[0x24BDAC7A8](v103);
  v97 = (char *)v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for USOParse();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonIntentNode?);
  MEMORY[0x24BDAC7A8](v14);
  v107 = (char *)v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ContactNLv3Intent();
  MEMORY[0x24BDAC7A8](v16);
  v106 = (char *)v90 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for PersonIntentNode();
  v101 = *(_QWORD *)(v108 - 8);
  MEMORY[0x24BDAC7A8](v108);
  v100 = (char *)v90 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for NLIntent();
  v19 = *(_QWORD *)(v111 - 8);
  v20 = MEMORY[0x24BDAC7A8](v111);
  v105 = (char *)v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v109 = (char *)v90 - v22;
  v23 = type metadata accessor for Parse();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v99 = (uint8_t *)v90 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x24BDAC7A8](v25);
  v116 = (char *)v90 - v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v112 = (char *)v90 - v30;
  MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)v90 - v31;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v110 = v19;
  v104 = v13;
  v33 = type metadata accessor for Logger();
  v34 = __swift_project_value_buffer(v33, (uint64_t)static Logger.siriContacts);
  v35 = *(void (**)(char *, uint8_t *, uint64_t))(v24 + 16);
  v117 = a1;
  v35(v32, a1, v23);
  v113 = v34;
  v36 = Logger.logObject.getter();
  v37 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v36, v37))
  {
    v93 = v5;
    v38 = swift_slowAlloc();
    v92 = v11;
    v39 = (uint8_t *)v38;
    v40 = swift_slowAlloc();
    v94 = v10;
    v91 = v40;
    v118[0] = v40;
    *(_DWORD *)v39 = 136315138;
    v90[1] = v39 + 4;
    v35(v112, (uint8_t *)v32, v23);
    v41 = String.init<A>(describing:)();
    v119 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v5 = v93;
    swift_bridgeObjectRelease();
    v43 = *(void (**)(char *, uint64_t))(v24 + 8);
    v43(v32, v23);
    _os_log_impl(&dword_21FE16000, v36, v37, "#ContactsUnsetRelationshipFlowStrategy parse: %s", v39, 0xCu);
    v44 = v91;
    swift_arrayDestroy();
    v45 = v44;
    v10 = v94;
    MEMORY[0x2207D8768](v45, -1, -1);
    v46 = v39;
    v11 = v92;
    MEMORY[0x2207D8768](v46, -1, -1);
  }
  else
  {
    v43 = *(void (**)(char *, uint64_t))(v24 + 8);
    v43(v32, v23);
  }

  v47 = v116;
  v35(v116, v117, v23);
  v48 = (*(uint64_t (**)(char *, uint64_t))(v24 + 88))(v47, v23);
  v49 = v23;
  if (v48 == *MEMORY[0x24BE98E08])
  {
    (*(void (**)(char *, uint64_t))(v24 + 96))(v47, v23);
    v51 = v109;
    v50 = v110;
    v52 = v111;
    (*(void (**)(char *, char *, uint64_t))(v110 + 32))(v109, v47, v111);
    (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v105, v51, v52);
    v53 = (uint64_t)v106;
    ContactNLv3Intent.init(intent:)();
    v54 = (uint64_t)v107;
    ContactNLv3Intent.person.getter();
    outlined destroy of Signpost.OpenSignpost(v53, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
    v55 = v108;
    if (__swift_getEnumTagSinglePayload(v54, 1, v108) != 1)
    {
      v64 = v101;
      v65 = v100;
      (*(void (**)(char *, uint64_t, uint64_t))(v101 + 32))(v100, v54, v55);
      v118[3] = v55;
      v118[4] = MEMORY[0x24BE9FE98];
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v118);
      (*(void (**)(uint64_t *, char *, uint64_t))(v64 + 16))(boxed_opaque_existential_1, v65, v55);
      v67 = (uint64_t)v114;
      static UnsetRelationshipPerson.from(personNode:)();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v55);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v52);
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v118);
      v68 = v67;
      v69 = 0;
LABEL_23:
      v83 = v115;
      return __swift_storeEnumTagSinglePayload(v68, v69, 1, v83);
    }
    outlined destroy of ConfirmationResponse?(v54, (uint64_t)&demangling cache variable for type metadata for PersonIntentNode?);
    v56 = Logger.logObject.getter();
    v57 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v58 = 0;
      _os_log_impl(&dword_21FE16000, v56, v57, "#ContactsUnsetRelationshipFlowStrategy Found no Person Node in NLv3 Intent, returning nil for UnsetRelationshipPerson", v58, 2u);
      MEMORY[0x2207D8768](v58, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v52);
LABEL_22:
    v68 = (uint64_t)v114;
    v69 = 1;
    goto LABEL_23;
  }
  if (v48 == *MEMORY[0x24BE98E98])
  {
    (*(void (**)(char *, uint64_t))(v24 + 96))(v47, v23);
    v59 = v104;
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v104, v47, v10);
    v60 = v102;
    USOParse.preferredUserDialogAct.getter(v102);
    v61 = v103;
    if (__swift_getEnumTagSinglePayload(v60, 1, v103) == 1)
    {
      v62 = &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?;
      v63 = v60;
    }
    else
    {
      v78 = v98;
      v79 = v97;
      (*(void (**)(char *, uint64_t, uint64_t))(v98 + 32))(v97, v60, v61);
      static UnsetRelationshipPerson.from(userDialogAct:)((uint64_t)v5);
      (*(void (**)(char *, uint64_t))(v78 + 8))(v79, v61);
      if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v115) != 1)
      {
        (*(void (**)(char *, uint64_t))(v11 + 8))(v59, v10);
        v85 = *(void (**)(char *, char *, uint64_t))(v95 + 32);
        v86 = v96;
        v87 = v5;
        v88 = v115;
        v85(v96, v87, v115);
        v89 = (uint64_t)v114;
        v85(v114, v86, v88);
        v68 = v89;
        v69 = 0;
        v83 = v88;
        return __swift_storeEnumTagSinglePayload(v68, v69, 1, v83);
      }
      v62 = &demangling cache variable for type metadata for UnsetRelationshipPerson?;
      v63 = (uint64_t)v5;
    }
    outlined destroy of ConfirmationResponse?(v63, (uint64_t)v62);
    v80 = Logger.logObject.getter();
    v81 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v80, v81))
    {
      v82 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v82 = 0;
      _os_log_impl(&dword_21FE16000, v80, v81, "#ContactsUnsetRelationshipFlowStrategy Found no common_Person in USO parse, returning nil for UnsetRelationshipPerson", v82, 2u);
      MEMORY[0x2207D8768](v82, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v59, v10);
    goto LABEL_22;
  }
  v70 = v99;
  v35((char *)v99, v117, v49);
  v71 = v49;
  v72 = Logger.logObject.getter();
  v73 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v72, v73))
  {
    v74 = (uint8_t *)swift_slowAlloc();
    v75 = swift_slowAlloc();
    *(_DWORD *)v74 = 136315138;
    v117 = v74 + 4;
    v118[0] = v75;
    v35(v112, v70, v71);
    v76 = String.init<A>(describing:)();
    v119 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v47 = v116;
    swift_bridgeObjectRelease();
    v43((char *)v70, v71);
    _os_log_impl(&dword_21FE16000, v72, v73, "#ContactsUnsetRelationshipFlowStrategy Encountered unexpected parse type %s, returning nil for UnsetRelationshipPerson", v74, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207D8768](v75, -1, -1);
    MEMORY[0x2207D8768](v74, -1, -1);
  }
  else
  {
    v43((char *)v70, v71);
  }

  __swift_storeEnumTagSinglePayload((uint64_t)v114, 1, 1, v115);
  return ((uint64_t (*)(char *, uint64_t))v43)(v47, v71);
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makePromptForPersonName(requestedRelationship:resolveRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[10] = OUTLINED_FUNCTION_0_0();
  v4 = OUTLINED_FUNCTION_163();
  v3[11] = v4;
  v3[12] = *(_QWORD *)(v4 - 8);
  v3[13] = OUTLINED_FUNCTION_0_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BehaviorAfterSpeaking?);
  v3[14] = OUTLINED_FUNCTION_0_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[15] = OUTLINED_FUNCTION_0_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  v3[16] = OUTLINED_FUNCTION_0_0();
  v5 = OUTLINED_FUNCTION_87_0();
  v3[17] = v5;
  v3[18] = *(_QWORD *)(v5 - 8);
  v3[19] = OUTLINED_FUNCTION_9_1();
  v3[20] = OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makePromptForPersonName(requestedRelationship:resolveRecord:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v1;
  *v1 = v0;
  v1[1] = ContactsUnsetRelationshipFlowStrategy.makePromptForPersonName(requestedRelationship:resolveRecord:);
  return ContactsCommonCATs.unsupportedRelationshipNotFound()();
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_29_5();
  *v2 = *v1;
  *(_QWORD *)(v3 + 176) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[15];
  RelationshipLabel.asUnboundedSemanticValue.getter();
  OUTLINED_FUNCTION_17_4();
  v2 = OUTLINED_FUNCTION_31_4();
  OUTLINED_FUNCTION_19_4(v1, 0, v3, v2);
  v4 = (_QWORD *)swift_task_alloc();
  v0[23] = (uint64_t)v4;
  *v4 = v0;
  v4[1] = ContactsUnsetRelationshipFlowStrategy.makePromptForPersonName(requestedRelationship:resolveRecord:);
  return ModifyContactAttributeCATs.promptForRelationshipContact(requestedRelationship:)(v0[16], v0[15]);
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_85_0();
  OUTLINED_FUNCTION_87(v2);
  v1[24] = v0;
  v3 = swift_task_dealloc();
  OUTLINED_FUNCTION_126(v3, (uint64_t)&demangling cache variable for type metadata for SpeakableString?);
  if (v0)
    (*(void (**)(_QWORD, _QWORD))(v1[18] + 8))(v1[19], v1[17]);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_14_1();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  OUTLINED_FUNCTION_136();
  v1 = v0;
  v3 = v0[18];
  v2 = v0[19];
  v4 = v0[16];
  v5 = v0[17];
  v6 = v0[14];
  v7 = v0[13];
  v8 = v0[10];
  v19 = v0[11];
  v20 = v0[20];
  v18 = v0[12];
  v9 = (uint64_t *)v0[7];
  __swift_storeEnumTagSinglePayload(v4, 0, 1, v5);
  v10 = type metadata accessor for BehaviorAfterSpeaking();
  OUTLINED_FUNCTION_19_4(v6, 1, v11, v10);
  TemplatingResult.merge(with:behaviorAfterSpeaking:)(v4, v6);
  outlined destroy of ConfirmationResponse?(v6, (uint64_t)&demangling cache variable for type metadata for BehaviorAfterSpeaking?);
  outlined destroy of ConfirmationResponse?(v4, (uint64_t)&demangling cache variable for type metadata for TemplatingResult?);
  v12 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v12(v2, v5);
  NLContextUpdate.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_21FED8CB0;
  static ContactsContextProvider.makeSDAForPromptForRelatedPersonName()();
  NLContextUpdate.nluSystemDialogActs.setter();
  OUTLINED_FUNCTION_108_0(v8, v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 16));
  __swift_storeEnumTagSinglePayload(v8, 0, 1, v19);
  v13 = OUTLINED_FUNCTION_162();
  *((_OWORD *)v1 + 2) = 0u;
  v1[6] = 0;
  *((_OWORD *)v1 + 1) = 0u;
  v14 = MEMORY[0x24BE99088];
  v9[3] = v13;
  v9[4] = v14;
  __swift_allocate_boxed_opaque_existential_1(v9);
  v15 = static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  OUTLINED_FUNCTION_166(v15, (uint64_t)&demangling cache variable for type metadata for FlowActivity?);
  OUTLINED_FUNCTION_126(v16, (uint64_t)&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_99_0(*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8));
  v12(v20, v5);
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_21_0();
  return OUTLINED_FUNCTION_20_8((uint64_t (*)(void))v1[1]);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_103_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  return OUTLINED_FUNCTION_51_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_103_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  return OUTLINED_FUNCTION_51_2(*(uint64_t (**)(void))(v0 + 8));
}

void ContactsUnsetRelationshipFlowStrategy.actionForPromptForContactDisambiguationInput(_:resolveRecord:)(NSObject *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  OUTLINED_FUNCTION_95_0(a1, a2, "#ContactsUnsetRelationshipFlowStrategy actionForPromptForContactDisambiguationInput", a3);
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makeDisambiguationItemContainer(contacts:resolveRecord:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return OUTLINED_FUNCTION_4_3();
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makeDisambiguationItemContainer(contacts:resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BasicDisambiguationItemContainer<SAPerson>);
  swift_bridgeObjectRetain();
  v1 = BasicDisambiguationItemContainer.__allocating_init(_:_:)();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t ContactsUnsetRelationshipFlowStrategy.parseContactDisambiguationResult(input:paginatedItems:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  v5 = type metadata accessor for Parse.DirectInvocation();
  v4[9] = v5;
  v4[10] = *(_QWORD *)(v5 - 8);
  v4[11] = OUTLINED_FUNCTION_0_0();
  v6 = OUTLINED_FUNCTION_104_0();
  v4[12] = v6;
  v4[13] = *(_QWORD *)(v6 - 8);
  v4[14] = OUTLINED_FUNCTION_9_1();
  v4[15] = OUTLINED_FUNCTION_25_0();
  v4[16] = OUTLINED_FUNCTION_25_0();
  v4[17] = type metadata accessor for Signpost.OpenSignpost();
  v4[18] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ContactsUnsetRelationshipFlowStrategy.parseContactDisambiguationResult(input:paginatedItems:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(_QWORD, _QWORD);
  Swift::String v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Swift::String *v50;
  uint64_t v51;
  uint64_t (*v52)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  NSNumber v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  os_log_type_t v71;
  _WORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  OUTLINED_FUNCTION_137();
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v16 = v14[17];
  v15 = v14[18];
  v17 = v14[16];
  v18 = v14[12];
  v19 = v14[13];
  v20 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v21 = v15 + *(int *)(v16 + 20);
  *(_QWORD *)v21 = "ParseUnsetRelationDisambiguationResult";
  *(_QWORD *)(v21 + 8) = 38;
  *(_BYTE *)(v21 + 16) = 2;
  OUTLINED_FUNCTION_92_0();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v19 + 88))(v17, v18) != *MEMORY[0x24BE98E88])
    goto LABEL_13;
  v22 = v14[15];
  v23 = v14[12];
  v24 = v14[13];
  v26 = v14[10];
  v25 = v14[11];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v24 + 16))(v22, v14[16], v23);
  (*(void (**)(uint64_t, uint64_t))(v24 + 96))(v22, v23);
  OUTLINED_FUNCTION_108_0(v25, v22, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 32));
  if (Parse.DirectInvocation.identifier.getter() == 0xD000000000000025 && v27 == 0x800000021FEDF670)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v28 & 1) == 0)
  {
    OUTLINED_FUNCTION_139();
LABEL_13:
    v41 = *(void (**)(_QWORD, _QWORD))(v14[13] + 8);
    v41(v14[16], v14[12]);
    OUTLINED_FUNCTION_92_0();
    v42 = Parse.toContactId(existingCandidates:)(MEMORY[0x24BEE4AF8]);
    if (v43)
    {
      v41(v14[14], v14[12]);
      goto LABEL_17;
    }
    v44 = (_QWORD *)v14[8];
    v41(v14[14], v14[12]);
    v45 = v44[10];
    v46 = v44[11];
    OUTLINED_FUNCTION_123(v44 + 7);
    v47 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v46 + 8))(v42._countAndFlagsBits, v42._object, v45, v46);
    v61 = (void *)v47;
    if (!v47)
    {
      OUTLINED_FUNCTION_31_3();
      lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (uint64_t (*)(uint64_t))type metadata accessor for ContactsError, (uint64_t)&protocol conformance descriptor for ContactsError);
      v48 = OUTLINED_FUNCTION_11_3();
      OUTLINED_FUNCTION_144(v48, v49);
      *v50 = v42;
      swift_storeEnumTagMultiPayload();
      OUTLINED_FUNCTION_143();
      goto LABEL_17;
    }
    v62 = OUTLINED_FUNCTION_96();
    v63 = OUTLINED_FUNCTION_33_3(v62, (unint64_t *)&lazy cache variable for type metadata for SAPerson);
    OUTLINED_FUNCTION_33_3(v63, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v64 = OUTLINED_FUNCTION_102();
    v65.super.super.isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
    SAPerson.init(contact:isMe:)(v61, v65.super.super.isa);
    v67 = v66;
    v14[2] = v66;
    static DisambiguationResult.chosenItem(_:)();

LABEL_21:
    static os_signpost_type_t.end.getter();
    v68 = OUTLINED_FUNCTION_53_0();
    OUTLINED_FUNCTION_115(v68, (uint64_t (*)(_QWORD))type metadata accessor for Signpost.OpenSignpost);
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_45_0();
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_37_3();
    goto LABEL_18;
  }
LABEL_8:
  v29 = Parse.DirectInvocation.getSelectionIndex()();
  if (!v30)
  {
    v34 = v29;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<SAPerson>);
    v35 = PaginatedItemContainer.items.getter();
    v36 = OUTLINED_FUNCTION_33_3(v35, (unint64_t *)&lazy cache variable for type metadata for SAPerson);
    Array.subscript.getter(v34, v35, v36, (uint64_t)(v14 + 3));
    swift_bridgeObjectRelease();
    v37 = (void *)v14[3];
    if (!v37)
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v69 = OUTLINED_FUNCTION_26();
      v70 = (void *)OUTLINED_FUNCTION_10_1(v69, (uint64_t)static Logger.siriContacts);
      v71 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_30_3(v71))
      {
        v72 = (_WORD *)OUTLINED_FUNCTION_2_1();
        OUTLINED_FUNCTION_54_0(v72);
        OUTLINED_FUNCTION_2_5(&dword_21FE16000, v73, v74, "#ContactsUnsetRelationshipFlowStrategy User selected item out of bounds");
        OUTLINED_FUNCTION_1_4();
      }
      a10 = v14[16];
      v75 = v14[12];
      v76 = v14[13];

      OUTLINED_FUNCTION_31_3();
      lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (uint64_t (*)(uint64_t))type metadata accessor for ContactsError, (uint64_t)&protocol conformance descriptor for ContactsError);
      v77 = OUTLINED_FUNCTION_11_3();
      OUTLINED_FUNCTION_144(v77, v78);
      swift_storeEnumTagMultiPayload();
      OUTLINED_FUNCTION_143();
      OUTLINED_FUNCTION_73_1();
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(a10, v75);
      goto LABEL_17;
    }
    v38 = v14[13];
    v40 = v14[10];
    v39 = v14[11];
    v14[4] = v37;
    static DisambiguationResult.chosenItem(_:)();
    OUTLINED_FUNCTION_78_1(v39, *(uint64_t (**)(uint64_t, uint64_t))(v40 + 8));

    OUTLINED_FUNCTION_10_2(*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8));
    goto LABEL_21;
  }
  v31 = v14[16];
  v32 = v14[12];
  v33 = v14[13];
  OUTLINED_FUNCTION_139();
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
LABEL_17:
  static os_signpost_type_t.end.getter();
  v51 = OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_115(v51, (uint64_t (*)(_QWORD))type metadata accessor for Signpost.OpenSignpost);
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
LABEL_18:
  OUTLINED_FUNCTION_48_3();
  return v52(v52, v53, v54, v55, v56, v57, v58, v59, a9, a10, a11, a12, a13, a14);
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makePromptForContactDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  type metadata accessor for PaginationStyle();
  v4[7] = OUTLINED_FUNCTION_0_0();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<String>);
  v4[8] = v5;
  v4[9] = *(_QWORD *)(v5 - 8);
  v4[10] = OUTLINED_FUNCTION_0_0();
  v4[11] = type metadata accessor for Signpost.OpenSignpost();
  v4[12] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makePromptForContactDisambiguation(paginatedItems:resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v4 = *(int *)(v2 + 20);
  *(_DWORD *)(v0 + 120) = v4;
  v5 = v1 + v4;
  *(_QWORD *)v5 = "MakePromptForUnsetRelationDisambiguation";
  *(_QWORD *)(v5 + 8) = 40;
  *(_BYTE *)(v5 + 16) = 2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<SAPerson>);
  *(_QWORD *)(v0 + 16) = PaginatedItemContainer.items.getter();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SAPerson]);
  MEMORY[0x2207D86A8](MEMORY[0x24BEE12C8], v6);
  Sequence.compactMap<A>(_:)();
  OUTLINED_FUNCTION_18_0();
  static PaginationStyle.noPagination()();
  PaginatedItemContainer.init(items:paginationStyle:)();
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v7;
  *v7 = v0;
  v7[1] = ContactsUnsetRelationshipFlowStrategy.makePromptForContactDisambiguation(paginatedItems:resolveRecord:);
  return ContactsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 80));
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_29_5();
  *v2 = *v1;
  *(_QWORD *)(v3 + 112) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  OUTLINED_FUNCTION_66_2();
  static os_signpost_type_t.end.getter();
  v0 = OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_115(v0, (uint64_t (*)(_QWORD))type metadata accessor for Signpost.OpenSignpost);
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_31_5(v1);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_66_2();
  static os_signpost_type_t.end.getter();
  v1 = OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_115(v1, (uint64_t (*)(_QWORD))type metadata accessor for Signpost.OpenSignpost);
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  return OUTLINED_FUNCTION_31_5(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t closure #1 in ContactsUnsetRelationshipFlowStrategy.makePromptForContactDisambiguation(paginatedItems:resolveRecord:)@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = outlined bridged method (pb) of @objc SAPerson.internalGUID.getter(*a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

void ContactsUnsetRelationshipFlowStrategy.actionForPromptToSaveRelationship(input:resolveRecord:)(NSObject *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  ContactsUnsetRelationshipFlowStrategy.actionForPromptForNameInput(_:resolveRecord:)(a1, a2, "#ContactsUnsetRelationshipFlowStrategy actionForPromptToSaveRelationship", 0, a3);
}

void ContactsUnsetRelationshipFlowStrategy.actionForPromptForNameInput(_:resolveRecord:)(NSObject *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  NSObject *v5;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;

  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v11 = OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_10_1(v11, (uint64_t)static Logger.siriContacts);
  v12 = OUTLINED_FUNCTION_8();
  if (os_log_type_enabled(v5, v12))
  {
    v13 = (uint8_t *)OUTLINED_FUNCTION_2_1();
    *(_WORD *)v13 = 0;
    OUTLINED_FUNCTION_31(&dword_21FE16000, v5, v12, a3, v13);
    OUTLINED_FUNCTION_0();
  }

  ContactsUnsetRelationshipFlowStrategy.unsetRelationshipActionForInput(_:resolveRecord:shouldExpectPerson:)(a1, a2, a4 & 1, a5);
}

uint64_t ContactsUnsetRelationshipFlowStrategy.parsePromptToSaveRelationshipResponse(input:resolveRecord:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  v2[4] = OUTLINED_FUNCTION_0_0();
  v3 = OUTLINED_FUNCTION_104_0();
  v2[5] = v3;
  v2[6] = *(_QWORD *)(v3 - 8);
  v2[7] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ContactsUnsetRelationshipFlowStrategy.parsePromptToSaveRelationshipResponse(input:resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _WORD *v8;
  uint64_t (*v10)(void);

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 32);
  OUTLINED_FUNCTION_92_0();
  Parse.confirmationResponse.getter();
  OUTLINED_FUNCTION_10_2(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  v4 = OUTLINED_FUNCTION_161();
  if (__swift_getEnumTagSinglePayload(v3, 1, v4) == 1)
  {
    outlined destroy of ConfirmationResponse?(*(_QWORD *)(v0 + 32), (uint64_t)&demangling cache variable for type metadata for ConfirmationResponse?);
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v5 = OUTLINED_FUNCTION_26();
    v6 = OUTLINED_FUNCTION_10_1(v5, (uint64_t)static Logger.siriContacts);
    v7 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_15_0(v7))
    {
      v8 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_54_0(v8);
      OUTLINED_FUNCTION_15_5(&dword_21FE16000, v6, (os_log_type_t)v1, "#ContactsUnsetRelationshipFlowStrategy parsePromptToSaveRelationshipResponse throwing error");
      OUTLINED_FUNCTION_1_4();
    }

    OUTLINED_FUNCTION_31_3();
    lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (uint64_t (*)(uint64_t))type metadata accessor for ContactsError, (uint64_t)&protocol conformance descriptor for ContactsError);
    OUTLINED_FUNCTION_11_3();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_45_0();
    return OUTLINED_FUNCTION_25_8(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 32), v4);
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_13_0();
    v10 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
    return OUTLINED_FUNCTION_25_8(v10);
  }
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4[31] = a3;
  v4[32] = v3;
  v4[29] = a1;
  v4[30] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v4[33] = OUTLINED_FUNCTION_0_0();
  v5 = OUTLINED_FUNCTION_87_0();
  v4[34] = v5;
  v4[35] = *(_QWORD *)(v5 - 8);
  v4[36] = OUTLINED_FUNCTION_0_0();
  type metadata accessor for Locale();
  v4[37] = OUTLINED_FUNCTION_0_0();
  type metadata accessor for DialogPhase();
  v4[38] = OUTLINED_FUNCTION_0_0();
  v6 = type metadata accessor for OutputGenerationManifest();
  v4[39] = v6;
  v4[40] = *(_QWORD *)(v6 - 8);
  v4[41] = OUTLINED_FUNCTION_0_0();
  v7 = type metadata accessor for ContactsSnippetPluginModel();
  v4[42] = v7;
  v4[43] = *(_QWORD *)(v7 - 8);
  v4[44] = OUTLINED_FUNCTION_0_0();
  v8 = type metadata accessor for ContactsSnippetFlowState();
  v4[45] = v8;
  v4[46] = *(_QWORD *)(v8 - 8);
  v4[47] = OUTLINED_FUNCTION_0_0();
  v9 = type metadata accessor for ModifyContactAttributeSnippetModel.ModificationType();
  v4[48] = v9;
  v4[49] = *(_QWORD *)(v9 - 8);
  v4[50] = OUTLINED_FUNCTION_0_0();
  v10 = type metadata accessor for ModifyContactAttributeSnippetModel.ContactAttributeToModify();
  v4[51] = v10;
  v4[52] = *(_QWORD *)(v10 - 8);
  v4[53] = OUTLINED_FUNCTION_0_0();
  v11 = type metadata accessor for ModifyContactAttributeSnippetModel();
  v4[54] = v11;
  v4[55] = *(_QWORD *)(v11 - 8);
  v4[56] = OUTLINED_FUNCTION_0_0();
  v12 = type metadata accessor for ContactsLabelCATContainer();
  v4[57] = v12;
  v4[58] = *(_QWORD *)(v12 - 8);
  v4[59] = OUTLINED_FUNCTION_9_1();
  v4[60] = OUTLINED_FUNCTION_25_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[61] = OUTLINED_FUNCTION_9_1();
  v4[62] = OUTLINED_FUNCTION_25_0();
  v4[63] = OUTLINED_FUNCTION_25_0();
  v4[64] = OUTLINED_FUNCTION_25_0();
  v4[65] = OUTLINED_FUNCTION_25_0();
  v4[66] = OUTLINED_FUNCTION_25_0();
  v4[67] = OUTLINED_FUNCTION_25_0();
  v4[68] = OUTLINED_FUNCTION_25_0();
  v4[69] = OUTLINED_FUNCTION_25_0();
  type metadata accessor for CATOption();
  v4[70] = OUTLINED_FUNCTION_0_0();
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableContact<CNContact>);
  v4[71] = v13;
  v4[72] = *(_QWORD *)(v13 - 8);
  v4[73] = OUTLINED_FUNCTION_9_1();
  v4[74] = OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

id ContactsUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:)()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id result;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  id v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  OUTLINED_FUNCTION_137();
  if ((ContactsStrategy.isSmartEnabled.getter() & 1) == 0)
  {
    v5 = v1[65];
    v6 = v1[32];
    v7 = v1[30];
    outlined init with copy of ContactServiceProtocol(v6 + 16, (uint64_t)(v1 + 3));
    v8 = *(_QWORD *)(v6 + 104);
    v1[2] = 10;
    v1[8] = v8;
    swift_retain();
    specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:)();
    v1[86] = v9;
    outlined destroy of ConfirmationViewBuilder((uint64_t)(v1 + 2));
    OUTLINED_FUNCTION_31_4();
    OUTLINED_FUNCTION_71_1(v5, 1);
    outlined init with copy of ContactServiceProtocol(v6 + 56, (uint64_t)(v1 + 9));
    v10 = OUTLINED_FUNCTION_123(v1 + 9);
    result = OUTLINED_FUNCTION_47_3((uint64_t)v10, sel_internalGUID);
    if (!result)
    {
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    OUTLINED_FUNCTION_107();
    OUTLINED_FUNCTION_164();
    v12 = OUTLINED_FUNCTION_75_1();
    if (v7)
    {
      OUTLINED_FUNCTION_22_2();
      OUTLINED_FUNCTION_117();
      OUTLINED_FUNCTION_138();
    }
    else
    {
      v35 = (void *)v12;
      OUTLINED_FUNCTION_117();
      OUTLINED_FUNCTION_138();
      if (v35)
      {
        v36 = v1[32];
        OUTLINED_FUNCTION_130();
        OUTLINED_FUNCTION_96_0();
        v37 = v35;
        OUTLINED_FUNCTION_67_2();
        v38 = *(id *)(v36 + 120);
        OUTLINED_FUNCTION_147();
        DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v39, v40, v41, v42);
        OUTLINED_FUNCTION_127();

        goto LABEL_19;
      }
    }
    v13 = v1[32];
    v14 = (void *)v1[30];
    OUTLINED_FUNCTION_130();
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v6 + 16), *(_QWORD *)(v13 + 40));
    v15 = v14;
    OUTLINED_FUNCTION_67_2();
    v16 = *(id *)(v13 + 120);
    OUTLINED_FUNCTION_147();
    DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v17, v18, v19, v20);
    OUTLINED_FUNCTION_127();
LABEL_19:
    v43 = v1[63];
    v44 = v1[61];
    v45 = v1[62];
    v46 = swift_release();
    OUTLINED_FUNCTION_152(v46, (uint64_t)&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_168();
    RelationshipLabel.asUnboundedSemanticValue.getter();
    OUTLINED_FUNCTION_17_4();
    OUTLINED_FUNCTION_71_1(v43, 0);
    OUTLINED_FUNCTION_71_1(v45, 1);
    OUTLINED_FUNCTION_17_4();
    OUTLINED_FUNCTION_71_1(v44, 0);
    v47 = (_QWORD *)swift_task_alloc();
    v1[87] = v47;
    *v47 = v1;
    v47[1] = ContactsUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:);
    OUTLINED_FUNCTION_48_3();
    return (id)ModifyContactAttributeCATs.confirmModifyRelationship(requestedRelationship:existingRelationship:contactName:modifyOperation:)(v48, v49, v50, v51, v52);
  }
  v1[17] = &type metadata for InstalledAppsProvider;
  v1[18] = &protocol witness table for InstalledAppsProvider;
  v2 = (void *)OUTLINED_FUNCTION_65_2();
  v3 = v2;
  if (v2)
  {
    v4 = objc_msgSend(v2, sel_identifier);

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_76_1();
  }
  OUTLINED_FUNCTION_45_3();
  v1[75] = v21;
  OUTLINED_FUNCTION_18_0();
  if (OUTLINED_FUNCTION_74_1())
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_76_1();
  }
  OUTLINED_FUNCTION_45_3();
  v1[76] = v22;
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_151();
  __swift_project_boxed_opaque_existential_1(v1 + 19, v1[22]);
  result = OUTLINED_FUNCTION_74_1();
  if (!result)
    goto LABEL_24;
  OUTLINED_FUNCTION_107();
  OUTLINED_FUNCTION_156();
  v23 = OUTLINED_FUNCTION_68_2();
  if (v0)
  {
    OUTLINED_FUNCTION_22_2();
    OUTLINED_FUNCTION_9_0();
    OUTLINED_FUNCTION_125();
  }
  else
  {
    v53 = v23;
    OUTLINED_FUNCTION_9_0();
    v54 = OUTLINED_FUNCTION_125();
    if (v53)
    {
      OUTLINED_FUNCTION_33_3(v54, (unint64_t *)&lazy cache variable for type metadata for CNContact);
      goto LABEL_22;
    }
  }
  v24 = (void *)v1[30];
  objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBAD50]), sel_init);
  result = objc_msgSend(v24, sel_prefix);
  if (!result)
    goto LABEL_25;
  v25 = result;
  OUTLINED_FUNCTION_18_4((uint64_t)result, sel_setNamePrefix_);

  v27 = OUTLINED_FUNCTION_47_3(v26, sel_firstName);
  OUTLINED_FUNCTION_18_4((uint64_t)v27, sel_setFirstName_);

  result = OUTLINED_FUNCTION_47_3(v28, sel_middleName);
  if (!result)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v29 = result;
  OUTLINED_FUNCTION_18_4((uint64_t)result, sel_setMiddleName_);

  v31 = OUTLINED_FUNCTION_47_3(v30, sel_lastName);
  OUTLINED_FUNCTION_18_4((uint64_t)v31, sel_setLastName_);

  result = OUTLINED_FUNCTION_47_3(v32, sel_suffix);
  if (result)
  {
    v33 = result;
    OUTLINED_FUNCTION_18_4((uint64_t)result, sel_setNameSuffix_);

    OUTLINED_FUNCTION_33_3(v34, (unint64_t *)&lazy cache variable for type metadata for CNContact);
LABEL_22:
    CodableContact.init(wrappedValue:)();
    v55 = v1[69];
    v56 = v1[68];
    v57 = v1[67];
    v58 = v1[66];
    type metadata accessor for ModifyContactAttributeCATsModern();
    OUTLINED_FUNCTION_69_2();
    v1[77] = OUTLINED_FUNCTION_44_3();
    RelationshipLabel.asUnboundedSemanticValue.getter();
    OUTLINED_FUNCTION_17_4();
    OUTLINED_FUNCTION_31_4();
    OUTLINED_FUNCTION_70_1(v55, 0);
    OUTLINED_FUNCTION_70_1(v56, 1);
    v59 = (void *)CodableContact.wrappedValue.getter();
    CNContact.formattedFullName.getter();

    OUTLINED_FUNCTION_17_4();
    OUTLINED_FUNCTION_70_1(v57, 0);
    OUTLINED_FUNCTION_17_4();
    OUTLINED_FUNCTION_70_1(v58, 0);
    v60 = (_QWORD *)swift_task_alloc();
    v1[78] = v60;
    *v60 = v1;
    v60[1] = ContactsUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:);
    OUTLINED_FUNCTION_48_3();
    return (id)ModifyContactAttributeCATsModern.confirmModifyRelationship(requestedRelationship:existingRelationship:contactName:modifyOperation:)(v61, v62, v63, v64);
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (_QWORD *)*v2;
  v3[79] = a1;
  v3[80] = v1;
  swift_task_dealloc();
  v4 = v3[69];
  v5 = v3[68];
  v6 = v3[67];
  v7 = v3[66];
  swift_release();
  OUTLINED_FUNCTION_124(v7);
  OUTLINED_FUNCTION_124(v6);
  OUTLINED_FUNCTION_124(v5);
  OUTLINED_FUNCTION_124(v4);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:)()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;

  type metadata accessor for ContactsLabelCATsModern();
  OUTLINED_FUNCTION_69_2();
  v1 = OUTLINED_FUNCTION_44_3();
  v0[81] = v1;
  v2 = (_QWORD *)swift_task_alloc();
  v0[82] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = ContactsUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:);
  return static ContactsLabelCATContainer.modifyConfirmationCATs(from:)(v0[60], v1);
}

{
  OUTLINED_FUNCTION_29_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_29_5();
  v1 = v0 + 192;
  OUTLINED_FUNCTION_3_0();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0(v1);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_14_1();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_79_0();
  v1 = *(void **)(v0 + 608);
  v2 = *(void **)(v0 + 600);
  v12 = *(_QWORD *)(v0 + 592);
  v10 = *(_QWORD *)(v0 + 568);
  v7 = *(_QWORD *)(v0 + 480);
  v8 = *(_QWORD *)(v0 + 576);
  v3 = *(_QWORD *)(v0 + 464);
  v6 = *(_QWORD *)(v0 + 456);
  v13 = *(_QWORD *)(v0 + 352);
  v9 = *(_QWORD *)(v0 + 344);
  v11 = *(_QWORD *)(v0 + 336);

  OUTLINED_FUNCTION_109_0();
  OUTLINED_FUNCTION_73_1();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v6);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v12, v10);
  outlined destroy of AppUtil(v0 + 112);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v13, v11);
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_43_1();
  swift_task_dealloc();
  v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_9_7(v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  OUTLINED_FUNCTION_85_0();
  OUTLINED_FUNCTION_87(v2);
  v1[88] = v0;
  swift_task_dealloc();
  if (v0)
  {
    v3 = v1[62];
    v4 = v1[63];
    v5 = v1[61];
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_145(v5);
    OUTLINED_FUNCTION_145(v3);
    OUTLINED_FUNCTION_145(v4);
  }
  else
  {
    v6 = v1[62];
    v7 = v1[63];
    OUTLINED_FUNCTION_107_0(v1[61]);
    OUTLINED_FUNCTION_107_0(v6);
    OUTLINED_FUNCTION_107_0(v7);
  }
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);

  OUTLINED_FUNCTION_79_0();
  v1 = v0[86];
  v3 = v0[35];
  v2 = v0[36];
  v4 = v0[33];
  v6 = (uint64_t *)v0[29];
  v5 = (void *)v0[30];
  v7 = OUTLINED_FUNCTION_163();
  __swift_storeEnumTagSinglePayload(v4, 1, 1, v7);
  type metadata accessor for ContactsCommonCATs();
  v8 = OUTLINED_FUNCTION_162();
  v9 = MEMORY[0x24BE99088];
  v6[3] = v8;
  v6[4] = v9;
  __swift_allocate_boxed_opaque_existential_1(v6);
  ContactsStrategy.confirmationOutput(templateResult:views:meCard:listenAfterSpeaking:nlContextUpdate:)(v2, v1, v5, 1, v4);
  OUTLINED_FUNCTION_18_0();
  outlined destroy of ConfirmationResponse?(v4, (uint64_t)&demangling cache variable for type metadata for NLContextUpdate?);
  v10 = OUTLINED_FUNCTION_99_0(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_126(v10, (uint64_t)&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_6_8();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_43_1();
  swift_task_dealloc();
  v11 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_9_7(v11);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_79_0();
  v1 = *(void **)(v0 + 600);
  v2 = *(_QWORD *)(v0 + 576);

  OUTLINED_FUNCTION_10_2(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  outlined destroy of AppUtil(v0 + 112);
  OUTLINED_FUNCTION_3_3(*(_QWORD *)(v0 + 640));
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_43_1();
  v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_73_0();
  return OUTLINED_FUNCTION_9_7(v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  OUTLINED_FUNCTION_79_0();
  outlined destroy of ConfirmationResponse?(*(_QWORD *)(v0 + 520), (uint64_t)&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_3_3(*(_QWORD *)(v0 + 704));
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_43_1();
  v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_73_0();
  return OUTLINED_FUNCTION_9_7(v1);
}

#error "21FE30C90: call analysis failed (funcsize=175)"

uint64_t closure #1 in ContactsUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  OutputGenerationManifest.listenAfterSpeaking.setter();
  OutputGenerationManifest.canUseServerTTS.setter();
  static ContactsContextProvider.confirm(person:attribute:)(a3, 0, 1);
  v7 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v7);
  OutputGenerationManifest.nlContextUpdate.setter();
  ContactsSnippetPluginModel.responseViewID.getter();
  return OutputGenerationManifest.responseViewId.setter();
}

uint64_t default argument 3 of ContactsStrategy.confirmationOutput(templateResult:views:meCard:listenAfterSpeaking:nlContextUpdate:)()
{
  return 1;
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4[24] = a3;
  v4[25] = v3;
  v4[22] = a1;
  v4[23] = a2;
  v5 = OUTLINED_FUNCTION_87_0();
  v4[26] = v5;
  v4[27] = *(_QWORD *)(v5 - 8);
  v4[28] = OUTLINED_FUNCTION_0_0();
  type metadata accessor for Locale();
  v4[29] = OUTLINED_FUNCTION_0_0();
  type metadata accessor for DialogPhase();
  v4[30] = OUTLINED_FUNCTION_0_0();
  v6 = type metadata accessor for OutputGenerationManifest();
  v4[31] = v6;
  v4[32] = *(_QWORD *)(v6 - 8);
  v4[33] = OUTLINED_FUNCTION_0_0();
  v7 = type metadata accessor for ContactsSnippetPluginModel();
  v4[34] = v7;
  v4[35] = *(_QWORD *)(v7 - 8);
  v4[36] = OUTLINED_FUNCTION_0_0();
  v8 = type metadata accessor for ContactsSnippetFlowState();
  v4[37] = v8;
  v4[38] = *(_QWORD *)(v8 - 8);
  v4[39] = OUTLINED_FUNCTION_0_0();
  v9 = type metadata accessor for ModifyContactAttributeSnippetModel.ModificationType();
  v4[40] = v9;
  v4[41] = *(_QWORD *)(v9 - 8);
  v4[42] = OUTLINED_FUNCTION_0_0();
  v10 = type metadata accessor for ModifyContactAttributeSnippetModel.ContactAttributeToModify();
  v4[43] = v10;
  v4[44] = *(_QWORD *)(v10 - 8);
  v4[45] = OUTLINED_FUNCTION_0_0();
  v11 = type metadata accessor for ModifyContactAttributeSnippetModel();
  v4[46] = v11;
  v4[47] = *(_QWORD *)(v11 - 8);
  v4[48] = OUTLINED_FUNCTION_0_0();
  v12 = type metadata accessor for ContactsLabelCATContainer();
  v4[49] = v12;
  v4[50] = *(_QWORD *)(v12 - 8);
  v4[51] = OUTLINED_FUNCTION_9_1();
  v4[52] = OUTLINED_FUNCTION_25_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v4[53] = OUTLINED_FUNCTION_9_1();
  v4[54] = OUTLINED_FUNCTION_25_0();
  v4[55] = OUTLINED_FUNCTION_25_0();
  v4[56] = OUTLINED_FUNCTION_25_0();
  v4[57] = OUTLINED_FUNCTION_25_0();
  v4[58] = OUTLINED_FUNCTION_25_0();
  v4[59] = OUTLINED_FUNCTION_25_0();
  type metadata accessor for CATOption();
  v4[60] = OUTLINED_FUNCTION_0_0();
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableContact<CNContact>);
  v4[61] = v13;
  v4[62] = *(_QWORD *)(v13 - 8);
  v4[63] = OUTLINED_FUNCTION_9_1();
  v4[64] = OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

id ContactsUnsetRelationshipFlowStrategy.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:)()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id result;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  void *v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  OUTLINED_FUNCTION_137();
  if ((ContactsStrategy.isSmartEnabled.getter() & 1) != 0)
  {
    v1[10] = &type metadata for InstalledAppsProvider;
    v1[11] = &protocol witness table for InstalledAppsProvider;
    v2 = (void *)OUTLINED_FUNCTION_65_2();
    v3 = v2;
    if (v2)
    {
      v4 = objc_msgSend(v2, sel_identifier);

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_76_1();
    }
    OUTLINED_FUNCTION_45_3();
    v1[65] = v26;
    OUTLINED_FUNCTION_18_0();
    if (OUTLINED_FUNCTION_74_1())
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_76_1();
    }
    OUTLINED_FUNCTION_45_3();
    v1[66] = v27;
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_151();
    __swift_project_boxed_opaque_existential_1(v1 + 12, v1[15]);
    result = OUTLINED_FUNCTION_74_1();
    if (result)
    {
      OUTLINED_FUNCTION_107();
      OUTLINED_FUNCTION_156();
      v28 = OUTLINED_FUNCTION_68_2();
      if (v0)
      {
        OUTLINED_FUNCTION_22_2();
        OUTLINED_FUNCTION_9_0();
        OUTLINED_FUNCTION_125();
      }
      else
      {
        v40 = v28;
        OUTLINED_FUNCTION_9_0();
        v41 = OUTLINED_FUNCTION_125();
        if (v40)
        {
          OUTLINED_FUNCTION_33_3(v41, (unint64_t *)&lazy cache variable for type metadata for CNContact);
          goto LABEL_21;
        }
      }
      v29 = (void *)v1[23];
      objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBAD50]), sel_init);
      result = objc_msgSend(v29, sel_prefix);
      if (result)
      {
        v30 = result;
        OUTLINED_FUNCTION_18_4((uint64_t)result, sel_setNamePrefix_);

        v32 = OUTLINED_FUNCTION_47_3(v31, sel_firstName);
        OUTLINED_FUNCTION_18_4((uint64_t)v32, sel_setFirstName_);

        result = OUTLINED_FUNCTION_47_3(v33, sel_middleName);
        if (result)
        {
          v34 = result;
          OUTLINED_FUNCTION_18_4((uint64_t)result, sel_setMiddleName_);

          v36 = OUTLINED_FUNCTION_47_3(v35, sel_lastName);
          OUTLINED_FUNCTION_18_4((uint64_t)v36, sel_setLastName_);

          result = OUTLINED_FUNCTION_47_3(v37, sel_suffix);
          if (result)
          {
            v38 = result;
            OUTLINED_FUNCTION_18_4((uint64_t)result, sel_setNameSuffix_);

            OUTLINED_FUNCTION_33_3(v39, (unint64_t *)&lazy cache variable for type metadata for CNContact);
LABEL_21:
            CodableContact.init(wrappedValue:)();
            v42 = v1[58];
            v43 = v1[59];
            v44 = v1[57];
            v45 = v1[25];
            type metadata accessor for ModifyContactAttributeCATsModern();
            OUTLINED_FUNCTION_69_2();
            v1[67] = OUTLINED_FUNCTION_44_3();
            RelationshipLabel.asUnboundedSemanticValue.getter();
            OUTLINED_FUNCTION_17_4();
            OUTLINED_FUNCTION_31_4();
            OUTLINED_FUNCTION_72_1(v43);
            v46 = (void *)CodableContact.wrappedValue.getter();
            CNContact.formattedFullName.getter();

            OUTLINED_FUNCTION_17_4();
            OUTLINED_FUNCTION_72_1(v42);
            OUTLINED_FUNCTION_17_4();
            OUTLINED_FUNCTION_72_1(v44);
            OUTLINED_FUNCTION_97_0((_QWORD *)(v45 + 16));
            v47 = (_QWORD *)swift_task_alloc();
            v1[68] = v47;
            *v47 = v1;
            v47[1] = ContactsUnsetRelationshipFlowStrategy.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:);
            OUTLINED_FUNCTION_48_3();
            return (id)ModifyContactAttributeCATsModern.intentHandledModifyRelationship(updatedRelationship:contactName:modifyOperation:isVoiceMode:)(v48, v49, v50, v51);
          }
          goto LABEL_27;
        }
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_26;
  }
  v5 = v1[56];
  v6 = v1[25];
  v58 = OUTLINED_FUNCTION_31_4();
  __swift_storeEnumTagSinglePayload(v5, 1, 1, v58);
  if ((OUTLINED_FUNCTION_97_0((_QWORD *)(v6 + 16)) & 1) == 0)
    goto LABEL_8;
  v7 = v1[23];
  outlined init with copy of ContactServiceProtocol(v1[25] + 56, (uint64_t)(v1 + 2));
  v8 = OUTLINED_FUNCTION_123(v1 + 2);
  result = OUTLINED_FUNCTION_47_3((uint64_t)v8, sel_internalGUID);
  if (result)
  {
    OUTLINED_FUNCTION_107();
    OUTLINED_FUNCTION_164();
    v10 = OUTLINED_FUNCTION_75_1();
    if (v7)
    {
      OUTLINED_FUNCTION_22_2();
      OUTLINED_FUNCTION_117();
      OUTLINED_FUNCTION_138();
    }
    else
    {
      v52 = (void *)v10;
      OUTLINED_FUNCTION_117();
      OUTLINED_FUNCTION_138();
      if (v52)
      {
        OUTLINED_FUNCTION_130();
        OUTLINED_FUNCTION_96_0();
        v53 = v52;
        OUTLINED_FUNCTION_67_2();
        OUTLINED_FUNCTION_148();
        DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v54, v55, v56, v57);
        OUTLINED_FUNCTION_127();

        goto LABEL_9;
      }
    }
LABEL_8:
    v11 = (void *)v1[23];
    OUTLINED_FUNCTION_130();
    OUTLINED_FUNCTION_96_0();
    v12 = v11;
    OUTLINED_FUNCTION_67_2();
    OUTLINED_FUNCTION_148();
    DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v13, v14, v15, v16);
    OUTLINED_FUNCTION_127();
LABEL_9:
    v18 = v1[53];
    v17 = v1[54];
    v19 = swift_release();
    OUTLINED_FUNCTION_152(v19, (uint64_t)&demangling cache variable for type metadata for SpeakableString?);
    OUTLINED_FUNCTION_168();
    RelationshipLabel.asUnboundedSemanticValue.getter();
    OUTLINED_FUNCTION_17_4();
    __swift_storeEnumTagSinglePayload(v17, 0, 1, v58);
    OUTLINED_FUNCTION_17_4();
    __swift_storeEnumTagSinglePayload(v18, 0, 1, v58);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 40));
    DeviceState.isVox.getter();
    v20 = (_QWORD *)swift_task_alloc();
    v1[76] = v20;
    *v20 = v1;
    v20[1] = ContactsUnsetRelationshipFlowStrategy.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:);
    OUTLINED_FUNCTION_48_3();
    return (id)ModifyContactAttributeCATs.intentHandledModifyRelationship(updatedRelationship:contactName:modifyOperation:isVoiceMode:)(v21, v22, v23, v24, v25);
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (_QWORD *)*v2;
  v3[69] = a1;
  v3[70] = v1;
  swift_task_dealloc();
  v5 = v3[58];
  v4 = v3[59];
  v6 = v3[57];
  swift_release();
  OUTLINED_FUNCTION_154(v6);
  OUTLINED_FUNCTION_154(v5);
  OUTLINED_FUNCTION_154(v4);
  OUTLINED_FUNCTION_20_0();
  return swift_task_switch();
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:)()
{
  uint64_t *v0;
  _QWORD *v1;

  type metadata accessor for ContactsLabelCATsModern();
  OUTLINED_FUNCTION_69_2();
  v0[71] = OUTLINED_FUNCTION_44_3();
  v1 = (_QWORD *)swift_task_alloc();
  v0[72] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = ContactsUnsetRelationshipFlowStrategy.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:);
  return static ContactsLabelCATContainer.modifyIntentHandledCATs(from:)(v0[52]);
}

{
  OUTLINED_FUNCTION_29_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_29_5();
  v1 = v0 + 136;
  OUTLINED_FUNCTION_3_0();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0(v1);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_14_1();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_136();
  v1 = *(void **)(v0 + 528);
  v2 = *(void **)(v0 + 520);
  v8 = *(_QWORD *)(v0 + 496);
  v10 = *(_QWORD *)(v0 + 488);
  v7 = *(_QWORD *)(v0 + 416);
  v3 = *(_QWORD *)(v0 + 400);
  v6 = *(_QWORD *)(v0 + 392);
  v13 = *(_QWORD *)(v0 + 288);
  v9 = *(_QWORD *)(v0 + 280);
  v11 = *(_QWORD *)(v0 + 272);
  v12 = *(_QWORD *)(v0 + 512);

  OUTLINED_FUNCTION_109_0();
  OUTLINED_FUNCTION_73_1();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v6);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v12, v10);
  outlined destroy of AppUtil(v0 + 56);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v13, v11);
  OUTLINED_FUNCTION_13_8();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_20_8(v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_85_0();
  OUTLINED_FUNCTION_87(v2);
  v1[77] = v0;
  swift_task_dealloc();
  v3 = v1[54];
  OUTLINED_FUNCTION_107_0(v1[53]);
  OUTLINED_FUNCTION_107_0(v3);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_14_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_136();
  v1 = *(_QWORD *)(v0 + 216);
  ContactsUnsetRelationshipFlowStrategy.makeCompletionOutput(_:)(*(uint64_t **)(v0 + 176));
  v2 = OUTLINED_FUNCTION_99_0(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_126(v2, (uint64_t)&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_13_8();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_20_8(v3);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_80_0();
  v1 = *(void **)(v0 + 520);
  v2 = *(_QWORD *)(v0 + 496);

  OUTLINED_FUNCTION_10_2(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  outlined destroy of AppUtil(v0 + 56);
  OUTLINED_FUNCTION_12_6(*(_QWORD *)(v0 + 560));
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_73_0();
  return OUTLINED_FUNCTION_50_3(v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  OUTLINED_FUNCTION_80_0();
  outlined destroy of ConfirmationResponse?(*(_QWORD *)(v0 + 448), (uint64_t)&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_6(*(_QWORD *)(v0 + 616));
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_73_0();
  return OUTLINED_FUNCTION_50_3(v1);
}

#error "21FE31D44: call analysis failed (funcsize=152)"

uint64_t closure #1 in ContactsUnsetRelationshipFlowStrategy.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:)()
{
  OutputGenerationManifest.listenAfterSpeaking.setter();
  OutputGenerationManifest.canUseServerTTS.setter();
  ContactsSnippetPluginModel.responseViewID.getter();
  return OutputGenerationManifest.responseViewId.setter();
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makeSaveRelationshipRejectedResponse(person:requestedRelationship:resolveRecord:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = OUTLINED_FUNCTION_87_0();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makeSaveRelationshipRejectedResponse(person:requestedRelationship:resolveRecord:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  OUTLINED_FUNCTION_135(v1);
  return ContactsCommonCATs.promptCancelled()();
}

{
  OUTLINED_FUNCTION_26_5();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  v1 = *(_QWORD *)(v0 + 40);
  ContactsUnsetRelationshipFlowStrategy.makeCompletionOutput(_:)(*(uint64_t **)(v0 + 16));
  OUTLINED_FUNCTION_10_2(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_21_0();
  v2 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_31_5(v2);
}

{
  uint64_t v0;

  swift_task_dealloc();
  return OUTLINED_FUNCTION_3_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makeUnsupportedPlatformResponse(requestedRelationship:resolveRecord:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = OUTLINED_FUNCTION_87_0();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makeUnsupportedPlatformResponse(requestedRelationship:resolveRecord:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  OUTLINED_FUNCTION_135(v1);
  return ContactsCommonCATs.unsupportedAction()();
}

{
  OUTLINED_FUNCTION_26_5();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makeErrorResponse(error:app:intent:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = OUTLINED_FUNCTION_87_0();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ContactsUnsetRelationshipFlowStrategy.makeErrorResponse(error:app:intent:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  OUTLINED_FUNCTION_135(v1);
  return ContactsCommonCATs.genericError()();
}

void ContactsUnsetRelationshipFlowStrategy.makeCompletionOutput(_:)(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_123((_QWORD *)(v1 + 16));
  dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  v6 = OUTLINED_FUNCTION_163();
  __swift_storeEnumTagSinglePayload((uint64_t)v5, 1, 1, v6);
  v7 = OUTLINED_FUNCTION_162();
  memset(v9, 0, sizeof(v9));
  v10 = 0;
  v8 = MEMORY[0x24BE99088];
  a1[3] = v7;
  a1[4] = v8;
  __swift_allocate_boxed_opaque_existential_1(a1);
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of ConfirmationResponse?((uint64_t)v9, (uint64_t)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of ConfirmationResponse?((uint64_t)v5, (uint64_t)&demangling cache variable for type metadata for NLContextUpdate?);
}

void ContactsUnsetRelationshipFlowStrategy.getActionForInput(input:)(NSObject *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  int v26;
  int v27;
  int v28;
  void (*v31)(char *, uint64_t);
  void *v32;
  void *v33;
  uint64_t v34;
  os_log_type_t v35;
  _WORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  os_log_type_t v43;
  _WORD *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  os_log_type_t v49;
  _WORD *v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  os_log_type_t v61;
  _WORD *v62;
  uint64_t v63;
  os_log_type_t v64;
  _WORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  os_log_type_t v69;
  _WORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t EnumTagSinglePayload;
  uint64_t v75;
  uint64_t v76;
  os_log_type_t v77;
  _WORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  _OWORD v94[2];

  v91 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_9_5();
  v84 = v4;
  v88 = type metadata accessor for USOParse();
  v86 = *(_QWORD *)(v88 - 8);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_5_2();
  v85 = v6;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v7);
  v87 = (char *)&v81 - v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_9_5();
  v90 = v10;
  v11 = OUTLINED_FUNCTION_104_0();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_5_2();
  v89 = v13;
  OUTLINED_FUNCTION_54();
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v81 - v16;
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v81 - v19;
  v21 = MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)&v81 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v25 = (char *)&v81 - v24;
  OUTLINED_FUNCTION_92_0();
  v26 = OUTLINED_FUNCTION_153((uint64_t)v25);
  v27 = *MEMORY[0x24BE98E88];
  v28 = *MEMORY[0x24BE98E98];
  if (v26 != *MEMORY[0x24BE98E08] && v26 != v27 && v26 != v28)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v39 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v39, (uint64_t)static Logger.siriContacts);
    v40 = OUTLINED_FUNCTION_8();
    if (OUTLINED_FUNCTION_3(v40))
    {
      v41 = (uint8_t *)OUTLINED_FUNCTION_2_1();
      *(_WORD *)v41 = 0;
      OUTLINED_FUNCTION_31(&dword_21FE16000, a1, (os_log_type_t)v17, "#ContactsUnsetRelationshipFlowStrategy: Received unsupported parse type, returning .ignore() actionForInput", v41);
      OUTLINED_FUNCTION_0();
    }

    static ActionForInput.ignore()();
    OUTLINED_FUNCTION_158(*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8));
    goto LABEL_41;
  }
  v82 = v12;
  v31 = *(void (**)(char *, uint64_t))(v12 + 8);
  OUTLINED_FUNCTION_155((uint64_t)v25);
  v83 = a1;
  Input.parse.getter();
  Parse.cancelOrContactIntent.getter();
  v33 = v32;
  v31(v23, v11);
  if ((v33 & 1) == 0)
  {
    if (((unsigned __int16)v33 & 0x100) == 0)
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v34 = OUTLINED_FUNCTION_26();
      OUTLINED_FUNCTION_10_1(v34, (uint64_t)static Logger.siriContacts);
      v35 = OUTLINED_FUNCTION_54_2();
      if (OUTLINED_FUNCTION_30_3(v35))
      {
        v36 = (_WORD *)OUTLINED_FUNCTION_2_1();
        OUTLINED_FUNCTION_54_0(v36);
        OUTLINED_FUNCTION_2_5(&dword_21FE16000, v37, v38, "#ContactsUnsetRelationshipFlowStrategy: .ignore() actionForInput");
        OUTLINED_FUNCTION_1_4();
      }

      static ActionForInput.ignore()();
      goto LABEL_41;
    }
    Input.parse.getter();
    v47 = (void *)OUTLINED_FUNCTION_153((uint64_t)v20);
    v31(v20, v11);
    if ((_DWORD)v47 == v27)
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v48 = OUTLINED_FUNCTION_26();
      OUTLINED_FUNCTION_10_1(v48, (uint64_t)static Logger.siriContacts);
      v49 = OUTLINED_FUNCTION_54_2();
      if (OUTLINED_FUNCTION_30_3(v49))
      {
        v50 = (_WORD *)OUTLINED_FUNCTION_2_1();
        OUTLINED_FUNCTION_54_0(v50);
        v53 = "#ContactsUnsetRelationshipFlowStrategy: Direct Invocation parse, returning .handle()";
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    Input.parse.getter();
    Parse.confirmationResponse.getter();
    OUTLINED_FUNCTION_155((uint64_t)v17);
    v54 = OUTLINED_FUNCTION_161();
    v47 = (void *)OUTLINED_FUNCTION_120(v54);
    OUTLINED_FUNCTION_166((uint64_t)v47, (uint64_t)&demangling cache variable for type metadata for ConfirmationResponse?);
    if ((_DWORD)v47 != 1)
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v60 = OUTLINED_FUNCTION_26();
      OUTLINED_FUNCTION_10_1(v60, (uint64_t)static Logger.siriContacts);
      v61 = OUTLINED_FUNCTION_54_2();
      if (OUTLINED_FUNCTION_30_3(v61))
      {
        v62 = (_WORD *)OUTLINED_FUNCTION_2_1();
        OUTLINED_FUNCTION_54_0(v62);
        v53 = "#ContactsUnsetRelationshipFlowStrategy: confirmation response parse, returning .handle()";
LABEL_39:
        OUTLINED_FUNCTION_2_5(&dword_21FE16000, v51, v52, v53);
        OUTLINED_FUNCTION_1_4();
      }
LABEL_40:

      static ActionForInput.handle()();
      goto LABEL_41;
    }
    v47 = v89;
    Input.parse.getter();
    if (OUTLINED_FUNCTION_153((uint64_t)v47) == v28)
    {
      OUTLINED_FUNCTION_158(*(uint64_t (**)(uint64_t, uint64_t))(v82 + 96));
      v55 = v86;
      v56 = (uint64_t)v87;
      v57 = v88;
      (*(void (**)(char *, void *, uint64_t))(v86 + 32))(v87, v47, v88);
      v58 = USOParse.isOrdinalDisambiguation.getter();
      v59 = v85;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v85, v56, v57);
      if ((v58 & 1) != 0)
      {
        OUTLINED_FUNCTION_101_0(v59);
LABEL_49:
        if (one-time initialization token for siriContacts != -1)
          swift_once();
        v68 = OUTLINED_FUNCTION_26();
        OUTLINED_FUNCTION_10_1(v68, (uint64_t)static Logger.siriContacts);
        v69 = OUTLINED_FUNCTION_54_2();
        if (OUTLINED_FUNCTION_30_3(v69))
        {
          v70 = (_WORD *)OUTLINED_FUNCTION_2_1();
          OUTLINED_FUNCTION_54_0(v70);
          OUTLINED_FUNCTION_2_5(&dword_21FE16000, v71, v72, "#ContactsUnsetRelationshipFlowStrategy: disambiguation task parse, returning .handle()");
          OUTLINED_FUNCTION_1_4();
        }

        static ActionForInput.handle()();
LABEL_54:
        OUTLINED_FUNCTION_101_0(v56);
        goto LABEL_41;
      }
      v58 = USOParse.isContactDisambiguation.getter();
      OUTLINED_FUNCTION_101_0(v59);
      if ((v58 & 1) != 0)
        goto LABEL_49;
      v73 = v84;
      USOParse.preferredUserDialogAct.getter(v84);
      v47 = (void *)type metadata accessor for Siri_Nlu_External_UserDialogAct();
      EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v73, 1, (uint64_t)v47);
      if ((_DWORD)EnumTagSinglePayload == 1)
      {
        OUTLINED_FUNCTION_152(EnumTagSinglePayload, (uint64_t)&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_61:
        v92 = 0u;
        v93 = 0u;
        goto LABEL_62;
      }
      v75 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
      (*(void (**)(uint64_t, void *))(*((_QWORD *)v47 - 1) + 8))(v73, v47);
      if (!v75)
        goto LABEL_61;
      static UsoTask_CodegenConverter.convert(task:)();
      OUTLINED_FUNCTION_2();
      if (!*((_QWORD *)&v93 + 1))
      {
LABEL_62:
        OUTLINED_FUNCTION_101_0(v56);
        outlined destroy of ConfirmationResponse?((uint64_t)&v92, (uint64_t)&demangling cache variable for type metadata for Any?);
        goto LABEL_43;
      }
      outlined init with take of Any(&v92, v94);
      outlined init with copy of Any((uint64_t)v94, (uint64_t)&v92);
      type metadata accessor for UsoTask_update_common_Person();
      if (!swift_dynamicCast())
      {
        if (one-time initialization token for siriContacts != -1)
          swift_once();
        v76 = OUTLINED_FUNCTION_26();
        OUTLINED_FUNCTION_10_1(v76, (uint64_t)static Logger.siriContacts);
        v77 = OUTLINED_FUNCTION_54_2();
        if (OUTLINED_FUNCTION_30_3(v77))
        {
          v78 = (_WORD *)OUTLINED_FUNCTION_2_1();
          OUTLINED_FUNCTION_54_0(v78);
          OUTLINED_FUNCTION_2_5(&dword_21FE16000, v79, v80, "#ContactsUnsetRelationshipFlowStrategy: Received a non-update-person task type, returning .ignore()");
          OUTLINED_FUNCTION_1_4();
        }

        static ActionForInput.ignore()();
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v94);
        goto LABEL_54;
      }
      swift_release();
      __swift_destroy_boxed_opaque_existential_0((uint64_t)v94);
      OUTLINED_FUNCTION_101_0(v56);
    }
    else
    {
      OUTLINED_FUNCTION_155((uint64_t)v47);
    }
LABEL_43:
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v63 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v63, (uint64_t)static Logger.siriContacts);
    v64 = OUTLINED_FUNCTION_54_2();
    if (OUTLINED_FUNCTION_30_3(v64))
    {
      v65 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_54_0(v65);
      OUTLINED_FUNCTION_2_5(&dword_21FE16000, v66, v67, "#ContactsUnsetRelationshipFlowStrategy: .handle() actionForInput");
      OUTLINED_FUNCTION_1_4();
    }
    goto LABEL_40;
  }
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v42 = OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_10_1(v42, (uint64_t)static Logger.siriContacts);
  v43 = OUTLINED_FUNCTION_54_2();
  if (OUTLINED_FUNCTION_30_3(v43))
  {
    v44 = (_WORD *)OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_54_0(v44);
    OUTLINED_FUNCTION_2_5(&dword_21FE16000, v45, v46, "#ContactsUnsetRelationshipFlowStrategy: .cancel() actionForInput");
    OUTLINED_FUNCTION_1_4();
  }

  static ActionForInput.cancel()();
LABEL_41:
  OUTLINED_FUNCTION_7();
}

void ContactsUnsetRelationshipFlowStrategy.unsetRelationshipActionForInput(_:resolveRecord:shouldExpectPerson:)(NSObject *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char *v4;
  void **v5;
  os_log_type_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  int v30;
  NSObject *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  os_log_type_t v41;
  _WORD *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  os_log_type_t v46;
  _WORD *v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  os_log_type_t v51;
  _WORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;

  v61 = a3;
  v60 = a2;
  v64 = a4;
  v62 = (char *)*v5;
  v8 = type metadata accessor for USOParse();
  v56 = *(_QWORD *)(v8 - 8);
  v57 = v8;
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_9_5();
  v58 = v10;
  v11 = type metadata accessor for Input();
  v66 = *(NSObject **)(v11 - 8);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_9_5();
  v65 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v14);
  v15 = OUTLINED_FUNCTION_104_0();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_5_2();
  v59 = v17;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v18);
  v63 = (char *)&v55 - v19;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v55 - v21;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v23 = OUTLINED_FUNCTION_26();
  v24 = __swift_project_value_buffer(v23, (uint64_t)static Logger.siriContacts);
  Logger.logObject.getter();
  v25 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_3(v25))
  {
    v26 = (uint8_t *)OUTLINED_FUNCTION_2_1();
    v55 = v11;
    *(_WORD *)v26 = 0;
    OUTLINED_FUNCTION_31(&dword_21FE16000, v24, v6, "#ContactsUnsetRelationshipFlowStrategy unsetRelationshipActionForInput", v26);
    OUTLINED_FUNCTION_0();
  }

  Input.parse.getter();
  Parse.confirmationResponse.getter();
  v27 = *(void (**)(char *, uint64_t))(v16 + 8);
  v27(v22, v15);
  v28 = OUTLINED_FUNCTION_161();
  v29 = OUTLINED_FUNCTION_120(v28);
  v30 = v29;
  OUTLINED_FUNCTION_166(v29, (uint64_t)&demangling cache variable for type metadata for ConfirmationResponse?);
  v32 = v65;
  v31 = v66;
  ((void (*)(uint64_t, NSObject *, uint64_t))v66[2].isa)(v65, a1, v11);
  if (v30 != 1)
  {
    OUTLINED_FUNCTION_78_1(v32, (uint64_t (*)(uint64_t, uint64_t))v31[1].isa);
LABEL_13:
    Logger.logObject.getter();
    v46 = OUTLINED_FUNCTION_54_2();
    if (OUTLINED_FUNCTION_30_3(v46))
    {
      v47 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_54_0(v47);
      v45 = "#ContactsUnsetRelationshipFlowStrategy unsetRelationshipActionForInput detected a confirmation or disambig r"
            "esponse, deferring to getActionForInput";
LABEL_15:
      OUTLINED_FUNCTION_2_5(&dword_21FE16000, v43, v44, v45);
      OUTLINED_FUNCTION_1_4();
    }
    goto LABEL_16;
  }
  v4 = v63;
  Input.parse.getter();
  v33 = Parse.isUSODisambiguationTask.getter();
  v27(v4, v15);
  OUTLINED_FUNCTION_78_1(v32, (uint64_t (*)(uint64_t, uint64_t))v31[1].isa);
  if ((v33 & 1) != 0)
    goto LABEL_13;
  v34 = v15;
  v4 = v62;
  v35 = static ContactsDisambiguationStrategy.extractCurrentContext(from:)();
  v36 = v35;
  v38 = v37;
  v40 = v39;
  if ((v61 & 1) != 0 && !*(_QWORD *)(v35 + 16) || (Optional<A>.isNilOrEmpty.getter() & 1) != 0)
  {
    OUTLINED_FUNCTION_96();
    OUTLINED_FUNCTION_167();
    Logger.logObject.getter();
    v41 = OUTLINED_FUNCTION_54_2();
    if (OUTLINED_FUNCTION_30_3(v41))
    {
      v42 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_54_0(v42);
      v45 = "#ContactsUnsetRelationshipFlowStrategy unsetRelationshipActionForInput deferring to getActionForInput";
      goto LABEL_15;
    }
LABEL_16:

LABEL_17:
    ContactsUnsetRelationshipFlowStrategy.getActionForInput(input:)(a1, v64);
    goto LABEL_18;
  }
  v66 = v24;
  v48 = v59;
  Input.parse.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v16 + 88))(v48, v34) != *MEMORY[0x24BE98E98])
  {
    OUTLINED_FUNCTION_96();
    OUTLINED_FUNCTION_167();
    v27((char *)v48, v34);
    goto LABEL_17;
  }
  OUTLINED_FUNCTION_78_1(v48, *(uint64_t (**)(uint64_t, uint64_t))(v16 + 96));
  v49 = v58;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 32))(v58, v48, v57);
  v50 = static ContactsDisambiguationStrategy.isRequestForDifferentContact(_:currentContactIds:currentRelation:)(v49, v36, v38, v40);
  OUTLINED_FUNCTION_96();
  OUTLINED_FUNCTION_167();
  if ((v50 & 1) == 0)
  {
    OUTLINED_FUNCTION_133();
    goto LABEL_17;
  }
  Logger.logObject.getter();
  v51 = OUTLINED_FUNCTION_54_2();
  if (OUTLINED_FUNCTION_30_3(v51))
  {
    v52 = (_WORD *)OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_54_0(v52);
    OUTLINED_FUNCTION_2_5(&dword_21FE16000, v53, v54, "#ContactsUnsetRelationshipFlowStrategy unsetRelationshipActionForInput encountered parse for different contact, ignoring");
    OUTLINED_FUNCTION_0();
  }

  static ActionForInput.ignore()();
  OUTLINED_FUNCTION_133();
LABEL_18:
  OUTLINED_FUNCTION_7();
}

uint64_t ContactsUnsetRelationshipFlowStrategy.__ivar_destroyer()
{
  return swift_release();
}

void ContactsUnsetRelationshipFlowStrategy.deinit()
{
  ContactsUnsupportedValueStrategy.deinit();
  swift_release();
  OUTLINED_FUNCTION_31_0();
}

uint64_t ContactsUnsetRelationshipFlowStrategy.__deallocating_deinit()
{
  ContactsUnsetRelationshipFlowStrategy.deinit();
  return swift_deallocClassInstance();
}

void type metadata accessor for ContactsUnsetRelationshipFlowStrategy()
{
  JUMPOUT(0x2207D8654);
}

void associated type witness table accessor for UnsupportedUnsetRelationshipFlowStrategyAsync.DisambiguationItemContainerType : DisambiguationItemContaining in ContactsUnsetRelationshipFlowStrategy<A, B>()
{
  JUMPOUT(0x2207D86A8);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return ContactsUnsetRelationshipFlowStrategy.parseRequestedRelationship(resolveRecord:)(a1, a2);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseRequestedRelationship(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>()
{
  uint64_t v0;

  OUTLINED_FUNCTION_29_5();
  OUTLINED_FUNCTION_3_0();
  return OUTLINED_FUNCTION_3_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.applyPersonToIntent(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.applyPersonToIntent(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return ContactsUnsetRelationshipFlowStrategy.applyPersonToIntent(person:requestedRelationship:resolveRecord:)(a1, a2, a3, a4);
}

void protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;

  v5 = (_OWORD *)(a4 + 296);
  *(_QWORD *)(v4 + 48) = swift_task_alloc();
  v6 = v5[1];
  *(_OWORD *)(v4 + 16) = *v5;
  *(_OWORD *)(v4 + 32) = v6;
  type metadata accessor for ContactsUnsetRelationshipFlowStrategy();
}

uint64_t sub_21FE3348C()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  v1[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeMeCardNotFoundResponse(requestedRelationship:resolveRecord:)();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeUnsupportedPlatformResponse(requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.applyPersonToIntent(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return ContactsUnsetRelationshipFlowStrategy.makeUnsupportedPlatformResponse(requestedRelationship:resolveRecord:)(a1);
}

void protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;

  v4 = (_OWORD *)(a3 + 296);
  *(_QWORD *)(v3 + 48) = swift_task_alloc();
  v5 = v4[1];
  *(_OWORD *)(v3 + 16) = *v4;
  *(_OWORD *)(v3 + 32) = v5;
  type metadata accessor for ContactsUnsetRelationshipFlowStrategy();
}

uint64_t sub_21FE3357C()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  v1[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:)();
}

void protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.actionForPromptForNameInput(_:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(NSObject *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  ContactsUnsetRelationshipFlowStrategy.actionForPromptForNameInput(_:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseUnsetRelationshipPersonFromResponse(input:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.applyPersonToIntent(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return ContactsUnsetRelationshipFlowStrategy.parseUnsetRelationshipPersonFromResponse(input:resolveRecord:)(a1, a2);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makePromptForPersonName(requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.applyPersonToIntent(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return ContactsUnsetRelationshipFlowStrategy.makePromptForPersonName(requestedRelationship:resolveRecord:)(a1, a2);
}

void protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForPersonNameOnEmptyParse(requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;

  v5 = (_OWORD *)(a4 + 296);
  *(_QWORD *)(v4 + 48) = swift_task_alloc();
  v6 = v5[1];
  *(_OWORD *)(v4 + 16) = *v5;
  *(_OWORD *)(v4 + 32) = v6;
  type metadata accessor for ContactsUnsetRelationshipFlowStrategy();
}

uint64_t sub_21FE336F4()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  v1[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForPersonNameOnEmptyParse(requestedRelationship:resolveRecord:)();
}

void protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForPersonNameOnLowConfidence(requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;

  v5 = (_OWORD *)(a4 + 296);
  *(_QWORD *)(v4 + 48) = swift_task_alloc();
  v6 = v5[1];
  *(_OWORD *)(v4 + 16) = *v5;
  *(_OWORD *)(v4 + 32) = v6;
  type metadata accessor for ContactsUnsetRelationshipFlowStrategy();
}

uint64_t sub_21FE33798()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  v1[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForPersonNameOnLowConfidence(requestedRelationship:resolveRecord:)();
}

void protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeContactNotFoundResponse(requestedPerson:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;

  v5 = (_OWORD *)(a4 + 296);
  *(_QWORD *)(v4 + 48) = swift_task_alloc();
  v6 = v5[1];
  *(_OWORD *)(v4 + 16) = *v5;
  *(_OWORD *)(v4 + 32) = v6;
  type metadata accessor for ContactsUnsetRelationshipFlowStrategy();
}

uint64_t sub_21FE3383C()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  v1[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeContactNotFoundResponse(requestedPerson:resolveRecord:)();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.paginationStyle(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>()
{
  return ContactsUnsetRelationshipFlowStrategy.paginationStyle(resolveRecord:)();
}

void protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.actionForPromptForContactDisambiguationInput(_:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(NSObject *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  ContactsUnsetRelationshipFlowStrategy.actionForPromptForContactDisambiguationInput(_:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeDisambiguationItemContainer(contacts:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeDisambiguationItemContainer(contacts:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return ContactsUnsetRelationshipFlowStrategy.makeDisambiguationItemContainer(contacts:resolveRecord:)(a2);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeDisambiguationItemContainer(contacts:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  OUTLINED_FUNCTION_85_0();
  OUTLINED_FUNCTION_87(v5);
  swift_task_dealloc();
  if (!v1)
    **(_QWORD **)(v2 + 16) = a1;
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parseContactDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.applyPersonToIntent(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return ContactsUnsetRelationshipFlowStrategy.parseContactDisambiguationResult(input:paginatedItems:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makePromptForContactDisambiguation(paginatedItems:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.applyPersonToIntent(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return ContactsUnsetRelationshipFlowStrategy.makePromptForContactDisambiguation(paginatedItems:resolveRecord:)(a1, a2, a3);
}

void protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForContactDisambiguationOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;

  v5 = (_OWORD *)(a4 + 296);
  *(_QWORD *)(v4 + 48) = swift_task_alloc();
  v6 = v5[1];
  *(_OWORD *)(v4 + 16) = *v5;
  *(_OWORD *)(v4 + 32) = v6;
  type metadata accessor for ContactsUnsetRelationshipFlowStrategy();
}

uint64_t sub_21FE33A8C()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  v1[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForContactDisambiguationOnEmptyParse(paginatedItems:resolveRecord:)();
}

void protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForContactDisambiguationOnLowConfidence(paginatedItems:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;

  v5 = (_OWORD *)(a4 + 296);
  *(_QWORD *)(v4 + 48) = swift_task_alloc();
  v6 = v5[1];
  *(_OWORD *)(v4 + 16) = *v5;
  *(_OWORD *)(v4 + 32) = v6;
  type metadata accessor for ContactsUnsetRelationshipFlowStrategy();
}

uint64_t sub_21FE33B30()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  v1[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptForContactDisambiguationOnLowConfidence(paginatedItems:resolveRecord:)();
}

void protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.actionForPromptToSaveRelationship(input:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(NSObject *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  ContactsUnsetRelationshipFlowStrategy.actionForPromptToSaveRelationship(input:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.parsePromptToSaveRelationshipResponse(input:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.applyPersonToIntent(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return ContactsUnsetRelationshipFlowStrategy.parsePromptToSaveRelationshipResponse(input:resolveRecord:)(a1, a2);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.applyPersonToIntent(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return ContactsUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:)(a1, a2, a3);
}

void protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptToSaveRelationshipOnEmptyParse(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;

  v6 = (_OWORD *)(a5 + 296);
  *(_QWORD *)(v5 + 48) = swift_task_alloc();
  v7 = v6[1];
  *(_OWORD *)(v5 + 16) = *v6;
  *(_OWORD *)(v5 + 32) = v7;
  type metadata accessor for ContactsUnsetRelationshipFlowStrategy();
}

uint64_t sub_21FE33CBC()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  v1[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptToSaveRelationshipOnEmptyParse(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptToSaveRelationshipOnEmptyParse(person:requestedRelationship:resolveRecord:)();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptToSaveRelationshipOnEmptyParse(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>()
{
  uint64_t v0;

  OUTLINED_FUNCTION_29_5();
  OUTLINED_FUNCTION_3_0();
  return OUTLINED_FUNCTION_3_2(*(uint64_t (**)(void))(v0 + 8));
}

void protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptToSaveRelationshipOnLowConfidence(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;

  v6 = (_OWORD *)(a5 + 296);
  *(_QWORD *)(v5 + 48) = swift_task_alloc();
  v7 = v6[1];
  *(_OWORD *)(v5 + 16) = *v6;
  *(_OWORD *)(v5 + 32) = v7;
  type metadata accessor for ContactsUnsetRelationshipFlowStrategy();
}

uint64_t sub_21FE33D94()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  v1[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeIntentCancelledResponse(resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return UnsupportedUnsetRelationshipFlowStrategyAsync.makeRepromptToSaveRelationshipOnLowConfidence(person:requestedRelationship:resolveRecord:)();
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.applyPersonToIntent(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return ContactsUnsetRelationshipFlowStrategy.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeSaveRelationshipRejectedResponse(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.applyPersonToIntent(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return ContactsUnsetRelationshipFlowStrategy.makeSaveRelationshipRejectedResponse(person:requestedRelationship:resolveRecord:)(a1);
}

uint64_t protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.makeErrorResponse(error:app:intent:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for UnsupportedUnsetRelationshipFlowStrategyAsync.applyPersonToIntent(person:requestedRelationship:resolveRecord:) in conformance ContactsUnsetRelationshipFlowStrategy<A, B>;
  return ContactsUnsetRelationshipFlowStrategy.makeErrorResponse(error:app:intent:)(a1);
}

uint64_t static UnsetRelationshipPerson.from(userDialogAct:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[2];

  if (Siri_Nlu_External_UserDialogAct.usoTask.getter())
  {
    static UsoTask_CodegenConverter.convert(task:)();
    swift_release();
    if (*((_QWORD *)&v21 + 1))
    {
      outlined init with take of Any(&v20, v22);
      outlined init with copy of Any((uint64_t)v22, (uint64_t)&v20);
      type metadata accessor for UsoTask_setIdentity_common_Person();
      if (swift_dynamicCast())
      {
        swift_retain();
        dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
        v2 = swift_release();
        if (v19)
        {
          MEMORY[0x2207D6AD0](v2);
          v4 = v3;
          swift_release();
          if (v4)
          {
LABEL_19:
            UnsetRelationshipPerson.init(firstName:lastName:middleName:fullName:nickname:)();
            swift_release();
            __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
            v16 = type metadata accessor for UnsetRelationshipPerson();
            __swift_storeEnumTagSinglePayload(a1, 0, 1, v16);
            return __swift_destroy_boxed_opaque_existential_0((uint64_t)&v20);
          }
        }
        swift_release();
        goto LABEL_21;
      }
      type metadata accessor for UsoTask_update_common_Person();
      if (!swift_dynamicCast())
      {
LABEL_21:
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
LABEL_22:
        __swift_destroy_boxed_opaque_existential_0((uint64_t)&v20);
        goto LABEL_23;
      }
      v5 = swift_retain();
      MEMORY[0x2207D6D64](&v19, v5);
      v6 = swift_release();
      if (!v19 || (MEMORY[0x2207D6AD0](v6), v8 = v7, swift_release(), !v8))
      {
        v9 = dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
        if (v19)
        {
          MEMORY[0x2207D6AD0](v9);
          v11 = v10;
          swift_bridgeObjectRelease();
          swift_release();
          if (v11)
            goto LABEL_14;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v22);
        swift_release();
        goto LABEL_22;
      }
LABEL_14:
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v12 = type metadata accessor for Logger();
      __swift_project_value_buffer(v12, (uint64_t)static Logger.siriContacts);
      v13 = Logger.logObject.getter();
      v14 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v15 = 0;
        _os_log_impl(&dword_21FE16000, v13, v14, "#ContactsUnsetRelationshipFlowStrategy returning UnsetRelationshipPerson", v15, 2u);
        MEMORY[0x2207D8768](v15, -1, -1);
      }

      goto LABEL_19;
    }
  }
  else
  {
    v20 = 0u;
    v21 = 0u;
  }
  outlined destroy of ConfirmationResponse?((uint64_t)&v20, (uint64_t)&demangling cache variable for type metadata for Any?);
LABEL_23:
  v18 = type metadata accessor for UnsetRelationshipPerson();
  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v18);
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined init with take of SpeakableString?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in ContactsUnsetRelationshipFlowStrategy.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:)()
{
  return closure #1 in ContactsUnsetRelationshipFlowStrategy.makeSaveRelationshipCompletedResponse(person:requestedRelationship:resolveRecord:)();
}

void outlined init with copy of ContactServiceProtocol(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v2 - 8))(a2, a1);
  OUTLINED_FUNCTION_31_0();
}

uint64_t outlined destroy of ConfirmationViewBuilder(uint64_t a1)
{
  destroy for ConfirmationViewBuilder(a1);
  return a1;
}

uint64_t partial apply for closure #1 in ContactsUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ContactsUnsetRelationshipFlowStrategy.makePromptToSaveRelationship(person:requestedRelationship:resolveRecord:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t outlined bridged method (pb) of @objc SAPerson.internalGUID.getter(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_internalGUID);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t type metadata accessor for CNContact(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void outlined destroy of Signpost.OpenSignpost(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  v2 = a2(0);
  OUTLINED_FUNCTION_94_0(v2);
  OUTLINED_FUNCTION_31_0();
}

void outlined destroy of ConfirmationResponse?(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)OUTLINED_FUNCTION_144(a1, a2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(v2);
  OUTLINED_FUNCTION_94_0(v3);
  OUTLINED_FUNCTION_31_0();
}

uint64_t OUTLINED_FUNCTION_3_3@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 80) = a1;
  *(_QWORD *)(v2 - 88) = *(_QWORD *)(v1 + 264);
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_6_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 264);
  *(_QWORD *)(v1 - 88) = *(_QWORD *)(v0 + 288);
  *(_QWORD *)(v1 - 80) = v2;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_9_7(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_12_6@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 80) = a1;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_13_8()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_15_5(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 2u);
}

uint64_t OUTLINED_FUNCTION_17_4()
{
  return SpeakableString.init(print:speak:)();
}

id OUTLINED_FUNCTION_18_4(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_20_8(uint64_t (*a1)(void))
{
  return a1();
}

id OUTLINED_FUNCTION_22_4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  return objc_msgSend(v1, (SEL)(v0 + 1864), v2, v3);
}

uint64_t OUTLINED_FUNCTION_25_8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_26_5()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 64) = v0;
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_29_5()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_31_5(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_33_3(uint64_t a1, unint64_t *a2)
{
  return type metadata accessor for CNContact(0, a2);
}

uint64_t OUTLINED_FUNCTION_39_4()
{
  return ParameterResolutionRecord.intent.getter();
}

uint64_t OUTLINED_FUNCTION_42_2()
{
  return SAClientBoundCommand.data.getter();
}

uint64_t OUTLINED_FUNCTION_44_3()
{
  return CATWrapperSimple.__allocating_init(options:globals:)();
}

void OUTLINED_FUNCTION_45_3()
{
  AppUtil.buildPunchoutFor(contactIdentifier:)();
}

id OUTLINED_FUNCTION_47_3(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t OUTLINED_FUNCTION_49_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t OUTLINED_FUNCTION_50_3(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_51_2(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_65_2()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[10];
  v2 = v0[11];
  __swift_project_boxed_opaque_existential_1(v0 + 7, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t OUTLINED_FUNCTION_66_2()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[9] + 8))(v0[10], v0[8]);
}

uint64_t OUTLINED_FUNCTION_67_2()
{
  return dispatch thunk of DeviceState.siriLocale.getter();
}

uint64_t OUTLINED_FUNCTION_68_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 8))(v3, v2, v0, v1);
}

uint64_t OUTLINED_FUNCTION_69_2()
{
  return static CATOption.defaultMode.getter();
}

uint64_t OUTLINED_FUNCTION_70_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_71_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_72_1(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_73_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

id OUTLINED_FUNCTION_74_1()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, (SEL)(v1 + 3235));
}

uint64_t OUTLINED_FUNCTION_75_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 8))(v3, v2, v0, v1);
}

void OUTLINED_FUNCTION_76_1()
{
  void *v0;

}

void OUTLINED_FUNCTION_77_1()
{
  JUMPOUT(0x2207D7CB8);
}

uint64_t OUTLINED_FUNCTION_78_1@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_82_0(__n128 *a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21)
{
  uint64_t v21;

  a1[1] = a2;
  a1[2].n128_u64[0] = a21;
  *(_QWORD *)(v21 - 80) = a1;
  return specialized Array._endMutation()();
}

void OUTLINED_FUNCTION_85_0()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_87_0()
{
  return type metadata accessor for TemplatingResult();
}

id OUTLINED_FUNCTION_90_0()
{
  void *v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_91_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v0, v2, v3);
}

uint64_t OUTLINED_FUNCTION_92_0()
{
  return Input.parse.getter();
}

uint64_t OUTLINED_FUNCTION_94_0(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

void OUTLINED_FUNCTION_95_0(NSObject *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X8>)
{
  ContactsUnsetRelationshipFlowStrategy.actionForPromptForNameInput(_:resolveRecord:)(a1, a2, a3, 1, a4);
}

_QWORD *OUTLINED_FUNCTION_96_0()
{
  _QWORD *v0;
  uint64_t v1;

  return __swift_project_boxed_opaque_existential_1(v0, v1);
}

uint64_t OUTLINED_FUNCTION_97_0(_QWORD *a1)
{
  uint64_t v1;

  __swift_project_boxed_opaque_existential_1(a1, v1);
  return DeviceState.isVox.getter();
}

uint64_t OUTLINED_FUNCTION_99_0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_101_0(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

id OUTLINED_FUNCTION_102()
{
  void *v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_103_0()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_104_0()
{
  return type metadata accessor for Parse();
}

id OUTLINED_FUNCTION_106_0(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

void OUTLINED_FUNCTION_107_0(uint64_t a1)
{
  uint64_t v1;

  outlined destroy of ConfirmationResponse?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_108_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_109_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t OUTLINED_FUNCTION_110_0()
{
  return OutputGenerationManifest.init(dialogPhase:_:)();
}

uint64_t OUTLINED_FUNCTION_111_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v2, a2, v3);
}

uint64_t OUTLINED_FUNCTION_112_0()
{
  return ModifyContactAttributeSnippetModel.init(attributeToModify:modificationType:contact:flowState:labelCATs:meCardPunchout:targetPunchout:)();
}

void OUTLINED_FUNCTION_115(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of Signpost.OpenSignpost(v2, a2);
}

uint64_t OUTLINED_FUNCTION_117()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_119(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a16 + 16))(a18, a19, a17);
}

uint64_t OUTLINED_FUNCTION_120(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

_QWORD *OUTLINED_FUNCTION_123(_QWORD *a1)
{
  uint64_t v1;

  return __swift_project_boxed_opaque_existential_1(a1, v1);
}

void OUTLINED_FUNCTION_124(uint64_t a1)
{
  uint64_t v1;

  outlined destroy of ConfirmationResponse?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_125()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_0(v0);
}

void OUTLINED_FUNCTION_126(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  outlined destroy of ConfirmationResponse?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_127()
{
  return dispatch thunk of DialogPerson.fullName.getter();
}

uint64_t OUTLINED_FUNCTION_130()
{
  return type metadata accessor for DialogPerson();
}

uint64_t OUTLINED_FUNCTION_132()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_133()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_135(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 48);
}

uint64_t OUTLINED_FUNCTION_138()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_0(v0);
}

uint64_t OUTLINED_FUNCTION_139()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[10] + 8))(v0[11], v0[9]);
}

uint64_t *OUTLINED_FUNCTION_141(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19)
{
  return __swift_allocate_boxed_opaque_existential_1(a19);
}

uint64_t OUTLINED_FUNCTION_143()
{
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_144(uint64_t a1, uint64_t a2)
{
  return a2;
}

void OUTLINED_FUNCTION_145(uint64_t a1)
{
  uint64_t v1;

  outlined destroy of ConfirmationResponse?(a1, v1);
}

void OUTLINED_FUNCTION_151()
{
  uint64_t v0;
  uint64_t v1;

  outlined init with copy of ContactServiceProtocol(v1, v0);
}

void OUTLINED_FUNCTION_152(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  outlined destroy of ConfirmationResponse?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_153(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

void OUTLINED_FUNCTION_154(uint64_t a1)
{
  uint64_t v1;

  outlined destroy of ConfirmationResponse?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_155(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

void OUTLINED_FUNCTION_156()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_158@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

void OUTLINED_FUNCTION_160()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_161()
{
  return type metadata accessor for ConfirmationResponse();
}

uint64_t OUTLINED_FUNCTION_162()
{
  return type metadata accessor for AceOutput();
}

uint64_t OUTLINED_FUNCTION_163()
{
  return type metadata accessor for NLContextUpdate();
}

void OUTLINED_FUNCTION_164()
{
  void *v0;

}

void OUTLINED_FUNCTION_166(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  outlined destroy of ConfirmationResponse?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_167()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_168()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with take of SpeakableString?(v1, v0);
}

void CNLabeledValue<>.init(relationLabel:contactName:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  Class isa;
  Swift::String v19;

  v19._countAndFlagsBits = a3;
  v19._object = a4;
  v6 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_55_0();
  v9 = v8 - v7;
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v10 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_6_9();
  v11 = v9 + *(int *)(v6 + 20);
  *(_QWORD *)v11 = "RelationshipLabelValueForKey";
  *(_QWORD *)(v11 + 8) = 28;
  *(_BYTE *)(v11 + 16) = 2;
  if (one-time initialization token for NLSemanticValueToCNRelationLabel != -1)
    swift_once();
  swift_beginAccess();
  v12 = static Dictionary<>.NLSemanticValueToCNRelationLabel;
  OUTLINED_FUNCTION_13();
  v13 = specialized Dictionary.subscript.getter(a1, a2, v12);
  v15 = v14;
  swift_endAccess();
  OUTLINED_FUNCTION_55_1();
  if (v15)
  {
    a1 = v13;
  }
  else
  {
    OUTLINED_FUNCTION_13();
    v15 = a2;
  }
  v16 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_6_9();
  outlined destroy of Signpost.OpenSignpost(v9);
  OUTLINED_FUNCTION_55_1();
  v17 = (void *)MEMORY[0x2207D7CB8](a1, v15);
  swift_bridgeObjectRelease();
  type metadata accessor for CNContactRelation();
  isa = CNContactRelation.__allocating_init(name:)(v19).super.isa;
  objc_msgSend(v16, sel_initWithLabel_value_, v17, isa);

  OUTLINED_FUNCTION_7();
}

void CNLabeledValue<>.init(address:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;

  v2 = type metadata accessor for UUID();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_55_0();
  v6 = v5 - v4;
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDBAD90]), sel_init);
  v8 = OUTLINED_FUNCTION_2_6((uint64_t)v7, (SEL *)&selRef_street);
  if (v9)
    OUTLINED_FUNCTION_3_4();
  v10 = OUTLINED_FUNCTION_2_6(v8, (SEL *)&selRef_subLocality);
  if (v11)
    OUTLINED_FUNCTION_3_4();
  v12 = OUTLINED_FUNCTION_2_6(v10, (SEL *)&selRef_city);
  if (v13)
    OUTLINED_FUNCTION_3_4();
  v14 = OUTLINED_FUNCTION_2_6(v12, (SEL *)&selRef_subAdministrativeArea);
  if (v15)
    OUTLINED_FUNCTION_3_4();
  v16 = OUTLINED_FUNCTION_2_6(v14, (SEL *)&selRef_state);
  if (v17)
    OUTLINED_FUNCTION_3_4();
  v18 = OUTLINED_FUNCTION_2_6(v16, (SEL *)&selRef_postalCode);
  if (v19)
    OUTLINED_FUNCTION_3_4();
  v20 = OUTLINED_FUNCTION_2_6(v18, (SEL *)&selRef_country);
  if (v21)
    OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_2_6(v20, (SEL *)&selRef_isoCountryCode);
  if (v22)
    OUTLINED_FUNCTION_3_4();
  v23 = a1;
  outlined bridged method (ob) of @objc INObject.identifier.getter(v23);
  if (v25)
  {
    v26 = v24;
    v27 = v25;
  }
  else
  {
    UUID.init()();
    v26 = UUID.uuidString.getter();
    v27 = v28;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
  }
  v29 = (void *)MEMORY[0x2207D7CB8](v26, v27);
  v30 = swift_bridgeObjectRelease();
  v31 = OUTLINED_FUNCTION_2_6(v30, (SEL *)&selRef_handleLabel);
  if (!v32)
    v31 = static String.EMPTY.getter();
  v33 = v31;
  v34 = v32;
  v35 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v36 = (void *)MEMORY[0x2207D7CB8](v33, v34);
  swift_bridgeObjectRelease();
  v37 = v7;
  objc_msgSend(v35, sel_initWithIdentifier_label_value_, v29, v36, v37);

  OUTLINED_FUNCTION_7();
}

uint64_t CNLabeledValue<>.buildMapsURL(contact:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v48[2];

  v3 = v2;
  v6 = type metadata accessor for CharacterSet();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_55_0();
  v10 = v9 - v8;
  v11 = (void *)objc_opt_self();
  v12 = objc_msgSend(v3, sel_value);
  v13 = objc_msgSend(v11, sel_singleLineStringFromPostalAddress_addCountryName_, v12, 0);

  if (!v13)
    goto LABEL_7;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v16 = v15;

  v48[0] = v14;
  v48[1] = v16;
  static CharacterSet.urlPathAllowed.getter();
  lazy protocol witness table accessor for type String and conformance String();
  v17 = MEMORY[0x24BEE0D00];
  v18 = StringProtocol.addingPercentEncoding(withAllowedCharacters:)();
  v20 = v19;
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  swift_bridgeObjectRelease();
  if (v20)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_21FED8DB0;
    *(_QWORD *)(v21 + 56) = v17;
    v22 = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v21 + 64) = v22;
    *(_QWORD *)(v21 + 32) = v18;
    *(_QWORD *)(v21 + 40) = v20;
    v23 = objc_msgSend(a1, sel_iOSLegacyIdentifier);
    v24 = MEMORY[0x24BEE3F88];
    v25 = MEMORY[0x24BEE3FF0];
    *(_QWORD *)(v21 + 96) = MEMORY[0x24BEE3F88];
    *(_QWORD *)(v21 + 104) = v25;
    *(_DWORD *)(v21 + 72) = v23;
    v26 = objc_msgSend(v3, sel_iOSLegacyIdentifier);
    *(_QWORD *)(v21 + 136) = v24;
    *(_QWORD *)(v21 + 144) = v25;
    *(_DWORD *)(v21 + 112) = v26;
    v27 = objc_msgSend(a1, sel_identifier);
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v30 = v29;

    *(_QWORD *)(v21 + 176) = v17;
    *(_QWORD *)(v21 + 184) = v22;
    *(_QWORD *)(v21 + 152) = v28;
    *(_QWORD *)(v21 + 160) = v30;
    v31 = objc_msgSend(v3, sel_identifier);
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v34 = v33;

    *(_QWORD *)(v21 + 216) = v17;
    *(_QWORD *)(v21 + 224) = v22;
    *(_QWORD *)(v21 + 192) = v32;
    *(_QWORD *)(v21 + 200) = v34;
    v35 = String.init(format:_:)();
    v37 = v36;
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.siriContacts);
    swift_bridgeObjectRetain_n();
    v39 = Logger.logObject.getter();
    v40 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)OUTLINED_FUNCTION_1();
      v48[0] = OUTLINED_FUNCTION_1();
      *(_DWORD *)v41 = 136315138;
      OUTLINED_FUNCTION_13();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_21FE16000, v39, v40, "#buildMapsURL Building Maps punchout URL from string: %s", v41, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_0();
    }

    swift_bridgeObjectRelease_n();
    URL.init(string:)();
    return OUTLINED_FUNCTION_55_1();
  }
  else
  {
LABEL_7:
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)static Logger.siriContacts);
    v43 = Logger.logObject.getter();
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)OUTLINED_FUNCTION_1();
      *(_WORD *)v45 = 0;
      _os_log_impl(&dword_21FE16000, v43, v44, "#buildMapsURL Failed to format CNPostalAddress into percent encoded string, returning nil", v45, 2u);
      OUTLINED_FUNCTION_0();
    }

    v46 = type metadata accessor for URL();
    return __swift_storeEnumTagSinglePayload(a2, 1, 1, v46);
  }
}

CNContactRelation __swiftcall CNContactRelation.__allocating_init(name:)(Swift::String name)
{
  void *object;
  uint64_t countAndFlagsBits;
  id v3;
  void *v4;
  id v5;

  object = name._object;
  countAndFlagsBits = name._countAndFlagsBits;
  v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v4 = (void *)MEMORY[0x2207D7CB8](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v3, sel_initWithName_, v4);

  return (CNContactRelation)v5;
}

uint64_t outlined bridged method (pb) of @objc PostalAddress.street.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_street);
}

uint64_t outlined bridged method (pb) of @objc PostalAddress.city.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_city);
}

uint64_t outlined bridged method (pb) of @objc PostalAddress.subAdministrativeArea.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_subAdministrativeArea);
}

uint64_t outlined bridged method (pb) of @objc PostalAddress.state.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_state);
}

uint64_t outlined bridged method (pb) of @objc PostalAddress.postalCode.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_postalCode);
}

uint64_t outlined bridged method (pb) of @objc PostalAddress.country.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_country);
}

uint64_t outlined bridged method (pb) of @objc PostalAddress.isoCountryCode.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_isoCountryCode);
}

uint64_t outlined bridged method (pb) of @objc PostalAddress.handleLabel.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_handleLabel);
}

uint64_t outlined bridged method (pb) of @objc PostalAddress.street.getter(void *a1, SEL *a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v2 = objc_msgSend(a1, *a2);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

unint64_t type metadata accessor for CNContactRelation()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CNContactRelation;
  if (!lazy cache variable for type metadata for CNContactRelation)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CNContactRelation);
  }
  return result;
}

id OUTLINED_FUNCTION_0_6(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  return objc_msgSend(v1, (SEL)(v3 + 1864), v2, a1);
}

uint64_t OUTLINED_FUNCTION_1_5()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_2_6(uint64_t a1, SEL *a2)
{
  void *v2;

  return outlined bridged method (pb) of @objc PostalAddress.street.getter(v2, a2);
}

void OUTLINED_FUNCTION_3_4()
{
  JUMPOUT(0x2207D7CB8);
}

uint64_t OUTLINED_FUNCTION_6_9()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t type metadata accessor for ContactsLabelCATs()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ContactsLabelCATs;
  if (!type metadata singleton initialization cache for ContactsLabelCATs)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for ContactsLabelCATs()
{
  return swift_initClassMetadata2();
}

uint64_t ContactsLabelCATs.address()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v3 = (_QWORD *)OUTLINED_FUNCTION_7_4();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = ContactsLabelCATs.address();
  return OUTLINED_FUNCTION_32_4(a1, 0xD000000000000015, 0x800000021FEE0D00, MEMORY[0x24BEE4AF8], v5);
}

uint64_t ContactsLabelCATs.address()()
{
  return OUTLINED_FUNCTION_0_7();
}

uint64_t ContactsLabelCATs.age()()
{
  return OUTLINED_FUNCTION_0_7();
}

uint64_t ContactsLabelCATs.birthday()()
{
  return OUTLINED_FUNCTION_0_7();
}

uint64_t ContactsLabelCATs.call()()
{
  return OUTLINED_FUNCTION_0_7();
}

uint64_t ContactsLabelCATs.cancel()()
{
  return OUTLINED_FUNCTION_0_7();
}

uint64_t ContactsLabelCATs.email()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  v1 = (_QWORD *)OUTLINED_FUNCTION_7_4();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = ContactsLabelCATs.email();
  v2 = OUTLINED_FUNCTION_3_5();
  return OUTLINED_FUNCTION_32_4(v2, v3, v4, v5, v6);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  return OUTLINED_FUNCTION_0_7();
}

uint64_t ContactsLabelCATs.message()()
{
  return OUTLINED_FUNCTION_0_7();
}

uint64_t ContactsLabelCATs.nickName()()
{
  return OUTLINED_FUNCTION_0_7();
}

uint64_t ContactsLabelCATs.openContacts()()
{
  return OUTLINED_FUNCTION_0_7();
}

uint64_t ContactsLabelCATs.phone()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  v1 = (_QWORD *)OUTLINED_FUNCTION_7_4();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = ContactsLabelCATs.address();
  v2 = OUTLINED_FUNCTION_3_5();
  return OUTLINED_FUNCTION_32_4(v2, v3, v4, v5, v6);
}

{
  return OUTLINED_FUNCTION_0_7();
}

uint64_t ContactsLabelCATs.relationship(relationship:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *boxed_opaque_existential_1;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_55_0();
  v5 = v4 - v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_21FED8CB0;
  v7 = (uint64_t *)(v6 + 48);
  strcpy((char *)(v6 + 32), "relationship");
  *(_BYTE *)(v6 + 45) = 0;
  *(_WORD *)(v6 + 46) = -5120;
  outlined init with copy of URL?(a1, v5, &demangling cache variable for type metadata for SpeakableString?);
  v8 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v5, 1, v8) == 1)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v5, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)v7 = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
  }
  else
  {
    *(_QWORD *)(v6 + 72) = v8;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v7);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(boxed_opaque_existential_1, v5, v8);
  }
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  return swift_bridgeObjectRelease();
}

uint64_t ContactsLabelCATs.relationshipRemoved()()
{
  return OUTLINED_FUNCTION_0_7();
}

uint64_t ContactsLabelCATs.save()()
{
  return OUTLINED_FUNCTION_0_7();
}

uint64_t ContactsLabelCATs.siriSettings()()
{
  return OUTLINED_FUNCTION_0_7();
}

uint64_t ContactsLabelCATs.yes()()
{
  return OUTLINED_FUNCTION_0_7();
}

uint64_t ContactsLabelCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  return ContactsLabelCATs.init(templateDir:options:globals:)(a1, a2);
}

uint64_t ContactsLabelCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = type metadata accessor for CATOption();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_55_0();
  v8 = v7 - v6;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_55_0();
  outlined init with copy of URL?(a1, v11 - v10, &demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  v12 = CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  outlined destroy of UsoEntity_common_Person.DefinedValues?(a1, &demangling cache variable for type metadata for URL?);
  return v12;
}

uint64_t ObjC metadata update function for ContactsLabelCATs()
{
  return type metadata accessor for ContactsLabelCATs();
}

uint64_t OUTLINED_FUNCTION_0_7()
{
  return dispatch thunk of CATWrapper.execute(catId:parameters:)();
}

uint64_t OUTLINED_FUNCTION_3_5()
{
  uint64_t v0;

  return v0;
}

uint64_t MissingMeCardViewBuilder.makeViewsForWatch()()
{
  return MissingMeCardViewBuilder.makeViewsForWatch()("#MissingMeCardViewBuilder Constructing no error punchout for Watch.");
}

uint64_t MissingMeCardViewBuilder.makeViewsForMac()()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v9;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v4 = OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_10_1(v4, (uint64_t)static Logger.siriContacts);
  v5 = OUTLINED_FUNCTION_8();
  if (os_log_type_enabled(v0, v5))
  {
    v6 = (uint8_t *)OUTLINED_FUNCTION_2_1();
    *(_WORD *)v6 = 0;
    OUTLINED_FUNCTION_31(&dword_21FE16000, v0, v5, "#MissingMeCardViewBuilder Constructing punchout button for macOS.", v6);
    OUTLINED_FUNCTION_0();
  }

  ContactsLabelCATs.openContacts()();
  v7 = specialized IdiomSensitiveViewBuilder.makeContactsAppLaunchButton(appUtil:result:)(&v0[6], v3);
  outlined destroy of Result<TemplatingResult, Error>((uint64_t)v3);
  return v7;
}

uint64_t MissingMeCardViewBuilder.makeViewsForCarPlay()()
{
  return MissingMeCardViewBuilder.makeViewsForWatch()("#MissingMeCardViewBuilder Constructing no error punchout for CarPlay.");
}

uint64_t MissingMeCardViewBuilder.makeViewsForCarDND()()
{
  return MissingMeCardViewBuilder.makeViewsForWatch()("#MissingMeCardViewBuilder Constructing no error punchout for CarDND.");
}

uint64_t MissingMeCardViewBuilder.makeViewsForWatch()(const char *a1)
{
  NSObject *v1;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v3 = OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_10_1(v3, (uint64_t)static Logger.siriContacts);
  v4 = OUTLINED_FUNCTION_8();
  if (os_log_type_enabled(v1, v4))
  {
    v5 = (uint8_t *)OUTLINED_FUNCTION_2_1();
    *(_WORD *)v5 = 0;
    OUTLINED_FUNCTION_31(&dword_21FE16000, v1, v4, a1, v5);
    OUTLINED_FUNCTION_0();
  }

  return MEMORY[0x24BEE4AF8];
}

uint64_t MissingMeCardViewBuilder.makeViewsForIOS()()
{
  return MissingMeCardViewBuilder.makeViewsForIOS()("#MissingMeCardViewBuilder Constructing punchout button for iOS.");
}

uint64_t MissingMeCardViewBuilder.makeViewsForXROS()()
{
  return MissingMeCardViewBuilder.makeViewsForIOS()("#MissingMeCardViewBuilder Constructing punchout button for XR.");
}

uint64_t MissingMeCardViewBuilder.makeViewsForIOS()(const char *a1)
{
  NSObject *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v6 = OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_10_1(v6, (uint64_t)static Logger.siriContacts);
  v7 = OUTLINED_FUNCTION_8();
  if (os_log_type_enabled(v1, v7))
  {
    v8 = (uint8_t *)OUTLINED_FUNCTION_2_1();
    *(_WORD *)v8 = 0;
    OUTLINED_FUNCTION_31(&dword_21FE16000, v1, v7, a1, v8);
    OUTLINED_FUNCTION_0();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v9 = OUTLINED_FUNCTION_55();
  v17 = xmmword_21FED8AB0;
  *(_OWORD *)(v9 + 16) = xmmword_21FED8AB0;
  v10 = OUTLINED_FUNCTION_55();
  *(_OWORD *)(v10 + 16) = v17;
  if (one-time initialization token for iosSiriSettings != -1)
    swift_once();
  static AppUtil.buildPunchoutFor(string:)();
  *(_QWORD *)(v10 + 32) = v11;
  v18 = v10;
  specialized Array._endMutation()();
  v12 = v18;
  ContactsLabelCATs.siriSettings()();
  Result<>.firstPrint.getter();
  v14 = v13;
  outlined destroy of Result<TemplatingResult, Error>((uint64_t)v5);
  if (!v14)
    static String.EMPTY.getter();
  type metadata accessor for SAUIButton();
  SAUIButton.init(commands:text:)(v12);
  *(_QWORD *)(v9 + 32) = v15;
  v18 = v9;
  specialized Array._endMutation()();
  return v18;
}

uint64_t outlined destroy of Result<TemplatingResult, Error>(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t type metadata accessor for SAUIButton()
{
  unint64_t result;

  result = lazy cache variable for type metadata for SAUIButton;
  if (!lazy cache variable for type metadata for SAUIButton)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SAUIButton);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MissingMeCardViewBuilder(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for MissingMeCardViewBuilder(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_0(a1);
  swift_release();
  return __swift_destroy_boxed_opaque_existential_0(a1 + 48);
}

uint64_t initializeWithCopy for MissingMeCardViewBuilder(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = a2 + 48;
  v6 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v6;
  v7 = v6;
  v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_retain();
  v8(a1 + 48, v5, v7);
  return a1;
}

uint64_t *assignWithCopy for MissingMeCardViewBuilder(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 6, a2 + 6);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

void *__swift_memcpy88_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x58uLL);
}

uint64_t assignWithTake for MissingMeCardViewBuilder(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;

  __swift_destroy_boxed_opaque_existential_0(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a1 + 48);
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for MissingMeCardViewBuilder(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 88))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MissingMeCardViewBuilder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MissingMeCardViewBuilder()
{
  return &type metadata for MissingMeCardViewBuilder;
}

void UsoEntityBuilder_common_Person.init(name:contactId:handle:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void (*v15)(_QWORD *__return_ptr, id *);
  _QWORD v17[2];
  id v18;

  OUTLINED_FUNCTION_32();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_51();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v17[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x2207D6CD4](v9);
  swift_retain();
  MEMORY[0x2207D6CC8](v6, v4);
  OUTLINED_FUNCTION_23_5();
  UsoIdentifier.init(value:appBundleId:namespace:)();
  swift_retain();
  dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
  swift_release();
  if (v2)
  {
    v12 = one-time initialization token for transformer;
    v13 = v2;
    if (v12 != -1)
      swift_once();
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Transformer<ContactAttribute, UsoEntityBuilderProtocol_common_ContactAddress?>);
    __swift_project_value_buffer(v14, (uint64_t)static Transformer<>.transformer);
    v15 = (void (*)(_QWORD *__return_ptr, id *))Transformer.transform.getter();
    v18 = v13;
    v15(v17, &v18);
    swift_release();
    if (v17[0])
    {
      MEMORY[0x2207D6CB0](v17[0], v17[1]);
      swift_release();
    }

  }
  swift_release();
  (*(void (**)(char *, uint64_t))(v0 + 8))(v11, v7);
  OUTLINED_FUNCTION_7();
}

uint64_t UsoEntityBuilder_common_PhoneNumber.init(phoneNumber:)(void *a1)
{
  return UsoEntityBuilder_common_PhoneNumber.init(phoneNumber:)(a1, MEMORY[0x24BEA25F0], (void (*)(uint64_t, uint64_t))MEMORY[0x24BEA25D8], (void (*)(uint64_t))MEMORY[0x24BEA25E0]);
}

void static UsoEntityBuilder_common_PhoneNumber.from(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_18_5();
  OUTLINED_FUNCTION_22_5();
  MEMORY[0x24BDAC7A8](v1);
  v2 = OUTLINED_FUNCTION_6_10();
  OUTLINED_FUNCTION_51();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_11_5();
  type metadata accessor for UsoEntityBuilder_common_PhoneNumber();
  OUTLINED_FUNCTION_32_0();
  v10 = UsoEntityBuilder_common_PhoneNumber.init()();
  v4 = OUTLINED_FUNCTION_45_1(v10, sel_label);
  if (v4)
  {
    OUTLINED_FUNCTION_4_6();
    OUTLINED_FUNCTION_2_7();
    MEMORY[0x2207D6DE8](v0, v2);
    v4 = (id)OUTLINED_FUNCTION_3_6();
  }
  v5 = OUTLINED_FUNCTION_45_1((uint64_t)v4, sel_value);
  v6 = objc_msgSend(v5, sel_stringValue);

  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  MEMORY[0x2207D6DF4](v7, v9);
  OUTLINED_FUNCTION_23_5();
  UUID.init()();
  UUID.uuidString.getter();
  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_0_8();
  OUTLINED_FUNCTION_24_8();
  OUTLINED_FUNCTION_14_7();
  OUTLINED_FUNCTION_7();
}

uint64_t UsoEntityBuilder_common_EmailAddress.init(emailAddress:)(void *a1)
{
  return UsoEntityBuilder_common_PhoneNumber.init(phoneNumber:)(a1, MEMORY[0x24BEA27D0], (void (*)(uint64_t, uint64_t))MEMORY[0x24BEA27B8], (void (*)(uint64_t))MEMORY[0x24BEA27C0]);
}

uint64_t UsoEntityBuilder_common_PhoneNumber.init(phoneNumber:)(void *a1, uint64_t (*a2)(void), void (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7 = a2();
  swift_retain();
  outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(a1);
  if (v8)
  {
    v9 = String.sanitizeCNLabel.getter();
    v11 = v10;
    swift_bridgeObjectRelease();
    a3(v9, v11);
    OUTLINED_FUNCTION_9_0();
  }
  v12 = outlined bridged method (pb) of @objc ContactAttribute.handleValue.getter(a1);
  if (v13)
  {
    a4(v12);
    OUTLINED_FUNCTION_167();
  }
  swift_release();

  return v7;
}

void static UsoEntityBuilder_common_EmailAddress.from(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_18_5();
  OUTLINED_FUNCTION_22_5();
  MEMORY[0x24BDAC7A8](v1);
  v2 = OUTLINED_FUNCTION_6_10();
  OUTLINED_FUNCTION_51();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_11_5();
  type metadata accessor for UsoEntityBuilder_common_EmailAddress();
  v4 = (void *)OUTLINED_FUNCTION_32_0();
  v10 = UsoEntityBuilder_common_EmailAddress.init()();
  v5 = OUTLINED_FUNCTION_45_1(v10, sel_label);
  if (v5)
  {
    OUTLINED_FUNCTION_4_6();
    OUTLINED_FUNCTION_2_7();
    v4 = (void *)v10;
    MEMORY[0x2207D6E78](v0, v2);
    v5 = (id)OUTLINED_FUNCTION_3_6();
  }
  v6 = OUTLINED_FUNCTION_45_1((uint64_t)v5, sel_value);
  v7 = OUTLINED_FUNCTION_4_6();
  v9 = v8;

  MEMORY[0x2207D6E84](v7, v9);
  OUTLINED_FUNCTION_23_5();
  UUID.init()();
  UUID.uuidString.getter();
  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_0_8();
  OUTLINED_FUNCTION_24_8();
  OUTLINED_FUNCTION_14_7();
  OUTLINED_FUNCTION_7();
}

void static UsoEntityBuilder_common_PostalAddress.from(_:)()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  OUTLINED_FUNCTION_32();
  v1 = v0;
  v2 = OUTLINED_FUNCTION_18_5();
  v32 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_9_5();
  v3 = type metadata accessor for UsoIdentifier();
  v33 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_9_5();
  type metadata accessor for UsoEntityBuilder_common_PostalAddress();
  v4 = (void *)OUTLINED_FUNCTION_32_0();
  v5 = UsoEntityBuilder_common_PostalAddress.init()();
  v6 = objc_msgSend(v1, sel_label);
  if (v6)
  {
    v7 = v6;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v8 = String.sanitizeCNLabel.getter();
    v10 = v9;
    OUTLINED_FUNCTION_167();
    v4 = (void *)v5;
    MEMORY[0x2207D6EFC](v8, v10);
    OUTLINED_FUNCTION_9_0();
  }
  v11 = objc_msgSend(v1, sel_value);
  type metadata accessor for UsoEntityBuilder_common_GeographicArea();
  OUTLINED_FUNCTION_32_0();
  v12 = OUTLINED_FUNCTION_13_9();
  v13 = OUTLINED_FUNCTION_9_8(v12, sel_street);
  v14 = OUTLINED_FUNCTION_4_6();
  v16 = v15;

  MEMORY[0x2207D6F38](v14, v16);
  OUTLINED_FUNCTION_9_0();
  swift_retain();
  OUTLINED_FUNCTION_19_8();
  MEMORY[0x2207D6F14]();
  swift_release();
  OUTLINED_FUNCTION_7_7();
  v17 = (void *)OUTLINED_FUNCTION_13_9();
  v18 = OUTLINED_FUNCTION_9_8((uint64_t)v17, sel_city);
  v19 = OUTLINED_FUNCTION_4_6();
  OUTLINED_FUNCTION_17_5();
  MEMORY[0x2207D6F38](v19, v14);
  OUTLINED_FUNCTION_167();
  swift_retain();
  OUTLINED_FUNCTION_19_8();
  MEMORY[0x2207D6EF0]();
  swift_release();
  OUTLINED_FUNCTION_7_7();
  v20 = OUTLINED_FUNCTION_13_9();
  v21 = OUTLINED_FUNCTION_9_8(v20, sel_state);
  v22 = OUTLINED_FUNCTION_4_6();
  v24 = v23;

  MEMORY[0x2207D6F38](v22, v24);
  swift_bridgeObjectRelease();
  swift_retain();
  OUTLINED_FUNCTION_19_8();
  MEMORY[0x2207D6EE4]();
  v25 = swift_release();
  v26 = OUTLINED_FUNCTION_9_8(v25, sel_postalCode);
  v27 = OUTLINED_FUNCTION_4_6();
  OUTLINED_FUNCTION_17_5();
  MEMORY[0x2207D6ECC](v27, v22);
  OUTLINED_FUNCTION_167();
  OUTLINED_FUNCTION_7_7();
  v28 = OUTLINED_FUNCTION_13_9();
  v29 = OUTLINED_FUNCTION_9_8(v28, sel_country);
  v30 = OUTLINED_FUNCTION_4_6();
  OUTLINED_FUNCTION_17_5();
  MEMORY[0x2207D6F38](v30, v22);
  OUTLINED_FUNCTION_167();
  swift_retain();
  OUTLINED_FUNCTION_19_8();
  MEMORY[0x2207D6ED8]();
  swift_release();
  v31 = CNLabeledValue<>.formattedString.getter();
  MEMORY[0x2207D6F08](v31);
  swift_bridgeObjectRelease();
  UUID.init()();
  UUID.uuidString.getter();
  OUTLINED_FUNCTION_24_4(v32);
  OUTLINED_FUNCTION_0_8();
  dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  OUTLINED_FUNCTION_24_4(v33);
  OUTLINED_FUNCTION_7();
}

uint64_t outlined bridged method (pb) of @objc ContactAttribute.handleValue.getter(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_handleValue);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t OUTLINED_FUNCTION_0_8()
{
  return UsoIdentifier.init(value:appBundleId:namespace:)();
}

void OUTLINED_FUNCTION_2_7()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_3_6()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_4_6()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_6_10()
{
  return type metadata accessor for UsoIdentifier();
}

uint64_t OUTLINED_FUNCTION_7_7()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_8_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

id OUTLINED_FUNCTION_9_8(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t OUTLINED_FUNCTION_11_5()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_13_9()
{
  return UsoEntityBuilder_common_GeographicArea.init()();
}

uint64_t OUTLINED_FUNCTION_14_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void OUTLINED_FUNCTION_17_5()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_18_5()
{
  return type metadata accessor for UUID();
}

uint64_t OUTLINED_FUNCTION_23_5()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_24_8()
{
  return dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
}

uint64_t ModifyNicknameUnsupportedViewBuilder.makeViewsForWatch()()
{
  return ModifyNicknameUnsupportedViewBuilder.makeViewsForWatch()("[ModifyNicknameUnsupportedViewBuilder] Constructing no views for Watch, an unsupported idiom.");
}

uint64_t ModifyNicknameUnsupportedViewBuilder.makeViewsForMac()()
{
  NSObject *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  Class isa;
  objc_class *v8;
  Class v9;
  uint64_t v10;
  _QWORD v12[5];

  v2 = (uint64_t)v0;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v3 = OUTLINED_FUNCTION_26();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.siriContacts);
  OUTLINED_FUNCTION_70();
  v4 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_3(v4))
  {
    v5 = (uint8_t *)OUTLINED_FUNCTION_2_1();
    *(_WORD *)v5 = 0;
    OUTLINED_FUNCTION_31(&dword_21FE16000, v0, v1, "[ModifyNicknameUnsupportedViewBuilder] Constructing PersonSnippet with all display properties for macOS.", v5);
    OUTLINED_FUNCTION_0();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v6 = OUTLINED_FUNCTION_55();
  *(_OWORD *)(v6 + 16) = xmmword_21FED8AB0;
  type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SAABPersonSnippet);
  isa = v0[10].isa;
  type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v8 = isa;
  v9 = NSNumber.init(integerLiteral:)(1).super.super.isa;
  outlined init with copy of AppUtil(v2, (uint64_t)v12);
  SAABPersonSnippet.init(contact:attributeType:isMe:appUtil:)(v8, 0, v9, (uint64_t)v12);
  *(_QWORD *)(v6 + 32) = v10;
  v12[0] = v6;
  specialized Array._endMutation()();
  return v12[0];
}

uint64_t ModifyNicknameUnsupportedViewBuilder.makeViewsForCarPlay()()
{
  return ModifyNicknameUnsupportedViewBuilder.makeViewsForWatch()("[ModifyNicknameUnsupportedViewBuilder] Constructing no views for CarPlay.");
}

uint64_t ModifyNicknameUnsupportedViewBuilder.makeViewsForCarDND()()
{
  return ModifyNicknameUnsupportedViewBuilder.makeViewsForWatch()("[ModifyNicknameUnsupportedViewBuilder] Constructing no views for CarDND.");
}

uint64_t ModifyNicknameUnsupportedViewBuilder.makeViewsForWatch()(const char *a1)
{
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;

  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v4 = OUTLINED_FUNCTION_26();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.siriContacts);
  OUTLINED_FUNCTION_70();
  v5 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_3(v5))
  {
    v6 = (uint8_t *)OUTLINED_FUNCTION_2_1();
    *(_WORD *)v6 = 0;
    OUTLINED_FUNCTION_31(&dword_21FE16000, v1, v2, a1, v6);
    OUTLINED_FUNCTION_0();
  }

  return MEMORY[0x24BEE4AF8];
}

uint64_t ModifyNicknameUnsupportedViewBuilder.makeViewsForIOS()()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  Class isa;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[7];
  uint64_t v17;
  _QWORD v18[6];

  v1 = (uint64_t)v0;
  v2 = type metadata accessor for Locale();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v6 = OUTLINED_FUNCTION_26();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.siriContacts);
  OUTLINED_FUNCTION_70();
  v7 = OUTLINED_FUNCTION_8();
  if (os_log_type_enabled(v0, v7))
  {
    v8 = (uint8_t *)OUTLINED_FUNCTION_2_1();
    *(_WORD *)v8 = 0;
    OUTLINED_FUNCTION_31(&dword_21FE16000, v0, v7, "[ModifyContactAttributeViewBuilder] Constructing PersonSnippet-like CardSnippet for iOS.", v8);
    OUTLINED_FUNCTION_0();
  }

  isa = v0[11].isa;
  outlined init with copy of AppUtil(v1, (uint64_t)v18);
  v17 = (uint64_t)isa;
  v18[5] = 0;
  type metadata accessor for ContactAttribute();
  swift_retain();
  v10 = ContactAttribute.__allocating_init(contactAttributeType:identifier:handleLabel:handleValue:ageDateTime:postalAddress:)(0, 0, 0, 0, 0, 0, 0, 0, 0);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 64));
  dispatch thunk of DeviceState.siriLocale.getter();
  v16[5] = Locale.identifier.getter();
  v16[6] = v11;
  v16[3] = 45;
  v16[4] = 0xE100000000000000;
  v16[1] = 95;
  v16[2] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  CompactViews.buildGetAttributeSnippet(handles:contact:contactAttribute:localeString:)();
  v13 = v12;

  swift_bridgeObjectRelease();
  outlined destroy of CompactViews((uint64_t)&v17);
  if (!v13)
    return MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v14 = OUTLINED_FUNCTION_55();
  *(_OWORD *)(v14 + 16) = xmmword_21FED8AB0;
  *(_QWORD *)(v14 + 32) = v13;
  v17 = v14;
  specialized Array._endMutation()();
  return v17;
}

uint64_t outlined init with copy of AppUtil(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AppUtil(a2, a1);
  return a2;
}

uint64_t outlined destroy of CompactViews(uint64_t a1)
{
  destroy for CompactViews(a1);
  return a1;
}

uint64_t destroy for ModifyNicknameUnsupportedViewBuilder(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_0(a1);
  __swift_destroy_boxed_opaque_existential_0(a1 + 40);

  return swift_release();
}

uint64_t initializeWithCopy for ModifyNicknameUnsupportedViewBuilder(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  void *v6;
  uint64_t v7;
  id v8;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  v6 = *(void **)(a2 + 80);
  v7 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v6;
  *(_QWORD *)(a1 + 88) = v7;
  v8 = v6;
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for ModifyNicknameUnsupportedViewBuilder(uint64_t *a1, uint64_t *a2)
{
  void *v4;
  void *v5;
  id v6;

  __swift_assign_boxed_opaque_existential_1(a1, a2);
  __swift_assign_boxed_opaque_existential_1(a1 + 5, a2 + 5);
  v4 = (void *)a2[10];
  v5 = (void *)a1[10];
  a1[10] = (uint64_t)v4;
  v6 = v4;

  a1[11] = a2[11];
  swift_retain();
  swift_release();
  return a1;
}

void *__swift_memcpy96_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

uint64_t assignWithTake for ModifyNicknameUnsupportedViewBuilder(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  void *v6;

  __swift_destroy_boxed_opaque_existential_0(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_0(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 80);
  v6 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v5;

  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModifyNicknameUnsupportedViewBuilder(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 96))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModifyNicknameUnsupportedViewBuilder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ModifyNicknameUnsupportedViewBuilder()
{
  return &type metadata for ModifyNicknameUnsupportedViewBuilder;
}

id ContactAttribute.__allocating_init(contactAttributeType:identifier:handleLabel:handleValue:ageDateTime:postalAddress:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9)
{
  objc_class *v9;
  objc_class *v10;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v34;
  uint64_t v35;

  v10 = v9;
  v34 = a4;
  v35 = a6;
  v17 = type metadata accessor for UUID();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    UUID.init()();
    a2 = UUID.uuidString.getter();
    a3 = v21;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  }
  v22 = objc_allocWithZone(v10);
  v23 = static String.EMPTY.getter();
  v24 = (void *)MEMORY[0x2207D7CB8](v23);
  swift_bridgeObjectRelease();
  v25 = outlined bridged method (mbnnn) of @objc INObject.init(identifier:display:)(a2, a3, (uint64_t)v24, v22);

  v26 = v25;
  v27 = objc_msgSend(v26, sel_setContactAttributeType_, a1);
  if (a5)
  {
    v28 = (void *)MEMORY[0x2207D7CB8](v34, a5);
    v27 = (id)swift_bridgeObjectRelease();
  }
  else
  {
    v28 = 0;
  }
  OUTLINED_FUNCTION_5_7((uint64_t)v27, sel_setHandleLabel_);

  if (a7)
  {
    v30 = (void *)MEMORY[0x2207D7CB8](v35, a7);
    v29 = OUTLINED_FUNCTION_55_1();
  }
  else
  {
    v30 = 0;
  }
  OUTLINED_FUNCTION_5_7(v29, sel_setHandleValue_);

  objc_msgSend(v26, sel_setAgeDateTime_, a8);
  v31 = v26;
  if (a9)
  {
    type metadata accessor for PostalAddress();
    v32 = a9;
    v31 = PostalAddress.__allocating_init(labeledAddress:)(v32);
    OUTLINED_FUNCTION_5_7((uint64_t)v31, sel_setPostalAddress_);

  }
  return v26;
}

id PostalAddress.__allocating_init(labeledAddress:)(void *a1)
{
  objc_class *v1;
  objc_class *v2;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v2 = v1;
  v4 = objc_allocWithZone(v2);
  v5 = objc_msgSend(a1, sel_identifier);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

  v9 = CNLabeledValue<>.formattedString.getter();
  v10 = (void *)MEMORY[0x2207D7CB8](v9);
  OUTLINED_FUNCTION_55_1();
  v11 = outlined bridged method (mbnnn) of @objc INObject.init(identifier:display:)(v6, v8, (uint64_t)v10, v4);

  v12 = v11;
  v13 = objc_msgSend(a1, sel_label);
  objc_msgSend(v12, sel_setHandleLabel_, v13);

  v14 = objc_msgSend(OUTLINED_FUNCTION_2_8(), sel_street);
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_3_7();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_0_9(v15, v16, v17, (SEL *)&selRef_setStreet_);
  v18 = objc_msgSend(OUTLINED_FUNCTION_2_8(), sel_subLocality);
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_3_7();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_0_9(v19, v20, v21, (SEL *)&selRef_setSubLocality_);
  v22 = objc_msgSend(OUTLINED_FUNCTION_2_8(), sel_city);
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_3_7();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_0_9(v23, v24, v25, (SEL *)&selRef_setCity_);
  v26 = objc_msgSend(OUTLINED_FUNCTION_2_8(), sel_subAdministrativeArea);
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_3_7();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_0_9(v27, v28, v29, (SEL *)&selRef_setSubAdministrativeArea_);
  v30 = objc_msgSend(OUTLINED_FUNCTION_2_8(), sel_state);
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_3_7();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_0_9(v31, v32, v33, (SEL *)&selRef_setState_);
  v34 = objc_msgSend(OUTLINED_FUNCTION_2_8(), sel_postalCode);
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_3_7();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_0_9(v35, v36, v37, (SEL *)&selRef_setPostalCode_);
  v38 = objc_msgSend(OUTLINED_FUNCTION_2_8(), sel_country);
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_3_7();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_0_9(v39, v40, v41, (SEL *)&selRef_setCountry_);
  v42 = objc_msgSend(OUTLINED_FUNCTION_2_8(), sel_ISOCountryCode);
  OUTLINED_FUNCTION_4_7();
  OUTLINED_FUNCTION_3_7();
  OUTLINED_FUNCTION_1_6();
  OUTLINED_FUNCTION_0_9(v43, v44, v45, (SEL *)&selRef_setIsoCountryCode_);

  return v12;
}

uint64_t ContactAttribute.getINPersonHandleLabel.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v0);
  if (!v2)
    return 0;
  v3 = MEMORY[0x2207D7CB8](v1);
  swift_bridgeObjectRelease();
  return v3;
}

void outlined bridged method (mbnn) of @objc PostalAddress.street.setter(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  id v6;

  v6 = (id)MEMORY[0x2207D7CB8]();
  OUTLINED_FUNCTION_55_1();
  objc_msgSend(a3, *a4, v6);

}

void OUTLINED_FUNCTION_0_9(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;

  outlined bridged method (mbnn) of @objc PostalAddress.street.setter(v5, v6, v4, a4);
}

void OUTLINED_FUNCTION_1_6()
{
  void *v0;

}

id OUTLINED_FUNCTION_2_8()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, (SEL)(v1 + 2888));
}

uint64_t OUTLINED_FUNCTION_3_7()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

void OUTLINED_FUNCTION_4_7()
{
  void *v0;

}

id OUTLINED_FUNCTION_5_7(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

uint64_t dispatch thunk of ModifyContactAttributeStrategyProviding.getRelatedContact(intent:contactService:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t ContactsCommonCATs.missingMeCard(deviceState:contactAttributeType:isMe:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v5 + 176) = a4;
  *(_QWORD *)(v5 + 32) = a3;
  *(_QWORD *)(v5 + 40) = v4;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BehaviorAfterSpeaking?);
  *(_QWORD *)(v5 + 48) = OUTLINED_FUNCTION_22_3();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(_QWORD *)(v5 + 56) = OUTLINED_FUNCTION_22_3();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  *(_QWORD *)(v5 + 64) = OUTLINED_FUNCTION_9_1();
  *(_QWORD *)(v5 + 72) = OUTLINED_FUNCTION_25_0();
  v6 = type metadata accessor for TemplatingResult();
  *(_QWORD *)(v5 + 80) = v6;
  *(_QWORD *)(v5 + 88) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 96) = OUTLINED_FUNCTION_9_1();
  *(_QWORD *)(v5 + 104) = OUTLINED_FUNCTION_25_0();
  *(_QWORD *)(v5 + 112) = OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ContactsCommonCATs.missingMeCard(deviceState:contactAttributeType:isMe:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  __swift_project_boxed_opaque_existential_1(*(_QWORD **)(v0 + 24), *(_QWORD *)(*(_QWORD *)(v0 + 24) + 24));
  v1 = DeviceState.toSiriKitDeviceState.getter();
  *(_QWORD *)(v0 + 120) = v1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v2;
  *v2 = v0;
  v2[1] = ContactsCommonCATs.missingMeCard(deviceState:contactAttributeType:isMe:);
  return ContactsCommonCATs.meCardSetup(device:)(*(_QWORD *)(v0 + 112), v1);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_2_9();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;

  type metadata accessor for ModifyContactAttributeCATs();
  if (swift_dynamicCastClass())
  {
    v1 = *(_QWORD *)(v0 + 56);
    String.toSpeakableString.getter();
    swift_bridgeObjectRelease();
    v2 = type metadata accessor for SpeakableString();
    OUTLINED_FUNCTION_19_4(v1, 0, v3, v2);
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 144) = v4;
    *v4 = v0;
    v4[1] = ContactsCommonCATs.missingMeCard(deviceState:contactAttributeType:isMe:);
    return ModifyContactAttributeCATs.unsupportedMissingMeCard(contactAttributeType:)(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
  }
  else
  {
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 160) = v6;
    *v6 = v0;
    v6[1] = ContactsCommonCATs.missingMeCard(deviceState:contactAttributeType:isMe:);
    return ContactsCommonCATs.unsupportedMissingMeCard(isMe:)(*(_QWORD *)(v0 + 96), *(_BYTE *)(v0 + 176));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc();
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v2, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_2_9();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 72);
  v7 = *(_QWORD *)(v0 + 48);
  __swift_storeEnumTagSinglePayload(v6, 0, 1, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2, v6, v3);
  OUTLINED_FUNCTION_14_8(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
  v8 = OUTLINED_FUNCTION_4_8();
  OUTLINED_FUNCTION_19_4(v7, 1, v9, v8);
  TemplatingResult.merge(with:behaviorAfterSpeaking:)(v5, v7);
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v7, &demangling cache variable for type metadata for BehaviorAfterSpeaking?);
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v5, &demangling cache variable for type metadata for TemplatingResult?);
  OUTLINED_FUNCTION_16_3(v2);
  OUTLINED_FUNCTION_16_3(v1);
  OUTLINED_FUNCTION_9_9();
  swift_task_dealloc();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  OUTLINED_FUNCTION_17_6();
  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);
  OUTLINED_FUNCTION_14_8(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 88) + 16));
  v5 = OUTLINED_FUNCTION_4_8();
  OUTLINED_FUNCTION_19_4(v4, 1, v6, v5);
  TemplatingResult.merge(with:behaviorAfterSpeaking:)(v3, v4);
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v4, &demangling cache variable for type metadata for BehaviorAfterSpeaking?);
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v3, &demangling cache variable for type metadata for TemplatingResult?);
  OUTLINED_FUNCTION_16_3(v2);
  OUTLINED_FUNCTION_16_3(v1);
  OUTLINED_FUNCTION_9_9();
  swift_task_dealloc();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  return OUTLINED_FUNCTION_51_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_17_6();
  swift_release();
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  return OUTLINED_FUNCTION_51_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_17_6();
  OUTLINED_FUNCTION_15_6();
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  return OUTLINED_FUNCTION_51_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_17_6();
  OUTLINED_FUNCTION_15_6();
  OUTLINED_FUNCTION_1_7();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  return OUTLINED_FUNCTION_51_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t OUTLINED_FUNCTION_1_7()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_2_9()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_4_8()
{
  uint64_t v0;
  uint64_t v1;

  __swift_storeEnumTagSinglePayload(v1, 0, 1, v0);
  return type metadata accessor for BehaviorAfterSpeaking();
}

uint64_t OUTLINED_FUNCTION_9_9()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_14_8@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v3, v1, v2);
}

uint64_t OUTLINED_FUNCTION_15_6()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[11] + 8))(v0[14], v0[10]);
}

uint64_t OUTLINED_FUNCTION_16_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t CNContact.toDialogPerson(useConversationalName:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8]();
  OUTLINED_FUNCTION_55_0();
  v2 = v1 - v0;
  type metadata accessor for DialogPerson.Builder();
  OUTLINED_FUNCTION_32_0();
  v3 = DialogPerson.Builder.init()();
  v4 = OUTLINED_FUNCTION_8_7(v3, sel_organizationName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_17_4();
  type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_2_10();
  dispatch thunk of DialogPerson.Builder.withCompany(_:)();
  OUTLINED_FUNCTION_11_6();
  v5 = OUTLINED_FUNCTION_6_11();
  v6 = OUTLINED_FUNCTION_8_7(v5, sel_nickname);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_26_6();
  OUTLINED_FUNCTION_1_8();
  OUTLINED_FUNCTION_17_7();
  dispatch thunk of DialogPerson.Builder.withNickname(_:)();
  OUTLINED_FUNCTION_52();
  v7 = OUTLINED_FUNCTION_6_11();
  v8 = OUTLINED_FUNCTION_8_7(v7, sel_givenName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_27_5();
  OUTLINED_FUNCTION_1_8();
  OUTLINED_FUNCTION_2_10();
  dispatch thunk of DialogPerson.Builder.withGivenName(_:)();
  OUTLINED_FUNCTION_11_6();
  v9 = OUTLINED_FUNCTION_6_11();
  v10 = OUTLINED_FUNCTION_8_7(v9, sel_middleName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_26_6();
  OUTLINED_FUNCTION_1_8();
  OUTLINED_FUNCTION_17_7();
  dispatch thunk of DialogPerson.Builder.withMiddleName(_:)();
  OUTLINED_FUNCTION_52();
  v11 = OUTLINED_FUNCTION_6_11();
  OUTLINED_FUNCTION_8_7(v11, sel_familyName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_27_5();
  OUTLINED_FUNCTION_1_8();
  OUTLINED_FUNCTION_2_10();
  dispatch thunk of DialogPerson.Builder.withFamilyName(_:)();
  OUTLINED_FUNCTION_11_6();
  OUTLINED_FUNCTION_6_11();
  dispatch thunk of DialogPerson.Builder.withUseConversationalName(_:)();
  v12 = OUTLINED_FUNCTION_52();
  v13 = OUTLINED_FUNCTION_8_7(v12, sel_termsOfAddress);
  type metadata accessor for NSTermOfAddress();
  v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    v20 = _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_5();
    if (!v20)
      goto LABEL_15;
  }
  else if (!*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_15:
    OUTLINED_FUNCTION_5();
    goto LABEL_16;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v14 & 0xC000000000000001) == 0, v14);
  if ((v14 & 0xC000000000000001) != 0)
    OUTLINED_FUNCTION_29_6();
  v15 = *(id *)(v14 + 32);
  OUTLINED_FUNCTION_5();
  v16 = outlined bridged method (pb) of @objc NSTermOfAddress.pronouns.getter(v15);
  if (!v16)
  {

    goto LABEL_16;
  }
  v17 = v16;
  if (v16 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter())
      goto LABEL_7;
    goto LABEL_14;
  }
  if (!*(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_14:

    goto LABEL_15;
  }
LABEL_7:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v17 & 0xC000000000000001) == 0, v17);
  if ((v17 & 0xC000000000000001) != 0)
    OUTLINED_FUNCTION_29_6();
  v18 = *(id *)(v17 + 32);
  OUTLINED_FUNCTION_5();
  v19 = objc_msgSend(v18, sel_pronoun);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  type metadata accessor for DialogPronoun.Builder();
  OUTLINED_FUNCTION_32_0();
  DialogPronoun.Builder.init()();
  OUTLINED_FUNCTION_17_4();
  OUTLINED_FUNCTION_2_10();
  dispatch thunk of DialogPronoun.Builder.withInitialPronoun(_:)();
  swift_release();
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v2, &demangling cache variable for type metadata for SpeakableString?);
  dispatch thunk of DialogPronoun.Builder.build()();
  dispatch thunk of DialogPerson.Builder.withPronoun(_:)();

  swift_release();
  swift_release();
  swift_release();
LABEL_16:
  v21 = dispatch thunk of DialogPerson.Builder.build()();
  swift_release();
  return v21;
}

uint64_t CNContact.timezonedBirthdate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int EnumTagSinglePayload;
  char v11;
  uint64_t v12;
  uint64_t v14;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_14_9();
  v5 = v3 - v4;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - v7;
  CNContact.timezonedBirthday.getter((uint64_t)&v14 - v7);
  v9 = OUTLINED_FUNCTION_12_7();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9);
  outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v8, &demangling cache variable for type metadata for DateComponents?);
  if (EnumTagSinglePayload != 1)
  {
    CNContact.timezonedBirthday.getter(v5);
    OUTLINED_FUNCTION_18_6(v5);
    if (!v11)
    {
      DateComponents.date.getter();
      return OUTLINED_FUNCTION_23_6(v5, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8));
    }
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v5, &demangling cache variable for type metadata for DateComponents?);
  }
  v12 = type metadata accessor for Date();
  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v12);
}

uint64_t CNContact.timezonedBirthday.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_15();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_14_9();
  v7 = v5 - v6;
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v26 - v10;
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v26 - v13;
  v15 = OUTLINED_FUNCTION_8_7(v12, sel_birthday);
  if (v15)
  {
    v16 = v15;
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

    v17 = OUTLINED_FUNCTION_12_7();
    v18 = v7;
    v19 = 0;
  }
  else
  {
    v17 = type metadata accessor for DateComponents();
    v18 = v7;
    v19 = 1;
  }
  OUTLINED_FUNCTION_7_8(v18, v19);
  outlined init with take of DateComponents?(v7, (uint64_t)v11);
  OUTLINED_FUNCTION_12_7();
  OUTLINED_FUNCTION_18_6((uint64_t)v11);
  if (v22)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v11, &demangling cache variable for type metadata for DateComponents?);
    OUTLINED_FUNCTION_7_8((uint64_t)v14, 1);
LABEL_9:
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v14, &demangling cache variable for type metadata for DateComponents?);
    v23 = a1;
    v24 = 1;
    return OUTLINED_FUNCTION_7_8(v23, v24);
  }
  v20 = *(_QWORD *)(v17 - 8);
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v14, v11, v17);
  static TimeZone.current.getter();
  v21 = type metadata accessor for TimeZone();
  __swift_storeEnumTagSinglePayload(v1, 0, 1, v21);
  DateComponents.timeZone.setter();
  OUTLINED_FUNCTION_23_6((uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8));
  OUTLINED_FUNCTION_7_8((uint64_t)v14, 0);
  OUTLINED_FUNCTION_18_6((uint64_t)v14);
  if (v22)
    goto LABEL_9;
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(a1, v14, v17);
  v23 = a1;
  v24 = 0;
  return OUTLINED_FUNCTION_7_8(v23, v24);
}

void CNContact.init(from:)(void *a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;

  v2 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  outlined bridged method (pb) of @objc Contact.givenName.getter(a1);
  if (v3)
    OUTLINED_FUNCTION_10_7();
  v4 = (void *)MEMORY[0x2207D7CB8](0x6D614E6E65766967, 0xE900000000000065);
  objc_msgSend(v2, sel_setValue_forKeyPath_, 0, v4);

  OUTLINED_FUNCTION_9_10();
  v5 = v2;
  OUTLINED_FUNCTION_21_6((uint64_t)v5, (SEL *)&selRef_nickName);
  if (v6)
    OUTLINED_FUNCTION_10_7();
  v7 = MEMORY[0x2207D7CB8](0x656D616E6B63696ELL, 0xE800000000000000);
  OUTLINED_FUNCTION_0_10(v7);

  OUTLINED_FUNCTION_9_10();
  v8 = v5;
  outlined bridged method (pb) of @objc Contact.middleName.getter(a1);
  if (v9)
    OUTLINED_FUNCTION_10_7();
  OUTLINED_FUNCTION_13_10();
}

void sub_21FE38B04(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;

  OUTLINED_FUNCTION_0_10(a1);

  OUTLINED_FUNCTION_9_10();
  v4 = v2;
  outlined bridged method (pb) of @objc Contact.familyName.getter(v1);
  if (v5)
    OUTLINED_FUNCTION_10_7();
  OUTLINED_FUNCTION_13_10();
}

void sub_21FE38B48(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_0_10(a1);

  OUTLINED_FUNCTION_9_10();
  OUTLINED_FUNCTION_21_6((uint64_t)v1, (SEL *)&selRef_namePrefix);
  if (v3)
    OUTLINED_FUNCTION_10_7();
  OUTLINED_FUNCTION_25_9();
}

void sub_21FE38B94(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_0_10(a1);

  OUTLINED_FUNCTION_9_10();
  OUTLINED_FUNCTION_21_6((uint64_t)v1, (SEL *)&selRef_nameSuffix);
  if (v3)
    OUTLINED_FUNCTION_10_7();
  OUTLINED_FUNCTION_25_9();
}

void *sub_21FE38BE0(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;

  OUTLINED_FUNCTION_0_10(a1);
  OUTLINED_FUNCTION_9_10();

  return v2;
}

void CNContact.requestedName(_:)(uint64_t a1)
{
  id v1;
  id v2;

  switch(a1)
  {
    case 6:
      v1 = OUTLINED_FUNCTION_20_9(6, sel_nickname);
      goto LABEL_7;
    case 8:
      v1 = OUTLINED_FUNCTION_20_9(8, sel_familyName);
      goto LABEL_7;
    case 7:
      v1 = OUTLINED_FUNCTION_20_9(7, sel_givenName);
LABEL_7:
      v2 = v1;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      OUTLINED_FUNCTION_22_6();
      return;
  }
  CNContact.formattedFullName.getter();
}

uint64_t CNContact.formattedBirthdateString.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  void *v28;
  Class isa;
  id v30;
  id v31;
  void *v32;
  void *v33;
  Class v34;
  id v35;
  Class v36;
  uint64_t v38;

  v1 = type metadata accessor for Locale();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_55_0();
  v5 = v4 - v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_14_9();
  v9 = v7 - v8;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v38 - v11;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_55_0();
  v16 = v15 - v14;
  v17 = type metadata accessor for Date();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_15();
  CNContact.timezonedBirthdate.getter(v16);
  if (__swift_getEnumTagSinglePayload(v16, 1, v17) != 1)
  {
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v0, v16, v17);
    v21 = OUTLINED_FUNCTION_20_9(v20, sel_birthday);
    if (v21)
    {
      v22 = v21;
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

      v23 = OUTLINED_FUNCTION_12_7();
      v24 = v9;
      v25 = 0;
    }
    else
    {
      v23 = type metadata accessor for DateComponents();
      v24 = v9;
      v25 = 1;
    }
    __swift_storeEnumTagSinglePayload(v24, v25, 1, v23);
    outlined init with take of DateComponents?(v9, (uint64_t)v12);
    OUTLINED_FUNCTION_12_7();
    if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v23) == 1)
    {
      outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v12, &demangling cache variable for type metadata for DateComponents?);
    }
    else
    {
      DateComponents.year.getter();
      v27 = v26;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v23 - 8) + 8))(v12, v23);
      if ((v27 & 1) == 0)
      {
        v28 = (void *)objc_opt_self();
        isa = Date._bridgeToObjectiveC()().super.isa;
        v30 = objc_msgSend(v28, sel_localizedStringFromDate_dateStyle_timeStyle_, isa, 3, 0);

        v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
LABEL_11:

        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v0, v17);
        return v19;
      }
    }
    v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD1500]), sel_init);
    v32 = (void *)objc_opt_self();
    v33 = (void *)MEMORY[0x2207D7CB8](0x644D4D4D4DLL, 0xE500000000000000);
    static Locale.current.getter();
    v34 = Locale._bridgeToObjectiveC()().super.isa;
    OUTLINED_FUNCTION_23_6(v5, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    v35 = objc_msgSend(v32, sel_dateFormatFromTemplate_options_locale_, v33, 0, v34);

    objc_msgSend(v31, sel_setDateFormat_, v35);
    v36 = Date._bridgeToObjectiveC()().super.isa;
    v30 = objc_msgSend(v31, sel_stringFromDate_, v36);

    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    goto LABEL_11;
  }
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v16, (uint64_t *)&demangling cache variable for type metadata for Date?);
  return static String.EMPTY.getter();
}

void outlined bridged method (pb) of @objc Contact.namePrefix.getter(void *a1)
{
  outlined bridged method (pb) of @objc Contact.namePrefix.getter(a1, (SEL *)&selRef_namePrefix);
}

void outlined bridged method (pb) of @objc Contact.nameSuffix.getter(void *a1)
{
  outlined bridged method (pb) of @objc Contact.namePrefix.getter(a1, (SEL *)&selRef_nameSuffix);
}

void outlined bridged method (pb) of @objc Contact.namePrefix.getter(void *a1, SEL *a2)
{
  id v2;
  void *v3;

  v2 = objc_msgSend(a1, *a2);
  if (v2)
  {
    v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  OUTLINED_FUNCTION_22_6();
}

uint64_t outlined init with take of DateComponents?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for NSTermOfAddress()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSTermOfAddress;
  if (!lazy cache variable for type metadata for NSTermOfAddress)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSTermOfAddress);
  }
  return result;
}

id OUTLINED_FUNCTION_0_10(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  return objc_msgSend(v1, (SEL)(v3 + 1992), v2, a1);
}

uint64_t OUTLINED_FUNCTION_1_8()
{
  return SpeakableString.init(print:speak:)();
}

uint64_t OUTLINED_FUNCTION_2_10()
{
  uint64_t v0;
  uint64_t v1;

  __swift_storeEnumTagSinglePayload(v0, 0, 1, v1);
  return v0;
}

uint64_t OUTLINED_FUNCTION_4_9()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_6_11()
{
  uint64_t v0;
  uint64_t *v1;

  return outlined destroy of UsoEntity_common_Person.DefinedValues?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_7_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

id OUTLINED_FUNCTION_8_7(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t OUTLINED_FUNCTION_9_10()
{
  return swift_unknownObjectRelease();
}

void OUTLINED_FUNCTION_10_7()
{
  JUMPOUT(0x2207D7CB8);
}

uint64_t OUTLINED_FUNCTION_11_6()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_12_7()
{
  return type metadata accessor for DateComponents();
}

void OUTLINED_FUNCTION_13_10()
{
  JUMPOUT(0x2207D7CB8);
}

uint64_t OUTLINED_FUNCTION_17_7()
{
  uint64_t v0;
  uint64_t v1;

  __swift_storeEnumTagSinglePayload(v0, 0, 1, v1);
  return v0;
}

uint64_t OUTLINED_FUNCTION_18_6(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

id OUTLINED_FUNCTION_20_9(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

void OUTLINED_FUNCTION_21_6(uint64_t a1, SEL *a2)
{
  void *v2;

  outlined bridged method (pb) of @objc Contact.namePrefix.getter(v2, a2);
}

uint64_t OUTLINED_FUNCTION_23_6@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

void OUTLINED_FUNCTION_25_9()
{
  JUMPOUT(0x2207D7CB8);
}

void OUTLINED_FUNCTION_26_6()
{
  void *v0;

}

void OUTLINED_FUNCTION_27_5()
{
  void *v0;

}

void OUTLINED_FUNCTION_29_6()
{
  JUMPOUT(0x2207D80C0);
}

uint64_t ModifyContactAttributeHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for SiriKitIntentHandler();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ModifyContactAttributeHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  id v13;
  uint64_t v14;

  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriContacts);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)OUTLINED_FUNCTION_2_1();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_21FE16000, v2, v3, "#ModifyContactAttributeHandleIntentStrategy makeIntentExecutionBehavior", v4, 2u);
    OUTLINED_FUNCTION_0();
  }

  type metadata accessor for SiriKitIntentExecutionBehavior();
  v5 = one-time initialization token for current;
  swift_retain();
  if (v5 != -1)
    swift_once();
  v7 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v9 = *(void **)(v0 + 24);
  v8 = *(_QWORD *)(v0 + 32);
  v10 = static ContactService.current;
  type metadata accessor for ContactResolver();
  OUTLINED_FUNCTION_32_0();
  swift_retain();
  v11 = ContactResolver.init()();
  v12 = objc_allocWithZone((Class)type metadata accessor for ModifyContactAttributeIntentHandler());
  specialized BaseIntentHandler.init(contactService:contactResolver:)(v10, v11, v12);
  type metadata accessor for ModifyContactAttributeIntent();
  v13 = v9;
  SiriKitIntentHandler.init<A>(app:intentHandler:intent:)();
  v14 = static SiriKitIntentExecutionBehavior.embeddedIntentHandler(intentHandler:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  OUTLINED_FUNCTION_13_0();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v14);
}

uint64_t ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[32] = a2;
  v3[33] = v2;
  v3[31] = a1;
  v4 = type metadata accessor for TemplatingResult();
  v3[34] = v4;
  v3[35] = *(_QWORD *)(v4 - 8);
  v3[36] = OUTLINED_FUNCTION_25_0();
  v3[37] = OUTLINED_FUNCTION_25_0();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<ModifyContactAttributeIntent, ModifyContactAttributeIntentResponse>);
  v3[38] = v5;
  v3[39] = *(_QWORD *)(v5 - 8);
  v3[40] = OUTLINED_FUNCTION_0_0();
  type metadata accessor for DialogPhase();
  v3[41] = OUTLINED_FUNCTION_0_0();
  v6 = type metadata accessor for OutputGenerationManifest();
  v3[42] = v6;
  v3[43] = *(_QWORD *)(v6 - 8);
  v3[44] = OUTLINED_FUNCTION_0_0();
  v7 = type metadata accessor for ContactsSnippetPluginModel();
  v3[45] = v7;
  v3[46] = *(_QWORD *)(v7 - 8);
  v3[47] = OUTLINED_FUNCTION_0_0();
  type metadata accessor for CATOption();
  v3[48] = OUTLINED_FUNCTION_0_0();
  v8 = type metadata accessor for ContactsSnippetFlowState();
  v3[49] = v8;
  v3[50] = *(_QWORD *)(v8 - 8);
  v3[51] = OUTLINED_FUNCTION_0_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  v3[52] = OUTLINED_FUNCTION_0_0();
  v9 = type metadata accessor for ModifyContactAttributeSnippetModel.ContactAttributeToModify();
  v3[53] = v9;
  v3[54] = *(_QWORD *)(v9 - 8);
  v3[55] = OUTLINED_FUNCTION_25_0();
  v3[56] = OUTLINED_FUNCTION_25_0();
  v3[57] = type metadata accessor for Signpost.OpenSignpost();
  v3[58] = OUTLINED_FUNCTION_0_0();
  v3[59] = type metadata accessor for Locale();
  v3[60] = OUTLINED_FUNCTION_0_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[61] = OUTLINED_FUNCTION_25_0();
  v3[62] = OUTLINED_FUNCTION_25_0();
  v3[63] = OUTLINED_FUNCTION_25_0();
  v3[64] = OUTLINED_FUNCTION_25_0();
  v3[65] = OUTLINED_FUNCTION_25_0();
  v3[66] = OUTLINED_FUNCTION_25_0();
  v3[67] = OUTLINED_FUNCTION_25_0();
  v3[68] = OUTLINED_FUNCTION_25_0();
  v3[69] = OUTLINED_FUNCTION_25_0();
  v3[70] = OUTLINED_FUNCTION_25_0();
  v3[71] = OUTLINED_FUNCTION_25_0();
  v3[72] = OUTLINED_FUNCTION_25_0();
  v3[73] = OUTLINED_FUNCTION_25_0();
  v3[74] = OUTLINED_FUNCTION_25_0();
  v3[75] = OUTLINED_FUNCTION_25_0();
  v3[76] = OUTLINED_FUNCTION_25_0();
  v3[77] = OUTLINED_FUNCTION_25_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifyContactAttributeSnippetModel?);
  v3[78] = OUTLINED_FUNCTION_25_0();
  v3[79] = OUTLINED_FUNCTION_25_0();
  v10 = type metadata accessor for SpeakableString();
  v3[80] = v10;
  v3[81] = *(_QWORD *)(v10 - 8);
  v3[82] = OUTLINED_FUNCTION_25_0();
  v3[83] = OUTLINED_FUNCTION_25_0();
  v3[84] = OUTLINED_FUNCTION_25_0();
  v3[85] = OUTLINED_FUNCTION_25_0();
  v3[86] = OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  void *v15;
  id *v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  id v50;
  void *v51;
  id v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  void *v75;
  id v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t, uint64_t);
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id *v94;
  uint64_t v95;
  void *v96;
  char **p_attr;
  _QWORD *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  id v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  void *v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  void *v120;
  id v121;
  BOOL v122;
  void *v123;
  uint64_t v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  id v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(uint64_t, uint64_t, uint64_t);
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  id *v173;
  void *v174;
  id v175;
  uint64_t v176;
  uint64_t v177;
  id *v178;
  void *v179;
  id v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  id v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  id v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;

  OUTLINED_FUNCTION_13_11();
  v1 = *(_QWORD **)(v0 + 264);
  v2 = v1[10];
  v3 = v1[11];
  __swift_project_boxed_opaque_existential_1(v1 + 7, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(v2, v3);
  *(_QWORD *)(v0 + 696) = v4;
  if (!v4)
  {
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (uint64_t (*)(uint64_t))type metadata accessor for ContactsError, (uint64_t)&protocol conformance descriptor for ContactsError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
LABEL_36:
    OUTLINED_FUNCTION_0_11();
    OUTLINED_FUNCTION_17_0();
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_24_0();
    OUTLINED_FUNCTION_23_0();
    OUTLINED_FUNCTION_22_0();
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_45_0();
    OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_32_2();
    OUTLINED_FUNCTION_31_2();
    OUTLINED_FUNCTION_30_2();
    OUTLINED_FUNCTION_29_1();
    OUTLINED_FUNCTION_28_2();
    OUTLINED_FUNCTION_27_2();
    OUTLINED_FUNCTION_26_1();
    OUTLINED_FUNCTION_25_2();
    OUTLINED_FUNCTION_24_2();
    OUTLINED_FUNCTION_23_1();
    OUTLINED_FUNCTION_21_2();
    OUTLINED_FUNCTION_20_2();
    OUTLINED_FUNCTION_35_3();
    OUTLINED_FUNCTION_34_2();
    OUTLINED_FUNCTION_32_5();
    OUTLINED_FUNCTION_31_6();
    OUTLINED_FUNCTION_30_5();
    OUTLINED_FUNCTION_29_7();
    OUTLINED_FUNCTION_63_2();
    OUTLINED_FUNCTION_62_1();
    OUTLINED_FUNCTION_28_6();
    OUTLINED_FUNCTION_27_6();
    OUTLINED_FUNCTION_26_7();
    OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_24_9();
    OUTLINED_FUNCTION_16_4();
    OUTLINED_FUNCTION_38_1();
    return OUTLINED_FUNCTION_2_11(*(uint64_t (**)(void))(v0 + 8));
  }
  v5 = (void *)v4;
  v6 = (void *)IntentResolutionRecord.intent.getter();
  v7 = objc_msgSend(v6, sel_modifyOperation);

  ModifyOperation.stringify.getter((unint64_t)v7);
  v8 = OUTLINED_FUNCTION_17_4();
  if ((specialized ContactsStrategy.isSmartEnabled.getter(v8) & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v9 = MEMORY[0x24BEE4AF8];
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.siriContacts);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)OUTLINED_FUNCTION_2_1();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_21FE16000, v11, v12, "#ModifyContactAttributeHandleIntentStrategy makeIntentHandledResponse constructing SMART snippet", v13, 2u);
      OUTLINED_FUNCTION_0();
    }
    v14 = *(_QWORD *)(v0 + 256);

    *(_QWORD *)(v0 + 240) = v9;
    objc_msgSend((id)OUTLINED_FUNCTION_94_1(), sel_contactAttributeToModify);
    OUTLINED_FUNCTION_80_1();
    if (v14 == 6)
    {
      v48 = *(_QWORD *)(v0 + 480);
      v49 = *(_QWORD **)(v0 + 264);
      OUTLINED_FUNCTION_130();
      __swift_project_boxed_opaque_existential_1(v49 + 2, v49[5]);
      v50 = v5;
      dispatch thunk of DeviceState.siriLocale.getter();
      v51 = (void *)v49[15];
      v52 = v51;
      DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v50, 0, v48, (uint64_t)v51);
      *(_QWORD *)(v0 + 784) = v53;
      DialogPerson.nickname.getter();
      v54 = (void *)IntentResolutionRecord.intent.getter();
      v55 = outlined bridged method (ob) of @objc ModifyContactAttributeIntent.modifyNickName.getter(v54);
      if (!v56)
        v55 = static String.EMPTY.getter();
      v57 = v55;
      v58 = v56;
      *(_QWORD *)(v0 + 800) = v56;
      *(_QWORD *)(v0 + 792) = v55;
      v60 = *(_QWORD *)(v0 + 432);
      v59 = *(uint64_t **)(v0 + 440);
      v61 = *(_QWORD *)(v0 + 424);
      v62 = *(_QWORD *)(v0 + 400);
      v188 = *(_QWORD *)(v0 + 392);
      v192 = *(_QWORD *)(v0 + 408);
      *(_QWORD *)(v0 + 808) = IntentResolutionRecord.intent.getter();
      *(_QWORD *)(v0 + 816) = IntentResolutionRecord.intentResponse.getter();
      *v59 = v57;
      v59[1] = v58;
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v60 + 104))(v59, *MEMORY[0x24BE91F10], v61);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v62 + 104))(v192, *MEMORY[0x24BE91BB8], v188);
      type metadata accessor for ContactsLabelCATsModern();
      swift_bridgeObjectRetain();
      static CATOption.defaultMode.getter();
      *(_QWORD *)(v0 + 824) = OUTLINED_FUNCTION_86_0();
      v63 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 832) = v63;
      *v63 = v0;
      v63[1] = ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
      goto LABEL_66;
    }
    if (v14 == 10)
    {
      v15 = *(void **)(v0 + 304);
      v16 = *(id **)(v0 + 256);
      __swift_storeEnumTagSinglePayload(*(_QWORD *)(v0 + 616), 1, 1, *(_QWORD *)(v0 + 640));
      v17 = (void *)OUTLINED_FUNCTION_94_1();
      v18 = outlined bridged method (ob) of @objc ModifyContactAttributeIntent.relatedSiriMatches.getter(v17);
      if (!v18)
        goto LABEL_13;
      OUTLINED_FUNCTION_52_2(v18);
      if (v9)
        OUTLINED_FUNCTION_29_6();
      v19 = v16[4];
      OUTLINED_FUNCTION_59_2();
      outlined bridged method (ob) of @objc INObject.identifier.getter(v15);
      if (!v21)
        goto LABEL_13;
      v22 = v20;
      v23 = v21;
      v24 = v1[10];
      v25 = v1[11];
      __swift_project_boxed_opaque_existential_1(v1 + 7, v24);
      v16 = (id *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 8))(v22, v23, v24, v25);
      swift_bridgeObjectRelease();
      if (v16)
      {
        v100 = (uint64_t *)(v0 + 608);
        v198 = *(_QWORD *)(v0 + 616);
        v171 = *(_QWORD *)(v0 + 480);
        v172 = *(_QWORD **)(v0 + 264);
        OUTLINED_FUNCTION_130();
        __swift_project_boxed_opaque_existential_1(v172 + 2, v172[5]);
        v173 = v16;
        dispatch thunk of DeviceState.siriLocale.getter();
        v174 = (void *)v172[15];
        v175 = v174;
        DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v173, 0, v171, (uint64_t)v174);
        dispatch thunk of DialogPerson.fullName.getter();
        OUTLINED_FUNCTION_2();

        outlined destroy of UsoEntity_common_Person.DefinedValues?(v198, &demangling cache variable for type metadata for SpeakableString?);
      }
      else
      {
LABEL_13:
        v26 = (void *)OUTLINED_FUNCTION_50_4();
        v27 = OUTLINED_FUNCTION_83_0(v26);
        OUTLINED_FUNCTION_80_1();
        if (!v16 || (OUTLINED_FUNCTION_98_0(), !v28))
        {
          static String.EMPTY.getter();
          OUTLINED_FUNCTION_79_1();
        }
        v99 = *(_QWORD *)(v0 + 640);
        v100 = (uint64_t *)(v0 + 600);
        v101 = OUTLINED_FUNCTION_17_4();
        OUTLINED_FUNCTION_88(v101, &demangling cache variable for type metadata for SpeakableString?);
        v102 = OUTLINED_FUNCTION_69_3();
        __swift_storeEnumTagSinglePayload(v102, v103, v104, v99);
      }
      v105 = *(_QWORD *)(v0 + 256);
      outlined init with take of SpeakableString?(*v100, *(_QWORD *)(v0 + 616));
      v106 = (void *)IntentResolutionRecord.intentResponse.getter();
      v107 = OUTLINED_FUNCTION_83_0(v106);
      OUTLINED_FUNCTION_80_1();
      if (v105 && (v108 = OUTLINED_FUNCTION_97_1(), v109))
      {
        v110 = v108;
        v111 = v109;
      }
      else
      {
        v110 = static String.EMPTY.getter();
        v111 = v112;
        swift_bridgeObjectRelease();
      }
      *(_QWORD *)(v0 + 712) = v111;
      *(_QWORD *)(v0 + 704) = v110;
      if (one-time initialization token for contactsLog != -1)
        swift_once();
      v113 = *(_QWORD *)(v0 + 456);
      v114 = *(_QWORD *)(v0 + 464);
      v115 = (id)static Signpost.contactsLog;
      OSSignpostID.init(log:)();
      static os_signpost_type_t.begin.getter();
      os_signpost(_:dso:log:name:signpostID:)();
      v116 = v114 + *(int *)(v113 + 20);
      *(_QWORD *)v116 = "RelationshipLabelValueForKey";
      *(_QWORD *)(v116 + 8) = 28;
      *(_BYTE *)(v116 + 16) = 2;
      if (one-time initialization token for NLSemanticValueToCNRelationLabel != -1)
        swift_once();
      swift_beginAccess();
      v117 = static Dictionary<>.NLSemanticValueToCNRelationLabel;
      swift_bridgeObjectRetain();
      v118 = specialized Dictionary.subscript.getter(v110, (uint64_t)v111, v117);
      v120 = v119;
      swift_endAccess();
      swift_bridgeObjectRelease();
      if (v120)
      {
        v110 = v118;
        v111 = v120;
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      v148 = *(_QWORD *)(v0 + 464);
      v149 = *(uint64_t **)(v0 + 448);
      v181 = *(_QWORD *)(v0 + 472);
      v182 = *(_QWORD *)(v0 + 432);
      v150 = *(_QWORD *)(v0 + 416);
      v183 = *(_QWORD *)(v0 + 424);
      v186 = *(_QWORD *)(v0 + 400);
      v190 = *(_QWORD *)(v0 + 392);
      v194 = *(_QWORD *)(v0 + 408);
      v151 = *(_QWORD *)(v0 + 264);
      static os_signpost_type_t.end.getter();
      os_signpost(_:dso:log:name:signpostID:)();
      outlined destroy of Signpost.OpenSignpost(v148);
      v152 = (void *)objc_opt_self();
      MEMORY[0x2207D7CB8](v110, v111);
      OUTLINED_FUNCTION_59_2();
      v153 = objc_msgSend(v152, sel_localizedStringForLabel_, v110);
      OUTLINED_FUNCTION_80_1();
      v154 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v156 = v155;

      *(_QWORD *)(v0 + 224) = v154;
      *(_QWORD *)(v0 + 232) = v156;
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v151 + 16), *(_QWORD *)(v151 + 40));
      dispatch thunk of DeviceState.siriLocale.getter();
      v157 = OUTLINED_FUNCTION_69_3();
      __swift_storeEnumTagSinglePayload(v157, v158, v159, v181);
      lazy protocol witness table accessor for type String and conformance String();
      v160 = StringProtocol.capitalized(with:)();
      v162 = v161;
      outlined destroy of UsoEntity_common_Person.DefinedValues?(v150, &demangling cache variable for type metadata for Locale?);
      swift_bridgeObjectRelease();
      *v149 = v160;
      v149[1] = v162;
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v182 + 104))(v149, *MEMORY[0x24BE91F08], v183);
      *(_QWORD *)(v0 + 720) = IntentResolutionRecord.intent.getter();
      *(_QWORD *)(v0 + 728) = IntentResolutionRecord.intentResponse.getter();
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v186 + 104))(v194, *MEMORY[0x24BE91BB8], v190);
      type metadata accessor for ContactsLabelCATsModern();
      static CATOption.defaultMode.getter();
      *(_QWORD *)(v0 + 736) = OUTLINED_FUNCTION_86_0();
      v163 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 744) = v163;
      *v163 = v0;
      v163[1] = ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
LABEL_66:
      OUTLINED_FUNCTION_76_2();
      return static ModifyContactAttributeSnippetModel.from(intent:intentResponse:contactService:attributeToModify:flowState:labelCATs:)(v164, v165, v166, v167, v168, v169, v170);
    }
    v64 = *(_QWORD *)(v0 + 688);
    v65 = *(_QWORD *)(v0 + 648);
    v66 = *(_QWORD *)(v0 + 640);
    swift_bridgeObjectRelease();
    type metadata accessor for ContactsError();
    lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (uint64_t (*)(uint64_t))type metadata accessor for ContactsError, (uint64_t)&protocol conformance descriptor for ContactsError);
    OUTLINED_FUNCTION_4_0();
    OUTLINED_FUNCTION_81_0();
    swift_willThrow();

    goto LABEL_35;
  }
  v184 = v1;
  v196 = v1 + 7;
  v29 = *(_QWORD *)(v0 + 256);
  v30 = (void *)IntentResolutionRecord.intent.getter();
  v191 = objc_msgSend(v30, (SEL)&selRef_contactAttributeToGet + 6);

  v31 = (void *)IntentResolutionRecord.intent.getter();
  v187 = objc_msgSend(v31, (SEL)&AgeDateTimeResolutionResult__metaData.base_prots + 3);

  v32 = (void *)IntentResolutionRecord.intentResponse.getter();
  v33 = OUTLINED_FUNCTION_83_0(v32);
  OUTLINED_FUNCTION_26_0();
  if (v29)
  {
    v34 = OUTLINED_FUNCTION_98_0();
    v36 = v35;
  }
  else
  {
    v34 = 0;
    v36 = 0;
  }
  v37 = (void *)OUTLINED_FUNCTION_50_4();
  v38 = OUTLINED_FUNCTION_83_0(v37);
  OUTLINED_FUNCTION_26_0();
  if (v29)
  {
    v29 = OUTLINED_FUNCTION_97_1();
    v40 = v39;
  }
  else
  {
    v40 = 0;
  }
  v42 = *(_QWORD *)(v0 + 256);
  v41 = *(_QWORD *)(v0 + 264);
  v195 = (_QWORD *)(v41 + 16);
  outlined init with copy of DeviceState(v41 + 16, v0 + 72);
  v43 = *(_QWORD *)(v41 + 104);
  *(_QWORD *)(v0 + 136) = &type metadata for InstalledAppsProvider;
  *(_QWORD *)(v0 + 144) = &protocol witness table for InstalledAppsProvider;
  *(_QWORD *)(v0 + 16) = v5;
  *(_QWORD *)(v0 + 24) = v191;
  *(_QWORD *)(v0 + 32) = v187;
  *(_QWORD *)(v0 + 40) = v34;
  *(_QWORD *)(v0 + 48) = v36;
  *(_QWORD *)(v0 + 56) = v29;
  *(_QWORD *)(v0 + 64) = v40;
  *(_QWORD *)(v0 + 152) = v43;
  v44 = v5;
  swift_retain();
  specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:)();
  *(_QWORD *)(v0 + 904) = v45;
  outlined destroy of ModifyContactAttributeViewBuilder((id *)(v0 + 16));
  objc_msgSend((id)IntentResolutionRecord.intent.getter(), sel_contactAttributeToModify);
  OUTLINED_FUNCTION_26_0();
  if (v42 != 6)
  {
    if (v42 != 10)
    {
      v64 = *(_QWORD *)(v0 + 688);
      v65 = *(_QWORD *)(v0 + 648);
      v66 = *(_QWORD *)(v0 + 640);
      swift_bridgeObjectRelease();
      type metadata accessor for ContactsError();
      lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (uint64_t (*)(uint64_t))type metadata accessor for ContactsError, (uint64_t)&protocol conformance descriptor for ContactsError);
      OUTLINED_FUNCTION_4_0();
      OUTLINED_FUNCTION_81_0();
      swift_willThrow();

LABEL_35:
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
      goto LABEL_36;
    }
    v46 = objc_msgSend((id)OUTLINED_FUNCTION_50_4(), sel_updatedRelationship);
    OUTLINED_FUNCTION_26_0();
    OUTLINED_FUNCTION_97_1();
    if (!v47)
    {
      static String.EMPTY.getter();
      OUTLINED_FUNCTION_79_1();
    }
    v86 = *(_QWORD *)(v0 + 640);
    v87 = *(_QWORD *)(v0 + 544);
    v89 = *(_QWORD *)(v0 + 312);
    v88 = *(_QWORD *)(v0 + 320);
    v90 = *(_QWORD *)(v0 + 304);
    v91 = *(_QWORD *)(v0 + 256);
    v92 = *(_QWORD *)(v0 + 264);
    OUTLINED_FUNCTION_17_4();
    __swift_storeEnumTagSinglePayload(v87, 1, 1, v86);
    OUTLINED_FUNCTION_77_2(v195);
    v93 = OUTLINED_FUNCTION_103_1();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v89 + 16))(v88, v91, v90);
    v95 = *(_QWORD *)(v0 + 312);
    v94 = *(id **)(v0 + 320);
    v96 = *(void **)(v0 + 304);
    if ((v93 & 1) != 0)
    {
      OUTLINED_FUNCTION_35_1(*(_QWORD *)(v0 + 320), *(uint64_t (**)(uint64_t, uint64_t))(v95 + 8));
      p_attr = (char **)(&stru_24E5C6FF8 + 8);
      v98 = v184;
    }
    else
    {
      v93 = OUTLINED_FUNCTION_94_1();
      v121 = objc_msgSend((id)v93, sel_modifyOperation);

      OUTLINED_FUNCTION_35_1((uint64_t)v94, *(uint64_t (**)(uint64_t, uint64_t))(v95 + 8));
      v122 = v121 == (id)3;
      p_attr = &stru_24E5C6FF8.attr;
      v98 = v184;
      if (!v122)
      {
LABEL_63:
        v137 = *(_QWORD *)(v0 + 688);
        v138 = *(_QWORD *)(v0 + 640);
        v139 = *(_QWORD *)(v0 + 528);
        v140 = *(_QWORD *)(v0 + 520);
        v141 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 648) + 16);
        v141(v139, *(_QWORD *)(v0 + 664), v138);
        OUTLINED_FUNCTION_49_4(v139);
        v141(v140, v137, v138);
        OUTLINED_FUNCTION_49_4(v140);
        OUTLINED_FUNCTION_77_2(v195);
        OUTLINED_FUNCTION_103_1();
        v142 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 912) = v142;
        *v142 = v0;
        v142[1] = ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
        OUTLINED_FUNCTION_76_2();
        return ModifyContactAttributeCATs.intentHandledModifyRelationship(updatedRelationship:contactName:modifyOperation:isVoiceMode:)(v143, v144, v145, v146, v147);
      }
    }
    v123 = (void *)OUTLINED_FUNCTION_91_1();
    v124 = outlined bridged method (ob) of @objc ModifyContactAttributeIntent.relatedSiriMatches.getter(v123);
    if (!v124)
      goto LABEL_58;
    OUTLINED_FUNCTION_52_2(v124);
    if (v93)
      OUTLINED_FUNCTION_29_6();
    v125 = v94[4];
    OUTLINED_FUNCTION_59_2();
    outlined bridged method (ob) of @objc INObject.identifier.getter(v96);
    if (!v127)
      goto LABEL_58;
    v128 = v126;
    v129 = v127;
    v130 = v98[10];
    v131 = v98[11];
    __swift_project_boxed_opaque_existential_1(v196, v130);
    v94 = (id *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v131 + 8))(v128, v129, v130, v131);
    swift_bridgeObjectRelease();
    if (v94)
    {
      v134 = (uint64_t *)(v0 + 608);
      v199 = *(_QWORD *)(v0 + 544);
      v176 = *(_QWORD *)(v0 + 480);
      v177 = *(_QWORD *)(v0 + 264);
      OUTLINED_FUNCTION_130();
      __swift_project_boxed_opaque_existential_1(v195, *(_QWORD *)(v92 + 40));
      v178 = v94;
      dispatch thunk of DeviceState.siriLocale.getter();
      v179 = *(void **)(v177 + 120);
      v180 = v179;
      DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v178, 0, v176, (uint64_t)v179);
      dispatch thunk of DialogPerson.fullName.getter();
      OUTLINED_FUNCTION_2();

      outlined destroy of UsoEntity_common_Person.DefinedValues?(v199, &demangling cache variable for type metadata for SpeakableString?);
    }
    else
    {
LABEL_58:
      v132 = objc_msgSend((id)OUTLINED_FUNCTION_50_4(), p_attr[265]);
      OUTLINED_FUNCTION_26_0();
      if (!v94 || (OUTLINED_FUNCTION_98_0(), !v133))
      {
        static String.EMPTY.getter();
        swift_bridgeObjectRelease();
      }
      v134 = (uint64_t *)(v0 + 536);
      v135 = *(_QWORD *)(v0 + 536);
      v136 = OUTLINED_FUNCTION_17_4();
      OUTLINED_FUNCTION_12_5(v136, &demangling cache variable for type metadata for SpeakableString?);
      OUTLINED_FUNCTION_49_4(v135);
    }
    outlined init with take of SpeakableString?(*v134, *(_QWORD *)(v0 + 544));
    goto LABEL_63;
  }
  v67 = (void *)OUTLINED_FUNCTION_91_1();
  outlined bridged method (ob) of @objc ModifyContactAttributeIntent.modifyNickName.getter(v67);
  v68 = v44;
  if (!v69)
    static String.EMPTY.getter();
  v197 = *(_QWORD *)(v0 + 688);
  v70 = *(_QWORD *)(v0 + 656);
  v71 = *(_QWORD *)(v0 + 640);
  v185 = *(_QWORD *)(v0 + 496);
  v189 = *(_QWORD *)(v0 + 648);
  v72 = *(_QWORD *)(v0 + 480);
  v193 = *(_QWORD *)(v0 + 488);
  v73 = *(_QWORD *)(v0 + 264);
  OUTLINED_FUNCTION_17_4();
  OUTLINED_FUNCTION_130();
  __swift_project_boxed_opaque_existential_1(v195, *(_QWORD *)(v73 + 40));
  v74 = v68;
  dispatch thunk of DeviceState.siriLocale.getter();
  v75 = *(void **)(v73 + 120);
  v76 = v75;
  DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v74, 0, v72, (uint64_t)v75);
  *(_QWORD *)(v0 + 928) = v77;
  DialogPerson.nickname.getter();
  dispatch thunk of DialogPerson.fullName.getter();
  v78 = *(void (**)(uint64_t, uint64_t, uint64_t))(v189 + 16);
  v78(v185, v70, v71);
  OUTLINED_FUNCTION_10_8(v185);
  v78(v193, v197, v71);
  OUTLINED_FUNCTION_10_8(v193);
  v79 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 936) = v79;
  *v79 = v0;
  v79[1] = ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  OUTLINED_FUNCTION_76_2();
  return ModifyContactAttributeCATs.intentHandledModifyNickname(updatedNickname:existingNickname:contactName:modifyOperation:)(v80, v81, v82, v83, v84);
}

{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_29_5();
  v1 = (void *)v0[91];
  v2 = (void *)v0[90];
  v4 = v0[50];
  v3 = v0[51];
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2();

  OUTLINED_FUNCTION_35_1(v3, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  _QWORD *v8;
  _QWORD *v10;

  OUTLINED_FUNCTION_51_3();
  v1 = v0[86];
  v2 = v0[85];
  v3 = v0[81];
  v4 = v0[80];
  v5 = v0[74];
  v6 = v0[73];
  v10 = (_QWORD *)(v0[33] + 16);
  OUTLINED_FUNCTION_17_4();
  type metadata accessor for ModifyContactAttributeCATsModern();
  static CATOption.defaultMode.getter();
  v0[94] = CATWrapperSimple.__allocating_init(options:globals:)();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v7(v5, v2, v4);
  OUTLINED_FUNCTION_68_3(v5);
  v7(v6, v1, v4);
  OUTLINED_FUNCTION_68_3(v6);
  OUTLINED_FUNCTION_77_2(v10);
  LOBYTE(v7) = OUTLINED_FUNCTION_103_1();
  v8 = (_QWORD *)swift_task_alloc();
  v0[95] = v8;
  *v8 = v0;
  v8[1] = ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  return ModifyContactAttributeCATsModern.intentHandledModifyRelationship(updatedRelationship:contactName:modifyOperation:isVoiceMode:)(v0[74], v0[77], v0[73], v7 & 1);
}

{
  uint64_t v0;
  char v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t ContactHandleIntentStrategy;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v22;

  OUTLINED_FUNCTION_51_3();
  MEMORY[0x2207D7DC0](*(id *)(v0 + 768));
  OUTLINED_FUNCTION_102_0();
  if (v1)
    OUTLINED_FUNCTION_55_2();
  v2 = *(void **)(v0 + 768);
  v3 = *(_QWORD *)(v0 + 680);
  v4 = *(_QWORD *)(v0 + 648);
  v5 = *(_QWORD *)(v0 + 640);
  v22 = *(_QWORD *)(v0 + 616);
  v6 = *(_QWORD *)(v0 + 448);
  v8 = *(_QWORD *)(v0 + 424);
  v7 = *(_QWORD *)(v0 + 432);
  OUTLINED_FUNCTION_100_0();
  specialized Array._endMutation()();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v22, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_60_1();
  v9 = type metadata accessor for ModifyContactAttributeSnippetModel();
  result = OUTLINED_FUNCTION_99_1(v9);
  if (v11)
  {
    __break(1u);
  }
  else
  {
    v12 = OUTLINED_FUNCTION_9_11();
    OUTLINED_FUNCTION_111_0(v12, *MEMORY[0x24BE91C88]);
    static DialogPhase.completion.getter();
    v13 = (_QWORD *)swift_task_alloc();
    v13[2] = v4;
    v13[3] = v8;
    v13[4] = v2;
    OUTLINED_FUNCTION_74_2();
    OUTLINED_FUNCTION_14_0();
    type metadata accessor for ResponseFactory();
    OUTLINED_FUNCTION_32_0();
    *(_QWORD *)(v0 + 880) = ResponseFactory.init()();
    *(_QWORD *)(v0 + 184) = v3;
    ContactHandleIntentStrategy = lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type ContactsSnippetPluginModel and conformance ContactsSnippetPluginModel, (uint64_t (*)(uint64_t))MEMORY[0x24BE91C90], MEMORY[0x24BE91C68]);
    v15 = OUTLINED_FUNCTION_93(ContactHandleIntentStrategy);
    OUTLINED_FUNCTION_70_2((uint64_t)v15);
    *(_QWORD *)(v0 + 888) = *(_QWORD *)(v0 + 240);
    v16 = (_QWORD *)OUTLINED_FUNCTION_56_1();
    *(_QWORD *)(v0 + 896) = v16;
    v17 = OUTLINED_FUNCTION_54_3(v16);
    return OUTLINED_FUNCTION_12_8(v17, v18, v19, v20, v21);
  }
  return result;
}

{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_51_3();
  OUTLINED_FUNCTION_29_5();
  v1 = (void *)v0[102];
  v2 = (void *)v0[101];
  v4 = v0[54];
  v3 = v0[55];
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2();

  OUTLINED_FUNCTION_66_3();
  OUTLINED_FUNCTION_35_1(v3, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  OUTLINED_FUNCTION_20_0();
  return swift_task_switch();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;

  v6 = v0[81];
  v7 = v0[86];
  v1 = v0[80];
  v2 = v0[71];
  v3 = v0[69];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_17_4();
  type metadata accessor for ModifyContactAttributeCATsModern();
  static CATOption.defaultMode.getter();
  v0[105] = CATWrapperSimple.__allocating_init(options:globals:)();
  OUTLINED_FUNCTION_17_4();
  OUTLINED_FUNCTION_10_8(v2);
  dispatch thunk of DialogPerson.fullName.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v7, v1);
  OUTLINED_FUNCTION_10_8(v3);
  v4 = (_QWORD *)swift_task_alloc();
  v0[106] = (uint64_t)v4;
  *v4 = v0;
  v4[1] = ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:);
  return ModifyContactAttributeCATsModern.intentHandledModifyNickname(updatedNickname:existingNickname:contactName:modifyOperation:)(v0[71], v0[72], v0[70], v0[69]);
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t ContactHandleIntentStrategy;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);

  OUTLINED_FUNCTION_51_3();
  MEMORY[0x2207D7DC0](*(id *)(v0 + 856));
  OUTLINED_FUNCTION_102_0();
  if (v2)
    OUTLINED_FUNCTION_55_2();
  v3 = *(void **)(v0 + 856);
  v4 = *(_QWORD *)(v0 + 784);
  v5 = *(_QWORD *)(v0 + 672);
  v6 = *(_QWORD *)(v0 + 648);
  v7 = *(_QWORD *)(v0 + 576);
  OUTLINED_FUNCTION_100_0();
  specialized Array._endMutation()();
  swift_release();

  OUTLINED_FUNCTION_87_1(v5);
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v7, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_60_1();
  v8 = type metadata accessor for ModifyContactAttributeSnippetModel();
  result = OUTLINED_FUNCTION_99_1(v8);
  if (v10)
  {
    __break(1u);
  }
  else
  {
    v11 = OUTLINED_FUNCTION_9_11();
    OUTLINED_FUNCTION_111_0(v11, *MEMORY[0x24BE91C88]);
    static DialogPhase.completion.getter();
    v12 = (_QWORD *)swift_task_alloc();
    v12[2] = v1;
    v12[3] = v6;
    v12[4] = v3;
    OUTLINED_FUNCTION_74_2();
    OUTLINED_FUNCTION_14_0();
    type metadata accessor for ResponseFactory();
    OUTLINED_FUNCTION_32_0();
    *(_QWORD *)(v0 + 880) = ResponseFactory.init()();
    *(_QWORD *)(v0 + 184) = v4;
    ContactHandleIntentStrategy = lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type ContactsSnippetPluginModel and conformance ContactsSnippetPluginModel, (uint64_t (*)(uint64_t))MEMORY[0x24BE91C90], MEMORY[0x24BE91C68]);
    v14 = OUTLINED_FUNCTION_93(ContactHandleIntentStrategy);
    OUTLINED_FUNCTION_70_2((uint64_t)v14);
    *(_QWORD *)(v0 + 888) = *(_QWORD *)(v0 + 240);
    v15 = (_QWORD *)OUTLINED_FUNCTION_56_1();
    *(_QWORD *)(v0 + 896) = v15;
    v16 = OUTLINED_FUNCTION_54_3(v15);
    return OUTLINED_FUNCTION_12_8(v16, v17, v18, v19, v20);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_29_5();
  v1 = v0 + 160;
  OUTLINED_FUNCTION_3_0();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0(v1);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_14_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);

  OUTLINED_FUNCTION_85_1();
  v6 = *(void (**)(uint64_t, uint64_t))(v0 + 872);
  v1 = *(_QWORD *)(v0 + 688);
  v2 = *(_QWORD *)(v0 + 640);
  v3 = *(_QWORD *)(v0 + 632);
  v4 = *(_QWORD *)(v0 + 344);

  OUTLINED_FUNCTION_92_1(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v3, &demangling cache variable for type metadata for ModifyContactAttributeSnippetModel?);
  v6(v1, v2);
  OUTLINED_FUNCTION_66_3();
  OUTLINED_FUNCTION_1_9();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_35_3();
  OUTLINED_FUNCTION_34_2();
  OUTLINED_FUNCTION_32_5();
  OUTLINED_FUNCTION_31_6();
  OUTLINED_FUNCTION_30_5();
  OUTLINED_FUNCTION_29_7();
  OUTLINED_FUNCTION_28_6();
  OUTLINED_FUNCTION_27_6();
  OUTLINED_FUNCTION_26_7();
  OUTLINED_FUNCTION_25_10();
  OUTLINED_FUNCTION_24_9();
  OUTLINED_FUNCTION_16_4();
  OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_43_1();
  return OUTLINED_FUNCTION_5_8(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *v1;
  *(_QWORD *)(*v1 + 920) = v0;
  swift_task_dealloc();
  if (v0)
  {
    v3 = *(_QWORD *)(v2 + 528);
    v4 = *(_QWORD *)(v2 + 520);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_13_2(v4);
    OUTLINED_FUNCTION_13_2(v3);
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 528);
    OUTLINED_FUNCTION_58_2(*(_QWORD *)(v2 + 520));
    OUTLINED_FUNCTION_58_2(v5);
  }
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_14_1();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_85_1();
  v1 = *(_QWORD *)(v0 + 904);
  v2 = *(void **)(v0 + 696);
  v11 = *(_QWORD *)(v0 + 664);
  v12 = *(_QWORD *)(v0 + 688);
  v3 = *(_QWORD *)(v0 + 544);
  v4 = *(_QWORD *)(v0 + 296);
  v6 = *(_QWORD *)(v0 + 272);
  v5 = *(_QWORD *)(v0 + 280);
  v7 = *(uint64_t **)(v0 + 248);
  v8 = type metadata accessor for AceOutput();
  v9 = MEMORY[0x24BE99088];
  v7[3] = v8;
  v7[4] = v9;
  __swift_allocate_boxed_opaque_existential_1(v7);
  ModifyContactAttributeHandleIntentStrategy.intentHandledOutput(templateResult:views:meCard:)(v4, v1, (uint64_t)v2);
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v3, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_87_1(v11);
  OUTLINED_FUNCTION_87_1(v12);
  OUTLINED_FUNCTION_1_9();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_35_3();
  OUTLINED_FUNCTION_34_2();
  OUTLINED_FUNCTION_32_5();
  OUTLINED_FUNCTION_31_6();
  OUTLINED_FUNCTION_30_5();
  OUTLINED_FUNCTION_29_7();
  OUTLINED_FUNCTION_28_6();
  OUTLINED_FUNCTION_27_6();
  OUTLINED_FUNCTION_26_7();
  OUTLINED_FUNCTION_25_10();
  OUTLINED_FUNCTION_24_9();
  OUTLINED_FUNCTION_16_4();
  OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_43_1();
  return OUTLINED_FUNCTION_5_8(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *v1;
  *(_QWORD *)(*v1 + 944) = v0;
  swift_task_dealloc();
  if (v0)
  {
    v5 = v2 + 488;
    v3 = *(_QWORD *)(v2 + 488);
    v4 = *(_QWORD *)(v5 + 8);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_13_2(v3);
    OUTLINED_FUNCTION_13_2(v4);
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 496);
    OUTLINED_FUNCTION_58_2(*(_QWORD *)(v2 + 488));
    OUTLINED_FUNCTION_58_2(v6);
  }
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_14_1();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_85_1();
  v1 = *(_QWORD *)(v0 + 904);
  v2 = *(void **)(v0 + 696);
  v15 = *(_QWORD *)(v0 + 656);
  v16 = *(_QWORD *)(v0 + 688);
  v3 = *(_QWORD *)(v0 + 640);
  v13 = *(_QWORD *)(v0 + 512);
  v14 = *(_QWORD *)(v0 + 648);
  v12 = *(_QWORD *)(v0 + 504);
  v5 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 288);
  v6 = *(_QWORD *)(v0 + 272);
  v7 = *(uint64_t **)(v0 + 248);
  v8 = type metadata accessor for AceOutput();
  v9 = MEMORY[0x24BE99088];
  v7[3] = v8;
  v7[4] = v9;
  __swift_allocate_boxed_opaque_existential_1(v7);
  ModifyContactAttributeHandleIntentStrategy.intentHandledOutput(templateResult:views:meCard:)(v4, v1, (uint64_t)v2);
  swift_bridgeObjectRelease();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v12, &demangling cache variable for type metadata for SpeakableString?);
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v13, &demangling cache variable for type metadata for SpeakableString?);
  v10 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v10(v15, v3);
  v10(v16, v3);
  OUTLINED_FUNCTION_1_9();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_35_3();
  OUTLINED_FUNCTION_34_2();
  OUTLINED_FUNCTION_32_5();
  OUTLINED_FUNCTION_31_6();
  OUTLINED_FUNCTION_30_5();
  OUTLINED_FUNCTION_29_7();
  OUTLINED_FUNCTION_28_6();
  OUTLINED_FUNCTION_27_6();
  OUTLINED_FUNCTION_26_7();
  OUTLINED_FUNCTION_25_10();
  OUTLINED_FUNCTION_24_9();
  OUTLINED_FUNCTION_16_4();
  OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_43_1();
  return OUTLINED_FUNCTION_5_8(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);

  OUTLINED_FUNCTION_13_11();
  v1 = *(_QWORD *)(v0 + 688);
  v2 = *(_QWORD *)(v0 + 680);
  v3 = *(_QWORD *)(v0 + 648);
  v4 = *(_QWORD *)(v0 + 640);
  v5 = *(_QWORD *)(v0 + 432);

  v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v6(v2, v4);
  v7 = OUTLINED_FUNCTION_92_1(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  v8 = OUTLINED_FUNCTION_88(v7, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_5(v8, &demangling cache variable for type metadata for ModifyContactAttributeSnippetModel?);
  v6(v1, v4);
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_35_3();
  OUTLINED_FUNCTION_34_2();
  OUTLINED_FUNCTION_32_5();
  OUTLINED_FUNCTION_31_6();
  OUTLINED_FUNCTION_30_5();
  OUTLINED_FUNCTION_29_7();
  OUTLINED_FUNCTION_63_2();
  OUTLINED_FUNCTION_62_1();
  OUTLINED_FUNCTION_28_6();
  OUTLINED_FUNCTION_27_6();
  OUTLINED_FUNCTION_26_7();
  OUTLINED_FUNCTION_25_10();
  OUTLINED_FUNCTION_24_9();
  OUTLINED_FUNCTION_16_4();
  OUTLINED_FUNCTION_38_1();
  v9 = (uint64_t (*)(void))OUTLINED_FUNCTION_101_1();
  return OUTLINED_FUNCTION_2_11(v9);
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);

  OUTLINED_FUNCTION_13_11();
  v1 = (void *)v0[87];
  v2 = v0[86];
  v3 = v0[84];
  v4 = v0[81];
  v5 = v0[80];
  swift_release();

  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  v7 = v6(v3, v5);
  v8 = OUTLINED_FUNCTION_88(v7, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_12_5(v8, &demangling cache variable for type metadata for ModifyContactAttributeSnippetModel?);
  v6(v2, v5);
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_35_3();
  OUTLINED_FUNCTION_34_2();
  OUTLINED_FUNCTION_32_5();
  OUTLINED_FUNCTION_31_6();
  OUTLINED_FUNCTION_30_5();
  OUTLINED_FUNCTION_29_7();
  OUTLINED_FUNCTION_63_2();
  OUTLINED_FUNCTION_62_1();
  OUTLINED_FUNCTION_28_6();
  OUTLINED_FUNCTION_27_6();
  OUTLINED_FUNCTION_26_7();
  OUTLINED_FUNCTION_25_10();
  OUTLINED_FUNCTION_24_9();
  OUTLINED_FUNCTION_16_4();
  OUTLINED_FUNCTION_38_1();
  v9 = (uint64_t (*)(void))OUTLINED_FUNCTION_101_1();
  return OUTLINED_FUNCTION_2_11(v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_13_11();
  v1 = *(_QWORD *)(v0 + 688);
  v2 = *(_QWORD *)(v0 + 664);

  OUTLINED_FUNCTION_12_5(v3, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16_3(v2);
  OUTLINED_FUNCTION_16_3(v1);
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_35_3();
  OUTLINED_FUNCTION_34_2();
  OUTLINED_FUNCTION_32_5();
  OUTLINED_FUNCTION_31_6();
  OUTLINED_FUNCTION_30_5();
  OUTLINED_FUNCTION_29_7();
  OUTLINED_FUNCTION_63_2();
  OUTLINED_FUNCTION_62_1();
  OUTLINED_FUNCTION_28_6();
  OUTLINED_FUNCTION_27_6();
  OUTLINED_FUNCTION_26_7();
  OUTLINED_FUNCTION_25_10();
  OUTLINED_FUNCTION_24_9();
  OUTLINED_FUNCTION_16_4();
  OUTLINED_FUNCTION_38_1();
  v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_101_1();
  return OUTLINED_FUNCTION_2_11(v4);
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  OUTLINED_FUNCTION_13_11();
  v1 = (void *)v0[87];
  v2 = v0[86];
  v3 = v0[82];
  v5 = v0[63];
  v4 = v0[64];
  swift_release();

  outlined destroy of UsoEntity_common_Person.DefinedValues?(v5, &demangling cache variable for type metadata for SpeakableString?);
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v4, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_16_3(v3);
  OUTLINED_FUNCTION_16_3(v2);
  OUTLINED_FUNCTION_0_11();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_35_3();
  OUTLINED_FUNCTION_34_2();
  OUTLINED_FUNCTION_32_5();
  OUTLINED_FUNCTION_31_6();
  OUTLINED_FUNCTION_30_5();
  OUTLINED_FUNCTION_29_7();
  OUTLINED_FUNCTION_63_2();
  OUTLINED_FUNCTION_62_1();
  OUTLINED_FUNCTION_28_6();
  OUTLINED_FUNCTION_27_6();
  OUTLINED_FUNCTION_26_7();
  OUTLINED_FUNCTION_25_10();
  OUTLINED_FUNCTION_24_9();
  OUTLINED_FUNCTION_16_4();
  OUTLINED_FUNCTION_38_1();
  v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_101_1();
  return OUTLINED_FUNCTION_2_11(v6);
}

uint64_t ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v4 = *v3;
  *(_QWORD *)(v4 + 768) = a1;
  *(_QWORD *)(v4 + 776) = v2;
  swift_task_dealloc();
  OUTLINED_FUNCTION_82_1();
  OUTLINED_FUNCTION_13_2(v1);
  if (v2)
  {
    OUTLINED_FUNCTION_13_2(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_13_2(0);
  }
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (_QWORD *)*v2;
  v3[107] = a1;
  v3[108] = v1;
  swift_task_dealloc();
  v4 = v3[71];
  v5 = v3[70];
  v6 = v3[69];
  swift_release();
  OUTLINED_FUNCTION_105_0(v6);
  OUTLINED_FUNCTION_105_0(v5);
  OUTLINED_FUNCTION_105_0(v4);
  if (v1)
    swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20_0();
  return swift_task_switch();
}

uint64_t closure #1 in ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  OutputGenerationManifest.canUseServerTTS.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  static ContactsContextProvider.handleGetContact(contact:needsSDA:)(a3, 0);
  v7 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v7);
  OutputGenerationManifest.nlContextUpdate.setter();
  ContactsSnippetPluginModel.responseViewID.getter();
  return OutputGenerationManifest.responseViewId.setter();
}

uint64_t ModifyContactAttributeHandleIntentStrategy.intentHandledOutput(templateResult:views:meCard:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v12[2];
  uint64_t v13;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ContactsContextProvider.handleGetContact(contact:needsSDA:)(a3, 0);
  type metadata accessor for NLContextUpdate();
  v7 = OUTLINED_FUNCTION_69_3();
  __swift_storeEnumTagSinglePayload(v7, v8, v9, v10);
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  return OUTLINED_FUNCTION_58_2((uint64_t)v6);
}

uint64_t type metadata accessor for ModifyContactAttributeHandleIntentStrategy()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ModifyContactAttributeHandleIntentStrategy;
  if (!type metadata singleton initialization cache for ModifyContactAttributeHandleIntentStrategy)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:) in conformance ModifyContactAttributeHandleIntentStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for ModifyContactAttributeHandleIntentStrategy();
  *v1 = v0;
  v1[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactAttributeHandleIntentStrategy;
  return HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance ModifyContactAttributeHandleIntentStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for ModifyContactAttributeHandleIntentStrategy();
  *v1 = v0;
  v1[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactAttributeHandleIntentStrategy;
  return HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:) in conformance ModifyContactAttributeHandleIntentStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for ModifyContactAttributeHandleIntentStrategy();
  *v1 = v0;
  v1[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactAttributeHandleIntentStrategy;
  return HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:) in conformance ModifyContactAttributeHandleIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactAttributeHandleIntentStrategy;
  return ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(a1, a2);
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:) in conformance ModifyContactAttributeHandleIntentStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for ModifyContactAttributeHandleIntentStrategy();
  *v1 = v0;
  v1[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactAttributeHandleIntentStrategy;
  return HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:) in conformance ModifyContactAttributeHandleIntentStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for ModifyContactAttributeHandleIntentStrategy();
  *v1 = v0;
  v1[1] = protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactAttributeHandleIntentStrategy;
  return HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance ModifyContactAttributeHandleIntentStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for ModifyContactAttributeHandleIntentStrategy();
  *v1 = v0;
  v1[1] = protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance GetContactAttributeHandleIntentStrategy;
  return HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:)();
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance ModifyContactAttributeHandleIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance GetContactAttributeHandleIntentStrategy;
  return ModifyContactAttributeHandleIntentStrategy.makeIntentExecutionBehavior(app:intent:)(a1, a2);
}

uint64_t base witness table accessor for IntentExtensionCommunicatingAsync in ModifyContactAttributeHandleIntentStrategy()
{
  return lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type ModifyContactAttributeHandleIntentStrategy and conformance ModifyContactAttributeHandleIntentStrategy, (uint64_t (*)(uint64_t))type metadata accessor for ModifyContactAttributeHandleIntentStrategy, (uint64_t)&protocol conformance descriptor for ModifyContactAttributeHandleIntentStrategy);
}

id *outlined destroy of ModifyContactAttributeViewBuilder(id *a1)
{
  destroy for ModifyContactAttributeViewBuilder(a1);
  return a1;
}

uint64_t outlined init with copy of ModifyContactAttributeSnippetModel?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifyContactAttributeSnippetModel?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ModifyContactAttributeHandleIntentStrategy.makeIntentHandledResponse(rchRecord:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t OUTLINED_FUNCTION_0_11()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v0[48];
  *(_QWORD *)(v1 - 152) = v0[51];
  *(_QWORD *)(v1 - 144) = v2;
  v3 = v0[44];
  *(_QWORD *)(v1 - 136) = v0[47];
  *(_QWORD *)(v1 - 128) = v3;
  v4 = v0[40];
  *(_QWORD *)(v1 - 120) = v0[41];
  *(_QWORD *)(v1 - 112) = v4;
  v5 = v0[36];
  *(_QWORD *)(v1 - 104) = v0[37];
  *(_QWORD *)(v1 - 96) = v5;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_1_9()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v0[48];
  *(_QWORD *)(v1 - 144) = v0[51];
  *(_QWORD *)(v1 - 136) = v2;
  v3 = v0[44];
  *(_QWORD *)(v1 - 128) = v0[47];
  *(_QWORD *)(v1 - 120) = v3;
  v4 = v0[40];
  *(_QWORD *)(v1 - 112) = v0[41];
  *(_QWORD *)(v1 - 104) = v4;
  v5 = v0[36];
  *(_QWORD *)(v1 - 96) = v0[37];
  *(_QWORD *)(v1 - 88) = v5;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_2_11(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_5_8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_9_11()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 32))(*(_QWORD *)(v1 + 376), *(_QWORD *)(v1 + 624), v0);
}

uint64_t OUTLINED_FUNCTION_10_8(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_12_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t OUTLINED_FUNCTION_16_4()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_24_9()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_25_10()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_26_7()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_27_6()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_28_6()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_29_7()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_30_5()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_31_6()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_32_5()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_34_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_35_3()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_49_4(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_50_4()
{
  return IntentResolutionRecord.intentResponse.getter();
}

uint64_t OUTLINED_FUNCTION_52_2(uint64_t a1)
{
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (a1 & 0xC000000000000001) == 0, a1);
}

uint64_t OUTLINED_FUNCTION_54_3(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 248);
}

uint64_t OUTLINED_FUNCTION_55_2()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_56_1()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_58_2(uint64_t a1)
{
  uint64_t *v1;

  return outlined destroy of UsoEntity_common_Person.DefinedValues?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_59_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_60_1()
{
  uint64_t v0;
  uint64_t *v1;

  v1[109] = v0;
  return outlined init with copy of ModifyContactAttributeSnippetModel?(v1[79], v1[78]);
}

uint64_t OUTLINED_FUNCTION_62_1()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_63_2()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_66_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_68_3(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(a1, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_69_3()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_70_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(a1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_74_2()
{
  return OutputGenerationManifest.init(dialogPhase:_:)();
}

uint64_t OUTLINED_FUNCTION_77_2(_QWORD *a1)
{
  uint64_t v1;

  __swift_project_boxed_opaque_existential_1(a1, v1);
  return v1;
}

uint64_t OUTLINED_FUNCTION_79_1()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_80_1()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_81_0()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_82_1()
{
  return swift_release();
}

id OUTLINED_FUNCTION_83_0(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, (SEL)(v1 + 1293));
}

uint64_t OUTLINED_FUNCTION_86_0()
{
  return CATWrapperSimple.__allocating_init(options:globals:)();
}

uint64_t OUTLINED_FUNCTION_87_1(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_88(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return outlined destroy of UsoEntity_common_Person.DefinedValues?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_91_1()
{
  return IntentResolutionRecord.intent.getter();
}

uint64_t OUTLINED_FUNCTION_92_1@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t *OUTLINED_FUNCTION_93(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 192) = a1;
  return __swift_allocate_boxed_opaque_existential_1(v1);
}

uint64_t OUTLINED_FUNCTION_94_1()
{
  return IntentResolutionRecord.intent.getter();
}

uint64_t OUTLINED_FUNCTION_97_1()
{
  void *v0;

  return outlined bridged method (ob) of @objc ContactRelation.relationship.getter(v0);
}

uint64_t OUTLINED_FUNCTION_98_0()
{
  void *v0;

  return outlined bridged method (ob) of @objc ContactRelation.relatedFullName.getter(v0);
}

uint64_t OUTLINED_FUNCTION_99_1(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_100_0()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t OUTLINED_FUNCTION_101_1()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t OUTLINED_FUNCTION_103_1()
{
  return DeviceState.isVox.getter();
}

uint64_t OUTLINED_FUNCTION_105_0(uint64_t a1)
{
  uint64_t *v1;

  return outlined destroy of UsoEntity_common_Person.DefinedValues?(a1, v1);
}

uint64_t GetContactAttributeCATsModern.intentHandledResponse(matches:alternatives:attribute:contact:isMe:localeString:isVoiceMode:mockGlobals:isModern:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  *(_QWORD *)(v9 + 248) = v12;
  *(_QWORD *)(v9 + 256) = v8;
  *(_BYTE *)(v9 + 505) = a8;
  *(_QWORD *)(v9 + 232) = a6;
  *(_QWORD *)(v9 + 240) = a7;
  *(_BYTE *)(v9 + 504) = a5;
  *(_QWORD *)(v9 + 216) = a3;
  *(_QWORD *)(v9 + 224) = a4;
  *(_QWORD *)(v9 + 200) = a1;
  *(_QWORD *)(v9 + 208) = a2;
  v10 = type metadata accessor for SpeakableString();
  *(_QWORD *)(v9 + 264) = v10;
  *(_QWORD *)(v9 + 272) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v9 + 280) = OUTLINED_FUNCTION_0_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(_QWORD *)(v9 + 288) = OUTLINED_FUNCTION_25_0();
  *(_QWORD *)(v9 + 296) = OUTLINED_FUNCTION_25_0();
  *(_QWORD *)(v9 + 304) = OUTLINED_FUNCTION_25_0();
  *(_QWORD *)(v9 + 312) = OUTLINED_FUNCTION_25_0();
  *(_QWORD *)(v9 + 320) = OUTLINED_FUNCTION_25_0();
  *(_QWORD *)(v9 + 328) = OUTLINED_FUNCTION_25_0();
  *(_QWORD *)(v9 + 336) = OUTLINED_FUNCTION_25_0();
  type metadata accessor for Locale();
  *(_QWORD *)(v9 + 344) = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return swift_task_switch();
}

#error "21FE3C76C: call analysis failed (funcsize=467)"

uint64_t GetContactAttributeCATsModern.intentHandledResponse(matches:alternatives:attribute:contact:isMe:localeString:isVoiceMode:mockGlobals:isModern:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v3 = (_QWORD *)*v2;
  v3[2] = v2;
  v3[3] = a1;
  v3[4] = v1;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_67_1();
  if (v1)
    OUTLINED_FUNCTION_28_7();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_7_9();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v5 = v3;
  v3[5] = v2;
  v3[6] = a1;
  v3[7] = v1;
  OUTLINED_FUNCTION_12_9(&v5);
  swift_release();
  OUTLINED_FUNCTION_49();
  if (v1)
    OUTLINED_FUNCTION_28_7();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_14_1();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v5 = v3;
  v3[11] = v2;
  v3[12] = a1;
  v3[13] = v1;
  OUTLINED_FUNCTION_12_9(&v5);
  if (v1)
  {
    OUTLINED_FUNCTION_67_1();
    OUTLINED_FUNCTION_28_7();
    OUTLINED_FUNCTION_44_4();
  }
  else
  {
    OUTLINED_FUNCTION_44_4();
    OUTLINED_FUNCTION_67_1();
  }
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_14_1();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;

  v3 = (_QWORD *)*v2;
  v5 = v3;
  v3[14] = v2;
  v3[15] = a1;
  v3[16] = v1;
  OUTLINED_FUNCTION_12_9(&v5);
  if (v1)
  {
    OUTLINED_FUNCTION_67_1();
    OUTLINED_FUNCTION_28_7();
    OUTLINED_FUNCTION_44_4();
  }
  else
  {
    OUTLINED_FUNCTION_44_4();
    OUTLINED_FUNCTION_67_1();
  }
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_14_1();
}

#error "21FE3CD04: call analysis failed (funcsize=21)"

uint64_t GetContactAttributeCATsModern.intentHandledResponse(matches:alternatives:attribute:contact:isMe:localeString:isVoiceMode:mockGlobals:isModern:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_52_0();
  OUTLINED_FUNCTION_31_3();
  OUTLINED_FUNCTION_25_7();
  v0 = OUTLINED_FUNCTION_6_7();
  OUTLINED_FUNCTION_60_2(v0, v1);
  OUTLINED_FUNCTION_4_10(v2, 0xD000000000000028);
  OUTLINED_FUNCTION_2_12();
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_48_4();
  return OUTLINED_FUNCTION_2_0(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_52_0();
  OUTLINED_FUNCTION_31_3();
  OUTLINED_FUNCTION_25_7();
  v0 = OUTLINED_FUNCTION_6_7();
  OUTLINED_FUNCTION_60_2(v0, v1);
  OUTLINED_FUNCTION_4_10(v2, 0xD00000000000002DLL);
  OUTLINED_FUNCTION_2_12();
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_48_4();
  return OUTLINED_FUNCTION_2_0(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  OUTLINED_FUNCTION_73_2();
  OUTLINED_FUNCTION_56_2(v1);
  OUTLINED_FUNCTION_12_9(v2);
  if (v0)
  {
    OUTLINED_FUNCTION_66();
    OUTLINED_FUNCTION_55_1();
    OUTLINED_FUNCTION_5_0();
    OUTLINED_FUNCTION_28_7();
    OUTLINED_FUNCTION_31_7();
  }
  else
  {
    OUTLINED_FUNCTION_31_7();
    OUTLINED_FUNCTION_66();
    OUTLINED_FUNCTION_55_1();
    OUTLINED_FUNCTION_5_0();
  }
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_14_10();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_52_0();
  OUTLINED_FUNCTION_31_3();
  OUTLINED_FUNCTION_25_7();
  v0 = OUTLINED_FUNCTION_6_7();
  OUTLINED_FUNCTION_62_2(v0, v1);
  OUTLINED_FUNCTION_4_10(v2, v3);
  OUTLINED_FUNCTION_2_12();
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_48_4();
  return OUTLINED_FUNCTION_2_0(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_52_0();
  OUTLINED_FUNCTION_31_3();
  OUTLINED_FUNCTION_25_7();
  v0 = OUTLINED_FUNCTION_6_7();
  OUTLINED_FUNCTION_60_2(v0, v1);
  OUTLINED_FUNCTION_4_10(v2, 0xD000000000000029);
  OUTLINED_FUNCTION_2_12();
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_48_4();
  return OUTLINED_FUNCTION_2_0(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_52_0();
  OUTLINED_FUNCTION_31_3();
  OUTLINED_FUNCTION_25_7();
  v0 = OUTLINED_FUNCTION_6_7();
  OUTLINED_FUNCTION_61_1(v0, v1);
  OUTLINED_FUNCTION_4_10(v2, v3);
  OUTLINED_FUNCTION_2_12();
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_48_4();
  return OUTLINED_FUNCTION_2_0(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  OUTLINED_FUNCTION_73_2();
  OUTLINED_FUNCTION_45_4();
  v2[17] = v1;
  v2[18] = v3;
  v2[19] = v0;
  OUTLINED_FUNCTION_12_9(v4);
  if (v0)
  {
    OUTLINED_FUNCTION_66();
    OUTLINED_FUNCTION_55_1();
    OUTLINED_FUNCTION_5_0();
    OUTLINED_FUNCTION_28_7();
    OUTLINED_FUNCTION_31_7();
  }
  else
  {
    OUTLINED_FUNCTION_31_7();
    OUTLINED_FUNCTION_66();
    OUTLINED_FUNCTION_55_1();
    OUTLINED_FUNCTION_5_0();
  }
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_14_10();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_52_0();
  OUTLINED_FUNCTION_31_3();
  OUTLINED_FUNCTION_25_7();
  v0 = OUTLINED_FUNCTION_6_7();
  OUTLINED_FUNCTION_62_2(v0, v1);
  OUTLINED_FUNCTION_4_10(v2, v3);
  OUTLINED_FUNCTION_2_12();
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_48_4();
  return OUTLINED_FUNCTION_2_0(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  OUTLINED_FUNCTION_73_2();
  OUTLINED_FUNCTION_45_4();
  v2[20] = v1;
  v2[21] = v3;
  v2[22] = v0;
  OUTLINED_FUNCTION_12_9(v4);
  if (v0)
  {
    OUTLINED_FUNCTION_66();
    OUTLINED_FUNCTION_55_1();
    OUTLINED_FUNCTION_5_0();
    OUTLINED_FUNCTION_28_7();
    OUTLINED_FUNCTION_31_7();
  }
  else
  {
    OUTLINED_FUNCTION_31_7();
    OUTLINED_FUNCTION_66();
    OUTLINED_FUNCTION_55_1();
    OUTLINED_FUNCTION_5_0();
  }
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_14_10();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_52_0();
  OUTLINED_FUNCTION_31_3();
  OUTLINED_FUNCTION_25_7();
  v0 = OUTLINED_FUNCTION_6_7();
  OUTLINED_FUNCTION_61_1(v0, v1);
  OUTLINED_FUNCTION_4_10(v2, v3);
  OUTLINED_FUNCTION_2_12();
  OUTLINED_FUNCTION_49();
  OUTLINED_FUNCTION_37_4();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_48_4();
  return OUTLINED_FUNCTION_2_0(v4);
}

#error "21FE3CE3C: call analysis failed (funcsize=21)"

#error "21FE3CF80: call analysis failed (funcsize=21)"

#error "21FE3D0B8: call analysis failed (funcsize=21)"

#error "21FE3D1F8: call analysis failed (funcsize=21)"

#error "21FE3D33C: call analysis failed (funcsize=21)"

#error "21FE3D480: call analysis failed (funcsize=21)"

uint64_t GetContactAttributeCATsModern.disambiguateLabeledAttribute(matches:alternatives:attribute:contact:isMe:localeString:isVoiceMode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v9 + 144) = a7;
  *(_QWORD *)(v9 + 152) = v8;
  *(_BYTE *)(v9 + 257) = a8;
  *(_QWORD *)(v9 + 128) = a4;
  *(_QWORD *)(v9 + 136) = a6;
  *(_BYTE *)(v9 + 256) = a5;
  *(_QWORD *)(v9 + 112) = a2;
  *(_QWORD *)(v9 + 120) = a3;
  *(_QWORD *)(v9 + 104) = a1;
  type metadata accessor for Locale();
  *(_QWORD *)(v9 + 160) = OUTLINED_FUNCTION_0_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(_QWORD *)(v9 + 168) = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return swift_task_switch();
}

#error "21FE3D6C4: call analysis failed (funcsize=174)"

uint64_t GetContactAttributeCATsModern.disambiguateLabeledAttribute(matches:alternatives:attribute:contact:isMe:localeString:isVoiceMode:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  OUTLINED_FUNCTION_45_4();
  v2[2] = v1;
  v2[3] = v3;
  v2[4] = v0;
  OUTLINED_FUNCTION_12_9(v4);
  OUTLINED_FUNCTION_69_4();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_55_1();
  if (v0)
    OUTLINED_FUNCTION_28_7();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_7_9();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  OUTLINED_FUNCTION_68_4();
  OUTLINED_FUNCTION_44_4();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  v0 = OUTLINED_FUNCTION_36_0();
  return OUTLINED_FUNCTION_1_2(v0, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_73_2();
  OUTLINED_FUNCTION_31_3();
  OUTLINED_FUNCTION_59_3();
  v0 = OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_67_3(v0, v1);
  OUTLINED_FUNCTION_26_8(v2, v3);
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_31_7();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_71_2();
  return OUTLINED_FUNCTION_25_8(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  OUTLINED_FUNCTION_45_4();
  v2[5] = v1;
  v2[6] = v3;
  v2[7] = v0;
  OUTLINED_FUNCTION_12_9(v4);
  OUTLINED_FUNCTION_69_4();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_55_1();
  if (v0)
    OUTLINED_FUNCTION_28_7();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_7_9();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  OUTLINED_FUNCTION_68_4();
  OUTLINED_FUNCTION_44_4();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  v0 = OUTLINED_FUNCTION_36_0();
  return OUTLINED_FUNCTION_1_2(v0, v1);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_73_2();
  OUTLINED_FUNCTION_31_3();
  OUTLINED_FUNCTION_59_3();
  v0 = OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_67_3(v0, v1);
  OUTLINED_FUNCTION_26_8(v2, v3);
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_31_7();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_71_2();
  return OUTLINED_FUNCTION_25_8(v4);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  OUTLINED_FUNCTION_68_4();
  OUTLINED_FUNCTION_44_4();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  v0 = OUTLINED_FUNCTION_36_0();
  return OUTLINED_FUNCTION_1_2(v0, v1);
}

{
  _QWORD *v0;
  uint64_t (*v1)(void);

  OUTLINED_FUNCTION_73_2();
  OUTLINED_FUNCTION_31_3();
  OUTLINED_FUNCTION_59_3();
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_26_8(v0, 0xD000000000000027);
  OUTLINED_FUNCTION_34_3();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_31_7();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_71_2();
  return OUTLINED_FUNCTION_25_8(v1);
}

uint64_t GetContactAttributeCATsModern.disambiguateLabeledAttribute(matches:alternatives:attribute:contact:isMe:localeString:isVoiceMode:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  OUTLINED_FUNCTION_56_2(a1);
  OUTLINED_FUNCTION_12_9(v2);
  OUTLINED_FUNCTION_69_4();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_55_1();
  if (v1)
    OUTLINED_FUNCTION_28_7();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_7_9();
}

uint64_t GetContactAttributeCATsModern.hasSameLabels(matches:alternatives:)(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if (!a1)
    goto LABEL_8;
  if (!(a1 >> 62))
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_4;
LABEL_8:
    if (a2)
    {
      if (a2 >> 62)
      {
        swift_bridgeObjectRetain();
        v10 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v10)
          goto LABEL_16;
        swift_bridgeObjectRetain();
        v8 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v8)
          goto LABEL_16;
      }
      if (v8 >= 2)
      {
        v5 = swift_bridgeObjectRetain();
        v6 = a2;
        goto LABEL_13;
      }
    }
LABEL_16:
    v9 = 0;
    return v9 & 1;
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v7)
    goto LABEL_8;
  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_4:
  if (v4 < 2)
    goto LABEL_16;
  v5 = swift_bridgeObjectRetain();
  v6 = a1;
LABEL_13:
  v9 = specialized Sequence.allSatisfy(_:)(v5, v6);
  return v9 & 1;
}

uint64_t GetContactAttributeCATsModern.hasAnyMatchingLabels(matches:alternatives:)(_QWORD *a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  uint64_t v62;
  _BOOL8 v63;
  uint64_t v64;
  char v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t result;
  _QWORD *v83;
  _QWORD *v84;

  if (a1)
    v3 = (unint64_t)a1;
  else
    v3 = MEMORY[0x24BEE4AF8];
  if (v3 >> 62)
    goto LABEL_57;
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  while (1)
  {
    v5 = MEMORY[0x24BEE4AF8];
    if (v4)
    {
      if (v4 < 1)
      {
        __break(1u);
        goto LABEL_59;
      }
      for (i = 0; i != v4; ++i)
      {
        if ((v3 & 0xC000000000000001) != 0)
          v7 = (id)MEMORY[0x2207D80C0](i, v3);
        else
          v7 = *(id *)(v3 + 8 * i + 32);
        v8 = v7;
        outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v7);
        if (v9)
        {
          v10 = String.sanitizeCNLabel.getter();
          v12 = v11;

          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v5 + 16) + 1, 1, v5);
            v5 = v16;
          }
          v14 = *(_QWORD *)(v5 + 16);
          v13 = *(_QWORD *)(v5 + 24);
          if (v14 >= v13 >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1, v5);
            v5 = v17;
          }
          *(_QWORD *)(v5 + 16) = v14 + 1;
          v15 = v5 + 16 * v14;
          *(_QWORD *)(v15 + 32) = v10;
          *(_QWORD *)(v15 + 40) = v12;
        }
        else
        {

        }
      }
    }
    swift_bridgeObjectRelease_n();
    v18 = *(_QWORD *)(v5 + 16);
    if (!v18)
      break;
    a2 = (_QWORD *)MEMORY[0x24BEE4B00];
    v83 = (_QWORD *)MEMORY[0x24BEE4B00];
    v19 = (uint64_t *)(v5 + 40);
    while (1)
    {
      v21 = *(v19 - 1);
      v20 = *v19;
      swift_bridgeObjectRetain_n();
      v23 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v20);
      v24 = a2[2];
      v25 = (v22 & 1) == 0;
      v26 = v24 + v25;
      if (__OFADD__(v24, v25))
        break;
      v27 = v22;
      if (a2[3] < v26)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v26, 1);
        a2 = v83;
        v28 = specialized __RawDictionaryStorage.find<A>(_:)(v21, v20);
        if ((v27 & 1) != (v29 & 1))
          goto LABEL_81;
        v23 = v28;
      }
      if ((v27 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v3 = a2[7];
        v30 = *(_QWORD *)(v3 + 8 * v23);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v3 + 8 * v23) = v30;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v30 + 16) + 1, 1, v30);
          v30 = v40;
          *(_QWORD *)(v3 + 8 * v23) = v40;
        }
        v33 = *(_QWORD *)(v30 + 16);
        v32 = *(_QWORD *)(v30 + 24);
        if (v33 >= v32 >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, v30);
          v30 = v41;
          *(_QWORD *)(v3 + 8 * v23) = v41;
        }
        *(_QWORD *)(v30 + 16) = v33 + 1;
        v34 = v30 + 16 * v33;
        *(_QWORD *)(v34 + 32) = v21;
        *(_QWORD *)(v34 + 40) = v20;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        v35 = swift_allocObject();
        *(_OWORD *)(v35 + 16) = xmmword_21FED8CB0;
        *(_QWORD *)(v35 + 32) = v21;
        *(_QWORD *)(v35 + 40) = v20;
        a2[(v23 >> 6) + 8] |= 1 << v23;
        v36 = (uint64_t *)(a2[6] + 16 * v23);
        *v36 = v21;
        v36[1] = v20;
        *(_QWORD *)(a2[7] + 8 * v23) = v35;
        v37 = a2[2];
        v38 = __OFADD__(v37, 1);
        v39 = v37 + 1;
        if (v38)
          goto LABEL_56;
        a2[2] = v39;
      }
      v19 += 2;
      if (!--v18)
        goto LABEL_76;
    }
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
  }
  swift_bridgeObjectRelease();
  if (a2)
    v3 = (unint64_t)a2;
  else
    v3 = MEMORY[0x24BEE4AF8];
  if (v3 >> 62)
  {
LABEL_59:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v42 = _CocoaArrayWrapper.endIndex.getter();
    if (v42)
      goto LABEL_41;
LABEL_60:
    v44 = MEMORY[0x24BEE4AF8];
    goto LABEL_61;
  }
  v42 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v42)
    goto LABEL_60;
LABEL_41:
  if (v42 < 1)
    goto LABEL_80;
  v43 = 0;
  v44 = MEMORY[0x24BEE4AF8];
  do
  {
    if ((v3 & 0xC000000000000001) != 0)
      v45 = (id)MEMORY[0x2207D80C0](v43, v3);
    else
      v45 = *(id *)(v3 + 8 * v43 + 32);
    v46 = v45;
    outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v45);
    if (v47)
    {
      v48 = String.sanitizeCNLabel.getter();
      v50 = v49;

      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v44 + 16) + 1, 1, v44);
        v44 = v54;
      }
      v52 = *(_QWORD *)(v44 + 16);
      v51 = *(_QWORD *)(v44 + 24);
      if (v52 >= v51 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1, v44);
        v44 = v55;
      }
      *(_QWORD *)(v44 + 16) = v52 + 1;
      v53 = v44 + 16 * v52;
      *(_QWORD *)(v53 + 32) = v48;
      *(_QWORD *)(v53 + 40) = v50;
    }
    else
    {

    }
    ++v43;
  }
  while (v42 != v43);
LABEL_61:
  swift_bridgeObjectRelease_n();
  v56 = *(_QWORD *)(v44 + 16);
  if (!v56)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  a2 = (_QWORD *)MEMORY[0x24BEE4B00];
  v84 = (_QWORD *)MEMORY[0x24BEE4B00];
  v57 = (uint64_t *)(v44 + 40);
  while (1)
  {
    v59 = *(v57 - 1);
    v58 = *v57;
    swift_bridgeObjectRetain_n();
    v61 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v58);
    v62 = a2[2];
    v63 = (v60 & 1) == 0;
    v64 = v62 + v63;
    if (__OFADD__(v62, v63))
      break;
    v65 = v60;
    if (a2[3] < v64)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v64, 1);
      a2 = v84;
      v66 = specialized __RawDictionaryStorage.find<A>(_:)(v59, v58);
      if ((v65 & 1) != (v67 & 1))
        goto LABEL_81;
      v61 = v66;
    }
    if ((v65 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v68 = a2[7];
      v69 = *(_QWORD *)(v68 + 8 * v61);
      v70 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v68 + 8 * v61) = v69;
      if ((v70 & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v69 + 16) + 1, 1, v69);
        v69 = v78;
        *(_QWORD *)(v68 + 8 * v61) = v78;
      }
      v72 = *(_QWORD *)(v69 + 16);
      v71 = *(_QWORD *)(v69 + 24);
      if (v72 >= v71 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v71 > 1, v72 + 1, 1, v69);
        v69 = v79;
        *(_QWORD *)(v68 + 8 * v61) = v79;
      }
      *(_QWORD *)(v69 + 16) = v72 + 1;
      v73 = v69 + 16 * v72;
      *(_QWORD *)(v73 + 32) = v59;
      *(_QWORD *)(v73 + 40) = v58;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v74 = swift_allocObject();
      *(_OWORD *)(v74 + 16) = xmmword_21FED8CB0;
      *(_QWORD *)(v74 + 32) = v59;
      *(_QWORD *)(v74 + 40) = v58;
      a2[(v61 >> 6) + 8] |= 1 << v61;
      v75 = (uint64_t *)(a2[6] + 16 * v61);
      *v75 = v59;
      v75[1] = v58;
      *(_QWORD *)(a2[7] + 8 * v61) = v74;
      v76 = a2[2];
      v38 = __OFADD__(v76, 1);
      v77 = v76 + 1;
      if (v38)
        goto LABEL_79;
      a2[2] = v77;
    }
    v57 += 2;
    if (!--v56)
    {
LABEL_76:
      swift_bridgeObjectRelease();
      v80 = specialized _NativeDictionary.filter(_:)((uint64_t)a2);
      swift_release();
      v81 = v80[2];
      swift_release();
      return v81 != 0;
    }
  }
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19SiriContactsIntents16ContactAttributeCG_AF0E13AddressHandleCs5NeverOTg506_sSq19def7SayAA16gh14CGRszlE02toB14i21Handles12localeStringn6AA0bG6J15CGSS_tFAhCXEfU_SSTf1cn_n(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  id v9;
  void *v10;
  void *v12;
  uint64_t v13;
  void *v14;

  if (a1 >> 62)
    goto LABEL_14;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v6)
  {
    while (1)
    {
      v14 = (void *)MEMORY[0x24BEE4AF8];
      result = specialized ContiguousArray.reserveCapacity(_:)();
      if (v6 < 0)
        break;
      v8 = 0;
      while (v6 != v8)
      {
        if ((a1 & 0xC000000000000001) != 0)
          v9 = (id)MEMORY[0x2207D80C0](v8, a1);
        else
          v9 = *(id *)(a1 + 8 * v8 + 32);
        v10 = v9;
        v12 = v9;
        closure #1 in Optional<A>.toContactsAddressHandles(localeString:)(&v12, a2, a3, &v13);

        if (v3)
        {
          OUTLINED_FUNCTION_167();
          swift_release();
          return (uint64_t)v10;
        }
        ++v8;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v6 == v8)
        {
          v10 = v14;
          OUTLINED_FUNCTION_167();
          return (uint64_t)v10;
        }
      }
      __break(1u);
LABEL_14:
      swift_bridgeObjectRetain();
      v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v6)
        goto LABEL_15;
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    OUTLINED_FUNCTION_167();
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t specialized Sequence.allSatisfy(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  void *v14;

  if (a1 >> 62)
    goto LABEL_16;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    v6 = 4;
    while (1)
    {
      v7 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x2207D80C0](v6 - 4, a1) : *(id *)(a1 + 8 * v6);
      v8 = v7;
      v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1))
        break;
      v14 = v7;
      closure #1 in implicit closure #1 in Array<A>.hasSameLabels.getter(&v14, a2);
      if (v2)
      {
        OUTLINED_FUNCTION_167();
        OUTLINED_FUNCTION_5();

        return v12 & 1;
      }
      v11 = v10;

      if ((v11 & 1) == 0)
      {
        OUTLINED_FUNCTION_167();
        OUTLINED_FUNCTION_5();
        v12 = 0;
        return v12 & 1;
      }
      ++v6;
      if (v9 == v5)
        goto LABEL_11;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  OUTLINED_FUNCTION_167();
  OUTLINED_FUNCTION_5();
  v12 = 1;
  return v12 & 1;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  _QWORD *v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  v36 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_39;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  if (!v10)
    goto LABEL_7;
LABEL_6:
  v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v18)) + (v13 << 6))
  {
    v20 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * i);
    v22 = *v20;
    v21 = v20[1];
    v23 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * i);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v7 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) == 0)
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v24) >> 6;
      while (++v26 != v29 || (v28 & 1) == 0)
      {
        v30 = v26 == v29;
        if (v26 == v29)
          v26 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v11 + 8 * v26);
        if (v31 != -1)
        {
          v27 = __clz(__rbit64(~v31)) + (v26 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    v27 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v11 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    v32 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v27);
    *v32 = v22;
    v32[1] = v21;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v27) = v23;
    ++*(_QWORD *)(v7 + 16);
    if (v10)
      goto LABEL_6;
LABEL_7:
    v16 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_41;
    if (v16 >= v34)
    {
      swift_release();
      v17 = (_QWORD *)(v5 + 64);
      goto LABEL_34;
    }
    v17 = (_QWORD *)(v5 + 64);
    v18 = *(_QWORD *)(v35 + 8 * v16);
    ++v13;
    if (!v18)
    {
      v13 = v16 + 1;
      if (v16 + 1 >= v34)
        goto LABEL_32;
      v18 = *(_QWORD *)(v35 + 8 * v13);
      if (!v18)
        break;
    }
LABEL_18:
    v10 = (v18 - 1) & v18;
  }
  v19 = v16 + 2;
  if (v19 < v34)
  {
    v18 = *(_QWORD *)(v35 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        v13 = v19 + 1;
        if (__OFADD__(v19, 1))
          goto LABEL_42;
        if (v13 >= v34)
          goto LABEL_32;
        v18 = *(_QWORD *)(v35 + 8 * v13);
        ++v19;
        if (v18)
          goto LABEL_18;
      }
    }
    v13 = v19;
    goto LABEL_18;
  }
LABEL_32:
  swift_release();
LABEL_34:
  if ((v36 & 1) != 0)
  {
    v33 = 1 << *(_BYTE *)(v5 + 32);
    if (v33 >= 64)
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v33 + 63) >> 6, v17);
    else
      *v17 = -1 << v33;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_39:
  result = swift_release();
  *v3 = v7;
  return result;
}

unint64_t *specialized _NativeDictionary.filter(_:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t *v3;
  uint64_t v4;

  v2 = (unint64_t *)a1;
  if ((*(_BYTE *)(a1 + 32) & 0x3Fu) <= 0xD || (swift_stdlib_isStackAllocationSafe() & 1) != 0)
  {
    MEMORY[0x24BDAC7A8]();
    OUTLINED_FUNCTION_58_3();
    v3 = OUTLINED_FUNCTION_52_3();
    if (v1)
      swift_willThrow();
    else
      return v3;
  }
  else
  {
    v4 = swift_slowAlloc();
    OUTLINED_FUNCTION_58_3();
    v2 = OUTLINED_FUNCTION_52_3();
    MEMORY[0x2207D8768](v4, -1, -1);
  }
  return v2;
}

unint64_t *specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;

  v4 = 0;
  v5 = 0;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_20;
    }
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10)
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v10)
        return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
      v14 = *(_QWORD *)(v6 + 8 * v5);
      if (!v14)
      {
        v5 = v13 + 2;
        if (v13 + 2 >= v10)
          return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
        v14 = *(_QWORD *)(v6 + 8 * v5);
        if (!v14)
          break;
      }
    }
LABEL_19:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_20:
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v12) + 16) >= 2uLL)
    {
      *(unint64_t *)((char *)result + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
      }
    }
  }
  v15 = v13 + 3;
  if (v15 >= v10)
    return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v10)
      return (unint64_t *)specialized _NativeDictionary.extractDictionary(using:count:)(result, a2, v4, a3);
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t *v32;
  uint64_t v33;

  if (!a3)
    return MEMORY[0x24BEE4B00];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  result = static _DictionaryStorage.allocate(capacity:)();
  v9 = result;
  v32 = a1;
  v33 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= v33)
        return v9;
      v16 = v32[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= v33)
          return v9;
        v16 = v32[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= v33)
            return v9;
          v16 = v32[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v33)
              return v9;
            v16 = v32[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= v33)
                  return v9;
                v16 = v32[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v14);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v9 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) == 0)
      break;
    v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(_QWORD *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    v30 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v25);
    *v30 = v20;
    v30[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v25) = v21;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      goto LABEL_39;
    if (!v5)
      return v9;
  }
  v26 = 0;
  v27 = (unint64_t)(63 - v22) >> 6;
  while (++v24 != v27 || (v26 & 1) == 0)
  {
    v28 = v24 == v27;
    if (v24 == v27)
      v24 = 0;
    v26 |= v28;
    v29 = *(_QWORD *)(v12 + 8 * v24);
    if (v29 != -1)
    {
      v25 = __clz(__rbit64(~v29)) + (v24 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t outlined init with copy of SpeakableString?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of SpeakableString?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_1_10(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_2_12()
{
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_3_8()
{
  uint64_t v0;

  return outlined destroy of SpeakableString?(*(_QWORD *)(v0 + 336));
}

uint64_t OUTLINED_FUNCTION_4_10@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = a2;
  a1[1] = (v2 - 32) | 0x8000000000000000;
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_7_9()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_12_9@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_14_10()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_23_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return a9;
}

uint64_t OUTLINED_FUNCTION_26_8@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = a2;
  a1[1] = (v2 - 32) | 0x8000000000000000;
  return swift_storeEnumTagMultiPayload();
}

void OUTLINED_FUNCTION_28_7()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_31_7()
{
  uint64_t v0;

  return outlined destroy of SpeakableString?(v0);
}

uint64_t OUTLINED_FUNCTION_34_3()
{
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_37_4()
{
  uint64_t v0;

  return outlined destroy of SpeakableString?(v0);
}

uint64_t OUTLINED_FUNCTION_42_3()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_44_4()
{
  uint64_t v0;

  return outlined destroy of SpeakableString?(v0);
}

void OUTLINED_FUNCTION_45_4()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_46_4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t OUTLINED_FUNCTION_48_4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

id OUTLINED_FUNCTION_49_5()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, (SEL)(v1 + 1439));
}

unint64_t *OUTLINED_FUNCTION_52_3()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t *v2;

  return specialized closure #1 in _NativeDictionary.filter(_:)(v2, v1, v0);
}

uint64_t OUTLINED_FUNCTION_53_2()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_55_3()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_56_2(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v2;
  *(_QWORD *)(v3 - 8) = *v2;
  v4[8] = v2;
  v4[9] = result;
  v4[10] = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_58_3()
{
  uint64_t v0;
  _QWORD *v1;

  return specialized UnsafeMutablePointer.assign(repeating:count:)(0, v0, v1);
}

unint64_t OUTLINED_FUNCTION_59_3()
{
  return lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
}

uint64_t OUTLINED_FUNCTION_60_2(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_61_1(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_62_2(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_63_3@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return outlined init with copy of SpeakableString?(v2 + a1, v1);
}

uint64_t OUTLINED_FUNCTION_65_3(uint64_t a1)
{
  void *v1;

  return DialogCalendar.init(contact:mockGlobals:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_66_4()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_67_3(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_68_4()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_69_4()
{
  return swift_release();
}

void OUTLINED_FUNCTION_70_3(void *a1, uint64_t a2, uint64_t a3)
{
  DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(a1, a2, a3, 0);
}

uint64_t OUTLINED_FUNCTION_71_2()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t type metadata accessor for GetContactAttributeCATs()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GetContactAttributeCATs;
  if (!type metadata singleton initialization cache for GetContactAttributeCATs)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for GetContactAttributeCATs()
{
  return swift_initClassMetadata2();
}

void GetContactAttributeCATs.disambiguateAddress(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:)()
{
  OUTLINED_FUNCTION_19_9();
  GetContactAttributeCATs.disambiguateAddress(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:)();
  OUTLINED_FUNCTION_8_8();
}

{
  uint64_t *v0;
  uint64_t *v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;

  OUTLINED_FUNCTION_32();
  v1 = v0;
  v29 = v2;
  v30 = v3;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_55_0();
  v15 = v14 - v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v16 = OUTLINED_FUNCTION_13_3();
  OUTLINED_FUNCTION_2_13((__n128 *)v16, (__n128)xmmword_21FED9630);
  v17 = __swift_instantiateConcreteTypeFromMangledName(v1);
  *(_QWORD *)(v16 + 48) = v11;
  *(_QWORD *)(v16 + 72) = v17;
  *(_QWORD *)(v16 + 80) = 0xD000000000000012;
  *(_QWORD *)(v16 + 88) = 0x800000021FEE1010;
  *(_QWORD *)(v16 + 96) = v9;
  OUTLINED_FUNCTION_26_9();
  *(_QWORD *)(v16 + 120) = v18;
  *(_QWORD *)(v16 + 128) = v19;
  OUTLINED_FUNCTION_25_11();
  *(_QWORD *)(v16 + 136) = v20;
  outlined init with copy of URL?(v7, v15, &demangling cache variable for type metadata for SpeakableString?);
  v21 = OUTLINED_FUNCTION_31_4();
  if (__swift_getEnumTagSinglePayload(v15, 1, v21) == 1)
  {
    OUTLINED_FUNCTION_15_7();
    swift_bridgeObjectRetain();
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v15, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v16 + 144) = 0u;
    *(_OWORD *)(v16 + 160) = 0u;
  }
  else
  {
    *(_QWORD *)(v16 + 168) = v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v16 + 144));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(boxed_opaque_existential_1, v15, v21);
    OUTLINED_FUNCTION_15_7();
    swift_bridgeObjectRetain();
  }
  OUTLINED_FUNCTION_0_12();
  *(_QWORD *)(v16 + 176) = v23;
  *(_QWORD *)(v16 + 184) = v24;
  if (v5)
  {
    OUTLINED_FUNCTION_130();
    v25 = v5;
  }
  else
  {
    v25 = 0;
    *(_QWORD *)(v16 + 200) = 0;
    *(_QWORD *)(v16 + 208) = 0;
  }
  *(_QWORD *)(v16 + 192) = v25;
  OUTLINED_FUNCTION_13_12();
  *(_QWORD *)(v16 + 216) = v26;
  *(_QWORD *)(v16 + 224) = v27;
  *(_QWORD *)(v16 + 232) = 0xE400000000000000;
  v28 = MEMORY[0x24BEE1328];
  *(_BYTE *)(v16 + 240) = v29 & 1;
  *(_QWORD *)(v16 + 264) = v28;
  *(_QWORD *)(v16 + 272) = 0x4D6563696F567369;
  *(_QWORD *)(v16 + 280) = 0xEB0000000065646FLL;
  *(_QWORD *)(v16 + 312) = v28;
  *(_BYTE *)(v16 + 288) = v30 & 1;
  OUTLINED_FUNCTION_23_8();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7();
}

void GetContactAttributeCATs.disambiguateEmail(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:)()
{
  OUTLINED_FUNCTION_19_9();
  OUTLINED_FUNCTION_27_7();
  OUTLINED_FUNCTION_8_8();
}

void GetContactAttributeCATs.disambiguatePhone(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:)()
{
  OUTLINED_FUNCTION_19_9();
  OUTLINED_FUNCTION_27_7();
  OUTLINED_FUNCTION_8_8();
}

void GetContactAttributeCATs.intentHandledShowAddress(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:hasSameLabels:isVoiceMode:)()
{
  OUTLINED_FUNCTION_14_11();
  GetContactAttributeCATs.intentHandledShowAddress(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:hasSameLabels:isVoiceMode:)();
  OUTLINED_FUNCTION_8_8();
}

{
  uint64_t *v0;
  uint64_t *v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;

  OUTLINED_FUNCTION_32();
  v1 = v0;
  v32 = v2;
  v30 = v3;
  v31 = v4;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_55_0();
  v16 = v15 - v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v17 = OUTLINED_FUNCTION_13_3();
  OUTLINED_FUNCTION_2_13((__n128 *)v17, (__n128)xmmword_21FED9640);
  v18 = __swift_instantiateConcreteTypeFromMangledName(v1);
  *(_QWORD *)(v17 + 48) = v12;
  *(_QWORD *)(v17 + 72) = v18;
  *(_QWORD *)(v17 + 80) = 0xD000000000000012;
  *(_QWORD *)(v17 + 88) = 0x800000021FEE1010;
  *(_QWORD *)(v17 + 96) = v10;
  OUTLINED_FUNCTION_26_9();
  *(_QWORD *)(v17 + 120) = v19;
  *(_QWORD *)(v17 + 128) = v20;
  OUTLINED_FUNCTION_25_11();
  *(_QWORD *)(v17 + 136) = v21;
  outlined init with copy of URL?(v8, v16, &demangling cache variable for type metadata for SpeakableString?);
  v22 = OUTLINED_FUNCTION_31_4();
  if (OUTLINED_FUNCTION_20_10(v16) == 1)
  {
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_15_7();
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v16, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)(v17 + 144) = 0u;
    *(_OWORD *)(v17 + 160) = 0u;
  }
  else
  {
    *(_QWORD *)(v17 + 168) = v22;
    v23 = OUTLINED_FUNCTION_21_7();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v23, v16, v22);
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_15_7();
  }
  OUTLINED_FUNCTION_0_12();
  *(_QWORD *)(v17 + 176) = v24;
  *(_QWORD *)(v17 + 184) = v25;
  if (v6)
  {
    OUTLINED_FUNCTION_130();
    v26 = v6;
  }
  else
  {
    v26 = 0;
    *(_QWORD *)(v17 + 200) = 0;
    *(_QWORD *)(v17 + 208) = 0;
  }
  *(_QWORD *)(v17 + 192) = v26;
  OUTLINED_FUNCTION_13_12();
  *(_QWORD *)(v17 + 216) = v27;
  *(_QWORD *)(v17 + 224) = v28;
  v29 = MEMORY[0x24BEE1328];
  *(_QWORD *)(v17 + 232) = 0xE400000000000000;
  *(_BYTE *)(v17 + 240) = v30 & 1;
  *(_QWORD *)(v17 + 264) = v29;
  strcpy((char *)(v17 + 272), "hasSameLabels");
  *(_WORD *)(v17 + 286) = -4864;
  *(_BYTE *)(v17 + 288) = v31 & 1;
  *(_QWORD *)(v17 + 312) = v29;
  *(_QWORD *)(v17 + 320) = 0x4D6563696F567369;
  *(_QWORD *)(v17 + 328) = 0xEB0000000065646FLL;
  *(_QWORD *)(v17 + 360) = v29;
  *(_BYTE *)(v17 + 336) = v32 & 1;
  swift_retain();
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7();
}

uint64_t GetContactAttributeCATs.intentHandledShowAge(birthdayInfo:ageInfo:contact:isMe:)(unint64_t a1, unint64_t a2, unint64_t a3, char a4)
{
  __n128 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v8 = (__n128 *)OUTLINED_FUNCTION_13_3();
  OUTLINED_FUNCTION_5_9(v8, (__n128)xmmword_21FED9150);
  if (a1)
  {
    v9 = type metadata accessor for DialogCalendar();
    v10 = a1;
  }
  else
  {
    v10 = 0;
    v9 = 0;
    v8[3].n128_u64[1] = 0;
    v8[4].n128_u64[0] = 0;
  }
  v8[3].n128_u64[0] = v10;
  v8[4].n128_u64[1] = v9;
  v8[5].n128_u64[0] = 0x6F666E49656761;
  v8[5].n128_u64[1] = 0xE700000000000000;
  if (a2)
  {
    type metadata accessor for ContactsAgeInfo();
    v11 = a2;
  }
  else
  {
    v11 = 0;
    v8[6].n128_u64[1] = 0;
    v8[7].n128_u64[0] = 0;
  }
  v8[6].n128_u64[0] = v11;
  OUTLINED_FUNCTION_28_8();
  v8[7].n128_u64[1] = v12;
  v8[8].n128_u64[0] = v13;
  v8[8].n128_u64[1] = 0xE700000000000000;
  if (a3)
  {
    OUTLINED_FUNCTION_130();
    v14 = a3;
  }
  else
  {
    v14 = 0;
    v8[9].n128_u64[1] = 0;
    v8[10].n128_u64[0] = 0;
  }
  v8[9].n128_u64[0] = v14;
  OUTLINED_FUNCTION_13_12();
  v8[10].n128_u64[1] = v15;
  v8[11].n128_u64[0] = v16;
  v8[11].n128_u64[1] = 0xE400000000000000;
  v8[13].n128_u64[1] = MEMORY[0x24BEE1328];
  v8[12].n128_u8[0] = a4 & 1;
  swift_retain();
  OUTLINED_FUNCTION_23_8();
  OUTLINED_FUNCTION_24_10();
  OUTLINED_FUNCTION_18_7();
  OUTLINED_FUNCTION_10_9();
  return swift_bridgeObjectRelease();
}

uint64_t GetContactAttributeCATs.intentHandledShowBirthday(birthdayInfo:contact:isMe:)(unint64_t a1, unint64_t a2, char a3)
{
  __n128 *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v6 = (__n128 *)OUTLINED_FUNCTION_13_3();
  OUTLINED_FUNCTION_5_9(v6, (__n128)xmmword_21FED8CA0);
  if (a1)
  {
    type metadata accessor for DialogCalendar();
    v7 = a1;
  }
  else
  {
    v7 = 0;
    v6[3].n128_u64[1] = 0;
    v6[4].n128_u64[0] = 0;
  }
  v6[3].n128_u64[0] = v7;
  OUTLINED_FUNCTION_28_8();
  v6[4].n128_u64[1] = v8;
  v6[5].n128_u64[0] = v9;
  v6[5].n128_u64[1] = 0xE700000000000000;
  if (a2)
  {
    OUTLINED_FUNCTION_130();
    v10 = a2;
  }
  else
  {
    v10 = 0;
    v6[6].n128_u64[1] = 0;
    v6[7].n128_u64[0] = 0;
  }
  v6[6].n128_u64[0] = v10;
  OUTLINED_FUNCTION_13_12();
  v6[7].n128_u64[1] = v11;
  v6[8].n128_u64[0] = v12;
  v6[8].n128_u64[1] = 0xE400000000000000;
  v6[10].n128_u64[1] = MEMORY[0x24BEE1328];
  v6[9].n128_u8[0] = a3 & 1;
  OUTLINED_FUNCTION_23_8();
  OUTLINED_FUNCTION_24_10();
  OUTLINED_FUNCTION_18_7();
  OUTLINED_FUNCTION_10_9();
  return swift_bridgeObjectRelease();
}

uint64_t GetContactAttributeCATs.intentHandledShowCompany(isMe:companyName:contact:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_55_0();
  v9 = v8 - v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v10 = OUTLINED_FUNCTION_13_3();
  *(_OWORD *)(v10 + 16) = xmmword_21FED8CA0;
  OUTLINED_FUNCTION_13_12();
  *(_QWORD *)(v11 + 32) = v12;
  *(_QWORD *)(v11 + 40) = 0xE400000000000000;
  v13 = MEMORY[0x24BEE1328];
  *(_BYTE *)(v11 + 48) = a1;
  v14 = (_OWORD *)(v11 + 96);
  *(_QWORD *)(v11 + 72) = v13;
  *(_QWORD *)(v11 + 80) = 0x4E796E61706D6F63;
  *(_QWORD *)(v11 + 88) = 0xEB00000000656D61;
  outlined init with copy of URL?(a2, v9, &demangling cache variable for type metadata for SpeakableString?);
  v15 = OUTLINED_FUNCTION_31_4();
  v16 = OUTLINED_FUNCTION_13_7(v9);
  if (v17)
  {
    OUTLINED_FUNCTION_12_5(v16, &demangling cache variable for type metadata for SpeakableString?);
    *v14 = 0u;
    v14[1] = 0u;
  }
  else
  {
    *(_QWORD *)(v10 + 120) = v15;
    v18 = OUTLINED_FUNCTION_21_7();
    OUTLINED_FUNCTION_12_10((uint64_t)v18);
  }
  OUTLINED_FUNCTION_0_12();
  *(_QWORD *)(v10 + 128) = v19;
  *(_QWORD *)(v10 + 136) = v20;
  if (a3)
  {
    v21 = OUTLINED_FUNCTION_130();
    v22 = a3;
  }
  else
  {
    v22 = 0;
    v21 = 0;
    *(_QWORD *)(v10 + 152) = 0;
    *(_QWORD *)(v10 + 160) = 0;
  }
  *(_QWORD *)(v10 + 144) = v22;
  *(_QWORD *)(v10 + 168) = v21;
  OUTLINED_FUNCTION_24_10();
  OUTLINED_FUNCTION_18_7();
  OUTLINED_FUNCTION_10_9();
  return swift_bridgeObjectRelease();
}

void GetContactAttributeCATs.intentHandledShowEmail(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:hasSameLabels:isVoiceMode:)()
{
  OUTLINED_FUNCTION_14_11();
  GetContactAttributeCATs.intentHandledShowAddress(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:hasSameLabels:isVoiceMode:)();
  OUTLINED_FUNCTION_8_8();
}

void GetContactAttributeCATs.intentHandledShowName(nicknameRequest:lastNameRequest:nameValue:contact:isMe:)()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  uint64_t *boxed_opaque_existential_1;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _BYTE v30[4];
  int v31;
  uint64_t v32;

  OUTLINED_FUNCTION_32();
  v32 = v0;
  v31 = v1;
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = &v30[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v11);
  v15 = &v30[-v14];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v16 = OUTLINED_FUNCTION_13_3();
  *(_OWORD *)(v16 + 16) = xmmword_21FED9630;
  *(_QWORD *)(v16 + 32) = 0x656D616E6B63696ELL;
  *(_QWORD *)(v16 + 40) = 0xEF74736575716552;
  v17 = MEMORY[0x24BEE1328];
  *(_BYTE *)(v16 + 48) = v9;
  *(_QWORD *)(v16 + 72) = v17;
  *(_QWORD *)(v16 + 80) = 0x656D614E7473616CLL;
  *(_QWORD *)(v16 + 88) = 0xEF74736575716552;
  *(_BYTE *)(v16 + 96) = v7;
  v18 = (uint64_t *)(v16 + 144);
  *(_QWORD *)(v16 + 120) = v17;
  *(_QWORD *)(v16 + 128) = 0x756C6156656D616ELL;
  *(_QWORD *)(v16 + 136) = 0xE900000000000065;
  outlined init with copy of URL?(v5, (uint64_t)v15, &demangling cache variable for type metadata for SpeakableString?);
  v19 = OUTLINED_FUNCTION_31_4();
  OUTLINED_FUNCTION_13_7((uint64_t)v15);
  if (v20)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v15, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)v18 = 0u;
    *(_OWORD *)(v16 + 160) = 0u;
  }
  else
  {
    *(_QWORD *)(v16 + 168) = v19;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v18);
    (*(void (**)(uint64_t *, _BYTE *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(boxed_opaque_existential_1, v15, v19);
  }
  v22 = v31;
  OUTLINED_FUNCTION_0_12();
  *(_QWORD *)(v16 + 176) = v23;
  *(_QWORD *)(v16 + 184) = v24;
  if (v3)
  {
    OUTLINED_FUNCTION_130();
    v25 = v3;
  }
  else
  {
    v25 = 0;
    *(_QWORD *)(v16 + 200) = 0;
    *(_QWORD *)(v16 + 208) = 0;
  }
  *(_QWORD *)(v16 + 192) = v25;
  OUTLINED_FUNCTION_13_12();
  *(_QWORD *)(v16 + 216) = v26;
  *(_QWORD *)(v16 + 224) = v27;
  *(_QWORD *)(v16 + 232) = 0xE400000000000000;
  *(_BYTE *)(v16 + 240) = v22 & 1;
  *(_QWORD *)(v16 + 264) = v17;
  strcpy((char *)(v16 + 272), "nicknameValue");
  *(_WORD *)(v16 + 286) = -4864;
  if (!v3)
    goto LABEL_11;
  swift_retain();
  DialogPerson.nickname.getter();
  v28 = OUTLINED_FUNCTION_13_7((uint64_t)v13);
  if (v20)
  {
    OUTLINED_FUNCTION_12_5(v28, &demangling cache variable for type metadata for SpeakableString?);
LABEL_11:
    *(_OWORD *)(v16 + 288) = 0u;
    *(_OWORD *)(v16 + 304) = 0u;
    goto LABEL_12;
  }
  *(_QWORD *)(v16 + 312) = v19;
  v29 = OUTLINED_FUNCTION_21_7();
  OUTLINED_FUNCTION_12_10((uint64_t)v29);
LABEL_12:
  dispatch thunk of CATWrapper.execute(catId:parameters:)();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7();
}

void GetContactAttributeCATs.intentHandledShowPhone(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:hasSameLabels:isVoiceMode:)()
{
  OUTLINED_FUNCTION_14_11();
  GetContactAttributeCATs.intentHandledShowAddress(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:hasSameLabels:isVoiceMode:)();
  OUTLINED_FUNCTION_8_8();
}

uint64_t GetContactAttributeCATs.promptForContactAttribute(contactName:isMe:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 72) = a3;
  *(_QWORD *)(v4 + 16) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  *(_QWORD *)(v4 + 40) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t GetContactAttributeCATs.promptForContactAttribute(contactName:isMe:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  char v9;
  _QWORD *v10;
  uint64_t (*v12)(_QWORD, unint64_t, unint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v3 = OUTLINED_FUNCTION_13_3();
  *(_QWORD *)(v0 + 48) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_21FED9160;
  v4 = (uint64_t *)(v3 + 48);
  *(_QWORD *)(v3 + 32) = 0x4E746361746E6F63;
  *(_QWORD *)(v3 + 40) = 0xEB00000000656D61;
  outlined init with copy of URL?(v2, v1, &demangling cache variable for type metadata for SpeakableString?);
  v5 = OUTLINED_FUNCTION_31_4();
  v6 = OUTLINED_FUNCTION_20_10(v1);
  v7 = *(_QWORD *)(v0 + 40);
  if ((_DWORD)v6 == 1)
  {
    OUTLINED_FUNCTION_12_5(v6, &demangling cache variable for type metadata for SpeakableString?);
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
  }
  else
  {
    *(_QWORD *)(v3 + 72) = v5;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v4);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(boxed_opaque_existential_1, v7, v5);
  }
  v9 = *(_BYTE *)(v0 + 72);
  *(_QWORD *)(v3 + 80) = 1699574633;
  *(_QWORD *)(v3 + 88) = 0xE400000000000000;
  *(_QWORD *)(v3 + 120) = MEMORY[0x24BEE1328];
  *(_BYTE *)(v3 + 96) = v9;
  v12 = (uint64_t (*)(_QWORD, unint64_t, unint64_t, uint64_t))((int)*MEMORY[0x24BE92870]
                                                                                    + MEMORY[0x24BE92870]);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v10;
  *v10 = v0;
  v10[1] = GetContactAttributeCATs.promptForContactAttribute(contactName:isMe:);
  return v12(*(_QWORD *)(v0 + 16), 0xD00000000000002DLL, 0x800000021FEE0FE0, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_3_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t GetContactAttributeCATs.unsupportedContactAttribute()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t, unint64_t, unint64_t, _QWORD);

  v5 = (uint64_t (*)(uint64_t, unint64_t, unint64_t, _QWORD))((int)*MEMORY[0x24BE92870]
                                                                                   + MEMORY[0x24BE92870]);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = ModifyContactAttributeCATs.promptForNickname();
  return v5(a1, 0xD00000000000002FLL, 0x800000021FEE0FB0, MEMORY[0x24BEE4AF8]);
}

uint64_t GetContactAttributeCATs.__allocating_init(templateDir:options:globals:)()
{
  swift_allocObject();
  return GetContactAttributeCATs.init(templateDir:options:globals:)();
}

uint64_t GetContactAttributeCATs.init(templateDir:options:globals:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_32();
  v1 = v0;
  v3 = v2;
  v4 = type metadata accessor for CATOption();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_55_0();
  v8 = v7 - v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_55_0();
  v12 = v11 - v10;
  outlined init with copy of URL?(v3, v11 - v10, &demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, v1, v4);
  v13 = ContactsCommonCATs.init(templateDir:options:globals:)(v12, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v4);
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v3, &demangling cache variable for type metadata for URL?);
  return v13;
}

uint64_t ObjC metadata update function for GetContactAttributeCATs()
{
  return type metadata accessor for GetContactAttributeCATs();
}

__n128 *OUTLINED_FUNCTION_2_13(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x676E69686374616DLL;
  result[2].n128_u64[1] = 0xEF73656C646E6148;
  return result;
}

__n128 *OUTLINED_FUNCTION_5_9(__n128 *result, __n128 a2)
{
  result[1] = a2;
  strcpy((char *)&result[2], "birthdayInfo");
  result[2].n128_u8[13] = 0;
  result[2].n128_u16[7] = -5120;
  return result;
}

uint64_t OUTLINED_FUNCTION_10_9()
{
  return dispatch thunk of CATWrapper.execute(catId:parameters:)();
}

uint64_t OUTLINED_FUNCTION_12_10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(a1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_15_7()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_20_10(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t *OUTLINED_FUNCTION_21_7()
{
  uint64_t *v0;

  return __swift_allocate_boxed_opaque_existential_1(v0);
}

uint64_t OUTLINED_FUNCTION_23_8()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_24_10()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_27_7()
{
  GetContactAttributeCATs.disambiguateAddress(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:)();
}

void specialized DisplayHintFactory.build(for:handles:contactAttributeType:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  specialized DisplayHintFactory.build(for:handles:contactAttributeType:_:)(a1, a2, a3, a4, a5, (uint64_t)specialized closure #1 in static ContactsContextProvider.getContactAttribute(contact:handles:contactAttributeType:needsSDA:), a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  id v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (**v92)(uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  BOOL v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t (**v108)(uint64_t, uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t (*v116)(uint64_t, uint64_t, uint64_t);
  NSObject *v117;
  unint64_t isa;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  int *v127;
  os_log_type_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  id v132;
  int *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  int *v142;
  os_log_type_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  void *v147;
  NSObject *v148;
  os_log_type_t v149;
  char v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int *v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  int *v163;
  os_log_type_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  void *v168;
  NSObject *v169;
  os_log_type_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  NSObject *v181;
  uint64_t v182;
  uint64_t (*v183)(uint64_t, uint64_t, uint64_t);
  _QWORD *v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t (*v190)(uint64_t, uint64_t, uint64_t);
  __int128 v191;
  _QWORD *v192;
  int *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;

  OUTLINED_FUNCTION_32();
  a19 = v23;
  a20 = v24;
  v179 = v25;
  v175 = v26;
  v174 = v27;
  v29 = OUTLINED_FUNCTION_61_2(v28, (uint64_t)&a11);
  v30 = *(_QWORD *)(v29 - 8);
  v188 = v29;
  v189 = v30;
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_5_2();
  v183 = v32;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v33);
  OUTLINED_FUNCTION_68();
  v182 = v34;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v35);
  OUTLINED_FUNCTION_39_5();
  v190 = v36;
  v187 = OUTLINED_FUNCTION_83_1();
  v192 = *(_QWORD **)(v187 - 8);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v37);
  OUTLINED_FUNCTION_5_2();
  v186 = v38;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v39);
  OUTLINED_FUNCTION_68();
  v171 = v40;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v41);
  OUTLINED_FUNCTION_39_5();
  v172 = v42;
  v193 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
  v184 = (_QWORD *)*((_QWORD *)v193 - 1);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v43);
  OUTLINED_FUNCTION_14_9();
  v46 = (uint64_t *)(v44 - v45);
  v48 = MEMORY[0x24BDAC7A8](v47);
  v50 = (uint64_t *)((char *)&v171 - v49);
  MEMORY[0x24BDAC7A8](v48);
  OUTLINED_FUNCTION_68();
  v185 = v51;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v52);
  OUTLINED_FUNCTION_39_5();
  *(_QWORD *)&v191 = v53;
  v178 = OUTLINED_FUNCTION_84_1();
  v177 = *(_QWORD *)(v178 - 8);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v54);
  OUTLINED_FUNCTION_59_4();
  v55 = type metadata accessor for Signpost.OpenSignpost();
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v56);
  OUTLINED_FUNCTION_58_4();
  if (one-time initialization token for contactsLog != -1)
    goto LABEL_82;
LABEL_2:
  v57 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v58 = *(int *)(v55 + 20);
  v181 = v21;
  v59 = v21 + v58;
  *(_QWORD *)v59 = "BuildDisplayHints";
  *(_QWORD *)(v59 + 8) = 17;
  v176 = v59;
  *(_BYTE *)(v59 + 16) = 2;
  v180 = (uint64_t *)v22;
  v60 = OUTLINED_FUNCTION_66_5();
  v195 = MEMORY[0x24BEE4AF8];
  v196 = MEMORY[0x24BEE4AF8];
  v61 = v20;
  if ((unint64_t)v20 >> 62)
  {
    if (v20 < 0)
      v55 = v20;
    else
      v55 = v20 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v62 = _CocoaArrayWrapper.endIndex.getter();
    v60 = OUTLINED_FUNCTION_55_1();
  }
  else
  {
    v62 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v63 = v192;
  v64 = MEMORY[0x24BEE4AF8];
  v21 = v187;
  if (v62)
  {
    if (v62 == 1)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(displayHints: [DisplayHint], idValue: SemanticValue)>);
      v65 = OUTLINED_FUNCTION_29_8();
      *(_OWORD *)(v65 + 16) = xmmword_21FED8CB0;
      v66 = (_QWORD *)(v65 + v55);
      v67 = v20 & 0xC000000000000001;
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v20 & 0xC000000000000001) == 0, v20);
      v186 = v65;
      v184 = v66;
      if ((v175 & 1) != 0)
      {
        if (v67)
          OUTLINED_FUNCTION_81_1();
        v132 = *(id *)(v20 + 32);
        v133 = v193;
        OUTLINED_FUNCTION_80_2(v193[12]);
        OUTLINED_FUNCTION_26_0();
        OUTLINED_FUNCTION_31_8();
        v134 = v133[12];
        v135 = v185;
        v136 = (uint64_t)v185 + v134;
        *v185 = *v66;
        v190 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v63[2];
        OUTLINED_FUNCTION_47_4(v136, (uint64_t)v66 + v134, v190);
        OUTLINED_FUNCTION_23_9();
        OUTLINED_FUNCTION_89();
        OUTLINED_FUNCTION_76_3();
        v117 = specialized UnsafeMutablePointer.initialize(from:count:);
        specialized Array.append<A>(contentsOf:)();
        v137 = v192;
        specialized Array.append<A>(contentsOf:)();
        v194 = v64;
        OUTLINED_FUNCTION_17_8();
        OUTLINED_FUNCTION_77_3();
        v190((uint64_t)v135 + v193[12], (uint64_t)v66 + v193[12], v21);
        OUTLINED_FUNCTION_43_4((uint64_t)&a9);
        OUTLINED_FUNCTION_76_3();
        if ((OUTLINED_FUNCTION_34_4() & 1) == 0)
          OUTLINED_FUNCTION_9_12();
        OUTLINED_FUNCTION_79_2();
        if (v103)
          OUTLINED_FUNCTION_9_12();
        OUTLINED_FUNCTION_15_8();
        OUTLINED_FUNCTION_71_3();
        specialized _ContiguousArrayStorage.__deallocating_deinit();
        OUTLINED_FUNCTION_20_11();
        OUTLINED_FUNCTION_49_6();
        v138 = v196;
        if (*(_QWORD *)(v196 + 16))
        {
          v139 = v189;
          OUTLINED_FUNCTION_19_10();
          v140 = one-time initialization token for siriContacts;
          v187 = v138;
          OUTLINED_FUNCTION_23_9();
          if (v140 != -1)
            swift_once();
          OUTLINED_FUNCTION_27_8();
          OUTLINED_FUNCTION_35_4();
          *(_QWORD *)&v141 = 136315138;
          v191 = v141;
          v190 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(MEMORY[0x24BEE4AD8] + 8);
          v193 = v142;
          do
          {
            OUTLINED_FUNCTION_0_13(v138, (uint64_t)static Logger.siriContacts);
            Logger.logObject.getter();
            v143 = OUTLINED_FUNCTION_60_3();
            if (OUTLINED_FUNCTION_14_12(v143))
            {
              OUTLINED_FUNCTION_1();
              v194 = OUTLINED_FUNCTION_3_9();
              OUTLINED_FUNCTION_7_10();
              v144 = DisplayHint.description.getter();
              v146 = OUTLINED_FUNCTION_45_5(v144, v145);
              OUTLINED_FUNCTION_6_12(v146);
              OUTLINED_FUNCTION_5();
              OUTLINED_FUNCTION_92((uint64_t)v183, *(uint64_t (**)(uint64_t, uint64_t))(v139 + 8));
              OUTLINED_FUNCTION_70_4();
              OUTLINED_FUNCTION_13_13(v147, v148, v149, "DisplayHint: %s");
              OUTLINED_FUNCTION_52_4();
              OUTLINED_FUNCTION_0();
            }
            OUTLINED_FUNCTION_4_11();

            OUTLINED_FUNCTION_65_4();
          }
          while (!v150);
          OUTLINED_FUNCTION_167();
          v117 = v181;
        }
        OUTLINED_FUNCTION_2_14();
        OUTLINED_FUNCTION_23_9();
        NLContextUpdate.displayHints.setter();
        OUTLINED_FUNCTION_33_4();
        static ContactsContextProvider.contactResponseTargets.getter();
        OUTLINED_FUNCTION_2_14();
        OUTLINED_FUNCTION_88_0();
        OUTLINED_FUNCTION_33_4();
        OUTLINED_FUNCTION_167();
        (*(void (**)(uint64_t *, uint64_t))(v177 + 8))(v180, v178);
        goto LABEL_62;
      }
      if (!v67)
      {
        v68 = *(id *)(v20 + 32);
        v69 = v173;
        if (v173 >> 62)
        {
          swift_bridgeObjectRetain();
          v151 = v69;
          v152 = OUTLINED_FUNCTION_72_2();
          OUTLINED_FUNCTION_55_1();
          v153 = v193[12];
          v193 += 12;
          v72 = (uint64_t)v66 + v153;
          if (!v152)
            goto LABEL_91;
          swift_bridgeObjectRetain();
          v154 = OUTLINED_FUNCTION_72_2();
          OUTLINED_FUNCTION_55_1();
          v69 = v151;
          if (!v154)
            goto LABEL_91;
        }
        else
        {
          v70 = *(_QWORD *)((v173 & 0xFFFFFFFFFFFFF8) + 0x10);
          v71 = v193[12];
          v193 += 12;
          v72 = (uint64_t)v66 + v71;
          if (!v70)
            goto LABEL_91;
        }
        v73 = v174;
        if ((unint64_t)(v174 - 1) < 3)
        {
          v74 = objc_msgSend(v68, sel_identifier, v171, v172);
          v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v76 = v69;
          v78 = v77;

          v63 = v192;
          DisplayHintFactory.buildGetAttributeListDisplayHint(contactId:type:labeledHandles:)(v72, v75, v78, v73, v76);
          OUTLINED_FUNCTION_26_0();
          OUTLINED_FUNCTION_9_0();
LABEL_92:
          OUTLINED_FUNCTION_31_8();
          v155 = v193;
          v156 = *v193;
          v157 = v185;
          v158 = (uint64_t)v185 + v156;
          *v185 = *v66;
          v183 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v63[2];
          OUTLINED_FUNCTION_47_4(v158, (uint64_t)v66 + v156, v183);
          OUTLINED_FUNCTION_50_5();
          OUTLINED_FUNCTION_89();
          outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v66, &demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
          v117 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:);
          specialized Array.append<A>(contentsOf:)();
          v159 = v192;
          specialized Array.append<A>(contentsOf:)();
          v194 = v64;
          OUTLINED_FUNCTION_17_8();
          OUTLINED_FUNCTION_77_3();
          v183((uint64_t)v157 + *v155, (uint64_t)v66 + *v155, v21);
          OUTLINED_FUNCTION_43_4((uint64_t)&a10);
          outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v66, &demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
          if ((OUTLINED_FUNCTION_34_4() & 1) == 0)
            OUTLINED_FUNCTION_9_12();
          OUTLINED_FUNCTION_79_2();
          if (v103)
            OUTLINED_FUNCTION_9_12();
          OUTLINED_FUNCTION_15_8();
          OUTLINED_FUNCTION_71_3();
          specialized _ContiguousArrayStorage.__deallocating_deinit();
          OUTLINED_FUNCTION_20_11();
          v50 = v180;
          v120 = v189;
          if ((unint64_t)(v174 - 1) <= 2)
            goto LABEL_52;
          OUTLINED_FUNCTION_49_6();
          v160 = v196;
          if (*(_QWORD *)(v196 + 16))
          {
            OUTLINED_FUNCTION_19_10();
            v161 = one-time initialization token for siriContacts;
            v187 = v160;
            OUTLINED_FUNCTION_50_5();
            if (v161 != -1)
              swift_once();
            OUTLINED_FUNCTION_27_8();
            OUTLINED_FUNCTION_35_4();
            *(_QWORD *)&v162 = 136315138;
            v191 = v162;
            v190 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(MEMORY[0x24BEE4AD8] + 8);
            v193 = v163;
            do
            {
              OUTLINED_FUNCTION_0_13((uint64_t)v50, (uint64_t)static Logger.siriContacts);
              Logger.logObject.getter();
              v164 = OUTLINED_FUNCTION_60_3();
              if (OUTLINED_FUNCTION_14_12(v164))
              {
                OUTLINED_FUNCTION_1();
                v194 = OUTLINED_FUNCTION_3_9();
                OUTLINED_FUNCTION_7_10();
                v165 = DisplayHint.description.getter();
                v167 = OUTLINED_FUNCTION_45_5(v165, v166);
                OUTLINED_FUNCTION_6_12(v167);
                OUTLINED_FUNCTION_5();
                OUTLINED_FUNCTION_92(v182, *(uint64_t (**)(uint64_t, uint64_t))(v120 + 8));
                OUTLINED_FUNCTION_70_4();
                OUTLINED_FUNCTION_13_13(v168, v169, v170, "DisplayHint: %s");
                OUTLINED_FUNCTION_52_4();
                OUTLINED_FUNCTION_0();
              }
              OUTLINED_FUNCTION_4_11();

              OUTLINED_FUNCTION_65_4();
            }
            while (!v150);
            OUTLINED_FUNCTION_18_0();
            OUTLINED_FUNCTION_54_4();
          }
          OUTLINED_FUNCTION_2_14();
          OUTLINED_FUNCTION_50_5();
          NLContextUpdate.displayHints.setter();
          OUTLINED_FUNCTION_33_4();
          static ContactsContextProvider.contactResponseTargets.getter();
          OUTLINED_FUNCTION_2_14();
          OUTLINED_FUNCTION_88_0();
          OUTLINED_FUNCTION_33_4();
          goto LABEL_61;
        }
LABEL_91:
        DisplayHintFactory.buildContactDisambiguationDisplayHint(_:)(v72, v68);
        OUTLINED_FUNCTION_26_0();
        goto LABEL_92;
      }
LABEL_88:
      OUTLINED_FUNCTION_81_1();
    }
    v194 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_82_2(v60, v62 & ~(v62 >> 63));
    if (v62 < 0)
    {
      __break(1u);
      goto LABEL_88;
    }
    v79 = 0;
    v64 = v194;
    v80 = v20 & 0xC000000000000001;
    v81 = v20;
    do
    {
      if (v80)
        OUTLINED_FUNCTION_81_1();
      v82 = *(id *)(v61 + 8 * v79 + 32);
      v83 = DisplayHintFactory.buildContactDisambiguationDisplayHint(_:)((uint64_t)v46 + v193[12], v82);

      *v46 = v83;
      v194 = v64;
      v85 = *(_QWORD *)(v64 + 16);
      v84 = *(_QWORD *)(v64 + 24);
      if (v85 >= v84 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v84 > 1, v85 + 1, 1);
        v64 = v194;
      }
      ++v79;
      *(_QWORD *)(v64 + 16) = v85 + 1;
      OUTLINED_FUNCTION_16_5();
      outlined init with take of (displayHints: [DisplayHint], idValue: SemanticValue)((uint64_t)v46, v64 + v86 + *(_QWORD *)(v87 + 72) * v85);
      v61 = v81;
    }
    while (v62 != v79);
    v21 = v187;
  }
  v46 = *(uint64_t **)(v64 + 16);
  v88 = MEMORY[0x24BEE4AF8];
  if (!v46)
    goto LABEL_42;
  OUTLINED_FUNCTION_16_5();
  v20 = v64 + v89;
  v91 = *(_QWORD *)(v90 + 72);
  swift_bridgeObjectRetain();
  v55 = MEMORY[0x24BEE4AF8];
  do
  {
    outlined init with copy of (displayHints: [DisplayHint], idValue: SemanticValue)(v20, (uint64_t)v50);
    v92 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v192;
    v93 = v193[12];
    v94 = v191 + v93;
    v95 = *v50;
    *(_QWORD *)v191 = *v50;
    OUTLINED_FUNCTION_47_4(v94, (uint64_t)v50 + v93, v92[2]);
    swift_bridgeObjectRetain();
    ((void (*)(uint64_t, uint64_t))v92[1])(v94, v21);
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v50, &demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
    v22 = *(_QWORD *)(v95 + 16);
    v96 = *(_QWORD *)(v55 + 16);
    v21 = v96 + v22;
    if (__OFADD__(v96, v22))
    {
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      swift_once();
      goto LABEL_2;
    }
    v97 = OUTLINED_FUNCTION_34_4();
    if (!v97 || v21 > *(_QWORD *)(v55 + 24) >> 1)
    {
      if (v96 <= v21)
        v98 = v96 + v22;
      else
        v98 = v96;
      v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v97, v98, 1, v55);
    }
    v21 = v187;
    if (*(_QWORD *)(v95 + 16))
    {
      v99 = *(_QWORD *)(v55 + 16);
      if ((*(_QWORD *)(v55 + 24) >> 1) - v99 < v22)
        goto LABEL_80;
      v100 = (*(unsigned __int8 *)(v189 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v189 + 80);
      v101 = *(_QWORD *)(v189 + 72);
      v102 = v55 + v100 + v101 * v99;
      v103 = v95 + v100 >= v102 + v101 * v22 || v102 >= v95 + v100 + v101 * v22;
      if (!v103)
      {
        OUTLINED_FUNCTION_41_5();
        OUTLINED_FUNCTION_32_6();
        __break(1u);
        return;
      }
      swift_arrayInitWithCopy();
      if (v22)
      {
        v104 = *(_QWORD *)(v55 + 16);
        v105 = __OFADD__(v104, v22);
        v106 = v104 + v22;
        if (v105)
          goto LABEL_81;
        *(_QWORD *)(v55 + 16) = v106;
      }
    }
    else if (v22)
    {
      goto LABEL_79;
    }
    OUTLINED_FUNCTION_9_0();
    v20 += v91;
    v46 = (uint64_t *)((char *)v46 - 1);
  }
  while (v46);
  swift_bridgeObjectRelease();
  v88 = MEMORY[0x24BEE4AF8];
LABEL_42:
  specialized Array.append<A>(contentsOf:)();
  v107 = *(_QWORD *)(v64 + 16);
  v108 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v192;
  if (v107)
  {
    v194 = v88;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    OUTLINED_FUNCTION_16_5();
    v183 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v64;
    v50 = (uint64_t *)(v64 + v109);
    v111 = *(_QWORD *)(v110 + 72);
    v112 = v186;
    do
    {
      v113 = v191;
      OUTLINED_FUNCTION_55_4((uint64_t)v50);
      v114 = v193[12];
      v115 = (char *)v185 + v114;
      OUTLINED_FUNCTION_47_4((uint64_t)v185 + v114, v113 + v114, v108[2]);
      v116 = v108[4];
      v116(v112, (uint64_t)v115, v21);
      outlined destroy of UsoEntity_common_Person.DefinedValues?(v113, &demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
      v117 = v194;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_9_12();
        v117 = v194;
      }
      isa = (unint64_t)v117[2].isa;
      if (isa >= (unint64_t)v117[3].isa >> 1)
      {
        OUTLINED_FUNCTION_9_12();
        v117 = v194;
      }
      v117[2].isa = (Class)(isa + 1);
      v108 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))v192;
      OUTLINED_FUNCTION_19_10();
      v112 = v186;
      v116((uint64_t)v117 + v119 + (_QWORD)v108[9] * isa, v186, v21);
      v194 = (uint64_t)v117;
      v50 = (uint64_t *)((char *)v50 + v111);
      --v107;
    }
    while (v107);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v117 = MEMORY[0x24BEE4AF8];
  }
  specialized Array.append<A>(contentsOf:)();
  OUTLINED_FUNCTION_54_4();
  v120 = v189;
LABEL_52:
  OUTLINED_FUNCTION_53_3();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_86_1();
  v121 = v196;
  v122 = *(_QWORD *)(v196 + 16);
  if (v122)
  {
    OUTLINED_FUNCTION_19_10();
    v124 = v121 + v123;
    v125 = one-time initialization token for siriContacts;
    v186 = v121;
    OUTLINED_FUNCTION_75_2();
    if (v125 != -1)
      swift_once();
    OUTLINED_FUNCTION_73_3();
    OUTLINED_FUNCTION_35_4();
    *(_QWORD *)&v126 = 136315138;
    v191 = v126;
    v187 = MEMORY[0x24BEE4AD8] + 8;
    v193 = v127;
    do
    {
      OUTLINED_FUNCTION_0_13((uint64_t)v50, (uint64_t)static Logger.siriContacts);
      v117 = Logger.logObject.getter();
      v128 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v117, v128))
      {
        OUTLINED_FUNCTION_1();
        v194 = OUTLINED_FUNCTION_3_9();
        OUTLINED_FUNCTION_7_10();
        v129 = DisplayHint.description.getter();
        v131 = OUTLINED_FUNCTION_45_5(v129, v130);
        OUTLINED_FUNCTION_6_12(v131);
        OUTLINED_FUNCTION_5();
        OUTLINED_FUNCTION_92((uint64_t)v190, *(uint64_t (**)(uint64_t, uint64_t))(v120 + 8));
        OUTLINED_FUNCTION_13_13(&dword_21FE16000, v117, v128, "DisplayHint: %s");
        swift_arrayDestroy();
        OUTLINED_FUNCTION_0();
      }
      OUTLINED_FUNCTION_4_11();

      v124 += v21;
      --v122;
    }
    while (v122);
    OUTLINED_FUNCTION_23_5();
    OUTLINED_FUNCTION_54_4();
  }
  OUTLINED_FUNCTION_2_14();
  OUTLINED_FUNCTION_75_2();
  NLContextUpdate.displayHints.setter();
  OUTLINED_FUNCTION_33_4();
  static ContactsContextProvider.contactResponseTargets.getter();
  OUTLINED_FUNCTION_2_14();
  OUTLINED_FUNCTION_88_0();
  OUTLINED_FUNCTION_33_4();
LABEL_61:
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t *, uint64_t))(v177 + 8))(v50, v178);
LABEL_62:
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost((uint64_t)v117);
  OUTLINED_FUNCTION_7();
}

{
  specialized DisplayHintFactory.build(for:handles:contactAttributeType:_:)(a1, a2, a3, a4, a5, (uint64_t)specialized closure #1 in static ContactsContextProvider.disambiguate(contacts:), a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20);
}

{
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  id v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  char *v95;
  BOOL v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  void *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  char *v118;
  void (*v119)(uint64_t, char *, char *);
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  int *v128;
  NSObject *v129;
  os_log_type_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  id v134;
  uint64_t v135;
  int *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t *v140;
  char *v141;
  uint64_t v142;
  char *v143;
  void (*v144)(char *, char *);
  uint64_t v145;
  char *v146;
  void (*v147)(uint64_t, char *, char *);
  unint64_t v148;
  uint64_t v149;
  __int128 v150;
  int *v151;
  os_log_type_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  void *v157;
  NSObject *v158;
  os_log_type_t v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  char *v166;
  _QWORD *v167;
  void (*v168)(char *, char *);
  uint64_t v169;
  uint64_t v170;
  void (*v171)(uint64_t, uint64_t, char *);
  unint64_t v172;
  uint64_t v173;
  __int128 v174;
  int *v175;
  os_log_type_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  void *v181;
  NSObject *v182;
  os_log_type_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  __int128 v204;
  __int128 v205;
  uint64_t *v206;
  uint64_t v207;
  int *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;

  OUTLINED_FUNCTION_32();
  a19 = v23;
  a20 = v24;
  v194 = v25;
  v195 = v26;
  v189 = v27;
  v188 = v28;
  v203 = OUTLINED_FUNCTION_61_2(v29, (uint64_t)&a10);
  v207 = *(_QWORD *)(v203 - 8);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_5_2();
  v198 = v31;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v32);
  OUTLINED_FUNCTION_68();
  v197 = v33;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v34);
  OUTLINED_FUNCTION_39_5();
  *(_QWORD *)&v205 = v35;
  v202 = (char *)OUTLINED_FUNCTION_83_1();
  *(_QWORD *)&v204 = *((_QWORD *)v202 - 1);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v36);
  OUTLINED_FUNCTION_5_2();
  v201 = v37;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v38);
  OUTLINED_FUNCTION_68();
  v186 = v39;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v40);
  OUTLINED_FUNCTION_39_5();
  v187 = v41;
  v208 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
  v199 = (uint64_t *)*((_QWORD *)v208 - 1);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v42);
  OUTLINED_FUNCTION_14_9();
  v45 = (_QWORD *)(v43 - v44);
  v47 = MEMORY[0x24BDAC7A8](v46);
  v49 = (uint64_t *)((char *)&v184 - v48);
  MEMORY[0x24BDAC7A8](v47);
  OUTLINED_FUNCTION_68();
  v200 = v50;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v51);
  OUTLINED_FUNCTION_39_5();
  v206 = v52;
  v193 = OUTLINED_FUNCTION_84_1();
  v192 = *(_QWORD *)(v193 - 8);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v53);
  OUTLINED_FUNCTION_58_4();
  v54 = type metadata accessor for Signpost.OpenSignpost();
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v55);
  OUTLINED_FUNCTION_59_4();
  if (one-time initialization token for contactsLog != -1)
    goto LABEL_84;
  while (1)
  {
    v56 = (id)static Signpost.contactsLog;
    OSSignpostID.init(log:)();
    static os_signpost_type_t.begin.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    v57 = &v22[*(int *)(v54 + 20)];
    *(_QWORD *)v57 = "BuildDisplayHints";
    *((_QWORD *)v57 + 1) = 17;
    v191 = v57;
    v57[16] = 2;
    v196 = v21;
    v58 = OUTLINED_FUNCTION_66_5();
    v210 = MEMORY[0x24BEE4AF8];
    v211 = MEMORY[0x24BEE4AF8];
    v21 = v20;
    if ((unint64_t)v20 >> 62)
    {
      if (v20 < 0)
        v54 = v20;
      else
        v54 = v20 & 0xFFFFFFFFFFFFFF8;
      OUTLINED_FUNCTION_92_2();
      v59 = _CocoaArrayWrapper.endIndex.getter();
      v58 = OUTLINED_FUNCTION_117();
    }
    else
    {
      v59 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v60 = MEMORY[0x24BEE4AF8];
    v190 = v22;
    if (!v59)
    {
      v22 = v202;
      goto LABEL_13;
    }
    if (v59 == 1)
      break;
    v209 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_82_2(v58, v59 & ~(v59 >> 63));
    if (v59 < 0)
    {
      __break(1u);
LABEL_90:
      OUTLINED_FUNCTION_90_1();
    }
    v101 = 0;
    v60 = v209;
    v102 = v21;
    v21 &= 0xC000000000000001;
    v22 = v202;
    do
    {
      if (v21)
        v103 = (id)MEMORY[0x2207D80C0](v101, v102);
      else
        v103 = *(id *)(v102 + 8 * v101 + 32);
      v104 = v103;
      OUTLINED_FUNCTION_69_5();
      DisplayHintFactory.buildContactDisambiguationDisplayHint(_:)((uint64_t)v45 + v105, v104);
      OUTLINED_FUNCTION_26_0();
      *v45 = v60;
      v209 = v60;
      v106 = *(_QWORD *)(v60 + 16);
      v107 = *(_QWORD *)(v60 + 24);
      if (v106 >= v107 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v107 > 1, v106 + 1, 1);
        v60 = v209;
      }
      ++v101;
      *(_QWORD *)(v60 + 16) = v106 + 1;
      OUTLINED_FUNCTION_16_5();
      outlined init with take of (displayHints: [DisplayHint], idValue: SemanticValue)((uint64_t)v45, v60 + v108 + *(_QWORD *)(v109 + 72) * v106);
    }
    while (v59 != v101);
LABEL_13:
    v79 = *(_QWORD *)(v60 + 16);
    v80 = MEMORY[0x24BEE4AF8];
    if (!v79)
    {
      v100 = v60;
LABEL_45:
      specialized Array.append<A>(contentsOf:)();
      v110 = *(_QWORD *)(v100 + 16);
      v111 = v201;
      if (v110)
      {
        v209 = v80;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        OUTLINED_FUNCTION_16_5();
        v113 = v100 + v112;
        v21 = *(_QWORD *)(v114 + 72);
        v115 = v204;
        do
        {
          v116 = v206;
          outlined init with copy of (displayHints: [DisplayHint], idValue: SemanticValue)(v113, (uint64_t)v206);
          OUTLINED_FUNCTION_69_5();
          v118 = (char *)v200 + v117;
          OUTLINED_FUNCTION_87_2((uint64_t)v116 + v117, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v115 + 16));
          v119 = *(void (**)(_QWORD, _QWORD, _QWORD))(v115 + 32);
          v119(v111, v118, v22);
          outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v116, &demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
          v120 = v209;
          if ((OUTLINED_FUNCTION_34_4() & 1) == 0)
          {
            OUTLINED_FUNCTION_9_12();
            v115 = v204;
            v120 = v209;
          }
          v121 = *(_QWORD *)(v120 + 16);
          if (v121 >= *(_QWORD *)(v120 + 24) >> 1)
          {
            OUTLINED_FUNCTION_9_12();
            v115 = v204;
            v120 = v209;
          }
          *(_QWORD *)(v120 + 16) = v121 + 1;
          v111 = v201;
          v119(v120+ ((*(unsigned __int8 *)(v115 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80))+ *(_QWORD *)(v115 + 72) * v121, v201, v22);
          v209 = v120;
          v113 += v21;
          --v110;
        }
        while (v110);
        OUTLINED_FUNCTION_18_0();
      }
      else
      {
        OUTLINED_FUNCTION_5_0();
      }
      OUTLINED_FUNCTION_20_11();
      v122 = v196;
LABEL_55:
      v123 = OUTLINED_FUNCTION_53_3();
      OUTLINED_FUNCTION_5_0();
      OUTLINED_FUNCTION_86_1();
      v124 = v211;
      v125 = *(_QWORD *)(v211 + 16);
      if (v125)
      {
        OUTLINED_FUNCTION_30_6();
        v126 = one-time initialization token for siriContacts;
        v201 = v124;
        swift_bridgeObjectRetain();
        if (v126 != -1)
          swift_once();
        OUTLINED_FUNCTION_73_3();
        OUTLINED_FUNCTION_36_2();
        *(_QWORD *)&v127 = 136315138;
        v204 = v127;
        v202 = (char *)(MEMORY[0x24BEE4AD8] + 8);
        v208 = v128;
        do
        {
          OUTLINED_FUNCTION_0_13(v122, (uint64_t)static Logger.siriContacts);
          v129 = Logger.logObject.getter();
          v130 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v129, v130))
          {
            OUTLINED_FUNCTION_1();
            v209 = OUTLINED_FUNCTION_3_9();
            OUTLINED_FUNCTION_7_10();
            v131 = DisplayHint.description.getter();
            v133 = OUTLINED_FUNCTION_44_5(v131, v132);
            OUTLINED_FUNCTION_5_10(v133);
            OUTLINED_FUNCTION_5();
            OUTLINED_FUNCTION_92(v205, *(uint64_t (**)(uint64_t, uint64_t))(v207 + 8));
            OUTLINED_FUNCTION_13_13(&dword_21FE16000, v129, v130, "DisplayHint: %s");
            swift_arrayDestroy();
            OUTLINED_FUNCTION_0();
          }
          OUTLINED_FUNCTION_4_11();

          v123 += v21;
          --v125;
        }
        while (v125);
LABEL_62:
        OUTLINED_FUNCTION_5();
        v122 = v196;
      }
LABEL_63:
      OUTLINED_FUNCTION_85_2();
      OUTLINED_FUNCTION_5();
      OUTLINED_FUNCTION_64_2(v122, *(uint64_t (**)(uint64_t, _QWORD))(v192 + 8));
      v22 = v190;
      goto LABEL_64;
    }
    OUTLINED_FUNCTION_16_5();
    v81 = v60;
    v20 = v60 + v82;
    v21 = *(_QWORD *)(v83 + 72);
    v84 = v81;
    swift_bridgeObjectRetain();
    v45 = (_QWORD *)MEMORY[0x24BEE4AF8];
    while (1)
    {
      OUTLINED_FUNCTION_55_4(v20);
      OUTLINED_FUNCTION_69_5();
      v86 = (char *)v206 + v85;
      v87 = *v49;
      *v206 = *v49;
      v88 = v204;
      OUTLINED_FUNCTION_87_2((uint64_t)v49 + v85, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v204 + 16));
      OUTLINED_FUNCTION_75_2();
      (*(void (**)(char *, char *))(v88 + 8))(v86, v22);
      outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v49, &demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
      v54 = *(_QWORD *)(v87 + 16);
      v89 = v45[2];
      v22 = (char *)(v89 + v54);
      if (__OFADD__(v89, v54))
        break;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || (uint64_t)v22 > v45[3] >> 1)
      {
        if (v89 <= (uint64_t)v22)
          v91 = v89 + v54;
        else
          v91 = v89;
        v45 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v91, 1, (uint64_t)v45);
      }
      v22 = v202;
      if (*(_QWORD *)(v87 + 16))
      {
        v92 = v45[2];
        if ((v45[3] >> 1) - v92 < v54)
          goto LABEL_82;
        v93 = (*(unsigned __int8 *)(v207 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v207 + 80);
        v94 = *(_QWORD *)(v207 + 72);
        v95 = (char *)v45 + v93 + v94 * v92;
        v96 = v87 + v93 >= (unint64_t)&v95[v94 * v54] || (unint64_t)v95 >= v87 + v93 + v94 * v54;
        if (!v96)
        {
          OUTLINED_FUNCTION_41_5();
          OUTLINED_FUNCTION_32_6();
          __break(1u);
          return;
        }
        swift_arrayInitWithCopy();
        if (v54)
        {
          v97 = v45[2];
          v98 = __OFADD__(v97, v54);
          v99 = v97 + v54;
          if (v98)
            goto LABEL_83;
          v45[2] = v99;
        }
      }
      else if (v54)
      {
        goto LABEL_81;
      }
      OUTLINED_FUNCTION_23_5();
      v20 += v21;
      if (!--v79)
      {
        v100 = v84;
        OUTLINED_FUNCTION_18_0();
        v80 = MEMORY[0x24BEE4AF8];
        goto LABEL_45;
      }
    }
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    swift_once();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(displayHints: [DisplayHint], idValue: SemanticValue)>);
  v61 = OUTLINED_FUNCTION_29_8();
  *(_OWORD *)(v61 + 16) = xmmword_21FED8CB0;
  v62 = (uint64_t *)(v61 + v54);
  v63 = v21 & 0xC000000000000001;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v21 & 0xC000000000000001) == 0, v21);
  v201 = v61;
  if ((v189 & 1) == 0)
  {
    v64 = v60;
    if (v63)
      goto LABEL_90;
    v65 = *(id *)(v21 + 32);
    v66 = v202;
    v67 = v185;
    if (v185 >> 62)
    {
      OUTLINED_FUNCTION_92_2();
      v161 = _CocoaArrayWrapper.endIndex.getter();
      OUTLINED_FUNCTION_117();
      v162 = v208[12];
      v208 += 12;
      v70 = (uint64_t)v62 + v162;
      if (!v161)
        goto LABEL_93;
      OUTLINED_FUNCTION_92_2();
      v163 = _CocoaArrayWrapper.endIndex.getter();
      OUTLINED_FUNCTION_117();
      if (!v163)
        goto LABEL_93;
LABEL_10:
      v71 = v188;
      if ((unint64_t)(v188 - 1) >= 3)
        goto LABEL_93;
      v72 = objc_msgSend(v65, sel_identifier);
      v73 = v62;
      v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v76 = v75;

      v77 = v74;
      v62 = v73;
      v78 = DisplayHintFactory.buildGetAttributeListDisplayHint(contactId:type:labeledHandles:)(v70, v77, v76, v71, v67);

      OUTLINED_FUNCTION_9_0();
    }
    else
    {
      v68 = *(_QWORD *)((v185 & 0xFFFFFFFFFFFFF8) + 0x10);
      v69 = v208[12];
      v208 += 12;
      v70 = (uint64_t)v62 + v69;
      if (v68)
        goto LABEL_10;
LABEL_93:
      v78 = DisplayHintFactory.buildContactDisambiguationDisplayHint(_:)(v70, v65);

    }
    *v62 = v78;
    v209 = v64;
    v164 = v206;
    OUTLINED_FUNCTION_55_4((uint64_t)v62);
    v165 = *v208;
    v21 = (uint64_t)v200;
    v166 = (char *)v200 + v165;
    *v200 = *v164;
    v167 = (_QWORD *)v204;
    v202 = *(char **)(v204 + 16);
    ((void (*)(char *, char *, char *))v202)(v166, (char *)v164 + v165, v66);
    v168 = (void (*)(_QWORD, _QWORD))v167[1];
    OUTLINED_FUNCTION_23_9();
    v168(v166, v66);
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v164, &demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
    OUTLINED_FUNCTION_62_3();
    OUTLINED_FUNCTION_62_3();
    v209 = MEMORY[0x24BEE4AF8];
    OUTLINED_FUNCTION_17_8();
    OUTLINED_FUNCTION_55_4((uint64_t)v62);
    v169 = *v208;
    v170 = v21 + v169;
    ((void (*)(uint64_t, char *, char *))v202)(v21 + v169, (char *)v164 + v169, v66);
    v171 = (void (*)(_QWORD))v167[4];
    ((void (*)(uint64_t, uint64_t, char *))v171)(v187, v170, v66);
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v164, &demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
    if ((OUTLINED_FUNCTION_34_4() & 1) == 0)
      OUTLINED_FUNCTION_9_12();
    OUTLINED_FUNCTION_68_5();
    if (v96)
      OUTLINED_FUNCTION_9_12();
    v172 = OUTLINED_FUNCTION_26_10();
    v171(v172);
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    OUTLINED_FUNCTION_20_11();
    v122 = v196;
    if ((unint64_t)(v188 - 1) <= 2)
      goto LABEL_55;
    OUTLINED_FUNCTION_49_6();
    if (*(_QWORD *)(v211 + 16))
    {
      OUTLINED_FUNCTION_30_6();
      v173 = one-time initialization token for siriContacts;
      OUTLINED_FUNCTION_67_4();
      if (v173 != -1)
        swift_once();
      OUTLINED_FUNCTION_27_8();
      OUTLINED_FUNCTION_36_2();
      *(_QWORD *)&v174 = 136315138;
      v205 = v174;
      *(_QWORD *)&v204 = MEMORY[0x24BEE4AD8] + 8;
      v208 = v175;
      do
      {
        OUTLINED_FUNCTION_0_13(v122, (uint64_t)static Logger.siriContacts);
        Logger.logObject.getter();
        v176 = OUTLINED_FUNCTION_60_3();
        if (OUTLINED_FUNCTION_14_12(v176))
        {
          OUTLINED_FUNCTION_1();
          v177 = OUTLINED_FUNCTION_3_9();
          OUTLINED_FUNCTION_25_12(v177);
          v178 = DisplayHint.description.getter();
          v180 = OUTLINED_FUNCTION_44_5(v178, v179);
          OUTLINED_FUNCTION_5_10(v180);
          OUTLINED_FUNCTION_5();
          OUTLINED_FUNCTION_92(v197, *(uint64_t (**)(uint64_t, uint64_t))(v207 + 8));
          OUTLINED_FUNCTION_70_4();
          OUTLINED_FUNCTION_13_13(v181, v182, v183, "DisplayHint: %s");
          OUTLINED_FUNCTION_51_4();
          OUTLINED_FUNCTION_0();
        }
        OUTLINED_FUNCTION_4_11();

        OUTLINED_FUNCTION_65_4();
      }
      while (!v160);
      goto LABEL_62;
    }
    goto LABEL_63;
  }
  if (v63)
    OUTLINED_FUNCTION_90_1();
  v134 = *(id *)(v21 + 32);
  v135 = v208[12];
  v136 = v208;
  v199 = v62;
  OUTLINED_FUNCTION_80_2(v135);
  OUTLINED_FUNCTION_26_0();
  *v62 = v60;
  v137 = v60;
  v209 = v60;
  v138 = v206;
  outlined init with copy of (displayHints: [DisplayHint], idValue: SemanticValue)((uint64_t)v62, (uint64_t)v206);
  v139 = v136[12];
  v140 = v200;
  v141 = (char *)v200 + v139;
  *v200 = *v138;
  v142 = v204;
  *(_QWORD *)&v205 = *(_QWORD *)(v204 + 16);
  v143 = v202;
  ((void (*)(char *, char *, char *))v205)(v141, (char *)v138 + v139, v202);
  v144 = *(void (**)(_QWORD, _QWORD))(v142 + 8);
  OUTLINED_FUNCTION_23_9();
  v144(v141, v143);
  outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v138, &demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
  specialized Array.append<A>(contentsOf:)();
  specialized Array.append<A>(contentsOf:)();
  v209 = v137;
  OUTLINED_FUNCTION_17_8();
  outlined init with copy of (displayHints: [DisplayHint], idValue: SemanticValue)((uint64_t)v199, (uint64_t)v138);
  OUTLINED_FUNCTION_69_5();
  v146 = (char *)v140 + v145;
  ((void (*)(char *, char *, char *))v205)((char *)v140 + v145, (char *)v138 + v145, v143);
  v147 = *(void (**)(_QWORD))(v142 + 32);
  ((void (*)(uint64_t, char *, char *))v147)(v186, v146, v143);
  outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v138, &demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
  if ((OUTLINED_FUNCTION_34_4() & 1) == 0)
    OUTLINED_FUNCTION_9_12();
  OUTLINED_FUNCTION_68_5();
  if (v96)
    OUTLINED_FUNCTION_9_12();
  v148 = OUTLINED_FUNCTION_26_10();
  v147(v148);
  swift_setDeallocating();
  specialized _ContiguousArrayStorage.__deallocating_deinit();
  OUTLINED_FUNCTION_20_11();
  OUTLINED_FUNCTION_49_6();
  if (*(_QWORD *)(v211 + 16))
  {
    OUTLINED_FUNCTION_30_6();
    v149 = one-time initialization token for siriContacts;
    OUTLINED_FUNCTION_67_4();
    if (v149 != -1)
      swift_once();
    OUTLINED_FUNCTION_27_8();
    OUTLINED_FUNCTION_36_2();
    *(_QWORD *)&v150 = 136315138;
    v205 = v150;
    *(_QWORD *)&v204 = MEMORY[0x24BEE4AD8] + 8;
    v208 = v151;
    do
    {
      OUTLINED_FUNCTION_0_13((uint64_t)v147, (uint64_t)static Logger.siriContacts);
      Logger.logObject.getter();
      v152 = OUTLINED_FUNCTION_60_3();
      if (OUTLINED_FUNCTION_14_12(v152))
      {
        OUTLINED_FUNCTION_1();
        v153 = OUTLINED_FUNCTION_3_9();
        OUTLINED_FUNCTION_25_12(v153);
        v154 = DisplayHint.description.getter();
        v156 = OUTLINED_FUNCTION_44_5(v154, v155);
        OUTLINED_FUNCTION_5_10(v156);
        OUTLINED_FUNCTION_5();
        OUTLINED_FUNCTION_92(v198, *(uint64_t (**)(uint64_t, uint64_t))(v207 + 8));
        OUTLINED_FUNCTION_70_4();
        OUTLINED_FUNCTION_13_13(v157, v158, v159, "DisplayHint: %s");
        OUTLINED_FUNCTION_51_4();
        OUTLINED_FUNCTION_0();
      }
      OUTLINED_FUNCTION_4_11();

      OUTLINED_FUNCTION_65_4();
    }
    while (!v160);
    OUTLINED_FUNCTION_5();
    v22 = v190;
  }
  OUTLINED_FUNCTION_85_2();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_64_2(v196, *(uint64_t (**)(uint64_t, _QWORD))(v192 + 8));
LABEL_64:
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost((uint64_t)v22);
  OUTLINED_FUNCTION_7();
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_5_0();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    OUTLINED_FUNCTION_23_9();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_167();
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_16;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    OUTLINED_FUNCTION_23_9();
    v4 = MEMORY[0x2207D80CC](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_16:
    result = specialized Array._copyContents(initializing:)(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    OUTLINED_FUNCTION_23_9();
    v9 = OUTLINED_FUNCTION_72_2();
    OUTLINED_FUNCTION_167();
  }
  if (v11 < 1)
    goto LABEL_20;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_20:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

void specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v7 = OUTLINED_FUNCTION_78_2();
  if (!v7 || v6 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v6)
      v8 = v5 + v3;
    else
      v8 = v5;
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v8, 1, v4);
    v4 = v9;
  }
  if (!*(_QWORD *)(v1 + 16))
  {
    if (!v3)
      goto LABEL_14;
    goto LABEL_16;
  }
  v10 = *(_QWORD *)(v4 + 16);
  if ((*(_QWORD *)(v4 + 24) >> 1) - v10 < v3)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  specialized UnsafeMutablePointer.initialize(from:count:)(v1 + 32, v3, v4 + 16 * v10 + 32);
  if (!v3)
  {
LABEL_14:
    OUTLINED_FUNCTION_5_0();
    *v2 = v4;
    return;
  }
  v11 = *(_QWORD *)(v4 + 16);
  v12 = __OFADD__(v11, v3);
  v13 = v11 + v3;
  if (!v12)
  {
    *(_QWORD *)(v4 + 16) = v13;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

void specialized Array.append<A>(contentsOf:)()
{
  specialized Array.append<A>(contentsOf:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)(void);
  void (*v3)(unint64_t, uint64_t, unint64_t);
  uint64_t (*v4)(_QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD);
  void (*v10)(unint64_t, uint64_t, unint64_t);
  uint64_t (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  OUTLINED_FUNCTION_32();
  v6 = *(_QWORD *)(v5 + 16);
  v7 = *v1;
  v8 = *(_QWORD *)(*v1 + 16);
  if (__OFADD__(v8, v6))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v9 = v4;
  v10 = v3;
  v11 = v2;
  if (!OUTLINED_FUNCTION_78_2() || v8 + v6 > *(_QWORD *)(v7 + 24) >> 1)
    v7 = v11();
  if (!*(_QWORD *)(v0 + 16))
  {
    if (!v6)
      goto LABEL_11;
    goto LABEL_13;
  }
  v12 = *(_QWORD *)(v7 + 16);
  v13 = (*(_QWORD *)(v7 + 24) >> 1) - v12;
  v14 = v9(0);
  if (v13 < v6)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v15 = *(_QWORD *)(v14 - 8);
  v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v10(v0 + v16, v6, v7 + v16 + *(_QWORD *)(v15 + 72) * v12);
  if (!v6)
  {
LABEL_11:
    OUTLINED_FUNCTION_5_0();
    *v1 = v7;
    OUTLINED_FUNCTION_7();
    return;
  }
  v17 = *(_QWORD *)(v7 + 16);
  v18 = __OFADD__(v17, v6);
  v19 = v17 + v6;
  if (!v18)
  {
    *(_QWORD *)(v7 + 16) = v19;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t DisplayHintFactory.buildContactCardDisplayHint(contact:)(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;

  v55 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
  v4 = MEMORY[0x24BDAC7A8](v3);
  v54 = (uint64_t *)((char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = MEMORY[0x24BDAC7A8](v4);
  v52 = (uint64_t *)((char *)&v50 - v7);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v56 = (uint64_t *)((char *)&v50 - v9);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (uint64_t *)((char *)&v50 - v11);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v53 = (char *)&v50 + *(int *)(v13 + 48) - v14;
  v15 = (uint64_t)v53;
  v16 = (uint64_t *)((char *)&v50 - v14);
  v51 = (uint64_t)&v50 - v14;
  v17 = objc_msgSend(a2, sel_identifier);
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v20 = v19;

  v21 = objc_msgSend(a2, sel_phoneNumbers);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v23 = specialized DisplayHintFactory.buildGetAttributeListDisplayHint<A>(contactId:labeledHandles:)(v15, v18, v20, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *v16 = v23;
  v24 = (uint64_t)v12 + *(int *)(v3 + 48);
  v50 = v12;
  swift_bridgeObjectRetain();
  v25 = objc_msgSend(a2, sel_identifier);
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v28 = v27;

  v29 = objc_msgSend(a2, sel_postalAddresses);
  v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v31 = specialized DisplayHintFactory.buildGetAttributeListDisplayHint<A>(contactId:labeledHandles:)(v24, v26, v28, v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *v12 = v31;
  v32 = *(int *)(v3 + 48);
  v33 = v3;
  v34 = v56;
  v35 = (uint64_t)v56 + v32;
  swift_bridgeObjectRetain();
  v36 = objc_msgSend(a2, sel_identifier);
  v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v39 = v38;

  v40 = objc_msgSend(a2, sel_emailAddresses);
  v41 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v42 = specialized DisplayHintFactory.buildGetAttributeListDisplayHint<A>(contactId:labeledHandles:)(v35, v37, v39, v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *v34 = v42;
  v43 = v52;
  v44 = (uint64_t)v52 + *(int *)(v33 + 48);
  swift_bridgeObjectRetain();
  *v43 = DisplayHintFactory.buildContactDisambiguationDisplayHint(_:)(v44, a2);
  v57 = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  specialized Array.append<A>(contentsOf:)();
  specialized Array.append<A>(contentsOf:)();
  v45 = v57;
  outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v43, &demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
  outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v56, &demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
  outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v50, &demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
  v46 = (char *)v54 + *(int *)(v33 + 48);
  *v54 = v23;
  v47 = type metadata accessor for SemanticValue();
  v48 = *(_QWORD *)(v47 - 8);
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v46, v53, v47);
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v51, &demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v55, v46, v47);
  return v45;
}

uint64_t DisplayHintFactory.buildContactDisambiguationDisplayHint(_:)(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD v56[2];
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v4 = type metadata accessor for SemanticValue();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v59 = (char *)v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v56[1] = (char *)v56 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SemanticValue?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v58 = (char *)v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v56[0] = (char *)v56 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v56 - v15;
  v64 = type metadata accessor for DisplayHint();
  v61 = *(_QWORD *)(v64 - 8);
  v17 = MEMORY[0x24BDAC7A8](v64);
  v60 = (char *)v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v57 = (char *)v56 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)v56 - v21;
  v23 = objc_msgSend(a2, sel_identifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  SemanticValue.init(string:label:)();
  v24 = CNContact.formattedFullName.getter();
  v26 = v25;
  swift_bridgeObjectRelease();
  v27 = HIBYTE(v26) & 0xF;
  if ((v26 & 0x2000000000000000) == 0)
    v27 = v24 & 0xFFFFFFFFFFFFLL;
  v62 = v5;
  v63 = v4;
  if (v27)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v16, a1, v4);
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v4);
    CNContact.formattedFullName.getter();
    SemanticValue.init(string:label:)();
    DisplayHint.init(idValue:displayValue:)();
    v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v30 = *(_QWORD *)(v28 + 16);
    v29 = *(_QWORD *)(v28 + 24);
    if (v30 >= v29 >> 1)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1, v28);
    v31 = v64;
    *(_QWORD *)(v28 + 16) = v30 + 1;
    v32 = v61;
    (*(void (**)(unint64_t, char *, uint64_t))(v61 + 32))(v28+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(_QWORD *)(v61 + 72) * v30, v22, v31);
  }
  else
  {
    v28 = MEMORY[0x24BEE4AF8];
    v32 = v61;
  }
  v33 = objc_msgSend(a2, sel_givenName);
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v36 = v35;

  swift_bridgeObjectRelease();
  v37 = HIBYTE(v36) & 0xF;
  if ((v36 & 0x2000000000000000) == 0)
    v37 = v34 & 0xFFFFFFFFFFFFLL;
  if (v37)
  {
    v38 = v63;
    v39 = v56[0];
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v62 + 16))(v56[0], a1, v63);
    __swift_storeEnumTagSinglePayload(v39, 0, 1, v38);
    v40 = objc_msgSend(a2, sel_givenName);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    SemanticValue.init(string:label:)();
    v41 = v57;
    DisplayHint.init(idValue:displayValue:)();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v28 + 16) + 1, 1, v28);
    v43 = *(_QWORD *)(v28 + 16);
    v42 = *(_QWORD *)(v28 + 24);
    v44 = v63;
    if (v43 >= v42 >> 1)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1, v28);
    *(_QWORD *)(v28 + 16) = v43 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v32 + 32))(v28+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(_QWORD *)(v32 + 72) * v43, v41, v64);
  }
  else
  {
    v44 = v63;
  }
  v45 = objc_msgSend(a2, sel_familyName);
  v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v48 = v47;

  swift_bridgeObjectRelease();
  v49 = HIBYTE(v48) & 0xF;
  if ((v48 & 0x2000000000000000) == 0)
    v49 = v46 & 0xFFFFFFFFFFFFLL;
  if (v49)
  {
    v50 = (uint64_t)v58;
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v58, a1, v44);
    __swift_storeEnumTagSinglePayload(v50, 0, 1, v44);
    v51 = objc_msgSend(a2, sel_familyName);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    SemanticValue.init(string:label:)();
    v52 = v60;
    DisplayHint.init(idValue:displayValue:)();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v28 + 16) + 1, 1, v28);
    v54 = *(_QWORD *)(v28 + 16);
    v53 = *(_QWORD *)(v28 + 24);
    if (v54 >= v53 >> 1)
      v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1, v28);
    *(_QWORD *)(v28 + 16) = v54 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v32 + 32))(v28+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(_QWORD *)(v32 + 72) * v54, v52, v64);
  }
  return v28;
}

uint64_t DisplayHintFactory.buildGetAttributeListDisplayHint(contactId:type:labeledHandles:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void (*v39)(unint64_t, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD v45[2];
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  id v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v61 = a4;
  v59 = type metadata accessor for SemanticValue();
  v56 = *(_QWORD *)(v59 - 8);
  v7 = MEMORY[0x24BDAC7A8](v59);
  v55 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v54 = (char *)v45 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SemanticValue?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v53 = (char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v52 = (char *)v45 - v13;
  v14 = type metadata accessor for DisplayHint();
  v51 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v58 = (char *)v45 - v18;
  swift_bridgeObjectRetain();
  v60 = a1;
  SemanticValue.init(string:label:)();
  if (!(a5 >> 62))
  {
    v19 = *(_QWORD *)((a5 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v19)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v19 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v19 >= 1)
  {
    v21 = 0;
    v46 = a5 & 0xC000000000000001;
    v22 = MEMORY[0x24BEE4AF8];
    v45[1] = 0x800000021FEDF820;
    v49 = v14;
    v50 = a5;
    v47 = v19;
    v48 = v17;
    do
    {
      if (v46)
        v23 = (id)MEMORY[0x2207D80C0](v21, a5);
      else
        v23 = *(id *)(a5 + 8 * v21 + 32);
      v24 = v23;
      outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v23);
      if (v25)
      {
        v26 = String.sanitizeCNLabel.getter();
        v28 = v27;
        swift_bridgeObjectRelease();
      }
      else
      {
        v26 = static String.EMPTY.getter();
        v28 = v29;
      }
      v30 = *(void (**)(char *, uint64_t, uint64_t))(v56 + 16);
      v31 = (uint64_t)v52;
      v32 = v59;
      v30(v52, v60, v59);
      __swift_storeEnumTagSinglePayload(v31, 0, 1, v32);
      String.mapToNLAttributeValue(forType:)(v61, v26, v28);
      SemanticValue.init(string:label:)();
      DisplayHint.init(idValue:displayValue:)();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v57 = v24;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v22 + 16) + 1, 1, v22);
      v35 = *(_QWORD *)(v22 + 16);
      v34 = *(_QWORD *)(v22 + 24);
      if (v35 >= v34 >> 1)
        v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1, v22);
      *(_QWORD *)(v22 + 16) = v35 + 1;
      v36 = (*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
      v37 = *(_QWORD *)(v51 + 72);
      v38 = v22 + v36 + v37 * v35;
      v39 = *(void (**)(unint64_t, char *, uint64_t))(v51 + 32);
      v39(v38, v58, v14);
      v40 = (uint64_t)v53;
      v41 = v59;
      v30(v53, v60, v59);
      __swift_storeEnumTagSinglePayload(v40, 0, 1, v41);
      String.mapToNLContactTypeValue(forType:)(v61, v26, v28);
      swift_bridgeObjectRelease();
      SemanticValue.init(string:label:)();
      v42 = v48;
      DisplayHint.init(idValue:displayValue:)();
      v44 = *(_QWORD *)(v22 + 16);
      v43 = *(_QWORD *)(v22 + 24);
      if (v44 >= v43 >> 1)
        v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1, v22);
      ++v21;
      *(_QWORD *)(v22 + 16) = v44 + 1;
      v14 = v49;
      v39(v22 + v36 + v44 * v37, v42, v49);

      a5 = v50;
    }
    while (v47 != v21);
    swift_bridgeObjectRelease();
    return v22;
  }
  __break(1u);
  return result;
}

uint64_t specialized DisplayHintFactory.buildGetAttributeListDisplayHint<A>(contactId:labeledHandles:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void (*v38)(unint64_t, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  id v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v59 = type metadata accessor for SemanticValue();
  v55 = *(_QWORD *)(v59 - 8);
  v6 = MEMORY[0x24BDAC7A8](v59);
  v54 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v53 = (char *)&v45 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SemanticValue?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v52 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v51 = (char *)&v45 - v12;
  v58 = type metadata accessor for DisplayHint();
  v50 = *(_QWORD *)(v58 - 8);
  v13 = MEMORY[0x24BDAC7A8](v58);
  v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v57 = (char *)&v45 - v16;
  swift_bridgeObjectRetain();
  v60 = a1;
  SemanticValue.init(string:label:)();
  if (!(a4 >> 62))
  {
    v17 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v17)
      goto LABEL_3;
LABEL_20:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v17 = result;
  if (!result)
    goto LABEL_20;
LABEL_3:
  if (v17 >= 1)
  {
    v19 = 0;
    v20 = MEMORY[0x24BEE4AF8];
    v46 = 0x800000021FEDF820;
    v47 = a4 & 0xC000000000000001;
    v48 = v15;
    v49 = a4;
    v45 = v17;
    do
    {
      if (v47)
        v21 = (id)MEMORY[0x2207D80C0](v19, a4);
      else
        v21 = *(id *)(a4 + 8 * v19 + 32);
      v22 = v21;
      v23 = objc_msgSend(v21, sel_label, v45, v46);
      if (v23)
      {
        v24 = v23;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        v25 = String.sanitizeCNLabel.getter();
        v27 = v26;
        swift_bridgeObjectRelease();
      }
      else
      {
        v25 = static String.EMPTY.getter();
        v27 = v28;
      }
      v29 = *(void (**)(char *, uint64_t, uint64_t))(v55 + 16);
      v30 = (uint64_t)v51;
      v31 = v59;
      v29(v51, v60, v59);
      __swift_storeEnumTagSinglePayload(v30, 0, 1, v31);
      String.mapToNLAttributeValue(forType:)(2, v25, v27);
      SemanticValue.init(string:label:)();
      DisplayHint.init(idValue:displayValue:)();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v56 = v22;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v20 + 16) + 1, 1, v20);
      v34 = *(_QWORD *)(v20 + 16);
      v33 = *(_QWORD *)(v20 + 24);
      if (v34 >= v33 >> 1)
        v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, v20);
      *(_QWORD *)(v20 + 16) = v34 + 1;
      v35 = (*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
      v36 = *(_QWORD *)(v50 + 72);
      v37 = v20 + v35 + v36 * v34;
      v38 = *(void (**)(unint64_t, char *, uint64_t))(v50 + 32);
      v38(v37, v57, v58);
      v39 = (uint64_t)v52;
      v40 = v59;
      v29(v52, v60, v59);
      __swift_storeEnumTagSinglePayload(v39, 0, 1, v40);
      String.mapToNLContactTypeValue(forType:)(2, v25, v27);
      swift_bridgeObjectRelease();
      SemanticValue.init(string:label:)();
      v41 = v48;
      DisplayHint.init(idValue:displayValue:)();
      v43 = *(_QWORD *)(v20 + 16);
      v42 = *(_QWORD *)(v20 + 24);
      if (v43 >= v42 >> 1)
        v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1, v20);
      v44 = v45;
      ++v19;
      *(_QWORD *)(v20 + 16) = v43 + 1;
      v38(v20 + v35 + v43 * v36, v41, v58);

      a4 = v49;
    }
    while (v44 != v19);
    swift_bridgeObjectRelease();
    return v20;
  }
  __break(1u);
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  unint64_t v38;
  uint64_t v39;
  void (*v40)(unint64_t, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v61 = type metadata accessor for SemanticValue();
  v57 = *(_QWORD *)(v61 - 8);
  v6 = MEMORY[0x24BDAC7A8](v61);
  v56 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v55 = (char *)&v47 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SemanticValue?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v54 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v47 - v12;
  v60 = type metadata accessor for DisplayHint();
  v53 = *(_QWORD *)(v60 - 8);
  v14 = MEMORY[0x24BDAC7A8](v60);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v59 = (char *)&v47 - v17;
  swift_bridgeObjectRetain();
  v62 = a1;
  SemanticValue.init(string:label:)();
  if (!(a4 >> 62))
  {
    v18 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v18)
      goto LABEL_3;
LABEL_40:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v18 = result;
  if (!result)
    goto LABEL_40;
LABEL_3:
  if (v18 >= 1)
  {
    v20 = 0;
    v21 = MEMORY[0x24BEE4AF8];
    v48 = 0x800000021FEDF820;
    v49 = a4 & 0xC000000000000001;
    v51 = v13;
    v52 = a4;
    v50 = v16;
    v47 = v18;
    do
    {
      if (v49)
        v22 = (id)MEMORY[0x2207D80C0](v20, a4);
      else
        v22 = *(id *)(a4 + 8 * v20 + 32);
      v23 = v22;
      v24 = objc_msgSend(v22, sel_label, v47, v48);
      if (v24)
      {
        v25 = v24;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        v26 = String.sanitizeCNLabel.getter();
        v28 = v27;
        swift_bridgeObjectRelease();
      }
      else
      {
        v26 = static String.EMPTY.getter();
        v28 = v29;
      }
      v30 = v61;
      v58 = *(void (**)(char *, uint64_t, uint64_t))(v57 + 16);
      v58(v13, v62, v61);
      __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v30);
      v31 = v26 == 7174503 && v28 == 0xE300000000000000;
      if (!v31 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        v32 = v26 == 1701670760 && v28 == 0xE400000000000000;
        if (!v32 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          v33 = v26 == 1802661751 && v28 == 0xE400000000000000;
          if (!v33
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
            && (v26 != 0x6C6F6F686373 || v28 != 0xE600000000000000))
          {
            _stringCompareWithSmolCheck(_:_:expecting:)();
          }
        }
      }
      SemanticValue.init(string:label:)();
      DisplayHint.init(idValue:displayValue:)();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v21 + 16) + 1, 1, v21);
      v36 = *(_QWORD *)(v21 + 16);
      v35 = *(_QWORD *)(v21 + 24);
      v37 = v23;
      if (v36 >= v35 >> 1)
        v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1, v21);
      *(_QWORD *)(v21 + 16) = v36 + 1;
      v38 = (*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
      v39 = *(_QWORD *)(v53 + 72);
      v40 = *(void (**)(unint64_t, char *, uint64_t))(v53 + 32);
      v40(v21 + v38 + v39 * v36, v59, v60);
      v41 = (uint64_t)v54;
      v42 = v61;
      v58(v54, v62, v61);
      __swift_storeEnumTagSinglePayload(v41, 0, 1, v42);
      SemanticValue.init(string:label:)();
      v43 = v50;
      DisplayHint.init(idValue:displayValue:)();
      v45 = *(_QWORD *)(v21 + 16);
      v44 = *(_QWORD *)(v21 + 24);
      if (v45 >= v44 >> 1)
        v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1, v21);
      v46 = v47;
      ++v20;
      *(_QWORD *)(v21 + 16) = v45 + 1;
      v40(v21 + v38 + v45 * v39, v43, v60);

      v13 = v51;
      a4 = v52;
    }
    while (v46 != v20);
    swift_bridgeObjectRelease();
    return v21;
  }
  __break(1u);
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  char v32;
  char v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  char v45;
  BOOL v46;
  int v47;
  BOOL v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;

  v65 = type metadata accessor for SemanticValue();
  v61 = *(_QWORD *)(v65 - 8);
  v6 = MEMORY[0x24BDAC7A8](v65);
  v60 = (char *)v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v59 = (char *)v52 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SemanticValue?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v64 = (char *)v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v63 = (char *)v52 - v12;
  v13 = type metadata accessor for DisplayHint();
  v57 = *(_QWORD *)(v13 - 8);
  v58 = v13;
  v14 = MEMORY[0x24BDAC7A8](v13);
  v56 = (char *)v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v62 = (char *)v52 - v16;
  swift_bridgeObjectRetain();
  SemanticValue.init(string:label:)();
  v66 = MEMORY[0x24BEE4AF8];
  if (!(a4 >> 62))
  {
    v17 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v17)
      goto LABEL_3;
LABEL_75:
    swift_bridgeObjectRelease();
    return MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v17 = result;
  if (!result)
    goto LABEL_75;
LABEL_3:
  if (v17 < 1)
  {
    __break(1u);
  }
  else
  {
    v19 = 0;
    v52[1] = 0x800000021FEDF820;
    v53 = a4 & 0xC000000000000001;
    v54 = v17;
    v55 = a4;
    do
    {
      if (v53)
        v20 = (id)MEMORY[0x2207D80C0](v19, a4);
      else
        v20 = *(id *)(a4 + 8 * v19 + 32);
      v21 = v20;
      v22 = objc_msgSend(v20, sel_label);
      if (v22)
      {
        v23 = v22;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        v24 = String.sanitizeCNLabel.getter();
        v26 = v25;
        swift_bridgeObjectRelease();
      }
      else
      {
        v24 = static String.EMPTY.getter();
        v26 = v27;
      }
      v28 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
      v29 = (uint64_t)v63;
      v30 = v65;
      v28(v63, a1, v65);
      __swift_storeEnumTagSinglePayload(v29, 0, 1, v30);
      v31 = v24 == 1802661751 && v26 == 0xE400000000000000;
      v32 = v31;
      if (!v31
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
        && (v24 != 0x6C616E6F73726570 || v26 != 0xE800000000000000))
      {
        v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v35 = v24 == 1701670760 && v26 == 0xE400000000000000;
        v36 = v35;
        if ((v34 & 1) == 0 && !v36 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          v37 = v24 == 0x6C6F6F686373 && v26 == 0xE600000000000000;
          if (!v37
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
            && (v24 != 0x726568746FLL || v26 != 0xE500000000000000))
          {
            _stringCompareWithSmolCheck(_:_:expecting:)();
          }
        }
      }
      SemanticValue.init(string:label:)();
      DisplayHint.init(idValue:displayValue:)();
      v39 = v66;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v39 + 16) + 1, 1, v39);
      v41 = *(_QWORD *)(v39 + 16);
      v40 = *(_QWORD *)(v39 + 24);
      if (v41 >= v40 >> 1)
        v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1, v39);
      *(_QWORD *)(v39 + 16) = v41 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v57 + 32))(v39+ ((*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80))+ *(_QWORD *)(v57 + 72) * v41, v62, v58);
      v66 = v39;
      v42 = (uint64_t)v64;
      v43 = v65;
      v28(v64, a1, v65);
      __swift_storeEnumTagSinglePayload(v42, 0, 1, v43);
      a4 = v55;
      if ((v32 & 1) != 0
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || (v24 == 0x6C616E6F73726570 ? (v44 = v26 == 0xE800000000000000) : (v44 = 0),
            v44
         || ((v45 = _stringCompareWithSmolCheck(_:_:expecting:)(), v24 == 1701670760)
           ? (v46 = v26 == 0xE400000000000000)
           : (v46 = 0),
             !v46 ? (v47 = 0) : (v47 = 1),
             (v45 & 1) != 0
          || v47
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
          || (v24 == 0x6C6F6F686373 ? (v48 = v26 == 0xE600000000000000) : (v48 = 0),
              v48
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
           || (v24 == 0x726568746FLL ? (v49 = v26 == 0xE500000000000000) : (v49 = 0),
               v49 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)))))
      {
        swift_bridgeObjectRelease();
      }
      ++v19;
      SemanticValue.init(string:label:)();
      v50 = (uint64_t)v56;
      DisplayHint.init(idValue:displayValue:)();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v51 = *(_QWORD *)(v66 + 16);
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v51);
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v51, v50);

    }
    while (v54 != v19);
    swift_bridgeObjectRelease();
    return v66;
  }
  return result;
}

uint64_t DisplayHint.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  void *v25;
  void *v26;
  Swift::String v27;
  Swift::String v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  void *v43;
  Swift::String v44;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;

  OUTLINED_FUNCTION_32();
  v48 = v0;
  v49 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SemanticValue?);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_14_9();
  v5 = v3 - v4;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v46 - v8;
  v10 = MEMORY[0x24BDAC7A8](v7);
  v12 = (char *)&v46 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v46 - v13;
  v46 = 40;
  v47 = 0xE100000000000000;
  DisplayHint.displayValue.getter();
  type metadata accessor for SemanticValue();
  OUTLINED_FUNCTION_18_6((uint64_t)v14);
  if (v15)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for SemanticValue?);
LABEL_5:
    swift_bridgeObjectRelease();
    v18 = (void *)0xE300000000000000;
    v16 = 7104878;
    goto LABEL_6;
  }
  v16 = SemanticValue.label.getter();
  v18 = v17;
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_23_6((uint64_t)v14, v19);
  if (!v18)
    goto LABEL_5;
LABEL_6:
  v20._countAndFlagsBits = v16;
  v20._object = v18;
  String.append(_:)(v20);
  OUTLINED_FUNCTION_23_5();
  OUTLINED_FUNCTION_93_0();
  DisplayHint.displayValue.getter();
  OUTLINED_FUNCTION_18_6((uint64_t)v12);
  if (v15)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for SemanticValue?);
  }
  else
  {
    SemanticValue.string.getter();
    v22 = v21;
    OUTLINED_FUNCTION_94_2();
    OUTLINED_FUNCTION_23_6((uint64_t)v12, v23);
    if (v22)
    {
      v24 = String.debugDescription.getter();
      v26 = v25;
      OUTLINED_FUNCTION_5();
      goto LABEL_12;
    }
  }
  v26 = (void *)0xE300000000000000;
  v24 = 7104878;
LABEL_12:
  v27._countAndFlagsBits = v24;
  v27._object = v26;
  String.append(_:)(v27);
  OUTLINED_FUNCTION_18_0();
  v28._countAndFlagsBits = 0x203E3D2029;
  v28._object = (void *)0xE500000000000000;
  String.append(_:)(v28);
  v30 = v46;
  v29 = v47;
  v46 = 40;
  v47 = 0xE100000000000000;
  DisplayHint.idValue.getter();
  OUTLINED_FUNCTION_18_6((uint64_t)v9);
  if (v15)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for SemanticValue?);
LABEL_16:
    swift_bridgeObjectRelease();
    v33 = (void *)0xE300000000000000;
    v31 = 7104878;
    goto LABEL_17;
  }
  v31 = SemanticValue.label.getter();
  v33 = v32;
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_23_6((uint64_t)v9, v34);
  if (!v33)
    goto LABEL_16;
LABEL_17:
  v35._countAndFlagsBits = v31;
  v35._object = v33;
  String.append(_:)(v35);
  OUTLINED_FUNCTION_9_0();
  OUTLINED_FUNCTION_93_0();
  DisplayHint.idValue.getter();
  OUTLINED_FUNCTION_18_6(v5);
  if (v15)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v5, (uint64_t *)&demangling cache variable for type metadata for SemanticValue?);
LABEL_22:
    v39 = MEMORY[0x2207D7FAC](7104878, 0xE300000000000000);
    goto LABEL_23;
  }
  SemanticValue.string.getter();
  v37 = v36;
  OUTLINED_FUNCTION_94_2();
  OUTLINED_FUNCTION_23_6(v5, v38);
  if (!v37)
    goto LABEL_22;
  v39 = specialized Collection.prefix(_:)(30);
LABEL_23:
  v40._countAndFlagsBits = MEMORY[0x2207D7D00](v39);
  String.append(_:)(v40);
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_55_1();
  v41._countAndFlagsBits = 41;
  v41._object = (void *)0xE100000000000000;
  String.append(_:)(v41);
  v42 = v46;
  v43 = (void *)v47;
  v46 = v30;
  v47 = v29;
  OUTLINED_FUNCTION_50_5();
  v44._countAndFlagsBits = v42;
  v44._object = v43;
  String.append(_:)(v44);
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_55_1();
  return v46;
}

uint64_t specialized Collection.prefix(_:)(uint64_t result)
{
  uint64_t v1;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    v1 = String.subscript.getter();
    OUTLINED_FUNCTION_5_0();
    return v1;
  }
  return result;
}

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
  swift_arrayDestroy();
  return swift_deallocClassInstance();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *v2;
  *(_QWORD *)(v5 + 16) = a1 + 1;
  v6 = type metadata accessor for DisplayHint();
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5+ ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72) * a1, a2, v6);
}

uint64_t outlined init with take of (displayHints: [DisplayHint], idValue: SemanticValue)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of (displayHints: [DisplayHint], idValue: SemanticValue)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized Array._copyContents(initializing:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void (*v10)(_QWORD *);
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13[4];

  v5 = result;
  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          lazy protocol witness table accessor for type [SASTTemplateItem] and conformance [A]();
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SASTTemplateItem]);
            v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            v12 = *v11;
            swift_unknownObjectRetain();
            ((void (*)(uint64_t **, _QWORD))v10)(v13, 0);
            *(_QWORD *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        specialized UnsafeMutablePointer.initialize(from:count:)((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10));
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

void (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t **a1, uint64_t a2, uint64_t a3))(_QWORD *a1)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

unint64_t lazy protocol witness table accessor for type [SASTTemplateItem] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [SASTTemplateItem] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SASTTemplateItem] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [SASTTemplateItem]);
    result = MEMORY[0x2207D86A8](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SASTTemplateItem] and conformance [A]);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x2207D869C](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t (*specialized Array.subscript.read(uint64_t *a1, uint64_t a2, uint64_t a3))()
{
  unint64_t v6;
  uint64_t v7;

  v6 = a3 & 0xC000000000000001;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(a2, (a3 & 0xC000000000000001) == 0, a3);
  if (v6)
    v7 = MEMORY[0x2207D80C0](a2, a3);
  else
    v7 = swift_unknownObjectRetain();
  *a1 = v7;
  return Array.subscript.readspecialized ;
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_unknownObjectRelease();
}

uint64_t OUTLINED_FUNCTION_0_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  __swift_project_value_buffer(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v3, v2);
}

uint64_t OUTLINED_FUNCTION_2_14()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_3_9()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_4_11()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_5_10(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 120) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_6_12(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 136) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

__n128 OUTLINED_FUNCTION_7_10()
{
  _DWORD *v0;
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 - 176);
  *v0 = result.n128_u32[0];
  return result;
}

void OUTLINED_FUNCTION_9_12()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_13_13(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

BOOL OUTLINED_FUNCTION_14_12(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_15_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(unint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v0 + 16) = v2;
  return v3(v0+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v4, v1, v5);
}

void OUTLINED_FUNCTION_17_8()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_20_11()
{
  specialized Array.append<A>(contentsOf:)();
}

uint64_t OUTLINED_FUNCTION_23_9()
{
  return swift_bridgeObjectRetain();
}

__n128 OUTLINED_FUNCTION_25_12(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;
  __n128 result;

  *(_QWORD *)(v2 - 112) = a1;
  result = *(__n128 *)(v2 - 160);
  *v1 = result.n128_u32[0];
  return result;
}

unint64_t OUTLINED_FUNCTION_26_10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 16) = v2;
  return v1
       + ((*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80))
       + *(_QWORD *)(v0 + 72) * v3;
}

uint64_t OUTLINED_FUNCTION_27_8()
{
  return type metadata accessor for Logger();
}

uint64_t OUTLINED_FUNCTION_29_8()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_31_8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = v0;
  *(_QWORD *)(v3 - 128) = v1;
  return outlined init with copy of (displayHints: [DisplayHint], idValue: SemanticValue)((uint64_t)v2, *(_QWORD *)(v3 - 176));
}

uint64_t OUTLINED_FUNCTION_32_6()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_33_4()
{
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_34_4()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void OUTLINED_FUNCTION_35_4()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 152) = v0 - 128;
}

void OUTLINED_FUNCTION_36_2()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 144) = v0 - 112;
}

uint64_t OUTLINED_FUNCTION_43_4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD, uint64_t, uint64_t);
  uint64_t v3;

  return v2(*(_QWORD *)(a1 - 256), v1, v3);
}

uint64_t OUTLINED_FUNCTION_44_5(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 112));
}

uint64_t OUTLINED_FUNCTION_45_5(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 128));
}

uint64_t OUTLINED_FUNCTION_47_4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_49_6()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_50_5()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_51_4()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_52_4()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_53_3()
{
  return OrdinalDisplayHintsBuilder.build(for:)();
}

uint64_t OUTLINED_FUNCTION_55_4(uint64_t a1)
{
  uint64_t v1;

  return outlined init with copy of (displayHints: [DisplayHint], idValue: SemanticValue)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_60_3()
{
  return static os_log_type_t.debug.getter();
}

uint64_t OUTLINED_FUNCTION_61_2@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 - 256) = a1;
  return type metadata accessor for DisplayHint();
}

void OUTLINED_FUNCTION_62_3()
{
  specialized Array.append<A>(contentsOf:)();
}

uint64_t OUTLINED_FUNCTION_64_2@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 264));
}

uint64_t OUTLINED_FUNCTION_66_5()
{
  return OrdinalDisplayHintsBuilder.init(referenceNode:)();
}

uint64_t OUTLINED_FUNCTION_67_4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 192) = v0;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_71_3()
{
  return swift_setDeallocating();
}

uint64_t OUTLINED_FUNCTION_72_2()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t OUTLINED_FUNCTION_73_3()
{
  return type metadata accessor for Logger();
}

uint64_t OUTLINED_FUNCTION_75_2()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_76_3()
{
  uint64_t *v0;
  uint64_t v1;

  return outlined destroy of UsoEntity_common_Person.DefinedValues?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_77_3()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with copy of (displayHints: [DisplayHint], idValue: SemanticValue)(*(_QWORD *)(v1 - 232), v0);
}

uint64_t OUTLINED_FUNCTION_78_2()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_80_2@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v2;

  return DisplayHintFactory.buildContactCardDisplayHint(contact:)(v2 + a1, v1);
}

void OUTLINED_FUNCTION_81_1()
{
  JUMPOUT(0x2207D80C0);
}

size_t OUTLINED_FUNCTION_82_2(uint64_t a1, int64_t a2)
{
  return specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2, 0);
}

uint64_t OUTLINED_FUNCTION_83_1()
{
  return type metadata accessor for SemanticValue();
}

uint64_t OUTLINED_FUNCTION_84_1()
{
  return type metadata accessor for OrdinalDisplayHintsBuilder();
}

uint64_t OUTLINED_FUNCTION_85_2()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 - 248))(v0, *(_QWORD *)(v1 - 256));
}

void OUTLINED_FUNCTION_86_1()
{
  specialized Array.append<A>(contentsOf:)();
}

uint64_t OUTLINED_FUNCTION_87_2@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(v2, a1, v3);
}

uint64_t OUTLINED_FUNCTION_88_0()
{
  return NLContextUpdate.weightedPromptResponseTargets.setter();
}

uint64_t OUTLINED_FUNCTION_89()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(v0, v2);
}

void OUTLINED_FUNCTION_90_1()
{
  JUMPOUT(0x2207D80C0);
}

uint64_t OUTLINED_FUNCTION_92_2()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_93_0()
{
  Swift::String v0;

  v0._countAndFlagsBits = 8236;
  v0._object = (void *)0xE200000000000000;
  String.append(_:)(v0);
}

uint64_t ContactsCommonCATs.genericError()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  v1 = OUTLINED_FUNCTION_7_4();
  v2 = (_QWORD *)OUTLINED_FUNCTION_13_14(v1);
  *v2 = v0;
  v2[1] = ModifyContactAttributeCATs.promptForNickname();
  OUTLINED_FUNCTION_11_7();
  OUTLINED_FUNCTION_10_10();
  OUTLINED_FUNCTION_9_13();
  return OUTLINED_FUNCTION_32_4(v3, v4, v5, v6, v7);
}

uint64_t ContactsCommonCATs.meCardSetup(device:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return OUTLINED_FUNCTION_4_3();
}

uint64_t ContactsCommonCATs.meCardSetup(device:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD, unint64_t, unint64_t, uint64_t);

  v1 = v0[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v2 = OUTLINED_FUNCTION_7_11();
  v0[5] = v2;
  *(_OWORD *)(v2 + 16) = xmmword_21FED8CB0;
  *(_QWORD *)(v2 + 32) = 0x656369766564;
  *(_QWORD *)(v2 + 40) = 0xE600000000000000;
  v3 = 0;
  if (v1)
  {
    v3 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(_QWORD *)(v2 + 56) = 0;
    *(_QWORD *)(v2 + 64) = 0;
  }
  *(_QWORD *)(v2 + 48) = v1;
  *(_QWORD *)(v2 + 72) = v3;
  v6 = (uint64_t (*)(_QWORD, unint64_t, unint64_t, uint64_t))((int)*MEMORY[0x24BE92870]
                                                                                   + MEMORY[0x24BE92870]);
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc();
  v0[6] = v4;
  *v4 = v0;
  v4[1] = ContactsCommonCATs.meCardSetup(device:);
  return v6(v0[2], 0xD00000000000001ALL, 0x800000021FEE11F0, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_2_9();
  }
  else
  {
    swift_bridgeObjectRelease();
    return OUTLINED_FUNCTION_4_12(*(uint64_t (**)(void))(v2 + 8));
  }
}

uint64_t ContactsCommonCATs.promptCancelled()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  v1 = OUTLINED_FUNCTION_7_4();
  v2 = (_QWORD *)OUTLINED_FUNCTION_13_14(v1);
  *v2 = v0;
  v2[1] = ModifyContactAttributeCATs.relationshipExists();
  OUTLINED_FUNCTION_11_7();
  OUTLINED_FUNCTION_10_10();
  OUTLINED_FUNCTION_9_13();
  return OUTLINED_FUNCTION_32_4(v3, v4, v5, v6, v7);
}

uint64_t ContactsCommonCATs.promptForContact()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  v1 = OUTLINED_FUNCTION_7_4();
  v2 = (_QWORD *)OUTLINED_FUNCTION_13_14(v1);
  *v2 = v0;
  v2[1] = ModifyContactAttributeCATs.relationshipExists();
  OUTLINED_FUNCTION_11_7();
  OUTLINED_FUNCTION_10_10();
  OUTLINED_FUNCTION_9_13();
  return OUTLINED_FUNCTION_32_4(v3, v4, v5, v6, v7);
}

uint64_t ContactsCommonCATs.unsupportedAction()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  v1 = OUTLINED_FUNCTION_7_4();
  v2 = (_QWORD *)OUTLINED_FUNCTION_13_14(v1);
  *v2 = v0;
  v2[1] = ModifyContactAttributeCATs.relationshipExists();
  OUTLINED_FUNCTION_11_7();
  OUTLINED_FUNCTION_10_10();
  OUTLINED_FUNCTION_9_13();
  return OUTLINED_FUNCTION_32_4(v3, v4, v5, v6, v7);
}

uint64_t ContactsCommonCATs.unsupportedAuthFailed()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  v1 = OUTLINED_FUNCTION_7_4();
  v2 = (_QWORD *)OUTLINED_FUNCTION_13_14(v1);
  *v2 = v0;
  v2[1] = ModifyContactAttributeCATs.relationshipExists();
  OUTLINED_FUNCTION_11_7();
  OUTLINED_FUNCTION_10_10();
  OUTLINED_FUNCTION_9_13();
  return OUTLINED_FUNCTION_32_4(v3, v4, v5, v6, v7);
}

uint64_t ContactsCommonCATs.unsupportedCompanyNotFound(requestedCompany:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[5] = OUTLINED_FUNCTION_22_3();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ContactsCommonCATs.unsupportedCompanyNotFound(requestedCompany:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);

  OUTLINED_FUNCTION_19_11();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v3 = OUTLINED_FUNCTION_7_11();
  *(_QWORD *)(v0 + 48) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_21FED8CB0;
  v4 = (_OWORD *)(v3 + 48);
  *(_QWORD *)(v3 + 32) = v2;
  *(_QWORD *)(v3 + 40) = 0x800000021FEE1130;
  OUTLINED_FUNCTION_21_8(v3, v5, &demangling cache variable for type metadata for SpeakableString?);
  v6 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_20_5(v6);
  if (v7)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v1, &demangling cache variable for type metadata for SpeakableString?);
    *v4 = 0u;
    v4[1] = 0u;
  }
  else
  {
    v8 = OUTLINED_FUNCTION_39_3();
    OUTLINED_FUNCTION_24_5((uint64_t)v8);
  }
  v9 = (_QWORD *)OUTLINED_FUNCTION_7_4();
  *(_QWORD *)(v0 + 56) = v9;
  OUTLINED_FUNCTION_22_7(v9);
  OUTLINED_FUNCTION_6_6();
  return OUTLINED_FUNCTION_1_3(v10, v11, v12, v13, v14);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_8_4();
  if (v0)
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_2_9();
  }
  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_14_0();
    return OUTLINED_FUNCTION_4_12(*(uint64_t (**)(void))(v1 + 8));
  }
}

uint64_t ContactsCommonCATs.unsupportedContactNotFound(requestedContact:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[5] = OUTLINED_FUNCTION_22_3();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ContactsCommonCATs.unsupportedContactNotFound(requestedContact:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);

  OUTLINED_FUNCTION_19_11();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v3 = OUTLINED_FUNCTION_7_11();
  *(_QWORD *)(v0 + 48) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_21FED8CB0;
  v4 = (_OWORD *)(v3 + 48);
  *(_QWORD *)(v3 + 32) = v2;
  *(_QWORD *)(v3 + 40) = 0x800000021FEE10E0;
  OUTLINED_FUNCTION_21_8(v3, v5, &demangling cache variable for type metadata for SpeakableString?);
  v6 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_20_5(v6);
  if (v7)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v1, &demangling cache variable for type metadata for SpeakableString?);
    *v4 = 0u;
    v4[1] = 0u;
  }
  else
  {
    v8 = OUTLINED_FUNCTION_39_3();
    OUTLINED_FUNCTION_24_5((uint64_t)v8);
  }
  v9 = (_QWORD *)OUTLINED_FUNCTION_7_4();
  *(_QWORD *)(v0 + 56) = v9;
  OUTLINED_FUNCTION_22_7(v9);
  OUTLINED_FUNCTION_6_6();
  return OUTLINED_FUNCTION_1_3(v10, v11, v12, v13, v14);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_8_4();
  if (v0)
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_2_9();
  }
  else
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_14_0();
    return OUTLINED_FUNCTION_4_12(*(uint64_t (**)(void))(v1 + 8));
  }
}

uint64_t ContactsCommonCATs.unsupportedLearnPronunciation()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  v1 = OUTLINED_FUNCTION_7_4();
  v2 = (_QWORD *)OUTLINED_FUNCTION_13_14(v1);
  *v2 = v0;
  v2[1] = ModifyContactAttributeCATs.relationshipExists();
  OUTLINED_FUNCTION_11_7();
  OUTLINED_FUNCTION_10_10();
  OUTLINED_FUNCTION_9_13();
  return OUTLINED_FUNCTION_32_4(v3, v4, v5, v6, v7);
}

uint64_t ContactsCommonCATs.unsupportedMissingMeCard(isMe:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_BYTE *)(v3 + 56) = a2;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v2;
  return OUTLINED_FUNCTION_4_3();
}

uint64_t ContactsCommonCATs.unsupportedMissingMeCard(isMe:)()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v1 = *(_BYTE *)(v0 + 56);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v2 = OUTLINED_FUNCTION_7_11();
  *(_QWORD *)(v2 + 32) = 1699574633;
  *(_QWORD *)(v2 + 40) = 0xE400000000000000;
  *(_QWORD *)(v2 + 72) = MEMORY[0x24BEE1328];
  v3 = (int *)MEMORY[0x24BE92870];
  *(_BYTE *)(v2 + 48) = v1;
  v6 = (uint64_t (*)(void))((char *)v3 + *v3);
  *(_QWORD *)(v0 + 32) = v2;
  *(_OWORD *)(v2 + 16) = xmmword_21FED8CB0;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v4;
  *v4 = v0;
  v4[1] = ContactsCommonCATs.unsupportedMissingMeCard(isMe:);
  return OUTLINED_FUNCTION_32_4(*(_QWORD *)(v0 + 16), 0xD000000000000027, 0x800000021FEE10B0, v2, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_2_9();
  }
  else
  {
    swift_bridgeObjectRelease();
    return OUTLINED_FUNCTION_4_12(*(uint64_t (**)(void))(v2 + 8));
  }
}

uint64_t ContactsCommonCATs.unsupportedRelationshipNotFound()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  v1 = OUTLINED_FUNCTION_7_4();
  v2 = (_QWORD *)OUTLINED_FUNCTION_13_14(v1);
  *v2 = v0;
  v2[1] = ModifyContactAttributeCATs.relationshipExists();
  OUTLINED_FUNCTION_11_7();
  OUTLINED_FUNCTION_10_10();
  OUTLINED_FUNCTION_9_13();
  return OUTLINED_FUNCTION_32_4(v3, v4, v5, v6, v7);
}

uint64_t ContactsCommonCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  return ContactsCommonCATs.init(templateDir:options:globals:)(a1, a2);
}

uint64_t ContactsCommonCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = type metadata accessor for CATOption();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v8);
  outlined init with copy of URL?(a1, (uint64_t)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  v10 = CATWrapper.init(templateDir:options:globals:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  outlined destroy of UsoEntity_common_Person.DefinedValues?(a1, &demangling cache variable for type metadata for URL?);
  return v10;
}

uint64_t ContactsCommonCATs.__deallocating_deinit()
{
  CATWrapper.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ContactsCommonCATs()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ContactsCommonCATs;
  if (!type metadata singleton initialization cache for ContactsCommonCATs)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for ContactsCommonCATs()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for ContactsCommonCATs()
{
  return swift_lookUpClassMethod();
}

uint64_t ObjC metadata update function for ContactsCommonCATs()
{
  return type metadata accessor for ContactsCommonCATs();
}

uint64_t OUTLINED_FUNCTION_4_12(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_7_11()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_10_10()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_13_14(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_21_8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  return outlined init with copy of URL?(v3, v4, a3);
}

uint64_t OUTLINED_FUNCTION_22_7(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 16);
}

void GetContactAttributeCATs.intentHandledResponse(matches:alternatives:attribute:contact:isMe:localeString:isVoiceMode:mockGlobals:)(unint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, void *a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  int v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  id v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  id v98;
  id v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  unint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t *, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t *v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  int v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  id v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  Swift::String v170;

  v159 = a9;
  v165 = a2;
  v152 = a8;
  v164 = a1;
  v15 = OUTLINED_FUNCTION_31_4();
  v137 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_55_0();
  v136 = (void *)(v17 - v16);
  v162 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_68();
  v149 = (uint64_t *)v20;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v23);
  v155 = (char *)&v135 - v24;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_39_5();
  v146 = (void *)v27;
  v28 = type metadata accessor for TemplatingResult();
  v157 = *(_QWORD *)(v28 - 8);
  v158 = v28;
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v32);
  OUTLINED_FUNCTION_68();
  v150 = v33;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v34);
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v35);
  OUTLINED_FUNCTION_39_5();
  v141 = v36;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v37);
  OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v38);
  OUTLINED_FUNCTION_68();
  v161 = v39;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v40);
  OUTLINED_FUNCTION_39_5();
  v166 = v41;
  OUTLINED_FUNCTION_34_5();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v42);
  OUTLINED_FUNCTION_55_0();
  v45 = v44 - v43;
  v46 = type metadata accessor for DialogPerson();
  v47 = a4;
  OUTLINED_FUNCTION_50_5();
  Locale.init(identifier:)();
  v160 = v47;
  v48 = a5;
  v153 = v46;
  v154 = v45;
  DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v47, a5, v45, 0);
  v163 = v49;
  v50 = a3;
  outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(a3);
  if (v51)
  {
    String.sanitizeCNLabel.getter();
    v156 = a6;
    swift_bridgeObjectRelease();
    v52 = v156;
    v53 = v165;
    OUTLINED_FUNCTION_17_4();
    v54 = 0;
  }
  else
  {
    v54 = 1;
    v52 = a6;
    v53 = v165;
  }
  v165 = v15;
  __swift_storeEnumTagSinglePayload(v166, v54, 1, v15);
  v55 = v164;
  v56 = GetContactAttributeCATsModern.hasSameLabels(matches:alternatives:)(v164, v53);
  v151 = v56;
  v57 = OUTLINED_FUNCTION_45_1(v56, sel_contactAttributeType);
  switch((unint64_t)v57)
  {
    case 1uLL:
      Optional<A>.toContactsEmailHandles.getter(v55, v58, v59, v60, v61, v62, v63, v64, v135, v136, v137, v138, v139, v140, v141, v142, v143, (uint64_t)v144, (uint64_t)v145,
        (uint64_t)v146,
        v147,
        v148,
        (uint64_t)v149,
        v150);
      Optional<A>.toContactsEmailHandles.getter(v53, v77, v78, v79, v80, v81, v82, v83, v135, v136, v137, v138, v139, v140, v141, v142, v143, (uint64_t)v144, (uint64_t)v145,
        (uint64_t)v146,
        v147,
        v148,
        (uint64_t)v149,
        v150);
      OUTLINED_FUNCTION_25_13();
      OUTLINED_FUNCTION_15_9();
      OUTLINED_FUNCTION_17_9();
      OUTLINED_FUNCTION_22_8();
      GetContactAttributeCATs.intentHandledShowEmail(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:hasSameLabels:isVoiceMode:)();
      OUTLINED_FUNCTION_5_0();
      OUTLINED_FUNCTION_167();
      OUTLINED_FUNCTION_66();
      OUTLINED_FUNCTION_31_7();
      if (OUTLINED_FUNCTION_16_6() == 1)
        goto LABEL_9;
      OUTLINED_FUNCTION_32_7();
      v116 = &v169;
      goto LABEL_25;
    case 2uLL:
      Optional<A>.toContactsPhoneHandles.getter(v55, v58, v59, v60, v61, v62, v63, v64, v135, v136, v137, v138, v139, v140, v141, v142, v143, (uint64_t)v144, (uint64_t)v145,
        (uint64_t)v146,
        v147,
        v148,
        (uint64_t)v149,
        v150);
      Optional<A>.toContactsPhoneHandles.getter(v53, v88, v89, v90, v91, v92, v93, v94, v135, v136, v137, v138, v139, v140, v141, v142, v143, (uint64_t)v144, (uint64_t)v145,
        (uint64_t)v146,
        v147,
        v148,
        (uint64_t)v149,
        v150);
      OUTLINED_FUNCTION_25_13();
      OUTLINED_FUNCTION_15_9();
      OUTLINED_FUNCTION_17_9();
      OUTLINED_FUNCTION_22_8();
      GetContactAttributeCATs.intentHandledShowPhone(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:hasSameLabels:isVoiceMode:)();
      OUTLINED_FUNCTION_5_0();
      OUTLINED_FUNCTION_167();
      OUTLINED_FUNCTION_66();
      OUTLINED_FUNCTION_31_7();
      if (OUTLINED_FUNCTION_16_6() == 1)
      {
LABEL_9:
        OUTLINED_FUNCTION_39_6();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        OUTLINED_FUNCTION_8_9();
        OUTLINED_FUNCTION_7_12();
        OUTLINED_FUNCTION_31_3();
        OUTLINED_FUNCTION_25_7();
        v84 = OUTLINED_FUNCTION_6_7();
        OUTLINED_FUNCTION_4_13(v84, v85);
        goto LABEL_44;
      }
      OUTLINED_FUNCTION_32_7();
      v116 = &v167;
      goto LABEL_25;
    case 3uLL:
      LODWORD(v160) = v48;
      v156 = v52;
      if (v55)
      {
        OUTLINED_FUNCTION_50_5();
        v95 = v52;
        v96 = a7;
        v97 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19SiriContactsIntents16ContactAttributeCG_AF0E13AddressHandleCs5NeverOTg506_sSq19def7SayAA16gh14CGRszlE02toB14i21Handles12localeStringn6AA0bG6J15CGSS_tFAhCXEfU_SSTf1cn_n(v55, v95, a7);
      }
      else
      {
        v96 = a7;
        v97 = MEMORY[0x24BEE4AF8];
      }
      v122 = v165;
      if (!__swift_getEnumTagSinglePayload(v166, 1, v165))
      {
        v123 = v137;
        v124 = v136;
        (*(void (**)(void *, uint64_t, uint64_t))(v137 + 16))(v136, v166, v122);
        v170._countAndFlagsBits = SpeakableString.print.getter();
        v125 = ContactNLIntent.ContactPostalAddressField.init(rawValue:)(v170);
        (*(void (**)(void *, uint64_t))(v123 + 8))(v124, v122);
        if (v125 != 5)
        {
          if (v97 >> 62)
          {
            OUTLINED_FUNCTION_24_11();
            v126 = _CocoaArrayWrapper.endIndex.getter();
          }
          else
          {
            v126 = *(_QWORD *)((v97 & 0xFFFFFFFFFFFFF8) + 0x10);
            OUTLINED_FUNCTION_24_11();
          }
          v127 = v135;
          if (v126)
          {
            specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v97 & 0xC000000000000001) == 0, v97);
            if ((v97 & 0xC000000000000001) != 0)
            {
              v134 = MEMORY[0x2207D80C0](0, v97);
              OUTLINED_FUNCTION_5_0();
              OUTLINED_FUNCTION_29_9(v134 + OBJC_IVAR____TtC19SiriContactsIntents21ContactsAddressHandle_addressLabel);
              swift_unknownObjectRelease();
            }
            else
            {
              v128 = *(_QWORD *)(v97 + 32);
              swift_retain();
              OUTLINED_FUNCTION_5_0();
              OUTLINED_FUNCTION_29_9(v128 + OBJC_IVAR____TtC19SiriContactsIntents21ContactsAddressHandle_addressLabel);
              swift_release();
            }
          }
          else
          {
            OUTLINED_FUNCTION_5_0();
            OUTLINED_FUNCTION_37_5(v127, 1);
          }
          outlined assign with take of SpeakableString?(v127, v166);
        }
      }
      if (v53)
      {
        swift_bridgeObjectRetain();
        _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19SiriContactsIntents16ContactAttributeCG_AF0E13AddressHandleCs5NeverOTg506_sSq19def7SayAA16gh14CGRszlE02toB14i21Handles12localeStringn6AA0bG6J15CGSS_tFAhCXEfU_SSTf1cn_n(v53, v156, v96);
      }
      v129 = v161;
      OUTLINED_FUNCTION_29_9(v166);
      swift_retain();
      OUTLINED_FUNCTION_17_9();
      v130 = v149;
      GetContactAttributeCATs.intentHandledShowAddress(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:hasSameLabels:isVoiceMode:)();
      OUTLINED_FUNCTION_5_0();
      OUTLINED_FUNCTION_167();
      OUTLINED_FUNCTION_66();
      outlined destroy of SpeakableString?(v129);
      if (OUTLINED_FUNCTION_16_6() == 1)
      {
        v167 = *v130;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        OUTLINED_FUNCTION_8_9();
        OUTLINED_FUNCTION_7_12();
        OUTLINED_FUNCTION_31_3();
        OUTLINED_FUNCTION_25_7();
        v131 = OUTLINED_FUNCTION_6_7();
        OUTLINED_FUNCTION_26_11(v131, v132);
        goto LABEL_44;
      }
      v133 = v143;
      OUTLINED_FUNCTION_12_11(v143, (uint64_t)v130);
      OUTLINED_FUNCTION_66();
      OUTLINED_FUNCTION_12_11(v159, v133);
      goto LABEL_46;
    case 4uLL:
      type metadata accessor for DialogCalendar();
      v98 = a10;
      v99 = v160;
      v100 = DialogCalendar.init(contact:mockGlobals:)((uint64_t)v99, a10);
      type metadata accessor for ContactsAgeInfo();
      v101 = ContactsAgeInfo.__allocating_init(contact:contactAttribute:mockGlobals:)(v99, v50, 0);
      OUTLINED_FUNCTION_15_9();
      v50 = v146;
      GetContactAttributeCATs.intentHandledShowAge(birthdayInfo:ageInfo:contact:isMe:)(v100, v101, a7, v48 & 1);
      OUTLINED_FUNCTION_66();
      OUTLINED_FUNCTION_45();
      swift_release();
      if (OUTLINED_FUNCTION_16_6() == 1)
      {
        OUTLINED_FUNCTION_39_6();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        OUTLINED_FUNCTION_8_9();
        OUTLINED_FUNCTION_7_12();
        OUTLINED_FUNCTION_31_3();
        OUTLINED_FUNCTION_25_7();
        v102 = OUTLINED_FUNCTION_6_7();
        OUTLINED_FUNCTION_4_13(v102, v103);
        v87 = v104 - 2;
        goto LABEL_44;
      }
      OUTLINED_FUNCTION_32_7();
      v116 = &v168;
LABEL_25:
      v76 = *(v116 - 32);
      v117 = v76;
      v118 = (uint64_t)v50;
      goto LABEL_28;
    case 5uLL:
      type metadata accessor for DialogCalendar();
      v105 = a10;
      v106 = DialogCalendar.init(contact:mockGlobals:)((uint64_t)v160, a10);
      OUTLINED_FUNCTION_15_9();
      v107 = v144;
      GetContactAttributeCATs.intentHandledShowBirthday(birthdayInfo:contact:isMe:)(v106, a7, v48 & 1);
      OUTLINED_FUNCTION_66();
      OUTLINED_FUNCTION_45();
      if (OUTLINED_FUNCTION_16_6() == 1)
      {
        v167 = *v107;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        OUTLINED_FUNCTION_8_9();
        OUTLINED_FUNCTION_7_12();
        OUTLINED_FUNCTION_31_3();
        OUTLINED_FUNCTION_25_7();
        v108 = OUTLINED_FUNCTION_6_7();
        OUTLINED_FUNCTION_4_13(v108, v109);
        v87 = v110 + 3;
        goto LABEL_44;
      }
      v119 = v158;
      v120 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v157 + 32);
      v121 = v138;
      v120(v138, v107, v158);
      OUTLINED_FUNCTION_66();
      v120(v159, (uint64_t *)v121, v119);
      goto LABEL_46;
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
      v65 = OUTLINED_FUNCTION_45_1((uint64_t)v57, sel_contactAttributeType);
      OUTLINED_FUNCTION_45_1((uint64_t)v65, sel_contactAttributeType);
      v66 = objc_msgSend(v50, sel_contactAttributeType);
      v67 = v160;
      CNContact.requestedName(_:)((uint64_t)v66);
      v68 = v161;
      OUTLINED_FUNCTION_17_4();
      OUTLINED_FUNCTION_37_5(v68, 0);
      v69 = v67;
      OUTLINED_FUNCTION_50_5();
      v70 = v154;
      Locale.init(identifier:)();
      DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v69, 1, v70, 0);
      v71 = (uint64_t *)v155;
      GetContactAttributeCATs.intentHandledShowName(nicknameRequest:lastNameRequest:nameValue:contact:isMe:)();
      OUTLINED_FUNCTION_45();
      OUTLINED_FUNCTION_31_7();
      if (OUTLINED_FUNCTION_16_6() != 1)
      {
        v76 = v150;
        OUTLINED_FUNCTION_12_11(v150, (uint64_t)v71);
        goto LABEL_29;
      }
      v167 = *v71;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      OUTLINED_FUNCTION_8_9();
      OUTLINED_FUNCTION_7_12();
      OUTLINED_FUNCTION_31_3();
      OUTLINED_FUNCTION_25_7();
      v72 = OUTLINED_FUNCTION_6_7();
      OUTLINED_FUNCTION_4_13(v72, v73);
      OUTLINED_FUNCTION_14_13(v75, v74 - 1);
LABEL_19:
      swift_storeEnumTagMultiPayload();
      goto LABEL_45;
    case 0xBuLL:
      v111 = v161;
      v112 = v163;
      DialogPerson.company.getter();
      swift_retain();
      v113 = v145;
      GetContactAttributeCATs.intentHandledShowCompany(isMe:companyName:contact:)(v48 & 1, v111, v112);
      OUTLINED_FUNCTION_66();
      outlined destroy of SpeakableString?(v111);
      if (OUTLINED_FUNCTION_16_6() == 1)
      {
        v167 = *v113;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        OUTLINED_FUNCTION_8_9();
        OUTLINED_FUNCTION_7_12();
        OUTLINED_FUNCTION_31_3();
        OUTLINED_FUNCTION_25_7();
        v114 = OUTLINED_FUNCTION_6_7();
        OUTLINED_FUNCTION_26_11(v114, v115);
LABEL_44:
        OUTLINED_FUNCTION_14_13(v86, v87);
        swift_storeEnumTagMultiPayload();
LABEL_45:
        swift_willThrow();
        OUTLINED_FUNCTION_66();
      }
      else
      {
        OUTLINED_FUNCTION_32_7();
        v76 = v139;
        v117 = v139;
        v118 = (uint64_t)v113;
LABEL_28:
        OUTLINED_FUNCTION_12_11(v117, v118);
LABEL_29:
        swift_release();
        OUTLINED_FUNCTION_12_11(v159, v76);
      }
LABEL_46:
      outlined destroy of SpeakableString?(v166);
      OUTLINED_FUNCTION_18_8();
      return;
    default:
      OUTLINED_FUNCTION_31_3();
      OUTLINED_FUNCTION_25_7();
      OUTLINED_FUNCTION_6_7();
      goto LABEL_19;
  }
}

void GetContactAttributeCATs.disambiguateLabeledAttribute(matches:alternatives:attribute:contact:isMe:localeString:isVoiceMode:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v86 = a1;
  HIDWORD(v88) = a8;
  v91 = a6;
  HIDWORD(v92) = a5;
  v87 = a2;
  v90 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_5_2();
  v81 = (uint64_t *)v14;
  OUTLINED_FUNCTION_54();
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (uint64_t *)((char *)&v77 - v17);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v77 - v19;
  v21 = type metadata accessor for TemplatingResult();
  v82 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_5_2();
  v80 = v22;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v23);
  v78 = (char *)&v77 - v24;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_39_5();
  v79 = v26;
  OUTLINED_FUNCTION_34_5();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_55_0();
  v30 = v29 - v28;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v31);
  OUTLINED_FUNCTION_55_0();
  v34 = v33 - v32;
  outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(a3);
  v83 = v21;
  v84 = a9;
  if (v35)
  {
    OUTLINED_FUNCTION_17_4();
    v36 = OUTLINED_FUNCTION_31_4();
    v37 = 0;
  }
  else
  {
    v36 = OUTLINED_FUNCTION_31_4();
    v37 = 1;
  }
  __swift_storeEnumTagSinglePayload(v34, v37, 1, v36);
  type metadata accessor for DialogPerson();
  v38 = a4;
  OUTLINED_FUNCTION_24_11();
  Locale.init(identifier:)();
  DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v38, BYTE4(v92) & 1, v30, 0);
  v39 = objc_msgSend(a3, sel_contactAttributeType);
  if (v39 == (id)1)
  {
    Optional<A>.toContactsEmailHandles.getter(v86, v40, v41, v42, v43, v44, v45, v46, v77, v78, v79, v80, (uint64_t)v81, v82, v83, v84, v85, v86, v87,
      v88,
      v89,
      v90,
      v91,
      v92);
    Optional<A>.toContactsEmailHandles.getter(v87, v58, v59, v60, v61, v62, v63, v64, v77, v78, v79, v80, (uint64_t)v81, v82, v83, v84, v85, v86, v87,
      v88,
      v89,
      v90,
      v91,
      v92);
    OUTLINED_FUNCTION_23_8();
    GetContactAttributeCATs.disambiguateEmail(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:)();
    OUTLINED_FUNCTION_5_0();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_21_9();
    if (OUTLINED_FUNCTION_30_7() == 1)
    {
      v93 = *v18;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      OUTLINED_FUNCTION_8_9();
      OUTLINED_FUNCTION_7_12();
      OUTLINED_FUNCTION_31_3();
      OUTLINED_FUNCTION_25_7();
      v65 = OUTLINED_FUNCTION_6_7();
      OUTLINED_FUNCTION_20_12(v65, v66);
      goto LABEL_20;
    }
    v69 = (uint64_t)v78;
    v70 = (uint64_t)v78;
    v71 = (uint64_t)v18;
LABEL_23:
    OUTLINED_FUNCTION_12_11(v70, v71);
    OUTLINED_FUNCTION_21_9();
    OUTLINED_FUNCTION_35_5();
    OUTLINED_FUNCTION_12_11(v84, v69);
    goto LABEL_24;
  }
  if (v39 == (id)3)
  {
    v67 = v86;
    if (v86)
    {
      OUTLINED_FUNCTION_24_11();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19SiriContactsIntents16ContactAttributeCG_AF0E13AddressHandleCs5NeverOTg506_sSq19def7SayAA16gh14CGRszlE02toB14i21Handles12localeStringn6AA0bG6J15CGSS_tFAhCXEfU_SSTf1cn_n(v67, v91, a7);
    }
    v72 = v81;
    v73 = v87;
    if (v87)
    {
      OUTLINED_FUNCTION_24_11();
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay19SiriContactsIntents16ContactAttributeCG_AF0E13AddressHandleCs5NeverOTg506_sSq19def7SayAA16gh14CGRszlE02toB14i21Handles12localeStringn6AA0bG6J15CGSS_tFAhCXEfU_SSTf1cn_n(v73, v91, a7);
    }
    OUTLINED_FUNCTION_23_8();
    OUTLINED_FUNCTION_36_3();
    GetContactAttributeCATs.disambiguateAddress(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_5_0();
    OUTLINED_FUNCTION_21_9();
    if (OUTLINED_FUNCTION_30_7() == 1)
    {
      v93 = *v72;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      OUTLINED_FUNCTION_8_9();
      OUTLINED_FUNCTION_7_12();
      OUTLINED_FUNCTION_31_3();
      OUTLINED_FUNCTION_25_7();
      v74 = OUTLINED_FUNCTION_6_7();
      OUTLINED_FUNCTION_20_12(v74, v75);
      v57 = v76 | 2;
      goto LABEL_20;
    }
    v69 = v80;
    v70 = v80;
    v71 = (uint64_t)v72;
    goto LABEL_23;
  }
  if (v39 != (id)2)
  {
    OUTLINED_FUNCTION_31_3();
    OUTLINED_FUNCTION_25_7();
    OUTLINED_FUNCTION_6_7();
LABEL_21:
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    OUTLINED_FUNCTION_21_9();
    OUTLINED_FUNCTION_35_5();
    goto LABEL_24;
  }
  Optional<A>.toContactsPhoneHandles.getter(v86, v40, v41, v42, v43, v44, v45, v46, v77, v78, v79, v80, (uint64_t)v81, v82, v83, v84, v85, v86, v87,
    v88,
    v89,
    v90,
    v91,
    v92);
  Optional<A>.toContactsPhoneHandles.getter(v87, v47, v48, v49, v50, v51, v52, v53, v77, v78, v79, v80, (uint64_t)v81, v82, v83, v84, v85, v86, v87,
    v88,
    v89,
    v90,
    v91,
    v92);
  OUTLINED_FUNCTION_23_8();
  OUTLINED_FUNCTION_36_3();
  GetContactAttributeCATs.disambiguatePhone(matchingHandles:alternativeHandles:requestedLabel:contact:isMe:isVoiceMode:)();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_167();
  OUTLINED_FUNCTION_21_9();
  if (OUTLINED_FUNCTION_30_7() == 1)
  {
    OUTLINED_FUNCTION_39_6();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    OUTLINED_FUNCTION_8_9();
    OUTLINED_FUNCTION_7_12();
    OUTLINED_FUNCTION_31_3();
    OUTLINED_FUNCTION_25_7();
    v54 = OUTLINED_FUNCTION_6_7();
    OUTLINED_FUNCTION_20_12(v54, v55);
LABEL_20:
    OUTLINED_FUNCTION_14_13(v56, v57);
    goto LABEL_21;
  }
  v68 = v79;
  OUTLINED_FUNCTION_12_11(v79, (uint64_t)v20);
  OUTLINED_FUNCTION_21_9();
  OUTLINED_FUNCTION_35_5();
  OUTLINED_FUNCTION_12_11(v84, v68);
LABEL_24:
  OUTLINED_FUNCTION_18_8();
}

void OUTLINED_FUNCTION_1_11()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = v0;
}

uint64_t OUTLINED_FUNCTION_4_13(uint64_t a1, uint64_t a2)
{
  return a2;
}

void OUTLINED_FUNCTION_7_12()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_8_9()
{
  return swift_willThrowTypedImpl();
}

uint64_t OUTLINED_FUNCTION_12_11(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

void OUTLINED_FUNCTION_14_13(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *a1 = a2;
  a1[1] = (v2 - 32) | 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_15_9()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_16_6()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_20_12(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_21_9()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_22_8()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_24_11()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_25_13()
{
  uint64_t v0;

  return outlined init with copy of SpeakableString?(*(_QWORD *)(v0 - 112), *(_QWORD *)(v0 - 160));
}

uint64_t OUTLINED_FUNCTION_26_11(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_29_9(uint64_t a1)
{
  uint64_t v1;

  return outlined init with copy of SpeakableString?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_30_7()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t OUTLINED_FUNCTION_34_5()
{
  return type metadata accessor for Locale();
}

uint64_t OUTLINED_FUNCTION_35_5()
{
  uint64_t v0;

  return outlined destroy of SpeakableString?(v0);
}

uint64_t OUTLINED_FUNCTION_37_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, *(_QWORD *)(v2 - 128));
}

void OUTLINED_FUNCTION_39_6()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 72) = *v0;
}

void DialogDuration.init(_:mockGlobals:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_2_15();
  type metadata accessor for DialogDuration.Builder();
  OUTLINED_FUNCTION_32_0();
  DialogDuration.Builder.init()();
  dispatch thunk of DialogDuration.Builder.withSecs(_:)();
  OUTLINED_FUNCTION_2();
  dispatch thunk of DialogDuration.__allocating_init(builder:)();
  if (v0)
  {
    swift_retain();
    dispatch thunk of DialogDuration.mockGlobals.setter();
    OUTLINED_FUNCTION_2();
  }
  OUTLINED_FUNCTION_1_12();
}

void DialogCalendar.init(_:mockGlobals:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_2_15();
  type metadata accessor for DialogCalendar.Builder();
  OUTLINED_FUNCTION_32_0();
  DialogCalendar.Builder.init()();
  dispatch thunk of DialogCalendar.Builder.withSecs(_:)();
  OUTLINED_FUNCTION_2();
  dispatch thunk of DialogCalendar.__allocating_init(builder:)();
  if (v0)
  {
    swift_retain();
    dispatch thunk of DialogCalendar.mockGlobals.setter();
    OUTLINED_FUNCTION_2();
  }
  OUTLINED_FUNCTION_1_12();
}

uint64_t OUTLINED_FUNCTION_2_15()
{
  return 0;
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Collection.first.getter(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BEA5580], a2);
}

{
  return specialized Collection.first.getter(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE9C828], a2);
}

{
  return specialized Collection.first.getter(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE9F9A0], a2);
}

{
  return specialized Collection.first.getter(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE9FC40], a2);
}

{
  return specialized Collection.first.getter(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BE98188], a2);
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = a2(0);
  v7 = v6;
  if (v5)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a3, a1+ ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80)), v6);
    v8 = 0;
  }
  else
  {
    v8 = 1;
  }
  return __swift_storeEnumTagSinglePayload(a3, v8, 1, v7);
}

uint64_t protocol witness for ContactResolverProtocol.makeRecommendations(queries:config:) in conformance ContactResolver()
{
  return dispatch thunk of ContactResolver.makeRecommendations(queries:config:)();
}

uint64_t Contact.asHighConfidenceMatch.getter@<X0>(uint64_t a1@<X8>)
{
  return Contact.asHighConfidenceMatch.getter(1, a1);
}

uint64_t Contact.asLowConfidenceMatch.getter@<X0>(uint64_t a1@<X8>)
{
  return Contact.asHighConfidenceMatch.getter(0, a1);
}

uint64_t Contact.asHighConfidenceMatch.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  static Contact.confidenceScore = a1;
  v4 = type metadata accessor for Contact();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v2, v4);
}

uint64_t implicit closure #1 in Recommendation<A>.assignConfidence()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for ContactsError();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_15();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<Contact>);
  lazy protocol witness table accessor for type Recommendation<Contact> and conformance Recommendation<A>();
  *v0 = dispatch thunk of CustomStringConvertible.description.getter();
  v0[1] = v2;
  swift_storeEnumTagMultiPayload();
  ContactsError.errorDescription.getter();
  v4 = v3;
  outlined destroy of ContactsError((uint64_t)v0);
  return v4;
}

uint64_t Contact.formattedFullName.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  Class isa;
  id v5;
  uint64_t v6;

  v1 = type metadata accessor for PersonNameComponents();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_15();
  PersonNameComponents.init()();
  Contact.namePrefix.getter();
  PersonNameComponents.namePrefix.setter();
  Contact.givenName.getter();
  PersonNameComponents.givenName.setter();
  Contact.middleName.getter();
  PersonNameComponents.middleName.setter();
  Contact.familyName.getter();
  PersonNameComponents.familyName.setter();
  Contact.nameSuffix.getter();
  PersonNameComponents.nameSuffix.setter();
  v3 = (void *)objc_opt_self();
  isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
  v5 = objc_msgSend(v3, sel_localizedStringFromPersonNameComponents_style_options_, isa, 2, 0);

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  return v6;
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  Class isa;
  id v8;
  uint64_t v9;
  uint64_t v11;

  v1 = v0;
  v2 = type metadata accessor for PersonNameComponents();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  PersonNameComponents.init()();
  outlined bridged method (pb) of @objc Contact.namePrefix.getter(v1);
  PersonNameComponents.namePrefix.setter();
  outlined bridged method (pb) of @objc Contact.givenName.getter(v1);
  PersonNameComponents.givenName.setter();
  outlined bridged method (pb) of @objc Contact.middleName.getter(v1);
  PersonNameComponents.middleName.setter();
  outlined bridged method (pb) of @objc Contact.familyName.getter(v1);
  PersonNameComponents.familyName.setter();
  outlined bridged method (pb) of @objc Contact.nameSuffix.getter(v1);
  PersonNameComponents.nameSuffix.setter();
  v6 = (void *)objc_opt_self();
  isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
  v8 = objc_msgSend(v6, sel_localizedStringFromPersonNameComponents_style_options_, isa, 2, 0);

  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v9;
}

BOOL Contact.isEmpty.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v0 = type metadata accessor for Contact();
  MEMORY[0x24BDAC7A8](v0);
  v56 = (char *)&v55 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_68();
  v55 = v3;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_68();
  v60 = v5;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_68();
  v59 = v7;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_68();
  v58 = v9;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_68();
  v57 = v11;
  OUTLINED_FUNCTION_54();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (uint64_t)&v55 - v14;
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (unint64_t)&v55 - v17;
  v19 = MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)&v55 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v55 - v22;
  v24 = Contact.namePrefix.getter();
  v26 = v25;
  OUTLINED_FUNCTION_5_11();
  if ((v26 & 0x2000000000000000) != 0)
    v27 = HIBYTE(v26) & 0xF;
  else
    v27 = v24 & 0xFFFFFFFFFFFFLL;
  OUTLINED_FUNCTION_0_14((uint64_t)v23);
  if (v27)
  {
    v28 = 0;
  }
  else
  {
    v29 = Contact.nameSuffix.getter();
    v31 = v30;
    OUTLINED_FUNCTION_5_11();
    v32 = HIBYTE(v31) & 0xF;
    if ((v31 & 0x2000000000000000) == 0)
      v32 = v29 & 0xFFFFFFFFFFFFLL;
    v28 = v32 == 0;
  }
  OUTLINED_FUNCTION_1_13((uint64_t)v23);
  OUTLINED_FUNCTION_0_14((uint64_t)v21);
  if (!v28)
  {
    OUTLINED_FUNCTION_1_13((uint64_t)v21);
    OUTLINED_FUNCTION_0_14(v18);
    v38 = v55;
    v37 = (uint64_t)v56;
LABEL_38:
    OUTLINED_FUNCTION_1_13(v18);
    OUTLINED_FUNCTION_0_14(v15);
LABEL_39:
    OUTLINED_FUNCTION_1_13(v15);
    v44 = v57;
    OUTLINED_FUNCTION_0_14(v57);
    v45 = v60;
LABEL_40:
    OUTLINED_FUNCTION_1_13(v44);
    v47 = v58;
    OUTLINED_FUNCTION_0_14(v58);
    v48 = v59;
LABEL_41:
    OUTLINED_FUNCTION_1_13(v47);
    OUTLINED_FUNCTION_0_14(v48);
    goto LABEL_42;
  }
  v33 = Contact.givenName.getter();
  v35 = v34;
  OUTLINED_FUNCTION_5_11();
  if ((v35 & 0x2000000000000000) != 0)
    v36 = HIBYTE(v35) & 0xF;
  else
    v36 = v33 & 0xFFFFFFFFFFFFLL;
  OUTLINED_FUNCTION_1_13((uint64_t)v21);
  OUTLINED_FUNCTION_0_14(v18);
  v38 = v55;
  v37 = (uint64_t)v56;
  if (v36)
    goto LABEL_38;
  v39 = Contact.middleName.getter();
  v41 = v40;
  OUTLINED_FUNCTION_5_11();
  if ((v41 & 0x2000000000000000) != 0)
    v42 = HIBYTE(v41) & 0xF;
  else
    v42 = v39 & 0xFFFFFFFFFFFFLL;
  OUTLINED_FUNCTION_1_13(v18);
  OUTLINED_FUNCTION_0_14(v15);
  if (v42)
    goto LABEL_39;
  Contact.familyName.getter();
  OUTLINED_FUNCTION_2_16();
  if ((v18 & 0x2000000000000000) != 0)
    v43 = HIBYTE(v18) & 0xF;
  else
    v43 = v15 & 0xFFFFFFFFFFFFLL;
  OUTLINED_FUNCTION_1_13(v15);
  v44 = v57;
  OUTLINED_FUNCTION_0_14(v57);
  v45 = v60;
  if (v43)
    goto LABEL_40;
  Contact.organizationName.getter();
  OUTLINED_FUNCTION_2_16();
  if ((v18 & 0x2000000000000000) != 0)
    v46 = HIBYTE(v18) & 0xF;
  else
    v46 = v44 & 0xFFFFFFFFFFFFLL;
  OUTLINED_FUNCTION_1_13(v44);
  v47 = v58;
  OUTLINED_FUNCTION_0_14(v58);
  v48 = v59;
  if (v46)
    goto LABEL_41;
  v49 = *(_QWORD *)(Contact.contactRelations.getter() + 16);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_13(v47);
  OUTLINED_FUNCTION_0_14(v48);
  if (v49)
  {
LABEL_42:
    OUTLINED_FUNCTION_1_13(v48);
    OUTLINED_FUNCTION_0_14(v45);
LABEL_43:
    OUTLINED_FUNCTION_1_13(v45);
    OUTLINED_FUNCTION_0_14(v38);
    goto LABEL_44;
  }
  Contact.nickname.getter();
  OUTLINED_FUNCTION_2_16();
  if ((v47 & 0x2000000000000000) != 0)
    v50 = HIBYTE(v47) & 0xF;
  else
    v50 = v48 & 0xFFFFFFFFFFFFLL;
  OUTLINED_FUNCTION_1_13(v48);
  OUTLINED_FUNCTION_0_14(v45);
  if (v50)
    goto LABEL_43;
  v51 = *(_QWORD *)(Contact.handles.getter() + 16);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_13(v45);
  OUTLINED_FUNCTION_0_14(v38);
  if (v51)
  {
LABEL_44:
    OUTLINED_FUNCTION_1_13(v38);
    OUTLINED_FUNCTION_0_14(v37);
LABEL_45:
    v53 = 0;
    goto LABEL_46;
  }
  Contact.id.getter();
  OUTLINED_FUNCTION_2_16();
  if ((v47 & 0x2000000000000000) != 0)
    v52 = HIBYTE(v47) & 0xF;
  else
    v52 = v38 & 0xFFFFFFFFFFFFLL;
  OUTLINED_FUNCTION_1_13(v38);
  OUTLINED_FUNCTION_0_14(v37);
  if (v52)
    goto LABEL_45;
  v53 = Contact.isMe.getter() == 2;
LABEL_46:
  OUTLINED_FUNCTION_1_13(v37);
  return v53;
}

uint64_t Contact.asContactQuery.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, unint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactQuery?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_9_5();
  v44 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactRelationshipQuery?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_9_5();
  v43 = v4;
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Contact.LabeledValue<String>);
  v46 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  OUTLINED_FUNCTION_55_0();
  v7 = v6 - v5;
  type metadata accessor for ContactHandle.HandleType();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_55_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactHandle?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_55_0();
  v12 = v11 - v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactHandleQuery?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_55_0();
  v16 = v15 - v14;
  v17 = type metadata accessor for ContactOntologySource();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_15();
  ContactQuery.init()();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 104))(v0, *MEMORY[0x24BE938C0], v17);
  ContactQuery.ontologySource.setter();
  Contact.givenName.getter();
  ContactQuery.fullName.setter();
  Contact.isMe.getter();
  ContactQuery.isMe.setter();
  v19 = Contact.handles.getter();
  specialized Collection.first.getter(v19, (uint64_t (*)(_QWORD))MEMORY[0x24BE935E0], v12);
  swift_bridgeObjectRelease();
  v20 = type metadata accessor for ContactHandle();
  if (__swift_getEnumTagSinglePayload(v12, 1, v20) == 1)
  {
    outlined destroy of ContactHandle?(v12);
    v21 = 1;
  }
  else
  {
    ContactHandle.type.getter();
    ContactHandle.label.getter();
    ContactHandle.value.getter();
    ContactHandleQuery.init(type:label:value:)();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v12, v20);
    v21 = 0;
  }
  v22 = type metadata accessor for ContactHandleQuery();
  OUTLINED_FUNCTION_19_4(v16, v21, v23, v22);
  ContactQuery.handle.setter();
  Contact.middleName.getter();
  ContactQuery.middleName.setter();
  Contact.nickname.getter();
  ContactQuery.nickname.setter();
  Contact.namePrefix.getter();
  ContactQuery.namePrefix.setter();
  Contact.nameSuffix.getter();
  ContactQuery.nameSuffix.setter();
  Contact.organizationName.getter();
  ContactQuery.organizationName.setter();
  Contact.previousFamilyName.getter();
  ContactQuery.previousFamilyName.setter();
  v24 = Contact.contactRelations.getter();
  v25 = *(_QWORD *)(v24 + 16);
  if (v25)
  {
    v26 = v24 + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80));
    v27 = *(_QWORD *)(v46 + 72);
    v28 = *(void (**)(uint64_t, unint64_t, uint64_t))(v46 + 16);
    v29 = MEMORY[0x24BEE4AF8];
    do
    {
      v28(v7, v26, v45);
      v30 = Contact.LabeledValue.label.getter();
      v32 = v31;
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v7, v45);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_10_11(0, *(_QWORD *)(v29 + 16) + 1);
        v29 = v36;
      }
      v34 = *(_QWORD *)(v29 + 16);
      v33 = *(_QWORD *)(v29 + 24);
      if (v34 >= v33 >> 1)
      {
        OUTLINED_FUNCTION_10_11(v33 > 1, v34 + 1);
        v29 = v37;
      }
      *(_QWORD *)(v29 + 16) = v34 + 1;
      v35 = v29 + 16 * v34;
      *(_QWORD *)(v35 + 32) = v30;
      *(_QWORD *)(v35 + 40) = v32;
      v26 += v27;
      --v25;
    }
    while (v25);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v29 = MEMORY[0x24BEE4AF8];
  }
  if (!*(_QWORD *)(v29 + 16))
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v38 = type metadata accessor for ContactQuery();
  OUTLINED_FUNCTION_19_4(v44, 1, v39, v38);
  ContactRelationshipQuery.init(label:fromContact:)();
  v40 = type metadata accessor for ContactRelationshipQuery();
  OUTLINED_FUNCTION_19_4(v43, 0, v41, v40);
  return ContactQuery.relationship.setter();
}

uint64_t specialized OptionSet<>.init()()
{
  return 0;
}

uint64_t dispatch thunk of ContactResolverProtocol.makeRecommendations(queries:config:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

unint64_t lazy protocol witness table accessor for type Recommendation<Contact> and conformance Recommendation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Recommendation<Contact> and conformance Recommendation<A>;
  if (!lazy protocol witness table cache variable for type Recommendation<Contact> and conformance Recommendation<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Recommendation<Contact>);
    result = MEMORY[0x2207D86A8](MEMORY[0x24BE93680], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Recommendation<Contact> and conformance Recommendation<A>);
  }
  return result;
}

uint64_t outlined destroy of ContactsError(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ContactsError();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of ContactHandle?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactHandle?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_0_14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_1_13(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_2_16()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_5_11()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_10_11(char a1, uint64_t a2)
{
  uint64_t v2;

  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

uint64_t UsoTaskBuilder_noVerb_common_Person.init(name:contactId:handle:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6;
  id v7;

  v6 = MEMORY[0x2207D6E3C]();
  type metadata accessor for UsoEntityBuilder_common_Person();
  v7 = a5;
  swift_retain();
  UsoEntityBuilder_common_Person.init(name:contactId:handle:)();
  dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
  swift_release();
  swift_release();

  return v6;
}

id ContactNLv3Intent.toSiriKitIntent(referenceResolver:previousIntent:)()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  id v20;
  uint64_t v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  char v26;
  uint64_t v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v38[24];
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;

  OUTLINED_FUNCTION_32();
  v41 = v1;
  v42 = v2;
  v3 = v0;
  OUTLINED_FUNCTION_14_14();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_55_0();
  v7 = v6 - v5;
  v8 = type metadata accessor for Signpost.OpenSignpost();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_55_0();
  v12 = v11 - v10;
  v39 = MEMORY[0x24BEE0D00];
  v40 = lazy protocol witness table accessor for type String and conformance String();
  strcpy(v38, "NLv3IntentOnly");
  v38[15] = -18;
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v13 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_21FED8CB0;
  outlined init with copy of DeviceState((uint64_t)v38, v14 + 32);
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  swift_bridgeObjectRelease();
  v15 = v12 + *(int *)(v8 + 20);
  *(_QWORD *)v15 = "ToSiriKitIntent";
  *(_QWORD *)(v15 + 8) = 15;
  *(_BYTE *)(v15 + 16) = 2;
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v38);
  ContactNLv3Intent.isUnsupportedAction.getter();
  if ((v16 & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v17 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v17, (uint64_t)static Logger.siriContacts);
    v18 = OUTLINED_FUNCTION_8();
    if (os_log_type_enabled(v3, v18))
    {
      v19 = (uint8_t *)OUTLINED_FUNCTION_2_1();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_21FE16000, v3, v18, "#ContactNLv3Intent.toSiriKitIntent: found unsupported parse, returning nil", v19, 2u);
      OUTLINED_FUNCTION_0();
    }

    goto LABEL_9;
  }
  if ((ContactNLv3Intent.isModifyContactAttribute.getter() & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v21 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v21, (uint64_t)static Logger.siriContacts);
    v22 = OUTLINED_FUNCTION_8();
    if (OUTLINED_FUNCTION_53(v22))
    {
      *(_WORD *)OUTLINED_FUNCTION_2_1() = 0;
      OUTLINED_FUNCTION_19_3(&dword_21FE16000, v23, v24, "#ContactNLv3Intent.toSiriKitIntent: converting parse to ModifyContactAttributeIntent");
      OUTLINED_FUNCTION_0();
    }

    type metadata accessor for ModifyContactAttributeIntent();
    OUTLINED_FUNCTION_12_12((uint64_t)v3);
    OUTLINED_FUNCTION_26_12();
    ModifyContactAttributeIntent.__allocating_init(_:referenceResolver:)(v7, (uint64_t)v38);
    v20 = v25;
  }
  else
  {
    ContactNLv3Intent.isGetContactAttribute.getter();
    if ((v26 & 1) != 0)
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v27 = OUTLINED_FUNCTION_26();
      OUTLINED_FUNCTION_10_1(v27, (uint64_t)static Logger.siriContacts);
      v28 = OUTLINED_FUNCTION_8();
      if (OUTLINED_FUNCTION_53(v28))
      {
        *(_WORD *)OUTLINED_FUNCTION_2_1() = 0;
        OUTLINED_FUNCTION_19_3(&dword_21FE16000, v29, v30, "#ContactNLv3Intent.toSiriKitIntent: converting parse to GetContactAttributeIntent");
        OUTLINED_FUNCTION_0();
      }

      type metadata accessor for GetContactAttributeIntent();
      OUTLINED_FUNCTION_12_12((uint64_t)v3);
      OUTLINED_FUNCTION_26_12();
      v20 = GetContactAttributeIntent.__allocating_init(_:referenceResolver:)(v7, (uint64_t)v38);
    }
    else
    {
      ContactNLv3Intent.isGetContact.getter();
      if ((v31 & 1) == 0)
      {
LABEL_9:
        v20 = 0;
        goto LABEL_28;
      }
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v32 = OUTLINED_FUNCTION_26();
      OUTLINED_FUNCTION_10_1(v32, (uint64_t)static Logger.siriContacts);
      v33 = OUTLINED_FUNCTION_8();
      if (OUTLINED_FUNCTION_53(v33))
      {
        *(_WORD *)OUTLINED_FUNCTION_2_1() = 0;
        OUTLINED_FUNCTION_19_3(&dword_21FE16000, v34, v35, "#ContactNLv3Intent.toSiriKitIntent: converting parse to GetContactIntent");
        OUTLINED_FUNCTION_0();
      }

      type metadata accessor for GetContactIntent();
      OUTLINED_FUNCTION_12_12((uint64_t)v3);
      OUTLINED_FUNCTION_26_12();
      v20 = GetContactIntent.__allocating_init(_:referenceResolver:)(v7, (uint64_t)v38);
    }
  }
LABEL_28:
  static os_signpost_type_t.end.getter();
  v36 = os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_25_14(v36, (uint64_t (*)(_QWORD))type metadata accessor for Signpost.OpenSignpost);
  return v20;
}

void ContactNLv3Intent.isUnsupportedAction.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  OUTLINED_FUNCTION_14_14();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_8_10();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_21_10();
  MEMORY[0x24BDAC7A8](v2);
  ContactNLv3Intent.isAskingForAllContacts.getter();
  v4 = v3;
  v5 = OUTLINED_FUNCTION_4_14();
  if ((v4 & 1) != 0)
  {
    OUTLINED_FUNCTION_22_9(v5, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
    v6 = OUTLINED_FUNCTION_16_7();
LABEL_4:
    OUTLINED_FUNCTION_15_10(v6, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
    v9 = OUTLINED_FUNCTION_6_13();
    goto LABEL_5;
  }
  v7 = ContactNLv3Intent.isDeleteContacts.getter(3);
  v8 = v7;
  OUTLINED_FUNCTION_22_9(v7, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
  v6 = OUTLINED_FUNCTION_16_7();
  if ((v8 & 1) != 0)
    goto LABEL_4;
  v10 = ContactNLv3Intent.isDeleteContacts.getter(2);
  v11 = v10;
  OUTLINED_FUNCTION_15_10(v10, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
  v9 = OUTLINED_FUNCTION_6_13();
  if ((v11 & 1) == 0)
    ContactNLv3Intent.isModifyUnsupportedAttribute.getter();
LABEL_5:
  OUTLINED_FUNCTION_25_14(v9, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_31_9();
}

uint64_t ContactNLv3Intent.isModifyContactAttribute.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  OUTLINED_FUNCTION_14_14();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_8_10();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_18_9();
  MEMORY[0x24BDAC7A8](v2);
  ContactNLv3Intent.hasModifyVerb.getter();
  v4 = v3;
  v5 = OUTLINED_FUNCTION_11_8();
  if ((v4 & 1) != 0)
    goto LABEL_6;
  if (one-time initialization token for setNickName != -1)
    swift_once();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent();
  IntentNodeTraversable.value<A>(forNode:)();
  if (v10)
  {
    v5 = swift_bridgeObjectRelease();
LABEL_6:
    OUTLINED_FUNCTION_23_10(v5, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
    v6 = OUTLINED_FUNCTION_4_14();
    OUTLINED_FUNCTION_22_9(v6, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
    v7 = OUTLINED_FUNCTION_6_13();
    v8 = 1;
    goto LABEL_7;
  }
  OUTLINED_FUNCTION_23_10(0, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_4_14();
  if (one-time initialization token for setRelationship != -1)
    swift_once();
  IntentNodeTraversable.value<A>(forNode:)();
  OUTLINED_FUNCTION_22_9(0, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_6_13();
  if (one-time initialization token for removeRelationship != -1)
    swift_once();
  IntentNodeTraversable.value<A>(forNode:)();
  v7 = v10;
  v8 = 0;
LABEL_7:
  OUTLINED_FUNCTION_25_14(v7, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
  return v8;
}

void ContactNLv3Intent.isGetContactAttribute.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  OUTLINED_FUNCTION_32();
  v3 = v0;
  OUTLINED_FUNCTION_14_14();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_8_10();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_21_10();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_18_9();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_19_12();
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v21 - v9;
  if (one-time initialization token for contactAttributes != -1)
    swift_once();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent();
  v11 = *(_QWORD *)(IntentNodeTraversable.values<A>(forNode:)() + 16);
  swift_bridgeObjectRelease();
  v12 = outlined init with copy of ContactNLv3Intent(v3, (uint64_t)v10);
  if (v11)
  {
    v21 = 50;
    v13 = ContactNLv3Intent.containsAttribute(_:)();
    v14 = v13;
    OUTLINED_FUNCTION_27_9(v13, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
    OUTLINED_FUNCTION_11_8();
    if ((v14 & 1) == 0)
      goto LABEL_11;
  }
  else
  {
    OUTLINED_FUNCTION_27_9(v12, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
    OUTLINED_FUNCTION_11_8();
  }
  if (one-time initialization token for contactType != -1)
    swift_once();
  IntentNodeTraversable.value<A>(forNode:)();
  if (v22)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    OUTLINED_FUNCTION_29_10(v2);
    OUTLINED_FUNCTION_4_14();
    OUTLINED_FUNCTION_29_10(v1);
    OUTLINED_FUNCTION_16_7();
    goto LABEL_12;
  }
  outlined destroy of ContactsFlowState(v2, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_4_14();
  ContactNLv3Intent.isPronounceName.getter();
  v19 = v18;
  outlined destroy of ContactsFlowState(v1, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
  v20 = OUTLINED_FUNCTION_16_7();
  if ((v19 & 1) == 0)
  {
    OUTLINED_FUNCTION_15_10(v20, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
    v17 = OUTLINED_FUNCTION_6_13();
    goto LABEL_16;
  }
LABEL_12:
  ContactNLv3Intent.hasModifyVerb.getter();
  v16 = v15;
  OUTLINED_FUNCTION_15_10(v15, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
  v17 = OUTLINED_FUNCTION_6_13();
  if ((v16 & 1) == 0)
    ContactNLv3Intent.isLearnPronunciation.getter();
LABEL_16:
  OUTLINED_FUNCTION_25_14(v17, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_7();
}

void ContactNLv3Intent.isGetContact.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int EnumTagSinglePayload;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  _QWORD v30[2];
  char v31;
  uint64_t v32;

  OUTLINED_FUNCTION_32();
  v3 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonIntentNode?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_55_0();
  v7 = v6 - v5;
  OUTLINED_FUNCTION_14_14();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_7_3();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_21_10();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_19_12();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v30 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)v30 - v15;
  if (one-time initialization token for contactAttributes != -1)
    swift_once();
  v30[1] = lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent();
  v17 = *(_QWORD *)(IntentNodeTraversable.values<A>(forNode:)() + 16);
  swift_bridgeObjectRelease();
  v18 = outlined init with copy of ContactNLv3Intent(v3, (uint64_t)v16);
  if (v17)
  {
    v31 = 50;
    v18 = ContactNLv3Intent.containsAttribute(_:)();
    v19 = v18;
  }
  else
  {
    v19 = 1;
  }
  OUTLINED_FUNCTION_28_1(v18, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
  ContactNLv3Intent.isShowContactCard.getter();
  v21 = v20;
  v22 = outlined init with copy of ContactNLv3Intent(v3, (uint64_t)v14);
  if ((v21 & 1) != 0)
  {
    OUTLINED_FUNCTION_27_9(v22, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
    v23 = OUTLINED_FUNCTION_34_6();
  }
  else
  {
    ContactNLv3Intent.person.getter();
    v24 = type metadata accessor for PersonIntentNode();
    EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v7, 1, v24);
    v26 = outlined destroy of PersonIntentNode?(v7);
    OUTLINED_FUNCTION_27_9(v26, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
    v23 = OUTLINED_FUNCTION_34_6();
    if (EnumTagSinglePayload == 1)
    {
      ContactNLv3Intent.isMeCardRequest.getter();
      v28 = v27;
      OUTLINED_FUNCTION_23_10(v27, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
      v19 &= v28;
      goto LABEL_11;
    }
  }
  OUTLINED_FUNCTION_23_10(v23, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
LABEL_11:
  v29 = outlined init with copy of ContactNLv3Intent(v3, v2);
  if ((v19 & 1) != 0)
  {
    if (one-time initialization token for contactType != -1)
      swift_once();
    IntentNodeTraversable.value<A>(forNode:)();
    if (!v32)
    {
      OUTLINED_FUNCTION_15_10(0, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
      OUTLINED_FUNCTION_12_12(v3);
      ContactNLv3Intent.hasModifyVerb.getter();
      goto LABEL_17;
    }
    v29 = swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_15_10(v29, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_12_12(v3);
LABEL_17:
  outlined destroy of ContactsFlowState(v1, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_7();
}

uint64_t ContactNLv3Intent.getSiriKitIntentType()()
{
  void *v0;
  char v1;
  uint64_t v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  os_log_type_t v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  os_log_type_t v15;
  _WORD *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  os_log_type_t v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;

  ContactNLv3Intent.isUnsupportedAction.getter();
  if ((v1 & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v2 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v2, (uint64_t)static Logger.siriContacts);
    v3 = OUTLINED_FUNCTION_54_2();
    if (OUTLINED_FUNCTION_30_3(v3))
    {
      v4 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_54_0(v4);
      OUTLINED_FUNCTION_2_5(&dword_21FE16000, v5, v6, "#ContactNLv3Intent.getSiriKitIntentType: found unsupported parse, returning nil");
      OUTLINED_FUNCTION_0();
    }

    return 0;
  }
  if ((ContactNLv3Intent.isModifyContactAttribute.getter() & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v8 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v8, (uint64_t)static Logger.siriContacts);
    v9 = OUTLINED_FUNCTION_54_2();
    if (OUTLINED_FUNCTION_30_3(v9))
    {
      v10 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_54_0(v10);
      OUTLINED_FUNCTION_2_5(&dword_21FE16000, v11, v12, "#ContactNLv3Intent.getSiriKitIntentType: ModifyContactAttributeIntent");
      OUTLINED_FUNCTION_0();
    }

    return type metadata accessor for ModifyContactAttributeIntent();
  }
  else
  {
    ContactNLv3Intent.isGetContactAttribute.getter();
    if ((v13 & 1) != 0)
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v14 = OUTLINED_FUNCTION_26();
      OUTLINED_FUNCTION_10_1(v14, (uint64_t)static Logger.siriContacts);
      v15 = OUTLINED_FUNCTION_54_2();
      if (OUTLINED_FUNCTION_30_3(v15))
      {
        v16 = (_WORD *)OUTLINED_FUNCTION_2_1();
        OUTLINED_FUNCTION_54_0(v16);
        OUTLINED_FUNCTION_2_5(&dword_21FE16000, v17, v18, "#ContactNLv3Intent.getSiriKitIntentType: GetContactAttributeIntent");
        OUTLINED_FUNCTION_0();
      }

      return type metadata accessor for GetContactAttributeIntent();
    }
    else
    {
      ContactNLv3Intent.isGetContact.getter();
      if ((v19 & 1) == 0)
        return 0;
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v20 = OUTLINED_FUNCTION_26();
      OUTLINED_FUNCTION_10_1(v20, (uint64_t)static Logger.siriContacts);
      v21 = OUTLINED_FUNCTION_54_2();
      if (OUTLINED_FUNCTION_30_3(v21))
      {
        v22 = (_WORD *)OUTLINED_FUNCTION_2_1();
        OUTLINED_FUNCTION_54_0(v22);
        OUTLINED_FUNCTION_2_5(&dword_21FE16000, v23, v24, "#ContactNLv3Intent.getSiriKitIntentType: GetContactIntent");
        OUTLINED_FUNCTION_0();
      }

      return type metadata accessor for GetContactIntent();
    }
  }
}

void ContactNLv3Intent.isAskingForAllContacts.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int EnumTagSinglePayload;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  unsigned __int8 v17;

  OUTLINED_FUNCTION_14_14();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_7_3();
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v15 - v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonIntentNode?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_55_0();
  v9 = v8 - v7;
  ContactNLv3Intent.person.getter();
  v10 = type metadata accessor for PersonIntentNode();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v9, 1, v10);
  outlined destroy of PersonIntentNode?(v9);
  v12 = outlined init with copy of ContactNLv3Intent(v0, (uint64_t)v5);
  if (EnumTagSinglePayload == 1)
  {
    if (one-time initialization token for contactReference != -1)
      swift_once();
    lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent();
    IntentNodeTraversable.value<A>(forNode:)();
    if (v17 == 38)
    {
      OUTLINED_FUNCTION_12_12((uint64_t)v5);
    }
    else
    {
      specialized == infix<A>(_:_:)(v17, 32);
      v14 = v13;
      OUTLINED_FUNCTION_12_12((uint64_t)v5);
      if ((v14 & 1) != 0)
      {
        OUTLINED_FUNCTION_29_10(v1);
        OUTLINED_FUNCTION_29_10((uint64_t)v5);
        goto LABEL_14;
      }
    }
    if (one-time initialization token for contactNoun != -1)
      swift_once();
    IntentNodeTraversable.value<A>(forNode:)();
    if (v16 != 2)
      specialized == infix<A>(_:_:)(v16 & 1, 1);
    outlined destroy of ContactsFlowState(v1, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
    outlined destroy of ContactsFlowState((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
  }
  else
  {
    OUTLINED_FUNCTION_25_14(v12, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
  }
LABEL_14:
  OUTLINED_FUNCTION_31_9();
}

uint64_t ContactNLv3Intent.isDeleteContacts.getter()
{
  return ContactNLv3Intent.isDeleteContacts.getter(3);
}

uint64_t ContactNLv3Intent.isCreateContacts.getter()
{
  return ContactNLv3Intent.isDeleteContacts.getter(2);
}

uint64_t ContactNLv3Intent.isDeleteContacts.getter(uint64_t a1)
{
  char v2;
  unsigned __int8 v4;

  if (one-time initialization token for contactVerb != -1)
    swift_once();
  OUTLINED_FUNCTION_14_14();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent();
  IntentNodeTraversable.value<A>(forNode:)();
  if (v4 == 17)
    v2 = 0;
  else
    specialized == infix<A>(_:_:)(v4, a1);
  return v2 & 1;
}

void ContactNLv3Intent.isModifyUnsupportedAttribute.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  _QWORD v43[3];
  unsigned __int8 v44;
  char v45;
  char v46;
  char v47;
  char v48;

  OUTLINED_FUNCTION_32();
  v1 = v0;
  OUTLINED_FUNCTION_14_14();
  OUTLINED_FUNCTION_28();
  v3 = MEMORY[0x24BDAC7A8](v2);
  v43[2] = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v43[1] = (char *)v43 - v6;
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_18_9();
  v8 = MEMORY[0x24BDAC7A8](v7);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_19_12();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v43 - v11;
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)v43 - v14;
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)v43 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)v43 - v19;
  ContactNLv3Intent.hasFreshVerb.getter();
  v22 = v21;
  v23 = outlined init with copy of ContactNLv3Intent(v1, (uint64_t)v20);
  if ((v22 & 1) != 0)
  {
    if (one-time initialization token for contactVerb != -1)
      swift_once();
    lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent();
    IntentNodeTraversable.value<A>(forNode:)();
    v23 = v44;
    if (v44 != 17)
    {
      specialized == infix<A>(_:_:)(v44, 4);
      v25 = v24;
      OUTLINED_FUNCTION_15_10(v24, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
      OUTLINED_FUNCTION_12_12(v1);
      if ((v25 & 1) == 0)
        goto LABEL_6;
      ContactNLv3Intent.isModifyOtherContactNickname.getter();
      v27 = v26;
      outlined init with copy of ContactNLv3Intent((uint64_t)v18, (uint64_t)v15);
      if ((v27 & 1) != 0)
      {
        outlined destroy of ContactsFlowState((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
        OUTLINED_FUNCTION_36_4();
      }
      else
      {
        v28 = ContactNLv3Intent.hasAddressAttribute.getter();
        outlined destroy of ContactsFlowState((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
        OUTLINED_FUNCTION_36_4();
        if ((v28 & 1) == 0)
        {
          v48 = 52;
          v34 = ContactNLv3Intent.containsAttribute(_:)();
          outlined destroy of ContactsFlowState((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
          v29 = OUTLINED_FUNCTION_11_8();
          if ((v34 & 1) == 0)
          {
            ContactNLv3Intent.hasEmailAttribute.getter();
            v36 = v35;
            OUTLINED_FUNCTION_23_10(v35, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
            v30 = OUTLINED_FUNCTION_35_6();
            if ((v36 & 1) == 0)
            {
              ContactNLv3Intent.hasPhoneAttribute.getter();
              v38 = v37;
              OUTLINED_FUNCTION_28_1(v37, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
              v31 = OUTLINED_FUNCTION_4_14();
              if ((v38 & 1) == 0)
              {
                v47 = 50;
                v39 = ContactNLv3Intent.containsAttribute(_:)();
                v40 = v39;
                OUTLINED_FUNCTION_22_9(v39, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
                v32 = OUTLINED_FUNCTION_28_9((uint64_t)v18);
                if ((v40 & 1) == 0)
                {
                  v46 = 51;
                  v41 = ContactNLv3Intent.containsAttribute(_:)();
                  v42 = v41;
                  OUTLINED_FUNCTION_38_3(v41, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
                  v33 = OUTLINED_FUNCTION_28_9((uint64_t)v18);
                  if ((v42 & 1) == 0)
                  {
                    v45 = 53;
                    v33 = ContactNLv3Intent.containsAttribute(_:)();
                  }
                  goto LABEL_16;
                }
LABEL_15:
                OUTLINED_FUNCTION_38_3(v32, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
                v33 = OUTLINED_FUNCTION_28_9((uint64_t)v18);
LABEL_16:
                OUTLINED_FUNCTION_38_3(v33, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
                goto LABEL_6;
              }
LABEL_14:
              OUTLINED_FUNCTION_22_9(v31, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
              v32 = OUTLINED_FUNCTION_28_9((uint64_t)v18);
              goto LABEL_15;
            }
LABEL_13:
            OUTLINED_FUNCTION_28_1(v30, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
            v31 = OUTLINED_FUNCTION_4_14();
            goto LABEL_14;
          }
LABEL_12:
          OUTLINED_FUNCTION_23_10(v29, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
          v30 = OUTLINED_FUNCTION_35_6();
          goto LABEL_13;
        }
      }
      outlined destroy of ContactsFlowState((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
      v29 = OUTLINED_FUNCTION_11_8();
      goto LABEL_12;
    }
  }
  OUTLINED_FUNCTION_15_10(v23, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_12_12(v1);
LABEL_6:
  outlined destroy of ContactsFlowState((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_7();
}

unint64_t lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent)
  {
    v1 = type metadata accessor for ContactNLv3Intent();
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent);
  }
  return result;
}

uint64_t outlined init with copy of ContactNLv3Intent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ContactNLv3Intent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PersonIntentNode?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonIntentNode?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_4_14()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with copy of ContactNLv3Intent(v0, v1);
}

uint64_t OUTLINED_FUNCTION_6_13()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with copy of ContactNLv3Intent(v1, v0);
}

uint64_t OUTLINED_FUNCTION_11_8()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with copy of ContactNLv3Intent(v0, v1);
}

uint64_t OUTLINED_FUNCTION_12_12(uint64_t a1)
{
  uint64_t v1;

  return outlined init with copy of ContactNLv3Intent(a1, v1);
}

uint64_t OUTLINED_FUNCTION_14_14()
{
  return type metadata accessor for ContactNLv3Intent();
}

uint64_t OUTLINED_FUNCTION_15_10(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  return outlined destroy of ContactsFlowState(v2, a2);
}

uint64_t OUTLINED_FUNCTION_16_7()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with copy of ContactNLv3Intent(v0, v1);
}

uint64_t OUTLINED_FUNCTION_22_9(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  return outlined destroy of ContactsFlowState(v2, a2);
}

uint64_t OUTLINED_FUNCTION_23_10(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  return outlined destroy of ContactsFlowState(v2, a2);
}

uint64_t OUTLINED_FUNCTION_25_14(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  return outlined destroy of ContactsFlowState(v2, a2);
}

uint64_t OUTLINED_FUNCTION_26_12()
{
  uint64_t v0;

  return outlined init with copy of DeviceState(*(_QWORD *)(v0 - 128), v0 - 120);
}

uint64_t OUTLINED_FUNCTION_27_9(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  return outlined destroy of ContactsFlowState(v2, a2);
}

uint64_t OUTLINED_FUNCTION_28_9(uint64_t a1)
{
  uint64_t v1;

  return outlined init with copy of ContactNLv3Intent(a1, v1);
}

uint64_t OUTLINED_FUNCTION_29_10(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  return outlined destroy of ContactsFlowState(a1, v1);
}

uint64_t OUTLINED_FUNCTION_34_6()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with copy of ContactNLv3Intent(v0, v1);
}

uint64_t OUTLINED_FUNCTION_35_6()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with copy of ContactNLv3Intent(v0, v1);
}

uint64_t OUTLINED_FUNCTION_36_4()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with copy of ContactNLv3Intent(v0, v1);
}

uint64_t OUTLINED_FUNCTION_38_3(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  return outlined destroy of ContactsFlowState(v2, a2);
}

uint64_t type metadata accessor for GetContactCATsModern()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GetContactCATsModern;
  if (!type metadata singleton initialization cache for GetContactCATsModern)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for GetContactCATsModern()
{
  return swift_initClassMetadata2();
}

uint64_t GetContactCATsModern.intentHandledResponse(isMe:requestedContact:device:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a3;
  *(_QWORD *)(v4 + 32) = v3;
  *(_QWORD *)(v4 + 16) = a2;
  *(_BYTE *)(v4 + 64) = a1;
  return swift_task_switch();
}

uint64_t GetContactCATsModern.intentHandledResponse(isMe:requestedContact:device:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(unint64_t, unint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 64);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v3 = swift_allocObject();
  *(_QWORD *)(v0 + 40) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_21FED8CA0;
  *(_QWORD *)(v3 + 32) = 1699574633;
  *(_QWORD *)(v3 + 40) = 0xE400000000000000;
  v4 = MEMORY[0x24BEE1328];
  *(_BYTE *)(v3 + 48) = v2;
  *(_QWORD *)(v3 + 72) = v4;
  *(_QWORD *)(v3 + 80) = 0xD000000000000010;
  *(_QWORD *)(v3 + 88) = 0x800000021FEE10E0;
  if (v1)
  {
    v5 = type metadata accessor for DialogPerson();
    v6 = v1;
  }
  else
  {
    v6 = 0;
    v5 = 0;
    *(_QWORD *)(v3 + 104) = 0;
    *(_QWORD *)(v3 + 112) = 0;
  }
  v7 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v3 + 96) = v6;
  *(_QWORD *)(v3 + 120) = v5;
  *(_QWORD *)(v3 + 128) = 0x656369766564;
  *(_QWORD *)(v3 + 136) = 0xE600000000000000;
  v8 = 0;
  if (v7)
  {
    v8 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(_QWORD *)(v3 + 152) = 0;
    *(_QWORD *)(v3 + 160) = 0;
  }
  *(_QWORD *)(v3 + 144) = v7;
  *(_QWORD *)(v3 + 168) = v8;
  v11 = (uint64_t (*)(unint64_t, unint64_t, uint64_t))((int)*MEMORY[0x24BE92A08]
                                                                            + MEMORY[0x24BE92A08]);
  swift_retain();
  swift_retain();
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v9;
  *v9 = v0;
  v9[1] = GetContactCATsModern.intentHandledResponse(isMe:requestedContact:device:);
  return v11(0xD000000000000020, 0x800000021FEE12C0, v3);
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GetContactCATsModern.intentHandledResponse(isMe:requestedContact:device:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(v4 + 56) = v1;
  swift_task_dealloc();
  if (v1)
    return swift_task_switch();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t ObjC metadata update function for GetContactCATsModern()
{
  return type metadata accessor for GetContactCATsModern();
}

uint64_t type metadata completion function for ContactsUnsupportedValueStrategy()
{
  return swift_initClassMetadata2();
}

uint64_t ContactsUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = *v1;
  OUTLINED_FUNCTION_20_0();
  return swift_task_switch();
}

uint64_t ContactsUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;

  type metadata accessor for ParameterResolutionRecord();
  v1 = ParameterResolutionRecord.intent.getter();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[42] = a2;
  v3[43] = v2;
  v3[41] = a1;
  v4 = *v2;
  v3[44] = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[45] = OUTLINED_FUNCTION_0_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[46] = OUTLINED_FUNCTION_0_0();
  v5 = type metadata accessor for TemplatingResult();
  v3[47] = v5;
  v3[48] = *(_QWORD *)(v5 - 8);
  v3[49] = OUTLINED_FUNCTION_25_0();
  v3[50] = OUTLINED_FUNCTION_25_0();
  v3[51] = OUTLINED_FUNCTION_25_0();
  v3[52] = OUTLINED_FUNCTION_25_0();
  v3[53] = *(_QWORD *)(v4 + 224);
  v6 = type metadata accessor for ParameterResolutionRecord();
  v3[54] = v6;
  v3[55] = *(_QWORD *)(v6 - 8);
  v3[56] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

uint64_t ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  uint64_t v0;
  void *v1;
  id v2;
  SiriContactsIntents::SiriKitContactUnsupportedReason_optional v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t ObjectType;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v52;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t result;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  SiriContactsIntents::SiriKitContactUnsupportedReason value;

  v1 = (void *)ParameterResolutionRecord.result.getter();
  v2 = objc_msgSend(v1, sel_unsupportedReason);

  v3.value = SiriKitContactUnsupportedReason.init(rawValue:)((Swift::Int)v2).value;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v5 = *(_QWORD *)(v0 + 440);
  v4 = *(_QWORD *)(v0 + 448);
  v6 = *(_QWORD *)(v0 + 432);
  v7 = *(_QWORD *)(v0 + 336);
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.siriContacts);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v77 = *(_QWORD *)(v0 + 440);
    value = v3.value;
    v11 = swift_slowAlloc();
    v76 = (_QWORD *)OUTLINED_FUNCTION_1();
    OUTLINED_FUNCTION_1();
    *(_DWORD *)v11 = 136315650;
    v12 = _typeName(_:qualified:)();
    *(_QWORD *)(v0 + 304) = OUTLINED_FUNCTION_43_5(v12, v13, v14, v15, v16, v17, v18, v19, v73, v0 + 304);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_5();
    *(_WORD *)(v11 + 12) = 2080;
    *(_BYTE *)(v0 + 600) = value;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitContactUnsupportedReason?);
    v20 = Optional.debugDescription.getter();
    *(_QWORD *)(v0 + 312) = OUTLINED_FUNCTION_43_5(v20, v21, v22, v23, v24, v25, v26, v27, v74, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_5();
    *(_WORD *)(v11 + 22) = 2112;
    v28 = ParameterResolutionRecord.result.getter();
    *(_QWORD *)(v0 + 320) = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v76 = v28;
    OUTLINED_FUNCTION_34_7(v77);
    _os_log_impl(&dword_21FE16000, v9, v10, "#ContactsUnsupportedValueStrategyAsync<%s> Processing unsupported reason: %s in intentResolutionResult: %@", (uint8_t *)v11, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0();
  }
  OUTLINED_FUNCTION_34_7(*(_QWORD *)(v0 + 440));

  if ((ContactsStrategy.isSmartEnabled.getter() & 1) != 0)
  {
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)OUTLINED_FUNCTION_1();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_21FE16000, v29, v30, "#ContactsUnsupportedValueStrategy makeIntentHandledResponse SMART enabled but not yet implemented for the intent", v31, 2u);
      OUTLINED_FUNCTION_0();
    }

  }
  switch(v3.value)
  {
    case SiriContactsIntents_SiriKitContactUnsupportedReason_authFailed:
      OUTLINED_FUNCTION_36_5();
      v32 = (_QWORD *)OUTLINED_FUNCTION_13_15();
      *(_QWORD *)(v0 + 568) = v32;
      *v32 = v0;
      v32[1] = ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      break;
    case SiriContactsIntents_SiriKitContactUnsupportedReason_missingMeCard:
      v34 = *(_QWORD *)(v0 + 424);
      v35 = *(_QWORD *)(v0 + 344);
      v36 = *(_QWORD *)(v0 + 352);
      *(_QWORD *)(v0 + 456) = *(_QWORD *)(v35 + 104);
      outlined init with copy of DeviceState(v35 + 16, v0 + 264);
      swift_retain();
      v37 = (void *)ParameterResolutionRecord.intent.getter();
      v38 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v36 + 248) + 24))(v34);

      if (v38)
      {
        objc_msgSend(v38, sel_BOOLValue);

      }
      v54 = *(uint64_t **)(v0 + 328);
      v55 = OUTLINED_FUNCTION_162();
      v56 = MEMORY[0x24BE99088];
      v54[3] = v55;
      v54[4] = v56;
      __swift_allocate_boxed_opaque_existential_1(v54);
      v57 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 464) = v57;
      *v57 = v0;
      v57[1] = ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      OUTLINED_FUNCTION_26_13();
      return GenericViews.missingMeCardOutput(catFamily:deviceState:ttsEnabled:canUseServerTTS:contactAttributeType:isMe:)(v58, v59, v60, v61, v62, v63, v64, v65);
    case SiriContactsIntents_SiriKitContactUnsupportedReason_noContactsFound:
      v39 = *(uint64_t **)(v0 + 328);
      *(_QWORD *)(v0 + 480) = ParameterResolutionRecord.intent.getter();
      v40 = OUTLINED_FUNCTION_162();
      v41 = MEMORY[0x24BE99088];
      v39[3] = v40;
      v39[4] = v41;
      __swift_allocate_boxed_opaque_existential_1(v39);
      v42 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 488) = v42;
      OUTLINED_FUNCTION_42_4(v42);
      goto LABEL_23;
    case SiriContactsIntents_SiriKitContactUnsupportedReason_noContactsFoundForCompany:
      v43 = (void *)ParameterResolutionRecord.intent.getter();
      *(_QWORD *)(v0 + 504) = v43;
      swift_getObjectType();
      if (dynamic_cast_existential_1_conditional((uint64_t)v43))
      {
        v45 = v44;
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v45 + 40))(ObjectType, v45);
        if (!v47)
          static String.EMPTY.getter();
        v48 = *(_QWORD *)(v0 + 368);
        OUTLINED_FUNCTION_17_4();
        v49 = type metadata accessor for SpeakableString();
        __swift_storeEnumTagSinglePayload(v48, 0, 1, v49);
        v50 = (_QWORD *)OUTLINED_FUNCTION_13_15();
        *(_QWORD *)(v0 + 512) = v50;
        *v50 = v0;
        v50[1] = ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
        OUTLINED_FUNCTION_26_13();
        __asm { BR              X2 }
      }
      v67 = *(uint64_t **)(v0 + 328);

      *(_QWORD *)(v0 + 528) = ParameterResolutionRecord.intent.getter();
      v68 = OUTLINED_FUNCTION_162();
      v69 = MEMORY[0x24BE99088];
      v67[3] = v68;
      v67[4] = v69;
      __swift_allocate_boxed_opaque_existential_1(v67);
      v70 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 536) = v70;
      OUTLINED_FUNCTION_42_4(v70);
LABEL_23:
      OUTLINED_FUNCTION_26_13();
      return ContactsUnsupportedValueStrategy.noContactsFound(intent:)(v71, v72);
    case SiriContactsIntents_SiriKitContactUnsupportedReason_noContactsFoundForRelation:
      OUTLINED_FUNCTION_36_5();
      v52 = (_QWORD *)OUTLINED_FUNCTION_13_15();
      *(_QWORD *)(v0 + 552) = v52;
      *v52 = v0;
      v52[1] = ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      break;
    default:
      OUTLINED_FUNCTION_36_5();
      v33 = (_QWORD *)OUTLINED_FUNCTION_13_15();
      *(_QWORD *)(v0 + 584) = v33;
      *v33 = v0;
      v33[1] = ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      break;
  }
  OUTLINED_FUNCTION_26_13();
  __asm { BR              X1 }
  return result;
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  OUTLINED_FUNCTION_38_4();
  *v3 = *v1;
  *(_QWORD *)(v2 + 472) = v0;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_0(v2 + 264);
  swift_release();
  if (v0)
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_6_1();
  }
  else
  {
    OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_45_0();
    OUTLINED_FUNCTION_17_0();
    OUTLINED_FUNCTION_12_0();
    v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
    return OUTLINED_FUNCTION_9_14(v5);
  }
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  OUTLINED_FUNCTION_38_4();
  *v3 = *v1;
  *(_QWORD *)(v2 + 496) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_6_1();
  }
  else
  {

    OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_45_0();
    OUTLINED_FUNCTION_17_0();
    OUTLINED_FUNCTION_12_0();
    v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
    return OUTLINED_FUNCTION_9_14(v5);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_29_5();
  v2 = *(_QWORD *)(v1 + 368);
  OUTLINED_FUNCTION_37_6();
  *(_QWORD *)(v3 + 520) = v0;
  swift_task_dealloc();
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v2, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);

  v2 = *(void **)(v1 + 504);
  v3 = OUTLINED_FUNCTION_12_13();
  v6 = OUTLINED_FUNCTION_16_8(v0, v4, v5, v3);
  *(_OWORD *)(v1 + 240) = 0u;
  *(_QWORD *)(v1 + 256) = 0;
  *(_OWORD *)(v1 + 224) = 0u;
  OUTLINED_FUNCTION_32_8(v6, MEMORY[0x24BE99088]);
  OUTLINED_FUNCTION_4_15();

  v8 = OUTLINED_FUNCTION_41_6(v7, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  OUTLINED_FUNCTION_35_7(v8, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_29_11();
  OUTLINED_FUNCTION_14_15();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  v9 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_17_10(v9);
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  OUTLINED_FUNCTION_38_4();
  *v3 = *v1;
  *(_QWORD *)(v2 + 544) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_6_1();
  }
  else
  {

    OUTLINED_FUNCTION_21_11();
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_45_0();
    OUTLINED_FUNCTION_17_0();
    OUTLINED_FUNCTION_12_0();
    v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
    return OUTLINED_FUNCTION_9_14(v5);
  }
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_29_5();
  OUTLINED_FUNCTION_37_6();
  *(_QWORD *)(v1 + 560) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  v2 = OUTLINED_FUNCTION_12_13();
  v5 = OUTLINED_FUNCTION_16_8(v0, v3, v4, v2);
  *(_OWORD *)(v1 + 200) = 0u;
  *(_QWORD *)(v1 + 216) = 0;
  *(_OWORD *)(v1 + 184) = 0u;
  OUTLINED_FUNCTION_32_8(v5, MEMORY[0x24BE99088]);
  v6 = OUTLINED_FUNCTION_4_15();
  v7 = OUTLINED_FUNCTION_41_6(v6, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  OUTLINED_FUNCTION_35_7(v7, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_29_11();
  OUTLINED_FUNCTION_14_15();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  v8 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_17_10(v8);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_29_5();
  OUTLINED_FUNCTION_37_6();
  *(_QWORD *)(v1 + 576) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 384);
  v14 = *(_QWORD *)(v0 + 376);
  v3 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 344);
  v5 = *(uint64_t **)(v0 + 328);
  outlined init with copy of DeviceState(v4 + 16, v0 + 16);
  v6 = *(_QWORD *)(v4 + 104);
  *(_QWORD *)(v0 + 88) = &type metadata for InstalledAppsProvider;
  *(_QWORD *)(v0 + 96) = &protocol witness table for InstalledAppsProvider;
  *(_QWORD *)(v0 + 56) = v6;
  swift_retain();
  specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:)();
  outlined destroy of ErrorViewBuilder(v0 + 16);
  v7 = type metadata accessor for NLContextUpdate();
  v10 = OUTLINED_FUNCTION_16_8(v3, v8, v9, v7);
  *(_OWORD *)(v0 + 160) = 0u;
  *(_QWORD *)(v0 + 176) = 0;
  *(_OWORD *)(v0 + 144) = 0u;
  v11 = MEMORY[0x24BE99088];
  v5[3] = v10;
  v5[4] = v11;
  __swift_allocate_boxed_opaque_existential_1(v5);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v0 + 144, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v3, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v14);
  OUTLINED_FUNCTION_14_15();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  v12 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_21_1(v12);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_29_5();
  OUTLINED_FUNCTION_37_6();
  *(_QWORD *)(v1 + 592) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  v2 = OUTLINED_FUNCTION_12_13();
  v5 = OUTLINED_FUNCTION_16_8(v0, v3, v4, v2);
  *(_OWORD *)(v1 + 120) = 0u;
  *(_QWORD *)(v1 + 136) = 0;
  *(_OWORD *)(v1 + 104) = 0u;
  OUTLINED_FUNCTION_32_8(v5, MEMORY[0x24BE99088]);
  v6 = OUTLINED_FUNCTION_4_15();
  v7 = OUTLINED_FUNCTION_41_6(v6, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  OUTLINED_FUNCTION_35_7(v7, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_29_11();
  OUTLINED_FUNCTION_14_15();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  v8 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_17_10(v8);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_17_6();
  __swift_deallocate_boxed_opaque_existential_1(*(_QWORD *)(v0 + 328));
  OUTLINED_FUNCTION_1_14();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  return OUTLINED_FUNCTION_51_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_17_6();
  v1 = *(_QWORD *)(v0 + 328);

  __swift_deallocate_boxed_opaque_existential_1(v1);
  OUTLINED_FUNCTION_1_14();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  return OUTLINED_FUNCTION_51_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_17_6();

  OUTLINED_FUNCTION_1_14();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  return OUTLINED_FUNCTION_51_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_17_6();
  v1 = *(_QWORD *)(v0 + 328);

  __swift_deallocate_boxed_opaque_existential_1(v1);
  OUTLINED_FUNCTION_1_14();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  return OUTLINED_FUNCTION_51_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_17_6();
  OUTLINED_FUNCTION_1_14();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  return OUTLINED_FUNCTION_51_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_17_6();
  OUTLINED_FUNCTION_1_14();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  return OUTLINED_FUNCTION_51_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_17_6();
  OUTLINED_FUNCTION_1_14();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  return OUTLINED_FUNCTION_51_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ContactsUnsupportedValueStrategy.noContactsFound(intent:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  v3[12] = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[13] = OUTLINED_FUNCTION_0_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  v3[14] = OUTLINED_FUNCTION_0_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[15] = OUTLINED_FUNCTION_0_0();
  v4 = type metadata accessor for TemplatingResult();
  v3[16] = v4;
  v3[17] = *(_QWORD *)(v4 - 8);
  v3[18] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ContactsUnsupportedValueStrategy.noContactsFound(intent:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v12)(_QWORD, _QWORD);

  OUTLINED_FUNCTION_17_6();
  v1 = *(_QWORD **)(v0[11] + 96);
  (*(void (**)(_QWORD))(*(_QWORD *)(v0[12] + 248) + 40))(*(_QWORD *)(v0[12] + 224));
  if (v2)
  {
    v3 = v0[11];
    v4 = String.sanitizeHomophones.getter();
    v6 = v5;
    OUTLINED_FUNCTION_5();
    v0[7] = v4;
    v0[8] = v6;
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 40));
    dispatch thunk of DeviceState.siriLocale.getter();
    v7 = type metadata accessor for Locale();
    OUTLINED_FUNCTION_31_10(v7);
    lazy protocol witness table accessor for type String and conformance String();
    v8 = StringProtocol.capitalized(with:)();
    OUTLINED_FUNCTION_35_7(v8, &demangling cache variable for type metadata for Locale?);
    swift_bridgeObjectRelease();
  }
  else
  {
    static String.EMPTY.getter();
  }
  OUTLINED_FUNCTION_17_4();
  v9 = type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_31_10(v9);
  v12 = (uint64_t (*)(_QWORD, _QWORD))(**(int **)(class metadata base offset for ContactsCommonCATs + *v1 + 512)
                                               + *(_QWORD *)(class metadata base offset for ContactsCommonCATs
                                                           + *v1
                                                           + 512));
  v10 = (_QWORD *)swift_task_alloc();
  v0[19] = v10;
  *v10 = v0;
  v10[1] = ContactsUnsupportedValueStrategy.noContactsFound(intent:);
  return v12(v0[18], v0[15]);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_29_5();
  v2 = *(_QWORD *)(v1 + 120);
  OUTLINED_FUNCTION_37_6();
  *(_QWORD *)(v3 + 160) = v0;
  swift_task_dealloc();
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v2, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v4, 1, 1, v5);
  *(_QWORD *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v4, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_13_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_14_0();
  v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_21_1(v6);
}

{
  uint64_t v0;

  swift_task_dealloc();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ContactsUnsupportedValueStrategy.__deallocating_deinit()
{
  ContactsStrategy.deinit();
  return swift_deallocClassInstance();
}

void type metadata accessor for ContactsUnsupportedValueStrategy()
{
  JUMPOUT(0x2207D8654);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUnsupportedValueOutput(resolveRecord:) in conformance ContactsUnsupportedValueStrategy<A, B, C>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(**(_QWORD **)v2 + 272)
                                                + *(_QWORD *)(**(_QWORD **)v2 + 272));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeUnsupportedValueOutput(resolveRecord:) in conformance ContactsUnsupportedValueStrategy<A, B, C>;
  return v8(a1, a2);
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUnsupportedValueOutput(resolveRecord:) in conformance ContactsUnsupportedValueStrategy<A, B, C>()
{
  uint64_t v0;

  OUTLINED_FUNCTION_25_1();
  return OUTLINED_FUNCTION_3_2(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeUpdatedIntentForUnsupportedValue(resolveRecord:) in conformance ContactsUnsupportedValueStrategy<A, B, C>(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeUpdatedIntentForUnsupportedValue(resolveRecord:) in conformance ContactsUnsupportedValueStrategy<A, B, C>;
  return ContactsUnsupportedValueStrategy.makeUpdatedIntentForUnsupportedValue(resolveRecord:)(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_25_1();
  if (!v1)
    v4 = a1;
  return (*(uint64_t (**)(uint64_t))(v2 + 8))(v4);
}

void protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactsUnsupportedValueStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(v3 + 56) = swift_task_alloc();
  v5 = *(_QWORD *)(a3 + 256);
  v6 = *(_OWORD *)(a3 + 240);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(a3 + 224);
  *(_OWORD *)(v3 + 32) = v6;
  *(_QWORD *)(v3 + 48) = v5;
  type metadata accessor for ContactsUnsupportedValueStrategy();
}

uint64_t sub_21FE4AD78()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  v1[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactsUnsupportedValueStrategy<A, B, C>;
  return UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:)();
}

uint64_t protocol witness for UnsupportedValueFlowStrategyAsync.makeLaunchAppWithIntentOutput(resolveRecord:) in conformance ContactsUnsupportedValueStrategy<A, B, C>()
{
  uint64_t *v0;
  uint64_t v2;

  OUTLINED_FUNCTION_29_5();
  v2 = *v0;
  swift_task_dealloc();
  return OUTLINED_FUNCTION_3_2(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t type metadata accessor for GetContactUnsupportedValueStrategy()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GetContactUnsupportedValueStrategy;
  if (!type metadata singleton initialization cache for GetContactUnsupportedValueStrategy)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for GetContactUnsupportedValueStrategy()
{
  return swift_initClassMetadata2();
}

uint64_t outlined destroy of ErrorViewBuilder(uint64_t a1)
{
  destroy for MissingMeCardViewBuilder(a1);
  return a1;
}

uint64_t dynamic_cast_existential_1_conditional(uint64_t a1)
{
  if (swift_conformsToProtocol2())
    return a1;
  else
    return 0;
}

uint64_t __swift_deallocate_boxed_opaque_existential_1(uint64_t result)
{
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) - 8) + 80) & 0x20000) != 0)
    JUMPOUT(0x2207D8768);
  return result;
}

uint64_t OUTLINED_FUNCTION_1_14()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_4_15()
{
  return static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
}

uint64_t OUTLINED_FUNCTION_9_14(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_12_13()
{
  return type metadata accessor for NLContextUpdate();
}

uint64_t OUTLINED_FUNCTION_13_15()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_14_15()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_16_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __swift_storeEnumTagSinglePayload(a1, 1, 1, a4);
  return type metadata accessor for AceOutput();
}

uint64_t OUTLINED_FUNCTION_17_10(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_21_11()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_29_11()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_31_10(uint64_t a1)
{
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v1, 0, 1, a1);
}

uint64_t *OUTLINED_FUNCTION_32_8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  v2[3] = a1;
  v2[4] = a2;
  return __swift_allocate_boxed_opaque_existential_1(v2);
}

uint64_t OUTLINED_FUNCTION_34_7@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

uint64_t OUTLINED_FUNCTION_35_7(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return outlined destroy of UsoEntity_common_Person.DefinedValues?(v2, a2);
}

void OUTLINED_FUNCTION_37_6()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
}

void OUTLINED_FUNCTION_38_4()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t OUTLINED_FUNCTION_41_6(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return outlined destroy of UsoEntity_common_Person.DefinedValues?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_42_4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_43_5(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

id GetContactIntent.__allocating_init(_:referenceResolver:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  char v13;
  char v14;
  Class isa;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t v38;

  v4 = (uint64_t)v2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonIntentNode?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PersonIntentNode();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_50();
  v12 = objc_msgSend(objc_allocWithZone(v2), sel_init);
  ContactNLv3Intent.isMeCardRequest.getter();
  v14 = v13;
  type metadata accessor for NSNumber();
  isa = NSNumber.init(integerLiteral:)(v14 & 1).super.super.isa;
  OUTLINED_FUNCTION_0_15((uint64_t)isa, sel_setIsMe_);

  ContactNLv3Intent.person.getter();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10) == 1)
  {
    outlined destroy of PersonIntentNode?((uint64_t)v9);
    if (one-time initialization token for contactId != -1)
      swift_once();
    type metadata accessor for ContactNLv3Intent();
    lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent();
    IntentNodeTraversable.value<A>(forNode:)();
    if (v38)
    {
      v16 = String.sanitizeContactIdURL.getter(v37, v38);
      v18 = v17;
      swift_bridgeObjectRelease();
      outlined bridged method (mbgnn) of @objc GetContactIntent.contactIdentifier.setter(v16, v18, v12);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = xmmword_21FED8AB0;
      type metadata accessor for SiriMatch();
      v20 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      swift_bridgeObjectRetain();
      @nonobjc INObject.init(identifier:display:)(v16, v18, v16, v18);
      *(_QWORD *)(v19 + 32) = v21;
      v37 = v19;
      specialized Array._endMutation()();
      outlined bridged method (mbnn) of @objc GetContactIntent.siriMatches.setter(v37, v12);
    }
    else
    {
      SiriKitGetEntityIntent.runReferenceResolution(_:)(a2, v4, (uint64_t)&protocol witness table for GetContactIntent);
    }

    __swift_destroy_boxed_opaque_existential_0(a2);
    outlined destroy of ContactNLv3Intent(a1);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v3, v9, v10);
    OUTLINED_FUNCTION_4_16();
    v22 = PersonIntentNodeContaining.firstName.getter();
    if (v23)
      OUTLINED_FUNCTION_3_10();
    OUTLINED_FUNCTION_0_15(v22, sel_setFirstName_);

    OUTLINED_FUNCTION_4_16();
    v24 = PersonIntentNodeContaining.nickName.getter();
    if (v25)
      OUTLINED_FUNCTION_3_10();
    OUTLINED_FUNCTION_0_15(v24, sel_setNickName_);

    OUTLINED_FUNCTION_4_16();
    v26 = PersonIntentNodeContaining.lastName.getter();
    if (v27)
      OUTLINED_FUNCTION_3_10();
    OUTLINED_FUNCTION_0_15(v26, sel_setLastName_);

    OUTLINED_FUNCTION_4_16();
    v28 = PersonIntentNodeContaining.fullName.getter();
    if (v29)
      OUTLINED_FUNCTION_3_10();
    OUTLINED_FUNCTION_0_15(v28, sel_setFullName_);

    OUTLINED_FUNCTION_4_16();
    v30 = PersonIntentNodeContaining.middleName.getter();
    if (v31)
      OUTLINED_FUNCTION_3_10();
    OUTLINED_FUNCTION_0_15(v30, sel_setMiddleName_);

    OUTLINED_FUNCTION_4_16();
    v32 = PersonIntentNodeContaining.company.getter();
    if (v33)
      OUTLINED_FUNCTION_3_10();
    OUTLINED_FUNCTION_0_15(v32, sel_setOrganizationName_);

    OUTLINED_FUNCTION_4_16();
    v34 = PersonIntentNodeContaining.relationship.getter();
    if (v35)
      OUTLINED_FUNCTION_3_10();
    OUTLINED_FUNCTION_0_15(v34, sel_setContactRelation_);

    __swift_destroy_boxed_opaque_existential_0(a2);
    outlined destroy of ContactNLv3Intent(a1);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v3, v10);
  }
  return v12;
}

uint64_t GetContactIntent.siriInferenceContact.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[8];

  v2 = type metadata accessor for ContactHandle.HandleType();
  v36[2] = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v36[3] = (char *)v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ContactHandle();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_50();
  Contact.init()();
  outlined bridged method (pb) of @objc GetContactIntent.contactIdentifier.getter(v0);
  if (v6)
    Contact.id.setter();
  outlined bridged method (pb) of @objc GetContactIntent.contactRelation.getter(v0);
  if (v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Contact.LabeledValue<String>>);
    v36[0] = v1;
    v36[1] = v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Contact.LabeledValue<String>);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_21FED8CB0;
    static String.EMPTY.getter();
    v36[4] = static String.EMPTY.getter();
    v36[5] = v9;
    Contact.LabeledValue.init(id:label:value:)();
    v7 = Contact.contactRelations.setter();
  }
  v10 = OUTLINED_FUNCTION_2_17(v7, (SEL *)&selRef_fullName);
  if (v11)
    v10 = Contact.givenName.setter();
  v12 = OUTLINED_FUNCTION_2_17(v10, (SEL *)&selRef_firstName);
  if (v13)
    v12 = Contact.givenName.setter();
  v14 = OUTLINED_FUNCTION_2_17(v12, (SEL *)&selRef_middleName);
  if (v15)
    v14 = Contact.middleName.setter();
  v16 = OUTLINED_FUNCTION_2_17(v14, (SEL *)&selRef_lastName);
  if (v17)
    v16 = Contact.familyName.setter();
  v18 = OUTLINED_FUNCTION_2_17(v16, (SEL *)&selRef_nickName);
  if (v19)
    v18 = Contact.nickname.setter();
  v20 = OUTLINED_FUNCTION_2_17(v18, (SEL *)&selRef_organizationName);
  if (v21)
    v20 = Contact.organizationName.setter();
  v22 = OUTLINED_FUNCTION_2_17(v20, (SEL *)&selRef_phoneNumber);
  if (v23)
  {
    OUTLINED_FUNCTION_7_13(v22, *MEMORY[0x24BE93580]);
    OUTLINED_FUNCTION_5_12();
    ContactHandle.init(id:type:label:value:isSuggested:)();
    OUTLINED_FUNCTION_12_14();
    v25 = v24;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    v26 = *(_QWORD *)(*(_QWORD *)v25 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v26, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    OUTLINED_FUNCTION_6_14(v26 + 1);
    OUTLINED_FUNCTION_10_12(v27 + v28 * v26);
    v22 = OUTLINED_FUNCTION_11_9();
  }
  result = OUTLINED_FUNCTION_2_17(v22, (SEL *)&selRef_emailAddress);
  if (v30)
  {
    OUTLINED_FUNCTION_7_13(result, *MEMORY[0x24BE93578]);
    OUTLINED_FUNCTION_5_12();
    ContactHandle.init(id:type:label:value:isSuggested:)();
    OUTLINED_FUNCTION_12_14();
    v32 = v31;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    v33 = *(_QWORD *)(*(_QWORD *)v32 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v33, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    OUTLINED_FUNCTION_6_14(v33 + 1);
    OUTLINED_FUNCTION_10_12(v34 + v35 * v33);
    return OUTLINED_FUNCTION_11_9();
  }
  return result;
}

uint64_t GetContactIntent.requestedName.getter(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = OUTLINED_FUNCTION_8_11(a1, (SEL *)&selRef_fullName);
  if (!v2)
  {
    result = OUTLINED_FUNCTION_8_11(result, (SEL *)&selRef_firstName);
    if (!v3)
    {
      result = OUTLINED_FUNCTION_8_11(result, (SEL *)&selRef_middleName);
      if (!v4)
      {
        result = OUTLINED_FUNCTION_8_11(result, (SEL *)&selRef_lastName);
        if (!v5)
          return OUTLINED_FUNCTION_8_11(result, (SEL *)&selRef_nickName);
      }
    }
  }
  return result;
}

void GetContactIntent.requestedRelationship.getter()
{
  void *v0;

  outlined bridged method (pb) of @objc GetContactIntent.contactRelation.getter(v0);
}

uint64_t GetContactIntent.requestedCompanyName.getter()
{
  void *v0;

  return outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_organizationName);
}

char *GetContactIntentResponse.__allocating_init(contactIdentifiers:code:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;
  char *v6;
  char *v7;
  NSArray v8;

  v5 = objc_allocWithZone(v2);
  v6 = GetContactIntentResponse.init(code:userActivity:)(a2, 0);
  v7 = v6;
  if (a1)
  {
    v8.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v8.super.isa = 0;
  }
  objc_msgSend(v6, sel_setContactIdentifiers_, v8.super.isa);

  return v6;
}

uint64_t outlined destroy of ContactNLv3Intent(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ContactNLv3Intent();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return MEMORY[0x24BEE1110]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;

  v3 = *v1;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if (!(_DWORD)result)
  {
    result = a1(result, *(_QWORD *)(v3 + 16) + 1, 1, v3);
    *v1 = result;
  }
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result, uint64_t (*a2)(BOOL))
{
  uint64_t v2;
  unint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    result = a2(v3 > 1);
    *(_QWORD *)v2 = result;
  }
  return result;
}

void outlined bridged method (mbgnn) of @objc GetContactIntent.contactIdentifier.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = (id)MEMORY[0x2207D7CB8]();
  objc_msgSend(a3, sel_setContactIdentifier_, v4);

}

void outlined bridged method (mbnn) of @objc GetContactIntent.siriMatches.setter(uint64_t a1, void *a2)
{
  Class isa;

  type metadata accessor for SiriMatch();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, sel_setSiriMatches_, isa);

}

uint64_t outlined bridged method (pb) of @objc GetContactIntent.fullName.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_fullName);
}

uint64_t outlined bridged method (pb) of @objc GetContactIntent.organizationName.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_organizationName);
}

uint64_t outlined bridged method (pb) of @objc GetContactIntent.phoneNumber.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_phoneNumber);
}

uint64_t outlined bridged method (pb) of @objc GetContactIntent.emailAddress.getter(void *a1)
{
  return outlined bridged method (pb) of @objc PostalAddress.street.getter(a1, (SEL *)&selRef_emailAddress);
}

id OUTLINED_FUNCTION_0_15(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;

  return objc_msgSend(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_1_15()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_2_17(uint64_t a1, SEL *a2)
{
  void *v2;

  return outlined bridged method (pb) of @objc PostalAddress.street.getter(v2, a2);
}

void OUTLINED_FUNCTION_3_10()
{
  JUMPOUT(0x2207D7CB8);
}

uint64_t OUTLINED_FUNCTION_4_16()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_5_12()
{
  return 0;
}

void OUTLINED_FUNCTION_6_14(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 16) = a1;
}

uint64_t OUTLINED_FUNCTION_7_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 128) + 104))(*(_QWORD *)(v3 - 120), a2, v2);
}

uint64_t OUTLINED_FUNCTION_8_11(uint64_t a1, SEL *a2)
{
  void *v2;

  return outlined bridged method (pb) of @objc PostalAddress.street.getter(v2, a2);
}

uint64_t OUTLINED_FUNCTION_10_12(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(a1, v2, v3);
}

uint64_t OUTLINED_FUNCTION_11_9()
{
  uint64_t (*v0)(uint64_t, _QWORD);
  uint64_t v1;

  return v0(v1 - 112, 0);
}

uint64_t OUTLINED_FUNCTION_12_14()
{
  return Contact.handles.modify();
}

uint64_t type metadata accessor for GetContactCATs()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GetContactCATs;
  if (!type metadata singleton initialization cache for GetContactCATs)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for GetContactCATs()
{
  return swift_initClassMetadata2();
}

uint64_t GetContactCATs.intentHandledResponse(isMe:requestedContact:device:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v5 + 32) = a4;
  *(_QWORD *)(v5 + 40) = v4;
  *(_BYTE *)(v5 + 72) = a2;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a3;
  return swift_task_switch();
}

uint64_t GetContactCATs.intentHandledResponse(isMe:requestedContact:device:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(_QWORD, unint64_t, unint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_BYTE *)(v0 + 72);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any?)>);
  v3 = swift_allocObject();
  *(_QWORD *)(v0 + 48) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_21FED8CA0;
  *(_QWORD *)(v3 + 32) = 1699574633;
  *(_QWORD *)(v3 + 40) = 0xE400000000000000;
  v4 = MEMORY[0x24BEE1328];
  *(_BYTE *)(v3 + 48) = v2;
  *(_QWORD *)(v3 + 72) = v4;
  *(_QWORD *)(v3 + 80) = 0xD000000000000010;
  *(_QWORD *)(v3 + 88) = 0x800000021FEE10E0;
  if (v1)
  {
    v5 = type metadata accessor for DialogPerson();
    v6 = v1;
  }
  else
  {
    v6 = 0;
    v5 = 0;
    *(_QWORD *)(v3 + 104) = 0;
    *(_QWORD *)(v3 + 112) = 0;
  }
  v7 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v3 + 96) = v6;
  *(_QWORD *)(v3 + 120) = v5;
  *(_QWORD *)(v3 + 128) = 0x656369766564;
  *(_QWORD *)(v3 + 136) = 0xE600000000000000;
  v8 = 0;
  if (v7)
  {
    v8 = type metadata accessor for SirikitDeviceState();
  }
  else
  {
    *(_QWORD *)(v3 + 152) = 0;
    *(_QWORD *)(v3 + 160) = 0;
  }
  *(_QWORD *)(v3 + 144) = v7;
  *(_QWORD *)(v3 + 168) = v8;
  v11 = (uint64_t (*)(_QWORD, unint64_t, unint64_t, uint64_t))((int)*MEMORY[0x24BE92870]
                                                                                    + MEMORY[0x24BE92870]);
  swift_retain();
  swift_retain();
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v9;
  *v9 = v0;
  v9[1] = GetContactCATs.intentHandledResponse(isMe:requestedContact:device:);
  return v11(*(_QWORD *)(v0 + 16), 0xD000000000000020, 0x800000021FEE12C0, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GetContactCATs.__allocating_init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  return GetContactCATs.init(templateDir:options:globals:)(a1, a2);
}

uint64_t GetContactCATs.init(templateDir:options:globals:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v4 = type metadata accessor for CATOption();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of URL?(a1, (uint64_t)v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  v11 = ContactsCommonCATs.init(templateDir:options:globals:)((uint64_t)v10, (uint64_t)v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  outlined destroy of URL?(a1);
  return v11;
}

uint64_t ObjC metadata update function for GetContactCATs()
{
  return type metadata accessor for GetContactCATs();
}

#error "21FE4C010: call analysis failed (funcsize=143)"

#error "21FE4C270: call analysis failed (funcsize=160)"

uint64_t static ContactsContextProvider.needsValueGetContactAttribute(contactIdentifier:contactAttributeValue:contactTypeValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;

  NLContextUpdate.init()();
  OUTLINED_FUNCTION_2_18();
  static ContactsContextProvider.canonicalDomainName.getter();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v7 = OUTLINED_FUNCTION_13_3();
  *(_OWORD *)(v7 + 16) = xmmword_21FED8CB0;
  OUTLINED_FUNCTION_12_15();
  lazy protocol witness table accessor for type String and conformance String();
  OUTLINED_FUNCTION_33_5();
  OUTLINED_FUNCTION_56_3();
  swift_bridgeObjectRelease();
  v8 = OUTLINED_FUNCTION_40_3();
  v10 = v9;
  OUTLINED_FUNCTION_23_5();
  *(_QWORD *)(v7 + 32) = v8;
  *(_QWORD *)(v7 + 40) = v10;
  OUTLINED_FUNCTION_61_3();
  v11 = OUTLINED_FUNCTION_13_3();
  *(_OWORD *)(v11 + 16) = xmmword_21FED9970;
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_49_6();
  v21._countAndFlagsBits = OUTLINED_FUNCTION_23_11();
  OUTLINED_FUNCTION_38_5(v21);
  OUTLINED_FUNCTION_167();
  *(_QWORD *)(v11 + 32) = 0xD000000000000012;
  *(_QWORD *)(v11 + 40) = 0x800000021FEE1360;
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_49_6();
  v22._countAndFlagsBits = OUTLINED_FUNCTION_13_16();
  OUTLINED_FUNCTION_38_5(v22);
  OUTLINED_FUNCTION_167();
  *(_QWORD *)(v11 + 48) = 0xD000000000000012;
  *(_QWORD *)(v11 + 56) = 0x800000021FEE1360;
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_49_6();
  v23._countAndFlagsBits = OUTLINED_FUNCTION_37_7();
  OUTLINED_FUNCTION_38_5(v23);
  OUTLINED_FUNCTION_167();
  *(_QWORD *)(v11 + 64) = 0xD000000000000012;
  *(_QWORD *)(v11 + 72) = 0x800000021FEE1360;
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_49_6();
  OUTLINED_FUNCTION_64_3();
  v24 = String.firstLetterCapitalized()();
  OUTLINED_FUNCTION_38_5(v24);
  OUTLINED_FUNCTION_167();
  *(_QWORD *)(v11 + 80) = 0xD000000000000012;
  *(_QWORD *)(v11 + 88) = 0x800000021FEE1360;
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_49_6();
  OUTLINED_FUNCTION_30_8();
  v25 = String.firstLetterCapitalized()();
  OUTLINED_FUNCTION_38_5(v25);
  OUTLINED_FUNCTION_167();
  *(_QWORD *)(v11 + 96) = 0;
  *(_QWORD *)(v11 + 104) = 0xE000000000000000;
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_49_6();
  v26 = String.firstLetterCapitalized()();
  OUTLINED_FUNCTION_31_11(v26);
  OUTLINED_FUNCTION_9_0();
  *(_QWORD *)(v11 + 112) = 0xD000000000000012;
  *(_QWORD *)(v11 + 120) = 0x800000021FEE1360;
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_49_6();
  v27._countAndFlagsBits = OUTLINED_FUNCTION_23_11();
  OUTLINED_FUNCTION_31_11(v27);
  OUTLINED_FUNCTION_9_0();
  *(_QWORD *)(v11 + 128) = 0xD000000000000012;
  *(_QWORD *)(v11 + 136) = 0x800000021FEE1360;
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_49_6();
  v28._countAndFlagsBits = OUTLINED_FUNCTION_23_11();
  OUTLINED_FUNCTION_31_11(v28);
  OUTLINED_FUNCTION_9_0();
  *(_QWORD *)(v11 + 144) = 0xD000000000000012;
  *(_QWORD *)(v11 + 152) = 0x800000021FEE1360;
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_49_6();
  OUTLINED_FUNCTION_30_8();
  v29._countAndFlagsBits = OUTLINED_FUNCTION_51_5();
  OUTLINED_FUNCTION_31_11(v29);
  OUTLINED_FUNCTION_9_0();
  *(_QWORD *)(v11 + 160) = 0;
  *(_QWORD *)(v11 + 168) = 0xE000000000000000;
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_49_6();
  v30 = String.firstLetterCapitalized()();
  OUTLINED_FUNCTION_31_11(v30);
  OUTLINED_FUNCTION_9_0();
  *(_QWORD *)(v11 + 176) = 0xD000000000000012;
  *(_QWORD *)(v11 + 184) = 0x800000021FEE1360;
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_49_6();
  v31._countAndFlagsBits = OUTLINED_FUNCTION_24_12();
  OUTLINED_FUNCTION_31_11(v31);
  OUTLINED_FUNCTION_9_0();
  *(_QWORD *)(v11 + 192) = 0xD000000000000012;
  *(_QWORD *)(v11 + 200) = 0x800000021FEE1360;
  NLContextUpdate.weightedPromptResponseTargets.setter();
  OUTLINED_FUNCTION_36_6();
  OUTLINED_FUNCTION_66_6();
  OUTLINED_FUNCTION_32_0();
  OUTLINED_FUNCTION_70_5();
  if (a4)
  {
    dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)();
    swift_release();
  }
  if (a6)
  {
    OUTLINED_FUNCTION_28_10();
    dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)();
    swift_release();
  }
  dispatch thunk of MachineUtteranceBuilder.build()();
  OUTLINED_FUNCTION_49_7();
  OUTLINED_FUNCTION_65_5();
  if (v12)
    dispatch thunk of MachineUtteranceBuilder.build()();
  NLContextUpdate.nlInput.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  v13 = *(unsigned __int8 *)(*(_QWORD *)(OUTLINED_FUNCTION_14_16() - 8) + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = OUTLINED_FUNCTION_11_10();
  *(_OWORD *)(v15 + 16) = xmmword_21FED8CB0;
  v16 = v15 + v14;
  if (a2 | a6 | a4)
    static ContactsContextProvider.makeSDAForRequestCommonPerson(contactIdentifier:)(a1, a2, v16);
  else
    static ContactsContextProvider.makeSDAForSummariseCommonPerson()(v16);
  OUTLINED_FUNCTION_35_8();
  return swift_release();
}

void static ContactsContextProvider.confirm(person:attribute:)(void *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_62_4();
  OUTLINED_FUNCTION_2_18();
  OUTLINED_FUNCTION_36_6();
  static ContactsContextProvider.canonicalDomainName.getter();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v3 = OUTLINED_FUNCTION_13_3();
  *(_OWORD *)(v3 + 16) = xmmword_21FED8CA0;
  String.uppercased()();
  lazy protocol witness table accessor for type String and conformance String();
  v4 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v6 = v5;
  OUTLINED_FUNCTION_117();
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  v8 = ContactNLv3Constants.boundValue(_:)(v7);
  OUTLINED_FUNCTION_55_1();
  *(Swift::String *)(v3 + 32) = v8;
  OUTLINED_FUNCTION_12_15();
  v9 = OUTLINED_FUNCTION_3_11();
  v11 = v10;
  OUTLINED_FUNCTION_55_1();
  v12._countAndFlagsBits = v9;
  v12._object = v11;
  v13 = ContactNLv3Constants.boundValue(_:)(v12);
  swift_bridgeObjectRelease();
  *(Swift::String *)(v3 + 48) = v13;
  OUTLINED_FUNCTION_6_15();
  OUTLINED_FUNCTION_3_11();
  OUTLINED_FUNCTION_56_3();
  OUTLINED_FUNCTION_55_1();
  v14 = OUTLINED_FUNCTION_40_3();
  v16 = v15;
  OUTLINED_FUNCTION_23_5();
  *(_QWORD *)(v3 + 64) = v14;
  *(_QWORD *)(v3 + 72) = v16;
  OUTLINED_FUNCTION_61_3();
  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v17 = OUTLINED_FUNCTION_13_3();
    *(_OWORD *)(v17 + 16) = xmmword_21FED8AB0;
    *(_QWORD *)(v17 + 32) = a1;
    specialized Array._endMutation()();
    v18 = a1;
    NLContextUpdate.applicationContextObjects.setter();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  v19 = *(unsigned __int8 *)(*(_QWORD *)(OUTLINED_FUNCTION_14_16() - 8) + 80);
  v20 = (v19 + 32) & ~v19;
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_21FED8CB0;
  static ContactsContextProvider.makeSDAForConfirmation(_:)(a2, a3 & 1, v21 + v20);
  OUTLINED_FUNCTION_73_4();
  NLContextUpdate.nluSystemDialogActs.setter();
  OUTLINED_FUNCTION_18_10();
}

uint64_t static ContactsContextProvider.contactResponseTargets.getter()
{
  uint64_t v0;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v0 = OUTLINED_FUNCTION_13_3();
  *(_OWORD *)(v0 + 16) = xmmword_21FED8DB0;
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_32_9();
  OUTLINED_FUNCTION_28_10();
  v2 = String.firstLetterCapitalized()();
  OUTLINED_FUNCTION_15_11(v2);
  OUTLINED_FUNCTION_55_1();
  *(_QWORD *)(v0 + 32) = 0xD000000000000012;
  *(_QWORD *)(v0 + 40) = 0x800000021FEE1360;
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_32_9();
  v3._countAndFlagsBits = OUTLINED_FUNCTION_24_12();
  OUTLINED_FUNCTION_15_11(v3);
  OUTLINED_FUNCTION_55_1();
  *(_QWORD *)(v0 + 48) = 0xD000000000000012;
  *(_QWORD *)(v0 + 56) = 0x800000021FEE1360;
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_32_9();
  v4._countAndFlagsBits = OUTLINED_FUNCTION_24_12();
  OUTLINED_FUNCTION_15_11(v4);
  OUTLINED_FUNCTION_55_1();
  *(_QWORD *)(v0 + 64) = 0xD000000000000012;
  *(_QWORD *)(v0 + 72) = 0x800000021FEE1360;
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_32_9();
  OUTLINED_FUNCTION_27_10();
  v5 = String.firstLetterCapitalized()();
  OUTLINED_FUNCTION_15_11(v5);
  OUTLINED_FUNCTION_55_1();
  *(_QWORD *)(v0 + 80) = 0xD000000000000012;
  *(_QWORD *)(v0 + 88) = 0x800000021FEE1360;
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_32_9();
  v6 = String.firstLetterCapitalized()();
  OUTLINED_FUNCTION_15_11(v6);
  OUTLINED_FUNCTION_55_1();
  *(_QWORD *)(v0 + 96) = 0xD000000000000012;
  *(_QWORD *)(v0 + 104) = 0x800000021FEE1360;
  return v0;
}

unint64_t static ContactsContextProvider.canonicalDomainName.getter()
{
  Swift::String v0;

  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_32_9();
  OUTLINED_FUNCTION_43_6();
  v0 = String.firstLetterCapitalized()();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000012;
}

uint64_t static ContactsContextProvider.makeSDAForRequestCommonPerson(contactIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v37 = a1;
  v38 = a3;
  v4 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v5 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  v42 = v5;
  v6 = MEMORY[0x24BDAC7A8](v4);
  v36 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v40 = (char *)&v35 - v8;
  v9 = type metadata accessor for Siri_Nlu_External_SystemPrompted();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v35 - v14;
  v16 = type metadata accessor for UsoIdentifier();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UsoTaskBuilder_request_common_Person();
  swift_allocObject();
  v20 = UsoTaskBuilder_request_common_Person.init()();
  type metadata accessor for UsoEntityBuilder_common_Person();
  swift_allocObject();
  v39 = UsoEntityBuilder_common_Person.init()();
  MEMORY[0x2207D6F74]();
  if (a2)
  {
    swift_bridgeObjectRetain();
    UsoIdentifier.init(value:appBundleId:namespace:)();
    dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  }
  static Siri_Nlu_External_SystemPrompted.from(_:)(v20);
  v21 = v38;
  Siri_Nlu_External_SystemDialogAct.init()();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
  Siri_Nlu_External_SystemDialogAct.prompted.setter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.siriContacts);
  v24 = v41;
  v23 = v42;
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v26 = v40;
  v25(v40, v21, v41);
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc();
    v30 = swift_slowAlloc();
    v38 = v20;
    v31 = v30;
    v44 = v30;
    *(_DWORD *)v29 = 136315138;
    v25(v36, (uint64_t)v26, v24);
    v32 = String.init<A>(describing:)();
    v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v26, v24);
    _os_log_impl(&dword_21FE16000, v27, v28, "#ContactsContextProvider Returning SystemPrompted for handle GetContactAttributeIntent: %s", v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207D8768](v31, -1, -1);
    MEMORY[0x2207D8768](v29, -1, -1);
    swift_release();

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v24);

    swift_release();
  }
  return swift_release();
}

uint64_t specialized closure #1 in static ContactsContextProvider.getContactAttribute(contact:handles:contactAttributeType:needsSDA:)()
{
  OUTLINED_FUNCTION_32_1();
  swift_bridgeObjectRetain();
  NLContextUpdate.displayHints.setter();
  OUTLINED_FUNCTION_57_2();
  static ContactsContextProvider.contactResponseTargets.getter();
  OUTLINED_FUNCTION_32_1();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  OUTLINED_FUNCTION_36_6();
  OUTLINED_FUNCTION_57_2();
  static ContactsContextProvider.canonicalDomainName.getter();
  OUTLINED_FUNCTION_32_1();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  return OUTLINED_FUNCTION_57_2();
}

uint64_t static ContactsContextProvider.makeSDAForDisambiguateGetContactAttribute(contact:handles:)@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  id v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint8_t *v55;
  uint64_t v56;
  char *v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  void (*v60)(char *, uint64_t);
  void (*v61)(char *, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  unint64_t v87;
  uint64_t v88;
  uint8_t *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92[4];
  uint64_t v93;

  v86 = a1;
  v77 = a3;
  v4 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v73 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v70 - v8;
  v10 = type metadata accessor for Siri_Nlu_External_SystemGaveOptions();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v75 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v74 = (char *)&v70 - v15;
  MEMORY[0x24BDAC7A8](v14);
  v79 = (char *)&v70 - v16;
  v17 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  v84 = *(_QWORD *)(v17 - 8);
  v85 = v17;
  v18 = MEMORY[0x24BDAC7A8](v17);
  v83 = (char *)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v82 = (char *)&v70 - v20;
  v21 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v90 = (char *)&v70 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v70 - v25;
  v93 = MEMORY[0x24BEE4AF8];
  v87 = a2;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    a2 = v87;
    v27 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v27 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v89 = (uint8_t *)v9;
  v76 = v4;
  v78 = v5;
  if (v27)
  {
    v88 = v27;
    result = type metadata accessor for UsoTaskBuilder_noVerb_common_Person();
    v81 = result;
    if (v88 < 1)
    {
      __break(1u);
      return result;
    }
    v71 = v11;
    v72 = v10;
    v29 = 0;
    v80 = a2 & 0xC000000000000001;
    do
    {
      if (v80)
        v30 = (id)MEMORY[0x2207D80C0](v29, a2);
      else
        v30 = *(id *)(a2 + 8 * v29 + 32);
      v31 = v30;
      v32 = v86;
      v33 = CNContact.formattedFullName.getter();
      v35 = v34;
      v36 = objc_msgSend(v32, sel_identifier);
      v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v39 = v38;

      v40 = v31;
      v41 = UsoTaskBuilder_noVerb_common_Person.init(name:contactId:handle:)(v33, v35, v37, v39, v31);
      v42 = v82;
      static Siri_Nlu_External_UserStatedTask.from(_:)(v41);
      Siri_Nlu_External_UserDialogAct.init()();
      v43 = v84;
      v44 = v85;
      (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v83, v42, v85);
      Siri_Nlu_External_UserDialogAct.userStatedTask.setter();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v42, v44);
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v90, v26, v21);
      v45 = v93;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v45 + 16) + 1, 1, v45);
      v47 = *(_QWORD *)(v45 + 16);
      v46 = *(_QWORD *)(v45 + 24);
      if (v47 >= v46 >> 1)
        v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1, v45);
      ++v29;
      *(_QWORD *)(v45 + 16) = v47 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v22 + 32))(v45+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(_QWORD *)(v22 + 72) * v47, v90, v21);

      swift_release();
      v93 = v45;
      (*(void (**)(char *, uint64_t))(v22 + 8))(v26, v21);
      v9 = (char *)v89;
      a2 = v87;
    }
    while (v88 != v29);
    swift_bridgeObjectRelease();
    v10 = v72;
    v48 = v77;
    v5 = v78;
    v11 = v71;
  }
  else
  {
    swift_bridgeObjectRelease();
    v48 = v77;
  }
  v49 = v10;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v50 = type metadata accessor for Logger();
  __swift_project_value_buffer(v50, (uint64_t)static Logger.siriContacts);
  v51 = v93;
  swift_bridgeObjectRetain();
  v52 = Logger.logObject.getter();
  v53 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v52, v53))
  {
    v54 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v54 = 134217984;
    v92[1] = *(_QWORD *)(v51 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FE16000, v52, v53, "#ContactsContextProvider %ld SystemGaveOptions for contact attribute disambiguation", v54, 0xCu);
    v55 = v54;
    v9 = (char *)v89;
    MEMORY[0x2207D8768](v55, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  v56 = v93;
  v57 = v79;
  Siri_Nlu_External_SystemGaveOptions.init()();
  MEMORY[0x2207D662C](v56);
  v58 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v59 = v74;
  v58(v74, v57, v10);
  Siri_Nlu_External_SystemDialogAct.init()();
  v58(v75, v59, v10);
  Siri_Nlu_External_SystemDialogAct.gaveOptions.setter();
  v60 = *(void (**)(char *, uint64_t))(v11 + 8);
  v60(v59, v10);
  v61 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v62 = v48;
  v63 = v76;
  v61(v9, v62, v76);
  v64 = Logger.logObject.getter();
  v65 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v64, v65))
  {
    v66 = (uint8_t *)swift_slowAlloc();
    v67 = swift_slowAlloc();
    v92[0] = v67;
    v90 = (char *)v60;
    *(_DWORD *)v66 = 136315138;
    v89 = v66 + 4;
    v61(v73, (uint64_t)v9, v63);
    v68 = String.init<A>(describing:)();
    v91 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v69, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v78 + 8))(v9, v63);
    _os_log_impl(&dword_21FE16000, v64, v65, "#ContactsContextProvider Returning SystemDialogAct for contact attribute disambiguation %s", v66, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207D8768](v67, -1, -1);
    MEMORY[0x2207D8768](v66, -1, -1);

    return ((uint64_t (*)(char *, uint64_t))v90)(v79, v49);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v63);
    return ((uint64_t (*)(char *, uint64_t))v60)(v57, v49);
  }
}

uint64_t static ContactsContextProvider.makeSDAForSummariseCommonPerson()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint8_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v27 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v26 - v6;
  v8 = type metadata accessor for Siri_Nlu_External_SystemPrompted();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v26 - v13;
  type metadata accessor for UsoTaskBuilder_summarise_common_Person();
  swift_allocObject();
  v15 = UsoTaskBuilder_summarise_common_Person.init()();
  type metadata accessor for UsoEntityBuilder_common_Person();
  swift_allocObject();
  v28 = UsoEntityBuilder_common_Person.init()();
  dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
  v29 = v15;
  static Siri_Nlu_External_SystemPrompted.from(_:)(v15);
  Siri_Nlu_External_SystemDialogAct.init()();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
  Siri_Nlu_External_SystemDialogAct.prompted.setter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.siriContacts);
  v17 = v3;
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v18(v7, a1, v2);
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    v22 = swift_slowAlloc();
    v31 = v22;
    *(_DWORD *)v21 = 136315138;
    v26 = v21 + 4;
    v18(v27, (uint64_t)v7, v2);
    v23 = String.init<A>(describing:)();
    v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v2);
    _os_log_impl(&dword_21FE16000, v19, v20, "#ContactsContextProvider Returning SystemPrompted for handle GetContactIntent: %s", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207D8768](v22, -1, -1);
    MEMORY[0x2207D8768](v21, -1, -1);
    swift_release();

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v2);

    swift_release();
  }
  return swift_release();
}

void static ContactsContextProvider.makeSDAForNeedsValueModifyRelationship()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  OUTLINED_FUNCTION_32();
  v3 = v2;
  v26 = OUTLINED_FUNCTION_14_16();
  v29 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_5_2();
  v25 = v4;
  MEMORY[0x24BDAC7A8](v5);
  v6 = OUTLINED_FUNCTION_41_7();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v24 - v11;
  type metadata accessor for UsoTaskBuilder_update_common_Person();
  OUTLINED_FUNCTION_32_0();
  UsoTaskBuilder_update_common_Person.init()();
  OUTLINED_FUNCTION_60_4();
  OUTLINED_FUNCTION_32_0();
  v13 = UsoEntityBuilder_common_Person.init()();
  type metadata accessor for UsoEntityBuilder_common_PersonRelationship();
  OUTLINED_FUNCTION_32_0();
  UsoEntityBuilder_common_PersonRelationship.init()();
  dispatch thunk of UsoEntityBuilder_common_Person.setIdentifyingRelationship(value:)();
  swift_release();
  v27 = v13;
  dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
  v28 = v1;
  static Siri_Nlu_External_SystemPrompted.from(_:)(v1);
  Siri_Nlu_External_SystemDialogAct.init()();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
  Siri_Nlu_External_SystemDialogAct.prompted.setter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v14 = OUTLINED_FUNCTION_26();
  v15 = __swift_project_value_buffer(v14, (uint64_t)static Logger.siriContacts);
  v16 = v29;
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16);
  v18 = v26;
  v17(v0, v3, v26);
  Logger.logObject.getter();
  v19 = OUTLINED_FUNCTION_8();
  if (os_log_type_enabled(v15, v19))
  {
    v20 = (uint8_t *)OUTLINED_FUNCTION_1();
    v30 = OUTLINED_FUNCTION_1();
    *(_DWORD *)v20 = 136315138;
    v17(v25, v0, v18);
    v21 = OUTLINED_FUNCTION_71_4();
    v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v30);
    OUTLINED_FUNCTION_55_5(v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_167();
    OUTLINED_FUNCTION_10_2(*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8));
    _os_log_impl(&dword_21FE16000, v15, v19, "#ContactsContextProvider Returning SystemPrompted for prompt for relationship in Modify Relationship: %s", v20, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0();
  }
  OUTLINED_FUNCTION_10_2(*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8));

  swift_release();
  swift_release();
  OUTLINED_FUNCTION_7();
}

void static ContactsContextProvider.needsValueModifyNickname()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  uint64_t countAndFlagsBits;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  OUTLINED_FUNCTION_62_4();
  OUTLINED_FUNCTION_2_18();
  static ContactsContextProvider.canonicalDomainName.getter();
  NLContextUpdate.dictationPromptTargetDomain.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v0 = OUTLINED_FUNCTION_13_3();
  *(_OWORD *)(v0 + 16) = xmmword_21FED9160;
  OUTLINED_FUNCTION_12_15();
  lazy protocol witness table accessor for type String and conformance String();
  v1 = OUTLINED_FUNCTION_26_14();
  v3 = v2;
  OUTLINED_FUNCTION_9_0();
  v4._countAndFlagsBits = v1;
  v4._object = v3;
  v5 = ContactNLv3Constants.boundValue(_:)(v4);
  OUTLINED_FUNCTION_117();
  *(Swift::String *)(v0 + 32) = v5;
  OUTLINED_FUNCTION_6_15();
  v6 = OUTLINED_FUNCTION_26_14();
  v8 = v7;
  OUTLINED_FUNCTION_9_0();
  v9._countAndFlagsBits = v6;
  v9._object = v8;
  countAndFlagsBits = ContactNLv3Constants.boundValue(_:)(v9)._countAndFlagsBits;
  OUTLINED_FUNCTION_68_6();
  *(_QWORD *)(v0 + 48) = countAndFlagsBits;
  *(_QWORD *)(v0 + 56) = v6;
  NLContextUpdate.dictationPromptAbortValues.setter();
  v11 = OUTLINED_FUNCTION_13_3();
  *(_OWORD *)(v11 + 16) = xmmword_21FED8CB0;
  OUTLINED_FUNCTION_1_16();
  swift_bridgeObjectRelease();
  v12 = String.firstLetterCapitalized()();
  String.append(_:)(v12);
  OUTLINED_FUNCTION_167();
  *(_QWORD *)(v11 + 32) = 0xD000000000000012;
  *(_QWORD *)(v11 + 40) = 0x800000021FEE1360;
  OUTLINED_FUNCTION_73_4();
  NLContextUpdate.dictationPromptTargetNodes.setter();
  OUTLINED_FUNCTION_66_6();
  OUTLINED_FUNCTION_32_0();
  OUTLINED_FUNCTION_70_5();
  OUTLINED_FUNCTION_27_10();
  dispatch thunk of MachineUtteranceBuilder.addMapping(node:value:)();
  swift_release();
  dispatch thunk of MachineUtteranceBuilder.build()();
  OUTLINED_FUNCTION_49_7();
  OUTLINED_FUNCTION_65_5();
  if (v13)
    dispatch thunk of MachineUtteranceBuilder.build()();
  NLContextUpdate.nlInput.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  v14 = *(unsigned __int8 *)(*(_QWORD *)(OUTLINED_FUNCTION_14_16() - 8) + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = OUTLINED_FUNCTION_11_10();
  *(_OWORD *)(v16 + 16) = xmmword_21FED8CB0;
  static ContactsContextProvider.makeSDAForNeedsValueModifyNickname()(v16 + v15);
  OUTLINED_FUNCTION_35_8();
  swift_release();
  OUTLINED_FUNCTION_18_10();
}

uint64_t static ContactsContextProvider.makeSDAForNeedsValueModifyNickname()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t updated;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD v28[2];
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v31 = *(_QWORD *)(v2 - 8);
  v32 = v2;
  v3 = MEMORY[0x24BDAC7A8](v2);
  v30 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v28 - v5;
  v7 = type metadata accessor for Siri_Nlu_External_SystemPrompted();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v28 - v12;
  type metadata accessor for UsoTaskBuilder_update_common_Person();
  swift_allocObject();
  updated = UsoTaskBuilder_update_common_Person.init()();
  type metadata accessor for UsoEntityBuilder_common_Person();
  swift_allocObject();
  v15 = UsoEntityBuilder_common_Person.init()();
  type metadata accessor for UsoEntityBuilder_common_PersonName();
  swift_allocObject();
  UsoEntityBuilder_common_PersonName.init()();
  MEMORY[0x2207D6DA0](0, 0xE000000000000000);
  v16 = swift_retain();
  MEMORY[0x2207D6C98](v16, MEMORY[0x24BEA23C0]);
  swift_release();
  v33 = v15;
  dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
  v34 = updated;
  static Siri_Nlu_External_SystemPrompted.from(_:)(updated);
  Siri_Nlu_External_SystemDialogAct.init()();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  Siri_Nlu_External_SystemDialogAct.prompted.setter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.siriContacts);
  v19 = v31;
  v18 = v32;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
  v20(v6, a1, v32);
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    v29 = swift_slowAlloc();
    v36 = v29;
    *(_DWORD *)v23 = 136315138;
    v28[1] = v23 + 4;
    v20(v30, (uint64_t)v6, v18);
    v24 = String.init<A>(describing:)();
    v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v18);
    _os_log_impl(&dword_21FE16000, v21, v22, "#ContactsContextProvider Returning SystemPrompted for prompt for Modify Nickname: %s", v23, 0xCu);
    v26 = v29;
    swift_arrayDestroy();
    MEMORY[0x2207D8768](v26, -1, -1);
    MEMORY[0x2207D8768](v23, -1, -1);
    swift_release();
    swift_release();

  }
  else
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v18);

    swift_release();
  }
  return swift_release();
}

uint64_t static ContactsContextProvider.needsValueRelatedSiriMatches()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;

  OUTLINED_FUNCTION_62_4();
  OUTLINED_FUNCTION_2_18();
  static ContactsContextProvider.canonicalDomainName.getter();
  NLContextUpdate.dictationPromptTargetDomain.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v0 = OUTLINED_FUNCTION_13_3();
  *(_OWORD *)(v0 + 16) = xmmword_21FED9160;
  OUTLINED_FUNCTION_12_15();
  lazy protocol witness table accessor for type String and conformance String();
  v1 = (void *)MEMORY[0x24BEE0D00];
  OUTLINED_FUNCTION_25_15();
  OUTLINED_FUNCTION_56_3();
  swift_bridgeObjectRelease();
  v2 = OUTLINED_FUNCTION_40_3();
  v4 = v3;
  OUTLINED_FUNCTION_23_5();
  *(_QWORD *)(v0 + 32) = v2;
  *(_QWORD *)(v0 + 40) = v4;
  OUTLINED_FUNCTION_6_15();
  v5 = OUTLINED_FUNCTION_25_15();
  OUTLINED_FUNCTION_68_6();
  v6._countAndFlagsBits = v5;
  v6._object = v1;
  v7 = ContactNLv3Constants.boundValue(_:)(v6);
  OUTLINED_FUNCTION_96();
  *(Swift::String *)(v0 + 48) = v7;
  OUTLINED_FUNCTION_73_4();
  NLContextUpdate.dictationPromptAbortValues.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  OUTLINED_FUNCTION_14_16();
  OUTLINED_FUNCTION_58_5();
  *(_OWORD *)(OUTLINED_FUNCTION_11_10() + 16) = xmmword_21FED8CB0;
  static ContactsContextProvider.makeSDAForPromptForRelatedPersonName()();
  return OUTLINED_FUNCTION_35_8();
}

void static ContactsContextProvider.makeSDAForPromptForRelatedPersonName()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  OUTLINED_FUNCTION_32();
  v3 = v2;
  v26 = OUTLINED_FUNCTION_14_16();
  v4 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_5_2();
  v25 = v5;
  MEMORY[0x24BDAC7A8](v6);
  v7 = OUTLINED_FUNCTION_41_7();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v24 - v12;
  type metadata accessor for UsoTaskBuilder_update_common_Person();
  OUTLINED_FUNCTION_32_0();
  UsoTaskBuilder_update_common_Person.init()();
  OUTLINED_FUNCTION_60_4();
  OUTLINED_FUNCTION_32_0();
  UsoEntityBuilder_common_Person.init()();
  MEMORY[0x2207D6F80]();
  swift_release();
  v27 = v1;
  static Siri_Nlu_External_SystemPrompted.from(_:)(v1);
  Siri_Nlu_External_SystemDialogAct.init()();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  Siri_Nlu_External_SystemDialogAct.prompted.setter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v14 = OUTLINED_FUNCTION_26();
  v15 = __swift_project_value_buffer(v14, (uint64_t)static Logger.siriContacts);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v17 = v26;
  v16(v0, v3, v26);
  Logger.logObject.getter();
  v18 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_44_6(v18))
  {
    v19 = (uint8_t *)OUTLINED_FUNCTION_1();
    v20 = OUTLINED_FUNCTION_1();
    v24 = v4;
    v28 = v20;
    *(_DWORD *)v19 = 136315138;
    v16(v25, v0, v17);
    v21 = OUTLINED_FUNCTION_71_4();
    v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v28);
    OUTLINED_FUNCTION_55_5(v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_96();
    OUTLINED_FUNCTION_10_2(*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8));
    _os_log_impl(&dword_21FE16000, v15, (os_log_type_t)v7, "#ContactsContextProvider Returning SystemPrompted for prompt for related person name in Modify Relationship: %s", v19, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0();
  }
  OUTLINED_FUNCTION_10_2(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));

  swift_release();
  OUTLINED_FUNCTION_7();
}

uint64_t static ContactsContextProvider.disambiguate(contacts:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15[12];

  v4 = OUTLINED_FUNCTION_163();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  NLContextUpdate.init()();
  OUTLINED_FUNCTION_43_6();
  NLContextUpdate.currentDomainName.setter();
  specialized DisplayHintFactory.build(for:handles:contactAttributeType:_:)(a1, MEMORY[0x24BEE4AF8], 0, 1, (uint64_t)v7, v8, v9, v10, v15[0], v15[1], v15[2], v15[3], v15[4], v15[5], v15[6], v15[7], v15[8], v15[9], v15[10],
    v15[11]);
  static RREntity.makeDisambiguationGroup(with:)();
  OUTLINED_FUNCTION_32_1();
  NLContextUpdate.rrEntities.setter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(OUTLINED_FUNCTION_14_16() - 8) + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_21FED8CB0;
  static ContactsContextProvider.makeSDAForDisambiguateContacts(_:)(a1, v13 + v12);
  OUTLINED_FUNCTION_32_1();
  NLContextUpdate.nluSystemDialogActs.setter();
  swift_endAccess();
  OUTLINED_FUNCTION_56(a2, (uint64_t)v7, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16));
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t specialized closure #1 in static ContactsContextProvider.disambiguate(contacts:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;

  OUTLINED_FUNCTION_32_1();
  swift_bridgeObjectRetain();
  NLContextUpdate.displayHints.setter();
  OUTLINED_FUNCTION_50_6();
  static ContactsContextProvider.canonicalDomainName.getter();
  OUTLINED_FUNCTION_32_1();
  NLContextUpdate.weightedPromptTargetDomain.setter();
  OUTLINED_FUNCTION_50_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v0 = OUTLINED_FUNCTION_13_3();
  *(_OWORD *)(v0 + 16) = xmmword_21FED8CB0;
  OUTLINED_FUNCTION_12_15();
  lazy protocol witness table accessor for type String and conformance String();
  v1 = OUTLINED_FUNCTION_33_5();
  v3 = v2;
  OUTLINED_FUNCTION_96();
  v4._countAndFlagsBits = v1;
  v4._object = v3;
  v5 = ContactNLv3Constants.boundValue(_:)(v4);
  OUTLINED_FUNCTION_9_0();
  *(Swift::String *)(v0 + 32) = v5;
  OUTLINED_FUNCTION_32_1();
  OUTLINED_FUNCTION_61_3();
  OUTLINED_FUNCTION_50_6();
  v6 = OUTLINED_FUNCTION_13_3();
  *(_OWORD *)(v6 + 16) = xmmword_21FED9150;
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_45_6();
  v8._countAndFlagsBits = OUTLINED_FUNCTION_24_12();
  OUTLINED_FUNCTION_21_12(v8);
  OUTLINED_FUNCTION_167();
  *(_QWORD *)(v6 + 32) = 0xD000000000000012;
  *(_QWORD *)(v6 + 40) = 0x800000021FEE1360;
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_45_6();
  v9._countAndFlagsBits = OUTLINED_FUNCTION_13_16();
  OUTLINED_FUNCTION_21_12(v9);
  OUTLINED_FUNCTION_167();
  *(_QWORD *)(v6 + 48) = 0xD000000000000012;
  *(_QWORD *)(v6 + 56) = 0x800000021FEE1360;
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_45_6();
  v10._countAndFlagsBits = OUTLINED_FUNCTION_37_7();
  OUTLINED_FUNCTION_21_12(v10);
  OUTLINED_FUNCTION_167();
  *(_QWORD *)(v6 + 64) = 0xD000000000000012;
  *(_QWORD *)(v6 + 72) = 0x800000021FEE1360;
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_45_6();
  OUTLINED_FUNCTION_64_3();
  v11._countAndFlagsBits = OUTLINED_FUNCTION_51_5();
  OUTLINED_FUNCTION_21_12(v11);
  OUTLINED_FUNCTION_167();
  *(_QWORD *)(v6 + 80) = 0xD000000000000012;
  *(_QWORD *)(v6 + 88) = 0x800000021FEE1360;
  OUTLINED_FUNCTION_32_1();
  OUTLINED_FUNCTION_73_4();
  NLContextUpdate.weightedPromptResponseTargets.setter();
  OUTLINED_FUNCTION_36_6();
  return OUTLINED_FUNCTION_50_6();
}

uint64_t static ContactsContextProvider.makeSDAForDisambiguateContacts(_:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  void (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88[4];
  uint64_t v89;

  v4 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v70 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v68 - v8;
  v10 = type metadata accessor for Siri_Nlu_External_SystemGaveOptions();
  v73 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v72 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v71 = (char *)&v68 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v75 = (char *)&v68 - v15;
  v16 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  v83 = *(_QWORD *)(v16 - 8);
  v84 = v16;
  v17 = MEMORY[0x24BDAC7A8](v16);
  v82 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v81 = (char *)&v68 - v19;
  v20 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x24BDAC7A8](v20);
  v86 = (char *)&v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v68 - v24;
  v89 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v26 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v26 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v85 = v5;
  v76 = v10;
  v74 = v4;
  if (v26)
  {
    result = type metadata accessor for UsoTaskBuilder_noVerb_common_Person();
    v80 = result;
    if (v26 < 1)
    {
      __break(1u);
      return result;
    }
    v68 = a2;
    v69 = v9;
    v28 = 0;
    v77 = a1 & 0xC000000000000001;
    v78 = v26;
    v79 = a1;
    do
    {
      if (v77)
        v29 = (id)MEMORY[0x2207D80C0](v28, a1);
      else
        v29 = *(id *)(a1 + 8 * v28 + 32);
      v30 = v29;
      v31 = CNContact.formattedFullName.getter();
      v33 = v32;
      v34 = objc_msgSend(v30, sel_identifier);
      v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v37 = v36;

      v38 = UsoTaskBuilder_noVerb_common_Person.init(name:contactId:handle:)(v31, v33, v35, v37, 0);
      v39 = v81;
      static Siri_Nlu_External_UserStatedTask.from(_:)(v38);
      Siri_Nlu_External_UserDialogAct.init()();
      v40 = v83;
      v41 = v84;
      (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v82, v39, v84);
      Siri_Nlu_External_UserDialogAct.userStatedTask.setter();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v39, v41);
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v86, v25, v20);
      v42 = v89;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v42 + 16) + 1, 1, v42);
      v44 = *(_QWORD *)(v42 + 16);
      v43 = *(_QWORD *)(v42 + 24);
      if (v44 >= v43 >> 1)
        v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1, v42);
      ++v28;
      *(_QWORD *)(v42 + 16) = v44 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v21 + 32))(v42+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(_QWORD *)(v21 + 72) * v44, v86, v20);
      swift_release();

      v89 = v42;
      (*(void (**)(char *, uint64_t))(v21 + 8))(v25, v20);
      a1 = v79;
      v5 = v85;
    }
    while (v78 != v28);
    swift_bridgeObjectRelease();
    v10 = v76;
    v9 = v69;
    a2 = v68;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v45 = v75;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v46 = type metadata accessor for Logger();
  __swift_project_value_buffer(v46, (uint64_t)static Logger.siriContacts);
  v47 = v89;
  swift_bridgeObjectRetain();
  v48 = Logger.logObject.getter();
  v49 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v48, v49))
  {
    v50 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v50 = 134217984;
    v88[1] = *(_QWORD *)(v47 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FE16000, v48, v49, "#ContactsContextProvider %ld SystemGaveOptions for contact attribute disambiguation", v50, 0xCu);
    v51 = v50;
    v5 = v85;
    MEMORY[0x2207D8768](v51, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  v52 = v89;
  Siri_Nlu_External_SystemGaveOptions.init()();
  MEMORY[0x2207D662C](v52);
  v53 = v73;
  v54 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
  v55 = v71;
  v54(v71, v45, v10);
  Siri_Nlu_External_SystemDialogAct.init()();
  v54(v72, v55, v10);
  Siri_Nlu_External_SystemDialogAct.gaveOptions.setter();
  v56 = v10;
  v57 = *(void (**)(char *, uint64_t))(v53 + 8);
  v57(v55, v56);
  v58 = v45;
  v59 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v60 = v74;
  v59(v9, a2, v74);
  v61 = Logger.logObject.getter();
  v62 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v61, v62))
  {
    v63 = (uint8_t *)swift_slowAlloc();
    v64 = swift_slowAlloc();
    v86 = (char *)v57;
    v65 = v64;
    v88[0] = v64;
    *(_DWORD *)v63 = 136315138;
    v59(v70, (uint64_t)v9, v60);
    v66 = String.init<A>(describing:)();
    v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v85 + 8))(v9, v60);
    _os_log_impl(&dword_21FE16000, v61, v62, "#ContactsContextProvider Returning SystemDialogAct for contact disambiguation %s", v63, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207D8768](v65, -1, -1);
    MEMORY[0x2207D8768](v63, -1, -1);

    return ((uint64_t (*)(char *, uint64_t))v86)(v75, v76);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v60);
    return ((uint64_t (*)(char *, uint64_t))v57)(v58, v76);
  }
}

uint64_t static ContactsContextProvider.makeSDAForConfirmation(_:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v39 = a1;
  LODWORD(v38) = a2 & 1;
  v37 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  v40 = *(_QWORD *)(v37 - 8);
  v4 = MEMORY[0x24BDAC7A8](v37);
  v36 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v35 - v6;
  v8 = type metadata accessor for Siri_Nlu_External_UserWantedToProceed();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Siri_Nlu_External_SystemOffered();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)&v35 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v35 - v20;
  static ContactsContextProvider.buildWantedToProceed(for:)(v39, (char)v38);
  static Siri_Nlu_External_SystemOffered.from(_:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v22 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v38 = v21;
  v22(v19, v21, v12);
  Siri_Nlu_External_SystemDialogAct.init()();
  v22(v16, v19, v12);
  Siri_Nlu_External_SystemDialogAct.offered.setter();
  v23 = *(void (**)(char *, uint64_t))(v13 + 8);
  v39 = v12;
  v23(v19, v12);
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.siriContacts);
  v25 = v40;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 16);
  v27 = v37;
  v26(v7, a3, v37);
  v28 = Logger.logObject.getter();
  v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v35 = (uint64_t (*)(char *, uint64_t))v23;
    v30 = (uint8_t *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v42 = v31;
    *(_DWORD *)v30 = 136315138;
    v26(v36, (uint64_t)v7, v27);
    v32 = String.init<A>(describing:)();
    v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v7, v27);
    _os_log_impl(&dword_21FE16000, v28, v29, "#ContactsContextProvider Returning SystemOffered for confirm ModifyContactAttributeIntent: %s", v30, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x2207D8768](v31, -1, -1);
    MEMORY[0x2207D8768](v30, -1, -1);

    return v35(v38, v39);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v27);
    return ((uint64_t (*)(char *, uint64_t))v23)(v38, v39);
  }
}

uint64_t static ContactsContextProvider.buildWantedToProceed(for:)(uint64_t a1, char a2)
{
  uint64_t updated;
  uint64_t v5;

  type metadata accessor for UsoTaskBuilder_update_common_Person();
  swift_allocObject();
  updated = UsoTaskBuilder_update_common_Person.init()();
  if ((a2 & 1) == 0 && a1 == 6)
  {
    type metadata accessor for UsoEntityBuilder_common_Person();
    swift_allocObject();
    UsoEntityBuilder_common_Person.init()();
    type metadata accessor for UsoEntityBuilder_common_PersonName();
    swift_allocObject();
    UsoEntityBuilder_common_PersonName.init()();
    MEMORY[0x2207D6DA0](0, 0xE000000000000000);
    v5 = swift_retain();
    MEMORY[0x2207D6C98](v5, MEMORY[0x24BEA23C0]);
    swift_release();
    dispatch thunk of Uso_VerbTemplateBuilder_NoVerb.setEntity(value:)();
    swift_release();
    swift_release();
  }
  static Siri_Nlu_External_UserWantedToProceed.from(_:)(updated);
  return swift_release();
}

void OUTLINED_FUNCTION_1_16()
{
  _StringGuts.grow(_:)(20);
}

uint64_t OUTLINED_FUNCTION_2_18()
{
  return NLContextUpdate.currentDomainName.setter();
}

uint64_t OUTLINED_FUNCTION_3_11()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_6_15()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 81) = 4;
  return String.uppercased()()._countAndFlagsBits;
}

uint64_t OUTLINED_FUNCTION_11_10()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_12_15()
{
  return String.uppercased()()._countAndFlagsBits;
}

uint64_t OUTLINED_FUNCTION_13_16()
{
  return String.firstLetterCapitalized()()._countAndFlagsBits;
}

uint64_t OUTLINED_FUNCTION_14_16()
{
  return type metadata accessor for Siri_Nlu_External_SystemDialogAct();
}

void OUTLINED_FUNCTION_15_11(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_19_13()
{
  return NLContextUpdate.currentDomainName.setter();
}

uint64_t OUTLINED_FUNCTION_20_13()
{
  return NLContextUpdate.init()();
}

void OUTLINED_FUNCTION_21_12(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_23_11()
{
  return String.firstLetterCapitalized()()._countAndFlagsBits;
}

uint64_t OUTLINED_FUNCTION_24_12()
{
  return String.firstLetterCapitalized()()._countAndFlagsBits;
}

uint64_t OUTLINED_FUNCTION_25_15()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_26_14()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_27_10()
{
  return 0x56746361746E6F63;
}

uint64_t OUTLINED_FUNCTION_28_10()
{
  return 0x54746361746E6F63;
}

uint64_t OUTLINED_FUNCTION_30_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 112) = v0;
  *(_QWORD *)(v2 - 104) = v1;
  return 0x6E6F73726570;
}

void OUTLINED_FUNCTION_31_11(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_32_9()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_33_5()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t OUTLINED_FUNCTION_34_8()
{
  return NLContextUpdate.rrEntities.setter();
}

uint64_t OUTLINED_FUNCTION_35_8()
{
  return NLContextUpdate.nluSystemDialogActs.setter();
}

uint64_t OUTLINED_FUNCTION_36_6()
{
  return NLContextUpdate.weightedPromptStrict.setter();
}

uint64_t OUTLINED_FUNCTION_37_7()
{
  return String.firstLetterCapitalized()()._countAndFlagsBits;
}

void OUTLINED_FUNCTION_38_5(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_39_7()
{
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_40_3()
{
  uint64_t v0;
  void *v1;
  Swift::String v2;

  v2._countAndFlagsBits = v0;
  v2._object = v1;
  return ContactNLv3Constants.boundValue(_:)(v2)._countAndFlagsBits;
}

uint64_t OUTLINED_FUNCTION_41_7()
{
  return type metadata accessor for Siri_Nlu_External_SystemPrompted();
}

uint64_t OUTLINED_FUNCTION_43_6()
{
  return 0x746361746E6F63;
}

BOOL OUTLINED_FUNCTION_44_6(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_45_6()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_49_7()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_50_6()
{
  return swift_endAccess();
}

uint64_t OUTLINED_FUNCTION_51_5()
{
  return String.firstLetterCapitalized()()._countAndFlagsBits;
}

uint64_t OUTLINED_FUNCTION_53_4()
{
  return NLContextUpdate.nluSystemDialogActs.setter();
}

uint64_t OUTLINED_FUNCTION_54_5(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 144) = a1;
  return specialized Array._endMutation()();
}

uint64_t OUTLINED_FUNCTION_55_5(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t OUTLINED_FUNCTION_57_2()
{
  return swift_endAccess();
}

id OUTLINED_FUNCTION_59_5()
{
  uint64_t v0;
  void *v1;

  return objc_msgSend(v1, *(SEL *)(v0 + 1472));
}

uint64_t OUTLINED_FUNCTION_60_4()
{
  return type metadata accessor for UsoEntityBuilder_common_Person();
}

uint64_t OUTLINED_FUNCTION_61_3()
{
  return NLContextUpdate.weightedPromptResponseOptions.setter();
}

uint64_t OUTLINED_FUNCTION_62_4()
{
  return NLContextUpdate.init()();
}

uint64_t OUTLINED_FUNCTION_64_3()
{
  return 0x75466E6F73726570;
}

uint64_t OUTLINED_FUNCTION_66_6()
{
  return type metadata accessor for MachineUtteranceBuilder();
}

uint64_t OUTLINED_FUNCTION_68_6()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_69_6@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t OUTLINED_FUNCTION_70_5()
{
  return MachineUtteranceBuilder.init()();
}

uint64_t OUTLINED_FUNCTION_71_4()
{
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_73_4()
{
  uint64_t v0;

  return v0;
}

uint64_t GetContactAttributeIntent.requestedName.getter(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = OUTLINED_FUNCTION_8_11(a1, (SEL *)&selRef_fullName);
  if (!v2)
  {
    result = OUTLINED_FUNCTION_8_11(result, (SEL *)&selRef_firstName);
    if (!v3)
    {
      result = OUTLINED_FUNCTION_8_11(result, (SEL *)&selRef_middleName);
      if (!v4)
      {
        result = OUTLINED_FUNCTION_8_11(result, (SEL *)&selRef_lastName);
        if (!v5)
          return OUTLINED_FUNCTION_8_11(result, (SEL *)&selRef_nickName);
      }
    }
  }
  return result;
}

id GetContactAttributeIntent.__allocating_init(_:referenceResolver:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  char v13;
  char v14;
  Class isa;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v43;
  unint64_t v44;

  v4 = (uint64_t)v2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonIntentNode?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PersonIntentNode();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_50();
  v12 = objc_msgSend(objc_allocWithZone(v2), sel_init);
  ContactNLv3Intent.isMeCardRequest.getter();
  v14 = v13;
  type metadata accessor for NSNumber();
  isa = NSNumber.init(integerLiteral:)(v14 & 1).super.super.isa;
  OUTLINED_FUNCTION_0_15((uint64_t)isa, sel_setIsMe_);

  ContactNLv3Intent.person.getter();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10) == 1)
  {
    outlined destroy of PersonIntentNode?((uint64_t)v9);
    if (one-time initialization token for contactId != -1)
      swift_once();
    type metadata accessor for ContactNLv3Intent();
    lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent();
    IntentNodeTraversable.value<A>(forNode:)();
    if (v44)
    {
      v16 = String.sanitizeContactIdURL.getter(v43, v44);
      v18 = v17;
      swift_bridgeObjectRelease();
      outlined bridged method (mbgnn) of @objc GetContactIntent.contactIdentifier.setter(v16, v18, v12);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = xmmword_21FED8AB0;
      type metadata accessor for SiriMatch();
      v20 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      swift_bridgeObjectRetain();
      @nonobjc INObject.init(identifier:display:)(v16, v18, v16, v18);
      *(_QWORD *)(v19 + 32) = v21;
      v43 = v19;
      specialized Array._endMutation()();
      outlined bridged method (mbnn) of @objc GetContactIntent.siriMatches.setter(v43, v12);
    }
    else
    {
      SiriKitGetEntityIntent.runReferenceResolution(_:)(a2, v4, (uint64_t)&protocol witness table for GetContactAttributeIntent);
    }
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v3, v9, v10);
    OUTLINED_FUNCTION_4_16();
    v22 = PersonIntentNodeContaining.firstName.getter();
    if (v23)
      OUTLINED_FUNCTION_3_10();
    OUTLINED_FUNCTION_0_15(v22, sel_setFirstName_);

    OUTLINED_FUNCTION_4_16();
    v24 = PersonIntentNodeContaining.nickName.getter();
    if (v25)
      OUTLINED_FUNCTION_3_10();
    OUTLINED_FUNCTION_0_15(v24, sel_setNickName_);

    OUTLINED_FUNCTION_4_16();
    v26 = PersonIntentNodeContaining.lastName.getter();
    if (v27)
      OUTLINED_FUNCTION_3_10();
    OUTLINED_FUNCTION_0_15(v26, sel_setLastName_);

    OUTLINED_FUNCTION_4_16();
    v28 = PersonIntentNodeContaining.fullName.getter();
    if (v29)
      OUTLINED_FUNCTION_3_10();
    OUTLINED_FUNCTION_0_15(v28, sel_setFullName_);

    OUTLINED_FUNCTION_4_16();
    v30 = PersonIntentNodeContaining.middleName.getter();
    if (v31)
      OUTLINED_FUNCTION_3_10();
    OUTLINED_FUNCTION_0_15(v30, sel_setMiddleName_);

    OUTLINED_FUNCTION_4_16();
    v32 = PersonIntentNodeContaining.company.getter();
    if (v33)
      OUTLINED_FUNCTION_3_10();
    OUTLINED_FUNCTION_0_15(v32, sel_setOrganizationName_);

    OUTLINED_FUNCTION_4_16();
    v34 = PersonIntentNodeContaining.relationship.getter();
    if (v35)
      OUTLINED_FUNCTION_3_10();
    OUTLINED_FUNCTION_0_15(v34, sel_setContactRelation_);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v3, v10);
  }
  type metadata accessor for ContactAttribute();
  v36 = ContactNLv3Intent.requestedContactAttribute.getter();
  v37 = ContactNLv3Intent.requestedContactAttributeLabel.getter();
  v39 = v38;
  v40 = (void *)static DateTimeUtil.getRequestedAgeDateTime(from:)();
  v41 = ContactAttribute.__allocating_init(contactAttributeType:identifier:handleLabel:handleValue:ageDateTime:postalAddress:)(v36, 0, 0, v37, v39, 0, 0, v40, 0);
  OUTLINED_FUNCTION_0_15((uint64_t)v41, sel_setContactAttributeToGet_);

  __swift_destroy_boxed_opaque_existential_0(a2);
  outlined destroy of ContactNLv3Intent(a1);
  return v12;
}

uint64_t GetContactAttributeIntent.siriInferenceContact.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[8];

  v2 = type metadata accessor for ContactHandle.HandleType();
  v34[2] = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v34[3] = (char *)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for ContactHandle();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_50();
  Contact.init()();
  outlined bridged method (pb) of @objc GetContactIntent.contactIdentifier.getter(v0);
  if (v6)
    Contact.id.setter();
  outlined bridged method (pb) of @objc GetContactIntent.contactRelation.getter(v0);
  if (v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Contact.LabeledValue<String>>);
    v34[0] = v1;
    v34[1] = v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Contact.LabeledValue<String>);
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_21FED8CB0;
    static String.EMPTY.getter();
    v34[4] = static String.EMPTY.getter();
    v34[5] = v9;
    Contact.LabeledValue.init(id:label:value:)();
    v7 = Contact.contactRelations.setter();
  }
  v10 = OUTLINED_FUNCTION_2_17(v7, (SEL *)&selRef_fullName);
  if (v11)
    v10 = Contact.givenName.setter();
  v12 = OUTLINED_FUNCTION_2_17(v10, (SEL *)&selRef_firstName);
  if (v13)
    v12 = Contact.givenName.setter();
  v14 = OUTLINED_FUNCTION_2_17(v12, (SEL *)&selRef_middleName);
  if (v15)
    v14 = Contact.middleName.setter();
  v16 = OUTLINED_FUNCTION_2_17(v14, (SEL *)&selRef_lastName);
  if (v17)
    v16 = Contact.familyName.setter();
  v18 = OUTLINED_FUNCTION_2_17(v16, (SEL *)&selRef_nickName);
  if (v19)
    v18 = Contact.nickname.setter();
  v20 = OUTLINED_FUNCTION_2_17(v18, (SEL *)&selRef_organizationName);
  if (v21)
    v20 = Contact.organizationName.setter();
  v22 = OUTLINED_FUNCTION_2_17(v20, (SEL *)&selRef_phoneNumber);
  if (v23)
  {
    v24 = v22;
    OUTLINED_FUNCTION_7_13(v22, *MEMORY[0x24BE93580]);
    OUTLINED_FUNCTION_5_12();
    ContactHandle.init(id:type:label:value:isSuggested:)();
    OUTLINED_FUNCTION_12_16();
    OUTLINED_FUNCTION_11_11();
    v25 = *(_QWORD *)(*(_QWORD *)v24 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v25);
    OUTLINED_FUNCTION_5_13(v25 + 1);
    OUTLINED_FUNCTION_10_13(v26 + v27 * v25);
    v22 = OUTLINED_FUNCTION_11_9();
  }
  result = OUTLINED_FUNCTION_2_17(v22, (SEL *)&selRef_emailAddress);
  if (v29)
  {
    v30 = result;
    OUTLINED_FUNCTION_7_13(result, *MEMORY[0x24BE93578]);
    OUTLINED_FUNCTION_5_12();
    ContactHandle.init(id:type:label:value:isSuggested:)();
    OUTLINED_FUNCTION_12_16();
    OUTLINED_FUNCTION_11_11();
    v31 = *(_QWORD *)(*(_QWORD *)v30 + 16);
    specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v31);
    OUTLINED_FUNCTION_5_13(v31 + 1);
    OUTLINED_FUNCTION_10_13(v32 + v33 * v31);
    return OUTLINED_FUNCTION_11_9();
  }
  return result;
}

void GetContactAttributeIntent.requestedRelationship.getter()
{
  void *v0;

  outlined bridged method (pb) of @objc GetContactIntent.contactRelation.getter(v0);
}

uint64_t GetContactAttributeIntent.requestedCompanyName.getter()
{
  void *v0;

  return outlined bridged method (pb) of @objc PostalAddress.street.getter(v0, (SEL *)&selRef_organizationName);
}

char *GetContactAttributeIntentResponse.__allocating_init(contactIdentifiers:code:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;
  char *v6;
  char *v7;
  NSArray v8;

  v5 = objc_allocWithZone(v2);
  v6 = GetContactAttributeIntentResponse.init(code:userActivity:)(a2, 0);
  v7 = v6;
  if (a1)
  {
    v8.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v8.super.isa = 0;
  }
  objc_msgSend(v6, sel_setContactIdentifiers_, v8.super.isa);

  return v6;
}

void OUTLINED_FUNCTION_5_13(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 16) = a1;
}

uint64_t OUTLINED_FUNCTION_10_13(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(a1, v2, v3);
}

uint64_t OUTLINED_FUNCTION_11_11()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t OUTLINED_FUNCTION_12_16()
{
  return Contact.handles.modify();
}

void SAPerson.init(contact:isMe:)(void *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  NSURL *v33;
  void *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Class isa;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  id v53;
  id v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  id v66;

  v66 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  OUTLINED_FUNCTION_28();
  v4 = MEMORY[0x24BDAC7A8](v3);
  v65 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v61 - v6;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_55_0();
  v11 = v10 - v9;
  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_9_5();
  v63 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_9_5();
  v64 = v16;
  v17 = type metadata accessor for UUID();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_55_0();
  v21 = v20 - v19;
  v22 = objc_msgSend(objc_allocWithZone((Class)OUTLINED_FUNCTION_7_14()), sel_init);
  outlined bridged method (ob) of @objc SABaseAceObject.aceId.getter(v22);
  v24 = v23;
  swift_bridgeObjectRelease();
  if (!v24)
  {
    v25 = v22;
    v61 = v13;
    v26 = v25;
    UUID.init()();
    UUID.uuidString.getter();
    v62 = v12;
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v21, v17);
    v12 = v62;
    OUTLINED_FUNCTION_24_13();

    v13 = v61;
  }
  v27 = v22;
  if (a1)
  {
    v28 = (void *)objc_opt_self();
    v29 = v22;
    v27 = a1;
    v30 = objc_msgSend(v28, sel_assistantIDFromContact_, v27);
    if (v30)
    {
      v31 = v63;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v32 = v64;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v64, v31, v12);
      OUTLINED_FUNCTION_71_1(v32, 0);
      if (__swift_getEnumTagSinglePayload(v32, 1, v12) == 1)
      {
        v30 = 0;
      }
      else
      {
        URL._bridgeToObjectiveC()(v33);
        v30 = v34;
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v32, v12);
      }
    }
    else
    {
      OUTLINED_FUNCTION_71_1(v64, 1);
    }
    OUTLINED_FUNCTION_12_17(v29, sel_setIdentifier_);

    v36 = OUTLINED_FUNCTION_8_7(v35, sel_identifier);
    OUTLINED_FUNCTION_5_14();
    OUTLINED_FUNCTION_1_17();
    OUTLINED_FUNCTION_0_16();
    v38 = OUTLINED_FUNCTION_8_7(v37, sel_birthday);
    if (v38)
    {
      v39 = v38;
      v40 = (uint64_t)v65;
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

      v41 = type metadata accessor for DateComponents();
      v42 = v40;
      v43 = 0;
    }
    else
    {
      v41 = type metadata accessor for DateComponents();
      v40 = (uint64_t)v65;
      v42 = (uint64_t)v65;
      v43 = 1;
    }
    OUTLINED_FUNCTION_71_1(v42, v43);
    outlined init with take of DateComponents?(v40, (uint64_t)v7);
    type metadata accessor for DateComponents();
    if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v41) == 1)
    {
      outlined destroy of DateComponents?((uint64_t)v7);
      v44 = type metadata accessor for Date();
      __swift_storeEnumTagSinglePayload(v11, 1, 1, v44);
      isa = 0;
    }
    else
    {
      DateComponents.date.getter();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v7, v41);
      v46 = v11;
      v47 = type metadata accessor for Date();
      isa = 0;
      if (__swift_getEnumTagSinglePayload(v46, 1, v47) != 1)
      {
        isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v46, v47);
      }
    }
    OUTLINED_FUNCTION_46_2(v29, sel_setBirthday_);

    v49 = OUTLINED_FUNCTION_8_7(v48, sel_organizationName);
    OUTLINED_FUNCTION_5_14();
    OUTLINED_FUNCTION_1_17();
    OUTLINED_FUNCTION_0_16();
    v51 = OUTLINED_FUNCTION_8_7(v50, sel_givenName);
    OUTLINED_FUNCTION_5_14();
    OUTLINED_FUNCTION_1_17();
    OUTLINED_FUNCTION_0_16();
    CNContact.formattedFullName.getter();
    outlined bridged method (mbnn) of @objc SAUIDecoratedText.text.setter();
    v53 = OUTLINED_FUNCTION_8_7(v52, sel_familyName);
    OUTLINED_FUNCTION_5_14();
    OUTLINED_FUNCTION_1_17();
    OUTLINED_FUNCTION_0_16();
    v54 = OUTLINED_FUNCTION_8_7((uint64_t)objc_msgSend(v29, sel_setMe_, v66), sel_middleName);
    OUTLINED_FUNCTION_5_14();
    OUTLINED_FUNCTION_1_17();
    OUTLINED_FUNCTION_0_16();
    v56 = OUTLINED_FUNCTION_8_7(v55, sel_nickname);
    OUTLINED_FUNCTION_5_14();
    OUTLINED_FUNCTION_1_17();
    OUTLINED_FUNCTION_0_16();
    v58 = OUTLINED_FUNCTION_8_7(v57, sel_namePrefix);
    OUTLINED_FUNCTION_5_14();
    OUTLINED_FUNCTION_1_17();
    OUTLINED_FUNCTION_0_16();
    v60 = OUTLINED_FUNCTION_8_7(v59, sel_nameSuffix);
    OUTLINED_FUNCTION_5_14();
    OUTLINED_FUNCTION_1_17();
    OUTLINED_FUNCTION_0_16();

  }
  OUTLINED_FUNCTION_7();
}

void SAUIButton.init(commands:text:)(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(objc_allocWithZone((Class)OUTLINED_FUNCTION_7_14()), sel_init);
  outlined bridged method (mbnn) of @objc SAUIButton.commands.setter(a1, v2);
  OUTLINED_FUNCTION_16_9();

  OUTLINED_FUNCTION_22_6();
}

void SAABPersonSnippet.init(contact:attributeType:isMe:appUtil:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_55_0();
  v12 = v11 - v10;
  v13 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  outlined bridged method (ob) of @objc SABaseAceObject.aceId.getter(v13);
  v15 = v14;
  swift_bridgeObjectRelease();
  if (!v15)
  {
    v16 = v13;
    UUID.init()();
    UUID.uuidString.getter();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
    outlined bridged method (mbnn) of @objc SAUIDecoratedText.text.setter();

  }
  v17 = v13;
  v18 = AppUtil.buildSash()();
  OUTLINED_FUNCTION_12_17(v17, sel_setSash_);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_24_13();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_21FED8AB0;
  type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SAABPerson);
  v20 = a1;
  v21 = a3;
  SAPerson.init(contact:isMe:)(a1, v21);
  *(_QWORD *)(v19 + 32) = v22;
  specialized Array._endMutation()();
  outlined bridged method (mbnn) of @objc SASTColumnDataListItem.decoratedRows.setter(v19, (uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for SAPerson);
  if (a2 == 3 || a2 == 2 || a2 == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v23 = OUTLINED_FUNCTION_6_16();
    *(_OWORD *)(v23 + 16) = xmmword_21FED8CB0;
    *(_QWORD *)(v23 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(_QWORD *)(v23 + 40) = v24;
  }
  else
  {
    type metadata accessor for ContactService();
    v23 = (uint64_t)static ContactService.defaultPropertiesString.getter();
  }
  outlined bridged method (mbnn) of @objc SAABPersonSnippet.displayProperties.setter(v23, v17);

  outlined destroy of AppUtil(a4);
  OUTLINED_FUNCTION_7();
}

void SAABPersonSnippet.init(_:isMe:)(void *a1, void *a2)
{
  _BYTE v2[24];
  ValueMetadata *v3;
  _UNKNOWN **v4;

  v3 = &type metadata for InstalledAppsProvider;
  v4 = &protocol witness table for InstalledAppsProvider;
  SAABPersonSnippet.init(contact:attributeType:isMe:appUtil:)(a1, 0, a2, (uint64_t)v2);
}

void SAStartLocalRequest.init(clientBoundCommands:)(uint64_t a1)
{
  void *v1;
  id v3;
  id v4;

  v3 = objc_msgSend(objc_allocWithZone((Class)OUTLINED_FUNCTION_9_15()), sel_init);
  v4 = v3;
  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SAClientBoundCommand);
    OUTLINED_FUNCTION_21_13();
    v4 = (id)OUTLINED_FUNCTION_59_2();
  }
  else
  {
    v1 = 0;
  }
  OUTLINED_FUNCTION_20_14((uint64_t)v4, sel_setClientBoundCommands_);

  OUTLINED_FUNCTION_22_6();
}

void SASTHeaderItem.init(header:text:)(void *a1)
{
  id v2;

  v2 = objc_msgSend(objc_allocWithZone((Class)OUTLINED_FUNCTION_7_14()), sel_init);
  objc_msgSend(v2, sel_setHeader_, a1);
  OUTLINED_FUNCTION_16_9();

  OUTLINED_FUNCTION_22_6();
}

id SASTLineDetailItem.init(title:)(void *a1)
{
  id v2;

  v2 = objc_msgSend(objc_allocWithZone((Class)OUTLINED_FUNCTION_7_14()), sel_init);
  OUTLINED_FUNCTION_46_2(v2, sel_setTitle_);

  return v2;
}

void SAUIDecoratedText.init(text:regions:)(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;

  v5 = objc_msgSend(objc_allocWithZone((Class)OUTLINED_FUNCTION_9_15()), sel_init);
  outlined bridged method (mbnn) of @objc SAUIDecoratedText.text.setter();
  if (a3)
  {
    type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SATextDecorationRegion);
    OUTLINED_FUNCTION_21_13();
    v6 = OUTLINED_FUNCTION_59_2();
  }
  else
  {
    a2 = 0;
  }
  OUTLINED_FUNCTION_20_14(v6, sel_setRegions_);

  OUTLINED_FUNCTION_22_6();
}

void SATextDecorationRegion.init(start:length:property:)(void *a1, void *a2)
{
  id v4;

  v4 = objc_msgSend(objc_allocWithZone((Class)OUTLINED_FUNCTION_9_15()), sel_init);
  OUTLINED_FUNCTION_12_17(v4, sel_setStart_);
  OUTLINED_FUNCTION_46_2(v4, sel_setLength_);
  outlined bridged method (mbnn) of @objc SAUIDecoratedText.text.setter();

  OUTLINED_FUNCTION_31_9();
}

void SASTPropertyListItem.init(decoratedTitle:decoratedValues:)(void *a1, uint64_t a2)
{
  id v4;

  v4 = objc_msgSend(objc_allocWithZone((Class)OUTLINED_FUNCTION_7_14()), sel_init);
  objc_msgSend(v4, sel_setDecoratedTitle_, a1);
  outlined bridged method (mbnn) of @objc SASTColumnDataListItem.decoratedRows.setter(a2, (uint64_t)v4, &lazy cache variable for type metadata for SAUIDecoratedText);

  OUTLINED_FUNCTION_22_6();
}

void SASTColumnDataListItem.init(title:decoratedRows:action:)(void *a1, uint64_t a2, void *a3)
{
  id v6;

  v6 = objc_msgSend(objc_allocWithZone((Class)OUTLINED_FUNCTION_9_15()), sel_init);
  OUTLINED_FUNCTION_46_2(v6, sel_setTitle_);
  outlined bridged method (mbnn) of @objc SASTColumnDataListItem.decoratedRows.setter(a2, (uint64_t)v6, &lazy cache variable for type metadata for SAUIDecoratedText);
  OUTLINED_FUNCTION_12_17(v6, sel_setAction_);

  OUTLINED_FUNCTION_22_6();
}

void SASTButtonItem.init(action:centered:decoratedLabel:)(void *a1, char a2, void *a3)
{
  id v6;

  v6 = objc_msgSend(objc_allocWithZone((Class)OUTLINED_FUNCTION_9_15()), sel_init);
  OUTLINED_FUNCTION_46_2(v6, sel_setAction_);
  objc_msgSend(v6, sel_setCentered_, a2 & 1);
  OUTLINED_FUNCTION_12_17(v6, sel_setDecoratedLabel_);

  OUTLINED_FUNCTION_22_6();
}

id SAUIConfirmationView.init(confirmCommands:confirmText:denyCommands:denyText:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v21;

  v12 = objc_msgSend(objc_allocWithZone((Class)OUTLINED_FUNCTION_7_14()), sel_init);
  outlined bridged method (mbgnn) of @objc SAUIConfirmationView.confirmCommands.setter(a1, v12, (SEL *)&selRef_setConfirmCommands_);
  outlined bridged method (mbgnn) of @objc SAUIConfirmationView.confirmText.setter(a2, a3, v12);
  outlined bridged method (mbgnn) of @objc SAUIConfirmationView.confirmCommands.setter(a4, v12, (SEL *)&selRef_setDenyCommands_);
  outlined bridged method (mbgnn) of @objc SAUIConfirmationView.denyText.setter(a5, a6, v12);
  type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SAUIConfirmationOption);
  SAUIConfirmationOption.init(commands:label:)(a1);
  v14 = v13;
  SAUIConfirmationOption.init(commands:label:)(a4);
  v16 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v17 = OUTLINED_FUNCTION_6_16();
  *(_OWORD *)(v17 + 16) = xmmword_21FED99D0;
  *(_QWORD *)(v17 + 32) = v14;
  *(_QWORD *)(v17 + 40) = v16;
  v21 = v17;
  specialized Array._endMutation()();
  v18 = v14;
  v19 = v16;
  outlined bridged method (mbnn) of @objc SASTColumnDataListItem.decoratedRows.setter(v21, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for SAUIConfirmationOption);

  return v12;
}

void SAUIConfirmationOption.init(commands:label:)(uint64_t a1)
{
  id v2;
  id v3;
  NSArray v4;

  v2 = objc_msgSend(objc_allocWithZone((Class)OUTLINED_FUNCTION_9_15()), sel_init);
  v3 = v2;
  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SAClientBoundCommand);
    v4.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.isa = 0;
  }
  objc_msgSend(v2, sel_setCommands_, v4.super.isa);

  OUTLINED_FUNCTION_24_13();
  OUTLINED_FUNCTION_31_9();
}

void outlined bridged method (mbnn) of @objc SASTColumnDataListItem.decoratedRows.setter(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  type metadata accessor for CNContact(0, a3);
  OUTLINED_FUNCTION_22_10();
  v3 = OUTLINED_FUNCTION_19_14();
  OUTLINED_FUNCTION_15_12(v3, v4, v5, v6, v7, v8, v9, v10, v11, v12);
  OUTLINED_FUNCTION_3_12(v13);
}

void outlined bridged method (mbnn) of @objc SAUIButton.commands.setter(uint64_t a1, void *a2)
{
  Class isa;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SAClientBoundCommand);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, sel_setCommands_, isa);

}

void outlined bridged method (mbgnn) of @objc SAUIConfirmationView.confirmText.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = (id)MEMORY[0x2207D7CB8]();
  objc_msgSend(a3, sel_setConfirmText_, v4);

}

void outlined bridged method (mbgnn) of @objc SAUIConfirmationView.confirmCommands.setter(uint64_t a1, void *a2, SEL *a3)
{
  Class isa;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SAClientBoundCommand);
  isa = OUTLINED_FUNCTION_22_10().super.isa;
  objc_msgSend(a2, *a3, isa);
  OUTLINED_FUNCTION_3_12(isa);
}

void outlined bridged method (mbgnn) of @objc SAUIConfirmationView.denyText.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = (id)MEMORY[0x2207D7CB8]();
  objc_msgSend(a3, sel_setDenyText_, v4);

}

uint64_t outlined bridged method (ob) of @objc SABaseAceObject.aceId.getter(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, sel_aceId);

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void outlined bridged method (mbnn) of @objc SAABPersonSnippet.displayProperties.setter(uint64_t a1, void *a2)
{
  Class isa;

  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, sel_setDisplayProperties_, isa);

}

uint64_t outlined destroy of DateComponents?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void outlined bridged method (mbnn) of @objc SAUIDecoratedText.text.setter()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  MEMORY[0x2207D7CB8]();
  v0 = OUTLINED_FUNCTION_19_14();
  OUTLINED_FUNCTION_15_12(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
  OUTLINED_FUNCTION_3_12(v10);
}

void OUTLINED_FUNCTION_0_16()
{
  outlined bridged method (mbnn) of @objc SAUIDecoratedText.text.setter();
}

void OUTLINED_FUNCTION_1_17()
{
  void *v0;

}

void OUTLINED_FUNCTION_3_12(id a1)
{

}

uint64_t OUTLINED_FUNCTION_5_14()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_6_16()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_7_14()
{
  return swift_getObjCClassFromMetadata();
}

uint64_t OUTLINED_FUNCTION_9_15()
{
  return swift_getObjCClassFromMetadata();
}

id OUTLINED_FUNCTION_12_17(id a1, SEL a2)
{
  uint64_t v2;

  return objc_msgSend(a1, a2, v2);
}

id OUTLINED_FUNCTION_15_12(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  SEL *v10;
  void *v11;

  return objc_msgSend(v11, *v10, a10);
}

void OUTLINED_FUNCTION_16_9()
{
  outlined bridged method (mbnn) of @objc SAUIDecoratedText.text.setter();
}

uint64_t OUTLINED_FUNCTION_19_14()
{
  return swift_bridgeObjectRelease();
}

id OUTLINED_FUNCTION_20_14(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

NSArray OUTLINED_FUNCTION_21_13()
{
  return Array._bridgeToObjectiveC()();
}

NSArray OUTLINED_FUNCTION_22_10()
{
  return Array._bridgeToObjectiveC()();
}

void OUTLINED_FUNCTION_24_13()
{
  outlined bridged method (mbnn) of @objc SAUIDecoratedText.text.setter();
}

uint64_t type metadata completion function for ContactsDisambiguationStrategy()
{
  return swift_initClassMetadata2();
}

uint64_t ContactsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v3[25] = a2;
  v3[26] = v2;
  v3[24] = a1;
  v3[27] = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WindowedPaginationParameters?);
  v3[28] = OUTLINED_FUNCTION_0_0();
  type metadata accessor for DialogPhase();
  v3[29] = OUTLINED_FUNCTION_0_0();
  v4 = type metadata accessor for OutputGenerationManifest();
  v3[30] = v4;
  v3[31] = *(_QWORD *)(v4 - 8);
  v3[32] = OUTLINED_FUNCTION_0_0();
  v3[33] = OUTLINED_FUNCTION_78_3();
  v3[34] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ContactsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  void *v22;
  uint64_t v23;
  id v24;
  id v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;

  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 264);
  v1 = *(NSObject **)(v0 + 272);
  v3 = (id)static Signpost.contactsLog;
  OUTLINED_FUNCTION_68_7();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_53_0();
  v4 = *(int *)(v2 + 20);
  *(_DWORD *)(v0 + 368) = v4;
  v5 = (char *)v1 + v4;
  *(_QWORD *)v5 = "MakePromptForDisambiguation";
  *((_QWORD *)v5 + 1) = 27;
  v5[16] = 2;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v6 = OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_10_1(v6, (uint64_t)static Logger.siriContacts);
  v7 = OUTLINED_FUNCTION_8();
  if (os_log_type_enabled(v1, v7))
  {
    v8 = (uint8_t *)OUTLINED_FUNCTION_1();
    v30 = OUTLINED_FUNCTION_1();
    *(_DWORD *)v8 = 136315138;
    v9 = OUTLINED_FUNCTION_24_14();
    *(_QWORD *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_48();
    _os_log_impl(&dword_21FE16000, v1, v7, "#ContactsDisambiguationStrategy<%s> Running makePromptForDisambiguation()", v8, 0xCu);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<String>);
  *(_QWORD *)(v0 + 176) = PaginatedItemContainer.items.getter();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  type metadata accessor for CNContact();
  MEMORY[0x2207D86A8](MEMORY[0x24BEE12C8], v11);
  v12 = Sequence.compactMap<A>(_:)();
  swift_bridgeObjectRelease();
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_55_1();
  }
  else
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v14 = MEMORY[0x24BEE4AF8];
  if (v13)
  {
    v30 = MEMORY[0x24BEE4AF8];
    result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v13 < 0)
    {
      __break(1u);
      return result;
    }
    v16 = 0;
    do
    {
      if ((v12 & 0xC000000000000001) != 0)
        v17 = (id)MEMORY[0x2207D80C0](v16, v12);
      else
        v17 = OUTLINED_FUNCTION_53_5(v12 + 8 * v16);
      v18 = v17;
      ++v16;
      objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD9F30]), sel_initWithContact_, v17);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v13 != v16);
    v14 = v30;
  }
  *(_QWORD *)(v0 + 280) = v14;
  v19 = *(_QWORD *)(v0 + 208);
  static DialogPhase.clarification.getter();
  v20 = swift_task_alloc();
  *(_QWORD *)(v20 + 16) = v19;
  *(_QWORD *)(v20 + 24) = v12;
  OutputGenerationManifest.init(dialogPhase:_:)();
  OUTLINED_FUNCTION_55_1();
  swift_task_dealloc();
  v21 = ContactsStrategy.isSmartEnabled.getter();
  v22 = *(void **)(v19 + 120);
  v23 = *(_QWORD *)(v0 + 208);
  if ((v21 & 1) != 0)
  {
    if (v22)
    {
      OUTLINED_FUNCTION_67_5(v23);
      type metadata accessor for ContactResolutionSnippetGenerator();
      OUTLINED_FUNCTION_32_0();
      v24 = v22;
      OUTLINED_FUNCTION_37_8();
    }
    else
    {
      OUTLINED_FUNCTION_66_7(v23);
      type metadata accessor for CATGlobals();
      CATGlobals.__allocating_init()();
      type metadata accessor for ContactResolutionSnippetGenerator();
      OUTLINED_FUNCTION_32_0();
      OUTLINED_FUNCTION_26_15();
    }
    *(_QWORD *)(v0 + 288) = ContactResolutionSnippetGenerator.init(appBundleId:globals:deviceState:)();
    v26 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 296) = v26;
    *v26 = v0;
    v26[1] = ContactsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
    return ContactResolutionSnippetGenerator.generateDetailedDisambiguationContactNames(contacts:directInvocationID:outputGenerationManifest:)();
  }
  else
  {
    if (v22)
    {
      OUTLINED_FUNCTION_67_5(v23);
      type metadata accessor for ContactResolutionPatternGenerator();
      OUTLINED_FUNCTION_32_0();
      v25 = v22;
      OUTLINED_FUNCTION_37_8();
    }
    else
    {
      OUTLINED_FUNCTION_66_7(v23);
      type metadata accessor for CATGlobals();
      CATGlobals.__allocating_init()();
      type metadata accessor for ContactResolutionPatternGenerator();
      OUTLINED_FUNCTION_32_0();
      OUTLINED_FUNCTION_26_15();
    }
    *(_QWORD *)(v0 + 312) = ContactResolutionPatternGenerator.init(appBundleId:globals:deviceState:)();
    v27 = *(_QWORD *)(v0 + 224);
    v28 = type metadata accessor for WindowedPaginationParameters();
    __swift_storeEnumTagSinglePayload(v27, 1, 1, v28);
    v29 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 320) = v29;
    *v29 = v0;
    v29[1] = ContactsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
    return ContactResolutionPatternGenerator.generateDetailedDisambiguationContactNames(contacts:contactPickerDirectInvocationID:contactSelectionDirectInvocationID:windowedPaginationParameters:)();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 304) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_2_9();
}

{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  OUTLINED_FUNCTION_13_17();
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_53_0();
  outlined destroy of Signpost.OpenSignpost(v0);
  swift_task_dealloc();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  return OUTLINED_FUNCTION_25_8(*(uint64_t (**)(void))(v1 + 8));
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD, _QWORD, _QWORD);

  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_32_0();
  v0[43] = ResponseFactory.init()();
  v3 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))((int)*MEMORY[0x24BE97F00] + MEMORY[0x24BE97F00]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[44] = v1;
  *v1 = v0;
  v1[1] = ContactsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
  return v3(v0[24], v0[41], v0[32]);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 360) = v0;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_2_9();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_65_6();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_13_17();
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_53_0();
  outlined destroy of Signpost.OpenSignpost(v0);
  swift_task_dealloc();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  return OUTLINED_FUNCTION_25_8(*(uint64_t (**)(void))(v1 + 8));
}

{
  uint64_t v0;

  swift_release();
  OUTLINED_FUNCTION_4_17();
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_54_6();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  return OUTLINED_FUNCTION_9_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  swift_release();
  OUTLINED_FUNCTION_4_17();
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_54_6();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  return OUTLINED_FUNCTION_9_14(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_65_6();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4_17();
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_54_6();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  return OUTLINED_FUNCTION_9_14(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ContactsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t *v3;

  v3 = *v2;
  v3[41] = a1;
  v3[42] = v1;
  swift_task_dealloc();
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v3[28], &demangling cache variable for type metadata for WindowedPaginationParameters?);
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_20_0();
  return swift_task_switch();
}

uint64_t static ContactsDisambiguationStrategy.extractCurrentContext(from:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ObjectType;
  void (*v32)(uint64_t, uint64_t);
  unint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;

  v2 = *(_QWORD *)(v0 + 224);
  OUTLINED_FUNCTION_79_3();
  v3 = (void *)ParameterResolutionRecord.intent.getter();
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v0 + 240) + 32))(v2);
  v52 = MEMORY[0x24BEE4AF8];
  if (v5)
  {
    v6 = v4;
    v7 = v5;
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v9 = v8;
    v1 = *(_QWORD *)(v8 + 16);
    v10 = *(_QWORD *)(v8 + 24);
    if (v1 >= v10 >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v1 + 1, 1, v8);
      v9 = v50;
    }
    *(_QWORD *)(v9 + 16) = v1 + 1;
    v11 = v9 + 16 * v1;
    *(_QWORD *)(v11 + 32) = v6;
    *(_QWORD *)(v11 + 40) = v7;
    v52 = v9;
  }
  v12 = (void *)ParameterResolutionRecord.result.getter();
  v13 = specialized INIntentResolutionResult.typedDisambiguationItems<A>()();

  if (v13 >> 62)
  {
    OUTLINED_FUNCTION_25_16();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    if (v14)
      goto LABEL_7;
LABEL_20:
    v16 = MEMORY[0x24BEE4AF8];
    goto LABEL_21;
  }
  v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
  OUTLINED_FUNCTION_25_16();
  if (!v14)
    goto LABEL_20;
LABEL_7:
  if (v14 < 1)
  {
    __break(1u);
    goto LABEL_44;
  }
  v15 = 0;
  v16 = MEMORY[0x24BEE4AF8];
  do
  {
    if ((v13 & 0xC000000000000001) != 0)
      OUTLINED_FUNCTION_62_5();
    v17 = OUTLINED_FUNCTION_53_5(v13 + 8 * v15);
    v18 = outlined bridged method (pb) of @objc INObject.identifier.getter(v17);
    v20 = v19;

    if (v20)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v24 = OUTLINED_FUNCTION_51_6();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24, v25, v26, v16);
        v16 = v27;
      }
      v22 = *(_QWORD *)(v16 + 16);
      v21 = *(_QWORD *)(v16 + 24);
      if (v22 >= v21 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1, v16);
        v16 = v28;
      }
      *(_QWORD *)(v16 + 16) = v22 + 1;
      v23 = v16 + 16 * v22;
      *(_QWORD *)(v23 + 32) = v18;
      *(_QWORD *)(v23 + 40) = v20;
    }
    ++v15;
  }
  while (v14 != v15);
LABEL_21:
  OUTLINED_FUNCTION_30();
  specialized Array.append<A>(contentsOf:)(v16);
  swift_getObjectType();
  if (!dynamic_cast_existential_1_conditional((uint64_t)v3))
    goto LABEL_42;
  v30 = v29;
  ObjectType = swift_getObjectType();
  v32 = *(void (**)(uint64_t, uint64_t))(v30 + 16);
  v1 = v3;
  v32(ObjectType, v30);
  v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 104))(ObjectType, v30);
  if (!v33)
  {
LABEL_41:

LABEL_42:
    return v52;
  }
  v13 = v33;
  if (!(v33 >> 62))
  {
    v34 = *(_QWORD *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
    result = OUTLINED_FUNCTION_25_16();
    goto LABEL_25;
  }
LABEL_44:
  OUTLINED_FUNCTION_25_16();
  result = _CocoaArrayWrapper.endIndex.getter();
  v34 = result;
LABEL_25:
  v51 = v1;
  if (!v34)
  {
    v37 = MEMORY[0x24BEE4AF8];
LABEL_40:
    OUTLINED_FUNCTION_30();
    specialized Array.append<A>(contentsOf:)(v37);
    v1 = v51;
    goto LABEL_41;
  }
  if (v34 >= 1)
  {
    v36 = 0;
    v37 = MEMORY[0x24BEE4AF8];
    do
    {
      if ((v13 & 0xC000000000000001) != 0)
        OUTLINED_FUNCTION_62_5();
      v38 = OUTLINED_FUNCTION_53_5(v13 + 8 * v36);
      v39 = outlined bridged method (pb) of @objc INObject.identifier.getter(v38);
      v41 = v40;

      if (v41)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          v45 = OUTLINED_FUNCTION_51_6();
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v45, v46, v47, v37);
          v37 = v48;
        }
        v43 = *(_QWORD *)(v37 + 16);
        v42 = *(_QWORD *)(v37 + 24);
        if (v43 >= v42 >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1, v37);
          v37 = v49;
        }
        *(_QWORD *)(v37 + 16) = v43 + 1;
        v44 = v37 + 16 * v43;
        *(_QWORD *)(v44 + 32) = v39;
        *(_QWORD *)(v44 + 40) = v41;
      }
      ++v36;
    }
    while (v34 != v36);
    goto LABEL_40;
  }
  __break(1u);
  return result;
}

uint64_t static ContactsDisambiguationStrategy.isRequestForDifferentContact(_:currentContactIds:currentRelation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  Class isa;
  os_log_type_t v49;
  _BOOL4 v50;
  char v51;
  NSObject *v52;
  os_log_type_t v53;
  Swift::String v54;
  Swift::String v55;
  char v57;
  os_log_type_t v58;
  const char *v59;
  NSObject *v60;
  os_log_type_t v61;
  _WORD *v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  NSObject *v75;
  char v77;
  _QWORD v78[4];
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v5 = OUTLINED_FUNCTION_26();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_55_0();
  v9 = (v8 - v7);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_55_0();
  v13 = v12 - v11;
  v85 = 0;
  v86 = MEMORY[0x24BEE4AF8];
  v84 = 0;
  USOParse.preferredUserDialogAct.getter(v12 - v11);
  v14 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  if (__swift_getEnumTagSinglePayload(v13, 1, v14) == 1)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v13, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_8:
    v82 = 0u;
    v83 = 0u;
    goto LABEL_31;
  }
  v15 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  if (!v15)
    goto LABEL_8;
  static UsoTask_CodegenConverter.convert(task:)();
  OUTLINED_FUNCTION_2();
  if (!*((_QWORD *)&v83 + 1))
    goto LABEL_31;
  outlined init with copy of Any?((uint64_t)&v82, (uint64_t)v78);
  type metadata accessor for UsoTask_noVerb_common_Person();
  if (OUTLINED_FUNCTION_8_12())
  {
    OUTLINED_FUNCTION_22_11();
    OUTLINED_FUNCTION_73_5();
    OUTLINED_FUNCTION_52();
    if (v79)
    {
      v16 = OUTLINED_FUNCTION_77_4();
      OUTLINED_FUNCTION_45();
    }
    else
    {
      v16 = MEMORY[0x24BEE4AF8];
    }
    OUTLINED_FUNCTION_18_11();
    v86 = v16;
    OUTLINED_FUNCTION_22_11();
    OUTLINED_FUNCTION_73_5();
    goto LABEL_23;
  }
  type metadata accessor for UsoTask_read_common_Person();
  if (!OUTLINED_FUNCTION_8_12())
  {
    type metadata accessor for UsoTask_request_common_Person();
    if (!OUTLINED_FUNCTION_8_12())
    {
      type metadata accessor for UsoTask_summarise_common_Person();
      if (!OUTLINED_FUNCTION_8_12())
      {
        type metadata accessor for UsoTask_update_common_Person();
        if (swift_dynamicCast())
        {
          OUTLINED_FUNCTION_22_11();
          OUTLINED_FUNCTION_74_3();
        }
        goto LABEL_30;
      }
      goto LABEL_10;
    }
    v18 = UsoTask_request_common_Person.contactIds.getter();
    OUTLINED_FUNCTION_18_11();
    v86 = v18;
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    v19 = OUTLINED_FUNCTION_45();
    v20 = v79;
    if (v79)
    {
      v21 = MEMORY[0x2207D6AA0](v19);
      OUTLINED_FUNCTION_2();
      if (v21)
      {
        UsoEntity_common_PersonRelationship.relationshipIdentifierOrLabel.getter();
        v20 = v22;
        v24 = v23;
        OUTLINED_FUNCTION_52();
        OUTLINED_FUNCTION_45();
LABEL_77:
        OUTLINED_FUNCTION_49_6();
        v84 = v20;
        v85 = v24;
        goto LABEL_30;
      }
      OUTLINED_FUNCTION_45();
      v20 = 0;
    }
    else
    {
      OUTLINED_FUNCTION_45();
    }
    v24 = 0;
    goto LABEL_77;
  }
LABEL_10:
  OUTLINED_FUNCTION_22_11();
  OUTLINED_FUNCTION_75_3();
  OUTLINED_FUNCTION_52();
  if (v79)
  {
    v17 = OUTLINED_FUNCTION_77_4();
    OUTLINED_FUNCTION_45();
  }
  else
  {
    v17 = MEMORY[0x24BEE4AF8];
  }
  OUTLINED_FUNCTION_18_11();
  v86 = v17;
  OUTLINED_FUNCTION_22_11();
  OUTLINED_FUNCTION_75_3();
LABEL_23:
  v25 = OUTLINED_FUNCTION_52();
  v26 = v79;
  if (!v79)
  {
    OUTLINED_FUNCTION_52();
LABEL_28:
    v30 = 0;
    goto LABEL_29;
  }
  v27 = MEMORY[0x2207D6AA0](v25);
  OUTLINED_FUNCTION_2();
  if (!v27)
  {
    OUTLINED_FUNCTION_52();
    v26 = 0;
    goto LABEL_28;
  }
  UsoEntity_common_PersonRelationship.relationshipIdentifierOrLabel.getter();
  v26 = v28;
  v30 = v29;
  swift_release();
  OUTLINED_FUNCTION_52();
LABEL_29:
  OUTLINED_FUNCTION_49_6();
  v84 = v26;
  v85 = v30;
LABEL_30:
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v78);
LABEL_31:
  outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)&v82, &demangling cache variable for type metadata for Any?);
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v31 = __swift_project_value_buffer(v5, (uint64_t)static Logger.siriContacts);
  OUTLINED_FUNCTION_29();
  v32 = Logger.logObject.getter();
  v33 = static os_log_type_t.debug.getter();
  v75 = v9;
  if (os_log_type_enabled(v32, v33))
  {
    v34 = OUTLINED_FUNCTION_1();
    *(_QWORD *)&v82 = OUTLINED_FUNCTION_1();
    *(_DWORD *)v34 = 136315394;
    OUTLINED_FUNCTION_23();
    v35 = swift_bridgeObjectRetain();
    v36 = MEMORY[0x24BEE0D00];
    v37 = MEMORY[0x2207D7DE4](v35, MEMORY[0x24BEE0D00]);
    v39 = v38;
    OUTLINED_FUNCTION_96();
    v78[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, (uint64_t *)&v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v34 + 12) = 2080;
    v40 = OUTLINED_FUNCTION_50_5();
    v41 = MEMORY[0x2207D7DE4](v40, v36);
    v43 = v42;
    OUTLINED_FUNCTION_18_0();
    v78[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v43, (uint64_t *)&v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_96();
    OUTLINED_FUNCTION_33_6(&dword_21FE16000, v32, v33, "#ContactsDisambiguationStrategy isRequestForDifferentContact contactIds: %s, current IDs are %s", (uint8_t *)v34);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0();
  }

  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_23();
  if (*(_QWORD *)(v86 + 16))
  {
    v44 = swift_bridgeObjectRetain();
    v45 = specialized Set.init<A>(_:)(v44);
    v46 = OUTLINED_FUNCTION_50_5();
    v47 = specialized Set.init<A>(_:)(v46);
    v9 = specialized _NativeSet.intersection(_:)(v47, v45);
    OUTLINED_FUNCTION_55_1();
    isa = v9[2].isa;
    swift_release();
    Logger.logObject.getter();
    v49 = OUTLINED_FUNCTION_54_2();
    v50 = os_log_type_enabled(v9, v49);
    if (isa)
    {
      if (v50)
      {
        *(_WORD *)OUTLINED_FUNCTION_1() = 0;
        OUTLINED_FUNCTION_15_5(&dword_21FE16000, v9, v49, "#ContactsDisambiguationStrategy isRequestForDifferentContact returning false");
        OUTLINED_FUNCTION_0();
      }

      OUTLINED_FUNCTION_49_6();
      OUTLINED_FUNCTION_18_11();
      v51 = 0;
      return v51 & 1;
    }
    if (v50)
    {
      *(_WORD *)OUTLINED_FUNCTION_1() = 0;
      v58 = v49;
      v59 = "#ContactsDisambiguationStrategy isRequestForDifferentContact returning true";
      v60 = v9;
      goto LABEL_53;
    }
    goto LABEL_54;
  }
  v52 = Logger.logObject.getter();
  v53 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v52, v53))
  {
    *(_WORD *)OUTLINED_FUNCTION_1() = 0;
    OUTLINED_FUNCTION_83_2(&dword_21FE16000, v52, v53, "#ContactsDisambiguationStrategy isRequestForDifferentContact no contact IDs found in response parse");
    OUTLINED_FUNCTION_0();
  }

  if (!a4)
  {
    Logger.logObject.getter();
    v61 = OUTLINED_FUNCTION_54_2();
    if (OUTLINED_FUNCTION_30_3(v61))
    {
      v62 = (_WORD *)OUTLINED_FUNCTION_1();
      OUTLINED_FUNCTION_54_0(v62);
      v59 = "#ContactsDisambiguationStrategy isRequestForDifferentContact no current relationship from intent, returning true";
      v60 = v9;
      v58 = v31;
LABEL_53:
      OUTLINED_FUNCTION_15_5(&dword_21FE16000, v60, v58, v59);
      OUTLINED_FUNCTION_0();
    }
LABEL_54:

    OUTLINED_FUNCTION_49_6();
    OUTLINED_FUNCTION_18_11();
    v51 = 1;
    return v51 & 1;
  }
  v54 = String.lowercased()();
  if (v85)
  {
    v55 = String.lowercased()();
    if (v54._countAndFlagsBits == v55._countAndFlagsBits && v54._object == v55._object)
      v57 = 1;
    else
      v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v63 = v75;
    swift_bridgeObjectRelease();
  }
  else
  {
    v57 = 0;
    v63 = v75;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(NSObject *, uint64_t, uint64_t))(v6 + 16))(v63, v31, v5);
  OUTLINED_FUNCTION_29();
  Logger.logObject.getter();
  v64 = OUTLINED_FUNCTION_8();
  if (os_log_type_enabled(v63, v64))
  {
    v65 = OUTLINED_FUNCTION_1();
    v81 = OUTLINED_FUNCTION_1();
    *(_DWORD *)v65 = 136315906;
    v77 = v57;
    OUTLINED_FUNCTION_23();
    v79 = v84;
    v80 = v85;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    v66 = OUTLINED_FUNCTION_72_3();
    v79 = OUTLINED_FUNCTION_71_5(v66, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_55_1();
    *(_WORD *)(v65 + 12) = 2080;
    if ((v57 & 1) != 0)
      v68 = 0x6465686374616DLL;
    else
      v68 = 0x20746F6E20646964;
    if ((v57 & 1) != 0)
      v69 = 0xE700000000000000;
    else
      v69 = 0xED0000686374616DLL;
    if ((v77 & 1) != 0)
      v70 = 0x6E6F6320656D6173;
    else
      v70 = 0xD000000000000011;
    if ((v77 & 1) != 0)
      v71 = 0xEC00000074636174;
    else
      v71 = 0x800000021FEE14D0;
    v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v69, &v81);
    OUTLINED_FUNCTION_70_6();
    OUTLINED_FUNCTION_5_0();
    *(_WORD *)(v65 + 22) = 2080;
    v79 = a3;
    v80 = a4;
    swift_bridgeObjectRetain();
    v72 = OUTLINED_FUNCTION_72_3();
    v79 = OUTLINED_FUNCTION_71_5(v72, v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_55_1();
    *(_WORD *)(v65 + 32) = 2080;
    v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v71, &v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_48();
    _os_log_impl(&dword_21FE16000, v63, v64, "#ContactsDisambiguationStrategy isRequestForDifferentContact identifiyingRelationship from parse \"%s\" %s the current \"%s\", so %s.", (uint8_t *)v65, 0x2Au);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0();
  }

  OUTLINED_FUNCTION_30();
  (*(void (**)(NSObject *, uint64_t))(v6 + 8))(v63, v5);
  OUTLINED_FUNCTION_49_6();
  OUTLINED_FUNCTION_18_11();
  v51 = v57 ^ 1;
  return v51 & 1;
}

void ContactsDisambiguationStrategy.actionForInput(_:resolveRecord:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  _WORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void *v38;
  int v39;
  uint64_t v40;
  os_log_type_t v41;
  _WORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t v46;
  _WORD *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  void *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  os_log_type_t v56;
  _WORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  os_log_type_t v63;
  _WORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;

  v72 = a2;
  v76 = a3;
  v74 = *v3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_55_0();
  v8 = v7 - v6;
  v73 = type metadata accessor for ConfirmationResponse();
  v71 = *(_QWORD *)(v73 - 8);
  MEMORY[0x24BDAC7A8](v73);
  OUTLINED_FUNCTION_5_2();
  v69 = v9;
  MEMORY[0x24BDAC7A8](v10);
  v70 = (char *)&v67 - v11;
  v12 = type metadata accessor for Parse();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v67 - v17;
  v19 = type metadata accessor for USOParse();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_5_2();
  v68 = v21;
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)&v67 - v23;
  v75 = a1;
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v13 + 88))(v18, v12) != *MEMORY[0x24BE98E98])
  {
    OUTLINED_FUNCTION_61_4(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
    v32 = v74;
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_61_4(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 96));
  v67 = v20;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v24, v18, v19);
  v25 = v24;
  v26 = v19;
  if ((USOParse.isOrdinalDisambiguation.getter() & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v27 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v27, (uint64_t)static Logger.siriContacts);
    v28 = OUTLINED_FUNCTION_54_2();
    if (OUTLINED_FUNCTION_30_3(v28))
    {
      v29 = (_WORD *)OUTLINED_FUNCTION_1();
      OUTLINED_FUNCTION_54_0(v29);
      OUTLINED_FUNCTION_2_5(&dword_21FE16000, v30, v31, "#ContactsDisambiguationStrategy actionForInput ordinal disambiguation, returning .handle()");
      OUTLINED_FUNCTION_0();
    }

    OUTLINED_FUNCTION_80_3();
LABEL_18:
    (*(void (**)(char *, uint64_t))(v67 + 8))(v25, v19);
    return;
  }
  Input.parse.getter();
  Parse.confirmationResponse.getter();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v33 = v73;
  if (__swift_getEnumTagSinglePayload(v8, 1, v73) == 1)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v8, &demangling cache variable for type metadata for ConfirmationResponse?);
    v34 = (uint64_t)v25;
    v35 = v67;
  }
  else
  {
    v37 = v70;
    v36 = v71;
    (*(void (**)(char *, uint64_t, uint64_t))(v71 + 32))(v70, v8, v33);
    v38 = v69;
    (*(void (**)(void *, char *, uint64_t))(v36 + 16))(v69, v37, v33);
    v39 = (*(uint64_t (**)(void *, uint64_t))(v36 + 88))(v38, v33);
    if (v39 == *MEMORY[0x24BE98400])
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v40 = OUTLINED_FUNCTION_26();
      OUTLINED_FUNCTION_10_1(v40, (uint64_t)static Logger.siriContacts);
      v41 = OUTLINED_FUNCTION_54_2();
      if (OUTLINED_FUNCTION_30_3(v41))
      {
        v42 = (_WORD *)OUTLINED_FUNCTION_1();
        OUTLINED_FUNCTION_54_0(v42);
        OUTLINED_FUNCTION_2_5(&dword_21FE16000, v43, v44, "#ContactsDisambiguationStrategy actionForInput user accepted, returning .handle()");
        OUTLINED_FUNCTION_0();
      }

      OUTLINED_FUNCTION_80_3();
      OUTLINED_FUNCTION_52_5();
      goto LABEL_18;
    }
    v34 = (uint64_t)v25;
    v35 = v67;
    if (v39 == *MEMORY[0x24BE983F8])
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v45 = OUTLINED_FUNCTION_26();
      OUTLINED_FUNCTION_10_1(v45, (uint64_t)static Logger.siriContacts);
      v46 = OUTLINED_FUNCTION_54_2();
      if (OUTLINED_FUNCTION_30_3(v46))
      {
        v47 = (_WORD *)OUTLINED_FUNCTION_1();
        OUTLINED_FUNCTION_54_0(v47);
        OUTLINED_FUNCTION_2_5(&dword_21FE16000, v48, v49, "#ContactsDisambiguationStrategy actionForInput user rejected, returning .cancel()");
        OUTLINED_FUNCTION_0();
      }

      static ActionForInput.cancel()();
      OUTLINED_FUNCTION_52_5();
      goto LABEL_32;
    }
    v50 = *(void (**)(char *, uint64_t))(v36 + 8);
    v50(v37, v33);
    v50((char *)v38, v33);
  }
  v32 = v74;
  v51 = (void *)static ContactsDisambiguationStrategy.extractCurrentContext(from:)();
  v54 = static ContactsDisambiguationStrategy.isRequestForDifferentContact(_:currentContactIds:currentRelation:)(v34, (uint64_t)v51, v52, v53);
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_5();
  if ((v54 & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v55 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v55, (uint64_t)static Logger.siriContacts);
    v56 = OUTLINED_FUNCTION_54_2();
    if (OUTLINED_FUNCTION_30_3(v56))
    {
      v57 = (_WORD *)OUTLINED_FUNCTION_1();
      OUTLINED_FUNCTION_54_0(v57);
      OUTLINED_FUNCTION_2_5(&dword_21FE16000, v58, v59, "#ContactsDisambiguationStrategy actionForInput encountered parse for different contact, ignoring");
      OUTLINED_FUNCTION_0();
    }

    static ActionForInput.ignore()();
LABEL_32:
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v26);
    return;
  }
  v60 = USOParse.isOrdinalDisambiguation.getter();
  v61 = v68;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v68, v34, v26);
  if ((v60 & 1) == 0)
  {
    v60 = USOParse.isContactDisambiguation.getter();
    OUTLINED_FUNCTION_49_8(v61);
    if ((v60 & 1) != 0)
      goto LABEL_36;
    OUTLINED_FUNCTION_49_8(v34);
LABEL_9:
    static StrategyUtil.getActionForInput<A>(input:intentType:)(*(void **)(v32 + 224), v76);
    return;
  }
  OUTLINED_FUNCTION_49_8(v61);
LABEL_36:
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v62 = OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_10_1(v62, (uint64_t)static Logger.siriContacts);
  v63 = OUTLINED_FUNCTION_54_2();
  if (OUTLINED_FUNCTION_30_3(v63))
  {
    v64 = (_WORD *)OUTLINED_FUNCTION_1();
    OUTLINED_FUNCTION_54_0(v64);
    OUTLINED_FUNCTION_2_5(&dword_21FE16000, v65, v66, "#ContactsDisambiguationStrategy actionForInput returning .handle()");
    OUTLINED_FUNCTION_0();
  }

  OUTLINED_FUNCTION_80_3();
  OUTLINED_FUNCTION_49_8(v34);
}

uint64_t ContactsDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[6] = a1;
  v2[7] = *(_QWORD *)(*(_QWORD *)v1 + 224);
  v3 = type metadata accessor for ParameterResolutionRecord();
  v2[8] = v3;
  v2[9] = *(_QWORD *)(v3 - 8);
  v2[10] = OUTLINED_FUNCTION_0_0();
  v2[11] = OUTLINED_FUNCTION_78_3();
  v2[12] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ContactsDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;

  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = (id)static Signpost.contactsLog;
  OUTLINED_FUNCTION_68_7();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_53_0();
  v4 = v1 + *(int *)(v2 + 20);
  *(_QWORD *)v4 = "MakeDisambiguationItemContainer";
  *(_QWORD *)(v4 + 8) = 31;
  *(_BYTE *)(v4 + 16) = 2;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v5 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 64);
  v9 = OUTLINED_FUNCTION_26();
  v10 = __swift_project_value_buffer(v9, (uint64_t)static Logger.siriContacts);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v5, v8);
  v57 = v10;
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v56 = *(_QWORD *)(v0 + 72);
    v13 = swift_slowAlloc();
    v55 = (_QWORD *)OUTLINED_FUNCTION_1();
    v58 = OUTLINED_FUNCTION_1();
    *(_DWORD *)v13 = 136315394;
    v14 = OUTLINED_FUNCTION_24_14();
    *(_QWORD *)(v0 + 32) = OUTLINED_FUNCTION_23_12(v14, v15, v16, v17, v18, v19, v20, v21);
    OUTLINED_FUNCTION_64_4();
    OUTLINED_FUNCTION_55_1();
    *(_WORD *)(v13 + 12) = 2112;
    v22 = ParameterResolutionRecord.result.getter();
    *(_QWORD *)(v0 + 40) = v22;
    OUTLINED_FUNCTION_70_6();
    *v55 = v22;
    OUTLINED_FUNCTION_56_4(v56);
    OUTLINED_FUNCTION_33_6(&dword_21FE16000, v11, v12, "#ContactsDisambiguationStrategy<%s> Intent resolution result: %@", (uint8_t *)v13);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }
  OUTLINED_FUNCTION_56_4(*(_QWORD *)(v0 + 72));

  v23 = (void *)ParameterResolutionRecord.result.getter();
  v24 = specialized INIntentResolutionResult.typedDisambiguationItems<A>()();

  if (v24 >> 62)
  {
    OUTLINED_FUNCTION_25_16();
    result = _CocoaArrayWrapper.endIndex.getter();
    v25 = result;
    if (!result)
      goto LABEL_22;
  }
  else
  {
    v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = OUTLINED_FUNCTION_25_16();
    if (!v25)
      goto LABEL_22;
  }
  if (v25 < 1)
  {
    __break(1u);
    return result;
  }
  v27 = 0;
  v28 = MEMORY[0x24BEE4AF8];
  do
  {
    if ((v24 & 0xC000000000000001) != 0)
      OUTLINED_FUNCTION_62_5();
    v29 = OUTLINED_FUNCTION_53_5(v24 + 8 * v27);
    v30 = outlined bridged method (pb) of @objc INObject.identifier.getter(v29);
    v8 = v31;

    if (v8)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        v35 = OUTLINED_FUNCTION_51_6();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v35, v36, v37, v28);
        v28 = v38;
      }
      v33 = *(_QWORD *)(v28 + 16);
      v32 = *(_QWORD *)(v28 + 24);
      if (v33 >= v32 >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1, v28);
        v28 = v39;
      }
      *(_QWORD *)(v28 + 16) = v33 + 1;
      v34 = v28 + 16 * v33;
      *(_QWORD *)(v34 + 32) = v30;
      *(_QWORD *)(v34 + 40) = v8;
    }
    ++v27;
  }
  while (v25 != v27);
LABEL_22:
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_29();
  Logger.logObject.getter();
  v40 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_3(v40))
  {
    v41 = OUTLINED_FUNCTION_1();
    v58 = OUTLINED_FUNCTION_1();
    *(_DWORD *)v41 = 136315394;
    v42 = OUTLINED_FUNCTION_24_14();
    *(_QWORD *)(v0 + 16) = OUTLINED_FUNCTION_23_12(v42, v43, v44, v45, v46, v47, v48, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_117();
    *(_WORD *)(v41 + 12) = 2080;
    v50 = swift_bridgeObjectRetain();
    v51 = MEMORY[0x2207D7DE4](v50, MEMORY[0x24BEE0D00]);
    v53 = v52;
    OUTLINED_FUNCTION_96();
    *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v53, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_33_6(&dword_21FE16000, v57, (os_log_type_t)v8, "#ContactsDisambiguationStrategy<%s> Contact identifiers retrieved from disambiguation items: %s", (uint8_t *)v41);
    OUTLINED_FUNCTION_47_5();
    OUTLINED_FUNCTION_0();
  }
  OUTLINED_FUNCTION_30();

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BasicDisambiguationItemContainer<String>);
  OUTLINED_FUNCTION_32_0();
  v54 = BasicDisambiguationItemContainer.init(_:_:)();
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_54_6();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v54);
}

uint64_t ContactsDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[21] = a3;
  v5[22] = a4;
  v5[19] = a1;
  v5[20] = a2;
  v6 = *v4;
  v5[23] = *v4;
  v5[24] = *(_QWORD *)(v6 + 224);
  v7 = type metadata accessor for IntentPromptAnswer();
  v5[25] = v7;
  v5[26] = *(_QWORD *)(v7 - 8);
  v5[27] = OUTLINED_FUNCTION_25_0();
  v5[28] = OUTLINED_FUNCTION_25_0();
  v8 = type metadata accessor for Parse.DirectInvocation();
  v5[29] = v8;
  v5[30] = *(_QWORD *)(v8 - 8);
  v5[31] = OUTLINED_FUNCTION_0_0();
  v9 = type metadata accessor for Parse();
  v5[32] = v9;
  v5[33] = *(_QWORD *)(v9 - 8);
  v5[34] = OUTLINED_FUNCTION_25_0();
  v5[35] = OUTLINED_FUNCTION_25_0();
  v5[36] = OUTLINED_FUNCTION_25_0();
  v5[37] = OUTLINED_FUNCTION_78_3();
  v5[38] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ContactsDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)()
{
  NSObject *v0;
  Class v1;
  Class isa;
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Class v17;
  Class v18;
  Class v19;
  Class v20;
  Class v21;
  Class v22;
  Class v23;
  Class v24;
  Class v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  Class v29;
  Class v30;
  Class v31;
  Class v32;
  uint64_t v33;
  uint64_t v34;
  objc_class *v35;
  uint64_t v36;
  void (*v37)(Class, Class);
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  Class v41;
  Class v42;
  Class v43;
  Class v44;
  Class v45;
  uint64_t v46;
  uint64_t (*v47)(void);
  uint64_t v48;
  void *v49;
  Swift::String v50;
  objc_class *v51;
  Class v52;
  Class v53;
  void *v54;
  void *v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  id v63;
  Class v64;
  Class v65;
  Class v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  unint64_t v70;
  uint64_t v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  NSObject *v100;
  Class v101;
  uint64_t v102;
  Class v103;
  Class v104;
  Class v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;

  if (one-time initialization token for contactsLog != -1)
    swift_once();
  isa = v0[37].isa;
  v1 = v0[38].isa;
  v3 = (id)static Signpost.contactsLog;
  OUTLINED_FUNCTION_68_7();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_53_0();
  v4 = (uint64_t)v1 + *((int *)isa + 5);
  *(_QWORD *)v4 = "ParseDisambiguationResult";
  *(_QWORD *)(v4 + 8) = 25;
  *(_BYTE *)(v4 + 16) = 2;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v5 = OUTLINED_FUNCTION_26();
  v6 = __swift_project_value_buffer(v5, (uint64_t)static Logger.siriContacts);
  Logger.logObject.getter();
  v7 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_3(v7))
  {
    v8 = (uint8_t *)OUTLINED_FUNCTION_1();
    *(_QWORD *)&v108 = OUTLINED_FUNCTION_1();
    *(_DWORD *)v8 = 136315138;
    v9 = OUTLINED_FUNCTION_24_14();
    v0[18].isa = (Class)OUTLINED_FUNCTION_23_12(v9, v10, v11, v12, v13, v14, v15, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FE16000, v6, (os_log_type_t)"ParseDisambiguationResult", "#ContactsDisambiguationStrategy<%s> Running parseDisambiguationResult()", v8, 0xCu);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }

  v17 = v0[36].isa;
  v18 = v0[32].isa;
  v19 = v0[33].isa;
  Input.parse.getter();
  if ((*((unsigned int (**)(Class, Class))v19 + 11))(v17, v18) != *MEMORY[0x24BE98E88])
    goto LABEL_22;
  v20 = v0[35].isa;
  v21 = v0[32].isa;
  v22 = v0[33].isa;
  v24 = v0[30].isa;
  v23 = v0[31].isa;
  v25 = v0[29].isa;
  (*((void (**)(Class, Class, Class))v22 + 2))(v20, v0[36].isa, v21);
  (*((void (**)(Class, Class))v22 + 12))(v20, v21);
  (*((void (**)(Class, Class, Class))v24 + 4))(v23, v20, v25);
  if (Parse.DirectInvocation.identifier.getter() == 0xD000000000000025 && v26 == 0x800000021FEDF670)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
  OUTLINED_FUNCTION_5();
  if ((v27 & 1) == 0)
  {
    (*((void (**)(Class, Class))v0[30].isa + 1))(v0[31].isa, v0[29].isa);
LABEL_22:
    Input.parse.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<String>);
    v48 = PaginatedItemContainer.items.getter();
    v50 = Parse.toContactId(existingCandidates:)((Swift::OpaquePointer)v48);
    v37 = (void (*)(Class, Class))v0[33].isa;
    if (v49)
    {
      OUTLINED_FUNCTION_5_0();

      OUTLINED_FUNCTION_59_6();
      v36 = 0;
      v35 = 0;
    }
    else
    {
      OUTLINED_FUNCTION_59_6();
      OUTLINED_FUNCTION_5_0();
      v36 = String.sanitizeContactIdURL.getter(v50._countAndFlagsBits, (unint64_t)v50._object);
      v35 = v51;
      OUTLINED_FUNCTION_5();
    }
LABEL_25:
    v52 = v0[24].isa;
    v37(v0[36].isa, v0[32].isa);
    v107 = v36;
    if (v52 == (Class)type metadata accessor for GetContactIntent()
      || (v53 = v0[24].isa, v53 == (Class)type metadata accessor for GetContactAttributeIntent()))
    {
      OUTLINED_FUNCTION_50_7();
      v54 = (void *)ParameterResolutionRecord.intent.getter();
      if (v35)
      {
        OUTLINED_FUNCTION_50_5();
        v59 = MEMORY[0x2207D7CB8](v36, v35);
        OUTLINED_FUNCTION_18_0();
      }
      else
      {
        v59 = 0;
      }
      v60 = MEMORY[0x2207D7CB8](0xD000000000000011, 0x800000021FEDF9C0);
      objc_msgSend(v54, sel_setValue_forKey_, v59, v60);
      swift_unknownObjectRelease();
    }
    else
    {
      OUTLINED_FUNCTION_50_7();
      v54 = (void *)ParameterResolutionRecord.intent.getter();
      type metadata accessor for ModifyContactAttributeIntent();
      v55 = (void *)swift_dynamicCastClass();
      if (!v55)
        goto LABEL_38;
      v56 = objc_msgSend(v55, sel_relatedContact);
      if (!v56)
        goto LABEL_38;
      v57 = v56;
      if (v35)
      {
        OUTLINED_FUNCTION_50_5();
        v58 = MEMORY[0x2207D7CB8](v36, v35);
        OUTLINED_FUNCTION_18_0();
      }
      else
      {
        v58 = 0;
      }
      v61 = (void *)MEMORY[0x2207D7CB8](0x696669746E656469, 0xEA00000000007265);
      objc_msgSend(v57, sel_setValue_forKey_, v58, v61);

      swift_unknownObjectRelease();
      v62 = (void *)ParameterResolutionRecord.intent.getter();
      v63 = v57;
      v60 = MEMORY[0x2207D7CB8](0x43646574616C6572, 0xEE00746361746E6FLL);
      objc_msgSend(v62, sel_setValue_forKey_, v63, v60);

    }
    v54 = (void *)v60;
LABEL_38:
    v65 = v0[23].isa;
    v64 = v0[24].isa;
    v66 = v0[22].isa;

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<String>);
    v0[17].isa = (Class)PaginatedItemContainer.items.getter();
    v67 = swift_task_alloc();
    *(_QWORD *)(v67 + 16) = v64;
    *(_OWORD *)(v67 + 24) = *(_OWORD *)((char *)v65 + 232);
    *(_QWORD *)(v67 + 40) = *((_QWORD *)v65 + 31);
    *(_QWORD *)(v67 + 48) = v66;
    v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    MEMORY[0x2207D86A8](MEMORY[0x24BEE12C8], v68);
    v69 = v0 + 17;
    Sequence.first(where:)();
    OUTLINED_FUNCTION_21_0();
    swift_bridgeObjectRelease();
    v70 = (unint64_t)v0[7].isa;
    if (v70)
    {
      v71 = (uint64_t)v0[6].isa;
      OUTLINED_FUNCTION_18_0();
      OUTLINED_FUNCTION_29();
      OUTLINED_FUNCTION_84_2();
      v72 = OUTLINED_FUNCTION_8();
      if (os_log_type_enabled(v0 + 17, v72))
      {
        v73 = OUTLINED_FUNCTION_1();
        *(_QWORD *)&v108 = OUTLINED_FUNCTION_1();
        *(_DWORD *)v73 = 136315394;
        v74 = OUTLINED_FUNCTION_24_14();
        v0[13].isa = (Class)OUTLINED_FUNCTION_23_12(v74, v75, v76, v77, v78, v79, v80, v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_117();
        *(_WORD *)(v73 + 12) = 2080;
        swift_bridgeObjectRetain();
        v0[14].isa = (Class)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v70, (uint64_t *)&v108);
        OUTLINED_FUNCTION_64_4();
        swift_bridgeObjectRelease_n();
        OUTLINED_FUNCTION_33_6(&dword_21FE16000, v0 + 17, v72, "#ContactsDisambiguationStrategy<%s> Returning user-selected contact: %s.", (uint8_t *)v73);
        OUTLINED_FUNCTION_47_5();
        OUTLINED_FUNCTION_0();
      }
      OUTLINED_FUNCTION_30();

      v100 = v0 + 28;
      *((_QWORD *)&v109 + 1) = MEMORY[0x24BEE0D00];
      *(_QWORD *)&v108 = v71;
      *((_QWORD *)&v108 + 1) = v70;
      OUTLINED_FUNCTION_79_3();
      ParameterResolutionRecord.intent.getter();
    }
    else
    {
      OUTLINED_FUNCTION_29();
      OUTLINED_FUNCTION_84_2();
      v82 = OUTLINED_FUNCTION_8();
      if (os_log_type_enabled(v0 + 17, (os_log_type_t)v82))
      {
        v83 = OUTLINED_FUNCTION_1();
        *(_QWORD *)&v108 = OUTLINED_FUNCTION_1();
        *(_DWORD *)v83 = 136315394;
        v84 = OUTLINED_FUNCTION_24_14();
        v0[15].isa = (Class)OUTLINED_FUNCTION_23_12(v84, v85, v86, v87, v88, v89, v90, v91);
        OUTLINED_FUNCTION_64_4();
        swift_bridgeObjectRelease();
        *(_WORD *)(v83 + 12) = 2080;
        v0[10].isa = (Class)v107;
        v0[11].isa = v35;
        OUTLINED_FUNCTION_50_5();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        v92 = String.init<A>(describing:)();
        v0[12].isa = (Class)OUTLINED_FUNCTION_23_12(v92, v93, v94, v95, v96, v97, v98, v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_117();
        OUTLINED_FUNCTION_30();
        OUTLINED_FUNCTION_33_6(&dword_21FE16000, v0 + 17, (os_log_type_t)v82, "#ContactsDisambiguationStrategy<%s> Returning contact selected from contact picker: %s.", (uint8_t *)v83);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_0();
      }
      OUTLINED_FUNCTION_30();

      if (v35)
      {
        *((_QWORD *)&v109 + 1) = MEMORY[0x24BEE0D00];
        *(_QWORD *)&v108 = v107;
        *((_QWORD *)&v108 + 1) = v35;
      }
      else
      {
        v108 = 0u;
        v109 = 0u;
      }
      v100 = v0 + 27;
      type metadata accessor for ParameterResolutionRecord();
      ParameterResolutionRecord.intent.getter();
    }
    IntentPromptAnswer.init(answeredValue:updatedIntent:)();
    v101 = v100->isa;
    v102 = (uint64_t)v0[38].isa;
    v104 = v0[25].isa;
    v103 = v0[26].isa;
    static DisambiguationResult.chosenItem(_:)();
    (*((void (**)(Class, Class))v103 + 1))(v101, v104);
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost(v102);
    OUTLINED_FUNCTION_45_0();
    OUTLINED_FUNCTION_17_0();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_21_0();
    swift_task_dealloc();
    v47 = (uint64_t (*)(void))v0[1].isa;
    return v47();
  }
LABEL_12:
  v28 = Parse.DirectInvocation.userData.getter();
  if (!v28)
  {
    *(_OWORD *)&v0[2].isa = 0u;
    *(_OWORD *)&v0[4].isa = 0u;
    goto LABEL_17;
  }
  specialized Dictionary.subscript.getter(0x7865646E69, 0xE500000000000000, v28, &v0[2]);
  OUTLINED_FUNCTION_5();
  if (!v0[5].isa)
  {
LABEL_17:
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)&v0[2], &demangling cache variable for type metadata for Any?);
    goto LABEL_18;
  }
  if ((swift_dynamicCast() & 1) != 0)
  {
    v29 = v0[33].isa;
    v31 = v0[30].isa;
    v30 = v0[31].isa;
    v32 = v0[29].isa;
    v33 = (uint64_t)v0[16].isa;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<String>);
    v34 = PaginatedItemContainer.items.getter();
    Array.subscript.getter(v33, v34, MEMORY[0x24BEE0D00], (uint64_t)&v0[8]);
    OUTLINED_FUNCTION_5();
    (*((void (**)(Class, Class))v31 + 1))(v30, v32);
    v36 = (uint64_t)v0[8].isa;
    v35 = v0[9].isa;
    v37 = (void (*)(Class, Class))*((_QWORD *)v29 + 1);
    goto LABEL_25;
  }
LABEL_18:
  v38 = OUTLINED_FUNCTION_84_2();
  v39 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v38, v39))
  {
    *(_WORD *)OUTLINED_FUNCTION_1() = 0;
    OUTLINED_FUNCTION_83_2(&dword_21FE16000, v38, v39, "Could not find index in userData");
    OUTLINED_FUNCTION_0();
  }
  v40 = (uint64_t)v0[38].isa;
  v41 = v0[36].isa;
  v42 = v0[33].isa;
  v43 = v0[31].isa;
  v106 = v0[32].isa;
  v44 = v0[29].isa;
  v45 = v0[30].isa;

  type metadata accessor for ContactsError();
  lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
  swift_allocError();
  (*((void (**)(uint64_t, Class, Class))v45 + 2))(v46, v43, v44);
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  (*((void (**)(Class, Class))v45 + 1))(v43, v44);
  (*((void (**)(Class, Class))v42 + 1))(v41, v106);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v40);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_45_0();
  swift_task_dealloc();
  swift_task_dealloc();
  v47 = (uint64_t (*)(void))v0[1].isa;
  return v47();
}

uint64_t closure #1 in ContactsDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;

  v8 = *a1;
  v7 = a1[1];
  type metadata accessor for ParameterResolutionRecord();
  swift_bridgeObjectRetain();
  v9 = (void *)ParameterResolutionRecord.intent.getter();
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 32))(a3, a5);
  v12 = v11;

  if (v12)
  {
    if (v8 == v10 && v12 == v7)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v14 & 1;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t closure #1 in ContactsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v5 = *a1;
  v6 = a1[1];
  v7 = a2[10];
  v8 = a2[11];
  __swift_project_boxed_opaque_existential_1(a2 + 7, v7);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8))(v5, v6, v7, v8);
  if (v3)
  {

    result = 0;
  }
  *a3 = result;
  return result;
}

uint64_t closure #3 in ContactsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v4 = type metadata accessor for ResponseType();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  OutputGenerationManifest.canUseServerTTS.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  static ContactsContextProvider.disambiguate(contacts:)(a3, (uint64_t)v10);
  v11 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v11);
  OutputGenerationManifest.nlContextUpdate.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x24BE97960], v4);
  return OutputGenerationManifest.responseType.setter();
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int *v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  Swift::Int v9;
  uint64_t v10;

  v2 = Set.init(minimumCapacity:)();
  v10 = v2;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = (Swift::Int *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v9, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v10;
  }
  else
  {
    v7 = v2;
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t ContactsDisambiguationStrategy.__deallocating_deinit()
{
  ContactsStrategy.deinit();
  OUTLINED_FUNCTION_69_7();
  return swift_deallocClassInstance();
}

void type metadata accessor for ContactsDisambiguationStrategy()
{
  JUMPOUT(0x2207D8654);
}

void protocol witness for NeedsDisambiguationFlowStrategyAsync.paginationStyle(resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>()
{
  type metadata accessor for ContactsDisambiguationStrategy();
}

uint64_t sub_21FE54B3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return MEMORY[0x2207D5B70](v2, a1, v1);
}

void protocol witness for NeedsDisambiguationFlowStrategyAsync.actionForInput(_:resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  ContactsDisambiguationStrategy.actionForInput(_:resolveRecord:)(a1, a2, a3);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeDisambiguationItemContainer(resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeDisambiguationItemContainer(resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>;
  return ContactsDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:)(a2);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeDisambiguationItemContainer(resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.parseDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.parseDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>;
  return ContactsDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(a1, a2, a3, a4);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makePromptForDisambiguation(paginatedItems:resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makePromptForDisambiguation(paginatedItems:resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>;
  return ContactsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(a1, a2);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makePromptForDisambiguation(paginatedItems:resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>()
{
  uint64_t v0;

  OUTLINED_FUNCTION_3_0();
  return OUTLINED_FUNCTION_3_2(*(uint64_t (**)(void))(v0 + 8));
}

void protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v6;

  *(_QWORD *)(v4 + 48) = swift_task_alloc();
  v6 = *(_OWORD *)(a4 + 240);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a4 + 224);
  *(_OWORD *)(v4 + 32) = v6;
  type metadata accessor for ContactsDisambiguationStrategy();
}

uint64_t sub_21FE54DAC()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  v1[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>;
  return NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:)();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>()
{
  uint64_t v0;

  OUTLINED_FUNCTION_3_0();
  return OUTLINED_FUNCTION_3_2(*(uint64_t (**)(void))(v0 + 8));
}

void protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v6;

  *(_QWORD *)(v4 + 48) = swift_task_alloc();
  v6 = *(_OWORD *)(a4 + 240);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a4 + 224);
  *(_OWORD *)(v4 + 32) = v6;
  type metadata accessor for ContactsDisambiguationStrategy();
}

uint64_t sub_21FE54E84()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  v1[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>;
  return NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:)();
}

void protocol witness for NeedsDisambiguationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v5;

  *(_QWORD *)(v3 + 48) = swift_task_alloc();
  v5 = *(_OWORD *)(a3 + 240);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(a3 + 224);
  *(_OWORD *)(v3 + 32) = v5;
  type metadata accessor for ContactsDisambiguationStrategy();
}

uint64_t sub_21FE54F20()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  v1[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>;
  return NeedsDisambiguationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:)();
}

void protocol witness for NeedsDisambiguationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 v5;

  *(_QWORD *)(v3 + 48) = swift_task_alloc();
  v5 = *(_OWORD *)(a3 + 240);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(a3 + 224);
  *(_OWORD *)(v3 + 32) = v5;
  type metadata accessor for ContactsDisambiguationStrategy();
}

uint64_t sub_21FE54FB4()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  v1[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>;
  return NeedsDisambiguationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:)();
}

void protocol witness for NeedsDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription(resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>()
{
  type metadata accessor for ContactsDisambiguationStrategy();
}

uint64_t sub_21FE5501C()
{
  return NeedsDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription(resolveRecord:)();
}

void protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance ContactsDisambiguationStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  __int128 v7;

  *(_QWORD *)(v5 + 48) = swift_task_alloc();
  v7 = *(_OWORD *)(a5 + 240);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(a5 + 224);
  *(_OWORD *)(v5 + 32) = v7;
  type metadata accessor for ContactsDisambiguationStrategy();
}

uint64_t sub_21FE550A8()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  v1[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>;
  return ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)();
}

void protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance ContactsDisambiguationStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  __int128 v8;

  *(_QWORD *)(v6 + 48) = swift_task_alloc();
  v8 = *(_OWORD *)(a6 + 240);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(a6 + 224);
  *(_OWORD *)(v6 + 32) = v8;
  type metadata accessor for ContactsDisambiguationStrategy();
}

uint64_t sub_21FE5515C()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  v1[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>;
  return ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)();
}

uint64_t GetContactDisambiguationStrategy.__deallocating_deinit()
{
  ContactsUnsupportedValueStrategy.deinit();
  OUTLINED_FUNCTION_69_7();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for GetContactDisambiguationStrategy(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for GetContactDisambiguationStrategy);
}

uint64_t type metadata accessor for GCAContactsDisambiguationStrategy(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for GCAContactsDisambiguationStrategy);
}

uint64_t type metadata accessor for ModifyContactAttributeDisambiguationStrategy(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for ModifyContactAttributeDisambiguationStrategy);
}

uint64_t type metadata completion function for GetContactDisambiguationStrategy()
{
  return swift_initClassMetadata2();
}

void base witness table accessor for ParameterResolutionHandlingAsync in ContactsDisambiguationStrategy<A, B>()
{
  JUMPOUT(0x2207D86A8);
}

uint64_t partial apply for closure #1 in ContactsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;

  return closure #1 in ContactsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(a1, v2, a2);
}

uint64_t partial apply for closure #3 in ContactsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1)
{
  uint64_t v1;

  return closure #3 in ContactsDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in ContactsDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(uint64_t *a1)
{
  uint64_t *v1;

  return closure #1 in ContactsDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(a1, v1[6], v1[2], v1[3], v1[4]) & 1;
}

uint64_t specialized _NativeSet.intersection(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD v10[2];

  v3 = isStackAllocationSafe;
  v10[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(_BYTE *)(a2 + 32);
  v5 = (unint64_t)((1 << v4) + 63) >> 6;
  if ((v4 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    v6 = (_QWORD *)((char *)v10 - ((8 * v5 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v5, v6);
    v7 = specialized closure #1 in _NativeSet.intersection(_:)((uint64_t)v6, v5, a2, v3);
    swift_release();
  }
  else
  {
    v8 = (_QWORD *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v5, v8);
    v7 = specialized closure #1 in _NativeSet.intersection(_:)((uint64_t)v8, v5, a2, v3);
    swift_release();
    MEMORY[0x2207D8768](v8, -1, -1);
  }
  return v7;
}

uint64_t specialized closure #1 in _NativeSet.intersection(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t v28;
  unint64_t i;
  unint64_t v30;
  _QWORD *v31;
  BOOL v32;
  BOOL v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  Swift::Int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  BOOL v52;
  uint64_t v53;
  _QWORD *v54;
  BOOL v55;
  unint64_t *v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  int64_t v63;

  v4 = a4;
  v5 = a3;
  v57 = (unint64_t *)result;
  if (*(_QWORD *)(a4 + 16) >= *(_QWORD *)(a3 + 16))
  {
    v34 = 0;
    v60 = a3 + 56;
    v61 = 0;
    v35 = 1 << *(_BYTE *)(a3 + 32);
    if (v35 < 64)
      v36 = ~(-1 << v35);
    else
      v36 = -1;
    v37 = v36 & *(_QWORD *)(a3 + 56);
    v63 = (unint64_t)(v35 + 63) >> 6;
    v38 = a4 + 56;
    while (1)
    {
      while (1)
      {
        if (v37)
        {
          v39 = __clz(__rbit64(v37));
          v37 &= v37 - 1;
          v40 = v39 | (v34 << 6);
        }
        else
        {
          v41 = v34 + 1;
          if (__OFADD__(v34, 1))
          {
LABEL_81:
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
            goto LABEL_84;
          }
          if (v41 >= v63)
            goto LABEL_79;
          v42 = *(_QWORD *)(v60 + 8 * v41);
          ++v34;
          if (!v42)
          {
            v34 = v41 + 1;
            if (v41 + 1 >= v63)
              goto LABEL_79;
            v42 = *(_QWORD *)(v60 + 8 * v34);
            if (!v42)
            {
              v34 = v41 + 2;
              if (v41 + 2 >= v63)
                goto LABEL_79;
              v42 = *(_QWORD *)(v60 + 8 * v34);
              if (!v42)
              {
                v43 = v41 + 3;
                if (v43 >= v63)
                  goto LABEL_79;
                v42 = *(_QWORD *)(v60 + 8 * v43);
                if (!v42)
                {
                  while (1)
                  {
                    v34 = v43 + 1;
                    if (__OFADD__(v43, 1))
                      goto LABEL_85;
                    if (v34 >= v63)
                      break;
                    v42 = *(_QWORD *)(v60 + 8 * v34);
                    ++v43;
                    if (v42)
                      goto LABEL_61;
                  }
LABEL_79:
                  swift_retain();
                  return specialized _NativeSet.extractSubset(using:count:)(v57, a2, v61, v5);
                }
                v34 = v43;
              }
            }
          }
LABEL_61:
          v37 = (v42 - 1) & v42;
          v40 = __clz(__rbit64(v42)) + (v34 << 6);
        }
        v44 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v40);
        v46 = *v44;
        v45 = v44[1];
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v47 = Hasher._finalize()();
        v48 = -1 << *(_BYTE *)(v4 + 32);
        v49 = v47 & ~v48;
        if (((*(_QWORD *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) != 0)
          break;
LABEL_78:
        result = swift_bridgeObjectRelease();
        v5 = a3;
        v4 = a4;
      }
      v50 = *(_QWORD *)(a4 + 48);
      v51 = (_QWORD *)(v50 + 16 * v49);
      v52 = *v51 == v46 && v51[1] == v45;
      if (!v52 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        v53 = ~v48;
        do
        {
          v49 = (v49 + 1) & v53;
          if (((*(_QWORD *)(v38 + ((v49 >> 3) & 0xFFFFFFFFFFFFF8)) >> v49) & 1) == 0)
            goto LABEL_78;
          v54 = (_QWORD *)(v50 + 16 * v49);
          v55 = *v54 == v46 && v54[1] == v45;
        }
        while (!v55 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
      }
      result = swift_bridgeObjectRelease();
      *(unint64_t *)((char *)v57 + ((v40 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v40;
      v33 = __OFADD__(v61++, 1);
      v5 = a3;
      v4 = a4;
      if (v33)
        goto LABEL_83;
    }
  }
  v6 = 0;
  v58 = a4 + 56;
  v7 = 1 << *(_BYTE *)(a4 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  v59 = (unint64_t)(v7 + 63) >> 6;
  v61 = 0;
  v10 = a3 + 56;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v62 = v6;
      v12 = v11 | (v6 << 6);
      goto LABEL_22;
    }
    v13 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_81;
    }
    if (v13 >= v59)
      goto LABEL_79;
    v14 = *(_QWORD *)(v58 + 8 * v13);
    v15 = v6 + 1;
    if (!v14)
    {
      v15 = v6 + 2;
      if (v6 + 2 >= v59)
        goto LABEL_79;
      v14 = *(_QWORD *)(v58 + 8 * v15);
      if (!v14)
      {
        v15 = v6 + 3;
        if (v6 + 3 >= v59)
          goto LABEL_79;
        v14 = *(_QWORD *)(v58 + 8 * v15);
        if (!v14)
          break;
      }
    }
LABEL_21:
    v9 = (v14 - 1) & v14;
    v62 = v15;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
LABEL_22:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    v19 = *v17;
    v18 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v20 = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v5 + 32);
    v22 = v20 & ~v21;
    v23 = v22 >> 6;
    v24 = 1 << v22;
    if (((1 << v22) & *(_QWORD *)(v10 + 8 * (v22 >> 6))) == 0)
      goto LABEL_36;
    v25 = *(_QWORD *)(a3 + 48);
    v26 = (_QWORD *)(v25 + 16 * v22);
    v27 = *v26 == v19 && v26[1] == v18;
    if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
LABEL_38:
      v6 = v62;
      v5 = a3;
      v57[v23] |= v24;
      v33 = __OFADD__(v61++, 1);
      v4 = a4;
      if (v33)
        goto LABEL_82;
    }
    else
    {
      v28 = ~v21;
      for (i = v22 + 1; ; i = v30 + 1)
      {
        v30 = i & v28;
        if (((*(_QWORD *)(v10 + (((i & v28) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v28)) & 1) == 0)
          break;
        v31 = (_QWORD *)(v25 + 16 * v30);
        v32 = *v31 == v19 && v31[1] == v18;
        if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          result = swift_bridgeObjectRelease();
          v23 = v30 >> 6;
          v24 = 1 << v30;
          goto LABEL_38;
        }
      }
LABEL_36:
      result = swift_bridgeObjectRelease();
      v6 = v62;
      v5 = a3;
      v4 = a4;
    }
  }
  v16 = v6 + 4;
  if (v6 + 4 >= v59)
    goto LABEL_79;
  v14 = *(_QWORD *)(v58 + 8 * v16);
  if (v14)
  {
    v15 = v6 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v59)
      goto LABEL_79;
    v14 = *(_QWORD *)(v58 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_21;
  }
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;

  v4 = a4;
  if (!a3)
  {
    v8 = MEMORY[0x24BEE4B08];
LABEL_35:
    swift_release();
    return v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  result = static _SetStorage.allocate(capacity:)();
  v8 = result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_35;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_35;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_35;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) == 0)
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
        if (v27 != -1)
        {
          v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      goto LABEL_38;
    if (!v5)
      goto LABEL_35;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_35;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_35;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_4_17()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[31] + 8))(v0[32], v0[30]);
}

uint64_t OUTLINED_FUNCTION_8_12()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_13_17()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[31] + 8))(v0[32], v0[30]);
}

uint64_t OUTLINED_FUNCTION_18_11()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_22_11()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_23_12(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_24_14()
{
  return _typeName(_:qualified:)();
}

uint64_t OUTLINED_FUNCTION_25_16()
{
  return swift_bridgeObjectRetain();
}

unint64_t OUTLINED_FUNCTION_26_15()
{
  return 0xD00000000000001BLL;
}

void OUTLINED_FUNCTION_33_6(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x16u);
}

unint64_t OUTLINED_FUNCTION_37_8()
{
  return 0xD00000000000001BLL;
}

uint64_t OUTLINED_FUNCTION_47_5()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_49_8(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_50_7()
{
  return type metadata accessor for ParameterResolutionRecord();
}

uint64_t OUTLINED_FUNCTION_51_6()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_52_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

id OUTLINED_FUNCTION_53_5@<X0>(uint64_t a1@<X8>)
{
  return *(id *)(a1 + 32);
}

uint64_t OUTLINED_FUNCTION_54_6()
{
  uint64_t v0;

  return outlined destroy of Signpost.OpenSignpost(v0);
}

uint64_t OUTLINED_FUNCTION_56_4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

uint64_t OUTLINED_FUNCTION_59_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_61_4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

void OUTLINED_FUNCTION_62_5()
{
  JUMPOUT(0x2207D80C0);
}

uint64_t OUTLINED_FUNCTION_64_4()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_65_6()
{
  uint64_t v0;

}

uint64_t OUTLINED_FUNCTION_66_7@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of DeviceState(a1 + 16, v1);
}

uint64_t OUTLINED_FUNCTION_67_5@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of DeviceState(a1 + 16, v1);
}

uint64_t OUTLINED_FUNCTION_68_7()
{
  return OSSignpostID.init(log:)();
}

uint64_t OUTLINED_FUNCTION_70_6()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_71_5(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 152));
}

uint64_t OUTLINED_FUNCTION_72_3()
{
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_73_5()
{
  return dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
}

void OUTLINED_FUNCTION_74_3()
{
  JUMPOUT(0x2207D6D64);
}

uint64_t OUTLINED_FUNCTION_75_3()
{
  return dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
}

uint64_t OUTLINED_FUNCTION_77_4()
{
  return UsoEntity_common_Person.contactIds.getter();
}

uint64_t OUTLINED_FUNCTION_78_3()
{
  return type metadata accessor for Signpost.OpenSignpost();
}

uint64_t OUTLINED_FUNCTION_79_3()
{
  return type metadata accessor for ParameterResolutionRecord();
}

uint64_t OUTLINED_FUNCTION_80_3()
{
  return static ActionForInput.handle()();
}

void OUTLINED_FUNCTION_83_2(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 2u);
}

uint64_t OUTLINED_FUNCTION_84_2()
{
  return Logger.logObject.getter();
}

uint64_t UsoIdentifierNamespace.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_21FE55E7C + 4 * byte_21FED9BF0[a1]))(0xD000000000000012, 0x800000021FEDF7D0);
}

uint64_t sub_21FE55E7C()
{
  return 0x64695F6D657469;
}

uint64_t sub_21FE55E94()
{
  return 0x65746C615F727361;
}

uint64_t sub_21FE55EB8()
{
  return 0x707954656E6F6870;
}

uint64_t sub_21FE55EE4()
{
  return 0x5473736572646461;
}

uint64_t sub_21FE55F34()
{
  return 0x6369746E616D6573;
}

uint64_t UsoIdentifierAppBundle.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000015;
  else
    return 0x73746361746E6F43;
}

uint64_t one-time initialization function for contactsUnlockPolicy()
{
  uint64_t v0;

  v0 = type metadata accessor for UnlockDevicePolicy();
  __swift_allocate_value_buffer(v0, static Constants.contactsUnlockPolicy);
  __swift_project_value_buffer(v0, (uint64_t)static Constants.contactsUnlockPolicy);
  return static UnlockDevicePolicy.requiringDeviceUnlock.getter();
}

uint64_t static Constants.contactsUnlockPolicy.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for contactsUnlockPolicy != -1)
    swift_once();
  v2 = type metadata accessor for UnlockDevicePolicy();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static Constants.contactsUnlockPolicy);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

ValueMetadata *type metadata accessor for Constants()
{
  return &type metadata for Constants;
}

void one-time initialization function for identifier()
{
  OUTLINED_FUNCTION_0_17(&static Constants.identifier);
}

uint64_t static UsoIdentifierNamespace.attributeType(for:)(uint64_t a1, void *a2)
{
  Swift::String v4;
  SiriContactsIntents::UsoIdentifierNamespace_optional v5;

  if (!a2)
    return 0;
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  v5.value = UsoIdentifierNamespace.init(rawValue:)(v4).value;
  if ((v5.value - 3) > 2u)
    return 0;
  else
    return qword_21FED9CF0[v5.value - 3];
}

SiriContactsIntents::UsoIdentifierNamespace_optional __swiftcall UsoIdentifierNamespace.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of UsoIdentifierNamespace.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9)
    return (SiriContactsIntents::UsoIdentifierNamespace_optional)9;
  else
    return (SiriContactsIntents::UsoIdentifierNamespace_optional)v3;
}

uint64_t UsoAttributeName.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000010;
  else
    return 0x6C6562616CLL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance UsoIdentifierNamespace(unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance UsoIdentifierNamespace()
{
  unsigned __int8 *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance UsoIdentifierNamespace(uint64_t a1)
{
  unsigned __int8 *v1;

  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance UsoIdentifierNamespace(uint64_t a1)
{
  unsigned __int8 *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriContactsIntents::UsoIdentifierNamespace_optional protocol witness for RawRepresentable.init(rawValue:) in conformance UsoIdentifierNamespace@<W0>(Swift::String *a1@<X0>, SiriContactsIntents::UsoIdentifierNamespace_optional *a2@<X8>)
{
  SiriContactsIntents::UsoIdentifierNamespace_optional result;

  result.value = UsoIdentifierNamespace.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance UsoIdentifierNamespace@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = UsoIdentifierNamespace.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void one-time initialization function for GivenName()
{
  OUTLINED_FUNCTION_0_17(&static UsoStructuredNameAttribute.GivenName);
}

void one-time initialization function for NickName()
{
  OUTLINED_FUNCTION_0_17(&static UsoStructuredNameAttribute.NickName);
}

void one-time initialization function for FamilyName()
{
  OUTLINED_FUNCTION_0_17(&static UsoStructuredNameAttribute.FamilyName);
}

uint64_t UsoCommonPersonAttribute.rawValue.getter()
{
  return 1701667182;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t getEnumTagSinglePayload for UsoIdentifierNamespace(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF8)
  {
    if (a2 + 8 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 8) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 9;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v5 = v6 - 9;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for UsoIdentifierNamespace(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_21FE5636C + 4 * byte_21FED9BFE[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_21FE563A0 + 4 * byte_21FED9BF9[v4]))();
}

uint64_t sub_21FE563A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE563A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FE563B0);
  return result;
}

uint64_t sub_21FE563BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FE563C4);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_21FE563C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE563D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UsoIdentifierNamespace()
{
  return &type metadata for UsoIdentifierNamespace;
}

unint64_t lazy protocol witness table accessor for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace;
  if (!lazy protocol witness table cache variable for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for UsoIdentifierNamespace, &type metadata for UsoIdentifierNamespace);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifierNamespace and conformance UsoIdentifierNamespace);
  }
  return result;
}

void OUTLINED_FUNCTION_0_17(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v1;
  a1[1] = v2;
}

uint64_t ContactsBirthdayInfo.Builder.withBirthday(_:)(uint64_t a1)
{
  uint64_t v1;

  if (a1)
    a1 = MEMORY[0x2207D767C]();
  *(_QWORD *)(v1 + 16) = a1;
  swift_release();
  return swift_retain();
}

uint64_t ContactsBirthdayInfo.Builder.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtCC19SiriContactsIntents20ContactsBirthdayInfo7Builder_durationUntilBirthday);
  OUTLINED_FUNCTION_6_17();
  return swift_deallocClassInstance();
}

unint64_t static ContactsBirthdayInfo.catTypeName.getter()
{
  return 0xD000000000000015;
}

uint64_t static ContactsBirthdayInfo.isDialogType.getter()
{
  return 0;
}

uint64_t ContactsBirthdayInfo.init(builder:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_15();
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = *(_QWORD *)(a1 + 16);
  outlined init with copy of SpeakableString?(a1 + OBJC_IVAR____TtCC19SiriContactsIntents20ContactsBirthdayInfo7Builder_durationUntilBirthday, v2);
  swift_retain();
  swift_release();
  outlined init with take of SpeakableString?(v2, v1 + OBJC_IVAR____TtC19SiriContactsIntents20ContactsBirthdayInfo_durationUntilBirthday);
  return v1;
}

void ContactsBirthdayInfo.getProperty(_:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *boxed_opaque_existential_1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_15();
  v9 = a1 == 0x7961646874726962 && a2 == 0xE800000000000000;
  if (v9 || (OUTLINED_FUNCTION_2_19() & 1) != 0)
  {
    v10 = *(_QWORD *)(v3 + 24);
    if (v10)
    {
      *(_QWORD *)(a3 + 24) = type metadata accessor for DialogCalendar();
      *(_QWORD *)a3 = v10;
      swift_retain();
      return;
    }
    goto LABEL_13;
  }
  if ((a1 != 0xD000000000000015 || a2 != 0x800000021FEDFAE0) && (OUTLINED_FUNCTION_2_19() & 1) == 0)
  {
LABEL_13:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return;
  }
  outlined init with copy of SpeakableString?(v3 + OBJC_IVAR____TtC19SiriContactsIntents20ContactsBirthdayInfo_durationUntilBirthday, v4);
  v11 = type metadata accessor for SpeakableString();
  if (__swift_getEnumTagSinglePayload(v4, 1, v11) == 1)
  {
    outlined destroy of SpeakableString?(v4);
    goto LABEL_13;
  }
  *(_QWORD *)(a3 + 24) = v11;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a3);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(boxed_opaque_existential_1, v4, v11);
}

SiriContactsIntents::ContactsBirthdayInfo::CodingKeys_optional __swiftcall ContactsBirthdayInfo.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  SiriContactsIntents::ContactsBirthdayInfo::CodingKeys_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ContactsBirthdayInfo.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1)
    v4.value = SiriContactsIntents_ContactsBirthdayInfo_CodingKeys_durationUntilBirthday;
  else
    v4.value = SiriContactsIntents_ContactsBirthdayInfo_CodingKeys_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

SiriContactsIntents::ContactsBirthdayInfo::CodingKeys_optional __swiftcall ContactsBirthdayInfo.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (SiriContactsIntents::ContactsBirthdayInfo::CodingKeys_optional)2;
}

uint64_t ContactsBirthdayInfo.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t ContactsBirthdayInfo.CodingKeys.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000015;
  else
    return 0x7961646874726962;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ContactsBirthdayInfo.CodingKeys(char *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance ContactsBirthdayInfo.CodingKeys()
{
  specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactsBirthdayInfo.CodingKeys()
{
  return specialized RawRepresentable<>.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ContactsBirthdayInfo.CodingKeys()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriContactsIntents::ContactsBirthdayInfo::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactsBirthdayInfo.CodingKeys@<W0>(Swift::String *a1@<X0>, SiriContactsIntents::ContactsBirthdayInfo::CodingKeys_optional *a2@<X8>)
{
  SiriContactsIntents::ContactsBirthdayInfo::CodingKeys_optional result;

  result.value = ContactsBirthdayInfo.CodingKeys.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ContactsBirthdayInfo.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = ContactsBirthdayInfo.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ContactsBirthdayInfo.CodingKeys()
{
  char *v0;

  return ContactsBirthdayInfo.CodingKeys.rawValue.getter(*v0);
}

SiriContactsIntents::ContactsBirthdayInfo::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance ContactsBirthdayInfo.CodingKeys@<W0>(uint64_t a1@<X0>, SiriContactsIntents::ContactsBirthdayInfo::CodingKeys_optional *a2@<X8>)
{
  SiriContactsIntents::ContactsBirthdayInfo::CodingKeys_optional result;

  result.value = ContactsBirthdayInfo.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ContactsBirthdayInfo.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ContactsBirthdayInfo.CodingKeys()
{
  lazy protocol witness table accessor for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ContactsBirthdayInfo.CodingKeys()
{
  lazy protocol witness table accessor for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ContactsBirthdayInfo.deinit()
{
  uint64_t v0;

  swift_release();
  outlined destroy of SpeakableString?(v0 + OBJC_IVAR____TtC19SiriContactsIntents20ContactsBirthdayInfo_durationUntilBirthday);
  return v0;
}

uint64_t ContactsBirthdayInfo.__deallocating_deinit()
{
  ContactsBirthdayInfo.deinit();
  OUTLINED_FUNCTION_6_17();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for ContactsBirthdayInfo()
{
  return type metadata accessor for ContactsBirthdayInfo(0);
}

uint64_t type metadata accessor for ContactsBirthdayInfo(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for ContactsBirthdayInfo);
}

void type metadata completion function for ContactsBirthdayInfo()
{
  unint64_t v0;

  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t ContactsBirthdayInfo.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ContactsBirthdayInfo.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_55_0();
  v7 = v6 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for DialogCalendar();
  lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type DialogCalendar and conformance DialogCalendar, (uint64_t (*)(uint64_t))MEMORY[0x24BE92690], MEMORY[0x24BE926A0]);
  OUTLINED_FUNCTION_7_15();
  if (!v1)
  {
    type metadata accessor for SpeakableString();
    lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, (uint64_t (*)(uint64_t))MEMORY[0x24BE929C8], MEMORY[0x24BE929D8]);
    OUTLINED_FUNCTION_7_15();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t ContactsBirthdayInfo.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  ContactsBirthdayInfo.init(from:)(a1);
  return v2;
}

void type metadata accessor for SpeakableString?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for SpeakableString?)
  {
    type metadata accessor for SpeakableString();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SpeakableString?);
  }
}

uint64_t ObjC metadata update function for ContactsBirthdayInfo.Builder()
{
  return type metadata accessor for ContactsBirthdayInfo.Builder(0);
}

uint64_t type metadata accessor for ContactsBirthdayInfo.Builder(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for ContactsBirthdayInfo.Builder);
}

void type metadata completion function for ContactsBirthdayInfo.Builder()
{
  unint64_t v0;

  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t ContactsBirthdayInfo.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_55_0();
  v7 = v6 - v5;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ContactsBirthdayInfo.CodingKeys>);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_55_0();
  *(_QWORD *)(v1 + 16) = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {

    type metadata accessor for ContactsBirthdayInfo(0);
    swift_deallocPartialClassInstance();
  }
  else
  {
    type metadata accessor for DialogCalendar();
    lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type DialogCalendar and conformance DialogCalendar, (uint64_t (*)(uint64_t))MEMORY[0x24BE92690], MEMORY[0x24BE926A8]);
    OUTLINED_FUNCTION_1_18();
    *(_QWORD *)(v1 + 24) = v10;
    type metadata accessor for SpeakableString();
    lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, (uint64_t (*)(uint64_t))MEMORY[0x24BE929C8], MEMORY[0x24BE929E8]);
    OUTLINED_FUNCTION_1_18();
    OUTLINED_FUNCTION_0_18();
    outlined init with take of SpeakableString?(v7, v1 + OBJC_IVAR____TtC19SiriContactsIntents20ContactsBirthdayInfo_durationUntilBirthday);
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v1;
}

unint64_t protocol witness for static CATType.catTypeName.getter in conformance ContactsBirthdayInfo()
{
  static ContactsBirthdayInfo.catTypeName.getter();
  return 0xD000000000000015;
}

void *protocol witness for CATType.mockGlobals.getter in conformance ContactsBirthdayInfo()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  id v3;

  v1 = *v0;
  swift_beginAccess();
  v2 = *(void **)(v1 + 16);
  v3 = v2;
  return v2;
}

void protocol witness for CATType.mockGlobals.setter in conformance ContactsBirthdayInfo(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  void *v4;

  v3 = *v1;
  swift_beginAccess();
  v4 = *(void **)(v3 + 16);
  *(_QWORD *)(v3 + 16) = a1;

}

uint64_t (*protocol witness for CATType.mockGlobals.modify in conformance ContactsBirthdayInfo())()
{
  swift_beginAccess();
  return protocol witness for CATType.mockGlobals.modify in conformance ContactsBirthdayInfo;
}

void protocol witness for CATType.getProperty(_:) in conformance ContactsBirthdayInfo(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  ContactsBirthdayInfo.getProperty(_:)(a1, a2, a3);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ContactsBirthdayInfo@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = ContactsBirthdayInfo.__allocating_init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ContactsBirthdayInfo(_QWORD *a1)
{
  return ContactsBirthdayInfo.encode(to:)(a1);
}

uint64_t base witness table accessor for Decodable in ContactsBirthdayInfo()
{
  return lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type ContactsBirthdayInfo and conformance ContactsBirthdayInfo, type metadata accessor for ContactsBirthdayInfo, (uint64_t)&protocol conformance descriptor for ContactsBirthdayInfo);
}

uint64_t base witness table accessor for Encodable in ContactsBirthdayInfo()
{
  return lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type ContactsBirthdayInfo and conformance ContactsBirthdayInfo, type metadata accessor for ContactsBirthdayInfo, (uint64_t)&protocol conformance descriptor for ContactsBirthdayInfo);
}

unint64_t lazy protocol witness table accessor for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactsBirthdayInfo.CodingKeys, &type metadata for ContactsBirthdayInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactsBirthdayInfo.CodingKeys, &type metadata for ContactsBirthdayInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactsBirthdayInfo.CodingKeys, &type metadata for ContactsBirthdayInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactsBirthdayInfo.CodingKeys, &type metadata for ContactsBirthdayInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsBirthdayInfo.CodingKeys and conformance ContactsBirthdayInfo.CodingKeys);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ContactsBirthdayInfo.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = v6 - 2;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ContactsBirthdayInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21FE570B0 + 4 * byte_21FED9D15[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21FE570E4 + 4 * byte_21FED9D10[v4]))();
}

uint64_t sub_21FE570E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE570EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FE570F4);
  return result;
}

uint64_t sub_21FE57100(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FE57108);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21FE5710C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE57114(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for ContactsBirthdayInfo.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ContactsBirthdayInfo.CodingKeys()
{
  return &type metadata for ContactsBirthdayInfo.CodingKeys;
}

uint64_t OUTLINED_FUNCTION_0_18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t OUTLINED_FUNCTION_1_18()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_2_19()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_6_17()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_7_15()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t ContactsAgeInfo.__allocating_init(contact:contactAttribute:mockGlobals:)(NSObject *a1, NSObject *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  NSObject *v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  void (*isa)(NSObject *, NSObject *, uint64_t);
  uint64_t v60;
  id v61;
  uint64_t v62;
  void *v63;
  id v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  NSObject *v68;
  uint64_t v69;
  id v70;
  void (*v71)(uint64_t, uint64_t);
  double v72;
  char v73;
  uint64_t v74;
  os_log_type_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  os_log_type_t v80;
  _DWORD *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  id v87;
  NSObject *v88;
  uint64_t v89;
  os_log_type_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char v101;
  uint64_t v102;
  os_log_type_t v103;
  uint8_t *v104;
  uint64_t v105;
  char v106;
  char v107;
  double v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  uint8_t *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  os_log_type_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD v126[3];
  NSObject *v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  uint64_t v131;
  NSObject *v132;
  NSObject *v133;
  uint64_t v134;
  NSObject *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  NSObject *v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v6);
  v137 = (char *)v126 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_5_2();
  v135 = v9;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_68();
  v138 = v11;
  OUTLINED_FUNCTION_54();
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)v126 - v14;
  v16 = MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)v126 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)v126 - v19;
  v21 = type metadata accessor for DateComponents();
  v22 = *(NSObject **)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_5_2();
  v131 = v23;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_68();
  v132 = v25;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_68();
  v133 = v27;
  OUTLINED_FUNCTION_54();
  v29 = MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)v126 - v30;
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_68();
  v134 = v32;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v33);
  v35 = ((char *)v126 - v34);
  static DateTimeUtil.getRequestedAgeInterval(contact:contactAttribute:)(a1, a2);
  if ((v36 & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v44 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v44, (uint64_t)static Logger.siriContacts);
    v45 = OUTLINED_FUNCTION_54_2();
    if (OUTLINED_FUNCTION_30_3(v45))
    {
      *(_WORD *)OUTLINED_FUNCTION_1() = 0;
      OUTLINED_FUNCTION_2_5(&dword_21FE16000, v46, v47, "#ContactsAgeInfo.init: age could not be computed, returning nil");
      OUTLINED_FUNCTION_0();
    }

    return 0;
  }
  v139 = v22;
  v37 = type metadata accessor for DialogDuration();
  v130 = a3;
  v126[2] = a3;
  v128 = v37;
  DialogDuration.init(_:mockGlobals:)();
  v39 = v38;
  type metadata accessor for ContactsAgeInfo.Builder();
  swift_initStackObject();
  v129 = ContactsAgeInfo.Builder.init()();
  v40 = -[NSObject ageDateTime](a2, sel_ageDateTime);
  v136 = v39;
  if (!v40)
  {
    OUTLINED_FUNCTION_2_20((uint64_t)v20, 1);
    v48 = a2;
    v49 = v35;
LABEL_13:
    static DateComponents.startOfToday.getter();
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v20, &demangling cache variable for type metadata for DateComponents?);
    goto LABEL_15;
  }
  v41 = v40;
  v42 = objc_msgSend(v40, sel_dateComponents);

  if (v42)
  {
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

    v43 = 0;
  }
  else
  {
    v43 = 1;
  }
  OUTLINED_FUNCTION_2_20((uint64_t)v18, v43);
  outlined init with take of DateComponents?((uint64_t)v18, (uint64_t)v20);
  v48 = a2;
  v49 = v35;
  if (OUTLINED_FUNCTION_24_15() == 1)
    goto LABEL_13;
  OUTLINED_FUNCTION_28_11((uint64_t)v35, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v139[4].isa);
LABEL_15:
  v50 = -[NSObject birthday](a1, sel_birthday);
  if (!v50)
  {
    OUTLINED_FUNCTION_2_20((uint64_t)v15, 1);
    goto LABEL_22;
  }
  v51 = v50;
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_13_18((uint64_t)v15, (uint64_t)v31);
  OUTLINED_FUNCTION_2_20((uint64_t)v15, 0);
  if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v21) == 1)
  {
LABEL_22:
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v15, &demangling cache variable for type metadata for DateComponents?);
    goto LABEL_28;
  }
  v35 = v48;
  v52 = v134;
  OUTLINED_FUNCTION_13_18(v134, (uint64_t)v15);
  v53 = DateComponents.month.getter();
  v55 = v54;
  v56 = DateComponents.month.getter();
  v127 = v35;
  if ((v55 & 1) != 0)
  {
    if ((v57 & 1) != 0)
    {
      OUTLINED_FUNCTION_12_18();
      v60 = (uint64_t)v132;
      OUTLINED_FUNCTION_13_18((uint64_t)v132, v52);
      goto LABEL_60;
    }
    goto LABEL_24;
  }
  if ((v57 & 1) != 0)
  {
LABEL_24:
    OUTLINED_FUNCTION_12_18();
    v60 = (uint64_t)v132;
    OUTLINED_FUNCTION_13_18((uint64_t)v132, v52);
    goto LABEL_25;
  }
  v58 = v56;
  isa = (void (*)(NSObject *, NSObject *, uint64_t))v139[2].isa;
  v35 = v133;
  isa(v133, v49, v21);
  v60 = (uint64_t)v132;
  isa(v132, v52, v21);
  if (v53 != v58)
  {
LABEL_25:
    OUTLINED_FUNCTION_11_12(v60);
    OUTLINED_FUNCTION_11_12((uint64_t)v35);
    goto LABEL_26;
  }
LABEL_60:
  v95 = DateComponents.day.getter();
  v97 = v96;
  v98 = DateComponents.day.getter();
  v99 = v60;
  v101 = v100;
  OUTLINED_FUNCTION_11_12(v99);
  OUTLINED_FUNCTION_11_12((uint64_t)v35);
  if ((v97 & 1) != 0)
  {
    v52 = v134;
    if ((v101 & 1) != 0)
      goto LABEL_69;
  }
  else
  {
    if ((v101 & 1) == 0)
    {
      v52 = v134;
      if (v95 != v98)
        goto LABEL_26;
LABEL_69:
      v105 = dispatch thunk of DialogDuration.valueInYears.getter();
      v107 = v106;
      v108 = round(*(double *)&v105);
      if ((v106 & 1) != 0)
        v35 = v105;
      else
        v35 = *(NSObject **)&v108;
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v109 = OUTLINED_FUNCTION_26();
      v110 = OUTLINED_FUNCTION_10_1(v109, (uint64_t)static Logger.siriContacts);
      v111 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v110, v111))
      {
        v132 = v35;
        v112 = (uint8_t *)OUTLINED_FUNCTION_1();
        v113 = OUTLINED_FUNCTION_1();
        v133 = a1;
        *(_DWORD *)v112 = 136315138;
        v142 = v113;
        v126[1] = v112 + 4;
        v140 = (uint64_t)v132;
        v141 = v107 & 1;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
        v114 = String.init<A>(describing:)();
        v140 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v114, v115, &v142);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_21FE16000, v110, v111, "#ContactsAgeInfo.init: birthday is today or on the date requested, setting ageInYearsAsInteger to %s", v112, 0xCu);
        OUTLINED_FUNCTION_10_14();
        OUTLINED_FUNCTION_0();
      }

      OUTLINED_FUNCTION_11_12(v52);
      v116 = v129;
      *(_QWORD *)(v129 + 24) = v35;
      *(_BYTE *)(v116 + 32) = v107 & 1;
      goto LABEL_27;
    }
    v52 = v134;
  }
LABEL_26:
  OUTLINED_FUNCTION_11_12(v52);
LABEL_27:
  v48 = v127;
LABEL_28:
  v61 = -[NSObject ageDateTime](v48, sel_ageDateTime);
  v62 = v138;
  if (v61)
  {
    v63 = v61;
    v64 = objc_msgSend(v61, sel_dateComponents);

    if (v64)
    {
      v35 = v135;
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

      v65 = 0;
    }
    else
    {
      v65 = 1;
      v35 = v135;
    }
    OUTLINED_FUNCTION_2_20((uint64_t)v35, v65);
    outlined init with take of DateComponents?((uint64_t)v35, v62);
    if (OUTLINED_FUNCTION_24_15())
    {
      v66 = &demangling cache variable for type metadata for DateComponents?;
      v67 = v62;
LABEL_36:
      outlined destroy of UsoEntity_common_Person.DefinedValues?(v67, v66);
      goto LABEL_37;
    }
    v68 = v139;
    v69 = v131;
    OUTLINED_FUNCTION_28_11(v131, (uint64_t (*)(uint64_t, uint64_t, uint64_t))v139[2].isa);
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v62, &demangling cache variable for type metadata for DateComponents?);
    DateComponents.date.getter();
    v70 = v137;
    v71 = (void (*)(uint64_t, uint64_t))v68[1].isa;
    v71(v69, v21);
    v35 = type metadata accessor for Date();
    if (__swift_getEnumTagSinglePayload((uint64_t)v70, 1, (uint64_t)v35) == 1)
    {
      v66 = (uint64_t *)&demangling cache variable for type metadata for Date?;
      v67 = (uint64_t)v70;
      goto LABEL_36;
    }
    Date.timeIntervalSince1970.getter();
    (*((void (**)(id, NSObject *))v35[-1].isa + 1))(v70, v35);
    LOBYTE(v70) = type metadata accessor for DialogCalendar();
    v87 = v130;
    DialogCalendar.init(_:mockGlobals:)();
    v88 = -[NSObject ageDateTime](v48, sel_ageDateTime);
    if (v88)
    {
      v35 = v88;
      v70 = -[NSObject qualifier](v88, sel_qualifier);

      if (v70 == (id)2)
      {
        v127 = v48;
        if (one-time initialization token for siriContacts != -1)
          swift_once();
        v117 = OUTLINED_FUNCTION_26();
        OUTLINED_FUNCTION_9_16(v117, (uint64_t)static Logger.siriContacts);
        Logger.logObject.getter();
        v118 = OUTLINED_FUNCTION_54_2();
        if (OUTLINED_FUNCTION_23_13(v118))
        {
          v133 = a1;
          v139 = v49;
          OUTLINED_FUNCTION_1();
          v119 = OUTLINED_FUNCTION_1();
          v138 = (uint64_t)v87;
          v140 = v119;
          OUTLINED_FUNCTION_6_18(4.8149e-34);
          v120 = OUTLINED_FUNCTION_4_18();
          v122 = OUTLINED_FUNCTION_25_17(v120, v121);
          OUTLINED_FUNCTION_3_13(v122);
          OUTLINED_FUNCTION_29_12();
          OUTLINED_FUNCTION_22_12();
          OUTLINED_FUNCTION_18_12(&dword_21FE16000, v35, (os_log_type_t)v48, "#ContactsAgeInfo.init: found minus qualifier, setting past age to %s");
          OUTLINED_FUNCTION_10_14();
          OUTLINED_FUNCTION_0();
        }

        OUTLINED_FUNCTION_7_16();
        v124 = OUTLINED_FUNCTION_15_13();
        ContactsAgeInfo.Builder.withPastAge(_:)(v124);
        goto LABEL_85;
      }
      if (v70 == (id)1)
      {
        v127 = v48;
        if (one-time initialization token for siriContacts != -1)
          swift_once();
        v89 = OUTLINED_FUNCTION_26();
        OUTLINED_FUNCTION_9_16(v89, (uint64_t)static Logger.siriContacts);
        Logger.logObject.getter();
        v90 = OUTLINED_FUNCTION_54_2();
        if (OUTLINED_FUNCTION_23_13(v90))
        {
          v133 = a1;
          v139 = v49;
          OUTLINED_FUNCTION_1();
          v91 = OUTLINED_FUNCTION_1();
          v138 = (uint64_t)v87;
          v140 = v91;
          OUTLINED_FUNCTION_6_18(4.8149e-34);
          v92 = OUTLINED_FUNCTION_4_18();
          v94 = OUTLINED_FUNCTION_25_17(v92, v93);
          OUTLINED_FUNCTION_3_13(v94);
          OUTLINED_FUNCTION_29_12();
          OUTLINED_FUNCTION_22_12();
          OUTLINED_FUNCTION_18_12(&dword_21FE16000, v35, (os_log_type_t)v48, "#ContactsAgeInfo.init: found plus qualifier, setting future age to %s");
          OUTLINED_FUNCTION_10_14();
          OUTLINED_FUNCTION_0();
        }

        OUTLINED_FUNCTION_7_16();
        v123 = OUTLINED_FUNCTION_15_13();
        ContactsAgeInfo.Builder.withFutureAge(_:)(v123);
LABEL_85:
        OUTLINED_FUNCTION_46();
        v125 = swift_retain();
        ContactsAgeInfo.Builder.withRequestedDate(_:)(v125);
        swift_release();
        OUTLINED_FUNCTION_67_1();
        type metadata accessor for ContactsAgeInfo();
        OUTLINED_FUNCTION_27_11();
        v78 = OUTLINED_FUNCTION_30_9();
        OUTLINED_FUNCTION_46();
        OUTLINED_FUNCTION_67_1();

        OUTLINED_FUNCTION_26_16((uint64_t)&v143);
        swift_release();
LABEL_50:
        v71((uint64_t)v49, v21);
        return v78;
      }
    }
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v102 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v102, (uint64_t)static Logger.siriContacts);
    v103 = OUTLINED_FUNCTION_54_2();
    if (OUTLINED_FUNCTION_30_3(v103))
    {
      v104 = (uint8_t *)OUTLINED_FUNCTION_1();
      *(_WORD *)v104 = 0;
      _os_log_impl(&dword_21FE16000, v35, (os_log_type_t)v70, "#ContactsAgeInfo.init: found nil or unknown qualifier", v104, 2u);
      OUTLINED_FUNCTION_0();
    }

    OUTLINED_FUNCTION_67_1();
  }
LABEL_37:
  v72 = COERCE_DOUBLE(dispatch thunk of DialogDuration.valueInDays.getter());
  if ((v73 & 1) != 0 || v72 >= 0.0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v79 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_9_16(v79, (uint64_t)static Logger.siriContacts);
    Logger.logObject.getter();
    v80 = OUTLINED_FUNCTION_54_2();
    if (os_log_type_enabled(v35, v80))
    {
      v81 = (_DWORD *)OUTLINED_FUNCTION_1();
      v82 = OUTLINED_FUNCTION_1();
      v127 = v48;
      v140 = v82;
      *v81 = 136315138;
      v142 = v136;
      swift_retain();
      v83 = OUTLINED_FUNCTION_4_18();
      v142 = OUTLINED_FUNCTION_25_17(v83, v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_7_16();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_18_12(&dword_21FE16000, v35, v80, "#ContactsAgeInfo.init: setting age to %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_0();
    }

    OUTLINED_FUNCTION_7_16();
    v85 = OUTLINED_FUNCTION_15_13();
    ContactsAgeInfo.Builder.withAge(_:)(v85);
    OUTLINED_FUNCTION_46();
    type metadata accessor for ContactsAgeInfo();
    OUTLINED_FUNCTION_27_11();
    v78 = OUTLINED_FUNCTION_30_9();
    OUTLINED_FUNCTION_46();

    OUTLINED_FUNCTION_26_16((uint64_t)&v144);
    OUTLINED_FUNCTION_67_1();
    v71 = (void (*)(uint64_t, uint64_t))v139[1].isa;
    goto LABEL_50;
  }
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v74 = OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_10_1(v74, (uint64_t)static Logger.siriContacts);
  v75 = OUTLINED_FUNCTION_54_2();
  if (OUTLINED_FUNCTION_30_3(v75))
  {
    *(_WORD *)OUTLINED_FUNCTION_1() = 0;
    OUTLINED_FUNCTION_2_5(&dword_21FE16000, v76, v77, "#ContactsAgeInfo.init: current age is negative, returning nil");
    OUTLINED_FUNCTION_0();
  }
  OUTLINED_FUNCTION_26_16((uint64_t)&v144);
  swift_release();
  OUTLINED_FUNCTION_46();

  ((void (*)(NSObject *, uint64_t))v139[1].isa)(v49, v21);
  return 0;
}

uint64_t OUTLINED_FUNCTION_2_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_3_13(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 176) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_4_18()
{
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_6_18(float a1)
{
  float *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = a1;
  *(_QWORD *)(v3 - 216) = v1 + 1;
  *(_QWORD *)(v3 - 176) = v2;
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_7_16()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_9_16(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_10_14()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_11_12(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_12_18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v2 + 16))(*(_QWORD *)(v3 - 248), v1, v0);
}

uint64_t OUTLINED_FUNCTION_13_18(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_15_13()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_18_12(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t OUTLINED_FUNCTION_22_12()
{
  return swift_bridgeObjectRelease();
}

BOOL OUTLINED_FUNCTION_23_13(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_24_15()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_25_17(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 192));
}

void OUTLINED_FUNCTION_26_16(uint64_t a1@<X8>)
{

}

uint64_t OUTLINED_FUNCTION_27_11()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_28_11@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v2, v3);
}

uint64_t OUTLINED_FUNCTION_29_12()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_30_9()
{
  uint64_t v0;

  return ContactsAgeInfo.init(builder:)(v0);
}

uint64_t GetContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[34] = a2;
  v3[35] = v2;
  v3[33] = a1;
  type metadata accessor for CATOption();
  v3[36] = OUTLINED_FUNCTION_0_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[37] = OUTLINED_FUNCTION_0_0();
  v4 = type metadata accessor for TemplatingResult();
  v3[38] = v4;
  v3[39] = *(_QWORD *)(v4 - 8);
  v3[40] = OUTLINED_FUNCTION_25_0();
  v3[41] = OUTLINED_FUNCTION_25_0();
  v3[42] = OUTLINED_FUNCTION_25_0();
  v5 = type metadata accessor for ParameterIdentifier();
  v3[43] = v5;
  v3[44] = *(_QWORD *)(v5 - 8);
  v3[45] = OUTLINED_FUNCTION_0_0();
  v3[46] = type metadata accessor for Signpost.OpenSignpost();
  v3[47] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t GetContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  SiriContactsIntents::GetContactAttributeSlots_optional v18;
  uint64_t v19;
  char v20;
  void *v21;
  id v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v28;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;

  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 368);
  v1 = *(_QWORD *)(v0 + 376);
  v3 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  v4 = os_signpost(_:dso:log:name:signpostID:)();
  v5 = *(int *)(v2 + 20);
  *(_DWORD *)(v0 + 480) = v5;
  v6 = v1 + v5;
  *(_QWORD *)v6 = "MakeGetContactAttributeUnsupportedValueOutput";
  *(_QWORD *)(v6 + 8) = 45;
  *(_BYTE *)(v6 + 16) = 2;
  if ((specialized ContactsStrategy.isSmartEnabled.getter(v4) & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.siriContacts);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_21FE16000, v8, v9, "#GetContactAttributeUnsupportedValueStrategy makeIntentHandledResponse SMART enabled but not yet implemented for the intent", v10, 2u);
      MEMORY[0x2207D8768](v10, -1, -1);
    }

  }
  v12 = *(_QWORD *)(v0 + 352);
  v11 = *(_QWORD *)(v0 + 360);
  v13 = *(_QWORD *)(v0 + 344);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<GetContactAttributeIntent>);
  ParameterResolutionRecord.parameter.getter();
  v14 = ParameterIdentifier.name.getter();
  v16 = v15;
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  v17._countAndFlagsBits = v14;
  v17._object = v16;
  v18.value = GetContactAttributeSlots.init(rawValue:)(v17).value;
  if (v18.value == SiriContactsIntents_GetContactAttributeSlots_unknownDefault)
    goto LABEL_19;
  if (GetContactAttributeSlots.rawValue.getter(v18.value) == 0xD000000000000015 && v19 == 0x800000021FEDFA10)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v20 & 1) == 0)
  {
LABEL_19:
    v28 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 464) = v28;
    *v28 = v0;
    v28[1] = GetContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    OUTLINED_FUNCTION_20_15();
    __asm { BR              X2 }
  }
LABEL_14:
  v21 = (void *)ParameterResolutionRecord.result.getter();
  v22 = objc_msgSend(v21, sel_unsupportedReason);

  v23 = GetContactAttributeContactAttributeToGetUnsupportedReason.init(rawValue:)((uint64_t)v22);
  if ((v24 & 1) != 0)
  {
LABEL_20:
    type metadata accessor for ContactsCommonCATs();
    static CATOption.defaultMode.getter();
    *(_QWORD *)(v0 + 440) = CATWrapper.__allocating_init(options:globals:)();
    v30 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 448) = v30;
    *v30 = v0;
    v30[1] = GetContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    OUTLINED_FUNCTION_20_15();
    return ContactsCommonCATs.unsupportedAction()();
  }
  switch(v23)
  {
    case 1:
      v31 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 424) = v31;
      *v31 = v0;
      v31[1] = GetContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      OUTLINED_FUNCTION_20_15();
      return ContactsCommonCATs.unsupportedAuthFailed()();
    case 2:
      v32 = *(_QWORD *)(v0 + 280);
      type metadata accessor for ContactsLabelCATs();
      static CATOption.defaultMode.getter();
      *(_QWORD *)(v0 + 400) = CATWrapper.__allocating_init(options:globals:)();
      outlined init with copy of DeviceState(v32 + 16, v0 + 184);
      v33 = (void *)ParameterResolutionRecord.intent.getter();
      v34 = objc_msgSend(v33, sel_isMe);

      if (v34)
      {
        objc_msgSend(v34, sel_BOOLValue);

      }
      v35 = *(uint64_t **)(v0 + 264);
      v36 = type metadata accessor for AceOutput();
      v37 = MEMORY[0x24BE99088];
      v35[3] = v36;
      v35[4] = v37;
      __swift_allocate_boxed_opaque_existential_1(v35);
      v38 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 408) = v38;
      *v38 = v0;
      v38[1] = GetContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      OUTLINED_FUNCTION_20_15();
      return GenericViews.missingMeCardOutput(catFamily:deviceState:ttsEnabled:canUseServerTTS:contactAttributeType:isMe:)(v39, v40, v41, v42, v43, v44, v45, v46);
    case 3:
      v25 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 384) = v25;
      *v25 = v0;
      v25[1] = GetContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      OUTLINED_FUNCTION_20_15();
      return GetContactAttributeCATs.unsupportedContactAttribute()(v26);
    default:
      goto LABEL_20;
  }
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_29_5();
  OUTLINED_FUNCTION_37_6();
  *(_QWORD *)(v1 + 392) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  OUTLINED_FUNCTION_29_5();
  v2 = v1 + 184;
  OUTLINED_FUNCTION_37_6();
  *(_QWORD *)(v3 + 416) = v0;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_0(v2);
  swift_release();
  OUTLINED_FUNCTION_20_0();
  return swift_task_switch();
}

{
  uint64_t (*v0)(void);

  OUTLINED_FUNCTION_5_15();
  OUTLINED_FUNCTION_19_15();
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_1_19();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  v0 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_51_2(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_29_5();
  OUTLINED_FUNCTION_37_6();
  *(_QWORD *)(v1 + 432) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_137();
  v1 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 296);
  v13 = *(_QWORD *)(v0 + 312);
  v14 = *(_QWORD *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 280);
  v4 = *(uint64_t **)(v0 + 264);
  outlined init with copy of DeviceState(v3 + 16, v0 + 16);
  v5 = *(_QWORD *)(v3 + 104);
  *(_QWORD *)(v0 + 88) = &type metadata for InstalledAppsProvider;
  *(_QWORD *)(v0 + 96) = &protocol witness table for InstalledAppsProvider;
  *(_QWORD *)(v0 + 56) = v5;
  swift_retain();
  specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:)();
  outlined destroy of ErrorViewBuilder(v0 + 16);
  v6 = type metadata accessor for NLContextUpdate();
  v9 = OUTLINED_FUNCTION_16_8(v2, v7, v8, v6);
  *(_OWORD *)(v0 + 160) = 0u;
  *(_QWORD *)(v0 + 176) = 0;
  *(_OWORD *)(v0 + 144) = 0u;
  v10 = MEMORY[0x24BE99088];
  v4[3] = v9;
  v4[4] = v10;
  __swift_allocate_boxed_opaque_existential_1(v4);
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v0 + 144, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v2, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v1, v14);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_1_19();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  v11 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_21_1(v11);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 456) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_release();
  OUTLINED_FUNCTION_20_0();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_29_5();
  OUTLINED_FUNCTION_37_6();
  *(_QWORD *)(v1 + 472) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_5_15();
  OUTLINED_FUNCTION_19_15();
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_2_21();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  return OUTLINED_FUNCTION_8_1(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_5_15();
  OUTLINED_FUNCTION_19_15();
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_2_21();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  return OUTLINED_FUNCTION_8_1(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_24_1();
  __swift_deallocate_boxed_opaque_existential_1(*(_QWORD *)(v0 + 264));
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_19_15();
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_2_21();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  return OUTLINED_FUNCTION_8_1(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_24_1();
  OUTLINED_FUNCTION_5_15();
  OUTLINED_FUNCTION_19_15();
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_2_21();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  return OUTLINED_FUNCTION_8_1(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_24_1();
  swift_release();
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_19_15();
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_2_21();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  return OUTLINED_FUNCTION_8_1(*(uint64_t (**)(void))(v0 + 8));
}

#error "21FE587F8: call analysis failed (funcsize=53)"

#error "21FE58BE0: call analysis failed (funcsize=52)"

uint64_t type metadata accessor for GetContactAttributeUnsupportedValueStrategy()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GetContactAttributeUnsupportedValueStrategy;
  if (!type metadata singleton initialization cache for GetContactAttributeUnsupportedValueStrategy)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t OUTLINED_FUNCTION_1_19()
{
  uint64_t v0;

  return outlined destroy of Signpost.OpenSignpost(*(_QWORD *)(v0 + 376));
}

uint64_t OUTLINED_FUNCTION_2_21()
{
  uint64_t v0;

  return outlined destroy of Signpost.OpenSignpost(*(_QWORD *)(v0 + 376));
}

uint64_t OUTLINED_FUNCTION_5_15()
{
  return static os_signpost_type_t.end.getter();
}

uint64_t OUTLINED_FUNCTION_13_19()
{
  return static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
}

uint64_t OUTLINED_FUNCTION_16_10()
{
  return type metadata accessor for NLContextUpdate();
}

uint64_t OUTLINED_FUNCTION_25_18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, a11);
}

uint64_t *OUTLINED_FUNCTION_29_13@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  v2[3] = a1;
  v2[4] = a2;
  return __swift_allocate_boxed_opaque_existential_1(v2);
}

uint64_t dispatch thunk of IdiomSensitiveViewBuilding.makeViews(utteranceViews:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of IdiomSensitiveViewBuilder.makeViewsForMac()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of IdiomSensitiveViewBuilder.makeViewsForCarPlay()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of IdiomSensitiveViewBuilder.makeViewsForCarDND()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of IdiomSensitiveViewBuilder.makeViewsForIOS()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of IdiomSensitiveViewBuilder.makeViewsForXROS()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t static DateTimeUtil.getRequestedAgeInterval(contact:contactAttribute:)(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  id v34;
  void *v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;

  v56 = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_5_2();
  v53 = v5;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v51 - v7;
  v9 = type metadata accessor for Date();
  v58 = *(_QWORD *)(v9 - 8);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_5_2();
  v55 = v11;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_68();
  v52 = v13;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_39_5();
  v57 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  OUTLINED_FUNCTION_84_0();
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v51 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v51 - v23;
  v25 = OUTLINED_FUNCTION_12_7();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_5_2();
  v54 = v27;
  OUTLINED_FUNCTION_54();
  v29 = MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)&v51 - v30;
  MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v51 - v32;
  v34 = objc_msgSend(a1, sel_birthday);
  if (!v34)
  {
    OUTLINED_FUNCTION_7_8((uint64_t)v24, 1);
    goto LABEL_8;
  }
  v35 = v34;
  v51 = v9;
  static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

  OUTLINED_FUNCTION_66_8((uint64_t)v24, (uint64_t)v31);
  OUTLINED_FUNCTION_7_8((uint64_t)v24, 0);
  OUTLINED_FUNCTION_6_2((uint64_t)v24, 1, v25);
  if (v36)
  {
LABEL_8:
    v39 = &demangling cache variable for type metadata for DateComponents?;
    v40 = (uint64_t)v24;
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_66_8((uint64_t)v33, (uint64_t)v24);
  DateComponents.year.getter();
  if ((v37 & 1) != 0)
  {
    OUTLINED_FUNCTION_23_6((uint64_t)v33, *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
    return 0;
  }
  DateComponents.date.getter();
  v38 = v51;
  OUTLINED_FUNCTION_6_2((uint64_t)v8, 1, v51);
  if (v36)
  {
    OUTLINED_FUNCTION_23_6((uint64_t)v33, *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
    v39 = (uint64_t *)&demangling cache variable for type metadata for Date?;
    v40 = (uint64_t)v8;
LABEL_9:
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v40, v39);
    return 0;
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v57, v8, v38);
  v42 = objc_msgSend(v56, sel_ageDateTime);
  if (!v42)
  {
    v46 = OUTLINED_FUNCTION_7_8((uint64_t)v22, 1);
LABEL_19:
    OUTLINED_FUNCTION_56_5(v46, &demangling cache variable for type metadata for DateComponents?);
    goto LABEL_20;
  }
  v43 = v42;
  v44 = objc_msgSend(v42, sel_dateComponents);

  if (v44)
  {
    OUTLINED_FUNCTION_68_8();

    v45 = 0;
  }
  else
  {
    v45 = 1;
  }
  OUTLINED_FUNCTION_7_8((uint64_t)v19, v45);
  outlined init with take of DateComponents?((uint64_t)v19, (uint64_t)v22);
  v46 = OUTLINED_FUNCTION_6_2((uint64_t)v22, 1, v25);
  if (v36)
    goto LABEL_19;
  v47 = v54;
  OUTLINED_FUNCTION_66_8(v54, (uint64_t)v22);
  DateComponents.year.getter();
  if ((v48 & 1) != 0)
  {
    OUTLINED_FUNCTION_23_6(v47, *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
  }
  else
  {
    v49 = v53;
    DateComponents.date.getter();
    OUTLINED_FUNCTION_6_2(v49, 1, v51);
    if (!v36)
    {
      OUTLINED_FUNCTION_74_4(v52, v49);
      OUTLINED_FUNCTION_80_4();
      OUTLINED_FUNCTION_26_17();
      v50 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
      v50(v47, v25);
      OUTLINED_FUNCTION_77_5();
      v50((uint64_t)v33, v25);
      return v2;
    }
    OUTLINED_FUNCTION_23_6(v47, *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v49, (uint64_t *)&demangling cache variable for type metadata for Date?);
  }
LABEL_20:
  static Date.startOfToday.getter();
  OUTLINED_FUNCTION_80_4();
  OUTLINED_FUNCTION_26_17();
  OUTLINED_FUNCTION_77_5();
  OUTLINED_FUNCTION_23_6((uint64_t)v33, *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
  return v2;
}

uint64_t static DateTimeUtil.getRequestedAgeDateTime(from:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1[3] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  v1[4] = OUTLINED_FUNCTION_25_0();
  v1[5] = OUTLINED_FUNCTION_25_0();
  v1[6] = OUTLINED_FUNCTION_25_0();
  v2 = type metadata accessor for TimeZone();
  v1[7] = v2;
  v1[8] = *(_QWORD *)(v2 - 8);
  v1[9] = OUTLINED_FUNCTION_0_0();
  v3 = OUTLINED_FUNCTION_54_7();
  v1[10] = v3;
  v1[11] = *(_QWORD *)(v3 - 8);
  v1[12] = OUTLINED_FUNCTION_0_0();
  v4 = OUTLINED_FUNCTION_12_7();
  v1[13] = v4;
  v1[14] = *(_QWORD *)(v4 - 8);
  v1[15] = OUTLINED_FUNCTION_25_0();
  v1[16] = OUTLINED_FUNCTION_25_0();
  v1[17] = OUTLINED_FUNCTION_25_0();
  v5 = type metadata accessor for DateTimeResolutionSpec.DateTimeConvergenceStrategy();
  v1[18] = v5;
  v1[19] = *(_QWORD *)(v5 - 8);
  v1[20] = OUTLINED_FUNCTION_0_0();
  v6 = type metadata accessor for DateTimeResolutionSpec.ExpandToType();
  v1[21] = v6;
  v1[22] = *(_QWORD *)(v6 - 8);
  v1[23] = OUTLINED_FUNCTION_0_0();
  v7 = type metadata accessor for DateTimeResolutionSpec();
  v1[24] = v7;
  v1[25] = *(_QWORD *)(v7 - 8);
  v1[26] = OUTLINED_FUNCTION_0_0();
  v8 = type metadata accessor for DateTimeResolver();
  v1[27] = v8;
  v1[28] = *(_QWORD *)(v8 - 8);
  v1[29] = OUTLINED_FUNCTION_0_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<DateTime>?);
  v1[30] = OUTLINED_FUNCTION_0_0();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<DateTime>);
  v1[31] = v9;
  v1[32] = *(_QWORD *)(v9 - 8);
  v1[33] = OUTLINED_FUNCTION_25_0();
  v1[34] = OUTLINED_FUNCTION_25_0();
  v1[35] = OUTLINED_FUNCTION_25_0();
  v1[36] = type metadata accessor for Signpost.OpenSignpost();
  v1[37] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 336) = a1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t static DateTimeUtil.getRequestedAgeDateTime(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 288);
  v1 = *(_QWORD *)(v0 + 296);
  v3 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v4 = *(int *)(v2 + 20);
  *(_DWORD *)(v0 + 344) = v4;
  v5 = v1 + v4;
  *(_QWORD *)v5 = "AgeDateTime";
  *(_QWORD *)(v5 + 8) = 11;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = UsoEntity_common_Date.toDate()();
  *(_QWORD *)(v0 + 304) = v6;
  if (v6)
  {
    type metadata accessor for DateTime.Time();
    OUTLINED_FUNCTION_32_0();
    swift_retain();
    DateTime.Time.init(withHour:)();
    *(_QWORD *)(v0 + 312) = type metadata accessor for DateTime();
    OUTLINED_FUNCTION_32_0();
    *(_QWORD *)(v0 + 320) = DateTime.init(withDate:time:)();
    DateTimeResolver.init()();
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 328) = v7;
    *v7 = v0;
    v7[1] = static DateTimeUtil.getRequestedAgeDateTime(from:);
    return static DateTimeUtil.requestContext()();
  }
  else
  {
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    v9 = *(_QWORD *)(v0 + 296);
    OUTLINED_FUNCTION_13_20();
    outlined destroy of Signpost.OpenSignpost(v9);
    OUTLINED_FUNCTION_17_0();
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_24_0();
    OUTLINED_FUNCTION_23_0();
    swift_task_dealloc();
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_45_0();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  uint64_t v52;
  os_log_type_t v53;
  _WORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  os_log_type_t v91;
  _WORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (*v109)(void);
  uint64_t v110;

  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 104))(*(_QWORD *)(v0 + 184), *MEMORY[0x24BE93988], *(_QWORD *)(v0 + 168));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, *MEMORY[0x24BE93970], v3);
  type metadata accessor for DateTime.DateTimeRange.DefinedDateTimeRange();
  lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type DateTime.DateTimeRange.DefinedDateTimeRange and conformance DateTime.DateTimeRange.DefinedDateTimeRange, (uint64_t (*)(uint64_t))MEMORY[0x24BE94110], MEMORY[0x24BE94120]);
  Dictionary.init(dictionaryLiteral:)();
  DateTimeResolutionSpec.init(expandToType:dateTimeConvergenceStrategy:overridesForDefinedDateTimeRanges:inferDurationAsInterval:witchingHourRoundOffEnabled:convergeToOperatingHours:)();
  DateTimeResolver.makeRecommendation(value:context:spec:)();
  v108 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 248);
  v5 = *(_QWORD *)(v0 + 256);
  v7 = *(_QWORD *)(v0 + 232);
  v6 = *(_QWORD *)(v0 + 240);
  v8 = *(_QWORD *)(v0 + 224);
  v9 = *(_QWORD *)(v0 + 200);
  swift_release();
  OUTLINED_FUNCTION_92_1(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
  OUTLINED_FUNCTION_39(v7, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  __swift_storeEnumTagSinglePayload(v6, 0, 1, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v108, v6, v4);
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v10 = *(_QWORD *)(v0 + 272);
  v11 = *(_QWORD *)(v0 + 280);
  v13 = *(_QWORD *)(v0 + 248);
  v12 = *(_QWORD *)(v0 + 256);
  v14 = OUTLINED_FUNCTION_26();
  v15 = (void *)__swift_project_value_buffer(v14, (uint64_t)static Logger.siriContacts);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  v16(v10, v11, v13);
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)OUTLINED_FUNCTION_1();
    v110 = OUTLINED_FUNCTION_1();
    *(_DWORD *)v19 = 136315138;
    lazy protocol witness table accessor for type Recommendation<DateTime> and conformance Recommendation<A>();
    v20 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_49_9();
    _os_log_impl(&dword_21FE16000, v17, v18, "#getRequestedAgeDateTime ### datetime recommendation: %s", v19, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0();
  }
  OUTLINED_FUNCTION_49_9();

  v22 = *(_QWORD *)(v0 + 256);
  v23 = *(_QWORD *)(v0 + 264);
  v24 = *(_QWORD *)(v0 + 248);
  v16(v23, *(_QWORD *)(v0 + 280), v24);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 88))(v23, v24);
  v26 = v25 == *MEMORY[0x24BE93670] || v25 == *MEMORY[0x24BE93658];
  if (v26)
  {
    v109 = (uint64_t (*)(void))v8;
    v28 = *(_QWORD *)(v0 + 88);
    v27 = *(_QWORD *)(v0 + 96);
    v29 = *(_QWORD *)(v0 + 72);
    v30 = *(_QWORD *)(v0 + 64);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 256) + 96))(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 248));
    static Calendar.current.getter();
    static TimeZone.current.getter();
    v31 = (void *)DateTime.toINDateComponentsRange(calendar:timeZone:)();
    swift_release();
    OUTLINED_FUNCTION_39(v29, *(uint64_t (**)(uint64_t, uint64_t))(v30 + 8));
    OUTLINED_FUNCTION_35_1(v27, *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
    v32 = objc_msgSend(v31, sel_startDateComponents);

    if (v32)
    {
      v33 = *(_QWORD *)(v0 + 128);
      v34 = *(_QWORD *)(v0 + 104);
      v35 = *(_QWORD *)(v0 + 112);
      v36 = *(_QWORD *)(v0 + 48);
      OUTLINED_FUNCTION_68_8();

      v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32);
      v37(v36, v33, v34);
      __swift_storeEnumTagSinglePayload(v36, 0, 1, v34);
      v38 = OUTLINED_FUNCTION_78_4();
      OUTLINED_FUNCTION_6_2(v38, v39, v34);
      if (!v26)
      {
        v105 = *(_QWORD *)(v0 + 248);
        v107 = *(_QWORD *)(v0 + 280);
        v40 = *(_QWORD *)(v0 + 136);
        v41 = *(_QWORD *)(v0 + 112);
        v37(v40, *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 104));
        OUTLINED_FUNCTION_34_9();
        OUTLINED_FUNCTION_24_16();
        v42 = static DateTimeUtil.getQualifier(for:)();
        v97 = OUTLINED_FUNCTION_53_6(v42);
        OUTLINED_FUNCTION_67_1();
        goto LABEL_32;
      }
    }
    else
    {
      __swift_storeEnumTagSinglePayload(*(_QWORD *)(v0 + 48), 1, 1, *(_QWORD *)(v0 + 104));
    }
    v59 = *(_QWORD *)(v0 + 280);
    v60 = *(_QWORD *)(v0 + 248);
    v61 = *(_QWORD *)(v0 + 48);
    swift_release();
    swift_release();
    OUTLINED_FUNCTION_73_6(v59, v60, v62, v63, v64, v65, v66, v67, v96, v99, v100, v101, v102, v103, v104, v106, v109);
    v68 = v61;
LABEL_25:
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v68, &demangling cache variable for type metadata for DateComponents?);
LABEL_26:
    v98 = 0;
    goto LABEL_27;
  }
  if (v25 != *MEMORY[0x24BE93660])
  {
    Logger.logObject.getter();
    v53 = OUTLINED_FUNCTION_38_6();
    if (OUTLINED_FUNCTION_15_0(v53))
    {
      v54 = (_WORD *)OUTLINED_FUNCTION_1();
      OUTLINED_FUNCTION_54_0(v54);
      OUTLINED_FUNCTION_10_0(&dword_21FE16000, v55, v56, "#getRequestedAgeDateTime DateTimeValue recommendation had no valid value, returning nil.");
      OUTLINED_FUNCTION_0();
    }
    v57 = *(_QWORD *)(v0 + 280);
    v58 = *(_QWORD *)(v0 + 264);
    swift_release();

    OUTLINED_FUNCTION_49();
    OUTLINED_FUNCTION_153(v57);
    OUTLINED_FUNCTION_153(v58);
    goto LABEL_26;
  }
  v43 = *(uint64_t **)(v0 + 264);
  (*(void (**)(uint64_t *, _QWORD))(*(_QWORD *)(v0 + 256) + 96))(v43, *(_QWORD *)(v0 + 248));
  v44 = *v43;
  if ((unint64_t)*v43 >> 62)
  {
    swift_bridgeObjectRetain();
    v90 = _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_23_5();
    if (v90)
      goto LABEL_16;
  }
  else if (*(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_16:
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v44 & 0xC000000000000001) == 0, v44);
    v109 = (uint64_t (*)(void))v8;
    if ((v44 & 0xC000000000000001) != 0)
      MEMORY[0x2207D80C0](0, v44);
    else
      swift_retain();
    v46 = *(_QWORD *)(v0 + 88);
    v45 = *(_QWORD *)(v0 + 96);
    v48 = *(_QWORD *)(v0 + 72);
    v47 = *(_QWORD *)(v0 + 80);
    v49 = *(_QWORD *)(v0 + 64);
    OUTLINED_FUNCTION_23_5();
    static Calendar.current.getter();
    static TimeZone.current.getter();
    v50 = (void *)DateTime.toINDateComponentsRange(calendar:timeZone:)();
    OUTLINED_FUNCTION_49();
    OUTLINED_FUNCTION_48_5(v48, *(uint64_t (**)(uint64_t, uint64_t))(v49 + 8));
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
    v51 = objc_msgSend(v50, sel_startDateComponents);

    if (v51)
    {
      OUTLINED_FUNCTION_68_8();

      v52 = 0;
    }
    else
    {
      v52 = 1;
    }
    v71 = *(_QWORD *)(v0 + 104);
    v73 = *(_QWORD *)(v0 + 32);
    v72 = *(_QWORD *)(v0 + 40);
    OUTLINED_FUNCTION_31_12(v73, v52);
    outlined init with take of DateComponents?(v73, v72);
    if (__swift_getEnumTagSinglePayload(v72, 1, v71) == 1)
    {
      v74 = *(_QWORD *)(v0 + 280);
      v75 = *(_QWORD *)(v0 + 248);
      v76 = *(_QWORD *)(v0 + 40);
      swift_release();
      OUTLINED_FUNCTION_67_1();
      OUTLINED_FUNCTION_73_6(v74, v75, v77, v78, v79, v80, v81, v82, v96, v99, v100, v101, v102, v103, v104, v106, v109);
      v68 = v76;
      goto LABEL_25;
    }
    v105 = *(_QWORD *)(v0 + 248);
    v107 = *(_QWORD *)(v0 + 280);
    v40 = *(_QWORD *)(v0 + 120);
    v41 = *(_QWORD *)(v0 + 112);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v41 + 32))(v40, *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 104));
    OUTLINED_FUNCTION_34_9();
    OUTLINED_FUNCTION_24_16();
    v83 = static DateTimeUtil.getQualifier(for:)();
    v97 = OUTLINED_FUNCTION_53_6(v83);
    swift_release();
LABEL_32:
    swift_release();
    OUTLINED_FUNCTION_29_14(v40, *(uint64_t (**)(uint64_t, uint64_t))(v41 + 8));
    OUTLINED_FUNCTION_73_6(v107, v105, v84, v85, v86, v87, v88, v89, (uint64_t)v97, v99, v100, v101, v102, v103, v105, v107, v109);
    goto LABEL_27;
  }
  OUTLINED_FUNCTION_23_5();
  Logger.logObject.getter();
  v91 = OUTLINED_FUNCTION_38_6();
  if (OUTLINED_FUNCTION_15_0(v91))
  {
    v92 = (_WORD *)OUTLINED_FUNCTION_1();
    OUTLINED_FUNCTION_54_0(v92);
    OUTLINED_FUNCTION_10_0(&dword_21FE16000, v93, v94, "#getRequestedAgeDateTime DateTimeValue recommendation had no valid value, returning nil.");
    OUTLINED_FUNCTION_0();
  }
  v95 = *(_QWORD *)(v0 + 280);
  swift_release();

  OUTLINED_FUNCTION_67_1();
  OUTLINED_FUNCTION_153(v95);
  v98 = 0;
LABEL_27:
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v69 = *(_QWORD *)(v0 + 296);
  OUTLINED_FUNCTION_13_20();
  outlined destroy of Signpost.OpenSignpost(v69);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  swift_task_dealloc();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v98);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  os_log_type_t v57;
  _WORD *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  char v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  os_log_type_t v90;
  _BOOL8 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  double v110;
  char v111;
  uint64_t result;
  uint64_t v113;
  double v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t (*v117)(uint64_t, _QWORD);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(_QWORD, _QWORD, _QWORD);
  uint64_t v130[2];
  void (*v131)(_QWORD, _QWORD, _QWORD);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t (*v161)(uint64_t, uint64_t);
  uint64_t v162;
  Class isa;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Calendar.Component?);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_9_5();
  OUTLINED_FUNCTION_19_16(v2);
  v3 = type metadata accessor for Calendar.Component();
  OUTLINED_FUNCTION_76_4(v3, (uint64_t)&v166);
  v132 = v4;
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_9_5();
  OUTLINED_FUNCTION_19_16(v6);
  v7 = type metadata accessor for TerminalElement.Qualifier();
  OUTLINED_FUNCTION_76_4(v7, (uint64_t)&v168);
  v138 = v8;
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_39_5();
  v139 = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Interval?);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_9_5();
  v154 = v13;
  v155 = (char *)type metadata accessor for TerminalElement.Interval();
  v144 = *((_QWORD *)v155 - 1);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_9_5();
  v143 = v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Qualifier?);
  OUTLINED_FUNCTION_76_4(v16, (uint64_t)&v167);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_68();
  v153 = v19;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_39_5();
  OUTLINED_FUNCTION_19_16(v22);
  v23 = type metadata accessor for Calendar();
  OUTLINED_FUNCTION_76_4(v23, (uint64_t)&v169);
  v146 = v24;
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_9_5();
  OUTLINED_FUNCTION_19_16(v26);
  v152 = type metadata accessor for DateComponents();
  v150 = *(_QWORD *)(v152 - 8);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v27);
  OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_68();
  v159 = v29;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v30);
  OUTLINED_FUNCTION_39_5();
  v157 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.DateTimePeriod?);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v32);
  OUTLINED_FUNCTION_59_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Period?);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v33);
  OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v34);
  v36 = (char *)v130 - v35;
  v156 = type metadata accessor for TerminalElement.Period();
  v140 = *(_QWORD *)(v156 - 8);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v37);
  OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v38);
  v40 = (char *)v130 - v39;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Date?);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v41);
  OUTLINED_FUNCTION_55_0();
  v44 = (uint8_t *)(v43 - v42);
  v45 = (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for TerminalElement.Date();
  v160 = *((_QWORD *)v45 - 1);
  v161 = v45;
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v46);
  OUTLINED_FUNCTION_37_9(v47, v130[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.DateTimeValue?);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v48);
  OUTLINED_FUNCTION_55_0();
  v51 = v50 - v49;
  v52 = type metadata accessor for TerminalElement.DateTimeValue();
  isa = v52[-1].isa;
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v53);
  OUTLINED_FUNCTION_9_5();
  v162 = v54;
  if (one-time initialization token for contactAgeDate != -1)
    swift_once();
  type metadata accessor for ContactNLv3Intent();
  lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (uint64_t (*)(uint64_t))type metadata accessor for ContactNLv3Intent, (uint64_t)&protocol conformance descriptor for ContactNLv3Intent);
  IntentNodeTraversable.value<A>(forNode:)();
  v55 = OUTLINED_FUNCTION_6_2(v51, 1, (uint64_t)v52);
  if (v62)
  {
    OUTLINED_FUNCTION_62_6(v55, &demangling cache variable for type metadata for TerminalElement.DateTimeValue?);
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v56 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v56, (uint64_t)static Logger.siriContacts);
    v57 = OUTLINED_FUNCTION_54_2();
    if (os_log_type_enabled(v52, v57))
    {
      v58 = (_WORD *)OUTLINED_FUNCTION_1();
      OUTLINED_FUNCTION_54_0(v58);
      _os_log_impl(&dword_21FE16000, v52, v57, "#getRequestedAgeDateTime user didn't provide a date time reference for age computation. returning nil.", v44, 2u);
      OUTLINED_FUNCTION_0();
    }

    return 0;
  }
  v59 = (uint64_t)v52;
  v60 = v162;
  v61 = (void (*)(uint64_t, uint64_t))*((_QWORD *)isa + 4);
  v130[1] = v59;
  v61(v162, v51);
  TerminalElement.DateTimeValue.startDate.getter();
  OUTLINED_FUNCTION_6_2((uint64_t)v44, 1, (uint64_t)v161);
  if (!v62)
  {
    v66 = v158;
    OUTLINED_FUNCTION_69_8(v158, (uint64_t)v44, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v160 + 32));
    v67 = TerminalElement.Date.periods.getter();
    specialized Collection.first.getter(v67, v0);
    OUTLINED_FUNCTION_5();
    v68 = type metadata accessor for TerminalElement.DateTimePeriod();
    v70 = OUTLINED_FUNCTION_6_2(v0, 1, v68);
    if (v69)
    {
      OUTLINED_FUNCTION_56_5(v70, &demangling cache variable for type metadata for TerminalElement.DateTimePeriod?);
      v71 = OUTLINED_FUNCTION_78_4();
      __swift_storeEnumTagSinglePayload(v71, v72, 1, v156);
    }
    else
    {
      TerminalElement.DateTimePeriod.period.getter();
      OUTLINED_FUNCTION_35_1(v0, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 8));
      v79 = OUTLINED_FUNCTION_78_4();
      v80 = v156;
      OUTLINED_FUNCTION_6_2(v79, v81, v156);
      if (!v82)
        goto LABEL_38;
    }
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v36, &demangling cache variable for type metadata for TerminalElement.Period?);
    v83 = v157;
    static DateComponents.startOfToday.getter();
    v84 = v145;
    static Calendar.gregorianCurrent.getter();
    v85 = v159;
    static DateTimeUtil.dateComponents(from:now:localCalendar:)(v83, v84, v159);
    (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v84, v147);
    if (one-time initialization token for contactAttributes != -1)
      swift_once();
    v86 = (void *)IntentNodeTraversable.values<A>(forNode:)();
    v87 = v151;
    static DateTimeUtil.qualifier(for:requestedDateComponents:now:)((uint64_t)v86, v85, v83, v151);
    swift_bridgeObjectRelease();
    DateComponents.setImplicitYear(from:now:qualifier:)(v66, v83, v87);
    v88 = v148;
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v89 = OUTLINED_FUNCTION_26();
    __swift_project_value_buffer(v89, (uint64_t)static Logger.siriContacts);
    outlined init with copy of TerminalElement.Qualifier?(v87, v88);
    Logger.logObject.getter();
    v90 = OUTLINED_FUNCTION_54_2();
    v91 = OUTLINED_FUNCTION_23_13(v90);
    v93 = v152;
    v92 = v153;
    if (v91)
    {
      v94 = OUTLINED_FUNCTION_1();
      v166 = OUTLINED_FUNCTION_1();
      *(_DWORD *)v94 = 136315394;
      outlined init with copy of TerminalElement.Qualifier?(v88, v92);
      v95 = String.init<A>(describing:)();
      v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v96, &v166);
      OUTLINED_FUNCTION_52_6();
      v97 = swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_62_6(v97, &demangling cache variable for type metadata for TerminalElement.Qualifier?);
      *(_WORD *)(v94 + 12) = 2080;
      OUTLINED_FUNCTION_23();
      lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE0], MEMORY[0x24BDCBE28]);
      v98 = dispatch thunk of CustomStringConvertible.description.getter();
      v164 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v99, &v166);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_5();
      OUTLINED_FUNCTION_30_10(&dword_21FE16000, v100, v101, "#getRequestedAgeDateTime user asked for age with qualifier: %s on specific date: %s");
      OUTLINED_FUNCTION_47_6();
      OUTLINED_FUNCTION_0();
    }
    OUTLINED_FUNCTION_62_6(v91, &demangling cache variable for type metadata for TerminalElement.Qualifier?);

    OUTLINED_FUNCTION_34_9();
    OUTLINED_FUNCTION_23();
    v102 = v150;
    v103 = v149;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v150 + 16))(v149, v85, v93);
    outlined init with copy of TerminalElement.Qualifier?(v87, v92);
    v78 = AgeDateTime.__allocating_init(dateComponents:qualifier:)(v103, v92);
    OUTLINED_FUNCTION_56_5((uint64_t)v78, &demangling cache variable for type metadata for TerminalElement.Qualifier?);
    v104 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
    v104(v83, v93);
    (*(void (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t)))(v160 + 8))(v158, v161);
    OUTLINED_FUNCTION_10_15(v162, *((uint64_t (**)(uint64_t, _QWORD))isa + 1));
    v104(v85, v93);
    return (uint64_t)v78;
  }
  outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v44, &demangling cache variable for type metadata for TerminalElement.Date?);
  v63 = v154;
  TerminalElement.DateTimeValue.interval.getter();
  v40 = v155;
  OUTLINED_FUNCTION_6_2(v63, 1, (uint64_t)v155);
  if (v62)
  {
    OUTLINED_FUNCTION_8_13();
    v64 = &demangling cache variable for type metadata for TerminalElement.Interval?;
    v65 = v63;
LABEL_21:
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v65, v64);
    return 0;
  }
  v73 = v144;
  v74 = v143;
  (*(void (**)(uint64_t, uint64_t, char *))(v144 + 32))(v143, v63, v40);
  v75 = v141;
  TerminalElement.Interval.qualifier.getter();
  v76 = v142;
  OUTLINED_FUNCTION_6_2(v75, 1, v142);
  if (v77)
  {
    OUTLINED_FUNCTION_39(v74, *(uint64_t (**)(uint64_t, uint64_t))(v73 + 8));
    OUTLINED_FUNCTION_8_13();
    v64 = &demangling cache variable for type metadata for TerminalElement.Qualifier?;
    v65 = v75;
    goto LABEL_21;
  }
  v105 = v138;
  v106 = v139;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v138 + 32))(v139, v75, v76);
  v107 = TerminalElement.Interval.quantity.getter();
  if ((v108 & 1) != 0)
  {
    OUTLINED_FUNCTION_23_6(v106, *(uint64_t (**)(uint64_t, uint64_t))(v105 + 8));
    OUTLINED_FUNCTION_39(v74, *(uint64_t (**)(uint64_t, uint64_t))(v73 + 8));
    OUTLINED_FUNCTION_10_15(v162, *((uint64_t (**)(uint64_t, _QWORD))isa + 1));
    return 0;
  }
  v109 = v107;
  v110 = *(double *)&v107;
  v66 = v136;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v105 + 104))(v136, *MEMORY[0x24BE9FE18], v76);
  v111 = MEMORY[0x2207D68FC](v106, v66);
  v161 = *(uint64_t (**)(uint64_t, uint64_t))(v105 + 8);
  result = v161(v66, v76);
  if ((v111 & 1) != 0)
  {
    v80 = v137;
    v113 = v140;
    v36 = v135;
    if ((~v109 & 0x7FF0000000000000) != 0)
    {
      v60 = v162;
      if (v110 > -9.22337204e18)
      {
        v114 = v110;
        if (v110 >= 9.22337204e18)
        {
          __break(1u);
LABEL_38:
          v115 = v140;
          (*(void (**)(char *, char *, uint64_t))(v140 + 32))(v40, v36, v80);
          v116 = v60;
          v78 = static DateTimeUtil.ageDateTime(for:)((uint64_t)v40);
          OUTLINED_FUNCTION_35_1((uint64_t)v40, *(uint64_t (**)(uint64_t, uint64_t))(v115 + 8));
          (*(void (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t)))(v160 + 8))(v66, v161);
          v117 = (uint64_t (*)(uint64_t, _QWORD))*((_QWORD *)isa + 1);
          v118 = v116;
LABEL_39:
          OUTLINED_FUNCTION_10_15(v118, v117);
          return (uint64_t)v78;
        }
        goto LABEL_45;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_53;
  }
  v114 = -v110;
  v80 = v137;
  v113 = v140;
  v36 = v135;
  if ((~COERCE__INT64(-v110) & 0x7FF0000000000000) == 0)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  if (v110 >= 9.22337204e18)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (v110 > -9.22337204e18)
  {
LABEL_45:
    TerminalElement.Interval.period.getter();
    v119 = OUTLINED_FUNCTION_78_4();
    v120 = v156;
    OUTLINED_FUNCTION_6_2(v119, v121, v156);
    if (v62)
    {
      OUTLINED_FUNCTION_23_14();
      OUTLINED_FUNCTION_39(v74, *(uint64_t (**)(uint64_t, uint64_t))(v144 + 8));
      OUTLINED_FUNCTION_8_13();
      v64 = &demangling cache variable for type metadata for TerminalElement.Period?;
      v65 = (uint64_t)v36;
    }
    else
    {
      v122 = v36;
      v123 = v133;
      (*(void (**)(uint64_t, char *, uint64_t))(v113 + 32))(v133, v122, v120);
      v124 = v134;
      static DateTimeUtil.calendarComponent(for:)(v123, v134);
      OUTLINED_FUNCTION_6_2(v124, 1, v80);
      if (!v125)
      {
        v126 = v124;
        v127 = v113;
        v128 = v132;
        v129 = v131;
        (*(void (**)(_QWORD, uint64_t, uint64_t))(v132 + 32))(v131, v126, v80);
        v78 = static DateTimeUtil.ageDateTime(for:nlQuantity:qualifier:)(v129, (uint64_t)v114, v106);
        OUTLINED_FUNCTION_35_1((uint64_t)v129, *(uint64_t (**)(uint64_t, uint64_t))(v128 + 8));
        OUTLINED_FUNCTION_48_5(v123, *(uint64_t (**)(uint64_t, uint64_t))(v127 + 8));
        OUTLINED_FUNCTION_23_14();
        OUTLINED_FUNCTION_39(v143, *(uint64_t (**)(uint64_t, uint64_t))(v144 + 8));
        v118 = v162;
        v117 = (uint64_t (*)(uint64_t, _QWORD))*((_QWORD *)isa + 1);
        goto LABEL_39;
      }
      OUTLINED_FUNCTION_48_5(v123, *(uint64_t (**)(uint64_t, uint64_t))(v113 + 8));
      OUTLINED_FUNCTION_23_14();
      OUTLINED_FUNCTION_39(v74, *(uint64_t (**)(uint64_t, uint64_t))(v144 + 8));
      OUTLINED_FUNCTION_8_13();
      v64 = &demangling cache variable for type metadata for Calendar.Component?;
      v65 = v124;
    }
    goto LABEL_21;
  }
LABEL_55:
  __break(1u);
  return result;
}

uint64_t static DateTimeUtil.requestContext()()
{
  _QWORD *v0;

  type metadata accessor for Date();
  v0[2] = swift_task_alloc();
  type metadata accessor for Calendar();
  v0[3] = swift_task_alloc();
  type metadata accessor for DateTimeResolutionContext.Hemisphere();
  v0[4] = swift_task_alloc();
  type metadata accessor for TimeZone();
  v0[5] = swift_task_alloc();
  type metadata accessor for Locale();
  v0[6] = swift_task_alloc();
  v0[7] = swift_task_alloc();
  v0[8] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;

  static Locale.autoupdatingCurrent.getter();
  static Locale.autoupdatingCurrent.getter();
  static Locale.autoupdatingCurrent.getter();
  static TimeZone.autoupdatingCurrent.getter();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = static DateTimeUtil.requestContext();
  return static DateTimeUtil.hemisphere()(*(_QWORD *)(v0 + 32));
}

{
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  uint64_t v1;

  static Calendar.autoupdatingCurrent.getter();
  static Date.now.getter();
  type metadata accessor for DateTimeResolutionContext();
  OUTLINED_FUNCTION_32_0();
  v1 = DateTimeResolutionContext.init(with:regionFormat:regionAwareLanguage:timeZone:hemisphere:calendar:date:)();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_21_0();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t static DateTimeUtil.getQualifier(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  void (*v14)(char *, uint64_t);
  double v16;
  double v17;
  uint64_t v18;

  v0 = type metadata accessor for DateComponents();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v18 - v8;
  static DateComponents.startOfToday.getter();
  DateComponents.date.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v10 = type metadata accessor for Date();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10) == 1)
  {
    v11 = (uint64_t)v9;
LABEL_5:
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v11, (uint64_t *)&demangling cache variable for type metadata for Date?);
    return 0;
  }
  Date.timeIntervalSince1970.getter();
  v13 = v12;
  v14 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v14(v9, v10);
  DateComponents.date.getter();
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v10) == 1)
  {
    v11 = (uint64_t)v7;
    goto LABEL_5;
  }
  Date.timeIntervalSince1970.getter();
  v17 = v16;
  v14(v7, v10);
  if (v13 >= v17)
    return 2 * (v17 < v13);
  else
    return 1;
}

id static DateTimeUtil.ageDateTime(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint8_t *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t);
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v75 = a1;
  v1 = type metadata accessor for Calendar.Component();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v68 = (char *)&v67 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Qualifier?);
  MEMORY[0x24BDAC7A8](v10);
  v70 = (uint64_t)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TimeZone();
  v72 = *(_QWORD *)(v12 - 8);
  v73 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v71 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DateComponents();
  MEMORY[0x24BDAC7A8](v14);
  v74 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TerminalElement.Period();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Date();
  v76 = *(_QWORD *)(v20 - 8);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v69 = (char *)&v67 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v21);
  v67 = (char *)&v67 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)&v67 - v25;
  v27 = type metadata accessor for Calendar();
  v77 = *(_QWORD *)(v27 - 8);
  v78 = v27;
  MEMORY[0x24BDAC7A8](v27);
  v29 = (char *)&v67 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.gregorianCurrent.getter();
  static Date.startOfToday.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v75, v16);
  v30 = (*(uint64_t (**)(char *, uint64_t))(v17 + 88))(v19, v16);
  if (v30 == *MEMORY[0x24BE9FD90])
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BDCF220], v1);
    Calendar.date(byAdding:value:to:wrappingComponents:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    v31 = v29;
    if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v20) == 1)
    {
      (*(void (**)(char *, uint64_t))(v76 + 8))(v26, v20);
      (*(void (**)(char *, uint64_t))(v77 + 8))(v29, v78);
      v32 = (uint64_t)v8;
LABEL_19:
      outlined destroy of UsoEntity_common_Person.DefinedValues?(v32, (uint64_t *)&demangling cache variable for type metadata for Date?);
      return 0;
    }
    v45 = v76;
    v46 = v69;
    (*(void (**)(char *, char *, uint64_t))(v76 + 32))(v69, v8, v20);
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)static Logger.siriContacts);
    v48 = Logger.logObject.getter();
    v49 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v50 = 0;
      _os_log_impl(&dword_21FE16000, v48, v49, "#getRequestedAgeDateTime user asked for age yesterday. returning yesterday's date components.", v50, 2u);
      MEMORY[0x2207D8768](v50, -1, -1);
    }

    type metadata accessor for AgeDateTime();
    v51 = v71;
    Calendar.timeZone.getter();
    v52 = (uint64_t)v74;
    Calendar.dateComponents(in:from:)();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v51, v73);
    v44 = AgeDateTime.__allocating_init(dateComponents:qualifier:)(v52, 2);
    v53 = *(void (**)(char *, uint64_t))(v45 + 8);
    v53(v46, v20);
    v53(v26, v20);
    goto LABEL_15;
  }
  v33 = v29;
  if (v30 == *MEMORY[0x24BE9FD68])
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Logger.siriContacts);
    v35 = Logger.logObject.getter();
    v36 = static os_log_type_t.debug.getter();
    v37 = os_log_type_enabled(v35, v36);
    v31 = v33;
    v38 = v76;
    if (v37)
    {
      v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v39 = 0;
      _os_log_impl(&dword_21FE16000, v35, v36, "#getRequestedAgeDateTime user asked for age today. returning today's date components.", v39, 2u);
      MEMORY[0x2207D8768](v39, -1, -1);
    }

    type metadata accessor for AgeDateTime();
    v40 = v71;
    Calendar.timeZone.getter();
    v41 = (uint64_t)v74;
    Calendar.dateComponents(in:from:)();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v40, v73);
    v42 = type metadata accessor for TerminalElement.Qualifier();
    v43 = v70;
    __swift_storeEnumTagSinglePayload(v70, 1, 1, v42);
    v44 = AgeDateTime.__allocating_init(dateComponents:qualifier:)(v41, v43);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v26, v20);
LABEL_15:
    (*(void (**)(char *, uint64_t))(v77 + 8))(v31, v78);
    return v44;
  }
  if (v30 != *MEMORY[0x24BE9FD80])
  {
    (*(void (**)(char *, uint64_t))(v76 + 8))(v26, v20);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v29, v78);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    return 0;
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BDCF220], v1);
  v54 = (uint64_t)v68;
  v55 = v29;
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v56 = v20;
  if (__swift_getEnumTagSinglePayload(v54, 1, v20) == 1)
  {
    (*(void (**)(char *, uint64_t))(v76 + 8))(v26, v20);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v29, v78);
    v32 = v54;
    goto LABEL_19;
  }
  v58 = v76;
  v59 = v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v76 + 32))(v67, v54, v20);
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v60 = type metadata accessor for Logger();
  __swift_project_value_buffer(v60, (uint64_t)static Logger.siriContacts);
  v61 = Logger.logObject.getter();
  v62 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v61, v62))
  {
    v63 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v63 = 0;
    _os_log_impl(&dword_21FE16000, v61, v62, "#getRequestedAgeDateTime user asked for age tomorrow. returning tomorrow's date components.", v63, 2u);
    MEMORY[0x2207D8768](v63, -1, -1);
  }

  type metadata accessor for AgeDateTime();
  v64 = v71;
  Calendar.timeZone.getter();
  v65 = (uint64_t)v74;
  Calendar.dateComponents(in:from:)();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v64, v73);
  v44 = AgeDateTime.__allocating_init(dateComponents:qualifier:)(v65, 1);
  v66 = *(void (**)(char *, uint64_t))(v58 + 8);
  v66(v59, v56);
  v66(v26, v56);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v55, v78);
  return v44;
}

uint64_t static DateTimeUtil.dateComponents(from:now:localCalendar:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void (*v31)(char *, uint64_t);
  char v32;
  char v33;
  _QWORD v34[2];
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v6 = OUTLINED_FUNCTION_12_7();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_5_2();
  v42 = v8;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v34 - v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_55_0();
  v15 = v14 - v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Calendar?);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_55_0();
  v19 = v18 - v17;
  result = TerminalElement.Date.month.getter();
  v22 = 0;
  if ((v21 & 1) == 0 && (v22 = result + 1, __OFADD__(result, 1)))
  {
    __break(1u);
  }
  else
  {
    v41 = a3;
    v38 = v22;
    v37 = v21 & 1;
    v23 = OUTLINED_FUNCTION_54_7();
    OUTLINED_FUNCTION_69_8(v19, a2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16));
    v39 = v19;
    OUTLINED_FUNCTION_31_12(v19, 0);
    Calendar.timeZone.getter();
    v24 = type metadata accessor for TimeZone();
    v40 = v15;
    __swift_storeEnumTagSinglePayload(v15, 0, 1, v24);
    v25 = TerminalElement.Date.year.getter();
    v27 = v26;
    OUTLINED_FUNCTION_74_4((uint64_t)v11, a1);
    v28 = a1;
    if ((v27 & 1) != 0)
    {
      v29 = v42;
      v36 = DateComponents.year.getter();
      v35 = v30 & 1;
    }
    else
    {
      v36 = v25;
      v29 = v42;
      v35 = 0;
    }
    v31 = *(void (**)(char *, uint64_t))(v7 + 8);
    v31(v11, v6);
    v42 = TerminalElement.Date.dayOfMonth.getter();
    v34[1] = TerminalElement.Date.dayOfWeekOrdinalValue.getter();
    TerminalElement.Date.year.getter();
    v33 = v32;
    OUTLINED_FUNCTION_74_4(v29, v28);
    if ((v33 & 1) != 0)
      DateComponents.year.getter();
    v31((char *)v29, v6);
    return DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  }
  return result;
}

uint64_t static DateTimeUtil.qualifier(for:requestedDateComponents:now:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  char v18;
  void (*v19)(char *, uint64_t, uint64_t);
  Swift::Bool v20;
  void (*v21)(char *, uint64_t);
  uint64_t result;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, _QWORD, uint64_t);
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  char v33;
  char *v34;
  Swift::Bool v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;

  v48 = a3;
  v7 = type metadata accessor for DateComponents();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v45 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v44 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v46 = a2;
    v47 = a4;
    swift_bridgeObjectRetain();
    v14 = 0;
    while (1)
    {
      v50 = *(_BYTE *)(a1 + v14 + 32);
      if (ContactNLv3Intent.NLContactAttributesValue.rawValue.getter() == 1953718640 && v15 == 0xE400000000000000)
        break;
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v17 & 1) != 0)
        goto LABEL_12;
      if (v13 == ++v14)
      {
        swift_bridgeObjectRelease();
        v18 = 0;
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease();
LABEL_12:
    swift_bridgeObjectRelease();
    v18 = 1;
LABEL_13:
    a2 = v46;
    a4 = v47;
  }
  else
  {
    v18 = 0;
  }
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v19(v12, a2, v7);
  if ((v18 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
LABEL_17:
    result = DateComponents.year.getter();
    if ((v23 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v24 = result;
      result = DateComponents.year.getter();
      if ((v25 & 1) == 0)
      {
        v26 = result;
        v27 = type metadata accessor for TerminalElement.Qualifier();
        v28 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v27 - 8) + 104);
        if (v26 < v24)
        {
LABEL_20:
          v29 = (unsigned int *)MEMORY[0x24BE9FE18];
LABEL_38:
          v28(a4, *v29, v27);
          v37 = a4;
          v38 = 0;
          v36 = v27;
          return __swift_storeEnumTagSinglePayload(v37, v38, 1, v36);
        }
LABEL_37:
        v29 = (unsigned int *)MEMORY[0x24BE9FE20];
        goto LABEL_38;
      }
    }
    __break(1u);
    goto LABEL_42;
  }
  v20 = DateComponents.hasYearOnly()();
  v21 = *(void (**)(char *, uint64_t))(v8 + 8);
  v21(v12, v7);
  if (v20)
    goto LABEL_17;
  if (v13)
  {
    v46 = a2;
    v47 = a4;
    swift_bridgeObjectRetain();
    v30 = 0;
    while (1)
    {
      v49 = *(_BYTE *)(a1 + v30 + 32);
      if (ContactNLv3Intent.NLContactAttributesValue.rawValue.getter() == 0x657275747566
        && v31 == 0xE600000000000000)
      {
        break;
      }
      v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v33 & 1) != 0)
        goto LABEL_33;
      if (v13 == ++v30)
      {
        swift_bridgeObjectRelease();
        a2 = v46;
        a4 = v47;
        goto LABEL_30;
      }
    }
    swift_bridgeObjectRelease();
LABEL_33:
    swift_bridgeObjectRelease();
    v39 = v45;
    v19(v45, v46, v7);
    v21(v39, v7);
    a4 = v47;
  }
  else
  {
LABEL_30:
    v34 = v45;
    v19(v45, a2, v7);
    v35 = DateComponents.hasYearOnly()();
    v21(v34, v7);
    if (!v35)
    {
      v36 = type metadata accessor for TerminalElement.Qualifier();
      v37 = a4;
      v38 = 1;
      return __swift_storeEnumTagSinglePayload(v37, v38, 1, v36);
    }
  }
  result = DateComponents.year.getter();
  if ((v40 & 1) != 0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v41 = result;
  result = DateComponents.year.getter();
  if ((v42 & 1) == 0)
  {
    v43 = result;
    v27 = type metadata accessor for TerminalElement.Qualifier();
    v28 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v27 - 8) + 104);
    if (v41 >= v43)
      goto LABEL_20;
    goto LABEL_37;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t static DateTimeUtil.calendarComponent(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v4 = type metadata accessor for TerminalElement.Period();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == *MEMORY[0x24BE9FD78])
  {
    v9 = (unsigned int *)MEMORY[0x24BDCF260];
  }
  else if (v8 == *MEMORY[0x24BE9FD70])
  {
    v9 = (unsigned int *)MEMORY[0x24BDCF258];
  }
  else if (v8 == *MEMORY[0x24BE9FD48])
  {
    v9 = (unsigned int *)MEMORY[0x24BDCF230];
  }
  else if (v8 == *MEMORY[0x24BE9FD40])
  {
    v9 = (unsigned int *)MEMORY[0x24BDCF220];
  }
  else if (v8 == *MEMORY[0x24BE9FD50])
  {
    v9 = (unsigned int *)MEMORY[0x24BDCF1E8];
  }
  else if (v8 == *MEMORY[0x24BE9FD60])
  {
    v9 = (unsigned int *)MEMORY[0x24BDCF250];
  }
  else
  {
    if (v8 != *MEMORY[0x24BE9FD58])
    {
      v13 = type metadata accessor for Calendar.Component();
      __swift_storeEnumTagSinglePayload(a2, 1, 1, v13);
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    v9 = (unsigned int *)MEMORY[0x24BDCF240];
  }
  v10 = *v9;
  v11 = type metadata accessor for Calendar.Component();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(a2, v10, v11);
  return __swift_storeEnumTagSinglePayload(a2, 0, 1, v11);
}

id static DateTimeUtil.ageDateTime(for:nlQuantity:qualifier:)(void (*a1)(_QWORD, _QWORD, _QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD, _QWORD, _QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  char v41;
  id v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  void (*v46)(_QWORD, _QWORD, _QWORD);
  char v47;
  void (*v48)(_QWORD, _QWORD, _QWORD);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(_QWORD, _QWORD, _QWORD);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(_QWORD, _QWORD, _QWORD);
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98;
  void (*v99)(char *, uint64_t);
  void (*v100)(char *, uint64_t);
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(_QWORD, _QWORD, _QWORD);
  uint64_t v117;
  uint64_t v118;
  void (*v119)(_QWORD, _QWORD, _QWORD);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

  v124 = a2;
  v125 = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.Qualifier?);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_37_9(v6, v98);
  v7 = type metadata accessor for TerminalElement.Qualifier();
  v8 = *(_QWORD *)(v7 - 8);
  v121 = v7;
  v122 = v8;
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_39_5();
  OUTLINED_FUNCTION_19_16(v12);
  v13 = type metadata accessor for TimeZone();
  v114 = *(_QWORD *)(v13 - 8);
  v115 = v13;
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_9_5();
  v113 = v15;
  v123 = OUTLINED_FUNCTION_12_7();
  v120 = *(_QWORD *)(v123 - 8);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v16);
  OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_68();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v18);
  OUTLINED_FUNCTION_68();
  v117 = v19;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_39_5();
  v119 = v21;
  v112 = type metadata accessor for Calendar.Component();
  v111 = *(_QWORD *)(v112 - 8);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_1_11();
  MEMORY[0x24BDAC7A8](v23);
  v25 = (char *)&v98 - v24;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_55_0();
  v29 = v28 - v27;
  v30 = type metadata accessor for Date();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = MEMORY[0x24BDAC7A8](v30);
  v34 = (char *)&v98 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v32);
  v36 = (char *)&v98 - v35;
  v37 = OUTLINED_FUNCTION_54_7();
  v38 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  OUTLINED_FUNCTION_59_4();
  static Calendar.gregorianCurrent.getter();
  static Date.startOfToday.getter();
  v116 = a1;
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  v39 = v30;
  v40 = *(void (**)(char *, uint64_t))(v31 + 8);
  v40(v34, v39);
  OUTLINED_FUNCTION_6_2(v29, 1, v39);
  if (v41)
  {
    OUTLINED_FUNCTION_48_5(v3, *(uint64_t (**)(uint64_t, uint64_t))(v38 + 8));
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v29, (uint64_t *)&demangling cache variable for type metadata for Date?);
    return 0;
  }
  else
  {
    v103 = v38;
    v104 = v37;
    v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v31 + 32);
    v124 = v39;
    OUTLINED_FUNCTION_69_8((uint64_t)v36, v29, v43);
    v44 = v111;
    v45 = v112;
    (*(void (**)(char *, _QWORD, uint64_t))(v111 + 104))(v25, *MEMORY[0x24BDCF240], v112);
    v46 = v116;
    v47 = MEMORY[0x2207D5A20](v116, v25);
    v99 = *(void (**)(char *, uint64_t))(v44 + 8);
    v99(v25, v45);
    Calendar.timeZone.getter();
    v102 = v36;
    v101 = v3;
    v100 = v40;
    if ((v47 & 1) != 0)
    {
      v48 = v119;
      OUTLINED_FUNCTION_60_5();
      OUTLINED_FUNCTION_43_7();
      DateComponents.month.setter();
      DateComponents.day.setter();
      v49 = v121;
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v50 = OUTLINED_FUNCTION_26();
      __swift_project_value_buffer(v50, (uint64_t)static Logger.siriContacts);
      v51 = v122;
      v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v122 + 16);
      v53 = (uint64_t)v106;
      OUTLINED_FUNCTION_57_3((uint64_t)v106);
      Logger.logObject.getter();
      v54 = OUTLINED_FUNCTION_54_2();
      if (OUTLINED_FUNCTION_23_13(v54))
      {
        v55 = OUTLINED_FUNCTION_1();
        v128 = OUTLINED_FUNCTION_1();
        *(_DWORD *)v55 = 136315394;
        v52(v109, v53, v49);
        v56 = String.init<A>(describing:)();
        v127 = OUTLINED_FUNCTION_39_8(v56, v57);
        OUTLINED_FUNCTION_52_6();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_29_14(v53, *(uint64_t (**)(uint64_t, uint64_t))(v51 + 8));
        *(_WORD *)(v55 + 12) = 2080;
        OUTLINED_FUNCTION_23();
        lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE0], MEMORY[0x24BDCBE28]);
        v58 = dispatch thunk of CustomStringConvertible.description.getter();
        v126 = OUTLINED_FUNCTION_39_8(v58, v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_5();
        OUTLINED_FUNCTION_30_10(&dword_21FE16000, v60, v61, "#getRequestedAgeDateTime user asked for age on year interval. qualifier: %s, date: %s");
        OUTLINED_FUNCTION_47_6();
        OUTLINED_FUNCTION_0();
      }
      OUTLINED_FUNCTION_29_14(v53, *(uint64_t (**)(uint64_t, uint64_t))(v51 + 8));

      v84 = v123;
      v85 = v103;
      OUTLINED_FUNCTION_34_9();
      OUTLINED_FUNCTION_23();
      v86 = v120;
      v87 = v48;
      v88 = v117;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v120 + 16))(v117, v87, v84);
      v89 = v118;
      OUTLINED_FUNCTION_57_3(v118);
      OUTLINED_FUNCTION_32_10();
      v42 = AgeDateTime.__allocating_init(dateComponents:qualifier:)(v88, v89);
      OUTLINED_FUNCTION_46_5((uint64_t)v102);
      OUTLINED_FUNCTION_23_6(v101, *(uint64_t (**)(uint64_t, uint64_t))(v85 + 8));
      (*(void (**)(void (*)(_QWORD, _QWORD, _QWORD), uint64_t))(v86 + 8))(v87, v84);
    }
    else
    {
      v106 = v25;
      v62 = v46;
      v63 = v110;
      OUTLINED_FUNCTION_60_5();
      OUTLINED_FUNCTION_43_7();
      v64 = v120;
      v65 = v121;
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v66 = OUTLINED_FUNCTION_26();
      __swift_project_value_buffer(v66, (uint64_t)static Logger.siriContacts);
      v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16);
      v68 = v105;
      v67(v105, (uint64_t)v62, v45);
      v69 = v45;
      v70 = v107;
      v116 = *(void (**)(_QWORD, _QWORD, _QWORD))(v122 + 16);
      v116(v107, v125, v65);
      v71 = v108;
      v72 = v123;
      v119 = *(void (**)(_QWORD, _QWORD, _QWORD))(v64 + 16);
      v119(v108, v63, v123);
      v73 = v64;
      v74 = Logger.logObject.getter();
      v75 = static os_log_type_t.debug.getter();
      LODWORD(v115) = v75;
      if (os_log_type_enabled(v74, v75))
      {
        v76 = OUTLINED_FUNCTION_1();
        v114 = OUTLINED_FUNCTION_1();
        v128 = v114;
        *(_DWORD *)v76 = 136315650;
        v67((uint64_t)v106, v68, v69);
        v77 = String.init<A>(describing:)();
        v127 = OUTLINED_FUNCTION_39_8(v77, v78);
        OUTLINED_FUNCTION_52_6();
        v79 = v121;
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_27_12();
        *(_WORD *)(v76 + 12) = 2080;
        v116(v109, v70, v79);
        v80 = String.init<A>(describing:)();
        v127 = OUTLINED_FUNCTION_39_8(v80, v81);
        OUTLINED_FUNCTION_52_6();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_29_14(v70, *(uint64_t (**)(uint64_t, uint64_t))(v122 + 8));
        *(_WORD *)(v76 + 22) = 2080;
        lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, (uint64_t (*)(uint64_t))MEMORY[0x24BDCBDE0], MEMORY[0x24BDCBE28]);
        v82 = dispatch thunk of CustomStringConvertible.description.getter();
        v127 = OUTLINED_FUNCTION_39_8(v82, v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_5();
        (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v71, v123);
        _os_log_impl(&dword_21FE16000, v74, (os_log_type_t)v115, "#getRequestedAgeDateTime user asked for age on %s interval. qualifier: %s, date: %s", (uint8_t *)v76, 0x20u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_0();
      }
      OUTLINED_FUNCTION_27_12();
      OUTLINED_FUNCTION_29_14(v70, *(uint64_t (**)(uint64_t, uint64_t))(v122 + 8));
      v90 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
      v90(v71, v72);

      v91 = v101;
      v92 = v116;
      v93 = (uint64_t)v102;
      OUTLINED_FUNCTION_34_9();
      v94 = v117;
      v119(v117, v63, v72);
      v95 = v63;
      v96 = v118;
      v92(v118, v125, v65);
      OUTLINED_FUNCTION_32_10();
      v42 = AgeDateTime.__allocating_init(dateComponents:qualifier:)(v94, v96);
      v90(v95, v72);
      OUTLINED_FUNCTION_46_5(v93);
      (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v91, v104);
    }
  }
  return v42;
}

uint64_t static DateTimeUtil.hemisphere()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[7] = a1;
  v2 = type metadata accessor for DateTimeResolutionContext.Hemisphere();
  v1[8] = v2;
  v1[9] = *(_QWORD *)(v2 - 8);
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  return swift_task_switch();
}

{
  void *v1;
  uint64_t v2;

  *(_QWORD *)(*(_QWORD *)v2 + 120) = a1;
  swift_task_dealloc();
  if (v1)

  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t static DateTimeUtil.hemisphere()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  Class isa;
  void (*v7)(uint64_t);
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE81278]), sel_init);
  *(_QWORD *)(v0 + 96) = v3;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  outlined bridged method (mbnn) of @objc SAGetRequestOrigin.desiredAccuracy.setter(v4, v5, v3);
  type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  isa = NSNumber.init(integerLiteral:)(300).super.super.isa;
  objc_msgSend(v3, sel_setMaxAge_, isa);

  *(_DWORD *)(v0 + 128) = *MEMORY[0x24BE93A18];
  v7 = *(void (**)(uint64_t))(v2 + 104);
  *(_QWORD *)(v0 + 104) = v7;
  v7(v1);
  static AceService.currentAsync.getter();
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v8;
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SABaseCommand);
  *v8 = v0;
  v8[1] = static DateTimeUtil.hemisphere();
  return AceServiceInvokerAsync.submit<A>(_:)();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);

  objc_opt_self();
  v1 = swift_dynamicCastObjCClass();
  v2 = *(void **)(v0 + 120);
  if (v1)
  {
    v3 = (void *)v1;
    v4 = *(void **)(v0 + 96);
    v20 = *(_QWORD *)(v0 + 80);
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 104);
    v5 = *(_DWORD *)(v0 + 128);
    v6 = *(_QWORD *)(v0 + 88);
    v8 = *(_QWORD *)(v0 + 64);
    v7 = *(_QWORD *)(v0 + 72);
    __swift_destroy_boxed_opaque_existential_0(v0 + 16);
    objc_msgSend(v3, sel_latitude);
    v10 = v9;

    OUTLINED_FUNCTION_39(v6, *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
    if (v10 <= 0.0)
      v11 = v5;
    else
      v11 = *MEMORY[0x24BE93A10];
    v21(v20, v11, v8);
  }
  else
  {

    __swift_destroy_boxed_opaque_existential_0(v0 + 16);
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v12 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v12, (uint64_t)static Logger.siriContacts);
    v13 = OUTLINED_FUNCTION_38_6();
    if (OUTLINED_FUNCTION_15_0(v13))
    {
      v14 = (_WORD *)OUTLINED_FUNCTION_1();
      OUTLINED_FUNCTION_54_0(v14);
      OUTLINED_FUNCTION_10_0(&dword_21FE16000, v15, v16, "#getCurrentLocation - submitted SAGetRequestOrigin command but either failed or could not cast to SASetRequestOrigin. returning nil");
      OUTLINED_FUNCTION_0();
    }

  }
  v17 = OUTLINED_FUNCTION_75_4();
  v18(v17);
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void (*v10)(uint64_t, void *);

  __swift_destroy_boxed_opaque_existential_0(v1 + 16);
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v2 = OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_10_1(v2, (uint64_t)static Logger.siriContacts);
  v3 = OUTLINED_FUNCTION_38_6();
  if (OUTLINED_FUNCTION_15_0(v3))
  {
    v4 = (_WORD *)OUTLINED_FUNCTION_1();
    OUTLINED_FUNCTION_54_0(v4);
    OUTLINED_FUNCTION_10_0(&dword_21FE16000, v5, v6, "#getCurrentLocation - submitted SAGetRequestOrigin command but either failed or could not cast to SASetRequestOrigin. returning nil");
    OUTLINED_FUNCTION_0();
  }
  v7 = v0;
  v8 = *(void **)(v1 + 96);

  v9 = OUTLINED_FUNCTION_75_4();
  v10(v9, v8);
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t lazy protocol witness table accessor for type Recommendation<DateTime> and conformance Recommendation<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Recommendation<DateTime> and conformance Recommendation<A>;
  if (!lazy protocol witness table cache variable for type Recommendation<DateTime> and conformance Recommendation<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Recommendation<DateTime>);
    result = MEMORY[0x2207D86A8](MEMORY[0x24BE93680], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Recommendation<DateTime> and conformance Recommendation<A>);
  }
  return result;
}

void outlined bridged method (mbnn) of @objc SAGetRequestOrigin.desiredAccuracy.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = (id)MEMORY[0x2207D7CB8]();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_setDesiredAccuracy_, v4);

}

uint64_t OUTLINED_FUNCTION_8_13()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 168) + 8))(v0, *(_QWORD *)(v1 - 440));
}

uint64_t OUTLINED_FUNCTION_10_15@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 - 440));
}

uint64_t OUTLINED_FUNCTION_19_16@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 256) = a1;
  return 0;
}

uint64_t OUTLINED_FUNCTION_23_14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 184))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_24_16()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v0, v2, v3);
}

uint64_t OUTLINED_FUNCTION_26_17()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 104) + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_27_12()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 - 360))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_29_14@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

void OUTLINED_FUNCTION_30_10(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_31_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_32_10()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v0, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_34_9()
{
  return type metadata accessor for AgeDateTime();
}

void OUTLINED_FUNCTION_37_9(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 208) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_38_6()
{
  return static os_log_type_t.error.getter();
}

uint64_t OUTLINED_FUNCTION_39_8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 112));
}

uint64_t OUTLINED_FUNCTION_43_7()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 240) + 8))(v0, *(_QWORD *)(v1 - 232));
}

uint64_t OUTLINED_FUNCTION_46_5(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 - 352))(a1, *(_QWORD *)(v1 - 160));
}

uint64_t OUTLINED_FUNCTION_47_6()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_48_5@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t OUTLINED_FUNCTION_49_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t OUTLINED_FUNCTION_52_6()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

id OUTLINED_FUNCTION_53_6(uint64_t a1)
{
  uint64_t v1;

  return AgeDateTime.__allocating_init(dateComponents:qualifier:)(v1, a1);
}

uint64_t OUTLINED_FUNCTION_54_7()
{
  return type metadata accessor for Calendar();
}

uint64_t OUTLINED_FUNCTION_56_5(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return outlined destroy of UsoEntity_common_Person.DefinedValues?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_57_3(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, _QWORD, uint64_t);
  uint64_t v2;
  uint64_t v3;

  return v1(a1, *(_QWORD *)(v3 - 152), v2);
}

uint64_t OUTLINED_FUNCTION_60_5()
{
  return Calendar.dateComponents(in:from:)();
}

uint64_t OUTLINED_FUNCTION_62_6(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return outlined destroy of UsoEntity_common_Person.DefinedValues?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_66_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_68_8()
{
  return static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_69_8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_73_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t (*a17)(void))
{
  return a17();
}

uint64_t OUTLINED_FUNCTION_74_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_75_4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t OUTLINED_FUNCTION_76_4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 - 256) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_77_5()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t OUTLINED_FUNCTION_78_4()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_80_4()
{
  return Date.timeIntervalSince(_:)();
}

uint64_t type metadata completion function for ContactAttributeDisambiguationStrategy()
{
  return swift_initClassMetadata2();
}

uint64_t specialized INIntentResolutionResult.typedDisambiguationItems<A>()()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v15;
  _BYTE v16[32];
  uint64_t v17;

  v1 = objc_msgSend(v0, sel_disambiguationItems);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v3 = MEMORY[0x24BEE4AF8];
  v17 = MEMORY[0x24BEE4AF8];
  v4 = *(_QWORD *)(v2 + 16);
  if (v4)
  {
    v5 = v2 + 32;
    swift_bridgeObjectRetain();
    do
    {
      v6 = outlined init with copy of Any(v5, (uint64_t)v16);
      OUTLINED_FUNCTION_133_0(v6, v7, v8);
      type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for INObject);
      v9 = swift_dynamicCast();
      if (!(_DWORD)v9)
      {
        OUTLINED_FUNCTION_133_0(v9, v10, v11);
        type metadata accessor for CNContact(0, &lazy cache variable for type metadata for INCustomObject);
        if (!swift_dynamicCast())
          specialized fatalError(_:file:line:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriContacts/SiriContactsIntents/Extension/Intents/ResolutionResult+SiriContacts.swift", 124, 2, 18);
        if (!(id)INTypedObjectWithCustomObject())
          specialized fatalError(_:file:line:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriContacts/SiriContactsIntents/Extension/Intents/ResolutionResult+SiriContacts.swift", 124, 2, 21);

      }
      v12 = __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
      MEMORY[0x2207D7DC0](v12);
      v13 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= v13 >> 1)
      {
        OUTLINED_FUNCTION_91_2(v13);
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v5 += 32;
      --v4;
    }
    while (v4);
    OUTLINED_FUNCTION_96();
    v3 = v17;
  }
  OUTLINED_FUNCTION_96();
  return v3;
}

{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  _BYTE v9[32];
  _BYTE v10[32];
  uint64_t v11;

  v1 = objc_msgSend(v0, sel_disambiguationItems);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v3 = MEMORY[0x24BEE4AF8];
  v11 = MEMORY[0x24BEE4AF8];
  v4 = *(_QWORD *)(v2 + 16);
  if (v4)
  {
    v5 = v2 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of Any(v5, (uint64_t)v10);
      outlined init with copy of Any((uint64_t)v10, (uint64_t)v9);
      type metadata accessor for ContactAttribute();
      if (!swift_dynamicCast())
      {
        outlined init with copy of Any((uint64_t)v10, (uint64_t)v9);
        type metadata accessor for CNContact(0, &lazy cache variable for type metadata for INCustomObject);
        if (!swift_dynamicCast())
          specialized fatalError(_:file:line:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriContacts/SiriContactsIntents/Extension/Intents/ResolutionResult+SiriContacts.swift", 124, 2, 18);
        if (!(id)INTypedObjectWithCustomObject())
          specialized fatalError(_:file:line:)((uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriContacts/SiriContactsIntents/Extension/Intents/ResolutionResult+SiriContacts.swift", 124, 2, 21);

      }
      v6 = __swift_destroy_boxed_opaque_existential_0((uint64_t)v10);
      MEMORY[0x2207D7DC0](v6);
      if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v5 += 32;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    v3 = v11;
  }
  swift_bridgeObjectRelease();
  return v3;
}

void ContactAttributeDisambiguationStrategy.actionForInput(_:resolveRecord:)()
{
  NSObject *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  unint64_t v25;
  id v26;
  void *v27;
  id v28;
  NSObject *v29;
  NSObject *v30;
  uint64_t v31;
  char v32;
  char v33;
  os_log_type_t v34;
  os_log_type_t v35;
  _WORD *v36;
  const char *v37;
  id v38;
  NSObject *v39;
  os_log_type_t v40;
  _WORD *v41;
  os_log_type_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  OUTLINED_FUNCTION_32();
  v3 = v2;
  v5 = v4;
  v43 = v6;
  v44 = *v1;
  v47 = type metadata accessor for Parse();
  v45 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  OUTLINED_FUNCTION_9_5();
  v46 = v7;
  v8 = type metadata accessor for USOParse();
  v9 = *(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_9_5();
  v48 = v10;
  v11 = type metadata accessor for Input();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_55_0();
  v15 = v14 - v13;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v16 = OUTLINED_FUNCTION_26();
  v17 = __swift_project_value_buffer(v16, (uint64_t)static Logger.siriContacts);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v15, v3, v11);
  v42 = v17;
  Logger.logObject.getter();
  v18 = OUTLINED_FUNCTION_54_2();
  if (os_log_type_enabled(v0, v18))
  {
    v19 = (uint8_t *)OUTLINED_FUNCTION_1();
    OUTLINED_FUNCTION_1();
    *(_DWORD *)v19 = 136315138;
    v20 = Input.description.getter();
    v22 = OUTLINED_FUNCTION_112_1(v20, v21);
    OUTLINED_FUNCTION_55_5(v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_5();
    OUTLINED_FUNCTION_84_3();
    OUTLINED_FUNCTION_43_0(&dword_21FE16000, v0, v18, "#ContactAttributeDisambiguationStrategy input: %s", v19);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }
  OUTLINED_FUNCTION_84_3();

  Input.parse.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v45 + 88))(v46, v47) != *MEMORY[0x24BE98E98])
  {
    OUTLINED_FUNCTION_92(v46, *(uint64_t (**)(uint64_t, uint64_t))(v45 + 8));
    v23 = *(void **)(v44 + 224);
    goto LABEL_9;
  }
  OUTLINED_FUNCTION_92(v46, *(uint64_t (**)(uint64_t, uint64_t))(v45 + 96));
  OUTLINED_FUNCTION_108_0(v48, v46, v9[4]);
  if ((USOParse.isOrdinalDisambiguation.getter() & 1) == 0)
  {
    v23 = *(void **)(v44 + 224);
    type metadata accessor for ParameterResolutionRecord();
    v24 = objc_msgSend((id)ParameterResolutionRecord.intent.getter(), sel_siriMatches);
    OUTLINED_FUNCTION_26_0();
    if (v43)
    {
      type metadata accessor for SiriMatch();
      v25 = OUTLINED_FUNCTION_58_6();

      if (v25 >> 62)
      {
        OUTLINED_FUNCTION_24_11();
        v31 = _CocoaArrayWrapper.endIndex.getter();
        OUTLINED_FUNCTION_5_0();
        if (v31)
          goto LABEL_13;
      }
      else if (*(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_13:
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v25 & 0xC000000000000001) == 0, v25);
        if ((v25 & 0xC000000000000001) != 0)
          v26 = (id)MEMORY[0x2207D80C0](0, v25);
        else
          v26 = *(id *)(v25 + 32);
        v27 = v26;
        OUTLINED_FUNCTION_5_0();
        v28 = objc_msgSend(v27, sel_identifier);
        OUTLINED_FUNCTION_78_5();
        if (v9)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          v30 = v29;

        }
        else
        {
          v30 = 0;
        }
        goto LABEL_21;
      }
      OUTLINED_FUNCTION_5_0();
    }
    v30 = 0;
LABEL_21:
    static ContactAttributeDisambiguationStrategy.isRequestForDifferentContact(_:currentContactId:)();
    v33 = v32;
    OUTLINED_FUNCTION_5_0();
    if ((v33 & 1) != 0)
    {
      v34 = v42;
      Logger.logObject.getter();
      v35 = OUTLINED_FUNCTION_54_2();
      if (OUTLINED_FUNCTION_30_3(v35))
      {
        v36 = (_WORD *)OUTLINED_FUNCTION_1();
        OUTLINED_FUNCTION_54_0(v36);
        v37 = "#ContactAttributeDisambiguationStrategy received request_common_Person for another contact which is not a "
              "disambiguation response, ignoring here.";
        goto LABEL_27;
      }
      goto LABEL_28;
    }
    v38 = objc_msgSend((id)ParameterResolutionRecord.intent.getter(), sel_contactAttributeToGet);
    OUTLINED_FUNCTION_26_0();
    static ContactAttributeDisambiguationStrategy.isRequestForDifferentContactAttribute(_:contactAttributeToGet:)();
    v30 = v39;

    if ((v30 & 1) != 0)
    {
      v34 = v42;
      Logger.logObject.getter();
      v40 = OUTLINED_FUNCTION_54_2();
      if (OUTLINED_FUNCTION_30_3(v40))
      {
        v41 = (_WORD *)OUTLINED_FUNCTION_1();
        OUTLINED_FUNCTION_54_0(v41);
        v37 = "#ContactAttributeDisambiguationStrategy received request for a different contact attribute which is not a "
              "disambiguation response, ignoring here.";
LABEL_27:
        OUTLINED_FUNCTION_15_5(&dword_21FE16000, v30, v34, v37);
        OUTLINED_FUNCTION_0();
      }
LABEL_28:

      static ActionForInput.ignore()();
      goto LABEL_29;
    }
    OUTLINED_FUNCTION_93_1();
LABEL_9:
    static StrategyUtil.getActionForInput<A>(input:intentType:)(v23, v5);
    return;
  }
  static ActionForInput.handle()();
LABEL_29:
  OUTLINED_FUNCTION_93_1();
}

void static ContactAttributeDisambiguationStrategy.isRequestForDifferentContact(_:currentContactId:)()
{
  uint64_t v0;
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject **v26;
  BOOL v27;
  os_log_type_t v28;
  _WORD *v29;
  _QWORD v30[4];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  OUTLINED_FUNCTION_32();
  v2 = v1;
  v4 = v3;
  v5 = OUTLINED_FUNCTION_26();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_55_0();
  v9 = (v8 - v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_2_3();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v30 - v12;
  v34 = MEMORY[0x24BEE4AF8];
  OUTLINED_FUNCTION_63_4((uint64_t)v30 - v12);
  v14 = OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_20_16((uint64_t)v13);
  if (v27)
  {
    outlined destroy of Any?((uint64_t)v13, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_8:
    OUTLINED_FUNCTION_90_2();
    goto LABEL_9;
  }
  Siri_Nlu_External_UserDialogAct.usoTask.getter();
  OUTLINED_FUNCTION_95_1();
  OUTLINED_FUNCTION_78_1((uint64_t)v13, v15);
  if (!v13)
    goto LABEL_8;
  OUTLINED_FUNCTION_26_18();
  v16 = OUTLINED_FUNCTION_2();
  if (!v33)
  {
LABEL_9:
    OUTLINED_FUNCTION_70_7(v16, &demangling cache variable for type metadata for Any?);
    goto LABEL_10;
  }
  OUTLINED_FUNCTION_131();
  if ((OUTLINED_FUNCTION_4_19() & 1) != 0)
  {
    v17 = UsoTask_request_common_Person.contactIds.getter();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_71_6();
    v34 = v17;
    goto LABEL_20;
  }
LABEL_10:
  OUTLINED_FUNCTION_63_4(v0);
  OUTLINED_FUNCTION_20_16(v0);
  if (v27)
  {
    outlined destroy of Any?(v0, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_18:
    OUTLINED_FUNCTION_90_2();
    goto LABEL_19;
  }
  v18 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
  OUTLINED_FUNCTION_78_1(v0, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8));
  if (!v18)
    goto LABEL_18;
  OUTLINED_FUNCTION_26_18();
  v19 = OUTLINED_FUNCTION_2();
  if (!v33)
  {
LABEL_19:
    OUTLINED_FUNCTION_70_7(v19, &demangling cache variable for type metadata for Any?);
    goto LABEL_20;
  }
  OUTLINED_FUNCTION_132_0();
  if ((OUTLINED_FUNCTION_4_19() & 1) != 0)
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    OUTLINED_FUNCTION_66();
    if (v32)
    {
      v20 = UsoEntity_common_Person.contactIds.getter();
      OUTLINED_FUNCTION_66();
      swift_release();
    }
    else
    {
      OUTLINED_FUNCTION_66();
      v20 = MEMORY[0x24BEE4AF8];
    }
    OUTLINED_FUNCTION_71_6();
    v34 = v20;
  }
LABEL_20:
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v21 = __swift_project_value_buffer(v5, (uint64_t)static Logger.siriContacts);
  (*(void (**)(NSObject *, uint64_t, uint64_t))(v6 + 16))(v9, v21, v5);
  OUTLINED_FUNCTION_29();
  Logger.logObject.getter();
  v22 = OUTLINED_FUNCTION_8();
  if (os_log_type_enabled(v9, v22))
  {
    v23 = OUTLINED_FUNCTION_1();
    v32 = OUTLINED_FUNCTION_1();
    *(_DWORD *)v23 = 136315394;
    v30[2] = v9;
    OUTLINED_FUNCTION_23();
    v30[1] = v5;
    v24 = OUTLINED_FUNCTION_23_9();
    MEMORY[0x2207D7DE4](v24, MEMORY[0x24BEE0D00]);
    v30[0] = v6;
    v30[3] = v21;
    OUTLINED_FUNCTION_167();
    v31 = OUTLINED_FUNCTION_89_0();
    OUTLINED_FUNCTION_87_3();
    OUTLINED_FUNCTION_18_0();
    *(_WORD *)(v23 + 12) = 2080;
    OUTLINED_FUNCTION_24_11();
    v31 = OUTLINED_FUNCTION_89_0();
    OUTLINED_FUNCTION_87_3();
    OUTLINED_FUNCTION_30();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FE16000, v9, v22, "#GCADisambiguationStrategy isRequestForDifferentContact contactIds: %s, current is %s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0();
  }

  OUTLINED_FUNCTION_30();
  (*(void (**)(NSObject *, uint64_t))(v6 + 8))(v9, v5);
  OUTLINED_FUNCTION_23();
  v25 = *(_QWORD *)(v34 + 16);
  if (v25)
  {
    if (v2)
    {
      v26 = (NSObject **)(v34 + 40);
      while (1)
      {
        v27 = *(v26 - 1) == v4 && *v26 == v2;
        if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          break;
        v26 += 2;
        if (!--v25)
        {
          OUTLINED_FUNCTION_5();
          goto LABEL_39;
        }
      }
    }
  }
  else
  {
    Logger.logObject.getter();
    v28 = OUTLINED_FUNCTION_54_2();
    if (OUTLINED_FUNCTION_30_3(v28))
    {
      v29 = (_WORD *)OUTLINED_FUNCTION_1();
      OUTLINED_FUNCTION_54_0(v29);
      OUTLINED_FUNCTION_15_5(&dword_21FE16000, v2, (os_log_type_t)v21, "#GCADisambiguationStrategy isRequestForDifferentContact no contact IDs found in response parse, treating as follow-up for same contact");
      OUTLINED_FUNCTION_0();
    }

  }
  swift_bridgeObjectRelease();
LABEL_39:
  OUTLINED_FUNCTION_7();
}

void static ContactAttributeDisambiguationStrategy.isRequestForDifferentContactAttribute(_:contactAttributeToGet:)()
{
  uint8_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  void *v23;
  uint8_t *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  os_log_type_t v37;
  _WORD *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  BOOL v43;
  os_log_type_t v44;
  _WORD *v45;
  os_log_type_t v46;
  _WORD *v48;
  os_log_type_t v49;
  _WORD *v51;
  os_log_type_t v52;
  _WORD *v53;
  _QWORD v54[3];
  void *v55;
  uint64_t v56;
  uint8_t *v57;
  uint64_t v58[3];
  uint64_t v59;
  uint64_t v60;

  OUTLINED_FUNCTION_32();
  v55 = v2;
  v3 = OUTLINED_FUNCTION_38_7();
  LOBYTE(v4) = v3;
  v5 = *(NSObject **)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_5_2();
  v54[2] = v6;
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_18_9();
  MEMORY[0x24BDAC7A8](v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_2_3();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (uint8_t *)v54 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (uint8_t *)v54 - v14;
  v60 = MEMORY[0x24BEE4AF8];
  OUTLINED_FUNCTION_63_4((uint64_t)v54 - v14);
  v16 = OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_20_16((uint64_t)v15);
  if (v43)
  {
    outlined destroy of Any?((uint64_t)v15, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_9:
    OUTLINED_FUNCTION_90_2();
    goto LABEL_10;
  }
  v0 = v15;
  Siri_Nlu_External_UserDialogAct.usoTask.getter();
  OUTLINED_FUNCTION_95_1();
  OUTLINED_FUNCTION_78_1((uint64_t)v15, v17);
  if (!v15)
    goto LABEL_9;
  OUTLINED_FUNCTION_26_18();
  v18 = OUTLINED_FUNCTION_2();
  if (!v59)
  {
LABEL_10:
    OUTLINED_FUNCTION_70_7(v18, &demangling cache variable for type metadata for Any?);
    goto LABEL_11;
  }
  OUTLINED_FUNCTION_131();
  if ((OUTLINED_FUNCTION_4_19() & 1) != 0)
  {
    v0 = v57;
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    OUTLINED_FUNCTION_2();
    if (v58[0])
    {
      v54[1] = v0;
      OUTLINED_FUNCTION_113_0();
    }
    swift_release();
  }
LABEL_11:
  OUTLINED_FUNCTION_63_4((uint64_t)v13);
  OUTLINED_FUNCTION_20_16((uint64_t)v13);
  if (v43)
  {
    outlined destroy of Any?((uint64_t)v13, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_19:
    OUTLINED_FUNCTION_90_2();
    goto LABEL_20;
  }
  v0 = v13;
  Siri_Nlu_External_UserDialogAct.usoTask.getter();
  OUTLINED_FUNCTION_95_1();
  OUTLINED_FUNCTION_78_1((uint64_t)v13, v19);
  if (!v13)
    goto LABEL_19;
  OUTLINED_FUNCTION_26_18();
  v20 = OUTLINED_FUNCTION_2();
  if (!v59)
  {
LABEL_20:
    OUTLINED_FUNCTION_70_7(v20, &demangling cache variable for type metadata for Any?);
    goto LABEL_21;
  }
  OUTLINED_FUNCTION_132_0();
  if ((OUTLINED_FUNCTION_4_19() & 1) != 0)
  {
    v21 = v57;
    swift_retain();
    v0 = v21;
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    OUTLINED_FUNCTION_46();
    if (v58[0])
      OUTLINED_FUNCTION_113_0();
    OUTLINED_FUNCTION_46();
  }
LABEL_21:
  OUTLINED_FUNCTION_63_4(v1);
  OUTLINED_FUNCTION_20_16(v1);
  if (v43)
  {
    outlined destroy of Any?(v1, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_29:
    OUTLINED_FUNCTION_90_2();
    v23 = v55;
    goto LABEL_30;
  }
  v0 = (uint8_t *)Siri_Nlu_External_UserDialogAct.usoTask.getter();
  OUTLINED_FUNCTION_78_1(v1, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8));
  if (!v0)
    goto LABEL_29;
  OUTLINED_FUNCTION_26_18();
  v22 = OUTLINED_FUNCTION_2();
  v23 = v55;
  if (v59)
  {
    type metadata accessor for UsoTask_checkExistence_common_Person();
    if ((OUTLINED_FUNCTION_4_19() & 1) != 0)
    {
      v24 = v57;
      swift_retain();
      v0 = v24;
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      OUTLINED_FUNCTION_21_9();
      if (v58[0])
        OUTLINED_FUNCTION_113_0();
      OUTLINED_FUNCTION_21_9();
    }
    goto LABEL_31;
  }
LABEL_30:
  OUTLINED_FUNCTION_70_7(v22, &demangling cache variable for type metadata for Any?);
LABEL_31:
  if (!*(_QWORD *)(v60 + 16))
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v36 = OUTLINED_FUNCTION_26();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.siriContacts);
    OUTLINED_FUNCTION_70();
    v37 = OUTLINED_FUNCTION_54_2();
    if (OUTLINED_FUNCTION_3_14(v37))
    {
      v38 = (_WORD *)OUTLINED_FUNCTION_1();
      OUTLINED_FUNCTION_96_1(v38);
      v39 = "#GCADisambiguationStrategy isRequestForDifferentContactAttribute no relevant namespace candidates found, returning true";
      goto LABEL_59;
    }
    goto LABEL_60;
  }
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v25 = OUTLINED_FUNCTION_26();
  v0 = (uint8_t *)__swift_project_value_buffer(v25, (uint64_t)static Logger.siriContacts);
  v4 = v23;
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = OUTLINED_FUNCTION_1();
    v58[0] = OUTLINED_FUNCTION_1();
    *(_DWORD *)v28 = 136315394;
    OUTLINED_FUNCTION_23();
    v29 = swift_bridgeObjectRetain();
    v30 = MEMORY[0x2207D7DE4](v29, &type metadata for UsoIdentifierNamespace);
    v32 = v31;
    OUTLINED_FUNCTION_117();
    v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_5_0();
    *(_WORD *)(v28 + 12) = 2080;
    v56 = (uint64_t)v55;
    v33 = v4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContactAttribute?);
    v34 = String.init<A>(describing:)();
    v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    OUTLINED_FUNCTION_117();
    _os_log_impl(&dword_21FE16000, v26, v27, "#GCADisambiguationStrategy isRequestForDifferentContactAttribute follow-up namespaces: %s, current is %s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0();
  }

  OUTLINED_FUNCTION_23();
  v40 = v60;
  v5 = *(NSObject **)(v60 + 16);
  if (!v5)
    goto LABEL_57;
  OUTLINED_FUNCTION_23_9();
  v41 = 0;
  while (1)
  {
    v42 = *(unsigned __int8 *)(v40 + v41 + 32);
    if (v42 != 5)
      break;
    if (v23 && OUTLINED_FUNCTION_72_4() == (id)3)
    {
      OUTLINED_FUNCTION_167();
      Logger.logObject.getter();
      v49 = OUTLINED_FUNCTION_54_2();
      if (!OUTLINED_FUNCTION_3_14(v49))
        goto LABEL_60;
      v51 = (_WORD *)OUTLINED_FUNCTION_1();
      OUTLINED_FUNCTION_96_1(v51);
      v39 = "#GCADisambiguationStrategy isRequestForDifferentContactAttribute matched to postal address request, returning false";
LABEL_59:
      OUTLINED_FUNCTION_31(&dword_21FE16000, v5, (os_log_type_t)v4, v39, v0);
      OUTLINED_FUNCTION_0();
    }
LABEL_55:
    if (v5 == ++v41)
    {
      OUTLINED_FUNCTION_167();
LABEL_57:
      Logger.logObject.getter();
      v44 = OUTLINED_FUNCTION_54_2();
      if (OUTLINED_FUNCTION_3_14(v44))
      {
        v45 = (_WORD *)OUTLINED_FUNCTION_1();
        OUTLINED_FUNCTION_96_1(v45);
        v39 = "#GCADisambiguationStrategy isRequestForDifferentContactAttribute returning true";
        goto LABEL_59;
      }
      goto LABEL_60;
    }
  }
  if (v42 == 4)
  {
    if (v23 && OUTLINED_FUNCTION_72_4() == (id)1)
    {
      OUTLINED_FUNCTION_167();
      Logger.logObject.getter();
      v52 = OUTLINED_FUNCTION_54_2();
      if (!OUTLINED_FUNCTION_3_14(v52))
        goto LABEL_60;
      v53 = (_WORD *)OUTLINED_FUNCTION_1();
      OUTLINED_FUNCTION_96_1(v53);
      v39 = "#GCADisambiguationStrategy isRequestForDifferentContactAttribute matched to email request, returning false";
      goto LABEL_59;
    }
    goto LABEL_55;
  }
  v43 = v42 != 3 || v23 == 0;
  if (v43 || OUTLINED_FUNCTION_72_4() != (id)2)
    goto LABEL_55;
  OUTLINED_FUNCTION_167();
  Logger.logObject.getter();
  v46 = OUTLINED_FUNCTION_54_2();
  if (OUTLINED_FUNCTION_3_14(v46))
  {
    v48 = (_WORD *)OUTLINED_FUNCTION_1();
    OUTLINED_FUNCTION_96_1(v48);
    v39 = "#GCADisambiguationStrategy isRequestForDifferentContactAttribute matched to phone number request, returning false";
    goto LABEL_59;
  }
LABEL_60:

  OUTLINED_FUNCTION_71_6();
  OUTLINED_FUNCTION_7();
}

uint64_t ContactAttributeDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[4] = a1;
  v2 = type metadata accessor for ParameterResolutionRecord();
  v1[5] = v2;
  v1[6] = *(_QWORD *)(v2 - 8);
  v1[7] = OUTLINED_FUNCTION_0_0();
  v1[8] = OUTLINED_FUNCTION_78_3();
  v1[9] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ContactAttributeDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t *v17;
  uint8_t *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v31;
  NSObject *v32;
  _QWORD *v33;
  uint64_t v34;

  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v2 = v0[8];
  v1 = v0[9];
  v3 = (id)static Signpost.contactsLog;
  OUTLINED_FUNCTION_64_5();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_104_1();
  OUTLINED_FUNCTION_76_5();
  v4 = v1 + *(int *)(v2 + 20);
  *(_QWORD *)v4 = "MakeDisambiguationItemContainer";
  *(_QWORD *)(v4 + 8) = 31;
  *(_BYTE *)(v4 + 16) = 2;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v5 = v0 + 3;
  v33 = v0;
  v7 = v0 + 4;
  v6 = v0[4];
  v9 = v0[6];
  v8 = v7[3];
  v10 = v7[1];
  v11 = OUTLINED_FUNCTION_26();
  v12 = __swift_project_value_buffer(v11, (uint64_t)static Logger.siriContacts);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v6, v10);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.debug.getter();
  v15 = os_log_type_enabled(v13, v14);
  v16 = v7[2];
  if (v15)
  {
    v32 = v13;
    v17 = v5;
    v18 = (uint8_t *)OUTLINED_FUNCTION_1();
    v31 = (_QWORD *)OUTLINED_FUNCTION_1();
    *(_DWORD *)v18 = 138412290;
    v19 = ParameterResolutionRecord.result.getter();
    *v17 = v19;
    OUTLINED_FUNCTION_20_7();
    *v31 = v19;
    OUTLINED_FUNCTION_29_15(*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8));
    OUTLINED_FUNCTION_43_0(&dword_21FE16000, v32, v14, "#ContactAttributeDisambiguationStrategy Intent resolution result: %@", v18);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }
  OUTLINED_FUNCTION_29_15(*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8));

  ParameterResolutionRecord.result.getter();
  specialized INIntentResolutionResult.typedDisambiguationItems<A>()();
  OUTLINED_FUNCTION_78_5();
  OUTLINED_FUNCTION_29();
  v20 = v12;
  Logger.logObject.getter();
  v21 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_53(v21))
  {
    v22 = (uint8_t *)OUTLINED_FUNCTION_1();
    v34 = OUTLINED_FUNCTION_1();
    *(_DWORD *)v22 = 136315138;
    v23 = OUTLINED_FUNCTION_73_7();
    v24 = swift_bridgeObjectRetain();
    v25 = MEMORY[0x2207D7DE4](v24, v23);
    v27 = v26;
    OUTLINED_FUNCTION_55_1();
    v33[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v34);
    OUTLINED_FUNCTION_86_2();
    OUTLINED_FUNCTION_117();
    OUTLINED_FUNCTION_30();
    OUTLINED_FUNCTION_43_0(&dword_21FE16000, v20, (os_log_type_t)v7, "#ContactAttributeDisambiguationStrategy Contact attributes retrieved from disambiguation items: %s", v22);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }
  OUTLINED_FUNCTION_30();

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BasicDisambiguationItemContainer<ContactAttribute>);
  v28 = BasicDisambiguationItemContainer.__allocating_init(_:_:)();
  static os_signpost_type_t.end.getter();
  v29 = os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_117_0(v29, (uint64_t (*)(_QWORD))type metadata accessor for Signpost.OpenSignpost);
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_45_0();
  return ((uint64_t (*)(uint64_t))v33[1])(v28);
}

uint64_t ContactAttributeDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5[27] = a4;
  v5[28] = v4;
  v5[25] = a2;
  v5[26] = a3;
  v5[24] = a1;
  v6 = *v4;
  type metadata accessor for ContactNLv3Intent();
  v5[29] = OUTLINED_FUNCTION_0_0();
  v7 = type metadata accessor for NLIntent();
  v5[30] = v7;
  v5[31] = *(_QWORD *)(v7 - 8);
  v5[32] = OUTLINED_FUNCTION_9_1();
  v5[33] = OUTLINED_FUNCTION_25_0();
  v5[34] = *(_QWORD *)(v6 + 224);
  v8 = type metadata accessor for ParameterResolutionRecord();
  v5[35] = v8;
  v5[36] = *(_QWORD *)(v8 - 8);
  v5[37] = OUTLINED_FUNCTION_0_0();
  v9 = type metadata accessor for IntentPromptAnswer();
  v5[38] = v9;
  v5[39] = *(_QWORD *)(v9 - 8);
  v5[40] = OUTLINED_FUNCTION_9_1();
  v5[41] = OUTLINED_FUNCTION_25_0();
  v10 = type metadata accessor for USOParse();
  v5[42] = v10;
  v5[43] = *(_QWORD *)(v10 - 8);
  v5[44] = OUTLINED_FUNCTION_0_0();
  v11 = type metadata accessor for Parse();
  v5[45] = v11;
  v5[46] = *(_QWORD *)(v11 - 8);
  v5[47] = OUTLINED_FUNCTION_9_1();
  v5[48] = OUTLINED_FUNCTION_25_0();
  v12 = type metadata accessor for Input();
  v5[49] = v12;
  v5[50] = *(_QWORD *)(v12 - 8);
  v5[51] = OUTLINED_FUNCTION_0_0();
  v5[52] = OUTLINED_FUNCTION_78_3();
  v5[53] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_2_9();
}

uint64_t ContactAttributeDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  void *v29;
  NSObject *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  NSObject *v42;
  uint64_t isa;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  os_log_type_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint8_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  os_log_type_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint8_t *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  os_log_type_t v99;
  _BOOL4 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint8_t *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  os_log_type_t v121;
  uint64_t v122;
  void *v123;
  void *v124;
  void *v125;
  NSObject *v126;
  id v127;
  void *v128;
  id v129;
  SEL v130;
  id v131;
  os_log_type_t v132;
  uint8_t *v133;
  id v134;
  NSObject *v135;
  os_log_type_t v136;
  _WORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  id v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(uint64_t, uint64_t);
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  __int128 v153;
  __int128 v154;
  Swift::Int_optional v155;

  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 416);
  v1 = *(_QWORD *)(v0 + 424);
  v3 = (id)static Signpost.contactsLog;
  OUTLINED_FUNCTION_64_5();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_104_1();
  OUTLINED_FUNCTION_76_5();
  v4 = *(int *)(v2 + 20);
  *(_DWORD *)(v0 + 464) = v4;
  v5 = v1 + v4;
  *(_QWORD *)v5 = "ParseDisambiguationResult";
  *(_QWORD *)(v5 + 8) = 25;
  *(_BYTE *)(v5 + 16) = 2;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v7 = *(_QWORD *)(v0 + 400);
  v6 = *(_QWORD *)(v0 + 408);
  v8 = *(NSObject **)(v0 + 392);
  v9 = *(_QWORD *)(v0 + 200);
  v10 = OUTLINED_FUNCTION_26();
  *(_QWORD *)(v0 + 432) = __swift_project_value_buffer(v10, (uint64_t)static Logger.siriContacts);
  (*(void (**)(uint64_t, uint64_t, NSObject *))(v7 + 16))(v6, v9, v8);
  Logger.logObject.getter();
  v11 = OUTLINED_FUNCTION_54_2();
  v12 = OUTLINED_FUNCTION_3_14(v11);
  v13 = *(_QWORD *)(v0 + 400);
  if (v12)
  {
    v14 = (uint8_t *)OUTLINED_FUNCTION_1();
    *(_QWORD *)&v153 = OUTLINED_FUNCTION_1();
    *(_DWORD *)v14 = 136315138;
    Input.parse.getter();
    v15 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, (uint64_t *)&v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_29_15(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
    OUTLINED_FUNCTION_43_0(&dword_21FE16000, v8, (os_log_type_t)v9, "#ContactAttributeDisambiguationStrategy Running parseDisambiguationResult() %s", v14);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }
  OUTLINED_FUNCTION_29_15(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));

  v18 = *(_QWORD *)(v0 + 368);
  v17 = *(_QWORD *)(v0 + 376);
  v19 = *(_QWORD *)(v0 + 360);
  *(_QWORD *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = 0;
  Input.parse.getter();
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 88))(v17, v19);
  if (v20 == *MEMORY[0x24BE98E08])
  {
    v21 = *(_QWORD *)(v0 + 376);
    v23 = *(_QWORD *)(v0 + 256);
    v22 = *(_QWORD *)(v0 + 264);
    v24 = *(_QWORD *)(v0 + 248);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 368) + 96))(v21, *(_QWORD *)(v0 + 360));
    OUTLINED_FUNCTION_108_0(v22, v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 32));
    OUTLINED_FUNCTION_108_0(v23, v22, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 16));
    ContactNLv3Intent.init(intent:)();
    v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<ContactAttribute>);
    v26 = PaginatedItemContainer.items.getter();
    v27 = OUTLINED_FUNCTION_73_7();
    v28 = MEMORY[0x2207D7E14](v26, v27);
    OUTLINED_FUNCTION_5();
    v155 = ContactNLv3Intent.arrayIndexForReference(arrayLength:)(v28);
    if (v155.is_nil || v155.value < 0 || v155.value >= v28)
    {
      v57 = ContactNLv3Intent.requestedContactAttributeLabel.getter();
      if (v58)
      {
        v59 = v57;
        v60 = v58;
        *(_QWORD *)(v0 + 40) = v57;
        *(_QWORD *)(v0 + 48) = v58;
        OUTLINED_FUNCTION_29();
        OUTLINED_FUNCTION_49_10();
        v61 = OUTLINED_FUNCTION_54_2();
        v62 = OUTLINED_FUNCTION_3_14(v61);
        v63 = *(_QWORD *)(v0 + 264);
        v64 = *(_QWORD *)(v0 + 240);
        v65 = *(_QWORD *)(v0 + 248);
        v66 = *(_QWORD *)(v0 + 232);
        if (v62)
        {
          v150 = *(_QWORD *)(v0 + 232);
          v149 = *(_QWORD *)(v0 + 248);
          v67 = (uint8_t *)OUTLINED_FUNCTION_1();
          *(_QWORD *)&v153 = OUTLINED_FUNCTION_1();
          *(_DWORD *)v67 = 136315138;
          *(_QWORD *)(v0 + 104) = v59;
          *(_QWORD *)(v0 + 112) = v60;
          swift_bridgeObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
          v68 = OUTLINED_FUNCTION_60_6();
          *(_QWORD *)(v0 + 120) = OUTLINED_FUNCTION_69_9(v68, v69, v70, v71, v72, v73, v74, v75, v146, v0 + 120, v63, v149, v150, v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          OUTLINED_FUNCTION_96();
          OUTLINED_FUNCTION_30();
          OUTLINED_FUNCTION_43_0(&dword_21FE16000, v25, (os_log_type_t)v27, "#ContactAttributeDisambiguationStrategy User selected attribute label by semantic reference: %s", v67);
          OUTLINED_FUNCTION_16();
          OUTLINED_FUNCTION_0();
        }

        OUTLINED_FUNCTION_30();
        outlined destroy of Signpost.OpenSignpost(v66, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
        (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v63, v64);
      }
      else
      {
        v76 = *(_QWORD *)(v0 + 264);
        v77 = *(_QWORD *)(v0 + 240);
        v78 = *(_QWORD *)(v0 + 248);
        outlined destroy of Signpost.OpenSignpost(*(_QWORD *)(v0 + 232), (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
        (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v76, v77);
      }
    }
    else
    {
      v29 = (void *)PaginatedItemContainer.items.getter();
      Array.subscript.getter();
      OUTLINED_FUNCTION_5();
      v30 = *(NSObject **)(v0 + 128);
      v31 = -[NSObject handleLabel](v30, sel_handleLabel);
      OUTLINED_FUNCTION_26_0();
      if (v29)
      {
        v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v34 = v33;

      }
      else
      {
        v32 = 0;
        v34 = 0;
      }
      *(_QWORD *)(v0 + 40) = v32;
      *(_QWORD *)(v0 + 48) = v34;
      OUTLINED_FUNCTION_29();
      OUTLINED_FUNCTION_49_10();
      v99 = OUTLINED_FUNCTION_54_2();
      v100 = OUTLINED_FUNCTION_3_14(v99);
      v101 = *(_QWORD *)(v0 + 264);
      v102 = *(_QWORD *)(v0 + 240);
      v103 = *(_QWORD *)(v0 + 248);
      v104 = *(_QWORD *)(v0 + 232);
      if (v100)
      {
        v151 = *(_QWORD *)(v0 + 248);
        v105 = (uint8_t *)OUTLINED_FUNCTION_1();
        *(_QWORD *)&v153 = OUTLINED_FUNCTION_1();
        *(_DWORD *)v105 = 136315138;
        *(_QWORD *)(v0 + 88) = v32;
        *(_QWORD *)(v0 + 96) = v34;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        v106 = OUTLINED_FUNCTION_60_6();
        *(_QWORD *)(v0 + 144) = OUTLINED_FUNCTION_69_9(v106, v107, v108, v109, v110, v111, v112, v113, v146, v147, v148, v104, v101, v151);
        OUTLINED_FUNCTION_20_7();
        OUTLINED_FUNCTION_96();
        OUTLINED_FUNCTION_30();
        OUTLINED_FUNCTION_43_0(&dword_21FE16000, v30, (os_log_type_t)v27, "#ContactAttributeDisambiguationStrategy User selected attribute label by ordinal reference: %s", v105);
        OUTLINED_FUNCTION_16();
        OUTLINED_FUNCTION_0();
      }

      v114 = OUTLINED_FUNCTION_30();
      OUTLINED_FUNCTION_107_1(v114, (uint64_t (*)(_QWORD))type metadata accessor for ContactNLv3Intent);
      (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v101, v102);
    }
  }
  else
  {
    v35 = *(_QWORD *)(v0 + 368);
    v36 = *(_QWORD *)(v0 + 376);
    v37 = *(_QWORD *)(v0 + 360);
    if (v20 == *MEMORY[0x24BE98E98])
    {
      v39 = *(_QWORD *)(v0 + 344);
      v38 = *(_QWORD *)(v0 + 352);
      v40 = *(_QWORD *)(v0 + 336);
      v41 = *(NSObject **)(v0 + 224);
      (*(void (**)(_QWORD, uint64_t))(v35 + 96))(*(_QWORD *)(v0 + 376), v37);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 32))(v38, v36, v40);
      v42 = v41 + 21;
      isa = (uint64_t)v41[24].isa;
      v44 = (char *)v41[25].isa;
      __swift_project_boxed_opaque_existential_1(&v41[21].isa, isa);
      if (RRReferenceResolverProtocol.resolveAttributeDisambiguationReference(from:)(v38, isa, v44))
      {
        v45 = MEMORY[0x2207D6D10]();
        v47 = v46;
        *(_QWORD *)(v0 + 40) = v45;
        *(_QWORD *)(v0 + 48) = v46;
        OUTLINED_FUNCTION_29();
        v48 = OUTLINED_FUNCTION_49_10();
        v49 = static os_log_type_t.debug.getter();
        v50 = os_log_type_enabled(v48, v49);
        v52 = *(_QWORD *)(v0 + 344);
        v51 = *(_QWORD *)(v0 + 352);
        v53 = *(_QWORD *)(v0 + 336);
        if (v50)
        {
          v54 = (uint8_t *)OUTLINED_FUNCTION_1();
          *(_QWORD *)&v153 = OUTLINED_FUNCTION_1();
          *(_DWORD *)v54 = 136315138;
          *(_QWORD *)(v0 + 56) = v45;
          *(_QWORD *)(v0 + 64) = v47;
          swift_bridgeObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
          v55 = String.init<A>(describing:)();
          *(_QWORD *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, (uint64_t *)&v153);
          OUTLINED_FUNCTION_86_2();
          OUTLINED_FUNCTION_5_0();
          OUTLINED_FUNCTION_30();
          OUTLINED_FUNCTION_43_0(&dword_21FE16000, v48, v49, "#ContactAttributeDisambiguationStrategy User selected attribute with label: %s", v54);
          OUTLINED_FUNCTION_16();
          OUTLINED_FUNCTION_0();
        }
        OUTLINED_FUNCTION_46();

        OUTLINED_FUNCTION_30();
        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v53);
      }
      else
      {
        v79 = *(_QWORD *)(v0 + 352);
        v80 = (void *)ParameterResolutionRecord.intent.getter();
        v81 = objc_msgSend(v80, sel_contactAttributeToGet);

        v82 = ContactAttributeDisambiguationStrategy.extractContactAttribute(_:fromParse:)();
        v84 = v83;

        if (!v84)
        {
          v115 = ParameterResolutionRecord.intent.getter();
          *(_QWORD *)(v0 + 440) = v115;
          v116 = (_QWORD *)swift_task_alloc();
          *(_QWORD *)(v0 + 448) = v116;
          *v116 = v0;
          v116[1] = ContactAttributeDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:);
          return USOParse.toSiriKitIntent(previousIntent:referenceResolver:)(v115, (uint64_t)&protocol witness table for GetContactAttributeIntent, (uint64_t)v42);
        }
        *(_QWORD *)(v0 + 40) = v82;
        *(_QWORD *)(v0 + 48) = v84;
        OUTLINED_FUNCTION_29();
        OUTLINED_FUNCTION_49_10();
        v85 = OUTLINED_FUNCTION_54_2();
        v86 = OUTLINED_FUNCTION_3_14(v85);
        v88 = *(_QWORD *)(v0 + 344);
        v87 = *(_QWORD *)(v0 + 352);
        v89 = *(_QWORD *)(v0 + 336);
        if (v86)
        {
          v90 = (uint8_t *)OUTLINED_FUNCTION_1();
          *(_QWORD *)&v153 = OUTLINED_FUNCTION_1();
          *(_DWORD *)v90 = 136315138;
          *(_QWORD *)(v0 + 72) = v82;
          *(_QWORD *)(v0 + 80) = v84;
          swift_bridgeObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
          v91 = OUTLINED_FUNCTION_60_6();
          *(_QWORD *)(v0 + 160) = OUTLINED_FUNCTION_69_9(v91, v92, v93, v94, v95, v96, v97, v98, v146, v147, v148, v0 + 160, v88, v87);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          OUTLINED_FUNCTION_96();
          OUTLINED_FUNCTION_30();
          OUTLINED_FUNCTION_43_0(&dword_21FE16000, v42, (os_log_type_t)v79, "#ContactAttributeDisambiguationStrategy User selected attribute with label: %s", v90);
          OUTLINED_FUNCTION_16();
          OUTLINED_FUNCTION_0();
        }

        OUTLINED_FUNCTION_30();
        (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v87, v89);
      }
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t))(v35 + 8))(*(_QWORD *)(v0 + 376), v37);
    }
  }
  OUTLINED_FUNCTION_23();
  v118 = *(_QWORD *)(v0 + 48);
  if (!v118)
    goto LABEL_37;
  v119 = *(_QWORD *)(v0 + 40);
  OUTLINED_FUNCTION_24_11();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaginatedItemContainer<ContactAttribute>);
  *(_QWORD *)(v0 + 152) = PaginatedItemContainer.items.getter();
  v120 = swift_task_alloc();
  v121 = v120;
  *(_QWORD *)(v120 + 16) = v119;
  *(_QWORD *)(v120 + 24) = v118;
  v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ContactAttribute]);
  MEMORY[0x2207D86A8](MEMORY[0x24BEE12C8], v122);
  Sequence.first(where:)();
  OUTLINED_FUNCTION_45_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_5();
  v123 = *(void **)(v0 + 168);
  if (v123)
  {
    v124 = (void *)OUTLINED_FUNCTION_116();
    objc_msgSend(v124, sel_setContactHandleMatches_, 0);

    v125 = (void *)OUTLINED_FUNCTION_116();
    objc_msgSend(v125, sel_setContactHandleAlternatives_, 0);

    v126 = OUTLINED_FUNCTION_116();
    v127 = v123;
    v128 = (void *)MEMORY[0x2207D7CB8](0xD000000000000015, 0x800000021FEDFA10);
    OUTLINED_FUNCTION_104_1();
    objc_msgSend(v129, v130);

    v131 = v127;
    OUTLINED_FUNCTION_49_10();
    v132 = OUTLINED_FUNCTION_8();
    if (OUTLINED_FUNCTION_42(v132))
    {
      v133 = (uint8_t *)OUTLINED_FUNCTION_1();
      v152 = (_QWORD *)OUTLINED_FUNCTION_1();
      *(_DWORD *)v133 = 138412290;
      *(_QWORD *)(v0 + 136) = v131;
      v134 = v131;
      OUTLINED_FUNCTION_86_2();
      *v152 = v123;

      OUTLINED_FUNCTION_43_0(&dword_21FE16000, v126, v121, "#ContactAttributeDisambiguationStrategy Returning user-selected contact attribute: %@.", v133);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }

    v141 = *(_QWORD *)(v0 + 272);
    *((_QWORD *)&v154 + 1) = OUTLINED_FUNCTION_73_7();
    *(_QWORD *)&v153 = v131;
    v142 = v131;
    ParameterResolutionRecord.intent.getter();
    IntentPromptAnswer.init(answeredValue:updatedIntent:)();
    OUTLINED_FUNCTION_102_1();
    static DisambiguationResult.chosenItem(_:)();

    v143 = OUTLINED_FUNCTION_102_1();
    v145(v143, v144);
  }
  else
  {
LABEL_37:
    v135 = OUTLINED_FUNCTION_49_10();
    v136 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v135, v136))
    {
      v137 = (_WORD *)OUTLINED_FUNCTION_1();
      OUTLINED_FUNCTION_54_0(v137);
      OUTLINED_FUNCTION_15_5(&dword_21FE16000, v135, v136, "#ContactAttributeDisambiguationStrategy No matching contact attribute found, returning nil.");
      OUTLINED_FUNCTION_0();
    }
    v139 = *(_QWORD *)(v0 + 312);
    v138 = *(_QWORD *)(v0 + 320);
    v140 = *(_QWORD *)(v0 + 304);
    v141 = *(_QWORD *)(v0 + 272);

    v153 = 0u;
    v154 = 0u;
    ParameterResolutionRecord.intent.getter();
    IntentPromptAnswer.init(answeredValue:updatedIntent:)();
    static DisambiguationResult.chosenItem(_:)();
    (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v138, v140);
  }
  OUTLINED_FUNCTION_30_11();
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v141, (uint64_t (*)(_QWORD))type metadata accessor for Signpost.OpenSignpost);
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  os_log_type_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _WORD *v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = *(NSObject **)(v1 + 432);
  Logger.logObject.getter();
  v3 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_15_0(v3))
  {
    v4 = (_WORD *)OUTLINED_FUNCTION_1();
    OUTLINED_FUNCTION_54_0(v4);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_15_5(&dword_21FE16000, v2, v0, "#ContactAttributeDisambiguationStrategy User either did not select an option or we could not resolve their selection, returning nil");
    OUTLINED_FUNCTION_0();
  }

  swift_bridgeObjectRelease();
  v5 = *(void **)(v1 + 456);
  if (v5)
  {
    v6 = swift_dynamicCastClass();
    if (v6)
      v7 = v5;
  }
  else
  {
    v6 = 0;
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 288) + 16))(*(_QWORD *)(v1 + 296), *(_QWORD *)(v1 + 216), *(_QWORD *)(v1 + 280));
  if (!v6)
    ParameterResolutionRecord.intent.getter();
  v8 = *(void **)(v1 + 456);
  v9 = *(_QWORD *)(v1 + 344);
  v13 = *(_QWORD *)(v1 + 352);
  v11 = *(_QWORD *)(v1 + 304);
  v10 = *(_QWORD *)(v1 + 312);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 288) + 8))(*(_QWORD *)(v1 + 296), *(_QWORD *)(v1 + 280));
  IntentPromptAnswer.init(answeredValue:updatedIntent:)();
  OUTLINED_FUNCTION_134_0();
  static DisambiguationResult.chosenItem(_:)();

  OUTLINED_FUNCTION_74_5(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
  OUTLINED_FUNCTION_35_1(v13, *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
  OUTLINED_FUNCTION_30_11();
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v11, (uint64_t (*)(_QWORD))type metadata accessor for Signpost.OpenSignpost);
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t ContactAttributeDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(*(_QWORD *)v1 + 440);
  *(_QWORD *)(*(_QWORD *)v1 + 456) = a1;
  swift_task_dealloc();

  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t closure #1 in ContactAttributeDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(void **a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v1 = outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(*a1);
  if (v2)
  {
    v1 = String.sanitizeCNLabel.getter();
    v4 = v3;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = 0;
  }
  String.sanitizeCNLabel.getter();
  v5 = String.convertToContactAttributeLabel.getter();
  v7 = v6;
  swift_bridgeObjectRelease();
  if (v4)
  {
    if (v1 == v5 && v4 == v7)
      v9 = 1;
    else
      v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = 0;
  }
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t ContactAttributeDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ContactAttributeSnippetModel;
  uint64_t v10;

  v4[25] = a3;
  v4[26] = v3;
  v4[24] = a1;
  v4[27] = *v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v4[28] = OUTLINED_FUNCTION_0_0();
  v5 = type metadata accessor for TemplatingResult();
  v4[29] = v5;
  v4[30] = *(_QWORD *)(v5 - 8);
  v4[31] = OUTLINED_FUNCTION_0_0();
  type metadata accessor for DialogPhase();
  v4[32] = OUTLINED_FUNCTION_0_0();
  v6 = type metadata accessor for OutputGenerationManifest();
  v4[33] = v6;
  v4[34] = *(_QWORD *)(v6 - 8);
  v4[35] = OUTLINED_FUNCTION_0_0();
  type metadata accessor for CATOption();
  v4[36] = OUTLINED_FUNCTION_0_0();
  v7 = type metadata accessor for ContactsSnippetPluginModel();
  v4[37] = v7;
  v4[38] = *(_QWORD *)(v7 - 8);
  v4[39] = OUTLINED_FUNCTION_0_0();
  v8 = type metadata accessor for Locale();
  v4[40] = v8;
  v4[41] = *(_QWORD *)(v8 - 8);
  v4[42] = OUTLINED_FUNCTION_9_1();
  v4[43] = OUTLINED_FUNCTION_25_0();
  v4[44] = OUTLINED_FUNCTION_25_0();
  ContactAttributeSnippetModel = type metadata accessor for GetContactAttributeSnippetModel();
  v4[45] = ContactAttributeSnippetModel;
  v4[46] = *(_QWORD *)(ContactAttributeSnippetModel - 8);
  v4[47] = OUTLINED_FUNCTION_0_0();
  v10 = type metadata accessor for NLContextUpdate();
  v4[48] = v10;
  v4[49] = *(_QWORD *)(v10 - 8);
  v4[50] = OUTLINED_FUNCTION_0_0();
  v4[51] = OUTLINED_FUNCTION_78_3();
  v4[52] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ContactAttributeDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  int v28;
  void *v29;
  id v30;
  id v31;
  NSObject *v32;
  uint8_t *v33;
  id v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t (*v42)(void);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  uint64_t v54;
  void *v55;
  id v56;
  uint64_t v57;
  Class isa;
  NSObject *v59;
  uint64_t v60;
  os_log_type_t v61;
  _WORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  _QWORD *v71;
  id v72;
  id v73;
  os_log_type_t v74;
  uint64_t v75;
  NSObject *v76;
  uint64_t v77;
  os_log_type_t v78;
  uint8_t *v79;
  id v80;
  id v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint8_t *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  NSObject *v127;
  uint64_t v128;
  uint64_t v129;
  os_log_type_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  id v137;
  void *v138;
  id v139;
  uint64_t v140[2];

  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 408);
  v1 = *(_QWORD *)(v0 + 416);
  v3 = (id)static Signpost.contactsLog;
  OUTLINED_FUNCTION_64_5();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_104_1();
  OUTLINED_FUNCTION_76_5();
  v4 = *(int *)(v2 + 20);
  *(_DWORD *)(v0 + 552) = v4;
  v5 = v1 + v4;
  *(_QWORD *)v5 = "MakePromptForDisambiguation";
  *(_QWORD *)(v5 + 8) = 27;
  *(_BYTE *)(v5 + 16) = 2;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v6 = OUTLINED_FUNCTION_26();
  v7 = __swift_project_value_buffer(v6, (uint64_t)static Logger.siriContacts);
  v8 = OUTLINED_FUNCTION_70();
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)OUTLINED_FUNCTION_1();
    *(_WORD *)v10 = 0;
    OUTLINED_FUNCTION_31(&dword_21FE16000, v8, v9, "#ContactAttributeDisambiguationStrategy Running makePromptForDisambiguation()", v10);
    OUTLINED_FUNCTION_0();
  }
  v11 = *(_QWORD *)(v0 + 216);

  type metadata accessor for ParameterResolutionRecord();
  v12 = ParameterResolutionRecord.intent.getter();
  v13 = objc_msgSend((id)v12, sel_siriMatches);
  OUTLINED_FUNCTION_78_5();
  if (!v11)
    goto LABEL_14;
  type metadata accessor for SiriMatch();
  static Array._unconditionallyBridgeFromObjectiveC(_:)();
  OUTLINED_FUNCTION_80_1();
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v12 & 0xC000000000000001) == 0, v12);
  v14 = (v12 & 0xC000000000000001) != 0 ? (id)MEMORY[0x2207D80C0](0, v12) : *(id *)(v12 + 32);
  v15 = v14;
  OUTLINED_FUNCTION_5();
  v16 = objc_msgSend(v15, sel_identifier);

  if (!v16)
  {
LABEL_14:
    OUTLINED_FUNCTION_68_9();
    lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (uint64_t (*)(uint64_t))type metadata accessor for ContactsError, (uint64_t)&protocol conformance descriptor for ContactsError);
    OUTLINED_FUNCTION_4_0();
LABEL_21:
    swift_storeEnumTagMultiPayload();
    OUTLINED_FUNCTION_114_0();
LABEL_22:
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    OUTLINED_FUNCTION_47_7();
    OUTLINED_FUNCTION_117_0(v41, (uint64_t (*)(_QWORD))type metadata accessor for Signpost.OpenSignpost);
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_45_0();
    OUTLINED_FUNCTION_17_0();
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_24_0();
    OUTLINED_FUNCTION_23_0();
    OUTLINED_FUNCTION_22_0();
    OUTLINED_FUNCTION_14_0();
    swift_task_dealloc();
    OUTLINED_FUNCTION_25_2();
    OUTLINED_FUNCTION_24_2();
    v42 = *(uint64_t (**)(void))(v0 + 8);
    return v42();
  }
  v17 = *(void **)(v0 + 200);
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v20 = v19;

  v21 = objc_msgSend((id)OUTLINED_FUNCTION_66_9(), sel_isMe);
  OUTLINED_FUNCTION_80_1();
  if (v17 && (LOBYTE(v140[0]) = 2, MEMORY[0x2207D7E38](v17, v140), v17, (v140[0] & 1) != 0))
  {
    __swift_project_boxed_opaque_existential_1((_QWORD *)(*(_QWORD *)(v0 + 208) + 56), *(_QWORD *)(*(_QWORD *)(v0 + 208) + 80));
    v26 = OUTLINED_FUNCTION_102_1();
    v25 = v27(v26);
    v28 = 1;
  }
  else
  {
    v22 = *(_QWORD **)(v0 + 208);
    v23 = v22[10];
    v24 = v22[11];
    __swift_project_boxed_opaque_existential_1(v22 + 7, v23);
    v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 8))(v18, v20, v23, v24);
    v28 = 0;
  }
  *(_BYTE *)(v0 + 556) = v28;
  *(_QWORD *)(v0 + 424) = v25;
  if (!v25)
  {
    OUTLINED_FUNCTION_68_9();
    lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (uint64_t (*)(uint64_t))type metadata accessor for ContactsError, (uint64_t)&protocol conformance descriptor for ContactsError);
    OUTLINED_FUNCTION_4_0();
    *v40 = v18;
    v40[1] = v20;
    goto LABEL_21;
  }
  v138 = (void *)v25;
  OUTLINED_FUNCTION_9_0();
  v29 = (void *)OUTLINED_FUNCTION_66_9();
  v30 = objc_msgSend(v29, sel_contactAttributeToGet);
  *(_QWORD *)(v0 + 432) = v30;

  if (!v30)
  {
    OUTLINED_FUNCTION_68_9();
    lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (uint64_t (*)(uint64_t))type metadata accessor for ContactsError, (uint64_t)&protocol conformance descriptor for ContactsError);
    OUTLINED_FUNCTION_4_0();
    swift_storeEnumTagMultiPayload();
    v44 = OUTLINED_FUNCTION_114_0();
    OUTLINED_FUNCTION_110_1(v44, v45, v46, v47, v48, v49, v50, v51, v111, v112, v114, v117, v119, v123, v126, v129, v132, v135, v138);
    goto LABEL_22;
  }
  v31 = v30;
  v32 = OUTLINED_FUNCTION_121();
  v130 = static os_log_type_t.debug.getter();
  v136 = (uint64_t)v31;
  v133 = v28;
  if (os_log_type_enabled(v32, v130))
  {
    v127 = v32;
    v33 = (uint8_t *)OUTLINED_FUNCTION_1();
    v140[0] = OUTLINED_FUNCTION_1();
    *(_DWORD *)v33 = 136315138;
    v120 = v33;
    v34 = v31;
    v35 = v0;
    v36 = objc_msgSend(v34, sel_description);
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v39 = v38;

    *(_QWORD *)(v35 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, v140);
    OUTLINED_FUNCTION_20_7();
    OUTLINED_FUNCTION_96();

    OUTLINED_FUNCTION_43_0(&dword_21FE16000, v127, v130, "#ContactAttributeDisambiguationStrategy Attempting to create views for %s disambiguation.", v120);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }

  v52 = *(void **)(v0 + 200);
  v53 = objc_msgSend((id)OUTLINED_FUNCTION_66_9(), sel_contactHandleMatches);
  OUTLINED_FUNCTION_80_1();
  if (v52)
  {
    OUTLINED_FUNCTION_73_7();
    v54 = OUTLINED_FUNCTION_58_6();

  }
  else
  {
    v54 = 0;
  }
  *(_QWORD *)(v0 + 440) = v54;
  v55 = *(void **)(v0 + 200);
  v56 = objc_msgSend((id)OUTLINED_FUNCTION_66_9(), sel_contactHandleAlternatives);
  OUTLINED_FUNCTION_80_1();
  if (v55)
  {
    OUTLINED_FUNCTION_73_7();
    v57 = OUTLINED_FUNCTION_58_6();

  }
  else
  {
    v57 = 0;
  }
  *(_QWORD *)(v0 + 448) = v57;
  isa = *(Class *)(v0 + 400);
  v59 = *(NSObject **)(v0 + 208);
  v131 = v57;
  v60 = specialized ContactsStrategy.handles(matches:alternatives:)(v54, v57);
  *(_QWORD *)(v0 + 456) = v60;
  static ContactsContextProvider.getContactAttribute(contact:handles:contactAttributeType:needsSDA:)(v138, v60, objc_msgSend(v31, sel_contactAttributeType), 1);
  if ((ContactsStrategy.isSmartEnabled.getter() & 1) == 0)
  {
    v128 = v54;
    v72 = objc_msgSend((id)OUTLINED_FUNCTION_66_9(), sel_isMe);
    OUTLINED_FUNCTION_78_5();
    if (!isa)
    {
      type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
    }
    v73 = v31;
    static Device.current.getter();
    v74 = type metadata accessor for ContactsLabelCATs();
    static CATOption.defaultMode.getter();
    v75 = CATWrapper.__allocating_init(options:globals:)();
    *(_QWORD *)(v0 + 16) = v60;
    *(_QWORD *)(v0 + 24) = v138;
    *(_QWORD *)(v0 + 32) = isa;
    *(_QWORD *)(v0 + 40) = v73;
    *(_QWORD *)(v0 + 88) = v75;
    v137 = v138;
    v76 = (v0 + 16);
    specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:)();
    v118 = v77;
    outlined destroy of GetContactAttributeViewBuilder((id *)(v0 + 16));
    v139 = v73;
    OUTLINED_FUNCTION_121();
    v78 = OUTLINED_FUNCTION_8();
    if (OUTLINED_FUNCTION_42(v78))
    {
      v121 = (uint64_t *)(v0 + 176);
      v79 = (uint8_t *)OUTLINED_FUNCTION_1();
      v140[0] = OUTLINED_FUNCTION_1();
      *(_DWORD *)v79 = 136315138;
      v80 = v139;
      v81 = objc_msgSend(v80, sel_description);
      v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v84 = v83;

      *v121 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v84, v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      OUTLINED_FUNCTION_43_0(&dword_21FE16000, v76, v74, "#ContactAttributeDisambiguationStrategy Attempting to create dialog for %s disambiguation.", v79);
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }

    v85 = *(_QWORD *)(v0 + 328);
    v86 = *(_QWORD *)(v0 + 336);
    v87 = *(_QWORD *)(v0 + 248);
    v88 = *(_QWORD *)(v0 + 208);
    v122 = *(_QWORD *)(v0 + 320);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v88 + 16), *(_QWORD *)(v88 + 40));
    OUTLINED_FUNCTION_98_1();
    v89 = Locale.identifier.getter();
    v91 = v90;
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v86, v122);
    OUTLINED_FUNCTION_77_2((_QWORD *)(v88 + 16));
    v92 = OUTLINED_FUNCTION_103_1();
    GetContactAttributeCATs.disambiguateLabeledAttribute(matches:alternatives:attribute:contact:isMe:localeString:isVoiceMode:)(v128, v131, v139, v137, v133, v89, v91, v92 & 1, v87);
    v134 = *(_QWORD *)(v0 + 392);
    v93 = *(_QWORD *)(v0 + 384);
    v113 = *(_QWORD *)(v0 + 248);
    v115 = *(_QWORD *)(v0 + 240);
    v94 = *(_QWORD *)(v0 + 224);
    v124 = *(_QWORD *)(v0 + 232);
    v95 = *(_QWORD *)(v0 + 400);
    v96 = *(uint64_t **)(v0 + 192);
    OUTLINED_FUNCTION_23_5();
    OUTLINED_FUNCTION_167();
    OUTLINED_FUNCTION_9_0();
    v97 = v88 + 16;
    OUTLINED_FUNCTION_77_2((_QWORD *)(v88 + 16));
    OUTLINED_FUNCTION_103_1();
    v98 = v134;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v134 + 16))(v94, v95, v93);
    __swift_storeEnumTagSinglePayload(v94, 0, 1, v93);
    v99 = type metadata accessor for AceOutput();
    *(_OWORD *)(v0 + 112) = 0u;
    *(_QWORD *)(v0 + 128) = 0;
    *(_OWORD *)(v0 + 96) = 0u;
    v100 = MEMORY[0x24BE99088];
    v96[3] = v99;
    v96[4] = v100;
    __swift_allocate_boxed_opaque_existential_1(v96);
    v101 = v113;
    static AceOutputHelper.makeClarificationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    OUTLINED_FUNCTION_5();

    OUTLINED_FUNCTION_110_1(v102, v103, v104, v105, v106, v107, v108, v109, v0 + 96, v113, v115, v118, v97, v124, v128, v131, v134, (uint64_t)v137, v139);
    outlined destroy of Any?(v0 + 96, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of Any?(v94, &demangling cache variable for type metadata for NLContextUpdate?);
    (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v101, v125);
    (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v95, v93);
    static os_signpost_type_t.end.getter();
    v110 = os_signpost(_:dso:log:name:signpostID:)();
    OUTLINED_FUNCTION_107_1(v110, (uint64_t (*)(_QWORD))type metadata accessor for Signpost.OpenSignpost);
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_24_0();
    OUTLINED_FUNCTION_23_0();
    OUTLINED_FUNCTION_22_0();
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_45_0();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_25_2();
    OUTLINED_FUNCTION_24_2();
    v42 = *(uint64_t (**)(void))(v0 + 8);
    return v42();
  }
  OUTLINED_FUNCTION_121();
  v61 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_15_0(v61))
  {
    v62 = (_WORD *)OUTLINED_FUNCTION_1();
    OUTLINED_FUNCTION_54_0(v62);
    OUTLINED_FUNCTION_15_5(&dword_21FE16000, v59, v7, "#ContactAttributeDisambiguationStrategy makeIntentHandledResponse constructing SMART snippet");
    OUTLINED_FUNCTION_0();
  }
  v63 = *(_QWORD *)(v0 + 352);
  v64 = *(_QWORD *)(v0 + 328);
  v65 = *(_QWORD **)(v0 + 208);

  __swift_project_boxed_opaque_existential_1(v65 + 2, v65[5]);
  OUTLINED_FUNCTION_134_0();
  dispatch thunk of DeviceState.siriLocale.getter();
  v66 = Locale.identifier.getter();
  v68 = v67;
  *(_QWORD *)(v0 + 464) = v67;
  v69 = *(uint64_t (**)(uint64_t, uint64_t))(v64 + 8);
  *(_QWORD *)(v0 + 472) = v69;
  OUTLINED_FUNCTION_35_1(v63, v69);
  v70 = v65[15];
  v71 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 480) = v71;
  *v71 = v0;
  v71[1] = ContactAttributeDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
  return static GetContactAttributeSnippetModel.from(_:requestedAttribute:handlesToReturn:locale:mockGlobals:)(*(_QWORD *)(v0 + 376), (uint64_t)v138, v136, v60, v66, v68, v70);
}

{
  OUTLINED_FUNCTION_29_5();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_2_9();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v1 = *(void (**)(uint64_t))(v0 + 472);
  v12 = *(_QWORD *)(v0 + 424);
  v2 = *(_QWORD *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 304);
  v5 = *(_QWORD *)(v0 + 208);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 368) + 16))(v2, *(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 360));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v2, *MEMORY[0x24BE91C80], v3);
  type metadata accessor for GetContactAttributeCATsModern();
  static CATOption.defaultMode.getter();
  *(_QWORD *)(v0 + 488) = CATWrapperSimple.__allocating_init(options:globals:)();
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 40));
  OUTLINED_FUNCTION_98_1();
  v6 = Locale.identifier.getter();
  v8 = v7;
  *(_QWORD *)(v0 + 496) = v7;
  v9 = OUTLINED_FUNCTION_134_0();
  v1(v9);
  OUTLINED_FUNCTION_77_2((_QWORD *)(v5 + 16));
  LOBYTE(v2) = OUTLINED_FUNCTION_103_1();
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 504) = v10;
  *v10 = v0;
  v10[1] = ContactAttributeDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
  return GetContactAttributeCATsModern.disambiguateLabeledAttribute(matches:alternatives:attribute:contact:isMe:localeString:isVoiceMode:)(*(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 432), v12, *(_BYTE *)(v0 + 556), v6, v8, v2 & 1);
}

{
  uint64_t *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v9;
  id v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t *, uint64_t, uint64_t);
  uint64_t v15;

  v1 = (void *)v0[65];
  v2 = v0[50];
  v3 = v0[39];
  v13 = v0[38];
  v4 = v0[37];
  v5 = v0[26];
  static DialogPhase.clarification.getter();
  v6 = (_QWORD *)swift_task_alloc();
  v6[2] = v5;
  v6[3] = v2;
  v6[4] = v3;
  OutputGenerationManifest.init(dialogPhase:_:)();
  OUTLINED_FUNCTION_12_0();
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  v0[66] = ResponseFactory.init()();
  v0[20] = v4;
  lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy(&lazy protocol witness table cache variable for type ContactsSnippetPluginModel and conformance ContactsSnippetPluginModel, (uint64_t (*)(uint64_t))MEMORY[0x24BE91C90], MEMORY[0x24BE91C68]);
  v0[21] = v7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 17);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v13 + 16))(boxed_opaque_existential_1, v3, v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_21FED8AB0;
  *(_QWORD *)(v9 + 32) = v1;
  v15 = v9;
  specialized Array._endMutation()();
  v0[67] = v15;
  v14 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))((int)*MEMORY[0x24BE97EE0] + MEMORY[0x24BE97EE0]);
  v10 = v1;
  v11 = (_QWORD *)swift_task_alloc();
  v0[68] = (uint64_t)v11;
  *v11 = v0;
  v11[1] = ContactAttributeDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:);
  return v14(v0[24], v0 + 17, v15, v0[35]);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_29_5();
  v1 = v0 + 136;
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_67_1();
  OUTLINED_FUNCTION_5_0();
  __swift_destroy_boxed_opaque_existential_0(v1);
  OUTLINED_FUNCTION_20_0();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(void **)(v0 + 424);
  v2 = *(void **)(v0 + 432);
  v22 = *(_QWORD *)(v0 + 384);
  v23 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 304);
  v20 = *(_QWORD *)(v0 + 312);
  v21 = *(_QWORD *)(v0 + 392);
  v19 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 272);
  v5 = *(_QWORD *)(v0 + 280);
  v6 = *(_QWORD *)(v0 + 264);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  v7 = OUTLINED_FUNCTION_102_1();
  v8(v7);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v20, v19);
  OUTLINED_FUNCTION_19_0(v9, v10, v11, v12, v13, v14, v15, v16, v19, v20, v21, v22, v23);
  static os_signpost_type_t.end.getter();
  v17 = os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_107_1(v17, (uint64_t (*)(_QWORD))type metadata accessor for Signpost.OpenSignpost);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_2_0(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(void **)(v0 + 424);
  v17 = *(_QWORD *)(v0 + 392);
  v18 = *(_QWORD *)(v0 + 384);
  v19 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 304);
  v4 = *(_QWORD *)(v0 + 312);

  OUTLINED_FUNCTION_74_5(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  v5 = OUTLINED_FUNCTION_78_1(v4, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_19_0(v5, v6, v7, v8, v9, v10, v11, v12, v15, v16, v17, v18, v19);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_47_7();
  OUTLINED_FUNCTION_117_0(v13, (uint64_t (*)(_QWORD))type metadata accessor for Signpost.OpenSignpost);
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  return OUTLINED_FUNCTION_2_0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t ContactAttributeDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 512) = v1;
  swift_task_dealloc();
  if (v1)
  {
    OUTLINED_FUNCTION_55_1();
    OUTLINED_FUNCTION_9_0();
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_21_9();
  }
  else
  {
    OUTLINED_FUNCTION_18_0();
    OUTLINED_FUNCTION_21_9();
    *(_QWORD *)(v4 + 520) = a1;
    OUTLINED_FUNCTION_55_1();
    OUTLINED_FUNCTION_9_0();
  }
  OUTLINED_FUNCTION_20_0();
  return swift_task_switch();
}

uint64_t closure #1 in ContactAttributeDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  OutputGenerationManifest.canUseServerTTS.setter();
  __swift_project_boxed_opaque_existential_1((_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 40));
  DeviceState.isVox.getter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  v8 = type metadata accessor for NLContextUpdate();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v7, a3, v8);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v8);
  OutputGenerationManifest.nlContextUpdate.setter();
  ContactsSnippetPluginModel.responseViewID.getter();
  return OutputGenerationManifest.responseViewId.setter();
}

uint64_t ContactAttributeDisambiguationStrategy.extractContactAttribute(_:fromParse:)()
{
  NSObject *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  os_log_type_t v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  _WORD *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  OUTLINED_FUNCTION_32();
  v27 = v2;
  v28 = v3;
  v4 = v1;
  v6 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_55_0();
  v10 = v9 - v8;
  USOParse.preferredUserDialogAct.getter(v9 - v8);
  v11 = OUTLINED_FUNCTION_130_0();
  OUTLINED_FUNCTION_6_2(v10, 1, v11);
  if (v12)
  {
    outlined destroy of Any?(v10, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  }
  else
  {
    v6 = v10;
    v0 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
    OUTLINED_FUNCTION_74_5(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8));
    if (v0)
    {
      v6 = v4;
      v13 = ContactAttributeDisambiguationStrategy.extractContactAddress(from:intendedAttribute:)();
      if (v14)
      {
        v15 = v13;
        v16 = v14;
        if (one-time initialization token for siriContacts != -1)
          swift_once();
        v17 = OUTLINED_FUNCTION_26();
        v18 = __swift_project_value_buffer(v17, (uint64_t)static Logger.siriContacts);
        OUTLINED_FUNCTION_29();
        Logger.logObject.getter();
        v19 = OUTLINED_FUNCTION_8();
        if (OUTLINED_FUNCTION_53(v19))
        {
          v20 = (uint8_t *)OUTLINED_FUNCTION_1();
          v26 = OUTLINED_FUNCTION_1();
          *(_DWORD *)v20 = 136315138;
          OUTLINED_FUNCTION_23_9();
          v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v26);
          OUTLINED_FUNCTION_55_5(v21);
          OUTLINED_FUNCTION_86_2();
          swift_bridgeObjectRelease_n();
          OUTLINED_FUNCTION_43_0(&dword_21FE16000, v18, (os_log_type_t)v11, "#GCAContactAttributeDisambiguationStrategy extracted contactAddress from parse as %s", v20);
          OUTLINED_FUNCTION_16();
          OUTLINED_FUNCTION_0();
        }

        OUTLINED_FUNCTION_30();
        swift_release();
        return v15;
      }
      swift_release();
    }
  }
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v22 = OUTLINED_FUNCTION_26();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.siriContacts);
  OUTLINED_FUNCTION_70();
  v23 = OUTLINED_FUNCTION_54_2();
  if (OUTLINED_FUNCTION_30_3(v23))
  {
    v24 = (_WORD *)OUTLINED_FUNCTION_1();
    OUTLINED_FUNCTION_54_0(v24);
    OUTLINED_FUNCTION_15_5(&dword_21FE16000, v0, v6, "#GCAContactAttributeDisambiguationStrategy Could not obtain contactAddress from UsoParse, returning nil");
    OUTLINED_FUNCTION_0();
  }

  return 0;
}

uint64_t ContactAttributeDisambiguationStrategy.extractContactAddress(from:intendedAttribute:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_BYTE *, uint64_t);
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  _BYTE v35[32];
  _BYTE v36[24];
  uint64_t v37;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  OUTLINED_FUNCTION_28();
  v2 = MEMORY[0x24BDAC7A8](v1);
  v4 = &v35[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = MEMORY[0x24BDAC7A8](v2);
  v7 = &v35[-v6];
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_18_9();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = &v35[-v10];
  MEMORY[0x24BDAC7A8](v9);
  v13 = &v35[-v12];
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v37)
    goto LABEL_30;
  outlined init with copy of Any?((uint64_t)v36, (uint64_t)v35);
  OUTLINED_FUNCTION_132_0();
  if (OUTLINED_FUNCTION_14_17())
  {
    OUTLINED_FUNCTION_37_10();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    v14 = OUTLINED_FUNCTION_67_1();
    if (v34)
    {
      v15 = MEMORY[0x2207D6AAC](v14);
      OUTLINED_FUNCTION_2();
      if (v15)
      {
        v16 = OUTLINED_FUNCTION_62_7();
        specialized Collection.first.getter(v16, (uint64_t)v13);
        OUTLINED_FUNCTION_5_0();
        v17 = OUTLINED_FUNCTION_38_7();
        OUTLINED_FUNCTION_6_2((uint64_t)v13, 1, v17);
        if (!v18)
        {
          UsoIdentifier.value.getter();
          OUTLINED_FUNCTION_12_19();
          OUTLINED_FUNCTION_45();
          v27 = *(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
          v28 = v13;
LABEL_38:
          v32 = v17;
LABEL_41:
          v27(v28, v32);
          goto LABEL_42;
        }
        v19 = (uint64_t)v13;
        goto LABEL_20;
      }
    }
    goto LABEL_28;
  }
  OUTLINED_FUNCTION_131();
  if (OUTLINED_FUNCTION_14_17())
  {
    OUTLINED_FUNCTION_37_10();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    v20 = OUTLINED_FUNCTION_67_1();
    if (v34)
    {
      v21 = MEMORY[0x2207D6AAC](v20);
      OUTLINED_FUNCTION_2();
      if (v21)
      {
        v16 = OUTLINED_FUNCTION_62_7();
        specialized Collection.first.getter(v16, (uint64_t)v11);
        OUTLINED_FUNCTION_5_0();
        v17 = OUTLINED_FUNCTION_38_7();
        OUTLINED_FUNCTION_6_2((uint64_t)v11, 1, v17);
        if (!v18)
        {
          UsoIdentifier.value.getter();
          OUTLINED_FUNCTION_12_19();
          OUTLINED_FUNCTION_45();
          v27 = *(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
          v28 = v11;
          goto LABEL_38;
        }
        v19 = (uint64_t)v11;
        goto LABEL_20;
      }
    }
    goto LABEL_28;
  }
  type metadata accessor for UsoTask_summarise_common_Person();
  if (!OUTLINED_FUNCTION_14_17())
  {
    type metadata accessor for UsoTask_read_common_Person();
    if (OUTLINED_FUNCTION_14_17())
    {
      OUTLINED_FUNCTION_37_10();
      OUTLINED_FUNCTION_128();
      v25 = OUTLINED_FUNCTION_67_1();
      if (!v34)
        goto LABEL_28;
      v26 = MEMORY[0x2207D6AAC](v25);
      OUTLINED_FUNCTION_2();
      if (!v26)
        goto LABEL_28;
      v16 = OUTLINED_FUNCTION_62_7();
      specialized Collection.first.getter(v16, (uint64_t)v7);
      OUTLINED_FUNCTION_5_0();
      v24 = OUTLINED_FUNCTION_38_7();
      OUTLINED_FUNCTION_6_2((uint64_t)v7, 1, v24);
      if (!v18)
      {
        UsoIdentifier.value.getter();
        OUTLINED_FUNCTION_12_19();
        OUTLINED_FUNCTION_21_9();
        v27 = *(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v24 - 8) + 8);
        v28 = v7;
        goto LABEL_40;
      }
      outlined destroy of Any?((uint64_t)v7, &demangling cache variable for type metadata for UsoIdentifier?);
      v16 = MEMORY[0x2207D6D10]();
    }
    else
    {
      type metadata accessor for UsoTask_checkExistence_common_Person();
      if (!swift_dynamicCast())
        goto LABEL_29;
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      v29 = OUTLINED_FUNCTION_45();
      if (!v34)
        goto LABEL_28;
      v30 = MEMORY[0x2207D6AAC](v29);
      OUTLINED_FUNCTION_2();
      if (!v30)
        goto LABEL_28;
      v31 = OUTLINED_FUNCTION_62_7();
      specialized Collection.first.getter(v31, (uint64_t)v4);
      OUTLINED_FUNCTION_5_0();
      v24 = OUTLINED_FUNCTION_38_7();
      OUTLINED_FUNCTION_6_2((uint64_t)v4, 1, v24);
      if (!v18)
      {
        v16 = UsoIdentifier.value.getter();
        OUTLINED_FUNCTION_45();
        OUTLINED_FUNCTION_21_9();
        v27 = *(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v24 - 8) + 8);
        v28 = v4;
        goto LABEL_40;
      }
      outlined destroy of Any?((uint64_t)v4, &demangling cache variable for type metadata for UsoIdentifier?);
      v16 = MEMORY[0x2207D6D10]();
    }
    swift_release();
    goto LABEL_21;
  }
  OUTLINED_FUNCTION_37_10();
  OUTLINED_FUNCTION_128();
  v22 = OUTLINED_FUNCTION_67_1();
  if (v34)
  {
    v23 = MEMORY[0x2207D6AAC](v22);
    OUTLINED_FUNCTION_2();
    if (v23)
    {
      v16 = OUTLINED_FUNCTION_62_7();
      specialized Collection.first.getter(v16, v0);
      OUTLINED_FUNCTION_5_0();
      v24 = OUTLINED_FUNCTION_38_7();
      OUTLINED_FUNCTION_6_2(v0, 1, v24);
      if (v18)
      {
        v19 = v0;
LABEL_20:
        outlined destroy of Any?(v19, &demangling cache variable for type metadata for UsoIdentifier?);
        MEMORY[0x2207D6D10]();
        OUTLINED_FUNCTION_12_19();
LABEL_21:
        swift_release();
LABEL_42:
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v35);
        goto LABEL_43;
      }
      UsoIdentifier.value.getter();
      OUTLINED_FUNCTION_12_19();
      OUTLINED_FUNCTION_45();
      v27 = *(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v24 - 8) + 8);
      v28 = (_BYTE *)v0;
LABEL_40:
      v32 = v24;
      goto LABEL_41;
    }
  }
LABEL_28:
  swift_release();
LABEL_29:
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v35);
LABEL_30:
  v16 = 0;
LABEL_43:
  outlined destroy of Any?((uint64_t)v36, &demangling cache variable for type metadata for Any?);
  return v16;
}

uint64_t ContactAttributeDisambiguationStrategy.extractAddressIdentifiers(from:intendedAttribute:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, char *, uint64_t);
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v36;
  unint64_t v37;
  char *v39;
  unsigned int v40;
  char *v41;
  _BOOL4 v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  OUTLINED_FUNCTION_32();
  v49 = v0;
  v50 = v1;
  v3 = v2;
  v4 = OUTLINED_FUNCTION_38_7();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_5_2();
  v41 = v6;
  v8 = MEMORY[0x24BDAC7A8](v7);
  v43 = (char *)&v39 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v39 - v10;
  v12 = OUTLINED_FUNCTION_11_13();
  v13 = MEMORY[0x24BEE4AF8];
  if (v12)
  {
    v14 = v12;
    v45 = *(_QWORD *)(v12 + 16);
    if (v45)
    {
      if (v3 && (v15 = (unint64_t)objc_msgSend(v3, sel_contactAttributeType), v15 <= 3))
      {
        v42 = (v15 & 0xF) == 0;
        v40 = 0x5030409u >> (8 * v15);
      }
      else
      {
        v40 = 9;
        v42 = 1;
      }
      if (one-time initialization token for siriContacts != -1)
LABEL_32:
        swift_once();
      v16 = OUTLINED_FUNCTION_26();
      __swift_project_value_buffer(v16, (uint64_t)static Logger.siriContacts);
      v17 = OUTLINED_FUNCTION_70();
      v18 = static os_log_type_t.debug.getter();
      v19 = os_log_type_enabled(v17, v18);
      v44 = v14;
      if (v19)
      {
        v20 = (uint8_t *)OUTLINED_FUNCTION_1();
        v48 = OUTLINED_FUNCTION_1();
        *(_DWORD *)v20 = 136315138;
        if (v42)
        {
          v21 = 0;
          v22 = 0;
        }
        else
        {
          v21 = UsoIdentifierNamespace.rawValue.getter(v40);
        }
        v39 = (char *)(v20 + 4);
        v46 = v21;
        v47 = v22;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        v23 = String.init<A>(describing:)();
        v46 = OUTLINED_FUNCTION_112_1(v23, v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        OUTLINED_FUNCTION_5();
        OUTLINED_FUNCTION_43_0(&dword_21FE16000, v17, v18, "#GCADisambiguationStrategy extractAddressIdentifiers targetNamespace %s", v20);
        OUTLINED_FUNCTION_16();
        OUTLINED_FUNCTION_0();
      }

      v25 = 0;
      v46 = v13;
      v39 = "ilType";
      v13 = (uint64_t)v43;
      while (1)
      {
        if (v25 >= *(_QWORD *)(v14 + 16))
        {
          __break(1u);
          goto LABEL_32;
        }
        v26 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
        v27 = *(_QWORD *)(v5 + 72);
        v28 = v14 + v26 + v27 * v25;
        v29 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
        v29(v11, v28, v4);
        OUTLINED_FUNCTION_105_1();
        v31 = v30;
        swift_bridgeObjectRelease();
        v29((char *)v13, (unint64_t)v11, v4);
        if (v31)
        {
          UsoIdentifier.namespace.getter();
          if (!v42)
            __asm { BR              X9 }
          if (!v32)
          {
            OUTLINED_FUNCTION_92(v13, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
            v33 = *(void (**)(uint64_t, char *, uint64_t))(v5 + 32);
            v33((uint64_t)v41, v11, v4);
            v34 = v46;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              v34 = v46;
            }
            v37 = *(_QWORD *)(v34 + 16);
            v36 = *(_QWORD *)(v34 + 24);
            if (v37 >= v36 >> 1)
            {
              OUTLINED_FUNCTION_91_2(v36);
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              v34 = v46;
            }
            *(_QWORD *)(v34 + 16) = v37 + 1;
            v33(v34 + v26 + v37 * v27, v41, v4);
            v46 = v34;
            v13 = (uint64_t)v43;
            goto LABEL_28;
          }
          OUTLINED_FUNCTION_5();
        }
        OUTLINED_FUNCTION_109_1(v13);
        OUTLINED_FUNCTION_109_1((uint64_t)v11);
LABEL_28:
        ++v25;
        v14 = v44;
        if (v45 == v25)
        {
          OUTLINED_FUNCTION_167();
          return v46;
        }
      }
    }
    OUTLINED_FUNCTION_167();
  }
  return v13;
}

uint64_t ContactAttributeDisambiguationStrategy.__ivar_destroyer()
{
  uint64_t v0;

  return __swift_destroy_boxed_opaque_existential_0(v0 + 168);
}

void ContactAttributeDisambiguationStrategy.deinit()
{
  uint64_t v0;

  v0 = ContactsStrategy.deinit();
  __swift_destroy_boxed_opaque_existential_0(v0 + 168);
  OUTLINED_FUNCTION_31_0();
}

uint64_t ContactAttributeDisambiguationStrategy.__deallocating_deinit()
{
  ContactAttributeDisambiguationStrategy.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ContactAttributeDisambiguationStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ContactAttributeDisambiguationStrategy);
}

void protocol witness for NeedsDisambiguationFlowStrategyAsync.paginationStyle(resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t *a2)
{
  type metadata accessor for ContactAttributeDisambiguationStrategy(0, a2[28], a2[29], a2[30]);
  JUMPOUT(0x2207D5B70);
}

void protocol witness for NeedsDisambiguationFlowStrategyAsync.actionForInput(_:resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>()
{
  ContactAttributeDisambiguationStrategy.actionForInput(_:resolveRecord:)();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeDisambiguationItemContainer(resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  *(_QWORD *)(v2 + 16) = a1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makeDisambiguationItemContainer(resolveRecord:) in conformance ContactsDisambiguationStrategy<A, B>;
  return ContactAttributeDisambiguationStrategy.makeDisambiguationItemContainer(resolveRecord:)(a2);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.parseDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.parseDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>;
  return ContactAttributeDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(a1, a2, a3, a4);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makePromptForDisambiguation(paginatedItems:resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makePromptForDisambiguation(paginatedItems:resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>;
  return ContactAttributeDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(a1, v7, a3);
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makePromptForDisambiguation(paginatedItems:resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>()
{
  uint64_t v0;

  OUTLINED_FUNCTION_29_5();
  OUTLINED_FUNCTION_3_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v6;
  type metadata accessor for ContactAttributeDisambiguationStrategy(0, a4[28], a4[29], a4[30]);
  *v6 = v4;
  v6[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.parseDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>;
  return NeedsDisambiguationFlowStrategyAsync.makeRepromptOnEmptyParse(paginatedItems:resolveRecord:)();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v6;
  type metadata accessor for ContactAttributeDisambiguationStrategy(0, a4[28], a4[29], a4[30]);
  *v6 = v4;
  v6[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.parseDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>;
  return NeedsDisambiguationFlowStrategyAsync.makeRepromptOnLowConfidence(paginatedItems:resolveRecord:)();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v5;
  type metadata accessor for ContactAttributeDisambiguationStrategy(0, a3[28], a3[29], a3[30]);
  *v5 = v3;
  v5[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.parseDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>;
  return NeedsDisambiguationFlowStrategyAsync.makePromptForDeviceUnlock(resolveRecord:)();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v5;
  type metadata accessor for ContactAttributeDisambiguationStrategy(0, a3[28], a3[29], a3[30]);
  *v5 = v3;
  v5[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.parseDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>;
  return NeedsDisambiguationFlowStrategyAsync.makeHandoffForAuthenticationResponse(resolveRecord:)();
}

uint64_t protocol witness for NeedsDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription(resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t *a2)
{
  type metadata accessor for ContactAttributeDisambiguationStrategy(0, a2[28], a2[29], a2[30]);
  return NeedsDisambiguationFlowStrategyAsync.pervasiveUseCaseDescription(resolveRecord:)();
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v7;
  type metadata accessor for ContactAttributeDisambiguationStrategy(0, a5[28], a5[29], a5[30]);
  *v7 = v5;
  v7[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.parseDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>;
  return ParameterResolutionHandlingAsync.makeFlowCancelledResponse(app:intent:parameter:)();
}

uint64_t protocol witness for ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v8;
  type metadata accessor for ContactAttributeDisambiguationStrategy(0, a6[28], a6[29], a6[30]);
  *v8 = v6;
  v8[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.parseDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>;
  return ParameterResolutionHandlingAsync.makeErrorResponse(error:app:intent:parameter:)();
}

void base witness table accessor for ParameterResolutionHandlingAsync in ContactAttributeDisambiguationStrategy<A, B, C>()
{
  JUMPOUT(0x2207D86A8);
}

void outlined destroy of Any?(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_94_0(v2);
  OUTLINED_FUNCTION_31_0();
}

uint64_t partial apply for closure #1 in ContactAttributeDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ContactAttributeDisambiguationStrategy.makePromptForDisambiguation(paginatedItems:resolveRecord:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in ContactAttributeDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(void **a1)
{
  return closure #1 in ContactAttributeDisambiguationStrategy.parseDisambiguationResult(input:paginatedItems:resolveRecord:)(a1) & 1;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x2207D8654](a1, v6, a5);
}

BOOL OUTLINED_FUNCTION_3_14(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_4_19()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_11_13()
{
  return dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
}

uint64_t OUTLINED_FUNCTION_12_19()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_14_17()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_20_16(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_26_18()
{
  return static UsoTask_CodegenConverter.convert(task:)();
}

uint64_t OUTLINED_FUNCTION_29_15@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

void OUTLINED_FUNCTION_36_7(char a1, uint64_t a2)
{
  uint64_t v2;

  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_37_10()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_38_7()
{
  return type metadata accessor for UsoIdentifier();
}

uint64_t OUTLINED_FUNCTION_49_10()
{
  return Logger.logObject.getter();
}

uint64_t OUTLINED_FUNCTION_58_6()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_60_6()
{
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_62_7()
{
  return ContactAttributeDisambiguationStrategy.extractAddressIdentifiers(from:intendedAttribute:)();
}

uint64_t OUTLINED_FUNCTION_63_4@<X0>(uint64_t a1@<X8>)
{
  return USOParse.preferredUserDialogAct.getter(a1);
}

uint64_t OUTLINED_FUNCTION_64_5()
{
  return OSSignpostID.init(log:)();
}

uint64_t OUTLINED_FUNCTION_66_9()
{
  return ParameterResolutionRecord.intent.getter();
}

uint64_t OUTLINED_FUNCTION_68_9()
{
  return type metadata accessor for ContactsError();
}

uint64_t OUTLINED_FUNCTION_69_9(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

void OUTLINED_FUNCTION_70_7(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of Any?(v2 - 128, a2);
}

uint64_t OUTLINED_FUNCTION_71_6()
{
  return swift_bridgeObjectRelease();
}

id OUTLINED_FUNCTION_72_4()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, (SEL)(v1 + 1439));
}

uint64_t OUTLINED_FUNCTION_73_7()
{
  return type metadata accessor for ContactAttribute();
}

uint64_t OUTLINED_FUNCTION_74_5@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_76_5()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

void OUTLINED_FUNCTION_78_5()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_84_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t OUTLINED_FUNCTION_86_2()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_87_3()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_89_0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0, v1, (uint64_t *)(v2 - 128));
}

double OUTLINED_FUNCTION_90_2()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 - 128) = 0u;
  *(_OWORD *)(v0 - 112) = 0u;
  return result;
}

BOOL OUTLINED_FUNCTION_91_2@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_93_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

_WORD *OUTLINED_FUNCTION_96_1(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_98_1()
{
  return dispatch thunk of DeviceState.siriLocale.getter();
}

uint64_t OUTLINED_FUNCTION_102_1()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_105_1()
{
  return UsoIdentifier.namespace.getter();
}

void OUTLINED_FUNCTION_107_1(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of Signpost.OpenSignpost(v2, a2);
}

uint64_t OUTLINED_FUNCTION_109_1(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

void OUTLINED_FUNCTION_110_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{

}

uint64_t OUTLINED_FUNCTION_112_1(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 88));
}

void OUTLINED_FUNCTION_113_0()
{
  JUMPOUT(0x2207D6AACLL);
}

uint64_t OUTLINED_FUNCTION_114_0()
{
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_116()
{
  return ParameterResolutionRecord.intent.getter();
}

void OUTLINED_FUNCTION_117_0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  outlined destroy of Signpost.OpenSignpost(v2, a2);
}

uint64_t OUTLINED_FUNCTION_121()
{
  return Logger.logObject.getter();
}

void OUTLINED_FUNCTION_126_0(char a1, uint64_t a2)
{
  uint64_t v2;

  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_128()
{
  return dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
}

uint64_t OUTLINED_FUNCTION_130_0()
{
  return type metadata accessor for Siri_Nlu_External_UserDialogAct();
}

uint64_t OUTLINED_FUNCTION_131()
{
  return type metadata accessor for UsoTask_request_common_Person();
}

uint64_t OUTLINED_FUNCTION_132_0()
{
  return type metadata accessor for UsoTask_noVerb_common_Person();
}

uint64_t OUTLINED_FUNCTION_133_0(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  return outlined init with copy of Any((uint64_t)va1, (uint64_t)va);
}

uint64_t OUTLINED_FUNCTION_134_0()
{
  uint64_t v0;

  return v0;
}

ValueMetadata *type metadata accessor for SiriContactsFeatureFlagProvider()
{
  return &type metadata for SiriContactsFeatureFlagProvider;
}

uint64_t getEnumTagSinglePayload for SiriContactsFeatures(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for SiriContactsFeatures(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_21FE62CCC + 4 * byte_21FEDA1D0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_21FE62CEC + 4 * byte_21FEDA1D5[v4]))();
}

_BYTE *sub_21FE62CCC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_21FE62CEC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21FE62CF4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21FE62CFC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_21FE62D04(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_21FE62D0C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SiriContactsFeatures()
{
  return &type metadata for SiriContactsFeatures;
}

unint64_t lazy protocol witness table accessor for type SiriContactsFeatures and conformance SiriContactsFeatures()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriContactsFeatures and conformance SiriContactsFeatures;
  if (!lazy protocol witness table cache variable for type SiriContactsFeatures and conformance SiriContactsFeatures)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for SiriContactsFeatures, &type metadata for SiriContactsFeatures);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriContactsFeatures and conformance SiriContactsFeatures);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriContactsFeatures and conformance SiriContactsFeatures;
  if (!lazy protocol witness table cache variable for type SiriContactsFeatures and conformance SiriContactsFeatures)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for SiriContactsFeatures, &type metadata for SiriContactsFeatures);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriContactsFeatures and conformance SiriContactsFeatures);
  }
  return result;
}

const char *SiriContactsFeatures.domain.getter()
{
  return "ResponseFramework";
}

const char *SiriContactsFeatures.feature.getter()
{
  return "SMART";
}

void SiriContactsFeatures.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int SiriContactsFeatures.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SiriContactsFeatures()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  unint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v20;

  v20 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_21;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v5)
  {
    while (1)
    {
      v6 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v7 = (id)MEMORY[0x2207D80C0](v6, a1);
LABEL_7:
        v8 = v7;
        v9 = v6 + 1;
        if (__OFADD__(v6, 1))
          goto LABEL_20;
        v10 = objc_msgSend(v7, sel_value);
        v11 = objc_msgSend(v10, sel_name);

        v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v14 = v13;

        if (v12 == a2 && v14 == a3)
        {
          swift_bridgeObjectRelease();
LABEL_15:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          goto LABEL_16;
        }
        v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v16 & 1) != 0)
          goto LABEL_15;

LABEL_16:
        ++v6;
        if (v9 == v5)
        {
          v17 = v20;
          goto LABEL_23;
        }
      }
      if (v6 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      v5 = _CocoaArrayWrapper.endIndex.getter();
      if (!v5)
        goto LABEL_22;
    }
    v7 = *(id *)(a1 + 8 * v6 + 32);
    goto LABEL_7;
  }
LABEL_22:
  v17 = MEMORY[0x24BEE4AF8];
LABEL_23:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t specialized ContactsStrategy.confirmationOutput(templateResult:views:meCard:listenAfterSpeaking:nlContextUpdate:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _OWORD v16[2];
  uint64_t v17;
  _BYTE v18[40];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v16 - v12;
  outlined init with copy of DeviceState(v5 + 16, (uint64_t)v18);
  outlined init with copy of NLContextUpdate?(a5, (uint64_t)v11);
  v14 = type metadata accessor for NLContextUpdate();
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v14) == 1)
  {
    static ContactsContextProvider.confirm(person:attribute:)(a3, 0, 1);
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v11, &demangling cache variable for type metadata for NLContextUpdate?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v13, v11, v14);
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v14);
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v13, &demangling cache variable for type metadata for NLContextUpdate?);
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v18);
}

uint64_t specialized static StrategyUtil.getActionForInput<A>(input:intentType:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(char *, uint64_t);
  int v14;
  int v15;
  void (*v18)(char *, uint64_t);
  __int16 v19;
  __int16 v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  const char *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;

  v50 = a1;
  v1 = type metadata accessor for Parse.DirectInvocation();
  v49 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v48 = ((char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v3 = type metadata accessor for Parse();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v10 = (char *)&v45 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v45 - v11;
  v47 = type metadata accessor for ModifyContactAttributeIntent();
  Input.parse.getter();
  v13 = *(uint64_t (**)(char *, uint64_t))(v4 + 88);
  v14 = v13(v12, v3);
  v15 = *MEMORY[0x24BE98E88];
  if (v14 != *MEMORY[0x24BE98E08] && v14 != v15 && v14 != *MEMORY[0x24BE98E98])
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.siriContacts);
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_21FE16000, v27, v28, "#getActionForInput: Received unsupported parse type, returning .ignore() actionForInput", v29, 2u);
      MEMORY[0x2207D8768](v29, -1, -1);
    }

    static ActionForInput.ignore()();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v12, v3);
  }
  v46 = v1;
  v18 = *(void (**)(char *, uint64_t))(v4 + 8);
  v18(v12, v3);
  Input.parse.getter();
  Parse.cancelOrContactIntent.getter();
  v20 = v19;
  v18(v10, v3);
  if ((v20 & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Logger.siriContacts);
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_21FE16000, v32, v33, "#getActionForInput: .cancel() actionForInput", v34, 2u);
      MEMORY[0x2207D8768](v34, -1, -1);
    }

    return static ActionForInput.cancel()();
  }
  else
  {
    if ((v20 & 0x100) == 0)
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v21 = type metadata accessor for Logger();
      __swift_project_value_buffer(v21, (uint64_t)static Logger.siriContacts);
      v22 = Logger.logObject.getter();
      v23 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v22, v23))
        goto LABEL_39;
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      v25 = "#getActionForInput: .ignore() actionForInput";
LABEL_38:
      _os_log_impl(&dword_21FE16000, v22, v23, v25, v24, 2u);
      MEMORY[0x2207D8768](v24, -1, -1);
LABEL_39:

      return static ActionForInput.ignore()();
    }
    Input.parse.getter();
    if (v13(v7, v3) == v15)
    {
      (*(void (**)(char *, uint64_t))(v4 + 96))(v7, v3);
      v36 = v48;
      v35 = v49;
      v37 = v46;
      (*(void (**)(NSObject *, char *, uint64_t))(v49 + 32))(v48, v7, v46);
      static StrategyUtil.actionForDirectInvocation(_:)(v36);
      return (*(uint64_t (**)(NSObject *, uint64_t))(v35 + 8))(v36, v37);
    }
    v18(v7, v3);
    Input.parse.getter();
    Parse.getSiriKitIntentType()();
    v39 = v38;
    v18(v10, v3);
    if (!v39 || v47 != v39)
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v44 = type metadata accessor for Logger();
      __swift_project_value_buffer(v44, (uint64_t)static Logger.siriContacts);
      v22 = Logger.logObject.getter();
      v23 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v22, v23))
        goto LABEL_39;
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      v25 = "#getActionForInput: parse intent type does not match flow's intent type, returning .ignore()";
      goto LABEL_38;
    }
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.siriContacts);
    v41 = Logger.logObject.getter();
    v42 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v43 = 0;
      _os_log_impl(&dword_21FE16000, v41, v42, "#getActionForInput: .handle() actionForInput", v43, 2u);
      MEMORY[0x2207D8768](v43, -1, -1);
    }

    return static ActionForInput.handle()();
  }
}

uint64_t ModifyContactAttributeConfirmIntentStrategy.actionForInput(_:confirmParameters:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;
  uint64_t EnumTagSinglePayload;
  int v22;
  NSObject *v23;
  char v24;
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_55_0();
  v7 = v6 - v5;
  v8 = OUTLINED_FUNCTION_104_0();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_14_9();
  v12 = (char *)(v10 - v11);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v28 - v14;
  Input.parse.getter();
  Parse.isCancel.getter();
  v17 = v16;
  v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v15, v8);
  if ((v17 & 1) != 0)
    return static ActionForInput.cancel()();
  Input.parse.getter();
  Parse.confirmationResponse.getter();
  v18(v12, v8);
  v20 = type metadata accessor for ConfirmationResponse();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v7, 1, v20);
  v22 = EnumTagSinglePayload;
  OUTLINED_FUNCTION_12_5(EnumTagSinglePayload, &demangling cache variable for type metadata for ConfirmationResponse?);
  if (v22 != 1)
    return static ActionForInput.handle()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<ModifyContactAttributeIntent, ModifyContactAttributeIntentResponse>);
  v23 = IntentResolutionRecord.intent.getter();
  v24 = ModifyContactAttributeConfirmIntentStrategy.isRequestForDifferentAttribute(_:intent:)(a1, v23);

  if ((v24 & 1) == 0)
    return specialized static StrategyUtil.getActionForInput<A>(input:intentType:)(a2);
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v25 = OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_10_1(v25, (uint64_t)static Logger.siriContacts);
  v26 = OUTLINED_FUNCTION_8();
  if (os_log_type_enabled(v23, v26))
  {
    v27 = (uint8_t *)OUTLINED_FUNCTION_2_1();
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_21FE16000, v23, v26, "[ModifyContactAttributeConfirmIntentStrategy] actionForInput encountered request to modify a different attribute or confirm a different value, ignoring", v27, 2u);
    OUTLINED_FUNCTION_0();
  }

  return static ActionForInput.ignore()();
}

uint64_t ModifyContactAttributeConfirmIntentStrategy.parseConfirmationResponse(input:confirmParameters:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  v3[5] = OUTLINED_FUNCTION_0_0();
  v4 = OUTLINED_FUNCTION_104_0();
  v3[6] = v4;
  v3[7] = *(_QWORD *)(v4 - 8);
  v3[8] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ModifyContactAttributeConfirmIntentStrategy.parseConfirmationResponse(input:confirmParameters:)()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  _WORD *v3;
  uint64_t (*v4)(void);

  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v0 = OUTLINED_FUNCTION_26();
  v1 = OUTLINED_FUNCTION_10_1(v0, (uint64_t)static Logger.siriContacts);
  v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (_WORD *)OUTLINED_FUNCTION_2_1();
    OUTLINED_FUNCTION_54_0(v3);
    OUTLINED_FUNCTION_15_5(&dword_21FE16000, v1, v2, "[ModifyContactAttributeConfirmIntentStrategy] parseConfirmationResponse");
    OUTLINED_FUNCTION_1_4();
  }

  Input.parse.getter();
  Parse.confirmationResponse.getter();
  OUTLINED_FUNCTION_63_5();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<ModifyContactAttributeIntent, ModifyContactAttributeIntentResponse>);
  IntentResolutionRecord.intent.getter();
  type metadata accessor for ModifyContactAttributeIntent();
  ConfirmIntentAnswer.init(confirmationResponse:intent:)();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_45_0();
  v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return v4();
}

uint64_t ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3[25] = a2;
  v3[26] = v2;
  v3[24] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[27] = OUTLINED_FUNCTION_0_0();
  v4 = type metadata accessor for TemplatingResult();
  v3[28] = v4;
  v3[29] = *(_QWORD *)(v4 - 8);
  v3[30] = OUTLINED_FUNCTION_25_0();
  v3[31] = OUTLINED_FUNCTION_25_0();
  type metadata accessor for DialogPhase();
  v3[32] = OUTLINED_FUNCTION_0_0();
  v5 = type metadata accessor for OutputGenerationManifest();
  v3[33] = v5;
  v3[34] = *(_QWORD *)(v5 - 8);
  v3[35] = OUTLINED_FUNCTION_0_0();
  v6 = type metadata accessor for ContactsSnippetPluginModel();
  v3[36] = v6;
  v3[37] = *(_QWORD *)(v6 - 8);
  v3[38] = OUTLINED_FUNCTION_0_0();
  type metadata accessor for CATOption();
  v3[39] = OUTLINED_FUNCTION_0_0();
  v7 = type metadata accessor for ContactsSnippetFlowState();
  v3[40] = v7;
  v3[41] = *(_QWORD *)(v7 - 8);
  v3[42] = OUTLINED_FUNCTION_0_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  v3[43] = OUTLINED_FUNCTION_0_0();
  v8 = type metadata accessor for ModifyContactAttributeSnippetModel.ContactAttributeToModify();
  v3[44] = v8;
  v3[45] = *(_QWORD *)(v8 - 8);
  v3[46] = OUTLINED_FUNCTION_0_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifyContactAttributeSnippetModel?);
  v3[47] = OUTLINED_FUNCTION_25_0();
  v3[48] = OUTLINED_FUNCTION_25_0();
  v9 = type metadata accessor for ModifyContactAttributeSnippetModel();
  v3[49] = v9;
  v3[50] = *(_QWORD *)(v9 - 8);
  v3[51] = OUTLINED_FUNCTION_25_0();
  v3[52] = OUTLINED_FUNCTION_25_0();
  v3[53] = type metadata accessor for Signpost.OpenSignpost();
  v3[54] = OUTLINED_FUNCTION_0_0();
  v10 = type metadata accessor for SpeakableString();
  v3[55] = v10;
  v3[56] = *(_QWORD *)(v10 - 8);
  v3[57] = OUTLINED_FUNCTION_25_0();
  v3[58] = OUTLINED_FUNCTION_25_0();
  v3[59] = OUTLINED_FUNCTION_25_0();
  v3[60] = type metadata accessor for Locale();
  v3[61] = OUTLINED_FUNCTION_0_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[62] = OUTLINED_FUNCTION_25_0();
  v3[63] = OUTLINED_FUNCTION_25_0();
  v3[64] = OUTLINED_FUNCTION_25_0();
  v3[65] = OUTLINED_FUNCTION_25_0();
  v3[66] = OUTLINED_FUNCTION_25_0();
  v3[67] = OUTLINED_FUNCTION_25_0();
  v3[68] = OUTLINED_FUNCTION_25_0();
  v3[69] = OUTLINED_FUNCTION_25_0();
  v3[70] = OUTLINED_FUNCTION_25_0();
  v3[71] = OUTLINED_FUNCTION_25_0();
  v3[72] = OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)()
{
  os_log_type_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  void *v51;
  id v52;
  unint64_t v53;
  void *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  void *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;

  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v2 = OUTLINED_FUNCTION_26();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static Logger.siriContacts);
  v1[73] = v3;
  v4 = v3;
  Logger.logObject.getter();
  v5 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_15_0(v5))
  {
    v6 = (uint8_t *)OUTLINED_FUNCTION_2_1();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_21FE16000, v4, v0, "[ModifyContactAttributeConfirmIntentStrategy] makePromptForConfirmation", v6, 2u);
    OUTLINED_FUNCTION_0();
  }
  v7 = v1[25];
  v8 = v1[26];

  v1[74] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntentResolutionRecord<ModifyContactAttributeIntent, ModifyContactAttributeIntentResponse>);
  v9 = (void *)IntentResolutionRecord.intent.getter();
  v10 = objc_msgSend(v9, sel_contactAttributeToModify);

  v11 = (_QWORD *)(v8 + 16);
  outlined init with copy of DeviceState(v8 + 16, (uint64_t)(v1 + 3));
  v12 = *(_QWORD *)(v8 + 104);
  v1[2] = v10;
  v1[8] = v12;
  swift_retain();
  specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:)();
  v1[75] = v13;
  outlined destroy of ConfirmationViewBuilder((uint64_t)(v1 + 2));
  objc_msgSend((id)IntentResolutionRecord.intent.getter(), sel_contactAttributeToModify);
  OUTLINED_FUNCTION_80_1();
  if (v7 != 6)
  {
    if (v7 != 10)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for ContactsError();
      lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (uint64_t (*)(uint64_t))type metadata accessor for ContactsError, (uint64_t)&protocol conformance descriptor for ContactsError);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      swift_task_dealloc();
      OUTLINED_FUNCTION_17_0();
      OUTLINED_FUNCTION_12_0();
      OUTLINED_FUNCTION_14_0();
      OUTLINED_FUNCTION_24_0();
      OUTLINED_FUNCTION_23_0();
      OUTLINED_FUNCTION_22_0();
      OUTLINED_FUNCTION_21_0();
      OUTLINED_FUNCTION_13_0();
      OUTLINED_FUNCTION_45_0();
      OUTLINED_FUNCTION_33_0();
      OUTLINED_FUNCTION_32_2();
      OUTLINED_FUNCTION_31_2();
      OUTLINED_FUNCTION_30_2();
      OUTLINED_FUNCTION_29_1();
      OUTLINED_FUNCTION_28_2();
      OUTLINED_FUNCTION_27_2();
      OUTLINED_FUNCTION_26_1();
      OUTLINED_FUNCTION_25_2();
      OUTLINED_FUNCTION_24_2();
      OUTLINED_FUNCTION_23_1();
      OUTLINED_FUNCTION_21_2();
      OUTLINED_FUNCTION_20_2();
      OUTLINED_FUNCTION_35_3();
      OUTLINED_FUNCTION_34_2();
      swift_task_dealloc();
      swift_task_dealloc();
      OUTLINED_FUNCTION_24_9();
      OUTLINED_FUNCTION_16_4();
      OUTLINED_FUNCTION_38_1();
      OUTLINED_FUNCTION_19_2();
      __asm { BR              X0 }
    }
    OUTLINED_FUNCTION_110_2(v1[72], v14, v15, v1[55]);
    v16 = (void *)OUTLINED_FUNCTION_94_3();
    v17 = outlined bridged method (ob) of @objc ModifyContactAttributeIntent.relatedSiriMatches.getter(v16);
    v131 = (_QWORD *)(v8 + 16);
    if (!v17)
      goto LABEL_11;
    v18 = v17;
    v19 = v17 & 0xC000000000000001;
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v17 & 0xC000000000000001) == 0, v17);
    if (v19)
      OUTLINED_FUNCTION_29_6();
    v20 = *(id *)(v18 + 32);
    OUTLINED_FUNCTION_5();
    outlined bridged method (ob) of @objc INObject.identifier.getter(v20);
    if (!v22)
      goto LABEL_11;
    v23 = v21;
    v24 = v22;
    v25 = (_QWORD *)v1[26];
    v26 = v25[10];
    v27 = v25[11];
    __swift_project_boxed_opaque_existential_1(v25 + 7, v26);
    v64 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 8))(v23, v24, v26, v27);
    swift_bridgeObjectRelease();
    if (v64)
    {
      v65 = v11;
      v44 = v1 + 71;
      v130 = v1[72];
      v66 = v1[61];
      v67 = v1[26];
      type metadata accessor for DialogPerson();
      __swift_project_boxed_opaque_existential_1(v65, *(_QWORD *)(v67 + 40));
      v68 = v64;
      dispatch thunk of DeviceState.siriLocale.getter();
      v69 = *(void **)(v67 + 120);
      v70 = v69;
      DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v68, 0, v66, (uint64_t)v69);
      dispatch thunk of DialogPerson.fullName.getter();
      OUTLINED_FUNCTION_2();

      outlined destroy of UsoEntity_common_Person.DefinedValues?(v130, &demangling cache variable for type metadata for SpeakableString?);
    }
    else
    {
LABEL_11:
      v28 = (void *)v1[25];
      v29 = (void *)OUTLINED_FUNCTION_95_2();
      v30 = OUTLINED_FUNCTION_112_2(v29);
      OUTLINED_FUNCTION_80_1();
      if (!v28 || (outlined bridged method (ob) of @objc ContactRelation.relatedFullName.getter(v28), !v31))
      {
        static String.EMPTY.getter();
        OUTLINED_FUNCTION_79_1();
      }
      v44 = v1 + 70;
      v45 = v1[70];
      v46 = OUTLINED_FUNCTION_17_4();
      OUTLINED_FUNCTION_12_5(v46, &demangling cache variable for type metadata for SpeakableString?);
      OUTLINED_FUNCTION_68_3(v45);
    }
    v47 = v1[69];
    v48 = v1[26];
    outlined init with take of SpeakableString?(*v44, v1[72]);
    v49 = (void *)OUTLINED_FUNCTION_94_3();
    v50 = objc_msgSend(v49, sel_modifyOperation);

    ModifyOperation.stringify.getter((unint64_t)v50);
    OUTLINED_FUNCTION_17_4();
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v48 + 56), *(_QWORD *)(v48 + 80));
    v51 = (void *)OUTLINED_FUNCTION_77_6();
    v1[76] = v51;
    OUTLINED_FUNCTION_120_0(v47, 1);
    if (!v51)
      goto LABEL_33;
    v52 = objc_msgSend(v51, sel_contactRelations);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
    v53 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v54 = (void *)OUTLINED_FUNCTION_95_2();
    v55 = OUTLINED_FUNCTION_112_2(v54);

    if (v55)
    {
      v56 = outlined bridged method (ob) of @objc ContactRelation.relatedFullName.getter(v55);
      if (v57)
      {
        v58 = specialized _ArrayProtocol.filter(_:)(v53, v56, v57);
        if (v58 >> 62)
        {
          if (_CocoaArrayWrapper.endIndex.getter())
            goto LABEL_25;
        }
        else if (*(_QWORD *)((v58 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_25:
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v58 & 0xC000000000000001) == 0, v58);
          if ((v58 & 0xC000000000000001) != 0)
            OUTLINED_FUNCTION_29_6();
          v59 = *(id *)(v58 + 32);
          OUTLINED_FUNCTION_5();
          v60 = objc_msgSend(v59, sel_label);

          if (v60)
          {
            v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v63 = v62;

          }
          else
          {
            v61 = 0;
            v63 = 0;
          }
          v71 = v1[69];
          v72 = v1[68];
          static Dictionary<>.nlSemantic(forCNLabel:)(v61, v63);
          OUTLINED_FUNCTION_5();
          v73 = OUTLINED_FUNCTION_17_4();
          OUTLINED_FUNCTION_12_5(v73, &demangling cache variable for type metadata for SpeakableString?);
          OUTLINED_FUNCTION_68_3(v72);
          outlined init with take of SpeakableString?(v72, v71);
          goto LABEL_33;
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_33:
    v74 = (void *)v1[25];
    v75 = (void *)OUTLINED_FUNCTION_95_2();
    v76 = OUTLINED_FUNCTION_112_2(v75);
    OUTLINED_FUNCTION_80_1();
    if (!v74
      || (outlined bridged method (ob) of @objc ModifyContactAttributeIntent.modifyNickName.getter(v74, (SEL *)&selRef_relationship), !v77))
    {
      static String.EMPTY.getter();
      OUTLINED_FUNCTION_79_1();
    }
    OUTLINED_FUNCTION_17_4();
    v78 = SpeakableString.print.getter();
    v80 = v79;
    if (one-time initialization token for contactsLog != -1)
      swift_once();
    v82 = v1[53];
    v81 = v1[54];
    v83 = (id)static Signpost.contactsLog;
    OSSignpostID.init(log:)();
    static os_signpost_type_t.begin.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    v84 = v81 + *(int *)(v82 + 20);
    *(_QWORD *)v84 = "RelationshipLabelValueForKey";
    *(_QWORD *)(v84 + 8) = 28;
    *(_BYTE *)(v84 + 16) = 2;
    if (one-time initialization token for NLSemanticValueToCNRelationLabel != -1)
      swift_once();
    swift_beginAccess();
    v85 = static Dictionary<>.NLSemanticValueToCNRelationLabel;
    swift_bridgeObjectRetain();
    v86 = specialized Dictionary.subscript.getter(v78, v80, v85);
    v88 = v87;
    swift_endAccess();
    swift_bridgeObjectRelease();
    if (v88)
    {
      v78 = v86;
    }
    else
    {
      swift_bridgeObjectRetain();
      v88 = v80;
    }
    v89 = v1[54];
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost(v89);
    swift_bridgeObjectRelease();
    v90 = (void *)objc_opt_self();
    v91 = (void *)MEMORY[0x2207D7CB8](v78, v88);
    OUTLINED_FUNCTION_23_5();
    v92 = objc_msgSend(v90, sel_localizedStringForLabel_, v91);

    v93 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v95 = v94;

    if ((specialized ContactsStrategy.isSmartEnabled.getter(v96) & 1) != 0)
    {
      v97 = (uint64_t *)v1[46];
      v98 = v1[43];
      v126 = v1[45];
      v127 = v1[44];
      v99 = (uint64_t *)v1[42];
      v128 = v1[41];
      v129 = v1[40];
      v100 = v1[26];
      v1[77] = OUTLINED_FUNCTION_94_3();
      v1[78] = OUTLINED_FUNCTION_95_2();
      v1[22] = v93;
      v1[23] = v95;
      __swift_project_boxed_opaque_existential_1(v131, *(_QWORD *)(v100 + 40));
      dispatch thunk of DeviceState.siriLocale.getter();
      OUTLINED_FUNCTION_68_3(v98);
      lazy protocol witness table accessor for type String and conformance String();
      v101 = StringProtocol.capitalized(with:)();
      v103 = v102;
      OUTLINED_FUNCTION_12_5(v101, &demangling cache variable for type metadata for Locale?);
      OUTLINED_FUNCTION_48();
      *v97 = v101;
      v97[1] = v103;
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v126 + 104))(v97, *MEMORY[0x24BE91F08], v127);
      v104 = static ContactsDirectInvocations.confirm()();
      OUTLINED_FUNCTION_33_3((uint64_t)v104, &lazy cache variable for type metadata for SAStartLocalRequest);
      v105 = SAClientBoundCommand.data.getter();
      v107 = v106;

      v108 = static ContactsDirectInvocations.deny()();
      v109 = SAClientBoundCommand.data.getter();
      v111 = v110;

      *v99 = v105;
      v99[1] = v107;
      v99[2] = v109;
      v99[3] = v111;
      (*(void (**)(uint64_t *, _QWORD, uint64_t))(v128 + 104))(v99, *MEMORY[0x24BE91BC0], v129);
      type metadata accessor for ContactsLabelCATsModern();
      static CATOption.defaultMode.getter();
      v1[79] = OUTLINED_FUNCTION_99_2();
      v112 = (_QWORD *)swift_task_alloc();
      v1[80] = v112;
      *v112 = v1;
      v112[1] = ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
      OUTLINED_FUNCTION_19_2();
      return static ModifyContactAttributeSnippetModel.from(intent:intentResponse:contactService:attributeToModify:flowState:labelCATs:)(v113, v114, v115, v116, v117, v118, v119);
    }
    else
    {
      OUTLINED_FUNCTION_48();
      OUTLINED_FUNCTION_22_13();
      OUTLINED_FUNCTION_57_4();
      OUTLINED_FUNCTION_50_8();
      v120 = (_QWORD *)swift_task_alloc();
      v1[88] = v120;
      OUTLINED_FUNCTION_66_10(v120);
      OUTLINED_FUNCTION_19_2();
      return ModifyContactAttributeCATs.confirmModifyRelationship(requestedRelationship:existingRelationship:contactName:modifyOperation:)(v121, v122, v123, v124, v125);
    }
  }
  v32 = (void *)OUTLINED_FUNCTION_94_3();
  outlined bridged method (ob) of @objc ModifyContactAttributeIntent.modifyNickName.getter(v32, (SEL *)&selRef_modifyNickName);
  if (!v33)
    static String.EMPTY.getter();
  v34 = v1[63];
  v36 = v1[56];
  v35 = v1[57];
  v37 = v1[55];
  OUTLINED_FUNCTION_17_4();
  v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16);
  v1[90] = v38;
  v38(v34, v35, v37);
  OUTLINED_FUNCTION_120_0(v34, 0);
  v39 = (_QWORD *)swift_task_alloc();
  v1[91] = v39;
  *v39 = v1;
  v39[1] = ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
  OUTLINED_FUNCTION_19_2();
  return ModifyContactAttributeCATs.confirmModifyNickname(requestedNickname:)(v40, v41);
}

{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_29_5();
  v1 = (void *)v0[78];
  v2 = (void *)v0[77];
  v3 = v0[41];
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2();

  OUTLINED_FUNCTION_74_5(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_63_5();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_46_6();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v10;
  os_log_type_t v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  _QWORD *v20;

  v2 = v0[48];
  v1 = v0[49];
  if (__swift_getEnumTagSinglePayload(v2, 1, v1) == 1)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v2, &demangling cache variable for type metadata for ModifyContactAttributeSnippetModel?);
    OUTLINED_FUNCTION_22_13();
    OUTLINED_FUNCTION_57_4();
    OUTLINED_FUNCTION_50_8();
    v3 = (_QWORD *)swift_task_alloc();
    v0[88] = v3;
    v4 = OUTLINED_FUNCTION_66_10(v3);
    return ModifyContactAttributeCATs.confirmModifyRelationship(requestedRelationship:existingRelationship:contactName:modifyOperation:)(v4, v5, v6, v7, v8);
  }
  else
  {
    v10 = v0[73];
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_80_5();
    Logger.logObject.getter();
    v11 = OUTLINED_FUNCTION_8();
    if (OUTLINED_FUNCTION_15_0(v11))
    {
      v12 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_54_0(v12);
      OUTLINED_FUNCTION_15_5(&dword_21FE16000, v10, (os_log_type_t)v1, "#ModifyContactAttributeConfirmIntentStrategy makePromptForConfirmation constructing SMART snippet");
      OUTLINED_FUNCTION_1_4();
    }
    v13 = v0[67];
    v14 = v0[66];
    v16 = v0[58];
    v15 = v0[59];
    v17 = v0[55];
    v18 = v0[56];

    type metadata accessor for ModifyContactAttributeCATsModern();
    static CATOption.defaultMode.getter();
    v0[81] = OUTLINED_FUNCTION_99_2();
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
    v19(v13, v16, v17);
    OUTLINED_FUNCTION_68_3(v13);
    v19(v14, v15, v17);
    OUTLINED_FUNCTION_68_3(v14);
    v20 = (_QWORD *)swift_task_alloc();
    v0[82] = v20;
    *v20 = v0;
    v20[1] = ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
    return ModifyContactAttributeCATsModern.confirmModifyRelationship(requestedRelationship:existingRelationship:contactName:modifyOperation:)(v0[67], v0[69], v0[72], v0[66]);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  __n128 *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;

  v4 = v2[76];
  v5 = OUTLINED_FUNCTION_61_5(v2[50]);
  OUTLINED_FUNCTION_85_4(v5, *MEMORY[0x24BE91C88]);
  static DialogPhase.confirmation.getter();
  v6 = (_QWORD *)swift_task_alloc();
  v6[2] = v0;
  v6[3] = v4;
  v6[4] = v1;
  OUTLINED_FUNCTION_102_2();
  OUTLINED_FUNCTION_12_0();
  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_32_0();
  v2[85] = ResponseFactory.init()();
  v2[17] = v3;
  v2[18] = lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type ContactsSnippetPluginModel and conformance ContactsSnippetPluginModel, (uint64_t (*)(uint64_t))MEMORY[0x24BE91C90], MEMORY[0x24BE91C68]);
  v7 = OUTLINED_FUNCTION_93_2();
  OUTLINED_FUNCTION_83_3((uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v8 = (__n128 *)OUTLINED_FUNCTION_55();
  OUTLINED_FUNCTION_75_5(v8, (__n128)xmmword_21FED8AB0);
  v2[86] = v16;
  OUTLINED_FUNCTION_73_8();
  v9 = (_QWORD *)swift_task_alloc();
  v2[87] = v9;
  v10 = OUTLINED_FUNCTION_59_7(v9);
  return OUTLINED_FUNCTION_19_17(v10, v11, v12, v13, v14);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_29_5();
  v1 = v0 + 112;
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_67_1();
  OUTLINED_FUNCTION_5_0();
  __swift_destroy_boxed_opaque_existential_0(v1);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_14_1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  OUTLINED_FUNCTION_4_20();
  v1 = *(void **)(v0 + 608);
  v17 = *(_QWORD *)(v0 + 576);
  v12 = *(_QWORD *)(v0 + 552);
  v13 = *(_QWORD *)(v0 + 472);
  v11 = *(_QWORD *)(v0 + 464);
  v3 = *(_QWORD *)(v0 + 440);
  v2 = *(_QWORD *)(v0 + 448);
  v4 = *(_QWORD *)(v0 + 400);
  v14 = *(_QWORD *)(v0 + 296);
  v5 = *(_QWORD *)(v0 + 280);
  v15 = *(_QWORD *)(v0 + 288);
  v16 = *(_QWORD *)(v0 + 304);
  v7 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 272);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  OUTLINED_FUNCTION_92_1(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v8(v11, v3);
  OUTLINED_FUNCTION_55_6(v12);
  v8(v13, v3);
  OUTLINED_FUNCTION_55_6(v17);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
  OUTLINED_FUNCTION_0_19();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_35_3();
  OUTLINED_FUNCTION_34_2();
  OUTLINED_FUNCTION_24_9();
  OUTLINED_FUNCTION_16_4();
  OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_43_1();
  OUTLINED_FUNCTION_78_6();
  v9 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_2_22(v9);
}

{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;

  v6 = *v1;
  v2 = v6;
  OUTLINED_FUNCTION_87(&v6);
  v2[89] = v0;
  swift_task_dealloc();
  if (v0)
  {
    v3 = v2[65];
    v4 = v2[64];
    swift_bridgeObjectRelease();
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v4, &demangling cache variable for type metadata for SpeakableString?);
  }
  else
  {
    v3 = v2[65];
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v2[64], &demangling cache variable for type metadata for SpeakableString?);
  }
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v3, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_14_1();
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSNumber v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t (*v19)(void);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  OUTLINED_FUNCTION_4_20();
  v1 = (void *)v0[76];
  v2 = v0[75];
  v26 = v0[59];
  v27 = v0[72];
  v24 = v0[58];
  v25 = v0[69];
  v3 = v0[55];
  v23 = v0[56];
  v4 = v0[31];
  v5 = v0[27];
  v21 = v0[29];
  v22 = v0[28];
  v6 = (uint64_t *)v0[24];
  v8 = OUTLINED_FUNCTION_33_3(v7, (unint64_t *)&lazy cache variable for type metadata for SAPerson);
  OUTLINED_FUNCTION_33_3(v8, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v9 = v1;
  v10.super.super.isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  SAPerson.init(contact:isMe:)(v1, v10.super.super.isa);
  v12 = v11;
  v13 = OUTLINED_FUNCTION_163();
  OUTLINED_FUNCTION_110_2(v5, v14, v15, v13);
  v16 = type metadata accessor for AceOutput();
  v17 = MEMORY[0x24BE99088];
  v6[3] = v16;
  v6[4] = v17;
  __swift_allocate_boxed_opaque_existential_1(v6);
  specialized ContactsStrategy.confirmationOutput(templateResult:views:meCard:listenAfterSpeaking:nlContextUpdate:)(v4, v2, v12, 1, v5);
  OUTLINED_FUNCTION_5_0();

  outlined destroy of UsoEntity_common_Person.DefinedValues?(v5, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v4, v22);
  v18 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
  v18(v24, v3);
  OUTLINED_FUNCTION_55_6(v25);
  v18(v26, v3);
  OUTLINED_FUNCTION_55_6(v27);
  OUTLINED_FUNCTION_0_19();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_35_3();
  OUTLINED_FUNCTION_34_2();
  OUTLINED_FUNCTION_24_9();
  OUTLINED_FUNCTION_16_4();
  OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_43_1();
  OUTLINED_FUNCTION_78_6();
  v19 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_2_22(v19);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v1;
  v2 = v4;
  OUTLINED_FUNCTION_87(&v4);
  *(_QWORD *)(v2 + 736) = v0;
  swift_task_dealloc();
  outlined destroy of UsoEntity_common_Person.DefinedValues?(*(_QWORD *)(v2 + 504), &demangling cache variable for type metadata for SpeakableString?);
  if (v0)
    OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  NSNumber v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  OUTLINED_FUNCTION_4_20();
  v2 = v0[26];
  OUTLINED_FUNCTION_33_3(v3, (unint64_t *)&lazy cache variable for type metadata for SAPerson);
  v4 = v2 + 56;
  v5 = *(_QWORD *)(v2 + 88);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 80));
  v6 = (void *)OUTLINED_FUNCTION_77_6();
  OUTLINED_FUNCTION_33_3((uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v7.super.super.isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  SAPerson.init(contact:isMe:)(v6, v7.super.super.isa);
  v0[93] = v8;
  if ((specialized ContactsStrategy.isSmartEnabled.getter(v8) & 1) != 0)
  {
    v9 = v0[45];
    v10 = (uint64_t *)v0[46];
    v11 = v0[44];
    v12 = (uint64_t *)v0[42];
    v30 = v0[41];
    v31 = v0[40];
    v32 = IntentResolutionRecord.intent.getter();
    v0[94] = v32;
    v13 = IntentResolutionRecord.intentResponse.getter();
    v0[95] = v13;
    *v10 = SpeakableString.print.getter();
    v10[1] = v14;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v9 + 104))(v10, *MEMORY[0x24BE91F10], v11);
    v15 = static ContactsDirectInvocations.confirm()();
    OUTLINED_FUNCTION_33_3((uint64_t)v15, &lazy cache variable for type metadata for SAStartLocalRequest);
    v16 = SAClientBoundCommand.data.getter();
    v18 = v17;

    v19 = static ContactsDirectInvocations.deny()();
    v20 = SAClientBoundCommand.data.getter();
    v22 = v21;

    *v12 = v16;
    v12[1] = v18;
    v12[2] = v20;
    v12[3] = v22;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v30 + 104))(v12, *MEMORY[0x24BE91BC0], v31);
    type metadata accessor for ContactsLabelCATsModern();
    OUTLINED_FUNCTION_109_2();
    v23 = OUTLINED_FUNCTION_99_2();
    v0[96] = v23;
    v24 = (_QWORD *)swift_task_alloc();
    v0[97] = v24;
    *v24 = v0;
    v24[1] = ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
    return static ModifyContactAttributeSnippetModel.from(intent:intentResponse:contactService:attributeToModify:flowState:labelCATs:)(v0[47], v32, v13, v4, v0[46], v0[42], v23);
  }
  else
  {
    OUTLINED_FUNCTION_14_18();
    OUTLINED_FUNCTION_70_8();
    v26 = OUTLINED_FUNCTION_163();
    v27 = OUTLINED_FUNCTION_74_6(v26);
    v28 = MEMORY[0x24BE99088];
    *(_QWORD *)(v2 + 80) = v27;
    *(_QWORD *)(v2 + 88) = v28;
    OUTLINED_FUNCTION_93_2();
    OUTLINED_FUNCTION_60_7();
    OUTLINED_FUNCTION_23_5();

    outlined destroy of UsoEntity_common_Person.DefinedValues?(v5, &demangling cache variable for type metadata for NLContextUpdate?);
    OUTLINED_FUNCTION_74_5(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
    OUTLINED_FUNCTION_79();
    OUTLINED_FUNCTION_0_19();
    OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_45_0();
    OUTLINED_FUNCTION_17_0();
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_24_0();
    OUTLINED_FUNCTION_23_0();
    OUTLINED_FUNCTION_22_0();
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_33_0();
    OUTLINED_FUNCTION_32_2();
    OUTLINED_FUNCTION_31_2();
    OUTLINED_FUNCTION_30_2();
    OUTLINED_FUNCTION_29_1();
    OUTLINED_FUNCTION_28_2();
    OUTLINED_FUNCTION_27_2();
    OUTLINED_FUNCTION_26_1();
    OUTLINED_FUNCTION_25_2();
    OUTLINED_FUNCTION_24_2();
    OUTLINED_FUNCTION_23_1();
    OUTLINED_FUNCTION_21_2();
    OUTLINED_FUNCTION_20_2();
    OUTLINED_FUNCTION_35_3();
    OUTLINED_FUNCTION_34_2();
    OUTLINED_FUNCTION_24_9();
    OUTLINED_FUNCTION_16_4();
    OUTLINED_FUNCTION_38_1();
    OUTLINED_FUNCTION_43_1();
    OUTLINED_FUNCTION_78_6();
    v29 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
    return OUTLINED_FUNCTION_2_22(v29);
  }
}

{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;

  OUTLINED_FUNCTION_29_5();
  v1 = (void *)v0[95];
  v2 = (void *)v0[94];
  v3 = v0[41];
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_2();

  OUTLINED_FUNCTION_74_5(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  OUTLINED_FUNCTION_63_5();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_46_6();
}

{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  NSObject *v10;
  os_log_type_t v11;
  _WORD *v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  OUTLINED_FUNCTION_4_20();
  v3 = v0[49];
  v4 = v0[47];
  if (__swift_getEnumTagSinglePayload(v4, 1, v3) == 1)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v4, &demangling cache variable for type metadata for ModifyContactAttributeSnippetModel?);
    OUTLINED_FUNCTION_14_18();
    OUTLINED_FUNCTION_70_8();
    v5 = OUTLINED_FUNCTION_163();
    v6 = OUTLINED_FUNCTION_74_6(v5);
    v7 = MEMORY[0x24BE99088];
    *(_QWORD *)(v3 + 24) = v6;
    *(_QWORD *)(v3 + 32) = v7;
    OUTLINED_FUNCTION_93_2();
    OUTLINED_FUNCTION_60_7();
    OUTLINED_FUNCTION_23_5();

    outlined destroy of UsoEntity_common_Person.DefinedValues?(v1, &demangling cache variable for type metadata for NLContextUpdate?);
    OUTLINED_FUNCTION_74_5(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
    OUTLINED_FUNCTION_79();
    OUTLINED_FUNCTION_0_19();
    OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_45_0();
    OUTLINED_FUNCTION_17_0();
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_24_0();
    OUTLINED_FUNCTION_23_0();
    OUTLINED_FUNCTION_22_0();
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_33_0();
    OUTLINED_FUNCTION_32_2();
    OUTLINED_FUNCTION_31_2();
    OUTLINED_FUNCTION_30_2();
    OUTLINED_FUNCTION_29_1();
    OUTLINED_FUNCTION_28_2();
    OUTLINED_FUNCTION_27_2();
    OUTLINED_FUNCTION_26_1();
    OUTLINED_FUNCTION_25_2();
    OUTLINED_FUNCTION_24_2();
    OUTLINED_FUNCTION_23_1();
    OUTLINED_FUNCTION_21_2();
    OUTLINED_FUNCTION_20_2();
    OUTLINED_FUNCTION_35_3();
    OUTLINED_FUNCTION_34_2();
    OUTLINED_FUNCTION_24_9();
    OUTLINED_FUNCTION_16_4();
    OUTLINED_FUNCTION_38_1();
    OUTLINED_FUNCTION_43_1();
    OUTLINED_FUNCTION_78_6();
    v8 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
    return OUTLINED_FUNCTION_2_22(v8);
  }
  else
  {
    v10 = v0[73];
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_80_5();
    Logger.logObject.getter();
    v11 = OUTLINED_FUNCTION_8();
    if (OUTLINED_FUNCTION_15_0(v11))
    {
      v12 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_54_0(v12);
      OUTLINED_FUNCTION_15_5(&dword_21FE16000, v10, (os_log_type_t)v3, "#ModifyContactAttributeConfirmIntentStrategy makePromptForConfirmation constructing SMART snippet");
      OUTLINED_FUNCTION_1_4();
    }
    v13 = (void (*)(uint64_t, uint64_t, uint64_t))v0[90];
    v14 = v0[62];
    v15 = v0[57];
    v16 = v0[55];

    type metadata accessor for ModifyContactAttributeCATsModern();
    OUTLINED_FUNCTION_109_2();
    v0[98] = OUTLINED_FUNCTION_99_2();
    v13(v14, v15, v16);
    OUTLINED_FUNCTION_50_8();
    v17 = (_QWORD *)swift_task_alloc();
    v0[99] = v17;
    *v17 = v0;
    v17[1] = ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:);
    return ModifyContactAttributeCATsModern.confirmModifyNickname(requestedNickname:)(v0[62]);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  __n128 *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;

  v4 = v2[93];
  v5 = OUTLINED_FUNCTION_61_5(v2[50]);
  OUTLINED_FUNCTION_85_4(v5, *MEMORY[0x24BE91C88]);
  static DialogPhase.confirmation.getter();
  v6 = (_QWORD *)swift_task_alloc();
  v6[2] = v0;
  v6[3] = v4;
  v6[4] = v1;
  OUTLINED_FUNCTION_102_2();
  OUTLINED_FUNCTION_12_0();
  type metadata accessor for ResponseFactory();
  OUTLINED_FUNCTION_32_0();
  v2[102] = ResponseFactory.init()();
  v2[12] = v3;
  v2[13] = lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type ContactsSnippetPluginModel and conformance ContactsSnippetPluginModel, (uint64_t (*)(uint64_t))MEMORY[0x24BE91C90], MEMORY[0x24BE91C68]);
  v7 = OUTLINED_FUNCTION_93_2();
  OUTLINED_FUNCTION_83_3((uint64_t)v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v8 = (__n128 *)OUTLINED_FUNCTION_55();
  OUTLINED_FUNCTION_75_5(v8, (__n128)xmmword_21FED8AB0);
  v2[103] = v16;
  OUTLINED_FUNCTION_73_8();
  v9 = (_QWORD *)swift_task_alloc();
  v2[104] = v9;
  v10 = OUTLINED_FUNCTION_59_7(v9);
  return OUTLINED_FUNCTION_19_17(v10, v11, v12, v13, v14);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_29_5();
  v1 = v0 + 72;
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_67_1();
  OUTLINED_FUNCTION_5_0();
  __swift_destroy_boxed_opaque_existential_0(v1);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_14_1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_4_20();
  v1 = *(void **)(v0 + 744);
  v18 = *(_QWORD *)(v0 + 456);
  v14 = *(_QWORD *)(v0 + 448);
  v16 = *(_QWORD *)(v0 + 440);
  v2 = *(_QWORD *)(v0 + 400);
  v12 = *(_QWORD *)(v0 + 408);
  v3 = *(_QWORD *)(v0 + 392);
  v17 = *(_QWORD *)(v0 + 304);
  v13 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 280);
  v15 = *(_QWORD *)(v0 + 288);
  v6 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 272);
  v7 = *(_QWORD *)(v0 + 232);
  v8 = *(_QWORD *)(v0 + 240);
  v9 = *(_QWORD *)(v0 + 224);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v12, v3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v18, v16);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v17, v15);
  OUTLINED_FUNCTION_0_19();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_35_3();
  OUTLINED_FUNCTION_34_2();
  OUTLINED_FUNCTION_24_9();
  OUTLINED_FUNCTION_16_4();
  OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_43_1();
  OUTLINED_FUNCTION_78_6();
  v10 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_2_22(v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t (*v7)(void);

  OUTLINED_FUNCTION_4_20();
  OUTLINED_FUNCTION_103_2();
  v5 = *(_QWORD *)(v3 + 400);

  OUTLINED_FUNCTION_92_1(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  OUTLINED_FUNCTION_90_3(v4);
  OUTLINED_FUNCTION_91_3(v0);
  OUTLINED_FUNCTION_90_3(v2);
  OUTLINED_FUNCTION_91_3(v1);
  OUTLINED_FUNCTION_1_20(*(_QWORD *)(v3 + 664));
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_35_3();
  OUTLINED_FUNCTION_34_2();
  OUTLINED_FUNCTION_24_9();
  OUTLINED_FUNCTION_16_4();
  OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_43_1();
  v7 = (uint64_t (*)(void))OUTLINED_FUNCTION_73_0();
  return OUTLINED_FUNCTION_2_22(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t (*v6)(void);

  OUTLINED_FUNCTION_4_20();
  OUTLINED_FUNCTION_103_2();

  OUTLINED_FUNCTION_90_3(v4);
  OUTLINED_FUNCTION_91_3(v0);
  OUTLINED_FUNCTION_90_3(v2);
  OUTLINED_FUNCTION_91_3(v1);
  OUTLINED_FUNCTION_1_20(*(_QWORD *)(v3 + 712));
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_35_3();
  OUTLINED_FUNCTION_34_2();
  OUTLINED_FUNCTION_24_9();
  OUTLINED_FUNCTION_16_4();
  OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_43_1();
  v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_73_0();
  return OUTLINED_FUNCTION_2_22(v6);
}

{
  _QWORD *v0;
  uint64_t (*v1)(void);

  OUTLINED_FUNCTION_4_20();
  (*(void (**)(_QWORD, _QWORD))(v0[56] + 8))(v0[57], v0[55]);
  OUTLINED_FUNCTION_1_20(v0[92]);
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_35_3();
  OUTLINED_FUNCTION_34_2();
  OUTLINED_FUNCTION_24_9();
  OUTLINED_FUNCTION_16_4();
  OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_43_1();
  v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_73_0();
  return OUTLINED_FUNCTION_2_22(v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  OUTLINED_FUNCTION_4_20();
  v2 = *(_QWORD *)(v0 + 448);
  v1 = *(_QWORD *)(v0 + 456);
  v3 = *(_QWORD *)(v0 + 440);
  v5 = *(_QWORD *)(v0 + 400);
  v4 = *(_QWORD *)(v0 + 408);
  v6 = *(_QWORD *)(v0 + 392);
  v7 = *(_QWORD *)(v0 + 232);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  OUTLINED_FUNCTION_56_6(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  OUTLINED_FUNCTION_1_20(*(_QWORD *)(v0 + 800));
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_20_2();
  OUTLINED_FUNCTION_35_3();
  OUTLINED_FUNCTION_34_2();
  OUTLINED_FUNCTION_24_9();
  OUTLINED_FUNCTION_16_4();
  OUTLINED_FUNCTION_38_1();
  OUTLINED_FUNCTION_43_1();
  v8 = (uint64_t (*)(void))OUTLINED_FUNCTION_73_0();
  return OUTLINED_FUNCTION_2_22(v8);
}

uint64_t ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;

  v8 = (_QWORD *)*v2;
  v4 = v8;
  OUTLINED_FUNCTION_87(&v8);
  v4[83] = v1;
  swift_task_dealloc();
  v5 = v4[67];
  v6 = v4[66];
  swift_release();
  if (!v1)
    v4[84] = a1;
  OUTLINED_FUNCTION_55_6(v6);
  OUTLINED_FUNCTION_55_6(v5);
  OUTLINED_FUNCTION_20_0();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)*v2;
  v4 = v7;
  OUTLINED_FUNCTION_87(&v7);
  v4[100] = v1;
  swift_task_dealloc();
  v5 = v4[62];
  if (!v1)
    v4[101] = a1;
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v5, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_67_1();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

uint64_t closure #2 in ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  NSNumber v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v13;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  OutputGenerationManifest.canUseServerTTS.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SAPerson);
  type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v7 = a3;
  v8.super.super.isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  SAPerson.init(contact:isMe:)(a3, v8.super.super.isa);
  v10 = v9;
  static ContactsContextProvider.confirm(person:attribute:)(v9, 0, 1);

  v11 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v11);
  OutputGenerationManifest.nlContextUpdate.setter();
  ContactsSnippetPluginModel.responseViewID.getter();
  return OutputGenerationManifest.responseViewId.setter();
}

uint64_t closure #3 in ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  OutputGenerationManifest.canUseServerTTS.setter();
  OutputGenerationManifest.listenAfterSpeaking.setter();
  static ContactsContextProvider.confirm(person:attribute:)(a3, 0, 1);
  v7 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v7);
  OutputGenerationManifest.nlContextUpdate.setter();
  ContactsSnippetPluginModel.responseViewID.getter();
  return OutputGenerationManifest.responseViewId.setter();
}

uint64_t ModifyContactAttributeConfirmIntentStrategy.isRequestForDifferentAttribute(_:intent:)(char a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  Class isa;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Class v35;
  char v36;
  void *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char updated;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  os_log_type_t v51;
  _WORD *v52;
  char v53;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v72;
  uint64_t v73;
  os_log_type_t v74;
  _WORD *v75;
  const char *v76;
  uint64_t v77;
  os_log_type_t v78;
  _WORD *v79;
  uint64_t v80;
  os_log_type_t v81;
  _WORD *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  BOOL v97;
  char *v98;
  int v99;
  void (*v101)(char *, uint64_t);
  uint64_t v102;
  char *v103;
  uint64_t v104;
  id v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;

  LOBYTE(v3) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PrimitiveStringOperators?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_14_9();
  v7 = v5 - v6;
  MEMORY[0x24BDAC7A8](v8);
  v109 = (char *)&v102 - v9;
  v10 = type metadata accessor for PrimitiveStringOperators();
  v11 = *(_QWORD *)(v10 - 8);
  v110 = v10;
  v111 = v11;
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_14_9();
  v108 = v12 - v13;
  v15 = MEMORY[0x24BDAC7A8](v14);
  v112 = (char *)&v102 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v106 = (char *)&v102 - v18;
  MEMORY[0x24BDAC7A8](v17);
  v107 = (char *)&v102 - v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_55_0();
  v23 = v22 - v21;
  v24 = OUTLINED_FUNCTION_104_0();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_55_0();
  v28 = v27 - v26;
  v29 = type metadata accessor for USOParse();
  isa = v29[-1].isa;
  MEMORY[0x24BDAC7A8](v29);
  OUTLINED_FUNCTION_55_0();
  v33 = v32 - v31;
  Input.parse.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v25 + 88))(v28, v24) != *MEMORY[0x24BE98E98])
  {
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v28, v24);
LABEL_15:
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v50 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v50, (uint64_t)static Logger.siriContacts);
    v51 = OUTLINED_FUNCTION_54_2();
    if (OUTLINED_FUNCTION_30_3(v51))
    {
      v52 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_54_0(v52);
      OUTLINED_FUNCTION_15_5(&dword_21FE16000, v29, (os_log_type_t)v3, "#ModifyContactAttributeConfirmIntentStrategy isRequestForDifferentAttribute new input wasn't the expected task type, unable to determine difference");
      OUTLINED_FUNCTION_1_4();
    }

LABEL_20:
    v53 = 0;
    return v53 & 1;
  }
  (*(void (**)(uint64_t, uint64_t))(v25 + 96))(v28, v24);
  (*((void (**)(uint64_t, uint64_t, NSObject *))isa + 4))(v33, v28, v29);
  LOBYTE(v3) = v33;
  USOParse.preferredUserDialogAct.getter(v23);
  v34 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v35 = isa;
  if (__swift_getEnumTagSinglePayload(v23, 1, v34) == 1)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v23, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_12:
    v114 = 0u;
    v115 = 0u;
    goto LABEL_13;
  }
  v3 = Siri_Nlu_External_UserDialogAct.usoTask.getter();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 8))(v23, v34);
  if (!v3)
    goto LABEL_12;
  static UsoTask_CodegenConverter.convert(task:)();
  OUTLINED_FUNCTION_2();
  if (!*((_QWORD *)&v115 + 1))
  {
LABEL_13:
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)&v114, &demangling cache variable for type metadata for Any?);
    goto LABEL_14;
  }
  type metadata accessor for UsoTask_update_common_Person();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_14:
    (*((void (**)(uint64_t, NSObject *))isa + 1))(v33, v29);
    goto LABEL_15;
  }
  v36 = v113;
  v37 = a2;
  v105 = objc_msgSend(a2, sel_contactAttributeToModify);
  if (UsoTask_update_common_Person.updateTaskType.getter())
  {
    LODWORD(v38) = UsoTask_update_common_Person.updateTaskType.getter();
    v39 = OUTLINED_FUNCTION_106_1();
    if ((_DWORD)v38 != 1)
    {
      v49 = 0;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v41 = 0;
      v43 = 0;
      v48 = 1;
      goto LABEL_29;
    }
    outlined bridged method (pb) of @objc ModifyContactAttributeIntent.modifyRelationship.getter(v37);
    v41 = v40;
    v43 = v42;
    LOBYTE(v38) = v36;
    updated = UsoTask_update_common_Person.updateRelationshipInfoLocation.getter();
    if (updated == 2)
    {
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v48 = 1;
      v49 = 10;
LABEL_29:
      v66 = v105;
      goto LABEL_43;
    }
    if ((updated & 1) == 0)
    {
      OUTLINED_FUNCTION_15_13();
      OUTLINED_FUNCTION_113_1();
    }
    OUTLINED_FUNCTION_15_13();
    OUTLINED_FUNCTION_48_6();
    v83 = OUTLINED_FUNCTION_46();
    if ((_QWORD)v114)
    {
      MEMORY[0x2207D6AA0](v83);
      OUTLINED_FUNCTION_15_14();
      UsoEntity_common_PersonRelationship.relationshipIdentifierOrLabel.getter();
      v104 = v84;
      v47 = v85;
      OUTLINED_FUNCTION_2();
    }
    else
    {
      v104 = 0;
      v47 = 0;
    }
    OUTLINED_FUNCTION_15_13();
    OUTLINED_FUNCTION_48_6();
    v86 = OUTLINED_FUNCTION_46();
    LOBYTE(v38) = v114;
    if ((_QWORD)v114)
    {
      v45 = MEMORY[0x2207D6AA0](v86);
      v87 = OUTLINED_FUNCTION_2();
      if (v45)
      {
        v103 = v43;
        LOBYTE(v38) = v45;
        MEMORY[0x2207D6E30](v87);
        OUTLINED_FUNCTION_15_14();
        v88 = v111;
        v89 = (uint64_t)v109;
        v112 = v47;
        swift_retain();
        dispatch thunk of CodeGenExpression.operatorAsString.getter();
        if (v90)
        {
          PrimitiveStringOperators.init(rawValue:)();
          v91 = v110;
          if (__swift_getEnumTagSinglePayload(v89, 1, v110) != 1)
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v88 + 32))(v107, v89, v91);
            v98 = v106;
            (*(void (**)(void))(v88 + 16))();
            v99 = (*(uint64_t (**)(char *, uint64_t))(v88 + 88))(v98, v91);
            if (v99 == *MEMORY[0x24BEA0518] || v99 == *MEMORY[0x24BEA0530])
            {
              OUTLINED_FUNCTION_76_6();
              (*(void (**)(char *, uint64_t))(v88 + 8))(v107, v91);
              v48 = 0;
              v45 = 3;
              goto LABEL_85;
            }
            v101 = *(void (**)(char *, uint64_t))(v88 + 8);
            v101(v98, v91);
            OUTLINED_FUNCTION_76_6();
            v101(v107, v91);
            v45 = 0;
LABEL_84:
            v48 = 0;
LABEL_85:
            v49 = 10;
            v66 = v105;
            v47 = v112;
            goto LABEL_41;
          }
          outlined destroy of UsoEntity_common_Person.DefinedValues?(v89, &demangling cache variable for type metadata for PrimitiveStringOperators?);
        }
        v92 = dispatch thunk of CodeGenExpression.operatorAsString.getter();
        v45 = static ModifyOperation.from(_:)(v92, v93);
        OUTLINED_FUNCTION_76_6();
        swift_bridgeObjectRelease();
        goto LABEL_84;
      }
    }
    else
    {
      v45 = 0;
    }
    v48 = 1;
    v49 = 10;
    v66 = v105;
    goto LABEL_42;
  }
  v109 = (char *)OUTLINED_FUNCTION_106_1();
  v41 = outlined bridged method (pb) of @objc ModifyContactAttributeIntent.modifyNickName.getter(a2);
  v56 = v55;
  OUTLINED_FUNCTION_15_13();
  OUTLINED_FUNCTION_48_6();
  v57 = OUTLINED_FUNCTION_46();
  v58 = (uint64_t)v112;
  v103 = v56;
  if ((_QWORD)v114
    && (MEMORY[0x2207D6AB8](v57),
        OUTLINED_FUNCTION_15_14(),
        dispatch thunk of CodeGenExpression.operand.getter(),
        v59 = OUTLINED_FUNCTION_2(),
        v113)
    && (v104 = MEMORY[0x2207D6BCC](v59), v61 = v60, OUTLINED_FUNCTION_2(), v61))
  {
    v62 = v61;
  }
  else
  {
    v63 = OUTLINED_FUNCTION_48_6();
    if ((_QWORD)v114)
    {
      MEMORY[0x2207D6A7C](v63);
      v64 = OUTLINED_FUNCTION_15_14();
      v104 = MEMORY[0x2207D6BCC](v64);
      v62 = v65;
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_2();
    }
    else
    {
      swift_bridgeObjectRelease();
      v104 = 0;
      v62 = 0;
    }
  }
  OUTLINED_FUNCTION_15_13();
  OUTLINED_FUNCTION_48_6();
  v67 = OUTLINED_FUNCTION_46();
  LOBYTE(v38) = v114;
  if (!(_QWORD)v114)
  {
    v45 = 0;
    goto LABEL_38;
  }
  v45 = MEMORY[0x2207D6A7C](v67);
  v68 = OUTLINED_FUNCTION_2();
  if (!v45)
  {
LABEL_38:
    v48 = 1;
    goto LABEL_39;
  }
  LOBYTE(v38) = v45;
  MEMORY[0x2207D6BD8](v68);
  OUTLINED_FUNCTION_15_14();
  v107 = (char *)v41;
  dispatch thunk of CodeGenExpression.operatorAsString.getter();
  v70 = v69;
  OUTLINED_FUNCTION_2();
  if (v70)
  {
    PrimitiveStringOperators.init(rawValue:)();
    v38 = v110;
    if (__swift_getEnumTagSinglePayload(v7, 1, v110) == 1)
    {
      outlined destroy of UsoEntity_common_Person.DefinedValues?(v7, &demangling cache variable for type metadata for PrimitiveStringOperators?);
      goto LABEL_36;
    }
    v94 = v111;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 32))(v58, v7, v38);
    v95 = v108;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v94 + 16))(v108, v58, v38);
    v96 = (*(uint64_t (**)(uint64_t, uint64_t))(v94 + 88))(v95, v38);
    v97 = v96 == *MEMORY[0x24BEA0518] || v96 == *MEMORY[0x24BEA0530];
    v41 = (uint64_t)v107;
    if (v97)
    {
      OUTLINED_FUNCTION_107_2(v58);
      v48 = 0;
      v45 = 3;
    }
    else
    {
      OUTLINED_FUNCTION_107_2(v95);
      OUTLINED_FUNCTION_107_2(v58);
      v45 = 0;
      v48 = 0;
    }
LABEL_39:
    v49 = 6;
    v66 = v105;
    goto LABEL_40;
  }
LABEL_36:
  v45 = 0;
  v48 = 1;
  v49 = 6;
  v66 = v105;
  v41 = (uint64_t)v107;
LABEL_40:
  v39 = v109;
  v47 = v62;
LABEL_41:
  v43 = v103;
LABEL_42:
  v46 = v104;
LABEL_43:
  if (v66 != (id)v49)
  {
    OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_167();
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v73 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v73, (uint64_t)static Logger.siriContacts);
    v74 = OUTLINED_FUNCTION_54_2();
    if (OUTLINED_FUNCTION_30_3(v74))
    {
      v75 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_54_0(v75);
      v76 = "#ModifyContactAttributeConfirmIntentStrategy isRequestForDifferentAttribute found new attribute type differe"
            "nt from current one, returning true";
      goto LABEL_62;
    }
LABEL_63:
    OUTLINED_FUNCTION_46();

    OUTLINED_FUNCTION_56_6(*((uint64_t (**)(uint64_t, uint64_t))v35 + 1));
    v53 = 1;
    return v53 & 1;
  }
  if (v39 == (id)v45)
    v48 = 1;
  if ((v48 & 1) == 0)
  {
    OUTLINED_FUNCTION_48();
    OUTLINED_FUNCTION_167();
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v77 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v77, (uint64_t)static Logger.siriContacts);
    v78 = OUTLINED_FUNCTION_54_2();
    if (OUTLINED_FUNCTION_30_3(v78))
    {
      v79 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_54_0(v79);
      v76 = "#ModifyContactAttributeConfirmIntentStrategy isRequestForDifferentAttribute found new operation type differe"
            "nt from current one, returning true";
LABEL_62:
      OUTLINED_FUNCTION_15_5(&dword_21FE16000, v45, (os_log_type_t)v38, v76);
      OUTLINED_FUNCTION_1_4();
    }
    goto LABEL_63;
  }
  if (!v43)
  {
    OUTLINED_FUNCTION_167();
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v80 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v80, (uint64_t)static Logger.siriContacts);
    v81 = OUTLINED_FUNCTION_54_2();
    if (OUTLINED_FUNCTION_30_3(v81))
    {
      v82 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_54_0(v82);
      OUTLINED_FUNCTION_15_5(&dword_21FE16000, v45, (os_log_type_t)v38, "#ModifyContactAttributeConfirmIntentStrategy isRequestForDifferentAttribute there was no current attribute value, cannot evaluate difference, returning false");
      OUTLINED_FUNCTION_1_4();
    }
    OUTLINED_FUNCTION_46();

    OUTLINED_FUNCTION_56_6(*((uint64_t (**)(uint64_t, uint64_t))v35 + 1));
    goto LABEL_20;
  }
  if (v47)
  {
    if (v41 == v46 && v43 == v47)
      v72 = 1;
    else
      v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_46();
    OUTLINED_FUNCTION_167();
  }
  else
  {
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_46();
    v72 = 0;
  }
  OUTLINED_FUNCTION_56_6(*((uint64_t (**)(uint64_t, uint64_t))v35 + 1));
  swift_bridgeObjectRelease_n();
  v53 = v72 ^ 1;
  return v53 & 1;
}

uint64_t type metadata accessor for ModifyContactAttributeConfirmIntentStrategy()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ModifyContactAttributeConfirmIntentStrategy;
  if (!type metadata singleton initialization cache for ModifyContactAttributeConfirmIntentStrategy)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.actionForInput(_:confirmParameters:) in conformance ModifyContactAttributeConfirmIntentStrategy@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return ModifyContactAttributeConfirmIntentStrategy.actionForInput(_:confirmParameters:)(a1, a2);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.parseConfirmationResponse(input:confirmParameters:) in conformance ModifyContactAttributeConfirmIntentStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.parseDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>;
  return ModifyContactAttributeConfirmIntentStrategy.parseConfirmationResponse(input:confirmParameters:)(a1, a2, a3);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makePromptForConfirmation(confirmParameters:) in conformance ModifyContactAttributeConfirmIntentStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.parseDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>;
  return ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(a1, a2);
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeRepromptOnEmptyParse(confirmParameters:) in conformance ModifyContactAttributeConfirmIntentStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for ModifyContactAttributeConfirmIntentStrategy();
  *v1 = v0;
  v1[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.parseDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>;
  return ConfirmIntentFlowStrategyAsync.makeRepromptOnEmptyParse(confirmParameters:)();
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeRepromptOnLowConfidence(confirmParameters:) in conformance ModifyContactAttributeConfirmIntentStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for ModifyContactAttributeConfirmIntentStrategy();
  *v1 = v0;
  v1[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.parseDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>;
  return ConfirmIntentFlowStrategyAsync.makeRepromptOnLowConfidence(confirmParameters:)();
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeConfirmationRejectedResponse(confirmParameters:) in conformance ModifyContactAttributeConfirmIntentStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for ModifyContactAttributeConfirmIntentStrategy();
  *v1 = v0;
  v1[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.parseDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>;
  return ConfirmIntentFlowStrategyAsync.makeConfirmationRejectedResponse(confirmParameters:)();
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeFlowCancelledResponse(confirmParameters:) in conformance ModifyContactAttributeConfirmIntentStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for ModifyContactAttributeConfirmIntentStrategy();
  *v1 = v0;
  v1[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.makePromptForDisambiguation(paginatedItems:resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>;
  return ConfirmIntentFlowStrategyAsync.makeFlowCancelledResponse(confirmParameters:)();
}

uint64_t protocol witness for ConfirmIntentFlowStrategyAsync.makeErrorResponse(error:confirmParameters:) in conformance ModifyContactAttributeConfirmIntentStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for ModifyContactAttributeConfirmIntentStrategy();
  *v1 = v0;
  v1[1] = protocol witness for NeedsDisambiguationFlowStrategyAsync.parseDisambiguationResult(input:paginatedItems:resolveRecord:) in conformance ContactAttributeDisambiguationStrategy<A, B, C>;
  return ConfirmIntentFlowStrategyAsync.makeErrorResponse(error:confirmParameters:)();
}

uint64_t outlined bridged method (ob) of @objc ModifyContactAttributeIntent.modifyNickName.getter(void *a1)
{
  return outlined bridged method (ob) of @objc ModifyContactAttributeIntent.modifyNickName.getter(a1, (SEL *)&selRef_modifyNickName);
}

uint64_t partial apply for closure #3 in ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(uint64_t a1)
{
  uint64_t v1;

  return closure #3 in ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t outlined bridged method (ob) of @objc ContactRelation.relationship.getter(void *a1)
{
  return outlined bridged method (ob) of @objc ModifyContactAttributeIntent.modifyNickName.getter(a1, (SEL *)&selRef_relationship);
}

uint64_t outlined bridged method (ob) of @objc ModifyContactAttributeIntent.modifyNickName.getter(void *a1, SEL *a2)
{
  id v3;
  uint64_t v4;

  v3 = objc_msgSend(a1, *a2);

  if (!v3)
    return 0;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t partial apply for closure #2 in ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in ModifyContactAttributeConfirmIntentStrategy.makePromptForConfirmation(confirmParameters:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t outlined init with copy of NLContextUpdate?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_0_19()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v0[32];
  *(_QWORD *)(v1 - 112) = v0[35];
  *(_QWORD *)(v1 - 104) = v2;
  v3 = v0[30];
  *(_QWORD *)(v1 - 96) = v0[31];
  *(_QWORD *)(v1 - 88) = v3;
  *(_QWORD *)(v1 - 80) = v0[27];
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_1_20@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v2 - 80) = a1;
  v3 = v1[31];
  *(_QWORD *)(v2 - 112) = v1[32];
  *(_QWORD *)(v2 - 104) = v3;
  v4 = v1[27];
  *(_QWORD *)(v2 - 96) = v1[30];
  *(_QWORD *)(v2 - 88) = v4;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_2_22(uint64_t (*a1)(void))
{
  return a1();
}

id OUTLINED_FUNCTION_14_18()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v2 = (void *)v0[93];
  v3 = v0[57];
  *(_QWORD *)(v1 - 96) = v0[56];
  *(_QWORD *)(v1 - 88) = v0[55];
  *(_QWORD *)(v1 - 80) = v3;
  return v2;
}

uint64_t OUTLINED_FUNCTION_15_14()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_19_17(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t OUTLINED_FUNCTION_22_13()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0[56] + 16))(v0[65], v0[58], v0[55]);
}

uint64_t OUTLINED_FUNCTION_46_6()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_48_6()
{
  return dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
}

uint64_t OUTLINED_FUNCTION_50_8()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_storeEnumTagSinglePayload(v0, 0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_55_6(uint64_t a1)
{
  uint64_t *v1;

  return outlined destroy of UsoEntity_common_Person.DefinedValues?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_56_6@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t OUTLINED_FUNCTION_57_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  __swift_storeEnumTagSinglePayload(v3, 0, 1, v2);
  return v4(v0, v1, v2);
}

uint64_t OUTLINED_FUNCTION_59_7(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 192);
}

uint64_t OUTLINED_FUNCTION_60_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  return specialized ContactsStrategy.confirmationOutput(templateResult:views:meCard:listenAfterSpeaking:nlContextUpdate:)(v0, v2, v3, 1, v1);
}

uint64_t OUTLINED_FUNCTION_61_5@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(v1 + 304));
}

uint64_t OUTLINED_FUNCTION_63_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_66_10(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 248);
}

void OUTLINED_FUNCTION_70_8()
{
  void *v0;

  static ContactsContextProvider.confirm(person:attribute:)(v0, 6, 0);
}

id OUTLINED_FUNCTION_73_8()
{
  void *v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_74_6(uint64_t a1)
{
  uint64_t v1;

  __swift_storeEnumTagSinglePayload(v1, 0, 1, a1);
  return type metadata accessor for AceOutput();
}

uint64_t OUTLINED_FUNCTION_75_5(__n128 *a1, __n128 a2)
{
  unint64_t v2;

  a1[1] = a2;
  a1[2].n128_u64[0] = v2;
  return specialized Array._endMutation()();
}

uint64_t OUTLINED_FUNCTION_76_6()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_77_6()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 24))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_78_6()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_80_5()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v1, v0);
}

uint64_t OUTLINED_FUNCTION_83_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(a1, v1, v2);
}

uint64_t OUTLINED_FUNCTION_85_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v2, a2, v3);
}

uint64_t OUTLINED_FUNCTION_90_3(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_91_3(uint64_t a1)
{
  uint64_t *v1;

  return outlined destroy of UsoEntity_common_Person.DefinedValues?(a1, v1);
}

uint64_t *OUTLINED_FUNCTION_93_2()
{
  uint64_t *v0;

  return __swift_allocate_boxed_opaque_existential_1(v0);
}

uint64_t OUTLINED_FUNCTION_94_3()
{
  return IntentResolutionRecord.intent.getter();
}

uint64_t OUTLINED_FUNCTION_95_2()
{
  return IntentResolutionRecord.intentResponse.getter();
}

uint64_t OUTLINED_FUNCTION_99_2()
{
  return CATWrapperSimple.__allocating_init(options:globals:)();
}

uint64_t OUTLINED_FUNCTION_102_2()
{
  return OutputGenerationManifest.init(dialogPhase:_:)();
}

id OUTLINED_FUNCTION_106_1()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, (SEL)(v1 + 1059));
}

uint64_t OUTLINED_FUNCTION_107_2(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t OUTLINED_FUNCTION_109_2()
{
  return static CATOption.defaultMode.getter();
}

uint64_t OUTLINED_FUNCTION_110_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_storeEnumTagSinglePayload(a1, 1, 1, a4);
}

id OUTLINED_FUNCTION_112_2(void *a1)
{
  uint64_t v1;

  return objc_msgSend(a1, (SEL)(v1 + 1293));
}

void OUTLINED_FUNCTION_113_1()
{
  JUMPOUT(0x2207D6D64);
}

uint64_t OUTLINED_FUNCTION_120_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

id Contact.__allocating_init(contactIdentifier:givenName:middleName:familyName:nickName:fullName:namePrefix:suffix:phoneNumber:emailAddress:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  objc_class *v20;
  objc_class *v21;
  void *v27;
  id v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v21 = v20;
  if (a2)
  {
    v27 = (void *)MEMORY[0x2207D7CB8]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v27 = 0;
  }
  v28 = objc_allocWithZone(v21);
  v29 = static String.EMPTY.getter();
  v30 = (void *)MEMORY[0x2207D7CB8](v29);
  swift_bridgeObjectRelease();
  v31 = objc_msgSend(v28, sel_initWithIdentifier_displayString_, v27, v30);

  v32 = v31;
  if (a4)
  {
    v33 = (void *)MEMORY[0x2207D7CB8](a3, a4);
    swift_bridgeObjectRelease();
  }
  else
  {
    v33 = 0;
  }
  objc_msgSend(v31, sel_setGivenName_, v33);

  if (a6)
  {
    MEMORY[0x2207D7CB8](a5, a6);
    v34 = OUTLINED_FUNCTION_4_21();
  }
  else
  {
    a5 = 0;
  }
  OUTLINED_FUNCTION_1_21(v34, sel_setMiddleName_);

  if (a8)
    OUTLINED_FUNCTION_6_19();
  OUTLINED_FUNCTION_1_21(v35, sel_setFamilyName_);

  if (a10)
  {
    MEMORY[0x2207D7CB8](a9, a10);
    v36 = OUTLINED_FUNCTION_4_21();
  }
  OUTLINED_FUNCTION_1_21(v36, sel_setNickName_);

  if (a14)
    OUTLINED_FUNCTION_5_16();
  OUTLINED_FUNCTION_0_20(v37, sel_setNamePrefix_);

  if (a16)
    OUTLINED_FUNCTION_6_19();
  OUTLINED_FUNCTION_0_20(v38, sel_setNameSuffix_);

  if (a12)
    OUTLINED_FUNCTION_5_16();
  OUTLINED_FUNCTION_0_20(v39, sel_setFullName_);

  if (a18)
    OUTLINED_FUNCTION_6_19();
  OUTLINED_FUNCTION_0_20(v40, sel_setPhoneNumber_);

  if (a20)
    OUTLINED_FUNCTION_5_16();
  objc_msgSend(v31, sel_setEmailAddress_, 0);

  return v31;
}

id OUTLINED_FUNCTION_0_20(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

id OUTLINED_FUNCTION_1_21(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

uint64_t OUTLINED_FUNCTION_2_23()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_3_15()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_4_21()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_5_16()
{
  JUMPOUT(0x2207D7CB8);
}

void OUTLINED_FUNCTION_6_19()
{
  JUMPOUT(0x2207D7CB8);
}

uint64_t Views.buildViews(for:isMe:mockGlobals:)(void *a1, os_log_type_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t isa;
  NSObject *v22;
  id v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  char v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  os_log_type_t v51;
  void *v53[5];
  NSObject v54[2];
  uint64_t v55;
  _QWORD v56[3];
  ValueMetadata *v57;
  _UNKNOWN **v58;
  uint64_t v59;
  ValueMetadata *v60;
  _UNKNOWN **v61;

  v3 = v2;
  v53[0] = a1;
  v5 = type metadata accessor for Locale();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)v53 - v10;
  v12 = v2 + 1;
  __swift_project_boxed_opaque_existential_1(v2 + 1, v2[4]);
  if ((dispatch thunk of DeviceState.isXRDevice.getter() & 1) != 0
    || (v13 = v2[4],
        __swift_project_boxed_opaque_existential_1(v12, v3[4]),
        (DeviceState.supportsCompactView.getter(v13) & 1) == 0))
  {
    __swift_project_boxed_opaque_existential_1(v12, v3[4]);
    if ((dispatch thunk of DeviceState.isWatch.getter() & 1) != 0)
    {
      v27 = *v3;
      outlined init with copy of DeviceState((uint64_t)v12, (uint64_t)v56);
      v60 = &type metadata for InstalledAppsProvider;
      v61 = &protocol witness table for InstalledAppsProvider;
      v55 = v27;
      __swift_project_boxed_opaque_existential_1(v12, v3[4]);
      swift_retain();
      dispatch thunk of DeviceState.siriLocale.getter();
      v28 = Locale.identifier.getter();
      OUTLINED_FUNCTION_2_24(v28, v29);
      v30 = OUTLINED_FUNCTION_0_21();
      v32 = v31;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      WatchViews.buildGetSnippet(contact:localeString:)(v53[0], v30, v32);
      v34 = v33;
      swift_bridgeObjectRelease();
      v35 = outlined destroy of WatchViews((uint64_t)&v55);
      if (v34 >> 62)
      {
        v36 = OUTLINED_FUNCTION_33_3(v35, &lazy cache variable for type metadata for SAAceView);
        swift_bridgeObjectRetain();
        isa = _bridgeCocoaArray<A>(_:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        v36 = (v34 & 0xFFFFFFFFFFFFFF8);
        swift_bridgeObjectRetain();
        v37 = dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
        OUTLINED_FUNCTION_33_3(v37, &lazy cache variable for type metadata for SAAceView);
        isa = v34;
      }
      swift_bridgeObjectRelease();
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v38 = OUTLINED_FUNCTION_26();
      OUTLINED_FUNCTION_10_1(v38, (uint64_t)static Logger.siriContacts);
      v39 = OUTLINED_FUNCTION_8();
      if (os_log_type_enabled(v36, v39))
      {
        v40 = (uint8_t *)OUTLINED_FUNCTION_2_1();
        *(_WORD *)v40 = 0;
        _os_log_impl(&dword_21FE16000, v36, v39, "#Views Constructed snippet for Watch.", v40, 2u);
        goto LABEL_31;
      }
LABEL_32:

      return isa;
    }
    __swift_project_boxed_opaque_existential_1(v12, v3[4]);
    v41 = dispatch thunk of DeviceState.isMac.getter();
    outlined init with copy of Views((uint64_t)v3, (uint64_t)&v55);
    if ((v41 & 1) != 0)
    {
      outlined destroy of Views((uint64_t)&v55);
    }
    else
    {
      __swift_project_boxed_opaque_existential_1(v56, (uint64_t)v57);
      v36 = dispatch thunk of DeviceState.isXRDevice.getter();
      outlined destroy of Views((uint64_t)&v55);
      if ((v36 & 1) == 0)
      {
        if (one-time initialization token for siriContacts != -1)
          swift_once();
        v50 = OUTLINED_FUNCTION_26();
        OUTLINED_FUNCTION_10_1(v50, (uint64_t)static Logger.siriContacts);
        v51 = OUTLINED_FUNCTION_8();
        if (!os_log_type_enabled(v36, v51))
        {
          isa = MEMORY[0x24BEE4AF8];
          goto LABEL_32;
        }
        *(_WORD *)OUTLINED_FUNCTION_2_1() = 0;
        OUTLINED_FUNCTION_15_5(&dword_21FE16000, v36, v51, "#Views Skipping snippet for device.");
LABEL_31:
        OUTLINED_FUNCTION_0();
      }
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v42 = OUTLINED_FUNCTION_55();
    *(_OWORD *)(v42 + 16) = xmmword_21FED8AB0;
    OUTLINED_FUNCTION_33_3(v42, (unint64_t *)&lazy cache variable for type metadata for SAABPersonSnippet);
    v43 = objc_allocWithZone(MEMORY[0x24BDD16E0]);
    SAABPersonSnippet.init(_:isMe:)(v53[0], objc_msgSend(v43, sel_initWithBool_, a2 & 1));
    *(_QWORD *)(v42 + 32) = v44;
    v54[0].isa = (Class)v42;
    v36 = v54;
    specialized Array._endMutation()();
    isa = (uint64_t)v54[0].isa;
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v45 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v45, (uint64_t)static Logger.siriContacts);
    v46 = OUTLINED_FUNCTION_8();
    if (!OUTLINED_FUNCTION_7_17(v46))
      goto LABEL_32;
    *(_WORD *)OUTLINED_FUNCTION_2_1() = 0;
    OUTLINED_FUNCTION_15_5(&dword_21FE16000, v54, a2, "#Views Constructed snippet for Mac or XR.");
    goto LABEL_31;
  }
  v14 = *v3;
  v57 = &type metadata for InstalledAppsProvider;
  v58 = &protocol witness table for InstalledAppsProvider;
  v55 = v14;
  v59 = 0;
  type metadata accessor for ContactAttribute();
  swift_retain();
  v15 = ContactAttribute.__allocating_init(contactAttributeType:identifier:handleLabel:handleValue:ageDateTime:postalAddress:)(9, 0, 0, 0, 0, 0, 0, 0, 0);
  __swift_project_boxed_opaque_existential_1(v12, v3[4]);
  dispatch thunk of DeviceState.siriLocale.getter();
  v16 = Locale.identifier.getter();
  OUTLINED_FUNCTION_2_24(v16, v17);
  OUTLINED_FUNCTION_0_21();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  CompactViews.buildGetAttributeSnippet(handles:contact:contactAttribute:localeString:)();
  v19 = v18;

  swift_bridgeObjectRelease();
  outlined destroy of CompactViews((uint64_t)&v55);
  if (v19)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v20 = OUTLINED_FUNCTION_55();
    *(_OWORD *)(v20 + 16) = xmmword_21FED8AB0;
    *(_QWORD *)(v20 + 32) = v19;
    v55 = v20;
    specialized Array._endMutation()();
    isa = v55;
    v22 = one-time initialization token for siriContacts;
    v23 = v19;
    if (v22 != -1)
      swift_once();
    v24 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v24, (uint64_t)static Logger.siriContacts);
    v25 = OUTLINED_FUNCTION_8();
    if (OUTLINED_FUNCTION_7_17(v25))
    {
      v26 = (uint8_t *)OUTLINED_FUNCTION_2_1();
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_21FE16000, v22, (os_log_type_t)v15, "#Views Constructed snippet for iOS VF/VO.", v26, 2u);
      OUTLINED_FUNCTION_0();
    }

  }
  else
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v47 = OUTLINED_FUNCTION_26();
    v48 = OUTLINED_FUNCTION_10_1(v47, (uint64_t)static Logger.siriContacts);
    v49 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v48, v49))
    {
      *(_WORD *)OUTLINED_FUNCTION_2_1() = 0;
      OUTLINED_FUNCTION_15_5(&dword_21FE16000, v48, v49, "#Views Skipped snippet for iOS VF/VO.");
      OUTLINED_FUNCTION_0();
    }

    return MEMORY[0x24BEE4AF8];
  }
  return isa;
}

uint64_t outlined init with copy of Views(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for Views(a2, a1);
  return a2;
}

uint64_t Views.init(deviceState:)@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for CATOption();
  MEMORY[0x24BDAC7A8](v4);
  type metadata accessor for ContactsLabelCATs();
  static CATOption.defaultMode.getter();
  *a2 = CATWrapper.__allocating_init(options:globals:)();
  return outlined init with take of FlowProviding(a1, (uint64_t)(a2 + 1));
}

uint64_t outlined destroy of WatchViews(uint64_t a1)
{
  destroy for WatchViews(a1);
  return a1;
}

uint64_t destroy for Views(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 8;
  swift_release();
  return __swift_destroy_boxed_opaque_existential_0(v1);
}

uint64_t initializeWithCopy for Views(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = a2 + 8;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = v4;
  v6 = **(void (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  swift_retain();
  v6(a1 + 8, v3, v5);
  return a1;
}

_QWORD *assignWithCopy for Views(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = a2 + 1;
  *a1 = *a2;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 1, v3);
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Views(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for Views(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Views(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Views()
{
  return &type metadata for Views;
}

uint64_t OUTLINED_FUNCTION_0_21()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

unint64_t OUTLINED_FUNCTION_2_24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 184) = a1;
  *(_QWORD *)(v2 - 176) = a2;
  *(_QWORD *)(v2 - 200) = 45;
  *(_QWORD *)(v2 - 192) = 0xE100000000000000;
  *(_QWORD *)(v2 - 216) = 95;
  *(_QWORD *)(v2 - 208) = 0xE100000000000000;
  return lazy protocol witness table accessor for type String and conformance String();
}

BOOL OUTLINED_FUNCTION_7_17(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

id SiriMatch.__allocating_init(identifier:fullName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  id v9;
  void *v10;
  id v11;

  v9 = objc_allocWithZone(v4);
  v10 = (void *)MEMORY[0x2207D7CB8](a3, a4);
  v11 = outlined bridged method (mbnnn) of @objc INObject.init(identifier:display:)(a1, a2, (uint64_t)v10, v9);

  outlined bridged method (mbnn) of @objc SiriMatch.fullName.setter(a3, a4, v11);
  return v11;
}

void outlined bridged method (mbnn) of @objc SiriMatch.fullName.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = (id)MEMORY[0x2207D7CB8]();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_setFullName_, v4);

}

uint64_t ModifyContactAttributeViewBuilder.makeViewsForWatch()()
{
  return ModifyNicknameUnsupportedViewBuilder.makeViewsForWatch()("[ModifyContactAttributeViewBuilder] Constructing no views for Watch, an unsupported idiom.");
}

uint64_t ModifyContactAttributeViewBuilder.makeViewsForMac()()
{
  NSObject *v0;
  os_log_type_t v1;
  NSObject *v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  Class isa;
  objc_class *v9;
  Class v10;
  uint64_t v11;
  _QWORD v13[5];

  v2 = v0;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v3 = OUTLINED_FUNCTION_26();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.siriContacts);
  OUTLINED_FUNCTION_70();
  v4 = OUTLINED_FUNCTION_8();
  if (OUTLINED_FUNCTION_3(v4))
  {
    v5 = (uint8_t *)OUTLINED_FUNCTION_2_1();
    *(_WORD *)v5 = 0;
    OUTLINED_FUNCTION_31(&dword_21FE16000, v0, v1, "[ModifyContactAttributeViewBuilder] Constructing PersonSnippet with all display properties for macOS.", v5);
    OUTLINED_FUNCTION_0();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v6 = OUTLINED_FUNCTION_55();
  *(_OWORD *)(v6 + 16) = xmmword_21FED8AB0;
  v7 = OUTLINED_FUNCTION_33_3(v6, (unint64_t *)&lazy cache variable for type metadata for SAABPersonSnippet);
  isa = v0->isa;
  OUTLINED_FUNCTION_33_3(v7, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v9 = isa;
  v10 = NSNumber.init(integerLiteral:)(1).super.super.isa;
  outlined init with copy of AppUtil((uint64_t)&v2[12], (uint64_t)v13);
  SAABPersonSnippet.init(contact:attributeType:isMe:appUtil:)(v9, 0, v10, (uint64_t)v13);
  *(_QWORD *)(v6 + 32) = v11;
  v13[0] = v6;
  specialized Array._endMutation()();
  return v13[0];
}

uint64_t ModifyContactAttributeViewBuilder.makeViewsForCarPlay()()
{
  return ModifyNicknameUnsupportedViewBuilder.makeViewsForWatch()("[ModifyContactAttributeViewBuilder] Constructing no views for CarPlay.");
}

uint64_t ModifyContactAttributeViewBuilder.makeViewsForCarDND()()
{
  return ModifyNicknameUnsupportedViewBuilder.makeViewsForWatch()("[ModifyContactAttributeViewBuilder] Constructing no views for CarDND.");
}

uint64_t ModifyContactAttributeViewBuilder.makeViewsForIOS()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  Swift::String_optional v28;
  Swift::String v29;
  Swift::String_optional v30;
  Swift::String v31;
  unint64_t rawValue;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  id v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  id v52;
  Swift::String_optional v53;
  Swift::String v54;
  Swift::String v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v67[7];
  _QWORD v68[6];
  uint64_t v69;

  v3 = v0;
  v4 = type metadata accessor for Locale();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CATOption();
  MEMORY[0x24BDAC7A8](v8);
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v9 = OUTLINED_FUNCTION_26();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.siriContacts);
  OUTLINED_FUNCTION_70();
  v10 = OUTLINED_FUNCTION_8();
  if (os_log_type_enabled((os_log_t)v0, v10))
  {
    v11 = (uint8_t *)OUTLINED_FUNCTION_2_1();
    *(_WORD *)v11 = 0;
    OUTLINED_FUNCTION_31(&dword_21FE16000, v0, v10, "[ModifyContactAttributeViewBuilder] Constructing PersonSnippet-like CardSnippet for iOS.", v11);
    OUTLINED_FUNCTION_0();
  }

  v12 = *(_QWORD *)(v0 + 8);
  if (v12 != 6)
  {
    if (v12 == 10)
    {
      v13 = *(_QWORD *)(v0 + 16);
      if ((unint64_t)(v13 - 1) < 2)
      {
        v14 = *(_QWORD *)(v0 + 136);
        OUTLINED_FUNCTION_0_22();
        v68[0] = v14;
        v69 = 0;
        v15 = *(_QWORD *)(v3 + 24);
        v16 = *(void **)(v3 + 32);
        v17 = *(void **)v3;
        swift_retain();
        v18 = v17;
        v19 = CNContact.formattedFullName.getter();
        v21 = v20;
        v22 = *(_QWORD *)(v3 + 40);
        v23 = *(void **)(v3 + 48);
        v24 = objc_msgSend(v17, sel_identifier);
        v25 = OUTLINED_FUNCTION_4_6();
        v27 = v26;

        v28.value._countAndFlagsBits = v15;
        v28.value._object = v16;
        v29._countAndFlagsBits = v19;
        v29._object = v21;
        v30.value._countAndFlagsBits = v22;
        v30.value._object = v23;
        v31._countAndFlagsBits = v25;
        v31._object = v27;
        rawValue = (unint64_t)CompactViews.buildCompactSetRelationshipView(relatedContactName:meCardName:relationship:meCardContactID:)(v28, v29, v30, v31)._0._rawValue;
        swift_bridgeObjectRelease();
LABEL_14:
        swift_bridgeObjectRelease();
        outlined destroy of CompactViews((uint64_t)v68);
LABEL_19:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        v61 = OUTLINED_FUNCTION_55();
        v62 = v61;
        *(_OWORD *)(v61 + 16) = xmmword_21FED8AB0;
        if (rawValue >> 62)
        {
          OUTLINED_FUNCTION_33_3(v61, &lazy cache variable for type metadata for SFCardSection);
          swift_bridgeObjectRetain();
          _bridgeCocoaArray<A>(_:)();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRetain();
          v63 = dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
          OUTLINED_FUNCTION_33_3(v63, &lazy cache variable for type metadata for SFCardSection);
        }
        v64 = swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_33_3(v64, &lazy cache variable for type metadata for SACardSnippet);
        AppUtil.sashBundleId.getter();
        v65 = static SACardSnippet.makeFromCardSections(cardSections:shouldGenerateAceId:sashBundleId:referencedCommands:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v62 + 32) = v65;
        v68[0] = v62;
        goto LABEL_22;
      }
      if (v13 == 3)
      {
        OUTLINED_FUNCTION_0_22();
        type metadata accessor for ContactsLabelCATs();
        OUTLINED_FUNCTION_11_14();
        v68[0] = OUTLINED_FUNCTION_14_19();
        v69 = 0;
        v47 = *(_QWORD *)(v0 + 24);
        v48 = *(void **)(v0 + 32);
        v49 = CNContact.formattedFullName.getter();
        v51 = v50;
        v52 = OUTLINED_FUNCTION_20_9(v49, sel_identifier);
        OUTLINED_FUNCTION_4_6();
        OUTLINED_FUNCTION_7_18();
        v53.value._countAndFlagsBits = v47;
        v53.value._object = v48;
        v54._countAndFlagsBits = v49;
        v54._object = v51;
        v55._countAndFlagsBits = v1;
        v55._object = v2;
        rawValue = (unint64_t)CompactViews.buildCompactForgetRelationshipView(relatedContactName:meCardName:meCardContactID:)(v53, v54, v55)._0._rawValue;
        goto LABEL_13;
      }
    }
    goto LABEL_18;
  }
  v33 = *(_QWORD *)(v0 + 16);
  if ((unint64_t)(v33 - 1) < 2)
  {
    v34 = *(_QWORD *)(v0 + 136);
    OUTLINED_FUNCTION_0_22();
    v68[0] = v34;
    v69 = 0;
    v35 = swift_retain();
    v36 = OUTLINED_FUNCTION_20_9(v35, sel_nickname);
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v39 = v38;

    v40 = CNContact.formattedFullName.getter();
    v42 = v41;
    v43 = OUTLINED_FUNCTION_20_9(v40, sel_identifier);
    OUTLINED_FUNCTION_4_6();
    OUTLINED_FUNCTION_7_18();
    v44._countAndFlagsBits = v37;
    v44._object = v39;
    v45._countAndFlagsBits = v40;
    v45._object = v42;
    v46._countAndFlagsBits = v1;
    v46._object = v2;
    rawValue = (unint64_t)CompactViews.buildCompactSetNickNameView(newNickName:meCardName:meCardContactID:)(v44, v45, v46)._0._rawValue;
    swift_bridgeObjectRelease();
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  if (v33 != 3)
  {
LABEL_18:
    rawValue = MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  OUTLINED_FUNCTION_0_22();
  type metadata accessor for ContactsLabelCATs();
  OUTLINED_FUNCTION_11_14();
  v68[0] = OUTLINED_FUNCTION_14_19();
  v69 = 0;
  type metadata accessor for ContactAttribute();
  v56 = ContactAttribute.__allocating_init(contactAttributeType:identifier:handleLabel:handleValue:ageDateTime:postalAddress:)(9, 0, 0, 0, 0, 0, 0, 0, 0);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
  dispatch thunk of DeviceState.siriLocale.getter();
  v67[5] = Locale.identifier.getter();
  v67[6] = v57;
  v67[3] = 45;
  v67[4] = 0xE100000000000000;
  v67[1] = 95;
  v67[2] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  CompactViews.buildGetAttributeSnippet(handles:contact:contactAttribute:localeString:)();
  v59 = v58;

  swift_bridgeObjectRelease();
  outlined destroy of CompactViews((uint64_t)v68);
  if (v59)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v60 = OUTLINED_FUNCTION_55();
    *(_OWORD *)(v60 + 16) = xmmword_21FED8AB0;
    *(_QWORD *)(v60 + 32) = v59;
    v68[0] = v60;
LABEL_22:
    specialized Array._endMutation()();
    return v68[0];
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t destroy for ModifyContactAttributeViewBuilder(id *a1)
{

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(a1 + 7));
  __swift_destroy_boxed_opaque_existential_0((uint64_t)(a1 + 12));
  return swift_release();
}

uint64_t initializeWithCopy for ModifyContactAttributeViewBuilder(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  id v12;
  __int128 v13;

  v4 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = a1 + 56;
  v8 = a2 + 56;
  v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v9;
  v10 = v9;
  v11 = **(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
  v12 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v7, v8, v10);
  v13 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 120) = v13;
  (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 96, a2 + 96);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ModifyContactAttributeViewBuilder(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 56), (uint64_t *)(a2 + 56));
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 96), (uint64_t *)(a2 + 96));
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_retain();
  swift_release();
  return a1;
}

void *__swift_memcpy144_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x90uLL);
}

uint64_t assignWithTake for ModifyContactAttributeViewBuilder(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0(a1 + 56);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  __swift_destroy_boxed_opaque_existential_0(a1 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  v8 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v8;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ModifyContactAttributeViewBuilder(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 144))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModifyContactAttributeViewBuilder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ModifyContactAttributeViewBuilder()
{
  return &type metadata for ModifyContactAttributeViewBuilder;
}

uint64_t OUTLINED_FUNCTION_0_22()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with copy of AppUtil(v0 + 96, v1 - 128);
}

void OUTLINED_FUNCTION_7_18()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_11_14()
{
  return static CATOption.defaultMode.getter();
}

uint64_t OUTLINED_FUNCTION_14_19()
{
  return CATWrapper.__allocating_init(options:globals:)();
}

BOOL INIntentResolutionResult.isGetContactNeedsValue.getter()
{
  return OUTLINED_FUNCTION_1_22() != (id)1 && OUTLINED_FUNCTION_1_22() != (id)2;
}

BOOL INIntentResolutionResult.isUnsupportedRelationshipNotFound.getter()
{
  void *v0;

  return SiriKitContactUnsupportedReason.init(rawValue:)((Swift::Int)objc_msgSend(v0, sel_unsupportedReason)).value == SiriContactsIntents_SiriKitContactUnsupportedReason_noContactsFoundForRelation;
}

BOOL INIntentResolutionResult.isModifyContactAttributeNeedsValue.getter()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  type metadata accessor for ModifyContactAttributeModifyNickNameResolutionResult();
  if (OUTLINED_FUNCTION_2_25())
  {
    if (OUTLINED_FUNCTION_0_23() == (id)1)
      return 0;
    goto LABEL_6;
  }
  type metadata accessor for ModifyContactAttributeModifyRelationshipResolutionResult();
  v0 = OUTLINED_FUNCTION_2_25();
  v1 = OUTLINED_FUNCTION_0_23();
  if (!v0)
  {
    if (v1 == (id)1 || OUTLINED_FUNCTION_0_23() == (id)2)
      return 0;
    v2 = 3;
    return OUTLINED_FUNCTION_0_23() != (id)v2;
  }
  if (v1 != (id)1)
  {
LABEL_6:
    v2 = 2;
    return OUTLINED_FUNCTION_0_23() != (id)v2;
  }
  return 0;
}

id OUTLINED_FUNCTION_0_23()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, (SEL)(v1 + 1777));
}

id OUTLINED_FUNCTION_1_22()
{
  uint64_t v0;
  void *v1;

  return objc_msgSend(v1, (SEL)(v0 + 1777));
}

uint64_t OUTLINED_FUNCTION_2_25()
{
  return swift_dynamicCastClass();
}

uint64_t static ContactsLabelCATContainer.modifyConfirmationCATs(from:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  v2[2] = a1;
  v2[3] = a2;
  v3 = OUTLINED_FUNCTION_48_7();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  v4 = (_QWORD *)swift_task_alloc();
  v2[7] = v4;
  *v4 = v2;
  v4[1] = static ContactsLabelCATContainer.modifyConfirmationCATs(from:);
  return ContactsLabelCATsModern.cancelAsLabel()();
}

uint64_t static ContactsLabelCATContainer.modifyConfirmationCATs(from:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  OUTLINED_FUNCTION_40_0();
  v4 = *v3;
  OUTLINED_FUNCTION_23_15(v5);
  if (v1)
  {
    OUTLINED_FUNCTION_28_7();
    v2[9] = MEMORY[0x24BEE4B00];
    v6 = (_QWORD *)swift_task_alloc();
    v2[10] = v6;
    *v6 = v4;
    v6[1] = static ContactsLabelCATContainer.modifyConfirmationCATs(from:);
    return ContactsLabelCATsModern.saveAsLabel()();
  }
  else
  {
    v2[8] = v0;
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_14_1();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v9;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, *MEMORY[0x24BE91C00], v3);
  *(_BYTE *)(v0 + 97) = 2;
  v4 = dispatch thunk of LabelExecutionResult.subscript.getter();
  v6 = v5;
  v7 = MEMORY[0x24BEE4B00];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v4, v6, v1, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_release();
  *(_QWORD *)(v0 + 72) = v7;
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v9;
  *v9 = v0;
  v9[1] = static ContactsLabelCATContainer.modifyConfirmationCATs(from:);
  return ContactsLabelCATsModern.saveAsLabel()();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_23_15(v3);
  if (v1)
    OUTLINED_FUNCTION_28_7();
  else
    *(_QWORD *)(v2 + 88) = v0;
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_14_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v2 + 104))(v1, *MEMORY[0x24BE91BE8], *(_QWORD *)(v0 + 32));
  *(_BYTE *)(v0 + 96) = 12;
  v3 = dispatch thunk of LabelExecutionResult.subscript.getter();
  v5 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v3, v5, v1, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_74_5(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  swift_release();
  Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_43_8();
  OUTLINED_FUNCTION_21_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_43_8();
  OUTLINED_FUNCTION_21_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static ContactsLabelCATContainer.modifyIntentHandledCATs(from:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = static ContactsLabelCATContainer.modifyIntentHandledCATs(from:);
  return ContactsLabelCATsModern.savedAsLabel()();
}

uint64_t static ContactsLabelCATContainer.modifyIntentHandledCATs(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_23_15(v3);
  if (v1)
    OUTLINED_FUNCTION_28_7();
  else
    *(_QWORD *)(v2 + 32) = v0;
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_14_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(ContactsLabelCATContainer.LabelType, String)>);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ContactsLabelCATContainer.LabelType, String));
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_21FED8CB0;
  v5 = v4 + v3;
  v6 = (uint64_t *)(v5 + *(int *)(v1 + 48));
  v7 = *MEMORY[0x24BE91BF0];
  v8 = OUTLINED_FUNCTION_48_7();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v5, v7, v8);
  *(_BYTE *)(v0 + 40) = 13;
  *v6 = dispatch thunk of LabelExecutionResult.subscript.getter();
  v6[1] = v9;
  lazy protocol witness table accessor for type ContactsLabelCATContainer.LabelType and conformance ContactsLabelCATContainer.LabelType();
  OUTLINED_FUNCTION_45_7();
  OUTLINED_FUNCTION_45_7();
  ContactsLabelCATContainer.init(labels:localizedAttributeLabels:)();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_48_7();
  lazy protocol witness table accessor for type ContactsLabelCATContainer.LabelType and conformance ContactsLabelCATContainer.LabelType();
  OUTLINED_FUNCTION_45_7();
  OUTLINED_FUNCTION_45_7();
  ContactsLabelCATContainer.init(labels:localizedAttributeLabels:)();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static ModifyContactAttributeSnippetModel.from(intent:intentResponse:contactService:attributeToModify:flowState:labelCATs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7[17] = a6;
  v7[18] = a7;
  v7[15] = a4;
  v7[16] = a5;
  v7[13] = a2;
  v7[14] = a3;
  v7[12] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableContact<CNContact>);
  v7[19] = OUTLINED_FUNCTION_9_1();
  v7[20] = OUTLINED_FUNCTION_25_0();
  type metadata accessor for ModifyContactAttributeSnippetModel.ModificationType();
  v7[21] = OUTLINED_FUNCTION_9_1();
  v7[22] = OUTLINED_FUNCTION_25_0();
  v8 = type metadata accessor for ModifyContactAttributeSnippetModel.ContactAttributeToModify();
  v7[23] = v8;
  v7[24] = *(_QWORD *)(v8 - 8);
  v7[25] = OUTLINED_FUNCTION_9_1();
  v7[26] = OUTLINED_FUNCTION_25_0();
  v9 = type metadata accessor for ContactsSnippetFlowState();
  v7[27] = v9;
  v7[28] = *(_QWORD *)(v9 - 8);
  v7[29] = OUTLINED_FUNCTION_9_1();
  v7[30] = OUTLINED_FUNCTION_25_0();
  v7[31] = OUTLINED_FUNCTION_25_0();
  v10 = type metadata accessor for ContactsLabelCATContainer();
  v7[32] = v10;
  v7[33] = *(_QWORD *)(v10 - 8);
  v7[34] = OUTLINED_FUNCTION_9_1();
  v7[35] = OUTLINED_FUNCTION_25_0();
  v7[36] = OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t static ModifyContactAttributeSnippetModel.from(intent:intentResponse:contactService:attributeToModify:flowState:labelCATs:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  void *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  void *v65;
  id v66;
  void *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  id v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  id v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t (*v128)(uint64_t, uint64_t, uint64_t);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t (*v137)(uint64_t, uint64_t, uint64_t);
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;

  v4 = *(_QWORD *)(v0 + 248);
  v5 = *(_QWORD *)(v0 + 216);
  v6 = *(_QWORD *)(v0 + 224);
  v7 = *(_QWORD *)(v0 + 136);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  *(_QWORD *)(v0 + 296) = v8;
  v8(v4, v7, v5);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 88))(v4, v5);
  if (v9 == *MEMORY[0x24BE91BC0])
  {
    v10 = *(uint64_t **)(v0 + 248);
    (*(void (**)(uint64_t *, _QWORD))(*(_QWORD *)(v0 + 224) + 96))(v10, *(_QWORD *)(v0 + 216));
    v11 = *v10;
    v12 = v10[1];
    v13 = v10[2];
    v14 = v10[3];
    outlined consume of Data?(v11, v12);
    outlined consume of Data?(v13, v14);
    v15 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 304) = v15;
    OUTLINED_FUNCTION_64_6(v15);
    OUTLINED_FUNCTION_44_7();
    return static ContactsLabelCATContainer.modifyConfirmationCATs(from:)(v16, v17);
  }
  if (v9 == *MEMORY[0x24BE91BB8])
  {
    v19 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 312) = v19;
    OUTLINED_FUNCTION_64_6(v19);
    OUTLINED_FUNCTION_44_7();
    return static ContactsLabelCATContainer.modifyIntentHandledCATs(from:)(v20);
  }
  if (v9 != *MEMORY[0x24BE91BB0])
  {
    OUTLINED_FUNCTION_44_7();
    return _diagnoseUnexpectedEnumCase<A>(type:)();
  }
  static ContactsLabelCATContainer.empty.getter();
  v21 = objc_msgSend(*(id *)(v0 + 104), sel_contactAttributeToModify);
  if (v21 == (id)6)
  {
    if (OUTLINED_FUNCTION_2_26(*(_QWORD **)(v0 + 120)))
    {
      OUTLINED_FUNCTION_1_23();
      *(_QWORD *)(v0 + 40) = &type metadata for InstalledAppsProvider;
      *(_QWORD *)(v0 + 48) = &protocol witness table for InstalledAppsProvider;
      v28 = objc_msgSend(v27, sel_identifier);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_52_7();
      OUTLINED_FUNCTION_62_8();
      OUTLINED_FUNCTION_56_7();
      outlined destroy of AppUtil(v4);
      OUTLINED_FUNCTION_25_19();
      v29 = ModifyOperation.asSnippetModelModificationType.getter((uint64_t)objc_msgSend(v119, sel_modifyOperation), v122);
      OUTLINED_FUNCTION_33_3(v29, (unint64_t *)&lazy cache variable for type metadata for CNContact);
      v30 = v1;
      v31 = OUTLINED_FUNCTION_50_9();
      v39 = OUTLINED_FUNCTION_37_11(v31, v32, v33, v34, v35, v36, v37, v38, v100, v104, v108, v113, v116, (uint64_t)v119, v122, v125, (uint64_t)v128, v131, v133,
              v135,
              v137);
      v47 = OUTLINED_FUNCTION_22_14(v39, v40, v41, v42, v43, v44, v45, v46, v101, v105, v109, v114, v117, (uint64_t)v120, v123, v126, v129, v132, v134,
              v136,
              v138,
              v139);
      if (v28)
      {
        OUTLINED_FUNCTION_33_3(v47, (unint64_t *)&lazy cache variable for type metadata for SAUIAppPunchOut);
        v48 = v28;
        OUTLINED_FUNCTION_34_10();
        OUTLINED_FUNCTION_58_7();
      }
      OUTLINED_FUNCTION_4_22();

      OUTLINED_FUNCTION_74_5(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
      v49 = OUTLINED_FUNCTION_19_18();
      v50 = v2;
      goto LABEL_37;
    }
  }
  else if (v21 == (id)10)
  {
    OUTLINED_FUNCTION_41_8();
    if (v22)
    {
      OUTLINED_FUNCTION_52_2(v22);
      if (v5)
        OUTLINED_FUNCTION_29_6();
      v23 = *(id *)(v4 + 32);
      OUTLINED_FUNCTION_55_7();
      outlined bridged method (ob) of @objc INObject.identifier.getter(0);
      v25 = v24;
      if (v24)
      {
        OUTLINED_FUNCTION_16_11();
        v26 = OUTLINED_FUNCTION_15_15();
        if (v6)
        {

          OUTLINED_FUNCTION_9_0();
        }
        else
        {
          v99 = (void *)v26;
          OUTLINED_FUNCTION_9_0();
          if (v99)
          {
            v110 = v99;
LABEL_29:
            v64 = *(_QWORD **)(v0 + 120);
            *(_QWORD *)(v0 + 80) = &type metadata for InstalledAppsProvider;
            *(_QWORD *)(v0 + 88) = &protocol witness table for InstalledAppsProvider;
            v65 = (void *)OUTLINED_FUNCTION_2_26(v64);
            if (v65)
            {
              v66 = objc_msgSend(v65, sel_identifier);
              OUTLINED_FUNCTION_24_7();
              OUTLINED_FUNCTION_53_7();
              OUTLINED_FUNCTION_59_8();
            }
            OUTLINED_FUNCTION_0_24();
            v68 = v67;
            OUTLINED_FUNCTION_18_0();
            OUTLINED_FUNCTION_33_7();
            v140 = v69;
            OUTLINED_FUNCTION_18_0();
            OUTLINED_FUNCTION_21_14();
            v70 = ModifyOperation.asSnippetModelModificationType.getter((uint64_t)objc_msgSend(v25, sel_modifyOperation), v3);
            v71 = OUTLINED_FUNCTION_33_3(v70, (unint64_t *)&lazy cache variable for type metadata for CNContact);
            v79 = OUTLINED_FUNCTION_60_8(v71, v72, v73, v74, v75, v76, v77, v78, v100, v104, v110);
            v80 = OUTLINED_FUNCTION_31_13((uint64_t)v79);
            v88 = OUTLINED_FUNCTION_30_12(v80, v81, v82, v83, v84, v85, v86, v87, v102, v106, v111, v113, v116, (uint64_t)v119, v122, v125, v128);
            v96 = OUTLINED_FUNCTION_24_17(v88, v89, v90, v91, v92, v93, v94, v95, v103, v107, v112, v115, v118, (uint64_t)v121, v124, v127, v130, v131, v133,
                    v135);
            if (v68)
            {
              OUTLINED_FUNCTION_33_3(v96, (unint64_t *)&lazy cache variable for type metadata for SAUIAppPunchOut);
              v97 = v68;
              OUTLINED_FUNCTION_42_2();
              OUTLINED_FUNCTION_65_7();
            }
            if (v140)
            {
              OUTLINED_FUNCTION_33_3(v96, (unint64_t *)&lazy cache variable for type metadata for SAUIAppPunchOut);
              v98 = v140;
              OUTLINED_FUNCTION_36_8();
              OUTLINED_FUNCTION_57_5();
            }
            OUTLINED_FUNCTION_6_20();

            outlined destroy of AppUtil(v141);
            OUTLINED_FUNCTION_40_4();
            v49 = OUTLINED_FUNCTION_19_18();
            v50 = v3;
LABEL_37:
            v51 = 0;
            goto LABEL_38;
          }
        }
      }
    }
    else
    {
      v25 = 0;
    }
    v52 = *(void **)(v0 + 112);
    if (v52
      && (v53 = objc_msgSend(v52, sel_updatedRelationship)) != 0
      && (v54 = outlined bridged method (ob) of @objc ContactRelation.relatedFullName.getter(v53), v55))
    {
      v56 = OUTLINED_FUNCTION_33_3(v54, (unint64_t *)&lazy cache variable for type metadata for CNContact);
      v58 = OUTLINED_FUNCTION_35_9(v56, v57, MEMORY[0x24BEE4AF8]);
    }
    else
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v59 = type metadata accessor for Logger();
      __swift_project_value_buffer(v59, (uint64_t)static Logger.siriContacts);
      v60 = (void *)Logger.logObject.getter();
      v61 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_15_0(v61))
      {
        *(_WORD *)OUTLINED_FUNCTION_2_1() = 0;
        OUTLINED_FUNCTION_10_0(&dword_21FE16000, v62, v63, "ModifyContactAttributeSnippetModel couldn't fetch related contact for display, falling back on empty one");
        OUTLINED_FUNCTION_1_4();
      }

      v58 = objc_msgSend((id)objc_opt_self(), sel_emptyContact);
    }
    v110 = v58;
    goto LABEL_29;
  }
  OUTLINED_FUNCTION_27_13();
  v49 = OUTLINED_FUNCTION_19_18();
  v50 = v4;
  v51 = 1;
LABEL_38:
  __swift_storeEnumTagSinglePayload(v50, v51, 1, v49);
  OUTLINED_FUNCTION_10_16();
  swift_task_dealloc();
  OUTLINED_FUNCTION_21_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_1_0(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  OUTLINED_FUNCTION_23_15(&v2);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  void *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  void *v51;
  id v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  id v84;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  id v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t (*v115)(uint64_t, uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t (*v124)(uint64_t, uint64_t, uint64_t);
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;

  v7 = objc_msgSend(*(id *)(v3 + 104), sel_contactAttributeToModify);
  if (v7 == (id)6)
  {
    if (OUTLINED_FUNCTION_2_26(*(_QWORD **)(v3 + 120)))
    {
      OUTLINED_FUNCTION_1_23();
      *(_QWORD *)(v3 + 40) = &type metadata for InstalledAppsProvider;
      *(_QWORD *)(v3 + 48) = &protocol witness table for InstalledAppsProvider;
      v14 = objc_msgSend(v13, sel_identifier);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      OUTLINED_FUNCTION_52_7();
      OUTLINED_FUNCTION_62_8();
      OUTLINED_FUNCTION_56_7();
      outlined destroy of AppUtil(v1);
      OUTLINED_FUNCTION_25_19();
      v15 = ModifyOperation.asSnippetModelModificationType.getter((uint64_t)objc_msgSend(v106, sel_modifyOperation), v109);
      OUTLINED_FUNCTION_33_3(v15, (unint64_t *)&lazy cache variable for type metadata for CNContact);
      v16 = v4;
      v17 = OUTLINED_FUNCTION_50_9();
      v25 = OUTLINED_FUNCTION_37_11(v17, v18, v19, v20, v21, v22, v23, v24, v87, v91, v95, v100, v103, (uint64_t)v106, v109, v112, (uint64_t)v115, v118, v120,
              v122,
              v124);
      v33 = OUTLINED_FUNCTION_22_14(v25, v26, v27, v28, v29, v30, v31, v32, v88, v92, v96, v101, v104, (uint64_t)v107, v110, v113, v116, v119, v121,
              v123,
              v125,
              v126);
      if (v14)
      {
        OUTLINED_FUNCTION_33_3(v33, (unint64_t *)&lazy cache variable for type metadata for SAUIAppPunchOut);
        v34 = v14;
        OUTLINED_FUNCTION_34_10();
        OUTLINED_FUNCTION_58_7();
      }
      OUTLINED_FUNCTION_4_22();

      OUTLINED_FUNCTION_74_5(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
      v35 = OUTLINED_FUNCTION_19_18();
      v36 = v5;
      goto LABEL_31;
    }
  }
  else if (v7 == (id)10)
  {
    OUTLINED_FUNCTION_41_8();
    if (v8)
    {
      OUTLINED_FUNCTION_52_2(v8);
      if (v0)
        OUTLINED_FUNCTION_29_6();
      v9 = *(id *)(v1 + 32);
      OUTLINED_FUNCTION_55_7();
      outlined bridged method (ob) of @objc INObject.identifier.getter(0);
      v11 = v10;
      if (v10)
      {
        OUTLINED_FUNCTION_16_11();
        v12 = OUTLINED_FUNCTION_15_15();
        if (v2)
        {

          OUTLINED_FUNCTION_9_0();
        }
        else
        {
          v86 = (void *)v12;
          OUTLINED_FUNCTION_9_0();
          if (v86)
          {
            v97 = v86;
LABEL_23:
            v50 = *(_QWORD **)(v3 + 120);
            *(_QWORD *)(v3 + 80) = &type metadata for InstalledAppsProvider;
            *(_QWORD *)(v3 + 88) = &protocol witness table for InstalledAppsProvider;
            v51 = (void *)OUTLINED_FUNCTION_2_26(v50);
            if (v51)
            {
              v52 = objc_msgSend(v51, sel_identifier);
              OUTLINED_FUNCTION_24_7();
              OUTLINED_FUNCTION_53_7();
              OUTLINED_FUNCTION_59_8();
            }
            OUTLINED_FUNCTION_0_24();
            v54 = v53;
            OUTLINED_FUNCTION_18_0();
            OUTLINED_FUNCTION_33_7();
            v127 = v55;
            OUTLINED_FUNCTION_18_0();
            OUTLINED_FUNCTION_21_14();
            v56 = ModifyOperation.asSnippetModelModificationType.getter((uint64_t)objc_msgSend(v11, sel_modifyOperation), v6);
            v57 = OUTLINED_FUNCTION_33_3(v56, (unint64_t *)&lazy cache variable for type metadata for CNContact);
            v65 = OUTLINED_FUNCTION_60_8(v57, v58, v59, v60, v61, v62, v63, v64, v87, v91, v97);
            v66 = OUTLINED_FUNCTION_31_13((uint64_t)v65);
            v74 = OUTLINED_FUNCTION_30_12(v66, v67, v68, v69, v70, v71, v72, v73, v89, v93, v98, v100, v103, (uint64_t)v106, v109, v112, v115);
            v82 = OUTLINED_FUNCTION_24_17(v74, v75, v76, v77, v78, v79, v80, v81, v90, v94, v99, v102, v105, (uint64_t)v108, v111, v114, v117, v118, v120,
                    v122);
            if (v54)
            {
              OUTLINED_FUNCTION_33_3(v82, (unint64_t *)&lazy cache variable for type metadata for SAUIAppPunchOut);
              v83 = v54;
              OUTLINED_FUNCTION_42_2();
              OUTLINED_FUNCTION_65_7();
            }
            if (v127)
            {
              OUTLINED_FUNCTION_33_3(v82, (unint64_t *)&lazy cache variable for type metadata for SAUIAppPunchOut);
              v84 = v127;
              OUTLINED_FUNCTION_36_8();
              OUTLINED_FUNCTION_57_5();
            }
            OUTLINED_FUNCTION_6_20();

            outlined destroy of AppUtil(v128);
            OUTLINED_FUNCTION_40_4();
            v35 = OUTLINED_FUNCTION_19_18();
            v36 = v6;
LABEL_31:
            v37 = 0;
            goto LABEL_32;
          }
        }
      }
    }
    else
    {
      v11 = 0;
    }
    v38 = *(void **)(v3 + 112);
    if (v38
      && (v39 = objc_msgSend(v38, sel_updatedRelationship)) != 0
      && (v40 = outlined bridged method (ob) of @objc ContactRelation.relatedFullName.getter(v39), v41))
    {
      v42 = OUTLINED_FUNCTION_33_3(v40, (unint64_t *)&lazy cache variable for type metadata for CNContact);
      v44 = OUTLINED_FUNCTION_35_9(v42, v43, MEMORY[0x24BEE4AF8]);
    }
    else
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v45 = type metadata accessor for Logger();
      __swift_project_value_buffer(v45, (uint64_t)static Logger.siriContacts);
      v46 = (void *)Logger.logObject.getter();
      v47 = static os_log_type_t.error.getter();
      if (OUTLINED_FUNCTION_15_0(v47))
      {
        *(_WORD *)OUTLINED_FUNCTION_2_1() = 0;
        OUTLINED_FUNCTION_10_0(&dword_21FE16000, v48, v49, "ModifyContactAttributeSnippetModel couldn't fetch related contact for display, falling back on empty one");
        OUTLINED_FUNCTION_1_4();
      }

      v44 = objc_msgSend((id)objc_opt_self(), sel_emptyContact);
    }
    v97 = v44;
    goto LABEL_23;
  }
  OUTLINED_FUNCTION_27_13();
  v35 = OUTLINED_FUNCTION_19_18();
  v36 = v1;
  v37 = 1;
LABEL_32:
  __swift_storeEnumTagSinglePayload(v36, v37, 1, v35);
  OUTLINED_FUNCTION_10_16();
  swift_task_dealloc();
  OUTLINED_FUNCTION_21_0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return OUTLINED_FUNCTION_1_0(*(uint64_t (**)(void))(v3 + 8));
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  OUTLINED_FUNCTION_23_15(&v2);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

id @nonobjc CNContact.init(displayName:handle:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  NSArray v5;
  id v6;

  if (!a2)
  {
    v4 = 0;
    if (a3)
      goto LABEL_3;
LABEL_5:
    v5.super.isa = 0;
    goto LABEL_6;
  }
  v4 = (void *)MEMORY[0x2207D7CB8]();
  swift_bridgeObjectRelease();
  if (!a3)
    goto LABEL_5;
LABEL_3:
  v5.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
LABEL_6:
  v6 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_contactWithDisplayName_handleStrings_, v4, v5.super.isa);

  return v6;
}

uint64_t ModifyOperation.asSnippetModelModificationType.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  switch(a1)
  {
    case 0:
      v3 = (unsigned int *)MEMORY[0x24BE91F50];
      goto LABEL_6;
    case 1:
      v3 = (unsigned int *)MEMORY[0x24BE91F38];
      goto LABEL_6;
    case 2:
      v3 = (unsigned int *)MEMORY[0x24BE91F48];
      goto LABEL_6;
    case 3:
      v3 = (unsigned int *)MEMORY[0x24BE91F40];
LABEL_6:
      v4 = *v3;
      v5 = type metadata accessor for ModifyContactAttributeSnippetModel.ModificationType();
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
      break;
    default:
      result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      break;
  }
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;

  OUTLINED_FUNCTION_13_21(a1, a2, a3);
  OUTLINED_FUNCTION_12_20();
  if (v9)
  {
    __break(1u);
    goto LABEL_9;
  }
  v10 = v7;
  v11 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, SAUIAppPunchOut>);
  if (!OUTLINED_FUNCTION_26_19())
    goto LABEL_5;
  v12 = OUTLINED_FUNCTION_32_11();
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_9:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  v10 = v12;
LABEL_5:
  v14 = *v6;
  if ((v11 & 1) != 0)
  {
    v15 = v14[7];

    *(_QWORD *)(v15 + 8 * v10) = v3;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v10, v5, v4, v3, v14);
    OUTLINED_FUNCTION_14_20();
  }
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  unint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  char v13;
  _QWORD *v14;
  _OWORD *v15;
  _OWORD *result;

  OUTLINED_FUNCTION_13_21(a1, a2, a3);
  OUTLINED_FUNCTION_12_20();
  if (v9)
  {
    __break(1u);
    goto LABEL_9;
  }
  v10 = v7;
  v11 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
  if (!OUTLINED_FUNCTION_26_19())
    goto LABEL_5;
  v12 = OUTLINED_FUNCTION_32_11();
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_9:
    result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v10 = v12;
LABEL_5:
  v14 = *v6;
  if ((v11 & 1) != 0)
  {
    v15 = (_OWORD *)(v14[7] + 32 * v10);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v15);
    return outlined init with take of Any(v3, v15);
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v10, v5, v4, v3, v14);
    return (_OWORD *)OUTLINED_FUNCTION_14_20();
  }
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  Swift::Int *v3;
  Swift::Int *v4;
  Swift::Int v8;
  unint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  _QWORD *v16;
  _OWORD *v17;
  _OWORD *result;
  _BYTE v19[40];

  v4 = v3;
  v8 = *v3;
  specialized __RawDictionaryStorage.find<A>(_:)();
  OUTLINED_FUNCTION_12_20();
  if (v11)
  {
    __break(1u);
    goto LABEL_9;
  }
  v12 = v9;
  v13 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<AnyHashable, Any>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v8))
    goto LABEL_5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v13 & 1) != (v15 & 1))
  {
LABEL_9:
    result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v12 = v14;
LABEL_5:
  v16 = (_QWORD *)*v4;
  if ((v13 & 1) != 0)
  {
    v17 = (_OWORD *)(v16[7] + 32 * v12);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
    return outlined init with take of Any(a1, v17);
  }
  else
  {
    outlined init with copy of AnyHashable(a2, (uint64_t)v19);
    return specialized _NativeDictionary._insert(at:key:value:)(v12, (uint64_t)v19, a1, v16);
  }
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  Swift::Int *v4;
  Swift::Int *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::Int v13;
  unint64_t v14;
  char v15;
  char v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = v4;
  v26 = a2;
  v9 = OUTLINED_FUNCTION_48_7();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v4;
  specialized __RawDictionaryStorage.find<A>(_:)();
  OUTLINED_FUNCTION_12_20();
  if (v16)
  {
    __break(1u);
    goto LABEL_10;
  }
  v17 = v14;
  v18 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<ContactsLabelCATContainer.LabelType, String>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v13))
    goto LABEL_5;
  v19 = specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v18 & 1) != (v20 & 1))
  {
LABEL_10:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v17 = v19;
LABEL_5:
  v21 = (_QWORD *)*v5;
  if ((v18 & 1) != 0)
  {
    v22 = (uint64_t *)(v21[7] + 16 * v17);
    result = swift_bridgeObjectRelease();
    v24 = v26;
    *v22 = a1;
    v22[1] = v24;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
    return specialized _NativeDictionary._insert(at:key:value:)(v17, (uint64_t)v12, a1, v26, v21);
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = type metadata accessor for ContactsLabelCATContainer.LabelType();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v13 = (_QWORD *)(a5[7] + 16 * a1);
  *v13 = a3;
  v13[1] = a4;
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

uint64_t outlined bridged method (ob) of @objc ContactRelation.relatedFullName.getter(void *a1)
{
  void *v1;
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, sel_relatedFullName);
  OUTLINED_FUNCTION_24_7();
  if (!v1)
    return 0;
  v3 = OUTLINED_FUNCTION_53_7();

  return v3;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type ContactsLabelCATContainer.LabelType and conformance ContactsLabelCATContainer.LabelType()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ContactsLabelCATContainer.LabelType and conformance ContactsLabelCATContainer.LabelType;
  if (!lazy protocol witness table cache variable for type ContactsLabelCATContainer.LabelType and conformance ContactsLabelCATContainer.LabelType)
  {
    v1 = type metadata accessor for ContactsLabelCATContainer.LabelType();
    result = MEMORY[0x2207D86A8](MEMORY[0x24BE91C28], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsLabelCATContainer.LabelType and conformance ContactsLabelCATContainer.LabelType);
  }
  return result;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

void OUTLINED_FUNCTION_0_24()
{
  AppUtil.buildPunchoutFor(contactIdentifier:)();
}

void OUTLINED_FUNCTION_1_23()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 288);
  *(_QWORD *)(v1 - 96) = *(_QWORD *)(v0 + 272);
  *(_QWORD *)(v1 - 88) = v2;
}

uint64_t OUTLINED_FUNCTION_2_26(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[3];
  v2 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t OUTLINED_FUNCTION_4_22()
{
  return ModifyContactAttributeSnippetModel.init(attributeToModify:modificationType:contact:flowState:labelCATs:meCardPunchout:targetPunchout:)();
}

uint64_t OUTLINED_FUNCTION_6_20()
{
  return ModifyContactAttributeSnippetModel.init(attributeToModify:modificationType:contact:flowState:labelCATs:meCardPunchout:targetPunchout:)();
}

uint64_t OUTLINED_FUNCTION_10_16()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 152);
  *(_QWORD *)(v1 - 96) = *(_QWORD *)(v0 + 160);
  *(_QWORD *)(v1 - 88) = v2;
  return swift_task_dealloc();
}

unint64_t OUTLINED_FUNCTION_13_21(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
}

uint64_t OUTLINED_FUNCTION_14_20()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_15_15()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return v1(v4, v3, v0, v2);
}

uint64_t OUTLINED_FUNCTION_16_11()
{
  uint64_t v0;

  __swift_project_boxed_opaque_existential_1(*(_QWORD **)(v0 + 120), *(_QWORD *)(*(_QWORD *)(v0 + 120) + 24));
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_19_18()
{
  return type metadata accessor for ModifyContactAttributeSnippetModel();
}

uint64_t OUTLINED_FUNCTION_21_14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, v0, v3);
}

uint64_t OUTLINED_FUNCTION_22_14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(a20 + 16))(*(_QWORD *)(v22 - 96), *(_QWORD *)(v22 - 88), a22);
}

uint64_t OUTLINED_FUNCTION_23_15@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_24_17(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a16 + 16))(a19, a20, a18);
}

uint64_t OUTLINED_FUNCTION_25_19()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v0, v2, v1);
}

BOOL OUTLINED_FUNCTION_26_19()
{
  Swift::Int v0;
  char v1;

  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

uint64_t OUTLINED_FUNCTION_27_13()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[33] + 8))(v0[36], v0[32]);
}

uint64_t OUTLINED_FUNCTION_30_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t (*a17)(uint64_t, uint64_t, uint64_t))
{
  return a17(a14, a13, a15);
}

uint64_t OUTLINED_FUNCTION_31_13(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return CodableContact.init(wrappedValue:)();
}

unint64_t OUTLINED_FUNCTION_32_11()
{
  uint64_t v0;
  uint64_t v1;

  return specialized __RawDictionaryStorage.find<A>(_:)(v1, v0);
}

void OUTLINED_FUNCTION_33_7()
{
  AppUtil.buildPunchoutFor(contactIdentifier:)();
}

uint64_t OUTLINED_FUNCTION_34_10()
{
  return SAClientBoundCommand.data.getter();
}

id OUTLINED_FUNCTION_35_9(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return @nonobjc CNContact.init(displayName:handle:)(v4, v3, a3);
}

uint64_t OUTLINED_FUNCTION_36_8()
{
  return SAClientBoundCommand.data.getter();
}

uint64_t OUTLINED_FUNCTION_37_11(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t (*a21)(uint64_t, uint64_t, uint64_t))
{
  return a21(a18, a17, a19);
}

uint64_t OUTLINED_FUNCTION_40_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

void OUTLINED_FUNCTION_41_8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = v0 + 56;
  outlined bridged method (pb) of @objc ModifyContactAttributeIntent.relatedSiriMatches.getter(*(void **)(v0 + 104));
}

uint64_t OUTLINED_FUNCTION_43_8()
{
  return ContactsLabelCATContainer.init(labels:localizedAttributeLabels:)();
}

uint64_t OUTLINED_FUNCTION_45_7()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t OUTLINED_FUNCTION_48_7()
{
  return type metadata accessor for ContactsLabelCATContainer.LabelType();
}

uint64_t OUTLINED_FUNCTION_50_9()
{
  return CodableContact.init(wrappedValue:)();
}

void OUTLINED_FUNCTION_52_7()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_53_7()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_55_7()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_56_7()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_57_5()
{
  void *v0;

}

void OUTLINED_FUNCTION_58_7()
{
  void *v0;

}

void OUTLINED_FUNCTION_59_8()
{
  void *v0;

}

id OUTLINED_FUNCTION_60_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  return a11;
}

void OUTLINED_FUNCTION_62_8()
{
  AppUtil.buildPunchoutFor(contactIdentifier:)();
}

uint64_t OUTLINED_FUNCTION_64_6(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 288);
}

void OUTLINED_FUNCTION_65_7()
{
  void *v0;

}

uint64_t DeviceState.supportsCompactView.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  uint64_t v18;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x24BDAC7A8](v1);
  v6 = (char *)&v18 - v5;
  v7 = MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)&v18 - v8;
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v18 - v10;
  v12 = dispatch thunk of DeviceState.isPhone.getter();
  OUTLINED_FUNCTION_1_24((uint64_t)v11);
  if ((v12 & 1) != 0)
  {
    v13 = 1;
  }
  else
  {
    OUTLINED_FUNCTION_13_22();
    v13 = dispatch thunk of DeviceState.isPad.getter();
  }
  OUTLINED_FUNCTION_5_17((uint64_t)v11);
  OUTLINED_FUNCTION_1_24((uint64_t)v9);
  if ((v13 & 1) != 0)
  {
    OUTLINED_FUNCTION_5_17((uint64_t)v9);
    OUTLINED_FUNCTION_1_24((uint64_t)v6);
  }
  else
  {
    OUTLINED_FUNCTION_13_22();
    v14 = dispatch thunk of DeviceState.isPod.getter();
    OUTLINED_FUNCTION_5_17((uint64_t)v9);
    OUTLINED_FUNCTION_1_24((uint64_t)v6);
    if ((v14 & 1) == 0)
    {
      OUTLINED_FUNCTION_5_17((uint64_t)v6);
      OUTLINED_FUNCTION_1_24((uint64_t)v3);
      goto LABEL_10;
    }
  }
  OUTLINED_FUNCTION_13_22();
  v15 = dispatch thunk of DeviceState.isCarPlay.getter();
  OUTLINED_FUNCTION_5_17((uint64_t)v6);
  OUTLINED_FUNCTION_1_24((uint64_t)v3);
  if ((v15 & 1) != 0)
  {
LABEL_10:
    v16 = 0;
    goto LABEL_11;
  }
  OUTLINED_FUNCTION_13_22();
  v16 = dispatch thunk of DeviceState.isCarDNDMode.getter() ^ 1;
LABEL_11:
  OUTLINED_FUNCTION_5_17((uint64_t)v3);
  return v16 & 1;
}

uint64_t DeviceState.toSiriKitDeviceState.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v0 = type metadata accessor for Locale.Language();
  v46 = *(_QWORD *)(v0 - 8);
  v47 = v0;
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_9_5();
  v44 = v2;
  v3 = type metadata accessor for Locale();
  v42 = *(_QWORD *)(v3 - 8);
  v43 = v3;
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_9_5();
  v41 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale.LanguageCode?);
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_9_5();
  v45 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_84_0();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v37 = (uint64_t)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v36 - v11;
  v13 = type metadata accessor for InputOrigin();
  v39 = *(_QWORD *)(v13 - 8);
  v40 = v13;
  OUTLINED_FUNCTION_84_0();
  MEMORY[0x24BDAC7A8](v14);
  v38 = type metadata accessor for InteractionType();
  v15 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SirikitDeviceState.Builder();
  swift_allocObject();
  SirikitDeviceState.Builder.init()();
  OUTLINED_FUNCTION_0_25();
  v18 = dispatch thunk of DeviceState.isHomePod.getter();
  OUTLINED_FUNCTION_10_17(v18);
  dispatch thunk of SirikitDeviceState.Builder.withIsHomePod(_:)();
  OUTLINED_FUNCTION_3_16();
  OUTLINED_FUNCTION_0_25();
  v19 = dispatch thunk of DeviceState.isWatch.getter();
  OUTLINED_FUNCTION_11_15(v19);
  dispatch thunk of SirikitDeviceState.Builder.withIsWatch(_:)();
  OUTLINED_FUNCTION_2_27();
  OUTLINED_FUNCTION_0_25();
  v20 = dispatch thunk of DeviceState.isMac.getter();
  OUTLINED_FUNCTION_10_17(v20);
  dispatch thunk of SirikitDeviceState.Builder.withIsMac(_:)();
  OUTLINED_FUNCTION_3_16();
  OUTLINED_FUNCTION_0_25();
  v21 = dispatch thunk of DeviceState.isCarPlay.getter();
  OUTLINED_FUNCTION_11_15(v21);
  dispatch thunk of SirikitDeviceState.Builder.withIsCarPlay(_:)();
  OUTLINED_FUNCTION_2_27();
  OUTLINED_FUNCTION_0_25();
  v22 = dispatch thunk of DeviceState.isCarDNDMode.getter();
  OUTLINED_FUNCTION_10_17(v22);
  dispatch thunk of SirikitDeviceState.Builder.withIsCarDnD(_:)();
  OUTLINED_FUNCTION_3_16();
  OUTLINED_FUNCTION_0_25();
  v23 = dispatch thunk of DeviceState.isAppleTV.getter();
  OUTLINED_FUNCTION_11_15(v23);
  dispatch thunk of SirikitDeviceState.Builder.withIsAppleTV(_:)();
  OUTLINED_FUNCTION_2_27();
  OUTLINED_FUNCTION_0_25();
  v24 = dispatch thunk of DeviceState.isTextToSpeechEnabled.getter();
  OUTLINED_FUNCTION_10_17(v24);
  dispatch thunk of SirikitDeviceState.Builder.withIsTextToSpeechEnabled(_:)();
  OUTLINED_FUNCTION_3_16();
  OUTLINED_FUNCTION_0_25();
  v25 = dispatch thunk of DeviceState.isLockedWithPasscode.getter();
  OUTLINED_FUNCTION_11_15(v25);
  dispatch thunk of SirikitDeviceState.Builder.withIsLockedWithPasscode(_:)();
  OUTLINED_FUNCTION_2_27();
  OUTLINED_FUNCTION_0_25();
  v26 = dispatch thunk of DeviceState.isEyesFree.getter();
  OUTLINED_FUNCTION_10_17(v26);
  dispatch thunk of SirikitDeviceState.Builder.withIsEyesFree(_:)();
  OUTLINED_FUNCTION_3_16();
  OUTLINED_FUNCTION_0_25();
  v27 = dispatch thunk of DeviceState.isVoiceTriggerEnabled.getter();
  OUTLINED_FUNCTION_11_15(v27);
  dispatch thunk of SirikitDeviceState.Builder.withIsVoiceTriggerEnabled(_:)();
  OUTLINED_FUNCTION_2_27();
  OUTLINED_FUNCTION_0_25();
  dispatch thunk of DeviceState.interactionType.getter();
  InteractionType.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v38);
  OUTLINED_FUNCTION_9_17();
  dispatch thunk of SirikitDeviceState.Builder.withInteractionType(print:speak:)();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_0_25();
  dispatch thunk of DeviceState.inputOrigin.getter();
  InputOrigin.rawValue.getter();
  OUTLINED_FUNCTION_12_21(v39);
  OUTLINED_FUNCTION_9_17();
  dispatch thunk of SirikitDeviceState.Builder.withInputOrigin(print:speak:)();
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for SpeakableString();
  OUTLINED_FUNCTION_71_1((uint64_t)v12, 1);
  dispatch thunk of SirikitDeviceState.Builder.withMultiUserState(_:)();
  swift_release();
  outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v12, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_7_19();
  if (!v28)
    static String.EMPTY.getter();
  OUTLINED_FUNCTION_9_17();
  dispatch thunk of SirikitDeviceState.Builder.withUserAssignedDeviceName(print:speak:)();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_7_19();
  if (!v29)
    static String.EMPTY.getter();
  OUTLINED_FUNCTION_9_17();
  dispatch thunk of SirikitDeviceState.Builder.withDeviceName(print:speak:)();
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_0_25();
  dispatch thunk of DeviceState.siriLocale.getter();
  v30 = v44;
  Locale.language.getter();
  OUTLINED_FUNCTION_12_21(v42);
  v31 = v45;
  Locale.Language.languageCode.getter();
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v30, v47);
  v32 = type metadata accessor for Locale.LanguageCode();
  if (__swift_getEnumTagSinglePayload(v31, 1, v32) == 1)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v31, &demangling cache variable for type metadata for Locale.LanguageCode?);
    v33 = v37;
    OUTLINED_FUNCTION_71_1(v37, 1);
  }
  else
  {
    MEMORY[0x2207D596C]();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 8))(v31, v32);
    swift_bridgeObjectRetain();
    v33 = v37;
    OUTLINED_FUNCTION_9_17();
    SpeakableString.init(print:speak:)();
    OUTLINED_FUNCTION_71_1(v33, 0);
    swift_bridgeObjectRelease();
  }
  dispatch thunk of SirikitDeviceState.Builder.withSiriLocale(_:)();
  swift_release();
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v33, &demangling cache variable for type metadata for SpeakableString?);
  v34 = dispatch thunk of SirikitDeviceState.Builder.build()();
  swift_release();
  return v34;
}

uint64_t OUTLINED_FUNCTION_0_25()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_1_24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v2, v1);
}

uint64_t OUTLINED_FUNCTION_2_27()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_3_16()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_5_17(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

uint64_t OUTLINED_FUNCTION_7_19()
{
  return DeviceState.userAssignedDeviceName.getter();
}

uint64_t OUTLINED_FUNCTION_10_17(char a1)
{
  return a1 & 1;
}

uint64_t OUTLINED_FUNCTION_11_15(char a1)
{
  return a1 & 1;
}

uint64_t OUTLINED_FUNCTION_12_21@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t OUTLINED_FUNCTION_13_22()
{
  uint64_t v0;

  return v0;
}

uint64_t static Signpost.begin(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  id v6;
  uint64_t result;
  uint64_t v8;

  v3 = *a1;
  v4 = a1[1];
  v5 = *((_BYTE *)a1 + 16);
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v6 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  result = type metadata accessor for Signpost.OpenSignpost();
  v8 = a2 + *(int *)(result + 20);
  *(_QWORD *)v8 = v3;
  *(_QWORD *)(v8 + 8) = v4;
  *(_BYTE *)(v8 + 16) = v5;
  return result;
}

Swift::Void __swiftcall Signpost.OpenSignpost.end()()
{
  static os_signpost_type_t.end.getter();
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  type metadata accessor for Signpost.OpenSignpost();
  os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t one-time initialization function for contactsLog()
{
  uint64_t result;

  type metadata accessor for OS_os_log();
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  swift_bridgeObjectRetain();
  result = OS_os_log.init(subsystem:category:)();
  static Signpost.contactsLog = result;
  return result;
}

uint64_t type metadata accessor for Signpost.OpenSignpost()
{
  uint64_t result;

  result = type metadata singleton initialization cache for Signpost.OpenSignpost;
  if (!type metadata singleton initialization cache for Signpost.OpenSignpost)
    return swift_getSingletonMetadata();
  return result;
}

id static Signpost.contactsLog.getter()
{
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  return (id)static Signpost.contactsLog;
}

void static SignpostName.relationshipLabelKeyForValue.getter(uint64_t a1@<X8>)
{
  OUTLINED_FUNCTION_0_26(a1);
}

void static SignpostName.relationshipLabelValueForKey.getter(uint64_t a1@<X8>)
{
  OUTLINED_FUNCTION_0_26(a1);
}

void static SignpostName.toSiriKitIntent.getter(uint64_t a1@<X8>)
{
  OUTLINED_FUNCTION_0_26(a1);
}

void static SignpostName.makeFlowForParse.getter(uint64_t a1@<X8>)
{
  OUTLINED_FUNCTION_0_26(a1);
}

void static SignpostName.contactsIntentHandler.getter(uint64_t a1@<X8>)
{
  OUTLINED_FUNCTION_0_26(a1);
}

ValueMetadata *type metadata accessor for Signpost()
{
  return &type metadata for Signpost;
}

uint64_t *initializeBufferWithCopyOfBuffer for Signpost.OpenSignpost(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for OSSignpostID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(_OWORD *)v9 = *(_OWORD *)v10;
    v9[16] = v10[16];
  }
  return a1;
}

uint64_t destroy for Signpost.OpenSignpost(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for OSSignpostID();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for Signpost.OpenSignpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  return a1;
}

uint64_t assignWithCopy for Signpost.OpenSignpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  return a1;
}

uint64_t initializeWithTake for Signpost.OpenSignpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  return a1;
}

uint64_t assignWithTake for Signpost.OpenSignpost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Signpost.OpenSignpost()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FE6B7D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = OUTLINED_FUNCTION_1_25();
  return __swift_getEnumTagSinglePayload(v1, v0, v2);
}

uint64_t storeEnumTagSinglePayload for Signpost.OpenSignpost()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_21FE6B808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = OUTLINED_FUNCTION_1_25();
  return __swift_storeEnumTagSinglePayload(v1, v0, v0, v2);
}

uint64_t type metadata completion function for Signpost.OpenSignpost()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for OSSignpostID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SignpostName(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SignpostName(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 17) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SignpostName()
{
  return &type metadata for SignpostName;
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

void OUTLINED_FUNCTION_0_26(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = 2;
}

uint64_t OUTLINED_FUNCTION_1_25()
{
  return type metadata accessor for OSSignpostID();
}

uint64_t ContactsPhoneHandle.Builder.withPhoneLabel(print:speak:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_14_9();
  v4 = v2 - v3;
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v11 - v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  SpeakableString.init(print:speak:)();
  v8 = OUTLINED_FUNCTION_31_4();
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v8);
  outlined init with take of SpeakableString?((uint64_t)v7, v4);
  v9 = v0 + OBJC_IVAR____TtCC19SiriContactsIntents19ContactsPhoneHandle7Builder_phoneLabel;
  swift_beginAccess();
  outlined assign with take of SpeakableString?(v4, v9);
  swift_endAccess();
  return swift_retain();
}

uint64_t ContactsPhoneHandle.Builder.__deallocating_deinit()
{
  OUTLINED_FUNCTION_6_21(OBJC_IVAR____TtCC19SiriContactsIntents19ContactsPhoneHandle7Builder_phoneLabel);
  OUTLINED_FUNCTION_6_21(OBJC_IVAR____TtCC19SiriContactsIntents19ContactsPhoneHandle7Builder_phoneHandle);
  OUTLINED_FUNCTION_6_17();
  return swift_deallocClassInstance();
}

unint64_t static ContactsPhoneHandle.catTypeName.getter()
{
  return 0xD000000000000014;
}

uint64_t ContactsPhoneHandle.init(builder:)()
{
  uint64_t v0;
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_55_0();
  *(_QWORD *)(v0 + 16) = 0;
  OUTLINED_FUNCTION_7_20();
  OUTLINED_FUNCTION_13_23();
  OUTLINED_FUNCTION_11_16(OBJC_IVAR____TtC19SiriContactsIntents19ContactsPhoneHandle_phoneLabel);
  OUTLINED_FUNCTION_7_20();
  OUTLINED_FUNCTION_13_23();
  swift_release();
  OUTLINED_FUNCTION_11_16(OBJC_IVAR____TtC19SiriContactsIntents19ContactsPhoneHandle_phoneHandle);
  return v0;
}

uint64_t ContactsPhoneHandle.getProperty(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t result;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_14_9();
  v10 = v8 - v9;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v22 - v12;
  v14 = a1 == 0x62614C656E6F6870 && a2 == 0xEA00000000006C65;
  if (v14 || (OUTLINED_FUNCTION_8_14() & 1) != 0)
  {
    outlined init with copy of SpeakableString?(v3 + OBJC_IVAR____TtC19SiriContactsIntents19ContactsPhoneHandle_phoneLabel, (uint64_t)v13);
    v15 = OUTLINED_FUNCTION_31_4();
    if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v15) != 1)
    {
      v17 = OUTLINED_FUNCTION_9_18();
      return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v17, v13, v15);
    }
    v16 = (uint64_t)v13;
    goto LABEL_16;
  }
  if (a1 != 0x6E6148656E6F6870 || a2 != 0xEB00000000656C64)
  {
    result = OUTLINED_FUNCTION_8_14();
    if ((result & 1) == 0)
      goto LABEL_17;
  }
  outlined init with copy of SpeakableString?(v3 + OBJC_IVAR____TtC19SiriContactsIntents19ContactsPhoneHandle_phoneHandle, v10);
  v20 = OUTLINED_FUNCTION_31_4();
  if (__swift_getEnumTagSinglePayload(v10, 1, v20) == 1)
  {
    v16 = v10;
LABEL_16:
    result = outlined destroy of SpeakableString?(v16);
LABEL_17:
    *a3 = 0u;
    a3[1] = 0u;
    return result;
  }
  v21 = OUTLINED_FUNCTION_9_18();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v21, v10, v20);
}

SiriContactsIntents::ContactsPhoneHandle::CodingKeys_optional __swiftcall ContactsPhoneHandle.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  SiriContactsIntents::ContactsPhoneHandle::CodingKeys_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ContactsPhoneHandle.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1)
    v4.value = SiriContactsIntents_ContactsPhoneHandle_CodingKeys_phoneHandle;
  else
    v4.value = SiriContactsIntents_ContactsPhoneHandle_CodingKeys_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t ContactsPhoneHandle.CodingKeys.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E6148656E6F6870;
  else
    return 0x62614C656E6F6870;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ContactsPhoneHandle.CodingKeys(char *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance ContactsPhoneHandle.CodingKeys()
{
  specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactsPhoneHandle.CodingKeys()
{
  return specialized RawRepresentable<>.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ContactsPhoneHandle.CodingKeys()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriContactsIntents::ContactsPhoneHandle::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactsPhoneHandle.CodingKeys@<W0>(Swift::String *a1@<X0>, SiriContactsIntents::ContactsPhoneHandle::CodingKeys_optional *a2@<X8>)
{
  SiriContactsIntents::ContactsPhoneHandle::CodingKeys_optional result;

  result.value = ContactsPhoneHandle.CodingKeys.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ContactsPhoneHandle.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = ContactsPhoneHandle.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ContactsPhoneHandle.CodingKeys()
{
  char *v0;

  return ContactsPhoneHandle.CodingKeys.rawValue.getter(*v0);
}

SiriContactsIntents::ContactsPhoneHandle::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance ContactsPhoneHandle.CodingKeys@<W0>(uint64_t a1@<X0>, SiriContactsIntents::ContactsPhoneHandle::CodingKeys_optional *a2@<X8>)
{
  SiriContactsIntents::ContactsPhoneHandle::CodingKeys_optional result;

  result.value = ContactsPhoneHandle.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ContactsPhoneHandle.CodingKeys()
{
  lazy protocol witness table accessor for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ContactsPhoneHandle.CodingKeys()
{
  lazy protocol witness table accessor for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ContactsPhoneHandle.deinit()
{
  uint64_t v0;

  OUTLINED_FUNCTION_6_21(OBJC_IVAR____TtC19SiriContactsIntents19ContactsPhoneHandle_phoneLabel);
  OUTLINED_FUNCTION_6_21(OBJC_IVAR____TtC19SiriContactsIntents19ContactsPhoneHandle_phoneHandle);
  return v0;
}

uint64_t ContactsPhoneHandle.__deallocating_deinit()
{
  ContactsPhoneHandle.deinit();
  OUTLINED_FUNCTION_6_17();
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for ContactsPhoneHandle()
{
  return type metadata accessor for ContactsPhoneHandle(0);
}

uint64_t type metadata accessor for ContactsPhoneHandle(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for ContactsPhoneHandle);
}

void type metadata completion function for ContactsPhoneHandle()
{
  unint64_t v0;

  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t ContactsPhoneHandle.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ContactsPhoneHandle.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_55_0();
  v7 = v6 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for SpeakableString();
  lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, (uint64_t (*)(uint64_t))MEMORY[0x24BE929C8], MEMORY[0x24BE929D8]);
  OUTLINED_FUNCTION_2_28();
  if (!v1)
    OUTLINED_FUNCTION_2_28();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t ContactsPhoneHandle.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  ContactsPhoneHandle.init(from:)(a1);
  return v2;
}

uint64_t ObjC metadata update function for ContactsPhoneHandle.Builder()
{
  return type metadata accessor for ContactsPhoneHandle.Builder(0);
}

uint64_t type metadata accessor for ContactsPhoneHandle.Builder(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for ContactsPhoneHandle.Builder);
}

void type metadata completion function for ContactsPhoneHandle.Builder()
{
  unint64_t v0;

  type metadata accessor for SpeakableString?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t ContactsPhoneHandle.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_14_9();
  MEMORY[0x24BDAC7A8](v6);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ContactsPhoneHandle.CodingKeys>);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_55_0();
  *(_QWORD *)(v3 + 16) = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {

    type metadata accessor for ContactsPhoneHandle(0);
    swift_deallocPartialClassInstance();
  }
  else
  {
    type metadata accessor for SpeakableString();
    lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type SpeakableString and conformance SpeakableString, (uint64_t (*)(uint64_t))MEMORY[0x24BE929C8], MEMORY[0x24BE929E8]);
    OUTLINED_FUNCTION_3_17();
    OUTLINED_FUNCTION_14_21(OBJC_IVAR____TtC19SiriContactsIntents19ContactsPhoneHandle_phoneLabel);
    OUTLINED_FUNCTION_3_17();
    OUTLINED_FUNCTION_0_27();
    OUTLINED_FUNCTION_14_21(OBJC_IVAR____TtC19SiriContactsIntents19ContactsPhoneHandle_phoneHandle);
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v3;
}

unint64_t protocol witness for static CATType.catTypeName.getter in conformance ContactsPhoneHandle()
{
  static ContactsPhoneHandle.catTypeName.getter();
  return 0xD000000000000014;
}

uint64_t protocol witness for CATType.getProperty(_:) in conformance ContactsPhoneHandle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return ContactsPhoneHandle.getProperty(_:)(a1, a2, a3);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ContactsPhoneHandle@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = ContactsPhoneHandle.__allocating_init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ContactsPhoneHandle(_QWORD *a1)
{
  return ContactsPhoneHandle.encode(to:)(a1);
}

uint64_t base witness table accessor for Decodable in ContactsPhoneHandle()
{
  return lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type ContactsPhoneHandle and conformance ContactsPhoneHandle, type metadata accessor for ContactsPhoneHandle, (uint64_t)&protocol conformance descriptor for ContactsPhoneHandle);
}

uint64_t base witness table accessor for Encodable in ContactsPhoneHandle()
{
  return lazy protocol witness table accessor for type GetContactHandleIntentStrategy and conformance GetContactHandleIntentStrategy(&lazy protocol witness table cache variable for type ContactsPhoneHandle and conformance ContactsPhoneHandle, type metadata accessor for ContactsPhoneHandle, (uint64_t)&protocol conformance descriptor for ContactsPhoneHandle);
}

unint64_t lazy protocol witness table accessor for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactsPhoneHandle.CodingKeys, &type metadata for ContactsPhoneHandle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactsPhoneHandle.CodingKeys, &type metadata for ContactsPhoneHandle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactsPhoneHandle.CodingKeys, &type metadata for ContactsPhoneHandle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactsPhoneHandle.CodingKeys, &type metadata for ContactsPhoneHandle.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsPhoneHandle.CodingKeys and conformance ContactsPhoneHandle.CodingKeys);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ContactsPhoneHandle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21FE6C508 + 4 * byte_21FEDA4C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21FE6C53C + 4 * asc_21FEDA4C0[v4]))();
}

uint64_t sub_21FE6C53C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE6C544(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FE6C54CLL);
  return result;
}

uint64_t sub_21FE6C558(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FE6C560);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21FE6C564(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE6C56C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContactsPhoneHandle.CodingKeys()
{
  return &type metadata for ContactsPhoneHandle.CodingKeys;
}

uint64_t OUTLINED_FUNCTION_0_27()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 104) + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_2_28()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_3_17()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_6_21@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined destroy of SpeakableString?(v1 + a1);
}

uint64_t OUTLINED_FUNCTION_7_20()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_8_14()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t *OUTLINED_FUNCTION_9_18()
{
  uint64_t *v0;
  uint64_t v1;

  v0[3] = v1;
  return __swift_allocate_boxed_opaque_existential_1(v0);
}

uint64_t OUTLINED_FUNCTION_11_16@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return outlined init with take of SpeakableString?(v2, v1 + a1);
}

uint64_t OUTLINED_FUNCTION_13_23()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with copy of SpeakableString?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_14_21@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return outlined init with take of SpeakableString?(v2, v1 + a1);
}

uint64_t TemplatingResult.merge(with:behaviorAfterSpeaking:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v22;

  v3 = type metadata accessor for TemplatingResult();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_55_0();
  v7 = v6 - v5;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BehaviorAfterSpeaking?);
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_55_0();
  v11 = v10 - v9;
  v22 = type metadata accessor for BehaviorAfterSpeaking();
  v20 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  OUTLINED_FUNCTION_55_0();
  v14 = v13 - v12;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingResult?);
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_55_0();
  v18 = v17 - v16;
  TemplatingResult.templateIdentifier.getter();
  TemplatingResult.sections.getter();
  outlined init with copy of URL?(a1, v18, &demangling cache variable for type metadata for TemplatingResult?);
  if (__swift_getEnumTagSinglePayload(v18, 1, v3) == 1)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v18, &demangling cache variable for type metadata for TemplatingResult?);
  }
  else
  {
    TemplatingResult.sections.getter();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v18, v3);
  }
  specialized Array.append<A>(contentsOf:)();
  outlined init with copy of URL?(a2, v11, &demangling cache variable for type metadata for BehaviorAfterSpeaking?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7, v2, v3);
  if (__swift_getEnumTagSinglePayload(v11, 1, v22) == 1)
  {
    TemplatingResult.behaviorAfterSpeaking.getter();
    OUTLINED_FUNCTION_1_26();
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v11, &demangling cache variable for type metadata for BehaviorAfterSpeaking?);
  }
  else
  {
    OUTLINED_FUNCTION_1_26();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v14, v11, v22);
  }
  return TemplatingResult.init(templateIdentifier:sections:behaviorAfterSpeaking:)();
}

uint64_t OUTLINED_FUNCTION_1_26()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t GetContactAttributeHandleIntentWithNoOutputStrategy.makeIntentExecutionBehavior(app:intent:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for SiriKitIntentHandler();
  v2[4] = v3;
  v2[5] = *(_QWORD *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t GetContactAttributeHandleIntentWithNoOutputStrategy.makeIntentExecutionBehavior(app:intent:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  id v13;
  uint64_t v14;

  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.siriContacts);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_21FE16000, v2, v3, "#GetContactAttributeHandleIntentWithNoOutputStrategy makeIntentExecutionBehavior", v4, 2u);
    MEMORY[0x2207D8768](v4, -1, -1);
  }

  type metadata accessor for SiriKitIntentExecutionBehavior();
  v5 = one-time initialization token for current;
  swift_retain();
  if (v5 != -1)
    swift_once();
  v7 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v9 = *(void **)(v0 + 24);
  v8 = *(_QWORD *)(v0 + 32);
  v10 = static ContactService.current;
  type metadata accessor for ContactResolver();
  swift_allocObject();
  swift_retain();
  v11 = ContactResolver.init()();
  v12 = objc_allocWithZone((Class)type metadata accessor for GetContactAttributeIntentHandler());
  specialized BaseIntentHandler.init(contactService:contactResolver:)(v10, v11, v12);
  type metadata accessor for GetContactAttributeIntent();
  v13 = v9;
  SiriKitIntentHandler.init<A>(app:intentHandler:intent:)();
  v14 = static SiriKitIntentExecutionBehavior.embeddedIntentHandler(intentHandler:)();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v14);
}

uint64_t GetContactAttributeHandleIntentWithNoOutputStrategy.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for GetContactAttributeHandleIntentWithNoOutputStrategy()
{
  return objc_opt_self();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:) in conformance GetContactAttributeHandleIntentWithNoOutputStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for GetContactAttributeHandleIntentWithNoOutputStrategy();
  *v1 = v0;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return HandleIntentFlowStrategyAsync.makePromptForDeviceUnlock(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:) in conformance GetContactAttributeHandleIntentWithNoOutputStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for GetContactAttributeHandleIntentWithNoOutputStrategy();
  *v1 = v0;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return HandleIntentFlowStrategyAsync.makeHandoffForAuthenticationResponse(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:) in conformance GetContactAttributeHandleIntentWithNoOutputStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for GetContactAttributeHandleIntentWithNoOutputStrategy();
  *v1 = v0;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return HandleIntentFlowStrategyAsync.makePreHandleIntentOutput(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:) in conformance GetContactAttributeHandleIntentWithNoOutputStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for GetContactAttributeHandleIntentWithNoOutputStrategy();
  lazy protocol witness table accessor for type GetContactAttributeHandleIntentWithNoOutputStrategy and conformance GetContactAttributeHandleIntentWithNoOutputStrategy(&lazy protocol witness table cache variable for type GetContactAttributeHandleIntentWithNoOutputStrategy and conformance GetContactAttributeHandleIntentWithNoOutputStrategy, (uint64_t)&protocol conformance descriptor for GetContactAttributeHandleIntentWithNoOutputStrategy);
  *v1 = v0;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return NoOutputHandleIntentFlowStrategyAsync.makeIntentHandledResponse(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:) in conformance GetContactAttributeHandleIntentWithNoOutputStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for GetContactAttributeHandleIntentWithNoOutputStrategy();
  *v1 = v0;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return HandleIntentFlowStrategyAsync.makeContinueInAppResponse(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:) in conformance GetContactAttributeHandleIntentWithNoOutputStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for GetContactAttributeHandleIntentWithNoOutputStrategy();
  *v1 = v0;
  v1[1] = dispatch thunk of ContactsDelegateFlow.execute();
  return HandleIntentFlowStrategyAsync.makeInProgressResponse(rchRecord:)();
}

uint64_t protocol witness for HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:) in conformance GetContactAttributeHandleIntentWithNoOutputStrategy()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  type metadata accessor for GetContactAttributeHandleIntentWithNoOutputStrategy();
  *v1 = v0;
  v1[1] = protocol witness for Flow.execute() in conformance ContactsDelegateFlow;
  return HandleIntentFlowStrategyAsync.makeFailureHandlingIntentResponse(rchRecord:)();
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance GetContactAttributeHandleIntentWithNoOutputStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for Flow.onAsync(input:) in conformance ContactsDelegateFlow;
  return GetContactAttributeHandleIntentWithNoOutputStrategy.makeIntentExecutionBehavior(app:intent:)(a1, a2);
}

uint64_t base witness table accessor for IntentExtensionCommunicatingAsync in GetContactAttributeHandleIntentWithNoOutputStrategy()
{
  return lazy protocol witness table accessor for type GetContactAttributeHandleIntentWithNoOutputStrategy and conformance GetContactAttributeHandleIntentWithNoOutputStrategy(&lazy protocol witness table cache variable for type GetContactAttributeHandleIntentWithNoOutputStrategy and conformance GetContactAttributeHandleIntentWithNoOutputStrategy, (uint64_t)&protocol conformance descriptor for GetContactAttributeHandleIntentWithNoOutputStrategy);
}

uint64_t base witness table accessor for HandleIntentFlowStrategyAsync in GetContactAttributeHandleIntentWithNoOutputStrategy()
{
  return lazy protocol witness table accessor for type GetContactAttributeHandleIntentWithNoOutputStrategy and conformance GetContactAttributeHandleIntentWithNoOutputStrategy(&lazy protocol witness table cache variable for type GetContactAttributeHandleIntentWithNoOutputStrategy and conformance GetContactAttributeHandleIntentWithNoOutputStrategy, (uint64_t)&protocol conformance descriptor for GetContactAttributeHandleIntentWithNoOutputStrategy);
}

uint64_t lazy protocol witness table accessor for type GetContactAttributeHandleIntentWithNoOutputStrategy and conformance GetContactAttributeHandleIntentWithNoOutputStrategy(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t ContactAttributeHandleIntentWithNoOutputStrategy;

  result = *a1;
  if (!result)
  {
    ContactAttributeHandleIntentWithNoOutputStrategy = type metadata accessor for GetContactAttributeHandleIntentWithNoOutputStrategy();
    result = MEMORY[0x2207D86A8](a2, ContactAttributeHandleIntentWithNoOutputStrategy);
    atomic_store(result, a1);
  }
  return result;
}

void ContactNLIntent.ContactPostalAddressField.rawValue.getter()
{
  OUTLINED_FUNCTION_1_27();
}

void *static ContactNLIntent.ContactIntentAddressAttributes.allCases.getter()
{
  return &outlined read-only object #0 of static ContactNLIntent.ContactIntentAddressAttributes.allCases.getter;
}

void ContactNLIntent.ContactIntentAddressAttributes.rawValue.getter()
{
  OUTLINED_FUNCTION_1_27();
}

uint64_t ContactNLIntent.ContactIntentDateDescription.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x7961646874726962;
  else
    return 0x73726576696E6E61;
}

unint64_t ContactNLIntent.ContactPostalAddressField.init(rawValue:)(Swift::String string)
{
  unint64_t v1;
  void *object;
  Swift::String v3;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ContactNLIntent.ContactPostalAddressField.init(rawValue:), v3);
  OUTLINED_FUNCTION_0_28();
  if (v1 >= 5)
    return 5;
  else
    return v1;
}

void *static ContactNLIntent.ContactPostalAddressField.allCases.getter()
{
  return &outlined read-only object #0 of static ContactNLIntent.ContactPostalAddressField.allCases.getter;
}

void ContactNLIntent.NLContactAttributeLabel.rawValue.getter()
{
  OUTLINED_FUNCTION_1_27();
}

uint64_t ContactNLIntent.NLContactTypeValue.attributeTypeAndLabel()(unsigned __int8 a1)
{
  if (a1 > 0x23u)
    return 0;
  else
    return qword_21FEDAB78[(char)a1];
}

uint64_t ContactNLIntent.NLContactTypeValue.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_21FE6D150 + 4 * byte_21FEDA860[a1]))(0xD000000000000012, 0x800000021FEDF380);
}

uint64_t sub_21FE6D150()
{
  return 0x6F687020656D6F68;
}

uint64_t sub_21FE6D330()
{
  return 1870031222;
}

uint64_t sub_21FE6D340()
{
  return 0x6F72616C63;
}

uint64_t sub_21FE6D354()
{
  return 7170420;
}

uint64_t sub_21FE6D364()
{
  return 26991;
}

uint64_t sub_21FE6D370()
{
  return 0x6C657478656ELL;
}

void sub_21FE6D384()
{
  JUMPOUT(0x21FE6D390);
}

uint64_t sub_21FE6D398()
{
  return 0x65746D6F63726573;
}

uint64_t sub_21FE6D3B8()
{
  return 1870032493;
}

uint64_t sub_21FE6D3CC()
{
  return 0x6C69616D65;
}

uint64_t sub_21FE6D3E0()
{
  return 0x616D65206B726F77;
}

uint64_t sub_21FE6D400()
{
  return 0x6C616E6F73726570;
}

uint64_t sub_21FE6D424()
{
  return 0x6D6520726568746FLL;
}

uint64_t sub_21FE6D444()
{
  return 0x65206C6F6F686373;
}

uint64_t sub_21FE6D464()
{
  return 0x7264646120796E61;
}

SiriContactsIntents::ContactNLIntent::NLContactTypeValue_optional __swiftcall ContactNLIntent.NLContactTypeValue.init(rawValue:)(Swift::String rawValue)
{
  unint64_t v1;

  _findStringSwitchCaseWithCache(cases:string:cache:)();
  OUTLINED_FUNCTION_0_28();
  if (v1 >= 0x24)
    return (SiriContactsIntents::ContactNLIntent::NLContactTypeValue_optional)36;
  else
    return (SiriContactsIntents::ContactNLIntent::NLContactTypeValue_optional)v1;
}

ValueMetadata *type metadata accessor for ContactNLIntent()
{
  return &type metadata for ContactNLIntent;
}

uint64_t getEnumTagSinglePayload for ContactNLIntent.NLContactTypeValue(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xDD)
  {
    if (a2 + 35 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 35) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 36;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x24;
  v5 = v6 - 36;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ContactNLIntent.NLContactTypeValue(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 35 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 35) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xDD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xDC)
    return ((uint64_t (*)(void))((char *)&loc_21FE6D5B0 + 4 * byte_21FEDA889[v4]))();
  *a1 = a2 + 35;
  return ((uint64_t (*)(void))((char *)sub_21FE6D5E4 + 4 * byte_21FEDA884[v4]))();
}

uint64_t sub_21FE6D5E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE6D5EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FE6D5F4);
  return result;
}

uint64_t sub_21FE6D600(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FE6D608);
  *(_BYTE *)result = a2 + 35;
  return result;
}

uint64_t sub_21FE6D60C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE6D614(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContactNLIntent.NLContactTypeValue()
{
  return &type metadata for ContactNLIntent.NLContactTypeValue;
}

unint64_t lazy protocol witness table accessor for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue;
  if (!lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLIntent.NLContactTypeValue, &type metadata for ContactNLIntent.NLContactTypeValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue;
  if (!lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue)
  {
    result = MEMORY[0x2207D86A8]("%>n.", &type metadata for ContactNLIntent.NLContactTypeValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue;
  if (!lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLIntent.NLContactTypeValue, &type metadata for ContactNLIntent.NLContactTypeValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue;
  if (!lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLIntent.NLContactTypeValue, &type metadata for ContactNLIntent.NLContactTypeValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue;
  if (!lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLIntent.NLContactTypeValue, &type metadata for ContactNLIntent.NLContactTypeValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue;
  if (!lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLIntent.NLContactTypeValue, &type metadata for ContactNLIntent.NLContactTypeValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue);
  }
  return result;
}

void *static ContactNLIntent.NLContactTypeValue.allCases.getter()
{
  return &outlined read-only object #0 of static ContactNLIntent.NLContactTypeValue.allCases.getter;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ContactNLIntent.NLContactTypeValue(unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance ContactNLIntent.NLContactTypeValue()
{
  unsigned __int8 *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactNLIntent.NLContactTypeValue(uint64_t a1)
{
  unsigned __int8 *v1;

  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ContactNLIntent.NLContactTypeValue(uint64_t a1)
{
  unsigned __int8 *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriContactsIntents::ContactNLIntent::NLContactTypeValue_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactNLIntent.NLContactTypeValue@<W0>(Swift::String *a1@<X0>, SiriContactsIntents::ContactNLIntent::NLContactTypeValue_optional *a2@<X8>)
{
  SiriContactsIntents::ContactNLIntent::NLContactTypeValue_optional result;

  result.value = ContactNLIntent.NLContactTypeValue.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ContactNLIntent.NLContactTypeValue@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = ContactNLIntent.NLContactTypeValue.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance ContactNLIntent.NLContactTypeValue(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static ContactNLIntent.NLContactTypeValue.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance ContactNLIntent.NLContactTypeValue()
{
  lazy protocol witness table accessor for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue();
  lazy protocol witness table accessor for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue();
  lazy protocol witness table accessor for type ContactNLIntent.NLContactTypeValue and conformance ContactNLIntent.NLContactTypeValue();
  return static TerminalNodeBoundedSemanticValue<>.fromIntentNodeValue(_:)();
}

unint64_t lazy protocol witness table accessor for type [ContactNLIntent.NLContactTypeValue] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [ContactNLIntent.NLContactTypeValue] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ContactNLIntent.NLContactTypeValue] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [ContactNLIntent.NLContactTypeValue]);
    result = MEMORY[0x2207D86A8](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ContactNLIntent.NLContactTypeValue] and conformance [A]);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_28()
{
  return swift_bridgeObjectRelease();
}

uint64_t ConfirmationViewBuilder.makeViewsForWatch()()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;

  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.siriContacts);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)OUTLINED_FUNCTION_2_1();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_21FE16000, v1, v2, "[ConfirmationViewBuilder] Constructing no views for Watch, an unsupported idiom.", v3, 2u);
    OUTLINED_FUNCTION_0();
  }

  return MEMORY[0x24BEE4AF8];
}

uint64_t ConfirmationViewBuilder.makeViewsForMac()()
{
  return ConfirmationViewBuilder.makeViewsForMac()("[ConfirmationViewBuilder] Constructing confirmation view for Mac.");
}

uint64_t ConfirmationViewBuilder.makeViewsForCarPlay()()
{
  return ConfirmationViewBuilder.makeViewsForMac()("[ConfirmationViewBuilder] Constructing confirmation view for CarPlay.");
}

uint64_t ConfirmationViewBuilder.makeViewsForMac()(const char *a1)
{
  uint64_t *v1;
  uint64_t *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = v1;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.siriContacts);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)OUTLINED_FUNCTION_2_1();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_21FE16000, v5, v6, a1, v7, 2u);
    OUTLINED_FUNCTION_0();
  }

  v8 = *v3;
  swift_retain();
  v9 = GenericViews.buildConfirmationViewForMacAndCarPlay(contactAttributeType:)(v8);
  swift_release();
  return v9;
}

uint64_t ConfirmationViewBuilder.makeViewsForIOS()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[7];

  v1 = *(_QWORD *)(v0 + 48);
  v5[4] = &type metadata for InstalledAppsProvider;
  v5[5] = &protocol witness table for InstalledAppsProvider;
  v5[0] = v1;
  v5[6] = 0;
  swift_retain();
  CompactViews.buildCompactConfirmationView(attributeType:)();
  v3 = v2;
  outlined destroy of CompactViews((uint64_t)v5);
  return v3;
}

uint64_t destroy for ConfirmationViewBuilder(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_0(a1 + 8);
  return swift_release();
}

uint64_t initializeWithCopy for ConfirmationViewBuilder(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for ConfirmationViewBuilder(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  __swift_assign_boxed_opaque_existential_1(a1 + 1, a2 + 1);
  a1[6] = a2[6];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ConfirmationViewBuilder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  __swift_destroy_boxed_opaque_existential_0(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ConfirmationViewBuilder(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ConfirmationViewBuilder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConfirmationViewBuilder()
{
  return &type metadata for ConfirmationViewBuilder;
}

uint64_t static GetContactAttributeSnippetModel.from(_:requestedAttribute:handlesToReturn:locale:mockGlobals:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ContactAttributeSnippet;
  uint64_t v11;
  uint64_t v12;
  uint64_t ContactDirectInvocationsModel;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  v8 = type metadata accessor for ContactsSnippetFlowState();
  v7[9] = v8;
  v7[10] = *(_QWORD *)(v8 - 8);
  v7[11] = OUTLINED_FUNCTION_0_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableContact<CNContact>);
  v7[12] = OUTLINED_FUNCTION_0_0();
  v9 = type metadata accessor for UUID();
  v7[13] = v9;
  v7[14] = *(_QWORD *)(v9 - 8);
  v7[15] = OUTLINED_FUNCTION_0_0();
  type metadata accessor for GetContactAttributeSnippetModel.DisplayAttribute.AttributeType();
  v7[16] = OUTLINED_FUNCTION_0_0();
  ContactAttributeSnippet = type metadata accessor for GetContactAttributeSnippetModel.DisplayAttribute();
  v7[17] = ContactAttributeSnippet;
  v7[18] = *(_QWORD *)(ContactAttributeSnippet - 8);
  v7[19] = OUTLINED_FUNCTION_9_1();
  v7[20] = OUTLINED_FUNCTION_25_0();
  v7[21] = OUTLINED_FUNCTION_25_0();
  v7[22] = OUTLINED_FUNCTION_25_0();
  v7[23] = OUTLINED_FUNCTION_25_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v7[24] = OUTLINED_FUNCTION_0_0();
  v11 = type metadata accessor for DateComponents();
  v7[25] = v11;
  v7[26] = *(_QWORD *)(v11 - 8);
  v7[27] = OUTLINED_FUNCTION_9_1();
  v7[28] = OUTLINED_FUNCTION_25_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  v7[29] = OUTLINED_FUNCTION_9_1();
  v7[30] = OUTLINED_FUNCTION_25_0();
  v7[31] = OUTLINED_FUNCTION_25_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  v7[32] = OUTLINED_FUNCTION_0_0();
  v12 = type metadata accessor for ContactsLabelCATContainer();
  v7[33] = v12;
  v7[34] = *(_QWORD *)(v12 - 8);
  v7[35] = OUTLINED_FUNCTION_9_1();
  v7[36] = OUTLINED_FUNCTION_25_0();
  type metadata accessor for CATOption();
  v7[37] = OUTLINED_FUNCTION_0_0();
  ContactDirectInvocationsModel = type metadata accessor for GetContactDirectInvocationsModel();
  v7[38] = ContactDirectInvocationsModel;
  v7[39] = *(_QWORD *)(ContactDirectInvocationsModel - 8);
  v7[40] = OUTLINED_FUNCTION_9_1();
  v7[41] = OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_20_0();
  return swift_task_switch();
}

uint64_t static GetContactAttributeSnippetModel.from(_:requestedAttribute:handlesToReturn:locale:mockGlobals:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  _QWORD *v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  id v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;

  OUTLINED_FUNCTION_55_8();
  v2 = *(_QWORD *)(v0 + 288);
  v1 = *(_QWORD *)(v0 + 296);
  v3 = *(char **)(v0 + 32);
  GetContactDirectInvocationsModel.init(contact:)(*(id *)(v0 + 24), *(_QWORD *)(v0 + 328));
  v4 = type metadata accessor for ContactsLabelCATs();
  static CATOption.defaultMode.getter();
  *(_QWORD *)(v0 + 336) = CATWrapper.__allocating_init(options:globals:)();
  static ContactsLabelCATContainer.empty.getter();
  if (objc_msgSend(v3, sel_contactAttributeType) == (id)4)
  {
    v5 = *(void **)(v0 + 64);
    v7 = *(void **)(v0 + 24);
    v6 = *(void **)(v0 + 32);
    v8 = objc_msgSend(v6, sel_ageDateTime);
    *(_QWORD *)(v0 + 344) = v8;
    type metadata accessor for ContactsAgeInfo();
    v9 = v5;
    v10 = (_QWORD *)ContactsAgeInfo.__allocating_init(contact:contactAttribute:mockGlobals:)(v7, v6, v5);
    *(_QWORD *)(v0 + 352) = v10;
    if (v8)
    {
      v11 = objc_msgSend(v8, sel_dateComponents);
      if (v11)
      {
        v12 = v11;
        static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

        v13 = 0;
      }
      else
      {
        v13 = 1;
      }
      v62 = *(_QWORD *)(v0 + 240);
      v61 = *(_QWORD *)(v0 + 248);
      OUTLINED_FUNCTION_144_0(v62, v13);
      outlined init with take of DateComponents?(v62, v61);
      if (OUTLINED_FUNCTION_131_0())
      {
        v63 = *(_QWORD *)(v0 + 248);
        v64 = &demangling cache variable for type metadata for DateComponents?;
LABEL_51:
        outlined destroy of UsoEntity_common_Person.DefinedValues?(v63, v64);
        goto LABEL_52;
      }
      v65 = *(_QWORD *)(v0 + 248);
      v66 = *(_QWORD *)(v0 + 256);
      v67 = *(_QWORD *)(v0 + 224);
      v68 = *(_QWORD *)(v0 + 200);
      v69 = *(_QWORD *)(v0 + 208);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 16))(v67, v65, v68);
      outlined destroy of UsoEntity_common_Person.DefinedValues?(v65, &demangling cache variable for type metadata for DateComponents?);
      DateComponents.date.getter();
      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v67, v68);
      v70 = type metadata accessor for Date();
      v71 = OUTLINED_FUNCTION_146(v66);
      v72 = *(_QWORD *)(v0 + 256);
      if (v71 == 1)
      {
        v64 = (uint64_t *)&demangling cache variable for type metadata for Date?;
        v63 = *(_QWORD *)(v0 + 256);
        goto LABEL_51;
      }
      Date.timeIntervalSince1970.getter();
      OUTLINED_FUNCTION_28_0(v72, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 8));
      if (OUTLINED_FUNCTION_149() == (id)2 || OUTLINED_FUNCTION_149() == (id)1)
      {
        if (v10)
        {
          v81 = v10[8];
          if (v81)
          {
            v85 = *(_QWORD *)(v0 + 192);
            swift_retain();
            dispatch thunk of DialogCalendar.dateDescriptive.getter();
            OUTLINED_FUNCTION_2();
            v86 = OUTLINED_FUNCTION_31_4();
            v87 = OUTLINED_FUNCTION_146(v85);
            v88 = *(_QWORD *)(v0 + 192);
            if (v87 != 1)
            {
              v79 = SpeakableString.print.getter();
              v81 = v90;
              OUTLINED_FUNCTION_28_0(v88, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 8));
              goto LABEL_58;
            }
            outlined destroy of UsoEntity_common_Person.DefinedValues?(*(_QWORD *)(v0 + 192), &demangling cache variable for type metadata for SpeakableString?);
            v81 = 0;
          }
          v79 = 0;
LABEL_58:
          v82 = v10[7];
          if (!v82)
          {
            v82 = v10[6];
            if (!v82)
              v82 = v10[3];
          }
          swift_retain();
          goto LABEL_73;
        }
        v81 = 0;
        v79 = 0;
LABEL_72:
        v82 = 0;
LABEL_73:
        *(_QWORD *)(v0 + 368) = v79;
        *(_QWORD *)(v0 + 376) = v82;
        *(_QWORD *)(v0 + 360) = v81;
        ObjC metadata update function for ContactsLabelCATsModern();
        OUTLINED_FUNCTION_69_2();
        *(_QWORD *)(v0 + 384) = OUTLINED_FUNCTION_44_3();
        v89 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 392) = v89;
        *v89 = v0;
        v89[1] = static GetContactAttributeSnippetModel.from(_:requestedAttribute:handlesToReturn:locale:mockGlobals:);
        return ContactsLabelCATsModern.ageUnitsAsLabels(age:)(v82);
      }
    }
LABEL_52:
    v73 = objc_msgSend(*(id *)(v0 + 24), sel_birthday);
    v74 = *(_QWORD *)(v0 + 232);
    if (v73)
    {
      v75 = v73;
      v77 = *(_QWORD *)(v0 + 208);
      v76 = *(_QWORD *)(v0 + 216);
      v78 = *(_QWORD *)(v0 + 200);
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 32))(v74, v76, v78);
      OUTLINED_FUNCTION_144_0(v74, 0);
      if (OUTLINED_FUNCTION_131_0() != 1)
      {
        outlined destroy of UsoEntity_common_Person.DefinedValues?(*(_QWORD *)(v0 + 232), &demangling cache variable for type metadata for DateComponents?);
        v79 = CNContact.formattedBirthdateString.getter();
        v81 = v80;
        if (!v10)
          goto LABEL_72;
        goto LABEL_58;
      }
    }
    else
    {
      __swift_storeEnumTagSinglePayload(*(_QWORD *)(v0 + 232), 1, 1, *(_QWORD *)(v0 + 200));
    }
    outlined destroy of UsoEntity_common_Person.DefinedValues?(*(_QWORD *)(v0 + 232), &demangling cache variable for type metadata for DateComponents?);
    v79 = 0;
    v81 = 0;
    if (v10)
      goto LABEL_58;
    goto LABEL_72;
  }
  if (OUTLINED_FUNCTION_3_18() == (id)5)
  {
    v14 = *(void **)(v0 + 24);
    ObjC metadata update function for ContactsLabelCATsModern();
    OUTLINED_FUNCTION_69_2();
    *(_QWORD *)(v0 + 408) = OUTLINED_FUNCTION_44_3();
    v15 = CNContact.toDialogPerson(useConversationalName:)();
    *(_QWORD *)(v0 + 416) = v15;
    type metadata accessor for ContactsBirthdayInfo(0);
    v16 = ContactsBirthdayInfo.__allocating_init(contact:shouldAccountForYearless:)(v14, 1);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 24);
      swift_retain();
      OUTLINED_FUNCTION_2();
    }
    else
    {
      v17 = 0;
    }
    *(_QWORD *)(v0 + 424) = v17;
    v83 = OUTLINED_FUNCTION_135_0();
    v84 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 432) = v84;
    *v84 = v0;
    v84[1] = static GetContactAttributeSnippetModel.from(_:requestedAttribute:handlesToReturn:locale:mockGlobals:);
    return ContactsLabelCATsModern.modernBirthdayAsLabels(contact:birthdayInfo:isToday:)(v15, v17, v83 & 1);
  }
  if (OUTLINED_FUNCTION_3_18() == (id)6)
  {
    v18 = objc_msgSend(*(id *)(v0 + 24), sel_nickname);
    OUTLINED_FUNCTION_4_6();
    OUTLINED_FUNCTION_153_0();

    swift_bridgeObjectRelease();
    v19 = HIBYTE(v2) & 0xF;
    if ((v2 & 0x2000000000000000) == 0)
      v19 = v1 & 0xFFFFFFFFFFFFLL;
    if (v19)
    {
      v4 = *(_QWORD *)(v0 + 120);
      v20 = *(_QWORD *)(v0 + 128);
      v3 = *(char **)(v0 + 104);
      v21 = *(_QWORD *)(v0 + 112);
      v22 = *(void **)(v0 + 32);
      v23 = objc_msgSend(*(id *)(v0 + 24), sel_nickname);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      static GetContactAttributeSnippetModel.DisplayAttribute.AttributeType.from(_:)((uint64_t)objc_msgSend(v22, sel_contactAttributeType), v20);
      OUTLINED_FUNCTION_40_5();
      UUID.uuidString.getter();
      OUTLINED_FUNCTION_28_0(v4, *(uint64_t (**)(uint64_t, uint64_t))(v21 + 8));
      OUTLINED_FUNCTION_156_0();
      GetContactAttributeSnippetModel.DisplayAttribute.init(id:displayLabel:displayValue:type:)();
      v24 = MEMORY[0x24BEE4AF8];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v24 = OUTLINED_FUNCTION_87_4(0, *(_QWORD *)(v24 + 16) + 1);
      v25 = *(_QWORD *)(v24 + 16);
      OUTLINED_FUNCTION_27_14();
      if (v27)
        v24 = OUTLINED_FUNCTION_87_4(v26 > 1, v4);
      v28 = *(_QWORD *)(v0 + 168);
      v29 = *(_QWORD *)(v0 + 136);
      v30 = *(_QWORD *)(v0 + 144);
      *(_QWORD *)(v24 + 16) = v4;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v30 + 32))(v24+ ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(_QWORD *)(v30 + 72) * v25, v28, v29);
LABEL_17:
      OUTLINED_FUNCTION_102_3();
      if (v31)
      {
        OUTLINED_FUNCTION_20_17();
        result = OUTLINED_FUNCTION_93_3();
        v32 = result;
        if (!result)
          goto LABEL_77;
      }
      else
      {
        v32 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
        result = OUTLINED_FUNCTION_25_16();
        if (!v32)
          goto LABEL_77;
      }
      if (v32 < 1)
      {
        __break(1u);
        return result;
      }
      OUTLINED_FUNCTION_12_22();
      do
      {
        if (v122)
          OUTLINED_FUNCTION_44_8();
        v34 = OUTLINED_FUNCTION_56_8();
        v35 = OUTLINED_FUNCTION_24_18(v34);
        v36 = OUTLINED_FUNCTION_39_2(v35, sel_contactAttributeType);
        v37 = OUTLINED_FUNCTION_6_22((uint64_t)v36);
        v38 = OUTLINED_FUNCTION_48_8(v37);
        if (OUTLINED_FUNCTION_39_2(v38, sel_contactAttributeType) == (id)3
          && (v39 = OUTLINED_FUNCTION_39_2(3, sel_postalAddress)) != 0)
        {
          v4 = (uint64_t)v39;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
          v40 = OUTLINED_FUNCTION_49_11();
          OUTLINED_FUNCTION_63_6(v40);
          OUTLINED_FUNCTION_85_5();
          OUTLINED_FUNCTION_123_0();

        }
        else
        {
          OUTLINED_FUNCTION_72_5();
          OUTLINED_FUNCTION_106_2();
        }
        OUTLINED_FUNCTION_81_2(&stru_24E5C6FF8.attr);
        if (v41)
        {
          OUTLINED_FUNCTION_101_2();
        }
        else
        {
          OUTLINED_FUNCTION_47_8();
          OUTLINED_FUNCTION_121_0();
          OUTLINED_FUNCTION_18_13();
        }
        OUTLINED_FUNCTION_133_1();
        v43 = OUTLINED_FUNCTION_39_2(v42, sel_contactAttributeType);
        OUTLINED_FUNCTION_120_1((uint64_t)v43);
        OUTLINED_FUNCTION_11_17();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v24 = OUTLINED_FUNCTION_87_4(0, *(_QWORD *)(v24 + 16) + 1);
        v44 = *(_QWORD *)(v24 + 16);
        OUTLINED_FUNCTION_27_14();
        if (v27)
          v24 = OUTLINED_FUNCTION_87_4(v45 > 1, v4);
        ++v3;
        v46 = *(_QWORD *)(v0 + 152);
        v47 = *(_QWORD *)(v0 + 136);
        *(_QWORD *)(v24 + 16) = v4;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v123 + 32))(v24+ ((*(unsigned __int8 *)(v123 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80))+ *(_QWORD *)(v123 + 72) * v44, v46, v47);

      }
      while (v121 != v3);
LABEL_77:
      OUTLINED_FUNCTION_0_29();
      OUTLINED_FUNCTION_91_4();
      OUTLINED_FUNCTION_49_11();
      v91 = OUTLINED_FUNCTION_60_9();
      v92 = OUTLINED_FUNCTION_23_16(v91, *MEMORY[0x24BE91BB8]);
      v100 = OUTLINED_FUNCTION_19_19(v92, v93, v94, v95, v96, v97, v98, v99, v108, v110, v112, v114, v116);
      OUTLINED_FUNCTION_13_24(v100, v101, v102, v103, v104, v105, v106, v107, v109, v111, v113, v115, v117, v118, v119, v120);
      OUTLINED_FUNCTION_17_11();
      OUTLINED_FUNCTION_111_1();
      OUTLINED_FUNCTION_45_8();
      OUTLINED_FUNCTION_43_9();
      OUTLINED_FUNCTION_45_0();
      OUTLINED_FUNCTION_14_0();
      OUTLINED_FUNCTION_24_2();
      OUTLINED_FUNCTION_12_0();
      OUTLINED_FUNCTION_21_0();
      OUTLINED_FUNCTION_23_1();
      OUTLINED_FUNCTION_21_2();
      OUTLINED_FUNCTION_20_2();
      OUTLINED_FUNCTION_35_3();
      OUTLINED_FUNCTION_34_2();
      OUTLINED_FUNCTION_32_5();
      OUTLINED_FUNCTION_31_6();
      OUTLINED_FUNCTION_30_5();
      OUTLINED_FUNCTION_27_6();
      OUTLINED_FUNCTION_26_7();
      OUTLINED_FUNCTION_25_10();
      OUTLINED_FUNCTION_24_9();
      OUTLINED_FUNCTION_16_4();
      OUTLINED_FUNCTION_38_1();
      OUTLINED_FUNCTION_24_0();
      OUTLINED_FUNCTION_26_1();
      return OUTLINED_FUNCTION_8_15(*(uint64_t (**)(void))(v0 + 8));
    }
  }
  if (OUTLINED_FUNCTION_3_18() != (id)7
    && OUTLINED_FUNCTION_3_18() != (id)9
    && OUTLINED_FUNCTION_3_18() != (id)8
    && OUTLINED_FUNCTION_3_18() != (id)6
    && OUTLINED_FUNCTION_3_18() != (id)11)
  {
    v24 = MEMORY[0x24BEE4AF8];
    goto LABEL_17;
  }
  v48 = *(_QWORD *)(v0 + 120);
  v49 = *(_QWORD *)(v0 + 112);
  v50 = OUTLINED_FUNCTION_3_18();
  OUTLINED_FUNCTION_112_3((uint64_t)v50);
  OUTLINED_FUNCTION_40_5();
  UUID.uuidString.getter();
  OUTLINED_FUNCTION_28_0(v48, *(uint64_t (**)(uint64_t, uint64_t))(v49 + 8));
  OUTLINED_FUNCTION_156_0();
  GetContactAttributeSnippetModel.DisplayAttribute.init(id:displayLabel:displayValue:type:)();
  v51 = MEMORY[0x24BEE4AF8];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v51 = OUTLINED_FUNCTION_143_0(0, *(_QWORD *)(v51 + 16) + 1);
  v53 = *(_QWORD *)(v51 + 16);
  v52 = *(_QWORD *)(v51 + 24);
  if (v53 >= v52 >> 1)
    v51 = OUTLINED_FUNCTION_143_0(v52 > 1, v53 + 1);
  *(_QWORD *)(v0 + 448) = v51;
  v54 = *(_QWORD *)(v0 + 160);
  v55 = *(_QWORD *)(v0 + 136);
  v56 = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v51 + 16) = v53 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v56 + 32))(v51+ ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))+ *(_QWORD *)(v56 + 72) * v53, v54, v55);
  ObjC metadata update function for ContactsLabelCATsModern();
  OUTLINED_FUNCTION_57_6();
  v57 = OUTLINED_FUNCTION_62_9();
  v58 = OUTLINED_FUNCTION_29_16(v57);
  OUTLINED_FUNCTION_126_1(v58);
  v59 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 472) = v59;
  v60 = OUTLINED_FUNCTION_50_10(v59, (uint64_t)static GetContactAttributeSnippetModel.from(_:requestedAttribute:handlesToReturn:locale:mockGlobals:));
  return OUTLINED_FUNCTION_7_21(v60);
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  unint64_t v49;
  char v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;

  v93 = v0 + 488;
  v94 = v0 + 489;
  v95 = v0 + 490;
  v96 = v0 + 491;
  v97 = v0 + 492;
  v99 = *(_QWORD *)(v0 + 336);
  v104 = *(_QWORD *)(v0 + 264);
  v105 = *(_QWORD *)(v0 + 288);
  v100 = *(_QWORD *)(v0 + 56);
  v101 = *(_QWORD *)(v0 + 280);
  v102 = *(_QWORD *)(v0 + 48);
  v103 = *(_QWORD *)(v0 + 272);
  v98 = *(void **)(v0 + 24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(ContactsLabelCATContainer.LabelType, String)>);
  v1 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ContactsLabelCATContainer.LabelType, String));
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_21FED8DB0;
  v6 = v5 + v4;
  v7 = (uint64_t *)(v5 + v4 + v1[12]);
  v8 = *MEMORY[0x24BE91BD8];
  OUTLINED_FUNCTION_48_7();
  OUTLINED_FUNCTION_115_0(v6, v8);
  *(_BYTE *)(v0 + 488) = 1;
  *v7 = dispatch thunk of LabelExecutionResult.subscript.getter();
  v7[1] = v9;
  v10 = (uint64_t *)(v6 + v3 + v1[12]);
  OUTLINED_FUNCTION_115_0(v6 + v3, *MEMORY[0x24BE91BD0]);
  *(_BYTE *)(v0 + 489) = 7;
  *v10 = dispatch thunk of LabelExecutionResult.subscript.getter();
  v10[1] = v11;
  v12 = v6 + 2 * v3;
  v13 = (uint64_t *)(v12 + v1[12]);
  OUTLINED_FUNCTION_115_0(v12, *MEMORY[0x24BE91BE0]);
  *(_BYTE *)(v0 + 490) = 8;
  *v13 = dispatch thunk of LabelExecutionResult.subscript.getter();
  v13[1] = v14;
  v15 = v6 + 3 * v3;
  v16 = (uint64_t *)(v15 + v1[12]);
  OUTLINED_FUNCTION_115_0(v15, *MEMORY[0x24BE91C08]);
  *(_BYTE *)(v0 + 491) = 9;
  *v16 = dispatch thunk of LabelExecutionResult.subscript.getter();
  v16[1] = v17;
  v18 = v6 + 4 * v3;
  v19 = (uint64_t *)(v18 + v1[12]);
  OUTLINED_FUNCTION_115_0(v18, *MEMORY[0x24BE91BF8]);
  *(_BYTE *)(v0 + 492) = 14;
  *v19 = dispatch thunk of LabelExecutionResult.subscript.getter();
  v19[1] = v20;
  lazy protocol witness table accessor for type ContactsLabelCATContainer.LabelType and conformance ContactsLabelCATContainer.LabelType();
  v21 = (_QWORD *)Dictionary.init(dictionaryLiteral:)();
  v22 = v98;
  v23 = v99;
  swift_retain();
  swift_bridgeObjectRetain();
  ContactsLabelCATContainer.init(labels:contact:labelMapper:siriLocale:)(v21, v22, v99, v102, v100, v101);
  OUTLINED_FUNCTION_2();
  v24 = (void *)v104;
  (*(void (**)(uint64_t, unint64_t))(v103 + 8))(v105, v104);
  (*(void (**)(uint64_t, unint64_t, unint64_t))(v103 + 32))(v105, v101, v104);
  v25 = *(_QWORD *)(v0 + 448);
  OUTLINED_FUNCTION_102_3();
  if (!v26)
  {
    v27 = *(_QWORD *)((v104 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = OUTLINED_FUNCTION_25_16();
    if (v27)
      goto LABEL_3;
LABEL_21:
    OUTLINED_FUNCTION_5_18();
    OUTLINED_FUNCTION_91_4();
    v51 = v1;
    v52 = OUTLINED_FUNCTION_140();
    v53 = OUTLINED_FUNCTION_119_0(v52, *MEMORY[0x24BE91BB8]);
    v61 = OUTLINED_FUNCTION_103_3(v53, v54, v55, v56, v57, v58, v59, v60, v77, v80, v82, v84);
    OUTLINED_FUNCTION_65_8(v61, v62, v63, v64, v65, v66, v67, v68, v78, v81, v83, v85, v86, v87, v88);
    OUTLINED_FUNCTION_86_3();
    swift_release();
    v69 = OUTLINED_FUNCTION_127_0();
    OUTLINED_FUNCTION_117_1(v69, v70, v71, v72, v73, v74, v75, v76, v79);
    OUTLINED_FUNCTION_14_0();
    swift_task_dealloc();
    OUTLINED_FUNCTION_26_1();
    OUTLINED_FUNCTION_12_0();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_24_2();
    OUTLINED_FUNCTION_23_1();
    OUTLINED_FUNCTION_21_2();
    OUTLINED_FUNCTION_20_2();
    OUTLINED_FUNCTION_35_3();
    OUTLINED_FUNCTION_34_2();
    OUTLINED_FUNCTION_32_5();
    OUTLINED_FUNCTION_31_6();
    OUTLINED_FUNCTION_26_7();
    OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_24_9();
    OUTLINED_FUNCTION_16_4();
    OUTLINED_FUNCTION_38_1();
    OUTLINED_FUNCTION_24_0();
    swift_task_dealloc();
    return OUTLINED_FUNCTION_52_8(*(uint64_t (**)(void))(v0 + 8));
  }
  OUTLINED_FUNCTION_20_17();
  result = OUTLINED_FUNCTION_93_3();
  v27 = result;
  if (!result)
    goto LABEL_21;
LABEL_3:
  if (v27 >= 1)
  {
    OUTLINED_FUNCTION_58_8();
    do
    {
      if (v102)
        OUTLINED_FUNCTION_44_8();
      v37 = OUTLINED_FUNCTION_136_0(v29, v30, v31, v32, v33, v34, v35, v36, v77, v80, v82, v84, v86, v87, v88, v89, v90, v91, v92,
              v93,
              v94,
              v95,
              v96,
              v97,
              (uint64_t)v98,
              v99);
      v38 = OUTLINED_FUNCTION_24_18(v37);
      v39 = OUTLINED_FUNCTION_39_2(v38, sel_contactAttributeType);
      v40 = OUTLINED_FUNCTION_6_22((uint64_t)v39);
      v42 = OUTLINED_FUNCTION_148_0(v40, v41);
      if (OUTLINED_FUNCTION_39_2(v42, sel_contactAttributeType) == (id)3
        && (v43 = OUTLINED_FUNCTION_39_2(3, sel_postalAddress)) != 0)
      {
        v24 = v43;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
        v44 = OUTLINED_FUNCTION_49_11();
        OUTLINED_FUNCTION_142(v44);
        OUTLINED_FUNCTION_85_5();
        OUTLINED_FUNCTION_152_0();

      }
      else
      {
        OUTLINED_FUNCTION_72_5();
        OUTLINED_FUNCTION_106_2();
      }
      OUTLINED_FUNCTION_81_2(v1);
      if (v45)
      {
        OUTLINED_FUNCTION_101_2();
      }
      else
      {
        OUTLINED_FUNCTION_124_0();
        v24 = (void *)v38;
        UUID.uuidString.getter();
        v46 = OUTLINED_FUNCTION_84_4();
      }
      v47 = *(_QWORD *)(v0 + 128);
      v48 = OUTLINED_FUNCTION_39_2(v46, sel_contactAttributeType);
      static GetContactAttributeSnippetModel.DisplayAttribute.AttributeType.from(_:)((uint64_t)v48, v47);
      OUTLINED_FUNCTION_67_6();
      if ((OUTLINED_FUNCTION_34_4() & 1) == 0)
        v25 = OUTLINED_FUNCTION_88_1(0, *(_QWORD *)(v25 + 16) + 1);
      OUTLINED_FUNCTION_155_0();
      if (v50)
        v25 = OUTLINED_FUNCTION_88_1(v49 > 1, (uint64_t)v24);
      OUTLINED_FUNCTION_46_7();

    }
    while (v23 != v101);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  unint64_t v29;
  char v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v5 = *(_QWORD *)(v1 + 448);
  OUTLINED_FUNCTION_102_3();
  if (!v6)
  {
    v7 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = OUTLINED_FUNCTION_25_16();
    if (v7)
      goto LABEL_3;
LABEL_21:
    OUTLINED_FUNCTION_5_18();
    OUTLINED_FUNCTION_91_4();
    v31 = v4;
    v32 = OUTLINED_FUNCTION_140();
    v33 = OUTLINED_FUNCTION_119_0(v32, *MEMORY[0x24BE91BB8]);
    v41 = OUTLINED_FUNCTION_103_3(v33, v34, v35, v36, v37, v38, v39, v40, v57, v60, v62, v64);
    OUTLINED_FUNCTION_65_8(v41, v42, v43, v44, v45, v46, v47, v48, v58, v61, v63, v65, v66, v67, v68);
    OUTLINED_FUNCTION_86_3();
    swift_release();
    v49 = OUTLINED_FUNCTION_127_0();
    OUTLINED_FUNCTION_117_1(v49, v50, v51, v52, v53, v54, v55, v56, v59);
    OUTLINED_FUNCTION_14_0();
    swift_task_dealloc();
    OUTLINED_FUNCTION_26_1();
    OUTLINED_FUNCTION_12_0();
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_24_2();
    OUTLINED_FUNCTION_23_1();
    OUTLINED_FUNCTION_21_2();
    OUTLINED_FUNCTION_20_2();
    OUTLINED_FUNCTION_35_3();
    OUTLINED_FUNCTION_34_2();
    OUTLINED_FUNCTION_32_5();
    OUTLINED_FUNCTION_31_6();
    OUTLINED_FUNCTION_26_7();
    OUTLINED_FUNCTION_25_10();
    OUTLINED_FUNCTION_24_9();
    OUTLINED_FUNCTION_16_4();
    OUTLINED_FUNCTION_38_1();
    OUTLINED_FUNCTION_24_0();
    swift_task_dealloc();
    return OUTLINED_FUNCTION_52_8(*(uint64_t (**)(void))(v1 + 8));
  }
  OUTLINED_FUNCTION_20_17();
  result = OUTLINED_FUNCTION_93_3();
  v7 = result;
  if (!result)
    goto LABEL_21;
LABEL_3:
  if (v7 >= 1)
  {
    OUTLINED_FUNCTION_58_8();
    do
    {
      if (v80)
        OUTLINED_FUNCTION_44_8();
      v17 = OUTLINED_FUNCTION_136_0(v9, v10, v11, v12, v13, v14, v15, v16, v57, v60, v62, v64, v66, v67, v68, v69, v70, v71, v72,
              v73,
              v74,
              v75,
              v76,
              v77,
              v78,
              v79);
      v18 = OUTLINED_FUNCTION_24_18(v17);
      v19 = OUTLINED_FUNCTION_39_2(v18, sel_contactAttributeType);
      v20 = OUTLINED_FUNCTION_6_22((uint64_t)v19);
      v22 = OUTLINED_FUNCTION_148_0(v20, v21);
      if (OUTLINED_FUNCTION_39_2(v22, sel_contactAttributeType) == (id)3
        && (v23 = OUTLINED_FUNCTION_39_2(3, sel_postalAddress)) != 0)
      {
        v0 = (uint64_t)v23;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
        v24 = OUTLINED_FUNCTION_49_11();
        OUTLINED_FUNCTION_142(v24);
        OUTLINED_FUNCTION_85_5();
        OUTLINED_FUNCTION_152_0();

      }
      else
      {
        OUTLINED_FUNCTION_72_5();
        OUTLINED_FUNCTION_106_2();
      }
      OUTLINED_FUNCTION_81_2(v4);
      if (v25)
      {
        OUTLINED_FUNCTION_101_2();
      }
      else
      {
        OUTLINED_FUNCTION_124_0();
        v0 = v18;
        UUID.uuidString.getter();
        v26 = OUTLINED_FUNCTION_84_4();
      }
      v27 = *(_QWORD *)(v1 + 128);
      v28 = OUTLINED_FUNCTION_39_2(v26, sel_contactAttributeType);
      static GetContactAttributeSnippetModel.DisplayAttribute.AttributeType.from(_:)((uint64_t)v28, v27);
      OUTLINED_FUNCTION_67_6();
      if ((OUTLINED_FUNCTION_34_4() & 1) == 0)
        v5 = OUTLINED_FUNCTION_88_1(0, *(_QWORD *)(v5 + 16) + 1);
      OUTLINED_FUNCTION_155_0();
      if (v30)
        v5 = OUTLINED_FUNCTION_88_1(v29 > 1, v0);
      OUTLINED_FUNCTION_46_7();

    }
    while (v3 != v2);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t static GetContactAttributeSnippetModel.from(_:requestedAttribute:handlesToReturn:locale:mockGlobals:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v6;

  v4 = *v2;
  v6 = *v2;
  OUTLINED_FUNCTION_12_9(&v6);
  if (v1)
  {
    OUTLINED_FUNCTION_28_7();
    OUTLINED_FUNCTION_67_1();
  }
  else
  {
    OUTLINED_FUNCTION_67_1();
    *(_QWORD *)(v4 + 400) = a1;
  }
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v6;

  v4 = *v2;
  v6 = *v2;
  OUTLINED_FUNCTION_12_9(&v6);
  if (v1)
  {
    OUTLINED_FUNCTION_28_7();
    OUTLINED_FUNCTION_67_1();
    swift_release();
    OUTLINED_FUNCTION_21_9();
  }
  else
  {
    OUTLINED_FUNCTION_21_9();
    swift_release();
    *(_QWORD *)(v4 + 440) = a1;
    OUTLINED_FUNCTION_67_1();
  }
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v6;

  v4 = *v2;
  v6 = *v2;
  OUTLINED_FUNCTION_12_9(&v6);
  OUTLINED_FUNCTION_67_1();
  OUTLINED_FUNCTION_21_9();
  if (v1)
    OUTLINED_FUNCTION_28_7();
  else
    *(_QWORD *)(v4 + 480) = a1;
  OUTLINED_FUNCTION_20_0();
  return swift_task_switch();
}

#error "21FE6ED28: call analysis failed (funcsize=334)"

#error "21FE6F230: call analysis failed (funcsize=283)"

#error "21FE6FC60: call analysis failed (funcsize=328)"

#error "21FE70064: call analysis failed (funcsize=254)"

char *static GetContactAttributeSnippetModel.ageUnitLabel(from:given:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  char v53;
  uint64_t v54;
  int EnumTagSinglePayload;
  uint64_t v56;
  char *v57;
  uint64_t (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t (*v63)(uint64_t, uint64_t);
  char v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  void (*v68)(uint64_t);
  uint64_t v69;
  char v70;
  uint64_t (*v71)(uint64_t, uint64_t);
  uint64_t (*v72)(uint64_t, uint64_t);
  uint64_t (*v73)(uint64_t, uint64_t);
  _QWORD v75[5];
  uint64_t v76;
  uint64_t v77;
  char *v78;

  v76 = type metadata accessor for CharacterSet();
  v75[2] = *(_QWORD *)(v76 - 8);
  v4 = MEMORY[0x24BDAC7A8](v76);
  v75[4] = (char *)v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v75[3] = (char *)v75 - v6;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)v75 - v12;
  v14 = MEMORY[0x24BDAC7A8](v11);
  v16 = (char *)v75 - v15;
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)v75 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)v75 - v21;
  v23 = MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)v75 - v24;
  v26 = MEMORY[0x24BDAC7A8](v23);
  v28 = (char *)v75 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v30 = (char *)v75 - v29;
  if (a1 && a2)
  {
    v75[0] = a1;
    swift_retain();
    swift_retain();
    v31 = dispatch thunk of DialogDuration.valueInYears.getter();
    v75[1] = a2;
    if ((v32 & 1) == 0)
    {
      OUTLINED_FUNCTION_104_2(v31);
      if (v33 == v34)
      {
        dispatch thunk of DialogDuration.years.getter();
        v45 = OUTLINED_FUNCTION_31_4();
        OUTLINED_FUNCTION_10((uint64_t)v30);
        if (v46)
        {
          outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v30, &demangling cache variable for type metadata for SpeakableString?);
        }
        else
        {
          SpeakableString.print.getter();
          OUTLINED_FUNCTION_35_10();
          OUTLINED_FUNCTION_92((uint64_t)v30, v51);
          OUTLINED_FUNCTION_31_14();
          OUTLINED_FUNCTION_38_8();
          OUTLINED_FUNCTION_10_18();
          lazy protocol witness table accessor for type String and conformance String();
          OUTLINED_FUNCTION_37_12();
          OUTLINED_FUNCTION_22_15();
          OUTLINED_FUNCTION_71_6();
          if (*(_QWORD *)(v45 + 16))
          {
            OUTLINED_FUNCTION_36_9();
            OUTLINED_FUNCTION_5_0();
LABEL_60:
            v64 = 18;
LABEL_93:
            LOBYTE(v77) = v64;
            dispatch thunk of LabelExecutionResult.subscript.getter();
            swift_release();
            swift_release();
            return v28;
          }
          OUTLINED_FUNCTION_5_0();
        }
        OUTLINED_FUNCTION_66_11();
        goto LABEL_60;
      }
      OUTLINED_FUNCTION_147_0();
      if (v33 == v34)
      {
        dispatch thunk of DialogDuration.years.getter();
        v49 = OUTLINED_FUNCTION_31_4();
        OUTLINED_FUNCTION_10((uint64_t)v28);
        if (v50)
        {
          outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v28, &demangling cache variable for type metadata for SpeakableString?);
        }
        else
        {
          SpeakableString.print.getter();
          OUTLINED_FUNCTION_35_10();
          OUTLINED_FUNCTION_92((uint64_t)v28, v58);
          OUTLINED_FUNCTION_31_14();
          OUTLINED_FUNCTION_38_8();
          OUTLINED_FUNCTION_10_18();
          lazy protocol witness table accessor for type String and conformance String();
          OUTLINED_FUNCTION_37_12();
          OUTLINED_FUNCTION_22_15();
          OUTLINED_FUNCTION_71_6();
          if (*(_QWORD *)(v49 + 16))
          {
            OUTLINED_FUNCTION_36_9();
            OUTLINED_FUNCTION_5_0();
LABEL_75:
            v64 = 17;
            goto LABEL_93;
          }
          OUTLINED_FUNCTION_5_0();
        }
        OUTLINED_FUNCTION_66_11();
        goto LABEL_75;
      }
    }
    v35 = dispatch thunk of DialogDuration.valueInMonths.getter();
    if ((v36 & 1) == 0)
    {
      OUTLINED_FUNCTION_104_2(v35);
      if (v33 == v34)
      {
        dispatch thunk of DialogDuration.months.getter();
        v47 = OUTLINED_FUNCTION_31_4();
        OUTLINED_FUNCTION_10((uint64_t)v25);
        if (v48)
        {
          outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v25, &demangling cache variable for type metadata for SpeakableString?);
        }
        else
        {
          v56 = SpeakableString.print.getter();
          v28 = v57;
          OUTLINED_FUNCTION_92((uint64_t)v25, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 8));
          v77 = v56;
          v78 = v28;
          OUTLINED_FUNCTION_39_9();
          OUTLINED_FUNCTION_38_8();
          OUTLINED_FUNCTION_10_18();
          lazy protocol witness table accessor for type String and conformance String();
          OUTLINED_FUNCTION_37_12();
          OUTLINED_FUNCTION_22_15();
          OUTLINED_FUNCTION_71_6();
          if (*(_QWORD *)(v47 + 16))
          {
            OUTLINED_FUNCTION_36_9();
            OUTLINED_FUNCTION_5_0();
LABEL_70:
            v64 = 6;
            goto LABEL_93;
          }
          OUTLINED_FUNCTION_5_0();
        }
        OUTLINED_FUNCTION_66_11();
        goto LABEL_70;
      }
      OUTLINED_FUNCTION_147_0();
      if (v33 == v34)
      {
        dispatch thunk of DialogDuration.months.getter();
        v54 = OUTLINED_FUNCTION_31_4();
        EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v22, 1, v54);
        if (EnumTagSinglePayload == 1)
        {
          outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v22, &demangling cache variable for type metadata for SpeakableString?);
        }
        else
        {
          v65 = SpeakableString.print.getter();
          v28 = v66;
          v67 = OUTLINED_FUNCTION_139_0();
          v68(v67);
          v77 = v65;
          v78 = v28;
          OUTLINED_FUNCTION_39_9();
          OUTLINED_FUNCTION_38_8();
          OUTLINED_FUNCTION_10_18();
          lazy protocol witness table accessor for type String and conformance String();
          OUTLINED_FUNCTION_37_12();
          OUTLINED_FUNCTION_22_15();
          OUTLINED_FUNCTION_71_6();
          if (*((_QWORD *)v22 + 2))
          {
            OUTLINED_FUNCTION_36_9();
            OUTLINED_FUNCTION_5_0();
LABEL_83:
            v64 = 5;
            goto LABEL_93;
          }
          OUTLINED_FUNCTION_5_0();
        }
        OUTLINED_FUNCTION_66_11();
        goto LABEL_83;
      }
    }
    v37 = dispatch thunk of DialogDuration.valueInWeeks.getter();
    if ((v38 & 1) == 0)
    {
      OUTLINED_FUNCTION_104_2(v37);
      if (v33 == v34)
      {
        dispatch thunk of DialogDuration.weeks.getter();
        v52 = OUTLINED_FUNCTION_31_4();
        OUTLINED_FUNCTION_10((uint64_t)v19);
        if (v53)
        {
          outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v19, &demangling cache variable for type metadata for SpeakableString?);
        }
        else
        {
          SpeakableString.print.getter();
          OUTLINED_FUNCTION_35_10();
          OUTLINED_FUNCTION_92((uint64_t)v19, v63);
          OUTLINED_FUNCTION_31_14();
          OUTLINED_FUNCTION_38_8();
          OUTLINED_FUNCTION_10_18();
          lazy protocol witness table accessor for type String and conformance String();
          OUTLINED_FUNCTION_37_12();
          OUTLINED_FUNCTION_22_15();
          OUTLINED_FUNCTION_71_6();
          if (*(_QWORD *)(v52 + 16))
          {
            OUTLINED_FUNCTION_36_9();
            OUTLINED_FUNCTION_5_0();
LABEL_78:
            v64 = 16;
            goto LABEL_93;
          }
          OUTLINED_FUNCTION_5_0();
        }
        OUTLINED_FUNCTION_66_11();
        goto LABEL_78;
      }
      OUTLINED_FUNCTION_147_0();
      if (v33 == v34)
      {
        dispatch thunk of DialogDuration.weeks.getter();
        v61 = OUTLINED_FUNCTION_31_4();
        OUTLINED_FUNCTION_10((uint64_t)v16);
        if (v62)
        {
          outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v16, &demangling cache variable for type metadata for SpeakableString?);
        }
        else
        {
          SpeakableString.print.getter();
          OUTLINED_FUNCTION_35_10();
          OUTLINED_FUNCTION_92((uint64_t)v16, v72);
          OUTLINED_FUNCTION_31_14();
          OUTLINED_FUNCTION_38_8();
          OUTLINED_FUNCTION_10_18();
          lazy protocol witness table accessor for type String and conformance String();
          OUTLINED_FUNCTION_37_12();
          OUTLINED_FUNCTION_22_15();
          OUTLINED_FUNCTION_71_6();
          if (*(_QWORD *)(v61 + 16))
          {
            OUTLINED_FUNCTION_36_9();
            OUTLINED_FUNCTION_5_0();
LABEL_89:
            v64 = 15;
            goto LABEL_93;
          }
          OUTLINED_FUNCTION_5_0();
        }
        OUTLINED_FUNCTION_66_11();
        goto LABEL_89;
      }
    }
    v39 = dispatch thunk of DialogDuration.valueInDays.getter();
    if ((v40 & 1) == 0)
    {
      OUTLINED_FUNCTION_104_2(v39);
      if (v33 == v34)
      {
        dispatch thunk of DialogDuration.days.getter();
        v59 = OUTLINED_FUNCTION_31_4();
        OUTLINED_FUNCTION_10((uint64_t)v13);
        if (v60)
        {
          outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v13, &demangling cache variable for type metadata for SpeakableString?);
        }
        else
        {
          SpeakableString.print.getter();
          OUTLINED_FUNCTION_35_10();
          OUTLINED_FUNCTION_92((uint64_t)v13, v71);
          OUTLINED_FUNCTION_31_14();
          OUTLINED_FUNCTION_38_8();
          OUTLINED_FUNCTION_10_18();
          lazy protocol witness table accessor for type String and conformance String();
          OUTLINED_FUNCTION_37_12();
          OUTLINED_FUNCTION_22_15();
          OUTLINED_FUNCTION_71_6();
          if (*(_QWORD *)(v59 + 16))
          {
            OUTLINED_FUNCTION_36_9();
            OUTLINED_FUNCTION_5_0();
LABEL_86:
            v64 = 4;
            goto LABEL_93;
          }
          OUTLINED_FUNCTION_5_0();
        }
        OUTLINED_FUNCTION_66_11();
        goto LABEL_86;
      }
      OUTLINED_FUNCTION_147_0();
      if (v33 == v34)
      {
        dispatch thunk of DialogDuration.days.getter();
        v69 = OUTLINED_FUNCTION_31_4();
        OUTLINED_FUNCTION_10((uint64_t)v10);
        if (v70)
        {
          outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v10, &demangling cache variable for type metadata for SpeakableString?);
        }
        else
        {
          SpeakableString.print.getter();
          OUTLINED_FUNCTION_35_10();
          OUTLINED_FUNCTION_92((uint64_t)v10, v73);
          OUTLINED_FUNCTION_31_14();
          OUTLINED_FUNCTION_38_8();
          OUTLINED_FUNCTION_10_18();
          lazy protocol witness table accessor for type String and conformance String();
          OUTLINED_FUNCTION_37_12();
          OUTLINED_FUNCTION_22_15();
          OUTLINED_FUNCTION_71_6();
          if (*(_QWORD *)(v69 + 16))
          {
            OUTLINED_FUNCTION_36_9();
            OUTLINED_FUNCTION_5_0();
LABEL_92:
            v64 = 3;
            goto LABEL_93;
          }
          OUTLINED_FUNCTION_5_0();
        }
        OUTLINED_FUNCTION_66_11();
        goto LABEL_92;
      }
    }
    swift_release();
    OUTLINED_FUNCTION_2();
  }
  else
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Logger.siriContacts);
    v42 = Logger.logObject.getter();
    v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v44 = 0;
      _os_log_impl(&dword_21FE16000, v42, v43, "#GetContactAttributeSnippetModel ageUnitLabel invalid params, returning", v44, 2u);
      MEMORY[0x2207D8768](v44, -1, -1);
    }

  }
  OUTLINED_FUNCTION_66_11();
  return v28;
}

uint64_t static GetContactAttributeSnippetModel.DisplayAttribute.AttributeType.from(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t ContactAttributeSnippet;
  uint64_t result;

  switch(a1)
  {
    case 0:
    case 10:
      v3 = (unsigned int *)MEMORY[0x24BE91E08];
      goto LABEL_11;
    case 1:
      v3 = (unsigned int *)MEMORY[0x24BE91E00];
      goto LABEL_11;
    case 2:
      v3 = (unsigned int *)MEMORY[0x24BE91DE0];
      goto LABEL_11;
    case 3:
      v3 = (unsigned int *)MEMORY[0x24BE91DF0];
      goto LABEL_11;
    case 4:
      v3 = (unsigned int *)MEMORY[0x24BE91DF8];
      goto LABEL_11;
    case 5:
      v3 = (unsigned int *)MEMORY[0x24BE91E10];
      goto LABEL_11;
    case 6:
      v3 = (unsigned int *)MEMORY[0x24BE91E20];
      goto LABEL_11;
    case 7:
    case 8:
    case 9:
      v3 = (unsigned int *)MEMORY[0x24BE91E18];
      goto LABEL_11;
    case 11:
      v3 = (unsigned int *)MEMORY[0x24BE91DE8];
LABEL_11:
      v4 = *v3;
      ContactAttributeSnippet = type metadata accessor for GetContactAttributeSnippetModel.DisplayAttribute.AttributeType();
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(ContactAttributeSnippet - 8) + 104))(a2, v4, ContactAttributeSnippet);
      break;
    default:
      result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      break;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_29()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v0[21];
  *(_QWORD *)(v1 - 136) = v0[22];
  *(_QWORD *)(v1 - 128) = v2;
  v3 = v0[19];
  *(_QWORD *)(v1 - 120) = v0[20];
  *(_QWORD *)(v1 - 112) = v3;
  v4 = v0[15];
  *(_QWORD *)(v1 - 104) = v0[16];
  *(_QWORD *)(v1 - 96) = v4;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_1_28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = v2;
  return (*(uint64_t (**)(unint64_t))(a1 + 32))(v3+ ((*(unsigned __int8 *)(a1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(a1 + 80))+ *(_QWORD *)(a1 + 72) * v1);
}

uint64_t OUTLINED_FUNCTION_2_29@<X0>(unint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1 > 1, v1, 1, v2);
}

id OUTLINED_FUNCTION_3_18()
{
  uint64_t v0;
  uint64_t v1;

  return objc_msgSend(*(id *)(v0 + 32), (SEL)(v1 + 1439));
}

uint64_t OUTLINED_FUNCTION_4_23()
{
  uint64_t v0;

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v0 + 16) + 1, 1, v0);
}

uint64_t OUTLINED_FUNCTION_5_18()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v1 - 88) = v0[38];
  v2 = v0[20];
  *(_QWORD *)(v1 - 128) = v0[21];
  *(_QWORD *)(v1 - 120) = v2;
  v3 = v0[16];
  *(_QWORD *)(v1 - 112) = v0[19];
  *(_QWORD *)(v1 - 104) = v3;
  *(_QWORD *)(v1 - 96) = v0[15];
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_6_22(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  objc_class *v4;
  unint64_t v5;

  return LabelMapper.localizedLabel(handleLabel:localeString:type:)(v4, v5, v3, v2, a1, v1);
}

uint64_t OUTLINED_FUNCTION_7_21(uint64_t a1)
{
  return ContactsLabelCATsModern.quickActionButtonLabels(contact:)(a1);
}

uint64_t OUTLINED_FUNCTION_8_15(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_9_19()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v2 + 152);
  v6 = *(_QWORD *)(v2 + 136);
  *(_QWORD *)(v3 + 16) = v1;
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 104) + 32))(v3+ ((*(unsigned __int8 *)(*(_QWORD *)(v4 - 104) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v4 - 104) + 80))+ *(_QWORD *)(*(_QWORD *)(v4 - 104) + 72) * v0, v5, v6);
}

uint64_t OUTLINED_FUNCTION_10_18()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 128) + 8))(v0, *(_QWORD *)(v1 - 104));
}

uint64_t OUTLINED_FUNCTION_11_17()
{
  return GetContactAttributeSnippetModel.DisplayAttribute.init(id:displayLabel:displayValue:type:)();
}

void OUTLINED_FUNCTION_12_22()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = v2[18];
  v5 = v2[14];
  v6 = v2[5];
  *(_QWORD *)(v3 - 112) = v1 & 0xC000000000000001;
  *(_QWORD *)(v3 - 104) = v4;
  *(_QWORD *)(v3 - 136) = v6 + 32;
  *(_QWORD *)(v3 - 128) = v5;
  *(_QWORD *)(v3 - 120) = v0;
}

uint64_t OUTLINED_FUNCTION_13_24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a12 + 16))(a15, a16, a14);
}

uint64_t OUTLINED_FUNCTION_15_16()
{
  return GetContactAttributeSnippetModel.DisplayAttribute.init(id:displayLabel:displayValue:type:)();
}

uint64_t OUTLINED_FUNCTION_16_12()
{
  return GetContactAttributeSnippetModel.DisplayAttribute.init(id:displayLabel:displayValue:type:)();
}

uint64_t OUTLINED_FUNCTION_17_11()
{
  return GetContactAttributeSnippetModel.init(attributes:contact:flowState:directInvocationsModel:labelCATs:)();
}

uint64_t OUTLINED_FUNCTION_18_13()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 128) + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_19_19(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a11 + 16))(v14, v13, a13);
}

uint64_t OUTLINED_FUNCTION_20_17()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_22_15()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

uint64_t OUTLINED_FUNCTION_23_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_24_18(void *a1)
{
  return outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(a1);
}

id OUTLINED_FUNCTION_25_20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 168);
  *(_QWORD *)(v2 - 96) = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v2 - 88) = v3;
  return objc_msgSend(*(id *)(v1 + 24), (SEL)(v0 + 3912));
}

uint64_t OUTLINED_FUNCTION_29_16(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 456) = a1;
  return CNContact.toDialogPerson(useConversationalName:)();
}

uint64_t OUTLINED_FUNCTION_31_14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 96) = v0;
  *(_QWORD *)(v2 - 88) = v1;
  return static CharacterSet.decimalDigits.getter();
}

uint64_t OUTLINED_FUNCTION_32_12()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v1 + 8))(v0, *(_QWORD *)(v2 - 96));
}

uint64_t OUTLINED_FUNCTION_33_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t OUTLINED_FUNCTION_36_9()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_37_12()
{
  return StringProtocol.components(separatedBy:)();
}

uint64_t OUTLINED_FUNCTION_38_8()
{
  return CharacterSet.inverted.getter();
}

uint64_t OUTLINED_FUNCTION_39_9()
{
  return static CharacterSet.decimalDigits.getter();
}

uint64_t OUTLINED_FUNCTION_40_5()
{
  return UUID.init()();
}

uint64_t OUTLINED_FUNCTION_43_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

void OUTLINED_FUNCTION_44_8()
{
  JUMPOUT(0x2207D80C0);
}

uint64_t OUTLINED_FUNCTION_45_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_46_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v3 + 152);
  v6 = *(_QWORD *)(v3 + 136);
  *(_QWORD *)(v0 + 16) = v1;
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 104) + 32))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v4 - 104) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v4 - 104) + 80))+ *(_QWORD *)(*(_QWORD *)(v4 - 104) + 72) * v2, v5, v6);
}

uint64_t OUTLINED_FUNCTION_47_8()
{
  return UUID.init()();
}

uint64_t OUTLINED_FUNCTION_48_8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = a1;
  return swift_bridgeObjectRelease();
}

id OUTLINED_FUNCTION_49_11()
{
  void *v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_50_10@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

void OUTLINED_FUNCTION_51_7()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_52_8(uint64_t (*a1)(void))
{
  return a1();
}

id OUTLINED_FUNCTION_53_8()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 24), sel_nickname);
}

id OUTLINED_FUNCTION_56_8()
{
  uint64_t v0;
  uint64_t v1;

  return *(id *)(*(_QWORD *)(v1 - 136) + 8 * v0);
}

uint64_t OUTLINED_FUNCTION_57_6()
{
  return static CATOption.defaultMode.getter();
}

void OUTLINED_FUNCTION_58_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 + 144);
  *(_QWORD *)(v3 - 128) = *(_QWORD *)(v2 + 112);
  *(_QWORD *)(v3 - 112) = v0 & 0xC000000000000001;
  *(_QWORD *)(v3 - 104) = v4;
  *(_QWORD *)(v3 - 120) = v1;
}

uint64_t OUTLINED_FUNCTION_60_9()
{
  return CodableContact.init(wrappedValue:)();
}

uint64_t OUTLINED_FUNCTION_62_9()
{
  return CATWrapperSimple.__allocating_init(options:globals:)();
}

void OUTLINED_FUNCTION_63_6(void *a1)
{
  CNLabeledValue<>.init(address:)(a1);
}

uint64_t OUTLINED_FUNCTION_65_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(a14, a15, a13);
}

uint64_t OUTLINED_FUNCTION_67_6()
{
  return GetContactAttributeSnippetModel.DisplayAttribute.init(id:displayLabel:displayValue:type:)();
}

uint64_t OUTLINED_FUNCTION_68_10()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t OUTLINED_FUNCTION_72_5()
{
  void *v0;

  return outlined bridged method (pb) of @objc ContactAttribute.handleValue.getter(v0);
}

void OUTLINED_FUNCTION_75_6()
{
  void *v0;

}

void OUTLINED_FUNCTION_81_2(void *a1)
{
  outlined bridged method (ob) of @objc INObject.identifier.getter(a1);
}

id OUTLINED_FUNCTION_83_4()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, (SEL)(v1 + 1439));
}

uint64_t OUTLINED_FUNCTION_84_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 128) + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_85_5()
{
  return CNLabeledValue<>.formattedString.getter();
}

uint64_t OUTLINED_FUNCTION_86_3()
{
  return GetContactAttributeSnippetModel.init(attributes:contact:flowState:directInvocationsModel:labelCATs:)();
}

uint64_t OUTLINED_FUNCTION_87_4(char a1, uint64_t a2)
{
  uint64_t v2;

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_88_1(char a1, uint64_t a2)
{
  uint64_t v2;

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

unint64_t OUTLINED_FUNCTION_91_4()
{
  return type metadata accessor for CNContact();
}

uint64_t OUTLINED_FUNCTION_93_3()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t OUTLINED_FUNCTION_99_3(uint64_t a1)
{
  uint64_t v1;

  return static GetContactAttributeSnippetModel.DisplayAttribute.AttributeType.from(_:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_103_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a11 + 16))(a12, v12, *(_QWORD *)(v13 - 88));
}

double OUTLINED_FUNCTION_104_2(uint64_t a1)
{
  return *(double *)&a1;
}

uint64_t OUTLINED_FUNCTION_111_1()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_112_3(uint64_t a1)
{
  uint64_t v1;

  return static GetContactAttributeSnippetModel.DisplayAttribute.AttributeType.from(_:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_115_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_117_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v9 + 8))(a9, *(_QWORD *)(v10 - 88));
}

uint64_t OUTLINED_FUNCTION_119_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 104))(v4, a2, v2);
}

uint64_t OUTLINED_FUNCTION_120_1(uint64_t a1)
{
  uint64_t v1;

  return static GetContactAttributeSnippetModel.DisplayAttribute.AttributeType.from(_:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_121_0()
{
  return UUID.uuidString.getter();
}

void OUTLINED_FUNCTION_123_0()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_124_0()
{
  return UUID.init()();
}

uint64_t OUTLINED_FUNCTION_126_1(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 464) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_127_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t OUTLINED_FUNCTION_128_0()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_131_0()
{
  uint64_t v0;
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(v0, 1, v1);
}

uint64_t OUTLINED_FUNCTION_132_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, a4);
}

id OUTLINED_FUNCTION_134_1()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 32), sel_contactAttributeType);
}

uint64_t OUTLINED_FUNCTION_135_0()
{
  return CNContact.isBirthdayToday.getter();
}

id OUTLINED_FUNCTION_136_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;

  return *(id *)(a26 + 8 * v26);
}

uint64_t OUTLINED_FUNCTION_137_0()
{
  return ContactsLabelCATContainer.init(labels:localizedAttributeLabels:)();
}

void OUTLINED_FUNCTION_138_0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = v0;
}

uint64_t OUTLINED_FUNCTION_139_0()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_140()
{
  return CodableContact.init(wrappedValue:)();
}

void OUTLINED_FUNCTION_142(void *a1)
{
  CNLabeledValue<>.init(address:)(a1);
}

uint64_t OUTLINED_FUNCTION_143_0(char a1, uint64_t a2)
{
  uint64_t v2;

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_144_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_146(uint64_t a1)
{
  uint64_t v1;

  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_148_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 96) = a2;
  *(_QWORD *)(v2 - 88) = a1;
  return swift_bridgeObjectRelease();
}

id OUTLINED_FUNCTION_149()
{
  uint64_t v0;
  void *v1;

  return objc_msgSend(v1, (SEL)(v0 + 3419));
}

void OUTLINED_FUNCTION_151_0()
{
  void *v0;

}

void OUTLINED_FUNCTION_152_0()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_156_0()
{
  uint64_t v0;

  return v0;
}

SiriContactsIntents::SiriKitContactUnsupportedReason_optional __swiftcall SiriKitContactUnsupportedReason.init(rawValue:)(Swift::Int rawValue)
{
  if ((unint64_t)rawValue >= 8)
    return (SiriContactsIntents::SiriKitContactUnsupportedReason_optional)7;
  else
    return (SiriContactsIntents::SiriKitContactUnsupportedReason_optional)(0x605040302010007uLL >> (8
                                                                                                  * rawValue));
}

uint64_t SiriKitContactUnsupportedReason.rawValue.getter(unsigned __int8 a1)
{
  return a1 + 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SiriKitContactUnsupportedReason(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance SiriKitContactUnsupportedReason()
{
  specialized RawRepresentable<>.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance SiriKitContactUnsupportedReason(uint64_t a1)
{
  unsigned __int8 *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance SiriKitContactUnsupportedReason()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriContactsIntents::SiriKitContactUnsupportedReason_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SiriKitContactUnsupportedReason@<W0>(Swift::Int *a1@<X0>, SiriContactsIntents::SiriKitContactUnsupportedReason_optional *a2@<X8>)
{
  SiriContactsIntents::SiriKitContactUnsupportedReason_optional result;

  result.value = SiriKitContactUnsupportedReason.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SiriKitContactUnsupportedReason@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = SiriKitContactUnsupportedReason.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

void BaseIntentHandler.__allocating_init(contactService:contactResolver:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  BaseIntentHandler.init(contactService:contactResolver:)(a1, a2);
}

void BaseIntentHandler.init(contactService:contactResolver:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + direct field offset for BaseIntentHandler.$__lazy_storage_$_meCard) = 1;
  outlined init with copy of DeviceState(a1, v2 + direct field offset for BaseIntentHandler.contactService);
  outlined init with copy of DeviceState(a2, v2 + direct field offset for BaseIntentHandler.contactResolver);
  *(_BYTE *)(v2 + direct field offset for BaseIntentHandler.passedPrereqs) = 0;
  OUTLINED_FUNCTION_2_30();
}

id sub_21FE71678(objc_class *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, objc_super a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  objc_super v34;

  v34.receiver = v24;
  v34.super_class = a1;
  v26 = -[objc_class init](&v34, sel_init);
  v27 = one-time initialization token for siriContacts;
  v28 = v26;
  if (v27 != -1)
    swift_once();
  v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Logger.siriContacts);
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)OUTLINED_FUNCTION_2_1();
    *(_WORD *)v32 = 0;
    _os_log_impl(&dword_21FE16000, v30, v31, "Constructed ContactsIntentHandler.", v32, 2u);
    OUTLINED_FUNCTION_0();
  }

  __swift_destroy_boxed_opaque_existential_0(v25);
  __swift_destroy_boxed_opaque_existential_0(v23);
  return v28;
}

void type metadata accessor for BaseIntentHandler()
{
  JUMPOUT(0x2207D8654);
}

id BaseIntentHandler.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void BaseIntentHandler.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void @objc BaseIntentHandler.init()()
{
  BaseIntentHandler.init()();
}

void BaseIntentHandler.__deallocating_deinit()
{
  OUTLINED_FUNCTION_2_30();
}

id sub_21FE717F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 16) = v1;
  *(_QWORD *)(v2 - 8) = a1;
  return objc_msgSendSuper2((objc_super *)(v2 - 16), sel_dealloc);
}

void @objc BaseIntentHandler.__ivar_destroyer(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_0(a1 + direct field offset for BaseIntentHandler.contactService);
  __swift_destroy_boxed_opaque_existential_0(a1 + direct field offset for BaseIntentHandler.contactResolver);
  outlined consume of CNContact??(*(id *)(a1 + direct field offset for BaseIntentHandler.$__lazy_storage_$_meCard));
}

uint64_t type metadata completion function for BaseIntentHandler()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for BaseIntentHandler()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of BaseIntentHandler.__allocating_init(contactService:contactResolver:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

void outlined consume of CNContact??(id a1)
{
  if (a1 != (id)1)

}

id specialized BaseIntentHandler.init(contactService:contactResolver:)(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return specialized BaseIntentHandler.init(contactService:contactResolver:)(a1, a2, a3, a4, a5, a6, a7, &demangling cache variable for type metadata for BaseIntentHandler<GetContactAttributeIntent, GetContactAttributeIntentResponse, GetContactAttributeSiriMatchesResolutionResult>);
}

{
  return specialized BaseIntentHandler.init(contactService:contactResolver:)(a1, a2, a3, a4, a5, a6, a7, &demangling cache variable for type metadata for BaseIntentHandler<GetContactIntent, GetContactIntentResponse, GetContactSiriMatchesResolutionResult>);
}

{
  return specialized BaseIntentHandler.init(contactService:contactResolver:)(a1, a2, a3, a4, a5, a6, a7, &demangling cache variable for type metadata for BaseIntentHandler<ModifyContactAttributeIntent, ModifyContactAttributeIntentResponse, ModifyContactAttributeRelatedSiriMatchesResolutionResult>);
}

id specialized BaseIntentHandler.init(contactService:contactResolver:)(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t *v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  objc_super v25;
  uint64_t v26[5];
  uint64_t v27[5];

  v27[3] = a4;
  v27[4] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_1, a1, a4);
  v26[3] = a5;
  v26[4] = a7;
  v16 = __swift_allocate_boxed_opaque_existential_1(v26);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(v16, a2, a5);
  *(_QWORD *)&a3[direct field offset for BaseIntentHandler.$__lazy_storage_$_meCard] = 1;
  outlined init with copy of DeviceState((uint64_t)v27, (uint64_t)&a3[direct field offset for BaseIntentHandler.contactService]);
  outlined init with copy of DeviceState((uint64_t)v26, (uint64_t)&a3[direct field offset for BaseIntentHandler.contactResolver]);
  a3[direct field offset for BaseIntentHandler.passedPrereqs] = 0;
  v25.receiver = a3;
  v25.super_class = (Class)__swift_instantiateConcreteTypeFromMangledName(a8);
  v17 = objc_msgSendSuper2(&v25, sel_init);
  v18 = one-time initialization token for siriContacts;
  v19 = v17;
  if (v18 != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.siriContacts);
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)OUTLINED_FUNCTION_2_1();
    *(_WORD *)v23 = 0;
    _os_log_impl(&dword_21FE16000, v21, v22, "Constructed ContactsIntentHandler.", v23, 2u);
    OUTLINED_FUNCTION_0();
  }

  __swift_destroy_boxed_opaque_existential_0((uint64_t)v26);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v27);
  return v19;
}

uint64_t getEnumTagSinglePayload for SiriKitContactUnsupportedReason(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 6) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v5 = v6 - 7;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriKitContactUnsupportedReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_21FE71B80 + 4 * byte_21FEDAF55[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_21FE71BB4 + 4 * byte_21FEDAF50[v4]))();
}

uint64_t sub_21FE71BB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE71BBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FE71BC4);
  return result;
}

uint64_t sub_21FE71BD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FE71BD8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_21FE71BDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE71BE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SiriKitContactUnsupportedReason()
{
  return &type metadata for SiriKitContactUnsupportedReason;
}

unint64_t lazy protocol witness table accessor for type SiriKitContactUnsupportedReason and conformance SiriKitContactUnsupportedReason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriKitContactUnsupportedReason and conformance SiriKitContactUnsupportedReason;
  if (!lazy protocol witness table cache variable for type SiriKitContactUnsupportedReason and conformance SiriKitContactUnsupportedReason)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for SiriKitContactUnsupportedReason, &type metadata for SiriKitContactUnsupportedReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitContactUnsupportedReason and conformance SiriKitContactUnsupportedReason);
  }
  return result;
}

void OUTLINED_FUNCTION_2_30()
{
  type metadata accessor for BaseIntentHandler();
}

uint64_t destroy for WatchViews(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 48;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a1 + 8);
  return __swift_destroy_boxed_opaque_existential_0(v2);
}

uint64_t initializeWithCopy for WatchViews(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  __int128 v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = a2 + 8;
  v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v5;
  v6 = v5;
  v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  v7(a1 + 8, v4, v6);
  v8 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 72) = v8;
  (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 48, a2 + 48);
  return a1;
}

_QWORD *assignWithCopy for WatchViews(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v4;

  v4 = a2 + 6;
  *a1 = *a2;
  swift_retain();
  swift_release();
  __swift_assign_boxed_opaque_existential_1(a1 + 1, a2 + 1);
  __swift_assign_boxed_opaque_existential_1(a1 + 6, v4);
  return a1;
}

uint64_t assignWithTake for WatchViews(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  __swift_destroy_boxed_opaque_existential_0(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  __swift_destroy_boxed_opaque_existential_0(a1 + 48);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for WatchViews(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 88))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WatchViews(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WatchViews()
{
  return &type metadata for WatchViews;
}

void WatchViews.buildGetSnippet(contact:localeString:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  id v41;
  unint64_t v42;
  void *v43;
  unint64_t v44;
  void *v45;
  unint64_t v46;
  void *v47;
  void *v48;
  unint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v5 = v4;
  v7 = OUTLINED_FUNCTION_78_3();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_37_2();
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v9 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_1_29();
  v53 = v3;
  v10 = v3 + *(int *)(v7 + 20);
  *(_QWORD *)v10 = "BuildGetSnippetWatchOS";
  *(_QWORD *)(v10 + 8) = 22;
  *(_BYTE *)(v10 + 16) = 2;
  v59 = WatchViews.buildContactHeader(contact:)(a1);
  v11 = OUTLINED_FUNCTION_8_7(v59, sel_phoneNumbers);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v13 = Array<A>.toContactAttributes.getter(v12);
  swift_bridgeObjectRelease();
  v14 = CNContact.formattedFullName.getter();
  v16 = v15;
  v17 = OUTLINED_FUNCTION_8_7(v14, sel_identifier);
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v20 = v19;

  v21 = a3;
  v22 = WatchViews.buildPhoneAttributeSnippet(phoneNumbers:formattedFullName:localeString:contactIdentifier:)(v13, v14, v16, a2, a3, v18, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = OUTLINED_FUNCTION_18_0();
  if (v22)
  {
    v24 = outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(v22);
    if (!v24)
    {
      __break(1u);
      goto LABEL_20;
    }
    OUTLINED_FUNCTION_8_16(v24);

  }
  v25 = OUTLINED_FUNCTION_8_7(v23, sel_emailAddresses);
  v26 = OUTLINED_FUNCTION_16_13();

  Array<A>.toContactAttributes.getter(v26, v27, v28, v29, v30, v31, v32, v33, v52, v53, a3, a2, v58);
  v35 = v34;
  OUTLINED_FUNCTION_96();
  v36 = CNContact.formattedFullName.getter();
  v38 = (void *)WatchViews.buildEmailAttributeSnippet(emailAddresses:formattedFullName:localeString:)(v35, v36, v37, v57, v21);
  OUTLINED_FUNCTION_18_0();
  v39 = OUTLINED_FUNCTION_96();
  if (!v38)
    goto LABEL_9;
  v40 = outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(v38);
  if (!v40)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  OUTLINED_FUNCTION_8_16(v40);

LABEL_9:
  v41 = OUTLINED_FUNCTION_8_7(v39, sel_postalAddresses);
  v42 = OUTLINED_FUNCTION_16_13();

  v43 = (void *)WatchViews.buildAddressAttributeSnippet(postalAddresses:contact:localeString:)(v42, (uint64_t)a1, v57, v21);
  OUTLINED_FUNCTION_18_0();
  if (v43)
  {
    v44 = outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(v43);
    if (v44)
    {
      OUTLINED_FUNCTION_8_16(v44);

      goto LABEL_12;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
LABEL_12:
  WatchViews.buildContactRelationsSnippet(contact:)(a1);
  if (v45)
  {
    v46 = outlined bridged method (ob) of @objc SASTItemGroup.templateItems.getter(v45);
    if (v46)
      OUTLINED_FUNCTION_8_16(v46);
  }
  v47 = (void *)WatchViews.buildBirthdayAttributeSnippet(contact:)();
  if (!v47)
    goto LABEL_18;
  v48 = v47;
  v49 = outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(v47);
  if (v49)
  {
    OUTLINED_FUNCTION_8_16(v49);

LABEL_18:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v50 = OUTLINED_FUNCTION_55();
    *(_OWORD *)(v50 + 16) = xmmword_21FED8AB0;
    v51 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE815E8]), sel_init);
    outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v59, v51, &demangling cache variable for type metadata for SASTTemplateItem, (SEL *)&selRef_setTemplateItems_);
    *(_QWORD *)(v50 + 32) = v51;
    specialized Array._endMutation()();
    static os_signpost_type_t.end.getter();
    OUTLINED_FUNCTION_1_29();
    outlined destroy of Signpost.OpenSignpost(v54);
    OUTLINED_FUNCTION_7();
    return;
  }
LABEL_22:
  __break(1u);
}

uint64_t WatchViews.buildContactHeader(contact:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t result;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v5 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v6 = &v4[*(int *)(v2 + 20)];
  *(_QWORD *)v6 = "BuildContactHeaderWatchOS";
  *((_QWORD *)v6 + 1) = 25;
  v6[16] = 2;
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SAUIDecoratedText);
  v7 = CNContact.formattedFullName.getter();
  SAUIDecoratedText.init(text:regions:)(v7, v8, 0);
  v10 = v9;
  result = outlined bridged method (pb) of @objc SAUIDecoratedText.text.getter(v9);
  if (v12)
  {
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SASTHeaderItem);
    v13 = v10;
    SASTHeaderItem.init(header:text:)(v13);
    v15 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_21FED8AB0;
    *(_QWORD *)(v16 + 32) = v15;
    v40 = v16;
    specialized Array._endMutation()();
    v17 = v15;
    v18 = objc_msgSend(a1, sel_nickname);
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v21 = v20;

    swift_bridgeObjectRelease();
    v22 = HIBYTE(v21) & 0xF;
    if ((v21 & 0x2000000000000000) == 0)
      v22 = v19 & 0xFFFFFFFFFFFFLL;
    if (v22)
    {
      type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SASTLineDetailItem);
      v23 = objc_msgSend(a1, sel_nickname);
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v26 = v25;

      SAUIDecoratedText.init(text:regions:)(v24, v26, 0);
      SASTLineDetailItem.init(title:)(v27);
      MEMORY[0x2207D7DC0]();
      if (*(_QWORD *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    v28 = objc_msgSend(a1, sel_organizationName);
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v31 = v30;

    swift_bridgeObjectRelease();
    v32 = HIBYTE(v31) & 0xF;
    if ((v31 & 0x2000000000000000) == 0)
      v32 = v29 & 0xFFFFFFFFFFFFLL;
    if (v32)
    {
      type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SASTLineDetailItem);
      v33 = objc_msgSend(a1, sel_organizationName);
      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v36 = v35;

      SAUIDecoratedText.init(text:regions:)(v34, v36, 0);
      SASTLineDetailItem.init(title:)(v37);
      MEMORY[0x2207D7DC0]();
      if (*(_QWORD *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }

    v38 = v40;
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost((uint64_t)v4);
    return v38;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id WatchViews.buildPhoneAttributeSnippet(phoneNumbers:formattedFullName:localeString:contactIdentifier:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  id v27;
  uint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  objc_class *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  char v87;
  Swift::String v88;
  Swift::String v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  id result;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  void *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  id v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  id v122;
  id v123;
  id v124;
  uint64_t v125;
  void *v126;
  NSArray v127;
  uint64_t v128;
  char *v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t *v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  id v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  void *v169;
  __int128 v170;
  _OWORD v171[2];
  uint64_t v172;
  unint64_t v173;

  v135 = a7;
  v134 = a6;
  v163 = a4;
  v164 = a5;
  v166 = a2;
  v167 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x24BDAC7A8](v8);
  v150 = (uint64_t)&v129 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = type metadata accessor for AceOutput();
  v144 = *(_QWORD *)(v145 - 8);
  MEMORY[0x24BDAC7A8](v145);
  v162 = (char *)&v129 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = type metadata accessor for BehaviorAfterSpeaking();
  v148 = *(_QWORD *)(v149 - 8);
  MEMORY[0x24BDAC7A8](v149);
  v147 = (char *)&v129 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = type metadata accessor for TemplatingResult();
  v142 = *(_QWORD *)(v143 - 8);
  MEMORY[0x24BDAC7A8](v143);
  v168 = (char *)&v129 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TemplatingText?);
  MEMORY[0x24BDAC7A8](v13);
  v155 = (uint64_t)&v129 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (id)type metadata accessor for TemplatingText();
  v16 = MEMORY[0x24BDAC7A8](v15);
  v146 = (char *)&v129 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v153 = (char *)&v129 - v18;
  v133 = type metadata accessor for CharacterSet();
  v132 = *(_QWORD *)(v133 - 8);
  MEMORY[0x24BDAC7A8](v133);
  v131 = (char *)&v129 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v152 = (char *)&v129 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v151 = (char *)&v129 - v23;
  v24 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v129 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1)
LABEL_49:
    swift_once();
  v27 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v28 = *(int *)(v24 + 20);
  v130 = v26;
  v29 = &v26[v28];
  *(_QWORD *)v29 = "BuildPhoneAttributeSnippetWatchOS";
  *((_QWORD *)v29 + 1) = 33;
  v29[16] = 2;
  v165 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE815E8]), sel_init);
  outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(MEMORY[0x24BEE4AF8], v165, &demangling cache variable for type metadata for SASTTemplateItem, (SEL *)&selRef_setTemplateItems_);
  v154 = (uint64_t)v15;
  v129 = v29;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v24 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v24 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v30 = v156;
  if (!v24)
  {
LABEL_47:
    swift_bridgeObjectRelease();
    static os_signpost_type_t.end.getter();
    v128 = (uint64_t)v130;
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost(v128);
    return v165;
  }
  v157 = a1 & 0xC000000000000001;
  v140 = v156 + 1;
  v31 = 4;
  v139 = *MEMORY[0x24BE98560];
  v141 = xmmword_21FED9160;
  v170 = xmmword_21FED8AB0;
  v138 = v20;
  v137 = a1;
  v136 = v24;
  while (1)
  {
    if (v157)
      v32 = (id)MEMORY[0x2207D80C0](v31 - 4, a1);
    else
      v32 = *(id *)(a1 + 8 * v31);
    v33 = v32;
    v34 = v31 - 3;
    if (__OFADD__(v31 - 4, 1))
    {
      __break(1u);
      goto LABEL_49;
    }
    v35 = outlined bridged method (pb) of @objc ContactAttribute.handleValue.getter(v32);
    if (!v36)
    {

      goto LABEL_44;
    }
    v160 = v36;
    v161 = v35;
    v158 = v31 - 3;
    v173 = MEMORY[0x24BEE4AF8];
    v37 = *v30;
    v38 = (uint64_t)v151;
    ContactsLabelCATs.call()();
    v39 = Result<>.firstPrint.getter();
    v41 = v40;
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v38, (uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
    v169 = v33;
    if (v41)
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v42 = type metadata accessor for Logger();
      __swift_project_value_buffer(v42, (uint64_t)static Logger.siriContacts);
      v43 = Logger.logObject.getter();
      v44 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v43, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v45 = 0;
        _os_log_impl(&dword_21FE16000, v43, v44, "[WatchViews] Building Call button for phone attribute view", v45, 2u);
        MEMORY[0x2207D8768](v45, -1, -1);
      }

      type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SAUIDecoratedText);
      SAUIDecoratedText.init(text:regions:)(v39, v41, 0);
      v47 = v46;
      v48 = static ContactsDirectInvocations.startCall(fullName:phoneHandle:contactIdentifier:)(v166, v167, v33, v134, v135);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v49 = swift_allocObject();
      *(_OWORD *)(v49 + 16) = v170;
      *(_QWORD *)(v49 + 32) = v48;
      *(_QWORD *)&v171[0] = v49;
      specialized Array._endMutation()();
      v50 = *(_QWORD *)&v171[0];
      v51 = objc_allocWithZone(MEMORY[0x24BE815D8]);
      v52 = v48;
      v53 = objc_msgSend(v51, sel_init, v129);
      outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v50, v53, (uint64_t *)&demangling cache variable for type metadata for SAClientBoundCommand, (SEL *)&selRef_setCommands_);
      type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SASTButtonItem);
      v54 = v53;
      v55 = v47;
      SASTButtonItem.init(action:centered:decoratedLabel:)(v54, 0, v55);
      v57 = v56;
      MEMORY[0x2207D7DC0]();
      if (*(_QWORD *)((v173 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v173 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      v37 = *v30;
      v33 = v169;
    }
    v58 = (uint64_t)v152;
    ContactsLabelCATs.message()();
    v59 = Result<>.firstPrint.getter();
    v61 = v60;
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v58, (uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
    if (v61)
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v62 = type metadata accessor for Logger();
      __swift_project_value_buffer(v62, (uint64_t)static Logger.siriContacts);
      v63 = Logger.logObject.getter();
      v64 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v63, v64))
      {
        v65 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v65 = 0;
        _os_log_impl(&dword_21FE16000, v63, v64, "[WatchViews] Building Message button for phone attribute view", v65, 2u);
        MEMORY[0x2207D8768](v65, -1, -1);
      }

      type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SAUIDecoratedText);
      SAUIDecoratedText.init(text:regions:)(v59, v61, 0);
      v67 = v66;
      v68 = outlined bridged method (pb) of @objc ContactAttribute.handleValue.getter(v33);
      v70 = (void *)static ContactsDirectInvocations.sendMessage(contactName:contactPhoneNumber:)(v166, v167, v68, v69);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v71 = swift_allocObject();
      *(_OWORD *)(v71 + 16) = v170;
      *(_QWORD *)(v71 + 32) = v70;
      *(_QWORD *)&v171[0] = v71;
      specialized Array._endMutation()();
      v72 = *(_QWORD *)&v171[0];
      v73 = objc_allocWithZone(MEMORY[0x24BE815D8]);
      v74 = v70;
      v75 = objc_msgSend(v73, sel_init);
      outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v72, v75, (uint64_t *)&demangling cache variable for type metadata for SAClientBoundCommand, (SEL *)&selRef_setCommands_);
      type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SASTButtonItem);
      v76 = v75;
      v77 = v67;
      SASTButtonItem.init(action:centered:decoratedLabel:)(v76, 0, v77);
      v79 = v78;
      MEMORY[0x2207D7DC0]();
      if (*(_QWORD *)((v173 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v173 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      v37 = *v30;
      v33 = v169;
    }
    swift_retain();
    v80 = (objc_class *)outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v33);
    v82 = LabelMapper.localizedLabel(handleLabel:localeString:type:)(v80, v81, v163, v164, 2, v37);
    v84 = v83;
    swift_release();
    swift_bridgeObjectRelease();
    v85 = HIBYTE(v84) & 0xF;
    if ((v84 & 0x2000000000000000) == 0)
      v85 = v82 & 0xFFFFFFFFFFFFLL;
    v159 = v31;
    if (v85)
    {
      v86 = v131;
      CharacterSet.init(charactersIn:)();
      *(_QWORD *)&v171[0] = v82;
      *((_QWORD *)&v171[0] + 1) = v84;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol.rangeOfCharacter(from:options:range:)();
      if ((v87 & 1) != 0)
      {
        v88 = String.firstLetterCapitalized()();
        *(_QWORD *)&v171[0] = 1008804959;
        *((_QWORD *)&v171[0] + 1) = 0xE400000000000000;
        String.append(_:)(v88);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v89._countAndFlagsBits = 1596203326;
        v89._object = (void *)0xE400000000000000;
        String.append(_:)(v89);
        swift_bridgeObjectRelease();
        v90 = *((_QWORD *)&v171[0] + 1);
        v82 = *(_QWORD *)&v171[0];
        (*(void (**)(char *, uint64_t))(v132 + 8))(v86, v133);
        swift_bridgeObjectRelease();
        v84 = v90;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v132 + 8))(v86, v133);
      }
    }
    *(_QWORD *)&v171[0] = v82;
    *((_QWORD *)&v171[0] + 1) = v84;
    lazy protocol witness table accessor for type String and conformance String();
    v91 = StringProtocol.capitalized.getter();
    v93 = v92;
    swift_bridgeObjectRelease();
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SAUIDecoratedText);
    v94 = (void *)MEMORY[0x2207D7CB8](v91, v93);
    swift_bridgeObjectRelease();
    static LabelMappingUtil.translateINPersonHandleLabel(_:languageCode:)();

    v95 = String.sanitizeCNLabel.getter();
    v97 = v96;
    swift_bridgeObjectRelease();
    SAUIDecoratedText.init(text:regions:)(v95, v97, 0);
    v99 = v98;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TemplatingSection>);
    type metadata accessor for TemplatingSection();
    *(_OWORD *)(swift_allocObject() + 16) = v141;
    static String.EMPTY.getter();
    swift_bridgeObjectRetain();
    TemplatingText.init(text:speakableTextOverride:)();
    v100 = v155;
    v101 = v154;
    __swift_storeEnumTagSinglePayload(v155, 1, 1, v154);
    TemplatingSection.init(id:content:caption:spokenOnly:)();
    static String.EMPTY.getter();
    result = (id)outlined bridged method (pb) of @objc SAUIDecoratedText.text.getter(v99);
    if (!v103)
      break;
    TemplatingText.init(text:speakableTextOverride:)();
    __swift_storeEnumTagSinglePayload(v100, 1, 1, v101);
    TemplatingSection.init(id:content:caption:spokenOnly:)();
    static String.EMPTY.getter();
    (*(void (**)(char *, _QWORD, uint64_t))(v148 + 104))(v147, v139, v149);
    TemplatingResult.init(templateIdentifier:sections:behaviorAfterSpeaking:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v104 = swift_allocObject();
    *(_OWORD *)(v104 + 16) = v170;
    v105 = v173;
    if (v173 >> 62)
    {
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
      v106 = _bridgeCocoaArray<A>(_:)();
    }
    else
    {
      swift_bridgeObjectRetain_n();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      v106 = v105;
    }
    v20 = v138;
    swift_bridgeObjectRelease();
    v107 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE815E8]), sel_init);
    outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v106, v107, &demangling cache variable for type metadata for SASTTemplateItem, (SEL *)&selRef_setTemplateItems_);
    *(_QWORD *)(v104 + 32) = v107;
    *(_QWORD *)&v171[0] = v104;
    specialized Array._endMutation()();
    v108 = type metadata accessor for NLContextUpdate();
    v109 = v150;
    __swift_storeEnumTagSinglePayload(v150, 1, 1, v108);
    v172 = 0;
    memset(v171, 0, sizeof(v171));
    static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
    swift_bridgeObjectRelease();
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v171, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
    outlined destroy of UsoEntity_common_Person.DefinedValues?(v109, &demangling cache variable for type metadata for NLContextUpdate?);
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SAStartLocalRequest);
    v110 = AceOutput.commands.getter();
    v111 = specialized _arrayConditionalCast<A, B>(_:)(v110);
    swift_bridgeObjectRelease();
    SAStartLocalRequest.init(clientBoundCommands:)(v111);
    v113 = v112;
    v114 = swift_allocObject();
    *(_OWORD *)(v114 + 16) = v170;
    *(_QWORD *)(v114 + 32) = v113;
    *(_QWORD *)&v171[0] = v114;
    specialized Array._endMutation()();
    v115 = *(_QWORD *)&v171[0];
    v116 = objc_allocWithZone(MEMORY[0x24BE815D8]);
    v15 = v113;
    v117 = objc_msgSend(v116, sel_init);
    outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v115, v117, (uint64_t *)&demangling cache variable for type metadata for SAClientBoundCommand, (SEL *)&selRef_setCommands_);
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SASTColumnDataListItem);
    v118 = swift_allocObject();
    *(_OWORD *)(v118 + 16) = v170;
    v119 = v99;
    SAUIDecoratedText.init(text:regions:)(v161, v160, 0);
    *(_QWORD *)(v118 + 32) = v120;
    *(_QWORD *)&v171[0] = v118;
    specialized Array._endMutation()();
    v121 = *(_QWORD *)&v171[0];
    v122 = v117;
    SASTColumnDataListItem.init(title:decoratedRows:action:)(v119, v121, v117);
    v124 = v123;
    result = (id)outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(v165);
    *(_QWORD *)&v171[0] = result;
    if (!result)
      goto LABEL_52;
    v125 = swift_bridgeObjectRelease();
    MEMORY[0x2207D7DC0](v125);
    v30 = v156;
    v24 = v136;
    v126 = v169;
    if (*(_QWORD *)((*(_QWORD *)&v171[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)&v171[0] & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v26 = *(char **)&v171[0];
    if (*(_QWORD *)&v171[0])
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
      v127.super.isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    else
    {
      v127.super.isa = 0;
    }
    objc_msgSend(v165, sel_setTemplateItems_, v127.super.isa, v129);

    (*(void (**)(char *, uint64_t))(v144 + 8))(v162, v145);
    (*(void (**)(char *, uint64_t))(v142 + 8))(v168, v143);
    a1 = v137;
    v34 = v158;
    v31 = v159;
LABEL_44:
    ++v31;
    if (v34 == v24)
      goto LABEL_47;
  }
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

uint64_t WatchViews.buildEmailAttributeSnippet(emailAddresses:formattedFullName:localeString:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  Swift::String v30;
  Swift::String v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  id v58;
  id v59;
  uint64_t result;
  NSArray v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  __int128 v75;
  id v76;
  uint64_t v77;
  unint64_t v78;

  v72 = a4;
  v73 = a5;
  v7 = type metadata accessor for CharacterSet();
  v65 = *(_QWORD *)(v7 - 8);
  v66 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v67 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x24BDAC7A8](v9);
  v11 = (uint64_t)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1)
LABEL_35:
    swift_once();
  v12 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v13 = v11 + *(int *)(v9 + 20);
  *(_QWORD *)v13 = "BuildEmailAttributeSnippetWatchOS";
  *(_QWORD *)(v13 + 8) = 33;
  v63 = v13;
  *(_BYTE *)(v13 + 16) = 2;
  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE815E8]), sel_init);
  outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(MEMORY[0x24BEE4AF8], v14, &demangling cache variable for type metadata for SASTTemplateItem, (SEL *)&selRef_setTemplateItems_);
  v64 = v11;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    if (v15)
      goto LABEL_4;
LABEL_37:
    swift_bridgeObjectRelease();
    static os_signpost_type_t.end.getter();
    v62 = v64;
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost(v62);
    return (uint64_t)v14;
  }
  v15 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v15)
    goto LABEL_37;
LABEL_4:
  v74 = a1 & 0xC000000000000001;
  v70 = v5 + 48;
  v11 = 4;
  v68 = v15;
  v69 = a1;
  v71 = v14;
  v75 = xmmword_21FED8AB0;
  while (1)
  {
    v9 = v11 - 4;
    if (v74)
      v16 = (id)MEMORY[0x2207D80C0](v11 - 4, a1);
    else
      v16 = *(id *)(a1 + 8 * v11);
    v17 = v16;
    v18 = v11 - 3;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    v19 = outlined bridged method (pb) of @objc ContactAttribute.handleValue.getter(v16);
    if (v20)
      break;

LABEL_32:
    ++v11;
    if (v18 == v15)
      goto LABEL_37;
  }
  v21 = v19;
  v22 = v20;
  v23 = outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v17);
  if (v24)
    v25 = v23;
  else
    v25 = 0;
  if (v24)
    v26 = v24;
  else
    v26 = 0xE000000000000000;
  v27 = HIBYTE(v26) & 0xF;
  if ((v26 & 0x2000000000000000) == 0)
    v27 = v25 & 0xFFFFFFFFFFFFLL;
  v76 = v17;
  if (v27)
  {
    v28 = v67;
    CharacterSet.init(charactersIn:)();
    v77 = v25;
    v78 = v26;
    lazy protocol witness table accessor for type String and conformance String();
    StringProtocol.rangeOfCharacter(from:options:range:)();
    if ((v29 & 1) != 0)
    {
      v30 = String.firstLetterCapitalized()();
      v77 = 1008804959;
      v78 = 0xE400000000000000;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v31._countAndFlagsBits = 1596203326;
      v31._object = (void *)0xE400000000000000;
      String.append(_:)(v31);
      swift_bridgeObjectRelease();
      v25 = v77;
      v32 = v78;
      (*(void (**)(char *, uint64_t))(v65 + 8))(v28, v66);
      swift_bridgeObjectRelease();
      v26 = v32;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v65 + 8))(v28, v66);
    }
  }
  v77 = v25;
  v78 = v26;
  lazy protocol witness table accessor for type String and conformance String();
  v33 = StringProtocol.capitalized.getter();
  v35 = v34;
  swift_bridgeObjectRelease();
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SAUIDecoratedText);
  v36 = (void *)MEMORY[0x2207D7CB8](v33, v35);
  swift_bridgeObjectRelease();
  static LabelMappingUtil.translateINPersonHandleLabel(_:languageCode:)();

  v37 = String.sanitizeCNLabel.getter();
  v39 = v38;
  swift_bridgeObjectRelease();
  SAUIDecoratedText.init(text:regions:)(v37, v39, 0);
  v41 = v40;
  v77 = v21;
  v78 = v22;
  swift_bridgeObjectRetain();
  v42 = String.init<A>(_:)();
  SAUIDecoratedText.init(text:regions:)(v42, v43, 0);
  v45 = v44;
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SASTColumnDataListItem);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = v75;
  *(_QWORD *)(v46 + 32) = v45;
  v77 = v46;
  specialized Array._endMutation()();
  v47 = v77;
  v48 = v41;
  v49 = v45;
  SASTColumnDataListItem.init(title:decoratedRows:action:)(v48, v47, 0);
  v51 = v50;
  AppUtil.buildPunchoutFor(emailAddress:)();
  v53 = v52;
  swift_bridgeObjectRelease();
  if (v53)
  {
    v54 = swift_allocObject();
    *(_OWORD *)(v54 + 16) = v75;
    *(_QWORD *)(v54 + 32) = v53;
    v77 = v54;
    specialized Array._endMutation()();
    v55 = v77;
    v56 = objc_allocWithZone(MEMORY[0x24BE815D8]);
    v57 = v53;
    v58 = objc_msgSend(v56, sel_init);
    outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v55, v58, (uint64_t *)&demangling cache variable for type metadata for SAClientBoundCommand, (SEL *)&selRef_setCommands_);
    objc_msgSend(v51, sel_setAction_, v58);

  }
  v59 = v51;
  v14 = v71;
  result = outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(v71);
  v77 = result;
  if (result)
  {
    MEMORY[0x2207D7DC0]();
    a1 = v69;
    if (*(_QWORD *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v5 = v77;
    if (v77)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
      v61.super.isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    else
    {
      v61.super.isa = 0;
    }
    objc_msgSend(v14, sel_setTemplateItems_, v61.super.isa);

    v15 = v68;
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t WatchViews.buildAddressAttributeSnippet(postalAddresses:contact:localeString:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  id v48;
  id v49;
  uint64_t result;
  NSArray v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  id v66;
  uint64_t v67;

  v63 = a3;
  v64 = a4;
  v62 = a2;
  v6 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1)
LABEL_28:
    swift_once();
  v9 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v10 = &v8[*(int *)(v6 + 20)];
  *(_QWORD *)v10 = "BuildAddressAttributeSnippetWatchOS";
  *((_QWORD *)v10 + 1) = 35;
  v10[16] = 2;
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE815E8]), sel_init);
  outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(MEMORY[0x24BEE4AF8], v11, &demangling cache variable for type metadata for SASTTemplateItem, (SEL *)&selRef_setTemplateItems_);
  v53 = v10;
  v54 = v8;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v8 = (char *)a1;
  if (v6)
  {
    v59 = type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SAUIDecoratedText);
    v12 = type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SASTColumnDataListItem);
    v57 = v4 + 48;
    v58 = v12;
    v61 = a1 & 0xC000000000000001;
    v13 = 4;
    v65 = xmmword_21FED8AB0;
    v60 = v11;
    v55 = (char *)a1;
    v56 = v6;
    while (1)
    {
      v4 = v13 - 4;
      if (v61)
        v14 = (id)MEMORY[0x2207D80C0](v13 - 4, v8);
      else
        v14 = *(id *)&v8[8 * v13];
      v15 = v14;
      v16 = v13 - 3;
      if (__OFADD__(v4, 1))
      {
        __break(1u);
        goto LABEL_28;
      }
      v17 = objc_msgSend(v14, sel_label, v53);
      if (v17)
      {
        v18 = v17;
        v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v21 = v20;

      }
      else
      {
        v19 = static String.EMPTY.getter();
        v21 = v22;
      }
      v23 = (void *)MEMORY[0x2207D7CB8](v19, v21);
      swift_bridgeObjectRelease();
      v24 = static LabelMappingUtil.translateINPersonHandleLabel(_:languageCode:)();
      v26 = v25;

      SAUIDecoratedText.init(text:regions:)(v24, v26, 0);
      v28 = v27;
      v29 = CNLabeledValue<>.formattedString.getter();
      SAUIDecoratedText.init(text:regions:)(v29, v30, 0);
      v32 = v31;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = v65;
      *(_QWORD *)(v33 + 32) = v32;
      v67 = v33;
      specialized Array._endMutation()();
      v34 = v67;
      v35 = v28;
      v66 = v32;
      SASTColumnDataListItem.init(title:decoratedRows:action:)(v35, v34, 0);
      v37 = v36;
      AppUtil.buildPunchoutFor(labeledAddress:contact:)();
      if (v38)
      {
        v39 = v38;
        if (one-time initialization token for siriContacts != -1)
          swift_once();
        v40 = type metadata accessor for Logger();
        __swift_project_value_buffer(v40, (uint64_t)static Logger.siriContacts);
        v41 = Logger.logObject.getter();
        v42 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v41, v42))
        {
          v43 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v43 = 0;
          _os_log_impl(&dword_21FE16000, v41, v42, "#buildAddressAttributeSnippet Built action to launch Maps with address", v43, 2u);
          MEMORY[0x2207D8768](v43, -1, -1);
        }

        v44 = swift_allocObject();
        *(_OWORD *)(v44 + 16) = v65;
        *(_QWORD *)(v44 + 32) = v39;
        v67 = v44;
        specialized Array._endMutation()();
        v45 = v67;
        v46 = objc_allocWithZone(MEMORY[0x24BE815D8]);
        v47 = v39;
        v48 = objc_msgSend(v46, sel_init);
        outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v45, v48, (uint64_t *)&demangling cache variable for type metadata for SAClientBoundCommand, (SEL *)&selRef_setCommands_);
        objc_msgSend(v37, sel_setAction_, v48);

        v8 = v55;
      }
      v49 = v37;
      v11 = v60;
      result = outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(v60);
      v67 = result;
      if (!result)
        break;
      MEMORY[0x2207D7DC0]();
      a1 = *(_QWORD *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (a1 >= *(_QWORD *)((v67 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if (v67)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
        v51.super.isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
      else
      {
        v51.super.isa = 0;
      }
      objc_msgSend(v11, sel_setTemplateItems_, v51.super.isa);

      ++v13;
      v6 = v56;
      if (v16 == v56)
        goto LABEL_26;
    }
    __break(1u);
  }
  else
  {
LABEL_26:
    swift_bridgeObjectRelease();
    static os_signpost_type_t.end.getter();
    v52 = (uint64_t)v54;
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost(v52);
    return (uint64_t)v11;
  }
  return result;
}

void WatchViews.buildContactRelationsSnippet(contact:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  char *v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  uint8_t *v47;
  Class isa;
  Class v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  id v56;
  id v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  NSArray v79;
  _QWORD v80[2];
  char *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  id v94;
  id v95;
  unint64_t v96;
  __int128 v97;
  void *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103[3];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_9_5();
  v91 = v3;
  v90 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_9_5();
  v89 = v5;
  v6 = OUTLINED_FUNCTION_78_3();
  OUTLINED_FUNCTION_28();
  v8 = MEMORY[0x24BDAC7A8](v7);
  v99 = (char *)v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v80 - v10;
  if (one-time initialization token for contactsLog != -1)
LABEL_39:
    swift_once();
  v12 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_10_19();
  v13 = &v11[*(int *)(v6 + 20)];
  *(_QWORD *)v13 = "BuildContactRelationsSnippetWatchOS";
  *((_QWORD *)v13 + 1) = 35;
  v13[16] = 2;
  v14 = objc_msgSend(a1, sel_contactRelations);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v15 >> 62)
  {
    OUTLINED_FUNCTION_23_9();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_167();
    if (v16)
      goto LABEL_4;
  }
  else
  {
    v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v16)
    {
LABEL_4:
      v80[1] = v13;
      v81 = v11;
      v94 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE815E8]), sel_init);
      outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(MEMORY[0x24BEE4AF8], v94, &demangling cache variable for type metadata for SASTTemplateItem, (SEL *)&selRef_setTemplateItems_);
      v17 = 0;
      v96 = v15 & 0xC000000000000001;
      v84 = &v102;
      v85 = *MEMORY[0x24BE82410];
      v18 = 4;
      *(_QWORD *)&v19 = 136315138;
      v83 = v19;
      v82 = MEMORY[0x24BEE4AD8] + 8;
      v97 = xmmword_21FED8AB0;
      v88 = v6;
      v87 = v15;
      v86 = v16;
      while (1)
      {
        if (v96)
          v20 = (char *)MEMORY[0x2207D80C0](v18 - 4, v15);
        else
          v20 = (char *)*(id *)(v15 + 8 * v18);
        v11 = v20;
        a1 = (void *)(v18 - 3);
        if (__OFADD__(v18 - 4, 1))
        {
          __break(1u);
          goto LABEL_39;
        }
        v21 = OUTLINED_FUNCTION_106_0((uint64_t)v20, sel_label);
        if (!v21)
        {

          goto LABEL_36;
        }
        v22 = v21;
        v98 = (void *)(v18 - 3);
        v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v25 = v24;

        v26 = (id)static Signpost.contactsLog;
        v27 = v99;
        OSSignpostID.init(log:)();
        static os_signpost_type_t.begin.getter();
        os_signpost(_:dso:log:name:signpostID:)();
        v28 = &v27[*(int *)(v6 + 20)];
        *(_QWORD *)v28 = "RelationshipLabelKeyForValue";
        *((_QWORD *)v28 + 1) = 28;
        v28[16] = 2;
        v29 = one-time initialization token for GenderedCNRelationLabelToNLSemanticValue;
        OUTLINED_FUNCTION_23_9();
        if (v29 != -1)
          swift_once();
        swift_beginAccess();
        v30 = *(_QWORD *)(static Dictionary<>.GenderedCNRelationLabelToNLSemanticValue + 16);
        OUTLINED_FUNCTION_23_9();
        v100 = v11;
        if (v30 && (specialized __RawDictionaryStorage.find<A>(_:)(v23, v25), (v31 & 1) != 0))
        {
          swift_endAccess();
          swift_bridgeObjectRetain();
          OUTLINED_FUNCTION_167();
        }
        else
        {
          v95 = (id)v18;
          swift_endAccess();
          OUTLINED_FUNCTION_167();
          if (one-time initialization token for NLSemanticValueToCNRelationLabel != -1)
            swift_once();
          v32 = swift_beginAccess();
          MEMORY[0x24BDAC7A8](v32);
          v80[-2] = v23;
          v80[-1] = v25;
          v33 = swift_bridgeObjectRetain();
          specialized Sequence.first(where:)(v33, (uint64_t (*)(uint64_t))partial apply for closure #1 in implicit closure #1 in static Dictionary<>.nlSemantic(forCNLabel:));
          v35 = v34;
          OUTLINED_FUNCTION_96();
          if (!v35)
          {
            v11 = v100;
            v18 = (uint64_t)v95;
            goto LABEL_22;
          }
          OUTLINED_FUNCTION_167();
          v11 = v100;
          v18 = (uint64_t)v95;
        }
        swift_bridgeObjectRelease();
LABEL_22:
        static os_signpost_type_t.end.getter();
        v36 = (uint64_t)v99;
        os_signpost(_:dso:log:name:signpostID:)();
        outlined destroy of Signpost.OpenSignpost(v36);
        OUTLINED_FUNCTION_167();
        v37 = v91;
        SpeakableString.init(print:speak:)();
        v38 = type metadata accessor for SpeakableString();
        __swift_storeEnumTagSinglePayload(v37, 0, 1, v38);
        v39 = v89;
        ContactsLabelCATs.relationship(relationship:)(v37);
        outlined destroy of UsoEntity_common_Person.DefinedValues?(v37, &demangling cache variable for type metadata for SpeakableString?);
        v40 = Result<>.firstPrint.getter();
        v42 = v41;
        outlined destroy of UsoEntity_common_Person.DefinedValues?(v39, (uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
        if (v42)
        {
          if (one-time initialization token for siriContacts != -1)
            swift_once();
          v43 = type metadata accessor for Logger();
          __swift_project_value_buffer(v43, (uint64_t)static Logger.siriContacts);
          swift_bridgeObjectRetain_n();
          v44 = Logger.logObject.getter();
          v45 = static os_log_type_t.debug.getter();
          v46 = os_log_type_enabled(v44, v45);
          v93 = v17;
          if (v46)
          {
            v47 = (uint8_t *)swift_slowAlloc();
            v103[0] = swift_slowAlloc();
            *(_DWORD *)v47 = v83;
            swift_bridgeObjectRetain();
            v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, (unint64_t)v42, v103);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_21FE16000, v44, v45, "[WatchViews] Building snippet for relationship label: %s", v47, 0xCu);
            swift_arrayDestroy();
            OUTLINED_FUNCTION_0();
          }

          swift_bridgeObjectRelease_n();
          type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SATextDecorationRegion);
          type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
          isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
          String.count.getter();
          v49 = Int._bridgeToObjectiveC()().super.super.isa;
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          SATextDecorationRegion.init(start:length:property:)(isa, v49);
          v51 = v50;
          type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SAUIDecoratedText);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          v52 = OUTLINED_FUNCTION_55();
          *(_OWORD *)(v52 + 16) = v97;
          *(_QWORD *)(v52 + 32) = v51;
          v103[0] = v52;
          OUTLINED_FUNCTION_13_25();
          v53 = v103[0];
          v92 = v51;
          SAUIDecoratedText.init(text:regions:)(v40, v42, v53);
          v95 = v54;
          v55 = OUTLINED_FUNCTION_55();
          *(_OWORD *)(v55 + 16) = v97;
          v56 = OUTLINED_FUNCTION_106_0(v55, sel_value);
          v57 = objc_msgSend(v56, sel_name);

          v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v60 = v59;

          SAUIDecoratedText.init(text:regions:)(v58, v60, 0);
          *(_QWORD *)(v55 + 32) = v61;
          v103[0] = v55;
          v62 = OUTLINED_FUNCTION_13_25();
          v63 = v103[0];
          v64 = OUTLINED_FUNCTION_106_0(v62, sel_value);
          v65 = objc_msgSend(v64, sel_name);

          v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v68 = v67;

          v69 = (void *)static ContactsDirectInvocations.getContact(contactName:)(v66, v68);
          OUTLINED_FUNCTION_96();
          v70 = OUTLINED_FUNCTION_55();
          *(_OWORD *)(v70 + 16) = v97;
          *(_QWORD *)(v70 + 32) = v69;
          v103[0] = v70;
          OUTLINED_FUNCTION_13_25();
          v71 = v103[0];
          v72 = objc_allocWithZone(MEMORY[0x24BE815D8]);
          v73 = v69;
          v74 = objc_msgSend(v72, sel_init);
          outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v71, v74, (uint64_t *)&demangling cache variable for type metadata for SAClientBoundCommand, (SEL *)&selRef_setCommands_);
          type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SASTColumnDataListItem);
          v75 = v95;
          v76 = v74;
          SASTColumnDataListItem.init(title:decoratedRows:action:)(v75, v63, v74);
          v78 = v77;
          v103[0] = outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(v94);
          if (!v103[0])
          {
            __break(1u);
            return;
          }
          MEMORY[0x2207D7DC0]();
          v6 = v88;
          v17 = v93;
          if (*(_QWORD *)((v103[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v103[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          if (v103[0])
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
            v79.super.isa = Array._bridgeToObjectiveC()().super.isa;
            OUTLINED_FUNCTION_96();
          }
          else
          {
            v79.super.isa = 0;
          }
          v16 = v86;
          objc_msgSend(v94, sel_setTemplateItems_, v79.super.isa);

          v15 = v87;
        }
        else
        {

          v6 = v88;
          v15 = v87;
          v16 = v86;
        }
        a1 = v98;
LABEL_36:
        ++v18;
        if (a1 == (void *)v16)
        {
          OUTLINED_FUNCTION_167();
          static os_signpost_type_t.end.getter();
          v11 = v81;
          os_signpost(_:dso:log:name:signpostID:)();
          goto LABEL_42;
        }
      }
    }
  }
  OUTLINED_FUNCTION_167();
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_10_19();
LABEL_42:
  outlined destroy of Signpost.OpenSignpost((uint64_t)v11);
  OUTLINED_FUNCTION_7();
}

uint64_t WatchViews.buildBirthdayAttributeSnippet(contact:)()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  char *v9;
  uint64_t v10;
  int EnumTagSinglePayload;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  NSNumber v18;
  uint64_t result;
  uint64_t v20;
  Class isa;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;

  v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  MEMORY[0x24BDAC7A8](v39);
  v1 = (char *)&v38 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Signpost.OpenSignpost();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v8 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v9 = &v7[*(int *)(v5 + 20)];
  *(_QWORD *)v9 = "BuildBirthdayAttributeSnippetWatchOS";
  *((_QWORD *)v9 + 1) = 36;
  v9[16] = 2;
  CNContact.timezonedBirthdate.getter((uint64_t)v4);
  v10 = type metadata accessor for Date();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v4, 1, v10);
  outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Date?);
  v12 = 0;
  if (EnumTagSinglePayload == 1)
    goto LABEL_8;
  ContactsLabelCATs.birthday()();
  v13 = Result<>.firstPrint.getter();
  v15 = v14;
  outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v1, (uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  if (!v15)
  {
    v12 = 0;
    goto LABEL_8;
  }
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for SAUIDecoratedText);
  SAUIDecoratedText.init(text:regions:)(v13, v15, 0);
  v17 = v16;
  type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v18.super.super.isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
  result = outlined bridged method (pb) of @objc SAUIDecoratedText.text.getter(v17);
  if (v20)
  {
    type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SATextDecorationRegion);
    String.count.getter();
    swift_bridgeObjectRelease();
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    SATextDecorationRegion.init(start:length:property:)(v18.super.super.isa, isa);
    v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v24 = swift_allocObject();
    v40 = xmmword_21FED8AB0;
    *(_OWORD *)(v24 + 16) = xmmword_21FED8AB0;
    *(_QWORD *)(v24 + 32) = v23;
    v41 = v24;
    specialized Array._endMutation()();
    v25 = v41;
    v26 = v23;
    outlined bridged method (mbnn) of @objc SAUIDecoratedText.regions.setter(v25, v17);
    v27 = CNContact.formattedBirthdateString.getter();
    SAUIDecoratedText.init(text:regions:)(v27, v28, 0);
    v30 = v29;
    v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = v40;
    type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SASTPropertyListItem);
    v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = v40;
    *(_QWORD *)(v32 + 32) = v30;
    v41 = v32;
    specialized Array._endMutation()();
    v33 = v41;
    v34 = v17;
    v35 = v30;
    SASTPropertyListItem.init(decoratedTitle:decoratedValues:)(v34, v33);
    *(_QWORD *)(v31 + 32) = v36;
    v41 = v31;
    specialized Array._endMutation()();
    v37 = v41;
    v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE815E8]), sel_init);
    outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(v37, v12, &demangling cache variable for type metadata for SASTTemplateItem, (SEL *)&selRef_setTemplateItems_);

LABEL_8:
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost((uint64_t)v7);
    return (uint64_t)v12;
  }
  __break(1u);
  return result;
}

void WatchViews.buildGetAttributeSnippet(handles:contact:contactAttribute:localeString:)(unint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v9 = OUTLINED_FUNCTION_78_3();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_37_2();
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_1_29();
  v11 = v5 + *(int *)(v9 + 20);
  *(_QWORD *)v11 = "BuildGetAttributeSnippetWatchOS";
  *(_QWORD *)(v11 + 8) = 31;
  *(_BYTE *)(v11 + 16) = 2;
  switch((unint64_t)objc_msgSend(a3, sel_contactAttributeType))
  {
    case 1uLL:
      if (!a1)
        goto LABEL_24;
      if (!(a1 >> 62))
      {
        if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_24;
        goto LABEL_8;
      }
      OUTLINED_FUNCTION_4_24();
      v22 = OUTLINED_FUNCTION_18_14();
      OUTLINED_FUNCTION_18_0();
      if (v22)
      {
LABEL_8:
        v12 = CNContact.formattedFullName.getter();
        WatchViews.buildEmailAttributeSnippet(emailAddresses:formattedFullName:localeString:)(a1, v12, v13, a4, a5);
        goto LABEL_17;
      }
      goto LABEL_24;
    case 2uLL:
      if (!a1)
        goto LABEL_24;
      if (!(a1 >> 62))
      {
        if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_24;
        goto LABEL_12;
      }
      OUTLINED_FUNCTION_4_24();
      v23 = OUTLINED_FUNCTION_18_14();
      OUTLINED_FUNCTION_18_0();
      if (v23)
      {
LABEL_12:
        v14 = CNContact.formattedFullName.getter();
        v16 = v15;
        v17 = objc_msgSend(a2, sel_identifier);
        v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v20 = v19;

        WatchViews.buildPhoneAttributeSnippet(phoneNumbers:formattedFullName:localeString:contactIdentifier:)(a1, v14, v16, a4, a5, v18, v20);
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
LABEL_24:
      static os_signpost_type_t.end.getter();
      OUTLINED_FUNCTION_1_29();
LABEL_25:
      outlined destroy of Signpost.OpenSignpost(v5);
      OUTLINED_FUNCTION_7();
      return;
    case 3uLL:
      if (!a1)
        goto LABEL_24;
      if (a1 >> 62)
      {
        OUTLINED_FUNCTION_4_24();
        v24 = OUTLINED_FUNCTION_18_14();
        OUTLINED_FUNCTION_18_0();
        if (!v24)
          goto LABEL_24;
      }
      else if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_24;
      }
      v21 = Array<A>.toCNPostalAddresses.getter(a1);
      WatchViews.buildAddressAttributeSnippet(postalAddresses:contact:localeString:)(v21, (uint64_t)a2, a4, a5);
LABEL_17:
      swift_bridgeObjectRelease();
      static os_signpost_type_t.end.getter();
LABEL_18:
      OUTLINED_FUNCTION_1_29();
      goto LABEL_25;
    case 4uLL:
    case 5uLL:
      WatchViews.buildBirthdayAttributeSnippet(contact:)();
      static os_signpost_type_t.end.getter();
      goto LABEL_18;
    default:
      goto LABEL_24;
  }
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  v9 = MEMORY[0x24BEE4AF8];
  v2 = a1 >> 62;
  if (a1 >> 62)
    goto LABEL_16;
  while (1)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v2)
      break;
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v3)
      return v9;
LABEL_6:
    for (i = 4; ; ++i)
    {
      v2 = i - 4;
      v5 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x2207D80C0](i - 4, a1) : *(id *)(a1 + 8 * i);
      v6 = v5;
      v7 = i - 3;
      if (__OFADD__(v2, 1))
        break;
      if (!swift_dynamicCastObjCProtocolConditional())
      {

        swift_release();
        return 0;
      }
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v7 == v3)
        return v9;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v3)
    goto LABEL_6;
  return v9;
}

void outlined bridged method (mbnn) of @objc SASTCommandTemplateAction.commands.setter(uint64_t a1, void *a2, uint64_t *a3, SEL *a4)
{
  Class isa;

  __swift_instantiateConcreteTypeFromMangledName(a3);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, *a4, isa);

}

uint64_t outlined bridged method (pb) of @objc SAUIDecoratedText.text.getter(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_text);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (pb) of @objc SASTItemGroup.templateItems.getter(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_templateItems);
  if (!v1)
    return 0;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void outlined bridged method (mbnn) of @objc SAUIDecoratedText.regions.setter(uint64_t a1, void *a2)
{
  Class isa;

  type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for SATextDecorationRegion);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, sel_setRegions_, isa);

}

uint64_t outlined bridged method (ob) of @objc SASTItemGroup.templateItems.getter(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, sel_templateItems);

  if (!v2)
    return 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SASTTemplateItem);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t partial apply for closure #1 in implicit closure #1 in static Dictionary<>.nlSemantic(forCNLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return closure #1 in implicit closure #1 in static Dictionary<>.nlSemantic(forCNLabel:)(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t OUTLINED_FUNCTION_1_29()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OUTLINED_FUNCTION_4_24()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_8_16(unint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1);
}

uint64_t OUTLINED_FUNCTION_10_19()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OUTLINED_FUNCTION_13_25()
{
  return specialized Array._endMutation()();
}

uint64_t OUTLINED_FUNCTION_16_13()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_18_14()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

BOOL specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))ModifyContactAttributeSlots.rawValue.getter);
}

{
  specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))GetContactAttributeSlots.rawValue.getter);
}

{
  specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))UsoIdentifierNamespace.rawValue.getter);
}

{
  specialized == infix<A>(_:_:)(a1, a2, ContactNLv3Intent.NLContactAttributesValue.rawValue.getter);
}

{
  specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))ContactNLv3Intent.NLContactReferenceValue.rawValue.getter);
}

{
  specialized == infix<A>(_:_:)(a1, a2, ContactNLv3Intent.NLContactVerbValue.rawValue.getter);
}

{
  specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))GetContactSlots.rawValue.getter);
}

{
  specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))ContactNLIntent.NLContactTypeValue.rawValue.getter);
}

{
  specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))ContactsAgeInfo.CodingKeys.rawValue.getter);
}

{
  specialized == infix<A>(_:_:)(a1, a2, (uint64_t (*)(void))ContactsLabelCATsModern.ContactsLabelDialogIDs.rawValue.getter);
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  char v3;

  if (qword_21FEDBEC8[a1] == qword_21FEDBEC8[a2] && qword_21FEDBEF0[a1] == qword_21FEDBEF0[a2])
    v3 = 1;
  else
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

{
  char v3;

  if (*(_QWORD *)&aAddress_4[8 * a1] == *(_QWORD *)&aAddress_4[8 * a2] && qword_21FEDBF60[a1] == qword_21FEDBF60[a2])
    v3 = 1;
  else
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

void specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a3();
  v6 = v5;
  if (v4 != a3() || v6 != v7)
    OUTLINED_FUNCTION_3_19();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_24_19();
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = a3();
  v7 = v6;
  if (v5 != ((uint64_t (*)(uint64_t))a3)(a2) || v7 != v8)
    OUTLINED_FUNCTION_3_19();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_22_6();
}

void specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x656C706F6570;
  else
    v3 = 0x746361746E6F63;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x656C706F6570;
  else
    v5 = 0x746361746E6F63;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE700000000000000;
  if (v3 != v5 || v4 != v6)
    OUTLINED_FUNCTION_3_19();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_22_6();
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x5373736572646461;
  else
    v3 = 0x6C6562616CLL;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xED0000676E697274;
  if ((a2 & 1) != 0)
    v5 = 0x5373736572646461;
  else
    v5 = 0x6C6562616CLL;
  if ((a2 & 1) != 0)
    v6 = 0xED0000676E697274;
  else
    v6 = 0xE500000000000000;
  if (v3 != v5 || v4 != v6)
    OUTLINED_FUNCTION_3_19();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_22_6();
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x4873736572646461;
  else
    v3 = 0x4C73736572646461;
  if (v2)
    v4 = 0xEC0000006C656261;
  else
    v4 = 0xED0000656C646E61;
  if ((a2 & 1) != 0)
    v5 = 0x4873736572646461;
  else
    v5 = 0x4C73736572646461;
  if ((a2 & 1) != 0)
    v6 = 0xED0000656C646E61;
  else
    v6 = 0xEC0000006C656261;
  if (v3 != v5 || v4 != v6)
    OUTLINED_FUNCTION_3_19();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_22_6();
}

{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000015;
  else
    v3 = 0x7961646874726962;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0x800000021FEDFAE0;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000015;
  else
    v5 = 0x7961646874726962;
  if ((a2 & 1) != 0)
    v6 = 0x800000021FEDFAE0;
  else
    v6 = 0xE800000000000000;
  if (v3 != v5 || v4 != v6)
    OUTLINED_FUNCTION_3_19();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_22_6();
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6E6148656E6F6870;
  else
    v3 = 0x62614C656E6F6870;
  if (v2)
    v4 = 0xEA00000000006C65;
  else
    v4 = 0xEB00000000656C64;
  if ((a2 & 1) != 0)
    v5 = 0x6E6148656E6F6870;
  else
    v5 = 0x62614C656E6F6870;
  if ((a2 & 1) != 0)
    v6 = 0xEB00000000656C64;
  else
    v6 = 0xEA00000000006C65;
  if (v3 != v5 || v4 != v6)
    OUTLINED_FUNCTION_3_19();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_22_6();
}

{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6E61486C69616D65;
  else
    v3 = 0x62614C6C69616D65;
  if (v2)
    v4 = 0xEA00000000006C65;
  else
    v4 = 0xEB00000000656C64;
  if ((a2 & 1) != 0)
    v5 = 0x6E61486C69616D65;
  else
    v5 = 0x62614C6C69616D65;
  if ((a2 & 1) != 0)
    v6 = 0xEB00000000656C64;
  else
    v6 = 0xEA00000000006C65;
  if (v3 != v5 || v4 != v6)
    OUTLINED_FUNCTION_3_19();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_22_6();
}

BOOL specialized == infix<A>(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(a1, a2, (void (*)(uint64_t))MEMORY[0x24BEA0C60], &lazy protocol witness table cache variable for type UsoEntity_common_Quantifier.DefinedValues and conformance UsoEntity_common_Quantifier.DefinedValues);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (void (*)(uint64_t))MEMORY[0x24BEA0478], &lazy protocol witness table cache variable for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues);
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), _QWORD *a4)
{
  char v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  a3(0);
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(a4, a3);
  OUTLINED_FUNCTION_81_3();
  OUTLINED_FUNCTION_81_3();
  if (v11 == v9 && v12 == v10)
    v7 = 1;
  else
    v7 = OUTLINED_FUNCTION_3_19();
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_5();
  return v7 & 1;
}

uint64_t ContactNLv3Intent.init(intent:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;

  OUTLINED_FUNCTION_77_7();
  v1 = v0;
  v3 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OntologyNode>);
  v4 = OUTLINED_FUNCTION_13_3();
  *(_OWORD *)(v4 + 16) = xmmword_21FEDB100;
  if (one-time initialization token for personNode != -1)
    swift_once();
  v5 = static ContactNLv3Intent.personNode;
  v6 = type metadata accessor for NonTerminalOntologyNode();
  v7 = MEMORY[0x24BE9EB08];
  *(_QWORD *)(v4 + 56) = v6;
  *(_QWORD *)(v4 + 64) = v7;
  *(_QWORD *)(v4 + 32) = v5;
  v8 = one-time initialization token for contactId;
  swift_retain();
  if (v8 != -1)
    swift_once();
  v9 = static ContactNLv3Intent.contactId;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalOntologyNode<String>);
  *(_QWORD *)(v4 + 96) = v10;
  lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](&lazy protocol witness table cache variable for type TerminalOntologyNode<String> and conformance TerminalOntologyNode<A>, &demangling cache variable for type metadata for TerminalOntologyNode<String>);
  v12 = v11;
  *(_QWORD *)(v4 + 104) = v11;
  *(_QWORD *)(v4 + 72) = v9;
  v13 = one-time initialization token for contactType;
  OUTLINED_FUNCTION_55_3();
  if (v13 != -1)
    swift_once();
  v14 = static ContactNLv3Intent.contactType;
  *(_QWORD *)(v4 + 136) = v10;
  *(_QWORD *)(v4 + 144) = v12;
  *(_QWORD *)(v4 + 112) = v14;
  v15 = one-time initialization token for contactReference;
  swift_retain();
  if (v15 != -1)
    swift_once();
  v16 = static ContactNLv3Intent.contactReference;
  *(_QWORD *)(v4 + 176) = OUTLINED_FUNCTION_43_10();
  OUTLINED_FUNCTION_42_5(&lazy protocol witness table cache variable for type TerminalOntologyNode<ContactNLv3Intent.NLContactReferenceValue> and conformance TerminalOntologyNode<A>);
  *(_QWORD *)(v4 + 184) = v17;
  *(_QWORD *)(v4 + 152) = v16;
  v18 = one-time initialization token for contactAttributes;
  OUTLINED_FUNCTION_55_3();
  if (v18 != -1)
    swift_once();
  v19 = static ContactNLv3Intent.contactAttributes;
  *(_QWORD *)(v4 + 216) = OUTLINED_FUNCTION_43_10();
  OUTLINED_FUNCTION_42_5(&lazy protocol witness table cache variable for type TerminalOntologyNode<ContactNLv3Intent.NLContactAttributesValue> and conformance TerminalOntologyNode<A>);
  *(_QWORD *)(v4 + 224) = v20;
  *(_QWORD *)(v4 + 192) = v19;
  v21 = one-time initialization token for contactVerb;
  OUTLINED_FUNCTION_55_3();
  if (v21 != -1)
    swift_once();
  v22 = static ContactNLv3Intent.contactVerb;
  *(_QWORD *)(v4 + 256) = OUTLINED_FUNCTION_43_10();
  OUTLINED_FUNCTION_42_5(&lazy protocol witness table cache variable for type TerminalOntologyNode<ContactNLv3Intent.NLContactVerbValue> and conformance TerminalOntologyNode<A>);
  *(_QWORD *)(v4 + 264) = v23;
  *(_QWORD *)(v4 + 232) = v22;
  v24 = one-time initialization token for contactNoun;
  OUTLINED_FUNCTION_55_3();
  if (v24 != -1)
    swift_once();
  v25 = static ContactNLv3Intent.contactNoun;
  *(_QWORD *)(v4 + 296) = OUTLINED_FUNCTION_43_10();
  OUTLINED_FUNCTION_42_5(&lazy protocol witness table cache variable for type TerminalOntologyNode<ContactNLv3Intent.NLContactNounValue> and conformance TerminalOntologyNode<A>);
  *(_QWORD *)(v4 + 304) = v26;
  *(_QWORD *)(v4 + 272) = v25;
  v27 = one-time initialization token for contactConfirmation;
  OUTLINED_FUNCTION_55_3();
  if (v27 != -1)
    swift_once();
  v28 = static ContactNLv3Intent.contactConfirmation;
  *(_QWORD *)(v4 + 336) = OUTLINED_FUNCTION_43_10();
  OUTLINED_FUNCTION_42_5(&lazy protocol witness table cache variable for type TerminalOntologyNode<ContactNLv3Intent.NLContactConfirmationValue> and conformance TerminalOntologyNode<A>);
  *(_QWORD *)(v4 + 344) = v29;
  *(_QWORD *)(v4 + 312) = v28;
  v30 = one-time initialization token for contactAgeDate;
  OUTLINED_FUNCTION_55_3();
  if (v30 != -1)
    swift_once();
  v31 = static ContactNLv3Intent.contactAgeDate;
  *(_QWORD *)(v4 + 376) = OUTLINED_FUNCTION_43_10();
  OUTLINED_FUNCTION_42_5(&lazy protocol witness table cache variable for type TerminalOntologyNode<TerminalElement.DateTimeValue> and conformance TerminalOntologyNode<A>);
  *(_QWORD *)(v4 + 384) = v32;
  *(_QWORD *)(v4 + 352) = v31;
  v33 = one-time initialization token for setNickName;
  OUTLINED_FUNCTION_55_3();
  if (v33 != -1)
    swift_once();
  v34 = static ContactNLv3Intent.setNickName;
  *(_QWORD *)(v4 + 416) = v10;
  *(_QWORD *)(v4 + 424) = v12;
  *(_QWORD *)(v4 + 392) = v34;
  v35 = one-time initialization token for setRelationship;
  swift_retain();
  if (v35 != -1)
    swift_once();
  v36 = static ContactNLv3Intent.setRelationship;
  *(_QWORD *)(v4 + 456) = v10;
  *(_QWORD *)(v4 + 464) = v12;
  *(_QWORD *)(v4 + 432) = v36;
  v37 = one-time initialization token for removeRelationship;
  swift_retain();
  if (v37 != -1)
    swift_once();
  v38 = static ContactNLv3Intent.removeRelationship;
  *(_QWORD *)(v4 + 496) = v10;
  *(_QWORD *)(v4 + 504) = v12;
  *(_QWORD *)(v4 + 472) = v38;
  type metadata accessor for DomainOntologyNode();
  OUTLINED_FUNCTION_32_0();
  OUTLINED_FUNCTION_55_3();
  *v3 = DomainOntologyNode.init(name:childNodes:isInEventTree:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v39 = OUTLINED_FUNCTION_13_3();
  *(_OWORD *)(v39 + 16) = xmmword_21FED9640;
  *(_QWORD *)(v39 + 32) = 0x656D616E20796DLL;
  *(_QWORD *)(v39 + 40) = 0xE700000000000000;
  *(_QWORD *)(v39 + 48) = 0x6D616E206B63696ELL;
  *(_QWORD *)(v39 + 56) = 0xE900000000000065;
  *(_QWORD *)(v39 + 64) = 0x6D616E206C6C7566;
  *(_QWORD *)(v39 + 72) = 0xE900000000000065;
  *(_QWORD *)(v39 + 80) = 0x6D616E207473616CLL;
  *(_QWORD *)(v39 + 88) = 0xE900000000000065;
  *(_QWORD *)(v39 + 96) = 0x616E207473726966;
  *(_QWORD *)(v39 + 104) = 0xEA0000000000656DLL;
  *(_QWORD *)(v39 + 112) = 0x6E20656C6464696DLL;
  *(_QWORD *)(v39 + 120) = 0xEB00000000656D61;
  v40 = OUTLINED_FUNCTION_14_14();
  v41 = *(int *)(v40 + 24);
  strcpy((char *)(v39 + 128), "pronounce name");
  *(_BYTE *)(v39 + 143) = -18;
  *(uint64_t *)((char *)v3 + v41) = v39;
  v42 = (char *)v3 + *(int *)(v40 + 20);
  v43 = OUTLINED_FUNCTION_52_9();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v42, v1, v43);
}

uint64_t ContactNLv3Intent.person.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_32();
  v20 = v1;
  v21 = v2;
  v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NonTerminalIntentNode?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_55_0();
  v8 = v7 - v6;
  v9 = OUTLINED_FUNCTION_85_6();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_30_13();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v19 - v12;
  if (one-time initialization token for personNode != -1)
    swift_once();
  OUTLINED_FUNCTION_14_14();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  IntentNodeTraversable.intentNode(forOntologyNode:)();
  v14 = OUTLINED_FUNCTION_6_2(v8, 1, v9);
  if (v15)
  {
    OUTLINED_FUNCTION_80_6(v14, &demangling cache variable for type metadata for NonTerminalIntentNode?);
    v16 = 1;
  }
  else
  {
    OUTLINED_FUNCTION_96_2((uint64_t)v13, v8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 32));
    OUTLINED_FUNCTION_96_2(v0, (uint64_t)v13, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16));
    type metadata accessor for PersonOntologyNode();
    OUTLINED_FUNCTION_32_0();
    PersonOntologyNode.init(name:multicardinal:)();
    PersonIntentNode.init(intentNode:ontologyNode:)();
    OUTLINED_FUNCTION_35_1((uint64_t)v13, *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
    v16 = 0;
  }
  v17 = OUTLINED_FUNCTION_86_4();
  return __swift_storeEnumTagSinglePayload(v4, v16, 1, v17);
}

uint64_t ContactNLv3Constants.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_21FE7675C + 4 * byte_21FEDB130[*v0]))(0xD000000000000013, 0x800000021FEDFB60);
}

uint64_t sub_21FE7675C()
{
  return 0x6E69616D6F64;
}

uint64_t sub_21FE76770()
{
  return 0x746361746E6F63;
}

uint64_t sub_21FE76788()
{
  return 0x49746361746E6F63;
}

uint64_t sub_21FE767A4()
{
  return 0x54746361746E6F63;
}

unint64_t sub_21FE767C8()
{
  return 0xD000000000000010;
}

uint64_t sub_21FE768D8()
{
  return 0x694E6E6F73726570;
}

uint64_t sub_21FE768FC@<X0>(uint64_t a1@<X8>)
{
  return a1 + 2;
}

uint64_t sub_21FE7690C@<X0>(uint64_t a1@<X8>)
{
  return a1 + 3;
}

uint64_t sub_21FE7691C()
{
  return 0x56746361746E6F63;
}

uint64_t sub_21FE7693C()
{
  return 0x4E746361746E6F63;
}

uint64_t sub_21FE7695C()
{
  return 0x6E6F73726570;
}

void sub_21FE76970()
{
  OUTLINED_FUNCTION_99_4();
}

uint64_t sub_21FE76988()
{
  return 0x74616C6552746573;
}

void sub_21FE769AC()
{
  JUMPOUT(0x21FE769B8);
}

void ContactNLv3Intent.hasFreshVerb.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  os_log_type_t v21;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalIntentNode?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_17_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_55_0();
  v6 = v5 - v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TerminalElement.OriginalValue?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_37_2();
  if (one-time initialization token for contactVerb != -1)
    swift_once();
  OUTLINED_FUNCTION_14_14();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  IntentNodeTraversable.intentNode<A>(forOntologyNode:)();
  v8 = type metadata accessor for TerminalIntentNode();
  OUTLINED_FUNCTION_6_2(v1, 1, v8);
  if (v13)
  {
    v9 = &demangling cache variable for type metadata for TerminalIntentNode?;
    v10 = v1;
  }
  else
  {
    v11 = TerminalIntentNode.elements.getter();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v1, v8);
    specialized BidirectionalCollection.last.getter(v11, v6);
    OUTLINED_FUNCTION_5();
    v12 = type metadata accessor for TerminalElement();
    OUTLINED_FUNCTION_6_2(v6, 1, v12);
    if (v13)
    {
      v9 = &demangling cache variable for type metadata for TerminalElement?;
      v10 = v6;
    }
    else
    {
      TerminalElement.originalValue.getter();
      OUTLINED_FUNCTION_55_9();
      v14 = type metadata accessor for TerminalElement.OriginalValue();
      OUTLINED_FUNCTION_6_2(v0, 1, v14);
      if (!v15)
      {
        TerminalElement.OriginalValue.isFresh.getter();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v0, v14);
        if (one-time initialization token for siriContacts != -1)
          swift_once();
        v20 = type metadata accessor for Logger();
        __swift_project_value_buffer(v20, (uint64_t)static Logger.siriContacts);
        v17 = Logger.logObject.getter();
        v21 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v17, v21))
        {
          v19 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v19 = 67109120;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_21FE16000, v17, v21, "#hasFreshVerb isFresh: %{BOOL}d", v19, 8u);
          goto LABEL_16;
        }
        goto LABEL_17;
      }
      v9 = &demangling cache variable for type metadata for TerminalElement.OriginalValue?;
      v10 = v0;
    }
  }
  outlined destroy of FlowActivity?(v10, v9);
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.siriContacts);
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_21FE16000, v17, v18, "#hasFreshVerb no isFresh, return false", v19, 2u);
LABEL_16:
    MEMORY[0x2207D8768](v19, -1, -1);
  }
LABEL_17:

  OUTLINED_FUNCTION_31_9();
}

void ContactNLv3Intent.isModifyOtherContactNickname.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;

  OUTLINED_FUNCTION_14_14();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_8_10();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_30_13();
  MEMORY[0x24BDAC7A8](v2);
  v3 = ContactNLv3Intent.containsAttribute(_:)();
  OUTLINED_FUNCTION_35_6();
  if ((v3 & 1) == 0)
  {
    if (one-time initialization token for setNickName != -1)
      swift_once();
    lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
    OUTLINED_FUNCTION_97_2();
    IntentNodeTraversable.value<A>(forNode:)();
    if (!v6)
    {
      OUTLINED_FUNCTION_51_8();
      OUTLINED_FUNCTION_16_7();
      OUTLINED_FUNCTION_27_15();
      OUTLINED_FUNCTION_6_13();
      goto LABEL_11;
    }
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_51_8();
  OUTLINED_FUNCTION_16_7();
  if (one-time initialization token for contactVerb != -1)
    swift_once();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_97_2();
  IntentNodeTraversable.value<A>(forNode:)();
  specialized == infix<A>(_:_:)(44, 4, ContactNLv3Intent.NLContactVerbValue.rawValue.getter);
  v5 = v4;
  OUTLINED_FUNCTION_27_15();
  OUTLINED_FUNCTION_6_13();
  if ((v5 & 1) != 0)
    ContactNLv3Intent.isMeCardRequest.getter();
LABEL_11:
  OUTLINED_FUNCTION_13_26();
  OUTLINED_FUNCTION_31_9();
}

uint64_t ContactNLv3Intent.hasAddressAttribute.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  char v12;

  v0 = static ContactNLIntent.ContactIntentAddressAttributes.allCases.getter();
  v1 = v0[2];
  if (v1)
  {
    swift_bridgeObjectRetain();
    v2 = 0;
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    do
    {
      v4 = *((char *)v0 + v2 + 32);
      v5 = *(_QWORD *)&aAddress_5[8 * v4];
      v6 = *(_QWORD *)&aAnyAddrgymAddr_0[8 * v4 + 40];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_91_5(0, v3[2] + 1);
        v3 = v10;
      }
      v8 = v3[2];
      v7 = v3[3];
      if (v8 >= v7 >> 1)
      {
        OUTLINED_FUNCTION_91_5(v7 > 1, v8 + 1);
        v3 = v11;
      }
      ++v2;
      v3[2] = v8 + 1;
      v9 = &v3[2 * v8];
      v9[4] = v5;
      v9[5] = v6;
    }
    while (v1 != v2);
    OUTLINED_FUNCTION_5_0();
  }
  else
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  OUTLINED_FUNCTION_5_0();
  v12 = ContactNLv3Intent.containsAttribute(_:)(v3);
  swift_bridgeObjectRelease();
  return v12 & 1;
}

void ContactNLv3Intent.hasAgeAttribute.getter()
{
  OUTLINED_FUNCTION_14_22(52);
  OUTLINED_FUNCTION_8_8();
}

void ContactNLv3Intent.hasEmailAttribute.getter()
{
  ContactNLv3Intent.hasEmailAttribute.getter(&one-time initialization token for emailAttributes, (_QWORD **)&static ContactNLv3Intent.emailAttributes);
}

void ContactNLv3Intent.hasPhoneAttribute.getter()
{
  ContactNLv3Intent.hasEmailAttribute.getter(&one-time initialization token for phoneAttributes, (_QWORD **)&static ContactNLv3Intent.phoneAttributes);
}

void ContactNLv3Intent.hasEmailAttribute.getter(_QWORD *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  char v7;

  OUTLINED_FUNCTION_14_14();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_37_2();
  if (*a1 != -1)
  {
    OUTLINED_FUNCTION_64_7();
    swift_once();
  }
  v6 = *a2;
  v7 = ContactNLv3Intent.containsAttribute(_:)(v6);
  OUTLINED_FUNCTION_17_12(v2);
  if ((v7 & 1) == 0)
    ContactNLv3Intent.containsContactType(_:)((Swift::OpaquePointer)v6);
  OUTLINED_FUNCTION_13_26();
  OUTLINED_FUNCTION_31_9();
}

void ContactNLv3Intent.hasCompanyAttribute.getter()
{
  OUTLINED_FUNCTION_14_22(50);
  OUTLINED_FUNCTION_8_8();
}

void ContactNLv3Intent.hasBirthdayAttribute.getter()
{
  OUTLINED_FUNCTION_14_22(51);
  OUTLINED_FUNCTION_8_8();
}

void ContactNLv3Intent.hasAnniversaryAttribute.getter()
{
  OUTLINED_FUNCTION_14_22(53);
  OUTLINED_FUNCTION_8_8();
}

void ContactNLv3Intent.isShowContactCard.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  unsigned __int8 v4;
  char v5;

  OUTLINED_FUNCTION_14_14();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_37_2();
  if (one-time initialization token for contactNoun != -1)
    swift_once();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  IntentNodeTraversable.value<A>(forNode:)();
  if (v5 == 2)
  {
    OUTLINED_FUNCTION_17_12(v0);
  }
  else
  {
    specialized == infix<A>(_:_:)(v5 & 1, 0);
    v3 = v2;
    OUTLINED_FUNCTION_17_12(v0);
    if ((v3 & 1) != 0)
    {
      if (one-time initialization token for contactVerb != -1)
        swift_once();
      IntentNodeTraversable.value<A>(forNode:)();
      if (v4 != 17)
        specialized == infix<A>(_:_:)(v4, 0, ContactNLv3Intent.NLContactVerbValue.rawValue.getter);
    }
  }
  OUTLINED_FUNCTION_13_26();
  OUTLINED_FUNCTION_31_9();
}

void ContactNLv3Intent.isMeCardRequest.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  void (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t, uint64_t);
  _QWORD v20[5];

  OUTLINED_FUNCTION_32();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NonTerminalIntentNode?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_55_0();
  v5 = v4 - v3;
  v6 = OUTLINED_FUNCTION_85_6();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  OUTLINED_FUNCTION_30_13();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_38_9();
  if (one-time initialization token for personNode != -1)
    swift_once();
  OUTLINED_FUNCTION_14_14();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  IntentNodeTraversable.intentNode(forOntologyNode:)();
  OUTLINED_FUNCTION_6_2(v5, 1, v6);
  if (v17)
  {
    outlined destroy of FlowActivity?(v5, &demangling cache variable for type metadata for NonTerminalIntentNode?);
    if (one-time initialization token for contactReference != -1)
      swift_once();
    IntentNodeTraversable.value<A>(forNode:)();
    if (LOBYTE(v20[0]) != 38)
      specialized == infix<A>(_:_:)(LOBYTE(v20[0]), 35, (uint64_t (*)(void))ContactNLv3Intent.NLContactReferenceValue.rawValue.getter);
    goto LABEL_19;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v0, v5, v6);
  v9 = *(_QWORD *)(NonTerminalIntentNode.childNodes.getter() + 16);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v1, v0, v6);
  if (v9 != 1)
  {
    v18 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v18(v1, v6);
    v18(v0, v6);
LABEL_19:
    OUTLINED_FUNCTION_7();
    return;
  }
  v10 = NonTerminalIntentNode.childNodes.getter();
  if (*(_QWORD *)(v10 + 16))
  {
    outlined init with copy of DeviceState(v10 + 32, (uint64_t)v20);
    OUTLINED_FUNCTION_5();
    __swift_project_boxed_opaque_existential_1(v20, v20[3]);
    v11 = dispatch thunk of IntentNode.ontologyNodeName.getter();
    v13 = v12;
    type metadata accessor for PersonOntologyNode();
    static PersonOntologyNode.personSelfReferenceNode.getter();
    v14 = TerminalOntologyNode.name.getter();
    v16 = v15;
    swift_release();
    v17 = v11 == v14 && v13 == v16;
    if (!v17)
      OUTLINED_FUNCTION_11_18();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v19 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v19(v1, v6);
    v19(v0, v6);
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v20);
    goto LABEL_19;
  }
  __break(1u);
}

void ContactNLv3Intent.hasModifyVerb.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  char v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  char v10;

  OUTLINED_FUNCTION_32();
  OUTLINED_FUNCTION_14_14();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_8_10();
  v2 = MEMORY[0x24BDAC7A8](v1);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_38_9();
  if (one-time initialization token for contactVerb != -1)
    swift_once();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_71_7();
  IntentNodeTraversable.value<A>(forNode:)();
  OUTLINED_FUNCTION_56_9();
  if (v10 != 17)
  {
    OUTLINED_FUNCTION_71_7();
    OUTLINED_FUNCTION_94_4();
    if (v9 == 17)
    {
      OUTLINED_FUNCTION_4_14();
    }
    else
    {
      specialized == infix<A>(_:_:)(v9, 4, ContactNLv3Intent.NLContactVerbValue.rawValue.getter);
      v4 = v3;
      OUTLINED_FUNCTION_4_14();
      if ((v4 & 1) != 0)
      {
        OUTLINED_FUNCTION_46_8();
        OUTLINED_FUNCTION_6_13();
        goto LABEL_14;
      }
    }
    OUTLINED_FUNCTION_71_7();
    IntentNodeTraversable.value<A>(forNode:)();
    if (v8 == 17)
    {
      OUTLINED_FUNCTION_46_8();
      OUTLINED_FUNCTION_6_13();
      goto LABEL_12;
    }
    specialized == infix<A>(_:_:)(v8, 15, ContactNLv3Intent.NLContactVerbValue.rawValue.getter);
    v6 = v5;
    OUTLINED_FUNCTION_46_8();
    OUTLINED_FUNCTION_6_13();
    if ((v6 & 1) == 0)
    {
LABEL_12:
      OUTLINED_FUNCTION_68_11();
      if (v7 != 17)
        specialized == infix<A>(_:_:)(v7, 13, ContactNLv3Intent.NLContactVerbValue.rawValue.getter);
    }
LABEL_14:
    OUTLINED_FUNCTION_13_26();
    OUTLINED_FUNCTION_25_21();
    goto LABEL_15;
  }
  OUTLINED_FUNCTION_25_21();
LABEL_15:
  OUTLINED_FUNCTION_7();
}

void ContactNLv3Intent.isPronounceName.getter()
{
  ContactNLv3Intent.isPronounceName.getter();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  char v5;

  OUTLINED_FUNCTION_77_7();
  v2 = v1;
  OUTLINED_FUNCTION_14_14();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_37_2();
  if (one-time initialization token for contactVerb != -1)
    swift_once();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  IntentNodeTraversable.value<A>(forNode:)();
  OUTLINED_FUNCTION_17_12(v0);
  if (v5 != 17)
  {
    OUTLINED_FUNCTION_68_11();
    if (v4 != 17)
      specialized == infix<A>(_:_:)(v4, v2, ContactNLv3Intent.NLContactVerbValue.rawValue.getter);
  }
  OUTLINED_FUNCTION_13_26();
  OUTLINED_FUNCTION_18_15();
}

void ContactNLv3Intent.isLearnPronunciation.getter()
{
  ContactNLv3Intent.isPronounceName.getter();
}

uint64_t ContactNLv3Intent.NLContactVerbValue.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_21FE77870 + 4 * byte_21FEDB148[*v0]))(0xD000000000000010, 0x800000021FEDFCD0);
}

uint64_t sub_21FE77870()
{
  return 1684957542;
}

uint64_t sub_21FE77880()
{
  return 7301239;
}

uint64_t sub_21FE77890()
{
  return 0x657461657263;
}

uint64_t sub_21FE778B4()
{
  return 0x796669646F6DLL;
}

uint64_t sub_21FE778C8()
{
  return 0x646E696620666D66;
}

uint64_t sub_21FE778E0()
{
  return 0x69746F6E20666D66;
}

uint64_t sub_21FE77904()
{
  return 0x7369206572656877;
}

uint64_t sub_21FE7791C()
{
  return 1701079400;
}

uint64_t sub_21FE7792C()
{
  return 0x656469686E75;
}

uint64_t sub_21FE77940()
{
  return 1684104562;
}

void sub_21FE77950()
{
  OUTLINED_FUNCTION_12_2();
}

uint64_t sub_21FE77970()
{
  return 0x636E756F6E6F7270;
}

uint64_t sub_21FE77994()
{
  return 0x6E20746567726F66;
}

uint64_t sub_21FE779B8()
{
  return 0x72696620646E6966;
}

uint64_t ContactNLv3Intent.requestedContactAttribute.getter()
{
  char v0;
  char v2;
  char v3;

  ContactNLv3Intent.hasFullNameAttribute.getter();
  if ((v0 & 1) != 0)
    return 9;
  if ((OUTLINED_FUNCTION_14_22(41) & 1) != 0)
    return 7;
  if ((ContactNLv3Intent.containsAttribute(_:)() & 1) != 0)
    return 6;
  if ((ContactNLv3Intent.containsAttribute(_:)() & 1) != 0)
    return 8;
  if ((ContactNLv3Intent.hasAddressAttribute.getter() & 1) != 0)
    return 3;
  if ((ContactNLv3Intent.containsAttribute(_:)() & 1) != 0)
    return 4;
  if ((ContactNLv3Intent.containsAttribute(_:)() & 1) != 0)
    return 5;
  ContactNLv3Intent.hasEmailAttribute.getter();
  if ((v2 & 1) != 0)
    return 1;
  ContactNLv3Intent.hasPhoneAttribute.getter();
  if ((v3 & 1) != 0)
    return 2;
  else
    return 0;
}

uint64_t ContactNLv3Intent.requestedContactAttributeLabel.getter()
{
  char v1;
  BOOL v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v17;
  uint64_t v18;

  if (one-time initialization token for contactType != -1)
LABEL_40:
    swift_once();
  OUTLINED_FUNCTION_14_14();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  IntentNodeTraversable.value<A>(forNode:)();
  if (v18)
  {
    if (v17 != 0x656E6F6870 || v18 != 0xE500000000000000)
    {
      OUTLINED_FUNCTION_64_7();
      v1 = OUTLINED_FUNCTION_11_18();
      v2 = v17 == 0x6C69616D65 && v18 == 0xE500000000000000;
      v3 = v2;
      if ((v1 & 1) == 0 && !v3)
      {
        OUTLINED_FUNCTION_64_7();
        if ((OUTLINED_FUNCTION_11_18() & 1) == 0)
          return OUTLINED_FUNCTION_64_7();
      }
    }
    OUTLINED_FUNCTION_167();
  }
  if (one-time initialization token for contactAttributes != -1)
    swift_once();
  v4 = IntentNodeTraversable.values<A>(forNode:)();
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    if (one-time initialization token for nonHandleLabelAttributes != -1)
      swift_once();
    v6 = 0;
    while (1)
    {
      if (v6 >= *(_QWORD *)(v4 + 16))
      {
        __break(1u);
        goto LABEL_40;
      }
      v7 = static ContactNLv3Intent.nonHandleLabelAttributes;
      v8 = *(_QWORD *)(static ContactNLv3Intent.nonHandleLabelAttributes + 16);
      if (!v8)
        break;
      ++v6;
      swift_bridgeObjectRetain_n();
      v9 = 0;
      while (1)
      {
        LOBYTE(v17) = *(_BYTE *)(v7 + v9 + 32);
        v10 = ContactNLv3Intent.NLContactAttributesValue.rawValue.getter();
        v12 = v11;
        if (v10 == ContactNLv3Intent.NLContactAttributesValue.rawValue.getter() && v12 == v13)
          break;
        OUTLINED_FUNCTION_64_7();
        v15 = OUTLINED_FUNCTION_7_22();
        OUTLINED_FUNCTION_167();
        OUTLINED_FUNCTION_5();
        if ((v15 & 1) != 0)
          goto LABEL_34;
        if (v8 == ++v9)
        {
          OUTLINED_FUNCTION_5_0();
          OUTLINED_FUNCTION_60_10();
          goto LABEL_36;
        }
      }
      swift_bridgeObjectRelease_n();
LABEL_34:
      OUTLINED_FUNCTION_60_10();
      if (v6 == v5)
        goto LABEL_35;
    }
    OUTLINED_FUNCTION_5_0();
LABEL_36:
    ContactNLv3Intent.NLContactAttributesValue.rawValue.getter();
  }
  else
  {
LABEL_35:
    OUTLINED_FUNCTION_5_0();
  }
  return OUTLINED_FUNCTION_64_7();
}

uint64_t ContactNLv3Intent.requestedAgeDate.getter()
{
  return static DateTimeUtil.getRequestedAgeDateTime(from:)();
}

void specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a3[2];
  if (!v3 || (a3[4] == a1 ? (v7 = a3[5] == a2) : (v7 = 0), v7 || (OUTLINED_FUNCTION_11_18() & 1) != 0 || v3 == 1))
  {
LABEL_9:
    OUTLINED_FUNCTION_31_9();
  }
  else
  {
    v8 = a3 + 7;
    v9 = 1;
    while (1)
    {
      v10 = v9 + 1;
      if (__OFADD__(v9, 1))
        break;
      if ((*(v8 - 1) != a1 || *v8 != a2) && (OUTLINED_FUNCTION_11_18() & 1) == 0)
      {
        v8 += 2;
        ++v9;
        if (v10 != v3)
          continue;
      }
      goto LABEL_9;
    }
    __break(1u);
  }
}

Swift::Int_optional __swiftcall ContactNLv3Intent.arrayIndexForReference(arrayLength:)(Swift::Int arrayLength)
{
  Swift::Int v2;
  Swift::Bool v3;
  unsigned __int8 v4;
  Swift::Int_optional result;

  if (one-time initialization token for contactReference != -1)
    swift_once();
  OUTLINED_FUNCTION_14_14();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_59_10();
  v2 = v4;
  v3 = 0;
  switch(v4)
  {
    case 0u:
      goto LABEL_40;
    case 1u:
      v3 = 0;
      v2 = 1;
      goto LABEL_40;
    case 2u:
      v3 = 0;
      v2 = 2;
      goto LABEL_40;
    case 3u:
      v3 = 0;
      v2 = 3;
      goto LABEL_40;
    case 4u:
      v3 = 0;
      v2 = 4;
      goto LABEL_40;
    case 5u:
      v3 = 0;
      v2 = 5;
      goto LABEL_40;
    case 6u:
      v3 = 0;
      v2 = 6;
      goto LABEL_40;
    case 7u:
      v3 = 0;
      v2 = 7;
      goto LABEL_40;
    case 8u:
      v3 = 0;
      v2 = 8;
      goto LABEL_40;
    case 9u:
      v3 = 0;
      v2 = 9;
      goto LABEL_40;
    case 0xAu:
      v3 = 0;
      v2 = 10;
      goto LABEL_40;
    case 0xBu:
      v3 = 0;
      v2 = 11;
      goto LABEL_40;
    case 0xCu:
      v3 = 0;
      v2 = 12;
      goto LABEL_40;
    case 0xDu:
      v3 = 0;
      v2 = 13;
      goto LABEL_40;
    case 0xEu:
      v3 = 0;
      v2 = 14;
      goto LABEL_40;
    case 0xFu:
      v3 = 0;
      v2 = 15;
      goto LABEL_40;
    case 0x10u:
      v3 = 0;
      v2 = 16;
      goto LABEL_40;
    case 0x11u:
      v3 = 0;
      v2 = 17;
      goto LABEL_40;
    case 0x12u:
      v3 = 0;
      v2 = 18;
      goto LABEL_40;
    case 0x13u:
      v3 = 0;
      v2 = 19;
      goto LABEL_40;
    case 0x14u:
      v3 = 0;
      v2 = 20;
      goto LABEL_40;
    case 0x15u:
      v3 = 0;
      v2 = 21;
      goto LABEL_40;
    case 0x16u:
      v3 = 0;
      v2 = 22;
      goto LABEL_40;
    case 0x17u:
      v3 = 0;
      v2 = 23;
      goto LABEL_40;
    case 0x18u:
      v3 = 0;
      v2 = 24;
      goto LABEL_40;
    case 0x19u:
      v2 = arrayLength - 1;
      if (!__OFSUB__(arrayLength, 1))
        goto LABEL_36;
      __break(1u);
      goto LABEL_32;
    case 0x1Du:
LABEL_32:
      v2 = arrayLength - 2;
      if (!__OFSUB__(arrayLength, 2))
        goto LABEL_36;
      __break(1u);
LABEL_35:
      v2 = arrayLength - 3;
      if (__OFSUB__(arrayLength, 3))
      {
        __break(1u);
        JUMPOUT(0x21FE78010);
      }
LABEL_36:
      v3 = 0;
LABEL_40:
      result.value = v2;
      result.is_nil = v3;
      return result;
    case 0x1Eu:
      goto LABEL_35;
    default:
      v2 = 0;
      v3 = 1;
      goto LABEL_40;
  }
}

Swift::String __swiftcall ContactNLv3Constants.boundValue(_:)(Swift::String a1)
{
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  void *v5;
  Swift::String result;

  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  ContactNLv3Constants.rawValue.getter();
  v1 = String.firstLetterCapitalized()();
  OUTLINED_FUNCTION_5();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x2E65756C61562ELL;
  v2._object = (void *)0xE700000000000000;
  String.append(_:)(v2);
  v3 = String.uppercased()();
  String.append(_:)(v3);
  OUTLINED_FUNCTION_5_0();
  v4 = 0xD000000000000012;
  v5 = (void *)0x800000021FEE1360;
  result._object = v5;
  result._countAndFlagsBits = v4;
  return result;
}

SiriContactsIntents::ContactNLv3Constants_optional __swiftcall ContactNLv3Constants.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  uint64_t v2;
  char v3;
  char v4;
  SiriContactsIntents::ContactNLv3Constants_optional result;

  OUTLINED_FUNCTION_69_10();
  OUTLINED_FUNCTION_95_3();
  OUTLINED_FUNCTION_49_12();
  v3 = 0;
  v4 = 6;
  switch(v2)
  {
    case 0:
      goto LABEL_7;
    case 1:
      v3 = 1;
      goto LABEL_7;
    case 2:
      v3 = 2;
      goto LABEL_7;
    case 3:
      v3 = 3;
      goto LABEL_7;
    case 4:
      v3 = 4;
      goto LABEL_7;
    case 5:
      v3 = 5;
LABEL_7:
      v4 = v3;
      break;
    case 6:
      break;
    case 7:
      v4 = 7;
      break;
    case 8:
      v4 = 8;
      break;
    case 9:
      v4 = 9;
      break;
    case 10:
      v4 = 10;
      break;
    case 11:
      v4 = 11;
      break;
    case 12:
      v4 = 12;
      break;
    case 13:
      v4 = 13;
      break;
    case 14:
      v4 = 14;
      break;
    case 15:
      v4 = 15;
      break;
    case 16:
      v4 = 16;
      break;
    case 17:
      v4 = 17;
      break;
    case 18:
      v4 = 18;
      break;
    case 19:
      v4 = 19;
      break;
    case 20:
      v4 = 20;
      break;
    case 21:
      v4 = 21;
      break;
    case 22:
      v4 = 22;
      break;
    case 23:
      v4 = 23;
      break;
    default:
      v4 = 24;
      break;
  }
  *v1 = v4;
  OUTLINED_FUNCTION_22_6();
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContactNLv3Constants(unsigned __int8 *a1, unsigned __int8 *a2)
{
  char v2;

  specialized == infix<A>(_:_:)(*a1, *a2, ContactNLv3Constants.rawValue.getter);
  return v2 & 1;
}

void protocol witness for Hashable.hashValue.getter in conformance ContactNLv3Constants()
{
  unsigned __int8 *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactNLv3Constants(uint64_t a1)
{
  unsigned __int8 *v1;

  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ContactNLv3Constants(uint64_t a1)
{
  unsigned __int8 *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriContactsIntents::ContactNLv3Constants_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactNLv3Constants(Swift::String *a1)
{
  return ContactNLv3Constants.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ContactNLv3Constants(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = ContactNLv3Constants.rawValue.getter();
  a1[1] = v2;
  OUTLINED_FUNCTION_31_0();
}

uint64_t one-time initialization function for personNode()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<OntologyNode>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_21FED8CB0;
  v1 = type metadata accessor for PersonOntologyNode();
  swift_allocObject();
  v2 = PersonOntologyNode.init(name:multicardinal:)();
  v3 = MEMORY[0x24BE9EB08];
  *(_QWORD *)(v0 + 56) = v1;
  *(_QWORD *)(v0 + 64) = v3;
  *(_QWORD *)(v0 + 32) = v2;
  type metadata accessor for NonTerminalOntologyNode();
  swift_allocObject();
  result = NonTerminalOntologyNode.init(name:multicardinal:childNodes:)();
  static ContactNLv3Intent.personNode = result;
  return result;
}

void one-time initialization function for contactId(uint64_t a1)
{
  one-time initialization function for contactId(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 0x49746361746E6F63, 0xE900000000000064, &static ContactNLv3Intent.contactId);
}

void one-time initialization function for contactType(uint64_t a1)
{
  OUTLINED_FUNCTION_23_17(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 0x54746361746E6F63, 6647929, &static ContactNLv3Intent.contactType);
}

void one-time initialization function for contactReference(uint64_t a1)
{
  OUTLINED_FUNCTION_21_16(a1, &demangling cache variable for type metadata for TerminalOntologyNode<ContactNLv3Intent.NLContactReferenceValue>, 16, 0x800000021FEDFB80, &static ContactNLv3Intent.contactReference);
}

void one-time initialization function for contactAttributes(uint64_t a1)
{
  OUTLINED_FUNCTION_21_16(a1, &demangling cache variable for type metadata for TerminalOntologyNode<ContactNLv3Intent.NLContactAttributesValue>, 17, 0x800000021FEDF820, &static ContactNLv3Intent.contactAttributes);
}

void one-time initialization function for contactVerb(uint64_t a1)
{
  OUTLINED_FUNCTION_23_17(a1, &demangling cache variable for type metadata for TerminalOntologyNode<ContactNLv3Intent.NLContactVerbValue>, 0x56746361746E6F63, 6451813, &static ContactNLv3Intent.contactVerb);
}

void one-time initialization function for contactNoun(uint64_t a1)
{
  OUTLINED_FUNCTION_23_17(a1, &demangling cache variable for type metadata for TerminalOntologyNode<ContactNLv3Intent.NLContactNounValue>, 0x4E746361746E6F63, 7239023, &static ContactNLv3Intent.contactNoun);
}

void one-time initialization function for contactConfirmation(uint64_t a1)
{
  OUTLINED_FUNCTION_21_16(a1, &demangling cache variable for type metadata for TerminalOntologyNode<ContactNLv3Intent.NLContactConfirmationValue>, 19, 0x800000021FEDFB60, &static ContactNLv3Intent.contactConfirmation);
}

void one-time initialization function for contactAgeDate(uint64_t a1)
{
  one-time initialization function for contactId(a1, &demangling cache variable for type metadata for TerminalOntologyNode<TerminalElement.DateTimeValue>, 0x41746361746E6F63, 0xEE00657461446567, &static ContactNLv3Intent.contactAgeDate);
}

void one-time initialization function for setNickName(uint64_t a1)
{
  OUTLINED_FUNCTION_23_17(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 0x4E6B63694E746573, 6647137, &static ContactNLv3Intent.setNickName);
}

void one-time initialization function for setRelationship(uint64_t a1)
{
  one-time initialization function for contactId(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 0x74616C6552746573, 0xEF706968736E6F69, &static ContactNLv3Intent.setRelationship);
}

void one-time initialization function for removeRelationship(uint64_t a1)
{
  OUTLINED_FUNCTION_21_16(a1, &demangling cache variable for type metadata for TerminalOntologyNode<String>, 18, 0x800000021FEDFC90, &static ContactNLv3Intent.removeRelationship);
}

void one-time initialization function for contactId(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_32_0();
  *a5 = TerminalOntologyNode.init(name:multicardinal:)();
  OUTLINED_FUNCTION_22_6();
}

uint64_t ContactNLv3Intent.domainOntologyNode.getter()
{
  return swift_retain();
}

uint64_t ContactNLv3Intent.intent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(OUTLINED_FUNCTION_14_14() + 20);
  v4 = OUTLINED_FUNCTION_52_9();
  return OUTLINED_FUNCTION_62_10(a1, v3, v4, *(uint64_t (**)(void))(*(_QWORD *)(v4 - 8) + 16));
}

uint64_t ContactNLv3Intent.intent.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(OUTLINED_FUNCTION_14_14() + 20);
  v4 = OUTLINED_FUNCTION_52_9();
  return OUTLINED_FUNCTION_62_10(v3, a1, v4, *(uint64_t (**)(void))(*(_QWORD *)(v4 - 8) + 40));
}

uint64_t (*ContactNLv3Intent.intent.modify())(_QWORD)
{
  OUTLINED_FUNCTION_14_14();
  return destructiveProjectEnumData for SpecifyingContactAddressType;
}

void ContactNLv3Intent.NLContactAttributesValue.attributeTypeAndLabel()()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  OUTLINED_FUNCTION_89_1();
  switch(v1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 10:
    case 12:
    case 14:
    case 16:
    case 31:
    case 32:
    case 35:
    case 36:
    case 38:
      return;
    case 5:
    case 6:
    case 7:
    case 8:
      ContactNLv3Intent.NLContactAttributesValue.rawValue.getter();
      break;
    case 9:
      OUTLINED_FUNCTION_79_4();
      break;
    case 11:
      OUTLINED_FUNCTION_39_10();
      break;
    case 30:
      OUTLINED_FUNCTION_89_1();
      break;
    case 33:
      OUTLINED_FUNCTION_79_4();
      break;
    case 34:
      OUTLINED_FUNCTION_39_10();
      break;
    case 37:
      OUTLINED_FUNCTION_39_10();
      break;
    default:
      OUTLINED_FUNCTION_89_1();
      break;
  }
}

uint64_t ContactNLv3Intent.NLContactAttributesValue.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_21FE788C4 + 4 * word_21FEDB1A2[*v0]))(0xD000000000000012, 0x800000021FEDF380);
}

uint64_t sub_21FE788C4()
{
  return 0x6F687020656D6F68;
}

uint64_t sub_21FE78A90()
{
  return 1870031222;
}

uint64_t sub_21FE78AA0()
{
  return 0x6F72616C63;
}

uint64_t sub_21FE78AB4()
{
  return 7170420;
}

uint64_t sub_21FE78AC4()
{
  return 26991;
}

uint64_t sub_21FE78AD0()
{
  return 0x6C657478656ELL;
}

void sub_21FE78AE4()
{
  JUMPOUT(0x21FE78AF0);
}

uint64_t sub_21FE78AF8()
{
  return 0x65746D6F63726573;
}

uint64_t sub_21FE78B18()
{
  return 1870032493;
}

uint64_t sub_21FE78B2C()
{
  return 0x6C69616D65;
}

uint64_t sub_21FE78B40()
{
  return 0x616D65206B726F77;
}

uint64_t sub_21FE78B60()
{
  return 0x6C616E6F73726570;
}

uint64_t sub_21FE78B84()
{
  return 0x6D6520726568746FLL;
}

uint64_t sub_21FE78BA4()
{
  return 0x65206C6F6F686373;
}

void sub_21FE78BC4()
{
  JUMPOUT(0x21FE78BE8);
}

uint64_t sub_21FE78BF0()
{
  return 0x61206C6F6F686373;
}

uint64_t sub_21FE78C14()
{
  return 0x72646461206D7967;
}

uint64_t sub_21FE78C34()
{
  return 0x656D616E20796DLL;
}

uint64_t sub_21FE78C48()
{
  return 0x6D616E206C6C7566;
}

uint64_t sub_21FE78CB8()
{
  return 0x6E6F6974616C6572;
}

void sub_21FE78CD0()
{
  OUTLINED_FUNCTION_12_2();
}

void sub_21FE78CE0()
{
  OUTLINED_FUNCTION_12_2();
}

uint64_t sub_21FE78CF0()
{
  return 0x73736572646461;
}

uint64_t sub_21FE78D24()
{
  return 0x796E61706D6F63;
}

uint64_t sub_21FE78D3C()
{
  return 0x7961646874726962;
}

uint64_t sub_21FE78D54()
{
  return 6645601;
}

uint64_t sub_21FE78D64()
{
  return 0x73726576696E6E61;
}

uint64_t sub_21FE78D84()
{
  return 0x72657474697774;
}

uint64_t sub_21FE78D9C()
{
  return 0x69657720616E6973;
}

uint64_t sub_21FE78DBC()
{
  return 0x6B6F6F6265636166;
}

uint64_t sub_21FE78DD4()
{
  return 0x726B63696C66;
}

uint64_t sub_21FE78DE8()
{
  return 0x6E6964656B6E696CLL;
}

void sub_21FE78E00()
{
  JUMPOUT(0x21FE78E10);
}

uint64_t sub_21FE78E18()
{
  return 0x657669727261;
}

uint64_t sub_21FE78E2C()
{
  return 0x747261706564;
}

uint64_t sub_21FE78E40()
{
  return 0x6576697272612069;
}

uint64_t sub_21FE78E58()
{
  return 0x7472617065642069;
}

uint64_t sub_21FE78E70()
{
  return 0x656D697420656E6FLL;
}

void sub_21FE78E94()
{
  JUMPOUT(0x21FE78EA0);
}

void sub_21FE78EAC()
{
  JUMPOUT(0x21FE78EB8);
}

uint64_t sub_21FE78EBC()
{
  return 1953718640;
}

uint64_t sub_21FE78ECC()
{
  return 0x657275747566;
}

uint64_t sub_21FE78EE0()
{
  return 0x746E6573657270;
}

SiriContactsIntents::ContactNLv3Intent::NLContactAttributesValue_optional __swiftcall ContactNLv3Intent.NLContactAttributesValue.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  uint64_t v2;
  char v3;
  char v4;
  SiriContactsIntents::ContactNLv3Intent::NLContactAttributesValue_optional result;

  OUTLINED_FUNCTION_69_10();
  OUTLINED_FUNCTION_95_3();
  OUTLINED_FUNCTION_49_12();
  v3 = 0;
  v4 = 52;
  switch(v2)
  {
    case 0:
      goto LABEL_54;
    case 1:
      v3 = 1;
      goto LABEL_54;
    case 2:
      v3 = 2;
      goto LABEL_54;
    case 3:
      v3 = 3;
      goto LABEL_54;
    case 4:
      v3 = 4;
      goto LABEL_54;
    case 5:
      v3 = 5;
      goto LABEL_54;
    case 6:
      v3 = 6;
      goto LABEL_54;
    case 7:
      v3 = 7;
      goto LABEL_54;
    case 8:
      v3 = 8;
      goto LABEL_54;
    case 9:
      v3 = 9;
      goto LABEL_54;
    case 10:
      v3 = 10;
      goto LABEL_54;
    case 11:
      v3 = 11;
      goto LABEL_54;
    case 12:
      v3 = 12;
      goto LABEL_54;
    case 13:
      v3 = 13;
      goto LABEL_54;
    case 14:
      v3 = 14;
      goto LABEL_54;
    case 15:
      v3 = 15;
      goto LABEL_54;
    case 16:
      v3 = 16;
      goto LABEL_54;
    case 17:
      v3 = 17;
      goto LABEL_54;
    case 18:
      v3 = 18;
      goto LABEL_54;
    case 19:
      v3 = 19;
      goto LABEL_54;
    case 20:
      v3 = 20;
      goto LABEL_54;
    case 21:
      v3 = 21;
      goto LABEL_54;
    case 22:
      v3 = 22;
      goto LABEL_54;
    case 23:
      v3 = 23;
      goto LABEL_54;
    case 24:
      v3 = 24;
      goto LABEL_54;
    case 25:
      v3 = 25;
      goto LABEL_54;
    case 26:
      v3 = 26;
      goto LABEL_54;
    case 27:
      v3 = 27;
      goto LABEL_54;
    case 28:
      v3 = 28;
      goto LABEL_54;
    case 29:
      v3 = 29;
      goto LABEL_54;
    case 30:
      v3 = 30;
      goto LABEL_54;
    case 31:
      v3 = 31;
      goto LABEL_54;
    case 32:
      v3 = 32;
      goto LABEL_54;
    case 33:
      v3 = 33;
      goto LABEL_54;
    case 34:
      v3 = 34;
      goto LABEL_54;
    case 35:
      v3 = 35;
      goto LABEL_54;
    case 36:
      v3 = 36;
      goto LABEL_54;
    case 37:
      v3 = 37;
      goto LABEL_54;
    case 38:
      v3 = 38;
      goto LABEL_54;
    case 39:
      v3 = 39;
      goto LABEL_54;
    case 40:
      v3 = 40;
      goto LABEL_54;
    case 41:
      v3 = 41;
      goto LABEL_54;
    case 42:
      v3 = 42;
      goto LABEL_54;
    case 43:
      v3 = 43;
      goto LABEL_54;
    case 44:
      v3 = 44;
      goto LABEL_54;
    case 45:
      v3 = 45;
      goto LABEL_54;
    case 46:
      v3 = 46;
      goto LABEL_54;
    case 47:
      v3 = 47;
      goto LABEL_54;
    case 48:
      v3 = 48;
      goto LABEL_54;
    case 49:
      v3 = 49;
      goto LABEL_54;
    case 50:
      v3 = 50;
      goto LABEL_54;
    case 51:
      v3 = 51;
LABEL_54:
      v4 = v3;
      break;
    case 52:
      break;
    case 53:
      v4 = 53;
      break;
    case 54:
      v4 = 54;
      break;
    case 55:
      v4 = 55;
      break;
    case 56:
      v4 = 56;
      break;
    case 57:
      v4 = 57;
      break;
    case 58:
      v4 = 58;
      break;
    case 59:
      v4 = 59;
      break;
    case 60:
      v4 = 60;
      break;
    case 61:
      v4 = 61;
      break;
    case 62:
      v4 = 62;
      break;
    case 63:
      v4 = 63;
      break;
    case 64:
      v4 = 64;
      break;
    case 65:
      v4 = 65;
      break;
    case 66:
      v4 = 66;
      break;
    case 67:
      v4 = 67;
      break;
    case 68:
      v4 = 68;
      break;
    case 69:
      v4 = 69;
      break;
    default:
      v4 = 70;
      break;
  }
  *v1 = v4;
  OUTLINED_FUNCTION_22_6();
  return result;
}

void *static ContactNLv3Intent.NLContactAttributesValue.allCases.getter()
{
  return &outlined read-only object #0 of static ContactNLv3Intent.NLContactAttributesValue.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContactNLv3Intent.NLContactAttributesValue(unsigned __int8 *a1, unsigned __int8 *a2)
{
  char v2;

  specialized == infix<A>(_:_:)(*a1, *a2, ContactNLv3Intent.NLContactAttributesValue.rawValue.getter);
  return v2 & 1;
}

void protocol witness for Hashable.hashValue.getter in conformance ContactNLv3Intent.NLContactAttributesValue()
{
  unsigned __int8 *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactNLv3Intent.NLContactAttributesValue(uint64_t a1)
{
  unsigned __int8 *v1;

  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ContactNLv3Intent.NLContactAttributesValue(uint64_t a1)
{
  unsigned __int8 *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriContactsIntents::ContactNLv3Intent::NLContactAttributesValue_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactNLv3Intent.NLContactAttributesValue(Swift::String *a1)
{
  return ContactNLv3Intent.NLContactAttributesValue.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ContactNLv3Intent.NLContactAttributesValue(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = ContactNLv3Intent.NLContactAttributesValue.rawValue.getter();
  a1[1] = v2;
  OUTLINED_FUNCTION_31_0();
}

void protocol witness for static CaseIterable.allCases.getter in conformance ContactNLv3Intent.NLContactAttributesValue(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static ContactNLv3Intent.NLContactAttributesValue.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance ContactNLv3Intent.NLContactAttributesValue()
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance ContactNLv3Intent.NLContactAttributesValue();
}

{
  void (*v0)(void);
  void (*v1)(void);
  void (*v2)(void);
  void (*v3)(void);
  void (*v4)(void);

  OUTLINED_FUNCTION_77_7();
  v1 = v0;
  v3 = v2;
  v4();
  v3();
  v1();
  OUTLINED_FUNCTION_75_7();
  return static TerminalNodeBoundedSemanticValue<>.fromIntentNodeValue(_:)();
}

SiriContactsIntents::ContactNLv3Intent::NLContactVerbValue_optional __swiftcall ContactNLv3Intent.NLContactVerbValue.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  unint64_t v2;
  char v3;
  SiriContactsIntents::ContactNLv3Intent::NLContactVerbValue_optional result;

  OUTLINED_FUNCTION_40_6();
  v2 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  OUTLINED_FUNCTION_5_0();
  v3 = 17;
  if (v2 < 0x11)
    v3 = v2;
  *v1 = v3;
  OUTLINED_FUNCTION_22_6();
  return result;
}

void *static ContactNLv3Intent.NLContactVerbValue.allCases.getter()
{
  return &outlined read-only object #0 of static ContactNLv3Intent.NLContactVerbValue.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContactNLv3Intent.NLContactVerbValue(unsigned __int8 *a1, unsigned __int8 *a2)
{
  char v2;

  specialized == infix<A>(_:_:)(*a1, *a2, ContactNLv3Intent.NLContactVerbValue.rawValue.getter);
  return v2 & 1;
}

void protocol witness for Hashable.hashValue.getter in conformance ContactNLv3Intent.NLContactVerbValue()
{
  unsigned __int8 *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactNLv3Intent.NLContactVerbValue(uint64_t a1)
{
  unsigned __int8 *v1;

  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ContactNLv3Intent.NLContactVerbValue(uint64_t a1)
{
  unsigned __int8 *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriContactsIntents::ContactNLv3Intent::NLContactVerbValue_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactNLv3Intent.NLContactVerbValue(Swift::String *a1)
{
  return ContactNLv3Intent.NLContactVerbValue.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ContactNLv3Intent.NLContactVerbValue(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = ContactNLv3Intent.NLContactVerbValue.rawValue.getter();
  a1[1] = v2;
  OUTLINED_FUNCTION_31_0();
}

void protocol witness for static CaseIterable.allCases.getter in conformance ContactNLv3Intent.NLContactVerbValue(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static ContactNLv3Intent.NLContactVerbValue.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance ContactNLv3Intent.NLContactVerbValue()
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance ContactNLv3Intent.NLContactAttributesValue();
}

SiriContactsIntents::ContactNLv3Intent::NLContactNounValue_optional __swiftcall ContactNLv3Intent.NLContactNounValue.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;
  uint64_t v3;
  Swift::Int v4;
  char v5;
  SiriContactsIntents::ContactNLv3Intent::NLContactNounValue_optional result;

  OUTLINED_FUNCTION_40_6();
  v2._rawValue = &outlined read-only object #0 of ContactNLv3Intent.NLContactNounValue.init(rawValue:);
  v4 = OUTLINED_FUNCTION_82_3(v2, v3);
  OUTLINED_FUNCTION_5_0();
  if (v4 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v4)
    v5 = 0;
  *v1 = v5;
  OUTLINED_FUNCTION_22_6();
  return result;
}

void *static ContactNLv3Intent.NLContactNounValue.allCases.getter()
{
  return &outlined read-only object #0 of static ContactNLv3Intent.NLContactNounValue.allCases.getter;
}

uint64_t ContactNLv3Intent.NLContactNounValue.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x656C706F6570;
  else
    return 0x746361746E6F63;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ContactNLv3Intent.NLContactNounValue(char *a1, char *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance ContactNLv3Intent.NLContactNounValue()
{
  specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactNLv3Intent.NLContactNounValue()
{
  return specialized RawRepresentable<>.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ContactNLv3Intent.NLContactNounValue()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriContactsIntents::ContactNLv3Intent::NLContactNounValue_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactNLv3Intent.NLContactNounValue(Swift::String *a1)
{
  return ContactNLv3Intent.NLContactNounValue.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ContactNLv3Intent.NLContactNounValue(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = ContactNLv3Intent.NLContactNounValue.rawValue.getter();
  a1[1] = v2;
  OUTLINED_FUNCTION_31_0();
}

void protocol witness for static CaseIterable.allCases.getter in conformance ContactNLv3Intent.NLContactNounValue(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static ContactNLv3Intent.NLContactNounValue.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance ContactNLv3Intent.NLContactNounValue()
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance ContactNLv3Intent.NLContactAttributesValue();
}

void ContactNLv3Intent.NLContactConfirmationValue.rawValue.getter()
{
  OUTLINED_FUNCTION_1_27();
}

SiriContactsIntents::ContactNLv3Intent::NLContactConfirmationValue_optional __swiftcall ContactNLv3Intent.NLContactConfirmationValue.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  SiriContactsIntents::ContactNLv3Intent::NLContactConfirmationValue_optional result;

  OUTLINED_FUNCTION_40_6();
  v2._rawValue = &outlined read-only object #0 of ContactNLv3Intent.NLContactConfirmationValue.init(rawValue:);
  v4 = OUTLINED_FUNCTION_82_3(v2, v3);
  OUTLINED_FUNCTION_5_0();
  v5 = 5;
  if (v4 < 5)
    v5 = v4;
  *v1 = v5;
  OUTLINED_FUNCTION_22_6();
  return result;
}

void *static ContactNLv3Intent.NLContactConfirmationValue.allCases.getter()
{
  return &outlined read-only object #0 of static ContactNLv3Intent.NLContactConfirmationValue.allCases.getter;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContactNLv3Intent.NLContactConfirmationValue(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance ContactNLv3Intent.NLContactConfirmationValue()
{
  specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactNLv3Intent.NLContactConfirmationValue()
{
  return specialized RawRepresentable<>.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ContactNLv3Intent.NLContactConfirmationValue()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriContactsIntents::ContactNLv3Intent::NLContactConfirmationValue_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactNLv3Intent.NLContactConfirmationValue(Swift::String *a1)
{
  return ContactNLv3Intent.NLContactConfirmationValue.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ContactNLv3Intent.NLContactConfirmationValue(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  ContactNLv3Intent.NLContactConfirmationValue.rawValue.getter();
  *a1 = v2;
  a1[1] = v3;
  OUTLINED_FUNCTION_31_0();
}

void protocol witness for static CaseIterable.allCases.getter in conformance ContactNLv3Intent.NLContactConfirmationValue(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static ContactNLv3Intent.NLContactConfirmationValue.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance ContactNLv3Intent.NLContactConfirmationValue()
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance ContactNLv3Intent.NLContactAttributesValue();
}

SiriContactsIntents::ContactNLv3Intent::NLContactAttribute_optional __swiftcall ContactNLv3Intent.NLContactAttribute.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  SiriContactsIntents::ContactNLv3Intent::NLContactAttribute_optional result;

  OUTLINED_FUNCTION_40_6();
  v2._rawValue = &outlined read-only object #0 of ContactNLv3Intent.NLContactAttribute.init(rawValue:);
  v4 = OUTLINED_FUNCTION_82_3(v2, v3);
  OUTLINED_FUNCTION_5_0();
  v5 = 9;
  if (v4 < 9)
    v5 = v4;
  *v1 = v5;
  OUTLINED_FUNCTION_22_6();
  return result;
}

void ContactNLv3Intent.NLContactAttribute.rawValue.getter()
{
  OUTLINED_FUNCTION_1_27();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContactNLv3Intent.NLContactAttribute(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance ContactNLv3Intent.NLContactAttribute()
{
  specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactNLv3Intent.NLContactAttribute()
{
  return specialized RawRepresentable<>.hash(into:)();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ContactNLv3Intent.NLContactAttribute()
{
  specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriContactsIntents::ContactNLv3Intent::NLContactAttribute_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactNLv3Intent.NLContactAttribute(Swift::String *a1)
{
  return ContactNLv3Intent.NLContactAttribute.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ContactNLv3Intent.NLContactAttribute(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  ContactNLv3Intent.NLContactAttribute.rawValue.getter();
  *a1 = v2;
  a1[1] = v3;
  OUTLINED_FUNCTION_31_0();
}

SiriContactsIntents::ContactNLv3Intent::NLContactReferenceValue_optional __swiftcall ContactNLv3Intent.NLContactReferenceValue.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  uint64_t v2;
  char v3;
  char v4;
  SiriContactsIntents::ContactNLv3Intent::NLContactReferenceValue_optional result;

  OUTLINED_FUNCTION_69_10();
  OUTLINED_FUNCTION_95_3();
  OUTLINED_FUNCTION_49_12();
  v3 = 0;
  v4 = 20;
  switch(v2)
  {
    case 0:
      goto LABEL_22;
    case 1:
      v3 = 1;
      goto LABEL_22;
    case 2:
      v3 = 2;
      goto LABEL_22;
    case 3:
      v3 = 3;
      goto LABEL_22;
    case 4:
      v3 = 4;
      goto LABEL_22;
    case 5:
      v3 = 5;
      goto LABEL_22;
    case 6:
      v3 = 6;
      goto LABEL_22;
    case 7:
      v3 = 7;
      goto LABEL_22;
    case 8:
      v3 = 8;
      goto LABEL_22;
    case 9:
      v3 = 9;
      goto LABEL_22;
    case 10:
      v3 = 10;
      goto LABEL_22;
    case 11:
      v3 = 11;
      goto LABEL_22;
    case 12:
      v3 = 12;
      goto LABEL_22;
    case 13:
      v3 = 13;
      goto LABEL_22;
    case 14:
      v3 = 14;
      goto LABEL_22;
    case 15:
      v3 = 15;
      goto LABEL_22;
    case 16:
      v3 = 16;
      goto LABEL_22;
    case 17:
      v3 = 17;
      goto LABEL_22;
    case 18:
      v3 = 18;
      goto LABEL_22;
    case 19:
      v3 = 19;
LABEL_22:
      v4 = v3;
      break;
    case 20:
      break;
    case 21:
      v4 = 21;
      break;
    case 22:
      v4 = 22;
      break;
    case 23:
      v4 = 23;
      break;
    case 24:
      v4 = 24;
      break;
    case 25:
      v4 = 25;
      break;
    case 26:
      v4 = 26;
      break;
    case 27:
      v4 = 27;
      break;
    case 28:
      v4 = 28;
      break;
    case 29:
      v4 = 29;
      break;
    case 30:
      v4 = 30;
      break;
    case 31:
      v4 = 31;
      break;
    case 32:
      v4 = 32;
      break;
    case 33:
      v4 = 33;
      break;
    case 34:
      v4 = 34;
      break;
    case 35:
      v4 = 35;
      break;
    case 36:
      v4 = 36;
      break;
    case 37:
      v4 = 37;
      break;
    default:
      v4 = 38;
      break;
  }
  *v1 = v4;
  OUTLINED_FUNCTION_22_6();
  return result;
}

void *static ContactNLv3Intent.NLContactReferenceValue.allCases.getter()
{
  return &outlined read-only object #0 of static ContactNLv3Intent.NLContactReferenceValue.allCases.getter;
}

void ContactNLv3Intent.NLContactReferenceValue.rawValue.getter()
{
  OUTLINED_FUNCTION_1_27();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContactNLv3Intent.NLContactReferenceValue(unsigned __int8 *a1, unsigned __int8 *a2)
{
  char v2;

  specialized == infix<A>(_:_:)(*a1, *a2, (uint64_t (*)(void))ContactNLv3Intent.NLContactReferenceValue.rawValue.getter);
  return v2 & 1;
}

void protocol witness for Hashable.hashValue.getter in conformance ContactNLv3Intent.NLContactReferenceValue()
{
  unsigned __int8 *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactNLv3Intent.NLContactReferenceValue(uint64_t a1)
{
  unsigned __int8 *v1;

  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ContactNLv3Intent.NLContactReferenceValue(uint64_t a1)
{
  unsigned __int8 *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriContactsIntents::ContactNLv3Intent::NLContactReferenceValue_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactNLv3Intent.NLContactReferenceValue(Swift::String *a1)
{
  return ContactNLv3Intent.NLContactReferenceValue.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ContactNLv3Intent.NLContactReferenceValue(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  ContactNLv3Intent.NLContactReferenceValue.rawValue.getter();
  *a1 = v2;
  a1[1] = v3;
  OUTLINED_FUNCTION_31_0();
}

void protocol witness for static CaseIterable.allCases.getter in conformance ContactNLv3Intent.NLContactReferenceValue(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static ContactNLv3Intent.NLContactReferenceValue.allCases.getter;
}

uint64_t protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance ContactNLv3Intent.NLContactReferenceValue()
{
  return protocol witness for static TerminalNodeValueType.fromIntentNodeValue(_:) in conformance ContactNLv3Intent.NLContactAttributesValue();
}

uint64_t one-time initialization function for phoneAttributes()
{
  uint64_t v0;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 48) = 0x6F6870206B726F77;
  strcpy((char *)(v0 + 64), "mobile phone");
  *(_BYTE *)(v0 + 77) = 0;
  *(_WORD *)(v0 + 78) = -5120;
  *(_QWORD *)(v0 + 96) = 0x6F6870206E69616DLL;
  *(_QWORD *)(v0 + 528) = 0x6F6870206B726F77;
  *(_QWORD *)(v0 + 112) = 0x78616620656D6F68;
  *(_QWORD *)(v0 + 120) = 0xE800000000000000;
  strcpy((char *)(v0 + 544), "mobile phone");
  *(_QWORD *)(v0 + 128) = 0x786166206B726F77;
  *(_QWORD *)(v0 + 136) = 0xE800000000000000;
  *(_QWORD *)(v0 + 576) = 0x6F6870206E69616DLL;
  *(_QWORD *)(v0 + 592) = 0x78616620656D6F68;
  *(_QWORD *)(v0 + 608) = 0x786166206B726F77;
  *(_QWORD *)(v0 + 144) = 0x616620726568746FLL;
  *(_QWORD *)(v0 + 152) = 0xE900000000000078;
  *(_QWORD *)(v0 + 600) = 0xE800000000000000;
  *(_QWORD *)(v0 + 616) = 0xE800000000000000;
  *(_QWORD *)(v0 + 624) = 0x616620726568746FLL;
  *(_QWORD *)(v0 + 160) = 0x7265676170;
  *(_QWORD *)(v0 + 632) = 0xE900000000000078;
  *(_QWORD *)(v0 + 640) = 0x7265676170;
  *(_QWORD *)(v0 + 176) = 0x687020726568746FLL;
  *(_QWORD *)(v0 + 184) = 0xEB00000000656E6FLL;
  *(_QWORD *)(v0 + 656) = 0x687020726568746FLL;
  *(_QWORD *)(v0 + 192) = 0x656E6F6870;
  *(_QWORD *)(v0 + 672) = 0x656E6F6870;
  strcpy((char *)(v0 + 208), "school phone");
  *(_BYTE *)(v0 + 221) = 0;
  *(_WORD *)(v0 + 222) = -5120;
  strcpy((char *)(v0 + 688), "school phone");
  *(_BYTE *)(v0 + 557) = 0;
  *(_WORD *)(v0 + 558) = -5120;
  *(_BYTE *)(v0 + 701) = 0;
  *(_WORD *)(v0 + 702) = -5120;
  *(_QWORD *)(v0 + 224) = 0x6E61747369737361;
  *(_QWORD *)(v0 + 232) = 0xEF656E6F68702074;
  *(_QWORD *)(v0 + 704) = 0x6E61747369737361;
  *(_QWORD *)(v0 + 240) = 0x6E6F687020726163;
  *(_QWORD *)(v0 + 712) = 0xEF656E6F68702074;
  *(_QWORD *)(v0 + 256) = 0x6870206F69646172;
  *(_QWORD *)(v0 + 264) = 0xEB00000000656E6FLL;
  *(_QWORD *)(v0 + 720) = 0x6E6F687020726163;
  *(_QWORD *)(v0 + 736) = 0x6870206F69646172;
  *(_QWORD *)(v0 + 664) = 0xEB00000000656E6FLL;
  *(_QWORD *)(v0 + 744) = 0xEB00000000656E6FLL;
  *(_QWORD *)(v0 + 272) = 0xD000000000000012;
  *(_QWORD *)(v0 + 280) = 0x800000021FEDF380;
  *(_QWORD *)(v0 + 752) = 0xD000000000000012;
  *(_QWORD *)(v0 + 760) = 0x800000021FEDF380;
  strcpy((char *)(v0 + 288), "primary phone");
  strcpy((char *)(v0 + 768), "primary phone");
  *(_QWORD *)(v0 + 304) = 0xD000000000000014;
  *(_QWORD *)(v0 + 312) = 0x800000021FEDF3B0;
  *(_QWORD *)(v0 + 792) = 0x800000021FEDF3B0;
  *(_QWORD *)(v0 + 320) = 0xD000000000000014;
  *(_QWORD *)(v0 + 328) = 0x800000021FEDF3D0;
  *(_QWORD *)(v0 + 784) = 0xD000000000000014;
  *(_QWORD *)(v0 + 800) = 0xD000000000000014;
  *(_QWORD *)(v0 + 808) = 0x800000021FEDF3D0;
  strcpy((char *)(v0 + 816), "callback phone");
  strcpy((char *)(v0 + 336), "callback phone");
  *(_BYTE *)(v0 + 351) = -18;
  *(_BYTE *)(v0 + 831) = -18;
  *(_QWORD *)(v0 + 352) = 0x6F6870206E647369;
  *(_QWORD *)(v0 + 360) = 0xEA0000000000656ELL;
  *(_QWORD *)(v0 + 832) = 0x6F6870206E647369;
  *(_QWORD *)(v0 + 512) = 0x6F687020656D6F68;
  *(_QWORD *)(v0 + 32) = 0x6F687020656D6F68;
  *(_QWORD *)(v0 + 40) = 0xEA0000000000656ELL;
  *(_QWORD *)(v0 + 56) = 0xEA0000000000656ELL;
  *(_QWORD *)(v0 + 104) = 0xEA0000000000656ELL;
  *(_WORD *)(v0 + 302) = -4864;
  *(_QWORD *)(v0 + 520) = 0xEA0000000000656ELL;
  *(_QWORD *)(v0 + 536) = 0xEA0000000000656ELL;
  *(_QWORD *)(v0 + 584) = 0xEA0000000000656ELL;
  *(_QWORD *)(v0 + 840) = 0xEA0000000000656ELL;
  strcpy((char *)(v0 + 368), "tdd tty phone");
  *(_WORD *)(v0 + 382) = -4864;
  strcpy((char *)(v0 + 848), "tdd tty phone");
  *(_WORD *)(v0 + 782) = -4864;
  *(_WORD *)(v0 + 862) = -4864;
  *(_QWORD *)(v0 + 416) = 7170420;
  *(_QWORD *)(v0 + 424) = 0xE300000000000000;
  *(_QWORD *)(v0 + 896) = 7170420;
  *(_QWORD *)(v0 + 904) = 0xE300000000000000;
  *(_QWORD *)(v0 + 912) = 26991;
  *(_QWORD *)(v0 + 432) = 26991;
  *(_QWORD *)(v0 + 440) = 0xE200000000000000;
  *(_QWORD *)(v0 + 920) = 0xE200000000000000;
  *(_QWORD *)(v0 + 448) = 0x6C657478656ELL;
  *(_QWORD *)(v0 + 456) = 0xE600000000000000;
  *(_QWORD *)(v0 + 928) = 0x6C657478656ELL;
  *(_QWORD *)(v0 + 560) = 0x656E6F687069;
  *(_QWORD *)(v0 + 80) = 0x656E6F687069;
  *(_QWORD *)(v0 + 88) = 0xE600000000000000;
  *(_QWORD *)(v0 + 168) = 0xE500000000000000;
  *(_QWORD *)(v0 + 200) = 0xE500000000000000;
  *(_QWORD *)(v0 + 248) = 0xE900000000000065;
  *(_QWORD *)(v0 + 568) = 0xE600000000000000;
  *(_QWORD *)(v0 + 936) = 0xE600000000000000;
  *(_QWORD *)(v0 + 464) = 0x7261676C61;
  *(_QWORD *)(v0 + 472) = 0xE500000000000000;
  *(_QWORD *)(v0 + 944) = 0x7261676C61;
  *(_QWORD *)(v0 + 880) = 0x6F72616C63;
  *(_QWORD *)(v0 + 400) = 0x6F72616C63;
  *(_QWORD *)(v0 + 408) = 0xE500000000000000;
  *(_QWORD *)(v0 + 648) = 0xE500000000000000;
  *(_QWORD *)(v0 + 680) = 0xE500000000000000;
  *(_QWORD *)(v0 + 888) = 0xE500000000000000;
  *(_QWORD *)(v0 + 952) = 0xE500000000000000;
  *(_QWORD *)(v0 + 728) = 0xE900000000000065;
  *(_QWORD *)(v0 + 960) = 0x65746D6F63726573;
  *(_QWORD *)(v0 + 480) = 0x65746D6F63726573;
  *(_QWORD *)(v0 + 488) = 0xE90000000000006CLL;
  *(_QWORD *)(v0 + 968) = 0xE90000000000006CLL;
  *(_QWORD *)(v0 + 496) = 1870032493;
  *(_QWORD *)(v0 + 504) = 0xE400000000000000;
  *(_QWORD *)(v0 + 976) = 1870032493;
  *(_QWORD *)(v0 + 864) = 1870031222;
  *(_QWORD *)(v0 + 384) = 1870031222;
  *(_QWORD *)(v0 + 392) = 0xE400000000000000;
  *(_QWORD *)(v0 + 872) = 0xE400000000000000;
  *(_QWORD *)(v0 + 984) = 0xE400000000000000;
  *(_OWORD *)(v0 + 16) = xmmword_21FEDB110;
  result = destructiveProjectEnumData for SpecifyingContactAddressType();
  static ContactNLv3Intent.phoneAttributes = result;
  return result;
}

uint64_t one-time initialization function for emailAttributes()
{
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_21FEDB120;
  *(_QWORD *)(result + 32) = 0x6C69616D65;
  *(_QWORD *)(result + 40) = 0xE500000000000000;
  *(_QWORD *)(result + 48) = 0x6D6520726568746FLL;
  *(_QWORD *)(result + 56) = 0xEB000000006C6961;
  strcpy((char *)(result + 64), "school email");
  *(_BYTE *)(result + 77) = 0;
  *(_WORD *)(result + 78) = -5120;
  *(_QWORD *)(result + 80) = 0x616D65206B726F77;
  *(_QWORD *)(result + 88) = 0xEA00000000006C69;
  strcpy((char *)(result + 96), "personal email");
  *(_BYTE *)(result + 111) = -18;
  *(_QWORD *)(result + 112) = 0x6C69616D65;
  *(_QWORD *)(result + 120) = 0xE500000000000000;
  strcpy((char *)(result + 128), "personal email");
  *(_BYTE *)(result + 143) = -18;
  strcpy((char *)(result + 144), "school email");
  *(_BYTE *)(result + 157) = 0;
  *(_WORD *)(result + 158) = -5120;
  *(_QWORD *)(result + 160) = 0x6D6520726568746FLL;
  *(_QWORD *)(result + 168) = 0xEB000000006C6961;
  *(_QWORD *)(result + 176) = 0x616D65206B726F77;
  *(_QWORD *)(result + 184) = 0xEA00000000006C69;
  static ContactNLv3Intent.emailAttributes = result;
  return result;
}

void ContactNLv3Intent.hasPersonNickName.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int EnumTagSinglePayload;
  char v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_77_7();
  OUTLINED_FUNCTION_14_14();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_37_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonIntentNode?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_7_3();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_78_7();
  ContactNLv3Intent.person.getter();
  v6 = OUTLINED_FUNCTION_86_4();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v2, 1, v6);
  outlined destroy of FlowActivity?(v2, &demangling cache variable for type metadata for PersonIntentNode?);
  OUTLINED_FUNCTION_17_12(v0);
  if (EnumTagSinglePayload == 1)
  {
    OUTLINED_FUNCTION_13_26();
  }
  else
  {
    ContactNLv3Intent.person.getter();
    OUTLINED_FUNCTION_6_2(v1, 1, v6);
    if (v8)
    {
      OUTLINED_FUNCTION_13_26();
      outlined destroy of FlowActivity?(v1, &demangling cache variable for type metadata for PersonIntentNode?);
    }
    else
    {
      PersonIntentNodeContaining.nickName.getter();
      v10 = v9;
      OUTLINED_FUNCTION_13_26();
      OUTLINED_FUNCTION_55_9();
      if (v10)
        OUTLINED_FUNCTION_5();
    }
  }
  OUTLINED_FUNCTION_18_15();
}

void ContactNLv3Intent.hasPersonNameNode.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  int EnumTagSinglePayload;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  OUTLINED_FUNCTION_32();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonOntologyNode.PersonNamePostfix?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_9_5();
  v67 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonOntologyNode.PersonNamePrefix?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_9_5();
  v68 = v4;
  OUTLINED_FUNCTION_14_14();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_5_2();
  v70 = v6;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_68();
  v72 = v8;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_68();
  v71 = v10;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_68();
  v69 = v12;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v13);
  OUTLINED_FUNCTION_30_13();
  MEMORY[0x24BDAC7A8](v14);
  OUTLINED_FUNCTION_38_9();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonIntentNode?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_5_2();
  v64 = v16;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_68();
  v65 = v18;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v19);
  OUTLINED_FUNCTION_68();
  v66 = v20;
  OUTLINED_FUNCTION_54();
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v63 - v23;
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v63 - v26;
  v28 = MEMORY[0x24BDAC7A8](v25);
  v30 = (char *)&v63 - v29;
  MEMORY[0x24BDAC7A8](v28);
  v32 = (char *)&v63 - v31;
  ContactNLv3Intent.person.getter();
  v33 = OUTLINED_FUNCTION_86_4();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v32, 1, v33);
  outlined destroy of FlowActivity?((uint64_t)v32, &demangling cache variable for type metadata for PersonIntentNode?);
  OUTLINED_FUNCTION_56_9();
  if (EnumTagSinglePayload == 1)
  {
    OUTLINED_FUNCTION_25_21();
    goto LABEL_31;
  }
  ContactNLv3Intent.person.getter();
  v35 = OUTLINED_FUNCTION_6_2((uint64_t)v30, 1, v33);
  if (v43)
  {
    OUTLINED_FUNCTION_80_6(v35, &demangling cache variable for type metadata for PersonIntentNode?);
    OUTLINED_FUNCTION_16_7();
  }
  else
  {
    PersonIntentNodeContaining.firstName.getter();
    v37 = v36;
    OUTLINED_FUNCTION_48_5((uint64_t)v30, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8));
    OUTLINED_FUNCTION_5_0();
    OUTLINED_FUNCTION_16_7();
    if (v37)
    {
      OUTLINED_FUNCTION_27_15();
LABEL_27:
      OUTLINED_FUNCTION_6_13();
      OUTLINED_FUNCTION_13_26();
      goto LABEL_28;
    }
  }
  ContactNLv3Intent.person.getter();
  OUTLINED_FUNCTION_6_2((uint64_t)v27, 1, v33);
  if (v43)
  {
    OUTLINED_FUNCTION_27_15();
    outlined destroy of FlowActivity?((uint64_t)v27, &demangling cache variable for type metadata for PersonIntentNode?);
    v38 = type metadata accessor for PersonOntologyNode.PersonNamePrefix();
    v44 = OUTLINED_FUNCTION_70_9(v38, v39, v40, v38);
  }
  else
  {
    v41 = v68;
    PersonIntentNodeContaining.namePrefix.getter();
    OUTLINED_FUNCTION_27_15();
    OUTLINED_FUNCTION_48_5((uint64_t)v27, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8));
    v42 = type metadata accessor for PersonOntologyNode.PersonNamePrefix();
    v44 = OUTLINED_FUNCTION_6_2(v41, 1, v42);
    if (!v43)
    {
      OUTLINED_FUNCTION_57_7(v44, &demangling cache variable for type metadata for PersonOntologyNode.PersonNamePrefix?);
      goto LABEL_27;
    }
  }
  OUTLINED_FUNCTION_57_7(v44, &demangling cache variable for type metadata for PersonOntologyNode.PersonNamePrefix?);
  v45 = v69;
  outlined init with copy of ContactNLv3Intent(v0, v69);
  ContactNLv3Intent.person.getter();
  OUTLINED_FUNCTION_6_2((uint64_t)v24, 1, v33);
  if (v43)
  {
    outlined destroy of ContactNLv3Intent(v45);
    outlined destroy of FlowActivity?((uint64_t)v24, &demangling cache variable for type metadata for PersonIntentNode?);
    v46 = type metadata accessor for PersonOntologyNode.PersonNamePostfix();
    v52 = OUTLINED_FUNCTION_70_9(v46, v47, v48, v46);
  }
  else
  {
    v49 = v67;
    PersonIntentNodeContaining.namePostfix.getter();
    outlined destroy of ContactNLv3Intent(v45);
    OUTLINED_FUNCTION_48_5((uint64_t)v24, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8));
    v50 = type metadata accessor for PersonOntologyNode.PersonNamePostfix();
    v52 = OUTLINED_FUNCTION_6_2(v49, 1, v50);
    if (!v51)
    {
      OUTLINED_FUNCTION_57_7(v52, &demangling cache variable for type metadata for PersonOntologyNode.PersonNamePostfix?);
LABEL_28:
      OUTLINED_FUNCTION_35_6();
      OUTLINED_FUNCTION_51_8();
      goto LABEL_29;
    }
  }
  OUTLINED_FUNCTION_57_7(v52, &demangling cache variable for type metadata for PersonOntologyNode.PersonNamePostfix?);
  OUTLINED_FUNCTION_35_6();
  v53 = v66;
  ContactNLv3Intent.person.getter();
  OUTLINED_FUNCTION_6_2(v53, 1, v33);
  if (v43)
  {
    OUTLINED_FUNCTION_51_8();
    outlined destroy of FlowActivity?(v53, &demangling cache variable for type metadata for PersonIntentNode?);
  }
  else
  {
    PersonIntentNodeContaining.fullName.getter();
    v55 = v54;
    OUTLINED_FUNCTION_51_8();
    OUTLINED_FUNCTION_48_5(v53, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8));
    if (v55)
    {
      OUTLINED_FUNCTION_5_0();
LABEL_29:
      OUTLINED_FUNCTION_4_14();
      OUTLINED_FUNCTION_46_8();
LABEL_30:
      OUTLINED_FUNCTION_16_7();
      OUTLINED_FUNCTION_27_15();
      OUTLINED_FUNCTION_25_21();
      goto LABEL_31;
    }
  }
  OUTLINED_FUNCTION_4_14();
  v56 = v65;
  ContactNLv3Intent.person.getter();
  OUTLINED_FUNCTION_6_2(v56, 1, v33);
  if (v43)
  {
    v57 = OUTLINED_FUNCTION_46_8();
    OUTLINED_FUNCTION_80_6(v57, &demangling cache variable for type metadata for PersonIntentNode?);
  }
  else
  {
    PersonIntentNodeContaining.lastName.getter();
    v59 = v58;
    OUTLINED_FUNCTION_46_8();
    OUTLINED_FUNCTION_48_5(v56, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8));
    if (v59)
    {
      OUTLINED_FUNCTION_5_0();
      goto LABEL_30;
    }
  }
  OUTLINED_FUNCTION_16_7();
  v60 = v64;
  ContactNLv3Intent.person.getter();
  OUTLINED_FUNCTION_6_2(v60, 1, v33);
  if (v43)
  {
    OUTLINED_FUNCTION_27_15();
    OUTLINED_FUNCTION_25_21();
    outlined destroy of FlowActivity?(v60, &demangling cache variable for type metadata for PersonIntentNode?);
  }
  else
  {
    PersonIntentNodeContaining.middleName.getter();
    v62 = v61;
    OUTLINED_FUNCTION_27_15();
    OUTLINED_FUNCTION_25_21();
    OUTLINED_FUNCTION_48_5(v60, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8));
    if (v62)
      OUTLINED_FUNCTION_5_0();
  }
LABEL_31:
  OUTLINED_FUNCTION_7();
}

uint64_t specialized BidirectionalCollection.last.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v5 = v3 - 1;
    v6 = type metadata accessor for TerminalElement();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1+ ((*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v6 - 8) + 72) * v5, v6);
    v7 = a2;
    v8 = 0;
    v9 = v6;
  }
  else
  {
    v9 = type metadata accessor for TerminalElement();
    v7 = a2;
    v8 = 1;
  }
  return __swift_storeEnumTagSinglePayload(v7, v8, 1, v9);
}

uint64_t ContactNLv3Intent.containsAttribute(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  if (one-time initialization token for contactAttributes != -1)
    swift_once();
  OUTLINED_FUNCTION_14_14();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  v0 = *(_QWORD *)(IntentNodeTraversable.values<A>(forNode:)() + 16);
  if (v0)
  {
    v1 = 0;
    while (1)
    {
      v2 = ContactNLv3Intent.NLContactAttributesValue.rawValue.getter();
      v4 = v3;
      if (v2 == ContactNLv3Intent.NLContactAttributesValue.rawValue.getter() && v4 == v5)
        break;
      v7 = OUTLINED_FUNCTION_7_22();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_5();
      if ((v7 & 1) != 0)
        goto LABEL_13;
      if (v0 == ++v1)
        goto LABEL_11;
    }
    OUTLINED_FUNCTION_60_10();
LABEL_13:
    OUTLINED_FUNCTION_5_0();
    return 1;
  }
  else
  {
LABEL_11:
    OUTLINED_FUNCTION_5_0();
    return 0;
  }
}

void ContactNLv3Intent.isForgetNickname.getter()
{
  unsigned __int8 v0;

  if (one-time initialization token for contactVerb != -1)
    swift_once();
  OUTLINED_FUNCTION_14_14();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_61_6();
  if (v0 != 17)
    specialized == infix<A>(_:_:)(v0, 15, ContactNLv3Intent.NLContactVerbValue.rawValue.getter);
  OUTLINED_FUNCTION_24_19();
}

void ContactNLv3Intent.hasNameAttribute.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  char v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[14];
  char v14;
  unsigned __int8 v15;

  OUTLINED_FUNCTION_77_7();
  v2 = OUTLINED_FUNCTION_14_14();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v3);
  OUTLINED_FUNCTION_7_3();
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = &v13[-v6];
  v8 = ContactNLv3Intent.containsAttribute(_:)(*(_QWORD **)(v0 + *(int *)(v5 + 24)));
  OUTLINED_FUNCTION_17_12(v0);
  if ((v8 & 1) != 0)
  {
    OUTLINED_FUNCTION_13_26();
LABEL_9:
    OUTLINED_FUNCTION_18_15();
    return;
  }
  if (one-time initialization token for contactVerb != -1)
    swift_once();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_75_7();
  IntentNodeTraversable.value<A>(forNode:)();
  v9 = v15;
  outlined init with copy of ContactNLv3Intent((uint64_t)v7, v1);
  if (v9 == 17)
  {
    OUTLINED_FUNCTION_25_21();
    OUTLINED_FUNCTION_13_26();
    goto LABEL_9;
  }
  v10 = *(_QWORD **)(v1 + *(int *)(v2 + 24));
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_75_7();
  OUTLINED_FUNCTION_94_4();
  if (v14 != 17)
  {
    v13[13] = v14;
    v11 = ContactNLv3Intent.NLContactVerbValue.rawValue.getter();
    specialized Sequence<>.contains(_:)(v11, v12, v10);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_167();
    OUTLINED_FUNCTION_25_21();
    OUTLINED_FUNCTION_13_26();
    goto LABEL_9;
  }
  __break(1u);
}

uint64_t ContactNLv3Intent.containsAttribute(_:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;

  if (one-time initialization token for contactAttributes != -1)
    goto LABEL_31;
  while (1)
  {
    type metadata accessor for ContactNLv3Intent();
    lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
    v2 = IntentNodeTraversable.values<A>(forNode:)();
    v3 = *(_QWORD *)(v2 + 16);
    if (!v3)
      break;
    v4 = 0;
    v5 = a1[2];
    while (v4 < *(_QWORD *)(v2 + 16))
    {
      v6 = ContactNLv3Intent.NLContactAttributesValue.rawValue.getter();
      v8 = v7;
      if (v5)
      {
        v9 = v6;
        v10 = a1[4] == v6 && a1[5] == v7;
        if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_28:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 1;
        }
        if (v5 != 1)
        {
          v11 = a1[6] == v9 && a1[7] == v8;
          if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            goto LABEL_28;
          if (v5 != 2)
          {
            v12 = a1 + 9;
            v13 = 2;
            while (1)
            {
              v14 = v13 + 1;
              if (__OFADD__(v13, 1))
                break;
              v15 = *(v12 - 1) == v9 && *v12 == v8;
              if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                goto LABEL_28;
              v12 += 2;
              ++v13;
              if (v14 == v5)
                goto LABEL_26;
            }
            __break(1u);
            break;
          }
        }
      }
LABEL_26:
      ++v4;
      swift_bridgeObjectRelease();
      if (v4 == v3)
        goto LABEL_27;
    }
    __break(1u);
LABEL_31:
    swift_once();
  }
LABEL_27:
  swift_bridgeObjectRelease();
  return 0;
}

void ContactNLv3Intent.hasFirstNameAttribute.getter()
{
  OUTLINED_FUNCTION_14_22(41);
  OUTLINED_FUNCTION_8_8();
}

void ContactNLv3Intent.hasFullNameAttribute.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  unsigned __int8 v6;
  char v7;

  OUTLINED_FUNCTION_77_7();
  OUTLINED_FUNCTION_14_14();
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v0);
  OUTLINED_FUNCTION_8_10();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_30_13();
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_38_9();
  v3 = ContactNLv3Intent.containsAttribute(_:)();
  OUTLINED_FUNCTION_56_9();
  if ((v3 & 1) == 0)
  {
    if (one-time initialization token for contactVerb != -1)
      swift_once();
    lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
    OUTLINED_FUNCTION_94_4();
    OUTLINED_FUNCTION_16_7();
    if (v7 == 17 || (IntentNodeTraversable.value<A>(forNode:)(), v6 == 17))
    {
      OUTLINED_FUNCTION_27_15();
      OUTLINED_FUNCTION_6_13();
    }
    else
    {
      specialized == infix<A>(_:_:)(v6, 14, ContactNLv3Intent.NLContactVerbValue.rawValue.getter);
      v5 = v4;
      OUTLINED_FUNCTION_27_15();
      OUTLINED_FUNCTION_6_13();
      if ((v5 & 1) != 0)
        ContactNLv3Intent.containsAttribute(_:)();
    }
    OUTLINED_FUNCTION_13_26();
  }
  OUTLINED_FUNCTION_25_21();
  OUTLINED_FUNCTION_18_15();
}

void ContactNLv3Intent.hasNickNameAttribute.getter()
{
  OUTLINED_FUNCTION_14_22(44);
  OUTLINED_FUNCTION_8_8();
}

void ContactNLv3Intent.hasLastNameAttribute.getter()
{
  OUTLINED_FUNCTION_14_22(43);
  OUTLINED_FUNCTION_8_8();
}

Swift::Bool __swiftcall ContactNLv3Intent.containsContactType(_:)(Swift::OpaquePointer a1)
{
  Swift::Bool result;
  uint64_t v3;
  uint64_t v4;

  if (one-time initialization token for contactType != -1)
    swift_once();
  OUTLINED_FUNCTION_14_14();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_59_10();
  if (v4)
  {
    specialized Sequence<>.contains(_:)(v3, v4, a1._rawValue);
    OUTLINED_FUNCTION_5();
  }
  OUTLINED_FUNCTION_24_19();
  return result;
}

void one-time initialization function for nonHandleLabelAttributes()
{
  static ContactNLv3Intent.nonHandleLabelAttributes = (uint64_t)&outlined read-only object #0 of one-time initialization function for nonHandleLabelAttributes;
}

uint64_t ContactNLv3Intent.confirmationResponse.getter@<X0>(uint64_t a1@<X8>)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  if (one-time initialization token for contactConfirmation != -1)
    swift_once();
  OUTLINED_FUNCTION_14_14();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_59_10();
  if (((1 << v9) & 0x16) != 0)
  {
    v2 = (unsigned int *)MEMORY[0x24BE983F8];
  }
  else
  {
    if (((1 << v9) & 9) == 0)
    {
      v7 = OUTLINED_FUNCTION_161();
      v5 = a1;
      v6 = 1;
      return __swift_storeEnumTagSinglePayload(v5, v6, 1, v7);
    }
    v2 = (unsigned int *)MEMORY[0x24BE98400];
  }
  v3 = *v2;
  v4 = OUTLINED_FUNCTION_161();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(a1, v3, v4);
  v5 = a1;
  v6 = 0;
  v7 = v4;
  return __swift_storeEnumTagSinglePayload(v5, v6, 1, v7);
}

void ContactNLv3Intent.isRejection.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  void (*v39)(uint64_t, uint64_t);

  OUTLINED_FUNCTION_32();
  a19 = v23;
  a20 = v24;
  v25 = OUTLINED_FUNCTION_161();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  OUTLINED_FUNCTION_17_2();
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConfirmationResponse?, ConfirmationResponse?));
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v28);
  OUTLINED_FUNCTION_37_2();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  OUTLINED_FUNCTION_28();
  v30 = MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)&a9 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x24BDAC7A8](v30);
  v35 = (char *)&a9 - v34;
  MEMORY[0x24BDAC7A8](v33);
  OUTLINED_FUNCTION_78_7();
  ContactNLv3Intent.confirmationResponse.getter(v36);
  (*(void (**)(char *, _QWORD, uint64_t))(v26 + 104))(v35, *MEMORY[0x24BE983F8], v25);
  __swift_storeEnumTagSinglePayload((uint64_t)v35, 0, 1, v25);
  v37 = v20 + *(int *)(v27 + 48);
  outlined init with copy of ConfirmationResponse?(v22, v20);
  outlined init with copy of ConfirmationResponse?((uint64_t)v35, v37);
  OUTLINED_FUNCTION_6_2(v20, 1, v25);
  if (v38)
  {
    outlined destroy of FlowActivity?((uint64_t)v35, &demangling cache variable for type metadata for ConfirmationResponse?);
    outlined destroy of FlowActivity?(v22, &demangling cache variable for type metadata for ConfirmationResponse?);
    OUTLINED_FUNCTION_6_2(v37, 1, v25);
  }
  else
  {
    outlined init with copy of ConfirmationResponse?(v20, (uint64_t)v32);
    OUTLINED_FUNCTION_6_2(v37, 1, v25);
    if (v38)
    {
      outlined destroy of FlowActivity?((uint64_t)v35, &demangling cache variable for type metadata for ConfirmationResponse?);
      outlined destroy of FlowActivity?(v22, &demangling cache variable for type metadata for ConfirmationResponse?);
      OUTLINED_FUNCTION_35_1((uint64_t)v32, *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
    }
    else
    {
      OUTLINED_FUNCTION_96_2(v21, v37, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 32));
      lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ConfirmationResponse and conformance ConfirmationResponse, (void (*)(uint64_t))MEMORY[0x24BE98408]);
      OUTLINED_FUNCTION_64_7();
      dispatch thunk of static Equatable.== infix(_:_:)();
      v39 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
      v39(v21, v25);
      OUTLINED_FUNCTION_93_4((uint64_t)v35);
      OUTLINED_FUNCTION_93_4(v22);
      v39((uint64_t)v32, v25);
    }
  }
  OUTLINED_FUNCTION_93_4(v20);
  OUTLINED_FUNCTION_7();
}

void ContactNLv3Intent.isContactDomain.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NonTerminalIntentNode?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v1);
  OUTLINED_FUNCTION_37_2();
  OUTLINED_FUNCTION_14_14();
  NLIntent.domainNode.getter();
  v2 = OUTLINED_FUNCTION_85_6();
  v3 = OUTLINED_FUNCTION_6_2(v0, 1, v2);
  if (v7)
  {
    OUTLINED_FUNCTION_57_7(v3, &demangling cache variable for type metadata for NonTerminalIntentNode?);
  }
  else
  {
    v4 = NonTerminalIntentNode.ontologyNodeName.getter();
    v6 = v5;
    OUTLINED_FUNCTION_35_1(v0, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8));
    if (v6)
    {
      v7 = v4 == 0x746361746E6F63 && v6 == 0xE700000000000000;
      if (!v7)
        OUTLINED_FUNCTION_11_18();
      OUTLINED_FUNCTION_5();
    }
  }
  OUTLINED_FUNCTION_22_6();
}

void ContactNLv3Intent.isCancel.getter()
{
  if (one-time initialization token for contactConfirmation != -1)
    swift_once();
  OUTLINED_FUNCTION_14_14();
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  OUTLINED_FUNCTION_61_6();
  OUTLINED_FUNCTION_24_19();
}

uint64_t protocol witness for IntentNodeTraversable.traversableIntentNode.getter in conformance ContactNLv3Intent()
{
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  return NLIntentWrapper.traversableIntentNode.getter();
}

uint64_t protocol witness for IntentNodeTraversable.traversableOntologyNode.getter in conformance ContactNLv3Intent()
{
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  return NLIntentWrapper.traversableOntologyNode.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ContactNLv3Intent()
{
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
  return NLIntentWrapper.description.getter();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<DisplayHint>, (void (*)(_QWORD))MEMORY[0x24BE97730]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SemanticValue>, (void (*)(_QWORD))MEMORY[0x24BE97A98]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RREntity>, (void (*)(_QWORD))MEMORY[0x24BEA5A70]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserDialogAct>, (void (*)(_QWORD))MEMORY[0x24BE9C828]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<GetContactAttributeSnippetModel.DisplayAttribute>, (void (*)(_QWORD))MEMORY[0x24BE91E60]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<TemplatingSection>, (void (*)(_QWORD))MEMORY[0x24BE98188]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ContactHandle>, (void (*)(_QWORD))MEMORY[0x24BE935E0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Contact>, (void (*)(_QWORD))MEMORY[0x24BE93CC0]);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(_QWORD))
{
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  size_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_47_9();
    if (v10 != v11)
    {
      OUTLINED_FUNCTION_102_4();
      if (v10)
      {
        __break(1u);
        goto LABEL_23;
      }
      OUTLINED_FUNCTION_44_9();
    }
  }
  else
  {
    v9 = a2;
  }
  v12 = *(_QWORD *)(a4 + 16);
  if (v9 <= v12)
    v13 = *(_QWORD *)(a4 + 16);
  else
    v13 = v9;
  if (!v13)
  {
    v17 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v14 = *(_QWORD *)(((uint64_t (*)(_QWORD))a6)(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v17 = (_QWORD *)swift_allocObject();
  v18 = _swift_stdlib_malloc_size(v17);
  if (!v15 || (v18 - v16 == 0x8000000000000000 ? (v19 = v15 == -1) : (v19 = 0), v19))
  {
LABEL_23:
    OUTLINED_FUNCTION_2_31();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v17[2] = v12;
  v17[3] = 2 * ((uint64_t)(v18 - v16) / v15);
LABEL_18:
  v20 = *(unsigned __int8 *)(*(_QWORD *)(((uint64_t (*)(_QWORD))a6)(0) - 8) + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = (unint64_t)v17 + v21;
  if ((a1 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4 + v21, v12, v22, a6);
    *(_QWORD *)(a4 + 16) = 0;
    OUTLINED_FUNCTION_5_0();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v12, v22, a4, (uint64_t (*)(_QWORD))a6);
  }
  return (uint64_t)v17;
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v8;
  char v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_47_9();
    if (v8 != v9)
    {
      OUTLINED_FUNCTION_102_4();
      if (v8)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_44_9();
    }
  }
  OUTLINED_FUNCTION_67_7();
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v10 = OUTLINED_FUNCTION_13_3();
    v11 = _swift_stdlib_malloc_size((const void *)v10);
    *(_QWORD *)(v10 + 16) = v4;
    *(_QWORD *)(v10 + 24) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    v10 = MEMORY[0x24BEE4AF8];
  }
  if ((a1 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v4, (char *)(v10 + 32));
    *(_QWORD *)(a4 + 16) = 0;
    OUTLINED_FUNCTION_5_0();
  }
  else
  {
    v12 = OUTLINED_FUNCTION_66_12();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v12, v13, v14, v15);
  }
  OUTLINED_FUNCTION_22_6();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4);
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4);
}

{
  size_t v4;
  uint64_t v5;
  char v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_47_9();
    if (v8 != v9)
    {
      OUTLINED_FUNCTION_102_4();
      if (v8)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_44_9();
    }
  }
  OUTLINED_FUNCTION_67_7();
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(v10);
    v11 = OUTLINED_FUNCTION_13_3();
    v12 = _swift_stdlib_malloc_size((const void *)v11);
    *(_QWORD *)(v11 + 16) = v4;
    *(_QWORD *)(v11 + 24) = 2 * v12 - 64;
  }
  else
  {
    v11 = MEMORY[0x24BEE4AF8];
  }
  if ((a1 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v4, (char *)(v11 + 32));
    *(_QWORD *)(a4 + 16) = 0;
    OUTLINED_FUNCTION_5_0();
  }
  else
  {
    v13 = OUTLINED_FUNCTION_66_12();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v13, v14, v15, v16);
  }
  OUTLINED_FUNCTION_22_6();
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4);
}

{
  uint64_t v4;
  uint64_t v5;
  char v8;
  char v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  if ((a3 & 1) != 0)
  {
    OUTLINED_FUNCTION_47_9();
    if (v8 != v9)
    {
      OUTLINED_FUNCTION_102_4();
      if (v8)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_44_9();
    }
  }
  OUTLINED_FUNCTION_67_7();
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
    v10 = OUTLINED_FUNCTION_13_3();
    v11 = _swift_stdlib_malloc_size((const void *)v10);
    *(_QWORD *)(v10 + 16) = v4;
    *(_QWORD *)(v10 + 24) = 2 * ((uint64_t)(v11 - 32) / 32);
  }
  else
  {
    v10 = MEMORY[0x24BEE4AF8];
  }
  if ((a1 & 1) != 0)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v4, (char *)(v10 + 32));
    *(_QWORD *)(a4 + 16) = 0;
    OUTLINED_FUNCTION_5_0();
  }
  else
  {
    v12 = OUTLINED_FUNCTION_66_12();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v12, v13, v14, v15);
  }
  OUTLINED_FUNCTION_22_6();
}

uint64_t type metadata accessor for ContactNLv3Intent()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ContactNLv3Intent;
  if (!type metadata singleton initialization cache for ContactNLv3Intent)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined init with copy of ConfirmationResponse?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConfirmationResponse?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ContactNLv3Constants and conformance ContactNLv3Constants()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Constants and conformance ContactNLv3Constants;
  if (!lazy protocol witness table cache variable for type ContactNLv3Constants and conformance ContactNLv3Constants)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Constants, &type metadata for ContactNLv3Constants);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Constants and conformance ContactNLv3Constants);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactAttributesValue, &type metadata for ContactNLv3Intent.NLContactAttributesValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactAttributesValue, &type metadata for ContactNLv3Intent.NLContactAttributesValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactAttributesValue, &type metadata for ContactNLv3Intent.NLContactAttributesValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactAttributesValue, &type metadata for ContactNLv3Intent.NLContactAttributesValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactAttributesValue, &type metadata for ContactNLv3Intent.NLContactAttributesValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactAttributesValue, &type metadata for ContactNLv3Intent.NLContactAttributesValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttributesValue and conformance ContactNLv3Intent.NLContactAttributesValue);
  }
  return result;
}

void associated type witness table accessor for CaseIterable.AllCases : Collection in ContactNLv3Intent.NLContactAttributesValue()
{
  lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](&lazy protocol witness table cache variable for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A], &demangling cache variable for type metadata for [ContactNLv3Intent.NLContactAttributesValue]);
}

unint64_t lazy protocol witness table accessor for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactVerbValue, &type metadata for ContactNLv3Intent.NLContactVerbValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactVerbValue, &type metadata for ContactNLv3Intent.NLContactVerbValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactVerbValue, &type metadata for ContactNLv3Intent.NLContactVerbValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactVerbValue, &type metadata for ContactNLv3Intent.NLContactVerbValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactVerbValue, &type metadata for ContactNLv3Intent.NLContactVerbValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactVerbValue, &type metadata for ContactNLv3Intent.NLContactVerbValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactVerbValue and conformance ContactNLv3Intent.NLContactVerbValue);
  }
  return result;
}

void associated type witness table accessor for CaseIterable.AllCases : Collection in ContactNLv3Intent.NLContactVerbValue()
{
  lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](&lazy protocol witness table cache variable for type [ContactNLv3Intent.NLContactVerbValue] and conformance [A], &demangling cache variable for type metadata for [ContactNLv3Intent.NLContactVerbValue]);
}

unint64_t lazy protocol witness table accessor for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactNounValue, &type metadata for ContactNLv3Intent.NLContactNounValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactNounValue, &type metadata for ContactNLv3Intent.NLContactNounValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactNounValue, &type metadata for ContactNLv3Intent.NLContactNounValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactNounValue, &type metadata for ContactNLv3Intent.NLContactNounValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactNounValue, &type metadata for ContactNLv3Intent.NLContactNounValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactNounValue, &type metadata for ContactNLv3Intent.NLContactNounValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactNounValue and conformance ContactNLv3Intent.NLContactNounValue);
  }
  return result;
}

void associated type witness table accessor for CaseIterable.AllCases : Collection in ContactNLv3Intent.NLContactNounValue()
{
  lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](&lazy protocol witness table cache variable for type [ContactNLv3Intent.NLContactNounValue] and conformance [A], &demangling cache variable for type metadata for [ContactNLv3Intent.NLContactNounValue]);
}

unint64_t lazy protocol witness table accessor for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactConfirmationValue, &type metadata for ContactNLv3Intent.NLContactConfirmationValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactConfirmationValue, &type metadata for ContactNLv3Intent.NLContactConfirmationValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactConfirmationValue, &type metadata for ContactNLv3Intent.NLContactConfirmationValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactConfirmationValue, &type metadata for ContactNLv3Intent.NLContactConfirmationValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactConfirmationValue, &type metadata for ContactNLv3Intent.NLContactConfirmationValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactConfirmationValue, &type metadata for ContactNLv3Intent.NLContactConfirmationValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactConfirmationValue and conformance ContactNLv3Intent.NLContactConfirmationValue);
  }
  return result;
}

void associated type witness table accessor for CaseIterable.AllCases : Collection in ContactNLv3Intent.NLContactConfirmationValue()
{
  lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](&lazy protocol witness table cache variable for type [ContactNLv3Intent.NLContactConfirmationValue] and conformance [A], &demangling cache variable for type metadata for [ContactNLv3Intent.NLContactConfirmationValue]);
}

unint64_t lazy protocol witness table accessor for type ContactNLv3Intent.NLContactAttribute and conformance ContactNLv3Intent.NLContactAttribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttribute and conformance ContactNLv3Intent.NLContactAttribute;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttribute and conformance ContactNLv3Intent.NLContactAttribute)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactAttribute, &type metadata for ContactNLv3Intent.NLContactAttribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactAttribute and conformance ContactNLv3Intent.NLContactAttribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactReferenceValue, &type metadata for ContactNLv3Intent.NLContactReferenceValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactReferenceValue, &type metadata for ContactNLv3Intent.NLContactReferenceValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactReferenceValue, &type metadata for ContactNLv3Intent.NLContactReferenceValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactReferenceValue, &type metadata for ContactNLv3Intent.NLContactReferenceValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactReferenceValue, &type metadata for ContactNLv3Intent.NLContactReferenceValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue;
  if (!lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactNLv3Intent.NLContactReferenceValue, &type metadata for ContactNLv3Intent.NLContactReferenceValue);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactNLv3Intent.NLContactReferenceValue and conformance ContactNLv3Intent.NLContactReferenceValue);
  }
  return result;
}

void associated type witness table accessor for CaseIterable.AllCases : Collection in ContactNLv3Intent.NLContactReferenceValue()
{
  lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](&lazy protocol witness table cache variable for type [ContactNLv3Intent.NLContactReferenceValue] and conformance [A], &demangling cache variable for type metadata for [ContactNLv3Intent.NLContactReferenceValue]);
}

void base witness table accessor for IntentNodeTraversable in ContactNLv3Intent()
{
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
}

void base witness table accessor for CustomStringConvertible in ContactNLv3Intent()
{
  lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(&lazy protocol witness table cache variable for type ContactNLv3Intent and conformance ContactNLv3Intent, (void (*)(uint64_t))type metadata accessor for ContactNLv3Intent);
}

uint64_t getEnumTagSinglePayload for ContactNLv3Constants(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xE9)
  {
    if (a2 + 23 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 23) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 24;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x18;
  v5 = v6 - 24;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ContactNLv3Constants(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 23 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 23) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE8)
    return ((uint64_t (*)(void))((char *)&loc_21FE7BB64 + 4 * byte_21FEDB29F[v4]))();
  *a1 = a2 + 23;
  return ((uint64_t (*)(void))((char *)sub_21FE7BB98 + 4 * byte_21FEDB29A[v4]))();
}

uint64_t sub_21FE7BB98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE7BBA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FE7BBA8);
  return result;
}

uint64_t sub_21FE7BBB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FE7BBBCLL);
  *(_BYTE *)result = a2 + 23;
  return result;
}

uint64_t sub_21FE7BBC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE7BBC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ContactNLv3Constants()
{
  OUTLINED_FUNCTION_34_11();
}

uint64_t *initializeBufferWithCopyOfBuffer for ContactNLv3Intent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for NLIntent();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_retain();
    v12(v9, v10, v11);
    *(uint64_t *)((char *)v7 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for ContactNLv3Intent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for NLIntent();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ContactNLv3Intent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for NLIntent();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_retain();
  v10(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ContactNLv3Intent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_retain();
  swift_release();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for NLIntent();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *initializeWithTake for ContactNLv3Intent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for NLIntent();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *assignWithTake for ContactNLv3Intent(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_release();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for NLIntent();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ContactNLv3Intent()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_21FE7BF28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    OUTLINED_FUNCTION_22_6();
  }
  else
  {
    v6 = OUTLINED_FUNCTION_52_9();
    __swift_getEnumTagSinglePayload(a1 + *(int *)(a3 + 20), a2, v6);
  }
}

uint64_t storeEnumTagSinglePayload for ContactNLv3Intent()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_21FE7BF9C(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 0x7FFFFFFF)
  {
    *a1 = (a2 - 1);
    OUTLINED_FUNCTION_22_6();
  }
  else
  {
    v7 = OUTLINED_FUNCTION_52_9();
    __swift_storeEnumTagSinglePayload((uint64_t)a1 + *(int *)(a4 + 20), a2, a2, v7);
  }
}

uint64_t type metadata completion function for ContactNLv3Intent()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for NLIntent();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ContactNLv3Intent.NLContactAttributesValue(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xBB)
  {
    if (a2 + 69 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 69) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 70;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x46;
  v5 = v6 - 70;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ContactNLv3Intent.NLContactAttributesValue(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 69 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 69) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xBB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xBA)
    return ((uint64_t (*)(void))((char *)&loc_21FE7C154 + 4 * byte_21FEDB2A9[v4]))();
  *a1 = a2 + 69;
  return ((uint64_t (*)(void))((char *)sub_21FE7C188 + 4 * byte_21FEDB2A4[v4]))();
}

uint64_t sub_21FE7C188(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE7C190(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FE7C198);
  return result;
}

uint64_t sub_21FE7C1A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FE7C1ACLL);
  *(_BYTE *)result = a2 + 69;
  return result;
}

uint64_t sub_21FE7C1B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE7C1B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ContactNLv3Intent.NLContactAttributesValue()
{
  OUTLINED_FUNCTION_34_11();
}

uint64_t getEnumTagSinglePayload for ContactNLv3Intent.NLContactVerbValue(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF0)
  {
    if (a2 + 16 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 16) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 17;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x11;
  v5 = v6 - 17;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ContactNLv3Intent.NLContactVerbValue(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_21FE7C2A4 + 4 * byte_21FEDB2B3[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_21FE7C2D8 + 4 * byte_21FEDB2AE[v4]))();
}

uint64_t sub_21FE7C2D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE7C2E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FE7C2E8);
  return result;
}

uint64_t sub_21FE7C2F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FE7C2FCLL);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_21FE7C300(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE7C308(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ContactNLv3Intent.NLContactVerbValue()
{
  OUTLINED_FUNCTION_34_11();
}

uint64_t storeEnumTagSinglePayload for ContactNLv3Intent.NLContactNounValue(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21FE7C36C + 4 * byte_21FEDB2BD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21FE7C3A0 + 4 * byte_21FEDB2B8[v4]))();
}

uint64_t sub_21FE7C3A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE7C3A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FE7C3B0);
  return result;
}

uint64_t sub_21FE7C3BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FE7C3C4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21FE7C3C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE7C3D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ContactNLv3Intent.NLContactNounValue()
{
  OUTLINED_FUNCTION_34_11();
}

uint64_t getEnumTagSinglePayload for ContactNLv3Intent.NLContactConfirmationValue(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 4) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v5 = v6 - 5;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ContactNLv3Intent.NLContactConfirmationValue(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_21FE7C4BC + 4 * byte_21FEDB2C7[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_21FE7C4F0 + 4 * byte_21FEDB2C2[v4]))();
}

uint64_t sub_21FE7C4F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE7C4F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FE7C500);
  return result;
}

uint64_t sub_21FE7C50C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FE7C514);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_21FE7C518(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE7C520(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ContactNLv3Intent.NLContactConfirmationValue()
{
  OUTLINED_FUNCTION_34_11();
}

uint64_t storeEnumTagSinglePayload for ContactNLv3Intent.NLContactAttribute(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_21FE7C584 + 4 * byte_21FEDB2D1[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_21FE7C5B8 + 4 * byte_21FEDB2CC[v4]))();
}

uint64_t sub_21FE7C5B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE7C5C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FE7C5C8);
  return result;
}

uint64_t sub_21FE7C5D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FE7C5DCLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_21FE7C5E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE7C5E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ContactNLv3Intent.NLContactAttribute()
{
  OUTLINED_FUNCTION_34_11();
}

uint64_t getEnumTagSinglePayload for ContactNLv3Intent.NLContactReferenceValue(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xDB)
  {
    if (a2 + 37 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 37) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 38;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x26;
  v5 = v6 - 38;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ContactNLv3Intent.NLContactReferenceValue(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 37 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 37) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xDB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xDA)
    return ((uint64_t (*)(void))((char *)&loc_21FE7C6D4 + 4 * byte_21FEDB2DB[v4]))();
  *a1 = a2 + 37;
  return ((uint64_t (*)(void))((char *)sub_21FE7C708 + 4 * byte_21FEDB2D6[v4]))();
}

uint64_t sub_21FE7C708(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE7C710(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FE7C718);
  return result;
}

uint64_t sub_21FE7C724(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FE7C72CLL);
  *(_BYTE *)result = a2 + 37;
  return result;
}

uint64_t sub_21FE7C730(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE7C738(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ContactNLv3Intent.NLContactReferenceValue()
{
  OUTLINED_FUNCTION_34_11();
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, String));
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      OUTLINED_FUNCTION_5_0();
      return v6;
    }
  }
  OUTLINED_FUNCTION_2_31();
  result = (char *)OUTLINED_FUNCTION_19_20();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      OUTLINED_FUNCTION_5_0();
      return v14;
    }
  }
  OUTLINED_FUNCTION_2_31();
  result = OUTLINED_FUNCTION_19_20();
  __break(1u);
  return result;
}

void specialized UnsafeMutablePointer.moveInitialize(from:count:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x24BE9F9A0]);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x24BE97A98]);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x24BE9D110]);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x24BE93CC0]);
}

void specialized UnsafeMutablePointer.moveInitialize(from:count:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_2_31();
    OUTLINED_FUNCTION_6_23();
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_87_5();
    if (v4
      && (__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue)),
          OUTLINED_FUNCTION_76_7(),
          !v5 & v4))
    {
      if (v3 == v2)
      {
        OUTLINED_FUNCTION_65_9();
      }
      else
      {
        OUTLINED_FUNCTION_28_12();
        OUTLINED_FUNCTION_31_15();
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (displayHints: [DisplayHint], idValue: SemanticValue));
      OUTLINED_FUNCTION_28_12();
      OUTLINED_FUNCTION_32_13();
    }
  }
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_2_31();
    result = (char *)OUTLINED_FUNCTION_6_23();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_33_9(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_2_31();
    result = (char *)OUTLINED_FUNCTION_6_23();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_33_9(a3, result);
  }
  return result;
}

void specialized UnsafeMutablePointer.moveInitialize(from:count:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  char v7;
  char v8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_2_31();
    OUTLINED_FUNCTION_6_23();
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_87_5();
    if (v7 && (a4(0), OUTLINED_FUNCTION_76_7(), !v8 & v7))
    {
      if (v5 == v4)
      {
        OUTLINED_FUNCTION_65_9();
      }
      else
      {
        OUTLINED_FUNCTION_28_12();
        OUTLINED_FUNCTION_31_15();
      }
    }
    else
    {
      a4(0);
      OUTLINED_FUNCTION_28_12();
      OUTLINED_FUNCTION_32_13();
    }
  }
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[32 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 32 * a2);
  }
  return __src;
}

void lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](_QWORD *a1, uint64_t *a2)
{
  if (!*a1)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    OUTLINED_FUNCTION_92_3();
  }
  OUTLINED_FUNCTION_31_0();
}

void lazy protocol witness table accessor for type ContactNLv3Intent and conformance ContactNLv3Intent(_QWORD *a1, void (*a2)(uint64_t))
{
  if (!*a1)
  {
    a2(255);
    OUTLINED_FUNCTION_92_3();
  }
  OUTLINED_FUNCTION_31_0();
}

uint64_t OUTLINED_FUNCTION_3_19()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_6_23()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_7_22()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_11_18()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_13_26()
{
  uint64_t v0;

  return outlined destroy of ContactNLv3Intent(v0);
}

uint64_t OUTLINED_FUNCTION_14_22@<X0>(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 1) = a1;
  return ContactNLv3Intent.containsAttribute(_:)();
}

uint64_t OUTLINED_FUNCTION_17_12(uint64_t a1)
{
  uint64_t v1;

  return outlined init with copy of ContactNLv3Intent(a1, v1);
}

uint64_t OUTLINED_FUNCTION_19_20()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

void OUTLINED_FUNCTION_21_16(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  one-time initialization function for contactId(a1, a2, a3 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a4, a5);
}

void OUTLINED_FUNCTION_23_17(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  one-time initialization function for contactId(a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000, a5);
}

uint64_t OUTLINED_FUNCTION_25_21()
{
  uint64_t v0;

  return outlined destroy of ContactNLv3Intent(v0);
}

uint64_t OUTLINED_FUNCTION_27_15()
{
  uint64_t v0;

  return outlined destroy of ContactNLv3Intent(v0);
}

uint64_t OUTLINED_FUNCTION_28_12()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_31_15()
{
  return swift_arrayInitWithTakeBackToFront();
}

uint64_t OUTLINED_FUNCTION_32_13()
{
  return swift_arrayInitWithTakeFrontToBack();
}

void *OUTLINED_FUNCTION_33_9@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  size_t v2;

  return memmove(__dst, a2, v2);
}

void OUTLINED_FUNCTION_42_5(_QWORD *a1)
{
  uint64_t *v1;

  lazy protocol witness table accessor for type [ContactNLv3Intent.NLContactAttributesValue] and conformance [A](a1, v1);
}

uint64_t OUTLINED_FUNCTION_43_10()
{
  uint64_t *v0;

  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_46_8()
{
  uint64_t v0;

  return outlined destroy of ContactNLv3Intent(v0);
}

uint64_t OUTLINED_FUNCTION_49_12()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_51_8()
{
  uint64_t v0;

  return outlined destroy of ContactNLv3Intent(v0);
}

uint64_t OUTLINED_FUNCTION_52_9()
{
  return type metadata accessor for NLIntent();
}

uint64_t OUTLINED_FUNCTION_55_9()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_56_9()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with copy of ContactNLv3Intent(v0, v1);
}

void OUTLINED_FUNCTION_57_7(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of FlowActivity?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_59_10()
{
  return IntentNodeTraversable.value<A>(forNode:)();
}

uint64_t OUTLINED_FUNCTION_60_10()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_61_6()
{
  return IntentNodeTraversable.value<A>(forNode:)();
}

uint64_t OUTLINED_FUNCTION_62_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_64_7()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_66_12()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_68_11()
{
  return IntentNodeTraversable.value<A>(forNode:)();
}

uint64_t OUTLINED_FUNCTION_70_9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return __swift_storeEnumTagSinglePayload(v4, 1, 1, a4);
}

uint64_t OUTLINED_FUNCTION_71_7()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_75_7()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_80_6(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of FlowActivity?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_81_3()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

Swift::Int OUTLINED_FUNCTION_82_3(Swift::OpaquePointer a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  return _findStringSwitchCase(cases:string:)(a1, *(Swift::String *)&a2);
}

uint64_t OUTLINED_FUNCTION_85_6()
{
  return type metadata accessor for NonTerminalIntentNode();
}

uint64_t OUTLINED_FUNCTION_86_4()
{
  return type metadata accessor for PersonIntentNode();
}

void OUTLINED_FUNCTION_91_5(char a1, uint64_t a2)
{
  uint64_t v2;

  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

void OUTLINED_FUNCTION_92_3()
{
  JUMPOUT(0x2207D86A8);
}

void OUTLINED_FUNCTION_93_4(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of FlowActivity?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_94_4()
{
  return IntentNodeTraversable.value<A>(forNode:)();
}

uint64_t OUTLINED_FUNCTION_95_3()
{
  return _findStringSwitchCaseWithCache(cases:string:cache:)();
}

uint64_t OUTLINED_FUNCTION_96_2@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t OUTLINED_FUNCTION_97_2()
{
  uint64_t v0;

  return v0;
}

uint64_t PluginPrewarmProvider.previousRefId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return swift_bridgeObjectRelease();
}

void PluginPrewarmProvider.__allocating_init()()
{
  OUTLINED_FUNCTION_2_32();
  swift_allocObject();
  PluginPrewarmProvider.init()();
  OUTLINED_FUNCTION_31_0();
}

_QWORD *PluginPrewarmProvider.init()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;

  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  OUTLINED_FUNCTION_0_30();
  v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8](v4);
  OUTLINED_FUNCTION_1_30();
  v6 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v6);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.userInteractive.getter();
  lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v5, MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v1, *MEMORY[0x24BEE5750], v2);
  v7 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v0[3] = 0;
  v0[4] = 0;
  v0[2] = v7;
  return v0;
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

Swift::Void __swiftcall PluginPrewarmProvider.prewarm(refId:)(Swift::String refId)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  _QWORD aBlock[6];

  v4 = v1;
  object = refId._object;
  countAndFlagsBits = refId._countAndFlagsBits;
  v7 = type metadata accessor for DispatchWorkItemFlags();
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458];
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  OUTLINED_FUNCTION_0_30();
  v10 = type metadata accessor for DispatchQoS();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  OUTLINED_FUNCTION_1_30();
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = countAndFlagsBits;
  v12[3] = object;
  v12[4] = v4;
  aBlock[4] = partial apply for closure #1 in PluginPrewarmProvider.prewarm(refId:);
  aBlock[5] = v12;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_0;
  v13 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v8, MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x2207D7ED4](0, v3, v2, v13);
  _Block_release(v13);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v2, v7);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v3, v10);
  swift_release();
}

void closure #1 in PluginPrewarmProvider.prewarm(refId:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 + 32);
  if (v5
    && (*(_QWORD *)(a3 + 24) == a1 ? (v6 = v5 == a2) : (v6 = 0),
        v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.siriContacts);
    swift_bridgeObjectRetain_n();
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      v17 = v11;
      *(_DWORD *)v10 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_21FE16000, v8, v9, "[PluginPrewarmProvider] refId: %s already prewarmed", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207D8768](v11, -1, -1);
      MEMORY[0x2207D8768](v10, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.siriContacts);
    swift_bridgeObjectRetain_n();
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      v16 = swift_slowAlloc();
      v17 = v16;
      *(_DWORD *)v15 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_21FE16000, v13, v14, "[PluginPrewarmProvider] for refId: %s", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x2207D8768](v16, -1, -1);
      MEMORY[0x2207D8768](v15, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    PluginPrewarmProvider.prewarm()();
    swift_bridgeObjectRetain();
    PluginPrewarmProvider.previousRefId.setter(a1, a2);
  }
}

uint64_t sub_21FE7DE70()
{
  swift_bridgeObjectRelease();
  swift_release();
  OUTLINED_FUNCTION_2_32();
  return swift_deallocObject();
}

void partial apply for closure #1 in PluginPrewarmProvider.prewarm(refId:)()
{
  uint64_t v0;

  closure #1 in PluginPrewarmProvider.prewarm(refId:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

void lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  if (!*a1)
  {
    v3 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    atomic_store(MEMORY[0x2207D86A8](MEMORY[0x24BEE12C8], v3), a1);
  }
  OUTLINED_FUNCTION_31_0();
}

uint64_t PluginPrewarmProvider.prewarm()()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;

  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.siriContacts);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_21FE16000, v1, v2, "[PluginPrewarmProvider] ContactResolver.refreshSharedCache()", v3, 2u);
    MEMORY[0x2207D8768](v3, -1, -1);
  }

  type metadata accessor for ContactResolver();
  return static ContactResolver.refreshSharedCache()();
}

uint64_t PluginPrewarmProvider.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PluginPrewarmProvider.__deallocating_deinit()
{
  PluginPrewarmProvider.deinit();
  OUTLINED_FUNCTION_2_32();
  return swift_deallocClassInstance();
}

void protocol witness for PluginPrewarmProviding.prewarm(refId:) in conformance PluginPrewarmProvider(uint64_t a1, uint64_t a2)
{
  PluginPrewarmProvider.prewarm(refId:)(*(Swift::String *)&a1);
}

uint64_t dispatch thunk of PluginPrewarmProviding.prewarm(refId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t type metadata accessor for PluginPrewarmProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for PluginPrewarmProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PluginPrewarmProvider.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of PluginPrewarmProvider.prewarm(refId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t OUTLINED_FUNCTION_0_30()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_2_32()
{
  uint64_t v0;

  return v0;
}

uint64_t GenericViews.missingMeCardOutput(catFamily:deviceState:ttsEnabled:canUseServerTTS:contactAttributeType:isMe:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v8 + 168) = a6;
  *(_QWORD *)(v8 + 176) = a8;
  *(_BYTE *)(v8 + 242) = a7;
  *(_BYTE *)(v8 + 241) = a5;
  *(_BYTE *)(v8 + 240) = a4;
  *(_QWORD *)(v8 + 152) = a2;
  *(_QWORD *)(v8 + 160) = a3;
  *(_QWORD *)(v8 + 144) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  *(_QWORD *)(v8 + 184) = OUTLINED_FUNCTION_0_0();
  v9 = type metadata accessor for TemplatingResult();
  *(_QWORD *)(v8 + 192) = v9;
  *(_QWORD *)(v8 + 200) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 208) = OUTLINED_FUNCTION_0_0();
  return swift_task_switch();
}

uint64_t GenericViews.missingMeCardOutput(catFamily:deviceState:ttsEnabled:canUseServerTTS:contactAttributeType:isMe:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 176);
  outlined init with copy of DeviceState(*(_QWORD *)(v0 + 160), v0 + 16);
  *(_QWORD *)(v0 + 88) = &type metadata for InstalledAppsProvider;
  *(_QWORD *)(v0 + 96) = &protocol witness table for InstalledAppsProvider;
  *(_QWORD *)(v0 + 56) = v1;
  swift_retain();
  specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:)();
  *(_QWORD *)(v0 + 216) = v2;
  outlined destroy of MissingMeCardViewBuilder(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 224) = v3;
  *v3 = v0;
  v3[1] = GenericViews.missingMeCardOutput(catFamily:deviceState:ttsEnabled:canUseServerTTS:contactAttributeType:isMe:);
  return ContactsCommonCATs.missingMeCard(deviceState:contactAttributeType:isMe:)(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168), *(_BYTE *)(v0 + 242));
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 232) = v0;
  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = type metadata accessor for NLContextUpdate();
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v4);
  *(_QWORD *)(v0 + 136) = 0;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  swift_bridgeObjectRelease();
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v0 + 104, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v3, &demangling cache variable for type metadata for NLContextUpdate?);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t GenericViews.buildConfirmationViewForMacAndCarPlay(contactAttributeType:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  uint64_t v19;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v5 = OUTLINED_FUNCTION_55();
  v18 = xmmword_21FED8AB0;
  *(_OWORD *)(v5 + 16) = xmmword_21FED8AB0;
  *(_OWORD *)(OUTLINED_FUNCTION_55() + 16) = v18;
  v6 = static ContactsDirectInvocations.confirm()();
  OUTLINED_FUNCTION_1_31((uint64_t)v6);
  v7 = v19;
  v8 = GenericViews.getConfirmText(forAttribute:)(a1);
  v10 = v9;
  *(_OWORD *)(OUTLINED_FUNCTION_55() + 16) = v18;
  v11 = static ContactsDirectInvocations.deny()();
  OUTLINED_FUNCTION_1_31((uint64_t)v11);
  v12 = v19;
  ContactsLabelCATs.cancel()();
  v13 = Result<>.firstPrint.getter();
  v15 = v14;
  outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  if (!v15)
  {
    v13 = static String.EMPTY.getter();
    v15 = v16;
  }
  type metadata accessor for SAUIConfirmationView();
  *(_QWORD *)(v5 + 32) = SAUIConfirmationView.init(confirmCommands:confirmText:denyCommands:denyText:)(v7, v8, v10, v12, v13, v15);
  v19 = v5;
  specialized Array._endMutation()();
  return v19;
}

uint64_t GenericViews.getConfirmText(forAttribute:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v14 - v6;
  if (a1 == 6)
  {
    ContactsLabelCATs.save()();
    v8 = Result<>.firstPrint.getter();
    v10 = v12;
    v11 = (uint64_t)v5;
  }
  else
  {
    if (a1 != 10)
      return static String.EMPTY.getter();
    ContactsLabelCATs.yes()();
    v8 = Result<>.firstPrint.getter();
    v10 = v9;
    v11 = (uint64_t)v7;
  }
  outlined destroy of UsoEntity_common_Person.DefinedValues?(v11, (uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  if (!v10)
    return static String.EMPTY.getter();
  return v8;
}

uint64_t outlined destroy of MissingMeCardViewBuilder(uint64_t a1)
{
  destroy for MissingMeCardViewBuilder(a1);
  return a1;
}

unint64_t type metadata accessor for SAUIConfirmationView()
{
  unint64_t result;

  result = lazy cache variable for type metadata for SAUIConfirmationView;
  if (!lazy cache variable for type metadata for SAUIConfirmationView)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SAUIConfirmationView);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_31(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 32) = a1;
  *(_QWORD *)(v2 - 88) = v1;
  return specialized Array._endMutation()();
}

uint64_t DialogLocationAddress.init(postalAddress:localeString:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  id v7;
  uint64_t v8;
  objc_class *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for CATOption();
  MEMORY[0x24BDAC7A8](v6);
  if (a1)
  {
    type metadata accessor for DialogLocationAddress.Builder();
    OUTLINED_FUNCTION_32_0();
    v7 = a1;
    DialogLocationAddress.Builder.init()();
    type metadata accessor for ContactsLabelCATs();
    static CATOption.defaultMode.getter();
    v8 = CATWrapper.__allocating_init(options:globals:)();
    v9 = (objc_class *)outlined bridged method (pb) of @objc PostalAddress.handleLabel.getter(v7);
    if (v10)
    {
      v9 = (objc_class *)String.sanitizeCNLabel.getter();
      v12 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      v12 = 0;
    }
    v14 = LabelMapper.localizedLabel(handleLabel:localeString:type:)(v9, v12, a2, a3, 3, v8);
    OUTLINED_FUNCTION_2();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    dispatch thunk of DialogLocationAddress.Builder.withName(print:speak:)();
    OUTLINED_FUNCTION_66();
    swift_bridgeObjectRelease();
    outlined bridged method (pb) of @objc PostalAddress.country.getter(v7);
    OUTLINED_FUNCTION_5_19();
    OUTLINED_FUNCTION_1_32();
    if (v14)
    {
      OUTLINED_FUNCTION_0_31();
      dispatch thunk of DialogLocationAddress.Builder.withCountry(print:speak:)();
      OUTLINED_FUNCTION_2_33();
      OUTLINED_FUNCTION_2();
    }
    outlined bridged method (pb) of @objc PostalAddress.isoCountryCode.getter(v7);
    OUTLINED_FUNCTION_5_19();
    OUTLINED_FUNCTION_1_32();
    if (v14)
    {
      OUTLINED_FUNCTION_0_31();
      dispatch thunk of DialogLocationAddress.Builder.withCountryCode(print:speak:)();
      OUTLINED_FUNCTION_2_33();
      OUTLINED_FUNCTION_2();
    }
    outlined bridged method (pb) of @objc PostalAddress.state.getter(v7);
    Optional<A>.emptyToNil.getter();
    v16 = v15;
    swift_bridgeObjectRelease();
    if (v16)
    {
      OUTLINED_FUNCTION_6_24();
      dispatch thunk of DialogLocationAddress.Builder.withAdministrativeArea(print:speak:)();
      OUTLINED_FUNCTION_6_24();
      dispatch thunk of DialogLocationAddress.Builder.withAdministrativeAreaCode(print:speak:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_66();
      OUTLINED_FUNCTION_2();
    }
    outlined bridged method (pb) of @objc PostalAddress.subAdministrativeArea.getter(v7);
    OUTLINED_FUNCTION_5_19();
    OUTLINED_FUNCTION_1_32();
    if (v16)
    {
      OUTLINED_FUNCTION_0_31();
      dispatch thunk of DialogLocationAddress.Builder.withSubAdministrativeArea(print:speak:)();
      OUTLINED_FUNCTION_2_33();
      OUTLINED_FUNCTION_2();
    }
    outlined bridged method (pb) of @objc PostalAddress.city.getter(v7);
    OUTLINED_FUNCTION_5_19();
    OUTLINED_FUNCTION_1_32();
    if (v16)
    {
      OUTLINED_FUNCTION_0_31();
      dispatch thunk of DialogLocationAddress.Builder.withLocality(print:speak:)();
      OUTLINED_FUNCTION_2_33();
      OUTLINED_FUNCTION_2();
    }
    outlined bridged method (pb) of @objc PostalAddress.postalCode.getter(v7);
    OUTLINED_FUNCTION_5_19();
    OUTLINED_FUNCTION_1_32();
    if (v16)
    {
      OUTLINED_FUNCTION_0_31();
      dispatch thunk of DialogLocationAddress.Builder.withPostCode(print:speak:)();
      OUTLINED_FUNCTION_2_33();
      OUTLINED_FUNCTION_2();
    }
    outlined bridged method (pb) of @objc PostalAddress.street.getter(v7);
    OUTLINED_FUNCTION_5_19();
    OUTLINED_FUNCTION_1_32();
    if (v16)
    {
      OUTLINED_FUNCTION_0_31();
      dispatch thunk of DialogLocationAddress.Builder.withThoroughfare(print:speak:)();
      OUTLINED_FUNCTION_2_33();
      OUTLINED_FUNCTION_2();
    }
    v17 = dispatch thunk of DialogLocationAddress.__allocating_init(builder:)();

    return v17;
  }
  else
  {
    swift_bridgeObjectRelease();
    type metadata accessor for DialogLocationAddress.Builder();
    OUTLINED_FUNCTION_32_0();
    DialogLocationAddress.Builder.init()();
    return dispatch thunk of DialogLocationAddress.__allocating_init(builder:)();
  }
}

uint64_t DialogLocation.init(locationAddress:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for DialogLocation.Builder();
  OUTLINED_FUNCTION_32_0();
  DialogLocation.Builder.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_21FED8AB0;
  type metadata accessor for DialogLocationValue.Builder();
  OUTLINED_FUNCTION_32_0();
  DialogLocationValue.Builder.init()();
  v1 = swift_retain();
  MEMORY[0x2207D7478](v1);
  OUTLINED_FUNCTION_2();
  swift_release();
  v2 = dispatch thunk of DialogLocationValue.Builder.build()();
  OUTLINED_FUNCTION_66();
  *(_QWORD *)(v0 + 32) = v2;
  specialized Array._endMutation()();
  MEMORY[0x2207D7778](v0);
  swift_release();
  swift_bridgeObjectRelease();
  v3 = dispatch thunk of DialogLocation.__allocating_init(builder:)();
  swift_release();
  return v3;
}

uint64_t OUTLINED_FUNCTION_0_31()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_1_32()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_2_33()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_5_19()
{
  return Optional<A>.emptyToNil.getter();
}

uint64_t OUTLINED_FUNCTION_6_24()
{
  uint64_t v0;

  return v0;
}

id GetContactIntentHandler.__allocating_init(contactService:contactResolver:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  objc_class *v3;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  id v19;
  uint64_t v21;

  v3 = v2;
  v6 = objc_allocWithZone(v3);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = __swift_mutable_project_boxed_opaque_existential_1(a1, v7);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = __swift_mutable_project_boxed_opaque_existential_1(a2, v13);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v17);
  v19 = specialized GetContactIntentHandler.init(contactService:contactResolver:)((uint64_t)v11, (uint64_t)v17, v6, v7, v13, v8, v14);
  __swift_destroy_boxed_opaque_existential_0(a2);
  __swift_destroy_boxed_opaque_existential_0(a1);
  return v19;
}

uint64_t GetContactIntentHandler.resolveSiriMatches(for:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for Signpost.OpenSignpost();
  v2[5] = OUTLINED_FUNCTION_6_25(v3);
  return OUTLINED_FUNCTION_8_0();
}

uint64_t GetContactIntentHandler.resolveSiriMatches(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(void **)(v0 + 16);
  v4 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_3_20();
  v5 = v1 + *(int *)(v2 + 20);
  *(_QWORD *)v5 = "ResolveSiriMatchesGetContact";
  *(_QWORD *)(v5 + 8) = 28;
  *(_BYTE *)(v5 + 16) = 2;
  specialized BaseIntentHandler.resolveSiriMatches(for:)(v3);
  v7 = v6;
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_3_20();
  outlined destroy of Signpost.OpenSignpost(v1);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
}

uint64_t @objc GetContactIntentHandler.resolveSiriMatches(for:)(void *a1, int a2, void *a3, void *a4)
{
  return @objc GetContactIntentHandler.resolveSiriMatches(for:)(a1, a2, a3, a4, (uint64_t)&unk_24E5BF0A0, (uint64_t)&async function pointer to partial apply for @objc closure #1 in GetContactIntentHandler.resolveSiriMatches(for:));
}

uint64_t @objc closure #1 in GetContactIntentHandler.resolveSiriMatches(for:)(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  id v6;
  _QWORD *v7;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = a1;
  a3;
  v7 = (_QWORD *)swift_task_alloc();
  v3[5] = v7;
  *v7 = v3;
  v7[1] = @objc closure #1 in GetContactIntentHandler.resolveSiriMatches(for:);
  return GetContactIntentHandler.resolveSiriMatches(for:)((uint64_t)v6);
}

uint64_t @objc closure #1 in GetContactIntentHandler.resolveSiriMatches(for:)()
{
  void (**v0)(_QWORD, _QWORD);
  void *v1;
  uint64_t v2;
  void *v3;
  Class isa;

  OUTLINED_FUNCTION_2_34();

  type metadata accessor for GetContactSiriMatchesResolutionResult();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  ((void (**)(_QWORD, Class))v0)[2](v0, isa);

  _Block_release(v0);
  return OUTLINED_FUNCTION_31_5(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t GetContactIntentHandler.confirm(intent:)()
{
  return swift_task_switch();
}

{
  uint64_t v0;
  char *v1;

  objc_allocWithZone((Class)type metadata accessor for GetContactIntentResponse());
  v1 = GetContactIntentResponse.init(code:userActivity:)(4, 0);
  return (*(uint64_t (**)(char *))(v0 + 8))(v1);
}

uint64_t @objc GetContactIntentHandler.confirm(intent:)(void *a1, int a2, void *a3, void *a4)
{
  return @objc GetContactIntentHandler.resolveSiriMatches(for:)(a1, a2, a3, a4, (uint64_t)&unk_24E5BF078, (uint64_t)&async function pointer to partial apply for @objc closure #1 in GetContactIntentHandler.confirm(intent:));
}

uint64_t @objc closure #1 in GetContactIntentHandler.confirm(intent:)(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  id v6;
  id v7;
  _QWORD *v8;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = a1;
  v7 = a3;
  v8 = (_QWORD *)swift_task_alloc();
  v3[5] = v8;
  *v8 = v3;
  v8[1] = @objc closure #1 in GetContactIntentHandler.confirm(intent:);
  return GetContactIntentHandler.confirm(intent:)();
}

uint64_t GetContactIntentHandler.handle(intent:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 24) = a1;
  v2 = type metadata accessor for Signpost.OpenSignpost();
  *(_QWORD *)(v1 + 40) = OUTLINED_FUNCTION_6_25(v2);
  return OUTLINED_FUNCTION_8_0();
}

uint64_t GetContactIntentHandler.handle(intent:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  void *v11;
  uint8_t *v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;

  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v4 = v1 + *(int *)(v2 + 20);
  *(_QWORD *)v4 = "HandleGetContact";
  *(_QWORD *)(v4 + 8) = 16;
  *(_BYTE *)(v4 + 16) = 2;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v5 = *(void **)(v0 + 24);
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.siriContacts);
  v7 = v5;
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.debug.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(void **)(v0 + 24);
  if (v10)
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v32 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v12 = 138412290;
    *(_QWORD *)(v0 + 16) = v11;
    v13 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v32 = v11;

    _os_log_impl(&dword_21FE16000, v8, v9, "[GetContactIntent] Handling intent: %@", v12, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0();
  }

  outlined bridged method (pb) of @objc GetContactIntent.siriMatches.getter(*(void **)(v0 + 24));
  if (!v14)
  {
    v19 = 0;
LABEL_27:
    v30 = *(_QWORD *)(v0 + 40);
    type metadata accessor for GetContactIntentResponse();
    v31 = GetContactIntentResponse.__allocating_init(contactIdentifiers:code:)(v19, 4);
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost(v30);
    swift_task_dealloc();
    return (*(uint64_t (**)(char *))(v0 + 8))(v31);
  }
  v15 = v14;
  if (!(v14 >> 62))
  {
    v16 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v16)
      goto LABEL_10;
LABEL_25:
    v19 = MEMORY[0x24BEE4AF8];
LABEL_26:
    swift_bridgeObjectRelease_n();
    goto LABEL_27;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v16 = result;
  if (!result)
    goto LABEL_25;
LABEL_10:
  if (v16 >= 1)
  {
    v18 = 0;
    v19 = MEMORY[0x24BEE4AF8];
    do
    {
      if ((v15 & 0xC000000000000001) != 0)
        v20 = (id)MEMORY[0x2207D80C0](v18, v15);
      else
        v20 = *(id *)(v15 + 8 * v18 + 32);
      v21 = v20;
      v22 = outlined bridged method (pb) of @objc INObject.identifier.getter(v20);
      v24 = v23;

      if (v24)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_7_23(0, *(_QWORD *)(v19 + 16) + 1);
          v19 = v28;
        }
        v26 = *(_QWORD *)(v19 + 16);
        v25 = *(_QWORD *)(v19 + 24);
        if (v26 >= v25 >> 1)
        {
          OUTLINED_FUNCTION_7_23(v25 > 1, v26 + 1);
          v19 = v29;
        }
        *(_QWORD *)(v19 + 16) = v26 + 1;
        v27 = v19 + 16 * v26;
        *(_QWORD *)(v27 + 32) = v22;
        *(_QWORD *)(v27 + 40) = v24;
      }
      ++v18;
    }
    while (v16 != v18);
    goto LABEL_26;
  }
  __break(1u);
  return result;
}

uint64_t @objc GetContactIntentHandler.handle(intent:)(void *a1, int a2, void *a3, void *a4)
{
  return @objc GetContactIntentHandler.resolveSiriMatches(for:)(a1, a2, a3, a4, (uint64_t)&unk_24E5BF050, (uint64_t)&async function pointer to partial apply for @objc closure #1 in GetContactIntentHandler.handle(intent:));
}

uint64_t @objc GetContactIntentHandler.resolveSiriMatches(for:)(void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6)
{
  void *v9;
  _QWORD *v10;
  id v11;
  id v12;

  v9 = _Block_copy(aBlock);
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = a3;
  v10[3] = v9;
  v10[4] = a1;
  v11 = a3;
  v12 = a1;
  return _runTaskForBridgedAsyncMethod(_:)(a6, (uint64_t)v10);
}

uint64_t @objc closure #1 in GetContactIntentHandler.handle(intent:)(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  id v6;
  id v7;
  _QWORD *v8;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = a1;
  v7 = a3;
  v8 = (_QWORD *)swift_task_alloc();
  v3[5] = v8;
  *v8 = v3;
  v8[1] = @objc closure #1 in GetContactIntentHandler.handle(intent:);
  return GetContactIntentHandler.handle(intent:)((uint64_t)v6);
}

uint64_t @objc closure #1 in GetContactIntentHandler.handle(intent:)()
{
  void (**v0)(_QWORD, _QWORD);
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;

  OUTLINED_FUNCTION_2_34();

  ((void (**)(_QWORD, void *))v0)[2](v0, v1);
  _Block_release(v0);

  return OUTLINED_FUNCTION_31_5(*(uint64_t (**)(void))(v3 + 8));
}

id GetContactIntentHandler.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GetContactIntentHandler();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for GetContactIntentHandler()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GetContactIntentHandler;
  if (!type metadata singleton initialization cache for GetContactIntentHandler)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t ObjC metadata update function for GetContactIntentHandler()
{
  return type metadata accessor for GetContactIntentHandler();
}

uint64_t partial apply for @objc closure #1 in GetContactIntentHandler.handle(intent:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v1 = (_QWORD *)OUTLINED_FUNCTION_9_20();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_1_33(v1, (uint64_t)ContactsLabelCATs.address());
  return OUTLINED_FUNCTION_0_32(v2, v3, v4, v5);
}

uint64_t partial apply for @objc closure #1 in GetContactIntentHandler.confirm(intent:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v1 = (_QWORD *)OUTLINED_FUNCTION_9_20();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_1_33(v1, (uint64_t)ContactsLabelCATs.address());
  return OUTLINED_FUNCTION_0_32(v2, v3, v4, v5);
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in GetContactIntentHandler.resolveSiriMatches(for:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  v1 = (_QWORD *)OUTLINED_FUNCTION_9_20();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_1_33(v1, (uint64_t)ContactsLabelCATs.email());
  return OUTLINED_FUNCTION_0_32(v2, v3, v4, v5);
}

id specialized GetContactIntentHandler.init(contactService:contactResolver:)(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  id v23;
  uint64_t v25;
  uint64_t v26;

  v26 = a7;
  v12 = *(_QWORD *)(a5 - 8);
  v13 = MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v13);
  v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v25 - v21;
  (*(void (**)(char *))(v17 + 32))((char *)&v25 - v21);
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v22, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, a5);
  v23 = specialized BaseIntentHandler.init(contactService:contactResolver:)((uint64_t)v20, (uint64_t)v15, a3, a4, a5, a6, v26);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a2, a5);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v22, a4);
  return v23;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t OUTLINED_FUNCTION_1_33@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t OUTLINED_FUNCTION_2_34()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_3_20()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OUTLINED_FUNCTION_6_25(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return swift_task_alloc();
}

void OUTLINED_FUNCTION_7_23(char a1, uint64_t a2)
{
  uint64_t v2;

  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_9_20()
{
  return swift_task_alloc();
}

uint64_t ContactsAgeInfo.Builder.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(_BYTE *)(v0 + 32) = 1;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  return result;
}

uint64_t ContactsAgeInfo.Builder.withAge(_:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  swift_retain();
  OUTLINED_FUNCTION_49();
  return OUTLINED_FUNCTION_2_35();
}

uint64_t ContactsAgeInfo.Builder.withPastAge(_:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
  swift_retain();
  OUTLINED_FUNCTION_49();
  return OUTLINED_FUNCTION_2_35();
}

uint64_t ContactsAgeInfo.Builder.withFutureAge(_:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = a1;
  swift_retain();
  OUTLINED_FUNCTION_49();
  return OUTLINED_FUNCTION_2_35();
}

uint64_t ContactsAgeInfo.Builder.withRequestedDate(_:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = a1;
  swift_retain();
  OUTLINED_FUNCTION_49();
  return OUTLINED_FUNCTION_2_35();
}

uint64_t ContactsAgeInfo.Builder.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t ContactsAgeInfo.Builder.__deallocating_deinit()
{
  ContactsAgeInfo.Builder.deinit();
  return swift_deallocClassInstance();
}

unint64_t static ContactsAgeInfo.catTypeName.getter()
{
  return 0xD000000000000010;
}

uint64_t ContactsAgeInfo.init(builder:)(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = *(_QWORD *)(a1 + 16);
  v2 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(v1 + 32) = *(_QWORD *)(a1 + 24);
  *(_BYTE *)(v1 + 40) = v2;
  *(_QWORD *)(v1 + 48) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v1 + 56) = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  OUTLINED_FUNCTION_49();
  *(_QWORD *)(v1 + 64) = v3;
  return v1;
}

double ContactsAgeInfo.getProperty(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  BOOL v5;
  uint64_t v8;
  uint64_t v9;
  double result;
  BOOL v11;
  BOOL v12;
  BOOL v13;

  v5 = a1 == 6645601 && a2 == 0xE300000000000000;
  if (v5 || (OUTLINED_FUNCTION_4_25() & 1) != 0)
  {
    v8 = *(_QWORD *)(v3 + 24);
    if (v8)
    {
LABEL_7:
      v9 = type metadata accessor for DialogDuration();
LABEL_8:
      *(_QWORD *)(a3 + 24) = v9;
      *(_QWORD *)a3 = v8;
      swift_retain();
      return result;
    }
    goto LABEL_13;
  }
  if ((a1 != 0xD000000000000013 || a2 != 0x800000021FEDFF20) && (OUTLINED_FUNCTION_4_25() & 1) == 0)
  {
    v11 = a1 == 0x65674174736170 && a2 == 0xE700000000000000;
    if (v11 || (OUTLINED_FUNCTION_4_25() & 1) != 0)
    {
      v8 = *(_QWORD *)(v3 + 48);
      if (v8)
        goto LABEL_7;
    }
    else
    {
      v12 = a1 == 0x6741657275747566 && a2 == 0xE900000000000065;
      if (v12 || (OUTLINED_FUNCTION_4_25() & 1) != 0)
      {
        v8 = *(_QWORD *)(v3 + 56);
        if (v8)
          goto LABEL_7;
      }
      else
      {
        v13 = a1 == 0x6574736575716572 && a2 == 0xED00006574614464;
        if (v13 || (OUTLINED_FUNCTION_4_25() & 1) != 0)
        {
          v8 = *(_QWORD *)(v3 + 64);
          if (v8)
          {
            v9 = type metadata accessor for DialogCalendar();
            goto LABEL_8;
          }
        }
      }
    }
    goto LABEL_13;
  }
  if ((*(_BYTE *)(v3 + 40) & 1) != 0)
  {
LABEL_13:
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  result = *(double *)(v3 + 32);
  *(_QWORD *)(a3 + 24) = MEMORY[0x24BEE13C8];
  *(double *)a3 = result;
  return result;
}

SiriContactsIntents::ContactsAgeInfo::CodingKeys_optional __swiftcall ContactsAgeInfo.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ContactsAgeInfo.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5)
    return (SiriContactsIntents::ContactsAgeInfo::CodingKeys_optional)5;
  else
    return (SiriContactsIntents::ContactsAgeInfo::CodingKeys_optional)v3;
}

SiriContactsIntents::ContactsAgeInfo::CodingKeys_optional __swiftcall ContactsAgeInfo.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (SiriContactsIntents::ContactsAgeInfo::CodingKeys_optional)5;
}

uint64_t ContactsAgeInfo.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)j__OUTLINED_FUNCTION_8_17
                                                                     + 4 * byte_21FEDC2E0[a1]))(0xD000000000000013, 0x800000021FEDFF20);
}

uint64_t sub_21FE7FC30()
{
  return OUTLINED_FUNCTION_10_20();
}

uint64_t ContactsAgeInfo.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)j__OUTLINED_FUNCTION_8_17_0
                                                                     + 4 * byte_21FEDC2E5[a1]))(0xD000000000000013, 0x800000021FEDFF20);
}

uint64_t sub_21FE7FC84()
{
  return OUTLINED_FUNCTION_10_20();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ContactsAgeInfo.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance ContactsAgeInfo.CodingKeys()
{
  unsigned __int8 *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContactsAgeInfo.CodingKeys(uint64_t a1)
{
  unsigned __int8 *v1;

  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ContactsAgeInfo.CodingKeys(uint64_t a1)
{
  unsigned __int8 *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriContactsIntents::ContactsAgeInfo::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ContactsAgeInfo.CodingKeys@<W0>(Swift::String *a1@<X0>, SiriContactsIntents::ContactsAgeInfo::CodingKeys_optional *a2@<X8>)
{
  SiriContactsIntents::ContactsAgeInfo::CodingKeys_optional result;

  result.value = ContactsAgeInfo.CodingKeys.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ContactsAgeInfo.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = ContactsAgeInfo.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ContactsAgeInfo.CodingKeys()
{
  unsigned __int8 *v0;

  return ContactsAgeInfo.CodingKeys.stringValue.getter(*v0);
}

SiriContactsIntents::ContactsAgeInfo::CodingKeys_optional protocol witness for CodingKey.init(stringValue:) in conformance ContactsAgeInfo.CodingKeys@<W0>(uint64_t a1@<X0>, SiriContactsIntents::ContactsAgeInfo::CodingKeys_optional *a2@<X8>)
{
  SiriContactsIntents::ContactsAgeInfo::CodingKeys_optional result;

  result.value = ContactsAgeInfo.CodingKeys.init(stringValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ContactsAgeInfo.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ContactsAgeInfo.CodingKeys()
{
  lazy protocol witness table accessor for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ContactsAgeInfo.CodingKeys()
{
  lazy protocol witness table accessor for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ContactsAgeInfo.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t ContactsAgeInfo.__deallocating_deinit()
{
  ContactsAgeInfo.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ContactsAgeInfo()
{
  return objc_opt_self();
}

uint64_t ContactsAgeInfo.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ContactsAgeInfo.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13 = v3[3];
  HIBYTE(v12) = 0;
  type metadata accessor for DialogDuration();
  OUTLINED_FUNCTION_9_21(&lazy protocol witness table cache variable for type DialogDuration and conformance DialogDuration, v9, (uint64_t (*)(uint64_t))MEMORY[0x24BE92770], MEMORY[0x24BE92780]);
  OUTLINED_FUNCTION_1_34();
  if (!v2)
  {
    LOBYTE(v13) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v13 = v3[6];
    HIBYTE(v12) = 2;
    OUTLINED_FUNCTION_1_34();
    v13 = v3[7];
    HIBYTE(v12) = 3;
    OUTLINED_FUNCTION_1_34();
    v13 = v3[8];
    HIBYTE(v12) = 4;
    type metadata accessor for DialogCalendar();
    OUTLINED_FUNCTION_9_21(&lazy protocol witness table cache variable for type DialogCalendar and conformance DialogCalendar, v10, (uint64_t (*)(uint64_t))MEMORY[0x24BE92690], MEMORY[0x24BE926A0]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t ContactsAgeInfo.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  ContactsAgeInfo.init(from:)(a1);
  return v2;
}

uint64_t type metadata accessor for ContactsAgeInfo.Builder()
{
  return objc_opt_self();
}

uint64_t ContactsAgeInfo.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ContactsAgeInfo.CodingKeys>);
  MEMORY[0x24BDAC7A8](v4);
  *(_QWORD *)(v1 + 16) = 0;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {

    type metadata accessor for ContactsAgeInfo();
    swift_deallocPartialClassInstance();
  }
  else
  {
    type metadata accessor for DialogDuration();
    OUTLINED_FUNCTION_9_21(&lazy protocol witness table cache variable for type DialogDuration and conformance DialogDuration, v5, (uint64_t (*)(uint64_t))MEMORY[0x24BE92770], MEMORY[0x24BE92788]);
    OUTLINED_FUNCTION_0_33();
    *(_QWORD *)(v1 + 24) = v9;
    LOBYTE(v9) = 1;
    *(_QWORD *)(v1 + 32) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    *(_BYTE *)(v1 + 40) = v7 & 1;
    OUTLINED_FUNCTION_0_33();
    *(_QWORD *)(v1 + 48) = v9;
    OUTLINED_FUNCTION_0_33();
    *(_QWORD *)(v1 + 56) = v9;
    type metadata accessor for DialogCalendar();
    OUTLINED_FUNCTION_9_21(&lazy protocol witness table cache variable for type DialogCalendar and conformance DialogCalendar, v8, (uint64_t (*)(uint64_t))MEMORY[0x24BE92690], MEMORY[0x24BE926A8]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    OUTLINED_FUNCTION_3_21();
    *(_QWORD *)(v1 + 64) = v9;
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v1;
}

unint64_t protocol witness for static CATType.catTypeName.getter in conformance ContactsAgeInfo()
{
  static ContactsAgeInfo.catTypeName.getter();
  return 0xD000000000000010;
}

double protocol witness for CATType.getProperty(_:) in conformance ContactsAgeInfo@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ContactsAgeInfo.getProperty(_:)(a1, a2, a3);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ContactsAgeInfo@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = ContactsAgeInfo.__allocating_init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ContactsAgeInfo(_QWORD *a1)
{
  return ContactsAgeInfo.encode(to:)(a1);
}

uint64_t base witness table accessor for Decodable in ContactsAgeInfo(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type ContactsAgeInfo and conformance ContactsAgeInfo(&lazy protocol witness table cache variable for type ContactsAgeInfo and conformance ContactsAgeInfo, a2, (uint64_t (*)(uint64_t))type metadata accessor for ContactsAgeInfo, (uint64_t)&protocol conformance descriptor for ContactsAgeInfo);
}

uint64_t base witness table accessor for Encodable in ContactsAgeInfo(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type ContactsAgeInfo and conformance ContactsAgeInfo(&lazy protocol witness table cache variable for type ContactsAgeInfo and conformance ContactsAgeInfo, a2, (uint64_t (*)(uint64_t))type metadata accessor for ContactsAgeInfo, (uint64_t)&protocol conformance descriptor for ContactsAgeInfo);
}

unint64_t lazy protocol witness table accessor for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactsAgeInfo.CodingKeys, &type metadata for ContactsAgeInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactsAgeInfo.CodingKeys, &type metadata for ContactsAgeInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactsAgeInfo.CodingKeys, &type metadata for ContactsAgeInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ContactsAgeInfo.CodingKeys, &type metadata for ContactsAgeInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContactsAgeInfo.CodingKeys and conformance ContactsAgeInfo.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ContactsAgeInfo and conformance ContactsAgeInfo(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x2207D86A8](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ContactsAgeInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_21FE8046C + 4 * byte_21FEDC2EF[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_21FE804A0 + 4 * byte_21FEDC2EA[v4]))();
}

uint64_t sub_21FE804A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE804A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FE804B0);
  return result;
}

uint64_t sub_21FE804BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FE804C4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_21FE804C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE804D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContactsAgeInfo.CodingKeys()
{
  return &type metadata for ContactsAgeInfo.CodingKeys;
}

uint64_t OUTLINED_FUNCTION_0_33()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_1_34()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_2_35()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_3_21()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_4_25()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_5_20()
{
  return 0x6741657275747566;
}

uint64_t OUTLINED_FUNCTION_6_26()
{
  return 0x65674174736170;
}

uint64_t OUTLINED_FUNCTION_8_17()
{
  return 6645601;
}

uint64_t OUTLINED_FUNCTION_9_21(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  return lazy protocol witness table accessor for type ContactsAgeInfo and conformance ContactsAgeInfo(a1, 255, a3, a4);
}

uint64_t OUTLINED_FUNCTION_10_20()
{
  return 0x6574736575716572;
}

uint64_t specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[42] = a2;
  v3[43] = v2;
  v3[41] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[44] = OUTLINED_FUNCTION_0_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[45] = OUTLINED_FUNCTION_0_0();
  v4 = type metadata accessor for TemplatingResult();
  v3[46] = v4;
  v3[47] = *(_QWORD *)(v4 - 8);
  v3[48] = OUTLINED_FUNCTION_25_0();
  v3[49] = OUTLINED_FUNCTION_25_0();
  v3[50] = OUTLINED_FUNCTION_25_0();
  v3[51] = OUTLINED_FUNCTION_25_0();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<GetContactAttributeIntent>);
  v3[52] = v5;
  v3[53] = *(_QWORD *)(v5 - 8);
  v3[54] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[37] = a2;
  v3[38] = v2;
  v3[36] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[39] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[40] = swift_task_alloc();
  v4 = type metadata accessor for TemplatingResult();
  v3[41] = v4;
  v3[42] = *(_QWORD *)(v4 - 8);
  v3[43] = swift_task_alloc();
  v3[44] = swift_task_alloc();
  v3[45] = swift_task_alloc();
  v3[46] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<ModifyContactAttributeIntent>);
  v3[47] = v5;
  v3[48] = *(_QWORD *)(v5 - 8);
  v3[49] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  uint64_t v0;
  SiriContactsIntents::SiriKitContactUnsupportedReason_optional v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  os_log_type_t v6;
  _DWORD *v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  void *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t result;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void *v36;
  id v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t ObjectType;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *boxed_opaque_existential_1;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  os_log_type_t type;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;

  objc_msgSend((id)ParameterResolutionRecord.result.getter(), sel_unsupportedReason);
  OUTLINED_FUNCTION_24_7();
  v1.value = OUTLINED_FUNCTION_136_1().value;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v3 = *(_QWORD *)(v0 + 424);
  v2 = *(_QWORD *)(v0 + 432);
  v4 = OUTLINED_FUNCTION_26();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.siriContacts);
  OUTLINED_FUNCTION_76_8(v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  v5 = (void *)OUTLINED_FUNCTION_28_3();
  v6 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_112_4(v6))
  {
    v7 = (_DWORD *)OUTLINED_FUNCTION_89_2();
    v62 = (_QWORD *)OUTLINED_FUNCTION_1();
    v64 = OUTLINED_FUNCTION_1();
    *v7 = 136315650;
    type = v2;
    *(_QWORD *)(v0 + 304) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, 0x800000021FEE0A00, &v64);
    OUTLINED_FUNCTION_119_1();
    OUTLINED_FUNCTION_110_3();
    *(_BYTE *)(v0 + 560) = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitContactUnsupportedReason?);
    v9 = Optional.debugDescription.getter();
    *(_QWORD *)(v0 + 312) = OUTLINED_FUNCTION_149_0(v9, v10, v11, v12, v13, v14, v15, v16);
    OUTLINED_FUNCTION_104_3();
    swift_bridgeObjectRelease();
    v17 = OUTLINED_FUNCTION_86_5();
    *(_QWORD *)(v0 + 320) = v17;
    OUTLINED_FUNCTION_142_0();
    *v62 = v17;
    OUTLINED_FUNCTION_57_8(v63);
    OUTLINED_FUNCTION_101_3(&dword_21FE16000, v18, v19, "#ContactsUnsupportedValueStrategyAsync<%s> Processing unsupported reason: %s in intentResolutionResult: %@", v20, v21, v22, v23, v59, v60, type);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_100_1();
    OUTLINED_FUNCTION_0();
  }
  OUTLINED_FUNCTION_57_8(*(_QWORD *)(v0 + 424));

  if ((specialized ContactsStrategy.isSmartEnabled.getter(v24) & 1) != 0)
  {
    v25 = (void *)OUTLINED_FUNCTION_28_3();
    v26 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_15_0(v26))
    {
      *(_WORD *)OUTLINED_FUNCTION_1() = 0;
      OUTLINED_FUNCTION_10_0(&dword_21FE16000, v27, v28, "#ContactsUnsupportedValueStrategy makeIntentHandledResponse SMART enabled but not yet implemented for the intent");
      OUTLINED_FUNCTION_0();
    }

  }
  switch(v1.value)
  {
    case SiriContactsIntents_SiriKitContactUnsupportedReason_authFailed:
      v29 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 488) = v29;
      *v29 = v0;
      v29[1] = specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      result = OUTLINED_FUNCTION_52_10();
      break;
    case SiriContactsIntents_SiriKitContactUnsupportedReason_missingMeCard:
      v32 = *(_QWORD *)(v0 + 344);
      v33 = *(_QWORD *)(v32 + 104);
      *(_QWORD *)(v0 + 440) = v33;
      v34 = *(_QWORD *)(v32 + 96);
      outlined init with copy of ContactServiceProtocol(v32 + 16, v0 + 264);
      v35 = *(_BYTE *)(v32 + 112);
      swift_retain();
      v36 = (void *)ParameterResolutionRecord.intent.getter();
      v37 = objc_msgSend(v36, sel_isMe);

      if (v37)
      {
        v38 = objc_msgSend(v37, sel_BOOLValue);

      }
      else
      {
        v38 = 0;
      }
      v54 = *(uint64_t **)(v0 + 328);
      v55 = OUTLINED_FUNCTION_162();
      v56 = MEMORY[0x24BE99088];
      v54[3] = v55;
      v54[4] = v56;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v54);
      v58 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 504) = v58;
      *v58 = v0;
      v58[1] = specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      result = OUTLINED_FUNCTION_56_10((uint64_t)boxed_opaque_existential_1, v34, v0 + 264, v35, 0, 0, v38, v33);
      break;
    case SiriContactsIntents_SiriKitContactUnsupportedReason_noContactsFound:
      v39 = ParameterResolutionRecord.intent.getter();
      *(_QWORD *)(v0 + 448) = v39;
      v40 = OUTLINED_FUNCTION_162();
      v41 = OUTLINED_FUNCTION_88_2(v40, MEMORY[0x24BE99088]);
      v42 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 456) = v42;
      *v42 = v0;
      v42[1] = specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      result = specialized ContactsUnsupportedValueStrategy.noContactsFound(intent:)((uint64_t)v41, v39);
      break;
    case SiriContactsIntents_SiriKitContactUnsupportedReason_noContactsFoundForCompany:
      v43 = ParameterResolutionRecord.intent.getter();
      *(_QWORD *)(v0 + 520) = v43;
      swift_getObjectType();
      dynamic_cast_existential_1_unconditional(v43);
      v45 = v44;
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v45 + 40))(ObjectType, v45);
      if (!v47)
        static String.EMPTY.getter();
      v48 = *(_QWORD *)(v0 + 360);
      OUTLINED_FUNCTION_17_4();
      v49 = OUTLINED_FUNCTION_31_4();
      OUTLINED_FUNCTION_26_4(v48, v50, v51, v49);
      v52 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 528) = v52;
      *v52 = v0;
      v52[1] = specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      result = OUTLINED_FUNCTION_53_9(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 360));
      break;
    case SiriContactsIntents_SiriKitContactUnsupportedReason_noContactsFoundForRelation:
      v53 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 472) = v53;
      *v53 = v0;
      v53[1] = specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      result = OUTLINED_FUNCTION_55_10();
      break;
    default:
      v31 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 544) = v31;
      *v31 = v0;
      v31[1] = specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      result = OUTLINED_FUNCTION_54_8();
      break;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_38_4();
  OUTLINED_FUNCTION_87(v2);
  *(_QWORD *)(v1 + 464) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_6_1();
  }
  else
  {

    OUTLINED_FUNCTION_95_4();
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_45_0();
    OUTLINED_FUNCTION_17_0();
    OUTLINED_FUNCTION_12_0();
    v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
    return OUTLINED_FUNCTION_9_14(v4);
  }
}

{
  OUTLINED_FUNCTION_68_12();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_29_5();
  OUTLINED_FUNCTION_37_6();
  *(_QWORD *)(v1 + 496) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_38_4();
  OUTLINED_FUNCTION_87(v2);
  *(_QWORD *)(v1 + 512) = v0;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_0(v1 + 264);
  swift_release();
  if (v0)
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_6_1();
  }
  else
  {
    OUTLINED_FUNCTION_95_4();
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_45_0();
    OUTLINED_FUNCTION_17_0();
    OUTLINED_FUNCTION_12_0();
    v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
    return OUTLINED_FUNCTION_9_14(v4);
  }
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_17_6();
  __swift_deallocate_boxed_opaque_existential_1(*(_QWORD *)(v0 + 328));
  OUTLINED_FUNCTION_24_20();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  return OUTLINED_FUNCTION_51_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_17_6();

  OUTLINED_FUNCTION_144_1();
  OUTLINED_FUNCTION_24_20();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  return OUTLINED_FUNCTION_51_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_138_1();
  v1 = OUTLINED_FUNCTION_121_1(v0);
  OUTLINED_FUNCTION_57_7(v1, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  OUTLINED_FUNCTION_51_3();
  v1 = *(void **)(v0 + 520);
  v2 = OUTLINED_FUNCTION_30_14();
  OUTLINED_FUNCTION_16_14(v2);
  OUTLINED_FUNCTION_109_3();
  OUTLINED_FUNCTION_32_8(v3, MEMORY[0x24BE99088]);
  OUTLINED_FUNCTION_4_15();

  OUTLINED_FUNCTION_83_5(v4, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  OUTLINED_FUNCTION_72_6(v5, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_29_11();
  OUTLINED_FUNCTION_46_9();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_17_10(v6);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_17_6();

  OUTLINED_FUNCTION_24_20();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  return OUTLINED_FUNCTION_51_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_81_4();
  v0 = OUTLINED_FUNCTION_30_14();
  OUTLINED_FUNCTION_16_14(v0);
  OUTLINED_FUNCTION_108_1();
  OUTLINED_FUNCTION_32_8(v1, MEMORY[0x24BE99088]);
  v2 = OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_83_5(v2, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  OUTLINED_FUNCTION_72_6(v3, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_29_11();
  OUTLINED_FUNCTION_46_9();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_17_13(v4);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_17_6();
  OUTLINED_FUNCTION_24_20();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  return OUTLINED_FUNCTION_51_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_17_6();
  OUTLINED_FUNCTION_24_20();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  return OUTLINED_FUNCTION_51_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_29_5();
  OUTLINED_FUNCTION_37_6();
  *(_QWORD *)(v1 + 552) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_81_4();
  v0 = OUTLINED_FUNCTION_30_14();
  OUTLINED_FUNCTION_16_14(v0);
  OUTLINED_FUNCTION_106_3();
  OUTLINED_FUNCTION_32_8(v1, MEMORY[0x24BE99088]);
  v2 = OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_83_5(v2, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  OUTLINED_FUNCTION_72_6(v3, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_29_11();
  OUTLINED_FUNCTION_46_9();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_17_13(v4);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_17_6();
  OUTLINED_FUNCTION_24_20();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  return OUTLINED_FUNCTION_51_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  SiriContactsIntents::SiriKitContactUnsupportedReason_optional v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  os_log_type_t v6;
  _DWORD *v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  void *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t result;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  Class isa;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t ObjectType;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  int v64;
  os_log_type_t type;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;

  objc_msgSend((id)ParameterResolutionRecord.result.getter(), sel_unsupportedReason);
  OUTLINED_FUNCTION_24_7();
  v1.value = OUTLINED_FUNCTION_136_1().value;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v3 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 392);
  v4 = OUTLINED_FUNCTION_26();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.siriContacts);
  OUTLINED_FUNCTION_76_8(v2, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
  v5 = (void *)OUTLINED_FUNCTION_28_3();
  v6 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_112_4(v6))
  {
    v7 = (_DWORD *)OUTLINED_FUNCTION_89_2();
    v66 = (_QWORD *)OUTLINED_FUNCTION_1();
    v68 = OUTLINED_FUNCTION_1();
    *v7 = 136315650;
    type = v2;
    *(_QWORD *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x800000021FEE1E20, &v68);
    OUTLINED_FUNCTION_119_1();
    OUTLINED_FUNCTION_110_3();
    *(_BYTE *)(v0 + 544) = v8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitContactUnsupportedReason?);
    v9 = Optional.debugDescription.getter();
    *(_QWORD *)(v0 + 272) = OUTLINED_FUNCTION_149_0(v9, v10, v11, v12, v13, v14, v15, v16);
    OUTLINED_FUNCTION_104_3();
    swift_bridgeObjectRelease();
    v17 = OUTLINED_FUNCTION_86_5();
    *(_QWORD *)(v0 + 280) = v17;
    OUTLINED_FUNCTION_142_0();
    *v66 = v17;
    OUTLINED_FUNCTION_57_8(v67);
    OUTLINED_FUNCTION_101_3(&dword_21FE16000, v18, v19, "#ContactsUnsupportedValueStrategyAsync<%s> Processing unsupported reason: %s in intentResolutionResult: %@", v20, v21, v22, v23, v63, v64, type);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_100_1();
    OUTLINED_FUNCTION_0();
  }
  OUTLINED_FUNCTION_57_8(*(_QWORD *)(v0 + 384));

  if ((specialized ContactsStrategy.isSmartEnabled.getter(v24) & 1) != 0)
  {
    v25 = (void *)OUTLINED_FUNCTION_28_3();
    v26 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_15_0(v26))
    {
      *(_WORD *)OUTLINED_FUNCTION_1() = 0;
      OUTLINED_FUNCTION_10_0(&dword_21FE16000, v27, v28, "#ContactsUnsupportedValueStrategy makeIntentHandledResponse SMART enabled but not yet implemented for the intent");
      OUTLINED_FUNCTION_0();
    }

  }
  switch(v1.value)
  {
    case SiriContactsIntents_SiriKitContactUnsupportedReason_authFailed:
      v29 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 472) = v29;
      *v29 = v0;
      v29[1] = specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      result = OUTLINED_FUNCTION_52_10();
      break;
    case SiriContactsIntents_SiriKitContactUnsupportedReason_missingMeCard:
      v32 = *(_QWORD *)(*(_QWORD *)(v0 + 304) + 104);
      *(_QWORD *)(v0 + 400) = v32;
      swift_retain();
      v33 = (void *)ParameterResolutionRecord.intent.getter();
      type metadata accessor for NSNumber();
      isa = NSNumber.init(BOOLeanLiteral:)(0).super.super.isa;

      LOBYTE(v33) = -[objc_class BOOLValue](isa, sel_BOOLValue);
      v35 = OUTLINED_FUNCTION_162();
      OUTLINED_FUNCTION_92_4(v35, MEMORY[0x24BE99088]);
      v36 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 408) = v36;
      *v36 = v0;
      v36[1] = specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      OUTLINED_FUNCTION_67_8();
      result = OUTLINED_FUNCTION_56_10(v37, v38, v39, v40, v41, 0, (char)v33, v32);
      break;
    case SiriContactsIntents_SiriKitContactUnsupportedReason_noContactsFound:
      v42 = ParameterResolutionRecord.intent.getter();
      *(_QWORD *)(v0 + 424) = v42;
      v43 = OUTLINED_FUNCTION_162();
      OUTLINED_FUNCTION_88_2(v43, MEMORY[0x24BE99088]);
      v44 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 432) = v44;
      v45 = OUTLINED_FUNCTION_134_2(v44);
      v46 = v42;
      goto LABEL_20;
    case SiriContactsIntents_SiriKitContactUnsupportedReason_noContactsFoundForCompany:
      v47 = (void *)ParameterResolutionRecord.intent.getter();
      *(_QWORD *)(v0 + 448) = v47;
      swift_getObjectType();
      if (dynamic_cast_existential_1_conditional((uint64_t)v47))
      {
        v49 = v48;
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v49 + 40))(ObjectType, v49);
        if (!v51)
          static String.EMPTY.getter();
        v52 = *(_QWORD *)(v0 + 320);
        OUTLINED_FUNCTION_17_4();
        v53 = OUTLINED_FUNCTION_31_4();
        OUTLINED_FUNCTION_26_4(v52, v54, v55, v53);
        v56 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 512) = v56;
        *v56 = v0;
        v56[1] = specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
        result = OUTLINED_FUNCTION_53_9(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 320));
      }
      else
      {
        v58 = *(uint64_t **)(v0 + 288);

        v59 = ParameterResolutionRecord.intent.getter();
        *(_QWORD *)(v0 + 488) = v59;
        v60 = OUTLINED_FUNCTION_162();
        v61 = MEMORY[0x24BE99088];
        v58[3] = v60;
        v58[4] = v61;
        __swift_allocate_boxed_opaque_existential_1(v58);
        v62 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 496) = v62;
        v45 = OUTLINED_FUNCTION_134_2(v62);
        v46 = v59;
LABEL_20:
        result = specialized ContactsUnsupportedValueStrategy.noContactsFound(intent:)(v45, v46);
      }
      break;
    case SiriContactsIntents_SiriKitContactUnsupportedReason_noContactsFoundForRelation:
      v57 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 456) = v57;
      *v57 = v0;
      v57[1] = specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      result = OUTLINED_FUNCTION_55_10();
      break;
    default:
      v31 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 528) = v31;
      *v31 = v0;
      v31[1] = specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      result = OUTLINED_FUNCTION_54_8();
      break;
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_38_4();
  OUTLINED_FUNCTION_87(v2);
  *(_QWORD *)(v1 + 416) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_6_1();
  }
  else
  {
    OUTLINED_FUNCTION_65_10();
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_45_0();
    OUTLINED_FUNCTION_17_0();
    OUTLINED_FUNCTION_12_0();
    v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
    return OUTLINED_FUNCTION_9_14(v4);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_38_4();
  OUTLINED_FUNCTION_87(v2);
  *(_QWORD *)(v1 + 440) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_6_1();
  }
  else
  {

    OUTLINED_FUNCTION_65_10();
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_45_0();
    OUTLINED_FUNCTION_17_0();
    OUTLINED_FUNCTION_12_0();
    v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
    return OUTLINED_FUNCTION_9_14(v4);
  }
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_29_5();
  OUTLINED_FUNCTION_37_6();
  *(_QWORD *)(v1 + 464) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  OUTLINED_FUNCTION_68_12();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_17_6();
  __swift_deallocate_boxed_opaque_existential_1(*(_QWORD *)(v0 + 288));
  OUTLINED_FUNCTION_23_18();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  return OUTLINED_FUNCTION_51_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_17_6();

  OUTLINED_FUNCTION_144_1();
  OUTLINED_FUNCTION_23_18();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  return OUTLINED_FUNCTION_51_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_38_4();
  OUTLINED_FUNCTION_87(v2);
  *(_QWORD *)(v1 + 504) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_20_0();
    return OUTLINED_FUNCTION_6_1();
  }
  else
  {

    OUTLINED_FUNCTION_65_10();
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_45_0();
    OUTLINED_FUNCTION_17_0();
    OUTLINED_FUNCTION_12_0();
    v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
    return OUTLINED_FUNCTION_9_14(v4);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_29_5();
  OUTLINED_FUNCTION_37_6();
  *(_QWORD *)(v1 + 520) = v0;
  v2 = swift_task_dealloc();
  OUTLINED_FUNCTION_57_7(v2, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  OUTLINED_FUNCTION_51_3();
  v1 = *(void **)(v0 + 448);
  v2 = OUTLINED_FUNCTION_30_14();
  OUTLINED_FUNCTION_16_14(v2);
  OUTLINED_FUNCTION_109_3();
  OUTLINED_FUNCTION_32_8(v3, MEMORY[0x24BE99088]);
  OUTLINED_FUNCTION_4_15();

  OUTLINED_FUNCTION_83_5(v4, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  OUTLINED_FUNCTION_72_6(v5, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_29_11();
  OUTLINED_FUNCTION_49_13();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  v6 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_17_10(v6);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_17_6();

  OUTLINED_FUNCTION_23_18();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  return OUTLINED_FUNCTION_51_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_17_6();

  OUTLINED_FUNCTION_144_1();
  OUTLINED_FUNCTION_23_18();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  return OUTLINED_FUNCTION_51_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_81_4();
  v0 = OUTLINED_FUNCTION_30_14();
  OUTLINED_FUNCTION_16_14(v0);
  OUTLINED_FUNCTION_108_1();
  OUTLINED_FUNCTION_32_8(v1, MEMORY[0x24BE99088]);
  v2 = OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_83_5(v2, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  OUTLINED_FUNCTION_72_6(v3, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_29_11();
  OUTLINED_FUNCTION_49_13();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_17_13(v4);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_17_6();
  OUTLINED_FUNCTION_23_18();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  return OUTLINED_FUNCTION_51_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_17_6();
  OUTLINED_FUNCTION_23_18();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  return OUTLINED_FUNCTION_51_2(*(uint64_t (**)(void))(v0 + 8));
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_138_1();
  OUTLINED_FUNCTION_121_1(v0);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_81_4();
  v0 = OUTLINED_FUNCTION_30_14();
  OUTLINED_FUNCTION_16_14(v0);
  OUTLINED_FUNCTION_106_3();
  OUTLINED_FUNCTION_32_8(v1, MEMORY[0x24BE99088]);
  v2 = OUTLINED_FUNCTION_4_15();
  OUTLINED_FUNCTION_83_5(v2, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  OUTLINED_FUNCTION_72_6(v3, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_29_11();
  OUTLINED_FUNCTION_49_13();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_17_13(v4);
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_17_6();
  OUTLINED_FUNCTION_23_18();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  return OUTLINED_FUNCTION_51_2(*(uint64_t (**)(void))(v0 + 8));
}

#error "21FE81170: call analysis failed (funcsize=49)"

#error "21FE81F1C: call analysis failed (funcsize=49)"

uint64_t specialized ContactsUnsupportedValueStrategy.noContactsFound(intent:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  v3[13] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[14] = swift_task_alloc();
  v4 = type metadata accessor for TemplatingResult();
  v3[15] = v4;
  v3[16] = *(_QWORD *)(v4 - 8);
  v3[17] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[10] = a2;
  v3[11] = v2;
  v3[9] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v3[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  v3[13] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[14] = swift_task_alloc();
  v4 = type metadata accessor for TemplatingResult();
  v3[15] = v4;
  v3[16] = *(_QWORD *)(v4 - 8);
  v3[17] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized ContactsUnsupportedValueStrategy.noContactsFound(intent:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  OUTLINED_FUNCTION_17_6();
  GetContactAttributeIntent.requestedName.getter(v1);
  if (v2)
  {
    OUTLINED_FUNCTION_126_2();
    OUTLINED_FUNCTION_113_2();
    OUTLINED_FUNCTION_61_7();
    v3 = OUTLINED_FUNCTION_146_0();
    OUTLINED_FUNCTION_127_1(v3);
    OUTLINED_FUNCTION_148_1();
    OUTLINED_FUNCTION_93_5();
    OUTLINED_FUNCTION_72_6(v4, &demangling cache variable for type metadata for Locale?);
    swift_bridgeObjectRelease();
  }
  else
  {
    static String.EMPTY.getter();
    OUTLINED_FUNCTION_93_5();
  }
  v5 = *(_QWORD *)(v0 + 112);
  OUTLINED_FUNCTION_17_4();
  v6 = OUTLINED_FUNCTION_31_4();
  OUTLINED_FUNCTION_26_4(v5, v7, v8, v6);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v9;
  v10 = OUTLINED_FUNCTION_115_1(v9);
  return OUTLINED_FUNCTION_60_11(v10, v11);
}

{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_63_7();
  OUTLINED_FUNCTION_57_7(v0, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  OUTLINED_FUNCTION_137();
  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = OUTLINED_FUNCTION_163();
  OUTLINED_FUNCTION_110_2(v2, v4, v5, v3);
  *(_QWORD *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of FlowActivity?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  OUTLINED_FUNCTION_143_1(v6, &demangling cache variable for type metadata for NLContextUpdate?);
  OUTLINED_FUNCTION_74_5(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_14_0();
  v7 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_21_1(v7);
}

{
  uint64_t v0;

  swift_task_dealloc();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_13_0();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  OUTLINED_FUNCTION_17_6();
  ModifyContactAttributeIntent.requestedName.getter();
  if (v1)
  {
    OUTLINED_FUNCTION_126_2();
    OUTLINED_FUNCTION_113_2();
    OUTLINED_FUNCTION_61_7();
    v2 = OUTLINED_FUNCTION_146_0();
    OUTLINED_FUNCTION_127_1(v2);
    OUTLINED_FUNCTION_148_1();
    OUTLINED_FUNCTION_93_5();
    OUTLINED_FUNCTION_72_6(v3, &demangling cache variable for type metadata for Locale?);
    swift_bridgeObjectRelease();
  }
  else
  {
    static String.EMPTY.getter();
    OUTLINED_FUNCTION_93_5();
  }
  v4 = *(_QWORD *)(v0 + 112);
  OUTLINED_FUNCTION_17_4();
  v5 = OUTLINED_FUNCTION_31_4();
  OUTLINED_FUNCTION_26_4(v4, v6, v7, v5);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v8;
  v9 = OUTLINED_FUNCTION_115_1(v8);
  return OUTLINED_FUNCTION_60_11(v9, v10);
}

{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_63_7();
  OUTLINED_FUNCTION_57_7(v0, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

uint64_t ModifyContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3[29] = a2;
  v3[30] = v2;
  v3[28] = a1;
  v4 = type metadata accessor for TemplatingResult();
  v3[31] = v4;
  v3[32] = *(_QWORD *)(v4 - 8);
  v3[33] = OUTLINED_FUNCTION_25_0();
  v3[34] = OUTLINED_FUNCTION_25_0();
  v3[35] = OUTLINED_FUNCTION_25_0();
  type metadata accessor for DialogPhase();
  v3[36] = OUTLINED_FUNCTION_0_0();
  v5 = type metadata accessor for OutputGenerationManifest();
  v3[37] = v5;
  v3[38] = *(_QWORD *)(v5 - 8);
  v3[39] = OUTLINED_FUNCTION_0_0();
  v6 = type metadata accessor for ContactsSnippetPluginModel();
  v3[40] = v6;
  v3[41] = *(_QWORD *)(v6 - 8);
  v3[42] = OUTLINED_FUNCTION_0_0();
  v7 = type metadata accessor for ContactsSnippetFlowState();
  v3[43] = v7;
  v3[44] = *(_QWORD *)(v7 - 8);
  v3[45] = OUTLINED_FUNCTION_0_0();
  v8 = type metadata accessor for ModifyContactAttributeSnippetModel.ContactAttributeToModify();
  v3[46] = v8;
  v3[47] = *(_QWORD *)(v8 - 8);
  v3[48] = OUTLINED_FUNCTION_0_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifyContactAttributeSnippetModel?);
  v3[49] = OUTLINED_FUNCTION_0_0();
  v9 = type metadata accessor for ModifyContactAttributeSnippetModel();
  v3[50] = v9;
  v3[51] = *(_QWORD *)(v9 - 8);
  v3[52] = OUTLINED_FUNCTION_0_0();
  type metadata accessor for CATOption();
  v3[53] = OUTLINED_FUNCTION_0_0();
  v10 = OUTLINED_FUNCTION_31_4();
  v3[54] = v10;
  v3[55] = *(_QWORD *)(v10 - 8);
  v3[56] = OUTLINED_FUNCTION_0_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  v3[57] = OUTLINED_FUNCTION_25_0();
  v3[58] = OUTLINED_FUNCTION_25_0();
  v3[59] = OUTLINED_FUNCTION_25_0();
  v3[60] = OUTLINED_FUNCTION_25_0();
  v3[61] = OUTLINED_FUNCTION_25_0();
  v3[62] = OUTLINED_FUNCTION_25_0();
  v3[63] = OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_146_0();
  v3[64] = OUTLINED_FUNCTION_0_0();
  v11 = type metadata accessor for ParameterIdentifier();
  v3[65] = v11;
  v3[66] = *(_QWORD *)(v11 - 8);
  v3[67] = OUTLINED_FUNCTION_0_0();
  v3[68] = type metadata accessor for Signpost.OpenSignpost();
  v3[69] = OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ModifyContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  Swift::String v38;
  int value;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  _QWORD *v65;
  id v66;
  void *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  char v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  void *v109;
  id v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;

  OUTLINED_FUNCTION_79_0();
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v27 = *(_QWORD *)(v26 + 552);
  v28 = *(_QWORD *)(v26 + 544);
  v29 = *(_QWORD *)(v26 + 536);
  v30 = *(_QWORD *)(v26 + 528);
  v125 = *(_QWORD *)(v26 + 520);
  v31 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_27_3();
  v32 = *(int *)(v28 + 20);
  *(_DWORD *)(v26 + 204) = v32;
  v33 = v27 + v32;
  *(_QWORD *)v33 = "MakeModifyContactAttributeUnsupportedValueOutput";
  *(_QWORD *)(v33 + 8) = 48;
  *(_BYTE *)(v33 + 16) = 2;
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParameterResolutionRecord<ModifyContactAttributeIntent>);
  *(_QWORD *)(v26 + 560) = v34;
  ParameterResolutionRecord.parameter.getter();
  v35 = ParameterIdentifier.name.getter();
  v37 = v36;
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v125);
  swift_bridgeObjectRetain();
  v38._countAndFlagsBits = v35;
  v38._object = v37;
  value = ModifyContactAttributeSlots.init(rawValue:)(v38).value;
  if (value == 2)
  {
    OUTLINED_FUNCTION_97_3();
    v44 = (void *)OUTLINED_FUNCTION_137_1();
    v45 = objc_msgSend(v44, sel_unsupportedReason);

    v46 = ModifyContactAttributeModifyRelationshipUnsupportedReason.init(rawValue:)(v45);
    v47 = v46;
    v49 = v48;
    if ((v48 & 1) == 0)
    {
      if (v46 == 2)
      {
        v106 = *(_QWORD *)(v26 + 512);
        v107 = *(_QWORD *)(v26 + 240);
        v108 = (void *)ParameterResolutionRecord.intent.getter();
        v109 = (void *)specialized ModifyContactAttributeStrategyProviding.getRelatedContact(intent:contactService:)(v108, v107 + 56);
        *(_QWORD *)(v26 + 768) = v109;

        type metadata accessor for DialogPerson();
        __swift_project_boxed_opaque_existential_1((_QWORD *)(v107 + 16), *(_QWORD *)(v107 + 40));
        v110 = v109;
        dispatch thunk of DeviceState.siriLocale.getter();
        DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v110, 1, v106, 0);
        *(_QWORD *)(v26 + 776) = v111;
        v112 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v26 + 784) = v112;
        *v112 = v26;
        v112[1] = ModifyContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
        OUTLINED_FUNCTION_45_9();
        return ModifyContactAttributeCATs.relationshipNotFound(contact:)(v113, v114);
      }
      if (v46 == 1)
      {
        v50 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v26 + 752) = v50;
        *v50 = v26;
        v50[1] = ModifyContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
        OUTLINED_FUNCTION_45_9();
        return ModifyContactAttributeCATs.relationshipExists()(v51);
      }
    }
    OUTLINED_FUNCTION_102_5();
    lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (uint64_t (*)(uint64_t))type metadata accessor for ContactsError, (uint64_t)&protocol conformance descriptor for ContactsError);
    OUTLINED_FUNCTION_6_7();
    v83 = v82;
    *(_QWORD *)(v26 + 192) = v47;
    *(_BYTE *)(v26 + 200) = v49 & 1;
    v84 = (uint64_t *)&demangling cache variable for type metadata for ModifyContactAttributeModifyRelationshipUnsupportedReason?;
LABEL_21:
    __swift_instantiateConcreteTypeFromMangledName(v84);
    *v83 = Optional.debugDescription.getter();
    v83[1] = v95;
    goto LABEL_22;
  }
  if (value != 3)
  {
    if (value == 4)
    {
      OUTLINED_FUNCTION_97_3();
      objc_msgSend((id)OUTLINED_FUNCTION_137_1(), sel_unsupportedReason);
      OUTLINED_FUNCTION_24_7();
      if (OUTLINED_FUNCTION_136_1().value != SiriContactsIntents_SiriKitContactUnsupportedReason_missingMeCard)
      {
        v126 = (char *)&async function pointer to specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)
             + async function pointer to specialized ContactsUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
        v85 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v26 + 592) = v85;
        *v85 = v26;
        v85[1] = ModifyContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
        OUTLINED_FUNCTION_45_9();
        return v88(v86, v87, v88, v89, v90, v91, v92, v93, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
                 a20,
                 a21,
                 v126,
                 a23,
                 a24,
                 a25,
                 a26);
      }
      v40 = *(uint64_t **)(v26 + 224);
      *(_QWORD *)(v26 + 568) = *(_QWORD *)(*(_QWORD *)(v26 + 240) + 104);
      v41 = OUTLINED_FUNCTION_162();
      v42 = MEMORY[0x24BE99088];
      v40[3] = v41;
      v40[4] = v42;
      __swift_allocate_boxed_opaque_existential_1(v40);
      swift_retain();
      v43 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v26 + 576) = v43;
      *v43 = v26;
      v43[1] = ModifyContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
      OUTLINED_FUNCTION_67_8();
      goto LABEL_24;
    }
    OUTLINED_FUNCTION_102_5();
    lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (uint64_t (*)(uint64_t))type metadata accessor for ContactsError, (uint64_t)&protocol conformance descriptor for ContactsError);
    swift_allocError();
    *v81 = v35;
    v81[1] = (uint64_t)v37;
LABEL_22:
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost(*(_QWORD *)(v26 + 552));
    OUTLINED_FUNCTION_45_0();
    OUTLINED_FUNCTION_17_0();
    OUTLINED_FUNCTION_12_0();
    OUTLINED_FUNCTION_24_0();
    OUTLINED_FUNCTION_23_0();
    OUTLINED_FUNCTION_22_0();
    OUTLINED_FUNCTION_21_0();
    OUTLINED_FUNCTION_14_0();
    OUTLINED_FUNCTION_13_0();
    OUTLINED_FUNCTION_132();
    OUTLINED_FUNCTION_33_0();
    OUTLINED_FUNCTION_32_2();
    OUTLINED_FUNCTION_31_2();
    OUTLINED_FUNCTION_30_2();
    OUTLINED_FUNCTION_29_1();
    OUTLINED_FUNCTION_28_2();
    OUTLINED_FUNCTION_27_2();
    OUTLINED_FUNCTION_26_1();
    OUTLINED_FUNCTION_25_2();
    OUTLINED_FUNCTION_24_2();
    OUTLINED_FUNCTION_23_1();
    OUTLINED_FUNCTION_21_2();
    return OUTLINED_FUNCTION_9_7(*(uint64_t (**)(void))(v26 + 8));
  }
  OUTLINED_FUNCTION_97_3();
  v53 = (void *)OUTLINED_FUNCTION_137_1();
  v54 = objc_msgSend(v53, sel_unsupportedReason);

  v55 = ModifyContactAttributeModifyNickNameUnsupportedReason.init(rawValue:)((uint64_t)v54);
  v56 = v55;
  v58 = v57;
  *(_QWORD *)(v26 + 608) = v55;
  if ((v57 & 1) != 0 || (unint64_t)(v55 - 3) < 0xFFFFFFFFFFFFFFFELL)
  {
    OUTLINED_FUNCTION_102_5();
    lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy((unint64_t *)&lazy protocol witness table cache variable for type ContactsError and conformance ContactsError, (uint64_t (*)(uint64_t))type metadata accessor for ContactsError, (uint64_t)&protocol conformance descriptor for ContactsError);
    OUTLINED_FUNCTION_6_7();
    v83 = v94;
    *(_QWORD *)(v26 + 208) = v56;
    *(_BYTE *)(v26 + 216) = v58 & 1;
    v84 = (uint64_t *)&demangling cache variable for type metadata for ModifyContactAttributeModifyNickNameUnsupportedReason?;
    goto LABEL_21;
  }
  v59 = *(_QWORD **)(v26 + 240);
  v60 = v59[10];
  v61 = v59[11];
  __swift_project_boxed_opaque_existential_1(v59 + 7, v60);
  v62 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 24))(v60, v61);
  *(_QWORD *)(v26 + 616) = v62;
  if (!v62)
  {
    type metadata accessor for ContactsLabelCATs();
    static CATOption.defaultMode.getter();
    *(_QWORD *)(v26 + 728) = CATWrapper.__allocating_init(options:globals:)();
    v96 = OUTLINED_FUNCTION_162();
    OUTLINED_FUNCTION_88_2(v96, MEMORY[0x24BE99088]);
    v97 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v26 + 736) = v97;
    *v97 = v26;
    v97[1] = ModifyContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    OUTLINED_FUNCTION_67_8();
LABEL_24:
    OUTLINED_FUNCTION_45_9();
    return GenericViews.missingMeCardOutput(catFamily:deviceState:ttsEnabled:canUseServerTTS:contactAttributeType:isMe:)(v98, v99, v100, v101, v102, v103, v104, v105);
  }
  v63 = (void *)v62;
  v64 = *(_QWORD *)(v26 + 512);
  v65 = *(_QWORD **)(v26 + 240);
  type metadata accessor for DialogPerson();
  __swift_project_boxed_opaque_existential_1(v65 + 2, v65[5]);
  v66 = v63;
  dispatch thunk of DeviceState.siriLocale.getter();
  v67 = (void *)v65[15];
  v68 = v67;
  DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(v66, 0, v64, (uint64_t)v67);
  *(_QWORD *)(v26 + 624) = v69;
  DialogPerson.nickname.getter();
  dispatch thunk of DialogPerson.fullName.getter();
  objc_msgSend((id)ParameterResolutionRecord.intent.getter(), sel_modifyOperation);
  OUTLINED_FUNCTION_24_7();
  ModifyOperation.stringify.getter(v34);
  v70 = OUTLINED_FUNCTION_17_4();
  v71 = specialized ContactsStrategy.isSmartEnabled.getter(v70);
  v72 = *(_QWORD *)(v26 + 440);
  v73 = *(_QWORD *)(v26 + 432);
  if ((v71 & 1) != 0)
  {
    v75 = *(_QWORD *)(v26 + 480);
    v74 = *(_QWORD *)(v26 + 488);
    type metadata accessor for ModifyContactAttributeCATsModern();
    static CATOption.defaultMode.getter();
    *(_QWORD *)(v26 + 632) = CATWrapperSimple.__allocating_init(options:globals:)();
    __swift_storeEnumTagSinglePayload(v74, 1, 1, v73);
    OUTLINED_FUNCTION_76_8(v75, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 16));
    OUTLINED_FUNCTION_10_8(v75);
    v76 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v26 + 640) = v76;
    *v76 = v26;
    v76[1] = ModifyContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    OUTLINED_FUNCTION_45_9();
    return ModifyContactAttributeCATsModern.intentHandledModifyNickname(updatedNickname:existingNickname:contactName:modifyOperation:)(v77, v78, v79, v80);
  }
  else
  {
    v115 = *(_QWORD *)(v26 + 456);
    OUTLINED_FUNCTION_133_2();
    __swift_storeEnumTagSinglePayload(v116, v117, v118, v73);
    OUTLINED_FUNCTION_76_8(v115, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 16));
    OUTLINED_FUNCTION_10_8(v115);
    v119 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v26 + 712) = v119;
    OUTLINED_FUNCTION_116_0(v119);
    OUTLINED_FUNCTION_45_9();
    return ModifyContactAttributeCATs.intentHandledModifyNickname(updatedNickname:existingNickname:contactName:modifyOperation:)(v120, v121, v122, v123, v124);
  }
}

uint64_t ModifyContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  OUTLINED_FUNCTION_41_1();
  OUTLINED_FUNCTION_87(v2);
  *(_QWORD *)(v0 + 584) = v1;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_29_5();
  OUTLINED_FUNCTION_37_6();
  *(_QWORD *)(v1 + 600) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = v0[76];
  v2 = v0[29];
  v3 = v0[30] + 56;
  v4 = ParameterResolutionRecord.intent.getter();
  v0[83] = v4;
  outlined init with copy of ContactServiceProtocol(v3, (uint64_t)(v0 + 14));
  if (v1 == 1)
  {
    v2 = v0[59];
    v3 = v0[54];
    outlined init with copy of SpeakableString?(v0[63], v2);
    if (__swift_getEnumTagSinglePayload(v2, 1, v3) != 1)
    {
      v5 = v0[55];
      v2 = v0[59];
      SpeakableString.print.getter();
      OUTLINED_FUNCTION_93_5();
      OUTLINED_FUNCTION_56_6(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
      goto LABEL_6;
    }
    outlined destroy of FlowActivity?(v0[59], &demangling cache variable for type metadata for SpeakableString?);
  }
  static String.EMPTY.getter();
  OUTLINED_FUNCTION_93_5();
LABEL_6:
  v7 = v0[47];
  v6 = (uint64_t *)v0[48];
  v8 = v0[45];
  v9 = v0[43];
  v10 = v0[44];
  *v6 = v2;
  v6[1] = v3;
  (*(void (**)(void))(v7 + 104))();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 104))(v8, *MEMORY[0x24BE91BB8], v9);
  type metadata accessor for ContactsLabelCATsModern();
  static CATOption.defaultMode.getter();
  v11 = CATWrapperSimple.__allocating_init(options:globals:)();
  v0[84] = v11;
  v12 = (_QWORD *)swift_task_alloc();
  v0[85] = v12;
  *v12 = v0;
  v12[1] = ModifyContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
  return static ModifyContactAttributeSnippetModel.from(intent:intentResponse:contactService:attributeToModify:flowState:labelCATs:)(v0[49], v4, 0, (uint64_t)(v0 + 14), v0[48], v0[45], v11);
}

{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  OUTLINED_FUNCTION_51_3();
  OUTLINED_FUNCTION_29_5();
  v1 = (uint64_t)(v0 + 14);
  v2 = (void *)v0[83];
  v3 = v0[47];
  v4 = v0[44];
  OUTLINED_FUNCTION_3_0();
  swift_release();

  OUTLINED_FUNCTION_56_6(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  OUTLINED_FUNCTION_99_0(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  __swift_destroy_boxed_opaque_existential_0(v1);
  OUTLINED_FUNCTION_20_0();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v17;
  id v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(_QWORD, uint64_t, uint64_t, _QWORD);
  void *v36;
  uint64_t v37;

  v2 = *(_QWORD *)(v0 + 392);
  v1 = *(_QWORD *)(v0 + 400);
  if (__swift_getEnumTagSinglePayload(v2, 1, v1) == 1)
  {
    outlined destroy of FlowActivity?(v2, &demangling cache variable for type metadata for ModifyContactAttributeSnippetModel?);
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v3 = OUTLINED_FUNCTION_26();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.siriContacts);
    v4 = (void *)Logger.logObject.getter();
    v5 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_15_0(v5))
    {
      *(_WORD *)OUTLINED_FUNCTION_1() = 0;
      OUTLINED_FUNCTION_10_0(&dword_21FE16000, v6, v7, "#ModifyContactAttributeUnsupportedValueStrategy makeUnsupportedValueOutput could not generate snippet model, falling back to legacy");
      OUTLINED_FUNCTION_0();
    }

    v21 = *(_QWORD *)(v0 + 456);
    v23 = *(_QWORD *)(v0 + 440);
    v22 = *(_QWORD *)(v0 + 448);
    v24 = *(_QWORD *)(v0 + 432);
    OUTLINED_FUNCTION_133_2();
    __swift_storeEnumTagSinglePayload(v25, v26, v27, v24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v21, v22, v24);
    __swift_storeEnumTagSinglePayload(v21, 0, 1, v24);
    v28 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 712) = v28;
    v29 = OUTLINED_FUNCTION_116_0(v28);
    return ModifyContactAttributeCATs.intentHandledModifyNickname(updatedNickname:existingNickname:contactName:modifyOperation:)(v29, v30, v31, v32, v33);
  }
  else
  {
    v36 = *(void **)(v0 + 648);
    v8 = *(_QWORD *)(v0 + 408);
    v9 = *(_QWORD *)(v0 + 416);
    v11 = *(_QWORD *)(v0 + 328);
    v10 = *(_QWORD *)(v0 + 336);
    v12 = *(_QWORD *)(v0 + 320);
    v34 = *(_QWORD *)(v0 + 616);
    v13 = *(_QWORD *)(v0 + 240);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v9, v2, v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v10, v9, v1);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 104))(v10, *MEMORY[0x24BE91C88], v12);
    static DialogPhase.completion.getter();
    v14 = (_QWORD *)swift_task_alloc();
    v14[2] = v13;
    v14[3] = v34;
    v14[4] = v10;
    OutputGenerationManifest.init(dialogPhase:_:)();
    OUTLINED_FUNCTION_14_0();
    type metadata accessor for ResponseFactory();
    swift_allocObject();
    *(_QWORD *)(v0 + 688) = ResponseFactory.init()();
    *(_QWORD *)(v0 + 176) = v12;
    lazy protocol witness table accessor for type GetContactAttributeHandleIntentStrategy and conformance GetContactAttributeHandleIntentStrategy(&lazy protocol witness table cache variable for type ContactsSnippetPluginModel and conformance ContactsSnippetPluginModel, (uint64_t (*)(uint64_t))MEMORY[0x24BE91C90], MEMORY[0x24BE91C68]);
    *(_QWORD *)(v0 + 184) = v15;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 152));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16))(boxed_opaque_existential_1, v10, v12);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_21FED8AB0;
    *(_QWORD *)(v17 + 32) = v36;
    v37 = v17;
    specialized Array._endMutation()();
    *(_QWORD *)(v0 + 696) = v37;
    v35 = (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))((int)*MEMORY[0x24BE97EE0] + MEMORY[0x24BE97EE0]);
    v18 = v36;
    v19 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 704) = v19;
    *v19 = v0;
    v19[1] = ModifyContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:);
    return v35(*(_QWORD *)(v0 + 224), v0 + 152, v37, *(_QWORD *)(v0 + 312));
  }
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_29_5();
  v1 = v0 + 152;
  OUTLINED_FUNCTION_3_0();
  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_0(v1);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_14_1();
}

{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  OUTLINED_FUNCTION_80_0();
  v1 = (void *)v0[81];
  v2 = (void *)v0[77];
  v18 = v0[63];
  v13 = v0[56];
  v14 = v0[62];
  v11 = v0[55];
  v12 = v0[54];
  v3 = v0[51];
  v10 = v0[52];
  v4 = v0[50];
  v15 = v0[41];
  v5 = v0[39];
  v16 = v0[40];
  v17 = v0[42];
  v7 = v0[37];
  v6 = v0[38];
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v10, v4);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v12);
  OUTLINED_FUNCTION_132_2(v14);
  OUTLINED_FUNCTION_132_2(v18);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  OUTLINED_FUNCTION_2_36();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_78_6();
  v8 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_50_3(v8);
}

{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v5;

  v5 = *v1;
  v2 = v5;
  OUTLINED_FUNCTION_87(&v5);
  v2[90] = v0;
  swift_task_dealloc();
  v3 = v2[58];
  outlined destroy of FlowActivity?(v2[57], &demangling cache variable for type metadata for SpeakableString?);
  outlined destroy of FlowActivity?(v3, &demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_14_1();
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_80_0();
  v1 = (void *)v0[77];
  v15 = v0[63];
  v13 = v0[56];
  v14 = v0[62];
  v11 = v0[55];
  v12 = v0[54];
  v2 = v0[35];
  v3 = v0[30];
  v9 = v0[32];
  v10 = v0[31];
  outlined init with copy of ContactServiceProtocol(v3 + 16, (uint64_t)(v0 + 7));
  v4 = *(_QWORD *)(v3 + 104);
  v0[5] = &type metadata for InstalledAppsProvider;
  v0[6] = &protocol witness table for InstalledAppsProvider;
  v0[12] = v1;
  v0[13] = v4;
  v5 = v1;
  swift_retain();
  specialized IdiomSensitiveViewBuilder.makeViews(utteranceViews:)();
  outlined destroy of ModifyNicknameUnsupportedViewBuilder((uint64_t)(v0 + 2));
  v6 = OUTLINED_FUNCTION_162();
  OUTLINED_FUNCTION_32_8(v6, MEMORY[0x24BE99088]);
  ModifyContactAttributeUnsupportedValueStrategy.completionViewOutput(templateResult:views:)();
  swift_release();
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v2, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v12);
  outlined destroy of FlowActivity?(v14, &demangling cache variable for type metadata for SpeakableString?);
  outlined destroy of FlowActivity?(v15, &demangling cache variable for type metadata for SpeakableString?);
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_27_3();
  outlined destroy of Signpost.OpenSignpost(v0[69]);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_78_6();
  v7 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_50_3(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  OUTLINED_FUNCTION_41_1();
  OUTLINED_FUNCTION_87(v2);
  *(_QWORD *)(v0 + 744) = v1;
  swift_task_dealloc();
  swift_release();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

{
  uint64_t (*v0)(void);

  OUTLINED_FUNCTION_80_0();
  OUTLINED_FUNCTION_75_8();
  OUTLINED_FUNCTION_19_15();
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_2_36();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_78_6();
  v0 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_50_3(v0);
}

{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_29_5();
  OUTLINED_FUNCTION_37_6();
  *(_QWORD *)(v1 + 760) = v0;
  swift_task_dealloc();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_8_0();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  OUTLINED_FUNCTION_80_0();
  v1 = *(_QWORD *)(v0 + 256);
  v2 = OUTLINED_FUNCTION_162();
  OUTLINED_FUNCTION_29_13(v2, MEMORY[0x24BE99088]);
  OUTLINED_FUNCTION_135_1();
  OUTLINED_FUNCTION_99_0(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_2_36();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_78_6();
  v3 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_50_3(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  OUTLINED_FUNCTION_41_1();
  OUTLINED_FUNCTION_87(v2);
  *(_QWORD *)(v0 + 792) = v1;
  swift_task_dealloc();
  if (!v1)
    swift_release();
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  OUTLINED_FUNCTION_80_0();
  v1 = *(void **)(v0 + 768);
  v2 = *(_QWORD *)(v0 + 256);
  v3 = OUTLINED_FUNCTION_162();
  OUTLINED_FUNCTION_29_13(v3, MEMORY[0x24BE99088]);
  OUTLINED_FUNCTION_135_1();

  OUTLINED_FUNCTION_99_0(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_2_36();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_132();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_78_6();
  v4 = (uint64_t (*)(void))OUTLINED_FUNCTION_37_3();
  return OUTLINED_FUNCTION_50_3(v4);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  OUTLINED_FUNCTION_79_0();
  OUTLINED_FUNCTION_111_2();
  OUTLINED_FUNCTION_19_15();
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_0_34(*(_QWORD *)(v0 + 584));
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_43_1();
  v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_73_0();
  return OUTLINED_FUNCTION_9_7(v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  OUTLINED_FUNCTION_79_0();
  OUTLINED_FUNCTION_75_8();
  OUTLINED_FUNCTION_19_15();
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_0_34(*(_QWORD *)(v0 + 600));
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_43_1();
  v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_73_0();
  return OUTLINED_FUNCTION_9_7(v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  OUTLINED_FUNCTION_79_0();
  OUTLINED_FUNCTION_111_2();
  OUTLINED_FUNCTION_19_15();
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_0_34(*(_QWORD *)(v0 + 744));
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_43_1();
  v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_73_0();
  return OUTLINED_FUNCTION_9_7(v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  OUTLINED_FUNCTION_79_0();
  OUTLINED_FUNCTION_69_11();

  OUTLINED_FUNCTION_74_5(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  OUTLINED_FUNCTION_85_7(v1);
  OUTLINED_FUNCTION_85_7(v0);
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_0_34(*(_QWORD *)(v2 + 656));
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_43_1();
  v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_73_0();
  return OUTLINED_FUNCTION_9_7(v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  OUTLINED_FUNCTION_79_0();
  OUTLINED_FUNCTION_69_11();

  OUTLINED_FUNCTION_74_5(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  OUTLINED_FUNCTION_85_7(v1);
  OUTLINED_FUNCTION_85_7(v0);
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_0_34(*(_QWORD *)(v2 + 720));
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_43_1();
  v5 = (uint64_t (*)(void))OUTLINED_FUNCTION_73_0();
  return OUTLINED_FUNCTION_9_7(v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  OUTLINED_FUNCTION_79_0();
  OUTLINED_FUNCTION_75_8();
  OUTLINED_FUNCTION_19_15();
  OUTLINED_FUNCTION_53_0();
  OUTLINED_FUNCTION_0_34(*(_QWORD *)(v0 + 760));
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_43_1();
  v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_73_0();
  return OUTLINED_FUNCTION_9_7(v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);

  OUTLINED_FUNCTION_79_0();

  swift_release();
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_27_3();
  OUTLINED_FUNCTION_0_34(*(_QWORD *)(v0 + 792));
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_24_0();
  OUTLINED_FUNCTION_23_0();
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_21_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_33_0();
  OUTLINED_FUNCTION_32_2();
  OUTLINED_FUNCTION_31_2();
  OUTLINED_FUNCTION_30_2();
  OUTLINED_FUNCTION_29_1();
  OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_27_2();
  OUTLINED_FUNCTION_26_1();
  OUTLINED_FUNCTION_25_2();
  OUTLINED_FUNCTION_24_2();
  OUTLINED_FUNCTION_23_1();
  OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_43_1();
  v1 = (uint64_t (*)(void))OUTLINED_FUNCTION_73_0();
  return OUTLINED_FUNCTION_9_7(v1);
}

uint64_t ModifyContactAttributeUnsupportedValueStrategy.makeUnsupportedValueOutput(resolveRecord:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = (_QWORD *)*v2;
  v3[81] = a1;
  v3[82] = v1;
  swift_task_dealloc();
  v6 = v3 + 60;
  v5 = v3[60];
  v4 = v6[1];
  swift_release();
  OUTLINED_FUNCTION_85_7(v5);
  OUTLINED_FUNCTION_85_7(v4);
  OUTLINED_FUNCTION_20_0();
  return OUTLINED_FUNCTION_6_1();
}

void ModifyContactAttributeUnsupportedValueStrategy.completionViewOutput(templateResult:views:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD v6[2];
  uint64_t v7;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = OUTLINED_FUNCTION_163();
  OUTLINED_FUNCTION_110_2((uint64_t)v2, v4, v5, v3);
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  static AceOutputHelper.makeCompletionViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of FlowActivity?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  OUTLINED_FUNCTION_132_2((uint64_t)v2);
}

uint64_t type metadata accessor for ModifyContactAttributeUnsupportedValueStrategy()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ModifyContactAttributeUnsupportedValueStrategy;
  if (!type metadata singleton initialization cache for ModifyContactAttributeUnsupportedValueStrategy)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined destroy of ModifyNicknameUnsupportedViewBuilder(uint64_t a1)
{
  destroy for ModifyNicknameUnsupportedViewBuilder(a1);
  return a1;
}

uint64_t dynamic_cast_existential_1_unconditional(uint64_t a1)
{
  uint64_t result;

  result = swift_conformsToProtocol2();
  if (result)
    return a1;
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_0_34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 - 80) = a1;
  v3 = *(_QWORD *)(v1 + 552);
  *(_QWORD *)(v2 - 88) = *(_QWORD *)(v1 + 264);
  return outlined destroy of Signpost.OpenSignpost(v3);
}

uint64_t OUTLINED_FUNCTION_2_36()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 552);
  *(_QWORD *)(v1 - 80) = *(_QWORD *)(v0 + 264);
  return outlined destroy of Signpost.OpenSignpost(v2);
}

uint64_t OUTLINED_FUNCTION_16_14(uint64_t a1)
{
  uint64_t v1;

  __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
  return type metadata accessor for AceOutput();
}

uint64_t OUTLINED_FUNCTION_17_13(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_23_18()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_24_20()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_30_14()
{
  return type metadata accessor for NLContextUpdate();
}

uint64_t OUTLINED_FUNCTION_46_9()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_49_13()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_51_9()
{
  return static AceOutputHelper.makeErrorOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
}

uint64_t OUTLINED_FUNCTION_52_10()
{
  return ContactsCommonCATs.unsupportedAuthFailed()();
}

uint64_t OUTLINED_FUNCTION_53_9(uint64_t a1, uint64_t a2)
{
  return ContactsCommonCATs.unsupportedCompanyNotFound(requestedCompany:)(a1, a2);
}

uint64_t OUTLINED_FUNCTION_54_8()
{
  return ContactsCommonCATs.unsupportedAction()();
}

uint64_t OUTLINED_FUNCTION_55_10()
{
  return ContactsCommonCATs.unsupportedRelationshipNotFound()();
}

uint64_t OUTLINED_FUNCTION_56_10(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  return GenericViews.missingMeCardOutput(catFamily:deviceState:ttsEnabled:canUseServerTTS:contactAttributeType:isMe:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t OUTLINED_FUNCTION_57_8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v1, v2);
}

uint64_t OUTLINED_FUNCTION_60_11(uint64_t a1, uint64_t a2)
{
  return ContactsCommonCATs.unsupportedContactNotFound(requestedContact:)(a1, a2);
}

uint64_t OUTLINED_FUNCTION_61_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v0 + 56) = v1;
  *(_QWORD *)(v0 + 64) = v2;
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 40));
  return dispatch thunk of DeviceState.siriLocale.getter();
}

uint64_t OUTLINED_FUNCTION_63_7()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 152) = v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_65_10()
{
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_68_12()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 480) = v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_69_11()
{
  return swift_release();
}

void OUTLINED_FUNCTION_72_6(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of FlowActivity?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_75_8()
{
  return static os_signpost_type_t.end.getter();
}

uint64_t OUTLINED_FUNCTION_76_8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  return a2(a1, v3, v2);
}

void OUTLINED_FUNCTION_83_5(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of FlowActivity?(v2, a2);
}

void OUTLINED_FUNCTION_85_7(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of FlowActivity?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_86_5()
{
  uint64_t v0;

  *(_WORD *)(v0 + 22) = 2112;
  return ParameterResolutionRecord.result.getter();
}

uint64_t *OUTLINED_FUNCTION_88_2@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  v2[3] = a1;
  v2[4] = a2;
  return __swift_allocate_boxed_opaque_existential_1(v2);
}

uint64_t OUTLINED_FUNCTION_89_2()
{
  return swift_slowAlloc();
}

uint64_t *OUTLINED_FUNCTION_92_4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  v2[3] = a1;
  v2[4] = a2;
  return __swift_allocate_boxed_opaque_existential_1(v2);
}

uint64_t OUTLINED_FUNCTION_95_4()
{
  return swift_task_dealloc();
}

void OUTLINED_FUNCTION_96_3()
{
  uint64_t v0;
  uint64_t v1;

  outlined init with copy of ContactServiceProtocol(v1 + 16, v0);
}

uint64_t OUTLINED_FUNCTION_97_3()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_98_2()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_100_1()
{
  return swift_arrayDestroy();
}

void OUTLINED_FUNCTION_101_3(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, os_log_type_t type)
{
  NSObject *v11;
  uint8_t *v12;

  _os_log_impl(a1, v11, type, a4, v12, 0x20u);
}

uint64_t OUTLINED_FUNCTION_102_5()
{
  return type metadata accessor for ContactsError();
}

uint64_t OUTLINED_FUNCTION_104_3()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

double OUTLINED_FUNCTION_106_3()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_QWORD *)(v0 + 136) = 0;
  *(_OWORD *)(v0 + 104) = 0u;
  return result;
}

double OUTLINED_FUNCTION_107_3()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_QWORD *)(v0 + 176) = 0;
  *(_OWORD *)(v0 + 144) = 0u;
  return result;
}

double OUTLINED_FUNCTION_108_1()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 + 200) = 0u;
  *(_QWORD *)(v0 + 216) = 0;
  *(_OWORD *)(v0 + 184) = 0u;
  return result;
}

double OUTLINED_FUNCTION_109_3()
{
  uint64_t v0;
  double result;

  result = 0.0;
  *(_OWORD *)(v0 + 240) = 0u;
  *(_QWORD *)(v0 + 256) = 0;
  *(_OWORD *)(v0 + 224) = 0u;
  return result;
}

void OUTLINED_FUNCTION_110_3()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2080;
}

uint64_t OUTLINED_FUNCTION_111_2()
{
  uint64_t v0;

  __swift_deallocate_boxed_opaque_existential_1(*(_QWORD *)(v0 + 224));
  return static os_signpost_type_t.end.getter();
}

BOOL OUTLINED_FUNCTION_112_4(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_113_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_115_1(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 136);
}

uint64_t OUTLINED_FUNCTION_116_0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  *a1 = v2;
  a1[1] = v1;
  return *(_QWORD *)(v2 + 280);
}

uint64_t OUTLINED_FUNCTION_119_1()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_121_1@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  *v1 = *v3;
  *(_QWORD *)(a1 + 536) = v2;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_126_2()
{
  return String.sanitizeHomophones.getter();
}

unint64_t OUTLINED_FUNCTION_127_1(uint64_t a1)
{
  uint64_t v1;

  __swift_storeEnumTagSinglePayload(v1, 0, 1, a1);
  return lazy protocol witness table accessor for type String and conformance String();
}

void OUTLINED_FUNCTION_132_2(uint64_t a1)
{
  uint64_t *v1;

  outlined destroy of FlowActivity?(a1, v1);
}

uint64_t OUTLINED_FUNCTION_134_2(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

void OUTLINED_FUNCTION_135_1()
{
  ModifyContactAttributeUnsupportedValueStrategy.completionViewOutput(templateResult:views:)();
}

SiriContactsIntents::SiriKitContactUnsupportedReason_optional OUTLINED_FUNCTION_136_1()
{
  Swift::Int v0;

  return SiriKitContactUnsupportedReason.init(rawValue:)(v0);
}

uint64_t OUTLINED_FUNCTION_137_1()
{
  return ParameterResolutionRecord.result.getter();
}

uint64_t OUTLINED_FUNCTION_138_1()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return *(_QWORD *)(v2 + 528);
}

uint64_t OUTLINED_FUNCTION_139_1()
{
  uint64_t v0;

  return outlined destroy of ErrorViewBuilder(v0);
}

uint64_t OUTLINED_FUNCTION_140_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;

  v3[11] = a2;
  v3[12] = v2;
  v3[7] = a1;
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_142_0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_143_1(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  outlined destroy of FlowActivity?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_144_1()
{
  uint64_t v0;

  return __swift_deallocate_boxed_opaque_existential_1(v0);
}

uint64_t OUTLINED_FUNCTION_146_0()
{
  return type metadata accessor for Locale();
}

uint64_t OUTLINED_FUNCTION_148_1()
{
  return StringProtocol.capitalized(with:)();
}

uint64_t OUTLINED_FUNCTION_149_0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

void DialogPerson.init(from:useConversationalName:locale:mockGlobals:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  id *v34;
  uint64_t v35;
  int EnumTagSinglePayload;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t (*v44)(uint64_t, uint64_t);
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  unint64_t v76;
  unint64_t v77;
  id v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  id *v99;

  v95 = a4;
  v98 = type metadata accessor for SpeakableString();
  v89 = *(_QWORD *)(v98 - 8);
  MEMORY[0x24BDAC7A8](v98);
  OUTLINED_FUNCTION_55_0();
  v8 = v7 - v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v9);
  OUTLINED_FUNCTION_5_2();
  v86 = v10;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v11);
  OUTLINED_FUNCTION_68();
  v93 = v12;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v13);
  v91 = (uint64_t)&v85 - v14;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v15);
  OUTLINED_FUNCTION_68();
  v87 = v16;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v85 - v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhonemeData?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v20);
  OUTLINED_FUNCTION_55_0();
  v23 = v22 - v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v24);
  OUTLINED_FUNCTION_5_2();
  v92 = v25;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v26);
  OUTLINED_FUNCTION_68();
  v90 = v27;
  OUTLINED_FUNCTION_54();
  v29 = MEMORY[0x24BDAC7A8](v28);
  v31 = (char *)&v85 - v30;
  MEMORY[0x24BDAC7A8](v29);
  v33 = (char *)&v85 - v32;
  type metadata accessor for DialogPerson.Builder();
  OUTLINED_FUNCTION_32_0();
  v34 = (id *)DialogPerson.Builder.init()();
  v99 = v34;
  dispatch thunk of DialogPerson.Builder.withUseConversationalName(_:)();
  swift_release();
  static PhonemeDataParser.parse(from:)();
  v35 = type metadata accessor for PhonemeData();
  EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v23, 1, v35);
  v97 = a3;
  v88 = v8;
  if (EnumTagSinglePayload == 1)
  {
    outlined destroy of PhonemeData?(v23, &demangling cache variable for type metadata for PhonemeData?);
    v37 = OUTLINED_FUNCTION_7_24();
    OUTLINED_FUNCTION_110_2((uint64_t)v33, v38, v39, v37);
  }
  else
  {
    v34 = (id *)v23;
    PhonemeData.asNameComponents(locale:)();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v23, v35);
  }
  v40 = objc_msgSend(a1, sel_givenName);
  OUTLINED_FUNCTION_4_6();

  v96 = a1;
  v41 = CNContact.givenNamePronunciationString.getter();
  v94 = (uint64_t)v33;
  outlined init with copy of PersonNameComponents?((uint64_t)v33, (uint64_t)v31);
  OUTLINED_FUNCTION_7_24();
  OUTLINED_FUNCTION_13_7((uint64_t)v31);
  v42 = v90;
  if (v43)
  {
    outlined destroy of PhonemeData?((uint64_t)v31, &demangling cache variable for type metadata for PersonNameComponents?);
  }
  else
  {
    PersonNameComponents.givenName.getter();
    v85 = v41;
    Optional<A>.emptyToNil.getter();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_19_21();
    OUTLINED_FUNCTION_48_5((uint64_t)v31, v44);
  }
  OUTLINED_FUNCTION_17_14((uint64_t)v19);
  v45 = (unint64_t)v99;
  dispatch thunk of DialogPerson.Builder.withGivenName(_:)();
  v46 = swift_release();
  v47 = OUTLINED_FUNCTION_12_23(v46, &demangling cache variable for type metadata for SpeakableString?);
  v48 = v96;
  v49 = OUTLINED_FUNCTION_39_2(v47, sel_middleName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v51 = OUTLINED_FUNCTION_39_2(v50, sel_phoneticMiddleName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  if ((OUTLINED_FUNCTION_10_21() & 1) != 0 && (Optional<A>.isNilOrEmpty.getter() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_25_22();
  }
  else
  {
    OUTLINED_FUNCTION_25_22();
  }
  SpeakableString.init(print:speak:)();
  v52 = v94;
  v53 = v87;
  v54 = v98;
  (*(void (**)(uint64_t, id, uint64_t))(v89 + 32))(v87, v51, v98);
  __swift_storeEnumTagSinglePayload(v53, 0, 1, v54);
  dispatch thunk of DialogPerson.Builder.withMiddleName(_:)();
  swift_release();
  v55 = outlined destroy of PhonemeData?(v53, &demangling cache variable for type metadata for SpeakableString?);
  v56 = OUTLINED_FUNCTION_39_2(v55, sel_nickname);
  OUTLINED_FUNCTION_4_6();

  outlined init with copy of PersonNameComponents?(v52, v42);
  v57 = OUTLINED_FUNCTION_13_7(v42);
  if (v43)
  {
    OUTLINED_FUNCTION_29_17(v57, &demangling cache variable for type metadata for PersonNameComponents?);
  }
  else
  {
    PersonNameComponents.nickname.getter();
    Optional<A>.emptyToNil.getter();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_19_21();
    OUTLINED_FUNCTION_48_5(v42, v58);
  }
  v59 = v91;
  OUTLINED_FUNCTION_17_14(v91);
  dispatch thunk of DialogPerson.Builder.withNickname(_:)();
  swift_release();
  v60 = outlined destroy of PhonemeData?(v59, &demangling cache variable for type metadata for SpeakableString?);
  v61 = OUTLINED_FUNCTION_39_2(v60, sel_familyName);
  v94 = OUTLINED_FUNCTION_4_6();

  CNContact.familyNamePronunciationString.getter();
  v62 = v92;
  outlined init with copy of PersonNameComponents?(v52, v92);
  OUTLINED_FUNCTION_13_7(v62);
  if (v43)
  {
    outlined destroy of PhonemeData?(v62, &demangling cache variable for type metadata for PersonNameComponents?);
    v64 = 0;
  }
  else
  {
    PersonNameComponents.familyName.getter();
    OUTLINED_FUNCTION_18_16();
    v64 = v63;
    v45 = (unint64_t)v99;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_19_21();
    OUTLINED_FUNCTION_48_5(v62, v65);
  }
  SpeakableString.init(printed:phonetic:phonemeData:)(v64, v93);
  dispatch thunk of DialogPerson.Builder.withFamilyName(_:)();
  v66 = swift_release();
  v67 = OUTLINED_FUNCTION_29_17(v66, &demangling cache variable for type metadata for SpeakableString?);
  v68 = OUTLINED_FUNCTION_39_2(v67, sel_organizationName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v70 = OUTLINED_FUNCTION_39_2(v69, sel_phoneticOrganizationName);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  dispatch thunk of DialogPerson.Builder.withCompany(print:speak:)();
  swift_release();
  swift_bridgeObjectRelease();
  v71 = swift_bridgeObjectRelease();
  v72 = OUTLINED_FUNCTION_39_2(v71, sel_termsOfAddress);
  type metadata accessor for CNContact(0, (unint64_t *)&lazy cache variable for type metadata for NSTermOfAddress);
  OUTLINED_FUNCTION_30_15();
  OUTLINED_FUNCTION_26_0();
  if (v45 >> 62)
  {
    swift_bridgeObjectRetain();
    v73 = _CocoaArrayWrapper.endIndex.getter();
    OUTLINED_FUNCTION_5();
  }
  else
  {
    v73 = *(_QWORD *)((v45 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v74 = v97;
  if (!v73)
    goto LABEL_31;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v45 & 0xC000000000000001) == 0, v45);
  if ((v45 & 0xC000000000000001) != 0)
    OUTLINED_FUNCTION_29_6();
  v75 = *(id *)(v45 + 32);
  OUTLINED_FUNCTION_5();
  v76 = outlined bridged method (pb) of @objc NSTermOfAddress.pronouns.getter(v75);
  if (!v76)
  {

    goto LABEL_32;
  }
  v77 = v76;
  if (v76 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter())
      goto LABEL_24;
    goto LABEL_30;
  }
  if (!*(_QWORD *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_30:

LABEL_31:
    OUTLINED_FUNCTION_5();
    goto LABEL_32;
  }
LABEL_24:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v77 & 0xC000000000000001) == 0, v77);
  if ((v77 & 0xC000000000000001) != 0)
    OUTLINED_FUNCTION_29_6();
  v78 = *(id *)(v77 + 32);
  OUTLINED_FUNCTION_5();
  v79 = objc_msgSend(v78, sel_pronoun);

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  type metadata accessor for DialogPronoun.Builder();
  OUTLINED_FUNCTION_32_0();
  DialogPronoun.Builder.init()();
  v80 = v86;
  OUTLINED_FUNCTION_17_4();
  __swift_storeEnumTagSinglePayload(v80, 0, 1, v98);
  dispatch thunk of DialogPronoun.Builder.withInitialPronoun(_:)();
  v81 = swift_release();
  OUTLINED_FUNCTION_23_19(v81, &demangling cache variable for type metadata for SpeakableString?);
  dispatch thunk of DialogPronoun.Builder.build()();
  dispatch thunk of DialogPerson.Builder.withPronoun(_:)();
  OUTLINED_FUNCTION_26_0();
  swift_release();
  OUTLINED_FUNCTION_2();
  swift_release();
LABEL_32:
  swift_retain();
  dispatch thunk of DialogPerson.__allocating_init(builder:)();
  v82 = v95;
  if (v95)
  {
    swift_retain();
    MEMORY[0x2207D7544](v82);
    OUTLINED_FUNCTION_2();
  }
  swift_release();

  type metadata accessor for Locale();
  OUTLINED_FUNCTION_15_17();
  v84 = v83(v74);
  OUTLINED_FUNCTION_12_23(v84, &demangling cache variable for type metadata for PersonNameComponents?);
  OUTLINED_FUNCTION_7();
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t EnumTagSinglePayload;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t);
  uint64_t v76;
  _QWORD v77[2];
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;

  v84 = a4;
  v87 = a3;
  v5 = type metadata accessor for SpeakableString();
  v83 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  OUTLINED_FUNCTION_55_0();
  v82 = v7 - v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v8);
  OUTLINED_FUNCTION_5_2();
  v79 = v9;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v10);
  v80 = (uint64_t)v77 - v11;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v12);
  OUTLINED_FUNCTION_68();
  v81 = v13;
  OUTLINED_FUNCTION_54();
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v77 - v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PhonemeData?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v17);
  OUTLINED_FUNCTION_55_0();
  v20 = v19 - v18;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  OUTLINED_FUNCTION_28();
  MEMORY[0x24BDAC7A8](v21);
  OUTLINED_FUNCTION_5_2();
  v85 = v22;
  OUTLINED_FUNCTION_54();
  v24 = MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)v77 - v25;
  v27 = MEMORY[0x24BDAC7A8](v24);
  v29 = (char *)v77 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)v77 - v30;
  type metadata accessor for DialogPerson.Builder();
  OUTLINED_FUNCTION_32_0();
  v32 = DialogPerson.Builder.init()();
  dispatch thunk of DialogPerson.Builder.withUseConversationalName(_:)();
  swift_release();
  static PhonemeDataParser.parse(from:)();
  v33 = type metadata accessor for PhonemeData();
  if (__swift_getEnumTagSinglePayload(v20, 1, v33) == 1)
  {
    outlined destroy of PhonemeData?(v20, &demangling cache variable for type metadata for PhonemeData?);
    v34 = OUTLINED_FUNCTION_7_24();
    v37 = OUTLINED_FUNCTION_110_2((uint64_t)v31, v35, v36, v34);
  }
  else
  {
    PhonemeData.asNameComponents(locale:)();
    v37 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v20, v33);
  }
  OUTLINED_FUNCTION_0_35(v37, (SEL *)&selRef_firstName);
  v38 = OUTLINED_FUNCTION_4_26();
  v88 = v32;
  v86 = v31;
  if (v33)
  {
    v78 = v26;
    v39 = OUTLINED_FUNCTION_0_35(v38, (SEL *)&selRef_firstName);
    if (!v40)
    {
      __break(1u);
      goto LABEL_34;
    }
    v77[1] = v39;
    OUTLINED_FUNCTION_0_35(v39, (SEL *)&selRef_firstNamePhonetic);
    v77[0] = v41;
    OUTLINED_FUNCTION_24_21();
    v33 = OUTLINED_FUNCTION_7_24();
    EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v29, 1, v33);
    if ((_DWORD)EnumTagSinglePayload == 1)
    {
      OUTLINED_FUNCTION_12_23(EnumTagSinglePayload, &demangling cache variable for type metadata for PersonNameComponents?);
      v43 = 0;
    }
    else
    {
      PersonNameComponents.givenName.getter();
      OUTLINED_FUNCTION_18_16();
      v43 = v44;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v33 - 8) + 8))(v29, v33);
    }
    SpeakableString.init(printed:phonetic:phonemeData:)(v43, (uint64_t)v16);
    dispatch thunk of DialogPerson.Builder.withGivenName(_:)();
    swift_release();
    v38 = outlined destroy of PhonemeData?((uint64_t)v16, &demangling cache variable for type metadata for SpeakableString?);
    v31 = v86;
    v26 = v78;
  }
  OUTLINED_FUNCTION_0_35(v38, (SEL *)&selRef_middleName);
  v45 = OUTLINED_FUNCTION_4_26();
  v46 = v85;
  if (!v33)
    goto LABEL_15;
  OUTLINED_FUNCTION_0_35(v45, (SEL *)&selRef_middleName);
  if (!v47)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if ((OUTLINED_FUNCTION_10_21() & 1) != 0)
    OUTLINED_FUNCTION_10_21();
  v48 = v82;
  OUTLINED_FUNCTION_17_4();
  v33 = v81;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 32))(v81, v48, v5);
  __swift_storeEnumTagSinglePayload(v33, 0, 1, v5);
  dispatch thunk of DialogPerson.Builder.withMiddleName(_:)();
  swift_release();
  v45 = outlined destroy of PhonemeData?(v33, &demangling cache variable for type metadata for SpeakableString?);
LABEL_15:
  OUTLINED_FUNCTION_0_35(v45, (SEL *)&selRef_nickName);
  v49 = OUTLINED_FUNCTION_4_26();
  if (!v33)
    goto LABEL_21;
  v50 = OUTLINED_FUNCTION_0_35(v49, (SEL *)&selRef_nickName);
  if (!v51)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v33 = v50;
  outlined init with copy of PersonNameComponents?((uint64_t)v31, (uint64_t)v26);
  v52 = OUTLINED_FUNCTION_7_24();
  v53 = __swift_getEnumTagSinglePayload((uint64_t)v26, 1, v52);
  if ((_DWORD)v53 == 1)
  {
    OUTLINED_FUNCTION_29_17(v53, &demangling cache variable for type metadata for PersonNameComponents?);
    v54 = 0;
  }
  else
  {
    PersonNameComponents.nickname.getter();
    Optional<A>.emptyToNil.getter();
    v55 = v26;
    v54 = v56;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v55, v52);
  }
  v57 = v80;
  SpeakableString.init(printed:phonetic:phonemeData:)(v54, v80);
  dispatch thunk of DialogPerson.Builder.withNickname(_:)();
  swift_release();
  v49 = outlined destroy of PhonemeData?(v57, &demangling cache variable for type metadata for SpeakableString?);
LABEL_21:
  OUTLINED_FUNCTION_0_35(v49, (SEL *)&selRef_lastName);
  v58 = OUTLINED_FUNCTION_4_26();
  if (!v33)
    goto LABEL_27;
  v59 = OUTLINED_FUNCTION_0_35(v58, (SEL *)&selRef_lastName);
  if (!v60)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v33 = v59;
  OUTLINED_FUNCTION_0_35(v59, (SEL *)&selRef_lastNamePhonetic);
  OUTLINED_FUNCTION_24_21();
  OUTLINED_FUNCTION_7_24();
  v61 = OUTLINED_FUNCTION_13_7(v46);
  if (v62)
  {
    OUTLINED_FUNCTION_12_23(v61, &demangling cache variable for type metadata for PersonNameComponents?);
    v67 = 0;
  }
  else
  {
    PersonNameComponents.familyName.getter();
    v63 = v46;
    v64 = v33;
    v65 = v63;
    OUTLINED_FUNCTION_18_16();
    v67 = v66;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_19_21();
    v68 = v65;
    v33 = v64;
    OUTLINED_FUNCTION_48_5(v68, v69);
  }
  SpeakableString.init(printed:phonetic:phonemeData:)(v67, v79);
  dispatch thunk of DialogPerson.Builder.withFamilyName(_:)();
  v70 = swift_release();
  v58 = OUTLINED_FUNCTION_23_19(v70, &demangling cache variable for type metadata for SpeakableString?);
LABEL_27:
  OUTLINED_FUNCTION_0_35(v58, (SEL *)&selRef_company);
  v71 = OUTLINED_FUNCTION_4_26();
  if (v33)
  {
    v72 = OUTLINED_FUNCTION_0_35(v71, (SEL *)&selRef_company);
    if (v73)
    {
      OUTLINED_FUNCTION_0_35(v72, (SEL *)&selRef_companyPhonetic);
      dispatch thunk of DialogPerson.Builder.withCompany(print:speak:)();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
LABEL_37:
    __break(1u);
    return;
  }
LABEL_30:
  swift_retain();
  dispatch thunk of DialogPerson.__allocating_init(builder:)();
  v74 = v84;
  if (v84)
  {
    swift_retain();
    MEMORY[0x2207D7544](v74);
    OUTLINED_FUNCTION_2();
  }
  swift_release();

  type metadata accessor for Locale();
  OUTLINED_FUNCTION_15_17();
  v76 = v75(v87);
  OUTLINED_FUNCTION_23_19(v76, &demangling cache variable for type metadata for PersonNameComponents?);
  OUTLINED_FUNCTION_7();
}

uint64_t outlined init with copy of PersonNameComponents?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PhonemeData?(uint64_t a1, uint64_t *a2)
{
  void (*v3)(uint64_t);

  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_15_17();
  v3(a1);
  return a1;
}

uint64_t outlined bridged method (pb) of @objc NSTermOfAddress.pronouns.getter(void *a1)
{
  uint64_t v1;

  if (!objc_msgSend(a1, sel_pronouns))
    return 0;
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for NSMorphologyPronoun);
  OUTLINED_FUNCTION_30_15();
  OUTLINED_FUNCTION_26_0();
  return v1;
}

uint64_t OUTLINED_FUNCTION_0_35(uint64_t a1, SEL *a2)
{
  void *v2;

  return outlined bridged method (pb) of @objc PostalAddress.street.getter(v2, a2);
}

uint64_t OUTLINED_FUNCTION_4_26()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_7_24()
{
  return type metadata accessor for PersonNameComponents();
}

uint64_t OUTLINED_FUNCTION_10_21()
{
  return Optional<A>.isNilOrEmpty.getter();
}

uint64_t OUTLINED_FUNCTION_12_23(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return outlined destroy of PhonemeData?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_17_14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return SpeakableString.init(printed:phonetic:phonemeData:)(v1, a1);
}

uint64_t OUTLINED_FUNCTION_18_16()
{
  return Optional<A>.emptyToNil.getter();
}

uint64_t OUTLINED_FUNCTION_23_19(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return outlined destroy of PhonemeData?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_24_21()
{
  uint64_t v0;
  uint64_t v1;

  return outlined init with copy of PersonNameComponents?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_25_22()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_29_17(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  return outlined destroy of PhonemeData?(v2, a2);
}

uint64_t OUTLINED_FUNCTION_30_15()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.convertToContactAttributeLabel.getter()
{
  void *v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t result;
  char v4;

  OUTLINED_FUNCTION_18_17();
  v2._countAndFlagsBits = v1;
  v2._object = v0;
  ContactNLv3Intent.NLContactAttributesValue.init(rawValue:)(v2);
  result = 0x786166656D6F68;
  switch(v4)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 7:
    case 9:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 49:
      result = String.lowercased()()._countAndFlagsBits;
      break;
    case 5:
      return result;
    case 6:
      result = 0x7861666B726F77;
      break;
    default:
      swift_bridgeObjectRetain();
      result = v1;
      break;
  }
  return result;
}

void String.mapToNLAttributeValue(forType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v5;
  char v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  char v13;
  BOOL v14;
  char v16;
  BOOL v17;
  BOOL v18;
  char v20;
  char v22;
  BOOL v23;
  BOOL v25;
  BOOL v26;
  BOOL v27;

  switch(a1)
  {
    case 1:
      OUTLINED_FUNCTION_4_27();
      v5 = v5 && a3 == 0xE400000000000000;
      if (!v5 && (OUTLINED_FUNCTION_0_36() & 1) == 0)
      {
        OUTLINED_FUNCTION_7_25();
        if (!v5 || a3 != 0xE800000000000000)
        {
          v7 = OUTLINED_FUNCTION_0_36();
          v8 = a2 == 1701670760 && a3 == 0xE400000000000000;
          v9 = v8;
          if ((v7 & 1) == 0 && !v9 && (OUTLINED_FUNCTION_0_36() & 1) == 0)
          {
            OUTLINED_FUNCTION_1_35();
            v10 = v5 && a3 == 0xE600000000000000;
            if (!v10 && (OUTLINED_FUNCTION_0_36() & 1) == 0)
            {
              OUTLINED_FUNCTION_3_22();
              if (!v5 || a3 != 0xE500000000000000)
                goto LABEL_95;
            }
          }
        }
      }
      goto LABEL_96;
    case 2:
      OUTLINED_FUNCTION_12_24();
      if (v5 && a3 == 0xE400000000000000)
        goto LABEL_97;
      OUTLINED_FUNCTION_0_36();
      OUTLINED_FUNCTION_13_27();
      if ((v13 & 1) != 0)
        goto LABEL_96;
      OUTLINED_FUNCTION_10_22();
      v14 = v5 && a3 == 0xE400000000000000;
      if (v14 || (OUTLINED_FUNCTION_0_36() & 1) != 0)
        goto LABEL_96;
      OUTLINED_FUNCTION_9_22();
      if (v5 && a3 == 0xE600000000000000)
        goto LABEL_98;
      OUTLINED_FUNCTION_0_36();
      OUTLINED_FUNCTION_2_37();
      if ((v16 & 1) == 0)
      {
        OUTLINED_FUNCTION_15_18();
        v17 = v5 && a3 == 0xE300000000000000;
        if (!v17 && (OUTLINED_FUNCTION_0_36() & 1) == 0)
        {
          OUTLINED_FUNCTION_6_27();
          v18 = v5 && a3 == 0xE300000000000000;
          if (!v18 && (OUTLINED_FUNCTION_0_36() & 1) == 0)
          {
            OUTLINED_FUNCTION_1_35();
            if (v5 && a3 == 0xE600000000000000)
            {
LABEL_98:
              OUTLINED_FUNCTION_2_37();
            }
            else
            {
              OUTLINED_FUNCTION_0_36();
              OUTLINED_FUNCTION_2_37();
              if ((v20 & 1) == 0)
              {
                OUTLINED_FUNCTION_11_19();
                if (v5 && a3 == 0xE400000000000000)
                {
LABEL_97:
                  OUTLINED_FUNCTION_13_27();
                }
                else
                {
                  OUTLINED_FUNCTION_0_36();
                  OUTLINED_FUNCTION_13_27();
                  if ((v22 & 1) == 0)
                  {
                    OUTLINED_FUNCTION_17_15();
                    v23 = v5 && a3 == 0xE300000000000000;
                    if (!v23 && (OUTLINED_FUNCTION_0_36() & 1) == 0)
                    {
                      OUTLINED_FUNCTION_5_21();
                      if (!v5 || a3 != 0xE300000000000000)
                        goto LABEL_95;
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_96:
      OUTLINED_FUNCTION_31_9();
      return;
    case 3:
      v25 = a2 == 7174503 && a3 == 0xE300000000000000;
      if (!v25 && (OUTLINED_FUNCTION_0_36() & 1) == 0)
      {
        v26 = a2 == 1701670760 && a3 == 0xE400000000000000;
        if (!v26 && (OUTLINED_FUNCTION_0_36() & 1) == 0)
        {
          v27 = a2 == 1802661751 && a3 == 0xE400000000000000;
          if (!v27 && (OUTLINED_FUNCTION_0_36() & 1) == 0)
          {
            OUTLINED_FUNCTION_1_35();
            if (!v5 || a3 != 0xE600000000000000)
LABEL_95:
              OUTLINED_FUNCTION_0_36();
          }
        }
      }
      goto LABEL_96;
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      goto LABEL_96;
    default:
      swift_bridgeObjectRetain();
      goto LABEL_96;
  }
}

void String.mapToNLContactTypeValue(forType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v6;
  char v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  char v14;
  BOOL v15;
  char v17;
  BOOL v18;
  BOOL v19;
  char v21;
  char v23;
  BOOL v24;

  if (a1 == 2)
  {
    OUTLINED_FUNCTION_12_24();
    if (v6 && a3 == 0xE400000000000000)
      goto LABEL_78;
    OUTLINED_FUNCTION_0_36();
    OUTLINED_FUNCTION_13_27();
    if ((v14 & 1) != 0)
      goto LABEL_79;
    OUTLINED_FUNCTION_10_22();
    v15 = v6 && a3 == 0xE400000000000000;
    if (v15 || (OUTLINED_FUNCTION_0_36() & 1) != 0)
      goto LABEL_79;
    OUTLINED_FUNCTION_9_22();
    if (v6 && a3 == 0xE600000000000000)
      goto LABEL_80;
    OUTLINED_FUNCTION_0_36();
    OUTLINED_FUNCTION_2_37();
    if ((v17 & 1) != 0)
      goto LABEL_79;
    OUTLINED_FUNCTION_15_18();
    v18 = v6 && a3 == v3;
    if (v18 || (OUTLINED_FUNCTION_0_36() & 1) != 0)
      goto LABEL_79;
    OUTLINED_FUNCTION_6_27();
    v19 = v6 && a3 == 0xE300000000000000;
    if (v19 || (OUTLINED_FUNCTION_0_36() & 1) != 0)
      goto LABEL_79;
    OUTLINED_FUNCTION_1_35();
    if (v6 && a3 == 0xE600000000000000)
    {
LABEL_80:
      OUTLINED_FUNCTION_2_37();
      goto LABEL_79;
    }
    OUTLINED_FUNCTION_0_36();
    OUTLINED_FUNCTION_2_37();
    if ((v21 & 1) != 0)
      goto LABEL_79;
    OUTLINED_FUNCTION_11_19();
    if (v6 && a3 == 0xE400000000000000)
    {
LABEL_78:
      OUTLINED_FUNCTION_13_27();
      goto LABEL_79;
    }
    OUTLINED_FUNCTION_0_36();
    OUTLINED_FUNCTION_13_27();
    if ((v23 & 1) != 0)
      goto LABEL_79;
    OUTLINED_FUNCTION_17_15();
    v24 = v6 && a3 == v3;
    if (v24 || (OUTLINED_FUNCTION_0_36() & 1) != 0)
      goto LABEL_79;
    OUTLINED_FUNCTION_5_21();
    if (v6 && a3 == 0xE500000000000000)
      goto LABEL_79;
    goto LABEL_30;
  }
  if (a1 != 1)
  {
LABEL_31:
    swift_bridgeObjectRetain();
    goto LABEL_79;
  }
  OUTLINED_FUNCTION_4_27();
  v6 = v6 && a3 == 0xE400000000000000;
  if (!v6 && (OUTLINED_FUNCTION_0_36() & 1) == 0)
  {
    OUTLINED_FUNCTION_7_25();
    if (!v6 || a3 != 0xE800000000000000)
    {
      v8 = OUTLINED_FUNCTION_0_36();
      v9 = a2 == 1701670760 && a3 == 0xE400000000000000;
      v10 = v9;
      if ((v8 & 1) == 0 && !v10 && (OUTLINED_FUNCTION_0_36() & 1) == 0)
      {
        OUTLINED_FUNCTION_1_35();
        v11 = v6 && a3 == 0xE600000000000000;
        if (!v11 && (OUTLINED_FUNCTION_0_36() & 1) == 0)
        {
          OUTLINED_FUNCTION_3_22();
          if (!v6 || a3 != 0xE500000000000000)
          {
LABEL_30:
            if ((OUTLINED_FUNCTION_0_36() & 1) == 0)
              goto LABEL_31;
          }
        }
      }
    }
  }
LABEL_79:
  OUTLINED_FUNCTION_31_9();
}

uint64_t String.sanitizeHomophones.getter()
{
  uint64_t result;
  uint64_t v1;

  lazy protocol witness table accessor for type String and conformance String();
  result = StringProtocol.components<A>(separatedBy:)();
  if (*(_QWORD *)(result + 16))
  {
    v1 = *(_QWORD *)(result + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t String.sanitizeContactIdURL.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t (**v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t (**v28)(uint64_t, uint64_t);
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLQueryItem?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URLQueryItem();
  v8 = *(uint64_t (***)(uint64_t, uint64_t))(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v51 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLComponents?);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v51 - v18;
  URLComponents.init(string:)();
  outlined init with copy of URLComponents?((uint64_t)v19, (uint64_t)v17);
  v20 = type metadata accessor for URLComponents();
  if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v20) == 1)
  {
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v17, &demangling cache variable for type metadata for URLComponents?);
LABEL_15:
    OUTLINED_FUNCTION_2_20((uint64_t)v6, 1);
LABEL_16:
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v6, &demangling cache variable for type metadata for URLQueryItem?);
LABEL_17:
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.siriContacts);
    swift_bridgeObjectRetain_n();
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)OUTLINED_FUNCTION_1();
      v57 = OUTLINED_FUNCTION_1();
      *(_DWORD *)v38 = 136315138;
      swift_bridgeObjectRetain();
      v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v57);
      OUTLINED_FUNCTION_55_5(v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_21FE16000, v36, v37, "#sanitizeContactIdURL: string is not in URL format, returning raw value: %s", v38, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_0();
    }
    swift_bridgeObjectRelease_n();

    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v19, &demangling cache variable for type metadata for URLComponents?);
    swift_bridgeObjectRetain();
    return a1;
  }
  v21 = URLComponents.queryItems.getter();
  v22 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8);
  v23 = v20;
  v24 = v21;
  v22(v17, v23);
  if (!v24)
    goto LABEL_15;
  v55 = v13;
  v56 = v6;
  v25 = *(_QWORD *)(v24 + 16);
  if (v25)
  {
    v52 = a2;
    v53 = a1;
    v54 = v19;
    v26 = v24 + ((*((unsigned __int8 *)v8 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v8 + 80));
    v27 = v8[9];
    v28 = v8;
    v29 = v8[2];
    v51 = v24;
    swift_bridgeObjectRetain();
    while (1)
    {
      ((void (*)(char *, unint64_t, uint64_t))v29)(v11, v26, v7);
      v30 = URLQueryItem.name.getter();
      v32 = v31;
      if (one-time initialization token for identifier != -1)
        swift_once();
      if (v30 == static Constants.identifier && v32 == unk_25558DBF0)
        break;
      v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v34 & 1) != 0)
        goto LABEL_25;
      OUTLINED_FUNCTION_28_0((uint64_t)v11, v28[1]);
      v26 += (unint64_t)v27;
      if (!--v25)
      {
        OUTLINED_FUNCTION_18_0();
        v41 = 1;
        a1 = v53;
        v19 = v54;
        a2 = v52;
        v8 = v28;
        v13 = v55;
        goto LABEL_26;
      }
    }
    OUTLINED_FUNCTION_18_0();
LABEL_25:
    swift_bridgeObjectRelease();
    v8 = v28;
    v6 = v56;
    ((void (*)(char *, char *, uint64_t))v28[4])(v56, v11, v7);
    v41 = 0;
    a1 = v53;
    v19 = v54;
    a2 = v52;
    v13 = v55;
  }
  else
  {
    v41 = 1;
LABEL_26:
    v6 = v56;
  }
  OUTLINED_FUNCTION_2_20((uint64_t)v6, v41);
  OUTLINED_FUNCTION_18_0();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) == 1)
    goto LABEL_16;
  ((void (*)(char *, char *, uint64_t))v8[4])(v13, v6, v7);
  v42 = URLQueryItem.value.getter();
  if (!v43)
  {
    OUTLINED_FUNCTION_28_0((uint64_t)v13, v8[1]);
    goto LABEL_17;
  }
  v44 = v42;
  v45 = v43;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v46 = type metadata accessor for Logger();
  __swift_project_value_buffer(v46, (uint64_t)static Logger.siriContacts);
  swift_bridgeObjectRetain_n();
  v47 = Logger.logObject.getter();
  v48 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)OUTLINED_FUNCTION_1();
    v57 = OUTLINED_FUNCTION_1();
    v56 = (char *)v8;
    *(_DWORD *)v49 = 136315138;
    swift_bridgeObjectRetain();
    v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &v57);
    OUTLINED_FUNCTION_55_5(v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_21FE16000, v47, v48, "#sanitizeContactIdURL: string is in URL format, returning identifier query parameter: %s", v49, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0();
  }
  swift_bridgeObjectRelease_n();

  OUTLINED_FUNCTION_28_0((uint64_t)v55, v8[1]);
  outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v19, &demangling cache variable for type metadata for URLComponents?);
  return v44;
}

Swift::String __swiftcall String.firstLetterCapitalized()()
{
  unint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String result;

  OUTLINED_FUNCTION_18_17();
  specialized Collection.prefix(_:)(1);
  v2 = Substring.uppercased()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Collection.dropFirst(_:)(1uLL, v1, v0);
  lazy protocol witness table accessor for type Substring and conformance Substring();
  swift_bridgeObjectRetain();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  countAndFlagsBits = v2._countAndFlagsBits;
  object = v2._object;
  result._object = object;
  result._countAndFlagsBits = countAndFlagsBits;
  return result;
}

unint64_t specialized Collection.dropFirst(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = String.index(_:offsetBy:limitedBy:)();
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
    {
      v7 = String.subscript.getter();
      swift_bridgeObjectRelease();
      return v7;
    }
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    result = MEMORY[0x2207D86A8](MEMORY[0x24BEE1E20], MEMORY[0x24BEE1E08]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

uint64_t outlined init with copy of URLComponents?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URLComponents?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_0_36()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_18_17()
{
  return swift_bridgeObjectRetain();
}

uint64_t LabelMapper.localizedLabel(handleLabel:localeString:type:)(objc_class *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSObject *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  objc_class *isa;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  Swift::String v40;
  Swift::String v41;
  objc_class *v42;
  unint64_t v43;
  unint64_t v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v54[4];
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  objc_class *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65[2];
  NSObject v66;
  unint64_t v67;

  v58 = a6;
  v59 = a5;
  v62 = a1;
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  v10 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v57 = (char *)v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v56 = (char *)v54 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v55 = (char *)v54 - v14;
  v15 = type metadata accessor for CharacterSet();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v61 = (char *)v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.siriContacts);
  OUTLINED_FUNCTION_29();
  OUTLINED_FUNCTION_28_3();
  v19 = OUTLINED_FUNCTION_8();
  v20 = (uint64_t)swift_getObjCClassMetadata;
  if (os_log_type_enabled(v6, v19))
  {
    v54[1] = v9;
    v21 = OUTLINED_FUNCTION_1();
    v54[3] = v15;
    v22 = (_DWORD *)v21;
    v23 = OUTLINED_FUNCTION_1();
    v60 = a3;
    v65[0] = v23;
    *v22 = 136315138;
    v54[2] = v16;
    v66.isa = v62;
    v67 = a2;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    v24 = String.init<A>(describing:)();
    v66.isa = (Class)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_30();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_18_18(&dword_21FE16000, v6, v19, "#localizedLabel raw handleLabel: %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0();
  }

  OUTLINED_FUNCTION_30();
  if (a2)
  {
    v26 = HIBYTE(a2) & 0xF;
    isa = v62;
    if ((a2 & 0x2000000000000000) == 0)
      v26 = (unint64_t)v62 & 0xFFFFFFFFFFFFLL;
    if (v26)
    {
      CharacterSet.init(charactersIn:)();
      v66.isa = isa;
      v67 = a2;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol.rangeOfCharacter(from:options:range:)();
      if ((v28 & 1) != 0)
      {
        v40 = String.firstLetterCapitalized()();
        v66.isa = (Class)1008804959;
        v67 = 0xE400000000000000;
        String.append(_:)(v40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v41._countAndFlagsBits = 1596203326;
        v41._object = (void *)0xE400000000000000;
        String.append(_:)(v41);
        swift_bridgeObjectRelease();
        isa = v66.isa;
        a2 = v67;
        OUTLINED_FUNCTION_20_18();
LABEL_20:
        v66.isa = isa;
        v67 = a2;
        lazy protocol witness table accessor for type String and conformance String();
        v42 = (objc_class *)StringProtocol.capitalized.getter();
        v44 = v43;
        swift_bridgeObjectRelease();
        v66.isa = v42;
        v67 = v44;
        v65[0] = 0x5F24213E786166;
        v65[1] = 0xE700000000000000;
        v63 = 0x5F24213E7861465FLL;
        v64 = 0xE800000000000000;
        StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_29();
        OUTLINED_FUNCTION_28_3();
        v45 = OUTLINED_FUNCTION_8();
        if (OUTLINED_FUNCTION_42(v45))
        {
          OUTLINED_FUNCTION_1_36();
          v46 = OUTLINED_FUNCTION_1();
          v60 = a3;
          OUTLINED_FUNCTION_14_23(v46);
          OUTLINED_FUNCTION_17_16(4.8149e-34);
          v47 = OUTLINED_FUNCTION_24_22();
          OUTLINED_FUNCTION_22_16(v47);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          OUTLINED_FUNCTION_26_20();
          OUTLINED_FUNCTION_18_18(&dword_21FE16000, &v66, (os_log_type_t)a2, "#localizedLabel attempting to map CNLabel: %s");
          OUTLINED_FUNCTION_10_14();
          OUTLINED_FUNCTION_0();
        }

        OUTLINED_FUNCTION_30();
        OUTLINED_FUNCTION_25_23();
      }
      OUTLINED_FUNCTION_20_18();
    }
    swift_bridgeObjectRetain();
    goto LABEL_20;
  }
  switch(v59)
  {
    case 3:
      ContactsLabelCATs.address()();
      OUTLINED_FUNCTION_27_16();
      OUTLINED_FUNCTION_23_20();
      if (!v9)
        static String.EMPTY.getter();
      OUTLINED_FUNCTION_25_23();
    case 2:
      ContactsLabelCATs.phone()();
      OUTLINED_FUNCTION_27_16();
      OUTLINED_FUNCTION_23_20();
      if (!v9)
        static String.EMPTY.getter();
      OUTLINED_FUNCTION_25_23();
    case 1:
      v29 = (uint64_t)v55;
      ContactsLabelCATs.email()();
      v30 = Result<>.firstPrint.getter();
      v32 = v31;
      outlined destroy of Result<TemplatingResult, Error>(v29);
      if (!v32)
      {
        v30 = static String.EMPTY.getter();
        v32 = v33;
      }
      v34 = MEMORY[0x2207D7CB8](v30, v32);
      swift_bridgeObjectRelease();
      v20 = static LabelMappingUtil.translateINPersonHandleLabel(_:languageCode:)();

      OUTLINED_FUNCTION_8_18();
      OUTLINED_FUNCTION_28_3();
      v35 = OUTLINED_FUNCTION_54_2();
      if (OUTLINED_FUNCTION_5_22(v35))
      {
        v36 = (uint8_t *)OUTLINED_FUNCTION_1_36();
        v37 = OUTLINED_FUNCTION_1();
        OUTLINED_FUNCTION_14_23(v37);
        OUTLINED_FUNCTION_2_38(4.8149e-34);
        v38 = OUTLINED_FUNCTION_6_28();
        OUTLINED_FUNCTION_0_37(v38);
        OUTLINED_FUNCTION_9_23();
        v39 = "#localizedLabel mapped emailAddress: %s";
        goto LABEL_23;
      }
      break;
    default:
      v48 = static String.EMPTY.getter();
      v34 = v49;
      MEMORY[0x2207D7CB8](v48);
      OUTLINED_FUNCTION_0_28();
      OUTLINED_FUNCTION_7_26();
      OUTLINED_FUNCTION_19_22();
      OUTLINED_FUNCTION_8_18();
      OUTLINED_FUNCTION_28_3();
      v50 = OUTLINED_FUNCTION_54_2();
      if (OUTLINED_FUNCTION_5_22(v50))
      {
        v36 = (uint8_t *)OUTLINED_FUNCTION_1_36();
        v51 = OUTLINED_FUNCTION_1();
        OUTLINED_FUNCTION_14_23(v51);
        OUTLINED_FUNCTION_2_38(4.8149e-34);
        v52 = OUTLINED_FUNCTION_6_28();
        OUTLINED_FUNCTION_0_37(v52);
        OUTLINED_FUNCTION_9_23();
        v39 = "#localizedLabel mapped: %s";
LABEL_23:
        _os_log_impl(&dword_21FE16000, v34, OS_LOG_TYPE_DEFAULT, v39, v36, 0xCu);
        OUTLINED_FUNCTION_10_14();
        OUTLINED_FUNCTION_0();
      }
      break;
  }

  OUTLINED_FUNCTION_30();
  return v20;
}

uint64_t DefaultLabels.rawValue.getter(char a1)
{
  return *(_QWORD *)&aHome_1[8 * a1];
}

uint64_t OUTLINED_FUNCTION_0_37(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_1_36()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_2_38(float a1)
{
  float *v1;

  *v1 = a1;
  return swift_bridgeObjectRetain();
}

BOOL OUTLINED_FUNCTION_5_22(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_6_28()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0, v1, (uint64_t *)(v2 - 96));
}

uint64_t OUTLINED_FUNCTION_7_26()
{
  return static LabelMappingUtil.translateINPersonHandleLabel(_:languageCode:)();
}

uint64_t OUTLINED_FUNCTION_8_18()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_9_23()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_14_23(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 96) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_17_16(float a1)
{
  float *v1;

  *v1 = a1;
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_18_18(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

void OUTLINED_FUNCTION_19_22()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_20_18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t OUTLINED_FUNCTION_22_16(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t OUTLINED_FUNCTION_23_20()
{
  uint64_t v0;

  return outlined destroy of Result<TemplatingResult, Error>(v0);
}

uint64_t OUTLINED_FUNCTION_24_22()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v1, v0, (uint64_t *)(v2 - 96));
}

void OUTLINED_FUNCTION_25_23()
{
  JUMPOUT(0x2207D7CB8);
}

uint64_t OUTLINED_FUNCTION_26_20()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_27_16()
{
  return Result<>.firstPrint.getter();
}

void ContactsFlowStrategy.__allocating_init(referenceResolver:)()
{
  __int128 *v0;
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_18_19();
  outlined init with take of FlowProviding(v0, v1 + 16);
  OUTLINED_FUNCTION_31_0();
}

uint64_t ContactsFlowStrategy.init(referenceResolver:)(__int128 *a1)
{
  uint64_t v1;

  outlined init with take of FlowProviding(a1, v1 + 16);
  return v1;
}

void ContactsFlowStrategy.actionForInput(input:)(uint64_t a1@<X8>)
{
  uint64_t v1;

  static StrategyUtil.getActionForInput<A>(input:intentType:)(*(void **)(*(_QWORD *)v1 + 80), a1);
}

uint64_t ContactsFlowStrategy.makeIntentFromParse(parse:currentIntent:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  v3[14] = *v2;
  v3[15] = type metadata accessor for Signpost.OpenSignpost();
  v3[16] = OUTLINED_FUNCTION_0_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ContactsFlowStrategy.makeIntentFromParse(parse:currentIntent:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 120);
  v1 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v5 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v6 = *(int *)(v2 + 20);
  *(_DWORD *)(v0 + 152) = v6;
  v7 = v1 + v6;
  *(_QWORD *)v7 = "MakeIntentFromParse";
  *(_QWORD *)(v7 + 8) = 19;
  *(_BYTE *)(v7 + 16) = 2;
  outlined init with copy of ContactServiceProtocol(v3 + 16, v0 + 16);
  if (v4)
    v8 = *(_QWORD *)(*(_QWORD *)(v0 + 112) + 96);
  else
    v8 = 0;
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v9;
  *v9 = v0;
  v9[1] = ContactsFlowStrategy.makeIntentFromParse(parse:currentIntent:);
  return Parse.toSiriKitIntent(referenceResolver:previousIntent:)(v0 + 16, *(_QWORD *)(v0 + 96), v8);
}

{
  uint64_t v0;
  os_log_type_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD *v33;

  v2 = *(void **)(v0 + 144);
  if (v2)
  {
    v3 = swift_dynamicCastUnknownClass();
    if (v3)
    {
      v4 = v3;
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v5 = OUTLINED_FUNCTION_26();
      v6 = __swift_project_value_buffer(v5, (uint64_t)static Logger.siriContacts);
      v7 = v2;
      Logger.logObject.getter();
      v8 = OUTLINED_FUNCTION_8();
      if (os_log_type_enabled(v6, v8))
      {
        v9 = OUTLINED_FUNCTION_1();
        v33 = (_QWORD *)OUTLINED_FUNCTION_1();
        OUTLINED_FUNCTION_1();
        *(_DWORD *)v9 = 136315394;
        v10 = OUTLINED_FUNCTION_24_14();
        *(_QWORD *)(v0 + 72) = OUTLINED_FUNCTION_29_18(v10, v11, v12, v13, v14);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v9 + 12) = 2112;
        *(_QWORD *)(v0 + 80) = v4;
        v15 = v7;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v33 = v4;

        _os_log_impl(&dword_21FE16000, v6, v8, "#ContactsFlowStrategy<%s> makeIntentFromParse SiriKit Intent: %@", (uint8_t *)v9, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        OUTLINED_FUNCTION_7_27();
        OUTLINED_FUNCTION_0();
      }

      v32 = *(_QWORD *)(v0 + 128);
      static os_signpost_type_t.end.getter();
      os_signpost(_:dso:log:name:signpostID:)();
      outlined destroy of Signpost.OpenSignpost(v32);
      swift_task_dealloc();
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
    }

  }
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v16 = OUTLINED_FUNCTION_26();
  v17 = OUTLINED_FUNCTION_10_1(v16, (uint64_t)static Logger.siriContacts);
  v18 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_42(v18))
  {
    v19 = OUTLINED_FUNCTION_1();
    OUTLINED_FUNCTION_1();
    *(_DWORD *)v19 = 136315394;
    v20 = OUTLINED_FUNCTION_24_14();
    *(_QWORD *)(v0 + 56) = OUTLINED_FUNCTION_29_18(v20, v21, v22, v23, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_48();
    *(_WORD *)(v19 + 12) = 2080;
    v25 = OUTLINED_FUNCTION_24_14();
    *(_QWORD *)(v0 + 64) = OUTLINED_FUNCTION_29_18(v25, v26, v27, v28, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FE16000, v17, v1, "#ContactsFlowStrategy<%s> makeIntentFromParse: failed to convert parse to expected intent type %s, throwing", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0();
  }

  v30 = *(_QWORD *)(v0 + 128);
  type metadata accessor for ContactsError();
  lazy protocol witness table accessor for type ContactsError and conformance ContactsError();
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v30);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ContactsFlowStrategy.makeIntentFromParse(parse:currentIntent:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)v1 + 16;
  *(_QWORD *)(*(_QWORD *)v1 + 144) = a1;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_0(v2);
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ContactsFlowStrategy.makeIntentExecutionBehavior(app:intent:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v3[7] = a1;
  v3[8] = a2;
  v3[9] = *v2;
  v4 = type metadata accessor for SiriKitIntentHandler();
  v3[10] = v4;
  v3[11] = *(_QWORD *)(v4 - 8);
  v3[12] = OUTLINED_FUNCTION_0_0();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t ContactsFlowStrategy.makeIntentExecutionBehavior(app:intent:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint8_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  _DWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t *v27;
  os_log_type_t v28;
  _DWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _DWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;

  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v4 = OUTLINED_FUNCTION_26();
  v5 = OUTLINED_FUNCTION_10_1(v4, (uint64_t)static Logger.siriContacts);
  v6 = static os_log_type_t.debug.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = (void *)MEMORY[0x24BEE4AD8];
  if (v7)
  {
    v9 = (uint8_t *)OUTLINED_FUNCTION_1();
    OUTLINED_FUNCTION_1();
    *(_DWORD *)v9 = 136315138;
    v10 = OUTLINED_FUNCTION_24_14();
    *(_QWORD *)(v1 + 48) = OUTLINED_FUNCTION_12_25(v10, v11, v12, v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FE16000, v5, v6, "#ContactsFlowStrategy<%s> makeIntentExecutionBehavior", v9, 0xCu);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }

  v14 = *(_QWORD *)(v1 + 64);
  type metadata accessor for GetContactIntent();
  if (OUTLINED_FUNCTION_13_28())
  {
    Logger.logObject.getter();
    v15 = OUTLINED_FUNCTION_8();
    if (OUTLINED_FUNCTION_53(v15))
    {
      v16 = (_DWORD *)OUTLINED_FUNCTION_1();
      OUTLINED_FUNCTION_1();
      *v16 = 136315138;
      v17 = OUTLINED_FUNCTION_24_14();
      *(_QWORD *)(v1 + 40) = OUTLINED_FUNCTION_12_25(v17, v18, v19, v20);
      OUTLINED_FUNCTION_30_16();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_4_28(&dword_21FE16000, v21, v22, "#ContactsFlowStrategy<%s> makeIntentExecutionBehavior: GetContactIntentHandler embeddedIntentHandler");
      OUTLINED_FUNCTION_7_27();
      OUTLINED_FUNCTION_0();
    }

    OUTLINED_FUNCTION_16_15();
    v23 = one-time initialization token for current;
    OUTLINED_FUNCTION_24_10();
    if (v23 != -1)
      swift_once();
    OUTLINED_FUNCTION_23_21();
    v24 = static ContactService.current;
    OUTLINED_FUNCTION_21_17();
    OUTLINED_FUNCTION_32_0();
    OUTLINED_FUNCTION_72();
    v25 = ContactResolver.init()();
    v26 = objc_allocWithZone((Class)type metadata accessor for GetContactIntentHandler());
    v27 = &demangling cache variable for type metadata for BaseIntentHandler<GetContactIntent, GetContactIntentResponse, GetContactSiriMatchesResolutionResult>;
LABEL_23:
    specialized BaseIntentHandler.init(contactService:contactResolver:)(v24, v25, v26, v27);
    v47 = v8;
    SiriKitIntentHandler.init<A>(app:intentHandler:intent:)();
    v48 = static SiriKitIntentExecutionBehavior.embeddedIntentHandler(intentHandler:)();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v14, v2);
    goto LABEL_24;
  }
  type metadata accessor for GetContactAttributeIntent();
  if (OUTLINED_FUNCTION_13_28())
  {
    Logger.logObject.getter();
    v28 = OUTLINED_FUNCTION_8();
    if (OUTLINED_FUNCTION_53(v28))
    {
      v29 = (_DWORD *)OUTLINED_FUNCTION_1();
      OUTLINED_FUNCTION_1();
      *v29 = 136315138;
      v30 = OUTLINED_FUNCTION_24_14();
      *(_QWORD *)(v1 + 32) = OUTLINED_FUNCTION_12_25(v30, v31, v32, v33);
      OUTLINED_FUNCTION_30_16();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_4_28(&dword_21FE16000, v34, v35, "#ContactsFlowStrategy<%s> makeIntentExecutionBehavior: GetContactAttributeIntentHandler embeddedIntentHandler");
      OUTLINED_FUNCTION_7_27();
      OUTLINED_FUNCTION_0();
    }

    OUTLINED_FUNCTION_16_15();
    v36 = one-time initialization token for current;
    OUTLINED_FUNCTION_24_10();
    if (v36 != -1)
      swift_once();
    OUTLINED_FUNCTION_23_21();
    v24 = static ContactService.current;
    OUTLINED_FUNCTION_21_17();
    OUTLINED_FUNCTION_32_0();
    OUTLINED_FUNCTION_72();
    v25 = ContactResolver.init()();
    v26 = objc_allocWithZone((Class)type metadata accessor for GetContactAttributeIntentHandler());
    v27 = &demangling cache variable for type metadata for BaseIntentHandler<GetContactAttributeIntent, GetContactAttributeIntentResponse, GetContactAttributeSiriMatchesResolutionResult>;
    goto LABEL_23;
  }
  type metadata accessor for ModifyContactAttributeIntent();
  v14 = OUTLINED_FUNCTION_13_28();
  v37 = Logger.logObject.getter();
  if (v14)
  {
    v38 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_53(v38))
    {
      v39 = (_DWORD *)OUTLINED_FUNCTION_1();
      OUTLINED_FUNCTION_1();
      *v39 = 136315138;
      v40 = OUTLINED_FUNCTION_24_14();
      *(_QWORD *)(v1 + 24) = OUTLINED_FUNCTION_12_25(v40, v41, v42, v43);
      OUTLINED_FUNCTION_25();
      OUTLINED_FUNCTION_48();
      OUTLINED_FUNCTION_4_28(&dword_21FE16000, v44, v45, "#ContactsFlowStrategy<%s> makeIntentExecutionBehavior: ModifyContactAttributeIntentHandler embeddedIntentHandler");
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }

    OUTLINED_FUNCTION_16_15();
    v46 = one-time initialization token for current;
    OUTLINED_FUNCTION_24_10();
    if (v46 != -1)
      swift_once();
    OUTLINED_FUNCTION_23_21();
    v24 = static ContactService.current;
    OUTLINED_FUNCTION_21_17();
    OUTLINED_FUNCTION_32_0();
    OUTLINED_FUNCTION_72();
    v25 = ContactResolver.init()();
    v26 = objc_allocWithZone((Class)type metadata accessor for ModifyContactAttributeIntentHandler());
    v27 = &demangling cache variable for type metadata for BaseIntentHandler<ModifyContactAttributeIntent, ModifyContactAttributeIntentResponse, ModifyContactAttributeRelatedSiriMatchesResolutionResult>;
    goto LABEL_23;
  }
  v50 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_42(v50))
  {
    v51 = (uint8_t *)OUTLINED_FUNCTION_1();
    OUTLINED_FUNCTION_1();
    *(_DWORD *)v51 = 136315138;
    v52 = OUTLINED_FUNCTION_24_14();
    *(_QWORD *)(v1 + 16) = OUTLINED_FUNCTION_12_25(v52, v53, v54, v55);
    OUTLINED_FUNCTION_25();
    OUTLINED_FUNCTION_48();
    _os_log_impl(&dword_21FE16000, v37, OS_LOG_TYPE_DEFAULT, "#ContactsFlowStrategy<%s> ☠️ encountered an intent type we do not support...this should never happen but we cannot throw an error here ☠️", v51, 0xCu);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }

  type metadata accessor for SiriKitIntentExecutionBehavior();
  v48 = static SiriKitIntentExecutionBehavior.standard()();
LABEL_24:
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v48);
}

uint64_t ContactsFlowStrategy.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  return v0;
}

uint64_t ContactsFlowStrategy.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  return swift_deallocClassInstance();
}

void protocol witness for RCHFlowStrategyAsync.actionForInput(input:) in conformance ContactsFlowStrategy<A, B>(uint64_t a1@<X8>)
{
  ContactsFlowStrategy.actionForInput(input:)(a1);
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeIntentFromParse(parse:currentIntent:) in conformance ContactsFlowStrategy<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for RCHFlowStrategyAsync.makeIntentFromParse(parse:currentIntent:) in conformance ContactsFlowStrategy<A, B>;
  return ContactsFlowStrategy.makeIntentFromParse(parse:currentIntent:)(a1, a2);
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeIntentFromParse(parse:currentIntent:) in conformance ContactsFlowStrategy<A, B>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = OUTLINED_FUNCTION_25_1();
  if (!v1)
    v4 = a1;
  return OUTLINED_FUNCTION_11_20(v4, *(uint64_t (**)(void))(v2 + 8));
}

void protocol witness for RCHFlowStrategyAsync.makeParameterMetadata(intent:) in conformance ContactsFlowStrategy<A, B>()
{
  type metadata accessor for ContactsFlowStrategy();
}

uint64_t sub_21FE88668(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return MEMORY[0x2207D62A8](v2, a1, v1);
}

uint64_t protocol witness for RCHFlowStrategyAsync.makeErrorResponse(error:) in conformance ContactsFlowStrategy<A1, B1>()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = protocol witness for UnsupportedValueFlowStrategyAsync.makeUnsupportedValueOutput(resolveRecord:) in conformance ContactsUnsupportedValueStrategy<A, B, C>;
  return RCHFlowStrategyAsync.makeErrorResponse(error:)();
}

void protocol witness for ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:) in conformance ContactsFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v6;

  *(_QWORD *)(v4 + 48) = swift_task_alloc();
  v6 = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(v4 + 32) = v6;
  type metadata accessor for ContactsFlowStrategy();
}

uint64_t sub_21FE8876C()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  v1[1] = protocol witness for ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:) in conformance ContactsFlowStrategy<A, B>;
  return ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:)();
}

void protocol witness for ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:) in conformance ContactsFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v6;

  *(_QWORD *)(v4 + 48) = swift_task_alloc();
  v6 = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(v4 + 32) = v6;
  type metadata accessor for ContactsFlowStrategy();
}

uint64_t sub_21FE88810()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  v1[1] = protocol witness for ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:) in conformance ContactsFlowStrategy<A, B>;
  return ResolveConfirmFlowStrategyAsync.makeAppNotFoundOnDeviceResponse(app:intent:)();
}

void protocol witness for ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:) in conformance ContactsFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v6;

  *(_QWORD *)(v4 + 48) = swift_task_alloc();
  v6 = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(v4 + 32) = v6;
  type metadata accessor for ContactsFlowStrategy();
}

uint64_t sub_21FE888B4()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  v1[1] = protocol witness for ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:) in conformance ContactsFlowStrategy<A, B>;
  return ResolveConfirmFlowStrategyAsync.makeDeviceIncompatibleResponse(app:intent:)();
}

void protocol witness for ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:) in conformance ContactsFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  __int128 v7;

  *(_QWORD *)(v5 + 48) = swift_task_alloc();
  v7 = *(_OWORD *)(a5 + 96);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(a5 + 80);
  *(_OWORD *)(v5 + 32) = v7;
  type metadata accessor for ContactsFlowStrategy();
}

uint64_t sub_21FE8895C()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  v1[1] = protocol witness for ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:) in conformance ContactsFlowStrategy<A, B>;
  return ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:)();
}

uint64_t protocol witness for ResolveConfirmFlowStrategyAsync.makeErrorResponse(error:app:intent:) in conformance ContactsFlowStrategy<A, B>()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return OUTLINED_FUNCTION_3_2(*(uint64_t (**)(void))(v2 + 8));
}

void protocol witness for RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:) in conformance ContactsFlowStrategy<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  __int128 v7;

  *(_QWORD *)(v5 + 48) = swift_task_alloc();
  v7 = *(_OWORD *)(a5 + 96);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(a5 + 80);
  *(_OWORD *)(v5 + 32) = v7;
  type metadata accessor for ContactsFlowStrategy();
}

uint64_t sub_21FE88A48()
{
  uint64_t v0;
  _QWORD *v1;

  *v1 = v0;
  v1[1] = protocol witness for ResolveConfirmFlowStrategyAsync.makeAppDoesNotSupportIntentResponse(app:intent:) in conformance ContactsFlowStrategy<A, B>;
  return RouteConfirmIntentResponseFlowStrategyAsync.makeFailureConfirmingIntentResponse(app:intent:intentResponse:)();
}

uint64_t protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance ContactsFlowStrategy<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = protocol witness for IntentExtensionCommunicatingAsync.makeIntentExecutionBehavior(app:intent:) in conformance ContactsFlowStrategy<A, B>;
  return ContactsFlowStrategy.makeIntentExecutionBehavior(app:intent:)(a1, a2);
}

uint64_t GetContactFlowStrategy.init(referenceResolver:)(__int128 *a1)
{
  uint64_t v1;

  outlined init with take of FlowProviding(a1, v1 + 16);
  return v1;
}

void GetContactFlowStrategy.__allocating_init(referenceResolver:)()
{
  __int128 *v0;
  uint64_t v1;

  v1 = OUTLINED_FUNCTION_18_19();
  outlined init with take of FlowProviding(v0, v1 + 16);
  OUTLINED_FUNCTION_31_0();
}

uint64_t GetContactFlowStrategy.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  return swift_deallocClassInstance();
}

void implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(void (*a1)(void))
{
  a1();
  OUTLINED_FUNCTION_31_0();
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  void *v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = (void *)a4();
  v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  v8 = *a2;
  if (*a2)
  {
    *v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {

  }
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(void (*a1)(void))
{
  a1();
  return _typeName(_:qualified:)();
}

id specialized BaseIntentHandler.init(contactService:contactResolver:)(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  return specialized BaseIntentHandler.init(contactService:contactResolver:)(a1, a2, a3, &demangling cache variable for type metadata for BaseIntentHandler<GetContactAttributeIntent, GetContactAttributeIntentResponse, GetContactAttributeSiriMatchesResolutionResult>);
}

{
  return specialized BaseIntentHandler.init(contactService:contactResolver:)(a1, a2, a3, &demangling cache variable for type metadata for BaseIntentHandler<GetContactIntent, GetContactIntentResponse, GetContactSiriMatchesResolutionResult>);
}

{
  return specialized BaseIntentHandler.init(contactService:contactResolver:)(a1, a2, a3, &demangling cache variable for type metadata for BaseIntentHandler<ModifyContactAttributeIntent, ModifyContactAttributeIntentResponse, ModifyContactAttributeRelatedSiriMatchesResolutionResult>);
}

id specialized BaseIntentHandler.init(contactService:contactResolver:)(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t *a4)
{
  id v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  objc_super v15;
  _QWORD v16[5];
  _QWORD v17[5];

  v17[3] = type metadata accessor for ContactService();
  v17[4] = &protocol witness table for ContactService;
  v17[0] = a1;
  v16[3] = OUTLINED_FUNCTION_21_17();
  v16[4] = &protocol witness table for ContactResolver;
  v16[0] = a2;
  *(_QWORD *)&a3[direct field offset for BaseIntentHandler.$__lazy_storage_$_meCard] = 1;
  outlined init with copy of ContactServiceProtocol((uint64_t)v17, (uint64_t)&a3[direct field offset for BaseIntentHandler.contactService]);
  outlined init with copy of ContactServiceProtocol((uint64_t)v16, (uint64_t)&a3[direct field offset for BaseIntentHandler.contactResolver]);
  a3[direct field offset for BaseIntentHandler.passedPrereqs] = 0;
  v15.receiver = a3;
  v15.super_class = (Class)__swift_instantiateConcreteTypeFromMangledName(a4);
  v8 = objc_msgSendSuper2(&v15, sel_init);
  v9 = one-time initialization token for siriContacts;
  v10 = v8;
  if (v9 != -1)
    swift_once();
  v11 = OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_10_1(v11, (uint64_t)static Logger.siriContacts);
  v12 = OUTLINED_FUNCTION_8();
  if (os_log_type_enabled(v9, v12))
  {
    v13 = (uint8_t *)OUTLINED_FUNCTION_1();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_21FE16000, v9, v12, "Constructed ContactsIntentHandler.", v13, 2u);
    OUTLINED_FUNCTION_0();
  }

  __swift_destroy_boxed_opaque_existential_0((uint64_t)v16);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
  return v10;
}

void base witness table accessor for ResolveConfirmFlowStrategyAsync in ContactsFlowStrategy<A, B>()
{
  JUMPOUT(0x2207D86A8);
}

void base witness table accessor for IntentExtensionCommunicatingAsync in ContactsFlowStrategy<A, B>()
{
  JUMPOUT(0x2207D86A8);
}

void base witness table accessor for RouteConfirmIntentResponseFlowStrategyAsync in ContactsFlowStrategy<A, B>()
{
  JUMPOUT(0x2207D86A8);
}

uint64_t type metadata completion function for ContactsFlowStrategy()
{
  return swift_initClassMetadata2();
}

void type metadata accessor for ContactsFlowStrategy()
{
  JUMPOUT(0x2207D8654);
}

uint64_t method lookup function for ContactsFlowStrategy()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ContactsFlowStrategy.__allocating_init(referenceResolver:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of ContactsFlowStrategy.actionForInput(input:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of ContactsFlowStrategy.makeIntentFromParse(parse:currentIntent:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)OUTLINED_FUNCTION_56_1();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_20_19(v1, (uint64_t)dispatch thunk of ContactsFlowStrategy.makeIntentFromParse(parse:currentIntent:));
  return OUTLINED_FUNCTION_6_29(v2, v3, v4);
}

uint64_t dispatch thunk of ContactsFlowStrategy.makeIntentFromParse(parse:currentIntent:)(uint64_t a1)
{
  uint64_t v1;

  OUTLINED_FUNCTION_25_1();
  return OUTLINED_FUNCTION_11_20(a1, *(uint64_t (**)(void))(v1 + 8));
}

uint64_t dispatch thunk of ContactsFlowStrategy.makeIntentExecutionBehavior(app:intent:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = (_QWORD *)OUTLINED_FUNCTION_56_1();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_20_19(v1, (uint64_t)protocol witness for Flow.onAsync(input:) in conformance ContactsDelegateFlow);
  return OUTLINED_FUNCTION_6_29(v2, v3, v4);
}

uint64_t type metadata accessor for GetContactFlowStrategy(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for GetContactFlowStrategy);
}

uint64_t type metadata accessor for GetContactAttributeFlowStrategy(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for GetContactAttributeFlowStrategy);
}

uint64_t type metadata accessor for ModifyContactAttributeFlowStrategy(uint64_t a1)
{
  return type metadata accessor for ContactsFlowState(a1, (uint64_t *)&type metadata singleton initialization cache for ModifyContactAttributeFlowStrategy);
}

uint64_t type metadata completion function for GetContactFlowStrategy()
{
  return swift_initClassMetadata2();
}

void OUTLINED_FUNCTION_4_28(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;
  os_log_type_t v6;

  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_6_29(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t OUTLINED_FUNCTION_7_27()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_11_20(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_12_25(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_13_28()
{
  return swift_dynamicCastClass();
}

uint64_t OUTLINED_FUNCTION_16_15()
{
  return type metadata accessor for SiriKitIntentExecutionBehavior();
}

uint64_t OUTLINED_FUNCTION_18_19()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_20_19@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

uint64_t OUTLINED_FUNCTION_21_17()
{
  return type metadata accessor for ContactResolver();
}

uint64_t OUTLINED_FUNCTION_29_18(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_30_16()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v6[2];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v6);
    specialized Dictionary._Variant.setValue(_:forKey:)((uint64_t)v6, a2, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Any?(a1);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, v6);
    swift_bridgeObjectRelease();
    return outlined destroy of Any?((uint64_t)v6);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  _OWORD v4[2];

  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v4);
    specialized Dictionary._Variant.setValue(_:forKey:)(v4, a2);
    return outlined destroy of AnyHashable(a2);
  }
  else
  {
    outlined destroy of Any?(a1);
    specialized Dictionary._Variant.removeValue(forKey:)(v4);
    outlined destroy of AnyHashable(a2);
    return outlined destroy of Any?((uint64_t)v4);
  }
}

uint64_t ContactsDirectInvocations.Identifiers.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_21FE891C0 + 4 * byte_21FEDC958[a1]))(0xD000000000000026, 0x800000021FEDF640);
}

unint64_t sub_21FE891C0()
{
  return 0xD000000000000025;
}

uint64_t sub_21FE891E8()
{
  uint64_t v0;

  return v0 - 3;
}

void *static ContactsDirectInvocations.confirm()()
{
  return OUTLINED_FUNCTION_5_23(31, 0x800000021FEDF780);
}

void *static ContactsDirectInvocations.deny()()
{
  return OUTLINED_FUNCTION_5_23(28, 0x800000021FEDF7A0);
}

void *static ContactsDirectInvocations.confirm()(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  _QWORD v11[4];

  OUTLINED_FUNCTION_33_3(a1, &lazy cache variable for type metadata for SKIDirectInvocationPayload);
  v4 = SKIDirectInvocationPayload.__allocating_init(identifier:)(a1, a2);
  v5 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_8_19(v5);
  v6 = (void *)objc_opt_self();
  static Device.current.getter();
  __swift_project_boxed_opaque_existential_1(v11, v11[3]);
  v7 = (void *)DeviceState.asInvocationContext.getter();
  v8 = objc_msgSend(v6, sel_runSiriKitExecutorCommandWithContext_payload_, v7, v4);

  __swift_destroy_boxed_opaque_existential_0((uint64_t)v11);
  v9 = objc_msgSend(v6, sel_wrapCommandInStartLocalRequest_, v8);
  OUTLINED_FUNCTION_26_0();

  return v7;
}

uint64_t ContactsDirectInvocations.Keys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_21FE893C8 + 4 * byte_21FEDC960[a1]))(0xD000000000000012, 0x800000021FEE1F60);
}

uint64_t sub_21FE893C8()
{
  return 0x656D616E6B63696ELL;
}

uint64_t sub_21FE893E0()
{
  return 0x49746361746E6F63;
}

uint64_t sub_21FE893FC()
{
  return 0x7865646E69;
}

uint64_t sub_21FE89410()
{
  return 0x704F796669646F6DLL;
}

uint64_t sub_21FE89434()
{
  return 0x6D7269666E6F63;
}

uint64_t sub_21FE8944C()
{
  return 0x7463656A6572;
}

uint64_t sub_21FE89460()
{
  return 0x6C65636E6163;
}

uint64_t sub_21FE89474()
{
  return 0x6C646E7542707061;
}

uint64_t sub_21FE89494()
{
  return 0x4E746361746E6F63;
}

uint64_t sub_21FE894B4()
{
  return 0x6449707061;
}

uint64_t sub_21FE894C8()
{
  return 0x7954746E65746E69;
}

uint64_t sub_21FE894EC()
{
  return 0x6144746E65746E69;
}

void *static ContactsDirectInvocations.startCall(fullName:phoneHandle:contactIdentifier:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  void *ObjCClassFromMetadata;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonNameComponents?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_33_3(v11, &lazy cache variable for type metadata for SKIDirectInvocationPayload);
  v14 = OUTLINED_FUNCTION_13_29(0xD000000000000034, (uint64_t)"com.apple.siri.DirectInvocation.Phone.StartAudioCall");
  v43 = MEMORY[0x24BEE4B00];
  *((_QWORD *)&v42 + 1) = MEMORY[0x24BEE0D00];
  *(_QWORD *)&v41 = 0xD000000000000015;
  *((_QWORD *)&v41 + 1) = 0x800000021FEE1F20;
  specialized Dictionary.subscript.setter((uint64_t)&v41, 0x6449707061, 0xE500000000000000);
  v15 = (void *)ContactAttribute.getINPersonHandleLabel.getter();
  v16 = outlined bridged method (pb) of @objc ContactAttribute.handleValue.getter(a3);
  v18 = v17;
  objc_allocWithZone(MEMORY[0x24BDD9F38]);
  v40 = v15;
  v19 = @nonobjc INPersonHandle.init(value:type:label:)(v16, v18, 2, v15);
  swift_bridgeObjectRetain();
  PersonNameComponents.init(_:)();
  v20 = type metadata accessor for PersonNameComponents();
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v20);
  v21 = objc_allocWithZone(MEMORY[0x24BDD9F30]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22 = @nonobjc INPerson.init(personHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:)(v19, (uint64_t)v13, a1, a2, 0, a4, a5, 0, 0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_21FED8AB0;
  *(_QWORD *)(v23 + 32) = v22;
  *(_QWORD *)&v41 = v23;
  specialized Array._endMutation()();
  v24 = v41;
  v25 = objc_allocWithZone(MEMORY[0x24BDDA1C0]);
  v26 = v22;
  v27 = @nonobjc INStartCallIntent.init(callRecordFilter:callRecordToCallBack:audioRoute:destinationType:contacts:callCapability:)(0, 0, 0, 1, v24, 0);
  type metadata accessor for CNContact(0, &lazy cache variable for type metadata for INStartCallIntent);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v29 = outlined bridged method (pb) of @objc static INIntent.typeName()(ObjCClassFromMetadata);
  if (v30)
  {
    *((_QWORD *)&v42 + 1) = MEMORY[0x24BEE0D00];
    *(_QWORD *)&v41 = v29;
    *((_QWORD *)&v41 + 1) = v30;
  }
  else
  {
    v41 = 0u;
    v42 = 0u;
  }
  specialized Dictionary.subscript.setter((uint64_t)&v41, 0x7954746E65746E69, 0xEE00656D614E6570);
  v31 = outlined bridged method (ob) of @objc PBCodable.data.getter(objc_msgSend(v27, sel_backingStore));
  if (v32 >> 60 == 15)
  {
    v41 = 0u;
    v42 = 0u;
  }
  else
  {
    *((_QWORD *)&v42 + 1) = MEMORY[0x24BDCDDE8];
    *(_QWORD *)&v41 = v31;
    *((_QWORD *)&v41 + 1) = v32;
  }
  specialized Dictionary.subscript.setter((uint64_t)&v41, 0x6144746E65746E69, 0xEA00000000006174);
  v33 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v43);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8_19(v33);
  v34 = (void *)objc_opt_self();
  v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE99160]), sel_init);
  v36 = objc_msgSend(v34, sel_runSiriKitExecutorCommandWithContext_payload_, v35, v14);

  v37 = v36;
  v38 = OUTLINED_FUNCTION_6_30((uint64_t)v37, sel_wrapCommandInStartLocalRequest_);
  OUTLINED_FUNCTION_26_0();

  return v34;
}

uint64_t static ContactsDirectInvocations.sendMessage(contactName:contactPhoneNumber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSDictionary v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Class isa;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Class v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  id v46;
  uint64_t v48;
  char v49;
  uint64_t v50;

  OUTLINED_FUNCTION_33_3(a1, &lazy cache variable for type metadata for SKIDirectInvocationPayload);
  OUTLINED_FUNCTION_13_29(0xD00000000000003CLL, (uint64_t)"com.apple.siri.DirectInvocation.Messages.NewMessageToContact");
  v8 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_8_19(v8);
  v50 = OUTLINED_FUNCTION_7_28();
  v9 = MEMORY[0x24BEE0D00];
  if (!v50)
  {
    OUTLINED_FUNCTION_2_39(0, sel_setUserData_);
    if (!a2)
      goto LABEL_9;
    goto LABEL_6;
  }
  v10 = OUTLINED_FUNCTION_4_29();
  OUTLINED_FUNCTION_3_23(v10, v11, v12, v13, v14, v15, v16, v17, 0xD000000000000013, 0x800000021FEE1F40, v48, v9, v49);
  v18.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v19 = swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_1_37(v19, sel_setUserData_);

  if (a2)
  {
LABEL_6:
    swift_bridgeObjectRetain();
    if (OUTLINED_FUNCTION_7_28())
    {
      OUTLINED_FUNCTION_0_38();
      v20 = OUTLINED_FUNCTION_4_29();
      OUTLINED_FUNCTION_3_23(v20, v21, v22, v23, v24, v25, v26, v27, a1, a2, v48, v9, v49);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      v29 = swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_1_37(v29, sel_setUserData_);

    }
    else
    {
      v30 = swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_2_39(v30, sel_setUserData_);
    }
  }
LABEL_9:
  if (a4)
  {
    swift_bridgeObjectRetain();
    if (OUTLINED_FUNCTION_7_28())
    {
      v31 = OUTLINED_FUNCTION_4_29();
      OUTLINED_FUNCTION_3_23(v31, v32, v33, v34, v35, v36, v37, v38, a3, a4, v48, v9, v49);
      v39 = Dictionary._bridgeToObjectiveC()().super.isa;
      v40 = OUTLINED_FUNCTION_55_1();
      OUTLINED_FUNCTION_1_37(v40, sel_setUserData_);

    }
    else
    {
      v41 = OUTLINED_FUNCTION_55_1();
      OUTLINED_FUNCTION_2_39(v41, sel_setUserData_);
    }
  }
  v42 = objc_opt_self();
  v43 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE99160]), sel_init);
  v44 = OUTLINED_FUNCTION_9_24((uint64_t)v43, sel_runSiriKitExecutorCommandWithContext_payload_);

  v46 = OUTLINED_FUNCTION_6_30(v45, sel_wrapCommandInStartLocalRequest_);
  OUTLINED_FUNCTION_26_0();

  return v42;
}

uint64_t static ContactsDirectInvocations.getContact(contactName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSDictionary v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  _QWORD v14[4];
  _BYTE v15[40];
  uint64_t v16;

  OUTLINED_FUNCTION_33_3(a1, &lazy cache variable for type metadata for SKIDirectInvocationPayload);
  SKIDirectInvocationPayload.__allocating_init(identifier:)(0xD000000000000022, 0x800000021FEDF6D0);
  v4 = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_8_19(v4);
  v16 = OUTLINED_FUNCTION_7_28();
  if (v16)
  {
    OUTLINED_FUNCTION_0_38();
    v5 = MEMORY[0x24BEE0D00];
    AnyHashable.init<A>(_:)();
    v14[3] = v5;
    v14[0] = a1;
    v14[1] = a2;
    swift_bridgeObjectRetain();
    v6 = specialized Dictionary.subscript.setter((uint64_t)v14, (uint64_t)v15);
    if (v16)
    {
      v7.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      v6 = OUTLINED_FUNCTION_55_1();
    }
    else
    {
      v7.super.isa = 0;
    }
    OUTLINED_FUNCTION_1_37(v6, sel_setUserData_);

  }
  else
  {
    OUTLINED_FUNCTION_2_39(0, sel_setUserData_);
  }
  v8 = objc_opt_self();
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BE99160]), sel_init);
  v10 = OUTLINED_FUNCTION_9_24((uint64_t)v9, sel_runSiriKitExecutorCommandWithContext_payload_);

  v12 = OUTLINED_FUNCTION_6_30(v11, sel_wrapCommandInStartLocalRequest_);
  OUTLINED_FUNCTION_26_0();

  return v8;
}

uint64_t ContactsDirectInvocations.Identifiers.shouldStayInDomain.getter(unsigned __int8 a1)
{
  char v1;

  ContactsDirectInvocations.Identifiers.rawValue.getter(a1);
  lazy protocol witness table accessor for type String and conformance String();
  lazy protocol witness table accessor for type String and conformance String();
  v1 = BidirectionalCollection<>.starts<A>(with:)();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

unint64_t ContactsDirectInvocations.Identifiers.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ContactsDirectInvocations.Identifiers.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8)
    return 8;
  else
    return v3;
}

void *static ContactsDirectInvocations.Identifiers.allCases.getter()
{
  return &outlined read-only object #0 of static ContactsDirectInvocations.Identifiers.allCases.getter;
}

id SKIDirectInvocationPayload.__allocating_init(identifier:)(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  id v6;

  v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v5 = (void *)MEMORY[0x2207D7CB8](a1, a2);
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, sel_initWithIdentifier_, v5);

  return v6;
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  _OWORD v37[3];
  _OWORD v38[2];
  __int128 v39;
  _OWORD v40[2];

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = MEMORY[0x24BEE4B00];
  }
  v28 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v27 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v8 = 0;
  if (!v5)
    goto LABEL_9;
LABEL_8:
  v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  v10 = v9 | (v8 << 6);
  while (1)
  {
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v17 = *v15;
    v16 = v15[1];
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v10, (uint64_t)v40);
    *(_QWORD *)&v39 = v17;
    *((_QWORD *)&v39 + 1) = v16;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(_QWORD *)&v37[0] = v17;
    *((_QWORD *)&v37[0] + 1) = v16;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v38, v32);
    v33 = v29;
    v34 = v30;
    v35 = v31;
    outlined init with take of Any(v32, v36);
    v29 = v33;
    v30 = v34;
    v31 = v35;
    outlined init with take of Any(v36, v37);
    outlined init with take of Any(v37, &v33);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
    v18 = -1 << *(_BYTE *)(v2 + 32);
    v19 = result & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v6 + 8 * (v19 >> 6))) == 0)
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v18) >> 6;
      while (++v20 != v23 || (v22 & 1) == 0)
      {
        v24 = v20 == v23;
        if (v20 == v23)
          v20 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v6 + 8 * v20);
        if (v25 != -1)
        {
          v21 = __clz(__rbit64(~v25)) + (v20 << 6);
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v6 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(_QWORD *)(v6 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    v26 = *(_QWORD *)(v2 + 48) + 40 * v21;
    *(_OWORD *)v26 = v29;
    *(_OWORD *)(v26 + 16) = v30;
    *(_QWORD *)(v26 + 32) = v31;
    result = (uint64_t)outlined init with take of Any(&v33, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v21));
    ++*(_QWORD *)(v2 + 16);
    if (v5)
      goto LABEL_8;
LABEL_9:
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_38;
    if (v11 >= v27)
      goto LABEL_36;
    v12 = *(_QWORD *)(v28 + 8 * v11);
    v13 = v8 + 1;
    if (!v12)
    {
      v13 = v8 + 2;
      if (v8 + 2 >= v27)
        goto LABEL_36;
      v12 = *(_QWORD *)(v28 + 8 * v13);
      if (!v12)
      {
        v13 = v8 + 3;
        if (v8 + 3 >= v27)
          goto LABEL_36;
        v12 = *(_QWORD *)(v28 + 8 * v13);
        if (!v12)
        {
          v13 = v8 + 4;
          if (v8 + 4 >= v27)
            goto LABEL_36;
          v12 = *(_QWORD *)(v28 + 8 * v13);
          if (!v12)
            break;
        }
      }
    }
LABEL_24:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v8 = v13;
  }
  v14 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_36:
    swift_release();
    outlined consume of [String : Any].Iterator._Variant();
    return v2;
  }
  v12 = *(_QWORD *)(v28 + 8 * v14);
  if (v12)
  {
    v13 = v8 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v27)
      goto LABEL_36;
    v12 = *(_QWORD *)(v28 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_24;
  }
LABEL_39:
  __break(1u);
  return result;
}

id @nonobjc INPersonHandle.init(value:type:label:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v4;
  void *v5;
  void *v8;
  id v9;

  v5 = v4;
  if (a2)
  {
    v8 = (void *)MEMORY[0x2207D7CB8]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = 0;
  }
  v9 = objc_msgSend(v5, sel_initWithValue_type_label_, v8, a3, a4);

  return v9;
}

id @nonobjc INPerson.init(personHandle:nameComponents:displayName:image:contactIdentifier:customIdentifier:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  uint64_t v18;
  Class isa;
  void *v20;
  void *v21;
  void *v22;
  id v23;

  v10 = v9;
  v18 = type metadata accessor for PersonNameComponents();
  isa = 0;
  if (__swift_getEnumTagSinglePayload(a2, 1, v18) != 1)
  {
    isa = PersonNameComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a2, v18);
  }
  if (a4)
  {
    v20 = (void *)MEMORY[0x2207D7CB8](a3, a4);
    swift_bridgeObjectRelease();
  }
  else
  {
    v20 = 0;
  }
  if (!a7)
  {
    v21 = 0;
    if (a9)
      goto LABEL_8;
LABEL_10:
    v22 = 0;
    goto LABEL_11;
  }
  v21 = (void *)MEMORY[0x2207D7CB8](a6, a7);
  swift_bridgeObjectRelease();
  if (!a9)
    goto LABEL_10;
LABEL_8:
  v22 = (void *)MEMORY[0x2207D7CB8](a8, a9);
  swift_bridgeObjectRelease();
LABEL_11:
  v23 = objc_msgSend(v10, sel_initWithPersonHandle_nameComponents_displayName_image_contactIdentifier_customIdentifier_, a1, isa, v20, a5, v21, v22);

  return v23;
}

id @nonobjc INStartCallIntent.init(callRecordFilter:callRecordToCallBack:audioRoute:destinationType:contacts:callCapability:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  void *v7;
  NSArray v13;
  id v14;

  v7 = v6;
  if (a5)
  {
    type metadata accessor for CNContact(0, &lazy cache variable for type metadata for INPerson);
    v13.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v13.super.isa = 0;
  }
  v14 = objc_msgSend(v7, sel_initWithCallRecordFilter_callRecordToCallBack_audioRoute_destinationType_contacts_callCapability_, a1, a2, a3, a4, v13.super.isa, a6);

  return v14;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  Swift::Int v12;
  double result;
  uint64_t v14;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v4;
    v11 = *v4;
    *v4 = 0x8000000000000000;
    v12 = *(_QWORD *)(v11 + 24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v12);
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v14 + 56) + 32 * v8), a3);
    _NativeDictionary._delete(at:)();
    *v4 = v14;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  char v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  Swift::Int v9;
  double result;
  uint64_t v11;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = specialized __RawDictionaryStorage.find<A>(_:)();
  v6 = v5;
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = *v2;
    v8 = *v2;
    *v2 = 0x8000000000000000;
    v9 = *(_QWORD *)(v8 + 24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<AnyHashable, Any>);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v9);
    outlined destroy of AnyHashable(*(_QWORD *)(v11 + 48) + 40 * v4);
    outlined init with take of Any((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v4), a1);
    _NativeDictionary._delete(at:)();
    *v2 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    result = 0.0;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v8;

  swift_isUniquelyReferenced_nonNull_native();
  v8 = *v3;
  *v3 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3);
  *v3 = v8;
  return swift_bridgeObjectRelease();
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(_OWORD *a1, uint64_t a2)
{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *v2;
  *v2 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
  *v2 = v7;
  return swift_bridgeObjectRelease();
}

uint64_t outlined bridged method (pb) of @objc static INIntent.typeName()(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_typeName);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (ob) of @objc PBCodable.data.getter(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, sel_data);

  if (!v2)
    return 0;
  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void outlined bridged method (mbnn) of @objc SKIDirectInvocationPayload.userData.setter(uint64_t a1, void *a2)
{
  Class isa;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, sel_setUserData_, isa);

}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined bridged method (pb) of @objc SKIDirectInvocationPayload.userData.getter(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_userData);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

id OUTLINED_FUNCTION_1_37(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

id OUTLINED_FUNCTION_2_39(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2, 0);
}

uint64_t OUTLINED_FUNCTION_3_23(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  return specialized Dictionary.subscript.setter((uint64_t)&a9, (uint64_t)&a13);
}

uint64_t OUTLINED_FUNCTION_4_29()
{
  return AnyHashable.init<A>(_:)();
}

void *OUTLINED_FUNCTION_5_23(uint64_t a1, uint64_t a2)
{
  return static ContactsDirectInvocations.confirm()(a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a2);
}

id OUTLINED_FUNCTION_6_30(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

uint64_t OUTLINED_FUNCTION_7_28()
{
  void *v0;

  return outlined bridged method (pb) of @objc SKIDirectInvocationPayload.userData.getter(v0);
}

void OUTLINED_FUNCTION_8_19(uint64_t a1)
{
  void *v1;

  outlined bridged method (mbnn) of @objc SKIDirectInvocationPayload.userData.setter(a1, v1);
}

id OUTLINED_FUNCTION_9_24(uint64_t a1, const char *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  return objc_msgSend(v3, a2, v4, v2);
}

id OUTLINED_FUNCTION_13_29@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return SKIDirectInvocationPayload.__allocating_init(identifier:)(a1, (a2 - 32) | 0x8000000000000000);
}

void specialized _ArrayProtocol.filter(_:)(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int *v6;
  unint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  char v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = 0;
    v4 = a1 + 40;
    v5 = MEMORY[0x24BEE4AF8];
    v16 = a1 + 40;
    do
    {
      v17 = v5;
      v6 = (Swift::Int *)(v4 + 16 * v3);
      v7 = v3;
      while (1)
      {
        if (v7 >= *(_QWORD *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        v9 = *(v6 - 1);
        v8 = *v6;
        v3 = v7 + 1;
        swift_bridgeObjectRetain_n();
        v10 = specialized Set._Variant.insert(_:)(&v18, v9, v8);
        swift_bridgeObjectRelease();
        if ((v10 & 1) != 0)
          break;
        OUTLINED_FUNCTION_9_0();
        v6 += 2;
        ++v7;
        if (v2 == v3)
          goto LABEL_13;
      }
      v5 = v17;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v19 = v17;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1);
        v5 = v19;
      }
      v13 = *(_QWORD *)(v5 + 16);
      v12 = *(_QWORD *)(v5 + 24);
      v14 = v13 + 1;
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1);
        v14 = v13 + 1;
        v5 = v19;
      }
      *(_QWORD *)(v5 + 16) = v14;
      v15 = v5 + 16 * v13;
      *(_QWORD *)(v15 + 32) = v9;
      *(_QWORD *)(v15 + 40) = v8;
      v4 = v16;
    }
    while (v2 - 1 != v7);
  }
LABEL_13:
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_29_19();
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  void *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  id v15;
  uint64_t v16;

  v3 = v2;
  v16 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_18;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v6)
  {
    while (1)
    {
      v7 = 0;
      v8 = a1 & 0xC000000000000001;
      while (v8)
      {
        v9 = (id)MEMORY[0x2207D80C0](v7, a1);
LABEL_7:
        v10 = v9;
        v11 = v7 + 1;
        if (__OFADD__(v7, 1))
          goto LABEL_17;
        v15 = v9;
        closure #1 in Array<A>.matchingLabeledValues(for:)((uint64_t)&v15, a2);
        if (v3)
        {
          OUTLINED_FUNCTION_96();

          v13 = v16;
          swift_release();
          return v13;
        }
        if ((v12 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          v3 = 0;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v8 = a1 & 0xC000000000000001;
        }
        else
        {

        }
        ++v7;
        if (v11 == v6)
        {
          v13 = v16;
          goto LABEL_20;
        }
      }
      if (v7 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      v6 = _CocoaArrayWrapper.endIndex.getter();
      if (!v6)
        goto LABEL_19;
    }
    v9 = *(id *)(a1 + 8 * v7 + 32);
    goto LABEL_7;
  }
LABEL_19:
  v13 = MEMORY[0x24BEE4AF8];
LABEL_20:
  OUTLINED_FUNCTION_96();

  return v13;
}

void specialized _ArrayProtocol.filter(_:)(unint64_t a1, void *a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_35;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v22 = v4;
      v5 = 0;
      v24 = v3 & 0xFFFFFFFFFFFFFF8;
      v25 = v3 & 0xC000000000000001;
      v23 = v3;
      while (v25)
      {
        v6 = (id)MEMORY[0x2207D80C0](v5, v3);
LABEL_7:
        v7 = v6;
        v8 = v5 + 1;
        if (__OFADD__(v5, 1))
          goto LABEL_34;
        OUTLINED_FUNCTION_70_10();
        v10 = v9;
        swift_bridgeObjectRelease();
        if (v10)
        {
          v11 = objc_msgSend(v7, sel_label);
          if (v11)
          {
            v12 = v11;
            static String._unconditionallyBridgeFromObjectiveC(_:)();

            v13 = String.sanitizeCNLabel.getter();
            v15 = v14;
            OUTLINED_FUNCTION_18_0();
          }
          else
          {
            v13 = 0;
            v15 = 0;
          }
          OUTLINED_FUNCTION_70_10();
          if (v16)
          {
            v17 = String.convertToContactAttributeLabel.getter();
            v19 = v18;
            OUTLINED_FUNCTION_18_0();
            if (v15)
            {
              if (v19)
              {
                if (v13 == v17 && v15 == v19)
                {

                  swift_bridgeObjectRelease();
                  OUTLINED_FUNCTION_48();
                  goto LABEL_29;
                }
                v21 = OUTLINED_FUNCTION_11_18();
                swift_bridgeObjectRelease();
                OUTLINED_FUNCTION_48();
                if ((v21 & 1) != 0)
                {
LABEL_27:

                  goto LABEL_29;
                }
LABEL_26:
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized ContiguousArray._endMutation()();
LABEL_29:
                v4 = v22;
                v3 = v23;
                goto LABEL_30;
              }
            }
            else if (!v19)
            {
              goto LABEL_27;
            }
          }
          else if (!v15)
          {
            goto LABEL_27;
          }
          OUTLINED_FUNCTION_48();
          goto LABEL_26;
        }

LABEL_30:
        ++v5;
        if (v8 == v4)
          goto LABEL_36;
      }
      if (v5 < *(_QWORD *)(v24 + 16))
        break;
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4)
        goto LABEL_36;
    }
    v6 = *(id *)(v3 + 8 * v5 + 32);
    goto LABEL_7;
  }
LABEL_36:

  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_29_19();
}

unint64_t Array<A>.removeAllWhere(contactName:relationLabel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v12 = a5;
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_25_16();
  OUTLINED_FUNCTION_24_11();
  result = specialized MutableCollection._halfStablePartition(isSuffixElement:)(&v12, a1, a2, a3, a4);
  v10 = result;
  if (v12 >> 62)
  {
    OUTLINED_FUNCTION_25_16();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    result = OUTLINED_FUNCTION_5();
  }
  else
  {
    v11 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v11 < v10)
  {
    __break(1u);
  }
  else
  {
    specialized Array.replaceSubrange<A>(_:with:)(v10, v11);
    return v12;
  }
  return result;
}

uint64_t Array.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;

  if (a1 < 0 || MEMORY[0x2207D7E14](a2, a3) <= a1)
  {
    v6 = 1;
  }
  else
  {
    Array.subscript.getter();
    v6 = 0;
  }
  return __swift_storeEnumTagSinglePayload(a4, v6, 1, a3);
}

void Optional<A>.toContactsPhoneHandles.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  Optional<A>.toContactsPhoneHandles.getter(a1, (uint64_t)closure #1 in Optional<A>.toContactsPhoneHandles.getter, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24);
}

void Optional<A>.toContactsEmailHandles.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  Optional<A>.toContactsPhoneHandles.getter(a1, (uint64_t)closure #1 in Optional<A>.toContactsEmailHandles.getter, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24);
}

void Optional<A>.toContactsPhoneHandles.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  unint64_t v25;
  void (*v26)(uint64_t *__return_ptr, id *);
  uint64_t v27;
  void (*v28)(uint64_t *__return_ptr, id *);
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;

  OUTLINED_FUNCTION_27_17();
  a23 = v24;
  a24 = v27;
  if (v25)
  {
    v28 = v26;
    v29 = v25;
    if (v25 >> 62)
      goto LABEL_14;
    v30 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v30)
    {
      a12 = MEMORY[0x24BEE4AF8];
      specialized ContiguousArray.reserveCapacity(_:)();
      if (v30 < 0)
      {
        __break(1u);
        swift_release();
        __break(1u);
        return;
      }
      v31 = 0;
      while (v30 != v31)
      {
        if ((v29 & 0xC000000000000001) != 0)
          v32 = (id)MEMORY[0x2207D80C0](v31, v29);
        else
          v32 = OUTLINED_FUNCTION_53_5(v29 + 8 * v31);
        v33 = v32;
        a10 = v32;
        v28(&a11, &a10);

        ++v31;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v30 == v31)
          goto LABEL_12;
      }
      __break(1u);
LABEL_14:
      swift_bridgeObjectRetain();
      v30 = OUTLINED_FUNCTION_33_10();
      OUTLINED_FUNCTION_167();
    }
  }
LABEL_12:
  OUTLINED_FUNCTION_6_31();
}

#error "21FE8B474: call analysis failed (funcsize=78)"

void Array<A>.toContactAttributes.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  char v21;

  OUTLINED_FUNCTION_2_40();
  OUTLINED_FUNCTION_40_7();
  if (v16)
  {
    OUTLINED_FUNCTION_4_30();
    v14 = OUTLINED_FUNCTION_33_10();
    OUTLINED_FUNCTION_5_0();
  }
  else
  {
    OUTLINED_FUNCTION_75_9();
  }
  if (!v14)
  {
LABEL_12:
    OUTLINED_FUNCTION_0_39();
    return;
  }
  OUTLINED_FUNCTION_46_10();
  if ((v14 & 0x8000000000000000) == 0)
  {
    OUTLINED_FUNCTION_73_7();
    OUTLINED_FUNCTION_38_10();
    do
    {
      if (a11)
        OUTLINED_FUNCTION_11_21();
      v17 = objc_msgSend(OUTLINED_FUNCTION_53_5(v13 + 8 * v15), sel_identifier);
      OUTLINED_FUNCTION_128_0();
      OUTLINED_FUNCTION_17_17();
      v19 = OUTLINED_FUNCTION_106_0(v18, sel_label);
      if (v19)
      {
        OUTLINED_FUNCTION_42_6();
        OUTLINED_FUNCTION_63_8();
      }
      ++v15;
      v20 = OUTLINED_FUNCTION_106_0((uint64_t)v19, sel_value);
      OUTLINED_FUNCTION_42_6();
      OUTLINED_FUNCTION_49_14();
      OUTLINED_FUNCTION_10_23();
      OUTLINED_FUNCTION_50_11();
      OUTLINED_FUNCTION_51_10();
      OUTLINED_FUNCTION_8_20();
      OUTLINED_FUNCTION_14_24();
      OUTLINED_FUNCTION_52_11();
      OUTLINED_FUNCTION_64_8();
      v13 = a13;
    }
    while (!v21);
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t Array<A>.toCNPostalAddresses.getter(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t i;
  id v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t j;
  id v11;
  uint64_t v12;
  unint64_t v13;

  v2 = MEMORY[0x24BEE4AF8];
  v13 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
  {
    OUTLINED_FUNCTION_4_30();
    result = OUTLINED_FUNCTION_33_10();
    v3 = result;
    if (result)
      goto LABEL_3;
LABEL_14:
    OUTLINED_FUNCTION_5_0();
    v8 = MEMORY[0x24BEE4AF8];
    goto LABEL_15;
  }
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = OUTLINED_FUNCTION_24_11();
  if (!v3)
    goto LABEL_14;
LABEL_3:
  if (v3 < 1)
  {
    __break(1u);
    goto LABEL_29;
  }
  for (i = 0; i != v3; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0)
      OUTLINED_FUNCTION_18_20();
    v6 = OUTLINED_FUNCTION_53_5(a1 + 8 * i);
    v7 = objc_msgSend(v6, sel_postalAddress);

    if (v7)
    {
      MEMORY[0x2207D7DC0]();
      if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        OUTLINED_FUNCTION_44_10();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  OUTLINED_FUNCTION_5_0();
  v8 = v13;
LABEL_15:
  if (!(v8 >> 62))
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    OUTLINED_FUNCTION_24_11();
    if (v9)
      goto LABEL_17;
LABEL_26:
    OUTLINED_FUNCTION_5_0();
    v12 = MEMORY[0x24BEE4AF8];
LABEL_27:
    OUTLINED_FUNCTION_5_0();
    return v12;
  }
  OUTLINED_FUNCTION_4_30();
  v9 = OUTLINED_FUNCTION_33_10();
  if (!v9)
    goto LABEL_26;
LABEL_17:
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  if (v9 >= 1)
  {
    for (j = 0; j != v9; ++j)
    {
      if ((v8 & 0xC000000000000001) != 0)
        OUTLINED_FUNCTION_11_21();
      v11 = OUTLINED_FUNCTION_53_5(v8 + 8 * j);
      CNLabeledValue<>.init(address:)(v11);
      MEMORY[0x2207D7DC0]();
      if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        OUTLINED_FUNCTION_44_10();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    OUTLINED_FUNCTION_5_0();
    v12 = v2;
    goto LABEL_27;
  }
LABEL_29:
  __break(1u);
  return result;
}

void Array<A>.hasMultipleResultsWithUniqueLabels.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  OUTLINED_FUNCTION_27_17();
  v2 = v1;
  if (v1 >> 62)
  {
    OUTLINED_FUNCTION_25_16();
    v3 = OUTLINED_FUNCTION_94();
    OUTLINED_FUNCTION_5();
    if (!v3)
      return;
    OUTLINED_FUNCTION_25_16();
    v4 = OUTLINED_FUNCTION_94();
    OUTLINED_FUNCTION_5();
  }
  else
  {
    v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v4 = v3;
    if (!v3)
      return;
  }
  if (v4 >= 2)
  {
    if (v3 < 1)
    {
      __break(1u);
    }
    else
    {
      OUTLINED_FUNCTION_25_16();
      v5 = 0;
      v6 = MEMORY[0x24BEE4AF8];
      do
      {
        if ((v2 & 0xC000000000000001) != 0)
          OUTLINED_FUNCTION_71_8();
        v7 = OUTLINED_FUNCTION_53_5(v2 + 8 * v5);
        outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v7);
        if (v8)
        {
          v9 = String.sanitizeCNLabel.getter();
          OUTLINED_FUNCTION_17_17();
          OUTLINED_FUNCTION_117();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            OUTLINED_FUNCTION_32_14(0, *(_QWORD *)(v6 + 16) + 1);
            v6 = v13;
          }
          v11 = *(_QWORD *)(v6 + 16);
          v10 = *(_QWORD *)(v6 + 24);
          if (v11 >= v10 >> 1)
          {
            OUTLINED_FUNCTION_32_14(v10 > 1, v11 + 1);
            v6 = v14;
          }
          *(_QWORD *)(v6 + 16) = v11 + 1;
          v12 = v6 + 16 * v11;
          *(_QWORD *)(v12 + 32) = v9;
          *(_QWORD *)(v12 + 40) = v0;
        }
        else
        {

        }
        ++v5;
      }
      while (v3 != v5);
      OUTLINED_FUNCTION_5();
      if (*(_QWORD *)(v6 + 16))
        goto LABEL_28;
      OUTLINED_FUNCTION_167();
      OUTLINED_FUNCTION_25_16();
      v15 = 0;
      v6 = MEMORY[0x24BEE4AF8];
      do
      {
        v16 = OUTLINED_FUNCTION_53_5(v2 + 8 * v15);
        v17 = objc_msgSend(v16, sel_postalAddress);
        if (v17 && (outlined bridged method (ob) of @objc PostalAddress.handleLabel.getter(v17), v18))
        {
          v19 = String.sanitizeCNLabel.getter();
          OUTLINED_FUNCTION_17_17();
          OUTLINED_FUNCTION_117();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            OUTLINED_FUNCTION_32_14(0, *(_QWORD *)(v6 + 16) + 1);
            v6 = v23;
          }
          v21 = *(_QWORD *)(v6 + 16);
          v20 = *(_QWORD *)(v6 + 24);
          if (v21 >= v20 >> 1)
          {
            OUTLINED_FUNCTION_32_14(v20 > 1, v21 + 1);
            v6 = v24;
          }
          *(_QWORD *)(v6 + 16) = v21 + 1;
          v22 = v6 + 16 * v21;
          *(_QWORD *)(v22 + 32) = v19;
          *(_QWORD *)(v22 + 40) = v0;
        }
        else
        {

        }
        ++v15;
      }
      while (v3 != v15);
      OUTLINED_FUNCTION_5();
      if (*(_QWORD *)(v6 + 16))
      {
LABEL_28:
        specialized _ArrayProtocol.filter(_:)(v6);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        OUTLINED_FUNCTION_167();
      }
    }
  }
}

void closure #1 in implicit closure #1 in Array<A>.hasSameLabels.getter(void **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *a1;
  v7 = outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(*a1);
  if (v6)
  {
    v2 = v6;
    v7 = String.sanitizeCNLabel.getter();
    v9 = v8;
    OUTLINED_FUNCTION_96();
  }
  else
  {
    v9 = 0;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (a2 & 0xC000000000000001) == 0, a2);
  if ((a2 & 0xC000000000000001) != 0)
    OUTLINED_FUNCTION_29_6();
  outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(*(id *)(a2 + 32));
  if (!v10)
  {
    if (!v9)
      goto LABEL_37;
    goto LABEL_17;
  }
  String.sanitizeCNLabel.getter();
  OUTLINED_FUNCTION_54_9();
  if (!v9)
  {
    if (!v2)
      goto LABEL_37;
    goto LABEL_17;
  }
  if (!v2)
  {
LABEL_17:
    OUTLINED_FUNCTION_96();
    goto LABEL_18;
  }
  if (v7 == v3 && v9 == v2)
    goto LABEL_35;
  v12 = OUTLINED_FUNCTION_37_13();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_96();
  if ((v12 & 1) != 0)
    goto LABEL_37;
LABEL_18:
  v13 = objc_msgSend(v5, sel_postalAddress);
  if (v13 && (outlined bridged method (ob) of @objc PostalAddress.handleLabel.getter(v13), v14))
  {
    v15 = String.sanitizeCNLabel.getter();
    v17 = v16;
    OUTLINED_FUNCTION_96();
  }
  else
  {
    v15 = 0;
    v17 = 0;
  }
  outlined bridged method (ob) of @objc ContactAttribute.handleLabel.getter(*(id *)(a2 + 32));
  if (!v18)
  {
    if (!v17)
      goto LABEL_37;
    goto LABEL_36;
  }
  v19 = String.sanitizeCNLabel.getter();
  v21 = v20;
  OUTLINED_FUNCTION_9_0();
  if (!v17)
  {
    if (!v21)
      goto LABEL_37;
    goto LABEL_36;
  }
  if (v21)
  {
    if (v15 != v19 || v17 != v21)
    {
      OUTLINED_FUNCTION_11_18();
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
LABEL_35:
    swift_bridgeObjectRelease();
  }
LABEL_36:
  OUTLINED_FUNCTION_96();
LABEL_37:
  OUTLINED_FUNCTION_18_8();
}

uint64_t closure #1 in Optional<A>.toContactsPhoneHandles.getter@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  type metadata accessor for ContactsPhoneHandle.Builder(0);
  v8 = swift_allocObject();
  v9 = v8 + OBJC_IVAR____TtCC19SiriContactsIntents19ContactsPhoneHandle7Builder_phoneLabel;
  v10 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v9, 1, 1, v10);
  v11 = v8 + OBJC_IVAR____TtCC19SiriContactsIntents19ContactsPhoneHandle7Builder_phoneHandle;
  __swift_storeEnumTagSinglePayload(v8 + OBJC_IVAR____TtCC19SiriContactsIntents19ContactsPhoneHandle7Builder_phoneHandle, 1, 1, v10);
  outlined bridged method (pb) of @objc ContactAttribute.handleValue.getter(v7);
  if (!v12)
    static String.EMPTY.getter();
  SpeakableString.init(print:speak:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v10);
  swift_beginAccess();
  outlined assign with copy of SpeakableString?((uint64_t)v6, v11);
  swift_endAccess();
  outlined destroy of SpeakableString?((uint64_t)v6);
  outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v7);
  if (v13)
  {
    String.sanitizeCNLabel.getter();
    swift_bridgeObjectRelease();
  }
  ContactsPhoneHandle.Builder.withPhoneLabel(print:speak:)();
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for ContactsPhoneHandle(0);
  swift_allocObject();
  result = ContactsPhoneHandle.init(builder:)();
  *a2 = result;
  return result;
}

uint64_t closure #1 in Optional<A>.toContactsEmailHandles.getter@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  type metadata accessor for ContactsEmailHandle.Builder(0);
  v8 = swift_allocObject();
  v9 = v8 + OBJC_IVAR____TtCC19SiriContactsIntents19ContactsEmailHandle7Builder_emailLabel;
  v10 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v9, 1, 1, v10);
  v11 = v8 + OBJC_IVAR____TtCC19SiriContactsIntents19ContactsEmailHandle7Builder_emailHandle;
  __swift_storeEnumTagSinglePayload(v8 + OBJC_IVAR____TtCC19SiriContactsIntents19ContactsEmailHandle7Builder_emailHandle, 1, 1, v10);
  outlined bridged method (pb) of @objc ContactAttribute.handleValue.getter(v7);
  if (!v12)
    static String.EMPTY.getter();
  SpeakableString.init(print:speak:)();
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v10);
  swift_beginAccess();
  outlined assign with copy of SpeakableString?((uint64_t)v6, v11);
  swift_endAccess();
  outlined destroy of SpeakableString?((uint64_t)v6);
  outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v7);
  if (v13)
  {
    String.sanitizeCNLabel.getter();
    swift_bridgeObjectRelease();
  }
  ContactsEmailHandle.Builder.withEmailLabel(print:speak:)();
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for ContactsEmailHandle(0);
  swift_allocObject();
  result = ContactsEmailHandle.init(builder:)();
  *a2 = result;
  return result;
}

uint64_t closure #1 in Optional<A>.toContactsAddressHandles(localeString:)@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v7 = *a1;
  type metadata accessor for ContactsAddressHandle.Builder(0);
  v8 = OUTLINED_FUNCTION_32_0();
  v9 = v8 + OBJC_IVAR____TtCC19SiriContactsIntents21ContactsAddressHandle7Builder_addressLabel;
  v10 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload(v9, 1, 1, v10);
  *(_QWORD *)(v8 + OBJC_IVAR____TtCC19SiriContactsIntents21ContactsAddressHandle7Builder_addressHandle) = 0;
  type metadata accessor for DialogLocation();
  type metadata accessor for DialogLocationAddress();
  v11 = objc_msgSend(v7, sel_postalAddress);
  OUTLINED_FUNCTION_25_16();
  DialogLocationAddress.init(postalAddress:localeString:)(v11, a2, a3);
  v12 = DialogLocation.init(locationAddress:)();
  ContactsAddressHandle.Builder.withAddressHandle(_:)(v12);
  swift_release();
  swift_release();
  OUTLINED_FUNCTION_70_10();
  if (v13)
  {
    String.sanitizeCNLabel.getter();
    OUTLINED_FUNCTION_9_0();
  }
  v14 = ContactsAddressHandle.Builder.withAddressLabel(print:speak:)();
  OUTLINED_FUNCTION_96();
  swift_release();
  type metadata accessor for ContactsAddressHandle(0);
  OUTLINED_FUNCTION_32_0();
  result = ContactsAddressHandle.init(builder:)(v14);
  *a4 = result;
  return result;
}

uint64_t Array<A>.matchingLabeledValues(for:)(void *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v7;

  v4 = outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(a1);
  if (!v5)
    goto LABEL_7;
  if (v4 == 0x656E6F6870 && v5 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
LABEL_9:
    swift_bridgeObjectRetain();
    return a2;
  }
LABEL_7:
  swift_bridgeObjectRetain();
  return specialized _ArrayProtocol.filter(_:)(a2, a1);
}

{
  uint64_t v4;
  uint64_t v5;
  char v7;

  v4 = outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(a1);
  if (!v5)
    goto LABEL_7;
  if (v4 == 0x6C69616D65 && v5 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
LABEL_9:
    swift_bridgeObjectRetain();
    return a2;
  }
LABEL_7:
  swift_bridgeObjectRetain();
  return specialized _ArrayProtocol.filter(_:)(a2, a1);
}

{
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(a1);
  if (v5)
  {
    if (v4 == 0x73736572646461 && v5 == 0xE700000000000000)
      goto LABEL_14;
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      goto LABEL_15;
  }
  v8 = outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(a1);
  if (v9)
  {
    if (v8 != 0x7264646120796E61 || v9 != 0xEB00000000737365)
    {
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
        goto LABEL_13;
LABEL_15:
      swift_bridgeObjectRetain();
      return a2;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
LABEL_13:
  swift_bridgeObjectRetain();
  return specialized _ArrayProtocol.filter(_:)(a2, a1);
}

#error "21FE8C3EC: call analysis failed (funcsize=146)"

#error "21FE8C580: call analysis failed (funcsize=101)"

void Array<A>.matchingHandles(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  char v23;

  OUTLINED_FUNCTION_2_40();
  Array<A>.matchingLabeledValues(for:)(v16, v17);
  OUTLINED_FUNCTION_40_7();
  if (!v18)
  {
    OUTLINED_FUNCTION_75_9();
    if (v14)
      goto LABEL_3;
LABEL_13:
    OUTLINED_FUNCTION_5_0();
    OUTLINED_FUNCTION_0_39();
    return;
  }
  v14 = OUTLINED_FUNCTION_3_24();
  if (!v14)
    goto LABEL_13;
LABEL_3:
  OUTLINED_FUNCTION_46_10();
  if ((v14 & 0x8000000000000000) == 0)
  {
    OUTLINED_FUNCTION_73_7();
    OUTLINED_FUNCTION_38_10();
    do
    {
      if (a11)
        OUTLINED_FUNCTION_11_21();
      v19 = objc_msgSend(OUTLINED_FUNCTION_53_5(v13 + 8 * v15), sel_identifier);
      OUTLINED_FUNCTION_128_0();
      OUTLINED_FUNCTION_17_17();
      v21 = OUTLINED_FUNCTION_106_0(v20, sel_label);
      if (v21)
      {
        OUTLINED_FUNCTION_53_10();
        OUTLINED_FUNCTION_48_9();
        OUTLINED_FUNCTION_31_16();
        v21 = (id)OUTLINED_FUNCTION_24_23();
      }
      ++v15;
      v22 = OUTLINED_FUNCTION_106_0((uint64_t)v21, sel_value);
      OUTLINED_FUNCTION_42_6();
      OUTLINED_FUNCTION_49_14();
      OUTLINED_FUNCTION_10_23();
      OUTLINED_FUNCTION_50_11();
      OUTLINED_FUNCTION_51_10();
      OUTLINED_FUNCTION_8_20();
      OUTLINED_FUNCTION_14_24();
      OUTLINED_FUNCTION_52_11();
      OUTLINED_FUNCTION_64_8();
      v13 = a13;
    }
    while (!v23);
    goto LABEL_13;
  }
  __break(1u);
}

#error "21FE8C8EC: call analysis failed (funcsize=94)"

void closure #1 in Array<A>.matchingLabeledValues(for:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  char v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(a2);
  v5 = v4;
  swift_bridgeObjectRelease();
  if (v5)
  {
    v6 = OUTLINED_FUNCTION_60_12();
    if (v6)
    {
      v5 = v6;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      v2 = v7;

      v8 = String.sanitizeCNLabel.getter();
      v10 = v9;
      swift_bridgeObjectRelease();
    }
    else
    {
      v8 = 0;
      v10 = 0;
    }
    outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(a2);
    if (v11)
    {
      String.convertToContactAttributeLabel.getter();
      OUTLINED_FUNCTION_54_9();
      if (v10)
      {
        if (v8 == v2 && v10 == v5)
        {
          OUTLINED_FUNCTION_18_0();
LABEL_31:
          OUTLINED_FUNCTION_96();
          goto LABEL_32;
        }
        v13 = OUTLINED_FUNCTION_37_13();
        OUTLINED_FUNCTION_18_0();
        OUTLINED_FUNCTION_96();
        if ((v13 & 1) != 0)
          goto LABEL_32;
LABEL_15:
        v14 = OUTLINED_FUNCTION_60_12();
        if (v14)
        {
          v15 = v14;
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v18 = v17;

        }
        else
        {
          v16 = 0;
          v18 = 0;
        }
        v19 = outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(a2);
        if (v18)
        {
          if (v20)
          {
            if (v16 != v19 || v18 != v20)
              OUTLINED_FUNCTION_11_18();
            OUTLINED_FUNCTION_96();
          }
        }
        else if (!v20)
        {
          goto LABEL_32;
        }
        goto LABEL_31;
      }
    }
    else if (!v10)
    {
      goto LABEL_32;
    }
    OUTLINED_FUNCTION_96();
    goto LABEL_15;
  }
LABEL_32:
  OUTLINED_FUNCTION_18_8();
}

#error "21FE8CD50: call analysis failed (funcsize=211)"

void Array<A>.findAddressContainingField(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  Swift::String v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  OUTLINED_FUNCTION_27_17();
  a23 = v24;
  a24 = v25;
  v27 = v26;
  v29._countAndFlagsBits = outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v28);
  if (!v29._object)
    goto LABEL_14;
  v30 = ContactNLIntent.ContactPostalAddressField.init(rawValue:)(v29);
  if (v30 == 5)
    goto LABEL_14;
  v31 = v30;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)static Logger.siriContacts);
  v33 = Logger.logObject.getter();
  v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)OUTLINED_FUNCTION_1();
    a12 = OUTLINED_FUNCTION_1();
    *(_DWORD *)v35 = 136315138;
    ContactNLIntent.ContactPostalAddressField.rawValue.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &a12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_117();
    _os_log_impl(&dword_21FE16000, v33, v34, "User requested an address field %s, checking addresses for one that contains this field", v35, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0();
  }

  if (v27 >> 62)
  {
    swift_bridgeObjectRetain();
    if (OUTLINED_FUNCTION_33_10())
      goto LABEL_9;
    goto LABEL_13;
  }
  v38 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v38)
  {
LABEL_13:
    swift_bridgeObjectRelease();
LABEL_14:
    OUTLINED_FUNCTION_6_31();
    return;
  }
LABEL_9:
  v39 = v31;
  if ((v27 & 0xC000000000000001) != 0)
    v40 = (id)MEMORY[0x2207D80C0](0, v27);
  else
    v40 = *(id *)(v27 + 32);
  v41 = OUTLINED_FUNCTION_20_9((uint64_t)v40, sel_value);
  ((void (*)(id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_21FE8D160 + *((int *)qword_21FE8D3F0 + v39)))(v41, v42, v43, v44, v45, v46, v47, v48, a9, v27, a11, a12, a13, a14, a15, a16);
}

#error "21FE8D524: call analysis failed (funcsize=107)"

CNPhoneNumber __swiftcall CNPhoneNumber.__allocating_init(stringValue:)(Swift::String stringValue)
{
  void *object;
  uint64_t countAndFlagsBits;
  id v3;
  void *v4;
  id v5;

  object = stringValue._object;
  countAndFlagsBits = stringValue._countAndFlagsBits;
  v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v4 = (void *)MEMORY[0x2207D7CB8](countAndFlagsBits, object);
  OUTLINED_FUNCTION_5_0();
  v5 = objc_msgSend(v3, sel_initWithStringValue_, v4);

  return (CNPhoneNumber)v5;
}

uint64_t specialized UnsafeMutablePointer.assign(repeating:count:)(uint64_t result, uint64_t a2, _QWORD *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

unint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v39;
  unint64_t v40;
  id v41;
  id v42;
  int isUniquelyReferenced_nonNull_bridgeObject;
  void *v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  void *v48;
  unint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = swift_bridgeObjectRetain();
  v13 = specialized Collection.firstIndex(where:)(v12, a2, a3, a4, a5);
  if (v5)
  {
    swift_bridgeObjectRelease();
    goto LABEL_64;
  }
  v6 = v13;
  v15 = v14;
  v55 = a2;
  v53 = a4;
  v54 = a5;
  swift_bridgeObjectRelease();
  if ((v15 & 1) != 0)
  {
    v18 = *a1;
    if (v18 >> 62)
    {
      swift_bridgeObjectRetain();
      v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v6 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    goto LABEL_64;
  }
  v16 = v6 + 1;
  if (__OFADD__(v6, 1))
    goto LABEL_75;
  if (*a1 >> 62)
  {
LABEL_76:
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v17 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v16 != v17)
  {
    v16 = v6 + 5;
    do
    {
      v19 = v16 - 4;
      v20 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        v21 = (id)MEMORY[0x2207D80C0](v16 - 4);
      }
      else
      {
        if ((v19 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
LABEL_75:
          __break(1u);
          goto LABEL_76;
        }
        if (v19 >= *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_66;
        v21 = *(id *)(v20 + 8 * v16);
      }
      v22 = v21;
      v23 = objc_msgSend(v21, sel_value);
      v24 = objc_msgSend(v23, sel_name);

      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v27 = v26;

      if (v25 == v55 && v27 == a3)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v29 & 1) == 0)
        {

          goto LABEL_31;
        }
      }
      v30 = objc_msgSend(v22, sel_label);
      if (v30)
      {
        v31 = v30;
        v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v34 = v33;

      }
      else
      {
        v32 = 0;
        v34 = 0;
      }
      v35 = static Dictionary<>.nlSemantic(forCNLabel:)(v32, v34);
      v37 = v36;
      swift_bridgeObjectRelease();
      if (v35 == v53 && v37 == v54)
      {

        swift_bridgeObjectRelease();
        goto LABEL_55;
      }
      v39 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      if ((v39 & 1) != 0)
        goto LABEL_55;
LABEL_31:
      if (v19 != v6)
      {
        v40 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          v41 = (id)MEMORY[0x2207D80C0](v6, *a1);
          v40 = *a1;
        }
        else
        {
          if ((v6 & 0x8000000000000000) != 0)
            goto LABEL_69;
          if (v6 >= *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_70;
          v41 = *(id *)(v40 + 8 * v6 + 32);
        }
        if ((v40 & 0xC000000000000001) != 0)
        {
          v42 = (id)MEMORY[0x2207D80C0](v16 - 4, v40);
          v40 = *a1;
        }
        else
        {
          if ((v19 & 0x8000000000000000) != 0)
            goto LABEL_71;
          if (v19 >= *(_QWORD *)((v40 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_72;
          v42 = *(id *)(v40 + 8 * v16);
        }
        isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v40;
        if (!isUniquelyReferenced_nonNull_bridgeObject
          || (v40 & 0x8000000000000000) != 0
          || (v40 & 0x4000000000000000) != 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew()(v40);
        }
        v44 = *(void **)((v40 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20);
        *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v42;

        specialized Array._endMutation()();
        v45 = *a1;
        v46 = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v45;
        if (!v46 || (v45 & 0x8000000000000000) != 0 || (v45 & 0x4000000000000000) != 0)
          specialized _ArrayBuffer._consumeAndCreateNew()(v45);
        if ((v19 & 0x8000000000000000) != 0)
          goto LABEL_73;
        v47 = v45 & 0xFFFFFFFFFFFFFF8;
        if (v19 >= *(_QWORD *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_74;
        v48 = *(void **)(v47 + 8 * v16);
        *(_QWORD *)(v47 + 8 * v16) = v41;

        specialized Array._endMutation()();
      }
      if (__OFADD__(v6++, 1))
        goto LABEL_68;
LABEL_55:
      v50 = v16 - 3;
      if (__OFADD__(v19, 1))
        goto LABEL_67;
      if (*a1 >> 62)
      {
        swift_bridgeObjectRetain();
        v51 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v51 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      ++v16;
    }
    while (v50 != v51);
  }
LABEL_64:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t specialized Collection.firstIndex(where:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  char v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v28;
  uint64_t v29;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v9 = a1;
  if (a1 >> 62)
  {
LABEL_28:
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10)
      goto LABEL_3;
  }
  else
  {
    v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v10)
    {
LABEL_3:
      v11 = 0;
      v33 = v9 & 0xC000000000000001;
      v31 = v10;
      v32 = v9;
      do
      {
        if (v33)
          v12 = (id)MEMORY[0x2207D80C0](v11, v9);
        else
          v12 = *(id *)(v9 + 8 * v11 + 32);
        v13 = v12;
        v14 = objc_msgSend(v12, sel_value);
        v15 = objc_msgSend(v14, sel_name);

        v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v9 = v17;

        if (v16 == a2 && v9 == a3)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v19 & 1) == 0)
          {

            goto LABEL_22;
          }
        }
        v20 = objc_msgSend(v13, sel_label);
        if (v20)
        {
          v21 = v20;
          v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v24 = v23;

        }
        else
        {
          v22 = 0;
          v24 = 0;
        }
        v25 = static Dictionary<>.nlSemantic(forCNLabel:)(v22, v24);
        v9 = v26;
        swift_bridgeObjectRelease();
        if (v25 == a4 && v9 == a5)
        {
          swift_bridgeObjectRelease();

          goto LABEL_26;
        }
        v28 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        if ((v28 & 1) != 0)
          goto LABEL_26;
LABEL_22:
        v29 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
          goto LABEL_28;
        }
        ++v11;
        v9 = v32;
      }
      while (v29 != v31);
    }
  }
  v11 = 0;
LABEL_26:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;
  Swift::Int *v15;
  Swift::Int v16;
  uint64_t v18;
  char v19;
  _QWORD *v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;

  v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  OUTLINED_FUNCTION_67_9();
  if ((v11 & 1) != 0)
  {
    v12 = *(_QWORD *)(v7 + 48);
    v13 = (_QWORD *)(v12 + 16 * v10);
    v14 = *v13 == a2 && v13[1] == a3;
    if (v14 || (OUTLINED_FUNCTION_2_19() & 1) != 0)
    {
LABEL_7:
      OUTLINED_FUNCTION_167();
      OUTLINED_FUNCTION_9_0();
      v15 = (Swift::Int *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain();
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      OUTLINED_FUNCTION_67_9();
      if ((v19 & 1) == 0)
        break;
      v20 = (_QWORD *)(v12 + 16 * v10);
      v21 = *v20 == a2 && v20[1] == a3;
      if (v21 || (OUTLINED_FUNCTION_2_19() & 1) != 0)
        goto LABEL_7;
    }
  }
  OUTLINED_FUNCTION_9_0();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v23 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v23;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    if (!v7)
      goto LABEL_7;
LABEL_6:
    v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
      v18 = *v17;
      v19 = v17[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          v26 = v22 == v25;
          if (v22 == v25)
            v22 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v9 + 8 * v22);
          if (v27 != -1)
          {
            v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(_QWORD *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v23);
      *v28 = v18;
      v28[1] = v19;
      ++*(_QWORD *)(v4 + 16);
      if (v7)
        goto LABEL_6;
LABEL_7:
      v14 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_38;
      if (v14 >= v8)
        goto LABEL_32;
      v15 = v30[v14];
      ++v11;
      if (!v15)
      {
        v11 = v14 + 1;
        if (v14 + 1 >= v8)
          goto LABEL_32;
        v15 = v30[v11];
        if (!v15)
        {
          v11 = v14 + 2;
          if (v14 + 2 >= v8)
            goto LABEL_32;
          v15 = v30[v11];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v8)
            {
LABEL_32:
              swift_release();
              v1 = v0;
              v29 = 1 << *(_BYTE *)(v2 + 32);
              if (v29 > 63)
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v29 + 63) >> 6, v30);
              else
                *v30 = -1 << v29;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                v11 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_39;
                if (v11 >= v8)
                  goto LABEL_32;
                v15 = v30[v11];
                ++v16;
                if (v15)
                  goto LABEL_20;
              }
            }
            v11 = v16;
          }
        }
      }
LABEL_20:
      v7 = (v15 - 1) & v15;
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  Swift::Int *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (Swift::Int *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0)
    goto LABEL_12;
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    v20 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v21 = v20[1];
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * i);
    *v22 = *v20;
    v22[1] = v21;
    result = (void *)swift_bridgeObjectRetain();
    if (v13)
      goto LABEL_11;
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_34:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  if (!v8)
    goto LABEL_7;
LABEL_6:
  v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * i);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(_QWORD *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*(_QWORD *)(v4 + 16);
    if (v8)
      goto LABEL_6;
LABEL_7:
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_36;
    if (v14 >= v29)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      v11 = v14 + 1;
      if (v14 + 1 >= v29)
        goto LABEL_32;
      v15 = *(_QWORD *)(v6 + 8 * v11);
      if (!v15)
      {
        v11 = v14 + 2;
        if (v14 + 2 >= v29)
          goto LABEL_32;
        v15 = *(_QWORD *)(v6 + 8 * v11);
        if (!v15)
          break;
      }
    }
LABEL_20:
    v8 = (v15 - 1) & v15;
  }
  v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
    v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v29)
      goto LABEL_32;
    v15 = *(_QWORD *)(v6 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_20;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_handleLabel);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t type metadata accessor for CNPhoneNumber()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CNPhoneNumber;
  if (!lazy cache variable for type metadata for CNPhoneNumber)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CNPhoneNumber);
  }
  return result;
}

uint64_t outlined bridged method (ob) of @objc PostalAddress.handleLabel.getter(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, sel_handleLabel);

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined assign with copy of SpeakableString?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    if (!(*v3 >> 62))
    {
      v6 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_4:
  if (v6 < v2)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (__OFSUB__(v2, v4))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v5 = v4 - v2;
  if (__OFSUB__(0, v2 - v4))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (!(*v3 >> 62))
  {
    v7 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_9;
  }
LABEL_34:
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_9:
  v8 = v7 + v5;
  if (__OFADD__(v7, v5))
  {
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v9 = *v3;
    goto LABEL_17;
  }
  v9 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v3 = v9;
  v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v9 & 0x8000000000000000) == 0 && (v9 & 0x4000000000000000) == 0)
  {
    v11 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_20;
    v7 = 1;
  }
  if (v9 >> 62)
    goto LABEL_36;
  v12 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_17:
  if (v12 <= v8)
    v12 = v8;
  swift_bridgeObjectRetain();
  *v3 = MEMORY[0x2207D80CC](v7, v12, 1, v9);
  swift_bridgeObjectRelease();
  v11 = *v3 & 0xFFFFFFFFFFFFFF8;
LABEL_20:
  v13 = v11 + 32;
  v14 = (char *)(v11 + 32 + 8 * v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
  swift_arrayDestroy();
  if (!v5)
    return specialized Array._endMutation()();
  if (*v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFSUB__(v15, v2))
  {
    __break(1u);
  }
  else
  {
    result = (uint64_t)specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(v13 + 8 * v2), v15 - v2, v14);
    if (!(*v3 >> 62))
    {
      v17 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_26;
    }
  }
  swift_bridgeObjectRetain();
  v17 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
LABEL_26:
  if (!__OFADD__(v17, v5))
  {
    *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFF8) + 0x10) = v17 + v5;
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x2207D80CCLL);
}

uint64_t OUTLINED_FUNCTION_3_24()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t OUTLINED_FUNCTION_4_30()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_8_20()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

id OUTLINED_FUNCTION_10_23()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  return ContactAttribute.__allocating_init(contactAttributeType:identifier:handleLabel:handleValue:ageDateTime:postalAddress:)(1, v1, v3, v4, v5, v0, v2, 0, 0);
}

void OUTLINED_FUNCTION_11_21()
{
  JUMPOUT(0x2207D80C0);
}

uint64_t OUTLINED_FUNCTION_14_24()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

void OUTLINED_FUNCTION_15_19()
{
  void *v0;

}

void OUTLINED_FUNCTION_17_17()
{
  void *v0;

}

void OUTLINED_FUNCTION_18_20()
{
  JUMPOUT(0x2207D80C0);
}

uint64_t OUTLINED_FUNCTION_24_23()
{
  return swift_bridgeObjectRelease();
}

id OUTLINED_FUNCTION_25_24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  return ContactAttribute.__allocating_init(contactAttributeType:identifier:handleLabel:handleValue:ageDateTime:postalAddress:)(a1, a2, a3, a4, a5, a6, a7, 0, a9);
}

uint64_t OUTLINED_FUNCTION_28_13()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

void OUTLINED_FUNCTION_30_17()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_31_16()
{
  return String.sanitizeCNLabel.getter();
}

void OUTLINED_FUNCTION_32_14(char a1, uint64_t a2)
{
  uint64_t v2;

  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_33_10()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t OUTLINED_FUNCTION_36_10()
{
  return 2;
}

uint64_t OUTLINED_FUNCTION_37_13()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

id OUTLINED_FUNCTION_41_9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  return ContactAttribute.__allocating_init(contactAttributeType:identifier:handleLabel:handleValue:ageDateTime:postalAddress:)(a1, a2, a3, a4, a5, a6, a7, 0, a9);
}

uint64_t OUTLINED_FUNCTION_42_6()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

id OUTLINED_FUNCTION_43_11(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

uint64_t OUTLINED_FUNCTION_44_10()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_46_10()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

void OUTLINED_FUNCTION_47_10(unint64_t a1)
{
  void *v1;

  specialized _ArrayProtocol.filter(_:)(a1, v1);
}

void OUTLINED_FUNCTION_48_9()
{
  void *v0;

}

void OUTLINED_FUNCTION_49_14()
{
  void *v0;

}

void OUTLINED_FUNCTION_50_11()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_51_10()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t OUTLINED_FUNCTION_52_11()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t OUTLINED_FUNCTION_53_10()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_54_9()
{
  return swift_bridgeObjectRelease();
}

id OUTLINED_FUNCTION_60_12()
{
  void *v0;
  uint64_t v1;

  return objc_msgSend(v0, (SEL)(v1 + 2632));
}

id OUTLINED_FUNCTION_62_11(id a1)
{
  return a1;
}

void OUTLINED_FUNCTION_63_8()
{
  void *v0;

}

void OUTLINED_FUNCTION_66_13()
{
  void *v0;

}

uint64_t OUTLINED_FUNCTION_70_10()
{
  void *v0;

  return outlined bridged method (pb) of @objc ContactAttribute.handleLabel.getter(v0);
}

void OUTLINED_FUNCTION_71_8()
{
  JUMPOUT(0x2207D80C0);
}

uint64_t dispatch thunk of ContactsStrategyProtocol.isSmartEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of ContactsStrategyProtocol.init(catFamily:deviceState:contactService:labelCATs:mockGlobals:featureFlagProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 80))();
}

uint64_t type metadata completion function for ContactsStrategy()
{
  return swift_initClassMetadata2();
}

uint64_t ContactsStrategy.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_0(v0 + 16);
  __swift_destroy_boxed_opaque_existential_0(v0 + 56);
  swift_release();
  swift_release();

  __swift_destroy_boxed_opaque_existential_0(v0 + 128);
  return v0;
}

uint64_t ContactsStrategy.isSmartEnabled.getter()
{
  char v0;
  _BYTE v2[24];
  ValueMetadata *v3;
  unint64_t v4;

  v3 = &type metadata for SiriContactsFeatures;
  v4 = lazy protocol witness table accessor for type SiriContactsFeatures and conformance SiriContactsFeatures();
  v0 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v2);
  return v0 & 1;
}

void ContactsStrategy.confirmationOutput(templateResult:views:meCard:listenAfterSpeaking:nlContextUpdate:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  _BYTE v17[40];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)v15 - v12;
  outlined init with copy of DeviceState(v5 + 16, (uint64_t)v17);
  outlined init with copy of NLContextUpdate?(a5, (uint64_t)v11);
  v14 = type metadata accessor for NLContextUpdate();
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v14) == 1)
  {
    static ContactsContextProvider.confirm(person:attribute:)(a3, 0, 1);
    outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v11, &demangling cache variable for type metadata for NLContextUpdate?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v13, v11, v14);
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v14);
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  static AceOutputHelper.makeConfirmationViewOutput(templateResult:deviceState:ttsEnabled:snippetAceViews:listenAfterSpeaking:canUseServerTTS:nlContextUpdate:additionalCommands:flowActivity:)();
  outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for FlowActivity?);
  outlined destroy of UsoEntity_common_Person.DefinedValues?((uint64_t)v13, &demangling cache variable for type metadata for NLContextUpdate?);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v17);
  OUTLINED_FUNCTION_7();
}

void ContactsStrategy.getActionForInput(input:)(uint64_t a1@<X8>)
{
  uint64_t v1;

  static StrategyUtil.getActionForInput<A>(input:intentType:)(*(void **)(*(_QWORD *)v1 + 80), a1);
}

void static StrategyUtil.getActionForInput<A>(input:intentType:)(void *a1@<X1>, uint64_t a2@<X8>)
{
  NSObject *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(char *, uint64_t);
  int v17;
  int v18;
  void *v21;
  void *v22;
  uint64_t v23;
  os_log_type_t v24;
  _WORD *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  os_log_type_t v33;
  _WORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  os_log_type_t v42;
  _WORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  os_log_type_t v47;
  _WORD *v48;
  _QWORD v49[2];
  void *v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;

  v50 = a1;
  v4 = type metadata accessor for Parse.DirectInvocation();
  v52 = *(_QWORD *)(v4 - 8);
  v53 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v51 = ((char *)v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for Parse();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)v49 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)v49 - v14;
  OUTLINED_FUNCTION_10_24();
  v16 = *(uint64_t (**)(char *, uint64_t))(v7 + 88);
  v17 = v16(v15, v6);
  v18 = *MEMORY[0x24BE98E88];
  if (v17 != *MEMORY[0x24BE98E08] && v17 != v18 && v17 != *MEMORY[0x24BE98E98])
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v29 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v29, (uint64_t)static Logger.siriContacts);
    v30 = OUTLINED_FUNCTION_8();
    if (os_log_type_enabled(v2, v30))
    {
      v31 = (uint8_t *)OUTLINED_FUNCTION_2_1();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_21FE16000, v2, v30, "#getActionForInput: Received unsupported parse type, returning .ignore() actionForInput", v31, 2u);
      OUTLINED_FUNCTION_0();
    }

    static ActionForInput.ignore()();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
    goto LABEL_40;
  }
  v49[1] = a2;
  OUTLINED_FUNCTION_16_3((uint64_t)v15);
  OUTLINED_FUNCTION_10_24();
  Parse.cancelOrContactIntent.getter();
  v22 = v21;
  OUTLINED_FUNCTION_16_3((uint64_t)v13);
  if ((v22 & 1) != 0)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v32 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v32, (uint64_t)static Logger.siriContacts);
    v33 = OUTLINED_FUNCTION_8();
    if (OUTLINED_FUNCTION_3(v33))
    {
      v34 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_11_22(v34);
      OUTLINED_FUNCTION_2_41(&dword_21FE16000, v35, v36, "#getActionForInput: .cancel() actionForInput");
      OUTLINED_FUNCTION_0();
    }

    static ActionForInput.cancel()();
  }
  else
  {
    if (((unsigned __int16)v22 & 0x100) == 0)
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v23 = OUTLINED_FUNCTION_26();
      OUTLINED_FUNCTION_10_1(v23, (uint64_t)static Logger.siriContacts);
      v24 = OUTLINED_FUNCTION_8();
      if (OUTLINED_FUNCTION_3(v24))
      {
        v25 = (_WORD *)OUTLINED_FUNCTION_2_1();
        OUTLINED_FUNCTION_11_22(v25);
        v28 = "#getActionForInput: .ignore() actionForInput";
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    OUTLINED_FUNCTION_10_24();
    if (v16(v10, v6) == v18)
    {
      (*(void (**)(char *, uint64_t))(v7 + 96))(v10, v6);
      v38 = v51;
      v37 = v52;
      v39 = v53;
      (*(void (**)(NSObject *, char *, uint64_t))(v52 + 32))(v51, v10, v53);
      static StrategyUtil.actionForDirectInvocation(_:)(v38);
      (*(void (**)(NSObject *, uint64_t))(v37 + 8))(v38, v39);
      goto LABEL_40;
    }
    OUTLINED_FUNCTION_16_3((uint64_t)v10);
    OUTLINED_FUNCTION_10_24();
    Parse.getSiriKitIntentType()();
    v22 = v40;
    OUTLINED_FUNCTION_16_3((uint64_t)v13);
    if (!v22 || v22 != v50)
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v46 = OUTLINED_FUNCTION_26();
      OUTLINED_FUNCTION_10_1(v46, (uint64_t)static Logger.siriContacts);
      v47 = OUTLINED_FUNCTION_8();
      if (OUTLINED_FUNCTION_3(v47))
      {
        v48 = (_WORD *)OUTLINED_FUNCTION_2_1();
        OUTLINED_FUNCTION_11_22(v48);
        v28 = "#getActionForInput: parse intent type does not match flow's intent type, returning .ignore()";
LABEL_38:
        OUTLINED_FUNCTION_2_41(&dword_21FE16000, v26, v27, v28);
        OUTLINED_FUNCTION_0();
      }
LABEL_39:

      static ActionForInput.ignore()();
      goto LABEL_40;
    }
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v41 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v41, (uint64_t)static Logger.siriContacts);
    v42 = OUTLINED_FUNCTION_8();
    if (OUTLINED_FUNCTION_3(v42))
    {
      v43 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_11_22(v43);
      OUTLINED_FUNCTION_2_41(&dword_21FE16000, v44, v45, "#getActionForInput: .handle() actionForInput");
      OUTLINED_FUNCTION_0();
    }

    static ActionForInput.handle()();
  }
LABEL_40:
  OUTLINED_FUNCTION_7();
}

uint64_t ContactsStrategy.__deallocating_deinit()
{
  ContactsStrategy.deinit();
  return swift_deallocClassInstance();
}

void type metadata accessor for ContactsStrategy()
{
  JUMPOUT(0x2207D8654);
}

uint64_t static StrategyUtil.actionForDirectInvocation(_:)(NSObject *a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  os_log_type_t v4;
  _WORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v19;
  Swift::String v20;

  v20._countAndFlagsBits = Parse.DirectInvocation.identifier.getter();
  v2 = ContactsDirectInvocations.Identifiers.init(rawValue:)(v20);
  if (v2 == 8)
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v3 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v3, (uint64_t)static Logger.siriContacts);
    v4 = OUTLINED_FUNCTION_8();
    if (OUTLINED_FUNCTION_3(v4))
    {
      v5 = (_WORD *)OUTLINED_FUNCTION_2_1();
      OUTLINED_FUNCTION_11_22(v5);
      OUTLINED_FUNCTION_2_41(&dword_21FE16000, v6, v7, "#getActionForInput Direct Invocation identifier did not match a known value, returning .ignore()");
      OUTLINED_FUNCTION_0();
    }
LABEL_17:

    return static ActionForInput.ignore()();
  }
  v8 = v2;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v9 = OUTLINED_FUNCTION_26();
  v10 = OUTLINED_FUNCTION_10_1(v9, (uint64_t)static Logger.siriContacts);
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    *(_DWORD *)v12 = 136315138;
    v13 = ContactsDirectInvocations.Identifiers.rawValue.getter(v8);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21FE16000, v10, v11, "#getActionForInput: Direct Invocation known invocation identifier found: %s", v12, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_0();
  }

  v15 = ContactsDirectInvocations.Identifiers.shouldStayInDomain.getter(v8);
  Logger.logObject.getter();
  v16 = OUTLINED_FUNCTION_8();
  v17 = os_log_type_enabled(a1, v16);
  if ((v15 & 1) == 0)
  {
    if (v17)
    {
      *(_WORD *)OUTLINED_FUNCTION_2_1() = 0;
      OUTLINED_FUNCTION_4_31(&dword_21FE16000, a1, v16, "#getActionForInput: Direct Invocation identifier is not intended for this domain, returning .ignore()");
      OUTLINED_FUNCTION_0();
    }
    goto LABEL_17;
  }
  if (v17)
  {
    *(_WORD *)OUTLINED_FUNCTION_2_1() = 0;
    OUTLINED_FUNCTION_4_31(&dword_21FE16000, a1, v16, "#getActionForInput: Direct Invocation identifier is intended for this domain, returning .handle()");
    OUTLINED_FUNCTION_0();
  }

  return static ActionForInput.handle()();
}

void OUTLINED_FUNCTION_2_41(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void OUTLINED_FUNCTION_4_31(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  uint8_t *v4;

  _os_log_impl(a1, a2, a3, a4, v4, 2u);
}

uint64_t OUTLINED_FUNCTION_10_24()
{
  return Input.parse.getter();
}

_WORD *OUTLINED_FUNCTION_11_22(_WORD *result)
{
  *result = 0;
  return result;
}

uint64_t specialized IdiomSensitiveViewBuilder.makeContactsAppLaunchButton(appUtil:result:)()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  AppUtil.buildPunchoutFor(contactIdentifier:)();
  if (!v0)
    return MEMORY[0x24BEE4AF8];
  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v2 = OUTLINED_FUNCTION_55();
  *(_OWORD *)(v2 + 16) = xmmword_21FED8AB0;
  v3 = OUTLINED_FUNCTION_55();
  *(_OWORD *)(v3 + 16) = xmmword_21FED8AB0;
  *(_QWORD *)(v3 + 32) = v1;
  v8 = v3;
  specialized Array._endMutation()();
  v4 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  Result<>.firstPrint.getter();
  if (!v5)
    static String.EMPTY.getter();
  type metadata accessor for SAUIButton();
  SAUIButton.init(commands:text:)(v8);
  *(_QWORD *)(v2 + 32) = v6;
  specialized Array._endMutation()();

  return v2;
}

uint64_t ErrorViewBuilder.makeViewsForWatch()()
{
  return ErrorViewBuilder.makeViewsForWatch()("[ErrorViewBuilder] Constructing no error punchout for Watch.");
}

uint64_t ErrorViewBuilder.makeViewsForMac()()
{
  return ErrorViewBuilder.makeViewsForMac()("[ErrorViewBuilder] Constructing punchout button for macOS.");
}

uint64_t ErrorViewBuilder.makeViewsForCarPlay()()
{
  return ErrorViewBuilder.makeViewsForWatch()("[ErrorViewBuilder] Constructing no error punchout for CarPlay.");
}

uint64_t ErrorViewBuilder.makeViewsForCarDND()()
{
  return ErrorViewBuilder.makeViewsForWatch()("[ErrorViewBuilder] Constructing no error punchout for CarDND.");
}

uint64_t ErrorViewBuilder.makeViewsForIOS()()
{
  return ErrorViewBuilder.makeViewsForMac()("[ErrorViewBuilder] Constructing punchout button for iOS.");
}

uint64_t ErrorViewBuilder.makeViewsForMac()(const char *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<TemplatingResult, Error>);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.siriContacts);
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)OUTLINED_FUNCTION_2_1();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_21FE16000, v6, v7, a1, v8, 2u);
    OUTLINED_FUNCTION_0();
  }

  ContactsLabelCATs.openContacts()();
  v9 = specialized IdiomSensitiveViewBuilder.makeContactsAppLaunchButton(appUtil:result:)();
  outlined destroy of Result<TemplatingResult, Error>((uint64_t)v4);
  return v9;
}

uint64_t ErrorViewBuilder.makeViewsForXROS()()
{
  return ErrorViewBuilder.makeViewsForWatch()("[ErrorViewBuilder] Constructing no error punchout for XR.");
}

uint64_t ErrorViewBuilder.makeViewsForWatch()(const char *a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.siriContacts);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)OUTLINED_FUNCTION_2_1();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_21FE16000, v3, v4, a1, v5, 2u);
    OUTLINED_FUNCTION_0();
  }

  return MEMORY[0x24BEE4AF8];
}

ValueMetadata *type metadata accessor for ErrorViewBuilder()
{
  return &type metadata for ErrorViewBuilder;
}

SiriContactsIntents::GetContactAttributeSlots_optional __swiftcall GetContactAttributeSlots.init(rawValue:)(Swift::String rawValue)
{
  uint64_t countAndFlagsBits;
  Swift::OpaquePointer v2;
  SiriContactsIntents::GetContactAttributeSlots_optional result;

  countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._rawValue = &outlined read-only object #0 of GetContactAttributeSlots.init(rawValue:);
  OUTLINED_FUNCTION_82_3(v2, countAndFlagsBits);
  OUTLINED_FUNCTION_0_28();
  OUTLINED_FUNCTION_31_0();
  return result;
}

uint64_t GetContactSlots.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)j__OUTLINED_FUNCTION_6_32
                                                                     + 4 * byte_21FEDCB20[a1]))(0xD000000000000010, 0x800000021FEDF9A0);
}

uint64_t sub_21FE8FCD4()
{
  return OUTLINED_FUNCTION_14_25(0x6B63696Eu);
}

uint64_t sub_21FE8FD2C()
{
  return 0x6374614D69726973;
}

uint64_t ModifyContactAttributeSlots.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_21FE8FD88 + 4 * byte_21FEDCB2C[a1]))(0xD000000000000018, 0x800000021FEDFA70);
}

uint64_t sub_21FE8FD88()
{
  return 0x704F796669646F6DLL;
}

unint64_t sub_21FE8FDAC()
{
  return 0xD000000000000012;
}

uint64_t sub_21FE8FDF8()
{
  return 0x43646574616C6572;
}

SiriContactsIntents::ModifyContactAttributeSlots_optional __swiftcall ModifyContactAttributeSlots.init(rawValue:)(Swift::String rawValue)
{
  uint64_t countAndFlagsBits;
  Swift::OpaquePointer v2;
  SiriContactsIntents::ModifyContactAttributeSlots_optional result;

  countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._rawValue = &outlined read-only object #0 of ModifyContactAttributeSlots.init(rawValue:);
  OUTLINED_FUNCTION_82_3(v2, countAndFlagsBits);
  OUTLINED_FUNCTION_0_28();
  OUTLINED_FUNCTION_31_0();
  return result;
}

id specialized Slot<>.slotDescription.getter(uint64_t a1, void (*a2)(_QWORD), uint64_t (*a3)(uint64_t), uint64_t (*a4)(void))
{
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;

  a2(0);
  v7 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v8 = objc_msgSend(v7, sel__intentInstanceDescription);

  v9 = a3(a1);
  v10 = (void *)MEMORY[0x2207D7CB8](v9);
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(v8, sel_slotByName_, v10);

  if (!v11)
  {
    MEMORY[0x24BDAC7A8](v12);
    OUTLINED_FUNCTION_7_29(a4);
  }
  return v11;
}

id Slot<>.slotDescription.getter(uint64_t a1, uint64_t a2)
{
  id v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;

  (*(void (**)(void))(a2 + 8))();
  v2 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v3 = objc_msgSend(v2, sel__intentInstanceDescription);

  dispatch thunk of RawRepresentable.rawValue.getter();
  v4 = (void *)MEMORY[0x2207D7CB8]();
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v3, sel_slotByName_, v4);

  if (!v5)
  {
    MEMORY[0x24BDAC7A8](v6);
    OUTLINED_FUNCTION_7_29(partial apply for implicit closure #1 in Slot<>.slotDescription.getter);
  }
  return v5;
}

uint64_t implicit closure #1 in Slot<>.slotDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  v5 = type metadata accessor for ContactsError();
  MEMORY[0x24BDAC7A8](v5);
  v7 = (_QWORD *)((char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  dispatch thunk of RawRepresentable.rawValue.getter();
  v8 = v14[0];
  v9 = v14[1];
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  *v7 = v8;
  v7[1] = v9;
  v7[2] = v10;
  swift_storeEnumTagMultiPayload();
  ContactsError.errorDescription.getter();
  v12 = v11;
  outlined destroy of ContactsError((uint64_t)v7);
  return v12;
}

uint64_t partial apply for implicit closure #1 in Slot<>.slotDescription.getter()
{
  uint64_t *v0;

  return implicit closure #1 in Slot<>.slotDescription.getter(v0[6], v0[2], v0[3]);
}

void specialized Slot<>.propertyName.getter(uint64_t a1, void (*a2)(_QWORD), uint64_t (*a3)(uint64_t), uint64_t (*a4)(void))
{
  id v4;
  id v5;

  v4 = specialized Slot<>.slotDescription.getter(a1, a2, a3, a4);
  v5 = objc_msgSend(v4, sel_facadePropertyName);

  if (v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_1_17();
    OUTLINED_FUNCTION_22_6();
  }
  else
  {
    __break(1u);
  }
}

void Slot<>.propertyName.getter(uint64_t a1, uint64_t a2)
{
  id v2;
  id v3;

  v2 = Slot<>.slotDescription.getter(a1, a2);
  v3 = objc_msgSend(v2, sel_facadePropertyName);

  if (v3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    OUTLINED_FUNCTION_1_17();
    OUTLINED_FUNCTION_22_6();
  }
  else
  {
    __break(1u);
  }
}

uint64_t dispatch thunk of static Slot.intentType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Slot.init(rawValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of Slot.propertyName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t static GetContactSlots.intentType.getter()
{
  return type metadata accessor for GetContactIntent();
}

SiriContactsIntents::GetContactSlots_optional __swiftcall GetContactSlots.init(rawValue:)(Swift::String rawValue)
{
  uint64_t countAndFlagsBits;
  Swift::OpaquePointer v2;
  SiriContactsIntents::GetContactSlots_optional result;

  countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._rawValue = &outlined read-only object #0 of GetContactSlots.init(rawValue:);
  OUTLINED_FUNCTION_82_3(v2, countAndFlagsBits);
  OUTLINED_FUNCTION_0_28();
  OUTLINED_FUNCTION_31_0();
  return result;
}

void *static GetContactSlots.allCases.getter()
{
  return &outlined read-only object #0 of static GetContactSlots.allCases.getter;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance GetContactSlots(unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance GetContactSlots()
{
  unsigned __int8 *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GetContactSlots(uint64_t a1)
{
  unsigned __int8 *v1;

  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance GetContactSlots(uint64_t a1)
{
  unsigned __int8 *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriContactsIntents::GetContactSlots_optional protocol witness for RawRepresentable.init(rawValue:) in conformance GetContactSlots@<W0>(Swift::String *a1@<X0>, SiriContactsIntents::GetContactSlots_optional *a2@<X8>)
{
  SiriContactsIntents::GetContactSlots_optional result;

  result.value = GetContactSlots.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance GetContactSlots(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;

  *a1 = GetContactSlots.rawValue.getter(*v1);
  a1[1] = v3;
  OUTLINED_FUNCTION_31_0();
}

SiriContactsIntents::GetContactSlots_optional protocol witness for Slot.init(rawValue:) in conformance GetContactSlots@<W0>(uint64_t a1@<X0>, SiriContactsIntents::GetContactSlots_optional *a2@<X8>)
{
  SiriContactsIntents::GetContactSlots_optional result;

  result.value = GetContactSlots.init(rawValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for Slot.propertyName.getter in conformance GetContactSlots()
{
  unsigned __int8 *v0;

  specialized Slot<>.propertyName.getter(*v0, (void (*)(_QWORD))type metadata accessor for GetContactIntent, (uint64_t (*)(uint64_t))GetContactSlots.rawValue.getter, partial apply for specialized implicit closure #1 in Slot<>.slotDescription.getter);
}

void protocol witness for static CaseIterable.allCases.getter in conformance GetContactSlots(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static GetContactSlots.allCases.getter;
}

uint64_t static GetContactAttributeSlots.intentType.getter()
{
  return type metadata accessor for GetContactAttributeIntent();
}

void *static GetContactAttributeSlots.allCases.getter()
{
  return &outlined read-only object #0 of static GetContactAttributeSlots.allCases.getter;
}

uint64_t GetContactAttributeSlots.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)j__OUTLINED_FUNCTION_6_32_0
                                                                     + 4 * byte_21FEDCB32[a1]))(0xD000000000000010, 0x800000021FEDF9A0);
}

uint64_t sub_21FE903B0()
{
  return OUTLINED_FUNCTION_14_25(0x6B63696Eu);
}

uint64_t sub_21FE90400()
{
  return 0x6374614D69726973;
}

uint64_t sub_21FE90420(uint64_t a1)
{
  return a1 + 5;
}

uint64_t sub_21FE90430(uint64_t a1)
{
  return a1 + 4;
}

void sub_21FE90440()
{
  JUMPOUT(0x21FE9044CLL);
}

void protocol witness for static Equatable.== infix(_:_:) in conformance GetContactAttributeSlots(unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance GetContactAttributeSlots()
{
  unsigned __int8 *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GetContactAttributeSlots(uint64_t a1)
{
  unsigned __int8 *v1;

  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance GetContactAttributeSlots(uint64_t a1)
{
  unsigned __int8 *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriContactsIntents::GetContactAttributeSlots_optional protocol witness for RawRepresentable.init(rawValue:) in conformance GetContactAttributeSlots@<W0>(Swift::String *a1@<X0>, SiriContactsIntents::GetContactAttributeSlots_optional *a2@<X8>)
{
  SiriContactsIntents::GetContactAttributeSlots_optional result;

  result.value = GetContactAttributeSlots.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance GetContactAttributeSlots(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;

  *a1 = GetContactAttributeSlots.rawValue.getter(*v1);
  a1[1] = v3;
  OUTLINED_FUNCTION_31_0();
}

uint64_t getEnumTagSinglePayload for GetContactAttributeSlots(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF2)
  {
    if (a2 + 14 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 14) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 15;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v5 = v6 - 15;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for GetContactAttributeSlots(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_21FE905A0 + 4 * byte_21FEDCB46[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_21FE905D4 + 4 * byte_21FEDCB41[v4]))();
}

uint64_t sub_21FE905D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE905DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FE905E4);
  return result;
}

uint64_t sub_21FE905F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FE905F8);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_21FE905FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE90604(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for GetContactAttributeSlots()
{
  OUTLINED_FUNCTION_34_11();
}

uint64_t getEnumTagSinglePayload for ModifyContactAttributeSlots(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 5) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v5 = v6 - 6;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ModifyContactAttributeSlots(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_21FE906F0 + 4 * byte_21FEDCB50[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_21FE90724 + 4 * byte_21FEDCB4B[v4]))();
}

uint64_t sub_21FE90724(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE9072C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FE90734);
  return result;
}

uint64_t sub_21FE90740(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FE90748);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_21FE9074C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE90754(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for ModifyContactAttributeSlots()
{
  OUTLINED_FUNCTION_34_11();
}

uint64_t getEnumTagSinglePayload for GetContactSlots(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF5)
  {
    if (a2 + 11 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 11) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 12;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v5 = v6 - 12;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for GetContactSlots(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_21FE90840 + 4 * byte_21FEDCB5A[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_21FE90874 + 4 * byte_21FEDCB55[v4]))();
}

uint64_t sub_21FE90874(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE9087C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21FE90884);
  return result;
}

uint64_t sub_21FE90890(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21FE90898);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_21FE9089C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21FE908A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for GetContactSlots()
{
  OUTLINED_FUNCTION_34_11();
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in GetContactSlots()
{
  return lazy protocol witness table accessor for type [GetContactSlots] and conformance [A](&lazy protocol witness table cache variable for type [GetContactSlots] and conformance [A], &demangling cache variable for type metadata for [GetContactSlots]);
}

unint64_t lazy protocol witness table accessor for type GetContactSlots and conformance GetContactSlots()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GetContactSlots and conformance GetContactSlots;
  if (!lazy protocol witness table cache variable for type GetContactSlots and conformance GetContactSlots)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for GetContactSlots, &type metadata for GetContactSlots);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GetContactSlots and conformance GetContactSlots);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in ModifyContactAttributeSlots()
{
  return lazy protocol witness table accessor for type [GetContactSlots] and conformance [A](&lazy protocol witness table cache variable for type [ModifyContactAttributeSlots] and conformance [A], &demangling cache variable for type metadata for [ModifyContactAttributeSlots]);
}

SiriContactsIntents::GetContactAttributeSlots_optional protocol witness for Slot.init(rawValue:) in conformance GetContactAttributeSlots@<W0>(uint64_t a1@<X0>, SiriContactsIntents::GetContactAttributeSlots_optional *a2@<X8>)
{
  SiriContactsIntents::GetContactAttributeSlots_optional result;

  result.value = GetContactAttributeSlots.init(rawValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for Slot.propertyName.getter in conformance GetContactAttributeSlots()
{
  unsigned __int8 *v0;

  specialized Slot<>.propertyName.getter(*v0, (void (*)(_QWORD))type metadata accessor for GetContactAttributeIntent, (uint64_t (*)(uint64_t))GetContactAttributeSlots.rawValue.getter, partial apply for specialized implicit closure #1 in Slot<>.slotDescription.getter);
}

void protocol witness for static CaseIterable.allCases.getter in conformance GetContactAttributeSlots(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static GetContactAttributeSlots.allCases.getter;
}

uint64_t static ModifyContactAttributeSlots.intentType.getter()
{
  return type metadata accessor for ModifyContactAttributeIntent();
}

void *static ModifyContactAttributeSlots.allCases.getter()
{
  return &outlined read-only object #0 of static ModifyContactAttributeSlots.allCases.getter;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance ModifyContactAttributeSlots(unsigned __int8 *a1, unsigned __int8 *a2)
{
  specialized == infix<A>(_:_:)(*a1, *a2);
}

void protocol witness for Hashable.hashValue.getter in conformance ModifyContactAttributeSlots()
{
  unsigned __int8 *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ModifyContactAttributeSlots(uint64_t a1)
{
  unsigned __int8 *v1;

  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance ModifyContactAttributeSlots(uint64_t a1)
{
  unsigned __int8 *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriContactsIntents::ModifyContactAttributeSlots_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ModifyContactAttributeSlots@<W0>(Swift::String *a1@<X0>, SiriContactsIntents::ModifyContactAttributeSlots_optional *a2@<X8>)
{
  SiriContactsIntents::ModifyContactAttributeSlots_optional result;

  result.value = ModifyContactAttributeSlots.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ModifyContactAttributeSlots(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;

  *a1 = ModifyContactAttributeSlots.rawValue.getter(*v1);
  a1[1] = v3;
  OUTLINED_FUNCTION_31_0();
}

SiriContactsIntents::ModifyContactAttributeSlots_optional protocol witness for Slot.init(rawValue:) in conformance ModifyContactAttributeSlots@<W0>(uint64_t a1@<X0>, SiriContactsIntents::ModifyContactAttributeSlots_optional *a2@<X8>)
{
  SiriContactsIntents::ModifyContactAttributeSlots_optional result;

  result.value = ModifyContactAttributeSlots.init(rawValue:)(*(Swift::String *)&a1).value;
  a2->value = result.value;
  return result;
}

void protocol witness for Slot.propertyName.getter in conformance ModifyContactAttributeSlots()
{
  unsigned __int8 *v0;

  specialized Slot<>.propertyName.getter(*v0, (void (*)(_QWORD))type metadata accessor for ModifyContactAttributeIntent, (uint64_t (*)(uint64_t))ModifyContactAttributeSlots.rawValue.getter, partial apply for specialized implicit closure #1 in Slot<>.slotDescription.getter);
}

void protocol witness for static CaseIterable.allCases.getter in conformance ModifyContactAttributeSlots(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static ModifyContactAttributeSlots.allCases.getter;
}

unint64_t lazy protocol witness table accessor for type ModifyContactAttributeSlots and conformance ModifyContactAttributeSlots()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ModifyContactAttributeSlots and conformance ModifyContactAttributeSlots;
  if (!lazy protocol witness table cache variable for type ModifyContactAttributeSlots and conformance ModifyContactAttributeSlots)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for ModifyContactAttributeSlots, &type metadata for ModifyContactAttributeSlots);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifyContactAttributeSlots and conformance ModifyContactAttributeSlots);
  }
  return result;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in GetContactAttributeSlots()
{
  return lazy protocol witness table accessor for type [GetContactSlots] and conformance [A](&lazy protocol witness table cache variable for type [GetContactAttributeSlots] and conformance [A], &demangling cache variable for type metadata for [GetContactAttributeSlots]);
}

uint64_t lazy protocol witness table accessor for type [GetContactSlots] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x2207D86A8](MEMORY[0x24BEE12E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GetContactAttributeSlots and conformance GetContactAttributeSlots()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type GetContactAttributeSlots and conformance GetContactAttributeSlots;
  if (!lazy protocol witness table cache variable for type GetContactAttributeSlots and conformance GetContactAttributeSlots)
  {
    result = MEMORY[0x2207D86A8](&protocol conformance descriptor for GetContactAttributeSlots, &type metadata for GetContactAttributeSlots);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GetContactAttributeSlots and conformance GetContactAttributeSlots);
  }
  return result;
}

uint64_t partial apply for specialized implicit closure #1 in Slot<>.slotDescription.getter()
{
  uint64_t v0;

  return specialized implicit closure #1 in Slot<>.slotDescription.getter(*(unsigned __int8 **)(v0 + 16), (uint64_t (*)(_QWORD))GetContactSlots.rawValue.getter, static GetContactSlots.intentType.getter);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in Slot<>.slotDescription.getter(*(unsigned __int8 **)(v0 + 16), (uint64_t (*)(_QWORD))ModifyContactAttributeSlots.rawValue.getter, static ModifyContactAttributeSlots.intentType.getter);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in Slot<>.slotDescription.getter(*(unsigned __int8 **)(v0 + 16), (uint64_t (*)(_QWORD))GetContactAttributeSlots.rawValue.getter, static GetContactAttributeSlots.intentType.getter);
}

uint64_t specialized implicit closure #1 in Slot<>.slotDescription.getter(unsigned __int8 *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(void))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v6 = type metadata accessor for ContactsError();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (uint64_t *)((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = a2(*a1);
  v11 = v10;
  v12 = a3();
  *v8 = v9;
  v8[1] = v11;
  v8[2] = v12;
  swift_storeEnumTagMultiPayload();
  ContactsError.errorDescription.getter();
  v14 = v13;
  outlined destroy of ContactsError((uint64_t)v8);
  return v14;
}

uint64_t OUTLINED_FUNCTION_0_40()
{
  return 0x52746361746E6F63;
}

uint64_t OUTLINED_FUNCTION_1_38()
{
  return 0x6464416C69616D65;
}

uint64_t OUTLINED_FUNCTION_2_42()
{
  return 0x6D754E656E6F6870;
}

uint64_t OUTLINED_FUNCTION_3_25()
{
  return 0x614E656C6464696DLL;
}

uint64_t OUTLINED_FUNCTION_4_32()
{
  return 0x6D614E7473726966;
}

uint64_t OUTLINED_FUNCTION_6_32()
{
  return 1699574633;
}

void OUTLINED_FUNCTION_7_29(uint64_t (*a1)(void))
{
  fatalError(_:file:line:)(a1);
}

uint64_t OUTLINED_FUNCTION_14_25(unsigned int a1)
{
  return a1 | 0x656D614E00000000;
}

id GetContactAttributeIntentHandler.__allocating_init(contactService:contactResolver:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  objc_class *v3;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  id v21;
  uint64_t v23;

  v3 = v2;
  v6 = objc_allocWithZone(v3);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = OUTLINED_FUNCTION_55_11();
  v11 = __swift_mutable_project_boxed_opaque_existential_1(v9, v10);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v14 + 16))(v13);
  v15 = *(_QWORD *)(a2 + 24);
  v16 = *(_QWORD *)(a2 + 32);
  v17 = __swift_mutable_project_boxed_opaque_existential_1(a2, v15);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v20 + 16))(v19);
  v21 = specialized GetContactAttributeIntentHandler.init(contactService:contactResolver:)((uint64_t)v13, (uint64_t)v19, v6, v7, v15, v8, v16);
  __swift_destroy_boxed_opaque_existential_0(a2);
  __swift_destroy_boxed_opaque_existential_0(a1);
  return v21;
}

uint64_t GetContactAttributeIntentHandler.resolveSiriMatches(for:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = OUTLINED_FUNCTION_78_3();
  v2[5] = OUTLINED_FUNCTION_22_3();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t GetContactAttributeIntentHandler.resolveSiriMatches(for:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);

  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v2 = v0[4];
  v1 = v0[5];
  v3 = (void *)v0[2];
  v4 = (id)static Signpost.contactsLog;
  OUTLINED_FUNCTION_48_10();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_24_24();
  v5 = v1 + *(int *)(v2 + 20);
  *(_QWORD *)v5 = "ResolveSiriMatchesGetContactAttribute";
  *(_QWORD *)(v5 + 8) = 37;
  *(_BYTE *)(v5 + 16) = 2;
  specialized BaseIntentHandler.resolveSiriMatches(for:)(v3);
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_24_24();
  outlined destroy of Signpost.OpenSignpost(v1);
  swift_task_dealloc();
  v6 = OUTLINED_FUNCTION_43_12();
  return v7(v6);
}

uint64_t @objc GetContactAttributeIntentHandler.resolveSiriMatches(for:)(void *a1, int a2, void *a3, void *a4)
{
  return @objc GetContactAttributeIntentHandler.resolveSiriMatches(for:)(a1, a2, a3, a4, (uint64_t)&unk_24E5BF968, (uint64_t)&async function pointer to partial apply for @objc closure #1 in GetContactAttributeIntentHandler.resolveSiriMatches(for:));
}

uint64_t @objc closure #1 in GetContactAttributeIntentHandler.resolveSiriMatches(for:)(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  id v6;
  _QWORD *v7;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = a1;
  a3;
  v7 = (_QWORD *)swift_task_alloc();
  v3[5] = v7;
  *v7 = v3;
  v7[1] = @objc closure #1 in GetContactAttributeIntentHandler.resolveSiriMatches(for:);
  return GetContactAttributeIntentHandler.resolveSiriMatches(for:)((uint64_t)v6);
}

uint64_t @objc closure #1 in GetContactAttributeIntentHandler.resolveSiriMatches(for:)()
{
  void *v0;
  uint64_t v1;
  void *v2;

  OUTLINED_FUNCTION_2_34();

  type metadata accessor for GetContactAttributeSiriMatchesResolutionResult();
  OUTLINED_FUNCTION_21_13();
  OUTLINED_FUNCTION_59_2();
  OUTLINED_FUNCTION_39_11();

  OUTLINED_FUNCTION_56_11();
  return OUTLINED_FUNCTION_31_5(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t GetContactAttributeIntentHandler.resolveContactAttributeToGet(for:)(uint64_t a1)
{
  _QWORD *v1;

  v1[6] = a1;
  v1[7] = OUTLINED_FUNCTION_78_3();
  v1[8] = OUTLINED_FUNCTION_22_3();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t GetContactAttributeIntentHandler.resolveContactAttributeToGet(for:)()
{
  _QWORD *v0;
  os_log_type_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  os_log_type_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v2 = v0[6];
  v4 = v0[7];
  v3 = v0[8];
  v5 = (id)static Signpost.contactsLog;
  OUTLINED_FUNCTION_48_10();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v6 = v3 + *(int *)(v4 + 20);
  *(_QWORD *)v6 = "ResolveContactAttributeToGet";
  *(_QWORD *)(v6 + 8) = 28;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = -[NSObject contactAttributeToGet](v2, sel_contactAttributeToGet);
  if (v7)
  {
    v8 = v7;
    if (objc_msgSend(v7, sel_contactAttributeType))
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v9 = OUTLINED_FUNCTION_26();
      __swift_project_value_buffer(v9, (uint64_t)static Logger.siriContacts);
      v10 = v8;
      Logger.logObject.getter();
      v11 = OUTLINED_FUNCTION_58_9();
      if (os_log_type_enabled((os_log_t)v4, v11))
      {
        v12 = OUTLINED_FUNCTION_1();
        v26 = (_QWORD *)OUTLINED_FUNCTION_1();
        v27 = OUTLINED_FUNCTION_1();
        v28 = v27;
        *(_DWORD *)v12 = 136315394;
        v0[3] = OUTLINED_FUNCTION_5_24(v27, 0x800000021FEE0A00, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v12 + 12) = 2112;
        v0[4] = v10;
        v13 = v10;
        OUTLINED_FUNCTION_86_2();
        *v26 = v8;

        _os_log_impl(&dword_21FE16000, (os_log_t)v4, v11, "[%s] Resolved desired contact attribute: %@", (uint8_t *)v12, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        OUTLINED_FUNCTION_16();
        OUTLINED_FUNCTION_0();
      }

      OUTLINED_FUNCTION_59_11();
      static ContactAttributeResolutionResult.success(with:)();

    }
    else
    {
      if (one-time initialization token for siriContacts != -1)
        swift_once();
      v18 = OUTLINED_FUNCTION_26();
      OUTLINED_FUNCTION_10_1(v18, (uint64_t)static Logger.siriContacts);
      v19 = OUTLINED_FUNCTION_8();
      if (OUTLINED_FUNCTION_42(v19))
      {
        v20 = (uint8_t *)OUTLINED_FUNCTION_1();
        v21 = OUTLINED_FUNCTION_1();
        *(_DWORD *)v20 = 136315138;
        v28 = v21;
        v0[5] = OUTLINED_FUNCTION_5_24(v21, 0x800000021FEE0A00, &v28);
        OUTLINED_FUNCTION_86_2();
        OUTLINED_FUNCTION_43_0(&dword_21FE16000, v2, v1, "[%s] Returning unsupported invalidAttribute for contactAttributeToGet", v20);
        OUTLINED_FUNCTION_16();
        OUTLINED_FUNCTION_0();
      }

      OUTLINED_FUNCTION_59_11();
      static GetContactAttributeSiriMatchesResolutionResult.unsupported(forReason:)(3);

    }
  }
  else
  {
    if (one-time initialization token for siriContacts != -1)
      swift_once();
    v14 = OUTLINED_FUNCTION_26();
    OUTLINED_FUNCTION_10_1(v14, (uint64_t)static Logger.siriContacts);
    v15 = OUTLINED_FUNCTION_8();
    if (OUTLINED_FUNCTION_42(v15))
    {
      v16 = (uint8_t *)OUTLINED_FUNCTION_1();
      v17 = OUTLINED_FUNCTION_1();
      v28 = v17;
      *(_DWORD *)v16 = 136315138;
      v0[2] = OUTLINED_FUNCTION_5_24(v17, 0x800000021FEE0A00, &v28);
      OUTLINED_FUNCTION_30_16();
      OUTLINED_FUNCTION_43_0(&dword_21FE16000, v2, v1, "[%s] Returning needsValue for contactAttributeToGet", v16);
      OUTLINED_FUNCTION_16();
      OUTLINED_FUNCTION_0();
    }

    OUTLINED_FUNCTION_59_11();
    objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_needsValue);
  }
  v22 = v0[8];
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  outlined destroy of Signpost.OpenSignpost(v22);
  swift_task_dealloc();
  v23 = OUTLINED_FUNCTION_43_12();
  return v24(v23);
}

uint64_t @objc GetContactAttributeIntentHandler.resolveContactAttributeToGet(for:)(void *a1, int a2, void *a3, void *a4)
{
  return @objc GetContactAttributeIntentHandler.resolveSiriMatches(for:)(a1, a2, a3, a4, (uint64_t)&unk_24E5BF940, (uint64_t)&async function pointer to partial apply for @objc closure #1 in GetContactAttributeIntentHandler.resolveContactAttributeToGet(for:));
}

uint64_t @objc closure #1 in GetContactAttributeIntentHandler.resolveContactAttributeToGet(for:)(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  id v6;
  id v7;
  _QWORD *v8;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = a1;
  v7 = a3;
  v8 = (_QWORD *)swift_task_alloc();
  v3[5] = v8;
  *v8 = v3;
  v8[1] = @objc closure #1 in GetContactAttributeIntentHandler.resolveContactAttributeToGet(for:);
  return GetContactAttributeIntentHandler.resolveContactAttributeToGet(for:)((uint64_t)v6);
}

uint64_t @objc closure #1 in GetContactAttributeIntentHandler.resolveContactAttributeToGet(for:)()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;

  OUTLINED_FUNCTION_2_34();

  (*(void (**)(uint64_t, void *))(v0 + 16))(v0, v1);
  OUTLINED_FUNCTION_56_11();

  return OUTLINED_FUNCTION_31_5(*(uint64_t (**)(void))(v3 + 8));
}

uint64_t GetContactAttributeIntentHandler.resolveContactHandleMatches(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = v1;
  return OUTLINED_FUNCTION_4_3();
}

#error "21FE917D4: call analysis failed (funcsize=406)"

uint64_t @objc GetContactAttributeIntentHandler.resolveContactHandleMatches(for:)(void *a1, int a2, void *a3, void *a4)
{
  return @objc GetContactAttributeIntentHandler.resolveSiriMatches(for:)(a1, a2, a3, a4, (uint64_t)&unk_24E5BF918, (uint64_t)&async function pointer to partial apply for @objc closure #1 in GetContactAttributeIntentHandler.resolveContactHandleMatches(for:));
}

uint64_t @objc closure #1 in GetContactAttributeIntentHandler.resolveContactHandleMatches(for:)(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  id v6;
  _QWORD *v7;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = a1;
  a3;
  v7 = (_QWORD *)swift_task_alloc();
  v3[5] = v7;
  *v7 = v3;
  v7[1] = @objc closure #1 in GetContactAttributeIntentHandler.resolveContactHandleMatches(for:);
  return GetContactAttributeIntentHandler.resolveContactHandleMatches(for:)((uint64_t)v6);
}

uint64_t @objc closure #1 in GetContactAttributeIntentHandler.resolveContactHandleMatches(for:)()
{
  void *v0;
  uint64_t v1;
  void *v2;

  OUTLINED_FUNCTION_2_34();

  OUTLINED_FUNCTION_18_21();
  OUTLINED_FUNCTION_21_13();
  OUTLINED_FUNCTION_59_2();
  OUTLINED_FUNCTION_39_11();

  OUTLINED_FUNCTION_56_11();
  return OUTLINED_FUNCTION_31_5(*(uint64_t (**)(void))(v1 + 8));
}

uint64_t GetContactAttributeIntentHandler.resolveContactHandleAlternatives(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 56) = a1;
  *(_QWORD *)(v2 + 64) = v1;
  return OUTLINED_FUNCTION_4_3();
}

#error "21FE92068: call analysis failed (funcsize=482)"

uint64_t @objc GetContactAttributeIntentHandler.resolveContactHandleAlternatives(for:)(void *a1, int a2, void *a3, void *a4)
{
  return @objc GetContactAttributeIntentHandler.resolveSiriMatches(for:)(a1, a2, a3, a4, (uint64_t)&unk_24E5BF8F0, (uint64_t)&async function pointer to partial apply for @objc closure #1 in GetContactAttributeIntentHandler.resolveContactHandleAlternatives(for:));
}

uint64_t @objc closure #1 in GetContactAttributeIntentHandler.resolveContactHandleAlternatives(for:)(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  id v6;
  _QWORD *v7;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = a1;
  a3;
  v7 = (_QWORD *)swift_task_alloc();
  v3[5] = v7;
  *v7 = v3;
  v7[1] = @objc closure #1 in GetContactAttributeIntentHandler.resolveContactHandleAlternatives(for:);
  return GetContactAttributeIntentHandler.resolveContactHandleAlternatives(for:)((uint64_t)v6);
}

uint64_t GetContactAttributeIntentHandler.confirm(intent:)()
{
  return OUTLINED_FUNCTION_4_3();
}

{
  uint64_t v0;
  char *v1;

  objc_allocWithZone((Class)type metadata accessor for GetContactAttributeIntentResponse());
  v1 = GetContactAttributeIntentResponse.init(code:userActivity:)(4, 0);
  return (*(uint64_t (**)(char *))(v0 + 8))(v1);
}

uint64_t @objc GetContactAttributeIntentHandler.confirm(intent:)(void *a1, int a2, void *a3, void *a4)
{
  return @objc GetContactAttributeIntentHandler.resolveSiriMatches(for:)(a1, a2, a3, a4, (uint64_t)&unk_24E5BF8C8, (uint64_t)&async function pointer to partial apply for @objc closure #1 in GetContactAttributeIntentHandler.confirm(intent:));
}

uint64_t @objc closure #1 in GetContactAttributeIntentHandler.confirm(intent:)(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  id v6;
  id v7;
  _QWORD *v8;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = a1;
  v7 = a3;
  v8 = (_QWORD *)swift_task_alloc();
  v3[5] = v8;
  *v8 = v3;
  v8[1] = @objc closure #1 in GetContactAttributeIntentHandler.confirm(intent:);
  return GetContactAttributeIntentHandler.confirm(intent:)();
}

uint64_t GetContactAttributeIntentHandler.handle(intent:)(uint64_t a1)
{
  _QWORD *v1;

  v1[4] = a1;
  v1[5] = OUTLINED_FUNCTION_78_3();
  v1[6] = OUTLINED_FUNCTION_22_3();
  return OUTLINED_FUNCTION_8_0();
}

uint64_t GetContactAttributeIntentHandler.handle(intent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  NSObject *v33;
  id v34;
  os_log_type_t v35;
  _BOOL4 v36;
  void *v37;
  uint64_t v38;
  id v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(void);
  _QWORD *v58;
  uint64_t v59;

  OUTLINED_FUNCTION_52_0();
  a23 = v25;
  a24 = v26;
  a22 = v24;
  if (one-time initialization token for contactsLog != -1)
    swift_once();
  v28 = *(_QWORD *)(v24 + 40);
  v27 = *(_QWORD *)(v24 + 48);
  v29 = (id)static Signpost.contactsLog;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v30 = v27 + *(int *)(v28 + 20);
  *(_QWORD *)v30 = "HandleGetContactAttribute";
  *(_QWORD *)(v30 + 8) = 25;
  *(_BYTE *)(v30 + 16) = 2;
  if (one-time initialization token for siriContacts != -1)
    swift_once();
  v31 = *(void **)(v24 + 32);
  v32 = OUTLINED_FUNCTION_26();
  v33 = __swift_project_value_buffer(v32, (uint64_t)static Logger.siriContacts);
  v34 = v31;
  Logger.logObject.getter();
  v35 = OUTLINED_FUNCTION_8();
  v36 = OUTLINED_FUNCTION_42(v35);
  v37 = *(void **)(v24 + 32);
  if (v36)
  {
    v38 = OUTLINED_FUNCTION_1();
    v58 = (_QWORD *)OUTLINED_FUNCTION_1();
    v59 = OUTLINED_FUNCTION_1();
    a13 = v59;
    *(_DWORD *)v38 = 136315394;
    *(_QWORD *)(v24 + 16) = OUTLINED_FUNCTION_5_24(v59, 0x800000021FEE0A00, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v38 + 12) = 2112;
    *(_QWORD *)(v24 + 24) = v37;
    v39 = v37;
    OUTLINED_FUNCTION_61_8();
    *v58 = v37;

    _os_log_impl(&dword_21FE16000, v33, OS_LOG_TYPE_FAULT|0x8, "[%s] Handling intent: %@", (uint8_t *)v38, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    OUTLINED_FUNCTION_16();
    OUTLINED_FUNCTION_0();
  }

  outlined bridged method (pb) of @objc GetContactIntent.siriMatches.getter(*(void **)(v24 + 32));
  if (!v40)
  {
    v45 = 0;
LABEL_26:
    v55 = *(_QWORD *)(v24 + 48);
    type metadata accessor for GetContactAttributeIntentResponse();
    GetContactAttributeIntentResponse.__allocating_init(contactIdentifiers:code:)(v45, 4);
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    outlined destroy of Signpost.OpenSignpost(v55);
    swift_task_dealloc();
    v56 = OUTLINED_FUNCTION_43_12();
    return OUTLINED_FUNCTION_6_33(v56, v57);
  }
  v41 = v40;
  if (!(v40 >> 62))
  {
    v42 = *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v42)
      goto LABEL_10;
LABEL_24:
    v45 = MEMORY[0x24BEE4AF8];
LABEL_25:
    swift_bridgeObjectRelease_n();
    goto LABEL_26;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v42 = result;
  if (!result)
    goto LABEL_24;
LABEL_10:
  if (v42 >= 1)
  {
    v44 = 0;
    v45 = MEMORY[0x24BEE4AF8];
    do
    {
      if ((v41 & 0xC000000000000001) != 0)
        OUTLINED_FUNCTION_62_5();
      v46 = OUTLINED_FUNCTION_53_5(v41 + 8 * v44);
      v47 = outlined bridged method (pb) of @objc INObject.identifier.getter(v46);
      v49 = v48;

      if (v49)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_7_23(0, *(_QWORD *)(v45 + 16) + 1);
          v45 = v53;
        }
        v51 = *(_QWORD *)(v45 + 16);
        v50 = *(_QWORD *)(v45 + 24);
        if (v51 >= v50 >> 1)
        {
          OUTLINED_FUNCTION_7_23(v50 > 1, v51 + 1);
          v45 = v54;
        }
        *(_QWORD *)(v45 + 16) = v51 + 1;
        v52 = v45 + 16 * v51;
        *(_QWORD *)(v52 + 32) = v47;
        *(_QWORD *)(v52 + 40) = v49;
      }
      ++v44;
    }
    while (v42 != v44);
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t @objc GetContactAttributeIntentHandler.handle(intent:)(void *a1, int a2, void *a3, void *a4)
{
  return @objc GetContactAttributeIntentHandler.resolveSiriMatches(for:)(a1, a2, a3, a4, (uint64_t)&unk_24E5BF8A0, (uint64_t)&async function pointer to partial apply for @objc closure #1 in GetContactAttributeIntentHandler.handle(intent:));
}

uint64_t @objc GetContactAttributeIntentHandler.resolveSiriMatches(for:)(void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6)
{
  void *v9;
  _QWORD *v10;
  id v11;
  id v12;

  v9 = _Block_copy(aBlock);
  v10 = (_QWORD *)OUTLINED_FUNCTION_55();
  v10[2] = a3;
  v10[3] = v9;
  v10[4] = a1;
  v11 = a3;
  v12 = a1;
  return _runTaskForBridgedAsyncMethod(_:)(a6, (uint64_t)v10);
}

uint64_t @objc closure #1 in GetContactAttributeIntentHandler.handle(intent:)(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  id v6;
  id v7;
  _QWORD *v8;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = a1;
  v7 = a3;
  v8 = (_QWORD *)swift_task_alloc();
  v3[5] = v8;
  *v8 = v3;
  v8[1] = @objc closure #1 in GetContactAttributeIntentHandler.confirm(intent:);
  return GetContactAttributeIntentHandler.handle(intent:)((uint64_t)v6);
}

uint64_t GetContactAttributeIntentHandler.getMatches(contactAttribute:contact:)(void *a1, uint64_t a2)
{
  return GetContactAttributeIntentHandler.getMatches(contactAttribute:contact:)(a1, a2, (uint64_t (*)(uint64_t))Array<A>.matchingHandles(for:), (uint64_t (*)(uint64_t))Array<A>.matchingHandles(for:), (uint64_t (*)(uint64_t))Array<A>.matchingHandles(for:));
}

uint64_t GetContactAttributeIntentHandler.getAlternatives(contactAttribute:contact:)(void *a1, uint64_t a2)
{
  return GetContactAttributeIntentHandler.getMatches(contactAttribute:contact:)(a1, a2, (uint64_t (*)(uint64_t))Array<A>.alternativeHandles(for:), (uint64_t (*)(uint64_t))Array<A>.alternativeHandles(for:), (uint64_t (*)(uint64_t))Array<A>.alternativeHandles(for:));
}

uint64_t GetContactAttributeIntentHandler.getMatches(contactAttribute:contact:)(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;

  v8 = objc_msgSend(a1, sel_contactAttributeType);
  if (v8 == (id)1)
  {
    v12 = OUTLINED_FUNCTION_8_7(1, sel_emailAddresses);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
    OUTLINED_FUNCTION_58_6();

    v13 = OUTLINED_FUNCTION_55_11();
    v11 = a4(v13);
  }
  else if (v8 == (id)3)
  {
    v14 = OUTLINED_FUNCTION_8_7(3, sel_postalAddresses);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
    OUTLINED_FUNCTION_58_6();

    v15 = OUTLINED_FUNCTION_55_11();
    v11 = a5(v15);
  }
  else
  {
    if (v8 != (id)2)
      return 0;
    v9 = OUTLINED_FUNCTION_8_7(2, sel_phoneNumbers);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CNLabeledValue);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v10 = OUTLINED_FUNCTION_55_11();
    v11 = a3(v10);
  }
  v16 = v11;
  swift_bridgeObjectRelease();
  return v16;
}

id GetContactAttributeIntentHandler.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GetContactAttributeIntentHandler();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for GetContactAttributeIntentHandler()
{
  uint64_t result;

  result = type metadata singleton initialization cache for GetContactAttributeIntentHandler;
  if (!type metadata singleton initialization cache for GetContactAttributeIntentHandler)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t ObjC metadata update function for GetContactAttributeIntentHandler()
{
  return type metadata accessor for GetContactAttributeIntentHandler();
}

uint64_t outlined bridged method (pb) of @objc INObject.identifier.getter(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_identifier);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t outlined bridged method (pb) of @objc GetContactAttributeIntent.contactHandleMatches.getter(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, sel_contactHandleMatches);
  if (!v1)
    return 0;
  v2 = v1;
  type metadata accessor for ContactAttribute();
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void outlined bridged method (mbgnn) of @objc GetContactAttributeIntent.contactHandleMatches.setter(uint64_t a1, void *a2, SEL *a3)
{
  Class isa;

  type metadata accessor for ContactAttribute();
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a2, *a3, isa);

}

uint64_t partial apply for @objc closure #1 in GetContactAttributeIntentHandler.handle(intent:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  OUTLINED_FUNCTION_36_11();
  v1 = (_QWORD *)OUTLINED_FUNCTION_9_20();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_1_33(v1, (uint64_t)ContactsLabelCATs.address());
  return OUTLINED_FUNCTION_0_32(v2, v3, v4, v5);
}

uint64_t partial apply for @objc closure #1 in GetContactAttributeIntentHandler.confirm(intent:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  OUTLINED_FUNCTION_36_11();
  v1 = (_QWORD *)OUTLINED_FUNCTION_9_20();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_1_33(v1, (uint64_t)ContactsLabelCATs.address());
  return OUTLINED_FUNCTION_0_32(v2, v3, v4, v5);
}

uint64_t partial apply for @objc closure #1 in GetContactAttributeIntentHandler.resolveContactHandleAlternatives(for:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  OUTLINED_FUNCTION_36_11();
  v1 = (_QWORD *)OUTLINED_FUNCTION_9_20();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_1_33(v1, (uint64_t)ContactsLabelCATs.address());
  return OUTLINED_FUNCTION_0_32(v2, v3, v4, v5);
}

uint64_t partial apply for @objc closure #1 in GetContactAttributeIntentHandler.resolveContactHandleMatches(for:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  OUTLINED_FUNCTION_36_11();
  v1 = (_QWORD *)OUTLINED_FUNCTION_9_20();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_1_33(v1, (uint64_t)ContactsLabelCATs.address());
  return OUTLINED_FUNCTION_0_32(v2, v3, v4, v5);
}

uint64_t partial apply for @objc closure #1 in GetContactAttributeIntentHandler.resolveContactAttributeToGet(for:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  OUTLINED_FUNCTION_36_11();
  v1 = (_QWORD *)OUTLINED_FUNCTION_9_20();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_1_33(v1, (uint64_t)ContactsLabelCATs.address());
  return OUTLINED_FUNCTION_0_32(v2, v3, v4, v5);
}

uint64_t partial apply for @objc closure #1 in GetContactAttributeIntentHandler.resolveSiriMatches(for:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);

  OUTLINED_FUNCTION_36_11();
  v1 = (_QWORD *)OUTLINED_FUNCTION_9_20();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = OUTLINED_FUNCTION_1_33(v1, (uint64_t)ContactsLabelCATs.email());
  return OUTLINED_FUNCTION_0_32(v2, v3, v4, v5);
}

id specialized GetContactAttributeIntentHandler.init(contactService:contactResolver:)(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  id v23;
  uint64_t v25;
  uint64_t v26;

  v26 = a7;
  v12 = *(_QWORD *)(a5 - 8);
  v13 = MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v13);
  v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v25 - v21;
  (*(void (**)(char *))(v17 + 32))((char *)&v25 - v21);
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v22, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, a5);
  v23 = specialized BaseIntentHandler.init(contactService:contactResolver:)((uint64_t)v20, (uint64_t)v15, a3, a4, a5, a6, v26);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a2, a5);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v22, a4);
  return v23;
}

uint64_t OUTLINED_FUNCTION_1_39@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, (a1 - 32) | 0x8000000000000000, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_5_24(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, a2, a3);
}

uint64_t OUTLINED_FUNCTION_6_33(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t OUTLINED_FUNCTION_11_23(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return type metadata accessor for ContactAttributeResolutionResult();
}

uint64_t OUTLINED_FUNCTION_17_18(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = a1;
  return specialized Array._endMutation()();
}

uint64_t OUTLINED_FUNCTION_18_21()
{
  return type metadata accessor for ContactAttributeResolutionResult();
}

uint64_t OUTLINED_FUNCTION_22_17()
{
  return specialized Array._endMutation()();
}

uint64_t OUTLINED_FUNCTION_23_22(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = a1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_24_24()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OUTLINED_FUNCTION_28_14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = a1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_29_20(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_32_15(uint64_t a1)
{
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (a1 & 0xC000000000000001) == 0, a1);
}

BOOL OUTLINED_FUNCTION_37_14(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

void OUTLINED_FUNCTION_38_11(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t OUTLINED_FUNCTION_39_11()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 16))(v0, v1);
}

uint64_t OUTLINED_FUNCTION_41_10()
{
  return specialized SiriKitContactIntent.me.getter();
}

uint64_t OUTLINED_FUNCTION_43_12()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_44_11(uint64_t a1, void *a2, SEL *a3)
{
  uint64_t v3;

  outlined bridged method (mbgnn) of @objc GetContactAttributeIntent.contactHandleMatches.setter(v3, a2, a3);
}

uint64_t OUTLINED_FUNCTION_46_11()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_48_10()
{
  return OSSignpostID.init(log:)();
}

void OUTLINED_FUNCTION_50_12()
{
  JUMPOUT(0x2207D80C0);
}

void OUTLINED_FUNCTION_54_10(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t OUTLINED_FUNCTION_55_11()
{
  uint64_t v0;

  return v0;
}

void OUTLINED_FUNCTION_56_11()
{
  const void *v0;

  _Block_release(v0);
}

uint64_t OUTLINED_FUNCTION_58_9()
{
  return static os_log_type_t.debug.getter();
}

uint64_t OUTLINED_FUNCTION_59_11()
{
  return type metadata accessor for GetContactAttributeContactAttributeToGetResolutionResult();
}

uint64_t OUTLINED_FUNCTION_61_8()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_62_12()
{
  unint64_t v0;

  static ContactAttributeResolutionResult.disambiguation(with:)(v0);
}

uint64_t ContactsAddressHandle.Builder.withAddressLabel(print:speak:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpeakableString?);
  OUTLINED_FUNCTION_28();
  v2 = MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v10 - v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  SpeakableString.init(print:speak:)();
  v7 = type metadata accessor for SpeakableString();
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v7);
  outlined init with take of SpeakableString?((uint64_t)v6, (uint64_t)v4);
  v8 = v0 + OBJC_IVAR____TtCC19SiriContactsIntents21ContactsAddressHandle7Builder_addressLabel;
  swift_beginAccess();
  outlined assign with take of SpeakableString?((uint64_t)v4, v8);
  swift_endAccess();
  return swift_retain();
}

