uint64_t _VCNACKGenerator_GetBitrate(uint64_t a1, double *a2, double *a3, float a4)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;

  v5 = a1 + 305464;
  v6 = *(double *)(a1 + 305464);
  v7 = v6 - a4;
  if (v6 == 0.0)
    v8 = 0.0;
  else
    v8 = v7;
  if (!a3)
  {
    v9 = 0;
    if (!a2)
      return v9;
    goto LABEL_9;
  }
  v9 = _VCNACKConsumer_ComputeSummerBitrate(*(_QWORD *)(a1 + 305488), a3, v8);
  if ((v9 & 0x80000000) == 0)
  {
    if (!a2)
      return v9;
LABEL_9:
    v9 = _VCNACKConsumer_ComputeSummerBitrate(*(_QWORD *)(v5 + 16), a2, v8);
    if ((v9 & 0x80000000) != 0 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        _VCNACKGenerator_GetBitrate_cold_1();
    }
    return v9;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      _VCNACKGenerator_GetBitrate_cold_2();
  }
  return v9;
}

uint64_t _VCNACKGeneratorClassRegister(uint64_t *a1)
{
  uint64_t result;

  result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t VCNACKGenerator_Create(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t Instance;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  CFTypeRef v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (*(_QWORD *)a3)
    {
      if (*(_QWORD *)(a3 + 8))
      {
        if (VCNACKGeneratorGetTypeID_initOnce != -1)
          dispatch_once_f(&VCNACKGeneratorGetTypeID_initOnce, &VCNACKGeneratorGetTypeID_typeID, (dispatch_function_t)_VCNACKGeneratorClassRegister);
        Instance = _CFRuntimeCreateInstance();
        if (Instance)
        {
          v6 = Instance;
          v7 = Instance + 305168;
          *(_OWORD *)(Instance + 305168) = *(_OWORD *)a3;
          *(_OWORD *)(Instance + 305184) = *(_OWORD *)(a3 + 16);
          *(_QWORD *)(Instance + 305200) = 0x3FC3333333333333;
          *(_BYTE *)(Instance + 305218) = *(_BYTE *)(a3 + 32);
          strncpy((char *)(Instance + 305232), (const char *)(a3 + 33), 0xC8uLL);
          v8 = *(_OWORD *)(a3 + 236);
          v9 = *(_OWORD *)(a3 + 252);
          v10 = *(_OWORD *)(a3 + 268);
          *(_QWORD *)(v6 + 305544) = *(_QWORD *)(a3 + 284);
          *(_OWORD *)(v6 + 305512) = v9;
          *(_OWORD *)(v6 + 305528) = v10;
          *(_OWORD *)(v6 + 305496) = v8;
          *(_DWORD *)(v7 + 392) = *(_DWORD *)(a3 + 292);
          v11 = *(CFTypeRef *)(a3 + 296);
          if (v11)
            v11 = CFRetain(v11);
          *(_QWORD *)(v7 + 400) = v11;
          *(_DWORD *)(v7 + 408) = *(_DWORD *)(a3 + 304);
          *(_DWORD *)(v7 + 420) = reportingDefaultRealtimePeriod();
          if ((SummerCreateHandle((uint64_t *)(v7 + 312), 3000) & 0x80000000) != 0)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
                VCNACKGenerator_Create_cold_5();
            }
          }
          else
          {
            SummerAdd(0.0, 0.0);
            if ((SummerCreateHandle((uint64_t *)(v7 + 320), 3000) & 0x80000000) == 0)
            {
              SummerAdd(0.0, 0.0);
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                v12 = VRTraceErrorLogLevelToCSTR();
                v13 = *MEMORY[0x1E0CF2758];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
                {
                  v16 = 136315906;
                  v17 = v12;
                  v18 = 2080;
                  v19 = "VCNACKGenerator_Create";
                  v20 = 1024;
                  v21 = 563;
                  v22 = 2048;
                  v23 = v6;
                  _os_log_impl(&dword_1D8A54000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d New instance created=%p", (uint8_t *)&v16, 0x26u);
                }
              }
              v14 = 0;
              *a2 = v6;
              return v14;
            }
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
                VCNACKGenerator_Create_cold_6();
            }
          }
          if (*(_QWORD *)(v7 + 312) != 0xFFFFFFFFLL)
            SummerCloseHandle();
          CFRelease((CFTypeRef)v6);
          return 2152071172;
        }
        else if ((int)VRTraceGetErrorLogLevelForModule() < 3)
        {
          return 2152071171;
        }
        else
        {
          VRTraceErrorLogLevelToCSTR();
          v14 = 2152071171;
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            VCNACKGenerator_Create_cold_4();
        }
      }
      else
      {
        v14 = 2152071169;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            VCNACKGenerator_Create_cold_3();
        }
      }
    }
    else
    {
      v14 = 2152071169;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          VCNACKGenerator_Create_cold_2();
      }
    }
  }
  else
  {
    v14 = 2152071169;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCNACKGenerator_Create_cold_1();
    }
  }
  return v14;
}

uint64_t VCNACKGenerator_AddPacketInfo(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  double *v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  _WORD *v23;
  int v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  BOOL v28;
  signed int v29;
  signed int v30;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  unsigned int v60;
  unsigned __int16 *v61;
  NSObject *v62;
  NSObject *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  FILE **v72;
  uint64_t v73;
  uint64_t v74;
  double v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  double v80;
  double v81;
  double v82;
  int v83;
  uint64_t v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  int ErrorLogLevelForModule;
  uint64_t v89;
  NSObject *v90;
  _BOOL4 v91;
  int v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  double *v99;
  char v100;
  uint64_t v101;
  unsigned __int16 *v102;
  int v103;
  int v104;
  unint64_t v105;
  _WORD *v106;
  unsigned __int16 v107;
  BOOL v109;
  int NACK;
  uint64_t v111;
  NSObject *v112;
  NSObject *v113;
  int v114;
  uint64_t v115;
  double v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  FILE **v124;
  uint64_t v125;
  __int128 v126;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  NSObject *v136;
  NSObject *v137;
  int v138;
  uint64_t v139;
  double v140;
  int v141;
  unsigned int v142;
  uint64_t v143;
  unsigned __int16 v144;
  unsigned int v145;
  unsigned int v146;
  _BYTE *v147;
  int v148;
  _WORD *v149;
  int *v150;
  uint64_t v151;
  double v152;
  double v153;
  int v154;
  _BYTE buf[12];
  __int16 v156;
  const char *v157;
  __int16 v158;
  int v159;
  __int16 v160;
  _BYTE v161[10];
  _BYTE v162[6];
  _BYTE v163[6];
  _BYTE v164[30];
  _BYTE v165[10];
  __int16 v166;
  int v167;
  __int16 v168;
  int v169;
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v74 = 2152071169;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCNACKGenerator_AddPacketInfo_cold_1();
    }
    return v74;
  }
  v8 = a2;
  v9 = a1;
  v10 = *(_DWORD *)a2;
  v11 = *(_DWORD *)a2 & 0x3F;
  v150 = (int *)(a1 + 4768 * v11 + 16);
  if (*v150 != *(_DWORD *)a2)
  {
    bzero(v150, 0x12A0uLL);
    *v150 = v10;
  }
  v12 = v9 + 4768 * v11;
  v14 = *(unsigned __int8 *)(v12 + 22);
  v13 = (_BYTE *)(v12 + 22);
  if (!v14)
  {
    v74 = 0;
    goto LABEL_157;
  }
  v147 = v13;
  v15 = v9 + 305168;
  v16 = v8[1];
  v17 = v9 + 4768 * v11;
  v18 = *(double *)(v17 + 4760);
  if (v16 == 0.0)
  {
    v148 = v18 == 0.0;
    v8[1] = v18;
    v16 = v18;
  }
  else
  {
    v19 = (double *)(v17 + 4760);
    v20 = v18 == 0.0;
    if (v16 - v18 >= 0.75)
      v20 = 1;
    v148 = v20;
    *v19 = v16;
    *(double *)(v9 + 305464) = v16;
  }
  v21 = v9 + 4768 * v11;
  v24 = *(unsigned __int16 *)(v21 + 20);
  v23 = (_WORD *)(v21 + 20);
  LODWORD(v22) = v24;
  v25 = *((unsigned __int16 *)v8 + 2);
  v26 = (unsigned __int16)(v25 - v24) >= 0x7FFFu || v25 >= v22;
  v27 = v22 | 0xFFFF0000;
  if (v26)
    v27 = v22;
  v28 = (unsigned __int16)(v22 - v25) >= 0x7FFFu || v22 >= v25;
  v29 = v25 | 0xFFFF0000;
  if (v28)
    v29 = *((unsigned __int16 *)v8 + 2);
  v149 = v23 + 2346;
  v30 = (unsigned __int16)v23[2346];
  if ((unsigned __int16)(v25 - v30) < 0x7FFFu && v25 < v30)
    v30 |= 0xFFFF0000;
  v32 = v29 - v27;
  if (v29 <= v27)
  {
    if (!*((_BYTE *)v8 + 16) && !*((_BYTE *)v8 + 30))
      ++*(_DWORD *)(v9 + 4768 * v11 + 4704);
    v33 = *((_DWORD *)v8 + 5);
    if (v33 >= *(_DWORD *)(v9 + 4768 * v11 + 4708) && v29 < v30)
      goto LABEL_35;
  }
  else
  {
    *v23 = v25;
    v33 = *((_DWORD *)v8 + 5);
    v22 = v9 + 4768 * v11;
    if (v33 > *(_DWORD *)(v22 + 4708))
    {
      *(_DWORD *)(v22 + 4708) = v33;
      LOBYTE(v22) = v25;
LABEL_35:
      *v149 = v25;
      goto LABEL_37;
    }
    LOBYTE(v22) = v25;
  }
LABEL_37:
  v34 = v9 + 4768 * v11;
  v35 = *(_QWORD *)(v34 + 4736);
  if (v35)
  {
    v36 = v29;
    if (!*((_BYTE *)v8 + 31))
    {
      if (v29 >= *(unsigned __int16 *)(v9 + 4768 * v11 + 4752))
        v36 = *(_WORD *)(v9 + 4768 * v11 + 4752);
      else
        v36 = v29;
    }
  }
  else
  {
    v36 = v29;
  }
  v37 = v9 + 4768 * v11;
  v40 = *(_QWORD *)(v37 + 32);
  v39 = v37 + 32;
  v38 = v40;
  *(_WORD *)(v39 + 4720) = v36;
  v41 = *(_QWORD *)(v39 + 8);
  if (v32 >= 1)
  {
    v38 = ((2 * v41) << ~(_BYTE)v32) | (v38 >> v32);
    v41 >>= v32;
    v42 = (v32 & 0x40) == 0;
    if ((v32 & 0x40) != 0)
    {
      v38 = v41;
      v41 = 0;
    }
    *(_QWORD *)v39 = v38;
    *(_QWORD *)(v39 + 8) = v41;
    v43 = v9 + 4768 * v11;
    v44 = *(_QWORD *)(v43 + 56);
    a3 = *(_QWORD *)(v43 + 48) >> v32;
    a4 = 2 * v44;
    v45 = ((2 * v44) << ~(_BYTE)v32) | a3;
    v46 = v44 >> v32;
    if (!v42)
    {
      v45 = v46;
      v46 = 0;
    }
    *(_QWORD *)(v43 + 48) = v45;
    *(_QWORD *)(v43 + 56) = v46;
  }
  v47 = v22 - v29;
  if ((v47 & 0x40) != 0)
    v48 = 0x8000000000000000 >> v47;
  else
    v48 = 0;
  if ((v47 & 0x40) != 0)
    v49 = 0;
  else
    v49 = 0x8000000000000000 >> v47;
  v50 = *((unsigned __int8 *)v8 + 30);
  if (!*((_BYTE *)v8 + 30))
  {
    *(_QWORD *)v39 = v38 | v48;
    *(_QWORD *)(v39 + 8) = v41 | v49;
  }
  v151 = v9 + 305168;
  if (v38 & v48 | v41 & v49)
  {
    if (!*((_BYTE *)v8 + 16))
      goto LABEL_80;
  }
  else
  {
    if (!*((_BYTE *)v8 + 16))
    {
      *(_QWORD *)(v34 + 4736) = v35 + 1;
      goto LABEL_80;
    }
    ++*(_QWORD *)(v9 + 4768 * v11 + 4744);
  }
  v51 = v9 + 4768 * v11;
  v52 = *(_QWORD *)(v51 + 48);
  v53 = *(_QWORD *)(v51 + 56);
  v54 = (unint64_t *)(v51 + 48);
  if (!(v52 & v48 | v53 & v49))
  {
    v55 = v25;
    v56 = v11;
    v57 = v9 + 4768 * v11 + 2 * v25;
    v145 = v56;
    if (*(unsigned __int16 *)(v57 + 4160) == v25)
    {
      v58 = v9 + 4768 * v56;
      ++*(_QWORD *)(v58 + 4680);
      v59 = v16 - *(double *)(v58 + 8 * v55 + 2112);
      *(double *)(v58 + 4720) = *(double *)(v58 + 4720) + v59;
      LODWORD(v58) = *(_DWORD *)(v58 + 4716);
      v26 = v58 >= v33;
      v60 = v58 - v33;
      if (v26)
        *(double *)(v9 + 4768 * v56 + 4728) = *(double *)(v9 + 4768 * v56 + 4728)
                                              + (float)((float)v60 / (float)*(int *)(v9 + 305560));
      else
        ++*(_QWORD *)(v9 + 4768 * v56 + 4688);
    }
    else
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        v61 = (unsigned __int16 *)(v57 + 4160);
        v143 = VRTraceErrorLogLevelToCSTR();
        v62 = *MEMORY[0x1E0CF2758];
        v63 = *MEMORY[0x1E0CF2758];
        if (*MEMORY[0x1E0CF2748])
        {
          if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
          {
            v64 = *v150;
            v65 = *((unsigned __int16 *)v8 + 2);
            v66 = *((_QWORD *)v8 + 1);
            v67 = v9 + 4768 * v145 + 8 * v55;
            v68 = *(_QWORD *)(v67 + 2112);
            v69 = *(_QWORD *)(v67 + 64);
            v70 = *v61;
            *(_DWORD *)buf = 136318210;
            *(_QWORD *)&buf[4] = v143;
            v156 = 2080;
            v157 = "_VCNACKGenerator_UpdateSSRCContext";
            v158 = 1024;
            v159 = 374;
            v160 = 1024;
            *(_DWORD *)v161 = v64;
            *(_WORD *)&v161[4] = 1024;
            *(_DWORD *)&v161[6] = v64;
            *(_WORD *)v162 = 1024;
            *(_DWORD *)&v162[2] = v65;
            *(_WORD *)v163 = 1024;
            *(_DWORD *)&v163[2] = v65;
            *(_WORD *)v164 = 2048;
            *(_QWORD *)&v164[2] = v66;
            *(_WORD *)&v164[10] = 2048;
            *(_QWORD *)&v164[12] = v68;
            *(_WORD *)&v164[20] = 2048;
            *(_QWORD *)&v164[22] = v69;
            *(_WORD *)v165 = 2048;
            *(_QWORD *)&v165[2] = 0x7FF8000000000000;
            v166 = 1024;
            v167 = 0;
            v168 = 1024;
            v169 = v70;
            _os_log_impl(&dword_1D8A54000, v62, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Packet Information does not match ssrc=%u ssrc=0x%x and seqNum=%u seqNum=0x%x arrivalTime=%f timeOfRequest=%f timeOfFirstRequest=%f diff=%f isSameSeqNum=%d seqNumRequested=%u", buf, 0x68u);
          }
        }
        else if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
        {
          v128 = *v150;
          v129 = *((unsigned __int16 *)v8 + 2);
          v130 = *((_QWORD *)v8 + 1);
          v131 = v9 + 4768 * v145 + 8 * v55;
          v132 = *(_QWORD *)(v131 + 2112);
          v133 = *(_QWORD *)(v131 + 64);
          v134 = *v61;
          *(_DWORD *)buf = 136318210;
          *(_QWORD *)&buf[4] = v143;
          v156 = 2080;
          v157 = "_VCNACKGenerator_UpdateSSRCContext";
          v158 = 1024;
          v159 = 374;
          v160 = 1024;
          *(_DWORD *)v161 = v128;
          *(_WORD *)&v161[4] = 1024;
          *(_DWORD *)&v161[6] = v128;
          *(_WORD *)v162 = 1024;
          *(_DWORD *)&v162[2] = v129;
          *(_WORD *)v163 = 1024;
          *(_DWORD *)&v163[2] = v129;
          *(_WORD *)v164 = 2048;
          *(_QWORD *)&v164[2] = v130;
          *(_WORD *)&v164[10] = 2048;
          *(_QWORD *)&v164[12] = v132;
          *(_WORD *)&v164[20] = 2048;
          *(_QWORD *)&v164[22] = v133;
          *(_WORD *)v165 = 2048;
          *(_QWORD *)&v165[2] = 0x7FF8000000000000;
          v166 = 1024;
          v167 = 0;
          v168 = 1024;
          v169 = v134;
          _os_log_debug_impl(&dword_1D8A54000, v62, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Packet Information does not match ssrc=%u ssrc=0x%x and seqNum=%u seqNum=0x%x arrivalTime=%f timeOfRequest=%f timeOfFirstRequest=%f diff=%f isSameSeqNum=%d seqNumRequested=%u", buf, 0x68u);
        }
      }
      v15 = v9 + 305168;
    }
    v71 = *((_QWORD *)v8 + 1);
    if (*(_BYTE *)(v15 + 51))
    {
      v72 = *(FILE ***)(v15 + 56);
    }
    else
    {
      v73 = v15;
      v72 = LogDump_OpenLog(v9 + 305232, (uint64_t)"NackGenerator", (uint64_t)".nackdump", (char)"Timestamp\tRequestTime\tType\tSSRC\tHighestSeqNum\tBitmask\tResponseTime\n", 9, (char)"1.0");
      *(_QWORD *)(v73 + 56) = v72;
      *(_BYTE *)(v73 + 51) = 1;
    }
    VRLogfilePrintWithTimestamp((uint64_t)v72, "%5.3f\t%s\t%u\t%u\t-\t%5.3f\t%d\n", a3, a4, v15, a6, a7, a8, v71);
    v52 = *v54;
    v53 = v54[1];
    v50 = *((unsigned __int8 *)v8 + 30);
    v11 = v145;
    v15 = v9 + 305168;
  }
  *v54 = v52 | v48;
  v54[1] = v53 | v49;
LABEL_80:
  v152 = 0.0;
  v153 = 0.0;
  if (v50)
  {
    v74 = 0;
  }
  else
  {
    LOWORD(v16) = *((_WORD *)v8 + 14);
    v75 = (double)*(unint64_t *)&v16;
    v76 = v8[1];
    if (*((_BYTE *)v8 + 16))
    {
      v77 = SummerAdd(v75, v76);
      v15 = v9 + 305168;
      v74 = v77;
      if ((v77 & 0x80000000) != 0)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            VCNACKGenerator_AddPacketInfo_cold_7();
        }
        goto LABEL_107;
      }
    }
    else
    {
      v78 = SummerAdd(v75, v76);
      v15 = v9 + 305168;
      v74 = v78;
      if ((v78 & 0x80000000) != 0)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            VCNACKGenerator_AddPacketInfo_cold_3();
        }
        goto LABEL_107;
      }
    }
  }
  v79 = *(double *)(v15 + 264);
  if (v79 != 0.0)
  {
    v80 = v8[1] - v79;
    if (v80 <= 0.1)
    {
      v83 = *(unsigned __int8 *)(v15 + 272);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        v135 = VRTraceErrorLogLevelToCSTR();
        v136 = *MEMORY[0x1E0CF2758];
        v137 = *MEMORY[0x1E0CF2758];
        if (*MEMORY[0x1E0CF2748])
        {
          if (os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = v135;
            v156 = 2080;
            v157 = "_VCNACKGenerator_CheckBitrateLimits";
            v158 = 1024;
            v159 = 612;
            v160 = 2048;
            *(double *)v161 = v80;
            _os_log_impl(&dword_1D8A54000, v136, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Use cached canSendNACK, timeSinceLastCheck=%f", buf, 0x26u);
          }
        }
        else if (os_log_type_enabled(v137, OS_LOG_TYPE_DEBUG))
        {
          VCNACKGenerator_AddPacketInfo_cold_4();
        }
      }
      v87 = v9 + 305168;
LABEL_100:
      v96 = v39;
      v94 = *(_QWORD *)v39;
      v95 = *(_QWORD *)(v96 + 8);
      if ((v94 & v95) != 0xFFFFFFFFFFFFFFFFLL && v83)
      {
        v142 = v74;
        if (((*((_BYTE *)v8 + 31) == 0) & ~v148) != 0)
        {
          v98 = v9 + 4768 * v11;
          v97 = v11;
          if (*(_WORD *)(v98 + 4768) && *((unsigned __int16 *)v8 + 2) < *(unsigned __int16 *)(v98 + 4768))
            *(_WORD *)(v98 + 4768) = 0;
        }
        else
        {
          *(_WORD *)(v9 + 4768 * v11 + 4768) = *((_WORD *)v8 + 2);
          v97 = v11;
        }
        v99 = v8;
        v141 = 0;
        v144 = 0;
        v146 = v97;
        v100 = 0;
        v101 = v9;
        v102 = (unsigned __int16 *)(v9 + 4768 * v97 + 4768);
        v103 = 17;
LABEL_114:
        v104 = v103;
        while (*(double *)(v87 + 280) < 0.2 || *(int *)(v87 + 416) > 0)
        {
          if ((v104 & 0x40) != 0)
            v105 = v94 << v104;
          else
            v105 = (v95 << v104) | (v94 >> 1 >> ~(_BYTE)v104);
          if ((v105 & 0x8000000000000000) != 0)
            goto LABEL_139;
          v106 = v23;
          v107 = *v23 - v104;
          v109 = *(double *)(v87 + 304) >= 0.1 && v107 > (unsigned __int16)*v149;
          if (v107 <= *v102 || v109)
            goto LABEL_138;
          NACK = _VCNACKGenerator_ShouldGenerateNACK(v101, v150, v107, *((unsigned __int8 *)v99 + 31), v148, v99[1]);
          if ((v100 & 1) != 0)
          {
            v87 = v151;
            if (NACK)
            {
              v141 |= 1 << (~(_BYTE)v144 + v107);
              goto LABEL_136;
            }
LABEL_137:
            v100 = 1;
LABEL_138:
            v23 = v106;
LABEL_139:
            v103 = v104 - 1;
            if (v104)
              goto LABEL_114;
            break;
          }
          v87 = v151;
          if (NACK)
          {
            v144 = v107;
LABEL_136:
            --*(_DWORD *)(v87 + 416);
            goto LABEL_137;
          }
          v100 = 0;
          --v104;
          v23 = v106;
          if (v104 == -1)
            goto LABEL_146;
        }
        if ((v100 & 1) != 0)
        {
          v9 = v101;
          if (*(_QWORD *)v87)
          {
            v8 = v99;
            v74 = v142;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
            {
              v111 = VRTraceErrorLogLevelToCSTR();
              v112 = *MEMORY[0x1E0CF2758];
              v113 = *MEMORY[0x1E0CF2758];
              if (*MEMORY[0x1E0CF2748])
              {
                if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
                {
                  v114 = *v150;
                  v115 = *(_QWORD *)(v151 + 32);
                  v116 = *(double *)(v151 + 280) * 100.0;
                  *(_DWORD *)buf = 136317442;
                  *(_QWORD *)&buf[4] = v111;
                  v156 = 2080;
                  v157 = "_VCNACKGenerator_AttemptToRequestNACK";
                  v158 = 1024;
                  v159 = 513;
                  v160 = 1024;
                  *(_DWORD *)v161 = v114;
                  *(_WORD *)&v161[4] = 1024;
                  *(_DWORD *)&v161[6] = v114;
                  *(_WORD *)v162 = 1024;
                  *(_DWORD *)&v162[2] = v144;
                  *(_WORD *)v163 = 1024;
                  *(_DWORD *)&v163[2] = v144;
                  *(_WORD *)v164 = 1024;
                  *(_DWORD *)&v164[2] = (unsigned __int16)v141;
                  *(_WORD *)&v164[6] = 2048;
                  *(_QWORD *)&v164[8] = v115;
                  *(_WORD *)&v164[16] = 2048;
                  *(double *)&v164[18] = v116;
                  _os_log_impl(&dword_1D8A54000, v112, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Sending NACK for ssrc=%u ssrc=0x%x and lowestSeqNum=%u lowestSeqNum=0x%x, requestBitMask=0x%0000x rtt=%2.3fs plr=%1.3f%%", buf, 0x4Eu);
                }
              }
              else if (os_log_type_enabled(v113, OS_LOG_TYPE_DEBUG))
              {
                v138 = *v150;
                v139 = *(_QWORD *)(v151 + 32);
                v140 = *(double *)(v151 + 280) * 100.0;
                *(_DWORD *)buf = 136317442;
                *(_QWORD *)&buf[4] = v111;
                v156 = 2080;
                v157 = "_VCNACKGenerator_AttemptToRequestNACK";
                v158 = 1024;
                v159 = 513;
                v160 = 1024;
                *(_DWORD *)v161 = v138;
                *(_WORD *)&v161[4] = 1024;
                *(_DWORD *)&v161[6] = v138;
                *(_WORD *)v162 = 1024;
                *(_DWORD *)&v162[2] = v144;
                *(_WORD *)v163 = 1024;
                *(_DWORD *)&v163[2] = v144;
                *(_WORD *)v164 = 1024;
                *(_DWORD *)&v164[2] = (unsigned __int16)v141;
                *(_WORD *)&v164[6] = 2048;
                *(_QWORD *)&v164[8] = v139;
                *(_WORD *)&v164[16] = 2048;
                *(double *)&v164[18] = v140;
                _os_log_debug_impl(&dword_1D8A54000, v112, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Sending NACK for ssrc=%u ssrc=0x%x and lowestSeqNum=%u lowestSeqNum=0x%x, requestBitMask=0x%0000x rtt=%2.3fs plr=%1.3f%%", buf, 0x4Eu);
              }
            }
            (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, double))v151)(*(_QWORD *)(v151 + 8), *v150, v144, (unsigned __int16)v141, v8[1]);
            v123 = *((_QWORD *)v8 + 1);
            v11 = v146;
            if (*(_BYTE *)(v151 + 51))
            {
              v124 = *(FILE ***)(v151 + 56);
            }
            else
            {
              v124 = LogDump_OpenLog(v9 + 305232, (uint64_t)"NackGenerator", (uint64_t)".nackdump", (char)"Timestamp\tRequestTime\tType\tSSRC\tHighestSeqNum\tBitmask\tResponseTime\n", 9, (char)"1.0");
              *(_QWORD *)(v151 + 56) = v124;
              *(_BYTE *)(v151 + 51) = 1;
            }
            VRLogfilePrintWithTimestamp((uint64_t)v124, "%5.3f\t%s\t%u\t%u\t0x%x\t-\t%d\n", v117, v118, v119, v120, v121, v122, v123);
            goto LABEL_155;
          }
          v11 = v146;
          v13 = v147;
        }
        else
        {
LABEL_146:
          v11 = v146;
          v13 = v147;
          v9 = v101;
        }
        v8 = v99;
        v74 = v142;
        goto LABEL_156;
      }
LABEL_155:
      v13 = v147;
      goto LABEL_156;
    }
  }
  if ((_VCNACKGenerator_GetBitrate(v9, &v153, &v152, 1.0) & 0x80000000) != 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCNACKGenerator_AddPacketInfo_cold_5();
    }
  }
  else
  {
    if (v153 == 0.0)
      v81 = 0.0;
    else
      v81 = v152 / v153;
    v82 = *(float *)(v9 + 305504);
    v83 = v81 < v82;
    v84 = *(_QWORD *)(v9 + 305480);
    v85 = v8[1] + -0.1;
    v154 = 0;
    *(_QWORD *)buf = 0;
    v86 = SummerLengthPred(v85, v84, (uint64_t (*)(double, double, double))SummerGreaterThan, (double *)buf, &v154);
    if ((v86 & 0x80000000) == 0)
    {
      v74 = v86;
      *(_DWORD *)(v9 + 305584) = vcvtpd_s64_f64((double)v154 * *(float *)(v9 + 305504));
      v87 = v9 + 305168;
      if (*(unsigned __int8 *)(v9 + 305440) != v83)
      {
        ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
        v87 = v9 + 305168;
        if (ErrorLogLevelForModule >= 7)
        {
          v89 = VRTraceErrorLogLevelToCSTR();
          v90 = *MEMORY[0x1E0CF2758];
          v91 = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT);
          v87 = v9 + 305168;
          if (v91)
          {
            v92 = *(unsigned __int8 *)(v9 + 305440);
            v93 = *(_DWORD *)(v9 + 305584);
            *(_DWORD *)buf = 136317442;
            *(_QWORD *)&buf[4] = v89;
            v156 = 2080;
            v157 = "_VCNACKGenerator_CheckBitrateLimits";
            v158 = 1024;
            v159 = 625;
            v160 = 2048;
            *(_QWORD *)v161 = v9;
            *(_WORD *)&v161[8] = 1024;
            *(_DWORD *)v162 = v92;
            *(_WORD *)&v162[4] = 1024;
            *(_DWORD *)v163 = v81 < v82;
            *(_WORD *)&v163[4] = 2048;
            *(double *)v164 = v153;
            *(_WORD *)&v164[8] = 2048;
            *(double *)&v164[10] = v152;
            *(_WORD *)&v164[18] = 2048;
            *(double *)&v164[20] = v81;
            *(_WORD *)&v164[28] = 1024;
            *(_DWORD *)v165 = v93;
            _os_log_impl(&dword_1D8A54000, v90, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCNACKGenerator[%p] Based on bitrate limits, canSendNack changed from mostRecentCanSendNackStatus=%d to canSendNack=%d, mediaBitrate=%3.3f, retransmittedBitrate=%3.3f, overhead=%3.3f nackGenerator->nackBudget=%d", buf, 0x56u);
            v87 = v9 + 305168;
          }
        }
      }
      *(double *)(v87 + 264) = v8[1];
      *(_BYTE *)(v87 + 272) = v83;
      goto LABEL_100;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCNACKGenerator_AddPacketInfo_cold_6();
    }
  }
LABEL_107:
  v74 = 2152071190;
  v13 = v147;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
    {
      VCNACKGenerator_AddPacketInfo_cold_2();
      v74 = 2152071190;
    }
  }
LABEL_156:
  if (!*v13)
  {
LABEL_157:
    v125 = v9 + 4768 * v11;
    *(_WORD *)(v125 + 20) = *((_WORD *)v8 + 2);
    *v13 = 1;
    *(_QWORD *)&v126 = -1;
    *((_QWORD *)&v126 + 1) = -1;
    *(_OWORD *)(v125 + 32) = v126;
    *(_OWORD *)(v125 + 48) = v126;
    *(double *)(v125 + 4760) = v8[1];
  }
  return v74;
}

uint64_t VCNACKGenerator_UpdateRTT(uint64_t a1, double a2)
{
  uint64_t v2;

  if (a1)
  {
    v2 = 0;
    *(double *)(a1 + 305200) = a2;
  }
  else
  {
    v2 = 2152071169;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCNACKGenerator_UpdateRTT_cold_1();
    }
  }
  return v2;
}

uint64_t VCNACKGenerator_UpdatePlayoutRTPTimestamp(uint64_t a1, int a2, int a3)
{
  uint64_t v3;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 4768 * (a2 & 0x3F) + 22) && *(_DWORD *)(a1 + 4768 * (a2 & 0x3F) + 16) == a2)
    {
      v3 = 0;
      *(_DWORD *)(a1 + 4768 * (a2 & 0x3F) + 4716) = a3;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v3 = 2152071169;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCNACKGenerator_UpdatePlayoutRTPTimestamp_cold_1();
    }
  }
  return v3;
}

void _VCNACKGenerator_Init(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)(a1 + 305480);
  bzero((void *)(a1 + 16), 0x4A9B0uLL);
  *v1 = 0xFFFFFFFFLL;
  v1[1] = 0xFFFFFFFFLL;
}

void _VCNACKGenerator_Finalize(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  const void *v3;

  v1 = (_QWORD *)(a1 + 305224);
  v2 = *(_QWORD *)(a1 + 305224);
  if (v2)
  {
    LogDump_CloseLog(v2);
    *v1 = 0;
  }
  if (v1[33] != 0xFFFFFFFFLL)
    SummerCloseHandle();
  if (v1[32] != 0xFFFFFFFFLL)
    SummerCloseHandle();
  v3 = (const void *)v1[43];
  if (v3)
  {
    CFRelease(v3);
    v1[43] = 0;
  }
}

uint64_t _VCNACKGenerator_ShouldGenerateNACK(uint64_t a1, int *a2, int a3, int a4, int a5, double a6)
{
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  float v14;
  float v15;
  float v17;
  float *v19;
  float v20;
  double v21;
  int v22;
  _BOOL4 v23;
  NSObject *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  int *v29;
  double v30;
  double v31;
  _BOOL4 v32;
  double *v33;
  int *v34;
  double *v35;
  double v36;
  double v37;
  _BOOL4 v38;
  _BOOL4 v39;
  double v40;
  double v41;
  double v42;
  _BOOL4 v43;
  int v44;
  NSObject *v45;
  int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  int v51;
  uint64_t v53;
  uint64_t v54;
  int v55;
  double v56;
  double v57;
  double v58;
  double v59;
  int v60;
  uint64_t v61;
  NSObject *log;
  uint64_t v63;
  _BOOL4 v64;
  int v65;
  uint8_t buf[4];
  uint64_t v68;
  __int16 v69;
  const char *v70;
  __int16 v71;
  int v72;
  __int16 v73;
  _BYTE v74[10];
  double v75;
  _BYTE v76[10];
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  __int16 v81;
  double v82;
  __int16 v83;
  double v84;
  __int16 v85;
  double v86;
  __int16 v87;
  double v88;
  __int16 v89;
  double v90;
  __int16 v91;
  double v92;
  __int16 v93;
  double v94;
  __int16 v95;
  double v96;
  __int16 v97;
  _BOOL4 v98;
  __int16 v99;
  int v100;
  __int16 v101;
  int v102;
  __int16 v103;
  _BOOL4 v104;
  __int16 v105;
  _BOOL4 v106;
  __int16 v107;
  _BOOL4 v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v9 = (float *)(a1 + 305512);
  v10 = a1 + 305200;
  v11 = a3;
  v12 = (uint64_t)a2 + 2 * a3;
  v65 = *(unsigned __int16 *)(v12 + 4144);
  v13 = v65 == a3 && *(double *)&a2[2 * a3 + 524] != 0.0;
  v14 = *(double *)(a1 + 305448);
  v15 = *(float *)(a1 + 305532);
  if (*(float *)(a1 + 305528) < v14 && v15 >= v14)
  {
    v19 = (float *)(a1 + 305516);
LABEL_16:
    v20 = *v19;
    goto LABEL_17;
  }
  v17 = *(float *)(a1 + 305536);
  if (v15 < v14 && v17 >= v14)
  {
    v19 = (float *)(a1 + 305520);
    goto LABEL_16;
  }
  if (v17 < v14)
  {
    v19 = (float *)(a1 + 305524);
    goto LABEL_16;
  }
  v20 = *v9;
LABEL_17:
  v21 = v20;
  if (*(double *)(a1 + 305456) != v20)
  {
    v22 = a5;
    v23 = v13;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      v63 = VRTraceErrorLogLevelToCSTR();
      v24 = *MEMORY[0x1E0CF2758];
      v25 = *MEMORY[0x1E0CF2758];
      if (*MEMORY[0x1E0CF2748])
      {
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          v27 = *(_QWORD *)(v10 + 248);
          v26 = *(_QWORD *)(v10 + 256);
          *(_DWORD *)buf = 136316418;
          v68 = v63;
          v69 = 2080;
          v70 = "_VCNACKGenerator_CalculateAndUpdateNACKGenerationThrottlingFactor";
          v71 = 1024;
          v72 = 421;
          v73 = 2048;
          *(_QWORD *)v74 = v26;
          *(_WORD *)&v74[8] = 2048;
          v75 = v21;
          *(_WORD *)v76 = 2048;
          *(_QWORD *)&v76[2] = v27;
          _os_log_impl(&dword_1D8A54000, v24, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nackGenerationThrottlingFactor changed from old=%f => new=[%f] at PLR=%f", buf, 0x3Au);
        }
      }
      else if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        v54 = *(_QWORD *)(v10 + 248);
        v53 = *(_QWORD *)(v10 + 256);
        *(_DWORD *)buf = 136316418;
        v68 = v63;
        v69 = 2080;
        v70 = "_VCNACKGenerator_CalculateAndUpdateNACKGenerationThrottlingFactor";
        v71 = 1024;
        v72 = 421;
        v73 = 2048;
        *(_QWORD *)v74 = v53;
        *(_WORD *)&v74[8] = 2048;
        v75 = v21;
        *(_WORD *)v76 = 2048;
        *(_QWORD *)&v76[2] = v54;
        _os_log_debug_impl(&dword_1D8A54000, v24, OS_LOG_TYPE_DEBUG, " [%s] %s:%d nackGenerationThrottlingFactor changed from old=%f => new=[%f] at PLR=%f", buf, 0x3Au);
      }
    }
    *(double *)(v10 + 256) = v21;
    v13 = v23;
    a5 = v22;
  }
  v28 = (_WORD *)(v12 + 4144);
  v29 = &a2[2 * v11];
  v30 = *((double *)v29 + 262);
  if (v30 == 0.0)
  {
    v32 = 0;
    v31 = *(double *)v10;
  }
  else
  {
    v31 = *(double *)v10;
    v32 = a6 - v30 <= *(double *)v10 * v21;
  }
  v33 = (double *)(v29 + 524);
  v34 = &a2[2 * v11];
  v36 = *((double *)v34 + 6);
  v35 = (double *)(v34 + 12);
  v37 = v36;
  v38 = v36 != 0.0;
  v39 = a6 - v36 > 1.0 && v38;
  v40 = *(double *)(v10 + 248);
  v41 = v9[8];
  v42 = v9[9];
  v43 = v31 > v42 || v40 > v41;
  v44 = (v13 && (v32 || v39)) | a4 | a5 | v43;
  if ((v44 & 1) != 0)
  {
    v64 = v13;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      v61 = VRTraceErrorLogLevelToCSTR();
      v45 = *MEMORY[0x1E0CF2758];
      log = *MEMORY[0x1E0CF2758];
      if (*MEMORY[0x1E0CF2748])
      {
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          v46 = *a2;
          v47 = *v33;
          v48 = *v35;
          v49 = *(double *)v10;
          v50 = *(double *)(v10 + 248) * 100.0;
          v51 = (unsigned __int16)*v28;
          *(_DWORD *)buf = 136321026;
          v68 = v61;
          v69 = 2080;
          v70 = "_VCNACKGenerator_ShouldGenerateNACK";
          v71 = 1024;
          v72 = 457;
          v73 = 1024;
          *(_DWORD *)v74 = v64;
          *(_WORD *)&v74[4] = 1024;
          *(_DWORD *)&v74[6] = v32;
          LOWORD(v75) = 1024;
          *(_DWORD *)((char *)&v75 + 2) = v39;
          HIWORD(v75) = 1024;
          *(_DWORD *)v76 = v46;
          *(_WORD *)&v76[4] = 1024;
          *(_DWORD *)&v76[6] = v46;
          v77 = 1024;
          v78 = a3;
          v79 = 1024;
          v80 = a3;
          v81 = 2048;
          v82 = a6;
          v83 = 2048;
          v84 = v47;
          v85 = 2048;
          v86 = a6 - v47;
          v87 = 2048;
          v88 = v48;
          v89 = 2048;
          v90 = a6 - v48;
          v91 = 2048;
          v92 = v49;
          v93 = 2048;
          v94 = v50;
          v95 = 2048;
          v96 = v21;
          v97 = 1024;
          v98 = v65 == a3;
          v99 = 1024;
          v100 = v51;
          v101 = 1024;
          v102 = v11;
          v103 = 1024;
          v104 = v40 > v41;
          v105 = 1024;
          v106 = v31 > v42;
          v107 = 1024;
          v108 = v43;
          _os_log_impl(&dword_1D8A54000, log, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Not sending NACK because [nackGenerated=%d throttleNackGeneration=%d missingPacketIsTooOld=%d] ssrc=%u ssrc=0x%x and seqNum=%u seqNum=0x%x arrivalTime=%f timeOfRequest=%f diff=%f timeOfFirstRequest=%f diff=%f rtt=%2.3fs plr=%3.2f%% nackGenerationThrottlingFactor=%f isSameSeqNum=%d seqNumRequested=%u seqNumHash=%d highPacketLossRatioObserved=%d highRTTObserved=%d disableNACKDueToUnsuitableNetworkConditions=%d", buf, 0xBAu);
        }
      }
      else if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
      {
        v55 = *a2;
        v56 = *v33;
        v57 = *v35;
        v58 = *(double *)v10;
        v59 = *(double *)(v10 + 248) * 100.0;
        v60 = (unsigned __int16)*v28;
        *(_DWORD *)buf = 136321026;
        v68 = v61;
        v69 = 2080;
        v70 = "_VCNACKGenerator_ShouldGenerateNACK";
        v71 = 1024;
        v72 = 457;
        v73 = 1024;
        *(_DWORD *)v74 = v64;
        *(_WORD *)&v74[4] = 1024;
        *(_DWORD *)&v74[6] = v32;
        LOWORD(v75) = 1024;
        *(_DWORD *)((char *)&v75 + 2) = v39;
        HIWORD(v75) = 1024;
        *(_DWORD *)v76 = v55;
        *(_WORD *)&v76[4] = 1024;
        *(_DWORD *)&v76[6] = v55;
        v77 = 1024;
        v78 = a3;
        v79 = 1024;
        v80 = a3;
        v81 = 2048;
        v82 = a6;
        v83 = 2048;
        v84 = v56;
        v85 = 2048;
        v86 = a6 - v56;
        v87 = 2048;
        v88 = v57;
        v89 = 2048;
        v90 = a6 - v57;
        v91 = 2048;
        v92 = v58;
        v93 = 2048;
        v94 = v59;
        v95 = 2048;
        v96 = v21;
        v97 = 1024;
        v98 = v65 == a3;
        v99 = 1024;
        v100 = v60;
        v101 = 1024;
        v102 = v11;
        v103 = 1024;
        v104 = v40 > v41;
        v105 = 1024;
        v106 = v31 > v42;
        v107 = 1024;
        v108 = v43;
        _os_log_debug_impl(&dword_1D8A54000, log, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Not sending NACK because [nackGenerated=%d throttleNackGeneration=%d missingPacketIsTooOld=%d] ssrc=%u ssrc=0x%x and seqNum=%u seqNum=0x%x arrivalTime=%f timeOfRequest=%f diff=%f timeOfFirstRequest=%f diff=%f rtt=%2.3fs plr=%3.2f%% nackGenerationThrottlingFactor=%f isSameSeqNum=%d seqNumRequested=%u seqNumHash=%d highPacketLossRatioObserved=%d highRTTObserved=%d disableNACKDueToUnsuitableNetworkConditions=%d", buf, 0xBAu);
      }
    }
  }
  else
  {
    *v33 = a6;
    if (v37 == 0.0)
      *v35 = a6;
    *v28 = a3;
    ++*((_QWORD *)a2 + 582);
    if (!v13)
      ++*((_QWORD *)a2 + 585);
  }
  return v44 ^ 1u;
}

void sub_1D8F37670(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D8F37708(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D8F37990(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_1D8F37AFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D8F37C50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D8F37DC8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D8F37FA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D8F38178(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D8F39028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_1D8F39414(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t VCMediaStreamMultiwayConfig_RemoteIDSParticipantID(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

const char *VCMediaStreamConfig_CipherSuiteDescription(unint64_t a1)
{
  if (a1 > 9)
    return "Invalid";
  else
    return off_1E9E58368[a1];
}

uint64_t VCMediaStreamConfig_Direction(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 8);
  return result;
}

uint64_t VCMediaStreamConfig_MultiwayConfig(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 224);
  return result;
}

double VCMediaStreamConfig_DecryptionTimeOutInterval(uint64_t a1)
{
  if (a1)
    return *(double *)(a1 + 136);
  else
    return 0.0;
}

double VCMediaStreamConfig_DecryptionMKMRecoveryInterval(uint64_t a1)
{
  if (a1)
    return *(double *)(a1 + 128);
  else
    return 0.0;
}

void sub_1D8F47E44(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D8F47F1C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

SIPClientDataDictionary *SIPClientDictionaryCInterface_Create()
{
  return objc_alloc_init(SIPClientDataDictionary);
}

uint64_t SIPClientDictionaryCInterface_CopyObjectForKey(void *a1, const char *a2, uint64_t a3)
{
  return objc_msgSend(a1, "copyObjectForKey:p2pID:", a2, a3);
}

uint64_t SIPClientDictionaryCInterface_SetObjectForKey(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(a1, "setObject:forKey:forP2PID:", a3, a2, a4);
}

void VCVirtualAVCaptureConnection_OnMediaSample(uint64_t a1, const void *a2, uint64_t a3)
{
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  if (*(_BYTE *)(a1 + 52))
    VCVirtualAVCaptureVideoDataOutput_OnMediaSample(*(_QWORD *)(a1 + 32), a2, a3, a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
}

void sub_1D8F487C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D8F48CA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D8F4AA94(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D8F4AC10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

_QWORD *VCMemoryPool_Create(unint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = malloc_type_malloc(0x20uLL, 0x10800401BEB856BuLL);
  if (result)
  {
    v3 = 8;
    if (a1 > 8)
      v3 = a1;
    *result = 0;
    result[1] = 0;
    result[2] = v3;
  }
  return result;
}

void *VCMemoryPool_Alloc(OSQueueHead *a1)
{
  void *v2;
  size_t opaque1;
  void *v4;
  uint64_t v5;
  NSObject *v6;

  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      v5 = VRTraceErrorLogLevelToCSTR();
      v6 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCMemoryPool_Alloc_cold_1(v5, v6);
    }
    return 0;
  }
  v2 = OSAtomicDequeue(a1, 0);
  opaque1 = (size_t)a1[1].opaque1;
  if (v2)
  {
    v4 = v2;
    bzero(v2, opaque1);
    return v4;
  }
  return malloc_type_calloc(1uLL, opaque1, 0xA61529CBuLL);
}

void VCMemoryPool_Free(OSQueueHead *__list, void *__new)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  OSQueueHead *v13;
  __int16 v14;
  void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (__list && __new)
  {
    OSAtomicEnqueue(__list, __new, 0);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    v4 = VRTraceErrorLogLevelToCSTR();
    v5 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
    {
      v6 = 136316162;
      v7 = v4;
      v8 = 2080;
      v9 = "VCMemoryPool_Free";
      v10 = 1024;
      v11 = 51;
      v12 = 2048;
      v13 = __list;
      v14 = 2048;
      v15 = __new;
      _os_log_error_impl(&dword_1D8A54000, v5, OS_LOG_TYPE_ERROR, " [%s] %s:%d invalid memory pool %p or pointer %p!", (uint8_t *)&v6, 0x30u);
    }
  }
}

void VCMemoryPool_Destroy(OSQueueHead *__list)
{
  void *v2;

  if (__list)
  {
    while (1)
    {
      v2 = OSAtomicDequeue(__list, 0);
      if (!v2)
        break;
      free(v2);
    }
    free(__list);
  }
}

uint64_t VCFeatureFlagManager_U1AuthTagEnabled()
{
  if (VCFeatureFlagManager_U1AuthTagEnabled_onceToken != -1)
    dispatch_once(&VCFeatureFlagManager_U1AuthTagEnabled_onceToken, &__block_literal_global_92);
  return VCFeatureFlagManager_U1AuthTagEnabled_result;
}

uint64_t VCFeatureFlagManager_UseShortMKI()
{
  if (VCFeatureFlagManager_UseShortMKI_onceToken != -1)
    dispatch_once(&VCFeatureFlagManager_UseShortMKI_onceToken, &__block_literal_global_33_0);
  return VCFeatureFlagManager_UseShortMKI_result;
}

BOOL VCFeatureFlagManager_SessionBasedMutingEnabled()
{
  if (VCFeatureFlagManager_SessionBasedMutingEnabled_onceToken != -1)
    dispatch_once(&VCFeatureFlagManager_SessionBasedMutingEnabled_onceToken, &__block_literal_global_4_0);
  return VCDefaults_GetBoolValueForKey(CFSTR("forceEnableSessionBasedMuting"), VCFeatureFlagManager_SessionBasedMutingEnabled_result);
}

uint64_t VCFeatureFlagManager_UseOptimizedTelephonyHandovers()
{
  _DWORD v1[2];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  if (VCFeatureFlagManager_UseOptimizedTelephonyHandovers_onceToken != -1)
    dispatch_once(&VCFeatureFlagManager_UseOptimizedTelephonyHandovers_onceToken, &__block_literal_global_13_1);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v1[0] = 67109120;
    v1[1] = VCFeatureFlagManager_UseOptimizedTelephonyHandovers_result;
    _os_log_impl(&dword_1D8A54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: PSVoiceOnAPUseHandOverOpt=%d", (uint8_t *)v1, 8u);
  }
  return VCFeatureFlagManager_UseOptimizedTelephonyHandovers_result;
}

BOOL VCFeatureFlagManager_DaemonCrashRecovery()
{
  uint64_t v0;
  int v1;
  _BOOL8 BoolValueForKey;
  _DWORD v4[2];
  __int16 v5;
  _BOOL4 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v0 = _os_feature_enabled_impl();
  v1 = v0;
  BoolValueForKey = VCDefaults_GetBoolValueForKey(CFSTR("enableDaemonCrashRecovery"), v0);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109376;
    v4[1] = v1;
    v5 = 1024;
    v6 = BoolValueForKey;
    _os_log_impl(&dword_1D8A54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: featureFlag=%d, DaemonCrashRecovery=%d", (uint8_t *)v4, 0xEu);
  }
  return BoolValueForKey;
}

uint64_t VCFeatureFlagManager_PreviewMSROptimizationForEmbedded()
{
  _DWORD v1[2];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  if (VCFeatureFlagManager_PreviewMSROptimizationForEmbedded_onceToken != -1)
    dispatch_once(&VCFeatureFlagManager_PreviewMSROptimizationForEmbedded_onceToken, &__block_literal_global_19_1);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v1[0] = 67109120;
    v1[1] = VCFeatureFlagManager_PreviewMSROptimizationForEmbedded_result;
    _os_log_impl(&dword_1D8A54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: PreviewMSROptimizationForEmbedded=%d", (uint8_t *)v1, 8u);
  }
  return VCFeatureFlagManager_PreviewMSROptimizationForEmbedded_result;
}

uint64_t VCFeatureFlagManager_SkipNonInfraWiFiAssertion()
{
  if (VCFeatureFlagManager_SkipNonInfraWiFiAssertion_onceToken != -1)
    dispatch_once(&VCFeatureFlagManager_SkipNonInfraWiFiAssertion_onceToken, &__block_literal_global_24);
  return VCFeatureFlagManager_SkipNonInfraWiFiAssertion_result;
}

BOOL VCFeatureFlagManager_UseOutOfProcessVideoDecoding()
{
  uint64_t v0;
  void *v1;
  _BOOL8 BoolValueForKey;
  int v4;
  int v5;
  __int16 v6;
  _BOOL4 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v0 = _os_feature_enabled_impl();
  if (!+[VCHardwareSettings supportsOutOfProcessVideoDecoding](VCHardwareSettings, "supportsOutOfProcessVideoDecoding"))
  {
    v0 = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v4 = 67109120;
      v5 = 0;
      _os_log_impl(&dword_1D8A54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: UseOutOfProcessVideoDecoding=%d set by supportsOutOfProcessVideoDecoding", (uint8_t *)&v4, 8u);
      v0 = 0;
    }
  }
  v1 = (void *)objc_msgSend(+[GKSConnectivitySettings getAllSettings](GKSConnectivitySettings, "getAllSettings"), "objectForKeyedSubscript:", CFSTR("vc-out-of-process-video-decoding"));
  if (v1)
  {
    if ((objc_msgSend(v1, "BOOLValue") & 1) == 0)
    {
      v0 = 0;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v4 = 67109120;
        v5 = 0;
        _os_log_impl(&dword_1D8A54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: UseOutOfProcessVideoDecoding=%d set by GKSConnectivitySettings", (uint8_t *)&v4, 8u);
        v0 = 0;
      }
    }
  }
  BoolValueForKey = VCDefaults_GetBoolValueForKey(CFSTR("useOutOfProcessVideoDecoding"), v0);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v4 = 67109376;
    v5 = v0;
    v6 = 1024;
    v7 = BoolValueForKey;
    _os_log_impl(&dword_1D8A54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: flag=%d, UseOutOfProcessVideoDecoding=%d", (uint8_t *)&v4, 0xEu);
  }
  return BoolValueForKey;
}

BOOL VCFeatureFlagManager_UseOutOfProcessAudioDecoding()
{
  uint64_t v0;
  void *v1;
  _BOOL8 BoolValueForKey;
  int v4;
  int v5;
  __int16 v6;
  _BOOL4 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v0 = _os_feature_enabled_impl();
  if (!+[VCHardwareSettings supportsOutOfProcessAudioDecoding](VCHardwareSettings, "supportsOutOfProcessAudioDecoding"))
  {
    v0 = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v4 = 67109120;
      v5 = 0;
      _os_log_impl(&dword_1D8A54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: UseOutOfProcessAudioDecoding=%d set by supportsOutOfProcessAudioDecoding", (uint8_t *)&v4, 8u);
      v0 = 0;
    }
  }
  v1 = (void *)objc_msgSend(+[GKSConnectivitySettings getAllSettings](GKSConnectivitySettings, "getAllSettings"), "objectForKeyedSubscript:", CFSTR("vc-out-of-process-audio-decoding"));
  if (v1)
  {
    if ((objc_msgSend(v1, "BOOLValue") & 1) == 0)
    {
      v0 = 0;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v4 = 67109120;
        v5 = 0;
        _os_log_impl(&dword_1D8A54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: UseOutOfProcessAudioDecoding=%d set by GKSConnectivitySettings", (uint8_t *)&v4, 8u);
        v0 = 0;
      }
    }
  }
  BoolValueForKey = VCDefaults_GetBoolValueForKey(CFSTR("useOutOfProcessAudioDecoding"), v0);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v4 = 67109376;
    v5 = v0;
    v6 = 1024;
    v7 = BoolValueForKey;
    _os_log_impl(&dword_1D8A54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: flag=%d, UseOutOfProcessAudioDecoding=%d", (uint8_t *)&v4, 0xEu);
  }
  return BoolValueForKey;
}

uint64_t VCFeatureFlagManager_UseTLE()
{
  if (VCFeatureFlagManager_UseTLE_onceToken != -1)
    dispatch_once(&VCFeatureFlagManager_UseTLE_onceToken, &__block_literal_global_36);
  return VCFeatureFlagManager_UseTLE_result;
}

BOOL VCFeatureFlagManager_UseAnalyzerSpeechAPI()
{
  _BOOL8 BoolValueForKey;
  _DWORD v2[2];
  __int16 v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (VCFeatureFlagManager_UseAnalyzerSpeechAPI_onceToken != -1)
    dispatch_once(&VCFeatureFlagManager_UseAnalyzerSpeechAPI_onceToken, &__block_literal_global_38_0);
  BoolValueForKey = VCDefaults_GetBoolValueForKey(CFSTR("useAnalyzerSpeechAPI"), VCFeatureFlagManager_UseAnalyzerSpeechAPI_flag);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 67109376;
    v2[1] = BoolValueForKey;
    v3 = 1024;
    v4 = VCFeatureFlagManager_UseAnalyzerSpeechAPI_flag;
    _os_log_impl(&dword_1D8A54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: UseAnalyzerSpeechAPI=%d (feature flag=%d)", (uint8_t *)v2, 0xEu);
  }
  return BoolValueForKey;
}

BOOL VCFeatureFlagManager_UseBlockDurationHinting()
{
  _BOOL8 BoolValueForKey;
  _DWORD v2[2];
  __int16 v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (VCFeatureFlagManager_UseBlockDurationHinting_onceToken != -1)
    dispatch_once(&VCFeatureFlagManager_UseBlockDurationHinting_onceToken, &__block_literal_global_42_0);
  BoolValueForKey = VCDefaults_GetBoolValueForKey(CFSTR("useBlockDurationHinting"), VCFeatureFlagManager_UseBlockDurationHinting_flag);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 67109376;
    v2[1] = BoolValueForKey;
    v3 = 1024;
    v4 = VCFeatureFlagManager_UseBlockDurationHinting_flag;
    _os_log_impl(&dword_1D8A54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: UseBlockDurationHinting=%d (feature flag=%d)", (uint8_t *)v2, 0xEu);
  }
  return BoolValueForKey;
}

BOOL VCFeatureFlagManager_RecordingResiliencyEnabled()
{
  _BOOL8 v0;
  _DWORD v2[2];
  __int16 v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (VCFeatureFlagManager_RecordingResiliencyEnabled_onceToken != -1)
    dispatch_once(&VCFeatureFlagManager_RecordingResiliencyEnabled_onceToken, &__block_literal_global_48_0);
  v0 = VCDefaults_GetBoolValueForKey(CFSTR("recordingResiliencyEnabled"), VCFeatureFlagManager_RecordingResiliencyEnabled_flag)|| VCFeatureFlagManager_CallRecordingEnabled();
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 67109376;
    v2[1] = v0;
    v3 = 1024;
    v4 = VCFeatureFlagManager_RecordingResiliencyEnabled_flag;
    _os_log_impl(&dword_1D8A54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: RecordingResiliency=%d (feature flag=%d)", (uint8_t *)v2, 0xEu);
  }
  return v0;
}

BOOL VCFeatureFlagManager_CallRecordingEnabled()
{
  _BOOL8 BoolValueForKey;
  _DWORD v2[2];
  __int16 v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (VCFeatureFlagManager_CallRecordingEnabled_onceToken != -1)
    dispatch_once(&VCFeatureFlagManager_CallRecordingEnabled_onceToken, &__block_literal_global_56);
  BoolValueForKey = VCDefaults_GetBoolValueForKey(CFSTR("callRecordingEnabled"), VCFeatureFlagManager_CallRecordingEnabled_flag);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 67109376;
    v2[1] = BoolValueForKey;
    v3 = 1024;
    v4 = VCFeatureFlagManager_CallRecordingEnabled_flag;
    _os_log_impl(&dword_1D8A54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: CallRecording=%d (feature flag=%d)", (uint8_t *)v2, 0xEu);
  }
  return BoolValueForKey;
}

BOOL VCFeatureFlagManager_LocalRecordingEnabled()
{
  _BOOL8 v0;
  _DWORD v2[2];
  __int16 v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (VCFeatureFlagManager_LocalRecordingEnabled_onceToken != -1)
    dispatch_once(&VCFeatureFlagManager_LocalRecordingEnabled_onceToken, &__block_literal_global_52);
  v0 = VCDefaults_GetBoolValueForKey(CFSTR("localRecordingEnabled"), VCFeatureFlagManager_LocalRecordingEnabled_flag)|| VCFeatureFlagManager_CallRecordingEnabled();
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 67109376;
    v2[1] = v0;
    v3 = 1024;
    v4 = VCFeatureFlagManager_LocalRecordingEnabled_flag;
    _os_log_impl(&dword_1D8A54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "VCFeatureFlagManager: LocalRecording=%d (feature flag=%d)", (uint8_t *)v2, 0xEu);
  }
  return v0;
}

void sub_1D8F54AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t VCTimescalePSOLA_CalcFsMult(int a1)
{
  if (a1 > 31999)
  {
    if (a1 != 32000)
    {
      if (a1 == 48000)
        return 6;
      return 1;
    }
    return 4;
  }
  else
  {
    if (a1 != 16000)
    {
      if (a1 == 24000)
        return 3;
      return 1;
    }
    return 2;
  }
}

uint64_t VCTimescalePSOLA_DownSampleTo4kHz(uint64_t a1, __int16 a2, int a3, _WORD *a4, __int16 a5, int a6)
{
  int v6;
  int v7;
  int v8;
  __int16 *v9;
  int v10;

  if (a3 <= 23999)
  {
    if (a3 == 8000)
    {
      v7 = 2;
      v8 = 3;
      v9 = (__int16 *)&VCTimescalePSOLA_kDownsample8kHzTbl;
      v6 = 2;
      goto LABEL_12;
    }
    if (a3 == 16000)
    {
      v6 = 4;
      v7 = 3;
      v8 = 5;
      v9 = (__int16 *)&VCTimescalePSOLA_kDownsample16kHzTbl;
      goto LABEL_12;
    }
    return 1;
  }
  if (a3 == 24000)
  {
    v6 = 6;
    v7 = 3;
    v8 = 7;
    v9 = (__int16 *)&VCTimescalePSOLA_kDownsample24kHzTbl;
    goto LABEL_12;
  }
  if (a3 == 32000)
  {
    v6 = 8;
    v7 = 4;
    v8 = 7;
    v9 = (__int16 *)&VCTimescalePSOLA_kDownsample32kHzTbl;
    goto LABEL_12;
  }
  if (a3 != 48000)
    return 1;
  v6 = 12;
  v7 = 4;
  v8 = 7;
  v9 = (__int16 *)&VCTimescalePSOLA_kDownsample48kHzTbl;
LABEL_12:
  if (a6)
    v10 = v7;
  else
    v10 = 0;
  return VCTimescalePSOLA_DownsampleFast(a1 + 2 * (v8 - 1), (__int16)(a2 - (v8 - 1)), a4, a5, v9, v8, v6, v10);
}

uint64_t VCTimescalePSOLA_SatW32ToW16(int a1)
{
  int v1;

  if (a1 <= -32768)
    v1 = -32768;
  else
    v1 = a1;
  if (v1 >= 0x7FFF)
    return 0x7FFFLL;
  else
    return v1;
}

uint64_t VCTimescalePSOLA_Normalize(uint64_t result)
{
  unsigned int v1;
  _BOOL4 v2;
  unsigned int v3;

  if ((_DWORD)result)
  {
    if ((int)result >= 0)
      v1 = result;
    else
      v1 = -(int)result;
    v2 = v1 < 0x8000;
    if (v1 << (16 * v2) >= 0x800000)
      v3 = 16 * v2;
    else
      v3 = (16 * (v1 < 0x8000)) | 8;
    if (!(v1 << v3 >> 27))
      v3 |= 4u;
    if (!(v1 << v3 >> 29))
      v3 |= 2u;
    if (v1 << v3 >> 30)
      return v3;
    else
      return v3 + 1;
  }
  return result;
}

uint64_t VCTimescalePSOLA_ShiftW32(int a1, int a2)
{
  if (a2 >= 0)
    return (a1 << a2);
  else
    return (a1 >> -(char)a2);
}

_WORD *VCTimescalePSOLA_MemSetW16(_WORD *result, __int16 a2, int a3)
{
  unsigned int v3;

  if (a3 >= 1)
  {
    v3 = a3 + 1;
    do
    {
      *result++ = a2;
      --v3;
    }
    while (v3 > 1);
  }
  return result;
}

float VCTimescalePSOLA_MixVoiceUnvoiceFloatPoint(float *a1, float *a2, float *a3, int a4, float result, float a6)
{
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;

  if (a4 >= 1)
  {
    v6 = (unsigned __int16)a4;
    v7 = 1.0 - result;
    do
    {
      v8 = *a2++;
      v9 = v8;
      v10 = *a3++;
      *a1++ = (float)(v7 * v10) + (float)(result * v9);
      result = result - a6;
      v7 = v7 + a6;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t VCVirtualAVCaptureDevice_OnVideoFrame(uint64_t a1, void *a2, uint64_t a3)
{
  __CVBuffer *v6;
  __CVBuffer *ResizedPixelBuffer;
  CMSampleBufferRef v8;
  CMSampleBufferRef v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 48));
  if (a2)
  {
    v6 = (__CVBuffer *)CFRetain(a2);
    ResizedPixelBuffer = v6;
    if (*(_DWORD *)(a1 + 188) >= 2u)
      goto LABEL_8;
    if (v6)
      CFRelease(v6);
    goto LABEL_6;
  }
  if (*(_DWORD *)(a1 + 188) < 2u)
  {
LABEL_6:
    ResizedPixelBuffer = VCImageResizingConverter_CreateResizedPixelBuffer(*(_QWORD *)(a1 + 192), (__CVBuffer *)a2);
    goto LABEL_8;
  }
  ResizedPixelBuffer = 0;
LABEL_8:
  VCVideoHardwareDumpCollector_RecordActiveCaptureDevice(*(_QWORD *)(a1 + 264), *(void **)(a1 + 120));
  v11 = *(_OWORD *)a3;
  v12 = *(_QWORD *)(a3 + 16);
  v8 = createSampleBufferWithPixelBuffer(ResizedPixelBuffer, &v11);
  if (v8)
  {
    v9 = v8;
    VCVirtualAVCaptureDevice_OnMediaSample(a1, v8, *MEMORY[0x1E0C8A808]);
    CFRelease(v9);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCVirtualAVCaptureDevice_OnVideoFrame_cold_1();
  }
  if (ResizedPixelBuffer)
    CFRelease(ResizedPixelBuffer);
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 48));
}

void sub_1D8F59DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D8F59F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D8F5A0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D8F5A58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

unint64_t VCVirtualAVCaptureDevice_OnMediaSample(uint64_t a1, const void *a2, uint64_t a3)
{
  void *v5;
  unint64_t result;
  uint64_t v7;
  unsigned int v8;

  v5 = *(void **)(a1 + 128);
  result = objc_msgSend(v5, "count");
  if (result)
  {
    v7 = 0;
    v8 = 1;
    do
    {
      VCVirtualAVCaptureDeviceInput_OnMediaSample(objc_msgSend(v5, "objectAtIndexedSubscript:", v7), a2, a3);
      v7 = v8;
      result = objc_msgSend(v5, "count");
    }
    while (result > v8++);
  }
  return result;
}

void sub_1D8F5A998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t VCVideoStreamSendGroup_UpdateVideoStreamAndProcessFrame(uint64_t a1, void *a2, uint64_t a3, int a4, __int128 *a5, uint64_t a6, double a7)
{
  int BaseQualityIndex;
  double v15;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  BaseQualityIndex = VCVideoStream_GetBaseQualityIndex((uint64_t)a2);
  v15 = 0.0;
  if (BaseQualityIndex != 1000)
    v15 = *(double *)(a1 + 808);
  _VCVideoStreamSendGroup_SetFECRatio(a2, v15);
  VCVideoStream_SetAudioSampleTime((uint64_t)a2, a4, a7);
  v17 = *a5;
  v18 = *((_QWORD *)a5 + 2);
  return VCVideoStream_OnVideoFrame((uint64_t)a2, a3, (uint64_t)&v17, a6);
}

uint64_t _VCVideoStreamSendGroup_SetFECRatio(void *a1, double a2)
{
  void *v4;
  void *v6;
  int v7;

  v4 = (void *)objc_msgSend((id)objc_msgSend(a1, "defaultStreamConfig"), "multiwayConfig");
  if (a2 > 0.0 && v4 != 0)
  {
    v6 = v4;
    if ((objc_msgSend(v4, "isOneToOne") & 1) == 0)
    {
      if (objc_msgSend(v6, "repairedFECLevel"))
        v7 = objc_msgSend(v6, "repairedFECLevel");
      else
        v7 = 2;
      a2 = FECUtil_FECLevelofProtectionToRateRatio(v7) + -1.0;
    }
  }
  return VCVideoStream_SetFECRatio((uint64_t)a1, a2);
}

void VCVideoStreamSendGroup_ProcessVideoPriority(uint64_t a1)
{
  int v1;
  uint64_t v3;
  NSObject *v4;
  _QWORD v5[6];
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = atomic_load((unsigned __int8 *)(a1 + 736));
  if (v1 != *(unsigned __int8 *)(a1 + 737))
  {
    v3 = MEMORY[0x1DF086F1C](a1 + 296);
    if (v3)
    {
      *(_BYTE *)(a1 + 737) = v1;
      v4 = *(NSObject **)(a1 + 304);
      v5[0] = MEMORY[0x1E0C809B0];
      v5[1] = 3221225472;
      v5[2] = __VCVideoStreamSendGroup_ProcessVideoPriority_block_invoke;
      v5[3] = &unk_1E9E52210;
      v5[4] = v3;
      v5[5] = a1;
      v6 = v1;
      dispatch_async(v4, v5);
    }
  }
}

unsigned int *VCVideoStreamSendGroup_ProcessVideoEventQueue(uint64_t a1)
{
  unsigned int *result;
  unsigned int *v3;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex i;
  void *ValueAtIndex;

  result = (unsigned int *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 800));
  if (result)
  {
    v3 = result;
    do
    {
      *(double *)(a1 + 808) = VCRedundancyControllerVideo_ConvertRedundancyPercentageToRatio(*v3);
      v4 = *(const __CFArray **)(a1 + 176);
      Count = CFArrayGetCount(v4);
      if (Count >= 1)
      {
        v6 = Count;
        for (i = 0; i != v6; ++i)
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(v4, i);
          _VCVideoStreamSendGroup_SetFECRatio(ValueAtIndex, *(double *)(a1 + 808));
        }
      }
      VCMemoryPool_Free(*(OSQueueHead **)(a1 + 792), v3);
      result = (unsigned int *)CMSimpleQueueDequeue(*(CMSimpleQueueRef *)(a1 + 800));
      v3 = result;
    }
    while (result);
  }
  return result;
}

uint64_t VCVideoStreamSendGroup_OnVideoFrame(uint64_t a1, CMSampleBufferRef sbuf, CMTime *a3, uint64_t a4)
{
  Float64 Seconds;
  double v9;
  unint64_t v10;
  unsigned int v11;
  int v12;
  const __CFString *v13;
  const __CFString *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  const __CFString *v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  const char *v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  uint64_t v31;
  NSObject *v32;
  int v33;
  const char *v34;
  NSObject *v35;
  uint32_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v40;
  uint32_t v41;
  uint64_t v42;
  NSObject *v43;
  int v44;
  CMTime v45;
  _BYTE v46[128];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  CMTime time;
  int v52;
  __int16 v53;
  _BYTE v54[20];
  unsigned int v55;
  __int16 v56;
  double v57;
  __int16 v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  ++*(_DWORD *)(a1 + 868);
  if (*(_BYTE *)(a1 + 312))
  {
    if (!*(_BYTE *)(a1 + 492) || *(_BYTE *)(a1 + 712))
    {
      memset(&v45, 170, sizeof(v45));
      CMSampleBufferGetPresentationTimeStamp(&v45, sbuf);
      time = v45;
      Seconds = CMTimeGetSeconds(&time);
      v9 = Seconds;
      *(float *)&Seconds = Seconds;
      objc_msgSend(*(id *)(a1 + 784), "setCurrentFrameTime:", Seconds);
      LODWORD(v10) = *(_DWORD *)(a1 + 328);
      v11 = VCMediaStreamSendGroup_ModulateTimestampWithSourceTimestamp(a1, (double)v10, v9);
      v12 = _VCVideoStreamSendGroup_DidTimestampRollBackward(a1, (double)v11);
      if (!v12)
      {
        VCVideoStreamSendGroup_ProcessVideoEventQueue(a1);
        v15 = (void *)objc_msgSend(*(id *)(a1 + 784), "activeVideoStreams");
        if (objc_msgSend(v15, "count"))
          ++*(_DWORD *)(a1 + 872);
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v16 = (void *)objc_msgSend(v15, "allValues");
        v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v47, v46, 16);
        if (v17)
        {
          v18 = v17;
          v19 = *(_QWORD *)v48;
          do
          {
            for (i = 0; i != v18; ++i)
            {
              if (*(_QWORD *)v48 != v19)
                objc_enumerationMutation(v16);
              v21 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * i);
              time = *a3;
              VCVideoStreamSendGroup_UpdateVideoStreamAndProcessFrame(a1, v21, (uint64_t)sbuf, v11, (__int128 *)&time.value, a4, v9);
            }
            v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v47, v46, 16);
          }
          while (v18);
        }
        VCVideoStreamSendGroup_ProcessVideoPriority(a1);
        v12 = 0;
        return v12 ^ 1u;
      }
      if (objc_opt_class() == a1)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() < 3)
          return v12 ^ 1u;
        v31 = VRTraceErrorLogLevelToCSTR();
        v32 = *MEMORY[0x1E0CF2758];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          return v12 ^ 1u;
        v33 = *(_DWORD *)(a1 + 328);
        LODWORD(time.value) = 136316418;
        *(CMTimeValue *)((char *)&time.value + 4) = v31;
        LOWORD(time.flags) = 2080;
        *(_QWORD *)((char *)&time.flags + 2) = "VCVideoStreamSendGroup_OnVideoFrame";
        HIWORD(time.epoch) = 1024;
        v52 = 923;
        v53 = 1024;
        *(_DWORD *)v54 = v11;
        *(_WORD *)&v54[4] = 2048;
        *(double *)&v54[6] = v9;
        *(_WORD *)&v54[14] = 1024;
        *(_DWORD *)&v54[16] = v33;
        v34 = " [%s] %s:%d Video frame is too old and modulated timestamp rolled backward – dropping frame. modulatedTime"
              "stamp=%u, frameTimeInSec=%f, rtpTimestampRate=%u";
        v35 = v32;
        v36 = 50;
      }
      else
      {
        if ((objc_opt_respondsToSelector() & 1) != 0)
          v13 = (const __CFString *)objc_msgSend((id)a1, "performSelector:", sel_logPrefix);
        else
          v13 = &stru_1E9E58EE0;
        if ((int)VRTraceGetErrorLogLevelForModule() < 3)
          return v12 ^ 1u;
        v37 = VRTraceErrorLogLevelToCSTR();
        v38 = *MEMORY[0x1E0CF2758];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          return v12 ^ 1u;
        v44 = *(_DWORD *)(a1 + 328);
        LODWORD(time.value) = 136316930;
        *(CMTimeValue *)((char *)&time.value + 4) = v37;
        LOWORD(time.flags) = 2080;
        *(_QWORD *)((char *)&time.flags + 2) = "VCVideoStreamSendGroup_OnVideoFrame";
        HIWORD(time.epoch) = 1024;
        v52 = 923;
        v53 = 2112;
        *(_QWORD *)v54 = v13;
        *(_WORD *)&v54[8] = 2048;
        *(_QWORD *)&v54[10] = a1;
        *(_WORD *)&v54[18] = 1024;
        v55 = v11;
        v56 = 2048;
        v57 = v9;
        v58 = 1024;
        v59 = v44;
        v34 = " [%s] %s:%d %@(%p) Video frame is too old and modulated timestamp rolled backward – dropping frame. modula"
              "tedTimestamp=%u, frameTimeInSec=%f, rtpTimestampRate=%u";
        v35 = v38;
        v36 = 70;
      }
      _os_log_error_impl(&dword_1D8A54000, v35, OS_LOG_TYPE_ERROR, v34, (uint8_t *)&time, v36);
      return v12 ^ 1u;
    }
    if (objc_opt_class() != a1)
    {
      if ((objc_opt_respondsToSelector() & 1) != 0)
        v22 = (const __CFString *)objc_msgSend((id)a1, "performSelector:", sel_logPrefix);
      else
        v22 = &stru_1E9E58EE0;
      if ((int)VRTraceGetErrorLogLevelForModule() < 5)
        return 1;
      v42 = VRTraceErrorLogLevelToCSTR();
      v43 = *MEMORY[0x1E0CF2758];
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        return 1;
      LODWORD(time.value) = 136316162;
      *(CMTimeValue *)((char *)&time.value + 4) = v42;
      LOWORD(time.flags) = 2080;
      *(_QWORD *)((char *)&time.flags + 2) = "VCVideoStreamSendGroup_OnVideoFrame";
      HIWORD(time.epoch) = 1024;
      v52 = 910;
      v53 = 2112;
      *(_QWORD *)v54 = v22;
      *(_WORD *)&v54[8] = 2048;
      *(_QWORD *)&v54[10] = a1;
      v26 = " [%s] %s:%d %@(%p) Sync source timestamp information is not yet available. Dropping video frame.";
      v30 = v43;
      goto LABEL_48;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() < 5)
      return 1;
    v40 = VRTraceErrorLogLevelToCSTR();
    v24 = *MEMORY[0x1E0CF2758];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      return 1;
    LODWORD(time.value) = 136315650;
    *(CMTimeValue *)((char *)&time.value + 4) = v40;
    LOWORD(time.flags) = 2080;
    *(_QWORD *)((char *)&time.flags + 2) = "VCVideoStreamSendGroup_OnVideoFrame";
    HIWORD(time.epoch) = 1024;
    v52 = 910;
    v26 = " [%s] %s:%d Sync source timestamp information is not yet available. Dropping video frame.";
LABEL_43:
    v30 = v24;
    v41 = 28;
LABEL_49:
    _os_log_impl(&dword_1D8A54000, v30, OS_LOG_TYPE_DEFAULT, v26, (uint8_t *)&time, v41);
    return 1;
  }
  if (objc_opt_class() == a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      v23 = VRTraceErrorLogLevelToCSTR();
      v24 = *MEMORY[0x1E0CF2758];
      v25 = *MEMORY[0x1E0CF2758];
      if (!*MEMORY[0x1E0CF2748])
      {
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
          VCVideoStreamSendGroup_OnVideoFrame_cold_1();
        return 1;
      }
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(time.value) = 136315650;
        *(CMTimeValue *)((char *)&time.value + 4) = v23;
        LOWORD(time.flags) = 2080;
        *(_QWORD *)((char *)&time.flags + 2) = "VCVideoStreamSendGroup_OnVideoFrame";
        HIWORD(time.epoch) = 1024;
        v52 = 905;
        v26 = " [%s] %s:%d video no-op no MKM";
        goto LABEL_43;
      }
    }
  }
  else
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
      v14 = (const __CFString *)objc_msgSend((id)a1, "performSelector:", sel_logPrefix);
    else
      v14 = &stru_1E9E58EE0;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      v27 = VRTraceErrorLogLevelToCSTR();
      v28 = *MEMORY[0x1E0CF2758];
      v29 = *MEMORY[0x1E0CF2758];
      if (!*MEMORY[0x1E0CF2748])
      {
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(time.value) = 136316162;
          *(CMTimeValue *)((char *)&time.value + 4) = v27;
          LOWORD(time.flags) = 2080;
          *(_QWORD *)((char *)&time.flags + 2) = "VCVideoStreamSendGroup_OnVideoFrame";
          HIWORD(time.epoch) = 1024;
          v52 = 905;
          v53 = 2112;
          *(_QWORD *)v54 = v14;
          *(_WORD *)&v54[8] = 2048;
          *(_QWORD *)&v54[10] = a1;
          _os_log_debug_impl(&dword_1D8A54000, v28, OS_LOG_TYPE_DEBUG, " [%s] %s:%d %@(%p) video no-op no MKM", (uint8_t *)&time, 0x30u);
        }
        return 1;
      }
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(time.value) = 136316162;
        *(CMTimeValue *)((char *)&time.value + 4) = v27;
        LOWORD(time.flags) = 2080;
        *(_QWORD *)((char *)&time.flags + 2) = "VCVideoStreamSendGroup_OnVideoFrame";
        HIWORD(time.epoch) = 1024;
        v52 = 905;
        v53 = 2112;
        *(_QWORD *)v54 = v14;
        *(_WORD *)&v54[8] = 2048;
        *(_QWORD *)&v54[10] = a1;
        v26 = " [%s] %s:%d %@(%p) video no-op no MKM";
        v30 = v28;
LABEL_48:
        v41 = 48;
        goto LABEL_49;
      }
    }
  }
  return 1;
}

uint64_t _VCVideoStreamSendGroup_DidTimestampRollBackward(uint64_t a1, double a2)
{
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;

  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 496));
  if (*(_BYTE *)(a1 + 712))
  {
    v4 = *(_DWORD *)(a1 + 696);
    v6 = v4 >= a2;
    v5 = v4 - a2;
    v6 = v6 || v5 >= 0x7FFFFFFF;
    v7 = !v6;
  }
  else
  {
    v7 = 0;
  }
  pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 496));
  return v7;
}

void VCNAT64ResolverCleanup()
{
  uint64_t v0;
  NSObject *v1;
  int v2;
  uint64_t v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (sharedResolver && !CFDictionaryGetCount(*(CFDictionaryRef *)sharedResolver))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
    {
      v0 = VRTraceErrorLogLevelToCSTR();
      v1 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v2 = 136315650;
        v3 = v0;
        v4 = 2080;
        v5 = "VCNAT64ResolverCleanup";
        v6 = 1024;
        v7 = 91;
        _os_log_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCNAT64ResolverCleanup: no more registered callbackContexts left. Destroying NAT64Resolver", (uint8_t *)&v2, 0x1Cu);
      }
    }
    dispatch_release(*(dispatch_object_t *)(sharedResolver + 8));
    dispatch_release(*(dispatch_object_t *)(sharedResolver + 16));
    CFRelease(*(CFTypeRef *)sharedResolver);
    free((void *)sharedResolver);
    sharedResolver = 0;
  }
}

void VCNAT64ReleaseCallBackContext(CFArrayRef *a1)
{
  const __CFArray *v2;
  int Count;
  CFIndex v4;
  void *ValueAtIndex;
  CFArrayRef v6;

  if (a1)
  {
    if (*((_BYTE *)a1 + 32))
    {
      v2 = *a1;
      if (*a1)
      {
        Count = CFArrayGetCount(v2);
        v4 = (Count - 1);
        if (Count - 1 >= 0)
        {
          do
          {
            ValueAtIndex = (void *)CFArrayGetValueAtIndex(*a1, v4);
            free(ValueAtIndex);
            CFArrayRemoveValueAtIndex(*a1, v4--);
            --Count;
          }
          while (Count);
        }
        CFRelease(*a1);
      }
      v6 = a1[3];
      if (v6)
        free(v6);
      free(a1);
    }
    else
    {
      *((_BYTE *)a1 + 33) = 1;
    }
  }
}

uint64_t VCNAT64ResolverRegisterForPrefixUpdate(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  CFStringRef v8;
  const __CFDictionary **SharedInstance;
  const __CFDictionary *v10;
  _QWORD *v11;
  void *v12;
  const __CFArray **Value;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  const __CFArray **v17;
  char *v18;
  CFMutableArrayRef Mutable;
  unsigned int v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  _BYTE buf[24];
  _BYTE v28[24];
  NSObject *v29;
  unsigned int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    v6 = VRTraceErrorLogLevelToCSTR();
    v7 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = v6;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "VCNAT64ResolverRegisterForPrefixUpdate";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)v28 = 241;
      *(_WORD *)&v28[4] = 1024;
      *(_DWORD *)&v28[6] = a3;
      *(_WORD *)&v28[10] = 2080;
      *(_QWORD *)&v28[12] = a1;
      _os_log_impl(&dword_1D8A54000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCNAT64ResolverRegisterForPrefixUpdate: begin registration of context %08X on interface %s", buf, 0x2Cu);
    }
  }
  pthread_mutex_lock(&sharedInstanceLock);
  v8 = CFStringCreateWithFormat(0, 0, CFSTR("%s"), a1);
  SharedInstance = (const __CFDictionary **)VCNAT64ResolverGetSharedInstance();
  if (SharedInstance)
  {
    v10 = *SharedInstance;
    v11 = malloc_type_calloc(1uLL, 0x10uLL, 0x80040803F642BuLL);
    if (v11)
    {
      v12 = v11;
      *v11 = a2;
      v11[1] = a3;
      if (CFDictionaryContainsKey(v10, v8))
      {
        Value = (const __CFArray **)CFDictionaryGetValue(v10, v8);
        if ((VCNAT64ResolverGetListenerIndexForContext(*Value, a3) & 0x80000000) == 0)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            v14 = VRTraceErrorLogLevelToCSTR();
            v15 = *MEMORY[0x1E0CF2758];
            v16 = *MEMORY[0x1E0CF2758];
            if (*MEMORY[0x1E0CF2748])
            {
              if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136316162;
                *(_QWORD *)&buf[4] = v14;
                *(_WORD *)&buf[12] = 2080;
                *(_QWORD *)&buf[14] = "VCNAT64ResolverRegisterForPrefixUpdate";
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)v28 = 290;
                *(_WORD *)&v28[4] = 1024;
                *(_DWORD *)&v28[6] = a3;
                *(_WORD *)&v28[10] = 2080;
                *(_QWORD *)&v28[12] = a1;
                _os_log_impl(&dword_1D8A54000, v15, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCNAT64ResolverRegisterForPrefixUpdate: context %08X has already been registered for interface %s", buf, 0x2Cu);
              }
            }
            else if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136316162;
              *(_QWORD *)&buf[4] = v14;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = "VCNAT64ResolverRegisterForPrefixUpdate";
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)v28 = 290;
              *(_WORD *)&v28[4] = 1024;
              *(_DWORD *)&v28[6] = a3;
              *(_WORD *)&v28[10] = 2080;
              *(_QWORD *)&v28[12] = a1;
              _os_log_debug_impl(&dword_1D8A54000, v15, OS_LOG_TYPE_DEBUG, " [%s] %s:%d VCNAT64ResolverRegisterForPrefixUpdate: context %08X has already been registered for interface %s", buf, 0x2Cu);
            }
          }
          v25 = 49;
          goto LABEL_42;
        }
LABEL_16:
        CFArrayAppendValue(*Value, v12);
        pthread_mutex_unlock(&sharedInstanceLock);
        CFRelease(v8);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          v23 = VRTraceErrorLogLevelToCSTR();
          v24 = *MEMORY[0x1E0CF2758];
          v25 = 0;
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
            return v25;
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = v23;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "VCNAT64ResolverRegisterForPrefixUpdate";
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)v28 = 300;
          *(_WORD *)&v28[4] = 1024;
          *(_DWORD *)&v28[6] = a3;
          *(_WORD *)&v28[10] = 2080;
          *(_QWORD *)&v28[12] = a1;
          _os_log_impl(&dword_1D8A54000, v24, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCNAT64ResolverRegisterForPrefixUpdate: succesfully registered context %08X on interface %s", buf, 0x2Cu);
        }
        return 0;
      }
      v17 = (const __CFArray **)malloc_type_calloc(1uLL, 0x28uLL, 0x1030040BF05D1CBuLL);
      if (v17)
      {
        Value = v17;
        v18 = strdup(a1);
        Value[3] = (const __CFArray *)v18;
        if (v18)
        {
          Mutable = CFArrayCreateMutable(0, 1, 0);
          *Value = Mutable;
          if (Mutable)
          {
            v20 = if_nametoindex(a1);
            v21 = *(NSObject **)(sharedResolver + 8);
            dispatch_retain(v21);
            v22 = *(NSObject **)(sharedResolver + 16);
            dispatch_retain(v22);
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 0x40000000;
            *(_QWORD *)&buf[16] = __VCNAT64ResolveNAT64Prefix_block_invoke;
            *(_QWORD *)v28 = &__block_descriptor_tmp_8_0;
            *(_QWORD *)&v28[8] = Value;
            *(_QWORD *)&v28[16] = v21;
            v29 = v22;
            v30 = v20;
            nw_nat64_copy_prefixes_async();
            CFDictionaryAddValue(v10, v8, Value);
            goto LABEL_16;
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
              VCNAT64ResolverRegisterForPrefixUpdate_cold_5();
          }
        }
        else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            VCNAT64ResolverRegisterForPrefixUpdate_cold_4();
        }
        *((_BYTE *)Value + 32) = 1;
        VCNAT64ReleaseCallBackContext(Value);
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        v25 = 3;
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          VCNAT64ResolverRegisterForPrefixUpdate_cold_3();
        goto LABEL_42;
      }
      v25 = 3;
LABEL_42:
      free(v12);
      goto LABEL_43;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      v25 = 3;
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCNAT64ResolverRegisterForPrefixUpdate_cold_2();
      goto LABEL_43;
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    v25 = 3;
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCNAT64ResolverRegisterForPrefixUpdate_cold_1();
    goto LABEL_43;
  }
  v25 = 3;
LABEL_43:
  if (v8)
    CFRelease(v8);
  VCNAT64ResolverCleanup();
  pthread_mutex_unlock(&sharedInstanceLock);
  return v25;
}

uint64_t VCNAT64ResolverGetSharedInstance()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  void *v3;
  CFMutableDictionaryRef Mutable;
  NSObject *CustomRootQueue;
  dispatch_queue_t v6;
  dispatch_queue_t v7;
  int v9;
  uint64_t v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v0 = sharedResolver;
  if (!sharedResolver)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      v1 = VRTraceErrorLogLevelToCSTR();
      v2 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v9 = 136315650;
        v10 = v1;
        v11 = 2080;
        v12 = "VCNAT64ResolverGetSharedInstance";
        v13 = 1024;
        v14 = 56;
        _os_log_impl(&dword_1D8A54000, v2, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCNAT64ResolverGetSharedInstance: shared instance of NAT64Resolver does not exist. Creating it...", (uint8_t *)&v9, 0x1Cu);
      }
    }
    v3 = malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
    if (v3)
    {
      v0 = (uint64_t)v3;
      Mutable = CFDictionaryCreateMutable(0, 2, MEMORY[0x1E0C9AEB8], 0);
      *(_QWORD *)v0 = Mutable;
      if (Mutable)
      {
        CustomRootQueue = VCDispatchQueue_GetCustomRootQueue(37);
        v6 = dispatch_queue_create_with_target_V2("com.apple.AVConference.VCNAT64Resolver.dnsCallbackQueue", 0, CustomRootQueue);
        *(_QWORD *)(v0 + 8) = v6;
        if (v6)
        {
          v7 = dispatch_queue_create_with_target_V2("com.apple.AVConference.VCNAT64Resolver.dnsRetryQueue", 0, CustomRootQueue);
          *(_QWORD *)(v0 + 16) = v7;
          if (v7)
          {
            sharedResolver = v0;
            return v0;
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
              VCNAT64ResolverGetSharedInstance_cold_4();
          }
        }
        else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            VCNAT64ResolverGetSharedInstance_cold_3();
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          VCNAT64ResolverGetSharedInstance_cold_2();
      }
      if (*(_QWORD *)v0)
        CFRelease(*(CFTypeRef *)v0);
      free((void *)v0);
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCNAT64ResolverGetSharedInstance_cold_1();
    }
    return 0;
  }
  return v0;
}

void VCNAT64ResolveNAT64Prefix(uint64_t a1, uint64_t a2, NSObject *a3, NSObject *a4)
{
  if (a2)
  {
    nw_nat64_copy_prefixes_async();
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCNAT64ResolveNAT64Prefix_cold_1();
    }
    dispatch_release(a3);
    dispatch_release(a4);
  }
}

uint64_t VCNAT64ResolverGetListenerIndexForContext(const __CFArray *a1, uint64_t a2)
{
  int Count;
  CFIndex v5;
  _QWORD *ValueAtIndex;

  Count = CFArrayGetCount(a1);
  v5 = (Count - 1);
  if (Count - 1 < 0)
    return 0xFFFFFFFFLL;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a1, v5);
    if (ValueAtIndex)
    {
      if (ValueAtIndex[1] == a2)
        break;
    }
    --Count;
    --v5;
    if (Count < 1)
      return 0xFFFFFFFFLL;
  }
  return (Count - 1);
}

uint64_t VCNAT64ResolverDeregisterAll(void *a1)
{
  CFDictionaryRef *SharedInstance;
  const __CFDictionary *Copy;
  uint64_t v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock(&sharedInstanceLock);
  SharedInstance = (CFDictionaryRef *)VCNAT64ResolverGetSharedInstance();
  if (SharedInstance)
  {
    Copy = CFDictionaryCreateCopy(0, *SharedInstance);
    CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)VCNAT64ResolverDeregisterFromInterface, a1);
    CFRelease(Copy);
    pthread_mutex_unlock(&sharedInstanceLock);
    return 0;
  }
  else
  {
    pthread_mutex_unlock(&sharedInstanceLock);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      v5 = VRTraceErrorLogLevelToCSTR();
      v6 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v7 = 136315650;
        v8 = v5;
        v9 = 2080;
        v10 = "VCNAT64ResolverDeregisterAll";
        v11 = 1024;
        v12 = 328;
        _os_log_impl(&dword_1D8A54000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCNAT64ResolverDeregisterAll: nothing to deregister", (uint8_t *)&v7, 0x1Cu);
      }
    }
    return 3;
  }
}

void VCNAT64ResolverDeregisterFromInterface(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __CFDictionary *v5;
  const __CFArray *v6;
  unsigned int ListenerIndexForContext;
  unsigned int v8;
  CFIndex v9;
  void *ValueAtIndex;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  CFStringRef v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  _BYTE v26[14];
  __int16 v27;
  unsigned int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = *(__CFDictionary **)sharedResolver;
  v6 = *(const __CFArray **)a2;
  ListenerIndexForContext = VCNAT64ResolverGetListenerIndexForContext(*(const __CFArray **)a2, a3);
  if ((ListenerIndexForContext & 0x80000000) == 0)
  {
    v8 = ListenerIndexForContext;
    v9 = ListenerIndexForContext;
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(v6, ListenerIndexForContext);
    if (ValueAtIndex)
    {
      v11 = ValueAtIndex;
      if (*((_QWORD *)ValueAtIndex + 1) == a3)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          v12 = VRTraceErrorLogLevelToCSTR();
          v13 = *MEMORY[0x1E0CF2758];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
          {
            v14 = *(_QWORD *)(a2 + 24);
            *(_DWORD *)buf = 136316418;
            v20 = v12;
            v21 = 2080;
            v22 = "VCNAT64ResolverDeregisterFromInterface";
            v23 = 1024;
            v24 = 152;
            v25 = 1024;
            *(_DWORD *)v26 = a3;
            *(_WORD *)&v26[4] = 2080;
            *(_QWORD *)&v26[6] = v14;
            v27 = 1024;
            v28 = v8;
            _os_log_impl(&dword_1D8A54000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCNAT64ResolverDeregisterFromInterface: removing context %08x from interface %s at index %d", buf, 0x32u);
          }
        }
        CFArrayRemoveValueAtIndex(v6, v9);
        free(v11);
      }
    }
  }
  if (!CFArrayGetCount(v6))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
    {
      v15 = VRTraceErrorLogLevelToCSTR();
      v16 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v17 = *(_QWORD *)(a2 + 24);
        *(_DWORD *)buf = 136315906;
        v20 = v15;
        v21 = 2080;
        v22 = "VCNAT64ResolverDeregisterFromInterface";
        v23 = 1024;
        v24 = 159;
        v25 = 2080;
        *(_QWORD *)v26 = v17;
        _os_log_impl(&dword_1D8A54000, v16, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCNAT64ResolverDeregisterFromInterface: removing interface %s as it has no listeners", buf, 0x26u);
      }
    }
    v18 = CFStringCreateWithFormat(0, 0, CFSTR("%s"), *(_QWORD *)(a2 + 24));
    CFDictionaryRemoveValue(v5, v18);
    CFRelease(v18);
    VCNAT64ReleaseCallBackContext((CFArrayRef *)a2);
    VCNAT64ResolverCleanup();
  }
}

uint64_t VCNAT64ResolverGetPrefix(uint64_t a1, _QWORD *a2)
{
  uint64_t SharedInstance;
  CFDictionaryRef *v5;
  CFStringRef v6;
  char *Value;
  uint64_t v8;

  *a2 = 0;
  a2[1] = 0;
  pthread_mutex_lock(&sharedInstanceLock);
  SharedInstance = VCNAT64ResolverGetSharedInstance();
  if (SharedInstance)
  {
    v5 = (CFDictionaryRef *)SharedInstance;
    v6 = CFStringCreateWithFormat(0, 0, CFSTR("%s"), a1);
    Value = (char *)CFDictionaryGetValue(*v5, v6);
    CFRelease(v6);
    if (Value)
    {
      v8 = 0;
      *(_OWORD *)a2 = *(_OWORD *)(Value + 8);
    }
    else
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          VCNAT64ResolverGetPrefix_cold_2();
      }
      v8 = 22;
    }
  }
  else
  {
    v8 = 3;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCNAT64ResolverGetPrefix_cold_1();
    }
  }
  VCNAT64ResolverCleanup();
  pthread_mutex_unlock(&sharedInstanceLock);
  return v8;
}

_DWORD *VCNAT64ResolverIsNonzeroPrefix(_DWORD *result)
{
  if (result)
    return (_DWORD *)(*result != 0);
  return result;
}

BOOL VCNAT64ResolverIsBehindNat64(uint64_t a1)
{
  BOOL v1;
  _QWORD v3[3];

  v3[2] = *MEMORY[0x1E0C80C00];
  v3[0] = 0;
  v3[1] = 0;
  if (VCNAT64ResolverGetPrefix(a1, v3))
    v1 = 1;
  else
    v1 = LODWORD(v3[0]) == 0;
  return !v1;
}

__n128 VCSDInfoConstructWithIPPorts@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, __int16 a4@<W3>, uint64_t a5@<X8>)
{
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)(a5 + 112) = 0;
  result.n128_u64[0] = 0;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  if (a1)
  {
    if (a2)
    {
      *(_DWORD *)a5 = 1;
      v6 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)(a5 + 8) = *(_OWORD *)a1;
      *(_OWORD *)(a5 + 24) = v6;
      *(_QWORD *)(a5 + 40) = *(_QWORD *)(a1 + 32);
      result = *(__n128 *)a2;
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a5 + 48) = *(_OWORD *)a2;
      *(_OWORD *)(a5 + 64) = v7;
      *(_QWORD *)(a5 + 80) = *(_QWORD *)(a2 + 32);
      *(_BYTE *)(a5 + 88) = a3;
      *(_WORD *)(a5 + 90) = a4;
    }
  }
  return result;
}

uint64_t VCSDInfoConstructWithDatagramChannel@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t result;

  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_DWORD *)a5 = 4;
  *(_QWORD *)(a5 + 112) = a1;
  *(_DWORD *)(a5 + 96) = a4;
  *(_QWORD *)(a5 + 12) = a2;
  *(_WORD *)(a5 + 20) = a3;
  result = VCDatagramChannelIDS_Token(a1);
  *(_DWORD *)(a5 + 8) = result;
  return result;
}

double VCSDInfoConstructWithNWConnection@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)(a2 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)a2 = 5;
  *(_QWORD *)(a2 + 8) = a1;
  return result;
}

void VCSDInfoConstructWithSocket(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int sa_family;
  int v7;
  __int128 v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  socklen_t v13;
  int v14;
  socklen_t v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  sockaddr v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a3 + 112) = 0;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_QWORD *)&v24.sa_len = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v24.sa_data[6] = 0xAAAAAAAAAAAAAAAALL;
  v15 = 16;
  if (getpeername(a1, &v24, &v15) != -1)
  {
    *(_DWORD *)a3 = 3;
    sa_family = v24.sa_family;
    *(_DWORD *)(a3 + 8) = a1;
    *(_DWORD *)(a3 + 12) = sa_family;
    SAToIPPORT();
    v7 = *(_DWORD *)(a3 + 12);
    goto LABEL_8;
  }
  if (a2)
  {
    *(_DWORD *)a3 = 2;
    if ((*(_DWORD *)a2 & 1) != 0)
      v7 = 30;
    else
      v7 = 2;
    *(_DWORD *)(a3 + 8) = a1;
    *(_DWORD *)(a3 + 12) = v7;
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a3 + 16) = *(_OWORD *)a2;
    *(_OWORD *)(a3 + 32) = v8;
    *(_QWORD *)(a3 + 48) = *(_QWORD *)(a2 + 32);
LABEL_8:
    if (v7 == 30)
    {
      v13 = 4;
      v14 = 0;
      if (!getsockopt(a1, 41, 36, &v14, &v13))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          v9 = VRTraceErrorLogLevelToCSTR();
          v10 = *MEMORY[0x1E0CF2758];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315906;
            v17 = v9;
            v18 = 2080;
            v19 = "VCSDInfoConstructWithSocket";
            v20 = 1024;
            v21 = 85;
            v22 = 1024;
            v23 = v14;
            _os_log_impl(&dword_1D8A54000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Get ipv6 tclass socket option for DSCP value=%d", buf, 0x22u);
          }
        }
        *(_DWORD *)(a3 + 56) = v14;
      }
    }
    return;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    v11 = VRTraceErrorLogLevelToCSTR();
    v12 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCSDInfoConstructWithSocket_cold_1(v11, a1, v12);
  }
}

BOOL VCSDInfoIsPacketFromKnownRemote(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  _BOOL8 result;
  uint64_t v8;
  NSObject *v9;
  _BOOL4 v10;
  int v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  int v26;
  int v27;
  int ErrorLogLevelForModule;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  _BOOL4 v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  int v43;
  __int16 v44;
  _BYTE v45[10];
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    switch(*a2)
    {
      case 1:
        v4 = (uint64_t)(a2 + 12);
        return VCSDInfoIsSrcDstInfoMatchedWithIP((int *)a1, v4);
      case 2:
      case 3:
        v4 = (uint64_t)(a2 + 4);
        return VCSDInfoIsSrcDstInfoMatchedWithIP((int *)a1, v4);
      case 4:
        v15 = VCDatagramChannelIDS_Token(*((_QWORD *)a2 + 14));
        if (*(_DWORD *)a1 != 4)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() < 3)
            return 0;
          VRTraceErrorLogLevelToCSTR();
          result = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR);
          if (result)
          {
            VCSDInfoIsPacketFromKnownRemote_cold_1();
            return 0;
          }
          return result;
        }
        v16 = v15;
        v17 = VCDatagramChannelIDS_Token(*(_QWORD *)(a1 + 112));
        if (v17 == v16)
          return 1;
        v18 = v17;
        if ((int)VRTraceGetErrorLogLevelForModule() < 5)
          return 0;
        v19 = VRTraceErrorLogLevelToCSTR();
        v20 = *MEMORY[0x1E0CF2758];
        v21 = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT);
        result = 0;
        if (!v21)
          return result;
        v38 = 136316162;
        v39 = v19;
        v40 = 2080;
        v41 = "VCSDInfoIsSrcDstInfoMatchedWithChannelToken";
        v42 = 1024;
        v43 = 157;
        v44 = 1024;
        *(_DWORD *)v45 = v18;
        *(_WORD *)&v45[4] = 1024;
        *(_DWORD *)&v45[6] = v16;
        v12 = " [%s] %s:%d ChannelToken mismatch! expected %d actual %d";
        v13 = v20;
        v14 = 40;
        goto LABEL_41;
      case 5:
        v22 = *((_QWORD *)a2 + 1);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          v23 = VRTraceErrorLogLevelToCSTR();
          v24 = *MEMORY[0x1E0CF2758];
          v25 = *MEMORY[0x1E0CF2758];
          if (*MEMORY[0x1E0CF2748])
          {
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
            {
              v26 = *(_DWORD *)a1;
              v38 = 136316162;
              v39 = v23;
              v40 = 2080;
              v41 = "VCSDInfoIsSrcDstInfoMatchedWithNWConnection";
              v42 = 1024;
              v43 = 131;
              v44 = 2048;
              *(_QWORD *)v45 = v22;
              *(_WORD *)&v45[8] = 1024;
              LODWORD(v46) = v26;
              _os_log_impl(&dword_1D8A54000, v24, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d matching NW %p to srcDstInfo mode %d", (uint8_t *)&v38, 0x2Cu);
            }
          }
          else if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
          {
            v36 = *(_DWORD *)a1;
            v38 = 136316162;
            v39 = v23;
            v40 = 2080;
            v41 = "VCSDInfoIsSrcDstInfoMatchedWithNWConnection";
            v42 = 1024;
            v43 = 131;
            v44 = 2048;
            *(_QWORD *)v45 = v22;
            *(_WORD *)&v45[8] = 1024;
            LODWORD(v46) = v36;
            _os_log_debug_impl(&dword_1D8A54000, v24, OS_LOG_TYPE_DEBUG, " [%s] %s:%d matching NW %p to srcDstInfo mode %d", (uint8_t *)&v38, 0x2Cu);
          }
        }
        v27 = *(_DWORD *)a1;
        ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
        if (v27 == 5)
        {
          if (ErrorLogLevelForModule >= 8)
          {
            v29 = VRTraceErrorLogLevelToCSTR();
            v30 = *MEMORY[0x1E0CF2758];
            v31 = *MEMORY[0x1E0CF2758];
            if (*MEMORY[0x1E0CF2748])
            {
              if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
              {
                v32 = *(_QWORD *)(a1 + 8);
                v38 = 136316162;
                v39 = v29;
                v40 = 2080;
                v41 = "VCSDInfoIsSrcDstInfoMatchedWithNWConnection";
                v42 = 1024;
                v43 = 134;
                v44 = 2048;
                *(_QWORD *)v45 = v22;
                *(_WORD *)&v45[8] = 2048;
                v46 = v32;
                _os_log_impl(&dword_1D8A54000, v30, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d matching NW %p to srcDstInfo conn %p", (uint8_t *)&v38, 0x30u);
              }
            }
            else if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
            {
              v37 = *(_QWORD *)(a1 + 8);
              v38 = 136316162;
              v39 = v29;
              v40 = 2080;
              v41 = "VCSDInfoIsSrcDstInfoMatchedWithNWConnection";
              v42 = 1024;
              v43 = 134;
              v44 = 2048;
              *(_QWORD *)v45 = v22;
              *(_WORD *)&v45[8] = 2048;
              v46 = v37;
              _os_log_debug_impl(&dword_1D8A54000, v30, OS_LOG_TYPE_DEBUG, " [%s] %s:%d matching NW %p to srcDstInfo conn %p", (uint8_t *)&v38, 0x30u);
            }
          }
          if (*(_QWORD *)(a1 + 8) == v22)
            return 1;
        }
        else if (ErrorLogLevelForModule >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            VCSDInfoIsPacketFromKnownRemote_cold_2();
        }
        if ((int)VRTraceGetErrorLogLevelForModule() < 5)
          return 0;
        v33 = VRTraceErrorLogLevelToCSTR();
        v34 = *MEMORY[0x1E0CF2758];
        v35 = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT);
        result = 0;
        if (!v35)
          return result;
        v38 = 136315650;
        v39 = v33;
        v40 = 2080;
        v41 = "VCSDInfoIsSrcDstInfoMatchedWithNWConnection";
        v42 = 1024;
        v43 = 140;
        v12 = " [%s] %s:%d NW Connection mismatch!";
        v13 = v34;
        v14 = 28;
LABEL_41:
        _os_log_impl(&dword_1D8A54000, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v38, v14);
        break;
      default:
        if ((int)VRTraceGetErrorLogLevelForModule() < 5)
          return 0;
        v8 = VRTraceErrorLogLevelToCSTR();
        v9 = *MEMORY[0x1E0CF2758];
        v10 = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT);
        result = 0;
        if (!v10)
          return result;
        v11 = *a2;
        v38 = 136315906;
        v39 = v8;
        v40 = 2080;
        v41 = "VCSDInfoIsPacketFromKnownRemote";
        v42 = 1024;
        v43 = 189;
        v44 = 1024;
        *(_DWORD *)v45 = v11;
        v12 = " [%s] %s:%d invalid packet srcDstInfo mode %d";
        v13 = v9;
        v14 = 34;
        goto LABEL_41;
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    v5 = VRTraceErrorLogLevelToCSTR();
    v6 = *MEMORY[0x1E0CF2758];
    result = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v38 = 136316162;
    v39 = v5;
    v40 = 2080;
    v41 = "VCSDInfoIsPacketFromKnownRemote";
    v42 = 1024;
    v43 = 168;
    v44 = 1024;
    *(_DWORD *)v45 = a1 == 0;
    *(_WORD *)&v45[4] = 1024;
    *(_DWORD *)&v45[6] = a2 == 0;
    _os_log_error_impl(&dword_1D8A54000, v6, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid parameters! cachedSrcDstInfo isValid:%d, packetSrcDstInfo isValid:%d!", (uint8_t *)&v38, 0x28u);
  }
  return 0;
}

BOOL VCSDInfoIsSrcDstInfoMatchedWithIP(int *a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  NSObject *v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  NSObject *v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[22];
  __int128 v28;
  __int128 v29;
  _BYTE v30[22];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      v4 = VRTraceErrorLogLevelToCSTR();
      v5 = *MEMORY[0x1E0CF2758];
      result = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      VCSDInfoIsSrcDstInfoMatchedWithIP_cold_1(v4, v5, v7);
    }
    return 0;
  }
  v2 = *a1;
  if (*a1 == 3)
    return 1;
  if (v2 == 2)
  {
    if ((a1[4] & 1) == (*(_DWORD *)a2 & 1))
    {
      if ((a1[4] & 1) == 0)
      {
        v3 = a1[9];
LABEL_14:
        if (v3 == *(_DWORD *)(a2 + 20))
          return 1;
        goto LABEL_25;
      }
      v8 = *(_QWORD *)(a1 + 9);
      v9 = *(_QWORD *)(a2 + 20);
      v10 = *(_QWORD *)(a1 + 11);
      goto LABEL_21;
    }
LABEL_25:
    *(_QWORD *)&v30[14] = 0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v29 = v12;
    *(_OWORD *)v30 = v12;
    v28 = v12;
    *(_QWORD *)&v27[14] = 0xAAAAAAAAAAAAAAAALL;
    v26 = v12;
    *(_OWORD *)v27 = v12;
    v25 = v12;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      v13 = VRTraceErrorLogLevelToCSTR();
      v14 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v15 = 136316162;
        v16 = v13;
        v17 = 2080;
        v18 = "VCSDInfoIsSrcDstInfoMatchedWithIP";
        v19 = 1024;
        v20 = 119;
        v21 = 2080;
        v22 = IPPORTToStringWithSize();
        v23 = 2080;
        v24 = IPPORTToStringWithSize();
        _os_log_impl(&dword_1D8A54000, v14, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d IPPort mismatch! expected %s actual %s", (uint8_t *)&v15, 0x30u);
      }
    }
    return 0;
  }
  if (v2 == 1)
  {
    if ((a1[12] & 1) == (*(_DWORD *)a2 & 1))
    {
      if ((a1[12] & 1) == 0)
      {
        v3 = a1[17];
        goto LABEL_14;
      }
      v8 = *(_QWORD *)(a1 + 17);
      v9 = *(_QWORD *)(a2 + 20);
      v10 = *(_QWORD *)(a1 + 19);
LABEL_21:
      if (v8 == v9 && v10 == *(_QWORD *)(a2 + 28))
        return 1;
      goto LABEL_25;
    }
    goto LABEL_25;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    result = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    VCSDInfoIsSrcDstInfoMatchedWithIP_cold_2();
  }
  return 0;
}

char *VCSDInfoToStringRepresentation(uint64_t a1, char *a2)
{
  char *result;

  result = 0;
  if (a1 && a2)
  {
    switch(*(_DWORD *)a1)
    {
      case 1:
        IPPORTToStringWithSize();
        IPPORTToStringWithSize();
        sprintf(a2, "VCSourceDestinationInfo IPPort mode with IP port: %s-%s isRelay %d, relayChannelNumber %d");
        break;
      case 2:
        IPPORTToStringWithSize();
        sprintf(a2, "VCSourceDestinationInfo BoundSocket mode with socket: %d destination: %s");
        break;
      case 3:
        sprintf(a2, "VCSourceDestinationInfo ConnectedSocket mode with socket: %d");
        break;
      case 4:
        VCDatagramChannelIDS_Token(*(_QWORD *)(a1 + 112));
        sprintf(a2, "VCSourceDestinationInfo IDSLink mode with datagramChannel:%p datagramToken: %d linkID: %d");
        break;
      case 5:
        sprintf(a2, "VCSourceDestinationInfo NW mode with conn: %p");
        break;
      default:
        sprintf(a2, "Unrecogized VCSourceDestinationInfoMode %d");
        break;
    }
    return a2;
  }
  return result;
}

uint64_t VCTestMonitorManager_GetEnableLoopbackInterface()
{
  return objc_msgSend(+[VCTestMonitorManager sharedManager](VCTestMonitorManager, "sharedManager"), "enableLoopbackInterface");
}

uint64_t VCTestMonitorManager_GetForcedTargetBitrate()
{
  return objc_msgSend(+[VCTestMonitorManager sharedManager](VCTestMonitorManager, "sharedManager"), "forcedTargetBitrate");
}

uint64_t VCTestMonitorManager_GetForcedCapBitrate()
{
  return objc_msgSend(+[VCTestMonitorManager sharedManager](VCTestMonitorManager, "sharedManager"), "forcedCapBitrate");
}

uint64_t VCTestMonitorManager_GetEnableAudioPowerSpectrumReport()
{
  return objc_msgSend(+[VCTestMonitorManager sharedManager](VCTestMonitorManager, "sharedManager"), "enableAudioPowerSpectrumReport");
}

void VCCaptionsReceiver_ProcessCaptionsData(uint64_t a1, void *a2)
{
  int v3;
  BOOL v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  void *v8;
  unsigned int v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  if (a1)
  {
    v3 = VCCaptionsDecoder_Decode(*(_QWORD *)(a1 + 32), (unsigned __int8 *)objc_msgSend(a2, "bytes"), objc_msgSend(a2, "length"), &v15);
    if (v3)
      v4 = 1;
    else
      v4 = v15 == 0;
    if (v4)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        v13 = VRTraceErrorLogLevelToCSTR();
        v14 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          VCCaptionsReceiver_ProcessCaptionsData_cold_2(v13, v3, v14);
      }
    }
    else
    {
      v5 = objc_msgSend(v15, "isLocal");
      objc_msgSend(v15, "setIsLocal:", v5 ^ 1u);
      v6 = *(_DWORD *)(a1 + 8);
      if (v6 > objc_msgSend(v15, "utteranceNumber"))
        return;
      v7 = *(_DWORD *)(a1 + 8);
      if (v7 >= objc_msgSend(v15, "utteranceNumber"))
      {
        v9 = *(_DWORD *)(a1 + 12);
        if (v9 > objc_msgSend(v15, "updateNumber"))
          return;
      }
      else
      {
        *(_DWORD *)(a1 + 8) = objc_msgSend(v15, "utteranceNumber");
        v8 = *(void **)(a1 + 24);
        if (v8)
        {
          objc_msgSend(v8, "setIsFinal:", 1);
          objc_msgSend(*(id *)(a1 + 16), "didReceiveCaptions:", *(_QWORD *)(a1 + 24));
        }
      }
      *(_DWORD *)(a1 + 12) = objc_msgSend(v15, "updateNumber", v15, v16);
      objc_msgSend(*(id *)(a1 + 16), "didReceiveCaptions:", v15);
      if ((objc_msgSend(v15, "isFinal") & 1) != 0)
        v10 = 0;
      else
        v10 = v15;
      *(_QWORD *)(a1 + 24) = v10;
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    v11 = VRTraceErrorLogLevelToCSTR();
    v12 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCCaptionsReceiver_ProcessCaptionsData_cold_1(v11, v12);
  }
}

void sub_1D8F73960(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D8F75870(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D8F75E20(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

CMSampleBufferRef FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer(uint64_t a1, int32_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const __CFArray *v7;
  const __CFAllocator *v8;
  unsigned int LocalIDForMetadataIdentifyingFactors;
  unsigned int v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  CMTimeValue v16;
  CMTimeScale v17;
  __int128 v18;
  CMTimeEpoch v19;
  size_t sampleSizeArray;
  CMSampleTimingInfo sampleTimingArray;
  CMTime time;
  CMTime v24;
  char *dataPointerOut;
  CMBlockBufferRef theBuffer;
  CMSampleBufferRef v27;
  CMMetadataFormatDescriptionRef formatDescriptionOut;
  uint8_t buf[4];
  uint64_t v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  CMTimeValue value;
  __int16 v37;
  CMTimeScale timescale;
  __int16 v39;
  CMTimeValue v40;
  __int16 v41;
  CMTimeScale v42;
  _QWORD v43[2];
  _QWORD v44[2];
  _QWORD v45[2];

  v45[1] = *MEMORY[0x1E0C80C00];
  formatDescriptionOut = 0;
  theBuffer = 0;
  v27 = 0;
  if ((*(_BYTE *)(a1 + 12) & 1) != 0)
  {
    v4 = *MEMORY[0x1E0CA4CC0];
    v5 = *MEMORY[0x1E0CA2518];
    v43[0] = *MEMORY[0x1E0CA2528];
    v43[1] = v5;
    v6 = *MEMORY[0x1E0CA2468];
    v44[0] = v4;
    v44[1] = v6;
    v45[0] = objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v44, v43, 2);
    v7 = (const __CFArray *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v45, 1);
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (CMMetadataFormatDescriptionCreateWithMetadataSpecifications((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0x6D656278u, v7, &formatDescriptionOut))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer_cold_5();
      }
    }
    else
    {
      LocalIDForMetadataIdentifyingFactors = FigMetadataFormatDescriptionGetLocalIDForMetadataIdentifyingFactors();
      if (LocalIDForMetadataIdentifyingFactors)
      {
        v10 = LocalIDForMetadataIdentifyingFactors;
        if (CMBlockBufferCreateWithMemoryBlock(v8, 0, 9uLL, v8, 0, 0, 9uLL, 1u, &theBuffer))
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
              FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer_cold_4();
          }
        }
        else
        {
          dataPointerOut = 0;
          if (CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &dataPointerOut))
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
                FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer_cold_3();
            }
          }
          else
          {
            v11 = dataPointerOut;
            *(_DWORD *)dataPointerOut = 150994944;
            v11[8] = -1;
            dataPointerOut = v11 + 8;
            *((_DWORD *)v11 + 1) = bswap32(v10);
            if (!a2)
              a2 = 600;
            memset(&v24, 170, sizeof(v24));
            CMTimeMake(&time, 1, a2);
            CMTimeConvertScale(&v24, &time, *(_DWORD *)(a1 + 8), kCMTimeRoundingMethod_RoundHalfAwayFromZero);
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              v12 = VRTraceErrorLogLevelToCSTR();
              v13 = *MEMORY[0x1E0CF2758];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136316418;
                v30 = v12;
                v31 = 2080;
                v32 = "FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer";
                v33 = 1024;
                v34 = 645;
                v35 = 2048;
                value = v24.value;
                v37 = 1024;
                timescale = v24.timescale;
                v39 = 1024;
                LODWORD(v40) = a2;
                _os_log_impl(&dword_1D8A54000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d calculated still image time sample duration=%lld/%d (track time scale=%d)", buf, 0x32u);
              }
            }
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              v14 = VRTraceErrorLogLevelToCSTR();
              v15 = *MEMORY[0x1E0CF2758];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
              {
                v16 = *(_QWORD *)a1;
                v17 = *(_DWORD *)(a1 + 8);
                *(_DWORD *)buf = 136316674;
                v30 = v14;
                v31 = 2080;
                v32 = "FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer";
                v33 = 1024;
                v34 = 646;
                v35 = 2048;
                value = v16;
                v37 = 1024;
                timescale = v17;
                v39 = 2048;
                v40 = v24.value;
                v41 = 1024;
                v42 = v24.timescale;
                _os_log_impl(&dword_1D8A54000, v15, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d adding still image time metadata sample=%lld/%d (duration=%lld/%d)", buf, 0x3Cu);
              }
            }
            v18 = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 32);
            *(_OWORD *)&sampleTimingArray.duration.epoch = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 16);
            *(_OWORD *)&sampleTimingArray.presentationTimeStamp.timescale = v18;
            *(_OWORD *)&sampleTimingArray.decodeTimeStamp.value = *(_OWORD *)(MEMORY[0x1E0CA2E90] + 48);
            *(_OWORD *)&sampleTimingArray.presentationTimeStamp.value = *(_OWORD *)a1;
            v19 = *(_QWORD *)(a1 + 16);
            sampleTimingArray.decodeTimeStamp.epoch = *(_QWORD *)(MEMORY[0x1E0CA2E90] + 64);
            sampleTimingArray.presentationTimeStamp.epoch = v19;
            sampleTimingArray.duration = v24;
            sampleSizeArray = CMBlockBufferGetDataLength(theBuffer);
            if (CMSampleBufferCreate(v8, theBuffer, 1u, 0, 0, formatDescriptionOut, 1, 1, &sampleTimingArray, 1, &sampleSizeArray, &v27))
            {
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
                  FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer_cold_2();
              }
            }
          }
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer_cold_1();
      }
    }
  }
  if (formatDescriptionOut)
    CFRelease(formatDescriptionOut);
  if (theBuffer)
    CFRelease(theBuffer);
  return v27;
}

uint64_t VCBitrateArbiter_ModeFromOperatingMode(int a1)
{
  uint64_t result;

  if ((a1 - 1) < 0xC)
    return byte_1D9110448[a1 - 1];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    result = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    VCBitrateArbiter_ModeFromOperatingMode_cold_1();
  }
  return 0;
}

BOOL rangeCheck(int a1)
{
  unsigned int v1;

  v1 = a1 - 36;
  if ((a1 - 36) >= 0x1941 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      rangeCheck_cold_1();
  }
  return v1 < 0x1941;
}

BOOL IsValidAudioBitrateRange(int a1)
{
  unsigned int v1;

  v1 = a1 - 10;
  if ((a1 - 10) >= 0x122 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      IsValidAudioBitrateRange_cold_1();
  }
  return v1 < 0x122;
}

void sub_1D8F84700(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t VCCaptionsDecoder_Create(_QWORD *a1)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t result;

  if (!a1)
    return 4294967294;
  v2 = malloc_type_calloc(1uLL, 0x28uLL, 0x10900408D69EB25uLL);
  if (!v2)
    return 0xFFFFFFFFLL;
  v3 = v2;
  v4 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 3);
  result = 0;
  *(_QWORD *)v3 = v4;
  v3[8] = -1;
  *a1 = v3;
  return result;
}

void VCCaptionsDecoder_Destroy(uint64_t *a1)
{
  uint64_t v1;
  void *v2;

  if (a1)
  {
    v1 = *a1;
    if (*a1)
    {
      objc_msgSend(*(id *)v1, "removeAllObjects");

      v2 = *(void **)(v1 + 24);
      if (v2)
        free(v2);
      free((void *)v1);
    }
  }
}

uint64_t VCCaptionsDecoder_Decode(uint64_t a1, unsigned __int8 *a2, unint64_t a3, _QWORD *a4)
{
  unsigned int v7;
  uint64_t v9;
  unsigned int v12;
  id v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  unsigned int v37;
  _QWORD *v38;
  VCCaptionsTranscription *v39;
  id v40;
  uint64_t v41;
  id v42;
  uint8_t buf[24];
  int v44;
  __int16 v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  if (a1 && a2 && a3)
  {
    v7 = *a2;
    if ((v7 & 3) == 0 && a4 != 0)
    {
      v12 = v7 >> 4;
      v13 = (id)objc_msgSend(*(id *)a1, "objectForKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", v7 >> 4));
      v42 = v13;
      if (v13)
      {
        if (*(unsigned __int8 *)(a1 + 8) != v7 >> 4)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
          {
            v35 = VRTraceErrorLogLevelToCSTR();
            v36 = *MEMORY[0x1E0CF2758];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = v35;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = "VCCaptionsDecoder_Decode";
              *(_WORD *)&buf[22] = 1024;
              v44 = 231;
              v45 = 1024;
              v46 = 0;
              _os_log_impl(&dword_1D8A54000, v36, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Expired frame received. Error=%d", buf, 0x22u);
            }
          }
          v22 = 0;
          v9 = 0;
LABEL_29:
          v21 = v42;
LABEL_61:

          return v9;
        }
        ++*(_DWORD *)(a1 + 16);
      }
      else
      {
        *(_BYTE *)(a1 + 8) = v12;
        ++*(_DWORD *)(a1 + 12);
        *(_DWORD *)(a1 + 16) = 0;
        objc_msgSend(*(id *)a1, "setObject:forKeyedSubscript:", 0, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", ((_BYTE)v12 + 12) & 0xF));
      }
      v14 = 0;
      v15 = 0;
      v16 = a2 + 1;
      v17 = -1;
      do
      {
        if (v14 + 2 > a3)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() < 3)
          {
            v22 = 0;
            v9 = 4294967291;
            goto LABEL_29;
          }
          VRTraceErrorLogLevelToCSTR();
          v21 = v42;
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            VCCaptionsDecoder_Decode_cold_2();
          v22 = 0;
          v9 = 4294967291;
          goto LABEL_61;
        }
        v18 = v16[v14];
        v15 += ((v18 >> 3) + 1) & ((int)(v18 << 30) >> 31);
        ++v14;
        --v17;
      }
      while ((v18 & 4) == 0);
      v19 = a3 - v14;
      if (*(_QWORD *)(a1 + 32) >= a3 - v14)
      {
        v20 = *(void **)(a1 + 24);
      }
      else
      {
        *(_QWORD *)(a1 + 32) = v19 + 49;
        v20 = malloc_type_realloc(*(void **)(a1 + 24), v19 + 49, 0x477190C6uLL);
        *(_QWORD *)(a1 + 24) = v20;
        if (!v20)
        {
          *(_QWORD *)(a1 + 32) = 0;
          v9 = 0xFFFFFFFFLL;
          goto LABEL_57;
        }
      }
      memcpy(v20, &v16[v14], v19 - 1);
      *(_BYTE *)(*(_QWORD *)(a1 + 24) + a3 + v17) = 0;
      v23 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", *(_QWORD *)(a1 + 24));
      if (!v23 || (v24 = v23, objc_msgSend(v23, "length") != v15))
      {
        v9 = 4294967290;
LABEL_57:
        v21 = v42;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            VCCaptionsDecoder_Decode_cold_3();
        }
        v22 = 0;
        goto LABEL_61;
      }
      v37 = v7 >> 4;
      v38 = a4;
      v40 = v24;
      v39 = -[VCCaptionsTranscription initWithUtteranceNumber:updateNumber:isLocal:isFinal:streamToken:]([VCCaptionsTranscription alloc], "initWithUtteranceNumber:updateNumber:isLocal:isFinal:streamToken:", *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 16), (v7 >> 3) & 1, (v7 >> 2) & 1, 0);
      memset(buf, 0, sizeof(buf));
      v21 = v42;
      if ((_DWORD)v14)
      {
        v25 = 0;
        v41 = 0;
        v26 = 0;
        do
        {
          v27 = (void *)objc_msgSend(v21, "formattedText");
          v28 = v16[v25];
          v29 = *(_DWORD *)&buf[16];
          if (!v26)
            v29 = v28 & 1;
          *(_DWORD *)&buf[16] = v29;
          if (v29 != (v28 & 1))
          {
            _VCCaptionsDecoder_InsertCompletedSegment(v39, (uint64_t)buf);
            v26 = *(void **)buf;
          }
          v30 = (v28 >> 3) + 1;
          if (!v26)
          {
            v26 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", (v28 >> 3) + 1);
            *(_QWORD *)buf = v26;
          }
          if ((v16[v25] & 2) != 0)
          {
            objc_msgSend(v26, "appendString:", objc_msgSend(v40, "substringWithRange:", v41, v30));
            v41 += v30;
            LODWORD(v32) = *(_DWORD *)&buf[12];
          }
          else
          {
            v31 = objc_msgSend(v27, "length");
            v32 = *(unsigned int *)&buf[12];
            if (v31 <= *(unsigned int *)&buf[12])
              v33 = 0;
            else
              v33 = objc_msgSend(v27, "length") - v32;
            if (v33 >= v30)
              v34 = v30;
            else
              v34 = v33;
            if ((_DWORD)v34)
              objc_msgSend(v26, "appendString:", objc_msgSend(v27, "substringWithRange:", v32, v34));
            if (v33 < v30)
              objc_msgSend(v26, "appendString:", objc_msgSend(&stru_1E9E58EE0, "stringByPaddingToLength:withString:startingAtIndex:", (v30 - v34), CFSTR("\uFFFD"), 0));
            v21 = v42;
          }
          *(_DWORD *)&buf[12] = v32 + v30;
          ++v25;
        }
        while ((_DWORD)v14 != (_DWORD)v25);
      }
      _VCCaptionsDecoder_InsertCompletedSegment(v39, (uint64_t)buf);
      objc_msgSend(*(id *)a1, "setObject:forKeyedSubscript:", v39, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedChar:", v37));

      v9 = 0;
      *v38 = v39;
      v22 = v40;
      goto LABEL_61;
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCCaptionsDecoder_Decode_cold_1();
  }
  return 4294967294;
}

void _VCCaptionsDecoder_InsertCompletedSegment(void *a1, uint64_t a2)
{
  VCCaptionsTranscriptionSegment *v4;

  v4 = -[VCCaptionsTranscriptionSegment initWithConfidence:text:range:]([VCCaptionsTranscriptionSegment alloc], "initWithConfidence:text:range:", *(unsigned int *)(a2 + 16), *(_QWORD *)a2, *(unsigned int *)(a2 + 8), objc_msgSend(*(id *)a2, "length"));
  objc_msgSend(a1, "addSegment:", v4);

  *(_DWORD *)(a2 + 8) += objc_msgSend(*(id *)a2, "length");
  *(_QWORD *)a2 = 0;
}

uint64_t _VCOverlayInfo_copyOverlayInfoForToken(uint64_t a1)
{
  uint64_t v1;
  CFNumberRef v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD block[7];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD valuePtr[2];

  valuePtr[1] = *MEMORY[0x1E0C80C00];
  valuePtr[0] = a1;
  v7 = 0;
  v8 = &v7;
  v9 = 0x2020000000;
  v10 = 0;
  if (_VCOverlayManager_sharedOverlay_onceToken != -1)
    dispatch_once(&_VCOverlayManager_sharedOverlay_onceToken, &__block_literal_global_96);
  v1 = _VCOverlayManager_sharedOverlay__overlayManager;
  v2 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberLongType, valuePtr);
  if (v2)
  {
    v3 = *(NSObject **)(v1 + 8);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___VCOverlayInfo_copyOverlayInfoForToken_block_invoke;
    block[3] = &unk_1E9E586C0;
    block[4] = &v7;
    block[5] = v1;
    block[6] = v2;
    dispatch_sync(v3, block);
    CFRelease(v2);
  }
  v4 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_1D8F86584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL _VCOverlayManager_AddSourceToDictionary(__CFDictionary *a1, const __CFString *a2, int a3, char a4)
{
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  _BOOL8 v12;
  const char *v13;
  double v14;
  _DWORD *v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  void *value;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  const char *CStringPtr;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    v8 = VRTraceErrorLogLevelToCSTR();
    v9 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315906;
      v22 = v8;
      v23 = 2080;
      v24 = "_VCOverlayManager_AddSourceToDictionary";
      v25 = 1024;
      v26 = 59;
      v27 = 2080;
      CStringPtr = CFStringGetCStringPtr(a2, 0x8000100u);
      _os_log_impl(&dword_1D8A54000, v9, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [VCOverlayManager] key=%s", buf, 0x26u);
    }
  }
  if (_VCOverlayManager_sharedOverlay_onceToken != -1)
    dispatch_once(&_VCOverlayManager_sharedOverlay_onceToken, &__block_literal_global_96);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(_VCOverlayManager_sharedOverlay__overlayManager + 8));
  if (CFDictionaryContainsKey(a1, a2))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 5)
      return 0;
    v10 = VRTraceErrorLogLevelToCSTR();
    v11 = *MEMORY[0x1E0CF2758];
    v12 = 0;
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      v13 = CFStringGetCStringPtr(a2, 0x8000100u);
      *(_DWORD *)buf = 136315906;
      v22 = v10;
      v23 = 2080;
      v24 = "_VCOverlayManager_AddSourceToDictionary";
      v25 = 1024;
      v26 = 64;
      v27 = 2080;
      CStringPtr = v13;
      _os_log_impl(&dword_1D8A54000, v11, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [VCOverlayManager] source type already exists for key=%s", buf, 0x26u);
      return 0;
    }
  }
  else
  {
    value = 0;
    if ((VCOverlaySource_Create(*MEMORY[0x1E0C9AE00], (uint64_t *)&value) & 0x80000000) != 0)
      return 0;
    v14 = micro();
    v15 = value;
    *((_QWORD *)value + 2) = (uint64_t)v14;
    v15[6] = a3;
    *((_BYTE *)v15 + 28) = a4;
    CFDictionaryAddValue(a1, a2, v15);
    v12 = CFDictionaryContainsKey(a1, a2) != 0;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      v16 = VRTraceErrorLogLevelToCSTR();
      v17 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v18 = CFStringGetCStringPtr(a2, 0x8000100u);
        *(_DWORD *)buf = 136315906;
        v22 = v16;
        v23 = 2080;
        v24 = "_VCOverlayManager_AddSourceToDictionary";
        v25 = 1024;
        v26 = 75;
        v27 = 2080;
        CStringPtr = v18;
        _os_log_impl(&dword_1D8A54000, v17, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [VCOverlayManager] source successfully added for key=%s", buf, 0x26u);
      }
    }
    CFRelease(value);
  }
  return v12;
}

CFMutableDictionaryRef VCOverlayManager_registerOverlayForToken(uint64_t a1)
{
  uint64_t v1;
  const __CFAllocator *v2;
  CFNumberRef v3;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v5;
  BOOL v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD block[10];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t valuePtr;
  _BYTE buf[24];
  int v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  valuePtr = a1;
  if (!a1)
    return 0;
  if (_VCOverlayManager_sharedOverlay_onceToken != -1)
    dispatch_once(&_VCOverlayManager_sharedOverlay_onceToken, &__block_literal_global_96);
  v1 = _VCOverlayManager_sharedOverlay__overlayManager;
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberLongType, &valuePtr);
  Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = Mutable;
  v12 = 0;
  v13 = &v12;
  v14 = 0x3052000000;
  v15 = __Block_byref_object_copy__37;
  v16 = __Block_byref_object_dispose__37;
  v17 = 0;
  if (v3)
    v6 = Mutable == 0;
  else
    v6 = 1;
  if (v6)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      v7 = VRTraceErrorLogLevelToCSTR();
      v8 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = v7;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "VCOverlayManager_registerOverlayForToken";
        *(_WORD *)&buf[22] = 1024;
        v20 = 118;
        v21 = 2048;
        v22 = valuePtr;
        _os_log_impl(&dword_1D8A54000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [VCOverlayManager] error allocating overlayInfo token=%ld", buf, 0x26u);
      }
    }
    if (v3)
      CFRelease(v3);
    if (v5)
    {
      CFRelease(v5);
      v5 = 0;
    }
  }
  else
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    LOBYTE(v20) = 0;
    v9 = *(NSObject **)(v1 + 8);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __VCOverlayManager_registerOverlayForToken_block_invoke;
    block[3] = &unk_1E9E586E8;
    block[6] = v1;
    block[7] = v3;
    block[8] = valuePtr;
    block[9] = v5;
    block[4] = &v12;
    block[5] = buf;
    dispatch_sync(v9, block);
    CFRelease(v3);
    CFRelease(v5);
    v5 = (CFMutableDictionaryRef)(id)v13[5];
    _Block_object_dispose(buf, 8);
  }
  _Block_object_dispose(&v12, 8);
  return v5;
}

void sub_1D8F86B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t VCOverlayManager_unregisterOverlayForToken(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  _QWORD v5[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  if (_VCOverlayManager_sharedOverlay_onceToken != -1)
    dispatch_once(&_VCOverlayManager_sharedOverlay_onceToken, &__block_literal_global_96);
  v2 = *(NSObject **)(_VCOverlayManager_sharedOverlay__overlayManager + 8);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __VCOverlayManager_unregisterOverlayForToken_block_invoke;
  v5[3] = &unk_1E9E586C0;
  v5[5] = a1;
  v5[6] = _VCOverlayManager_sharedOverlay__overlayManager;
  v5[4] = &v6;
  dispatch_sync(v2, v5);
  v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t VCOverlayManager_createOverlaySourceForToken(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  NSObject *v5;
  const void *v6;
  __CFString *v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD block[8];
  char v12;
  _BYTE buf[24];
  _BYTE v14[14];
  __int16 v15;
  unsigned int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    v4 = VRTraceErrorLogLevelToCSTR();
    v5 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = v4;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "VCOverlayManager_createOverlaySourceForToken";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)v14 = 165;
      *(_WORD *)&v14[4] = 2048;
      *(_QWORD *)&v14[6] = a1;
      v15 = 1024;
      v16 = a2;
      _os_log_impl(&dword_1D8A54000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [VCOverlayManager] token=%ld and type=%d", buf, 0x2Cu);
    }
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  *(_QWORD *)v14 = 0;
  v6 = (const void *)_VCOverlayInfo_copyOverlayInfoForToken(a1);
  if (v6)
  {
    if (a2 > 2)
      v7 = 0;
    else
      v7 = off_1E9E58758[(char)a2];
    if (_VCOverlayManager_sharedOverlay_onceToken != -1)
      dispatch_once(&_VCOverlayManager_sharedOverlay_onceToken, &__block_literal_global_96);
    v9 = *(NSObject **)(_VCOverlayManager_sharedOverlay__overlayManager + 8);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __VCOverlayManager_createOverlaySourceForToken_block_invoke;
    block[3] = &unk_1E9E58710;
    block[6] = v7;
    block[7] = a1;
    v12 = a2;
    block[4] = buf;
    block[5] = v6;
    dispatch_sync(v9, block);
    CFRelease(v6);
    v8 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
  }
  else
  {
    v8 = 0;
  }
  _Block_object_dispose(buf, 8);
  return v8;
}

void sub_1D8F872AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t VCOverlayManager_releaseOverlaySourceWithToken(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  __CFString *v4;
  NSObject *v5;
  _QWORD v7[7];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = _VCOverlayInfo_copyOverlayInfoForToken(a1);
  if (v3)
  {
    v4 = 0;
    v8 = 0;
    v9 = &v8;
    v10 = 0x2020000000;
    v11 = 0;
    if (a2 <= 2)
      v4 = off_1E9E58758[(char)a2];
    if (_VCOverlayManager_sharedOverlay_onceToken != -1)
      dispatch_once(&_VCOverlayManager_sharedOverlay_onceToken, &__block_literal_global_96);
    v5 = *(NSObject **)(_VCOverlayManager_sharedOverlay__overlayManager + 8);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __VCOverlayManager_releaseOverlaySourceWithToken_block_invoke;
    v7[3] = &unk_1E9E586C0;
    v7[5] = v3;
    v7[6] = v4;
    v7[4] = &v8;
    dispatch_sync(v5, v7);
    CFRelease((CFTypeRef)v3);
    v3 = *((_BYTE *)v9 + 24) != 0;
    _Block_object_dispose(&v8, 8);
  }
  return v3;
}

void sub_1D8F87838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t VCOverlayManager_dispatchedIsOverlayEnabled()
{
  if (_VCOverlayManager_sharedOverlay_onceToken != -1)
    dispatch_once(&_VCOverlayManager_sharedOverlay_onceToken, &__block_literal_global_96);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(_VCOverlayManager_sharedOverlay__overlayManager + 8));
  if (_VCOverlayManager_sharedOverlay_onceToken != -1)
    dispatch_once(&_VCOverlayManager_sharedOverlay_onceToken, &__block_literal_global_96);
  return *(unsigned __int8 *)(_VCOverlayManager_sharedOverlay__overlayManager + 16);
}

uint64_t VCOverlayManager_isOverlayEnabled()
{
  NSObject *v0;
  uint64_t v1;
  _QWORD block[6];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  if (_VCOverlayManager_sharedOverlay_onceToken != -1)
    dispatch_once(&_VCOverlayManager_sharedOverlay_onceToken, &__block_literal_global_96);
  v0 = *(NSObject **)(_VCOverlayManager_sharedOverlay__overlayManager + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __VCOverlayManager_isOverlayEnabled_block_invoke;
  block[3] = &unk_1E9E58738;
  block[4] = &v4;
  block[5] = _VCOverlayManager_sharedOverlay__overlayManager;
  dispatch_sync(v0, block);
  v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

uint64_t VCOverlayManager_updateOverlayEnabledState()
{
  NSObject *v0;
  uint64_t v1;
  _QWORD block[6];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  if (_VCOverlayManager_sharedOverlay_onceToken != -1)
    dispatch_once(&_VCOverlayManager_sharedOverlay_onceToken, &__block_literal_global_96);
  v0 = *(NSObject **)(_VCOverlayManager_sharedOverlay__overlayManager + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __VCOverlayManager_updateOverlayEnabledState_block_invoke;
  block[3] = &unk_1E9E58738;
  block[4] = &v4;
  block[5] = _VCOverlayManager_sharedOverlay__overlayManager;
  dispatch_sync(v0, block);
  v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

uint64_t VCMediaNegotiationFaceTimeSettingsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_57;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_59;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_57:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_59:
          v45 = 8;
          goto LABEL_76;
        case 2u:
          v24 = 0;
          v25 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 8u;
          while (2)
          {
            v26 = *v3;
            v27 = *(_QWORD *)(a2 + v26);
            if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
              *(_QWORD *)(a2 + v26) = v27 + 1;
              v19 |= (unint64_t)(v28 & 0x7F) << v24;
              if (v28 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_63;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_63:
          v45 = 20;
          goto LABEL_76;
        case 3u:
          v29 = 0;
          v30 = 0;
          v31 = 0;
          *(_BYTE *)(a1 + 28) |= 0x10u;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v31 |= (unint64_t)(v34 & 0x7F) << v29;
              if (v34 < 0)
              {
                v29 += 7;
                v14 = v30++ >= 9;
                if (v14)
                {
                  v31 = 0;
                  goto LABEL_67;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v31 = 0;
LABEL_67:
          *(_BYTE *)(a1 + 24) = v31 != 0;
          continue;
        case 4u:
          v35 = 0;
          v36 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v19 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_71;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_71:
          v45 = 16;
          goto LABEL_76;
        case 5u:
          v40 = 0;
          v41 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v42 = *v3;
        v43 = *(_QWORD *)(a2 + v42);
        if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
          break;
        v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
        *(_QWORD *)(a2 + v42) = v43 + 1;
        v19 |= (unint64_t)(v44 & 0x7F) << v40;
        if ((v44 & 0x80) == 0)
          goto LABEL_73;
        v40 += 7;
        v14 = v41++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_75;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_73:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_75:
      v45 = 12;
LABEL_76:
      *(_DWORD *)(a1 + v45) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void VCStatisticsHistory_AddStatsHistory(uint64_t a1, unsigned __int8 *a2)
{
  int *v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  unsigned __int8 *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    v4 = (int *)(a1 + 32008);
    v5 = *a2;
    if (*(unsigned __int8 *)(a1 + 32080) != v5)
    {
      *(_BYTE *)(a1 + 32080) = v5;
      *(_QWORD *)(a1 + 32008) = 0;
      *(_OWORD *)(a1 + 32016) = 0u;
      *(_OWORD *)(a1 + 32032) = 0u;
      *(_OWORD *)(a1 + 32048) = 0u;
      *(_OWORD *)(a1 + 32064) = 0u;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        v6 = VRTraceErrorLogLevelToCSTR();
        v7 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        {
          v25 = 136315650;
          v26 = v6;
          v27 = 2080;
          v28 = "_VCStatisticsHistory_ResetHistory";
          v29 = 1024;
          v30 = 371;
          _os_log_impl(&dword_1D8A54000, v7, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d Reset VCRC statistics history", (uint8_t *)&v25, 0x1Cu);
        }
      }
    }
    if (*v4 >= 1)
    {
      v8 = *(int *)(a1 + 32012);
      if ((unsigned __int16)(*((_WORD *)a2 + 8) - *(_WORD *)(a1 + (v8 << 6) + 24)) > 0x7FFEu)
        return;
      *(_DWORD *)(a1 + 32012) = ((int)v8 + 1) % 500;
    }
    if ((int)(*((_QWORD *)a2 + 4) - *(_QWORD *)(a1 + 32048)) < 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        v16 = VRTraceErrorLogLevelToCSTR();
        v17 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        {
          v18 = *((_QWORD *)a2 + 4);
          v19 = *(unsigned __int8 **)(a1 + 32048);
          v25 = 136316162;
          v26 = v16;
          v27 = 2080;
          v28 = "_VCStatisticsHistory_HandleWrappedAroundByteCountForStats";
          v29 = 1024;
          v30 = 347;
          v31 = 2048;
          v32 = v18;
          v33 = 2048;
          v34 = v19;
          _os_log_error_impl(&dword_1D8A54000, v17, OS_LOG_TYPE_ERROR, "AVCRC [%s] %s:%d Statistics history receives out of order statistics for totalByteSent! [current:%llu, previous:%llu]", (uint8_t *)&v25, 0x30u);
        }
      }
    }
    else
    {
      v9 = *((_QWORD *)a2 + 5);
      v10 = *(_QWORD *)(a1 + 32056);
      if ((int)v9 - (int)v10 < 0)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            VCStatisticsHistory_AddStatsHistory_cold_1();
        }
      }
      else
      {
        *((_QWORD *)a2 + 4) = (*(_QWORD *)(a1 + 32048) & 0xFFFFFFFF00000000 | *((_QWORD *)a2 + 4))
                            + ((unint64_t)(*((_QWORD *)a2 + 4) < (unint64_t)*(_QWORD *)(a1 + 32048)) << 32);
        *((_QWORD *)a2 + 5) = (v10 & 0xFFFFFFFF00000000 | v9)
                            + ((unint64_t)(v9 < v10) << 32);
        v11 = *(_OWORD *)a2;
        v12 = *((_OWORD *)a2 + 1);
        v13 = *((_OWORD *)a2 + 3);
        *(_OWORD *)(a1 + 32048) = *((_OWORD *)a2 + 2);
        *(_OWORD *)(a1 + 32064) = v13;
        *(_OWORD *)(a1 + 32016) = v11;
        *(_OWORD *)(a1 + 32032) = v12;
      }
    }
    v20 = a1 + ((uint64_t)*(int *)(a1 + 32012) << 6);
    v21 = *(_OWORD *)a2;
    v22 = *((_OWORD *)a2 + 1);
    v23 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(v20 + 56) = *((_OWORD *)a2 + 3);
    *(_OWORD *)(v20 + 40) = v23;
    *(_OWORD *)(v20 + 24) = v22;
    *(_OWORD *)(v20 + 8) = v21;
    v24 = *v4;
    if (*v4 < 500)
      ++v24;
    *v4 = v24;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    v14 = VRTraceErrorLogLevelToCSTR();
    v15 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      v25 = 136316162;
      v26 = v14;
      v27 = 2080;
      v28 = "VCStatisticsHistory_AddStatsHistory";
      v29 = 1024;
      v30 = 51;
      v31 = 2048;
      v32 = a1;
      v33 = 2048;
      v34 = a2;
      _os_log_impl(&dword_1D8A54000, v15, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d Invalid parameter. statisticsHistory=%p statsElement=%p", (uint8_t *)&v25, 0x30u);
    }
  }
}

double VCStatisticsHistory_PacketLossRate(uint64_t a1, double a2, double a3)
{
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  _OWORD *v24;
  int v25;
  int v26;
  char v27;
  char v28;
  _OWORD *v29;
  int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  NSObject *v34;
  int v35;
  uint64_t v36;
  NSObject *v37;
  NSObject *v38;
  int v39;
  int v41;
  char v42;
  int v43;
  int *v44;
  int v45;
  uint8_t buf[4];
  uint64_t v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  unsigned int v55;
  __int16 v56;
  double v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  int v63;
  _OWORD v64[8];
  _OWORD v65[8];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v45 = -1431655766;
  v5 = 0.0;
  if (_VCStatisticsHistory_GetStatsHistoryElementIndex(a1, &v45, a2, a3))
  {
    v6 = a1 + 8;
    v44 = (int *)(a1 + 32012);
    v7 = *(int *)(a1 + 32012);
    v8 = a1 + 8 + (v7 << 6);
    if (*(_DWORD *)(v8 + 20) != *(_DWORD *)(v8 + 24))
    {
      v9 = 0;
      v10 = *(_OWORD *)v8;
      v11 = *(_OWORD *)(v8 + 32);
      v12 = *(_OWORD *)(v8 + 48);
      v65[1] = *(_OWORD *)(v8 + 16);
      v65[2] = v11;
      v13 = (_OWORD *)(v6 + ((uint64_t)v45 << 6));
      v14 = v13[1];
      v64[0] = *v13;
      v64[1] = v14;
      v15 = v13[3];
      v64[2] = v13[2];
      v16 = (_OWORD *)(v6 + ((uint64_t)(((int)v7 + 499) % 500) << 6));
      v17 = v16[3];
      v65[6] = v16[2];
      v65[7] = v17;
      v18 = v16[1];
      v65[4] = *v16;
      v65[5] = v18;
      v65[3] = v12;
      v19 = (__int128 *)(v6 + ((uint64_t)((v45 + 1) % 500) << 6));
      v20 = v19[2];
      v64[7] = v19[3];
      v65[0] = v10;
      v21 = *v19;
      v64[5] = v19[1];
      v64[6] = v20;
      v64[3] = v15;
      v64[4] = v21;
      v5 = 1.0;
      v22 = 1;
      while (2)
      {
        v23 = 0;
        v42 = v22;
        v43 = v9;
        v24 = &v65[4 * v9];
        v26 = *((_DWORD *)v24 + 5);
        v25 = *((_DWORD *)v24 + 6);
        v27 = 1;
        do
        {
          v28 = v27;
          v29 = &v64[4 * v23];
          v30 = v26 - *((_DWORD *)v29 + 5);
          v31 = v25 - *((_DWORD *)v29 + 6);
          if (v30 < 0 || (v31 & 0x80000000) != 0)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              v33 = VRTraceErrorLogLevelToCSTR();
              v34 = *MEMORY[0x1E0CF2758];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
              {
                v35 = *v44;
                *(_DWORD *)buf = 136317186;
                v47 = v33;
                v48 = 2080;
                v49 = "VCStatisticsHistory_PacketLossRate";
                v50 = 1024;
                v51 = 106;
                v52 = 1024;
                v53 = v30;
                v54 = 1024;
                v55 = v31;
                v56 = 2048;
                v57 = a2;
                v58 = 1024;
                v59 = v35;
                v60 = 1024;
                v61 = v43;
                v62 = 1024;
                v63 = v23;
                _os_log_impl(&dword_1D8A54000, v34, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d Statistics has reverse history! packet count is not incremental, sendDiff:%d, receiveDiff:%d, time:%f, index:%d [%d,%d]", buf, 0x44u);
              }
            }
          }
          else
          {
            v32 = v30 - v31;
            if (v30 < v31)
            {
              v5 = 0.0;
              if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
              {
                v36 = VRTraceErrorLogLevelToCSTR();
                v37 = *MEMORY[0x1E0CF2758];
                v38 = *MEMORY[0x1E0CF2758];
                if (*MEMORY[0x1E0CF2748])
                {
                  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
                  {
                    v39 = *v44;
                    *(_DWORD *)buf = 136317186;
                    v47 = v36;
                    v48 = 2080;
                    v49 = "VCStatisticsHistory_PacketLossRate";
                    v50 = 1024;
                    v51 = 108;
                    v52 = 1024;
                    v53 = v30;
                    v54 = 1024;
                    v55 = v31;
                    v56 = 2048;
                    v57 = a2;
                    v58 = 1024;
                    v59 = v39;
                    v60 = 1024;
                    v61 = v43;
                    v62 = 1024;
                    v63 = v23;
                    _os_log_impl(&dword_1D8A54000, v37, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d Received more packets than sent, sendDiff:%d, receiveDiff:%d, time:%f, index:%d [%d,%d]", buf, 0x44u);
                  }
                }
                else if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
                {
                  v41 = *v44;
                  *(_DWORD *)buf = 136317186;
                  v47 = v36;
                  v48 = 2080;
                  v49 = "VCStatisticsHistory_PacketLossRate";
                  v50 = 1024;
                  v51 = 108;
                  v52 = 1024;
                  v53 = v30;
                  v54 = 1024;
                  v55 = v31;
                  v56 = 2048;
                  v57 = a2;
                  v58 = 1024;
                  v59 = v41;
                  v60 = 1024;
                  v61 = v43;
                  v62 = 1024;
                  v63 = v23;
                  _os_log_debug_impl(&dword_1D8A54000, v37, OS_LOG_TYPE_DEBUG, "AVCRC [%s] %s:%d Received more packets than sent, sendDiff:%d, receiveDiff:%d, time:%f, index:%d [%d,%d]", buf, 0x44u);
                }
              }
              return v5;
            }
            if (v30 == v31)
              return 0.0;
            if (v5 >= (double)v32 / (double)v30)
              v5 = (double)v32 / (double)v30;
          }
          v27 = 0;
          v23 = 1;
        }
        while ((v28 & 1) != 0);
        v22 = 0;
        v9 = 1;
        if ((v42 & 1) != 0)
          continue;
        break;
      }
    }
  }
  return v5;
}

BOOL _VCStatisticsHistory_GetStatsHistoryElementIndex(uint64_t a1, _DWORD *a2, double a3, double a4)
{
  int v7;
  double v8;
  uint64_t v9;
  double v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  _BOOL8 result;
  int v16;
  uint64_t v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  double v23;
  __int16 v24;
  double v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      result = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      _VCStatisticsHistory_GetStatsHistoryElementIndex_cold_1();
    }
    return 0;
  }
  v7 = *(_DWORD *)(a1 + 32008);
  v8 = 0.0;
  if (v7 >= 1)
  {
    v9 = a1 + 8;
    v10 = a3 - a4;
    v11 = *(_DWORD *)(a1 + 32012) + 500;
    do
    {
      v12 = (v11 % 500);
      if (*(double *)(v9 + ((uint64_t)(int)v12 << 6) + 8) < v10)
      {
        *a2 = v12;
        return 1;
      }
      --v11;
      --v7;
    }
    while (v7);
    if ((v12 & 0x80000000) == 0)
      v8 = a3 - *(double *)(v9 + (v12 << 6) + 8);
  }
  if (a3 - *(double *)(a1 + 32088) <= 2.0)
    return 0;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    v13 = VRTraceErrorLogLevelToCSTR();
    v14 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      v16 = 136316162;
      v17 = v13;
      v18 = 2080;
      v19 = "_VCStatisticsHistory_GetStatsHistoryElementIndex";
      v20 = 1024;
      v21 = 338;
      v22 = 2048;
      v23 = a4;
      v24 = 2048;
      v25 = v8;
      _os_log_impl(&dword_1D8A54000, v14, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d Statistics history does not have enough history for the stats within the most recent %f seconds. History size: %f seconds", (uint8_t *)&v16, 0x30u);
    }
  }
  result = 0;
  *(double *)(a1 + 32088) = a3;
  return result;
}

double VCStatisticsHistory_SendingBitrate(uint64_t a1, double a2, double a3)
{
  double v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  NSObject *v13;
  int v15;
  int v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  double v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v16 = -1431655766;
  v5 = 0.0;
  if (_VCStatisticsHistory_GetStatsHistoryElementIndex(a1, &v16, a2, a3))
  {
    v6 = (int *)(a1 + 32012);
    v7 = a1 + 8 + ((uint64_t)*(int *)(a1 + 32012) << 6);
    v8 = *(_QWORD *)(v7 + 32);
    v9 = a1 + 8 + ((uint64_t)v16 << 6);
    v10 = *(_QWORD *)(v9 + 32);
    if ((int)v8 - (int)v10 < 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        v12 = VRTraceErrorLogLevelToCSTR();
        v13 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        {
          v15 = *v6;
          *(_DWORD *)buf = 136316930;
          v18 = v12;
          v19 = 2080;
          v20 = "VCStatisticsHistory_SendingBitrate";
          v21 = 1024;
          v22 = 134;
          v23 = 1024;
          v24 = v8 - v10;
          v25 = 2048;
          v26 = v8;
          v27 = 2048;
          v28 = v10;
          v29 = 2048;
          v30 = a2;
          v31 = 1024;
          v32 = v15;
          _os_log_error_impl(&dword_1D8A54000, v13, OS_LOG_TYPE_ERROR, "AVCRC [%s] %s:%d Statistics has reverse history! byte count is not incremental, sendDiff:%d, currentCount:%llu, previousCount:%llu, time:%f, index:%d", buf, 0x46u);
        }
      }
    }
    else
    {
      v11 = *(double *)(v7 + 8) - *(double *)(v9 + 8);
      if (v11 > 0.0)
        return (double)(8 * ((int)v8 - (int)v10)) / v11;
    }
  }
  return v5;
}

double VCStatisticsHistory_ReceivingBitrate(uint64_t a1, double a2, double a3)
{
  double v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  NSObject *v13;
  int v15;
  int v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  double v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v16 = -1431655766;
  v5 = 0.0;
  if (_VCStatisticsHistory_GetStatsHistoryElementIndex(a1, &v16, a2, a3))
  {
    v6 = (int *)(a1 + 32012);
    v7 = a1 + 8 + ((uint64_t)*(int *)(a1 + 32012) << 6);
    v8 = *(_QWORD *)(v7 + 40);
    v9 = a1 + 8 + ((uint64_t)v16 << 6);
    v10 = *(_QWORD *)(v9 + 40);
    if ((int)v8 - (int)v10 < 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        v12 = VRTraceErrorLogLevelToCSTR();
        v13 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        {
          v15 = *v6;
          *(_DWORD *)buf = 136316930;
          v18 = v12;
          v19 = 2080;
          v20 = "VCStatisticsHistory_ReceivingBitrate";
          v21 = 1024;
          v22 = 154;
          v23 = 1024;
          v24 = v8 - v10;
          v25 = 2048;
          v26 = v8;
          v27 = 2048;
          v28 = v10;
          v29 = 2048;
          v30 = a2;
          v31 = 1024;
          v32 = v15;
          _os_log_error_impl(&dword_1D8A54000, v13, OS_LOG_TYPE_ERROR, "AVCRC [%s] %s:%d Statistics has reverse history! byte count is not incremental, receiveDiff:%d, currentCount:%llu, previousCount:%llu, time:%f, index:%d", buf, 0x46u);
        }
      }
    }
    else
    {
      v11 = *(double *)(v7 + 8) - *(double *)(v9 + 8);
      if (v11 > 0.0)
        return (double)(8 * ((int)v8 - (int)v10)) / v11;
    }
  }
  return v5;
}

double VCStatisticsHistory_ServerStatsBitrate(uint64_t a1, double a2, double a3)
{
  double v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  NSObject *v13;
  int v15;
  int v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  double v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v16 = -1431655766;
  v5 = 0.0;
  if (_VCStatisticsHistory_GetStatsHistoryElementIndex(a1, &v16, a2, a3))
  {
    v6 = (int *)(a1 + 32012);
    v7 = a1 + 8 + ((uint64_t)*(int *)(a1 + 32012) << 6);
    v8 = *(_QWORD *)(v7 + 48);
    v9 = a1 + 8 + ((uint64_t)v16 << 6);
    v10 = *(_QWORD *)(v9 + 48);
    if ((int)v8 - (int)v10 < 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        v12 = VRTraceErrorLogLevelToCSTR();
        v13 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        {
          v15 = *v6;
          *(_DWORD *)buf = 136316930;
          v18 = v12;
          v19 = 2080;
          v20 = "VCStatisticsHistory_ServerStatsBitrate";
          v21 = 1024;
          v22 = 174;
          v23 = 1024;
          v24 = v8 - v10;
          v25 = 2048;
          v26 = v8;
          v27 = 2048;
          v28 = v10;
          v29 = 2048;
          v30 = a2;
          v31 = 1024;
          v32 = v15;
          _os_log_error_impl(&dword_1D8A54000, v13, OS_LOG_TYPE_ERROR, "AVCRC [%s] %s:%d Statistics has reverse history! byte count is not incremental, serverStatsDiff:%d, currentCount:%llu, previousCount:%llu, time:%f, index:%d", buf, 0x46u);
        }
      }
    }
    else
    {
      v11 = *(double *)(v7 + 8) - *(double *)(v9 + 8);
      if (v11 > 0.0)
        return (double)(8 * ((int)v8 - (int)v10)) / v11;
    }
  }
  return v5;
}

uint64_t VCStatisticsHistory_GetBurstyLoss(uint64_t a1, double a2, double a3, double a4)
{
  int v7;
  int v8;
  int *p_base;
  uint64_t v10;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  int v15;
  int __base;
  uint64_t v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  double v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v15 = -1431655766;
  if (_VCStatisticsHistory_GetStatsHistoryElementIndex(a1, &v15, a2, a3))
  {
    bzero(&__base, 0x7D0uLL);
    v7 = *(_DWORD *)(a1 + 32012) + 500;
    v8 = (v7 - v15) % 500;
    if (v8 >= 1)
    {
      p_base = &__base;
      v10 = ((v7 - v15) % 500);
      do
      {
        *p_base++ = *(_DWORD *)(a1 + 8 + ((uint64_t)(v7 % 500) << 6) + 56);
        --v7;
        --v10;
      }
      while (v10);
    }
    qsort(&__base, v8, 4uLL, (int (__cdecl *)(const void *, const void *))compare);
    return *(&__base + (int)((double)v8 * a4));
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      v12 = VRTraceErrorLogLevelToCSTR();
      v13 = *MEMORY[0x1E0CF2758];
      v14 = *MEMORY[0x1E0CF2758];
      if (*MEMORY[0x1E0CF2748])
      {
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          __base = 136315906;
          v17 = v12;
          v18 = 2080;
          v19 = "VCStatisticsHistory_GetBurstyLoss";
          v20 = 1024;
          v21 = 188;
          v22 = 2048;
          v23 = a3;
          _os_log_impl(&dword_1D8A54000, v13, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d Statistics history does not have enough history for the stats within the most recent %f seconds", (uint8_t *)&__base, 0x26u);
        }
      }
      else if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        VCStatisticsHistory_GetBurstyLoss_cold_1(v12, v13, a3);
      }
    }
    return 0xFFFFFFFFLL;
  }
}

uint64_t compare(_DWORD *a1, _DWORD *a2)
{
  return (*a1 - *a2);
}

void VCStatisticsHistory_AddAndPruneSendHistory(uint64_t a1, int *a2, double a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  _BYTE v29[10];
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v5 = *(_QWORD *)(a1 + 32096);
    if (v5)
    {
      v6 = (uint64_t *)(v5 + 40);
      v7 = *(_QWORD *)(v5 + 40);
      if (v7)
      {
        v9 = 0;
        v10 = 0;
        do
        {
          if (*(double *)(v5 + 8) < a3)
          {
            v11 = *(_QWORD *)(v5 + 48);
            if (v11)
            {
              *(_QWORD *)(v11 + 40) = v7;
              v7 = *v6;
              *(_QWORD *)(*v6 + 48) = v11;
            }
            else
            {
              *(_QWORD *)(a1 + 32096) = v7;
              *(_QWORD *)(v7 + 48) = 0;
              v7 = *v6;
            }
            free((void *)v5);
            ++v9;
          }
          v5 = v7;
          ++v10;
          v6 = (uint64_t *)(v7 + 40);
          v7 = *(_QWORD *)(v7 + 40);
        }
        while (v7);
      }
      else
      {
        v10 = 0;
        v9 = 0;
      }
      *(_QWORD *)(v5 + 40) = a2;
      *((_QWORD *)a2 + 6) = v5;
    }
    else
    {
      v10 = 0;
      v9 = 0;
      *(_QWORD *)(a1 + 32096) = a2;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      v17 = VRTraceErrorLogLevelToCSTR();
      v18 = *MEMORY[0x1E0CF2758];
      v19 = *MEMORY[0x1E0CF2758];
      if (*MEMORY[0x1E0CF2748])
      {
        if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          return;
        if (a2)
          v20 = *a2;
        else
          v20 = 0;
        v22 = 136316418;
        v23 = v17;
        v24 = 2080;
        v25 = "VCStatisticsHistory_AddAndPruneSendHistory";
        v26 = 1024;
        v27 = 244;
        v28 = 1024;
        *(_DWORD *)v29 = v20;
        *(_WORD *)&v29[4] = 1024;
        *(_DWORD *)&v29[6] = v10;
        v30 = 1024;
        v31 = v9;
        v14 = "AVCRC [%s] %s:%d Adding sendStats with packetId:%u [len:%d, pruned:%d]";
        v15 = v18;
        v16 = 46;
        goto LABEL_28;
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        if (a2)
          v21 = *a2;
        else
          v21 = 0;
        v22 = 136316418;
        v23 = v17;
        v24 = 2080;
        v25 = "VCStatisticsHistory_AddAndPruneSendHistory";
        v26 = 1024;
        v27 = 244;
        v28 = 1024;
        *(_DWORD *)v29 = v21;
        *(_WORD *)&v29[4] = 1024;
        *(_DWORD *)&v29[6] = v10;
        v30 = 1024;
        v31 = v9;
        _os_log_debug_impl(&dword_1D8A54000, v18, OS_LOG_TYPE_DEBUG, "AVCRC [%s] %s:%d Adding sendStats with packetId:%u [len:%d, pruned:%d]", (uint8_t *)&v22, 0x2Eu);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    v12 = VRTraceErrorLogLevelToCSTR();
    v13 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      v22 = 136315906;
      v23 = v12;
      v24 = 2080;
      v25 = "VCStatisticsHistory_AddAndPruneSendHistory";
      v26 = 1024;
      v27 = 209;
      v28 = 2048;
      *(_QWORD *)v29 = 0;
      v14 = "AVCRC [%s] %s:%d Invalid parameter. statisticsHistory=%p";
      v15 = v13;
      v16 = 38;
LABEL_28:
      _os_log_impl(&dword_1D8A54000, v15, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v22, v16);
    }
  }
}

uint64_t VCStatisticsHistory_GetSendHistoryElement(uint64_t a1, int a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  _BYTE v18[10];
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      v9 = VRTraceErrorLogLevelToCSTR();
      v10 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v11 = 136315906;
        v12 = v9;
        v13 = 2080;
        v14 = "VCStatisticsHistory_GetSendHistoryElement";
        v15 = 1024;
        v16 = 249;
        v17 = 2048;
        *(_QWORD *)v18 = 0;
        _os_log_impl(&dword_1D8A54000, v10, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d Invalid parameter. statisticsHistory=%p", (uint8_t *)&v11, 0x26u);
      }
    }
    return 0;
  }
  if (!*(_QWORD *)(a1 + 32096))
    return 0;
  v4 = 0;
  result = *(_QWORD *)(a1 + 32096);
  while (*(_DWORD *)result != a2)
  {
    ++v4;
    result = *(_QWORD *)(result + 40);
    if (!result)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        v6 = VRTraceErrorLogLevelToCSTR();
        v7 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        {
          v8 = **(_DWORD **)(a1 + 32096);
          v11 = 136316418;
          v12 = v6;
          v13 = 2080;
          v14 = "VCStatisticsHistory_GetSendHistoryElement";
          v15 = 1024;
          v16 = 261;
          v17 = 1024;
          *(_DWORD *)v18 = a2;
          *(_WORD *)&v18[4] = 1024;
          *(_DWORD *)&v18[6] = v8;
          v19 = 1024;
          v20 = v4;
          _os_log_error_impl(&dword_1D8A54000, v7, OS_LOG_TYPE_ERROR, "AVCRC [%s] %s:%d Cannot find sendStatsElement in history with packetId %d [earliest packetId: %d, len:%d]", (uint8_t *)&v11, 0x2Eu);
        }
      }
      return 0;
    }
  }
  return result;
}

double VCStatisticsHistory_BytesInFlight(uint64_t a1, double *a2, double *a3)
{
  uint64_t v3;
  uint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1 && (v3 = *(_QWORD *)(a1 + 32096)) != 0)
  {
    do
    {
      v4 = v3;
      v3 = *(_QWORD *)(v3 + 40);
    }
    while (v3);
    if (a3)
    {
      result = *(double *)(v4 + 8);
      *a3 = result;
    }
    v6 = v4;
    while (!*(_BYTE *)(v6 + 32))
    {
      v6 = *(_QWORD *)(v6 + 48);
      if (!v6)
        return result;
    }
    if (a2)
    {
      result = *(double *)(v6 + 8);
      *a2 = result;
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    v7 = VRTraceErrorLogLevelToCSTR();
    v8 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      v9 = 136315650;
      v10 = v7;
      v11 = 2080;
      v12 = "VCStatisticsHistory_BytesInFlight";
      v13 = 1024;
      v14 = 268;
      _os_log_impl(&dword_1D8A54000, v8, OS_LOG_TYPE_DEFAULT, "AVCRC [%s] %s:%d Empty send history with bytesInFlight query!", (uint8_t *)&v9, 0x1Cu);
    }
  }
  return result;
}

double VCStatisticsHistory_RoundTripTimeWithPacketId(uint64_t a1, int a2, double a3)
{
  uint64_t v3;
  double v4;

  v3 = *(_QWORD *)(a1 + 32096);
  v4 = 0.0;
  if (v3)
  {
    while (*(_DWORD *)v3 != a2)
    {
      v3 = *(_QWORD *)(v3 + 40);
      if (!v3)
      {
        v4 = 0.0;
        return fmax(v4, 0.0);
      }
    }
    *(_BYTE *)(v3 + 32) = 1;
    v4 = a3 - *(double *)(v3 + 8);
  }
  return fmax(v4, 0.0);
}

FILE *openLogDump(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  const __CFString *v11;
  const __CFString *v12;
  const __CFString *v13;
  id v14;
  void *v15;
  FILE *v16;
  int ErrorLogLevelForModule;
  uint64_t v18;
  NSObject *v19;
  uint64_t v21;
  NSObject *v22;
  size_t v23;
  void *v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  void *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v11 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
    if (a4)
      goto LABEL_3;
LABEL_6:
    v12 = &stru_1E9E58EE0;
    if (a5)
      goto LABEL_4;
LABEL_7:
    v13 = &stru_1E9E58EE0;
    goto LABEL_8;
  }
  v11 = &stru_1E9E58EE0;
  if (!a4)
    goto LABEL_6;
LABEL_3:
  v12 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a4);
  if (!a5)
    goto LABEL_7;
LABEL_4:
  v13 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a5);
LABEL_8:
  v14 = +[LogDumpUtility logFilename:dumpID:logNameType:prefix:suffix:](LogDumpUtility, "logFilename:dumpID:logNameType:prefix:suffix:", a1, v11, a3, v12, v13);
  if (!v14)
    return 0;
  v15 = v14;
  if (!objc_msgSend(MEMORY[0x1E0CF2698], "createDefaultLogDirectoryIfNeeded"))
    return 0;
  v16 = fopen((const char *)objc_msgSend(v15, "UTF8String"), "w+");
  ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (v16)
  {
    if (ErrorLogLevelForModule >= 7)
    {
      v18 = VRTraceErrorLogLevelToCSTR();
      v19 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v25 = 136315906;
        v26 = v18;
        v27 = 2080;
        v28 = "openLogDump";
        v29 = 1024;
        v30 = 56;
        v31 = 2112;
        v32 = v15;
        _os_log_impl(&dword_1D8A54000, v19, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d successfully created %@", (uint8_t *)&v25, 0x26u);
        if (!a6)
          return v16;
        goto LABEL_20;
      }
    }
LABEL_19:
    if (!a6)
      return v16;
    goto LABEL_20;
  }
  if (ErrorLogLevelForModule < 3)
    goto LABEL_19;
  v21 = VRTraceErrorLogLevelToCSTR();
  v22 = *MEMORY[0x1E0CF2758];
  if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
    goto LABEL_19;
  openLogDump_cold_1(v21, (uint64_t)v15, v22);
  if (!a6)
    return v16;
LABEL_20:
  if (v16)
  {
    v23 = objc_msgSend(v15, "maximumLengthOfBytesUsingEncoding:", 4) + 1;
    v24 = malloc_type_malloc(v23, 0x4FEBB616uLL);
    *a6 = v24;
    objc_msgSend(v15, "getCString:maxLength:encoding:", v24, v23, 4);
  }
  else
  {
    *a6 = 0;
  }
  return v16;
}

char *VRLogfileGetTimestamp(char *a1, unsigned int a2)
{
  __int128 v4;
  timeval v6;
  tm v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v6, 0);
  v7.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v7.tm_mon = v4;
  *(_OWORD *)&v7.tm_isdst = v4;
  *(_OWORD *)&v7.tm_sec = v4;
  localtime_r(&v6.tv_sec, &v7);
  snprintf(a1, a2, "%02d%02d%02d.%06d", v7.tm_hour, v7.tm_min, v7.tm_sec, v6.tv_usec);
  return a1;
}

char *VRLogfileGetTimestampMicro(uint64_t a1, char *a2, unsigned int a3, double a4)
{
  time_t v6;
  int v7;
  __int128 v8;
  time_t v10;
  unint64_t v11;
  tm v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v6 = *(_QWORD *)(a1 + 32) + (uint64_t)a4;
    v10 = v6;
    v11 = 0xAAAAAAAAAAAAAAAALL;
    v7 = *(_DWORD *)(a1 + 40) + (int)((a4 - (double)(uint64_t)a4) * 1000000.0);
    LODWORD(v11) = v7;
    if (v7 >= 1000001)
    {
      v10 = v6 + 1;
      LODWORD(v11) = v7 - 1000000;
    }
    v12.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
    *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v12.tm_mon = v8;
    *(_OWORD *)&v12.tm_isdst = v8;
    *(_OWORD *)&v12.tm_sec = v8;
    localtime_r(&v10, &v12);
    snprintf(a2, a3, "%02d%02d%02d.%06d", v12.tm_hour, v12.tm_min, v12.tm_sec, v11);
  }
  else
  {
    VRLogfileGetTimestamp(a2, a3);
  }
  return a2;
}

FILE **VRLogfileAlloc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, char a6)
{
  FILE **v12;
  FILE **v13;
  FILE *v14;
  dispatch_queue_t v15;
  double v16;
  uint64_t v17;
  __darwin_suseconds_t v18;
  __darwin_suseconds_t tv_usec;
  __darwin_time_t v20;
  NSObject *v22;
  timeval v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v12 = (FILE **)malloc_type_calloc(1uLL, 0x40uLL, 0x10B0040208A8F78uLL);
  if (!v12)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VRLogfileAlloc_cold_1();
    }
    return 0;
  }
  v13 = v12;
  v14 = openLogDump(a1, a2, a4 != 0, a3, a4, v12 + 6);
  *v13 = v14;
  if (!v14)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VRLogfileAlloc_cold_2();
    }
    goto LABEL_18;
  }
  *((_BYTE *)v13 + 16) = a6;
  v15 = dispatch_queue_create(a5, 0);
  v13[1] = (FILE *)v15;
  if (!v15)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VRLogfileAlloc_cold_3();
    }
LABEL_18:
    if (*v13)
      fclose(*v13);
    v22 = v13[1];
    if (v22)
      dispatch_release(v22);
    free(v13);
    return 0;
  }
  v23.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v23.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  gettimeofday(&v23, 0);
  v16 = micro();
  v17 = (uint64_t)v16;
  v18 = (int)((v16 - (double)(int)v16) * 1000000.0);
  tv_usec = v23.tv_usec;
  if (v23.tv_usec >= v18)
  {
    v20 = v23.tv_sec - v17;
  }
  else
  {
    v20 = v23.tv_sec + ~v17;
    tv_usec = v23.tv_usec + 1000000;
  }
  v23.tv_sec = v20;
  v23.tv_usec = tv_usec - v18;
  *((timeval *)v13 + 2) = v23;
  return v13;
}

uint64_t VRLogfileZip(uint64_t a1)
{
  __CFString *v2;
  __CFString *v3;
  FILE *v4;
  FILE *v5;
  FILE *v6;
  uint64_t v7;
  int ErrorLogLevelForModule;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v18;
  NSObject *v19;
  int v20;
  uint64_t v21;
  NSObject *v22;
  int v23;
  uint64_t v24;
  NSObject *v25;
  id v26;
  uint8_t buf[4];
  uint64_t v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  __CFString *v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v26 = 0;
  if (*(_QWORD *)(a1 + 48))
    v2 = (__CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:");
  else
    v2 = &stru_1E9E58EE0;
  v3 = (__CFString *)-[__CFString stringByAppendingString:](v2, "stringByAppendingString:", CFSTR(".gz"));
  v4 = fopen((const char *)-[__CFString UTF8String](v2, "UTF8String"), "r");
  if (v4)
  {
    v5 = v4;
    v6 = fopen((const char *)-[__CFString UTF8String](v3, "UTF8String"), "w+");
    if (v6)
    {
      v7 = VCDiskUtils_FileZipToFile();
      ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
      if (!(_DWORD)v7)
      {
        if (ErrorLogLevelForModule >= 7)
        {
          v9 = VRTraceErrorLogLevelToCSTR();
          v10 = *MEMORY[0x1E0CF2758];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315906;
            v28 = v9;
            v29 = 2080;
            v30 = "VRLogfileZip";
            v31 = 1024;
            v32 = 181;
            v33 = 2112;
            v34 = v3;
            _os_log_impl(&dword_1D8A54000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d compressed to %@", buf, 0x26u);
          }
        }
        fclose(v5);
        v7 = 0;
        if (!v2)
        {
LABEL_15:
          fclose(v6);
          if ((_DWORD)v7)
          {
            if (v3)
            {
              objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "removeItemAtPath:error:", v3, &v26);
              if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
              {
                v14 = VRTraceErrorLogLevelToCSTR();
                v15 = *MEMORY[0x1E0CF2758];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
                {
                  v16 = objc_msgSend(v26, "localizedFailureReason");
                  *(_DWORD *)buf = 136316162;
                  v28 = v14;
                  v29 = 2080;
                  v30 = "VRLogfileZip";
                  v31 = 1024;
                  v32 = 195;
                  v33 = 2112;
                  v34 = v3;
                  v35 = 2112;
                  v36 = v16;
                  _os_log_impl(&dword_1D8A54000, v15, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d removed zipFileName=%@, error=%@", buf, 0x30u);
                }
              }
            }
          }
          return v7;
        }
LABEL_11:
        objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "removeItemAtPath:error:", v2, &v26);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          v11 = VRTraceErrorLogLevelToCSTR();
          v12 = *MEMORY[0x1E0CF2758];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
          {
            v13 = objc_msgSend(v26, "localizedFailureReason");
            *(_DWORD *)buf = 136316162;
            v28 = v11;
            v29 = 2080;
            v30 = "VRLogfileZip";
            v31 = 1024;
            v32 = 188;
            v33 = 2112;
            v34 = v2;
            v35 = 2112;
            v36 = v13;
            _os_log_impl(&dword_1D8A54000, v12, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d removed origFileName=%@, error=%@", buf, 0x30u);
          }
        }
LABEL_14:
        if (!v6)
          return v7;
        goto LABEL_15;
      }
      if (ErrorLogLevelForModule >= 5)
      {
        v24 = VRTraceErrorLogLevelToCSTR();
        v25 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136316162;
          v28 = v24;
          v29 = 2080;
          v30 = "VRLogfileZip";
          v31 = 1024;
          v32 = 180;
          v33 = 2112;
          v34 = v3;
          v35 = 1024;
          LODWORD(v36) = v7;
          _os_log_impl(&dword_1D8A54000, v25, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d failed to create %@: %d", buf, 0x2Cu);
        }
      }
    }
    else
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        v21 = VRTraceErrorLogLevelToCSTR();
        v22 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        {
          v23 = *__error();
          *(_DWORD *)buf = 136316162;
          v28 = v21;
          v29 = 2080;
          v30 = "VRLogfileZip";
          v31 = 1024;
          v32 = 177;
          v33 = 2112;
          v34 = v3;
          v35 = 1024;
          LODWORD(v36) = v23;
          _os_log_impl(&dword_1D8A54000, v22, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d open new zip %@ failed with %d", buf, 0x2Cu);
        }
      }
      v7 = 1;
    }
    fclose(v5);
    if (!v2 || *(_BYTE *)(a1 + 56))
      goto LABEL_14;
    goto LABEL_11;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    v18 = VRTraceErrorLogLevelToCSTR();
    v19 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      v20 = *__error();
      *(_DWORD *)buf = 136316162;
      v28 = v18;
      v29 = 2080;
      v30 = "VRLogfileZip";
      v31 = 1024;
      v32 = 174;
      v33 = 2112;
      v34 = v2;
      v35 = 1024;
      LODWORD(v36) = v20;
      _os_log_impl(&dword_1D8A54000, v19, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d open original %@ failed with %d", buf, 0x2Cu);
    }
  }
  return 1;
}

uint64_t VRLogfileZipOnly(const char *a1)
{
  void **v2;
  void **v3;
  char *v4;
  uint64_t v5;

  if (a1)
  {
    v2 = (void **)malloc_type_calloc(1uLL, 0x40uLL, 0x10B0040208A8F78uLL);
    if (v2)
    {
      v3 = v2;
      v4 = (char *)malloc_type_malloc(0x400uLL, 0x7E254736uLL);
      v3[6] = v4;
      if (v4)
      {
        snprintf(v4, 0x400uLL, "%s", a1);
        v5 = VRLogfileZip((uint64_t)v3);
      }
      else
      {
        v5 = 3;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            VRLogfileZipOnly_cold_3();
        }
      }
      free(v3[6]);
      free(v3);
    }
    else
    {
      v5 = 3;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          VRLogfileZipOnly_cold_2();
      }
    }
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VRLogfileZipOnly_cold_1();
    }
    return 1;
  }
  return v5;
}

void VRLogfileFree(uint64_t *a1)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = *a1;
    if (*a1)
    {
      *a1 = 0;
      v2 = *(NSObject **)(v1 + 8);
      if (v2)
      {
        v3[0] = MEMORY[0x1E0C809B0];
        v3[1] = 3221225472;
        v3[2] = __VRLogfileFree_block_invoke;
        v3[3] = &__block_descriptor_40_e5_v8__0l;
        v3[4] = v1;
        dispatch_async(v2, v3);
      }
    }
  }
}

uint64_t VRLogfileGetFilePointer(uint64_t result)
{
  if (result)
    return *(_QWORD *)result;
  return result;
}

void VRLogfilePrint(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v11;
  int v12;
  NSObject *v13;
  _QWORD block[5];
  _BYTE v15[1024];
  char __str[1024];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (*(_QWORD *)a1)
    {
      bzero(__str, 0x400uLL);
      v11 = vsnprintf(__str, 0x400uLL, a2, &a9);
      if ((v11 & 0x80000000) == 0)
      {
        if (v11 >= 1023)
          v12 = 1023;
        else
          v12 = v11;
        __str[v12] = 0;
        v13 = *(NSObject **)(a1 + 8);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = __VRLogfilePrint_block_invoke;
        block[3] = &__block_descriptor_1064_e5_v8__0l;
        block[4] = a1;
        memcpy(v15, __str, sizeof(v15));
        dispatch_async(v13, block);
        *(_BYTE *)(a1 + 56) = 1;
      }
    }
  }
}

void VRLogfileWrite(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  _QWORD v4[8];

  v4[7] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (*a1)
    {
      v3 = a1[1];
      v4[0] = MEMORY[0x1E0C809B0];
      v4[1] = 3221225472;
      v4[2] = __VRLogfileWrite_block_invoke;
      v4[3] = &__block_descriptor_56_e5_v8__0l;
      v4[4] = a2;
      v4[5] = a3;
      v4[6] = a1;
      dispatch_sync(v3, v4);
    }
  }
}

void VRLogfilePrintWithTimestamp(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v11;
  int v12;
  NSObject *v13;
  _QWORD block[5];
  __int128 v15;
  int v16;
  _BYTE v17[1024];
  _BYTE v18[20];
  char __str[1024];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    bzero(__str, 0x400uLL);
    memset(v18, 170, sizeof(v18));
    VRLogfileGetTimestamp(v18, 0x14u);
    v11 = vsnprintf(__str, 0x400uLL, a2, &a9);
    if ((v11 & 0x80000000) == 0)
    {
      if (v11 >= 1023)
        v12 = 1023;
      else
        v12 = v11;
      __str[v12] = 0;
      v13 = *(NSObject **)(a1 + 8);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __VRLogfilePrintWithTimestamp_block_invoke;
      block[3] = &__block_descriptor_1084_e5_v8__0l;
      block[4] = a1;
      v15 = *(_OWORD *)v18;
      v16 = *(_DWORD *)&v18[16];
      memcpy(v17, __str, sizeof(v17));
      dispatch_async(v13, block);
    }
  }
}

FILE **VRLogfilePrintSync(FILE **result, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (result)
    return (FILE **)vfprintf(*result, a2, &a9);
  return result;
}

char *VRLogfile_CreateTimeAndDateString(char *result, int a2)
{
  char *v3;
  timeval v4;
  tm v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v3 = result;
    memset(&v5, 0, sizeof(v5));
    v4.tv_sec = 0;
    *(_QWORD *)&v4.tv_usec = 0;
    gettimeofday(&v4, 0);
    localtime_r(&v4.tv_sec, &v5);
    return (char *)snprintf(v3, a2, "%04d%02d%02d-%02d%02d%02d", v5.tm_year + 1900, v5.tm_mon + 1, v5.tm_mday, v5.tm_hour, v5.tm_min, v5.tm_sec);
  }
  return result;
}

uint64_t VRLogfileRemoveOldFilesInDefaultLogDumpPath()
{
  return +[LogDumpUtility removeOldFilesInDefaultLogDumpPath](LogDumpUtility, "removeOldFilesInDefaultLogDumpPath");
}

void *LogDumpUtility_CopyLogFilename(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  id v12;
  void *v13;
  size_t v14;
  void *v15;

  if (a2)
  {
    v9 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
    if (a4)
      goto LABEL_3;
LABEL_6:
    v10 = &stru_1E9E58EE0;
    if (a5)
      goto LABEL_4;
    goto LABEL_7;
  }
  v9 = &stru_1E9E58EE0;
  if (!a4)
    goto LABEL_6;
LABEL_3:
  v10 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a4);
  if (a5)
  {
LABEL_4:
    v11 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a5);
    goto LABEL_8;
  }
LABEL_7:
  v11 = &stru_1E9E58EE0;
LABEL_8:
  v12 = +[LogDumpUtility logFilename:dumpID:logNameType:prefix:suffix:](LogDumpUtility, "logFilename:dumpID:logNameType:prefix:suffix:", a1, v9, a3, v10, v11);
  if (!v12)
    return 0;
  v13 = v12;
  v14 = objc_msgSend(v12, "maximumLengthOfBytesUsingEncoding:", 4) + 1;
  v15 = malloc_type_malloc(v14, 0x5A694DD4uLL);
  if (v15)
    objc_msgSend(v13, "getCString:maxLength:encoding:", v15, v14, 4);
  return v15;
}

uint64_t VCTransportStreamRunLoopGetClassID()
{
  if (VCTransportStreamRunLoopGetClassID_onceToken != -1)
    dispatch_once(&VCTransportStreamRunLoopGetClassID_onceToken, &__block_literal_global_98);
  return VCTransportStreamRunLoopGetClassID_classID;
}

CFStringRef _VCTransportStreamRunLoopCopyFormattingDescription(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("[VCTransportStreamRunLoop %p]"), a1);
}

uint64_t VCTransportStreamRunLoopCreateWithTransportStreams(const __CFAllocator *a1, CFArrayRef theArray, CFTypeRef *a3)
{
  int Count;
  CFIndex v7;
  uint64_t v8;
  const void *ValueAtIndex;
  const void *v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t (*v13)(CFTypeRef, const void *);
  uint64_t v14;
  CFTypeRef cf[2];

  cf[1] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cf[0] = 0;
  if (theArray)
  {
    if (a3)
    {
      Count = CFArrayGetCount(theArray);
      if (Count < 1)
      {
        v14 = 2151022593;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            VCTransportStreamRunLoopCreateWithTransportStreams_cold_3();
        }
      }
      else
      {
        v7 = 0;
        v8 = Count;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(theArray, v7);
          if (!ValueAtIndex)
            break;
          v10 = ValueAtIndex;
          v11 = cf[0];
          if (!cf[0])
          {
            if (!VCTransportStreamIsOfKindVTP((uint64_t)ValueAtIndex))
            {
              v14 = 2150760449;
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
                  VCTransportStreamRunLoopCreateWithTransportStreams_cold_5();
              }
              goto LABEL_18;
            }
            v12 = VCTransportStreamRunLoopVTPCreate(a1, cf);
            if ((v12 & 0x80000000) != 0)
            {
              v14 = v12;
              goto LABEL_18;
            }
            v11 = cf[0];
          }
          v13 = *(uint64_t (**)(CFTypeRef, const void *))(*(_QWORD *)(CMBaseObjectGetVTable() + 16) + 8);
          if (!v13)
          {
            v14 = 4294954514;
            goto LABEL_18;
          }
          v14 = v13(v11, v10);
          if ((v14 & 0x80000000) != 0)
            goto LABEL_18;
          if (v8 == ++v7)
          {
            *a3 = cf[0];
            return v14;
          }
        }
        v14 = 2150760449;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            VCTransportStreamRunLoopCreateWithTransportStreams_cold_4();
        }
      }
    }
    else
    {
      v14 = 2151022593;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          VCTransportStreamRunLoopCreateWithTransportStreams_cold_2();
      }
    }
  }
  else
  {
    v14 = 2151022593;
    if ((int)VRTraceGetErrorLogLevelForModule() < 3)
      return v14;
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCTransportStreamRunLoopCreateWithTransportStreams_cold_1();
  }
LABEL_18:
  if (cf[0])
    CFRelease(cf[0]);
  return v14;
}

uint64_t VCMediaNegotiationBlobV2StreamGroupStreamReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v4;
  int *v5;
  int *v6;
  int *v8;
  char v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t result;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  void *Data;
  id v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  char v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  uint64_t v91;

  v4 = (int *)MEMORY[0x1E0D82BF0];
  v5 = (int *)MEMORY[0x1E0D82BD8];
  v6 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v8 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v6))
        break;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v4;
        v13 = *(_QWORD *)(a2 + v12);
        if (v13 == -1 || v13 >= *(_QWORD *)(a2 + *v5))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v13);
        *(_QWORD *)(a2 + v12) = v13 + 1;
        v11 |= (unint64_t)(v14 & 0x7F) << v9;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v9 += 7;
        v15 = v10++ >= 9;
        if (v15)
        {
          v11 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v6);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v6);
      if (*(_BYTE *)(a2 + *v6))
        v11 = 0;
LABEL_14:
      if (v16 || (v11 & 7) == 4)
        break;
      switch((v11 >> 3))
      {
        case 1u:
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_WORD *)(a1 + 84) |= 0x10u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)(a2 + v21);
            if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v5))
              break;
            v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v22);
            *(_QWORD *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if ((v23 & 0x80) == 0)
              goto LABEL_116;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_118;
            }
          }
          *(_BYTE *)(a2 + *v6) = 1;
LABEL_116:
          if (*(_BYTE *)(a2 + *v6))
            LODWORD(v20) = 0;
LABEL_118:
          v91 = 24;
          goto LABEL_167;
        case 2u:
          v25 = 0;
          v26 = 0;
          v20 = 0;
          *(_WORD *)(a1 + 84) |= 0x20u;
          while (2)
          {
            v27 = *v4;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v20 |= (unint64_t)(v29 & 0x7F) << v25;
              if (v29 < 0)
              {
                v25 += 7;
                v15 = v26++ >= 9;
                if (v15)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_122;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            LODWORD(v20) = 0;
LABEL_122:
          v91 = 40;
          goto LABEL_167;
        case 3u:
          v30 = 0;
          v31 = 0;
          v20 = 0;
          *(_WORD *)(a1 + 84) |= 0x80u;
          while (2)
          {
            v32 = *v4;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v20 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v15 = v31++ >= 9;
                if (v15)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_126;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            LODWORD(v20) = 0;
LABEL_126:
          v91 = 48;
          goto LABEL_167;
        case 4u:
          v35 = 0;
          v36 = 0;
          v20 = 0;
          *(_WORD *)(a1 + 84) |= 0x400u;
          while (2)
          {
            v37 = *v4;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v20 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                v15 = v36++ >= 9;
                if (v15)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_130;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            LODWORD(v20) = 0;
LABEL_130:
          v91 = 72;
          goto LABEL_167;
        case 5u:
          v40 = 0;
          v41 = 0;
          v20 = 0;
          *(_WORD *)(a1 + 84) |= 0x800u;
          while (2)
          {
            v42 = *v4;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v20 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                v15 = v41++ >= 9;
                if (v15)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_134;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            LODWORD(v20) = 0;
LABEL_134:
          v91 = 76;
          goto LABEL_167;
        case 6u:
          v45 = 0;
          v46 = 0;
          v20 = 0;
          *(_WORD *)(a1 + 84) |= 4u;
          while (2)
          {
            v47 = *v4;
            v48 = *(_QWORD *)(a2 + v47);
            if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v48);
              *(_QWORD *)(a2 + v47) = v48 + 1;
              v20 |= (unint64_t)(v49 & 0x7F) << v45;
              if (v49 < 0)
              {
                v45 += 7;
                v15 = v46++ >= 9;
                if (v15)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_138;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            LODWORD(v20) = 0;
LABEL_138:
          v91 = 16;
          goto LABEL_167;
        case 7u:
          v50 = 0;
          v51 = 0;
          v20 = 0;
          *(_WORD *)(a1 + 84) |= 0x100u;
          while (2)
          {
            v52 = *v4;
            v53 = *(_QWORD *)(a2 + v52);
            if (v53 == -1 || v53 >= *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v54 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v53);
              *(_QWORD *)(a2 + v52) = v53 + 1;
              v20 |= (unint64_t)(v54 & 0x7F) << v50;
              if (v54 < 0)
              {
                v50 += 7;
                v15 = v51++ >= 9;
                if (v15)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_142;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            LODWORD(v20) = 0;
LABEL_142:
          v91 = 52;
          goto LABEL_167;
        case 8u:
          v55 = 0;
          v56 = 0;
          v20 = 0;
          *(_WORD *)(a1 + 84) |= 1u;
          while (2)
          {
            v57 = *v4;
            v58 = *(_QWORD *)(a2 + v57);
            if (v58 == -1 || v58 >= *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v58);
              *(_QWORD *)(a2 + v57) = v58 + 1;
              v20 |= (unint64_t)(v59 & 0x7F) << v55;
              if (v59 < 0)
              {
                v55 += 7;
                v15 = v56++ >= 9;
                if (v15)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_146;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            LODWORD(v20) = 0;
LABEL_146:
          v91 = 8;
          goto LABEL_167;
        case 9u:
          v60 = 0;
          v61 = 0;
          v20 = 0;
          *(_WORD *)(a1 + 84) |= 0x1000u;
          while (2)
          {
            v62 = *v4;
            v63 = *(_QWORD *)(a2 + v62);
            if (v63 == -1 || v63 >= *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v63);
              *(_QWORD *)(a2 + v62) = v63 + 1;
              v20 |= (unint64_t)(v64 & 0x7F) << v60;
              if (v64 < 0)
              {
                v60 += 7;
                v15 = v61++ >= 9;
                if (v15)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_150;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            LODWORD(v20) = 0;
LABEL_150:
          v91 = 80;
          goto LABEL_167;
        case 0xAu:
          v65 = v2;
          Data = (void *)PBReaderReadData();

          v67 = Data;
          v2 = v65;
          v68 = 64;
          goto LABEL_86;
        case 0xBu:
          v69 = v2;
          v70 = (void *)PBReaderReadData();

          v67 = v70;
          v2 = v69;
          v68 = 32;
LABEL_86:
          *(_QWORD *)(a1 + v68) = v67;
          continue;
        case 0xCu:
          v71 = 0;
          v72 = 0;
          v20 = 0;
          *(_WORD *)(a1 + 84) |= 2u;
          while (2)
          {
            v73 = *v4;
            v74 = *(_QWORD *)(a2 + v73);
            if (v74 == -1 || v74 >= *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v75 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v74);
              *(_QWORD *)(a2 + v73) = v74 + 1;
              v20 |= (unint64_t)(v75 & 0x7F) << v71;
              if (v75 < 0)
              {
                v71 += 7;
                v15 = v72++ >= 9;
                if (v15)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_154;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            LODWORD(v20) = 0;
LABEL_154:
          v91 = 12;
          goto LABEL_167;
        case 0xDu:
          v76 = 0;
          v77 = 0;
          v20 = 0;
          *(_WORD *)(a1 + 84) |= 0x40u;
          while (2)
          {
            v78 = *v4;
            v79 = *(_QWORD *)(a2 + v78);
            if (v79 == -1 || v79 >= *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v80 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v79);
              *(_QWORD *)(a2 + v78) = v79 + 1;
              v20 |= (unint64_t)(v80 & 0x7F) << v76;
              if (v80 < 0)
              {
                v76 += 7;
                v15 = v77++ >= 9;
                if (v15)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_158;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            LODWORD(v20) = 0;
LABEL_158:
          v91 = 44;
          goto LABEL_167;
        case 0xEu:
          v81 = 0;
          v82 = 0;
          v20 = 0;
          *(_WORD *)(a1 + 84) |= 8u;
          while (2)
          {
            v83 = *v4;
            v84 = *(_QWORD *)(a2 + v83);
            if (v84 == -1 || v84 >= *(_QWORD *)(a2 + *v5))
            {
              *(_BYTE *)(a2 + *v6) = 1;
            }
            else
            {
              v85 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v84);
              *(_QWORD *)(a2 + v83) = v84 + 1;
              v20 |= (unint64_t)(v85 & 0x7F) << v81;
              if (v85 < 0)
              {
                v81 += 7;
                v15 = v82++ >= 9;
                if (v15)
                {
                  LODWORD(v20) = 0;
                  goto LABEL_162;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v6))
            LODWORD(v20) = 0;
LABEL_162:
          v91 = 20;
          goto LABEL_167;
        case 0xFu:
          v86 = 0;
          v87 = 0;
          v20 = 0;
          *(_WORD *)(a1 + 84) |= 0x200u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v88 = *v4;
        v89 = *(_QWORD *)(a2 + v88);
        if (v89 == -1 || v89 >= *(_QWORD *)(a2 + *v5))
          break;
        v90 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v89);
        *(_QWORD *)(a2 + v88) = v89 + 1;
        v20 |= (unint64_t)(v90 & 0x7F) << v86;
        if ((v90 & 0x80) == 0)
          goto LABEL_164;
        v86 += 7;
        v15 = v87++ >= 9;
        if (v15)
        {
          LODWORD(v20) = 0;
          goto LABEL_166;
        }
      }
      *(_BYTE *)(a2 + *v6) = 1;
LABEL_164:
      if (*(_BYTE *)(a2 + *v6))
        LODWORD(v20) = 0;
LABEL_166:
      v91 = 56;
LABEL_167:
      *(_DWORD *)(a1 + v91) = v20;
    }
    while (*(_QWORD *)(a2 + *v4) < *(_QWORD *)(a2 + *v5));
  }
  return *(_BYTE *)(a2 + *v6) == 0;
}

unsigned int *VCAudioReceiver_CreateReceiver(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  _WORD *v4;
  CFTypeRef v5;
  const void *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t i;
  unint64_t v10;
  unsigned int *v12;
  CFTypeRef v13;
  uint64_t v14;
  char v15;
  char v16;
  __int128 v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  NSObject *v22;
  unsigned int *v23;
  unsigned int v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  NSObject *v29;
  unsigned int *v30;
  uint64_t v31;
  NSObject *v32;
  unsigned int *v33;
  int v34;
  uint8_t buf[4];
  uint64_t v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  int v41;
  __int16 v42;
  unsigned int *v43;
  __int16 v44;
  unsigned int *v45;
  __int16 v46;
  int v47;
  char v48[16];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  unint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCAudioReceiver_CreateReceiver_cold_1();
    }
    return 0;
  }
  v2 = (unsigned int *)malloc_type_calloc(1uLL, 0x28C0uLL, 0x10F0040F385DEB8uLL);
  v3 = v2;
  if (!v2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCAudioReceiver_CreateReceiver_cold_2();
    }
    goto LABEL_60;
  }
  v4 = (_WORD *)v2 + 4549;
  v2[196] = 2143289344;
  *((_BYTE *)v2 + 577) = 0;
  memcpy(v2, (const void *)a1, 0x1B0uLL);
  v5 = *(CFTypeRef *)(a1 + 232);
  if (v5)
    v5 = CFRetain(v5);
  *((_QWORD *)v3 + 54) = v5;
  *((_QWORD *)v3 + 70) = 0xFFFFFFFFLL;
  v3[138] = VCReporting_GetDynamicReportingModuleID();
  v3[216] = -1;
  *((_BYTE *)v3 + 9108) = VCDefaults_GetBoolValueForKey(CFSTR("forceUseInternalRTPThreading"), 0);
  v6 = *(const void **)(a1 + 280);
  if (v6)
    v6 = (const void *)CFHash(v6);
  *((_QWORD *)v3 + 1139) = v6;
  *((_BYTE *)v3 + 9120) = *(_BYTE *)(a1 + 300);
  *((_QWORD *)v3 + 1141) = *(_QWORD *)(a1 + 312);
  *((_OWORD *)v3 + 571) = *(_OWORD *)(a1 + 320);
  *((_OWORD *)v3 + 572) = *(_OWORD *)(a1 + 336);
  v3[2583] = -1;
  _VCBoundsSafety_ReleaseAssignAndRetain((const void **)v3 + 1146, *(CFTypeRef *)(a1 + 352));
  _VCBoundsSafety_ReleaseAssignAndRetain((const void **)v3 + 68, *(CFTypeRef *)(a1 + 264));
  _VCBoundsSafety_ReleaseAssignAndRetain((const void **)v3 + 1152, *(CFTypeRef *)(a1 + 360));
  reportingInheritModuleSpecificInfoFromParent();
  v7 = *v3;
  if ((_DWORD)v7)
  {
    v8 = 0;
    for (i = 0; i < v7; ++i)
    {
      v10 = a1 + v8 + 8;
      if (v10 >= a1 + 232 || v10 < a1 + 8)
LABEL_70:
        __break(0x5519u);
      if (*(_BYTE *)(a1 + v8 + 19))
        *v4 = i;
      v12 = &v3[v8 / 4];
      *(_QWORD *)&v3[v8 / 4 + 10] = v3;
      v13 = *(CFTypeRef *)(a1 + v8 + 24);
      if (v13)
      {
        v13 = CFRetain(v13);
        v7 = *v3;
      }
      *((_QWORD *)v12 + 3) = v13;
      *((_QWORD *)v12 + 7) = *(_QWORD *)(a1 + v8 + 56);
      v8 += 56;
    }
  }
  if (*((_BYTE *)v3 + 9108))
  {
    v14 = VCRealTimeThread_Initialize(21, (uint64_t)_VCAudioReceiver_ReceiveProc, (uint64_t)v3, "com.apple.avconference.audioreceiver.rtprecvproc", 0);
    *((_QWORD *)v3 + 67) = v14;
    if (!v14)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          VCAudioReceiver_CreateReceiver_cold_5();
      }
      goto LABEL_60;
    }
  }
  pthread_mutex_init((pthread_mutex_t *)(v3 + 146), 0);
  pthread_mutex_init((pthread_mutex_t *)(v3 + 2244), 0);
  pthread_mutex_init((pthread_mutex_t *)(v3 + 162), 0);
  v15 = *(_BYTE *)(a1 + 298);
  v16 = *(_BYTE *)(a1 + 301);
  *(_QWORD *)&v17 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v65 = v17;
  v61 = v17;
  v62 = v17;
  v63 = v17;
  v64 = v17;
  v66 = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0;
  LODWORD(v61) = *(_DWORD *)(a1 + 244);
  BYTE4(v61) = *(_DWORD *)(a1 + 256) != 0;
  *((_QWORD *)&v61 + 1) = *((_QWORD *)v3 + 68);
  LOBYTE(v62) = *(_BYTE *)(a1 + 276);
  BYTE1(v62) = v15;
  BYTE2(v62) = v16;
  if ((_DWORD)v61 == 3)
    v18 = 0;
  else
    v18 = *(_DWORD *)(a1 + 252);
  *(_QWORD *)((char *)&v62 + 4) = __PAIR64__(*(_DWORD *)(a1 + 304), v18);
  *(_QWORD *)&v63 = *((_QWORD *)v3 + 1146);
  DWORD2(v63) = v3[94];
  BYTE12(v63) = *(_BYTE *)(a1 + 302);
  if ((_DWORD)v61 == 3)
    v19 = *(_DWORD *)(a1 + 248);
  else
    v19 = 0;
  if (*(_BYTE *)(a1 + 392))
    v20 = 20;
  else
    v20 = 0;
  *(_QWORD *)&v64 = __PAIR64__(v20, v19);
  DWORD2(v64) = *(_DWORD *)(a1 + 384);
  BYTE12(v64) = *(unsigned __int16 *)(a1 + 296) == 1;
  BYTE13(v64) = *(_BYTE *)(a1 + 425);
  *(_QWORD *)&v65 = v3;
  *((_QWORD *)&v65 + 1) = _VCAudioReceiver_DTMFEventCallback;
  LOBYTE(v66) = *(_BYTE *)(a1 + 426);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    v21 = VRTraceErrorLogLevelToCSTR();
    v22 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      v23 = *(unsigned int **)(a1 + 352);
      *(_DWORD *)buf = 136315906;
      v37 = v21;
      v38 = 2080;
      v39 = "VCAudioReceiver_CreateReceiver";
      v40 = 1024;
      v41 = 270;
      v42 = 2048;
      v43 = v23;
      _os_log_impl(&dword_1D8A54000, v22, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Creating Audio Receiver with jbTargetEstimatorSynchronizer=%p", buf, 0x26u);
    }
  }
  if (*((_BYTE *)v3 + 276))
  {
    v24 = v3[94];
    CFStringGetCStringPtr(*((CFStringRef *)v3 + 36), 0x8000100u);
    CFStringGetCStringPtr(*((CFStringRef *)v3 + 35), 0x8000100u);
    if (v24)
    {
      FourccToCStr(v3[94]);
      __sprintf_chk(v48, 0, 0xC8uLL, "session_%s-participant_%s-groupid_%s");
    }
    else
    {
      __sprintf_chk(v48, 0, 0xC8uLL, "session_%s-participant_%s");
    }
  }
  else
  {
    __sprintf_chk(v48, 0, 0xC8uLL, "%010u");
  }
  v25 = VCJitterBuffer_Create((uint64_t)v48);
  *((_QWORD *)v3 + 55) = v25;
  if (!v25)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCAudioReceiver_CreateReceiver_cold_3();
    }
LABEL_60:
    VCAudioReceiver_Finalize(v3);
    return 0;
  }
  *((_QWORD *)v3 + 1130) = v3 + 2;
  if (*v3)
  {
    v26 = 0;
    v27 = (uint64_t *)(v3 + 2);
    while (1)
    {
      if (v27 >= (uint64_t *)v3 + 29 || v27 < (uint64_t *)v3 + 1)
        goto LABEL_70;
      if ((RTPSetAudioReceiver(*v27, (uint64_t)v3) & 0x80000000) != 0)
        break;
      ++v26;
      v27 += 7;
      if (v26 >= *v3)
        goto LABEL_49;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCAudioReceiver_CreateReceiver_cold_4();
    }
    goto LABEL_60;
  }
LABEL_49:
  *((_QWORD *)v3 + 1160) = 0;
  if (*((_BYTE *)v3 + 380))
  {
    *((_QWORD *)v3 + 1160) = VCAudioIssueDetector_Create(1u);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      v28 = VRTraceErrorLogLevelToCSTR();
      v29 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v30 = (unsigned int *)*((_QWORD *)v3 + 1160);
        *(_DWORD *)buf = 136316162;
        v37 = v28;
        v38 = 2080;
        v39 = "VCAudioReceiver_CreateReceiver";
        v40 = 1024;
        v41 = 292;
        v42 = 2048;
        v43 = v30;
        v44 = 2048;
        v45 = v3;
        _os_log_impl(&dword_1D8A54000, v29, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Audio issue detector=%p is created in audio receiver=%p", buf, 0x30u);
      }
    }
  }
  v3[2322] = v3[97];
  *((_BYTE *)v3 + 10344) = *(_BYTE *)(a1 + 408);
  *((_QWORD *)v3 + 1292) = 0;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    v31 = VRTraceErrorLogLevelToCSTR();
    v32 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      v33 = (unsigned int *)*((_QWORD *)v3 + 55);
      v34 = *((unsigned __int16 *)v3 + 148);
      *(_DWORD *)buf = 136316418;
      v37 = v31;
      v38 = 2080;
      v39 = "VCAudioReceiver_CreateReceiver";
      v40 = 1024;
      v41 = 303;
      v42 = 2048;
      v43 = v3;
      v44 = 2048;
      v45 = v33;
      v46 = 1024;
      v47 = v34;
      _os_log_impl(&dword_1D8A54000, v32, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Initialized AudioReceiver[%p] with JitterBuffer[%p] for direction[%d]", buf, 0x36u);
    }
  }
  return v3;
}

void _VCAudioReceiver_ReceiveProc(unsigned int *a1, unsigned int *a2, _BYTE *a3)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  uint8_t *v13;
  uint64_t *v14;
  int v15;
  int v16;
  uint64_t v17;
  NSObject *v18;
  int ErrorLogLevelForModule;
  uint64_t v20;
  NSObject *v21;
  _BOOL4 v22;
  _BOOL4 v23;
  unint64_t v24;
  uint64_t v25;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  int v33;
  uint64_t v34;
  NSObject *v35;
  unsigned int *v36;
  unsigned int *v37;
  _DWORD *v38;
  _OWORD v39[2];
  _QWORD v40[2];
  uint8_t buf[4];
  uint64_t v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  unsigned int *v48;
  __int16 v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)a1 + 577))
  {
    v40[0] = 0;
    v40[1] = 0;
    memset(v39, 0, sizeof(v39));
    v6 = *a1;
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = (uint64_t *)(a1 + 2);
      do
      {
        if (v7 == 4)
LABEL_53:
          __break(0x5519u);
        *((_DWORD *)v40 + v7) = 48;
        v9 = *v8;
        v8 += 7;
        *((_QWORD *)v39 + v7++) = v9;
      }
      while (v6 != v7);
    }
    if ((RTPGetReceiveStatus((uint64_t)v39, (unsigned int *)v40, v6, *a2) & 0x80000000) != 0)
    {
      usleep(0x2710u);
      return;
    }
    if (!*a1)
      return;
    v10 = 0;
    v11 = 0;
    v12 = a1 + 2608;
    v37 = a1 + 2;
    v36 = a1 + 218;
    while (1)
    {
      v13 = (uint8_t *)v40 + 4 * v10;
      if (v13 >= buf)
        goto LABEL_53;
      if ((*v13 & 0x10) != 0)
      {
        if (v12 <= a1)
          goto LABEL_53;
        if (!*((_BYTE *)a1 + 448))
        {
          ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
          v11 = -2144862152;
          if (ErrorLogLevelForModule >= 3)
          {
            v20 = VRTraceErrorLogLevelToCSTR();
            v21 = *MEMORY[0x1E0CF2758];
            v22 = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR);
            v11 = -2144862152;
            if (v22)
            {
              *(_DWORD *)buf = 136315650;
              v42 = v20;
              v43 = 2080;
              v44 = "_VCAudioReceiver_ProcessRTPPacket";
              v45 = 1024;
              v46 = 1286;
              _os_log_error_impl(&dword_1D8A54000, v21, OS_LOG_TYPE_ERROR, "VCAudioReceiver [%s] %s:%d ERROR bad handle", buf, 0x1Cu);
              v11 = -2144862152;
            }
          }
          goto LABEL_46;
        }
        v14 = (uint64_t *)&v37[14 * v10];
        while (1)
        {
          v38 = 0;
          v15 = RTPRecvRTP(*v14, &v38);
          v16 = v15;
          *((_BYTE *)a1 + 576) = 0;
          if ((v15 & 0x80000000) == 0)
          {
            _VCAudioReceiver_HandleRTPPacket((uint64_t)a1, (uint64_t)v14, (uint64_t)v38);
            RTPReleaseRTPPacket(*v14, &v38);
LABEL_23:
            v11 = v16;
            goto LABEL_24;
          }
          if ((v15 & 0x40000000) == 0)
            break;
          usleep(0x3A98u);
          if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
          {
            v17 = VRTraceErrorLogLevelToCSTR();
            v18 = *MEMORY[0x1E0CF2758];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136316162;
              v42 = v17;
              v43 = 2080;
              v44 = "_VCAudioReceiver_ProcessRTPPacket";
              v45 = 1024;
              v46 = 1313;
              v47 = 2048;
              v48 = a1;
              v49 = 1024;
              v50 = v16;
              _os_log_impl(&dword_1D8A54000, v18, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Audio receiver %p RTPRecvRTP returned[%x] sleeping 15000usecs??", buf, 0x2Cu);
            }
          }
        }
        v11 = -2147418057;
        if (v15 != -2147418057)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            v31 = VRTraceErrorLogLevelToCSTR();
            v32 = *MEMORY[0x1E0CF2758];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136316162;
              v42 = v31;
              v43 = 2080;
              v44 = "_VCAudioReceiver_ProcessRTPPacket";
              v45 = 1024;
              v46 = 1316;
              v47 = 2048;
              v48 = a1;
              v49 = 1024;
              v50 = v16;
              _os_log_error_impl(&dword_1D8A54000, v32, OS_LOG_TYPE_ERROR, "VCAudioReceiver [%s] %s:%d Audio receiver %p received an error %x", buf, 0x2Cu);
            }
          }
          goto LABEL_23;
        }
      }
LABEL_24:
      if (!v11)
      {
        if ((*v13 & 0x20) != 0)
        {
          if (v12 <= a1)
            goto LABEL_53;
          v23 = (a1[216] & 1) == 0;
          v24 = (unint64_t)&v36[410 * ((a1[216] & 1) == 0)];
          v25 = *(_QWORD *)&v37[14 * v10];
          if (v24)
          {
            if (v24 >= (unint64_t)(a1 + 1038) || v24 < (unint64_t)v36)
              goto LABEL_53;
            v27 = RTPRecvRTCP(v25, &v36[410 * ((a1[216] & 1) == 0)]);
            if ((v27 & 0x80000000) == 0)
            {
              v28 = (uint64_t)a1;
              v29 = (uint64_t *)&v37[14 * v10];
              v30 = v24;
LABEL_45:
              _VCAudioReceiver_ProcessAudioRTCPInternal(v28, v29, v30);
              RTCPCleanupPacketList(v24);
              v11 = 0;
              a1[216] = v23;
              goto LABEL_46;
            }
          }
          else
          {
            v27 = RTPRecvRTCP(v25, 0);
            if ((v27 & 0x80000000) == 0)
            {
              v28 = (uint64_t)a1;
              v29 = (uint64_t *)&v37[14 * v10];
              v30 = 0;
              goto LABEL_45;
            }
          }
          v33 = v27;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            v34 = VRTraceErrorLogLevelToCSTR();
            v35 = *MEMORY[0x1E0CF2758];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315906;
              v42 = v34;
              v43 = 2080;
              v44 = "_VCAudioReceiver_ProcessRTCPPacket";
              v45 = 1024;
              v46 = 2020;
              v47 = 1024;
              LODWORD(v48) = v33;
              _os_log_error_impl(&dword_1D8A54000, v35, OS_LOG_TYPE_ERROR, "VCAudioReceiver [%s] %s:%d Failed to retrieve RTCP packet. Error:%x", buf, 0x22u);
            }
          }
        }
        v11 = 0;
      }
LABEL_46:
      if (++v10 >= (unint64_t)*a1)
        return;
    }
  }
  *a3 = 1;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
  {
    v3 = VRTraceErrorLogLevelToCSTR();
    v4 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      v42 = v3;
      v43 = 2080;
      v44 = "_VCAudioReceiver_ReceiveProc";
      v45 = 1024;
      v46 = 2034;
      _os_log_impl(&dword_1D8A54000, v4, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Tearing down audio receiver thread", buf, 0x1Cu);
    }
  }
}

uint64_t _VCAudioReceiver_DTMFEventCallback(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  if (result)
  {
    v1 = *(uint64_t (**)(_QWORD))(result + 9160);
    if (v1)
      return v1(*(_QWORD *)(result + 9128));
  }
  return result;
}

void VCAudioReceiver_Finalize(unsigned int *a1)
{
  const void *v2;
  uint64_t v3;
  NSObject *v4;
  unint64_t v5;
  CFTypeRef *v6;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  unsigned int *v13;
  NSObject *global_queue;
  _QWORD block[5];
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  unsigned int *v23;
  __int16 v24;
  unsigned int *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = (const void *)*((_QWORD *)a1 + 54);
    if (v2)
      CFRelease(v2);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      v3 = VRTraceErrorLogLevelToCSTR();
      v4 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        v17 = v3;
        v18 = 2080;
        v19 = "VCAudioReceiver_Finalize";
        v20 = 1024;
        v21 = 352;
        v22 = 2048;
        v23 = a1;
        _os_log_impl(&dword_1D8A54000, v4, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Cleaning up audioReceiver (0x%p)", buf, 0x26u);
      }
    }
    if (*a1)
    {
      v5 = 0;
      v6 = (CFTypeRef *)(a1 + 6);
      do
      {
        if (v6 - 2 >= (CFTypeRef *)a1 + 29 || v6 - 2 < (CFTypeRef *)a1 + 1)
          __break(0x5519u);
        RTPSetAudioReceiver((uint64_t)*(v6 - 2), 0);
        if (*v6)
          CFRelease(*v6);
        ++v5;
        v6 += 7;
      }
      while (v5 < *a1);
    }
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 162));
    if (*((_BYTE *)a1 + 577))
    {
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 162));
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        v8 = VRTraceErrorLogLevelToCSTR();
        v9 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          v17 = v8;
          v18 = 2080;
          v19 = "_VCAudioReceiver_Lock";
          v20 = 1024;
          v21 = 316;
          _os_log_impl(&dword_1D8A54000, v9, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Receiver is being torn down", buf, 0x1Cu);
        }
      }
    }
    *((_BYTE *)a1 + 577) = 1;
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 162));
    v10 = *((_QWORD *)a1 + 1160);
    if (v10)
    {
      VCAudioIssueDetector_Stop(v10);
      VCAudioIssueDetector_Finalize((int32x2_t ***)a1 + 1160);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        v11 = VRTraceErrorLogLevelToCSTR();
        v12 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        {
          v13 = (unsigned int *)*((_QWORD *)a1 + 1160);
          *(_DWORD *)buf = 136316162;
          v17 = v11;
          v18 = 2080;
          v19 = "_VCAudioIssueDetectorStopAndFinalize";
          v20 = 1024;
          v21 = 118;
          v22 = 2048;
          v23 = v13;
          v24 = 2048;
          v25 = a1;
          _os_log_impl(&dword_1D8A54000, v12, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Audio issue detector=%p destroyed in audio receiver=%p", buf, 0x30u);
        }
      }
      *((_QWORD *)a1 + 1160) = 0;
    }
    if (*((_BYTE *)a1 + 9108))
    {
      VCRealTimeThread_Stop(*((_QWORD *)a1 + 67));
      global_queue = dispatch_get_global_queue(2, 0);
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 0x40000000;
      block[2] = __VCAudioReceiver_Finalize_block_invoke;
      block[3] = &__block_descriptor_tmp_19;
      block[4] = a1;
      dispatch_async(global_queue, block);
    }
    else
    {
      _VCAudioRecevier_UnregisterTransportCallbacks((uint64_t)a1);
      _VCAudioReceiver_Cleanup((uint64_t)a1);
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioReceiver_Finalize_cold_1();
  }
}

void _VCAudioReceiver_Cleanup(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  _VCAudioReceiver_UnregisterReportingTask(a1);
  VCAudioDecoderList_Cleanup(a1 + 712);
  v2 = *(const void **)(a1 + 9168);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 9168) = 0;
  }
  v3 = *(const void **)(a1 + 9216);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 9216) = 0;
  }
  v4 = *(const void **)(a1 + 10376);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 10376) = 0;
  }
  if (*(_QWORD *)(a1 + 10400))
  {
    VCOverlayManager_releaseOverlaySourceWithToken(*(_QWORD *)(a1 + 10392), 0);
    v5 = *(const void **)(a1 + 10400);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(a1 + 10400) = 0;
    }
  }
  VCJitterBuffer_Finalize(*(char ***)(a1 + 440));
  VCAudioDump_Finalize((void **)(a1 + 10336));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 584));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 8976));
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    v6 = VRTraceErrorLogLevelToCSTR();
    v7 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      v8 = 136315906;
      v9 = v6;
      v10 = 2080;
      v11 = "_VCAudioReceiver_Cleanup";
      v12 = 1024;
      v13 = 341;
      v14 = 2048;
      v15 = a1;
      _os_log_impl(&dword_1D8A54000, v7, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d VCAudioReceiver cleanup DONE (0x%p)", (uint8_t *)&v8, 0x26u);
    }
  }
  free((void *)a1);
}

uint64_t _VCAudioRecevier_UnregisterTransportCallbacks(uint64_t result)
{
  _BYTE *v1;
  unsigned int *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = (_BYTE *)(result + 9109);
  if (*(_BYTE *)(result + 9109))
  {
    v2 = (unsigned int *)result;
    if (*(_DWORD *)result)
    {
      v3 = 0;
      v4 = result + 8;
      v5 = result + 232;
      v6 = result + 8;
      while (v6 < v5 && v6 >= v4)
      {
        RTPUnregisterPacketCallback();
        v6 += 56;
        result = RTCPUnregisterPacketCallback();
        if (++v3 >= (unint64_t)*v2)
          goto LABEL_7;
      }
      __break(0x5519u);
    }
    else
    {
LABEL_7:
      *v1 = 0;
    }
  }
  return result;
}

void _VCAudioReceiver_StartIssueDetector(uint64_t a1)
{
  double v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD v8[2];
  int v9;
  int v10;
  uint8_t buf[4];
  uint64_t v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = *(double *)(a1 + 456);
  v3 = *(_QWORD *)(a1 + 544);
  v8[0] = 0xAAAAAAAAAAAAAAAALL;
  v8[1] = v3;
  WORD1(v8[0]) = (int)v2;
  LOWORD(v8[0]) = *(_DWORD *)(a1 + 496);
  v4 = *(_DWORD *)(a1 + 9288);
  v9 = *(_DWORD *)(a1 + 552);
  v10 = v4;
  VCAudioIssueDetector_Configure(*(_QWORD *)(a1 + 9280), (unsigned __int16 *)v8);
  VCAudioIssueDetector_Start(*(_QWORD *)(a1 + 9280));
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    v5 = VRTraceErrorLogLevelToCSTR();
    v6 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 9280);
      *(_DWORD *)buf = 136316674;
      v12 = v5;
      v13 = 2080;
      v14 = "_VCAudioReceiver_StartIssueDetector";
      v15 = 1024;
      v16 = 389;
      v17 = 2048;
      v18 = v7;
      v19 = 2048;
      v20 = a1;
      v21 = 1024;
      v22 = WORD1(v8[0]);
      v23 = 1024;
      v24 = LOWORD(v8[0]);
      _os_log_impl(&dword_1D8A54000, v6, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Audio issue detector=%p is configured in audioReceiver=%p with audioIOSampleRate=%d, audioIOSampleCount=%d", buf, 0x3Cu);
    }
  }
}

uint64_t VCAudioReceiver_Start(unsigned int *a1, double a2)
{
  double v3;
  __int128 v4;
  uint64_t *v5;
  uint64_t v6;
  CFPropertyListRef v7;
  uint64_t result;
  uint64_t Handle;
  unint64_t v10;
  const __CFString *v11;
  unint64_t v12;
  uint64_t *i;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  const __CFString *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v20[5];

  v20[4] = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      result = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR);
      if (!(_DWORD)result)
        return result;
      VCAudioReceiver_Start_cold_1();
    }
    return 0;
  }
  if (*((_WORD *)a1 + 148) != 1 && !*((_BYTE *)a1 + 448))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      result = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR);
      if (!(_DWORD)result)
        return result;
      VCAudioReceiver_Start_cold_4();
    }
    return 0;
  }
  LODWORD(a2) = a1[124];
  v3 = (double)*(unint64_t *)&a2 / *((double *)a1 + 57);
  v4 = *(_OWORD *)(a1 + 118);
  v14 = *(_OWORD *)(a1 + 114);
  v15 = v4;
  v16 = *(_OWORD *)(a1 + 122);
  v18 = 0xAAAAAAAAAAAAAAAALL;
  v17 = CFSTR("AudioReceiverDelay");
  LODWORD(v18) = vcvtpd_u64_f64(*((double *)a1 + 1298) / v3);
  v19 = 32;
  v5 = (uint64_t *)(a1 + 2594);
  if ((VCAudioFrameDelay_Create((const __CFAllocator *)*MEMORY[0x1E0C9AE00], &v14, (uint64_t *)a1 + 1297) & 0x80000000) != 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      result = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR);
      if (!(_DWORD)result)
        return result;
      VCAudioReceiver_Start_cold_3();
    }
    return 0;
  }
  v6 = MEMORY[0x1E0CA2E18];
  *((_QWORD *)a1 + 63) = 0x7FF8000000000000;
  *((_OWORD *)a1 + 32) = *(_OWORD *)v6;
  *((_QWORD *)a1 + 66) = *(_QWORD *)(v6 + 16);
  if (*((_QWORD *)a1 + 68))
  {
    v7 = CFPreferencesCopyAppValue(CFSTR("forceNOLOG"), CFSTR("com.apple.VideoConference"));
    if (v7)
    {
      CFRelease(v7);
    }
    else
    {
      Handle = CreateHandle();
      if (Handle != 0xFFFFFFFFLL)
      {
        v10 = Handle;
        v11 = (const __CFString *)(Handle + 4);
        *((_QWORD *)a1 + 70) = Handle;
        VCJitterBuffer_ResetPlaybackReportingMetrics(*((_QWORD *)a1 + 55));
        v20[0] = 0;
        v20[1] = v20;
        v20[2] = 0x2000000000;
        v20[3] = *((_QWORD *)a1 + 68);
        *(_QWORD *)&v14 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v14 + 1) = 0x40000000;
        *(_QWORD *)&v15 = ___VCAudioReceiver_RegisterReportingTask_block_invoke;
        *((_QWORD *)&v15 + 1) = &unk_1E9E588B8;
        v17 = v11;
        v18 = v10;
        *(_QWORD *)&v16 = v20;
        *((_QWORD *)&v16 + 1) = v10;
        reportingRegisterPeriodicTask();
        _Block_object_dispose(v20, 8);
      }
    }
  }
  if (*((_QWORD *)a1 + 1160))
    _VCAudioReceiver_StartIssueDetector((uint64_t)a1);
  _VCAudioReceiver_RegisterStatistics((uint64_t)a1);
  if (!*((_QWORD *)a1 + 1300) && VCOverlayManager_isOverlayEnabled())
    *((_QWORD *)a1 + 1300) = VCOverlayManager_createOverlaySourceForToken(*((_QWORD *)a1 + 1299), 0);
  if (*((_BYTE *)a1 + 9108))
  {
    if ((VCRealTimeThread_Start(*((_QWORD *)a1 + 67)) & 1) == 0)
    {
      result = *v5;
      if (*v5)
      {
        CFRelease((CFTypeRef)result);
        result = 0;
        *v5 = 0;
      }
      return result;
    }
    return 1;
  }
  if (*((_BYTE *)a1 + 9109))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCAudioReceiver_Start_cold_2();
    }
    return 1;
  }
  result = 1;
  *((_BYTE *)a1 + 9109) = 1;
  if (*a1)
  {
    v12 = 0;
    for (i = (uint64_t *)(a1 + 2); i < (uint64_t *)a1 + 29 && i >= (uint64_t *)a1 + 1; i += 7)
    {
      RTPRegisterPacketCallback(*i, (uint64_t)i, &__block_literal_global_99);
      RTCPRegisterPacketCallback(*i, (uint64_t)i, &__block_literal_global_20);
      ++v12;
      result = 1;
      if (v12 >= *a1)
        return result;
    }
    __break(0x5519u);
  }
  return result;
}

void _VCAudioReceiver_RegisterStatistics(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  _QWORD v7[5];
  uint8_t buf[4];
  uint64_t v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 393))
  {
    if (*(_DWORD *)(a1 + 10332) != -1)
      _VCAudioReceiver_UnregisterStatistics(a1);
    v2 = *(void **)(a1 + 9216);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 0x40000000;
    v7[2] = ___VCAudioReceiver_RegisterStatistics_block_invoke;
    v7[3] = &__block_descriptor_tmp_15;
    v7[4] = a1;
    *(_DWORD *)(a1 + 10332) = VCRateControlRegisterStatisticsChangeHandler(v2, 11, (uint64_t)v7);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      v3 = VRTraceErrorLogLevelToCSTR();
      v4 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v5 = *(_QWORD *)(a1 + 9216);
        v6 = *(_DWORD *)(a1 + 10332);
        *(_DWORD *)buf = 136316418;
        v9 = v3;
        v10 = 2080;
        v11 = "_VCAudioReceiver_RegisterStatistics";
        v12 = 1024;
        v13 = 164;
        v14 = 2048;
        v15 = a1;
        v16 = 2048;
        v17 = v5;
        v18 = 1024;
        v19 = v6;
        _os_log_impl(&dword_1D8A54000, v4, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d AudioReceiver[%p] Registered statisticsCollector[%p] with index=%d", buf, 0x36u);
      }
    }
  }
}

void VCAudioReceiver_Stop(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  const void *v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 9280);
    if (v2)
    {
      VCAudioIssueDetector_Stop(v2);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        v3 = VRTraceErrorLogLevelToCSTR();
        v4 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        {
          v5 = *(_QWORD *)(a1 + 9280);
          v7 = 136316162;
          v8 = v3;
          v9 = 2080;
          v10 = "VCAudioReceiver_Stop";
          v11 = 1024;
          v12 = 442;
          v13 = 2048;
          v14 = v5;
          v15 = 2048;
          v16 = a1;
          _os_log_impl(&dword_1D8A54000, v4, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Audio issue detector=%p is stopped in audio receiver=%p", (uint8_t *)&v7, 0x30u);
        }
      }
    }
    _VCAudioReceiver_UnregisterStatistics(a1);
    if (*(_BYTE *)(a1 + 9108))
      VCRealTimeThread_Stop(*(_QWORD *)(a1 + 536));
    else
      _VCAudioRecevier_UnregisterTransportCallbacks(a1);
    if (*(_QWORD *)(a1 + 10336))
    {
      VCAudioDump_Finalize((void **)(a1 + 10336));
      free(*(void **)(a1 + 10336));
      *(_QWORD *)(a1 + 10336) = 0;
    }
    _VCAudioReceiver_UnregisterReportingTask(a1);
    v6 = *(const void **)(a1 + 10376);
    if (v6)
    {
      CFRelease(v6);
      *(_QWORD *)(a1 + 10376) = 0;
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioReceiver_Stop_cold_1();
  }
}

void _VCAudioReceiver_UnregisterStatistics(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = *(unsigned int *)(a1 + 10332);
  if ((_DWORD)v1 != -1)
  {
    VCRateControlUnregisterStatisticsChangeHandler(*(void **)(a1 + 9216), 11, v1);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      v3 = VRTraceErrorLogLevelToCSTR();
      v4 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v5 = *(_QWORD *)(a1 + 9216);
        v6 = *(_DWORD *)(a1 + 10332);
        v7 = 136316418;
        v8 = v3;
        v9 = 2080;
        v10 = "_VCAudioReceiver_UnregisterStatistics";
        v11 = 1024;
        v12 = 151;
        v13 = 2048;
        v14 = a1;
        v15 = 2048;
        v16 = v5;
        v17 = 1024;
        v18 = v6;
        _os_log_impl(&dword_1D8A54000, v4, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d AudioReceiver[%p] Unregistered statisticsCollector[%p] with index=%d", (uint8_t *)&v7, 0x36u);
      }
    }
    *(_DWORD *)(a1 + 10332) = -1;
  }
}

void _VCAudioReceiver_UnregisterReportingTask(uint64_t a1)
{
  const void *v2;

  if (*(_QWORD *)(a1 + 544))
  {
    if (CheckInHandleDebug())
      CheckOutHandleDebug();
    if ((reportingUnregisterPeriodicTask() & 1) == 0 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        _VCAudioReceiver_UnregisterReportingTask_cold_1();
    }
    reportingCacheModuleSpecificInfo();
    v2 = *(const void **)(a1 + 544);
    if (v2)
      CFRelease(v2);
    *(_QWORD *)(a1 + 544) = 0;
    *(_QWORD *)(a1 + 560) = 0xFFFFFFFFLL;
  }
}

void VCAudioReceiver_Reset(uint64_t a1)
{
  if (a1)
    VCJitterBuffer_Reset(*(_QWORD *)(a1 + 440));
}

double VCAudioReceiver_GetLatestAudioTimestamp(uint64_t a1)
{
  if (a1)
    return *(double *)(a1 + 504);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioReceiver_GetLatestAudioTimestamp_cold_1();
  }
  return NAN;
}

__CFString *_VCAudioReceiver_CreateStringForPayloadData(uint64_t a1)
{
  __CFString *Mutable;
  uint64_t i;
  uint64_t v4;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  for (i = 0; i != 128; ++i)
  {
    v4 = *(unsigned int *)(a1 + 9808 + 4 * i);
    if ((_DWORD)v4)
      CFStringAppendFormat(Mutable, 0, CFSTR("%d=%d;"), i, v4);
  }
  return Mutable;
}

void VCAudioReceiver_FlushQueues(uint64_t a1)
{
  if (a1)
    VCJitterBuffer_Flush(*(_QWORD *)(a1 + 440));
}

BOOL VCAudioReceiver_SetupDecoders(uint64_t a1, uint64_t a2, int a3, __int128 *a4, int a5)
{
  pthread_mutex_t *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  unint64_t i;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int ErrorLogLevelForModule;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  char *v26;
  int v27;
  _QWORD *v28;
  int v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  const char *v34;
  uint32_t v35;
  uint64_t v36;
  NSObject *v37;
  int v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  char *v42;
  int v43;
  char *v44;
  int v45;
  _BOOL4 v46;
  __int128 v47;
  __int128 v48;
  _BOOL8 result;
  uint64_t v50;
  NSObject *v51;
  NSObject *v52;
  os_signpost_id_t v53;
  os_signpost_id_t v54;
  NSObject *v55;
  int v56;
  os_signpost_id_t v57;
  os_signpost_id_t v58;
  _BOOL4 v59;
  int v60;
  __int128 *v61;
  pthread_mutex_t *v62;
  uint64_t v63;
  char *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  unint64_t v76;
  uint8_t buf[4];
  uint64_t v78;
  __int16 v79;
  const char *v80;
  __int16 v81;
  int v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  int v88;
  __int16 v89;
  char *v90;
  __int16 v91;
  int v92;
  __int16 v93;
  char *v94;
  __int16 v95;
  int v96;
  __int16 v97;
  int v98;
  __int16 v99;
  char *v100;
  __int16 v101;
  uint64_t v102;
  __int16 v103;
  uint64_t v104;
  char v105[16];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  char __str[16];
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      result = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      VCAudioReceiver_SetupDecoders_cold_1();
    }
    return 0;
  }
  v10 = (pthread_mutex_t *)(a1 + 584);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  v76 = 0xAAAAAAAAAAAAAAAALL;
  v11 = *a4;
  v12 = a4[1];
  v72 = -1431655766;
  v73 = v11;
  v63 = a2;
  v70 = a2;
  v71 = a3;
  v13 = a4[2];
  v74 = v12;
  v75 = v13;
  LODWORD(v76) = a5;
  BYTE4(v76) = *(_BYTE *)(a1 + 409);
  BYTE5(v76) = *(_BYTE *)(a1 + 424);
  v14 = (_BYTE *)MEMORY[0x1E0CF2760];
  if (*MEMORY[0x1E0CF2760])
  {
    v52 = *MEMORY[0x1E0CF2758];
    v53 = os_signpost_id_generate((os_log_t)*MEMORY[0x1E0CF2758]);
    if (v53 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v54 = v53;
      if (os_signpost_enabled(v52))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1D8A54000, v52, OS_SIGNPOST_EVENT, v54, "AudioReceiverSetUpDecodersStart", (const char *)&unk_1D91A2482, buf, 2u);
      }
    }
  }
  v15 = (_QWORD *)(a1 + 712);
  v16 = VCAudioDecoderList_Setup(a1 + 712, &v70);
  if (*v14)
  {
    v55 = *MEMORY[0x1E0CF2758];
    v56 = v16;
    v57 = os_signpost_id_generate((os_log_t)*MEMORY[0x1E0CF2758]);
    v16 = v56;
    if (v57 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v58 = v57;
      v59 = os_signpost_enabled(v55);
      v16 = v56;
      if (v59)
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1D8A54000, v55, OS_SIGNPOST_EVENT, v58, "AudioReceiverSetUpDecodersEnd", (const char *)&unk_1D91A2482, buf, 2u);
        v16 = v56;
      }
    }
  }
  if (v16 < 0)
  {
    pthread_mutex_unlock(v10);
    return 0;
  }
  v61 = a4;
  v62 = v10;
  v60 = v16;
  if (*(_DWORD *)(a1 + 720))
  {
    v17 = 0;
    for (i = 0; i < *(unsigned int *)(a1 + 720); ++i)
    {
      v19 = *v15;
      v111 = 0u;
      v112 = 0u;
      *(_OWORD *)__str = 0u;
      v110 = 0u;
      v107 = 0u;
      v108 = 0u;
      *(_OWORD *)v105 = 0u;
      v106 = 0u;
      v20 = v19 + v17;
      if (*(_QWORD *)(v19 + v17 + 8))
      {
        v21 = *(unsigned __int8 *)(a1 + 276);
        ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
        if (v21)
        {
          if (ErrorLogLevelForModule < 7)
            goto LABEL_19;
          v23 = VRTraceErrorLogLevelToCSTR();
          v24 = *MEMORY[0x1E0CF2758];
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
            goto LABEL_19;
          v25 = *(_QWORD *)(v20 + 8);
          v66 = *(_QWORD *)(v25 + 88);
          v68 = *(unsigned __int8 *)(a1 + 409);
          v64 = FormatToCStr(v25, __str, 0x40uLL);
          v65 = *(_DWORD *)(v19 + v17);
          v26 = FormatToCStr(*(_QWORD *)(v20 + 8) + 40, v105, 0x40uLL);
          v27 = *(unsigned __int8 *)(a1 + 276);
          v28 = v15;
          v29 = *(unsigned __int16 *)(a1 + 296);
          v30 = FourccToCStr(*(_DWORD *)(a1 + 376));
          v31 = *(_QWORD *)(a1 + 280);
          v32 = *(_QWORD *)(a1 + 288);
          *(_DWORD *)buf = 136318466;
          v78 = v23;
          v79 = 2080;
          v80 = "_VCAudioReceiver_LogDecoderConfigurations";
          v81 = 1024;
          v82 = 783;
          v83 = 2048;
          v84 = v25;
          v85 = 2048;
          v86 = v66;
          v87 = 1024;
          v88 = v68;
          v89 = 2080;
          v90 = v64;
          v91 = 1024;
          v92 = v65;
          v93 = 2080;
          v94 = v26;
          v95 = 1024;
          v96 = v27;
          v97 = 1024;
          v98 = v29;
          v15 = v28;
          v99 = 2080;
          v100 = v30;
          v101 = 2112;
          v102 = v31;
          v103 = 2112;
          v104 = v32;
          v33 = v24;
          v34 = "VCAudioReceiver [%s] %s:%d SoundDec_Create yielded instance=%p converter=%p outOfProcess=%{BOOL}d from f"
                "ormat=%s payload=%u to format=%s for multiwayMode=%{BOOL}d direction=%hu streamGroupID=%s participantID=%@ sessionID=%@";
          v35 = 122;
        }
        else
        {
          if (ErrorLogLevelForModule < 7)
            goto LABEL_19;
          v39 = VRTraceErrorLogLevelToCSTR();
          v40 = *MEMORY[0x1E0CF2758];
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
            goto LABEL_19;
          v41 = *(_QWORD *)(v20 + 8);
          v67 = *(_QWORD *)(v41 + 88);
          v69 = *(unsigned __int8 *)(a1 + 409);
          v42 = FormatToCStr(v41, __str, 0x40uLL);
          v43 = *(_DWORD *)(v19 + v17);
          v44 = FormatToCStr(*(_QWORD *)(v20 + 8) + 40, v105, 0x40uLL);
          v45 = *(unsigned __int8 *)(a1 + 276);
          *(_DWORD *)buf = 136317442;
          v78 = v39;
          v79 = 2080;
          v80 = "_VCAudioReceiver_LogDecoderConfigurations";
          v81 = 1024;
          v82 = 780;
          v83 = 2048;
          v84 = v41;
          v85 = 2048;
          v86 = v67;
          v87 = 1024;
          v88 = v69;
          v89 = 2080;
          v90 = v42;
          v91 = 1024;
          v92 = v43;
          v93 = 2080;
          v94 = v44;
          v95 = 1024;
          v96 = v45;
          v33 = v40;
          v34 = "VCAudioReceiver [%s] %s:%d SoundDec_Create yielded instance=%p converter=%p outOfProcess=%{BOOL}d from f"
                "ormat=%s payload=%u to format=%s for multiwayMode=%{BOOL}d";
          v35 = 86;
        }
      }
      else
      {
        if ((int)VRTraceGetErrorLogLevelForModule() < 7)
          goto LABEL_19;
        v36 = VRTraceErrorLogLevelToCSTR();
        v37 = *MEMORY[0x1E0CF2758];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
          goto LABEL_19;
        v38 = *(_DWORD *)(v19 + v17);
        *(_DWORD *)buf = 136315906;
        v78 = v36;
        v79 = 2080;
        v80 = "_VCAudioReceiver_LogDecoderConfigurations";
        v81 = 1024;
        v82 = 776;
        v83 = 1024;
        LODWORD(v84) = v38;
        v33 = v37;
        v34 = "VCAudioReceiver [%s] %s:%d SoundDec_Create NOT called for payload=%u";
        v35 = 34;
      }
      _os_log_impl(&dword_1D8A54000, v33, OS_LOG_TYPE_DEFAULT, v34, buf, v35);
LABEL_19:
      v17 += 40;
    }
  }
  if (v63)
  {
    *(_DWORD *)(a1 + 10348) = *(_DWORD *)v63;
    *(_BYTE *)(a1 + 10352) = *(_BYTE *)(v63 + 16);
    *(_BYTE *)(a1 + 10353) = *(_BYTE *)(v63 + 32);
    *(_QWORD *)(a1 + 10360) = v61;
    *(_QWORD *)(a1 + 10336) = VCAudioDump_Create(2u, a1 + 10344);
    VCJitterBuffer_SetPayloadInfo(*(_QWORD *)(a1 + 440), a1 + 10344);
  }
  v46 = VCJitterBuffer_InitializePlayback(*(_QWORD *)(a1 + 440), (uint64_t)v61);
  *(_BYTE *)(a1 + 448) = v46;
  if (v46)
  {
    v47 = *v61;
    v48 = v61[2];
    *(_OWORD *)(a1 + 472) = v61[1];
    *(_OWORD *)(a1 + 488) = v48;
    *(_OWORD *)(a1 + 456) = v47;
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCAudioReceiver_SetupDecoders_cold_2();
    }
    VCAudioDecoderList_Cleanup((uint64_t)v15);
  }
  pthread_mutex_unlock(v62);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    v50 = VRTraceErrorLogLevelToCSTR();
    v51 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136316162;
      v78 = v50;
      v79 = 2080;
      v80 = "VCAudioReceiver_SetupDecoders";
      v81 = 1024;
      v82 = 835;
      v83 = 2048;
      v84 = a1;
      v85 = 1024;
      LODWORD(v86) = v60;
      _os_log_impl(&dword_1D8A54000, v51, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Done updating audio receiver (%p) decoders. Status=%X", buf, 0x2Cu);
    }
  }
  return *(_BYTE *)(a1 + 448) != 0;
}

void VCAudioReceiver_RegisterCodecRateModeRequestCallback(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;

  if (a1)
  {
    *(_QWORD *)(a1 + 800) = a2;
    v3 = *a3;
    *(_QWORD *)(a1 + 824) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 808) = v3;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioReceiver_RegisterCodecRateModeRequestCallback_cold_1();
  }
}

void VCAudioReceiver_RegisterActiveAudioStreamRequestCallback(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;

  if (a1)
  {
    *(_QWORD *)(a1 + 832) = a2;
    v3 = *a3;
    *(_QWORD *)(a1 + 856) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 840) = v3;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioReceiver_RegisterActiveAudioStreamRequestCallback_cold_1();
  }
}

void VCAudioReceiver_ResetLagReference(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  uint64_t v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    VCJitterBuffer_ResetLagReference(*(_QWORD *)(a1 + 440));
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      v1 = VRTraceErrorLogLevelToCSTR();
      v2 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v3 = 136315650;
        v4 = v1;
        v5 = 2080;
        v6 = "VCAudioReceiver_ResetLagReference";
        v7 = 1024;
        v8 = 934;
        _os_log_impl(&dword_1D8A54000, v2, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Force to reset audio jitter buffer lag reference", (uint8_t *)&v3, 0x1Cu);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioReceiver_ResetLagReference_cold_1();
  }
}

float VCAudioReceiver_GetOWRD(uint64_t a1)
{
  if (a1)
    return VCJitterBuffer_GetOWRD(*(_QWORD *)(a1 + 440));
  else
    return NAN;
}

float VCAudioReceiver_GetAverageInterarrivalTimeForWindow(uint64_t a1)
{
  if (a1)
    return VCJitterBuffer_GetAverageJitter(*(_QWORD *)(a1 + 440));
  else
    return NAN;
}

void VCAudioReceiver_UpdateCellTech(uint64_t a1, int a2, int a3)
{
  int v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  _BOOL4 v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v5 = a3 | a2;
    VCJitterBuffer_SetNetworkType(*(_QWORD *)(a1 + 440), (a3 | a2) != 0, a2, a3);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      v6 = VRTraceErrorLogLevelToCSTR();
      v7 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v8 = 136316418;
        v9 = v6;
        v10 = 2080;
        v11 = "VCAudioReceiver_UpdateCellTech";
        v12 = 1024;
        v13 = 953;
        v14 = 1024;
        v15 = v5 != 0;
        v16 = 1024;
        v17 = a2;
        v18 = 1024;
        v19 = a3;
        _os_log_impl(&dword_1D8A54000, v7, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d JB: Updated CellTech isCellular[%d] LocalCellTech:%d, RemoteCellTech=%d", (uint8_t *)&v8, 0x2Eu);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioReceiver_UpdateCellTech_cold_1();
  }
}

uint64_t VCAudioReceiver_GetActiveStreamId(uint64_t a1, _WORD *a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;

  if (a1 && a2)
  {
    v4 = (pthread_mutex_t *)(a1 + 8976);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 8976));
    v5 = *(_QWORD *)(a1 + 9040);
    if (v5)
    {
      *a2 = *(_WORD *)(v5 + 8);
      pthread_mutex_unlock(v4);
      return 0;
    }
    pthread_mutex_unlock(v4);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCAudioReceiver_GetActiveStreamId_cold_1();
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioReceiver_GetActiveStreamId_cold_2();
  }
  return 1;
}

float VCAudioReceiver_GetPercentPacketsLateAndMissing(uint64_t a1)
{
  if (a1)
    return VCJitterBuffer_GetPercentPacketLateAndMissing(*(_QWORD *)(a1 + 440));
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioReceiver_GetPercentPacketsLateAndMissing_cold_1();
  }
  return NAN;
}

uint64_t VCAudioReceiver_PullAudioSamples(uint64_t a1, uint64_t a2, _DWORD *a3, _QWORD *a4, uint64_t a5, _DWORD *a6, _DWORD *a7)
{
  unsigned int SampleCount;
  unsigned int v15;
  int ErrorLogLevelForModule;
  os_log_t *v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t result;
  double v23;
  int MaxPlaybackSizeSamples;
  uint64_t v25;
  _OWORD *v26;
  size_t v27;
  double v28;
  double v29;
  _QWORD v30[5];
  unsigned int v31;
  _OWORD *v32;
  _OWORD v33[2];
  CMTime buf;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v33[0] = xmmword_1D9110568;
  v33[1] = *(_OWORD *)algn_1D9110578;
  SampleCount = VCAudioBufferList_GetSampleCount(a2);
  if (!a1 || !*(_BYTE *)(a1 + 448))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCAudioReceiver_PullAudioSamples_cold_1();
    }
    goto LABEL_13;
  }
  v15 = SampleCount;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 648));
  if (*(_BYTE *)(a1 + 577))
  {
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 648));
    ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    v17 = (os_log_t *)MEMORY[0x1E0CF2758];
    if (ErrorLogLevelForModule >= 5)
    {
      v18 = VRTraceErrorLogLevelToCSTR();
      v19 = *v17;
      if (os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.value) = 136315650;
        *(CMTimeValue *)((char *)&buf.value + 4) = v18;
        LOWORD(buf.flags) = 2080;
        *(_QWORD *)((char *)&buf.flags + 2) = "_VCAudioReceiver_Lock";
        HIWORD(buf.epoch) = 1024;
        v35 = 316;
        _os_log_impl(&dword_1D8A54000, v19, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Receiver is being torn down", (uint8_t *)&buf, 0x1Cu);
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      v20 = VRTraceErrorLogLevelToCSTR();
      v21 = *v17;
      if (os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.value) = 136315650;
        *(CMTimeValue *)((char *)&buf.value + 4) = v20;
        LOWORD(buf.flags) = 2080;
        *(_QWORD *)((char *)&buf.flags + 2) = "VCAudioReceiver_PullAudioSamples";
        HIWORD(buf.epoch) = 1024;
        v35 = 1030;
        _os_log_impl(&dword_1D8A54000, v21, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d VCAudioReceiver_PullAudioSamples: Failed to grab the lock", (uint8_t *)&buf, 0x1Cu);
      }
    }
LABEL_13:
    VCAudioBufferList_ZeroMemory(a2);
    return 0;
  }
  if (a4)
    *a4 = *(_QWORD *)(a1 + 504);
  if (*(_BYTE *)(a1 + 9224))
  {
    v23 = *(double *)(a1 + 504);
    if (v23 > *(double *)(a1 + 9272))
    {
      ++*(_DWORD *)(a1 + 9240);
      *(double *)(a1 + 9272) = v23;
    }
  }
  MaxPlaybackSizeSamples = VCJitterBuffer_GetMaxPlaybackSizeSamples(*(_QWORD *)(a1 + 440));
  if (v15 && v15 < MaxPlaybackSizeSamples - 2 * *(_DWORD *)(a1 + 496))
  {
    v32 = 0;
    v25 = *(_QWORD *)(a1 + 10376);
    v30[0] = MEMORY[0x1E0C809B0];
    v30[1] = 0x40000000;
    v30[2] = __VCAudioReceiver_PullAudioSamples_block_invoke;
    v30[3] = &__block_descriptor_tmp_11_0;
    v30[4] = a1;
    v31 = v15;
    VCAudioFrameDelay_PullAudioSamples(v25, a2, &v32, (uint64_t)v30);
    v26 = v32;
    if (!v32)
      v26 = v33;
    v32 = v26;
    result = kdebug_trace();
    if (a5)
    {
      v27 = *((unsigned __int8 *)v32 + 21);
      if (*(_QWORD *)(a5 + 8) >= v27)
      {
        if (v27 > 0x10)
        {
          __break(0x5519u);
          return result;
        }
        memcpy(*(void **)a5, (char *)v32 + 5, v27);
        *(_QWORD *)(a5 + 16) = *((unsigned __int8 *)v32 + 21);
      }
    }
    VCAudioBufferList_InvalidateAveragePower(a2);
    VCAudioBufferList_SetVoiceActivity(a2, *((_DWORD *)v32 + 7) == 0);
    if (*((_BYTE *)v32 + 4))
    {
      memset(&buf, 170, sizeof(buf));
      _VCAudioReceiver_ComputeExtendedTimestamp(a1, *(_DWORD *)v32, &buf);
      VCAudioBufferList_SetNetworkTimestamp(a2, (__int128 *)&buf.value);
    }
    if (a6)
      *a6 = *((_DWORD *)v32 + 6) != 0;
    if (a7)
      *a7 = VCJitterBuffer_GetTargetTime(*(_DWORD **)(a1 + 440));
    if (a4)
      *a4 = *(_QWORD *)(a1 + 504);
    if (a3)
      *a3 = *(_DWORD *)v32;
    v28 = micro();
    if (*(double *)(a1 + 4152) == 0.0)
      *(double *)(a1 + 4152) = v28;
    v29 = *(double *)(a1 + 9056);
    if (v29 != 0.0)
    {
      if (v28 - v29 < 1.0)
      {
LABEL_45:
        VCAudioReceiver_UpdateStallMetrics(a1, v28);
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 648));
        if (*(_QWORD *)(a1 + 9280))
        {
          buf.epoch = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&buf.value = xmmword_1D91105D0;
          VCJitterBuffer_GetLastDecodedAudioFrameInfo(*(_QWORD *)(a1 + 440), (__n128 *)&buf);
          VCAudioIssueDetector_ProcessFrame(*(_QWORD *)(a1 + 9280), (unsigned __int16 *)&buf);
          *(_DWORD *)(a1 + 10324) = LOWORD(buf.epoch);
        }
        return 1;
      }
      _VCAudioReceiver_UpdateStatisticsCollectorWithAudioErasure(a1);
    }
    *(double *)(a1 + 9056) = v28;
    goto LABEL_45;
  }
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 648));
  VCAudioBufferList_ZeroMemory(a2);
  if ((int)VRTraceGetErrorLogLevelForModule() < 3)
    return 0;
  VRTraceErrorLogLevelToCSTR();
  result = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    VCAudioReceiver_PullAudioSamples_cold_2();
    return 0;
  }
  return result;
}

CMTime *_VCAudioReceiver_ComputeExtendedTimestamp@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, CMTime *a3@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint64_t v12;
  int v14;
  uint64_t v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 512);
  v7 = HIDWORD(v6);
  if (v6 <= a2)
  {
    if (v6 < a2 && v6 - a2 <= 0x7FFFFFFE)
    {
      v7 += 0xFFFFFFFFLL;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        v12 = VRTraceErrorLogLevelToCSTR();
        v9 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        {
          v14 = 136315906;
          v15 = v12;
          v16 = 2080;
          v17 = "_VCAudioReceiver_ComputeExtendedTimestamp";
          v18 = 1024;
          v19 = 1207;
          v20 = 2048;
          v21 = a1;
          v10 = "VCAudioReceiver [%s] %s:%d AudioReceiver[%p] Detected misordered packet during timestamp rollover";
          goto LABEL_13;
        }
      }
    }
  }
  else if (a2 - v6 <= 0x7FFFFFFE)
  {
    ++v7;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      v8 = VRTraceErrorLogLevelToCSTR();
      v9 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v14 = 136315906;
        v15 = v8;
        v16 = 2080;
        v17 = "_VCAudioReceiver_ComputeExtendedTimestamp";
        v18 = 1024;
        v19 = 1202;
        v20 = 2048;
        v21 = a1;
        v10 = "VCAudioReceiver [%s] %s:%d AudioReceiver[%p] Detected timestamp rollover";
LABEL_13:
        _os_log_impl(&dword_1D8A54000, v9, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v14, 0x26u);
      }
    }
  }
  return CMTimeMake(a3, a2 | (v7 << 32), (int)*(double *)(a1 + 456));
}

uint64_t _VCAudioReceiver_UpdateStatisticsCollectorWithAudioErasure(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  double v4;
  float v5;
  uint64_t v6;
  __int128 v7;
  double v8;
  unsigned int v9;
  int v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;
  __int128 v20;
  _BYTE v21[12];
  float v22;
  __int128 v23;
  __int128 v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(result + 9216);
  if (v1)
  {
    v2 = result;
    v17 = 0;
    v15 = 0u;
    v16 = 0u;
    VCJitterBuffer_GetWRMReportingMetrics(*(_DWORD **)(result + 440), (int *)&v15);
    v3 = *(_DWORD *)(v2 + 9176);
    v4 = 0.0;
    if ((_DWORD)v15 != v3)
      v4 = (double)(*(_DWORD *)(v2 + 9188) + DWORD2(v15) - (HIDWORD(v15) + *(_DWORD *)(v2 + 9184)))
         / (float)(v15 - v3);
    if (!*(_BYTE *)(v2 + 10408))
    {
      v8 = v4 + *(double *)(v2 + 10416);
      *(double *)(v2 + 10416) = v8;
      v9 = *(_DWORD *)(v2 + 10424) + 1;
      *(_DWORD *)(v2 + 10424) = v9;
      if (*(_QWORD *)(v2 + 544))
      {
        v10 = v9 ? (int)(v8 * 10000.0 / (double)v9) : 0;
        v11 = *(_DWORD *)(v2 + 428);
        if (v11)
        {
          if (v10 >= v11)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
            {
              v12 = VRTraceErrorLogLevelToCSTR();
              v13 = *MEMORY[0x1E0CF2758];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
              {
                v14 = *(_DWORD *)(v2 + 428);
                *(_DWORD *)buf = 136316418;
                v19 = v12;
                LOWORD(v20) = 2080;
                *(_QWORD *)((char *)&v20 + 2) = "_VCAudioReceiver_CheckAndReportRegressedAudioErasuresPercentage";
                WORD5(v20) = 1024;
                HIDWORD(v20) = 619;
                *(_WORD *)v21 = 2048;
                *(_QWORD *)&v21[2] = v2;
                *(_WORD *)&v21[10] = 1024;
                v22 = *(float *)&v10;
                LOWORD(v23) = 1024;
                *(_DWORD *)((char *)&v23 + 2) = v14;
                _os_log_impl(&dword_1D8A54000, v13, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d AudioReceiver[%p] AudioErasurePercentage=%d >= AudioErasurePercentageReportingThreshold=%d", buf, 0x32u);
              }
            }
            reportingSymptom();
            *(_BYTE *)(v2 + 10408) = 1;
          }
        }
      }
    }
    *(_QWORD *)&v20 = 0;
    v19 = 0;
    *((_QWORD *)&v20 + 1) = 0x600000000;
    v23 = 0u;
    v24 = 0u;
    v25 = 0;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v5 = v4;
    v6 = *(_QWORD *)(v2 + 400);
    *(_DWORD *)buf = 10;
    memset(v21, 0, sizeof(v21));
    v22 = v5;
    v26 = v6;
    result = VCRateControlSetStatistics(v1, buf);
    v7 = v16;
    *(_OWORD *)(v2 + 9176) = v15;
    *(_OWORD *)(v2 + 9192) = v7;
    *(_QWORD *)(v2 + 9208) = v17;
  }
  return result;
}

void VCAudioReceiver_UpdateStallMetrics(uint64_t a1, double a2)
{
  _BYTE *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  double v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  double v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = (_BYTE *)(a1 + 9224);
  if (a2 - *(double *)(a1 + 504) <= 0.5)
  {
    if (!*(_BYTE *)(a1 + 9224))
      return;
  }
  else if (!*(_BYTE *)(a1 + 9224))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      v5 = VRTraceErrorLogLevelToCSTR();
      v6 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(_QWORD *)(a1 + 504);
        v13 = 136316162;
        v14 = v5;
        v15 = 2080;
        v16 = "VCAudioReceiver_UpdateStallMetrics";
        v17 = 1024;
        v18 = 1143;
        v19 = 2048;
        v20 = v7;
        v21 = 2048;
        v22 = a2;
        _os_log_impl(&dword_1D8A54000, v6, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Entering short media stall lastReceivedPacketTime=%f, currentTime=%f", (uint8_t *)&v13, 0x30u);
      }
    }
    *(double *)(a1 + 9232) = a2;
    *(_QWORD *)(a1 + 9272) = *(_QWORD *)(a1 + 504);
    *v4 = 1;
    *(_DWORD *)(a1 + 9240) = 0;
    return;
  }
  if (*(int *)(a1 + 9240) >= 6)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      v8 = VRTraceErrorLogLevelToCSTR();
      v9 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v10 = *(_QWORD *)(a1 + 504);
        v11 = *(_DWORD *)(a1 + 9240);
        v13 = 136316418;
        v14 = v8;
        v15 = 2080;
        v16 = "VCAudioReceiver_UpdateStallMetrics";
        v17 = 1024;
        v18 = 1150;
        v19 = 2048;
        v20 = v10;
        v21 = 2048;
        v22 = a2;
        v23 = 1024;
        v24 = v11;
        _os_log_impl(&dword_1D8A54000, v9, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Leaving short media stall lastReceivedPacketTime=%f, currentTime=%f, packetCount=%d", (uint8_t *)&v13, 0x36u);
      }
    }
    v12 = a2 - *(double *)(a1 + 9232) + 0.5;
    *(double *)(a1 + 9248) = *(double *)(a1 + 9248) + v12;
    if (*(double *)(a1 + 9256) > v12)
      v12 = *(double *)(a1 + 9256);
    *(double *)(a1 + 9256) = v12;
    ++*(_DWORD *)(a1 + 9264);
    *(_QWORD *)(a1 + 9232) = 0;
    *(_QWORD *)(a1 + 9272) = 0;
    *v4 = 0;
  }
}

void VCAudioReceiver_CollectChannelMetrics(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *a2 = *(_DWORD *)(a1 + 4160);
    a2[6] = 0;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      v3 = VRTraceErrorLogLevelToCSTR();
      v4 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v5 = *(_DWORD *)(a1 + 9104);
        v6 = 136316162;
        v7 = v3;
        v8 = 2080;
        v9 = "VCAudioReceiver_CollectChannelMetrics";
        v10 = 1024;
        v11 = 1138;
        v12 = 2048;
        v13 = a1;
        v14 = 1024;
        v15 = v5;
        _os_log_impl(&dword_1D8A54000, v4, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d AudioReceiver[%p] PullAudioSamples count:%u", (uint8_t *)&v6, 0x2Cu);
      }
    }
  }
}

void VCAudioReceiver_DiscardQueueExcess(uint64_t a1)
{
  if (a1)
  {
    VCJitterBuffer_DiscardQueueExcess(*(_QWORD *)(a1 + 440));
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioReceiver_DiscardQueueExcess_cold_1();
  }
}

uint64_t _VCAudioReceiver_SetActiveStream(uint64_t result, uint64_t a2, uint64_t a3)
{
  _WORD *v3;
  unsigned int *v5;
  pthread_mutex_t *v6;
  uint64_t (*v7)(uint64_t, _QWORD);
  unint64_t v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  NSObject *v14;
  int v15;
  __int16 v16;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  unsigned int *v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = (_WORD *)(result + 8968);
  if (*(_QWORD *)(result + 9040) != a2)
  {
    v5 = (unsigned int *)result;
    v6 = (pthread_mutex_t *)(result + 8976);
    pthread_mutex_lock((pthread_mutex_t *)(result + 8976));
    *((_QWORD *)v5 + 1130) = a2;
    result = pthread_mutex_unlock(v6);
    v3[40] = v3[41] - *(_WORD *)(a3 + 14) + 1;
    *v3 = 0;
    if (*((_BYTE *)v5 + 276))
    {
      v7 = (uint64_t (*)(uint64_t, _QWORD))*((_QWORD *)v5 + 104);
      if (v7)
      {
        result = *((_QWORD *)v5 + 105);
        if (result)
          result = v7(result, *(unsigned __int16 *)(a2 + 8));
      }
      v8 = *v5;
      if ((_DWORD)v8)
      {
        v9 = 0;
        v10 = v5 + 2;
        v11 = v5 + 58;
        v12 = v5 + 2;
        do
        {
          if (v12 != (unsigned int *)a2)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              v13 = VRTraceErrorLogLevelToCSTR();
              v14 = *MEMORY[0x1E0CF2758];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
              {
                if (v12 >= v11 || v12 < v10)
LABEL_19:
                  __break(0x5519u);
                v15 = *((unsigned __int16 *)v12 + 4);
                *(_DWORD *)buf = 136316162;
                v19 = v13;
                v20 = 2080;
                v21 = "_VCAudioReceiver_SetActiveStream";
                v22 = 1024;
                v23 = 1187;
                v24 = 2048;
                v25 = v5;
                v26 = 1024;
                v27 = v15;
                _os_log_impl(&dword_1D8A54000, v14, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d AudioReceiver[%p] resetting non target stream %d", buf, 0x2Cu);
              }
            }
            if (v12 >= v11 || v12 < v10)
              goto LABEL_19;
            result = RTPResetHandle();
            v8 = *v5;
          }
          ++v9;
          v12 += 14;
        }
        while (v9 < v8);
      }
    }
  }
  v16 = v3[40] + *(_WORD *)(a3 + 14);
  *(_WORD *)(a3 + 14) = v16;
  v3[41] = v16;
  return result;
}

uint64_t VCAudioReceiver_CalculateBurstLoss(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  int v4;
  unsigned int v5;
  _DWORD *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unsigned int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = a1 + 8968;
  v4 = *(unsigned __int16 *)(a1 + 8968);
  v5 = 0;
  if (*(_WORD *)(a1 + 8968))
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = (unsigned __int16)(*(_WORD *)(a1 + 8970) % 0x12Cu + 300);
    v10 = a1 + 4168;
    do
    {
      v11 = (unsigned __int16)(v9
                             - 300
                             * (((unint64_t)(458129845 * v9) >> 37)
                              + ((unint64_t)(458129845 * v9) >> 63)));
      v12 = (_DWORD *)(v10 + 16 * v11);
      if (v10 > (unint64_t)v12 || (unint64_t)(v12 + 4) > v3)
LABEL_27:
        __break(0x5519u);
      if (*(_BYTE *)(v10 + 16 * v11 + 13))
      {
        if (v6)
        {
          if ((unint64_t)(v6 + 4) > v7 || v8 > (unint64_t)v6)
            goto LABEL_27;
          if (v6[2] - *v12 - *(_DWORD *)(v10 + 16 * v11 + 8) > v5
            && !*((_BYTE *)v6 + 12)
            && !*(_BYTE *)(v10 + 16 * v11 + 12))
          {
            v5 = v6[2] - *v12 - *(_DWORD *)(v10 + 16 * v11 + 8);
          }
          v7 = v3;
          v8 = a1 + 4168;
          if (((float)v5 / *(double *)(a1 + 456) * 1000.0) > 0x1388)
            break;
        }
        else
        {
          v7 = v3;
          v8 = a1 + 4168;
        }
      }
      else
      {
        v12 = v6;
      }
      --v9;
      v6 = v12;
      --v4;
    }
    while (v4);
  }
  LODWORD(v1) = vcvtad_u64_f64((double)((float)v5 / *(double *)(a1 + 456) * 1000.0) / 20.0);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    v14 = VRTraceErrorLogLevelToCSTR();
    v15 = *MEMORY[0x1E0CF2758];
    v16 = *MEMORY[0x1E0CF2758];
    if (*MEMORY[0x1E0CF2748])
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *(_QWORD *)(a1 + 456);
        v20 = 136316418;
        v21 = v14;
        v22 = 2080;
        v23 = "VCAudioReceiver_CalculateBurstLoss";
        v24 = 1024;
        v25 = 1547;
        v26 = 1024;
        v27 = v5;
        v28 = 1024;
        v29 = v1;
        v30 = 2048;
        v31 = v17;
        _os_log_impl(&dword_1D8A54000, v15, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Calculated maxBurstLoss in samples: %u, in 20ms blocks: %u, sampleRate: %f", (uint8_t *)&v20, 0x32u);
      }
    }
    else if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      v19 = *(_QWORD *)(a1 + 456);
      v20 = 136316418;
      v21 = v14;
      v22 = 2080;
      v23 = "VCAudioReceiver_CalculateBurstLoss";
      v24 = 1024;
      v25 = 1547;
      v26 = 1024;
      v27 = v5;
      v28 = 1024;
      v29 = v1;
      v30 = 2048;
      v31 = v19;
      _os_log_debug_impl(&dword_1D8A54000, v15, OS_LOG_TYPE_DEBUG, "VCAudioReceiver [%s] %s:%d Calculated maxBurstLoss in samples: %u, in 20ms blocks: %u, sampleRate: %f", (uint8_t *)&v20, 0x32u);
    }
  }
  return v1;
}

void _VCAudioReceiver_SplitRedPacket(uint64_t a1, uint64_t *a2, int *a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  int *v9;
  int *v10;
  _OWORD v11[8];
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  memset(v11, 0, sizeof(v11));
  v7 = VCAudioRedBuilder_SplitRedAudioPacket(*a2, a3, (uint64_t)v11, 4, *(double *)(a1 + 456), *(unsigned __int8 *)(a1 + 260));
  if (v7 >= 1)
  {
    v8 = v7;
    v9 = (int *)v11;
    while (1)
    {
      v10 = (int *)VCJitterBuffer_AudioPacketAlloc(*(_QWORD *)(a1 + 440));
      AudioPacket_initNewPacket((uint64_t)a3, (uint64_t)v10);
      if (v9 && (v9 >= (int *)v12 || v9 < (int *)v11))
        __break(0x5519u);
      if (!VCAudioRedBuilder_UpdateAudioPacketWithRedPayload((uint64_t)v10, v9))
        break;
      AudioPacketArray_Append(a4, (uint64_t)v10);
      v9 += 8;
      if (!--v8)
        goto LABEL_12;
    }
    VCJitterBuffer_AudioPacketFree(*(_QWORD *)(a1 + 440), v10);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        _VCAudioReceiver_SplitRedPacket_cold_1();
    }
  }
LABEL_12:
  VCJitterBuffer_AudioPacketFree(*(_QWORD *)(a1 + 440), a3);
}

void _VCAudioReceiver_SplitEVSPacket(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v6;
  int v7;
  char *v8;
  size_t v9;
  _DWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 276))
    goto LABEL_8;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v31 = 0;
  v26 = 0u;
  v25 = 0u;
  v24 = 0u;
  v23 = 0u;
  v22 = 0u;
  v21 = 0u;
  v20 = 0u;
  v19 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v10 = a2 + 11;
  LODWORD(v11) = a2[379];
  if (!VCAudioDecoderList_GetSpeechCodecBundleData(a1 + 712, a2[6], a2[7], (uint64_t)&v10)
    || !DWORD2(v12)
    || !BYTE4(v13))
  {
    goto LABEL_8;
  }
  v6 = WORD4(v13);
  v7 = HIDWORD(v13);
  v8 = VCJitterBuffer_AudioPacketAlloc(*(_QWORD *)(a1 + 440));
  AudioPacket_initNewPacket((uint64_t)a2, (uint64_t)v8);
  v8[12] = 1;
  v8[1848] = 1;
  *((_DWORD *)v8 + 463) = v7;
  *((_DWORD *)v8 + 4) -= v6 * (*(double *)(a1 + 456) * 0.02);
  *((_DWORD *)v8 + 5) = a2[4];
  *((_DWORD *)v8 + 6) = a2[6];
  v9 = a2[379];
  if (v9 <= 0x5C0)
  {
    memcpy(v8 + 44, a2 + 11, v9);
    *((_DWORD *)v8 + 379) = a2[379];
    *((_WORD *)v8 + 7) -= v6;
    if (v8 < v8 + 1864)
    {
      AudioPacketArray_Append(a3, (uint64_t)v8);
LABEL_8:
      a2[5] = a2[4];
      AudioPacketArray_Append(a3, (uint64_t)a2);
      return;
    }
  }
  __break(0x5519u);
}

uint64_t VCAudioReceiver_ReportAWDMetrics(unsigned int *a1)
{
  int ErrorLogLevelForModule;
  os_log_t *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  _BOOL4 v8;
  uint64_t result;
  const char *v10;
  uint64_t v11;
  _BOOL4 v12;
  unint64_t v13;
  uint64_t *v14;
  const __CFAllocator *v15;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v17;
  uint64_t v18;
  float v19;
  unsigned int v20;
  double v21;
  unsigned int v22;
  float v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  CFNumberRef v37;
  CFNumberRef v38;
  CFNumberRef v39;
  CFNumberRef v40;
  CFNumberRef v41;
  int v42;
  CFNumberRef v43;
  CFNumberRef v44;
  CFNumberRef v45;
  CFNumberRef v46;
  uint64_t v47;
  NSObject *v48;
  CFNumberRef v49;
  CFNumberRef v50;
  CFNumberRef v51;
  CFNumberRef v52;
  CFNumberRef v53;
  CFNumberRef v54;
  CFNumberRef v55;
  CFNumberRef v56;
  CFNumberRef v57;
  double v58;
  unint64_t v59;
  double v60;
  unsigned int v61;
  CFNumberRef v62;
  CFNumberRef v63;
  CFNumberRef v64;
  CFNumberRef v65;
  CFNumberRef v66;
  CFNumberRef v67;
  CFNumberRef v68;
  CFNumberRef v69;
  CFNumberRef v70;
  CFNumberRef v71;
  CFNumberRef v72;
  uint64_t v73;
  NSObject *v74;
  int v75;
  int v76;
  int v77;
  int *v78;
  int *v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  float v83;
  float valuePtr;
  float v85;
  unsigned int v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  _OWORD v92[3];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  float v101;
  float v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint8_t buf[4];
  uint64_t v108;
  __int16 v109;
  const char *v110;
  __int16 v111;
  int v112;
  __int16 v113;
  double v114;
  __int16 v115;
  double v116;
  __int16 v117;
  double v118;
  __int16 v119;
  double v120;
  __int16 v121;
  double v122;
  __int16 v123;
  int v124;
  __int16 v125;
  unsigned int v126;
  __int16 v127;
  int v128;
  __int16 v129;
  int v130;
  __int16 v131;
  double v132;
  __int16 v133;
  double v134;
  __int16 v135;
  double v136;
  __int16 v137;
  double v138;
  __int16 v139;
  double v140;
  __int16 v141;
  int v142;
  __int16 v143;
  unsigned int v144;
  __int16 v145;
  double v146;
  __int16 v147;
  int v148;
  __int16 v149;
  unsigned int v150;
  __int16 v151;
  unsigned int v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (*((_WORD *)a1 + 148) != 1)
    {
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 162));
      if (*((_BYTE *)a1 + 577))
      {
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 162));
        ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
        v3 = (os_log_t *)MEMORY[0x1E0CF2758];
        if (ErrorLogLevelForModule >= 5)
        {
          v4 = VRTraceErrorLogLevelToCSTR();
          v5 = *v3;
          if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            v108 = v4;
            v109 = 2080;
            v110 = "_VCAudioReceiver_Lock";
            v111 = 1024;
            v112 = 316;
            _os_log_impl(&dword_1D8A54000, v5, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Receiver is being torn down", buf, 0x1Cu);
          }
        }
        if ((int)VRTraceGetErrorLogLevelForModule() < 5)
          return 0;
        v6 = VRTraceErrorLogLevelToCSTR();
        v7 = *v3;
        v8 = os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT);
        result = 0;
        if (!v8)
          return result;
        *(_DWORD *)buf = 136315650;
        v108 = v6;
        v109 = 2080;
        v110 = "VCAudioReceiver_ReportAWDMetrics";
        v111 = 1024;
        v112 = 2281;
        v10 = "VCAudioReceiver [%s] %s:%d VCAudioReceiver_CollectAWDMetrics: Failed to grab the lock";
        goto LABEL_13;
      }
      if (!*a1)
      {
LABEL_82:
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 162));
        return 1;
      }
      v13 = 0;
      v14 = (uint64_t *)(a1 + 2);
      v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v79 = (int *)(a1 + 2323);
      v78 = (int *)(a1 + 2582);
      while (1)
      {
        Mutable = CFDictionaryCreateMutable(v15, 8, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (Mutable)
          break;
LABEL_81:
        ++v13;
        v14 += 7;
        if (v13 >= *a1)
          goto LABEL_82;
      }
      if (v14 >= (uint64_t *)a1 + 29 || v14 < (uint64_t *)a1 + 1)
        __break(0x5519u);
      v17 = Mutable;
      v18 = *v14;
      v106 = 0;
      v105 = 0;
      RTPGetPacketLossMetrics(v18, (unsigned int *)&v106 + 1, (unsigned int *)&v106, &v105);
      v103 = 0;
      v104 = 0;
      VCJitterBuffer_GetAWDReportingMetrics(*((_QWORD *)a1 + 55), (uint64_t)&v103);
      v101 = *((float *)&v103 + 1);
      v102 = *(float *)&v103;
      v19 = *(float *)&v104;
      v100 = 0;
      v98 = 0u;
      v99 = 0u;
      v96 = 0u;
      v97 = 0u;
      v95 = 0u;
      v93 = 0u;
      v94 = 0u;
      memset(v92, 0, sizeof(v92));
      VCJitterBuffer_GetPlaybackReportingMetrics(*((_QWORD *)a1 + 55), (uint64_t)v92);
      v90 = *((float *)&v97 + 1);
      v91 = *(float *)&v97;
      v88 = *((float *)&v97 + 3) * 1000.0;
      v89 = *((float *)&v97 + 2);
      v87 = *(float *)&v98 * 1000.0;
      v20 = DWORD1(v93);
      v86 = DWORD1(v95) + HIDWORD(v94);
      v85 = NAN;
      v21 = *((double *)a1 + 57);
      v22 = v21;
      if (v21)
      {
        LODWORD(v21) = HIDWORD(v104);
        v23 = (double)*(unint64_t *)&v21 * 1000.0 / (double)v22;
        v85 = v23;
      }
      valuePtr = NAN;
      if ((_DWORD)v106)
      {
        valuePtr = (float)v105 / (float)v106;
        v24 = CFNumberCreate(v15, kCFNumberFloatType, &valuePtr);
        if (v24)
        {
          v25 = v24;
          CFDictionaryAddValue(v17, CFSTR("RTPPacketLossRate"), v24);
          CFRelease(v25);
        }
      }
      v83 = NAN;
      if (v20)
      {
        v83 = (float)v86 / (float)v20;
        v26 = CFNumberCreate(v15, kCFNumberFloatType, &v83);
        if (v26)
        {
          v27 = v26;
          CFDictionaryAddValue(v17, CFSTR("JitterBufferLossRate"), v26);
          CFRelease(v27);
        }
      }
      if ((_DWORD)v106)
      {
        v28 = CFNumberCreate(v15, kCFNumberIntType, (char *)&v106 + 4);
        if (v28)
        {
          v29 = v28;
          CFDictionaryAddValue(v17, CFSTR("AudioRTPPacketsReceivedCount"), v28);
          CFRelease(v29);
        }
        v30 = CFNumberCreate(v15, kCFNumberIntType, &v105);
        if (v30)
        {
          v31 = v30;
          CFDictionaryAddValue(v17, CFSTR("AudioRTPPacketsLostCount"), v30);
          CFRelease(v31);
        }
        v32 = CFNumberCreate(v15, kCFNumberIntType, &v86);
        if (v32)
        {
          v33 = v32;
          CFDictionaryAddValue(v17, CFSTR("JitterBufferLossCount"), v32);
          CFRelease(v33);
        }
      }
      v34 = CFNumberCreate(v15, kCFNumberFloatType, &v102);
      if (v34)
      {
        v35 = v34;
        CFDictionaryAddValue(v17, CFSTR("JitterBufferUnderflowRate"), v34);
        CFRelease(v35);
      }
      v36 = CFNumberCreate(v15, kCFNumberIntType, v79);
      if (v36)
      {
        v37 = v36;
        CFDictionaryAddValue(v17, CFSTR("Payload"), v36);
        CFRelease(v37);
      }
      v82 = a1[2581];
      v38 = CFNumberCreate(v15, kCFNumberIntType, &v82);
      if (v38)
      {
        v39 = v38;
        CFDictionaryAddValue(v17, CFSTR("CodecSampleRate"), v38);
        CFRelease(v39);
      }
      if (!*v78)
        *v78 = 2400;
      v40 = CFNumberCreate(v15, kCFNumberIntType, v78);
      if (v40)
      {
        v41 = v40;
        CFDictionaryAddValue(v17, CFSTR("DownlinkCodecBitRate"), v40);
        CFRelease(v41);
      }
      *(_DWORD *)buf = 0;
      v42 = a1[2322];
      switch(v42)
      {
        case 6:
          v42 = 3;
          break;
        case 3:
          v42 = 1;
          break;
        case 2:
          break;
        default:
          goto LABEL_53;
      }
      *(_DWORD *)buf = v42;
LABEL_53:
      v43 = CFNumberCreate(v15, kCFNumberIntType, buf);
      if (v43)
      {
        v44 = v43;
        CFDictionaryAddValue(v17, CFSTR("RATType"), v43);
        CFRelease(v44);
      }
      v77 = *(_DWORD *)buf;
      v45 = CFNumberCreate(v15, kCFNumberFloatType, &v101);
      if (v45)
      {
        v46 = v45;
        CFDictionaryAddValue(v17, CFSTR("FrameErasureRate"), v45);
        CFRelease(v46);
      }
      if (v101 > 0.04 && (int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        v47 = VRTraceErrorLogLevelToCSTR();
        v48 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315906;
          v108 = v47;
          v109 = 2080;
          v110 = "_VCAudioReceiver_CollectAWDMetrics";
          v111 = 1024;
          v112 = 2198;
          v113 = 2048;
          v114 = v101;
          _os_log_impl(&dword_1D8A54000, v48, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d High audio erasure rate: %f", buf, 0x26u);
        }
      }
      *(float *)buf = v19;
      v49 = CFNumberCreate(v15, kCFNumberFloat32Type, buf);
      CFDictionaryAddValue(v17, CFSTR("FrameSpeechErasureRate"), v49);
      CFRelease(v49);
      v50 = CFNumberCreate(v15, kCFNumberFloatType, &v85);
      if (v50)
      {
        v51 = v50;
        CFDictionaryAddValue(v17, CFSTR("JitterBufferResidencyTime"), v50);
        CFRelease(v51);
      }
      v52 = CFNumberCreate(v15, kCFNumberFloatType, &v91);
      if (v52)
      {
        v53 = v52;
        CFDictionaryAddValue(v17, CFSTR("TimescaleRate"), v52);
        CFRelease(v53);
      }
      v54 = CFNumberCreate(v15, kCFNumberFloatType, &v90);
      if (v54)
      {
        v55 = v54;
        CFDictionaryAddValue(v17, CFSTR("SpeechTimescaleRate"), v54);
        CFRelease(v55);
      }
      v56 = CFNumberCreate(v15, kCFNumberFloatType, &v89);
      if (v56)
      {
        v57 = v56;
        CFDictionaryAddValue(v17, CFSTR("SilenceTimescaleRate"), v56);
        CFRelease(v57);
      }
      v81 = 0;
      v80 = 0;
      RTPGetJitter(v18, (_DWORD *)&v81 + 1, &v81, &v80);
      v58 = (double)v22 / 1000.0;
      LODWORD(v59) = v81;
      v60 = (double)v59 / v58;
      v61 = vcvtad_u64_f64(v60);
      LODWORD(v60) = v80;
      v80 = vcvtad_u64_f64((double)*(unint64_t *)&v60 / v58);
      LODWORD(v81) = v61;
      v62 = CFNumberCreate(v15, kCFNumberIntType, &v81);
      if (v62)
      {
        v63 = v62;
        CFDictionaryAddValue(v17, CFSTR("MaxInterArrivalJitter"), v62);
        CFRelease(v63);
      }
      v64 = CFNumberCreate(v15, kCFNumberIntType, &v80);
      if (v64)
      {
        v65 = v64;
        CFDictionaryAddValue(v17, CFSTR("AverageInterArrivalJitter"), v64);
        CFRelease(v65);
      }
      v66 = CFNumberCreate(v15, kCFNumberFloatType, &v88);
      if (v66)
      {
        v67 = v66;
        CFDictionaryAddValue(v17, CFSTR("AveragePacketLifetime"), v66);
        CFRelease(v67);
      }
      v68 = CFNumberCreate(v15, kCFNumberFloatType, &v87);
      if (v68)
      {
        v69 = v68;
        CFDictionaryAddValue(v17, CFSTR("MaxPacketLifetime"), v68);
        CFRelease(v69);
      }
      *(_DWORD *)buf = *((unsigned __int8 *)a1 + 302);
      v70 = CFNumberCreate(v15, kCFNumberIntType, buf);
      CFDictionaryAddValue(v17, CFSTR("DTMFTonePlaybackEnabled"), v70);
      CFRelease(v70);
      *(_DWORD *)buf = *((unsigned __int8 *)a1 + 425);
      v71 = CFNumberCreate(v15, kCFNumberIntType, buf);
      CFDictionaryAddValue(v17, CFSTR("DTMFEventCallbacksEnabled"), v71);
      CFRelease(v71);
      *(_DWORD *)buf = DWORD1(v98);
      v72 = CFNumberCreate(v15, kCFNumberIntType, buf);
      CFDictionaryAddValue(v17, CFSTR("DTMFEventTotalCount"), v72);
      CFRelease(v72);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        v73 = VRTraceErrorLogLevelToCSTR();
        v74 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        {
          v75 = *v79;
          v76 = *v78;
          *(_DWORD *)buf = 136320770;
          v108 = v73;
          v109 = 2080;
          v110 = "_VCAudioReceiver_CollectAWDMetrics";
          v111 = 1024;
          v112 = 2266;
          v113 = 2048;
          v114 = valuePtr;
          v115 = 2048;
          v116 = v102;
          v117 = 2048;
          v118 = v101;
          v119 = 2048;
          v120 = v19;
          v121 = 2048;
          v122 = v85;
          v123 = 1024;
          v124 = v75;
          v125 = 1024;
          v126 = v22;
          v127 = 1024;
          v128 = v76;
          v129 = 1024;
          v130 = v77;
          v131 = 2048;
          v132 = v91;
          v133 = 2048;
          v134 = v90;
          v135 = 2048;
          v136 = v89;
          v137 = 2048;
          v138 = v88;
          v139 = 2048;
          v140 = v87;
          v141 = 1024;
          v142 = v81;
          v143 = 1024;
          v144 = v80;
          v145 = 2048;
          v146 = v83;
          v147 = 1024;
          v148 = HIDWORD(v106);
          v149 = 1024;
          v150 = v105;
          v151 = 1024;
          v152 = v86;
          _os_log_impl(&dword_1D8A54000, v74, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Collected AWD metric samples (rtpPacketLossRate=%f, jitterBufferUnderflowRate=%f, frameErasureRate=%f, speechErasureRate=%f, jitterBufferResidencyTime=%f, payloadType=%d, sampleRate=%d, bitRate=%d, ratType=%d, timescaleRate=%f, speechTimescaleRate=%f, silenceTimescaleRate=%f, averagePacketLifetime=%f, maxPacketLifetime=%f, maxInterArrivalJitter=%u, averageInterArrivalJitter=%u, jitterBufferLossRate=%f, packetsReceived=%u, packetsLost=%u, totalJBLossCount=%u)", buf, 0xC0u);
        }
      }
      reportingAudioStreamLogMetricSample();
      CFRelease(v17);
      goto LABEL_81;
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    v11 = VRTraceErrorLogLevelToCSTR();
    v7 = *MEMORY[0x1E0CF2758];
    v12 = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v12)
      return result;
    *(_DWORD *)buf = 136315650;
    v108 = v11;
    v109 = 2080;
    v110 = "VCAudioReceiver_ReportAWDMetrics";
    v111 = 1024;
    v112 = 2272;
    v10 = "VCAudioReceiver [%s] %s:%d CollectAWDMetrics:audioReceiver is nil";
LABEL_13:
    _os_log_impl(&dword_1D8A54000, v7, OS_LOG_TYPE_DEFAULT, v10, buf, 0x1Cu);
  }
  return 0;
}

void VCAudioReceiver_UpdateWrmMetrics(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  double v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      v3 = *(double *)(a1 + 456);
      v7 = 0;
      v5 = 0u;
      v6 = 0u;
      VCJitterBuffer_GetWRMReportingMetrics(*(_DWORD **)(a1 + 440), (int *)&v5);
      *(_DWORD *)(a2 + 60) = v7;
      *(_OWORD *)(a2 + 24) = v5;
      v4 = (double)*((unint64_t *)&v6 + 1) * 1000.0 / (double)v3;
      *(_QWORD *)(a2 + 72) = v6;
      *(_QWORD *)(a2 + 80) = (unint64_t)v4;
      *(_DWORD *)(a2 + 192) = v3;
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCAudioReceiver_UpdateWrmMetrics_cold_2();
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioReceiver_UpdateWrmMetrics_cold_1();
  }
}

void VCAudioReceiver_GetJitterBufferMetrics(uint64_t a1, uint64_t a2)
{
  unsigned int v3;

  if (a1)
  {
    if (a2)
    {
      if (*(_WORD *)(a1 + 296) != 1)
      {
        v3 = *(double *)(a1 + 456);
        VCJitterBuffer_GetWRMReportingMetrics(*(_DWORD **)(a1 + 440), (int *)a2);
        *(_QWORD *)(a2 + 24) = (unint64_t)((double)*(unint64_t *)(a2 + 24) * 1000.0 / (double)v3);
        *(_DWORD *)(a2 + 36) = v3;
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCAudioReceiver_GetJitterBufferMetrics_cold_2();
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioReceiver_GetJitterBufferMetrics_cold_1();
  }
}

void VCAudioReceiver_SendStartCallReport(uint64_t a1)
{
  if (a1)
  {
    reportingAudioStreamLogCallStart();
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioReceiver_SendStartCallReport_cold_1();
  }
}

void VCAudioReceiver_SendEndCallReport(uint64_t a1)
{
  if (a1)
  {
    reportingAudioStreamLogCallEnd();
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioReceiver_SendEndCallReport_cold_1();
  }
}

BOOL VCAudioReceiver_SetMagicCookieForPayload(uint64_t a1, int a2, int a3, void *a4, UInt32 a5)
{
  _BOOL8 result;

  if (a1)
    return (int)VCAudioDecoderList_SetMagicCookieForPayload(a1 + 712, a2, a3, a4, a5) >= 0;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    result = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    VCAudioReceiver_SetMagicCookieForPayload_cold_1();
  }
  return 0;
}

void VCAudioReceiver_SetTargetStreamID(uint64_t a1, __int16 a2)
{
  if (a1)
  {
    *(_WORD *)(a1 + 9102) = a2;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioReceiver_SetTargetStreamID_cold_1();
  }
}

void VCAudioReceiver_SetOverlayToken(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    *(_QWORD *)(a1 + 10392) = a2;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioReceiver_SetOverlayToken_cold_1();
  }
}

BOOL VCAudioReceiver_ProcessCellularNetworkNotification(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  BOOL v5;
  char v6;
  uint64_t v7;
  _BOOL8 result;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      result = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      VCAudioReceiver_ProcessCellularNetworkNotification_cold_1();
    }
    return 0;
  }
  if (*(_BYTE *)(a2 + 2) != 2)
    return 0;
  v4 = VCNWConnectionMonitorUtils_GetRATFromNWNotification(a2) - 7;
  if (*(_BYTE *)(a1 + 10369))
    v5 = 1;
  else
    v5 = v4 > 1;
  if (!v5)
  {
    *(_DWORD *)(a1 + 9288) = 6;
    *(_DWORD *)(a1 + 388) = 6;
    VCAudioIssueDetector_UpdateConnectionType(*(_QWORD *)(a1 + 9280), 6);
    *(_BYTE *)(a1 + 10369) = 1;
  }
  v9 = 0u;
  v10 = 0u;
  LODWORD(v9) = *(_DWORD *)(a2 + 4);
  switch((int)v9)
  {
    case 0:
      *((_QWORD *)&v9 + 1) = *(_QWORD *)(a2 + 16);
      LOBYTE(v10) = *(_BYTE *)(a2 + 60);
      BYTE1(v10) = *(_BYTE *)(a2 + 65);
      BYTE2(v10) = *(_BYTE *)(a2 + 67);
      BYTE3(v10) = *(_BYTE *)(a2 + 69);
      DWORD1(v10) = *(_DWORD *)(a2 + 70);
      v6 = *(_BYTE *)(a2 + 74);
      goto LABEL_13;
    case 2:
      LOBYTE(v10) = *(_DWORD *)(a2 + 8);
      BYTE1(v10) = *(_BYTE *)(a2 + 16);
      BYTE2(v10) = *(_BYTE *)(a2 + 18);
      break;
    case 4:
      WORD2(v10) = *(_WORD *)(a2 + 10);
      BYTE3(v10) = *(_BYTE *)(a2 + 8);
      break;
    case 5:
      LOBYTE(v10) = *(_DWORD *)(a2 + 8);
      WORD3(v10) = *(_WORD *)(a2 + 12);
      v6 = *(_BYTE *)(a2 + 14);
LABEL_13:
      BYTE8(v10) = v6;
      break;
    default:
      break;
  }
  VCJitterBuffer_ProcessCellularNetworkNotification(*(_QWORD *)(a1 + 440), (uint64_t)&v9);
  v7 = *(_QWORD *)(a1 + 9280);
  if (v7)
    VCAudioIssueDetector_ProcessCellularNetworkNotification(v7, a2);
  return 1;
}

void VCAudioReceiver_ProcessConnectionType(uint64_t a1, int a2)
{
  if (a1)
  {
    VCAudioIssueDetector_Stop(*(_QWORD *)(a1 + 9280));
    VCAudioReceiver_ReportAWDMetrics((unsigned int *)a1);
    reportingAudioStreamLogCallEnd();
    *(_DWORD *)(a1 + 9288) = a2;
    *(_DWORD *)(a1 + 388) = a2;
    if (a2 == 3)
      *(_BYTE *)(a1 + 10369) = 0;
    VCAudioIssueDetector_UpdateConnectionType(*(_QWORD *)(a1 + 9280), a2);
    VCAudioIssueDetector_Start(*(_QWORD *)(a1 + 9280));
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioReceiver_ProcessConnectionType_cold_1();
  }
}

void VCAudioReceiver_SetAudioPlayoutDelay(uint64_t a1, double a2, double a3)
{
  if (a1)
  {
    *(double *)(a1 + 10384) = a2;
    if (*(_QWORD *)(a1 + 10376))
    {
      LODWORD(a3) = *(_DWORD *)(a1 + 496);
      VCAudioFrameDelay_UpdateDelay(*(_QWORD *)(a1 + 10376), vcvtpd_u64_f64(a2 / ((double)*(unint64_t *)&a3 / *(double *)(a1 + 456))));
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioReceiver_SetAudioPlayoutDelay_cold_1();
  }
}

void _VCAudioReceiver_HandleRTPPacket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  char *v6;
  __CFDictionary *Mutable;
  _BOOL8 *v8;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *ControlInfoWithBuffer;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  NSObject *v24;
  int v25;
  const __CFAllocator *v26;
  CFNumberRef v27;
  int ErrorLogLevelForModule;
  NSObject *v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  size_t v33;
  size_t v34;
  char v35;
  size_t v36;
  unsigned int *v37;
  int v38;
  unsigned int v39;
  unsigned int *v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *dataPointerOut;
  size_t lengthAtOffsetOut;
  CMBlockBufferRef theBuffer;
  CMBlockBufferRef blockBufferOut;
  CMTime valuePtr;
  __int128 v56;
  uint64_t v57;
  __int16 v58;
  size_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v10 = a1 + 9064;
  if (*(_DWORD *)a3 == 1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      v16 = VRTraceErrorLogLevelToCSTR();
      v17 = *MEMORY[0x1E0CF2758];
      v18 = *MEMORY[0x1E0CF2758];
      if (*MEMORY[0x1E0CF2748])
      {
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(valuePtr.value) = 136315650;
          *(CMTimeValue *)((char *)&valuePtr.value + 4) = v16;
          LOWORD(valuePtr.flags) = 2080;
          *(_QWORD *)((char *)&valuePtr.flags + 2) = "_VCAudioReceiver_HandleRTPBasebandNotificationPacket";
          HIWORD(valuePtr.epoch) = 1024;
          LODWORD(v56) = 1922;
          _os_log_impl(&dword_1D8A54000, v17, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d received VTP_PKT_BBNOTE", (uint8_t *)&valuePtr, 0x1Cu);
        }
      }
      else if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        _VCAudioReceiver_HandleRTPPacket_cold_12();
      }
    }
    if (*(_DWORD *)(a3 + 8) != 3)
      return;
    if (!*(_WORD *)(a3 + 26))
      return;
    *(_BYTE *)v10 = 1;
    *(_WORD *)(v10 + 2) = *(_WORD *)(a3 + 26);
    if ((int)VRTraceGetErrorLogLevelForModule() < 7)
      return;
    v23 = VRTraceErrorLogLevelToCSTR();
    v20 = *MEMORY[0x1E0CF2758];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      return;
    LODWORD(valuePtr.value) = 136315650;
    *(CMTimeValue *)((char *)&valuePtr.value + 4) = v23;
    LOWORD(valuePtr.flags) = 2080;
    *(_QWORD *)((char *)&valuePtr.flags + 2) = "_VCAudioReceiver_HandleRTPBasebandNotificationPacket";
    HIWORD(valuePtr.epoch) = 1024;
    LODWORD(v56) = 1926;
    v22 = "VCAudioReceiver [%s] %s:%d Received local codec rate mode change request";
LABEL_31:
    _os_log_impl(&dword_1D8A54000, v20, OS_LOG_TYPE_DEFAULT, v22, (uint8_t *)&valuePtr, 0x1Cu);
    return;
  }
  if (*(_DWORD *)a3)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        _VCAudioReceiver_HandleRTPPacket_cold_1();
    }
    return;
  }
  v11 = *(unsigned __int8 *)(a3 + 88);
  if (v11 >= 0xD)
    goto LABEL_114;
  v4 = a2;
  v3 = a1;
  if ((_VCAudioReceiver_ShouldProcessAudioPacket(a1, a2, *(unsigned __int8 *)(a3 + 50), *(_QWORD *)(a3 + 56), (unsigned __int16 *)(a3 + 64), v11) & 1) == 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 8)
      return;
    v19 = VRTraceErrorLogLevelToCSTR();
    v20 = *MEMORY[0x1E0CF2758];
    v21 = *MEMORY[0x1E0CF2758];
    if (!*MEMORY[0x1E0CF2748])
    {
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        _VCAudioReceiver_HandleRTPPacket_cold_11();
      return;
    }
    if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      return;
    LODWORD(valuePtr.value) = 136315650;
    *(CMTimeValue *)((char *)&valuePtr.value + 4) = v19;
    LOWORD(valuePtr.flags) = 2080;
    *(_QWORD *)((char *)&valuePtr.flags + 2) = "_VCAudioReceiver_HandleRTPMediaPacket";
    HIWORD(valuePtr.epoch) = 1024;
    LODWORD(v56) = 1852;
    v22 = "VCAudioReceiver [%s] %s:%d Ignoring invalid incoming RTP media packet.";
    goto LABEL_31;
  }
  if (*(_QWORD *)(a3 + 136) && !*(_BYTE *)(v10 + 56))
  {
    LODWORD(blockBufferOut) = -1431655766;
    LODWORD(theBuffer) = -1431655766;
    RTPGetRecvStats(*(_QWORD *)v4, &blockBufferOut, &theBuffer);
    valuePtr.epoch = 0;
    v56 = 0uLL;
    valuePtr.value = *(_QWORD *)(a3 + 40);
    valuePtr.timescale = *(_QWORD *)(a3 + 160);
    valuePtr.flags = blockBufferOut;
    v12 = *(_DWORD *)(a3 + 24);
    valuePtr.epoch = theBuffer >> 3;
    DWORD1(v56) = v12;
    WORD4(v56) = *(_WORD *)(a3 + 20);
    WORD5(v56) = *(_WORD *)(a3 + 200);
    BYTE12(v56) = *(_BYTE *)(a3 + 203);
    BYTE13(v56) = *(_BYTE *)(a3 + 104);
    v14 = *(_QWORD *)(a3 + 136);
    v13 = *(_QWORD *)(a3 + 144);
    if (!v14 && v13)
      goto LABEL_114;
    ControlInfoWithBuffer = VCMediaControlInfoGeneratorCreateControlInfoWithBuffer(*(_QWORD *)(v3 + 432), v13, v14, (uint64_t)&valuePtr);
    VCMediaControlInfoDispose((uint64_t)ControlInfoWithBuffer);
  }
  if (*(_BYTE *)(a3 + 200))
    return;
  v5 = (unsigned int *)(a3 + 24);
  if ((*(_BYTE *)(v3 + 524) & 1) != 0)
    _VCAudioReceiver_ComputeExtendedTimestamp(v3, *(_DWORD *)(a3 + 24), &valuePtr);
  else
    CMTimeMake(&valuePtr, *(unsigned int *)(a3 + 24), *(double *)(v3 + 456));
  *(CMTime *)(v3 + 512) = valuePtr;
  kdebug_trace();
  if (*(_BYTE *)(v4 + 11))
  {
    if (!*(_BYTE *)(v10 + 32))
    {
LABEL_39:
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        Mutable = (__CFDictionary *)VRTraceErrorLogLevelToCSTR();
        v24 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        {
          v25 = *(unsigned __int8 *)(v4 + 11);
          LODWORD(valuePtr.value) = 136315906;
          *(CMTimeValue *)((char *)&valuePtr.value + 4) = (CMTimeValue)Mutable;
          LOWORD(valuePtr.flags) = 2080;
          *(_QWORD *)((char *)&valuePtr.flags + 2) = "_VCAudioReceiver_SwitchStreamConfigs";
          HIWORD(valuePtr.epoch) = 1024;
          LODWORD(v56) = 1831;
          WORD2(v56) = 1024;
          *(_DWORD *)((char *)&v56 + 6) = v25;
          _os_log_impl(&dword_1D8A54000, v24, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Switching Audio Stream configs isOneToOne:%d", (uint8_t *)&valuePtr, 0x22u);
        }
      }
      *(_BYTE *)(v10 + 32) = *(_BYTE *)(v4 + 11);
      VCJitterBuffer_SetMode(*(_QWORD *)(v3 + 440), *(_DWORD *)(v4 + 24));
      VCJitterBuffer_SetSkipDecodeOnSilence(*(_QWORD *)(v3 + 440), *(_BYTE *)(v4 + 11) == 0);
      VCJitterBuffer_ResetPlaybackReportingMetrics(*(_QWORD *)(v3 + 440));
      VCJitterBuffer_ResetJitterQueueUnderflowRate(*(_QWORD *)(v3 + 440));
      *(_BYTE *)(v10 + 56) = *(_BYTE *)(v4 + 28);
      *(_QWORD *)(v3 + 432) = *(_QWORD *)(v4 + 40);
      _VCAudioReceiver_UnregisterStatistics(v3);
      _VCBoundsSafety_ReleaseAssignAndRetain((const void **)(v3 + 9216), *(CFTypeRef *)(v4 + 48));
      _VCAudioReceiver_RegisterStatistics(v3);
      if (*(_BYTE *)(v4 + 11))
      {
        *(_WORD *)(v10 + 36) = 0;
        v26 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        LODWORD(valuePtr.value) = *(unsigned __int16 *)(v10 + 36);
        v27 = CFNumberCreate(v26, kCFNumberIntType, &valuePtr);
        CFDictionaryAddValue(Mutable, CFSTR("VCASActiveStreamID"), v27);
        reportingAudioStreamEvent();
        CFRelease(v27);
        CFRelease(Mutable);
      }
    }
  }
  else if (*(_BYTE *)(v10 + 32))
  {
    goto LABEL_39;
  }
  if (*(_BYTE *)(v10 + 1304))
  {
    VCJitterBuffer_SetMode(*(_QWORD *)(v3 + 440), *(_DWORD *)(v3 + 244));
    *(_BYTE *)(v10 + 1304) = 0;
  }
  if (*(_QWORD *)(a3 + 160) >= 0x5C1uLL)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        _VCAudioReceiver_HandleRTPPacket_cold_2();
    }
    return;
  }
  if (*(_QWORD *)(a3 + 184) >= 0x101uLL)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        _VCAudioReceiver_HandleRTPPacket_cold_3();
    }
    return;
  }
  v6 = VCJitterBuffer_AudioPacketAlloc(*(_QWORD *)(v3 + 440));
  ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (v6)
  {
    v8 = (_BOOL8 *)(a3 + 208);
    if (ErrorLogLevelForModule >= 8)
    {
      v10 = VRTraceErrorLogLevelToCSTR();
      Mutable = (__CFDictionary *)*MEMORY[0x1E0CF2758];
      v29 = *MEMORY[0x1E0CF2758];
      if (*MEMORY[0x1E0CF2748])
      {
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          v30 = *(_QWORD *)(a3 + 40);
          LODWORD(valuePtr.value) = 136315906;
          *(CMTimeValue *)((char *)&valuePtr.value + 4) = v10;
          LOWORD(valuePtr.flags) = 2080;
          *(_QWORD *)((char *)&valuePtr.flags + 2) = "_VCAudioReceiver_HandleRTPMediaPacket";
          HIWORD(valuePtr.epoch) = 1024;
          LODWORD(v56) = 1889;
          WORD2(v56) = 2048;
          *(_QWORD *)((char *)&v56 + 6) = v30;
          _os_log_impl(&dword_1D8A54000, (os_log_t)Mutable, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d received packet time[%f]", (uint8_t *)&valuePtr, 0x26u);
        }
      }
      else if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        _VCAudioReceiver_HandleRTPPacket_cold_10();
      }
    }
    if (a3 + 8 >= (unint64_t)v8)
      goto LABEL_114;
    *((_QWORD *)v6 + 230) = 0;
    *((_DWORD *)v6 + 458) = *(_DWORD *)(a3 + 96);
    v6[1856] = *(_BYTE *)(a3 + 89);
    v31 = *(unsigned __int8 *)(v4 + 10);
    if (*(_BYTE *)(v4 + 10))
      v31 = *(_WORD *)(v4 + 8);
    *((_WORD *)v6 + 929) = v31;
    Mutable = (__CFDictionary *)(a3 + 40);
    v32 = *(_QWORD *)(a3 + 40);
    *(_DWORD *)v6 = *(_DWORD *)(a3 + 8);
    *((_QWORD *)v6 + 3) = *(_QWORD *)(a3 + 12);
    v10 = a3 + 20;
    *((_WORD *)v6 + 7) = *(_WORD *)(a3 + 20);
    *((_DWORD *)v6 + 4) = *(_DWORD *)(a3 + 24);
    *((_QWORD *)v6 + 228) = v32;
    *((_DWORD *)v6 + 1) = *(unsigned __int8 *)(a3 + 48);
    v33 = *(_QWORD *)(a3 + 184);
    v6[1776] = v33;
    *((_DWORD *)v6 + 2) = *(_QWORD *)(a3 + 120);
    *((_DWORD *)v6 + 379) = *(_QWORD *)(a3 + 160);
    if (v33 >= 0x101)
      goto LABEL_114;
    v8 = (_BOOL8 *)(v3 + 440);
    v50 = v6 + 1864;
    memcpy(v6 + 1520, *(const void **)(a3 + 192), v33);
    if (!*(_QWORD *)(v4 + 16))
    {
      v36 = *(_QWORD *)(a3 + 160);
      if (v36 <= 0x5C0)
      {
        memcpy(v6 + 44, *(const void **)(a3 + 168), v36);
        goto LABEL_85;
      }
      goto LABEL_114;
    }
    theBuffer = 0;
    blockBufferOut = 0;
    if (CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(void **)(a3 + 168), *(_QWORD *)(a3 + 160), (CFAllocatorRef)*MEMORY[0x1E0C9AE20], 0, 0, *(_QWORD *)(a3 + 160), 1u, &blockBufferOut) < 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          _VCAudioReceiver_HandleRTPPacket_cold_6();
      }
      goto LABEL_113;
    }
    if ((VCCryptor_Decrypt(*(_QWORD *)(v4 + 16), blockBufferOut, &theBuffer) & 0x80000000) != 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          goto LABEL_115;
      }
      goto LABEL_104;
    }
    RTPProcessDecryptionStatusChange(*(_QWORD *)v4, 1);
    dataPointerOut = 0;
    lengthAtOffsetOut = 0;
    if (CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, 0, &dataPointerOut))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          _VCAudioReceiver_HandleRTPPacket_cold_7();
      }
      goto LABEL_113;
    }
    v34 = lengthAtOffsetOut;
    if (lengthAtOffsetOut >= 0x5C1)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        v49 = VRTraceErrorLogLevelToCSTR();
        v47 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        {
          v48 = *(_QWORD *)(a3 + 160);
          LODWORD(valuePtr.value) = 136316418;
          *(CMTimeValue *)((char *)&valuePtr.value + 4) = v49;
          LOWORD(valuePtr.flags) = 2080;
          *(_QWORD *)((char *)&valuePtr.flags + 2) = "_VCAudioReceiver_DecryptAndFillAudioPacket";
          HIWORD(valuePtr.epoch) = 1024;
          LODWORD(v56) = 1742;
          WORD2(v56) = 2048;
          *(_QWORD *)((char *)&v56 + 6) = v48;
          HIWORD(v56) = 2048;
          v57 = 1472;
          v58 = 2048;
          v59 = lengthAtOffsetOut;
          _os_log_error_impl(&dword_1D8A54000, v47, OS_LOG_TYPE_ERROR, "VCAudioReceiver [%s] %s:%d Decrypted payload is smaller than original one: expected at least '%zu', available size '%zu' got '%zu'", (uint8_t *)&valuePtr, 0x3Au);
        }
      }
      goto LABEL_113;
    }
    *((_DWORD *)v6 + 379) = lengthAtOffsetOut;
    memcpy(v6 + 44, dataPointerOut, v34);
    v35 = 1;
    while (1)
    {
      if (blockBufferOut)
        CFRelease(blockBufferOut);
      if (theBuffer)
        CFRelease(theBuffer);
      if ((v35 & 1) != 0)
      {
LABEL_85:
        if (VCJitterBuffer_GetIsRunning(*v8) || !*((_DWORD *)v6 + 1))
        {
          v37 = (unsigned int *)(v3 + 736);
          v38 = *((_DWORD *)v6 + 2);
          do
            v39 = __ldaxr(v37);
          while (__stlxr(v39 + v38, v37));
          v40 = (unsigned int *)(v3 + 788);
          v41 = *((_DWORD *)v6 + 379);
          do
            v42 = __ldaxr(v40);
          while (__stlxr(v42 + v41, v40));
        }
        *(_QWORD *)(v3 + 504) = *((_QWORD *)v6 + 228);
        bzero(&valuePtr, 0x328uLL);
        if (v6 < v50)
        {
          _VCAudioReceiver_SetActiveStream(v3, v4, (uint64_t)v6);
          _VCAudioReceiver_SplitPacket(v3, (uint64_t *)v4, (int *)v6, &valuePtr);
          _VCAudioReceiver_ValidateAndEnqueuePackets(v3, (unint64_t)&valuePtr);
          _VCAudioReceiver_UpdateAudioOverlayStats(v3, &valuePtr);
          v43 = *(_QWORD *)(v3 + 9280);
          if (v43)
          {
            VCAudioIssueDetector_ReportRTPTraffic(v43);
            VCAudioIssueDetector_FlushLogEvents(*(_QWORD *)(v3 + 9280));
          }
          v44 = *(_QWORD *)(v3 + 10336);
          if (!v44)
            return;
          v46 = *(_QWORD *)(a3 + 160);
          v45 = *(void **)(a3 + 168);
          if (v46 || !v45)
          {
            VCAudioDump_LogCompressedAudio(v44, v45, v46, v5, (unsigned __int16 *)v10, (double *)Mutable);
            return;
          }
        }
      }
      else if (v6 < v50)
      {
        VCJitterBuffer_AudioPacketFree(*v8, (int *)v6);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            _VCAudioReceiver_HandleRTPPacket_cold_5();
        }
        return;
      }
LABEL_114:
      __break(0x5519u);
LABEL_115:
      _VCAudioReceiver_HandleRTPPacket_cold_9();
LABEL_104:
      RTPProcessDecryptionStatusChange(*(_QWORD *)v4, 0);
      v35 = 0;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          _VCAudioReceiver_HandleRTPPacket_cold_8();
LABEL_113:
        v35 = 0;
      }
    }
  }
  if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      _VCAudioReceiver_HandleRTPPacket_cold_4();
  }
}

uint64_t _VCAudioReceiver_ShouldProcessAudioPacket(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned __int16 *a5, unsigned int a6)
{
  _BOOL8 v6;
  _WORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  int v23;
  uint64_t v24;
  NSObject *v25;
  int v26;
  const __CFAllocator *v27;
  __CFDictionary *Mutable;
  CFNumberRef v29;
  int v30;
  uint64_t v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  _BYTE v39[10];
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 276) || *(_BYTE *)(a2 + 11))
    return 1;
  if (a3 && *(_QWORD *)(a1 + 400) != a4)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      v16 = VRTraceErrorLogLevelToCSTR();
      v17 = *MEMORY[0x1E0CF2758];
      v6 = 0;
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        return v6;
      v18 = *(_QWORD *)(a1 + 400);
      v30 = 136316418;
      v31 = v16;
      v32 = 2080;
      v33 = "_VCAudioReceiver_ShouldProcessAudioPacket";
      v34 = 1024;
      v35 = 1241;
      v36 = 2048;
      v37 = a1;
      v38 = 2048;
      *(_QWORD *)v39 = a4;
      *(_WORD *)&v39[8] = 2048;
      v40 = v18;
      _os_log_impl(&dword_1D8A54000, v17, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d AudioReceiver[%p] Unexpected idsParticipantID=%llu, expected=%llu", (uint8_t *)&v30, 0x3Au);
    }
    return 0;
  }
  if (!*(_BYTE *)(a2 + 10))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        _VCAudioReceiver_ShouldProcessAudioPacket_cold_1();
    }
    return 0;
  }
  if (!a6)
    return 0;
  v10 = (_WORD *)(a1 + 9100);
  v11 = *(unsigned __int16 *)(a1 + 9102);
  v12 = *(unsigned __int16 *)(a1 + 9100);
  v13 = a6;
  v14 = *a5;
  if (v14 == v12 || v14 == (_DWORD)v11)
  {
    v6 = 1;
  }
  else
  {
    v19 = 1;
    do
    {
      v20 = v19;
      if (a6 == v19)
        break;
      v21 = a5[v19++];
    }
    while (v21 != v12 && v21 != (_DWORD)v11);
    v6 = v20 < a6;
  }
  if (v12 != (_DWORD)v11)
  {
    while (1)
    {
      v23 = *a5++;
      if (v23 == (_DWORD)v11)
        break;
      if (!--v13)
        return v6;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 6)
    {
      v24 = VRTraceErrorLogLevelToCSTR();
      v25 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v26 = (unsigned __int16)*v10;
        v30 = 136316418;
        v31 = v24;
        v32 = 2080;
        v33 = "_VCAudioReceiver_CompleteStreamSwitch";
        v34 = 1024;
        v35 = 1225;
        v36 = 2048;
        v37 = a1;
        v38 = 1024;
        *(_DWORD *)v39 = v26;
        *(_WORD *)&v39[4] = 1024;
        *(_DWORD *)&v39[6] = v11;
        _os_log_impl(&dword_1D8A54000, v25, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d AudioReceiver[%p] Switching audio stream: %d -> %d", (uint8_t *)&v30, 0x32u);
      }
    }
    (*(void (**)(_QWORD, _QWORD, uint64_t))(a1 + 9144))(*(_QWORD *)(a1 + 9128), (unsigned __int16)*v10, v11);
    *v10 = v11;
    v27 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v30 = (unsigned __int16)*v10;
    v29 = CFNumberCreate(v27, kCFNumberIntType, &v30);
    CFDictionaryAddValue(Mutable, CFSTR("VCASActiveStreamID"), v29);
    reportingAudioStreamEvent();
    CFRelease(v29);
    CFRelease(Mutable);
  }
  return v6;
}

void _VCAudioReceiver_SplitPacket(uint64_t a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  int v6;
  int v8;
  int v9;

  v6 = a3[6];
  if ((v6 - 107) > 4 || ((1 << (v6 - 107)) & 0x13) == 0)
  {
    if (v6 == 20)
      _VCAudioReceiver_SplitRedPacket(a1, a2, a3, (uint64_t)a4);
    else
      AudioPacketArray_Append((uint64_t)a4, (uint64_t)a3);
  }
  else
  {
    _VCAudioReceiver_SplitEVSPacket(a1, a3, (uint64_t)a4);
  }
  if (AudioPacketArray_Last((unint64_t)a4))
  {
    v8 = *(_DWORD *)(AudioPacketArray_Last((unint64_t)a4) + 16);
    v9 = v8 - *(_DWORD *)(AudioPacketArray_First(a4) + 16);
    if (v9 != *(_DWORD *)(a1 + 728))
    {
      *(_DWORD *)(a1 + 728) = v9;
      VCJitterBuffer_SetRedAudioDelayInSamples(*(_QWORD *)(a1 + 440), v9);
    }
  }
}

unint64_t _VCAudioReceiver_ValidateAndEnqueuePackets(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  _BOOL4 SpeechCodecBundleData;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  BOOL v27;
  int v29;
  uint64_t v30;
  NSObject *v31;
  int v32;
  int v33;
  void (*v34)(uint64_t, _BYTE *);
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  NSObject *v41;
  NSObject *v42;
  const char *v43;
  unsigned __int8 *v44;
  int v45;
  int *v46;
  unsigned int v47;
  int v48;
  int v49;
  int v51;
  unsigned int v52;
  signed int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned __int8 *v56;
  int v57;
  uint64_t v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  unint64_t v64;
  int IsDTXFrame;
  int v66;
  BOOL v67;
  uint64_t v68;
  int v69;
  _DWORD *v70;
  uint64_t v71;
  int v72;
  _DWORD *v73;
  signed int v74;
  signed int v75;
  unsigned __int8 *v76;
  int v77;
  _QWORD *v78;
  unint64_t v79;
  size_t v80;
  uint64_t v81;
  unint64_t *v82;
  uint64_t v83;
  NSObject *v84;
  int v85;
  uint32_t v86;
  uint64_t v87;
  NSObject *v88;
  uint64_t v89;
  NSObject *v90;
  unsigned __int16 v91;
  unsigned int v92;
  uint64_t v93;
  unsigned __int16 v94;
  unint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  int v102;
  unsigned int v103;
  int *v104;
  unint64_t v105;
  unsigned __int16 *v106;
  int *v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  uint64_t v110;
  NSObject *v111;
  NSObject *v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  unint64_t v120;
  float OWRD;
  uint64_t v122;
  NSObject *v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  _QWORD *v132;
  unint64_t v133;
  unint64_t v134;
  int *v135;
  unint64_t *v136;
  unsigned __int16 *v137;
  unint64_t v138;
  int **v139;
  uint64_t v140;
  BOOL v141;
  unint64_t v142;
  unint64_t v143;
  unsigned int v144;
  unint64_t v146;
  __int128 v147;
  unint64_t v148;
  _BYTE v149[24];
  int v150;
  __int16 v151;
  uint64_t v152;
  __int16 v153;
  int v154;
  __int16 v155;
  int v156;
  __int16 v157;
  int v158;
  __int16 v159;
  int v160;
  __int16 v161;
  int v162;
  __int16 v163;
  int v164;
  __int16 v165;
  unsigned int v166;
  __int16 v167;
  unsigned int v168;
  _BYTE buf[24];
  __int128 v170;
  _DWORD v171[8];
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;

  v2 = a2;
  v189 = *MEMORY[0x1E0C80C00];
  result = AudioPacketArray_Next(a2);
  if (!result)
    return result;
  v4 = result;
  v5 = a1 + 8968;
  v140 = a1 + 712;
  v132 = (_QWORD *)(a1 + 9072);
  v143 = a1 + 9296;
  v138 = a1 + 9808;
  v134 = a1 + 8;
  v135 = (int *)(a1 + 8968);
  v133 = v2;
  do
  {
    v139 = (int **)(v4 + 1840);
    if (!VCAudioDecoderList_GetDecoderSettings(v140, *(_DWORD *)(v4 + 24), *(_DWORD *)(v4 + 28), (_QWORD *)(v4 + 1840)))
    {
      VCJitterBuffer_AudioPacketFree(*(_QWORD *)(a1 + 440), (int *)v4);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        v9 = VRTraceErrorLogLevelToCSTR();
        v10 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        {
          v11 = *(_DWORD *)(v4 + 24);
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = v9;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "_VCAudioReceiver_ValidateAndEnqueuePackets";
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v170) = 1696;
          WORD2(v170) = 1024;
          *(_DWORD *)((char *)&v170 + 6) = v11;
          _os_log_error_impl(&dword_1D8A54000, v10, OS_LOG_TYPE_ERROR, "VCAudioReceiver [%s] %s:%d ERROR unknown payloadType[%d]", buf, 0x22u);
        }
      }
      goto LABEL_168;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      v6 = VRTraceErrorLogLevelToCSTR();
      v7 = *MEMORY[0x1E0CF2758];
      v8 = *MEMORY[0x1E0CF2758];
      if (*MEMORY[0x1E0CF2748])
      {
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = v6;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "_VCAudioReceiver_EnqueuePacket";
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v170) = 1606;
          WORD2(v170) = 2048;
          *(_QWORD *)((char *)&v170 + 6) = a1;
          _os_log_impl(&dword_1D8A54000, v7, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d [%p]", buf, 0x26u);
        }
      }
      else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = v6;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "_VCAudioReceiver_EnqueuePacket";
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v170) = 1606;
        WORD2(v170) = 2048;
        *(_QWORD *)((char *)&v170 + 6) = a1;
        _os_log_debug_impl(&dword_1D8A54000, v7, OS_LOG_TYPE_DEBUG, "VCAudioReceiver [%s] %s:%d [%p]", buf, 0x26u);
      }
    }
    if (!VCPayloadUtils_supportsInternalDTXForPayload(**v139)
      || !*(_QWORD *)(a1 + 800)
      || !*(_QWORD *)(a1 + 808))
    {
      goto LABEL_49;
    }
    v188 = 0;
    v186 = 0u;
    v187 = 0u;
    v184 = 0u;
    v185 = 0u;
    v182 = 0u;
    v183 = 0u;
    v180 = 0u;
    v181 = 0u;
    v178 = 0u;
    v179 = 0u;
    v176 = 0u;
    v177 = 0u;
    v174 = 0u;
    v175 = 0u;
    v172 = 0u;
    v173 = 0u;
    memset(v171, 0, sizeof(v171));
    *(_OWORD *)&buf[8] = 0u;
    v170 = 0u;
    *(_QWORD *)buf = v4 + 44;
    *(_DWORD *)&buf[8] = *(_DWORD *)(v4 + 1516);
    SpeechCodecBundleData = VCAudioDecoderList_GetSpeechCodecBundleData(v140, *(_DWORD *)(v4 + 24), *(_DWORD *)(v4 + 28), (uint64_t)buf);
    v13 = VCPayloadUtils_DefaultAudioCodecBandwidthCodecForSampleRate(*(_DWORD *)(*(_QWORD *)(v4 + 1840) + 16));
    v14 = VCPayloadUtils_AudioCodecBandwidthForVCAudioCodecBandwidth(v13);
    if (SpeechCodecBundleData)
    {
      v15 = **v139;
      if (buf[12])
      {
        v16 = v15 - 97;
        v17 = *(_DWORD *)&buf[16];
        v18 = v170;
        v19 = DWORD1(v170);
        if (v16 >= 2)
          v14 = *(unsigned int *)&buf[20];
        else
          v14 = v14;
      }
      else
      {
        v19 = 0;
        if (!*(_BYTE *)(a1 + 299) || (v15 - 97) > 1)
        {
          v18 = 0;
          v17 = 0;
          goto LABEL_29;
        }
        if ((_DWORD)v15 == 97)
          v21 = 7;
        else
          v21 = 8;
        v17 = VCPayloadUtils_BitrateForAudioCodecRateMode(v15, v21);
        v19 = 0;
        v18 = 0;
      }
      *(_WORD *)(v5 + 100) = v17;
LABEL_29:
      if (v17 >= *(unsigned __int16 *)(v5 + 98))
        v22 = *(unsigned __int16 *)(v5 + 98);
      else
        v22 = v17;
      if (*(_WORD *)(v5 + 98))
        v20 = v22;
      else
        v20 = v17;
      goto LABEL_35;
    }
    v19 = 0;
    v18 = 0;
    v20 = 0;
LABEL_35:
    if (*(_BYTE *)(v5 + 96))
    {
      v20 = *(unsigned __int16 *)(v5 + 98);
      *(_BYTE *)(v5 + 96) = 0;
    }
    if (v20)
    {
      LODWORD(v147) = *(_DWORD *)(v4 + 24);
      v23 = v147;
      v24 = VCPayloadUtils_AudioCodecRateModeForBitrate(**(_DWORD **)(v4 + 1840), v20);
      DWORD1(v147) = v24;
      v25 = VCPayloadUtils_AudioCodecBandwidthForBandwidth(v14);
      DWORD2(v147) = v25;
      v26 = VCPayloadUtils_BitrateForAudioCodecRateMode(v23, v24);
      HIDWORD(v147) = v26;
      v148 = __PAIR64__(v19, v18);
      v27 = (_QWORD)v147 == *v132 && *((_QWORD *)&v147 + 1) == *(_QWORD *)(a1 + 9080);
      if (!v27 || __PAIR64__(v19, v18) != *(_QWORD *)(a1 + 9088))
      {
        v29 = v26;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          v30 = VRTraceErrorLogLevelToCSTR();
          v31 = *MEMORY[0x1E0CF2758];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
          {
            v32 = *(_DWORD *)(v4 + 16);
            v33 = *(unsigned __int16 *)(v4 + 14);
            *(_DWORD *)v149 = 136317954;
            *(_QWORD *)&v149[4] = v30;
            *(_WORD *)&v149[12] = 2080;
            *(_QWORD *)&v149[14] = "_VCAudioReceiver_ProcessCMR";
            *(_WORD *)&v149[22] = 1024;
            v150 = 921;
            v151 = 2048;
            v152 = a1;
            v153 = 1024;
            v154 = v24;
            v155 = 1024;
            v156 = v29;
            v157 = 1024;
            v158 = v25;
            v159 = 1024;
            v160 = v23;
            v161 = 1024;
            v162 = v32;
            v163 = 1024;
            v164 = v33;
            v165 = 1024;
            v166 = v18;
            v167 = 1024;
            v168 = v19;
            _os_log_impl(&dword_1D8A54000, v31, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d VCAudioReceiver[%p] Codec rate mode change requested: mode=%u bitrate=%d bandwidth=%d payload=%u rtpTimestamp=%u seqNum=%u evs_ch_rf offset=%d indicator=%d", v149, 0x56u);
          }
        }
        v34 = *(void (**)(uint64_t, _BYTE *))(a1 + 800);
        v35 = *(_QWORD *)(a1 + 808);
        *(_OWORD *)v149 = v147;
        *(_QWORD *)&v149[16] = v148;
        v34(v35, v149);
        *(_OWORD *)v132 = v147;
        *(_QWORD *)(a1 + 9088) = v148;
      }
    }
LABEL_49:
    v36 = (unsigned __int8 *)(v4 + 44);
    v37 = *(_DWORD *)(v4 + 1516);
    v38 = *(_DWORD *)v4;
    if (*(_DWORD *)(*(_QWORD *)(v4 + 1840) + 32) == 2)
    {
      v39 = (bswap32(*(unsigned __int16 *)v36) >> 19) + 2;
      if (v37 < v39)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() < 3)
          goto LABEL_137;
        v40 = VRTraceErrorLogLevelToCSTR();
        v41 = *MEMORY[0x1E0CF2758];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          goto LABEL_137;
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = v40;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "_VCAudioReceiver_ParsePacket";
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v170) = 1339;
        WORD2(v170) = 1024;
        *(_DWORD *)((char *)&v170 + 6) = v39;
        WORD5(v170) = 1024;
        HIDWORD(v170) = v37;
        v42 = v41;
        v43 = "VCAudioReceiver [%s] %s:%d Audio buffer corrupted. Access unit length=%d, packet length=%d";
        goto LABEL_130;
      }
      v137 = (unsigned __int16 *)(v4 + 46);
      v44 = &v36[v39];
      v37 -= v39;
    }
    else
    {
      v137 = (unsigned __int16 *)(v4 + 44);
      v44 = (unsigned __int8 *)(v4 + 44);
    }
    if ((int)v37 < 1)
      goto LABEL_137;
    v45 = 0;
    v146 = v4 + 1516;
    v142 = v4 + 1784;
    v136 = (unint64_t *)(v4 + 1816);
    while (1)
    {
      v46 = *(int **)(v4 + 1840);
      v47 = v46[5];
      if (!v47)
        v47 = v37;
      v144 = v47;
      v48 = *(_DWORD *)(v4 + 16);
      v49 = *v46;
      if ((*v46 - 101) > 0x12 || ((1 << (*v46 - 101)) & 0x418B9) == 0)
        break;
      v51 = v46[8];
      if (v51 == 1)
      {
        if ((unint64_t)v44 >= v146 || v44 < v36)
          goto LABEL_176;
        v56 = v44 + 1;
        v55 = *v44;
        v57 = -1;
        if (v37 >= 0x100 && v55 <= 1)
        {
          if ((unint64_t)v56 >= v146 || v56 < v36)
            goto LABEL_176;
          v55 += 2 * v44[1] + 256;
          v56 = v44 + 2;
          v57 = -2;
        }
        v37 += v57;
        if (v55 >= v37)
          v54 = v37;
        else
          v54 = v55;
        v44 = v56;
      }
      else
      {
        if (v51 == 2)
        {
          if ((unint64_t)v137 >= v146 || v137 < (unsigned __int16 *)v36)
            goto LABEL_176;
          v52 = *v137++;
          v53 = bswap32(v52) >> 19;
          goto LABEL_100;
        }
LABEL_72:
        v54 = v37;
      }
LABEL_102:
      *(_DWORD *)v149 = 0;
      LOBYTE(v147) = 0;
      if (v44 && ((unint64_t)v44 >= v146 || v44 < v36))
        goto LABEL_176;
      IsDTXFrame = VCAudioDecoderList_IsDTXFrame(v140, v49, v46[1], (uint64_t)v44, v54, v149, &v147);
      v66 = *(_DWORD *)v149;
      if (*(_DWORD *)v149 >= 0x961u)
        *(_DWORD *)(a1 + 10328) = *(_DWORD *)v149;
      v67 = v66 == 0;
      v68 = *(unsigned int *)(a1 + 9292);
      v69 = *(_DWORD *)(v4 + 24);
      if ((_DWORD)v68 != v69)
        goto LABEL_112;
      v70 = (_DWORD *)(v143 + 4 * v68);
      if ((unint64_t)v70 >= v138 || (unint64_t)v70 < v143)
        goto LABEL_176;
      if (*v70)
      {
        v71 = a1;
        v72 = *(_DWORD *)(a1 + 10320) + 1;
      }
      else
      {
LABEL_112:
        v73 = (_DWORD *)(v143 + 4 * v68);
        if ((unint64_t)v73 >= v138 || (unint64_t)v73 < v143)
          goto LABEL_176;
        v71 = a1;
        *v73 += *(_DWORD *)(a1 + 10320);
        *(_DWORD *)(a1 + 9292) = v69;
        v72 = 1;
      }
      *(_DWORD *)(v71 + 10320) = v72;
      *(_DWORD *)(v4 + 40) |= IsDTXFrame;
      if (v45 == 4)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          v87 = VRTraceErrorLogLevelToCSTR();
          v88 = *MEMORY[0x1E0CF2758];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = v87;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "_VCAudioReceiver_ParsePacket";
            *(_WORD *)&buf[22] = 1024;
            LODWORD(v170) = 1471;
            v42 = v88;
            v43 = "VCAudioReceiver [%s] %s:%d Too many frames in audio packet, possible corruption";
            v86 = 28;
            goto LABEL_131;
          }
        }
        goto LABEL_137;
      }
      if (v54 > 0x465 || *(unsigned __int8 *)(v4 + 1776) >= 0x11u)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() < 3)
          goto LABEL_137;
        v83 = VRTraceErrorLogLevelToCSTR();
        v84 = *MEMORY[0x1E0CF2758];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          goto LABEL_137;
        v85 = *(unsigned __int8 *)(v4 + 1776);
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = v83;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "_VCAudioReceiver_ParsePacket";
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v170) = 1476;
        WORD2(v170) = 1024;
        *(_DWORD *)((char *)&v170 + 6) = v54;
        WORD5(v170) = 1024;
        HIDWORD(v170) = v85;
        v42 = v84;
        v43 = "VCAudioReceiver [%s] %s:%d Unable to fit audio data into the audioFrame buffer. Data size: %d, padding len: %u";
        goto LABEL_130;
      }
      v74 = v54;
      v75 = v37;
      v141 = v67;
      v76 = v44;
      v77 = IsDTXFrame;
      v78 = VCJitterBuffer_AudioFrameAlloc(*(_QWORD *)(v71 + 440));
      *(_DWORD *)v78 = 0;
      *((_DWORD *)v78 + 1) = v38;
      *((_DWORD *)v78 + 294) = v77;
      v78[152] = *(_QWORD *)(v4 + 1840);
      *((_WORD *)v78 + 5) = *(_WORD *)(v4 + 14);
      *((_BYTE *)v78 + 8) = *(_BYTE *)(v4 + 12);
      *((_DWORD *)v78 + 3) = v48 + v144 * v45;
      *((_DWORD *)v78 + 286) = v74;
      if (v146 < (unint64_t)v76)
        goto LABEL_176;
      if (v36 > v76)
        goto LABEL_176;
      if (v146 - (unint64_t)v76 < v74)
        goto LABEL_176;
      v79 = (unint64_t)v78;
      memcpy(v78 + 2, v76, v74);
      v80 = *(unsigned __int8 *)(v4 + 1776);
      if (v80 > 0x10)
        goto LABEL_176;
      memcpy((void *)(v79 + 1152), (const void *)(v4 + 1520), v80);
      *(_BYTE *)(v79 + 1168) = *(_BYTE *)(v4 + 1776);
      *(_DWORD *)(v79 + 1172) = v144;
      *(_BYTE *)(v79 + 1224) = *(_BYTE *)(v4 + 1848);
      *(_DWORD *)(v79 + 1228) = *(_DWORD *)(v4 + 1852);
      *(_BYTE *)(v79 + 1232) = *(_BYTE *)(v4 + 1856);
      *(_WORD *)(v79 + 1234) = *(_WORD *)(v4 + 1858);
      *(_DWORD *)(v79 + 1196) = *(_DWORD *)(v4 + 24);
      *(_DWORD *)(v79 + 1256) = *(_DWORD *)v149;
      *(_DWORD *)(v79 + 1260) = *(_DWORD *)(v4 + 20);
      *(_BYTE *)(v79 + 1269) = v141;
      *(_BYTE *)(v79 + 1270) = v147;
      if (v79 >= v79 + 1272)
        goto LABEL_176;
      v81 = *(int *)v136;
      *(_DWORD *)v136 = v81 + 1;
      v82 = (unint64_t *)(v142 + 8 * v81);
      if (v82 >= v136 || (unint64_t)v82 < v142)
        goto LABEL_176;
      v38 = 0;
      *v82 = v79;
      v44 = &v76[v74];
      ++v45;
      v37 = v75 - v74;
      if (v75 <= v74)
        goto LABEL_137;
    }
    v53 = v47;
    v54 = v37;
    switch(v49)
    {
      case 0:
      case 8:
        break;
      case 1:
      case 2:
      case 4:
      case 5:
      case 6:
      case 7:
        goto LABEL_102;
      case 3:
        if ((v45 & 1) != 0)
        {
          if (v37 <= 0x20)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() < 3)
              goto LABEL_137;
            v122 = VRTraceErrorLogLevelToCSTR();
            v123 = *MEMORY[0x1E0CF2758];
            if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
              goto LABEL_137;
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = v122;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "_VCAudioReceiver_ParsePacket";
            *(_WORD *)&buf[22] = 1024;
            LODWORD(v170) = 1375;
            WORD2(v170) = 1024;
            *(_DWORD *)((char *)&v170 + 6) = v37;
            WORD5(v170) = 1024;
            HIDWORD(v170) = 33;
            v42 = v123;
            v43 = "VCAudioReceiver [%s] %s:%d GSM Audio buffer corrupted. Packet too short (%d < %d)";
LABEL_130:
            v86 = 40;
            goto LABEL_131;
          }
          v58 = 0;
          ++v37;
          do
          {
            v59 = &v44[v58];
            v60 = &v44[v58 - 1];
            if ((unint64_t)v60 >= v146 || v60 < v36 || (unint64_t)v59 >= v146 || v59 < v36)
              goto LABEL_176;
            ++v58;
            HIDWORD(v64) = *v59;
            LODWORD(v64) = *v60 << 24;
            *v60 = v64 >> 28;
          }
          while (v58 != 33);
          v53 = 33;
          --v44;
        }
        else
        {
          v53 = 33;
        }
        break;
      case 9:
        v53 = 60;
        break;
      default:
        goto LABEL_72;
    }
LABEL_100:
    if (v53 <= (int)v37)
    {
      v46 = *v139;
      v49 = **v139;
      v54 = v53;
      goto LABEL_102;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      v89 = VRTraceErrorLogLevelToCSTR();
      v90 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      {
        v131 = **v139;
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = v89;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "_VCAudioReceiver_ParsePacket";
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v170) = 1450;
        WORD2(v170) = 1024;
        *(_DWORD *)((char *)&v170 + 6) = v37;
        WORD5(v170) = 1024;
        HIDWORD(v170) = v53;
        LOWORD(v171[0]) = 1024;
        *(_DWORD *)((char *)v171 + 2) = v131;
        v42 = v90;
        v43 = "VCAudioReceiver [%s] %s:%d Audio buffer corrupted. Packet too short (%d < %d), payload=%d";
        v86 = 46;
LABEL_131:
        _os_log_error_impl(&dword_1D8A54000, v42, OS_LOG_TYPE_ERROR, v43, buf, v86);
      }
    }
LABEL_137:
    v5 = a1 + 8968;
    if (!*(_BYTE *)(v4 + 12))
    {
      v91 = *(_WORD *)(v4 + 14);
      v92 = *(unsigned __int16 *)v135;
      if (*(_WORD *)v135)
      {
        v93 = *(unsigned __int16 *)(a1 + 8970);
        v94 = v93 - v91;
        v95 = a1 + 4168;
        if ((unsigned __int16)(v93 - v91) < 0x7FFFu)
        {
          if (v92 < v94)
          {
            v103 = v92 + v94;
            if (v103 >= 0x12C)
              LOWORD(v103) = 300;
            *(_WORD *)v135 = v103;
          }
        }
        else
        {
          v96 = (__int16)(v91 - v93);
          if (v96 >= 2)
          {
            v97 = (unsigned __int16)(v91 - v93) - 1;
            v98 = a1 + 4197 + 16 * v93;
            v99 = v93 + 1;
            v100 = a1 + 4184 + 16 * v93;
            while (v100 - 4800 * (v99 / 0x12C) < (unint64_t)v135 && v100 - 4800 * (v99 / 0x12C) >= a1 + 4168)
            {
              *(_BYTE *)(v98 - 4800 * (v99 / 0x12C)) = 0;
              v98 += 16;
              ++v99;
              v100 += 16;
              if (!--v97)
                goto LABEL_148;
            }
LABEL_176:
            __break(0x5519u);
          }
LABEL_148:
          v102 = v96 + v92;
          if (v102 >= 300)
            LOWORD(v102) = 300;
          *(_WORD *)v135 = v102;
          *(_WORD *)(a1 + 8970) = v91;
        }
      }
      else
      {
        *(_WORD *)v135 = 1;
        *(_WORD *)(a1 + 8970) = v91;
        v95 = a1 + 4168;
      }
      v104 = (int *)(v95 + 16 * (v91 % 0x12Cu));
      if (v104 + 4 > v135 || v95 > (unint64_t)v104)
        goto LABEL_176;
      v105 = v95 + 16 * (v91 % 0x12Cu);
      *(_WORD *)(v105 + 4) = v91;
      v106 = (unsigned __int16 *)(v105 + 4);
      *((_DWORD *)v106 + 1) = *(_DWORD *)(v4 + 16);
      v107 = (int *)(v106 + 2);
      *((_BYTE *)v106 + 8) = *(_DWORD *)(v4 + 40) != 0;
      v108 = (unsigned __int8 *)(v106 + 4);
      *v104 = *(_DWORD *)(v4 + 1816);
      *((_BYTE *)v106 + 9) = 1;
      v109 = (unsigned __int8 *)v106 + 9;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        v110 = VRTraceErrorLogLevelToCSTR();
        v111 = *MEMORY[0x1E0CF2758];
        v112 = *MEMORY[0x1E0CF2758];
        if (*MEMORY[0x1E0CF2748])
        {
          if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
          {
            v113 = *v106;
            v114 = *v107;
            v115 = *v108;
            v116 = *v104;
            v117 = *v109;
            v118 = *(unsigned __int16 *)(a1 + 8970);
            v119 = *(unsigned __int16 *)v135;
            *(_DWORD *)buf = 136317442;
            *(_QWORD *)&buf[4] = v110;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "_VCAudioReceiver_UpdatePacketHistory";
            *(_WORD *)&buf[22] = 1024;
            LODWORD(v170) = 1591;
            WORD2(v170) = 1024;
            *(_DWORD *)((char *)&v170 + 6) = v113;
            WORD5(v170) = 1024;
            HIDWORD(v170) = v114;
            LOWORD(v171[0]) = 1024;
            *(_DWORD *)((char *)v171 + 2) = v115;
            HIWORD(v171[1]) = 1024;
            v171[2] = v116;
            LOWORD(v171[3]) = 1024;
            *(_DWORD *)((char *)&v171[3] + 2) = v117;
            HIWORD(v171[4]) = 1024;
            v171[5] = v118;
            LOWORD(v171[6]) = 1024;
            *(_DWORD *)((char *)&v171[6] + 2) = v119;
            _os_log_impl(&dword_1D8A54000, v111, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d New burst loss entry: SQ: %u, timestamp: %u, isDTX: %d, duration: %u, isValid: %d, AR highest received SQ: %u, AR packet entry count: %u", buf, 0x46u);
          }
        }
        else if (os_log_type_enabled(v112, OS_LOG_TYPE_DEBUG))
        {
          v124 = *v106;
          v125 = *v107;
          v126 = *v108;
          v127 = *v104;
          v128 = *v109;
          v129 = *(unsigned __int16 *)(a1 + 8970);
          v130 = *(unsigned __int16 *)v135;
          *(_DWORD *)buf = 136317442;
          *(_QWORD *)&buf[4] = v110;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "_VCAudioReceiver_UpdatePacketHistory";
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v170) = 1591;
          WORD2(v170) = 1024;
          *(_DWORD *)((char *)&v170 + 6) = v124;
          WORD5(v170) = 1024;
          HIDWORD(v170) = v125;
          LOWORD(v171[0]) = 1024;
          *(_DWORD *)((char *)v171 + 2) = v126;
          HIWORD(v171[1]) = 1024;
          v171[2] = v127;
          LOWORD(v171[3]) = 1024;
          *(_DWORD *)((char *)&v171[3] + 2) = v128;
          HIWORD(v171[4]) = 1024;
          v171[5] = v129;
          LOWORD(v171[6]) = 1024;
          *(_DWORD *)((char *)&v171[6] + 2) = v130;
          _os_log_debug_impl(&dword_1D8A54000, v111, OS_LOG_TYPE_DEBUG, "VCAudioReceiver [%s] %s:%d New burst loss entry: SQ: %u, timestamp: %u, isDTX: %d, duration: %u, isValid: %d, AR highest received SQ: %u, AR packet entry count: %u", buf, 0x46u);
        }
      }
    }
    VCJitterBuffer_EnqueuePacket(*(_QWORD *)(a1 + 440), v4);
    if (*(_BYTE *)(a1 + 9096))
    {
      v120 = v134 + 56 * *(unsigned __int16 *)(a1 + 9098);
      if (v120 >= a1 + 232 || v120 < v134)
        goto LABEL_176;
    }
    OWRD = VCJitterBuffer_GetOWRD(*(_QWORD *)(a1 + 440));
    RTPSetOWRD(OWRD);
    v2 = v133;
LABEL_168:
    result = AudioPacketArray_Next(v2);
    v4 = result;
  }
  while (result);
  return result;
}

uint64_t _VCAudioReceiver_UpdateAudioOverlayStats(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  int v3;
  float v4;
  int v5;
  int v6;
  float v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)(result + 10400))
  {
    v2 = result;
    v3 = *(_DWORD *)(result + 4164);
    v4 = (float)*(unsigned int *)(result + 9104);
    v5 = *(_DWORD *)(result + 728);
    v6 = *(_DWORD *)(result + 9264);
    v7 = *(double *)(result + 9248);
    v8 = *(_DWORD *)(result + 4160);
    v9 = AudioPacketArray_First(a2);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 1840);
      if (!v10)
      {
        LODWORD(v11) = 0;
        v12 = 0;
        goto LABEL_10;
      }
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        v12 = (int)*(double *)v11;
        LODWORD(v11) = *(_DWORD *)(v11 + 8);
        LODWORD(v10) = *(_DWORD *)v10;
LABEL_10:
        v13 = *(_QWORD *)(v2 + 10400);
        v14 = *(_QWORD *)(v13 + 40);
        *(_QWORD *)(v14 + 8) = 0;
        *(_DWORD *)(v14 + 16) = 0;
        *(_DWORD *)(v14 + 20) = v11;
        *(_DWORD *)(v14 + 24) = 0;
        *(_DWORD *)(v14 + 28) = v3;
        *(_DWORD *)(v14 + 32) = 0;
        *(_DWORD *)(v14 + 36) = v12;
        *(float *)(v14 + 40) = v4;
        *(_DWORD *)(v14 + 44) = v5;
        *(_DWORD *)(v14 + 48) = v6;
        *(float *)(v14 + 52) = v7;
        *(_DWORD *)(v14 + 56) = v8;
        *(_DWORD *)(v14 + 60) = v10;
        return VCOverlaySource_Write(v13);
      }
    }
    else
    {
      LODWORD(v11) = 0;
    }
    v12 = 0;
    LODWORD(v10) = 0;
    goto LABEL_10;
  }
  return result;
}

void _VCAudioReceiver_ProcessAudioRTCPInternal(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int16 **v9;
  unsigned __int16 *v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned __int16 *v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  void (*v26)(uint64_t, _QWORD, __n128);
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  int v32;
  uint64_t v33;
  NSObject *v34;
  int v35;
  void (*v36)(uint64_t, _QWORD, __n128);
  uint64_t v37;
  __n128 v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  int v44;
  uint8_t buf[4];
  uint64_t v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int8 *)(a3 + 1620);
  if (v3 >= 0xD)
    goto LABEL_50;
  v5 = a1;
  if (_VCAudioReceiver_ShouldProcessAudioPacket(a1, (uint64_t)a2, *(unsigned __int8 *)(a3 + 1621), *(_QWORD *)(a3 + 1624), (unsigned __int16 *)(a3 + 1596), v3))
  {
    kdebug_trace();
    if (*(_BYTE *)(a3 + 8))
    {
      v6 = 0;
      v7 = a3 + 16;
      v8 = a3 + 96;
      v42 = v5;
      while (1)
      {
        v9 = (unsigned __int16 **)(v7 + 8 * v6);
        if ((unint64_t)v9 >= v8 || (unint64_t)v9 < v7)
          break;
        v11 = *v9;
        v12 = *((unsigned __int8 *)*v9 + 1);
        if ((v12 - 200) >= 2)
        {
          if (v12 == 246)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              v24 = VRTraceErrorLogLevelToCSTR();
              v25 = *MEMORY[0x1E0CF2758];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315906;
                v46 = v24;
                v47 = 2080;
                v48 = "_VCAudioReceiver_ProcessAudioRTCPInternal";
                v49 = 1024;
                v50 = 1989;
                v51 = 2048;
                v52 = v5;
                _os_log_impl(&dword_1D8A54000, v25, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d audioReceiver=%p Received RTCP Custom SR", buf, 0x26u);
              }
            }
            v26 = *(void (**)(uint64_t, _QWORD, __n128))(v5 + 9136);
            v27 = *(_QWORD *)(v5 + 9128);
            v28.n128_f64[0] = NTPToMicro(*((unsigned int *)v11 + 5) | ((unint64_t)*((unsigned int *)v11 + 4) << 32));
            v26(v27, *((unsigned int *)v11 + 6), v28);
          }
          else if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            v29 = VRTraceErrorLogLevelToCSTR();
            v30 = *MEMORY[0x1E0CF2758];
            v31 = *MEMORY[0x1E0CF2758];
            if (*MEMORY[0x1E0CF2748])
            {
              if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
              {
                v32 = *((unsigned __int8 *)v11 + 1);
                *(_DWORD *)buf = 136316162;
                v46 = v29;
                v47 = 2080;
                v48 = "_VCAudioReceiver_ProcessAudioRTCPInternal";
                v49 = 1024;
                v50 = 1999;
                v51 = 2048;
                v52 = v5;
                v53 = 1024;
                v54 = v32;
                _os_log_impl(&dword_1D8A54000, v30, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d audioReceiver=%p Received unknown RTCP packetType=%u", buf, 0x2Cu);
              }
            }
            else if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
            {
              v39 = *((unsigned __int8 *)v11 + 1);
              *(_DWORD *)buf = 136316162;
              v46 = v29;
              v47 = 2080;
              v48 = "_VCAudioReceiver_ProcessAudioRTCPInternal";
              v49 = 1024;
              v50 = 1999;
              v51 = 2048;
              v52 = v5;
              v53 = 1024;
              v54 = v39;
              _os_log_debug_impl(&dword_1D8A54000, v30, OS_LOG_TYPE_DEBUG, "VCAudioReceiver [%s] %s:%d audioReceiver=%p Received unknown RTCP packetType=%u", buf, 0x2Cu);
            }
          }
        }
        else
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            v13 = VRTraceErrorLogLevelToCSTR();
            v14 = *MEMORY[0x1E0CF2758];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
            {
              v15 = *((unsigned __int8 *)v11 + 1);
              *(_DWORD *)buf = 136316162;
              v46 = v13;
              v47 = 2080;
              v48 = "_VCAudioReceiver_ProcessAudioRTCPInternal";
              v49 = 1024;
              v50 = 1984;
              v51 = 2048;
              v52 = v5;
              v53 = 1024;
              v54 = v15;
              _os_log_impl(&dword_1D8A54000, v14, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d audioReceiver=%p Received RTCP packetType=%u [200=SR, 201=RR]", buf, 0x2Cu);
            }
          }
          if (v11 >= v11 + 518)
            break;
          v16 = *v11;
          v17 = v16 >> 8;
          if ((v16 >> 8) - 202 >= 0xFFFFFFFE)
          {
            if (v17 == 200)
              v18 = v11 + 14;
            else
              v18 = v11 + 4;
            v19 = v16 & 0x1F;
            if (v19)
            {
              v20 = 0;
              v21 = *a2;
              v41 = *(_QWORD *)a3;
              v22 = (unint64_t)&v18[12 * v19];
              v23 = (unint64_t)v18;
              while (1)
              {
                v44 = 0;
                if ((RTPGetLocalSSRC(v21, &v44) & 0x80000000) != 0)
                  break;
                if (v23 >= v22 || v23 < (unint64_t)v18)
                  goto LABEL_50;
                if (*(_DWORD *)v23 == v44)
                {
                  v35 = RTCPComputeRoundTripTimeMiddle32(v23, v41);
                  RTPUpdateWRMInfo(v21, v35, *(_DWORD *)(v23 + 12), *(unsigned __int8 *)(v23 + 4));
                  goto LABEL_40;
                }
                ++v20;
                v23 += 24;
                if (v20 >= (*v11 & 0x1Fu))
                  goto LABEL_40;
              }
              if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
              {
                v33 = VRTraceErrorLogLevelToCSTR();
                v34 = *MEMORY[0x1E0CF2758];
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136315650;
                  v46 = v33;
                  v47 = 2080;
                  v48 = "_VCAudioReceiver_ProcessAudioRTCPPacketInternal";
                  v49 = 1024;
                  v50 = 1955;
                  _os_log_impl(&dword_1D8A54000, v34, OS_LOG_TYPE_DEFAULT, "VCAudioReceiver [%s] %s:%d Could not get the local SSRC", buf, 0x1Cu);
                }
              }
            }
LABEL_40:
            v8 = a3 + 96;
            v5 = v42;
            if (v17 == 200)
            {
              v36 = *(void (**)(uint64_t, _QWORD, __n128))(v42 + 9136);
              v37 = *(_QWORD *)(v42 + 9128);
              v38.n128_f64[0] = NTPToMicro(*((unsigned int *)v11 + 3) | ((unint64_t)*((unsigned int *)v11 + 2) << 32));
              v36(v37, *((unsigned int *)v11 + 4), v38);
            }
          }
        }
        if (*(unsigned __int8 *)(a3 + 8) <= ++v6)
          goto LABEL_47;
      }
LABEL_50:
      __break(0x5519u);
    }
LABEL_47:
    (*(void (**)(_QWORD, uint64_t))(v5 + 9152))(*(_QWORD *)(v5 + 9128), a3);
    v40 = *(_QWORD *)(v5 + 9280);
    if (v40)
      VCAudioIssueDetector_ReportRTCPTraffic(v40);
  }
}

_QWORD *JitterPreloadQueue_AudioFrameAlloc(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  unint64_t v4;

  if (!a1)
  {
LABEL_7:
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        JitterPreloadQueue_AudioFrameAlloc_cold_1();
    }
    return 0;
  }
  v2 = *(_QWORD *)(a1 + 12016);
  if (!v2)
    return 0;
  result = VCMemoryPool_Alloc(*(OSQueueHead **)(a1 + 12016));
  if (result)
  {
    v4 = (unint64_t)result + *(_QWORD *)(v2 + 16);
    if ((unint64_t)(result + 159) > v4
      || (result[150] = JitterPreloadQueue_AudioFrameFree, result[151] = a1, (unint64_t)result >= v4))
    {
      __break(0x5519u);
      goto LABEL_7;
    }
  }
  return result;
}

void JitterPreloadQueue_AudioFrameFree(uint64_t a1, void *a2)
{
  if (a1)
    VCMemoryPool_Free(*(OSQueueHead **)(a1 + 12016), a2);
}

char *JitterPreloadQueue_AudioPacketAlloc(uint64_t a1)
{
  uint64_t v1;
  char *result;
  BOOL v3;

  if (!a1)
  {
LABEL_9:
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        JitterPreloadQueue_AudioPacketAlloc_cold_1();
    }
    return 0;
  }
  v1 = *(_QWORD *)(a1 + 12008);
  if (!v1)
    return 0;
  result = (char *)VCMemoryPool_Alloc(*(OSQueueHead **)(a1 + 12008));
  if (result)
    v3 = result >= &result[*(_QWORD *)(v1 + 16)];
  else
    v3 = 0;
  if (v3)
  {
    __break(0x5519u);
    goto LABEL_9;
  }
  return result;
}

void JitterPreloadQueue_AudioPacketFree(uint64_t a1, void *a2)
{
  if (a1)
    VCMemoryPool_Free(*(OSQueueHead **)(a1 + 12008), a2);
}

_DWORD *JitterPreloadQueue_Create()
{
  _DWORD *v0;
  _DWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v0 = malloc_type_calloc(1uLL, 0x2EF8uLL, 0x10200400647CBF9uLL);
  if (!v0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        JitterPreloadQueue_Create_cold_1();
    }
    return 0;
  }
  v1 = v0;
  v2 = VCMemoryPool_Create(0x748uLL);
  *((_QWORD *)v1 + 1501) = v2;
  if (!v2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        JitterPreloadQueue_Create_cold_2();
    }
    goto LABEL_15;
  }
  v3 = VCMemoryPool_Create(0x4F8uLL);
  *((_QWORD *)v1 + 1502) = v3;
  if (!v3)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        JitterPreloadQueue_Create_cold_3();
    }
    VCMemoryPool_Destroy(*((OSQueueHead **)v1 + 1501));
LABEL_15:
    free(v1);
    return 0;
  }
  *v1 = 0;
  v1[1] = 0;
  return v1;
}

void JitterPreloadQueue_Destroy(char *a1)
{
  int v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v7;
  uint64_t v8;
  NSObject *v9;
  uint8_t buf[4];
  uint64_t v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = *(_DWORD *)a1;
    if (*(_DWORD *)a1 != *((_DWORD *)a1 + 1))
    {
      v3 = (unint64_t *)(a1 + 8);
      v4 = (unint64_t *)(a1 + 12008);
      while (1)
      {
        v5 = &v3[v2];
        if (v5 >= v4 || v5 < v3)
          break;
        v7 = *v5;
        if (*v5)
        {
          if (*(int *)(v7 + 1816) >= 5)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              v8 = VRTraceErrorLogLevelToCSTR();
              v9 = *MEMORY[0x1E0CF2758];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315650;
                v11 = v8;
                v12 = 2080;
                v13 = "JitterPreloadQueue_Destroy";
                v14 = 1024;
                v15 = 99;
                _os_log_error_impl(&dword_1D8A54000, v9, OS_LOG_TYPE_ERROR, " [%s] %s:%d JitterPreloadQueue: Too many frames seen in audio packet, possible corruption", buf, 0x1Cu);
              }
            }
            *(_DWORD *)(v7 + 1816) = 4;
          }
          if (v7 >= v7 + 1864)
            break;
          _JitterPreloadQueue_FreePacket((uint64_t)a1, (void **)v7);
        }
        v2 = (v2 + 1) % 1500;
        if (v2 == *((_DWORD *)a1 + 1))
          goto LABEL_3;
      }
      __break(0x5519u);
    }
LABEL_3:
    VCMemoryPool_Destroy(*((OSQueueHead **)a1 + 1501));
    VCMemoryPool_Destroy(*((OSQueueHead **)a1 + 1502));
    free(a1);
  }
}

void _JitterPreloadQueue_FreePacket(uint64_t a1, void **__new)
{
  uint64_t v4;
  void **v5;
  void **v6;
  void **v7;
  void *v8;

  if (*((int *)__new + 454) < 1)
  {
LABEL_6:
    VCMemoryPool_Free(*(OSQueueHead **)(a1 + 12008), __new);
  }
  else
  {
    v4 = 0;
    v5 = __new + 227;
    v6 = __new + 223;
    v7 = __new + 223;
    while (v7 < v5 && v7 >= v6)
    {
      v8 = *v7++;
      VCMemoryPool_Free(*(OSQueueHead **)(a1 + 12016), v8);
      if (++v4 >= *(int *)v5)
        goto LABEL_6;
    }
    __break(0x5519u);
  }
}

void JitterPreloadQueue_Enqueue(void ***a1, void **a2)
{
  int v2;
  void ***v3;

  if (a1)
  {
    v2 = (*((_DWORD *)a1 + 1) + 1) % 1500;
    if (v2 == *(_DWORD *)a1)
    {
      _JitterPreloadQueue_FreePacket((uint64_t)a1, a2);
      if ((int)VRTraceGetErrorLogLevelForModule() > 2)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          JitterPreloadQueue_Enqueue_cold_1();
      }
    }
    else
    {
      v3 = &a1[*((int *)a1 + 1) + 1];
      if (v3 < a1 + 1501 && v3 >= a1 + 1)
      {
        *v3 = a2;
        __dmb(0xBu);
        *((_DWORD *)a1 + 1) = v2;
      }
      else
      {
        __break(0x5519u);
      }
    }
  }
}

int *JitterPreloadQueue_Dequeue(int *result)
{
  uint64_t v1;
  int *v2;
  int v4;

  if (!result || *result == result[1])
    return 0;
  v2 = &result[2 * *result + 2];
  if (v2 >= result + 3002 || v2 < result + 2)
  {
    __break(0x5519u);
    return result;
  }
  v1 = *(_QWORD *)v2;
  v4 = *result + 1;
  __dmb(0xBu);
  *result = v4 % 1500;
  return (int *)v1;
}

int *JitterPreloadQueue_Flush(int *a1)
{
  int *result;
  void **v3;

  result = JitterPreloadQueue_Dequeue(a1);
  if (result)
  {
    v3 = (void **)result;
    do
    {
      _JitterPreloadQueue_FreePacket((uint64_t)a1, v3);
      result = JitterPreloadQueue_Dequeue(a1);
      v3 = (void **)result;
    }
    while (result);
  }
  return result;
}

void VCAudioTransmitter_SetAllowedPayloads(uint64_t a1, CFArrayRef theArray)
{
  CFIndex Count;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  __CFArray *v8;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  CFIndex v22;
  uint64_t v23;
  CFRange v24;

  v23 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        v5 = VRTraceErrorLogLevelToCSTR();
        v6 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        {
          v7 = objc_msgSend(*(id *)(a1 + 352), "count");
          v11 = 136316418;
          v12 = v5;
          v13 = 2080;
          v14 = "VCAudioTransmitter_SetAllowedPayloads";
          v15 = 1024;
          v16 = 749;
          v17 = 2048;
          v18 = a1;
          v19 = 2048;
          v20 = v7;
          v21 = 2048;
          v22 = Count;
          _os_log_impl(&dword_1D8A54000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d audioTransmitter=%p audioPayloads previousCount=%ld updatedCount=%ld", (uint8_t *)&v11, 0x3Au);
        }
      }
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 352));
      v8 = *(__CFArray **)(a1 + 352);
      v24.length = CFArrayGetCount(theArray);
      v24.location = 0;
      CFArrayAppendArray(v8, theArray, v24);
      v9 = (unsigned int *)(a1 + 72);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCAudioTransmitter_SetAllowedPayloads_cold_2();
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioTransmitter_SetAllowedPayloads_cold_1();
  }
}

void *_VCAudioTransmitter_UsedAudioPayloadForType(uint64_t a1, int a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _BYTE v10[128];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = *(void **)(a1 + 352);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v10, 16);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = *(_QWORD *)v12;
LABEL_3:
  v7 = 0;
  while (1)
  {
    if (*(_QWORD *)v12 != v6)
      objc_enumerationMutation(v3);
    v8 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * v7);
    if (objc_msgSend((id)objc_msgSend(v8, "config"), "payload") == a2)
      return v8;
    if (v5 == ++v7)
    {
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v10, 16);
      if (v5)
        goto LABEL_3;
      return 0;
    }
  }
}

void VCAudioTransmitter_PushRemainingSamples(unint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int16 v7;
  int v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 908) = objc_msgSend((id)a1, "chooseAudioNetworkBitrate");
  LODWORD(v5) = 0;
  v2 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 368), "config", 0, v5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
               0,
               0,
               0,
               0,
               1),
         "payload");
  v3 = *(_DWORD *)(a1 + 88);
  HIDWORD(v5) = v2;
  v6 = v3;
  v7 = 256;
  v8 = 0;
  v9 = *(_BYTE *)(a1 + 952);
  _VCAudioTransmitter_BundleAndSendSamples(a1, (uint64_t)&v4, 0, 0);
}

void _VCAudioTransmitter_BundleAndSendSamples(unint64_t a1, uint64_t a2, int a3, char a4)
{
  int v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  const char *v16;
  int v17;
  void *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  const char *v25;
  int v26;
  int v27;
  uint64_t v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 912) = 0;
  *(_DWORD *)(a1 + 904) = *(_DWORD *)(a2 + 12);
  v8 = *(_DWORD *)(a2 + 12);
  if (v8 != objc_msgSend(*(id *)(a1 + 8), "payload")
    && objc_msgSend(*(id *)(a1 + 8), "bundledPackets")
    || objc_msgSend(*(id *)(a1 + 8), "isFull"))
  {
    _VCAudioTransmitter_FlushBundlers(a1);
  }
  if ((a3 & 1) == 0 && objc_msgSend(*(id *)(a1 + 8), "bundledPackets")
    || !*(_QWORD *)a2 && !*(_BYTE *)(a1 + 472))
  {
    _VCAudioTransmitter_FlushBundlers(a1);
    goto LABEL_15;
  }
  if (!a3)
    goto LABEL_15;
  if ((a4 & 1) != 0 || !*(_BYTE *)(a1 + 472))
  {
    *(_QWORD *)(a1 + 184) = 0x7FF8000000000000;
  }
  else
  {
    if (*(double *)(a2 + 32) - *(double *)(a1 + 184) >= 0.3)
    {
      if (*(_BYTE *)(a1 + 176))
      {
        _VCAudioTransmitter_FlushBundlers(a1);
        *(_BYTE *)(a1 + 176) = 0;
      }
      goto LABEL_15;
    }
    *(_BYTE *)(a1 + 176) = 1;
  }
  v18 = *(void **)(a1 + 368);
  v19 = objc_msgSend((id)objc_msgSend(v18, "config"), "payload");
  v20 = *(_DWORD *)(a2 + 12);
  if (v19 != v20)
    v18 = _VCAudioTransmitter_UsedAudioPayloadForType(a1, v20);
  *(_DWORD *)(a2 + 12) = objc_msgSend((id)objc_msgSend(v18, "config"), "payload");
  if (VCPacketBundler_BundleAudio(*(_QWORD *)(a1 + 8), (_QWORD *)a2))
  {
    if (!objc_msgSend(*(id *)(a1 + 368), "shortREDEnabled")
      || VCPacketBundler_BundleAudio(*(_QWORD *)(a1 + 16), (_QWORD *)(a2 + 40)))
    {
LABEL_15:
      if (objc_msgSend(*(id *)(a1 + 8), "isFull"))
        _VCAudioTransmitter_FlushBundlers(a1);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        v9 = VRTraceErrorLogLevelToCSTR();
        v10 = *MEMORY[0x1E0CF2758];
        v11 = *MEMORY[0x1E0CF2758];
        if (*MEMORY[0x1E0CF2748])
        {
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            v12 = *(_DWORD *)(a1 + 276);
            v13 = *(_DWORD *)(a1 + 904);
            v14 = *(_DWORD *)(a2 + 8);
            v15 = *(_DWORD *)(a2 + 48);
            if (*(_BYTE *)(a1 + 48))
              v16 = "voicedFrameCount";
            else
              v16 = "silenceFrameCount";
            v17 = *(_DWORD *)(a1 + 284);
            v27 = 136317186;
            v28 = v9;
            v29 = 2080;
            v30 = "_VCAudioTransmitter_BundleAndSendSamples";
            v31 = 1024;
            v32 = 1365;
            v33 = 1024;
            v34 = v12;
            v35 = 1024;
            v36 = v13;
            v37 = 1024;
            v38 = v14;
            v39 = 1024;
            v40 = v15;
            v41 = 2080;
            v42 = v16;
            v43 = 1024;
            v44 = v17;
            _os_log_impl(&dword_1D8A54000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCAT bundleAndSendSamples: frame#=%u payload=%u numBytes=%u shortREDBufferSize=%u %s=%u", (uint8_t *)&v27, 0x44u);
          }
        }
        else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          v21 = *(_DWORD *)(a1 + 276);
          v22 = *(_DWORD *)(a1 + 904);
          v23 = *(_DWORD *)(a2 + 8);
          v24 = *(_DWORD *)(a2 + 48);
          if (*(_BYTE *)(a1 + 48))
            v25 = "voicedFrameCount";
          else
            v25 = "silenceFrameCount";
          v26 = *(_DWORD *)(a1 + 284);
          v27 = 136317186;
          v28 = v9;
          v29 = 2080;
          v30 = "_VCAudioTransmitter_BundleAndSendSamples";
          v31 = 1024;
          v32 = 1365;
          v33 = 1024;
          v34 = v21;
          v35 = 1024;
          v36 = v22;
          v37 = 1024;
          v38 = v23;
          v39 = 1024;
          v40 = v24;
          v41 = 2080;
          v42 = v25;
          v43 = 1024;
          v44 = v26;
          _os_log_debug_impl(&dword_1D8A54000, v10, OS_LOG_TYPE_DEBUG, " [%s] %s:%d VCAT bundleAndSendSamples: frame#=%u payload=%u numBytes=%u shortREDBufferSize=%u %s=%u", (uint8_t *)&v27, 0x44u);
        }
      }
    }
  }
}

void VCAudioTransmitter_PushAudioSamples(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int SampleCount;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int *v20;
  _BOOL4 v21;
  char *v22;
  unsigned int v23;
  int Timestamp;
  double HostTime;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  void *v33;
  int v34;
  _BOOL4 v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  uint64_t BufferAtIndex;
  uint64_t v42;
  size_t v43;
  char *v44;
  const void *v45;
  uint64_t v46;
  unsigned __int16 v47;
  unsigned __int16 v48;
  unsigned __int16 v49;
  char v50;
  float AveragePower;
  float v52;
  int v53;
  uint64_t v54;
  unsigned int Priority;
  char v56;
  int v57;
  _BOOL4 v58;
  char v59;
  _BYTE *v60;
  uint64_t v61;
  unsigned int v62;
  int32x2_t *v63;
  int v64;
  int VoiceActivity;
  char *__new;
  int v67;
  int v68;
  uint64_t v69;
  char *v70;
  unsigned int v71;
  unsigned __int8 v72;
  unsigned int v73;
  uint8_t buf[12];
  _BYTE v75[36];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = a2;
    if (a2)
    {
      *(_BYTE *)(a1 + 908) = objc_msgSend((id)a1, "chooseAudioNetworkBitrate");
      if (*(_BYTE *)(a1 + 472) && !VCAudioBufferList_GetVoiceActivity(v2))
        ++*(_DWORD *)(a1 + 596);
      SampleCount = VCAudioBufferList_GetSampleCount(v2);
      if (!SampleCount)
      {
        v83 = 1;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v77 = 0u;
        v78 = 0u;
        v76 = 0u;
        memset(&v75[4], 0, 32);
        memset(buf, 0, sizeof(buf));
        *(_DWORD *)v75 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 368), "config"), "payload");
        *(_DWORD *)&v75[4] = VCAudioBufferList_GetTimestamp(v2);
        *(_WORD *)&v75[8] = 256;
        *(_DWORD *)&v75[12] = 0;
        v75[17] = *(_BYTE *)(a1 + 952);
        v15 = VCAudioBufferList_GetVoiceActivity(v2) != 0;
        _VCAudioTransmitter_BundleAndSendSamples(a1, (uint64_t)buf, 0, v15);
        v16 = *(_QWORD *)(a1 + 40);
        v17 = VCAudioBufferList_GetSampleCount(v16);
        VCAudioBufferList_Shift(v16, v17);
        return;
      }
      v5 = SampleCount;
      v6 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 368), "config"), "samplesPerFrame");
      v7 = VCAudioBufferList_GetSampleCount(*(_QWORD *)(a1 + 40));
      v8 = v7;
      v9 = v5 == v6 && v7 == 0;
      v10 = !v9;
      v64 = v10;
      if (!v9)
        VCAudioBufferList_Append(*(_QWORD *)(a1 + 40), v2, 0);
      v11 = v8 + v5;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        v12 = VRTraceErrorLogLevelToCSTR();
        v13 = *MEMORY[0x1E0CF2758];
        v14 = *MEMORY[0x1E0CF2758];
        if (*MEMORY[0x1E0CF2748])
        {
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136316674;
            *(_QWORD *)&buf[4] = v12;
            *(_WORD *)v75 = 2080;
            *(_QWORD *)&v75[2] = "VCAudioTransmitter_PushAudioSamples";
            *(_WORD *)&v75[10] = 1024;
            *(_DWORD *)&v75[12] = 958;
            *(_WORD *)&v75[16] = 1024;
            *(_DWORD *)&v75[18] = v6;
            *(_WORD *)&v75[22] = 1024;
            *(_DWORD *)&v75[24] = v8;
            *(_WORD *)&v75[28] = 1024;
            *(_DWORD *)&v75[30] = v11;
            *(_WORD *)&v75[34] = 1024;
            LODWORD(v76) = VCAudioBufferList_GetTimestamp(v2);
            _os_log_impl(&dword_1D8A54000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d encoderSamplePerFrame:%d bufferedSamples:%d totalSamples:%d timestamp:%d", buf, 0x34u);
          }
        }
        else if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136316674;
          *(_QWORD *)&buf[4] = v12;
          *(_WORD *)v75 = 2080;
          *(_QWORD *)&v75[2] = "VCAudioTransmitter_PushAudioSamples";
          *(_WORD *)&v75[10] = 1024;
          *(_DWORD *)&v75[12] = 958;
          *(_WORD *)&v75[16] = 1024;
          *(_DWORD *)&v75[18] = v6;
          *(_WORD *)&v75[22] = 1024;
          *(_DWORD *)&v75[24] = v8;
          *(_WORD *)&v75[28] = 1024;
          *(_DWORD *)&v75[30] = v11;
          *(_WORD *)&v75[34] = 1024;
          LODWORD(v76) = VCAudioBufferList_GetTimestamp(v2);
          _os_log_debug_impl(&dword_1D8A54000, v13, OS_LOG_TYPE_DEBUG, " [%s] %s:%d encoderSamplePerFrame:%d bufferedSamples:%d totalSamples:%d timestamp:%d", buf, 0x34u);
        }
      }
      if (v64)
        v2 = *(_QWORD *)(a1 + 40);
      if (v6 > v11)
      {
LABEL_25:
        if (*(double *)(a1 + 496) == 0.0)
          *(double *)(a1 + 496) = micro();
        return;
      }
      v18 = 0;
      v19 = v11 / v6;
      v63 = (int32x2_t *)(a1 + 276);
      v20 = (unsigned int *)(a1 + 264);
      v60 = &v75[4];
      if (v19 <= 1)
        v19 = 1;
      v62 = v19;
      v61 = v2;
      while (1)
      {
        VoiceActivity = VCAudioBufferList_GetVoiceActivity(v2);
        v21 = VoiceActivity != 0;
        v22 = (char *)VCMemoryPool_Alloc(*(OSQueueHead **)(a1 + 712));
        v23 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 368), "config"), "payload");
        Timestamp = VCAudioBufferList_GetTimestamp(v2);
        HostTime = VCAudioBufferList_GetHostTime(v2);
        v26 = *(_QWORD *)(a1 + 872);
        if (v26)
          VCAudioDump_LogUnCompressedAudio(v26, 0, v2, 0);
        v69 = v2;
        v70 = v22;
        v71 = v23;
        v68 = Timestamp;
        v72 = VoiceActivity != 0;
        v73 = 0;
        kdebug_trace();
        v27 = *(void **)(a1 + 368);
        v67 = v18;
        if (objc_msgSend((id)objc_msgSend(v27, "config"), "samplesPerFrame") != v6)
        {
          v84 = 0u;
          v85 = 0u;
          v86 = 0u;
          v87 = 0u;
          v28 = *(void **)(a1 + 352);
          v29 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v84, buf, 16);
          if (v29)
          {
            v30 = v29;
            v31 = *(_QWORD *)v85;
            while (2)
            {
              for (i = 0; i != v30; ++i)
              {
                if (*(_QWORD *)v85 != v31)
                  objc_enumerationMutation(v28);
                v33 = *(void **)(*((_QWORD *)&v84 + 1) + 8 * i);
                if (objc_msgSend((id)objc_msgSend(v33, "config", v60), "samplesPerFrame") == v6)
                {
                  v27 = v33;
                  goto LABEL_44;
                }
              }
              v30 = objc_msgSend(v28, "countByEnumeratingWithState:objects:count:", &v84, buf, 16);
              if (v30)
                continue;
              break;
            }
LABEL_44:
            v2 = v61;
            v21 = VoiceActivity != 0;
          }
        }
        if (!*(_QWORD *)(a1 + 360) || !*(_BYTE *)(a1 + 704))
          break;
        v34 = *(unsigned __int8 *)(a1 + 729);
        v35 = *(_BYTE *)(a1 + 729) == 0;
        if (v34 | v21 || (objc_msgSend((id)objc_msgSend(v27, "config"), "isDTXEnabled") & 1) != 0)
        {
          if (v34)
            break;
          v35 = 1;
        }
        else
        {
          v27 = *(void **)(a1 + 360);
        }
LABEL_51:
        v36 = v72;
        if (v72 == *(unsigned __int8 *)(a1 + 48))
          goto LABEL_54;
        *(_DWORD *)(a1 + 284) = 0;
        objc_msgSend(v27, "resetEncoderWithSampleBuffer:numBytes:", *(_QWORD *)(a1 + 160)+ *(unsigned int *)(a1 + 168)- (int)(*(_DWORD *)(a1 + 400) * v6 * *(_DWORD *)(a1 + 412)));
        AFRCSetAudioSilent(*(_QWORD *)(a1 + 296), VoiceActivity == 0);
        AFRCSetAudioPayload(*(_QWORD *)(a1 + 296), objc_msgSend((id)objc_msgSend(v27, "config"), "payload"), objc_msgSend(v27, "bitrate"));
LABEL_53:
        v36 = v72;
LABEL_54:
        ++*(_DWORD *)(a1 + 284);
        if (v36)
        {
          ++v63->i32[0];
LABEL_56:
          v37 = objc_msgSend(v27, "encodeAudio:numInputSamples:outputBytes:numOutputBytes:shortREDBytes:", v69, v6, v22, 1600, &v73, v60);
          v38 = v37;
          do
            v39 = __ldxr(v20);
          while (__stxr(v39 + v37, v20));
          v71 = objc_msgSend((id)objc_msgSend(v27, "config"), "payload");
          if (*(_DWORD *)(a1 + 444) == 3)
            *(_BYTE *)(a1 + 952) = objc_msgSend(v27, "isSIDFrame:encodedBytes:", v22, v38);
          goto LABEL_62;
        }
        *v63 = vadd_s32(*v63, (int32x2_t)0x100000001);
        if (!*(_BYTE *)(a1 + 464))
          goto LABEL_56;
        LODWORD(v38) = 0;
LABEL_62:
        *(_BYTE *)(a1 + 48) = v72;
        v40 = v68;
        if (v35)
        {
          BufferAtIndex = VCAudioBufferList_GetBufferAtIndex(v69, 0, 0);
          v42 = *(_DWORD *)(a1 + 412) * *(_DWORD *)(a1 + 400) * v6;
          v43 = *(unsigned int *)(a1 + 168);
          v44 = *(char **)(a1 + 160);
          if (v43 <= v42)
          {
            v45 = (const void *)(BufferAtIndex + (v42 - v43));
          }
          else
          {
            memmove(v44, &v44[v42], (v43 - v42));
            v44 = (char *)(*(_QWORD *)(a1 + 160) + (*(_DWORD *)(a1 + 168) - v42));
            v45 = (const void *)BufferAtIndex;
            v43 = v42;
          }
          memcpy(v44, v45, v43);
        }
        __new = v22;
        v46 = *(_QWORD *)(a1 + 848);
        if (v46)
        {
          v47 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 368), "config"), "payload");
          v48 = objc_msgSend(*(id *)(a1 + 368), "bitrate");
          objc_msgSend(*(id *)(a1 + 368), "bandwidth");
          v49 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 368), "config"), "codecSampleRate");
          v50 = *(_BYTE *)(a1 + 952);
          AveragePower = VCAudioBufferList_GetAveragePower(v69);
          v52 = __exp10((float)(AveragePower / 20.0));
          *(_DWORD *)buf = v47;
          v40 = v68;
          *(_DWORD *)&buf[8] = (unsigned __int16)v38;
          v53 = v48;
          v2 = v61;
          *(_DWORD *)&buf[4] = v53;
          *(float *)v75 = v52;
          *(_QWORD *)&v75[4] = v49;
          v75[6] = v50;
          VCAudioIssueDetector_ProcessFrame(v46, (unsigned __int16 *)buf);
        }
        kdebug_trace();
        v54 = *(_QWORD *)(a1 + 864);
        if (v54)
          VCAudioDump_LogCompressedAudio(v54, v70, v38, 0, 0, 0);
        Priority = VCAudioBufferList_GetPriority(v69);
        v56 = Priority;
        if ((_DWORD)v38)
        {
          *((_QWORD *)v60 + 18) = 0;
          *((_OWORD *)v60 + 7) = 0u;
          *((_OWORD *)v60 + 8) = 0u;
          *((_OWORD *)v60 + 5) = 0u;
          *((_OWORD *)v60 + 6) = 0u;
          *((_OWORD *)v60 + 3) = 0u;
          *((_OWORD *)v60 + 4) = 0u;
          *((_OWORD *)v60 + 1) = 0u;
          *((_OWORD *)v60 + 2) = 0u;
          *(_OWORD *)v60 = 0u;
          *(_QWORD *)buf = v70;
          *(_DWORD *)&buf[8] = v38;
          *(_DWORD *)v75 = v71;
          *(_DWORD *)&v75[4] = v40;
          v75[8] = VoiceActivity != 0;
          v75[9] = Priority;
          v75[17] = *(_BYTE *)(a1 + 952);
          *(double *)&v75[20] = HostTime;
          if (objc_msgSend(*(id *)(a1 + 368), "shortREDEnabled"))
          {
            *(_QWORD *)&v75[28] = &v70[(int)v38];
            *(_QWORD *)&v76 = __PAIR64__(v71, v73);
            DWORD2(v76) = v40;
            BYTE12(v76) = VoiceActivity != 0;
            BYTE13(v76) = v56;
            BYTE5(v77) = *(_BYTE *)(a1 + 952);
          }
          v57 = objc_msgSend(*(id *)(a1 + 368), "shortREDEnabled", v60);
          v58 = 1;
          if (v57)
            v59 = 2;
          else
            v59 = 1;
          LOBYTE(v83) = v59;
          if (!VoiceActivity)
            v58 = *(_BYTE *)(a1 + 464) == 0;
          _VCAudioTransmitter_BundleAndSendSamples(a1, (uint64_t)buf, v58, VoiceActivity != 0);
        }
        else
        {
          VCAudioPacketBundler_UpdatePriority(*(_QWORD *)(a1 + 8), Priority);
        }
        VCMemoryPool_Free(*(OSQueueHead **)(a1 + 712), __new);
        if (v64)
          VCAudioBufferList_Shift(v2, v6);
        v18 = v67 + 1;
        if (v67 + 1 == v62)
          goto LABEL_25;
      }
      v35 = 0;
      if (!*(_BYTE *)(a1 + 464))
        goto LABEL_53;
      goto LABEL_51;
    }
  }
}

unint64_t _VCAudioTransmitter_SendAudioPacketImpl(unint64_t result, int *a2, _DWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  VCMediaControlInfoFaceTimeAudio *ControlInfo;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  double v17;
  int v18;
  unsigned __int16 v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  if (a2)
  {
    v5 = result;
    if (*(_BYTE *)(result + 728))
    {
      v6 = result + 608;
      *(_BYTE *)(result + 636) = *((_BYTE *)a2 + 44);
    }
    else
    {
      v6 = 0;
    }
    v7 = *(_QWORD *)(result + 848);
    if (v7)
    {
      VCAudioIssueDetector_ReportRTPTraffic(v7);
      VCAudioIssueDetector_FlushLogEvents(*(_QWORD *)(v5 + 848));
    }
    v8 = *(_QWORD *)(v5 + 320);
    if (v8 && *(_BYTE *)(v5 + 331))
    {
      ControlInfo = VCMediaControlInfoGeneratorCreateControlInfo(v8);
      if (*(_BYTE *)(v5 + 348))
      {
        v19 = 0;
        RTPGetSequenceNumber(*(_QWORD *)(v5 + 288), &v19);
        ++v19;
        v18 = 0;
        RTPGetSendROCWithSequenceNumber(*(_QWORD *)(v5 + 288), &v18, v19);
        VCMediaControlInfoSetInfo(ControlInfo, (const char *)0x13, (uint64_t)&v18, 4);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          v10 = VRTraceErrorLogLevelToCSTR();
          v11 = *MEMORY[0x1E0CF2758];
          v12 = *MEMORY[0x1E0CF2758];
          if (*MEMORY[0x1E0CF2748])
          {
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136316162;
              v21 = v10;
              v22 = 2080;
              v23 = "_VCAudioTransmitter_GenerateControlInfo";
              v24 = 1024;
              v25 = 1669;
              v26 = 2048;
              v27 = v5;
              v28 = 1024;
              v29 = v18;
              _os_log_impl(&dword_1D8A54000, v11, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d transmitter=%p Current ROC=%d", buf, 0x2Cu);
            }
          }
          else if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136316162;
            v21 = v10;
            v22 = 2080;
            v23 = "_VCAudioTransmitter_GenerateControlInfo";
            v24 = 1024;
            v25 = 1669;
            v26 = 2048;
            v27 = v5;
            v28 = 1024;
            v29 = v18;
            _os_log_debug_impl(&dword_1D8A54000, v11, OS_LOG_TYPE_DEBUG, " [%s] %s:%d transmitter=%p Current ROC=%d", buf, 0x2Cu);
          }
        }
        *(_DWORD *)buf = 0;
        VCMediaControlInfoSetInfo(ControlInfo, (const char *)0x14, (uint64_t)buf, 4);
      }
    }
    else
    {
      ControlInfo = 0;
    }
    kdebug_trace();
    v13 = *(_QWORD *)(v5 + 288);
    v14 = a2[8];
    v15 = *a2;
    v16 = a2[1];
    v17 = micro();
    return RTPSendRTP(v13, v15, v14, v16, *((void **)a2 + 6), a2[14], a3, a2 + 2, v17, *((float *)a2 + 7), *((_BYTE *)a2 + 24), a2[9], (uint64_t)ControlInfo, v6, 0, *(_DWORD *)(v5 + 968));
  }
  return result;
}

void VCAudioTransmitter_ReportAWDMetrics(uint64_t a1)
{
  const __CFAllocator *v1;
  CFMutableDictionaryRef Mutable;
  __CFDictionary *v3;
  CFNumberRef v4;
  CFNumberRef v5;
  int valuePtr;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    valuePtr = objc_msgSend(*(id *)(a1 + 368), "bitrate");
    v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (Mutable)
    {
      v3 = Mutable;
      v4 = CFNumberCreate(v1, kCFNumberIntType, &valuePtr);
      if (v4)
      {
        v5 = v4;
        CFDictionaryAddValue(v3, CFSTR("UplinkCodecBitRate"), v4);
        CFRelease(v5);
        reportingAudioStreamLogMetricSample();
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          VCAudioTransmitter_ReportAWDMetrics_cold_2();
      }
      CFRelease(v3);
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCAudioTransmitter_ReportAWDMetrics_cold_1();
    }
  }
}

void VCAudioTransmitter_ProcessConnectionType(uint64_t a1, int a2)
{
  int64_t v4;

  if (a1)
  {
    VCAudioIssueDetector_Stop(*(_QWORD *)(a1 + 848));
    VCAudioTransmitter_ReportAWDMetrics(a1);
    v4 = +[VCPayloadUtils codecTypeForPayload:](VCPayloadUtils, "codecTypeForPayload:", objc_msgSend((id)objc_msgSend(*(id *)(a1 + 368), "config"), "payload"));
    if (a2 == 2)
    {
      *(_BYTE *)(a1 + 730) = +[VCPayloadUtils supportsCodecBandwidthUpdateForCodecType:](VCPayloadUtils, "supportsCodecBandwidthUpdateForCodecType:", v4);
      *(_DWORD *)(a1 + 480) = 2;
    }
    else
    {
      *(_BYTE *)(a1 + 730) = 0;
      *(_DWORD *)(a1 + 480) = a2;
      if (a2 == 3)
      {
        *(_QWORD *)(a1 + 832) = 0;
        *(_OWORD *)(a1 + 800) = 0u;
        *(_OWORD *)(a1 + 816) = 0u;
        *(_OWORD *)(a1 + 768) = 0u;
        *(_OWORD *)(a1 + 784) = 0u;
        *(_OWORD *)(a1 + 736) = 0u;
        *(_OWORD *)(a1 + 752) = 0u;
      }
    }
    VCAudioIssueDetector_UpdateConnectionType(*(_QWORD *)(a1 + 848), a2);
    VCAudioIssueDetector_Start(*(_QWORD *)(a1 + 848));
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioTransmitter_ProcessConnectionType_cold_1();
  }
}

void VCAudioTransmitter_UpdateWrmMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[2];

  v5[1] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v4 = 0;
    v5[0] = 0;
    RTPGetJitter(a1, (_DWORD *)v5 + 1, (_DWORD *)&v4 + 1, &v4);
    RTPGetPacketSent(a1, v5);
    *(_DWORD *)(a2 + 52) = HIDWORD(v5[0]);
    *(_DWORD *)(a2 + 196) = v5[0];
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioTransmitter_UpdateWrmMetrics_cold_1();
  }
}

void _VCAudioTransmitter_FlushBundlers(unint64_t a1)
{
  char v2;
  int v3;
  void *v4;
  int v5;
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  if (objc_msgSend(*(id *)(a1 + 368), "shortREDEnabled", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                       0,
                       0,
                       0,
                       0,
                       *MEMORY[0x1E0C80C00]))
    v2 = 2;
  else
    v2 = 1;
  LOBYTE(v17) = v2;
  v3 = objc_msgSend(*(id *)(a1 + 8), "bundlingScheme");
  v4 = *(void **)(a1 + 8);
  if (v3 != 3)
  {
    if ((VCPacketBundler_ExtractBundledPackets((uint64_t)v4, 0, (uint64_t)&v7) & 1) == 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          _VCAudioTransmitter_FlushBundlers_cold_3();
      }
      return;
    }
    if (objc_msgSend(*(id *)(a1 + 368), "shortREDEnabled")
      && (VCPacketBundler_ExtractBundledPackets(*(_QWORD *)(a1 + 16), 0, (uint64_t)&v9 + 8) & 1) == 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          _VCAudioTransmitter_FlushBundlers_cold_2();
      }
      return;
    }
    _VCAudioTransmitter_SendAudioBundle(a1, (uint64_t *)&v7);
LABEL_14:
    objc_msgSend(*(id *)(a1 + 8), "resetBuffer", v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17);
    objc_msgSend(*(id *)(a1 + 16), "resetBuffer");
    return;
  }
  v5 = objc_msgSend(v4, "bundledPackets");
  if (!v5)
    goto LABEL_14;
  v6 = 0;
  while (1)
  {
    LOBYTE(v17) = 1;
    if ((VCPacketBundler_ExtractBundledPackets(*(_QWORD *)(a1 + 8), v6, (uint64_t)&v7) & 1) == 0)
      break;
    _VCAudioTransmitter_SendAudioBundle(a1, (uint64_t *)&v7);
    v17 = 0;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    ++v6;
    v7 = 0u;
    v8 = 0u;
    if (v5 == v6)
      goto LABEL_14;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      _VCAudioTransmitter_FlushBundlers_cold_1();
  }
}

void _VCAudioTransmitter_SendAudioBundle(unint64_t a1, uint64_t *a2)
{
  void *v4;
  int v5;
  int v6;
  int v7;
  float v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  int *v16;
  int v17;
  uint64_t PrimaryPayloadAndAppendSamples;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  size_t DataLength;
  unsigned int v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  NSObject *v31;
  unsigned __int8 v32;
  char *dataPointerOut;
  CMBlockBufferRef theBuffer;
  CMBlockBufferRef blockBufferOut;
  __int16 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD buf[3];
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    v32 = 0;
    v36 = 0;
    if (objc_msgSend(*(id *)(a1 + 8), "bundledPackets"))
    {
      v4 = (void *)MEMORY[0x1DF086F1C](a1 + 456);
      objc_msgSend(v4, "packMeters:withLength:", &v36, &v32);
      if (v4)
        CFRelease(v4);
    }
    v5 = *((_DWORD *)a2 + 6);
    v6 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 368), "config"), "samplesPerFrame");
    v7 = objc_msgSend(*(id *)(a1 + 8), "packetsPerBundle") * v6 - v5;
    if (v7 < 1)
      v8 = 0.0;
    else
      v8 = *(float *)(a1 + 112) * (float)(int)ceilf((float)v7 / (float)*(unsigned int *)(a1 + 424));
    if (!*(_BYTE *)(a1 + 908))
    {
      v20 = *(_DWORD *)(a1 + 912);
      goto LABEL_45;
    }
    v9 = v32;
    v10 = *(unsigned __int8 *)(a1 + 328);
    v43 = unk_1D9110618;
    v40 = xmmword_1D91105E8;
    v41 = unk_1D91105F8;
    v42 = xmmword_1D9110608;
    v11 = *a2;
    *(_QWORD *)&v43 = *a2;
    v12 = *((_DWORD *)a2 + 3);
    DWORD2(v43) = *((_DWORD *)a2 + 2);
    LODWORD(v40) = v12;
    BYTE12(v42) = *((_BYTE *)a2 + 21);
    if (!*(_BYTE *)(a1 + 336))
    {
LABEL_25:
      if (!v11)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            _VCAudioTransmitter_SendAudioBundle_cold_1();
        }
        v25 = 0;
        goto LABEL_44;
      }
      if ((v9 - 1) <= 0xF)
        __memcpy_chk();
      BYTE8(v41) = v9;
      DWORD1(v40) = *((_DWORD *)a2 + 4);
      v21 = *((unsigned __int8 *)a2 + 28);
      *((float *)&v41 + 3) = v8;
      *(_QWORD *)&v42 = __PAIR64__(v10, v21);
      DWORD2(v42) = *(_DWORD *)(a1 + 172);
      if (!*(_QWORD *)(a1 + 840))
      {
        buf[0] = v40;
        buf[1] = v41;
        buf[2] = v42;
        v45 = v43;
        v25 = _VCAudioTransmitter_SendAudioPacket(a1, (uint64_t)buf);
LABEL_44:
        v20 = *(_DWORD *)(a1 + 912) + v25;
        *(_DWORD *)(a1 + 912) = v20;
LABEL_45:
        *(_DWORD *)(a1 + 88) = *((_DWORD *)a2 + 4);
        *(_BYTE *)(a1 + 92) = 0;
        v26 = (unsigned int *)(a1 + 260);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + v20, v26));
        v28 = (unsigned int *)(a1 + 964);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + v20, v28));
        *(int32x2_t *)(a1 + 268) = vadd_s32(*(int32x2_t *)(a1 + 268), vdup_n_s32(v20));
        if (*(_DWORD *)(a1 + 904) == 13)
          *(_DWORD *)(a1 + 272) += *(_DWORD *)(a1 + 172)
                                 * (7
                                  / objc_msgSend(*(id *)(a1 + 8), "packetsPerBundle"))
                                 + 77;
        return;
      }
      v37 = v40;
      v38 = v41;
      v39 = v42;
      v22 = HIDWORD(v43);
      theBuffer = 0;
      blockBufferOut = 0;
      if (*(uint64_t *)((char *)&v43 + 4) <= 0)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            _VCAudioTransmitter_SendAudioBundle_cold_2();
        }
      }
      else if (CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (void *)v43, DWORD2(v43), (CFAllocatorRef)*MEMORY[0x1E0C9AE20], 0, 0, DWORD2(v43), 0, &blockBufferOut))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            _VCAudioTransmitter_SendAudioBundle_cold_6();
        }
      }
      else if ((VCCryptor_Encrypt(*(_QWORD *)(a1 + 840), blockBufferOut, (CFTypeRef *)&theBuffer) & 0x80000000) != 0)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            _VCAudioTransmitter_SendAudioBundle_cold_3();
        }
      }
      else
      {
        DataLength = CMBlockBufferGetDataLength(theBuffer);
        v24 = DataLength;
        if (CMBlockBufferIsRangeContiguous(theBuffer, 0, DataLength))
        {
          dataPointerOut = 0;
          if (!CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &dataPointerOut))
          {
            buf[0] = v37;
            buf[1] = v38;
            buf[2] = v39;
            *(_QWORD *)&v45 = dataPointerOut;
            *((_QWORD *)&v45 + 1) = __PAIR64__(v22, v24);
            v25 = _VCAudioTransmitter_SendAudioPacket(a1, (uint64_t)buf);
LABEL_35:
            if (theBuffer)
              CFRelease(theBuffer);
            if (blockBufferOut)
              CFRelease(blockBufferOut);
            goto LABEL_44;
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
              _VCAudioTransmitter_SendAudioBundle_cold_5();
          }
        }
        else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            _VCAudioTransmitter_SendAudioBundle_cold_4();
        }
      }
      v25 = 0;
      goto LABEL_35;
    }
    v13 = RTPGetExternalPayload(*(_QWORD *)(a1 + 288), (unsigned __int16)v12);
    *(_QWORD *)&v45 = 0;
    memset(buf, 0, sizeof(buf));
    LOBYTE(buf[0]) = *((_BYTE *)a2 + 160);
    v14 = LOBYTE(buf[0]);
    if (LOBYTE(buf[0]))
    {
      v15 = (char *)&buf[1] + 8;
      v16 = (int *)(a2 + 2);
      do
      {
        *((_QWORD *)v15 - 2) = *((_QWORD *)v16 - 2);
        v17 = *v16;
        *((_DWORD *)v15 - 2) = *(v16 - 2);
        *((_DWORD *)v15 - 1) = v17;
        *v15 = *((_BYTE *)v16 + 5);
        v15 += 24;
        v16 += 10;
        --v14;
      }
      while (v14);
    }
    PrimaryPayloadAndAppendSamples = VCAudioRedBuilder_GetPrimaryPayloadAndAppendSamples(*(_QWORD *)(a1 + 24), buf, v13);
    if (objc_msgSend(*(id *)(a1 + 24), "numPayloads"))
    {
      if (PrimaryPayloadAndAppendSamples)
      {
        v19 = objc_msgSend(*(id *)(a1 + 24), "redPayloadForPrimaryPayload:", PrimaryPayloadAndAppendSamples);
        if (v19)
        {
          v11 = *(_QWORD *)(v19 + 8);
          *(_QWORD *)&v43 = v11;
          DWORD2(v43) = *(_DWORD *)(v19 + 16);
          LODWORD(v40) = *(_DWORD *)v19;
          BYTE12(v42) = *(_BYTE *)(v19 + 31);
LABEL_24:
          VCAudioRedBuilder_UpdatePayloadHistory(*(_QWORD *)(a1 + 24));
          goto LABEL_25;
        }
      }
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          _VCAudioTransmitter_SendAudioBundle_cold_7();
      }
      v11 = 0;
      *(_QWORD *)&v43 = 0;
      DWORD2(v43) = 0;
    }
    if (!PrimaryPayloadAndAppendSamples)
      goto LABEL_25;
    goto LABEL_24;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    v30 = VRTraceErrorLogLevelToCSTR();
    v31 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 136316162;
      *(_QWORD *)((char *)buf + 4) = v30;
      WORD6(buf[0]) = 2080;
      *(_QWORD *)((char *)buf + 14) = "_VCAudioTransmitter_SendAudioBundle";
      WORD3(buf[1]) = 1024;
      DWORD2(buf[1]) = 128;
      WORD6(buf[1]) = 2048;
      *(_QWORD *)((char *)&buf[1] + 14) = a1;
      WORD3(buf[2]) = 2048;
      *((_QWORD *)&buf[2] + 1) = a2;
      _os_log_error_impl(&dword_1D8A54000, v31, OS_LOG_TYPE_ERROR, " [%s] %s:%d NULL access: context=[%p], rtpPacketInfo=[%p]", (uint8_t *)buf, 0x30u);
    }
  }
}

uint64_t _VCAudioTransmitter_SendAudioPacket(unint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v4 = 0;
  *(_BYTE *)(a1 + 328) = *(_DWORD *)(a2 + 36) != 0;
  if (*(_QWORD *)(a1 + 200))
  {
    PacketThread_SendPacket(*(_QWORD *)(a1 + 200), (const void *)a2, *(void **)(a2 + 48), *(unsigned int *)(a2 + 56));
    return (*(_DWORD *)(a2 + 40) + *(_DWORD *)(a2 + 56));
  }
  else
  {
    _VCAudioTransmitter_SendAudioPacketImpl(a1, (int *)a2, &v4);
    return v4;
  }
}

void VCOverlaySourceTextHelper_appendHeaderTextToString(uint64_t a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  const char *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  tm *v15;
  tm *v16;
  const __CFString *v17;
  __CFString *v18;
  const char *CStringPtr;
  timeval v20;
  uint64_t v21;
  char __str;
  char v23[8];
  uint64_t v24;
  _WORD v25[7];
  char v26[8];
  uint64_t v27;
  _WORD v28[7];
  time_t v29[5];

  v29[4] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = *(__CFString **)a1;
    if (v2)
    {
      CFStringAppendFormat(v2, 0, CFSTR("\n\n\n"));
      v3 = 13;
      if (!*(_BYTE *)(a1 + 12))
        v3 = 9;
      v4 = 14;
      if (!*(_BYTE *)(a1 + 12))
        v4 = 10;
      v5 = 15;
      if (!*(_BYTE *)(a1 + 12))
        v5 = 11;
      v6 = *(unsigned __int8 *)(a1 + v5);
      v7 = *(unsigned __int8 *)(a1 + v4);
      v8 = *(unsigned __int8 *)(a1 + v3);
      v9 = ":D";
      if (!*(_BYTE *)(a1 + 12))
        v9 = "";
      v10 = v6 == 0;
      v11 = 82;
      if (v10)
        v11 = 80;
      if (v7)
        v12 = 67;
      else
        v12 = 87;
      if (v8)
        v13 = 67;
      else
        v13 = 87;
      CFStringAppendFormat(*(CFMutableStringRef *)a1, 0, CFSTR("%sActive - %c:%c:%c%s\n"), "  ", v13, v12, v11, v9);
      *(_QWORD *)v26 = 0;
      v27 = 0;
      memset(v28, 0, sizeof(v28));
      v14 = *(_QWORD *)(a1 + 24);
      if (v14)
      {
        v29[0] = (uint64_t)(*(double *)(a1 + 32) - (double)v14);
        v15 = gmtime(v29);
        strftime(v26, 0x1EuLL, "%Hm%Mm%Ss", v15);
      }
      *(_QWORD *)v23 = 0;
      v24 = 0;
      memset(v25, 0, sizeof(v25));
      memset(v29, 0, 30);
      __str = 0;
      *(_QWORD *)&v20.tv_usec = 0;
      v21 = 0;
      v20.tv_sec = 0;
      gettimeofday(&v20, &v21);
      v16 = localtime(&v20.tv_sec);
      strftime((char *)v29, 0x1EuLL, "%T", v16);
      snprintf(&__str, 1uLL, ".%d", v20.tv_usec);
      snprintf(v23, 0x1EuLL, "%s%s", (const char *)v29, &__str);
      CFStringAppendFormat(*(CFMutableStringRef *)a1, 0, CFSTR("%s%s (%s)\n"), "  ", v23, v26);
      v17 = *(const __CFString **)(a1 + 16);
      if (v17)
      {
        v18 = *(__CFString **)a1;
        CStringPtr = CFStringGetCStringPtr(v17, 0x8000100u);
        CFStringAppendFormat(v18, 0, CFSTR("%sID: %.8s...\n"), "  ", CStringPtr);
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCOverlaySourceTextHelper_appendHeaderTextToString_cold_2();
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCOverlaySourceTextHelper_appendHeaderTextToString_cold_1();
  }
}

void VCOverlaySourceTextHelper_appendVideoTextToString(uint64_t a1)
{
  __CFString *v2;

  if (a1)
  {
    v2 = *(__CFString **)a1;
    if (v2)
    {
      switch(*(_BYTE *)(a1 + 8))
      {
        case 1:
          CFStringAppendFormat(v2, 0, CFSTR("%s%dx%d\n%s%.01ffps\n"), "  ", (int)*(double *)(a1 + 208), (int)*(double *)(a1 + 216), "  ", *(float *)(a1 + 240));
          break;
        case 2:
          _VCOverlaySourceTextHelper_appendLowVerbosityVideoTextToString(a1);
          break;
        case 3:
          _VCOverlaySourceTextHelper_appendLowVerbosityVideoTextToString(a1);
          _VCOverlaySourceTextHelper_appendMediumVerbosityVideoTextToString(a1);
          break;
        case 4:
          _VCOverlaySourceTextHelper_appendLowVerbosityVideoTextToString(a1);
          _VCOverlaySourceTextHelper_appendMediumVerbosityVideoTextToString(a1);
          CFStringAppendFormat(*(CFMutableStringRef *)a1, 0, CFSTR("%sJQ Size(ms): %0.1f (%0.1f avg)\n%sTotal Stall: %0.1fms\n%sStalls: %d\n%sErasures: %d\n%sFIRs: %d\n%sOffset: %0.2fms\n%sFEC Overhead: %0.2f"), "  ", *(float *)(a1 + 172), *(float *)(a1 + 180), "  ", *(float *)(a1 + 164), "  ", *(unsigned int *)(a1 + 168), "  ", *(unsigned int *)(a1 + 184), "  ", *(unsigned int *)(a1 + 196), "  ", *(_QWORD *)(a1 + 200), "  ", *(float *)(a1 + 112));
          break;
        default:
          return;
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCOverlaySourceTextHelper_appendVideoTextToString_cold_2();
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCOverlaySourceTextHelper_appendVideoTextToString_cold_1();
  }
}

void VCOverlaySourceTextHelper_appendAudioTextToString(uint64_t a1)
{
  int v2;

  if (a1)
  {
    if (*(_QWORD *)a1)
    {
      v2 = *(unsigned __int8 *)(a1 + 8);
      if ((v2 - 1) >= 3)
      {
        if (v2 == 4)
        {
          _VCOverlaySourceTextHelper_appendLowVerbosityAudioTextToString(a1);
          CFStringAppendFormat(*(CFMutableStringRef *)a1, 0, CFSTR("%sSample Rate: %d\n%sSample Count: %0.2f\n%sRed Level: %d\n%sCodec Payload: %d\n%sMediaStall Count: %d\n%sMediaStall Time: %0.2f"), "  ", *(unsigned int *)(a1 + 44), "  ", *(float *)(a1 + 48), "  ", *(unsigned int *)(a1 + 52), "  ", *(unsigned int *)(a1 + 68), "  ", *(unsigned int *)(a1 + 56), "  ", *(float *)(a1 + 60));
        }
      }
      else
      {
        _VCOverlaySourceTextHelper_appendLowVerbosityAudioTextToString(a1);
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCOverlaySourceTextHelper_appendAudioTextToString_cold_2();
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCOverlaySourceTextHelper_appendAudioTextToString_cold_1();
  }
}

void _VCOverlaySourceTextHelper_appendLowVerbosityVideoTextToString(uint64_t a1)
{
  CFStringAppendFormat(*(CFMutableStringRef *)a1, 0, CFSTR("\n%s🎥Video Rx\n%s(streamID: %d)\n%s%dx%d (VRA: %dx%d)\n%sFPS: %.01f\n"), "  ", "  ", *(unsigned int *)(a1 + 32), "  ", (int)*(double *)(a1 + 208), (int)*(double *)(a1 + 216), (int)*(double *)(a1 + 224), (int)*(double *)(a1 + 232), "  ", *(float *)(a1 + 240));
}

void _VCOverlaySourceTextHelper_appendMediumVerbosityVideoTextToString(uint64_t a1)
{
  __CFString *v2;
  char *v3;

  v2 = *(__CFString **)a1;
  v3 = FourccToCStr(*(_DWORD *)(a1 + 36));
  CFStringAppendFormat(v2, 0, CFSTR("%sCodec: %s\n%sRx Avg FPS: %0.1ffps\n%sBR T/M/FEC kbps: %-4d/%-4d/%-4d\n%sPLR: %d%%\n"), "  ", v3, "  ", *(float *)(a1 + 136), "  ", *(unsigned int *)(a1 + 100), (*(_DWORD *)(a1 + 100) - *(_DWORD *)(a1 + 108)), *(unsigned int *)(a1 + 108), "  ", *(unsigned int *)(a1 + 116));
}

void _VCOverlaySourceTextHelper_appendLowVerbosityAudioTextToString(uint64_t a1)
{
  __CFString *v2;
  char *v3;

  v2 = *(__CFString **)a1;
  v3 = FourccToCStr(*(_DWORD *)(a1 + 28));
  CFStringAppendFormat(v2, 0, CFSTR("\n%s🔊Audio Rx\n%sCodec: %s\n%s(audio streamID: %d)\n%sRx Audio (kbps): %d\n%sRx Total (kbps): %d\n"), "  ", "  ", v3, "  ", *(unsigned int *)(a1 + 24), "  ", *(unsigned int *)(a1 + 36), "  ", *(unsigned int *)(a1 + 64));
}

uint64_t ARPLSendingSetElement::buffer(CARPL **this, unsigned __int8 *a2, unsigned int a3, unsigned int a4, unsigned int a5, char a6, sockaddr *a7, unsigned int a8, int a9, int a10, int a11)
{
  pthread_mutex_t *v19;
  _BOOL4 can_buffer;
  unsigned int v21;
  uint64_t v22;
  _BOOL4 v23;
  CARPL **v24;
  char *v25;
  CARPL *v26;
  int v27;
  int v28;
  uint64_t v29;
  _DWORD *v30;
  char v31;
  int v32;
  uint64_t v33;
  CARPL *v34;
  uint64_t v35;
  NSObject *v36;
  NSObject *v37;
  int v38;
  uint64_t v39;
  NSObject *v40;
  NSObject *v41;
  int v42;
  int v44;
  int v45;
  pthread_mutex_t *v46;
  uint8_t buf[4];
  uint64_t v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  unsigned int v56;
  __int16 v57;
  unsigned int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v19 = (pthread_mutex_t *)(this + 4);
  pthread_mutex_lock((pthread_mutex_t *)(this + 4));
  can_buffer = ARPLAssociationSetElement::can_buffer((ARPLAssociationSetElement *)this, 1);
  if (a4 <= a5 && a2 && a3 - 1 <= 0x7FF && can_buffer && (v21 = *((unsigned __int8 *)this + 699), v21 <= 0x3F))
  {
    v46 = v19;
    *((_BYTE *)this + 699) = v21 + 1;
    v22 = *((unsigned __int8 *)this + 697);
    *((_BYTE *)this + 697) = (v22 + 1) & 0x3F;
    v23 = ARPLAssociationSetElement::can_buffer((ARPLAssociationSetElement *)this, 1);
    v24 = &this[v22];
    v26 = v24[15];
    v25 = (char *)(v24 + 15);
    *((_DWORD *)v26 + 39) = *((_DWORD *)v26 + 39) & 0xFFFFFFFE | !v23;
    *(_DWORD *)(*(_QWORD *)v25 + 156) |= 2u;
    *(_DWORD *)(*(_QWORD *)v25 + 156) = *(_DWORD *)(*(_QWORD *)v25 + 156) & 0xFFFFC0FF | ((v22 & 0x3F) << 8);
    *(_DWORD *)(*(_QWORD *)v25 + 156) = *(_DWORD *)(*(_QWORD *)v25 + 156) & 0xFFFFFF03 | (4
                                                                                            * (*((_BYTE *)this + 698) & 0x3F));
    *(_DWORD *)(*(_QWORD *)v25 + 156) = *(_DWORD *)(*(_QWORD *)v25 + 156) & 0x3FFFFFF | (*((unsigned __int8 *)this
                                                                                             + 697) << 26);
    *(_DWORD *)(*(_QWORD *)v25 + 156) = *(_DWORD *)(*(_QWORD *)v25 + 156) & 0xFFFFC0FF | ((v22 & 0x3F) << 8);
    *(_DWORD *)(*(_QWORD *)v25 + 156) = *(_DWORD *)(*(_QWORD *)v25 + 156) & 0xFFF03FFF | ((a4 & 0x3F) << 14);
    *(_DWORD *)(*(_QWORD *)v25 + 156) = *(_DWORD *)(*(_QWORD *)v25 + 156) & 0xFC0FFFFF | ((a5 & 0x3F) << 20);
    v27 = *((_DWORD *)this + 27);
    *((_DWORD *)this + 27) = v27 + 1;
    *(_DWORD *)(*(_QWORD *)v25 + 148) = v27;
    v28 = CARPL::current_timestamp(this[1]);
    v29 = *(_QWORD *)v25;
    *(_DWORD *)(v29 + 152) = v28;
    *(_DWORD *)(v29 + 160) = a3;
    *((_BYTE *)this + v22 + 632) = a6;
    memcpy((void *)(*(_QWORD *)v25 + 164), a2, a3);
    if (a7 && a8)
      memcpy((void *)(*(_QWORD *)v25 + 16), a7, a8);
    v30 = *(_DWORD **)v25;
    v30[36] = a8;
    v30[1] = a10;
    v30[2] = a9;
    *v30 = a11;
    v31 = v22 - 32;
    if (v22 < 0x20)
      v31 = v22;
    v32 = 1 << v31;
    v33 = 100;
    if (v22 < 0x20)
      v33 = 96;
    *(_DWORD *)((char *)this + v33) |= v32;
    v34 = this[1];
    ++*((_DWORD *)v34 + 108);
    *((_DWORD *)v34 + 109) += a3;
    v19 = v46;
  }
  else
  {
    if (!ARPLAssociationSetElement::can_buffer((ARPLAssociationSetElement *)this, 1)
      && (int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      v35 = VRTraceErrorLogLevelToCSTR();
      v36 = *MEMORY[0x1E0CF2758];
      v37 = *MEMORY[0x1E0CF2758];
      if (*MEMORY[0x1E0CF2748])
      {
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          v38 = *((_DWORD *)this + 27);
          *(_DWORD *)buf = 136316418;
          v48 = v35;
          v49 = 2080;
          v50 = "buffer";
          v51 = 1024;
          v52 = 855;
          v53 = 1024;
          v54 = v38;
          v55 = 1024;
          v56 = a4;
          v57 = 1024;
          v58 = a5;
          _os_log_impl(&dword_1D8A54000, v36, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d buffer: CAN'T BUFFER (%08X:%02d:%02d)...", buf, 0x2Eu);
        }
      }
      else if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
      {
        v45 = *((_DWORD *)this + 27);
        *(_DWORD *)buf = 136316418;
        v48 = v35;
        v49 = 2080;
        v50 = "buffer";
        v51 = 1024;
        v52 = 855;
        v53 = 1024;
        v54 = v45;
        v55 = 1024;
        v56 = a4;
        v57 = 1024;
        v58 = a5;
        _os_log_debug_impl(&dword_1D8A54000, v36, OS_LOG_TYPE_DEBUG, " [%s] %s:%d buffer: CAN'T BUFFER (%08X:%02d:%02d)...", buf, 0x2Eu);
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      v39 = VRTraceErrorLogLevelToCSTR();
      v40 = *MEMORY[0x1E0CF2758];
      v41 = *MEMORY[0x1E0CF2758];
      if (*MEMORY[0x1E0CF2748])
      {
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          v42 = *((_DWORD *)this + 27);
          *(_DWORD *)buf = 136316418;
          v48 = v39;
          v49 = 2080;
          v50 = "buffer";
          v51 = 1024;
          v52 = 857;
          v53 = 1024;
          v54 = v42;
          v55 = 1024;
          v56 = a4;
          v57 = 1024;
          v58 = a5;
          _os_log_impl(&dword_1D8A54000, v40, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d buffer: FAILED TO BUFFER A RELIABLE PACKET SERIALNUMBER (%08X:%02d:%02d)...", buf, 0x2Eu);
        }
      }
      else if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
      {
        v44 = *((_DWORD *)this + 27);
        *(_DWORD *)buf = 136316418;
        v48 = v39;
        v49 = 2080;
        v50 = "buffer";
        v51 = 1024;
        v52 = 857;
        v53 = 1024;
        v54 = v44;
        v55 = 1024;
        v56 = a4;
        v57 = 1024;
        v58 = a5;
        _os_log_debug_impl(&dword_1D8A54000, v40, OS_LOG_TYPE_DEBUG, " [%s] %s:%d buffer: FAILED TO BUFFER A RELIABLE PACKET SERIALNUMBER (%08X:%02d:%02d)...", buf, 0x2Eu);
      }
    }
    v22 = 0xFFFFFFFFLL;
  }
  pthread_mutex_unlock(v19);
  return v22;
}

BOOL ARPLAssociationSetElement::can_buffer(ARPLAssociationSetElement *this, _BOOL8 a2)
{
  pthread_mutex_t *v4;
  int v5;
  int v6;
  int v7;

  v4 = (pthread_mutex_t *)((char *)this + 32);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 32));
  v5 = *((unsigned __int8 *)this + 698);
  v6 = *((unsigned __int8 *)this + 696);
  if (v5 == v6)
  {
    v7 = 0;
    if (!a2)
      goto LABEL_6;
    goto LABEL_5;
  }
  v7 = ((((v6 - v5) & ~((v6 - v5) >> 31)) + v5 - v6 + 63) & 0xFFFFFFC0) + v6 - v5;
  if (a2)
LABEL_5:
    a2 = 63 - v7 - *((unsigned __int8 *)this + 699) >= a2;
LABEL_6:
  pthread_mutex_unlock(v4);
  return a2;
}

uint64_t CARPL::current_timestamp(CARPL *this)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  timeval v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *((unsigned int *)this + 50);
  v6.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v6.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  if (!gettimeofday(&v6, 0))
  {
    v3 = (v6.tv_usec / 1000 + 1000 * (SLODWORD(v6.tv_sec) % 604800)) % 0x240C8400u;
    v2 = *((unsigned int *)this + 50);
    if ((_DWORD)v2 == -1
      || (v2 > v3 ? (v4 = (v2 - v3) >= 0x12064201) : (v4 = 1), v4))
    {
      *((_DWORD *)this + 50) = v3;
      return v3;
    }
  }
  return v2;
}

uint64_t ARPLAssociationSetElement::update_rto(ARPLAssociationSetElement *this, int a2)
{
  pthread_mutex_t *v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;

  v4 = (pthread_mutex_t *)((char *)this + 32);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 32));
  if (a2 >= 1)
  {
    v5 = *((_DWORD *)this + 175);
    *((_DWORD *)this + 175) = v5 + 1;
    v6 = *((_DWORD *)this + 176);
    if (v5 <= 0x3F)
    {
      v7 = v6 + a2;
      *((_DWORD *)this + 176) = v7;
      v8 = v7 / (v5 + 1);
      v9 = a2 - v8;
      if ((int)(a2 - v8) < 0)
        v9 = v8 - a2;
      *((_DWORD *)this + 177) = *((_DWORD *)this + 177) - (*((int *)this + 177) >> 5) + v9;
      goto LABEL_11;
    }
    v10 = a2 - (v6 >> 6);
    if (v10 >= 0)
      v11 = a2 - (v6 >> 6);
    else
      v11 = (v6 >> 6) - a2;
    v12 = *((_DWORD *)this + 177);
    if (v11 < (3 * v12) >> 5)
    {
      v13 = v10 + v6;
      *((_DWORD *)this + 176) = v13;
      v14 = v11 - (v12 >> 5) + v12;
      *((_DWORD *)this + 177) = v14;
      v8 = (v14 >> 5) + (v13 >> 6);
LABEL_11:
      *((_DWORD *)this + 178) = v8;
    }
  }
  return pthread_mutex_unlock(v4);
}

BOOL associationSetElementEqual(_DWORD *a1, _DWORD *a2)
{
  return a1[26] == a2[26];
}

uint64_t associationSetElementHashCode(unsigned int *a1)
{
  return a1[26];
}

const void *retainAssociationSetElement(const __CFAllocator *a1, const void *a2)
{
  return a2;
}

void releaseAssociationSetElement(const __CFAllocator *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  a2[2] = *(_QWORD *)(v2 + 192);
  *(_QWORD *)(v2 + 192) = a2;
}

uint64_t ARPLSessionCreate(int a1, uint64_t *a2)
{
  CARPL *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t Handle;
  uint64_t result;
  int v10;
  uint64_t v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = (CARPL *)operator new();
  CARPL::CARPL(v4);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    v5 = VRTraceErrorLogLevelToCSTR();
    v6 = *MEMORY[0x1E0CF2758];
    v7 = *MEMORY[0x1E0CF2758];
    if (*MEMORY[0x1E0CF2748])
    {
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v10 = 136315906;
        v11 = v5;
        v12 = 2080;
        v13 = "ARPLSessionCreate";
        v14 = 1024;
        v15 = 1025;
        v16 = 1024;
        v17 = a1;
        _os_log_impl(&dword_1D8A54000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ARPLSessionCreate: new session (%08X)...", (uint8_t *)&v10, 0x22u);
      }
    }
    else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      ARPLSessionCreate_cold_1();
    }
  }
  Handle = CreateHandle();
  if (Handle == 0xFFFFFFFFLL)
  {
    CARPL::~CARPL(v4);
    MEMORY[0x1DF087DC8](v4, 0x1020C4028DA6617);
    return 2149842949;
  }
  else
  {
    result = 0;
    *((_DWORD *)v4 + 5) = a1;
    *a2 = Handle;
  }
  return result;
}

void sub_1D8FA5AE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF087DC8](v1, 0x1020C4028DA6617);
  _Unwind_Resume(a1);
}

uint64_t ARPLSend_internal(CARPL *a1, int a2, void *a3, size_t a4, int a5, sockaddr *a6, socklen_t a7, int a8, unsigned int a9, int a10, BOOL a11, BOOL a12)
{
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  const char *v18;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  int v23;
  int v24;
  UInt8 *v25;
  uint64_t v26;
  __int128 v27;
  int64x2_t v28;
  unint64_t v29;
  int v30;
  char v31;
  UInt8 *v32;
  CARPL *v33;
  unint64_t v34;
  int v35;
  unsigned __int8 v36;
  BOOL v37;
  int v38;
  char v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  ARPLAssociationSetElement *v45;
  _BOOL4 can_buffer;
  int v47;
  uint64_t v48;
  CARPL **v49;
  int v50;
  CARPL **v51;
  CARPL *v52;
  _BOOL4 v53;
  uint64_t v54;
  NSObject *v55;
  NSObject *v56;
  unsigned __int8 *v57;
  _BYTE *v58;
  size_t v59;
  uint64_t v60;
  NSObject *v61;
  unsigned int v62;
  unint64_t v63;
  unsigned __int8 *v64;
  char v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  char *v72;
  UInt8 *bytes;
  int v74;
  BOOL v75;
  int v76;
  NSObject *log;
  unsigned int v78;
  unsigned __int8 *v80;
  _BOOL4 v81;
  int v82;
  char v86;
  int v87;
  uint64_t v88;
  CARPL *v89;
  unsigned int v90;
  size_t v91;
  uint8_t v92[4];
  _BYTE v93[20];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  uint8_t buf[4];
  _BYTE v114[2044];
  _OWORD v115[16];
  _OWORD v116[32];
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return -1;
  if (a8 < 4)
  {
    memset(&v114[4], 0, 312);
    *(_DWORD *)buf = a8;
    *(_DWORD *)v114 = a9;
    *(_DWORD *)&v114[144] = a10;
    return VTP_Sendto(a2, a3, a4, a5, (uint64_t)a6, a7, (int *)buf);
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      v15 = VRTraceErrorLogLevelToCSTR();
      v16 = *MEMORY[0x1E0CF2758];
      v17 = *MEMORY[0x1E0CF2758];
      if (*MEMORY[0x1E0CF2748])
      {
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          v18 = "non-reliable";
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)v114 = v15;
          *(_WORD *)&v114[8] = 2080;
          *(_QWORD *)&v114[10] = "ARPLSend_internal";
          if (a11)
            v18 = "reliable";
          *(_WORD *)&v114[18] = 1024;
          *(_DWORD *)&v114[20] = 1054;
          *(_WORD *)&v114[24] = 1024;
          *(_DWORD *)&v114[26] = a8;
          *(_WORD *)&v114[30] = 2048;
          *(_QWORD *)&v114[32] = a4;
          *(_WORD *)&v114[40] = 2080;
          *(_QWORD *)&v114[42] = v18;
          _os_log_impl(&dword_1D8A54000, v16, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ARPL_Sendto(%d): send %ld bytes %s ...", buf, 0x36u);
        }
      }
      else if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        v70 = "non-reliable";
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)v114 = v15;
        *(_WORD *)&v114[8] = 2080;
        *(_QWORD *)&v114[10] = "ARPLSend_internal";
        if (a11)
          v70 = "reliable";
        *(_WORD *)&v114[18] = 1024;
        *(_DWORD *)&v114[20] = 1054;
        *(_WORD *)&v114[24] = 1024;
        *(_DWORD *)&v114[26] = a8;
        *(_WORD *)&v114[30] = 2048;
        *(_QWORD *)&v114[32] = a4;
        *(_WORD *)&v114[40] = 2080;
        *(_QWORD *)&v114[42] = v70;
        _os_log_debug_impl(&dword_1D8A54000, v16, OS_LOG_TYPE_DEBUG, " [%s] %s:%d ARPL_Sendto(%d): send %ld bytes %s ...", buf, 0x36u);
      }
    }
    v82 = a8;
    v89 = a1;
    pthread_mutex_lock((pthread_mutex_t *)((char *)a1 + 216));
    v72 = (char *)a1 + 208;
    v20 = *((_QWORD *)a1 + 26);
    pthread_mutex_unlock((pthread_mutex_t *)((char *)a1 + 216));
    if ((int)a4 >= 1)
    {
      v88 = 0;
      v21 = 0;
      v22 = !a11;
      v23 = v20 != 0;
      v78 = bswap32(a9);
      v24 = a4;
      v25 = (UInt8 *)a3;
      while (1)
      {
        v26 = 0;
        *(_QWORD *)&v27 = 0xAAAAAAAAAAAAAAAALL;
        *((_QWORD *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v116[31] = v27;
        v116[30] = v27;
        v116[29] = v27;
        v116[28] = v27;
        v116[27] = v27;
        v116[26] = v27;
        v116[25] = v27;
        v116[24] = v27;
        v116[23] = v27;
        v116[22] = v27;
        v116[21] = v27;
        v116[20] = v27;
        v116[19] = v27;
        v116[18] = v27;
        v116[17] = v27;
        v116[16] = v27;
        v116[15] = v27;
        v116[14] = v27;
        v116[13] = v27;
        v116[12] = v27;
        v116[11] = v27;
        v116[10] = v27;
        v116[9] = v27;
        v116[8] = v27;
        v116[7] = v27;
        v116[6] = v27;
        v116[5] = v27;
        v116[4] = v27;
        v116[3] = v27;
        v116[2] = v27;
        v116[1] = v27;
        v116[0] = v27;
        v115[15] = v27;
        v115[14] = v27;
        v115[13] = v27;
        v115[12] = v27;
        v115[11] = v27;
        v115[10] = v27;
        v115[9] = v27;
        v115[8] = v27;
        v115[7] = v27;
        v115[6] = v27;
        v115[5] = v27;
        v115[4] = v27;
        v115[3] = v27;
        v115[2] = v27;
        v115[1] = v27;
        v115[0] = v27;
        v28 = vdupq_n_s64((unint64_t)v25);
        do
          v116[v26++] = v28;
        while (v26 != 32);
        v29 = 0;
        v30 = 0;
        v31 = 1;
        v32 = v25;
        v33 = v89;
        do
        {
          v34 = v29;
          *((_QWORD *)v116 + v29) = v32;
          if (v24 >= 1160)
            v35 = 1160;
          else
            v35 = v24;
          *((_DWORD *)v115 + v29) = v35;
          v36 = v31;
          v30 += v35;
          v24 -= v35;
          v32 += v35;
          ++v29;
          if (v34 > 0x3D)
            break;
          ++v31;
        }
        while (v24 > 0);
        if ((_BYTE)v34)
          v37 = v22;
        else
          v37 = 0;
        if (v37)
          v22 = 0;
        bytes = v25;
        if (v22)
        {
          v90 = v21;
          v86 = 2;
          v87 = 0;
          v75 = 1;
          v76 = v23;
          v74 = 1;
        }
        else
        {
          if (v22)
            goto LABEL_86;
          if (v24 >= 1)
          {
            v69 = a12 - 1;
            goto LABEL_88;
          }
          v87 = 1;
          if (!a12 && ((v23 ^ 1) & 1) == 0)
          {
            v74 = 0;
            v38 = 0;
            v36 = 64;
            if (!a12)
              goto LABEL_33;
            goto LABEL_80;
          }
          v90 = v21;
          v86 = 0;
          v74 = 0;
          v75 = a12;
          v76 = v23;
        }
        v44 = 0;
        v81 = v22;
        while (1)
        {
          v45 = (ARPLAssociationSetElement *)CARPL::sendingSetElement(v33, a9);
          if (v87)
          {
            can_buffer = ARPLAssociationSetElement::can_buffer(v45, (v29 - v44));
            v47 = v90;
            if (!can_buffer)
              v47 = -2145124351;
            v90 = v47;
          }
          ++*((_DWORD *)v89 + 106);
          v48 = *((unsigned int *)v115 + v44);
          v91 = (int)v48;
          *((_DWORD *)v89 + 107) += v48;
          memset(v114, 170, sizeof(v114));
          buf[0] = 0;
          buf[1] = v86;
          *(_WORD *)&buf[2] = 0;
          if ((v87 & 1) != 0)
          {
            v49 = (CARPL **)CARPL::sendingSetElement(v89, a9);
            v80 = (unsigned __int8 *)*((_QWORD *)v116 + v44);
            v50 = ARPLSendingSetElement::buffer(v49, v80, v48, v44, v34, v86, a6, a7, v82, a10, a2);
            if (v50 < 0)
            {
              if ((int)VRTraceGetErrorLogLevelForModule() < 8)
              {
                v58 = v114;
              }
              else
              {
                v60 = VRTraceErrorLogLevelToCSTR();
                v61 = *MEMORY[0x1E0CF2758];
                log = *MEMORY[0x1E0CF2758];
                if (*MEMORY[0x1E0CF2748])
                {
                  if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)v92 = 136315906;
                    *(_QWORD *)v93 = v60;
                    *(_WORD *)&v93[8] = 2080;
                    *(_QWORD *)&v93[10] = "ARPLSend_internal";
                    *(_WORD *)&v93[18] = 1024;
                    LODWORD(v94) = 1208;
                    WORD2(v94) = 2048;
                    *(_QWORD *)((char *)&v94 + 6) = v89;
                    _os_log_impl(&dword_1D8A54000, log, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ARPL %p send: FAILED TO BUFFER A RELIABLE PACKET ..", v92, 0x26u);
                  }
                }
                else if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)v92 = 136315906;
                  *(_QWORD *)v93 = v60;
                  *(_WORD *)&v93[8] = 2080;
                  *(_QWORD *)&v93[10] = "ARPLSend_internal";
                  *(_WORD *)&v93[18] = 1024;
                  LODWORD(v94) = 1208;
                  WORD2(v94) = 2048;
                  *(_QWORD *)((char *)&v94 + 6) = v89;
                  _os_log_debug_impl(&dword_1D8A54000, log, OS_LOG_TYPE_DEBUG, " [%s] %s:%d ARPL %p send: FAILED TO BUFFER A RELIABLE PACKET ..", v92, 0x26u);
                }
                v58 = v114;
              }
            }
            else
            {
              *(_DWORD *)v114 = v78;
              v51 = &v49[v50];
              v52 = v51[15];
              v51 += 15;
              *(_DWORD *)&v114[4] = bswap32(*((_DWORD *)v52 + 37));
              v53 = ARPLAssociationSetElement::can_buffer((ARPLAssociationSetElement *)v49, 1);
              *(_DWORD *)&v114[8] = *(_DWORD *)&v114[8] & 0xFFFFFFFC | !v53 | 2;
              *(_DWORD *)&v114[8] = *(_DWORD *)&v114[8] & 0xFFFFFF03 | (4 * ((*((_DWORD *)*v51 + 39) >> 2) & 0x3F));
              *(_DWORD *)&v114[8] = *(_DWORD *)&v114[8] & 0xFFFFC0FF | (((*((_DWORD *)*v51 + 39) >> 8) & 0x3F) << 8);
              *(_DWORD *)&v114[8] = *(_DWORD *)&v114[8] & 0xFFF03FFF | (((*((_DWORD *)*v51 + 39) >> 14) & 0x3F) << 14);
              *(_DWORD *)&v114[8] = *(_DWORD *)&v114[8] & 0xFC0FFFFF | (((*((_DWORD *)*v51 + 39) >> 20) & 0x3F) << 20);
              *(_DWORD *)&v114[8] = *((_DWORD *)*v51 + 39) & 0xFC000000 | *(_DWORD *)&v114[8] & 0x3FFFFFF;
              if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
              {
                v54 = VRTraceErrorLogLevelToCSTR();
                v55 = *MEMORY[0x1E0CF2758];
                v56 = *MEMORY[0x1E0CF2758];
                if (*MEMORY[0x1E0CF2748])
                {
                  if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)v92 = 136316930;
                    *(_QWORD *)v93 = v54;
                    *(_WORD *)&v93[8] = 2080;
                    *(_QWORD *)&v93[10] = "ARPLSend_internal";
                    *(_WORD *)&v93[18] = 1024;
                    LODWORD(v94) = 1206;
                    WORD2(v94) = 2048;
                    *(_QWORD *)((char *)&v94 + 6) = v89;
                    HIWORD(v94) = 1024;
                    LODWORD(v95) = bswap32(*(unsigned int *)&v114[4]);
                    WORD2(v95) = 1024;
                    *(_DWORD *)((char *)&v95 + 6) = (*(_DWORD *)&v114[8] >> 14) & 0x3F;
                    WORD5(v95) = 1024;
                    HIDWORD(v95) = (*(_DWORD *)&v114[8] >> 20) & 0x3F;
                    LOWORD(v96) = 1024;
                    *(_DWORD *)((char *)&v96 + 2) = bswap32(*(unsigned int *)v114);
                    _os_log_impl(&dword_1D8A54000, v55, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ARPL %p send: BUFFERED A NEW RELIABLE PACKET SERIALNUMBER (%08X:%02d:%02d) to (%08X)...", v92, 0x3Eu);
                  }
                }
                else if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)v92 = 136316930;
                  *(_QWORD *)v93 = v54;
                  *(_WORD *)&v93[8] = 2080;
                  *(_QWORD *)&v93[10] = "ARPLSend_internal";
                  *(_WORD *)&v93[18] = 1024;
                  LODWORD(v94) = 1206;
                  WORD2(v94) = 2048;
                  *(_QWORD *)((char *)&v94 + 6) = v89;
                  HIWORD(v94) = 1024;
                  LODWORD(v95) = bswap32(*(unsigned int *)&v114[4]);
                  WORD2(v95) = 1024;
                  *(_DWORD *)((char *)&v95 + 6) = (*(_DWORD *)&v114[8] >> 14) & 0x3F;
                  WORD5(v95) = 1024;
                  HIDWORD(v95) = (*(_DWORD *)&v114[8] >> 20) & 0x3F;
                  LOWORD(v96) = 1024;
                  *(_DWORD *)((char *)&v96 + 2) = bswap32(*(unsigned int *)v114);
                  _os_log_debug_impl(&dword_1D8A54000, v55, OS_LOG_TYPE_DEBUG, " [%s] %s:%d ARPL %p send: BUFFERED A NEW RELIABLE PACKET SERIALNUMBER (%08X:%02d:%02d) to (%08X)...", v92, 0x3Eu);
                }
              }
              v58 = &v114[12];
            }
            v59 = (int)v48;
            v57 = v80;
          }
          else
          {
            v57 = (unsigned __int8 *)*((_QWORD *)v116 + v44);
            v58 = v114;
            v59 = (int)v48;
          }
          v62 = 0;
          v63 = v58 - buf + 3;
          buf[0] = v63 >> 2;
          if (v57 && (int)v48 >= 1)
          {
            LOWORD(v62) = 0;
            v64 = v57;
            do
            {
              v65 = *v64++;
              v62 = CRC16Table[(v65 ^ v62)] ^ ((unsigned __int16)(v62 & 0xFF00) >> 8);
              --v48;
            }
            while (v48);
          }
          *(_WORD *)&buf[2] = bswap32(v62) >> 16;
          v66 = v63 & 0x3FC;
          memcpy(&buf[v66], v57, v59);
          if ((v88 & 0x8000000000000000) == 0)
          {
            v112 = 0;
            v110 = 0u;
            v111 = 0u;
            v108 = 0u;
            v109 = 0u;
            v106 = 0u;
            v107 = 0u;
            v104 = 0u;
            v105 = 0u;
            v102 = 0u;
            v103 = 0u;
            v100 = 0u;
            v101 = 0u;
            v98 = 0u;
            v99 = 0u;
            v96 = 0u;
            v97 = 0u;
            v94 = 0u;
            v95 = 0u;
            *(_OWORD *)&v93[4] = 0u;
            *(_DWORD *)v92 = v82;
            *(_DWORD *)v93 = a9;
            HIDWORD(v101) = a10;
            v67 = VTP_Sendto(a2, buf, (int)v66 + (int)v59, a5, (uint64_t)a6, a7, (int *)v92);
            v68 = v88 + v91;
            if (v67 < 0)
              v68 = -1;
            v88 = v68;
          }
          v33 = v89;
          v21 = v90;
          v22 = v81;
          if (v90)
            break;
          v90 = 0;
          if (++v44 == v36)
          {
            v21 = 0;
            goto LABEL_79;
          }
        }
        v36 = v44;
LABEL_79:
        v38 = v21;
        v23 = v76;
        if (!v75)
        {
LABEL_33:
          v39 = v23 | (v38 == 0);
          v23 |= v38 != 0;
          if ((v39 & 1) == 0)
            v38 = 0;
          if (v36 <= v34 && (v23 & 1) != 0)
          {
            v40 = v22;
            v41 = v21;
            v42 = operator new();
            ARPLDataQueueNode::ARPLDataQueueNode((ARPLDataQueueNode *)v42);
            *(_DWORD *)(v42 + 8) = a9;
            *(_DWORD *)(v42 + 12) = 1;
            *(_QWORD *)(v42 + 16) = CFDataCreate(0, bytes, v30);
            if (a7)
              memcpy((void *)(v42 + 40), a6, a7);
            *(_DWORD *)(v42 + 168) = a7;
            *(_DWORD *)(v42 + 176) = a9;
            *(_DWORD *)(v42 + 24) = a2;
            *(_DWORD *)(v42 + 28) = a10;
            *(_DWORD *)(v42 + 32) = v82;
            ARPLDataQueue::add_tail((uint64_t)v72, (_QWORD *)v42);
            v43 = 0;
            v21 = v41;
            v23 = 1;
            v22 = v40;
          }
          else
          {
            v43 = 0;
          }
          goto LABEL_81;
        }
LABEL_80:
        v43 = v74;
LABEL_81:
        v69 = -1;
        if (!v38 && v24 >= 1)
        {
          v25 = v32;
          if (!v43)
            continue;
        }
        goto LABEL_88;
      }
    }
    v88 = 0;
LABEL_86:
    v69 = -1;
LABEL_88:
    if (v88 == a4)
      return v88;
    else
      return v69;
  }
}

void sub_1D8FA6784(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF087DC8](v1, 0x1060C40147352C3);
  _Unwind_Resume(a1);
}

const void *CARPL::sendingSetElement(CARPL *this, int a2)
{
  pthread_mutex_t *v4;
  _DWORD *v5;
  ARPLAssociationSetElement *v6;
  const void *v8[2];

  v8[1] = *(const void **)MEMORY[0x1E0C80C00];
  v4 = (pthread_mutex_t *)((char *)this + 56);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
  v5 = (_DWORD *)*((_QWORD *)this + 5);
  v5[26] = a2;
  v8[0] = 0;
  if (!CFSetGetValueIfPresent(*((CFSetRef *)this + 4), v5, v8))
  {
    v6 = (ARPLAssociationSetElement *)operator new();
    ARPLAssociationSetElement::ARPLAssociationSetElement(v6, this);
    *(_QWORD *)v6 = &off_1E9E50070;
    v8[0] = v6;
    *((_DWORD *)v6 + 26) = a2;
    CFSetAddValue(*((CFMutableSetRef *)this + 4), v6);
  }
  pthread_mutex_unlock(v4);
  return v8[0];
}

void sub_1D8FA6884(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF087DC8](v1, 0x10A1C4082659322);
  _Unwind_Resume(a1);
}

uint64_t ARPLDataQueue::add_tail(uint64_t a1, _QWORD *a2)
{
  _QWORD **v3;
  pthread_mutex_t *v4;
  _QWORD *i;

  v3 = (_QWORD **)a1;
  v4 = (pthread_mutex_t *)(a1 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
  for (i = *v3; i; i = (_QWORD *)*i)
  {
    v3 = (_QWORD **)i;
    if (i == a2)
      a2 = 0;
  }
  *v3 = a2;
  return pthread_mutex_unlock(v4);
}

uint64_t ARPL_Sendto(uint64_t a1, int a2, void *a3, size_t a4, int a5, sockaddr *a6, socklen_t a7, int *a8)
{
  CARPL *v15;
  uint64_t v16;

  v15 = (CARPL *)CheckInHandleDebug();
  if (!a4 || !a3 || !v15)
    return -1;
  v16 = ARPLSend_internal(v15, a2, a3, a4, a5, a6, a7, *a8, a8[1], a8[37], a8[38] != 0, 0);
  CheckOutHandleDebug();
  return v16;
}

uint64_t ARPLSessionRelease()
{
  uint64_t v0;
  NSObject *v1;
  NSObject *v2;
  CARPL *v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    v0 = VRTraceErrorLogLevelToCSTR();
    v1 = *MEMORY[0x1E0CF2758];
    v2 = *MEMORY[0x1E0CF2758];
    if (*MEMORY[0x1E0CF2748])
    {
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        v16 = 136315650;
        v17 = v0;
        v18 = 2080;
        v19 = "ARPLSessionRelease";
        v20 = 1024;
        v21 = 2034;
        _os_log_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ARPLSessionRelease: enter...", (uint8_t *)&v16, 0x1Cu);
      }
    }
    else if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      ARPLSessionRelease_cold_4();
    }
  }
  v3 = (CARPL *)CheckInHandleDebug();
  if (!v3)
    return 2149842946;
  CheckOutHandleDebug();
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    v4 = VRTraceErrorLogLevelToCSTR();
    v5 = *MEMORY[0x1E0CF2758];
    v6 = *MEMORY[0x1E0CF2758];
    if (*MEMORY[0x1E0CF2748])
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *((_DWORD *)v3 + 5);
        v16 = 136315906;
        v17 = v4;
        v18 = 2080;
        v19 = "ARPLSessionRelease";
        v20 = 1024;
        v21 = 2042;
        v22 = 1024;
        v23 = v7;
        _os_log_impl(&dword_1D8A54000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ARPLSessionRelease: old session (%08X)...", (uint8_t *)&v16, 0x22u);
      }
    }
    else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      ARPLSessionRelease_cold_3();
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    v9 = VRTraceErrorLogLevelToCSTR();
    v10 = *MEMORY[0x1E0CF2758];
    v11 = *MEMORY[0x1E0CF2758];
    if (*MEMORY[0x1E0CF2748])
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v16 = 136315650;
        v17 = v9;
        v18 = 2080;
        v19 = "ARPLSessionRelease";
        v20 = 1024;
        v21 = 2044;
        _os_log_impl(&dword_1D8A54000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ARPLSessionRelease: delete...", (uint8_t *)&v16, 0x1Cu);
      }
    }
    else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      ARPLSessionRelease_cold_2();
    }
  }
  CARPL::~CARPL(v3);
  MEMORY[0x1DF087DC8](v3, 0x1020C4028DA6617);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    v12 = VRTraceErrorLogLevelToCSTR();
    v13 = *MEMORY[0x1E0CF2758];
    v14 = *MEMORY[0x1E0CF2758];
    if (*MEMORY[0x1E0CF2748])
    {
      v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (!v15)
        return result;
      v16 = 136315650;
      v17 = v12;
      v18 = 2080;
      v19 = "ARPLSessionRelease";
      v20 = 1024;
      v21 = 2048;
      _os_log_impl(&dword_1D8A54000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ARPLSessionRelease: done...", (uint8_t *)&v16, 0x1Cu);
    }
    else
    {
      result = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
      if (!(_DWORD)result)
        return result;
      ARPLSessionRelease_cold_1();
    }
  }
  return 0;
}

void sub_1D8FA6DB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF087DC8](v1, 0x1020C4028DA6617);
  _Unwind_Resume(a1);
}

uint64_t ARPL_Monitor_Init(_BYTE *a1)
{
  if (*a1 || a1[16])
    return 3;
  a1[16] = 1;
  return 2;
}

uint64_t checkSendingSet(char *a1, char *a2)
{
  pthread_mutex_t *v4;
  int i;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  size_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  NSObject *v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  NSObject *v25;
  pthread_mutex_t *v27;
  uint8_t v28[64];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint8_t buf[4];
  _QWORD v46[259];

  *(_QWORD *)((char *)&v46[256] + 4) = *MEMORY[0x1E0C80C00];
  v4 = (pthread_mutex_t *)(a2 + 56);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 56));
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 32));
  for (i = 0; i != 64; ++i)
  {
    v6 = ((_BYTE)i + a1[698]) & 0x3F;
    v7 = *(_DWORD **)&a1[8 * v6 + 120];
    if (v7 && v7[40] && (v7[39] & 2) != 0 && v7[38] != -1)
    {
      v8 = CARPL::current_timestamp((CARPL *)a2);
      v9 = v8 - v7[38];
      if (v9 < 0)
      {
        if (v9 < 0xEDF9BE01)
        {
          v9 += 604800000;
        }
        else if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          v27 = v4;
          v10 = VRTraceErrorLogLevelToCSTR();
          v11 = *MEMORY[0x1E0CF2758];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            v46[0] = v10;
            LOWORD(v46[1]) = 2080;
            *(_QWORD *)((char *)&v46[1] + 2) = "checkSendingSet";
            WORD1(v46[2]) = 1024;
            HIDWORD(v46[2]) = 2103;
            _os_log_impl(&dword_1D8A54000, v11, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ERROR: CAN'T RESEND (BAD TIMESTAMP) !!!!!!!!!!!!", buf, 0x1Cu);
          }
          v4 = v27;
        }
      }
      v12 = *((_DWORD *)a1 + 178);
      if (v12 && v9 > 3 * v12)
      {
        memset((char *)v46 + 4, 170, 0x7F8uLL);
        buf[1] = a1[v6 + 632];
        v46[0] = __PAIR64__(bswap32(v7[37]), bswap32(*((_DWORD *)a1 + 26)));
        v13 = v7[40];
        v14 = v7[39] & 0x3FFFF03 | (4 * (a1[698] & 0x3F)) | (a1[697] << 26);
        buf[0] = 4;
        *(_WORD *)&buf[2] = 0;
        LODWORD(v46[1]) = v14;
        v7[38] = v8;
        ++v7[553];
        v15 = (char *)(v7 + 41);
        memcpy((char *)&v46[1] + 4, v7 + 41, v13);
        v16 = v7[40];
        if ((int)v16 < 1)
        {
          v17 = 0;
        }
        else
        {
          LOWORD(v17) = 0;
          do
          {
            v18 = *v15++;
            v17 = CRC16Table[(v18 ^ v17)] ^ ((unsigned __int16)(v17 & 0xFF00) >> 8);
            --v16;
          }
          while (v16);
        }
        *(_WORD *)&buf[2] = bswap32(v17) >> 16;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          v19 = VRTraceErrorLogLevelToCSTR();
          v20 = *MEMORY[0x1E0CF2758];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
          {
            v21 = v7[37];
            v22 = *((_DWORD *)a1 + 26);
            *(_DWORD *)v28 = 136316674;
            *(_QWORD *)&v28[4] = v19;
            *(_WORD *)&v28[12] = 2080;
            *(_QWORD *)&v28[14] = "checkSendingSet";
            *(_WORD *)&v28[22] = 1024;
            *(_DWORD *)&v28[24] = 2135;
            *(_WORD *)&v28[28] = 2048;
            *(_QWORD *)&v28[30] = a2;
            *(_WORD *)&v28[38] = 1024;
            *(_DWORD *)&v28[40] = v21;
            *(_WORD *)&v28[44] = 1024;
            *(_DWORD *)&v28[46] = v22;
            *(_WORD *)&v28[50] = 1024;
            *(_DWORD *)&v28[52] = v6;
            _os_log_impl(&dword_1D8A54000, v20, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %p check: RESEND serial number %08X to destination %08X INDEX %d", v28, 0x38u);
          }
        }
        if (v7[36] && (int)v7[2] >= 4)
        {
          v43 = 0u;
          v44 = 0u;
          v41 = 0u;
          v42 = 0u;
          v39 = 0u;
          v40 = 0u;
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          v33 = 0u;
          v34 = 0u;
          v31 = 0u;
          v32 = 0u;
          v29 = 0u;
          v30 = 0u;
          memset(v28, 0, sizeof(v28));
          *(_DWORD *)&v28[4] = *((_DWORD *)a1 + 26);
          v23 = v7[1];
          *(_DWORD *)v28 = v7[2];
          DWORD1(v34) = v23;
          VTP_Sendto(*v7, buf, v7[40] + 16, 0, (uint64_t)(v7 + 4), v7[36], (int *)v28);
        }
        else if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          v24 = VRTraceErrorLogLevelToCSTR();
          v25 = *MEMORY[0x1E0CF2758];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v28 = 136315650;
            *(_QWORD *)&v28[4] = v24;
            *(_WORD *)&v28[12] = 2080;
            *(_QWORD *)&v28[14] = "checkSendingSet";
            *(_WORD *)&v28[22] = 1024;
            *(_DWORD *)&v28[24] = 2147;
            _os_log_impl(&dword_1D8A54000, v25, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ERROR: CAN'T RESEND (BAD ADDRESS) !!!!!!!!!!!!", v28, 0x1Cu);
          }
        }
      }
    }
  }
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 32));
  return pthread_mutex_unlock(v4);
}

uint64_t ARPL_Monitor_Wait(CARPL *a1)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  const __CFData *v4;
  CFIndex Length;
  size_t v6;
  int v7;
  UInt8 *BytePtr;
  uint64_t v9;
  const void *v10;
  timeval v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = (pthread_mutex_t *)((char *)a1 + 216);
  pthread_mutex_lock((pthread_mutex_t *)((char *)a1 + 216));
  pthread_mutex_lock(v2);
  v3 = *((_QWORD *)a1 + 26);
  pthread_mutex_unlock(v2);
  while (v3)
  {
    v4 = *(const __CFData **)(v3 + 16);
    if (v4)
    {
      Length = CFDataGetLength(v4);
      if (Length)
      {
        if (*(_DWORD *)(v3 + 12))
        {
          v6 = Length;
          v7 = *(_DWORD *)(v3 + 24);
          BytePtr = (UInt8 *)CFDataGetBytePtr(*(CFDataRef *)(v3 + 16));
          if (ARPLSend_internal(a1, v7, BytePtr, v6, 0, (sockaddr *)(v3 + 40), *(_DWORD *)(v3 + 168), *(_DWORD *)(v3 + 32), *(_DWORD *)(v3 + 176), *(_DWORD *)(v3 + 28), 1, 1) < 0)break;
        }
      }
    }
    pthread_mutex_lock(v2);
    v9 = *((_QWORD *)a1 + 26);
    *((_QWORD *)a1 + 26) = *(_QWORD *)v9;
    pthread_mutex_unlock(v2);
    v10 = *(const void **)(v9 + 16);
    if (v10)
      CFRelease(v10);
    *(_QWORD *)(v9 + 16) = 0;
    *(_DWORD *)(v9 + 12) = 0;
    MEMORY[0x1DF087DC8](v9, 0x1060C40147352C3);
    pthread_mutex_lock(v2);
    v3 = *((_QWORD *)a1 + 26);
    pthread_mutex_unlock(v2);
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)a1 + 56));
  CFSetApplyFunction(*((CFSetRef *)a1 + 4), (CFSetApplierFunction)checkSendingSet, a1);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)a1 + 56));
  pthread_mutex_unlock(v2);
  v12 = (timeval)xmmword_1D9110630;
  v12.tv_usec = 50000;
  select(0, 0, 0, 0, &v12);
  return 0;
}

void sub_1D8FA7434(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t ARPL_Monitor_Thread(CARPL *a1)
{
  uint64_t v2;
  uint64_t (*v3)(CARPL *);

  pthread_setname_np("com.apple.AVConference.SIP.arplMonitorProc");
  if (!*(_BYTE *)a1)
  {
    LODWORD(v2) = 0;
    v3 = (uint64_t (*)(CARPL *))ARPL_Monitor_Init;
    do
    {
      v2 = ARPL_Monitor_State_Transition_Table[4 * (int)v2 + (int)v3(a1)];
      v3 = ARPL_Monitor_Functions[v2];
    }
    while (!*(_BYTE *)a1);
  }
  *((_QWORD *)a1 + 1) = 0;
  return 0;
}

void CARPL::CARPL(CARPL *this)
{
  ARPLAssociationSetElement *v2;
  ARPLAssociationSetElement *v3;
  __int128 v4;
  int priority_max;
  sched_param v6;
  pthread_attr_t v7;
  pthread_mutexattr_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  ARPLDataQueue::ARPLDataQueue((CARPL *)((char *)this + 208));
  ARPLDataQueue::ARPLDataQueue((CARPL *)((char *)this + 280));
  ARPLDataQueue::ARPLDataQueue((CARPL *)((char *)this + 352));
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 3) = CFSetCreateMutable(0, 0, &associationSetCallBacks);
  *((_QWORD *)this + 4) = CFSetCreateMutable(0, 0, &associationSetCallBacks);
  v2 = (ARPLAssociationSetElement *)operator new();
  ARPLAssociationSetElement::ARPLAssociationSetElement(v2, this);
  *(_QWORD *)v2 = &off_1E9E50050;
  *((_QWORD *)this + 6) = v2;
  v3 = (ARPLAssociationSetElement *)operator new();
  ARPLAssociationSetElement::ARPLAssociationSetElement(v3, this);
  *(_QWORD *)v3 = &off_1E9E50070;
  *((_QWORD *)this + 5) = v3;
  v8.__sig = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)v8.__opaque = 0xAAAAAAAAAAAAAAAALL;
  if (!pthread_mutexattr_init(&v8))
  {
    pthread_mutexattr_settype(&v8, 2);
    pthread_mutex_init((pthread_mutex_t *)((char *)this + 56), &v8);
    pthread_mutex_init((pthread_mutex_t *)((char *)this + 120), &v8);
    pthread_mutexattr_destroy(&v8);
  }
  *((_DWORD *)this + 50) = -1;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 452) = 0u;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v7.__opaque[24] = v4;
  *(_OWORD *)&v7.__opaque[40] = v4;
  *(_OWORD *)&v7.__sig = v4;
  *(_OWORD *)&v7.__opaque[8] = v4;
  v6 = (sched_param)0xAAAAAAAAAAAAAAAALL;
  *((_BYTE *)this + 16) = 0;
  if (!pthread_attr_init(&v7) && !pthread_attr_getschedparam(&v7, &v6) && !pthread_attr_setschedpolicy(&v7, 2))
  {
    priority_max = sched_get_priority_max(2);
    if ((priority_max & 0x80000000) == 0 && (sched_get_priority_min(2) & 0x80000000) == 0)
    {
      v6.sched_priority = priority_max;
      if (!pthread_attr_setschedparam(&v7, &v6))
        pthread_create((pthread_t *)this + 1, &v7, (void *(__cdecl *)(void *))ARPL_Monitor_Thread, this);
      pthread_attr_destroy(&v7);
    }
  }
}

void sub_1D8FA76EC(_Unwind_Exception *a1)
{
  ARPLDataQueue *v1;
  ARPLDataQueue *v2;
  ARPLDataQueue *v3;
  uint64_t v4;

  MEMORY[0x1DF087DC8](v4, 0x10A1C4082659322);
  ARPLDataQueue::~ARPLDataQueue(v3);
  ARPLDataQueue::~ARPLDataQueue(v2);
  ARPLDataQueue::~ARPLDataQueue(v1);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void ARPLDataQueue::ARPLDataQueue(ARPLDataQueue *this)
{
  pthread_mutexattr_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  v2.__sig = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)v2.__opaque = 0xAAAAAAAAAAAAAAAALL;
  if (!pthread_mutexattr_init(&v2))
  {
    pthread_mutexattr_settype(&v2, 2);
    pthread_mutex_init((pthread_mutex_t *)((char *)this + 8), &v2);
    pthread_mutexattr_destroy(&v2);
  }
}

void ARPLAssociationSetElement::ARPLAssociationSetElement(ARPLAssociationSetElement *this, CARPL *a2)
{
  int v3;
  uint64_t i;
  uint64_t v5;
  char *v6;
  pthread_mutexattr_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 12) = 0;
  *(_QWORD *)this = &off_1E9E50090;
  *((_QWORD *)this + 1) = a2;
  *((_DWORD *)this + 27) = 0;
  *(_OWORD *)((char *)this + 696) = 0u;
  *((_DWORD *)this + 178) = 0;
  ARPLAssociationSetElement::update_rto(this, 250);
  *((_DWORD *)this + 28) = -1;
  v7.__sig = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)v7.__opaque = 0xAAAAAAAAAAAAAAAALL;
  if (!pthread_mutexattr_init(&v7))
  {
    pthread_mutexattr_settype(&v7, 2);
    pthread_mutex_init((pthread_mutex_t *)((char *)this + 32), &v7);
    pthread_mutexattr_destroy(&v7);
  }
  v3 = 0;
  for (i = 0; i != 64; ++i)
  {
    v5 = operator new();
    *(_QWORD *)v5 = 0xFFFFFFFFLL;
    *(_DWORD *)(v5 + 8) = 0;
    *(_DWORD *)(v5 + 2212) = 0;
    *(_QWORD *)(v5 + 144) = 0;
    *(_DWORD *)(v5 + 156) = v3;
    *(_DWORD *)(v5 + 160) = 0;
    *((_QWORD *)this + i + 15) = v5;
    v6 = (char *)this + i;
    *(_DWORD *)(v5 + 152) = -1;
    v3 += 256;
    v6[632] = 8;
  }
}

void ARPLReceiveSetElement::~ARPLReceiveSetElement(ARPLReceiveSetElement *this)
{
  ARPLAssociationSetElement::~ARPLAssociationSetElement(this);
  JUMPOUT(0x1DF087DC8);
}

void sub_1D8FA7974(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF087DC8](v1, 0x10A1C4082659322);
  _Unwind_Resume(a1);
}

void ARPLAssociationSetElement::~ARPLAssociationSetElement(ARPLAssociationSetElement *this)
{
  ARPLAssociationSetElement::~ARPLAssociationSetElement(this);
  JUMPOUT(0x1DF087DC8);
}

{
  uint64_t v2;
  uint64_t v3;

  v2 = 0;
  *(_QWORD *)this = &off_1E9E50090;
  do
  {
    *((_BYTE *)this + v2 + 632) = 8;
    v3 = *((_QWORD *)this + v2 + 15);
    if (v3)
      MEMORY[0x1DF087DC8](v3, 0x1000C404C6E3E2BLL);
    ++v2;
  }
  while (v2 != 64);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 32));
}

void sub_1D8FA79D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF087DC8](v1, 0x10A1C4082659322);
  _Unwind_Resume(a1);
}

void ARPLSendingSetElement::~ARPLSendingSetElement(ARPLSendingSetElement *this)
{
  ARPLAssociationSetElement::~ARPLAssociationSetElement(this);
  JUMPOUT(0x1DF087DC8);
}

void sub_1D8FA7AA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF087DC8](v1, 0x10A1C4082659322);
  _Unwind_Resume(a1);
}

void ARPLDataQueue::~ARPLDataQueue(ARPLDataQueue *this)
{
  uint64_t i;
  const void *v3;

  for (i = *(_QWORD *)this; *(_QWORD *)this; i = *(_QWORD *)this)
  {
    *(_QWORD *)this = *(_QWORD *)i;
    v3 = *(const void **)(i + 16);
    if (v3)
      CFRelease(v3);
    *(_QWORD *)(i + 16) = 0;
    *(_DWORD *)(i + 12) = 0;
    MEMORY[0x1DF087DC8](i, 0x1060C40147352C3);
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 8));
}

void sub_1D8FA7B34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF087DC8](v1, 0x1060C40147352C3);
  _Unwind_Resume(a1);
}

void CARPL::~CARPL(CARPL *this)
{
  _QWORD **v2;
  _QWORD *v3;
  _QWORD *v4;
  const void *v5;
  _QWORD **v6;
  _QWORD *v7;
  _QWORD *v8;
  const void *v9;
  _QWORD **v10;
  _QWORD *v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  timeval v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)this = 1;
  if (*((_BYTE *)this + 16) && *((_QWORD *)this + 1))
  {
    do
    {
      v20 = (timeval)xmmword_1D9110630;
      v20.tv_usec = 50000;
      select(0, 0, 0, 0, &v20);
    }
    while (*((_QWORD *)this + 1));
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 216));
  v2 = (_QWORD **)((char *)this + 208);
  while (1)
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 216));
    v3 = *v2;
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 216));
    if (!v3)
      break;
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 216));
    v4 = *v2;
    *v2 = (_QWORD *)**v2;
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 216));
    v5 = (const void *)v4[2];
    if (v5)
      CFRelease(v5);
    v4[2] = 0;
    *((_DWORD *)v4 + 3) = 0;
    MEMORY[0x1DF087DC8](v4, 0x1060C40147352C3);
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 216));
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 288));
  v6 = (_QWORD **)((char *)this + 280);
  while (1)
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 288));
    v7 = *v6;
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 288));
    if (!v7)
      break;
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 288));
    v8 = *v6;
    *v6 = (_QWORD *)**v6;
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 288));
    v9 = (const void *)v8[2];
    if (v9)
      CFRelease(v9);
    v8[2] = 0;
    *((_DWORD *)v8 + 3) = 0;
    MEMORY[0x1DF087DC8](v8, 0x1060C40147352C3);
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 288));
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 360));
  v10 = (_QWORD **)((char *)this + 352);
  while (1)
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 360));
    v11 = *v10;
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 360));
    if (!v11)
      break;
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 360));
    v12 = *v10;
    *v10 = (_QWORD *)**v10;
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 360));
    v13 = (const void *)v12[2];
    if (v13)
      CFRelease(v13);
    v12[2] = 0;
    *((_DWORD *)v12 + 3) = 0;
    MEMORY[0x1DF087DC8](v12, 0x1060C40147352C3);
  }
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 360));
  v14 = (const void *)*((_QWORD *)this + 4);
  if (v14)
  {
    CFRelease(v14);
    *((_QWORD *)this + 4) = 0;
  }
  v15 = (const void *)*((_QWORD *)this + 3);
  if (v15)
  {
    CFRelease(v15);
    *((_QWORD *)this + 3) = 0;
  }
  while (1)
  {
    v16 = *((_QWORD *)this + 23);
    if (!v16)
      break;
    *((_QWORD *)this + 23) = *(_QWORD *)(v16 + 16);
    CFSetRemoveValue(*(CFMutableSetRef *)(v16 + 24), (const void *)v16);
  }
  while (1)
  {
    v17 = (_QWORD *)*((_QWORD *)this + 24);
    if (!v17)
      break;
    *((_QWORD *)this + 24) = v17[2];
    (*(void (**)(_QWORD *))(*v17 + 8))(v17);
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 56));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 120));
  v18 = *((_QWORD *)this + 5);
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *((_QWORD *)this + 6);
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  *((_BYTE *)this + 16) = 0;
  ARPLDataQueue::~ARPLDataQueue((CARPL *)((char *)this + 352));
  ARPLDataQueue::~ARPLDataQueue((CARPL *)((char *)this + 280));
  ARPLDataQueue::~ARPLDataQueue((CARPL *)((char *)this + 208));
}

void sub_1D8FA7E30(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void ARPLDataQueueNode::ARPLDataQueueNode(ARPLDataQueueNode *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 3) = 0;
  *((_QWORD *)this + 3) = 0xFFFFFFFFLL;
  *((_DWORD *)this + 8) = 0;
  *((_DWORD *)this + 42) = 0;
  *((_DWORD *)this + 44) = 0;
  *((double *)this + 28) = micro();
  MakeIPPORT();
}

uint64_t VCCallInfoBlobReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  void *String;
  id v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_42;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_44;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_44:
          v36 = 16;
          goto LABEL_49;
        case 2u:
          v24 = 0;
          v25 = 0;
          v19 = 0;
          break;
        case 3u:
          String = (void *)PBReaderReadString();

          v30 = String;
          v31 = 4;
          goto LABEL_40;
        case 4u:
          v32 = (void *)PBReaderReadString();

          v30 = v32;
          v31 = 5;
          goto LABEL_40;
        case 5u:
          v33 = (void *)PBReaderReadString();

          v30 = v33;
          v31 = 6;
          goto LABEL_40;
        case 6u:
          v34 = (void *)PBReaderReadString();

          v30 = v34;
          v31 = 3;
          goto LABEL_40;
        case 7u:
          v35 = (void *)PBReaderReadString();

          v30 = v35;
          v31 = 1;
LABEL_40:
          a1[v31] = v30;
          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v26 = *v3;
        v27 = *(_QWORD *)(a2 + v26);
        if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
          break;
        v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
        *(_QWORD *)(a2 + v26) = v27 + 1;
        v19 |= (unint64_t)(v28 & 0x7F) << v24;
        if ((v28 & 0x80) == 0)
          goto LABEL_46;
        v24 += 7;
        v14 = v25++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_48;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_48:
      v36 = 20;
LABEL_49:
      *(_DWORD *)((char *)a1 + v36) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t OUTLINED_FUNCTION_11_17@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = a2;
  return objc_msgSend(a1, "delegate");
}

size_t VCAudioPayloadConfig_GetDescription(size_t result, char *a2, size_t *a3)
{
  size_t v4;

  if (a3)
  {
    v4 = *a3;
    *a3 = 0;
    if (result)
    {
      if (a2)
      {
        strlcpy(a2, (const char *)objc_msgSend(*(id *)(result + 88), "UTF8String"), v4);
        result = strlen(a2);
        *a3 = result;
      }
    }
  }
  return result;
}

uint64_t JLagProcessor_Initialize(uint64_t a1, _OWORD *a2)
{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;

  if (a1)
    v2 = a2 == 0;
  else
    v2 = 1;
  v3 = !v2;
  if (v2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      v4 = VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        JLagProcessor_Initialize_cold_1(v4);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 416) = *a2;
  }
  return v3;
}

void JLagProcessor_NewStream(uint64_t a1, __int16 *a2, int a3, int a4)
{
  __int16 v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  __int16 *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (a1 && a2 && a3 && a4)
  {
    v8 = *a2;
    *(_WORD *)(a1 + 396) = *a2;
    *(_WORD *)(a1 + 364) = v8;
    v9 = *((_DWORD *)a2 + 1);
    *(_DWORD *)(a1 + 392) = v9;
    *(_DWORD *)(a1 + 360) = v9;
    v10 = *((_QWORD *)a2 + 2);
    *(_QWORD *)(a1 + 384) = v10;
    *(_QWORD *)(a1 + 352) = v10;
    *(_QWORD *)(a1 + 400) = 0x40DFFFC000000000;
    *(_QWORD *)(a1 + 368) = 0x40DFFFC000000000;
    *(_QWORD *)a1 = 0;
    *(_OWORD *)(a1 + 16) = xmmword_1D91108F0;
    *(_DWORD *)(a1 + 340) = a4;
    *(_DWORD *)(a1 + 336) = a3;
    *(_OWORD *)(a1 + 432) = xmmword_1D9110900;
    *(_QWORD *)(a1 + 448) = v9;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    v11 = VRTraceErrorLogLevelToCSTR();
    v12 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
    {
      v13 = 136316674;
      v14 = v11;
      v15 = 2080;
      v16 = "JLagProcessor_NewStream";
      v17 = 1024;
      v18 = 43;
      v19 = 2048;
      v20 = a1;
      v21 = 2048;
      v22 = a2;
      v23 = 1024;
      v24 = a3;
      v25 = 1024;
      v26 = a4;
      _os_log_error_impl(&dword_1D8A54000, v12, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid parameter passed to lag processor new stream. LagProcessor=%p, lagPacket=%p, TSRate=%u, samplesPerFrame=%u", (uint8_t *)&v13, 0x3Cu);
    }
  }
}

uint64_t JLagProcessor_ResetLagReference(uint64_t result)
{
  if (result)
  {
    if (!*(_BYTE *)(result + 344))
      *(_BYTE *)(result + 344) = 1;
  }
  return result;
}

float JLagProcessor_GetOWRD(uint64_t a1)
{
  if (a1)
    return *(float *)(a1 + 48);
  else
    return NAN;
}

uint64_t JLagProcessor_GetStatistics(uint64_t a1)
{
  if (a1)
    return a1 + 432;
  else
    return 0;
}

double JLagProcessor_Process(uint64_t a1, unsigned __int16 *a2, int a3, int a4, unsigned int a5)
{
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  double v15;
  unsigned int v17;
  double v18;
  uint64_t v19;
  NSObject *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  NSObject *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  int v42;
  double v43;
  double v44;
  double v45;
  double v46;
  unsigned int v47;
  uint64_t v48;
  NSObject *v49;
  const char *v50;
  NSObject *v51;
  uint32_t v52;
  double v53;
  unint64_t v54;
  uint64_t v55;
  NSObject *v56;
  unsigned __int16 *v57;
  unint64_t v58;
  unint64_t v59;
  double v60;
  uint64_t v61;
  NSObject *v62;
  int v63;
  int v64;
  double v65;
  int v66;
  uint64_t v67;
  int v68;
  double v69;
  double v70;
  double v71;
  uint64_t v72;
  double v73;
  double v74;
  uint8_t buf[4];
  uint64_t v76;
  __int16 v77;
  const char *v78;
  __int16 v79;
  int v80;
  __int16 v81;
  _BYTE v82[10];
  unsigned __int16 *v83;
  _BYTE v84[12];
  __int16 v85;
  unsigned int v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  if (a5 > 4 || !a1 || !a2 || (a4 | a3) < 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      v13 = VRTraceErrorLogLevelToCSTR();
      v14 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316930;
        v76 = v13;
        v77 = 2080;
        v78 = "JLagProcessor_Process";
        v79 = 1024;
        v80 = 370;
        v81 = 2048;
        *(_QWORD *)v82 = a1;
        *(_WORD *)&v82[8] = 2048;
        v83 = a2;
        *(_WORD *)v84 = 1024;
        *(_DWORD *)&v84[2] = a3;
        *(_WORD *)&v84[6] = 1024;
        *(_DWORD *)&v84[8] = a4;
        v85 = 1024;
        v86 = a5;
        _os_log_error_impl(&dword_1D8A54000, v14, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid parameter passed to lag processor. LagProcessor=%p lagPacket=%p samplesPerFrame=%d videoQSize=%d, state=%d", buf, 0x42u);
      }
    }
    return NAN;
  }
  if (!*((_BYTE *)a2 + 36))
  {
    if ((unsigned __int16)(*a2 - *(_WORD *)(a1 + 364)) >= 0x7FFFu)
    {
      v17 = *(_DWORD *)(a1 + 8);
      if (v17 <= 3 && *(_DWORD *)(a1 + 12) <= 0xBB7u)
      {
        *(_DWORD *)(a1 + 8) = v17 + 1;
        v18 = *(double *)(a1 + 368);
        if (v18 == 32767.0)
          v15 = 0.0350000004;
        else
          v15 = *(double *)(a1 + 368);
LABEL_45:
        *(double *)(a1 + 432) = v15;
        *(double *)(a1 + 440) = v18;
        *(_DWORD *)(a1 + 452) = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 448) = *(_DWORD *)(a1 + 360);
        if (a5 != 4)
        {
          if (a5 == 2)
          {
            JLagProcessor_UpdateAverages(a1, (uint64_t)a2, a3, 1, v15);
            JLagProcessor_RecordOWRD(a1, v15);
          }
          else if (a5 == 1 && v15 <= 0.0250000004)
          {
            *(double *)(a1 + 16) = v15;
            *(double *)(a1 + 24) = fabs(v15) + 0.005;
            *(double *)(a1 + 32) = v15;
            *(double *)(a1 + 40) = v15;
          }
          goto LABEL_92;
        }
        v42 = a3;
        if (a3 <= 0)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
              JLagProcessor_Process_cold_2();
          }
          v42 = *((_DWORD *)a2 + 6);
          if (v42 <= 0)
            v42 = *(_DWORD *)(a1 + 340);
        }
        v43 = *(double *)(a1 + 24);
        HIDWORD(v44) = 1066695393;
        LODWORD(v18) = *(_DWORD *)(a1 + 336);
        v45 = (double)*(unint64_t *)&v18;
        v46 = (double)a4 / v45;
        if (*(_DWORD *)(a1 + 52))
        {
          if (v15 - *(double *)(a1 + 16) <= *(double *)(a1 + 72))
            goto LABEL_62;
          v47 = *(_DWORD *)(a1 + 332) + 1;
          *(_DWORD *)(a1 + 332) = v47;
          if (v47 < 5)
            goto LABEL_73;
          if (*(double *)(a1 + 80) + 0.01 < v15)
          {
LABEL_62:
            if ((int)VRTraceGetErrorLogLevelForModule() < 7)
              goto LABEL_80;
            v48 = VRTraceErrorLogLevelToCSTR();
            v49 = *MEMORY[0x1E0CF2758];
            if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
              goto LABEL_80;
            *(_DWORD *)buf = 136315650;
            v76 = v48;
            v77 = 2080;
            v78 = "JLagProcessor_DetectSpike";
            v79 = 1024;
            v80 = 303;
            v50 = " [%s] %s:%d Leaving OWRD SPIKE due to recovery";
            goto LABEL_65;
          }
          if (v47 > 0x1D)
          {
            v66 = 0;
            v67 = *(int *)(a1 + 328);
            *(double *)(a1 + 8 * v67 + 88) = v15;
            v68 = ((int)v67 + 1) % 30;
            v69 = v43 * 1.25 + 0.0199999996 + v46;
            *(_DWORD *)(a1 + 328) = v68;
            v70 = 0.0;
            v71 = 0.0;
            do
            {
              v71 = v71 + *(double *)(a1 + 88 + 8 * ((v68 + v66) % 30));
              v70 = v70
                  + *(double *)(a1
                              + 88
                              + 8
                              * (((char)(v68
                                       + 15
                                       - 30
                                       * (((char)((unsigned __int16)(137 * (char)(v68 + 15)) >> 8) >> 4)
                                        + ((((unsigned __int16)(137 * (char)(v68 + 15)) >> 8) & 0x80) >> 7)))
                                + v66++)
                               % 30));
            }
            while (v66 != 15);
            v44 = vabdd_f64(v70, v71);
            v43 = v69 * 15.0;
            if (v44 < v43)
            {
              if ((int)VRTraceGetErrorLogLevelForModule() < 7)
                goto LABEL_80;
              v72 = VRTraceErrorLogLevelToCSTR();
              v49 = *MEMORY[0x1E0CF2758];
              if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
                goto LABEL_80;
              *(_DWORD *)buf = 136315650;
              v76 = v72;
              v77 = 2080;
              v78 = "JLagProcessor_DetectSpike";
              v79 = 1024;
              v80 = 327;
              v50 = " [%s] %s:%d Leaving OWRD SPIKE due to flatness";
LABEL_65:
              v51 = v49;
              v52 = 28;
LABEL_79:
              _os_log_impl(&dword_1D8A54000, v51, OS_LOG_TYPE_DEFAULT, v50, buf, v52);
LABEL_80:
              *(_DWORD *)(a1 + 52) = 0;
              goto LABEL_91;
            }
          }
          else
          {
LABEL_73:
            *(double *)(a1 + 8 * v47 + 88) = v15;
          }
          if (*(_BYTE *)(a1 + 416))
          {
            LODWORD(v43) = *(_DWORD *)(a1 + 4);
            LODWORD(v44) = *((_DWORD *)a2 + 1);
            if (((double)*(unint64_t *)&v44 + (double)*(unint64_t *)&v43 * 4294967300.0) / v45
               - *(double *)(a1 + 64) > 8.0)
            {
LABEL_76:
              if ((int)VRTraceGetErrorLogLevelForModule() < 7)
                goto LABEL_80;
              v61 = VRTraceErrorLogLevelToCSTR();
              v62 = *MEMORY[0x1E0CF2758];
              if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
                goto LABEL_80;
              v63 = *(_DWORD *)(a1 + 332);
              *(_DWORD *)buf = 136315906;
              v76 = v61;
              v77 = 2080;
              v78 = "JLagProcessor_DetectSpike";
              v79 = 1024;
              v80 = 335;
              v81 = 1024;
              *(_DWORD *)v82 = v63;
              v50 = " [%s] %s:%d Leaving OWRD SPIKE due to timeout %d";
              v51 = v62;
              v52 = 34;
              goto LABEL_79;
            }
          }
          else
          {
            v64 = *((_DWORD *)a2 + 8);
            if (v64 <= 0)
            {
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
                  JLagProcessor_Process_cold_1();
              }
              v64 = 1;
            }
            LODWORD(v45) = *(_DWORD *)(a1 + 336);
            if (*(_DWORD *)(a1 + 332) > ((double)*(unint64_t *)&v45 * 8.0 / (double)(v64 * v42)))
              goto LABEL_76;
          }
          v65 = *(double *)(a1 + 80);
          if (v65 >= v15)
            *(double *)(a1 + 80) = v15 * 0.05 + v65 * 0.95;
          else
            *(double *)(a1 + 80) = v15;
        }
        else
        {
          v53 = v43 * 4.0 + 0.0199999996 + v46;
          if (v15 - *(double *)(a1 + 368) > v53)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
            {
              v55 = VRTraceErrorLogLevelToCSTR();
              v56 = *MEMORY[0x1E0CF2758];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
              {
                v57 = *(unsigned __int16 **)(a1 + 368);
                *(_DWORD *)buf = 136316418;
                v76 = v55;
                v77 = 2080;
                v78 = "JLagProcessor_DetectSpike";
                v79 = 1024;
                v80 = 288;
                v81 = 2048;
                *(double *)v82 = v15;
                *(_WORD *)&v82[8] = 2048;
                v83 = v57;
                *(_WORD *)v84 = 2048;
                *(double *)&v84[2] = v53;
                _os_log_impl(&dword_1D8A54000, v56, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Entering OWRD SPIKE %.4f - %.4f > %.4f", buf, 0x3Au);
              }
            }
            *(_OWORD *)(a1 + 88) = 0u;
            *(double *)(a1 + 72) = v53;
            *(double *)(a1 + 80) = v15;
            *(_OWORD *)(a1 + 104) = 0u;
            *(_OWORD *)(a1 + 120) = 0u;
            *(_OWORD *)(a1 + 136) = 0u;
            *(_OWORD *)(a1 + 152) = 0u;
            *(_OWORD *)(a1 + 168) = 0u;
            *(_OWORD *)(a1 + 184) = 0u;
            *(_OWORD *)(a1 + 200) = 0u;
            *(_OWORD *)(a1 + 216) = 0u;
            *(_OWORD *)(a1 + 232) = 0u;
            *(_OWORD *)(a1 + 248) = 0u;
            *(_OWORD *)(a1 + 264) = 0u;
            *(_OWORD *)(a1 + 280) = 0u;
            *(_OWORD *)(a1 + 296) = 0u;
            *(_OWORD *)(a1 + 312) = 0u;
            *(_QWORD *)(a1 + 328) = 0;
            *(double *)(a1 + 88) = v15;
            *(_DWORD *)(a1 + 52) = 1;
            v58 = *((_QWORD *)a2 + 2);
            *(_QWORD *)(a1 + 56) = v58;
            LODWORD(v58) = *(_DWORD *)(a1 + 4);
            LODWORD(v54) = *((_DWORD *)a2 + 1);
            *(double *)&v59 = (double)v54;
            v60 = *(double *)&v59 + (double)v58 * 4294967300.0;
            LODWORD(v59) = *(_DWORD *)(a1 + 336);
            *(double *)(a1 + 64) = v60 / (double)v59;
          }
        }
        if (*(_DWORD *)(a1 + 52))
        {
LABEL_92:
          *(double *)(a1 + 368) = v15;
          return v15;
        }
LABEL_91:
        JLagProcessor_RecordOWRD(a1, v15);
        JLagProcessor_UpdateAverages(a1, (uint64_t)a2, a3, 0, v15);
        goto LABEL_92;
      }
    }
    v73 = NAN;
    v74 = NAN;
    JLagProcessor_CalculatePacketLag(a1, (uint64_t)a2, &v74, &v73);
    if (a5 <= 3)
    {
      *(_WORD *)(a1 + 364) = *a2;
      *(_QWORD *)(a1 + 352) = *((_QWORD *)a2 + 2);
      *(_DWORD *)(a1 + 360) = *((_DWORD *)a2 + 1);
      if (!*(_BYTE *)(a1 + 345) && !*((_BYTE *)a2 + 37))
      {
        JLagProcessor_CalculatePacketLag(a1, (uint64_t)a2, &v74, &v73);
        *(_BYTE *)(a1 + 345) = 1;
      }
      *(_DWORD *)(a1 + 4) = 0;
      *(_DWORD *)(a1 + 12) = 0;
      goto LABEL_44;
    }
    ++*(_DWORD *)(a1 + 12);
    if (fabs(v74) <= 5.0)
      goto LABEL_34;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      v19 = VRTraceErrorLogLevelToCSTR();
      v20 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v21 = *a2;
        v22 = *((_DWORD *)a2 + 1);
        v23 = *(unsigned __int16 *)(a1 + 364);
        v24 = *(_DWORD *)(a1 + 360);
        *(_DWORD *)buf = 136316674;
        v76 = v19;
        v77 = 2080;
        v78 = "JLagProcessor_ComputeLag";
        v79 = 1024;
        v80 = 147;
        v81 = 1024;
        *(_DWORD *)v82 = v21;
        *(_WORD *)&v82[4] = 1024;
        *(_DWORD *)&v82[6] = v22;
        LOWORD(v83) = 1024;
        *(_DWORD *)((char *)&v83 + 2) = v23;
        HIWORD(v83) = 1024;
        *(_DWORD *)v84 = v24;
        _os_log_impl(&dword_1D8A54000, v20, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Spurious lag noted (Pkt: SN:0X%4X TS:0X%8X) (Ref: SN:0X%4X TS:0X%8X)", buf, 0x34u);
      }
    }
    v74 = *(double *)(a1 + 368);
    if (fabs(v73) >= 2.5 || vabdd_f64(v73, *(double *)(a1 + 400)) >= 2.5)
    {
LABEL_34:
      *(_DWORD *)(a1 + 408) = 0;
    }
    else
    {
      v25 = *(_DWORD *)(a1 + 408);
      *(_DWORD *)(a1 + 408) = v25 + 1;
      if (v25 > 9)
        goto LABEL_36;
    }
    if (!*(_BYTE *)(a1 + 344))
    {
LABEL_44:
      *(_DWORD *)(a1 + 392) = *((_DWORD *)a2 + 1);
      *(_QWORD *)(a1 + 384) = *((_QWORD *)a2 + 2);
      *(_WORD *)(a1 + 396) = *a2;
      v15 = v74;
      *(double *)(a1 + 400) = v73;
      v18 = *(double *)(a1 + 368);
      goto LABEL_45;
    }
LABEL_36:
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      v26 = VRTraceErrorLogLevelToCSTR();
      v27 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v28 = *(unsigned __int16 *)(a1 + 364);
        v29 = *(_DWORD *)(a1 + 360);
        v30 = *(unsigned __int16 *)(a1 + 396);
        v31 = *(_DWORD *)(a1 + 392);
        v32 = *(unsigned __int8 *)(a1 + 344);
        *(_DWORD *)buf = 136316930;
        v76 = v26;
        v77 = 2080;
        v78 = "JLagProcessor_ComputeLag";
        v79 = 1024;
        v80 = 165;
        v81 = 1024;
        *(_DWORD *)v82 = v28;
        *(_WORD *)&v82[4] = 1024;
        *(_DWORD *)&v82[6] = v29;
        LOWORD(v83) = 1024;
        *(_DWORD *)((char *)&v83 + 2) = v30;
        HIWORD(v83) = 1024;
        *(_DWORD *)v84 = v31;
        *(_WORD *)&v84[4] = 1024;
        *(_DWORD *)&v84[6] = v32;
        _os_log_impl(&dword_1D8A54000, v27, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Moving reference to secondary (Was: SN:0X%4X TS:0X%8X) (Now: SN:0X%4X TS:0X%8X), reset:%d", buf, 0x3Au);
      }
    }
    *(_WORD *)(a1 + 364) = *(_WORD *)(a1 + 396);
    *(_QWORD *)(a1 + 352) = *(_QWORD *)(a1 + 384);
    *(_DWORD *)(a1 + 360) = *(_DWORD *)(a1 + 392);
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 408) = 0;
    *(_DWORD *)(a1 + 12) = 0;
    *(_BYTE *)(a1 + 344) = 0;
    v74 = v73;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      v39 = VRTraceErrorLogLevelToCSTR();
      v40 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        v76 = v39;
        v77 = 2080;
        v78 = "JLagProcessor_ComputeLag";
        v79 = 1024;
        v80 = 177;
        _os_log_impl(&dword_1D8A54000, v40, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Reference changed. Reset OWRD", buf, 0x1Cu);
      }
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_DWORD *)(a1 + 48) = 0;
    v41 = *(_QWORD *)(a1 + 424);
    if (v41)
      VRLogfilePrint(v41, "Moved reference to Secondary \n", v33, v34, v35, v36, v37, v38, SLOBYTE(v73));
    goto LABEL_44;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    v10 = VRTraceErrorLogLevelToCSTR();
    v11 = *MEMORY[0x1E0CF2758];
    v12 = *MEMORY[0x1E0CF2758];
    if (*MEMORY[0x1E0CF2748])
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        v76 = v10;
        v77 = 2080;
        v78 = "JLagProcessor_Process";
        v79 = 1024;
        v80 = 375;
        _os_log_impl(&dword_1D8A54000, v11, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Skip lag computation", buf, 0x1Cu);
      }
    }
    else if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      JLagProcessor_Process_cold_3(v10);
    }
  }
  return NAN;
}

double JLagProcessor_UpdateAverages(uint64_t a1, uint64_t a2, int a3, int a4, double a5)
{
  double v5;
  double v6;
  double v7;
  double result;
  unint64_t v9;

  if (!a3)
    a3 = *(_DWORD *)(a2 + 24);
  v5 = 0.5;
  if (!a4)
  {
    LODWORD(v5) = *(_DWORD *)(a1 + 336);
    v5 = 2.0 / ((double)*(unint64_t *)&v5 * 20.0 / (double)a3 / (double)*(int *)(a2 + 32) + 1.0);
  }
  v6 = *(double *)(a1 + 24);
  v7 = v5 * a5 + *(double *)(a1 + 16) * (1.0 - v5);
  *(double *)(a1 + 16) = v7;
  *(double *)(a1 + 24) = v5 * vabdd_f64(a5, v7) + v6 * (1.0 - v5);
  result = 0.003;
  if (v7 > 0.003)
  {
    *(double *)&v9 = v7 + -0.003;
    *(double *)(a1 + 16) = v7 + -0.003;
    LODWORD(v9) = *(_DWORD *)(a1 + 336);
    result = (double)v9 * 0.003;
    *(_DWORD *)(a1 + 360) -= result;
  }
  return result;
}

void JLagProcessor_RecordOWRD(uint64_t a1, double a2)
{
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  double v8;
  double v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  float v17;
  uint64_t v18;
  NSObject *v19;
  double v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  double v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 52))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      v3 = VRTraceErrorLogLevelToCSTR();
      v4 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v21 = 136315906;
        v22 = v3;
        v23 = 2080;
        v24 = "JLagProcessor_RecordOWRD";
        v25 = 1024;
        v26 = 220;
        v27 = 2048;
        v28 = a2;
        v5 = " [%s] %s:%d Spike detected! Discarding lag sample %f";
        v6 = v4;
LABEL_5:
        _os_log_impl(&dword_1D8A54000, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v21, 0x26u);
      }
    }
  }
  else
  {
    v8 = *(double *)(a1 + 40);
    if (a2 - v8 <= 5.0 && (v9 = *(double *)(a1 + 32), v9 - a2 <= 5.0))
    {
      if (*(_DWORD *)(a1 + 12))
      {
        v14 = a2 * 0.0001 + v9 * 0.9999;
        v15 = a2 * 0.1 + v8 * 0.9;
        *(double *)(a1 + 32) = v14;
        *(double *)(a1 + 40) = v15;
        v16 = v15 - v14;
        if (v15 - v14 < 0.0)
        {
          *(double *)(a1 + 32) = v15;
          v16 = 0.0;
        }
        v17 = v16;
        *(float *)(a1 + 48) = v17;
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        v18 = VRTraceErrorLogLevelToCSTR();
        v19 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        {
          v20 = *(float *)(a1 + 48);
          v21 = 136315906;
          v22 = v18;
          v23 = 2080;
          v24 = "JLagProcessor_RecordOWRD";
          v25 = 1024;
          v26 = 234;
          v27 = 2048;
          v28 = v20;
          v5 = " [%s] %s:%d Just picked a new reference. OWRD should have been reset. OWRD = %f";
          v6 = v19;
          goto LABEL_5;
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      v10 = VRTraceErrorLogLevelToCSTR();
      v11 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      {
        v13 = *(_QWORD *)(a1 + 32);
        v12 = *(_QWORD *)(a1 + 40);
        v21 = 136316674;
        v22 = v10;
        v23 = 2080;
        v24 = "JLagProcessor_RecordOWRD";
        v25 = 1024;
        v26 = 229;
        v27 = 2048;
        v28 = a2;
        v29 = 2048;
        v30 = v12;
        v31 = 2048;
        v32 = v13;
        v33 = 2048;
        v34 = 0x4014000000000000;
        _os_log_error_impl(&dword_1D8A54000, v11, OS_LOG_TYPE_ERROR, " [%s] %s:%d Lag (%fs) looks spurious (short %fs: long %fs : threshold %fs), discarding", (uint8_t *)&v21, 0x44u);
      }
    }
  }
}

double JLagProcessor_CalculatePacketLag(uint64_t a1, uint64_t a2, double *a3, double *a4)
{
  unsigned int v8;
  uint64_t v9;
  NSObject *v10;
  double v11;
  double result;
  unint64_t v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 8) = 0;
  v8 = *(_DWORD *)(a2 + 4) - *(_DWORD *)(a1 + 360);
  if (v8 - *(_DWORD *)a1 <= 0x7FFFFFFE)
  {
    if (v8 < *(_DWORD *)a1)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        v9 = VRTraceErrorLogLevelToCSTR();
        v10 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        {
          v14 = 136315650;
          v15 = v9;
          v16 = 2080;
          v17 = "JLagProcessor_CalculatePacketLag";
          v18 = 1024;
          v19 = 79;
          _os_log_impl(&dword_1D8A54000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Time counter wrapped around", (uint8_t *)&v14, 0x1Cu);
        }
      }
      ++*(_DWORD *)(a1 + 4);
    }
    *(_DWORD *)a1 = v8;
  }
  v11 = *(double *)(a1 + 352);
  result = *(double *)(a2 + 16) - v11;
  if (a3)
  {
    LODWORD(v11) = *(_DWORD *)(a1 + 4);
    *(double *)&v13 = (double)v8;
    LODWORD(v13) = *(_DWORD *)(a1 + 336);
    v11 = result - ((double)v8 + (double)*(unint64_t *)&v11 * 4294967300.0) / (double)v13;
    *a3 = v11;
  }
  *(double *)(a2 + 8) = result;
  if (a4)
  {
    LODWORD(v11) = *(_DWORD *)(a1 + 336);
    result = *(double *)(a2 + 16)
           - *(double *)(a1 + 384)
           - (double)(*(_DWORD *)(a2 + 4) - *(_DWORD *)(a1 + 392)) / (double)*(unint64_t *)&v11;
    *a4 = result;
  }
  return result;
}

uint64_t VCAudioUnit_AudioUnitSetProperty()
{
  return off_1ED10CD10();
}

uint64_t VCAudioUnit_AudioUnitGetProperty()
{
  return off_1ED10CD18();
}

uint64_t VCAudioUnit_AudioUnitRender()
{
  return off_1ED10CD20();
}

uint64_t VCAudioUnit_AudioUnitComplexRender()
{
  return off_1ED10CD28();
}

uint64_t VCAudioUnit_AudioUnitInitialize()
{
  return _audioUnitStub();
}

uint64_t VCAudioUnit_AudioUnitUninitialize()
{
  return off_1ED10CD08();
}

uint64_t VCAudioUnit_AudioOutputUnitStart()
{
  return off_1ED10CD30();
}

uint64_t VCAudioUnit_AudioOutputUnitStop()
{
  return off_1ED10CD38();
}

uint64_t VCAudioUnit_AudioUnitSetParameter()
{
  return off_1ED10CD40();
}

BOOL JTargetJBEstimator_Initialize(uint64_t a1, __int128 *a2)
{
  _BYTE *v3;
  void **v4;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  const void *v13;
  double v14;
  double v15;
  double v16;
  int v17;
  double v18;
  double v19;
  double v20;

  if (a1)
  {
    v3 = (_BYTE *)(a1 + 79656);
    v4 = (void **)(a1 + 72168);
    v5 = (_QWORD *)(a1 + 66056);
    v6 = *a2;
    *(_OWORD *)(a1 + 80648) = a2[1];
    *(_OWORD *)(a1 + 80632) = v6;
    v7 = a2[2];
    v8 = a2[3];
    v9 = a2[4];
    *(_OWORD *)(a1 + 80712) = a2[5];
    *(_OWORD *)(a1 + 80696) = v9;
    *(_OWORD *)(a1 + 80680) = v8;
    *(_OWORD *)(a1 + 80664) = v7;
    v10 = a2[6];
    v11 = a2[7];
    v12 = a2[8];
    *(_QWORD *)(a1 + 80776) = *((_QWORD *)a2 + 18);
    *(_OWORD *)(a1 + 80760) = v12;
    *(_OWORD *)(a1 + 80744) = v11;
    *(_OWORD *)(a1 + 80728) = v10;
    v13 = *(const void **)(a1 + 80736);
    if (v13)
    {
      CFRetain(v13);
      VCJBTargetEstimatorSynchronizer_RegisterClient(*(_QWORD *)(a1 + 80736), (_BYTE *)(a1 + 81152), *(_DWORD *)(a1 + 80752));
    }
    v14 = *(double *)(a1 + 80632);
    v15 = *(double *)(a1 + 80648);
    v16 = *(double *)(a1 + 80656);
    *(double *)(a1 + 24) = v14;
    *(double *)(a1 + 32) = v15;
    *(double *)(a1 + 40) = v16;
    v17 = *(_DWORD *)(a1 + 80664);
    *(double *)(a1 + 79448) = v15;
    *(double *)(a1 + 79456) = v15;
    *(_BYTE *)(a1 + 66096) = *(_BYTE *)(a1 + 80704);
    *(_OWORD *)(a1 + 66104) = *(_OWORD *)(a1 + 80712);
    *(_QWORD *)(a1 + 79640) = 0;
    *(_DWORD *)(a1 + 4) = 0;
    *(_DWORD *)(a1 + 8) = v17;
    *(_DWORD *)(a1 + 66064) = 0;
    *v5 = 0;
    *(_DWORD *)(a1 + 66124) = 0;
    *(_QWORD *)(a1 + 66088) = 0;
    *(_OWORD *)(a1 + 66072) = 0u;
    *v3 = 1;
    if (v17)
      v14 = v16;
    *(double *)(a1 + 80584) = v14;
    *(_QWORD *)(a1 + 80576) = *(_QWORD *)(a1 + 80584);
    *(_QWORD *)(a1 + 80592) = *(_QWORD *)(a1 + 80584);
    *(double *)(a1 + 80600) = v15;
    *(_BYTE *)(a1 + 79666) = 0;
    v18 = *(double *)(a1 + 80672);
    *(_QWORD *)(a1 + 72152) = *(_QWORD *)(a1 + 80680);
    *(double *)(a1 + 72144) = v15;
    LODWORD(v3) = vcvtpd_u64_f64(v15 * 1000.0 / v18);
    *(_QWORD *)(a1 + 66128) = malloc_type_calloc((size_t)v3, 4uLL, 0x100004052888210uLL);
    *(_DWORD *)(a1 + 72160) = (_DWORD)v3;
    *(_DWORD *)(a1 + 72136) = 0;
    v19 = *(double *)(a1 + 80672);
    *(_QWORD *)(a1 + 78192) = *(_QWORD *)(a1 + 80680);
    v20 = *(double *)(a1 + 32);
    *(double *)(a1 + 78184) = v20;
    LODWORD(v3) = vcvtpd_u64_f64(v20 * 1000.0 / v19);
    *v4 = malloc_type_calloc((size_t)v3, 4uLL, 0x100004052888210uLL);
    *(_DWORD *)(a1 + 78200) = (_DWORD)v3;
    *(_DWORD *)(a1 + 78176) = 0;
  }
  return a1 != 0;
}

double JTargetJBEstimator_NewStream(uint64_t a1, int a2, __int16 a3)
{
  uint64_t v5;
  uint64_t v6;
  double result;

  v5 = a1 + 80576;
  _JTargetJBEstimator_ResetHistory(a1, a3, 0);
  *(_DWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v5 + 8) = v6;
  *(_QWORD *)v5 = *(_QWORD *)(v5 + 8);
  *(_QWORD *)(v5 + 16) = v6;
  result = *(double *)(a1 + 32);
  *(double *)(v5 + 24) = result;
  *(_DWORD *)(a1 + 48) = a2;
  return result;
}

void _JTargetJBEstimator_ResetHistory(uint64_t a1, __int16 a2, int a3)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = (_BYTE *)(a1 + 79656);
  v7 = a1 + 72168;
  v8 = a1 + 66056;
  if (!a3)
  {
    v9 = 40;
    if (!*(_DWORD *)(a1 + 8))
      v9 = 24;
    *(_QWORD *)(a1 + 80584) = *(_QWORD *)(a1 + v9);
    *(_QWORD *)(a1 + 80576) = *(_QWORD *)(a1 + 80584);
    *(_QWORD *)(a1 + 80592) = *(_QWORD *)(a1 + 80584);
    v10 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 80600) = v10;
    *(_DWORD *)(a1 + 80608) = 0;
    *(_QWORD *)(a1 + 80616) = 0;
    *(_DWORD *)(a1 + 66124) = 0;
    *(_QWORD *)(a1 + 66072) = 0;
    *(_OWORD *)(a1 + 66080) = 0u;
    *(_QWORD *)(a1 + 79448) = v10;
    *(_QWORD *)(a1 + 79456) = v10;
    *(_OWORD *)(a1 + 79576) = 0u;
  }
  *(_DWORD *)(a1 + 66064) = 0;
  bzero((void *)(a1 + 56), 0x2EE0uLL);
  bzero((void *)(a1 + 12056), 0x2EE0uLL);
  bzero((void *)(a1 + 24056), 0x1770uLL);
  bzero((void *)(a1 + 30056), 0x1770uLL);
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v7 + 7472) = 0;
  *(_DWORD *)(a1 + 4) = a3;
  *(_WORD *)(v8 + 66) = a2;
  *v6 = 1;
  bzero(*(void **)(v8 + 72), 4 * *(unsigned int *)(v8 + 6104));
  bzero((void *)(a1 + 66136), 0x1770uLL);
  *(_DWORD *)(v8 + 6080) = 0;
  bzero(*(void **)v7, 4 * *(unsigned int *)(v7 + 6032));
  bzero((void *)(a1 + 72176), 0x1770uLL);
  *(_DWORD *)(v7 + 6008) = 0;
}

void JTargetJBEstimator_Finalize(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  const void *v3;

  v1 = a1 + 72168;
  v2 = a1 + 66128;
  free(*(void **)(a1 + 66128));
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 6032) = 0;
  free(*(void **)v1);
  *(_QWORD *)v1 = 0;
  *(_DWORD *)(v1 + 6032) = 0;
  v3 = *(const void **)(v1 + 8568);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(v1 + 8568) = 0;
  }
}

uint64_t JTargetJBEstimator_SetNetworkType(uint64_t result, int a2, int a3, int a4)
{
  BOOL v5;

  v5 = a3 == 5 || a4 == 5;
  *(_DWORD *)result = a2;
  *(_BYTE *)(result + 79664) = v5;
  *(_BYTE *)(result + 79665) = (a4 & 0xFFFFFFFE) == 8;
  return result;
}

double JTargetJBEstimator_UpdateJitterBufferParams(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  double result;

  v2 = *a2;
  *(_QWORD *)(a1 + 80632) = *a2;
  *(_QWORD *)(a1 + 24) = v2;
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 1);
  result = *((double *)a2 + 6);
  *(double *)(a1 + 72152) = result;
  *(double *)(a1 + 78192) = result;
  return result;
}

uint64_t JTargetJBEstimator_GetMinJBSize(uint64_t result)
{
  double v1;

  v1 = *(double *)(result + 80632);
  if (*(_BYTE *)(result + 80776))
    v1 = fmax(*(double *)(result + 16) * (double)*(int *)(result + 12), fmax(*(double *)(result + 16) + *(double *)(result + 16), v1));
  *(double *)(result + 24) = v1;
  return result;
}

void JTargetJBEstimator_GetSharedSettings(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 80584);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 80592);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 80600);
    *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 80608);
    *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 80616);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      JTargetJBEstimator_GetSharedSettings_cold_1();
  }
}

void JTargetJBEstimator_ResetHistory(uint64_t a1)
{
  _JTargetJBEstimator_ResetHistory(a1, *(_WORD *)(a1 + 79480), 0);
}

double JTargetJBEstimator_GetStatistical95pDelaySpread(uint64_t a1)
{
  double *v1;
  double result;

  v1 = (double *)(a1 + 66072);
  if (*(double *)(a1 + 80624) - *(double *)(a1 + 80848) > 1.0)
    _JTargetJBEstimation_CalculateMeanAndStdev(a1);
  result = v1[1841] + v1[1842] * 1.645 - *v1;
  v1[1848] = result;
  return result;
}

double _JTargetJBEstimation_CalculateMeanAndStdev(uint64_t a1)
{
  uint64_t v1;
  int v2;
  unsigned int v4;
  uint64_t v5;
  int v6;
  double v7;
  int v8;
  int v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  long double v15;
  char v16;
  long double v17;
  double result;

  v1 = a1 + 80624;
  *(_QWORD *)(a1 + 80784) = 0;
  *(_DWORD *)(a1 + 80792) = 0;
  v2 = *(_DWORD *)(a1 + 66064);
  if (v2 <= 0)
  {
    v16 = 0;
    *(_QWORD *)(a1 + 80800) = 0x7FF8000000000000;
  }
  else
  {
    v4 = 0;
    v5 = a1 + 56;
    v6 = *(_DWORD *)(a1 + 66060);
    v7 = 0.0;
    v8 = v6;
    v9 = *(_DWORD *)(a1 + 66064);
    do
    {
      if (*(_DWORD *)(a1 + 4 * (v8 % 1500) + 24056))
      {
        v7 = v7 + *(double *)(v5 + 8 * (v8 % 1500));
        *(double *)(a1 + 80784) = v7;
        *(_DWORD *)(a1 + 80792) = ++v4;
      }
      ++v8;
      --v9;
    }
    while (v9);
    v10 = (double)v4;
    v11 = v7 / (double)v4;
    *(double *)(a1 + 80800) = v11;
    v12 = 0.0;
    v13 = 0.0;
    v14 = 0.0;
    do
    {
      if (*(_DWORD *)(a1 + 4 * (v6 % 1500) + 24056))
      {
        v15 = *(double *)(v5 + 8 * (v6 % 1500)) - v11;
        v14 = v14 + v15 * v15;
        v13 = v13 + pow(v15, 3.0);
        v12 = v12 + pow(v15, 4.0);
      }
      ++v6;
      --v2;
    }
    while (v2);
    v16 = 0;
    if (v14 != 0.0 && v4)
    {
      v17 = sqrt(v14 / v10);
      *(long double *)(v1 + 184) = v17;
      *(long double *)(v1 + 192) = v13 / v10 / pow(v17, 3.0);
      *(long double *)(v1 + 200) = v12 / v10 / pow(v17, 4.0) + -3.0;
      v16 = 1;
    }
  }
  *(_BYTE *)(v1 + 240) = v16;
  result = *(double *)v1;
  *(_QWORD *)(v1 + 224) = *(_QWORD *)v1;
  return result;
}

uint64_t JTargetJBEstimator_GetStatistics(uint64_t a1)
{
  return a1 + 80896;
}

uint64_t JTargetJBEstimator_GetSpikeReportingMetrics(uint64_t a1)
{
  return a1 + 81160;
}

uint64_t JTargetJBEstimator_GetSpikeInfo(uint64_t a1)
{
  return a1 + 80872;
}

uint64_t JTargetJBEstimator_GetFrequentSpikeInfo(uint64_t a1)
{
  return a1 + 79672;
}

uint64_t JTargetJBEstimator_Process(uint64_t a1, double *a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  double v23;
  double v24;
  double v25;
  double v26;
  int v27;
  int v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 IsPacketBundled;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  int v46;
  int v47;
  double v48;
  double v49;
  double v50;
  double v51;
  int v52;
  int v53;
  double v54;
  double v55;
  int v56;
  int v57;
  BOOL v58;
  int v59;
  double v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  double v65;
  uint64_t v66;
  double v67;
  double v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  double v75;
  double v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  _DWORD *v81;
  uint64_t v82;
  _DWORD *v83;
  uint64_t v84;
  NSObject *v85;
  int v86;
  BOOL v87;
  int v88;
  signed int v89;
  uint64_t v90;
  _DWORD *v91;
  double NewMinLag;
  uint64_t v93;
  double *v94;
  int v95;
  int v96;
  unsigned int v97;
  int v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  char v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  int v111;
  unsigned int v112;
  int v113;
  int v114;
  unsigned int v115;
  unsigned int v116;
  int v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  uint64_t v122;
  int v123;
  int v124;
  unsigned int v125;
  int v126;
  signed int v127;
  _DWORD *v128;
  uint64_t v129;
  int v130;
  int v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  double v138;
  double v139;
  int v140;
  int v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  double v147;
  uint64_t v148;
  NSObject *v149;
  double v150;
  double v151;
  int v152;
  int v153;
  int v154;
  int v155;
  double v156;
  int v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  int v164;
  double v165;
  int v166;
  double v167;
  double v168;
  float v169;
  double v170;
  float v171;
  uint64_t (*v172)(void);
  float v173;
  float v174;
  float v175;
  unsigned int v176;
  unint64_t v177;
  double v178;
  unsigned int v179;
  double v181;
  double v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v187;
  double v188;
  unint64_t v189;
  double v190;
  double v191;
  unsigned int v193;
  unint64_t v194;
  double v195;
  double v196;
  double v197;
  _BOOL4 v198;
  int v199;
  unsigned int v200;
  float v201;
  double v202;
  int v203;
  double v204;
  double v205;
  float v206;
  double v207;
  int v208;
  int i;
  float v210;
  int v211;
  uint64_t v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  _DWORD *v218;
  uint64_t v219;
  int v220;
  int v221;
  uint64_t v222;
  NSObject *v223;
  NSObject *v224;
  uint64_t v225;
  unsigned int v226;
  double *v227;
  _QWORD *v228;
  uint64_t v229;
  uint8_t buf[4];
  uint64_t v231;
  __int16 v232;
  const char *v233;
  __int16 v234;
  int v235;
  __int16 v236;
  _QWORD v237[4];

  *(_QWORD *)((char *)&v237[2] + 2) = *MEMORY[0x1E0C80C00];
  v6 = a1 + 80576;
  v7 = a1 + 79600;
  v8 = *(double *)(a1 + 66072);
  v9 = *(double *)(a1 + 66080);
  v229 = a1 + 66056;
  v10 = micro();
  v11 = a2[1];
  *(double *)(v6 + 48) = v11;
  *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 5);
  v12 = *(_DWORD *)(a1 + 48);
  if (v12)
    *(double *)(a1 + 16) = (double)*((int *)a2 + 4) / (double)v12;
  v13 = a1 + 80872;
  v14 = a1 + 78208;
  v15 = a1 + 72168;
  v16 = *((_DWORD *)a2 + 6);
  v17 = *(_DWORD *)(v7 + 52);
  v18 = v16 >= v17;
  v19 = v16 - v17;
  v20 = v18 || v19 > 0x7FFFFFFE;
  v21 = v229;
  if (!v20)
    *(_WORD *)(v229 + 64) = 257;
  v228 = (_QWORD *)(a1 + 72168);
  if (*(_BYTE *)(v6 + 154))
  {
    if (*((_BYTE *)a2 + 40))
    {
LABEL_10:
      v11 = a2[1];
      *(double *)(a1 + 81144) = v11;
      *(_DWORD *)(a1 + 81140) = v16;
      goto LABEL_11;
    }
    *(_BYTE *)(a1 + *(unsigned __int8 *)(a1 + 81017) + 81018) = 0;
    IsPacketBundled = _JTargetJBEstimator_IsPacketBundled(a1 + 81120, (uint64_t)a2);
    v33 = *(unsigned __int8 *)(a1 + 81017);
    if (IsPacketBundled)
      *(_BYTE *)(a1 + v33 + 81018) = 2;
    *(_BYTE *)(a1 + 81017) = v33 + 1 - 100 * ((656 * (v33 + 1)) >> 16);
    v34 = *(unsigned __int8 *)(a1 + 81016);
    if (v34 <= 0x63)
    {
      *(_BYTE *)(a1 + 81016) = v34 + 1;
      v20 = v34 > 0x31;
      LOBYTE(v34) = v34 + 1;
      if (!v20)
      {
        v16 = *((_DWORD *)a2 + 6);
        v21 = v229;
        goto LABEL_10;
      }
    }
    v35 = 0;
    v36 = 0;
    do
      v36 += *(unsigned __int8 *)(a1 + 81018 + v35++);
    while (v35 != 100);
    v37 = (double)v36 / (double)v34;
    v16 = *((_DWORD *)a2 + 6);
    v21 = v229;
    if (v37 <= 0.8)
      goto LABEL_10;
    if (v16 == *(_DWORD *)(a1 + 81140) + 2 * *((_DWORD *)a2 + 4))
    {
      *(double *)(a1 + 81144) = a2[1];
      *(_DWORD *)(a1 + 81140) = v16;
LABEL_67:
      v62 = 0;
      *(_DWORD *)(v7 + 52) = v16;
      goto LABEL_221;
    }
    v61 = _JTargetJBEstimator_IsPacketBundled(a1 + 81136, (uint64_t)a2);
    v21 = v229;
    v11 = a2[1];
    *(double *)(a1 + 81144) = v11;
    v16 = *((_DWORD *)a2 + 6);
    *(_DWORD *)(a1 + 81140) = v16;
    if (v61)
      goto LABEL_67;
  }
LABEL_11:
  if (*(double *)(v7 + 40) != 0.0)
    *(_QWORD *)(v7 + 40) = 0;
  v22 = *(unsigned __int16 *)a2;
  *(_WORD *)(a1 + 79480) = v22;
  v227 = a2;
  if (!*(_BYTE *)(v6 + 152))
  {
    v25 = a3;
    goto LABEL_103;
  }
  if (*(_DWORD *)(a1 + 79556) == 1)
    *(_QWORD *)(a1 + 79552) = 0;
  v23 = *(double *)(a1 + 78224);
  v24 = a3 * 0.1 + *(double *)v14 * 0.9;
  *(double *)v14 = v24;
  v25 = a3;
  v26 = a3;
  if (*(_BYTE *)(v6 + 153))
  {
    v25 = a3;
    v26 = a3;
    if (*(_DWORD *)(a1 + 79440) == 1)
    {
      v26 = fmin(a3, *(double *)(a1 + 79448));
      v25 = fmin(a3, *(double *)(a1 + 79456));
    }
  }
  v27 = *(_DWORD *)(a1 + 79432);
  v28 = *(_DWORD *)(a1 + 79436);
  if (v28)
  {
    if (!*(_DWORD *)(a1 + 79440))
    {
      v29 = *(double *)(a1 + 78216) * 0.9801 + v26 * 0.0198;
      *(double *)(a1 + 78216) = v29;
      *(double *)(a1 + 78224) = v23 * 0.9801 + vabdd_f64(v26, v29) * 0.0198;
    }
    if (v28 > 74)
    {
      v30 = v27;
      v27 = (v27 + 1) % 75;
      *(_DWORD *)(a1 + 79432) = v27;
      v31 = a1 + 8 * v30 + 78208;
      *(double *)(v31 + 24) = v24;
      *(double *)(v31 + 624) = v11;
      goto LABEL_37;
    }
  }
  else
  {
    *(double *)(a1 + 78216) = v26;
    *(_QWORD *)(a1 + 78224) = 0;
  }
  v38 = a1 + 8 * ((v28 + v27) % 75) + 78208;
  *(double *)(v38 + 24) = v24;
  *(double *)(v38 + 624) = v11;
  *(_DWORD *)(a1 + 79436) = ++v28;
LABEL_37:
  v45 = a3 - _JTargetJBEstimator_GetNewMinLag(a1, v25);
  if (!*(_DWORD *)(a1 + 79592))
  {
    *(_DWORD *)(a1 + 80876) = 0;
    v52 = *(_DWORD *)(a1 + 79436);
    v21 = v229;
    if (v52 < 11)
    {
      a2 = v227;
      goto LABEL_102;
    }
    v53 = *(_DWORD *)(a1 + 79432);
    a2 = v227;
    if ((unsigned __int16)(v22 - *(_WORD *)(a1 + 79480)) >= 0x7FFFu)
    {
      v55 = v23 * 4.0 + 0.0500000007;
    }
    else
    {
      v54 = *(double *)(a1 + 8 * ((v53 + v52 - 2) % 75) + 78232);
      v55 = v23 * 4.0 + 0.0500000007;
      if (a3 - v54 > v55)
      {
        v56 = 1;
LABEL_69:
        *(_DWORD *)(a1 + 79592) = v56;
        *(double *)(v7 + 16) = v54;
        *(double *)(v7 + 24) = v11;
        *(double *)(v7 + 32) = v23;
        v63 = *(_QWORD *)(v229 + 16);
        *(double *)v7 = a3;
        *(_QWORD *)(v7 + 8) = v63;
        if (v45 > *(double *)(a1 + 24))
        {
          _JTargetJBEstimator_AddCandidateSpikeToHistory(a1, v39, v229, v40, v41, v42, v43, v44);
          v21 = v229;
          if (*(_BYTE *)(v6 + 153))
            v25 = fmin(a3, *(double *)(a1 + 79456));
        }
        goto LABEL_102;
      }
    }
    v57 = v52 - 2;
    v58 = 1;
    if (v55 > 0.5)
      v55 = 0.5;
    v59 = 3;
    while (1)
    {
      v54 = *(double *)(a1 + 8 * ((v53 + v57) % 75) + 78232);
      v60 = v11 - *(double *)(a1 + 8 * ((v53 + v57) % 75) + 78832);
      if (v60 > 0.5 && (a3 - v54) / v60 > v55)
        break;
      v58 = v59++ < v52;
      if (!--v57)
      {
        v56 = 0;
        if (v58)
          goto LABEL_69;
        goto LABEL_102;
      }
    }
    v56 = 2;
    if (!v58)
      goto LABEL_102;
    goto LABEL_69;
  }
  v21 = v229;
  if (!*(_DWORD *)(a1 + 79440) && v45 > *(double *)(a1 + 24))
  {
    _JTargetJBEstimator_AddCandidateSpikeToHistory(a1, v39, v229, v40, v41, v42, v43, v44);
    v21 = v229;
    if (*(_BYTE *)(v6 + 153))
      v25 = fmin(a3, *(double *)(a1 + 79456));
  }
  v46 = *(_DWORD *)(a1 + 79496);
  v47 = v46 + 1;
  *(_DWORD *)(a1 + 79496) = v46 + 1;
  v48 = *(double *)(a1 + 79576);
  if (v48 < a3)
  {
    *(double *)(a1 + 79576) = a3;
    *(double *)(a1 + 79584) = v11;
    v48 = a3;
  }
  if (a3 - *(double *)(v21 + 16) > *(double *)(v6 + 168))
    *(_DWORD *)(a1 + 80876) = 1;
  v49 = *(double *)(v6 + 48);
  if (v49 - *(double *)(a1 + 79536) > 0.1 && v47 - *(_DWORD *)(a1 + 79528) >= 5 && !*(_DWORD *)(a1 + 79552))
  {
    v50 = *(double *)(a1 + 79512);
    if (v50 < a3)
    {
      if (*(double *)(a1 + 79544) == 0.0)
      {
        v51 = fmax(*(double *)(a1 + 79448), *(double *)(a1 + 79504) + fmin((v50 - *(double *)(a1 + 79504)) * 0.5, 0.25));
        *(double *)(a1 + 79448) = v51;
        *(_QWORD *)(a1 + 79544) = 0x3FF0000000000000;
      }
      else
      {
        v51 = *(double *)(a1 + 79448);
      }
      if (a3 - v51 > 0.3)
        *(double *)(a1 + 79448) = v51 + (*(double *)(v6 + 96) + *(double *)(v6 + 96)) * 0.001;
      *(double *)(a1 + 79536) = v49;
      *(_DWORD *)(a1 + 79528) = v47;
    }
  }
  if (v46 >= 30)
  {
    v64 = 0;
    v65 = 0.0;
    v66 = a1 + 78232;
    v67 = 0.0;
    do
    {
      v67 = v67 + *(double *)(v66 + 8 * (((v27 + v28 - 30) % 75 + v64) % 75));
      v65 = v65 + *(double *)(v66 + 8 * (((v27 + v28 - 15) % 75 + v64++) % 75));
    }
    while (v64 != 15);
    if (*(_DWORD *)(a1 + 79552))
    {
      v68 = *(double *)(a1 + 79560);
LABEL_83:
      if (v11 - v68 > 3.0 && vabdd_f64(v65, v67) < *(double *)(a1 + 79488) * 15.0)
      {
        *(_DWORD *)(a1 + 79556) = 1;
        a2 = v227;
LABEL_87:
        *(_DWORD *)(a1 + 79592) = 0;
        *(_QWORD *)(a1 + 79448) = *(_QWORD *)(a1 + 32);
        *(double *)(a1 + 79472) = v11;
        if (*(_DWORD *)(a1 + 79440))
        {
          v69 = v48 - *(double *)(a1 + 79520);
          if (v69 > 0.04)
          {
            v70 = *(_QWORD *)(a1 + 79584);
            v71 = a1 + 79672;
            v72 = *(_DWORD *)(v7 + 876);
            v73 = *(int *)(v7 + 872);
            if (v72 > 49)
            {
              *(double *)(v71 + 8 * v73) = v69;
              *(_QWORD *)(a1 + 8 * v73 + 80072) = v70;
              *(_DWORD *)(v7 + 872) = ((int)v73 + 1) % 50;
            }
            else
            {
              v74 = ((int)v73 + v72) % 50;
              *(double *)(v71 + 8 * v74) = v69;
              *(_QWORD *)(a1 + 8 * v74 + 80072) = v70;
              *(_DWORD *)(v7 + 876) = v72 + 1;
            }
          }
          *(_DWORD *)(a1 + 79440) = 0;
        }
        if (*(_DWORD *)v13 == 1)
          ++*(_DWORD *)(a1 + 81160);
        else
          ++*(_DWORD *)(a1 + 81164);
        v75 = *(double *)(a1 + 79576) - *(double *)(a1 + 79520);
        *(double *)(a1 + 80880) = v75;
        v76 = *(double *)(a1 + 80976);
        if (v75 > v76)
          *(double *)(a1 + 81168) = v75 - v76 + *(double *)(a1 + 81168);
        *(_DWORD *)v13 = 0;
        VRLogfilePrint(*(_QWORD *)(v6 + 120), "Leaving SPIKE, SpikeSize = %f \n", v21, v40, v41, v42, v43, v44, SLOBYTE(v75));
        v21 = v229;
        goto LABEL_102;
      }
      goto LABEL_86;
    }
    if (vabdd_f64(v65, v67) < *(double *)(a1 + 79488) * 15.0)
    {
      *(_DWORD *)(a1 + 79552) = 1;
      *(double *)(a1 + 79560) = v11;
      *(_DWORD *)(a1 + 79496) = 0;
      v68 = v11;
      goto LABEL_83;
    }
  }
LABEL_86:
  a2 = v227;
  if (*(_DWORD *)(a1 + 79556)
    || v11 - *(double *)(a1 + 79464) > 0.5 && *(double *)(a1 + 79448) + fabs(*(double *)(a1 + 79448) * 0.05) > a3)
  {
    goto LABEL_87;
  }
LABEL_102:
  *(double *)(v21 + 32) = v25;
  v22 = *(unsigned __int16 *)a2;
LABEL_103:
  v77 = a1 + 56;
  v78 = *(unsigned __int16 *)(v21 + 66);
  if ((unsigned __int16)(v22 - v78) > 0x7FFEu)
  {
    v79 = v22 - v78;
    if (v79 < 0)
    {
      if (*(_DWORD *)(v21 + 8) - v79 <= 1499)
      {
        v86 = *(_DWORD *)(v21 + 4);
        v87 = __OFADD__(v86, v79);
        v88 = v86 + v79;
        if (v88 < 0 != v87)
          v89 = v88 + 1500;
        else
          v89 = v88;
        *(double *)(v77 + 8 * v89) = v25;
        v90 = a1 + 56 + 8 * v89;
        *(double *)(v90 + 12000) = a3;
        v91 = (_DWORD *)(a1 + 56 + 4 * v89);
        v91[6000] = 1;
        v91[7500] = *(unsigned __int8 *)(v21 + 40);
        ++*(_DWORD *)v21;
        *(_DWORD *)(v21 + 4) = v89;
        v226 = v89;
        *(_DWORD *)(v21 + 8) -= v79;
        *(_WORD *)(v21 + 66) = v22;
        v91[9000] = *((_DWORD *)a2 + 6);
        *(double *)(v90 + 42000) = a2[1];
        *(double *)(v90 + 54000) = a2[4];
        goto LABEL_121;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() < 3
        || (v122 = VRTraceErrorLogLevelToCSTR(),
            v85 = *MEMORY[0x1E0CF2758],
            !os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR)))
      {
LABEL_115:
        v62 = 1;
        _JTargetJBEstimator_ResetHistory(a1, *(_WORD *)a2, 1);
        *(_DWORD *)(v7 + 52) = *((_DWORD *)a2 + 6);
        v21 = v229;
        goto LABEL_221;
      }
      v123 = *(unsigned __int16 *)a2;
      v124 = *(unsigned __int16 *)(v229 + 66);
      *(float *)buf = 4.8154e-34;
      v231 = v122;
      v232 = 2080;
      v233 = "_JTargetJBEstimator_AddLagToHistory";
      v234 = 1024;
      v235 = 1203;
      v236 = 1024;
      LODWORD(v237[0]) = v123;
      WORD2(v237[0]) = 1024;
      *(_DWORD *)((char *)v237 + 6) = v124;
LABEL_334:
      _os_log_error_impl(&dword_1D8A54000, v85, OS_LOG_TYPE_ERROR, " [%s] %s:%d Large Jump seen in sequence number %u startSeq=%u", buf, 0x28u);
      goto LABEL_115;
    }
  }
  else
  {
    v79 = (unsigned __int16)(v22 - v78);
  }
  if (v79 > 0x5DB)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 3)
      goto LABEL_115;
    v84 = VRTraceErrorLogLevelToCSTR();
    v85 = *MEMORY[0x1E0CF2758];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      goto LABEL_115;
    v220 = *(unsigned __int16 *)a2;
    v221 = *(unsigned __int16 *)(v229 + 66);
    *(float *)buf = 4.8154e-34;
    v231 = v84;
    v232 = 2080;
    v233 = "_JTargetJBEstimator_AddLagToHistory";
    v234 = 1024;
    v235 = 1176;
    v236 = 1024;
    LODWORD(v237[0]) = v220;
    WORD2(v237[0]) = 1024;
    *(_DWORD *)((char *)v237 + 6) = v221;
    goto LABEL_334;
  }
  v80 = (*(_DWORD *)(v21 + 4) + v79) % 1500;
  v226 = (*(_DWORD *)(v21 + 4) + v79) % 1500;
  v81 = (_DWORD *)(a1 + 4 * v80 + 24056);
  if (!*v81)
  {
    *(double *)(v77 + 8 * v80) = v25;
    v82 = a1 + 56 + 8 * v80;
    *(double *)(v82 + 12000) = a3;
    *v81 = 1;
    *(_DWORD *)(a1 + 56 + 4 * v80 + 36000) = *((_DWORD *)a2 + 6);
    *(double *)(v82 + 42000) = a2[1];
    *(double *)(v82 + 54000) = a2[4];
    ++*(_DWORD *)v21;
  }
  v83 = (_DWORD *)(a1 + 4 * v80 + 30056);
  if (!*v83)
    *v83 = *(unsigned __int8 *)(v21 + 40);
  if (v79 >= *(_DWORD *)(v21 + 8))
    *(_DWORD *)(v21 + 8) = v79 + 1;
LABEL_121:
  if (*(_DWORD *)(a1 + 4) && *(int *)v21 >= 16)
    *(_DWORD *)(a1 + 4) = 0;
  NewMinLag = _JTargetJBEstimator_GetNewMinLag(a1, v25);
  v93 = v229;
  *(double *)(v229 + 16) = NewMinLag;
  *(double *)(v229 + 24) = fmax(v25, v9);
  v94 = a2;
  v95 = *((_DWORD *)a2 + 4);
  v96 = *((_DWORD *)v94 + 5);
  v97 = *((_DWORD *)v94 + 6);
  if (v95 || v97 && *(_BYTE *)(v6 + 112))
  {
    if (!v96)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          JTargetJBEstimator_Process_cold_2();
      }
      v96 = 1;
      v93 = v229;
    }
    v98 = (int)*(double *)(v93 + 56);
    v99 = *(_DWORD *)(a1 + 79556);
    if (v99 == 1)
      v98 = 2;
    v100 = *(_DWORD *)(a1 + 48);
    v101 = v98 * v100;
    if (v95)
    {
      if (v99 == 1)
        v102 = 2;
      else
        v102 = (int)*(double *)(v93 + 48);
      v103 = v96 * v95;
      v104 = v101 / (v96 * v95);
      v105 = v102 * v100 / v103;
    }
    else
    {
      v104 = 0;
      v105 = 0;
    }
    v107 = a1 + 56;
    v108 = *(_DWORD *)(v93 + 8);
    v109 = *(unsigned __int8 *)(v93 + 40);
    v110 = v108 - v105;
    if (*(_BYTE *)(v93 + 40))
      v111 = v110;
    else
      v111 = 0;
    v225 = v7;
    if (!*(_BYTE *)(v6 + 112))
    {
      v113 = v108 - v104;
      if ((int)(v108 - v104) <= 0 && v111 < 1)
      {
        LOBYTE(v114) = 0;
        goto LABEL_179;
      }
      v140 = *(_DWORD *)(v93 + 4);
      if (v113 < 1)
      {
        LOBYTE(v114) = 0;
        v113 = 0;
      }
      else
      {
        v141 = 0;
        v114 = 0;
        do
        {
          v142 = v140 + v141;
          v140 = (v140 + v141) % 1500;
          v114 |= _JTargetJBEstimator_RemoveElementFromHistory(a1, v142 % 1500);
          ++v141;
        }
        while (v113 != v141);
        v107 = a1 + 56;
      }
      if (v111 < 1)
      {
        v93 = v229;
      }
      else
      {
        v217 = 0;
        v93 = v229;
        do
        {
          v140 = (v140 + v217) % 1500;
          v218 = (_DWORD *)(a1 + 4 * v140 + 30056);
          if (*v218)
          {
            v219 = *(unsigned int *)(a1 + 4 * v140 + 72176);
            --*(_DWORD *)(*v228 + 4 * v219);
            --*(_DWORD *)(a1 + 78176);
          }
          *v218 = 0;
          ++v217;
        }
        while (v111 != v217);
      }
LABEL_175:
      if (v113)
      {
        v130 = (*(_DWORD *)(v93 + 4) + v113) % 1500;
        v131 = *(_DWORD *)(v93 + 8) - v113;
        *(_DWORD *)(v93 + 4) = v130;
        *(_DWORD *)(v93 + 8) = v131;
        *(_WORD *)(v93 + 66) += v113;
        v132 = v225;
        if (*(double *)(v225 + 40) != 0.0
          && (*(_DWORD *)(v225 + 48) - *(_DWORD *)(a1 + 4 * v130 + 36056)) >= 0x7FFFFFFF)
        {
          *(_QWORD *)(v225 + 40) = 0;
        }
        goto LABEL_180;
      }
LABEL_179:
      v132 = v225;
LABEL_180:
      if (*(_DWORD *)(a1 + 79556) == 1)
      {
        v133 = *(_DWORD *)(v93 + 8);
        if (v133 >= 1)
        {
          v134 = *(_DWORD *)(v93 + 4);
          do
          {
            if (*(_DWORD *)(a1 + 4 * (v134 % 1500) + 24056))
              *(_QWORD *)(v107 + 8 * (v134 % 1500)) = *(_QWORD *)(a1 + 8 * (v134 % 1500) + 12056);
            ++v134;
            --v133;
          }
          while (v133);
        }
      }
      if ((v114 & 1) != 0)
      {
        *(_OWORD *)(v93 + 16) = xmmword_1D9110970;
        v135 = *(_DWORD *)(v93 + 8);
        if (v135 < 1)
        {
          NewMinLag = 30.0;
        }
        else
        {
          v136 = 0;
          NewMinLag = 30.0;
          do
          {
            v137 = (v136 + *(_DWORD *)(v93 + 4)) % 1500;
            if (*(_DWORD *)(a1 + 4 * v137 + 24056))
            {
              v138 = _JTargetJBEstimator_GetNewMinLag(a1, *(double *)(v107 + 8 * v137));
              v93 = v229;
              v139 = v138;
              NewMinLag = *(double *)(v229 + 16);
              if (v139 < NewMinLag)
              {
                *(double *)(v229 + 16) = v139;
                *(_DWORD *)(v229 + 68) = v137;
                *(_DWORD *)(v132 + 48) = *(_DWORD *)(a1 + 4 * v137 + 36056);
                NewMinLag = v139;
              }
              v107 = a1 + 56;
              *(double *)(v229 + 24) = fmax(*(double *)(a1 + 56 + 8 * v137), *(double *)(v229 + 24));
              v135 = *(_DWORD *)(v229 + 8);
            }
            ++v136;
          }
          while (v136 < v135);
        }
      }
      else
      {
        NewMinLag = *(double *)(v93 + 16);
      }
      v106 = v114 & 1;
      v7 = v132;
      v15 = a1 + 72168;
      goto LABEL_202;
    }
    v112 = v97 - v101;
    if (v97 <= v101)
    {
      v115 = v97 + ~v101;
      if (*(_BYTE *)(v93 + 65))
        v112 = v115;
      else
        v112 = 0;
    }
    else
    {
      *(_BYTE *)(v93 + 65) = 0;
    }
    v116 = *(_DWORD *)(v93 + 4);
    if (_JTargetJBEstimator_ShouldContinueDiscardingFrames(a1, 0, v116, v116, v112))
    {
      v113 = 0;
      v114 = 0;
      v117 = v116;
      v118 = v229;
      do
      {
        v114 |= _JTargetJBEstimator_RemoveElementFromHistory(a1, v117);
        v117 = (++v113 + *(_DWORD *)(v229 + 4)) % 1500;
      }
      while ((_JTargetJBEstimator_ShouldContinueDiscardingFrames(a1, 0, v116, v117, v112) & 1) != 0);
      v116 = v117;
      if (*(_BYTE *)(v229 + 40))
        goto LABEL_157;
    }
    else
    {
      LOBYTE(v114) = 0;
      v113 = 0;
      v118 = v229;
      if (v109)
      {
LABEL_157:
        v119 = (int)*(double *)(v118 + 48);
        if (*(_DWORD *)(a1 + 79556) == 1)
          v119 = 2;
        v120 = v119 * *(_DWORD *)(a1 + 48);
        v121 = v97 - v120;
        if (v97 <= v120)
        {
          v125 = v97 + ~v120;
          if (*(_BYTE *)(v118 + 64))
            v121 = v125;
          else
            v121 = 0;
        }
        else
        {
          *(_BYTE *)(v118 + 64) = 0;
        }
        goto LABEL_169;
      }
    }
    v121 = 0;
LABEL_169:
    if (_JTargetJBEstimator_ShouldContinueDiscardingFrames(a1, 1, v116, v116, v121))
    {
      v126 = v113 + 1;
      v127 = v116;
      do
      {
        v128 = (_DWORD *)(a1 + 4 * v127 + 30056);
        if (*v128)
        {
          v129 = *(unsigned int *)(a1 + 4 * v127 + 72176);
          --*(_DWORD *)(*v228 + 4 * v129);
          --*(_DWORD *)(a1 + 78176);
        }
        *v128 = 0;
        v127 = (v126 + *(_DWORD *)(v229 + 4)) % 1500;
        ++v126;
      }
      while ((_JTargetJBEstimator_ShouldContinueDiscardingFrames(a1, 1, v116, v127, v121) & 1) != 0);
    }
    v93 = v229;
    v107 = a1 + 56;
    goto LABEL_175;
  }
  v106 = 0;
LABEL_202:
  if (NewMinLag == v8)
  {
    _JTargetJBEstimator_AddLagToCdf(a1, a1 + 66128, v226, 0);
    if (*(_BYTE *)(v229 + 40))
      _JTargetJBEstimator_AddLagToCdf(a1, a1 + 72168, v226, 0);
  }
  else
  {
    *(double *)(v7 + 40) = NewMinLag - v8;
    if ((v106 & 1) == 0)
    {
      *(_DWORD *)(v7 + 48) = *((_DWORD *)v227 + 6);
      *(_DWORD *)(v93 + 68) = v226;
    }
    v143 = v93 + 72;
    bzero(*(void **)(v93 + 72), 4 * *(unsigned int *)(v93 + 6104));
    bzero((void *)(a1 + 66136), 0x1770uLL);
    *(_DWORD *)(v143 + 6008) = 0;
    bzero(*(void **)v15, 4 * *(unsigned int *)(v15 + 6032));
    bzero((void *)(a1 + 72176), 0x1770uLL);
    v144 = v229;
    *(_DWORD *)(v15 + 6008) = 0;
    if (*(int *)(v143 - 64) >= 1)
    {
      v145 = 0;
      do
      {
        v146 = (v145 + *(_DWORD *)(v144 + 4)) % 1500;
        if (*(_DWORD *)(a1 + 4 * v146 + 24056))
        {
          _JTargetJBEstimator_AddLagToCdf(a1, v143, v146, 1);
          v144 = v229;
        }
        if (*(_BYTE *)(v144 + 40) && *(_DWORD *)(a1 + 4 * v146 + 30056))
        {
          _JTargetJBEstimator_AddLagToCdf(a1, (uint64_t)v228, v146, 1);
          v144 = v229;
        }
        ++v145;
      }
      while (v145 < *(_DWORD *)(v144 + 8));
    }
  }
  v147 = micro() - v10;
  if (v147 > 0.005 && (int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    v148 = VRTraceErrorLogLevelToCSTR();
    v149 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      *(float *)buf = 4.8153e-34;
      v231 = v148;
      v232 = 2080;
      v233 = "_JTargetJBEstimator_AddLagToHistory";
      v234 = 1024;
      v235 = 1251;
      v236 = 2048;
      *(double *)v237 = v147;
      _os_log_impl(&dword_1D8A54000, v149, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Noted jump in AddLagToHistory %f", buf, 0x26u);
    }
  }
  v14 = a1 + 78208;
  a2 = v227;
  *(_DWORD *)(v7 + 52) = *((_DWORD *)v227 + 6);
  *(_BYTE *)(v7 + 56) = 0;
  v62 = 1;
  v21 = v229;
  v13 = a1 + 80872;
LABEL_221:
  v150 = *(double *)(v6 + 56);
  if (*(_BYTE *)(v6 + 200))
    v150 = fmax(*(double *)(a1 + 16) * (double)*(int *)(a1 + 12), fmax(*(double *)(a1 + 16) + *(double *)(a1 + 16), v150));
  v151 = a2[1];
  *(double *)(a1 + 24) = v150;
  v152 = *(_DWORD *)(v7 + 876);
  if (v152 < 1)
  {
    v154 = 0;
    v152 = 0;
  }
  else
  {
    v153 = *(_DWORD *)(v7 + 872);
    v154 = v153 % 50;
    if (v151 - *(double *)(a1 + 8 * (v153 % 50) + 80072) >= 21.0)
    {
      v155 = v153 + 1;
      while (--v152)
      {
        v154 = v155 % 50;
        v156 = v151 - *(double *)(a1 + 8 * (v155 % 50) + 80072);
        ++v155;
        if (v156 < 21.0)
          goto LABEL_231;
      }
      v154 = 0;
    }
  }
LABEL_231:
  *(_DWORD *)(v7 + 872) = v154;
  *(_DWORD *)(v7 + 876) = v152;
  if (*(_BYTE *)(v7 + 66))
  {
    v157 = 2;
    v158 = 0.5;
    v159 = 0.5;
  }
  else
  {
    if (!*(_BYTE *)(v7 + 64))
      goto LABEL_244;
    v157 = 3;
    v159 = 5.0;
    v158 = 0.15;
  }
  *(_DWORD *)(v7 + 944) = v157;
  *(double *)(v7 + 952) = v159;
  *(double *)(v7 + 968) = v158;
  *(_QWORD *)(v7 + 960) = 0x3F947AE147AE147BLL;
  if (v152 >= v157 && *(_BYTE *)(v7 + 920))
  {
    v160 = *(double *)(v14 + 1304);
    v161 = *(double *)(v21 + 16);
    v162 = *(double *)(a1 + 8 * v154 + 80072);
    *(_BYTE *)(v7 + 920) = 0;
    v163 = v150;
    *(double *)(v7 + 928) = v151;
    if (v152 < 1)
      goto LABEL_246;
    v164 = 0;
    v165 = v160 - v161;
    v166 = v152;
    while (1)
    {
      v167 = *(double *)(a1 + 8 * (v154 % 50) + 80072);
      if (vabdd_f64(v162, v167) >= v159)
      {
        if (++v164 >= v157)
        {
          v163 = fmin(v165 + 0.02, v158);
          *(double *)(v7 + 936) = v163;
          goto LABEL_246;
        }
      }
      else
      {
        v167 = v162;
      }
      ++v154;
      v162 = v167;
      if (!--v166)
      {
        v163 = v150;
        goto LABEL_246;
      }
    }
  }
LABEL_244:
  v163 = v150;
  if (v151 - *(double *)(v7 + 928) < 10.0)
    v163 = fmax(*(double *)(v7 + 936), v150);
LABEL_246:
  v168 = v150;
  if (*(_BYTE *)(v7 + 65))
    v168 = *(double *)(v6 + 64);
  v169 = fmax(v168, v163);
  *(_DWORD *)(v6 + 32) = 0;
  if (*(_DWORD *)(a1 + 8))
  {
    if (*(int *)v21 >= 51)
      *(_DWORD *)(a1 + 8) = 0;
    v169 = fmax(v169, *(double *)(a1 + 40));
  }
  v170 = *(double *)v6;
  v171 = *(double *)v6;
  if (!*(_DWORD *)(a1 + 4))
  {
    v176 = *(_DWORD *)(v21 + 6080);
    v177 = (*(_DWORD *)(v21 + 6104) - 1);
    if (*(_BYTE *)(v21 + 40))
    {
      LODWORD(v170) = *(_DWORD *)(a1 + 78176);
      v178 = (double)*(unint64_t *)&v170;
      v179 = *(_DWORD *)(a1 + 78200) - 1;
    }
    else
    {
      v179 = 0;
      v178 = 0.0;
    }
    v187 = v21 + 72;
    v188 = (double)v176;
    if (*(_DWORD *)(v21 + 6104) != 1)
    {
      v189 = (*(_DWORD *)(v21 + 6104) - 1);
      v190 = (double)v176;
      while (v176)
      {
        v191 = *(double *)(v21 + 6096) * v188;
        if (v190 < v191 || v189 > v177)
        {
          LODWORD(v177) = v189;
          if (!v179)
            goto LABEL_293;
          goto LABEL_286;
        }
        LODWORD(v191) = *(_DWORD *)(*(_QWORD *)v187 + 4 * v189);
        v190 = v190 - (double)*(unint64_t *)&v191;
        if (!(_DWORD)--v189)
        {
          LODWORD(v177) = 0;
          if (v179)
            goto LABEL_286;
          goto LABEL_293;
        }
      }
    }
    v190 = (double)v176;
    if (v179)
    {
LABEL_286:
      v193 = *(_DWORD *)(a1 + 78176);
      v194 = v179;
      v195 = v178;
      while (v193)
      {
        v196 = *(double *)(a1 + 78192) * (double)v193;
        if (v195 < v196 || v194 > (*(_DWORD *)(a1 + 78200) - 1))
        {
          v178 = v195;
          v179 = v194;
          break;
        }
        LODWORD(v196) = *(_DWORD *)(*v228 + 4 * v194);
        v195 = v195 - (double)*(unint64_t *)&v196;
        if (!(_DWORD)--v194)
        {
          v179 = 0;
          v178 = v195;
          break;
        }
      }
    }
LABEL_293:
    if (v176)
    {
      v197 = *(double *)(v21 + 6096) * v188;
      v198 = v190 < v197;
      if (*(_BYTE *)(v21 + 40) && v179 > v177)
      {
        v187 = a1 + 72168;
        LODWORD(v197) = *(_DWORD *)(a1 + 78176);
        v190 = *(double *)(a1 + 78192);
        v198 = v178 < v190 * (double)*(unint64_t *)&v197;
        LODWORD(v177) = v179;
      }
      v199 = v177 + 2;
      if (!v198)
        v199 = 1;
      if (*(_BYTE *)(v6 + 113))
        v200 = v199;
      else
        v200 = v177 + 1;
      LODWORD(v190) = *(_DWORD *)(v187 + 6032);
      v201 = *(double *)(v187 + 6016) / (double)*(unint64_t *)&v190 * (double)v200;
      v202 = v201;
      v203 = *(unsigned __int8 *)(v6 + 153);
      if (*(_BYTE *)(v6 + 153)
        && (*(_DWORD *)(v14 + 1232) == 1 || *(double *)(v6 + 48) - *(double *)(v14 + 1264) < *(double *)(v21 + 56)))
      {
        v204 = 0.2;
        if (v202 >= 0.2)
        {
          if (v202 < 0.35)
            v204 = 0.1;
          v205 = v202 + v204;
        }
        else
        {
          v205 = v202 * 1.3;
        }
        *(double *)(v6 + 40) = v205 - v202;
        *(_DWORD *)(v6 + 32) = 2;
        v202 = v205;
      }
      v206 = v202;
      v171 = fmin(*(double *)(v6 + 24), v206);
      if (v203)
      {
        v207 = v171;
        *(double *)(v14 + 1360) = v171;
        *(_OWORD *)(a1 + 80480) = 0u;
        *(_OWORD *)(a1 + 80496) = 0u;
        *(_QWORD *)(a1 + 80512) = 0;
        if (v152 >= 1)
        {
          v208 = 0;
          for (i = 0; i < v152; ++i)
          {
            v210 = *(double *)(a1 + 79672 + 8 * ((i + *(_DWORD *)(v7 + 872)) % 50)) - v207;
            if (v210 > 0.0)
            {
              v211 = (int)(v210 / dbl_1D9110980[*(_DWORD *)a1 == 0]);
              if (v211 <= 9)
              {
                ++v208;
                ++*(_DWORD *)(a1 + 4 * v211 + 80480);
                v152 = *(_DWORD *)(v7 + 876);
              }
            }
          }
          if (v208 >= 4)
          {
            v212 = 0;
            v213 = 0;
            v214 = 0;
            v215 = 100 * v208;
            v216 = v215;
            do
            {
              v213 += *(_DWORD *)(a1 + 80480 + 4 * v212++);
              if (100 * v213 > v216 / 10)
                v214 = v212;
              v216 += v215;
            }
            while (v212 != 10);
            *(double *)(v14 + 1360) = v207 + (double)v214 * dbl_1D9110980[*(_DWORD *)a1 == 0];
          }
        }
      }
    }
  }
  *(double *)v6 = v171;
  if (*(_QWORD *)(v6 + 160))
  {
    v172 = *(uint64_t (**)(void))(v6 + 184);
    if (*(_QWORD *)(v6 + 192) && v172 && (v172() & 0x80000000) != 0 && (int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      v222 = VRTraceErrorLogLevelToCSTR();
      v223 = *MEMORY[0x1E0CF2758];
      v224 = *MEMORY[0x1E0CF2758];
      if (*MEMORY[0x1E0CF2748])
      {
        if (os_log_type_enabled(v224, OS_LOG_TYPE_DEFAULT))
        {
          *(float *)buf = 4.8152e-34;
          v231 = v222;
          v232 = 2080;
          v233 = "_JTargetJBEstimator_GetJBTargetFromEstimatedTarget";
          v234 = 1024;
          v235 = 1382;
          _os_log_impl(&dword_1D8A54000, v223, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Failed to update the target size estimated prior to synchronization", buf, 0x1Cu);
        }
      }
      else if (os_log_type_enabled(v224, OS_LOG_TYPE_DEBUG))
      {
        JTargetJBEstimator_Process_cold_1();
      }
    }
    *(double *)v6 = v171;
    v173 = *(double *)(v6 + 8);
    *(float *)buf = v173;
    v174 = *(double *)v6;
    v175 = v151;
    VCJBTargetEstimatorSynchronizer_GetSyncTarget(*(_QWORD *)(v6 + 160), *(unsigned __int8 *)(v13 + 280), (float *)buf, v174, v175);
    *(double *)(v6 + 8) = *(float *)buf;
    if (*(double *)v6 != *(double *)(v6 + 8))
    {
      *(_DWORD *)(v6 + 32) = 3;
      *(double *)(v6 + 40) = *(double *)(v6 + 8) - *(double *)v6;
    }
    v21 = v229;
  }
  else
  {
    *(_QWORD *)(v6 + 8) = *(_QWORD *)v6;
  }
  *(double *)(v6 + 16) = v169;
  if (v150 < v169 && v171 < v169)
  {
    *(_DWORD *)(v6 + 32) = 1;
    *(double *)(v6 + 40) = (float)(v169 - v171);
  }
  *(_DWORD *)(v13 + 24) = *(_DWORD *)a1;
  *(_QWORD *)(v13 + 32) = *(_QWORD *)v14;
  *(_OWORD *)(v13 + 40) = *(_OWORD *)(v21 + 16);
  v181 = *(double *)(v14 + 16) * 4.0 + 0.0500000007;
  v182 = 0.5;
  if (v181 <= 0.5)
    v182 = *(double *)(v14 + 16) * 4.0 + 0.0500000007;
  *(double *)(v13 + 56) = v181;
  *(double *)(v13 + 64) = v182;
  *(_DWORD *)(v13 + 72) = *(_DWORD *)(v14 + 1348);
  v183 = *(_QWORD *)(v7 + 40);
  *(_QWORD *)(v13 + 80) = *(_QWORD *)(v21 + 32);
  *(_QWORD *)(v13 + 88) = v183;
  v184 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)(v13 + 96) = *(_QWORD *)(v14 + 1360);
  *(_QWORD *)(v13 + 104) = v184;
  v185 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(v13 + 112) = *(_QWORD *)v6;
  *(_QWORD *)(v13 + 120) = v185;
  *(_QWORD *)(v13 + 128) = *(_QWORD *)(v6 + 24);
  return v62;
}

double _JTargetJBEstimator_GetNewMinLag(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 80731;
  v3 = a1 + 66072;
  v4 = *(double *)(a1 + 66072);
  v5 = fmin(a2, v4);
  if (!*(_BYTE *)(a1 + 80731))
    return v5;
  if (v5 >= v4)
    return v4;
  _JTargetJBEstimation_CalculateMeanAndStdev(a1);
  v6 = *(double *)(v2 + 85);
  v7 = fmin(fmax(2.0 - v6, 1.8), 2.2);
  *(double *)(v2 + 101) = v7;
  v8 = *(double *)(v2 + 69) - v7 * *(double *)(v2 + 77);
  *(double *)(v2 + 109) = v8;
  if (!*(_BYTE *)(v2 + 133) || fabs(v6) > 2.2 || fabs(*(double *)(v2 + 93)) > 1.2)
    return v5;
  if (v5 >= v8)
    return v5;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    v9 = VRTraceErrorLogLevelToCSTR();
    v10 = *MEMORY[0x1E0CF2758];
    v11 = *MEMORY[0x1E0CF2758];
    if (*MEMORY[0x1E0CF2748])
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *(_DWORD *)(v3 + 13576);
        v13 = *(_QWORD *)(v2 + 77);
        v14 = *(_QWORD *)(v2 + 69);
        v15 = *(_QWORD *)(v2 + 101);
        v16 = *(_QWORD *)(v2 + 85);
        v17 = *(_QWORD *)(v2 + 93);
        v25 = 136317954;
        v26 = v9;
        v27 = 2080;
        v28 = "_JTargetJBEstimator_GetNewMinLag";
        v29 = 1024;
        v30 = 555;
        v31 = 1024;
        v32 = v12;
        v33 = 2048;
        v34 = v13;
        v35 = 2048;
        v36 = v14;
        v37 = 2048;
        v38 = v15;
        v39 = 2048;
        v40 = v16;
        v41 = 2048;
        v42 = v17;
        v43 = 2048;
        v44 = v8;
        v45 = 2048;
        v46 = v5;
        v47 = 2048;
        v48 = v4;
        _os_log_impl(&dword_1D8A54000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Lag is not statistically relevant. LastMinTimestamp=%d, stdev=%f, mean=%f, stdevMult=%f, skew=%f, kurtosis=%f, threshold=%f, candMinLag=%f, finalMinLag=%f", (uint8_t *)&v25, 0x72u);
      }
    }
    else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      v19 = *(_DWORD *)(v3 + 13576);
      v20 = *(_QWORD *)(v2 + 77);
      v21 = *(_QWORD *)(v2 + 69);
      v22 = *(_QWORD *)(v2 + 101);
      v23 = *(_QWORD *)(v2 + 85);
      v24 = *(_QWORD *)(v2 + 93);
      v25 = 136317954;
      v26 = v9;
      v27 = 2080;
      v28 = "_JTargetJBEstimator_GetNewMinLag";
      v29 = 1024;
      v30 = 555;
      v31 = 1024;
      v32 = v19;
      v33 = 2048;
      v34 = v20;
      v35 = 2048;
      v36 = v21;
      v37 = 2048;
      v38 = v22;
      v39 = 2048;
      v40 = v23;
      v41 = 2048;
      v42 = v24;
      v43 = 2048;
      v44 = v8;
      v45 = 2048;
      v46 = v5;
      v47 = 2048;
      v48 = v4;
      _os_log_debug_impl(&dword_1D8A54000, v10, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Lag is not statistically relevant. LastMinTimestamp=%d, stdev=%f, mean=%f, stdevMult=%f, skew=%f, kurtosis=%f, threshold=%f, candMinLag=%f, finalMinLag=%f", (uint8_t *)&v25, 0x72u);
    }
  }
  return v4;
}

void _JTargetJBEstimator_AddLagToCdf(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  double v4;
  double v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  if (a3 >= 0x5DC)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        _JTargetJBEstimator_AddLagToCdf_cold_1();
    }
  }
  else
  {
    v4 = *(double *)(a2 + 6016);
    v5 = fmin(*(double *)(a1 + 8 * a3 + 56) - *(double *)(a1 + 66072), v4);
    if (a4)
      v5 = fmin(v5 + *(double *)(a1 + 79640), v4);
    if (v4 == 0.0)
    {
      v6 = *(_DWORD *)(a2 + 6032);
      v7 = v6 - 1;
    }
    else
    {
      if (v5 < 0.0)
        v5 = 0.0;
      v6 = *(_DWORD *)(a2 + 6032);
      v7 = (v5 * (double)v6 / v4);
    }
    v8 = v7 - (v7 == v6);
    ++*(_DWORD *)(*(_QWORD *)a2 + 4 * v8);
    *(_DWORD *)(a2 + 4 * a3 + 8) = v8;
    ++*(_DWORD *)(a2 + 6008);
  }
}

BOOL _JTargetJBEstimator_IsPacketBundled(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  _BOOL8 v4;
  char v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v2 = *(double *)(a1 + 8);
  v3 = *(double *)(a2 + 8);
  if (v2 == 0.0)
    goto LABEL_5;
  if (v3 - v2 > 0.003)
  {
    v4 = 0;
    *(_BYTE *)a1 = 0;
    goto LABEL_12;
  }
  v5 = *(_BYTE *)a1 + 1;
  *(_BYTE *)a1 = v5;
  if ((v5 & 1) == 0)
  {
LABEL_5:
    v4 = 0;
    goto LABEL_12;
  }
  v6 = *(_DWORD *)(a2 + 24);
  v7 = *(_DWORD *)(a1 + 4);
  v8 = *(_DWORD *)(a2 + 16);
  v9 = v8 + v7;
  v10 = v7 - v8;
  v4 = v6 == v9 || v6 == v10;
LABEL_12:
  *(double *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 24);
  return v4;
}

void _JTargetJBEstimator_AddCandidateSpikeToHistory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  uint64_t v16;
  const char *v17;

  *(_DWORD *)(a1 + 79440) = 1;
  v8 = *(_QWORD *)(a1 + 79624);
  v9 = *(double *)(a1 + 79632) * 1.25;
  *(double *)(a1 + 79488) = v9;
  *(_DWORD *)(a1 + 79496) = 0;
  *(_QWORD *)(a1 + 79560) = 0;
  v11 = *(double *)(a1 + 79600);
  v10 = *(double *)(a1 + 79608);
  *(double *)(a1 + 79512) = v11;
  *(double *)(a1 + 79520) = v10;
  v12 = *(double *)(a1 + 79616);
  *(double *)(a1 + 79504) = v12;
  *(_QWORD *)(a1 + 79536) = *(_QWORD *)(a1 + 80624);
  *(_DWORD *)(a1 + 79528) = 0;
  *(_QWORD *)(a1 + 79544) = 0;
  *(_QWORD *)(a1 + 79552) = 0;
  v13 = v12 + v9 * 2.0;
  v14 = fmax(v13, v10 + *(double *)(a1 + 79568));
  *(double *)(a1 + 79448) = v13;
  *(double *)(a1 + 79456) = v14;
  *(_QWORD *)(a1 + 79464) = v8;
  *(double *)(a1 + 79576) = v11;
  *(_QWORD *)(a1 + 79584) = v8;
  if (v11 - v10 > *(double *)(a1 + 80744))
    *(_DWORD *)(a1 + 80876) = 1;
  v15 = *(_DWORD *)(a1 + 79592);
  *(_DWORD *)(a1 + 80872) = v15;
  *(double *)(a1 + 80888) = v12;
  *(_BYTE *)(a1 + 80520) = 1;
  v16 = *(_QWORD *)(a1 + 80696);
  v17 = "JUMP";
  if (v15 == 2)
    v17 = "SLOPE";
  VRLogfilePrint(v16, "Entering %s SPIKE, earliest Lag = %f\n", a3, a4, a5, a6, a7, a8, (char)v17);
}

uint64_t _JTargetJBEstimator_ShouldContinueDiscardingFrames(uint64_t a1, int a2, int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5;
  int v6;
  _DWORD *v7;
  int *v8;
  int v9;
  double *v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  _BOOL4 v17;
  BOOL v18;
  int v19;
  int v20;
  unsigned int v21;

  v5 = 16;
  if (!a2)
    v5 = 17;
  v6 = *(unsigned __int8 *)(a1 + 66104 + v5);
  v7 = (_DWORD *)(a1 + 4 * a4);
  v8 = v7 + 6014;
  if (a2)
    v8 = v7 + 7514;
  v9 = *v8;
  v10 = (double *)(a1 + 66112);
  if (a2)
    v10 = (double *)(a1 + 66104);
  v11 = (int)*v10;
  if (*(_DWORD *)(a1 + 79556) == 1)
    v12 = 2;
  else
    v12 = v11;
  v13 = v12 * *(_DWORD *)(a1 + 48);
  v14 = v7[9014];
  v17 = v14 > v13 && v14 < a5 || v9 == 0;
  if (v9)
    v18 = v14 >= a5;
  else
    v18 = 0;
  v19 = !v18;
  if (v14 > ~v13 + a5)
    v20 = 1;
  else
    v20 = v19;
  if (v13 > a5)
    v21 = v20;
  else
    v21 = v19;
  if (v6)
    v21 = v17;
  if ((a3 + 1499) % 0x5DCu == a4)
    return 0;
  else
    return v21;
}

uint64_t _JTargetJBEstimator_RemoveElementFromHistory(uint64_t a1, int a2)
{
  _DWORD *v2;
  _DWORD *v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (_DWORD *)(a1 + 66056);
  v3 = (_DWORD *)(a1 + 4 * a2 + 24056);
  v4 = *v3;
  if ((_DWORD)v4)
  {
    v5 = *(double *)(a1 + 56 + 8 * a2);
    v4 = v5 <= *(double *)(a1 + 66072) || (unint64_t)(v5 >= *(double *)(a1 + 66080));
    v6 = *(unsigned int *)(a1 + 56 + 4 * a2 + 66080);
    --*(_DWORD *)(*(_QWORD *)(a1 + 66128) + 4 * v6);
    --*(_DWORD *)(a1 + 72136);
    LODWORD(v6) = (*v2)--;
    if ((int)v6 <= 15)
      *(_DWORD *)(a1 + 4) = 1;
  }
  *v3 = 0;
  if (*(_BYTE *)(a1 + 66096))
  {
    v7 = a1 + 4 * a2;
    if (*(_DWORD *)(v7 + 30056))
    {
      --*(_DWORD *)(*(_QWORD *)(a1 + 72168) + 4 * *(unsigned int *)(v7 + 72176));
      --*(_DWORD *)(a1 + 78176);
    }
  }
  *(_DWORD *)(a1 + 4 * a2 + 30056) = 0;
  return v4;
}

void VCEffectsManager_CapturedPixelBuffer(uint64_t a1, __CVBuffer *a2, __CVBuffer *a3, __int128 *a4, uint64_t a5)
{
  NSObject *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  const void *v26;
  __int128 v27;
  uint64_t v28;
  _QWORD block[7];
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  void (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  _BYTE buf[24];
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __CVBuffer *v45;
  __CVBuffer *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  v36 = 0;
  v37 = &v36;
  v38 = 0x2020000000;
  v39 = 0;
  v30 = 0;
  v31 = &v30;
  v32 = 0x3052000000;
  v33 = __Block_byref_object_copy__38;
  v34 = __Block_byref_object_dispose__38;
  v35 = 0;
  v10 = *(NSObject **)(a1 + 24);
  v11 = MEMORY[0x1E0C809B0];
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __VCEffectsManager_CapturedPixelBuffer_block_invoke;
  block[3] = &unk_1E9E555F0;
  block[4] = a1;
  block[5] = &v30;
  block[6] = &v36;
  dispatch_sync(v10, block);
  v12 = *((_DWORD *)v37 + 6);
  switch(v12)
  {
    case 1:
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        v17 = VRTraceErrorLogLevelToCSTR();
        v18 = *MEMORY[0x1E0CF2758];
        v19 = *MEMORY[0x1E0CF2758];
        if (*MEMORY[0x1E0CF2748])
        {
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = v17;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "VCEffectsManager_CapturedPixelBuffer";
            *(_WORD *)&buf[22] = 1024;
            LODWORD(v41) = 475;
            _os_log_impl(&dword_1D8A54000, v18, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Sending video frame to client to be processed", buf, 0x1Cu);
          }
        }
        else if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          VCEffectsManager_CapturedPixelBuffer_cold_4();
        }
      }
      v24 = v31[5];
      v27 = *a4;
      v28 = *((_QWORD *)a4 + 2);
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 48));
      ++*(_DWORD *)(a1 + 188);
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 48));
      CVPixelBufferRetain(a2);
      CVPixelBufferRetain(a3);
      v25 = *(NSObject **)(a1 + 24);
      *(_QWORD *)buf = v11;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = ___VCEffectsManager_PixelBufferToClient_block_invoke;
      v41 = &unk_1E9E58A50;
      v47 = v27;
      v48 = v28;
      v45 = a2;
      v46 = a3;
      v42 = a1;
      v43 = a5;
      v44 = v24;
      dispatch_async(v25, buf);
      break;
    case 3:
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        v20 = VRTraceErrorLogLevelToCSTR();
        v14 = *MEMORY[0x1E0CF2758];
        v21 = *MEMORY[0x1E0CF2758];
        if (!*MEMORY[0x1E0CF2748])
        {
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
            VCEffectsManager_CapturedPixelBuffer_cold_3();
          break;
        }
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v20;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "VCEffectsManager_CapturedPixelBuffer";
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v41) = 470;
          v16 = " [%s] %s:%d Sending video frame to AVC to process";
          goto LABEL_21;
        }
      }
      break;
    case 2:
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        v13 = VRTraceErrorLogLevelToCSTR();
        v14 = *MEMORY[0x1E0CF2758];
        v15 = *MEMORY[0x1E0CF2758];
        if (!*MEMORY[0x1E0CF2748])
        {
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
            VCEffectsManager_CapturedPixelBuffer_cold_2();
          break;
        }
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v13;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "VCEffectsManager_CapturedPixelBuffer";
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v41) = 466;
          v16 = " [%s] %s:%d Sending video frame to extension to process";
LABEL_21:
          _os_log_impl(&dword_1D8A54000, v14, OS_LOG_TYPE_DEFAULT, v16, buf, 0x1Cu);
        }
      }
      break;
    default:
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        v22 = VRTraceErrorLogLevelToCSTR();
        v14 = *MEMORY[0x1E0CF2758];
        v23 = *MEMORY[0x1E0CF2758];
        if (!*MEMORY[0x1E0CF2748])
        {
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
            VCEffectsManager_CapturedPixelBuffer_cold_1();
          break;
        }
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v22;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "VCEffectsManager_CapturedPixelBuffer";
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v41) = 479;
          v16 = " [%s] %s:%d Dropping video frame due to effects being disabled";
          goto LABEL_21;
        }
      }
      break;
  }
  v26 = (const void *)v31[5];
  if (v26)
    CFRelease(v26);
  _Block_object_dispose(&v30, 8);
  _Block_object_dispose(&v36, 8);
}

void sub_1D8FB64A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  _Unwind_Resume(exception_object);
}

uint64_t _VCAudioPlayer_InitializeBuffers(_DWORD *a1, int a2)
{
  int *v4;
  unint64_t v5;
  int v6;
  int v7;
  uint64_t PlaybackBuffer;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1 + 13140;
  v5 = (unint64_t)(a1 + 16);
  _VCAudioPlayer_FreePlaybackBuffer((unint64_t)(a1 + 16));
  _VCAudioPlayer_FreePlaybackBuffer((unint64_t)(a1 + 50));
  _VCAudioPlayer_FreePlaybackBuffer((unint64_t)(a1 + 82));
  a1[14] = 20 * a2;
  a1[48] = 20 * a2;
  a1[80] = a2;
  v7 = *v4;
  v6 = v4[1];
  a1[40] = v6;
  a1[74] = v6;
  a1[106] = v6;
  PlaybackBuffer = _VCAudioPlayer_AllocatePlaybackBuffer(v5, v7 * 20 * a2);
  if ((PlaybackBuffer & 0x80000000) != 0)
  {
    v11 = PlaybackBuffer;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        _VCAudioPlayer_InitializeBuffers_cold_1();
    }
  }
  else
  {
    v9 = _VCAudioPlayer_AllocatePlaybackBuffer((unint64_t)(a1 + 50), *v4 * a1[48]);
    if ((v9 & 0x80000000) != 0)
    {
      v11 = v9;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          _VCAudioPlayer_InitializeBuffers_cold_2();
      }
    }
    else
    {
      v10 = _VCAudioPlayer_AllocatePlaybackBuffer((unint64_t)(a1 + 82), *v4 * a1[80]);
      if ((v10 & 0x80000000) != 0)
      {
        v11 = v10;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            _VCAudioPlayer_InitializeBuffers_cold_3();
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return v11;
}

void _VCAudioPlayer_FreePlaybackBuffer(unint64_t a1)
{
  _DWORD *v1;
  unsigned __int8 v3;
  unint64_t v4;

  v1 = (_DWORD *)(a1 + 96);
  if (*(int *)(a1 + 96) >= 1)
  {
    v3 = 0;
    while (1)
    {
      v4 = a1 + 24 * v3;
      if (v4 < a1 || v4 + 24 > (unint64_t)v1)
        break;
      free(*(void **)v4);
      ++v3;
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      if (*v1 <= (int)v3)
        return;
    }
    __break(0x5519u);
  }
}

uint64_t _VCAudioPlayer_AllocatePlaybackBuffer(unint64_t a1, int a2)
{
  unint64_t v2;
  unsigned __int8 v5;
  size_t v6;
  uint64_t result;
  uint64_t *v8;
  unint64_t v10;

  v2 = a1 + 96;
  if (*(int *)(a1 + 96) < 1)
    return 0;
  v5 = 0;
  v6 = a2;
  while (1)
  {
    result = (uint64_t)malloc_type_malloc(v6, 0xBAF3D555uLL);
    if (!result)
      return 2147549187;
    if (a2 < 0)
      break;
    v8 = (uint64_t *)(a1 + 24 * v5);
    if ((unint64_t)v8 < a1 || (unint64_t)(v8 + 3) > v2)
      break;
    *v8 = result;
    v10 = a1 + 24 * v5;
    *(_QWORD *)(v10 + 8) = v6;
    *(_QWORD *)(v10 + 16) = 0;
    if (*(_DWORD *)(a1 + 96) <= (int)++v5)
      return 0;
  }
  __break(0x5519u);
  return result;
}

uint64_t VCAudioPlayer_Initialize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  double v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  double v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int *v21;
  uint64_t v22;
  int v23;
  double v24;
  int v25;
  uint64_t v26;
  _BOOL4 BoolValueForKey;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint8_t buf[4];
  uint64_t v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  int v43;
  __int16 v44;
  _BYTE v45[10];
  __int16 v46;
  int v47;
  __int16 v48;
  unsigned int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCAudioPlayer_Initialize_cold_1();
    }
    return 1;
  }
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_DWORD *)(a2 + 24))
  {
    v5 = 2;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 64);
    v5 = 2;
    if (v6)
    {
      if (*(_DWORD *)(v6 + 4) == 119)
        v5 = 4;
      else
        v5 = 2;
    }
  }
  v7 = *(_DWORD *)(v4 + 28);
  if (v7 - 1 >= v5)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 2)
    {
      VRTraceErrorLogLevelToCSTR();
      if ((VRTraceIsOSFaultDisabled() & 1) != 0)
      {
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          VCAudioPlayer_Initialize_cold_7();
      }
      else if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_FAULT))
      {
        VCAudioPlayer_Initialize_cold_8();
      }
    }
    return 1;
  }
  if (v4 >= v4 + 48)
    goto LABEL_55;
  v8 = *(double *)v4;
  v9 = *(double *)v4;
  v10 = *(_DWORD *)(v4 + 24);
  v11 = *(_DWORD *)(v4 + 12);
  v12 = *(_DWORD *)(v4 + 40);
  *(_DWORD *)(a1 + 52552) = v9;
  *(_DWORD *)(a1 + 52556) = v12;
  *(_BYTE *)(a1 + 52568) = v11 & 1;
  *(_DWORD *)(a1 + 52560) = v10;
  *(_DWORD *)(a1 + 52564) = v7;
  v13 = (double)v12 / v8;
  *(double *)(a1 + 52576) = v13;
  *(double *)(a1 + 52920) = v13 * 0.5;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    v14 = VRTraceErrorLogLevelToCSTR();
    v15 = *MEMORY[0x1E0CF2758];
    v16 = *MEMORY[0x1E0CF2758];
    if (*MEMORY[0x1E0CF2748])
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *(_QWORD *)(a1 + 52920);
        *(_DWORD *)buf = 136315906;
        v39 = v14;
        v40 = 2080;
        v41 = "_VCAudioPlayer_SetPlaybackFormat";
        v42 = 1024;
        v43 = 194;
        v44 = 2048;
        *(_QWORD *)v45 = v17;
        _os_log_impl(&dword_1D8A54000, v15, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d holeDetectionThreshold=%f", buf, 0x26u);
      }
    }
    else if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      VCAudioPlayer_Initialize_cold_6();
    }
  }
  v19 = _VCAudioPlayer_InitializeBuffers((_DWORD *)a1, *(_DWORD *)(v4 + 40));
  if ((_DWORD)v19)
  {
    v18 = v19;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCAudioPlayer_Initialize_cold_5();
    }
    goto LABEL_52;
  }
  v20 = Crossfade_Initialize(a1 + 512, (int)((double)v9 * 0.01), v7 * v10, v11 & 1);
  if ((_DWORD)v20)
  {
    v18 = v20;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      {
        VCAudioPlayer_Initialize_cold_4();
        if ((v18 & 0x80000000) == 0)
          return v18;
LABEL_52:
        VCAudioPlayer_Finalize(a1);
        return v18;
      }
    }
LABEL_51:
    if ((v18 & 0x80000000) == 0)
      return v18;
    goto LABEL_52;
  }
  VCSilencePredictor_Initialize(a1 + 552);
  if (a2 + 104 < a2)
LABEL_55:
    __break(0x5519u);
  *(_QWORD *)(a1 + 35568) = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 35601) = *(_BYTE *)(a2 + 96);
  *(_BYTE *)(a1 + 35602) = VCDefaults_GetBoolValueForKey(CFSTR("enableDeferredNetworkUplinkClockUpdate"), 1);
  VCAudioPlayer_SetMaxHoleSize(a1, 0.109999999);
  v21 = (int *)(a1 + 808);
  v22 = VCTimescale_InitializeTimescaleAlgo((int *)(a1 + 808), v9, *(unsigned int *)(v4 + 40), v7, *(unsigned __int8 *)(a1 + 52568), *(_DWORD *)(a2 + 24));
  if ((_DWORD)v22)
  {
    v18 = v22;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      {
        VCAudioPlayer_Initialize_cold_3();
        if ((v18 & 0x80000000) == 0)
          return v18;
        goto LABEL_52;
      }
    }
    goto LABEL_51;
  }
  _VCAudioPlayer_InitializeQueueSteeringAlgo(a1, a2);
  _VCAudioPlayer_ResetVariables(a1);
  bzero((void *)(a1 + 52928), 0x2A8uLL);
  *(_DWORD *)(a1 + 52928) = 0;
  *(_BYTE *)(a1 + 52932) = 1;
  v23 = *(_DWORD *)(a2 + 56);
  v24 = *(double *)(a1 + 52576);
  *(double *)(a1 + 52608) = v24 + v24;
  v25 = (int)(0.2 / v24);
  *(_WORD *)(a1 + 52616) = v25;
  *(_WORD *)(a1 + 52618) = (int)(0.5 / v24);
  *(_WORD *)(a1 + 52622) = (int)(1.0 / v24);
  *(_WORD *)(a1 + 52620) = v25;
  *(double *)(a1 + 52624) = v24;
  *(double *)(a1 + 52632) = v24 + v24;
  *(_BYTE *)(a1 + 52600) = v23 == 20;
  v26 = *(_QWORD *)(a2 + 16);
  BoolValueForKey = VCDefaults_GetBoolValueForKey(CFSTR("enableAudioPlayerDump"), 0);
  *(_BYTE *)(a1 + 53608) = BoolValueForKey;
  if (BoolValueForKey)
    *(_QWORD *)(a1 + 53616) = LogDump_OpenLog(v26, (uint64_t)"VCAudioPlayer", (uint64_t)".csv", (char)"STime,FrameSeqNum,FrameTimestamp,SampleRate,FrameSPF,FrameDtx,FrameSize,IsREDFrame,InSilence (low energy),SilencePredicted,FrameCodec,QueuedSamples,LeftOverSamples,AvgQSize,DesiredQSize,IsTargetCovered,TargetBoostingMode,TargetBoostingInSec,SpeechOnsetProtected,SpeechOffsetProtected,SamplesToAdjust,SamplesAdjusted,SamplesRequested,LeftOverSamplesOutput,SamplesNeed,PlayerMode,QueueGrowthMode,DecodeType,SamplesDecoded,DecSkip:Adjust,DecSkip:SamplesOut,SamplesIn,SamplesOut,InputBufferSampleCount,OutputBufferSampleCount,InputBufferTS,OutputBufferTS,IsNilDecode,NilDecodeCount,IsErasure,ErasuresCount,PacketLifeTime,PacketLifetimeCDFBin,PacketLifeTime5Perc,PacketLifeTime10Perc,PacketLifeTimeAvg,PacketLifeTime90Perc,InterArrivalTime,PacketLifetimeIsTrendingUp,PacketLifetimeIsTrendingDown,PacketLifetimeZeroCount,NumberOfPacketsWithHighInterarrival,AvgQSizeInSec,DesiredQSizeInSec,Underflow,ErasuresCountShortWindow,ErasuresCountLongWindow,QueueSteeringOffset,ShouldGrowQueue,ShouldShrinkQueue,ShouldProactivelyShrinkQueue,CurrentIndex,packetLifetimeIsLow,SpikeNeedsProtection,MinimumQueueSizeProtected,QueueSteeringIsPositive,NewSpikeDetected,ExitedSpike,queueGrewDueToSpike,SpikeDetected,SteeringNegativeWithErasures,LowQueueSize,HighQueueSize,ErasuresLongTermIsZero,ErasuresShortTermIsZero,ErasureReduced,Te"
                                      "nPercentileHigherThanMin,FivePercentileHigherThanMin,NinetyPercentileHigherThanTar"
                                      "get,PacketLifetimeAvgHigherThanTarget,NegativeQueueSteeringWithErasures,SomePacket"
                                      "sHadZeroPacketLifetime,HasHighInterarrivalFrames,FirstSpeechPacketLifetime,IsNorma"
                                      "lPacketFlow,JitterIsLow,MinQueueSizeBuildThreshold,IsMinQueueRebuilt,QueueSizeThre"
                                      "sholdMet,PacketLifetimeThresholdMet,ShouldExitQueueGrowth,Channel1Rms,Channel2Rms,"
                                      "Channel1RmsAvg,Channel2RmsAvg,EnergyDecayFactor,Rms,RmsAvg,SilenceAvgFrameSize,Sil"
                                      "enceMaxFrameSizeLimit,AudioAvgFrameSize,AudioMinFrameSizeLimit,SilencePredictionEnabled,\n",
                                9,
                                (char)"1.0");
  VCAudioPlayerDTMF_Initialize(a1, a2);
  if ((_DWORD)v28)
  {
    v18 = v28;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      {
        VCAudioPlayer_Initialize_cold_2();
        if ((v18 & 0x80000000) == 0)
          return v18;
        goto LABEL_52;
      }
    }
    goto LABEL_51;
  }
  *(_QWORD *)(a1 + 53808) = VCAudioDump_Create(3u, *(_QWORD *)(a2 + 64));
  *(_QWORD *)(a1 + 53816) = VCAudioDump_Create(4u, *(_QWORD *)(a2 + 64));
  *(_OWORD *)(a1 + 53824) = *(_OWORD *)(a2 + 80);
  if ((int)VRTraceGetErrorLogLevelForModule() < 7)
    return 0;
  v29 = VRTraceErrorLogLevelToCSTR();
  v30 = *MEMORY[0x1E0CF2758];
  v18 = 0;
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
  {
    v31 = *(_DWORD *)(a2 + 28);
    v32 = *v21;
    v33 = *(unsigned __int8 *)(a2 + 48);
    v34 = *(_DWORD *)(a2 + 56);
    v35 = *(unsigned __int8 *)(a2 + 72);
    v36 = *(unsigned __int8 *)(a2 + 96);
    *(_DWORD *)buf = 136317698;
    v39 = v29;
    v40 = 2080;
    v41 = "VCAudioPlayer_Initialize";
    v42 = 1024;
    v43 = 361;
    v44 = 1024;
    *(_DWORD *)v45 = v9;
    *(_WORD *)&v45[4] = 1024;
    *(_DWORD *)&v45[6] = v31;
    v46 = 1024;
    v47 = v32;
    v48 = 1024;
    v49 = v7;
    v50 = 1024;
    v51 = v33;
    v52 = 1024;
    v53 = v34;
    v54 = 1024;
    v55 = v35;
    v56 = 1024;
    v57 = v36;
    _os_log_impl(&dword_1D8A54000, v30, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Audio Player initialized with sampleRate=%d, bufferQueueManagementMode=%d, timescaleAlgorithm=%d, channelsPerFrame=%d dtmfTonePlaybackEnabled=%d minJitterBufferQueueSize=%d dtmfEventCallbacksEnabled=%d enableEnhancedJBAdaptations=%d", buf, 0x4Cu);
    return 0;
  }
  return v18;
}

void _VCAudioPlayer_InitializeQueueSteeringAlgo(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  __int128 v10;
  uint8_t buf[4];
  uint64_t v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = a1 + 35592;
  v3 = (_QWORD *)(a1 + 35608);
  v4 = *(_QWORD *)(a1 + 35608);
  if (a1 + 35608 > (unint64_t)(a1 + 52440))
    __break(0x5519u);
  v7 = a1 + 51688;
  v10 = *(_OWORD *)(a1 + 51688);
  bzero((void *)(a1 + 35608), 0x41C0uLL);
  *(_DWORD *)(v2 + 16040) = (4 * *(_DWORD *)(v7 + 864)) / *(_DWORD *)(v7 + 868);
  *(_DWORD *)(v2 + 16036) = 1;
  if (a2)
  {
    *(_DWORD *)(v7 + 816) = VCDefaults_GetIntValueForKey(CFSTR("audioQueueManagementMode"), *(unsigned int *)(a2 + 28));
    *(_OWORD *)(a1 + 52512) = *(_OWORD *)(a2 + 32);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      v8 = VRTraceErrorLogLevelToCSTR();
      v9 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        v12 = v8;
        v13 = 2080;
        v14 = "_VCAudioPlayer_InitializeQueueSteeringAlgo";
        v15 = 1024;
        v16 = 258;
        _os_log_impl(&dword_1D8A54000, v9, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Queue steering callbacks configured", buf, 0x1Cu);
      }
    }
    *(double *)v7 = VCDefaults_GetDoubleValueForKey(CFSTR("audioPlayerQueueTrendingUpThreshold"), 1.09);
    *(double *)(v7 + 8) = VCDefaults_GetDoubleValueForKey(CFSTR("audioPlayerQueueTrendingDownThreshold"), 0.91);
    *(double *)v2 = VCDefaults_GetDoubleValueForKey(CFSTR("audioPlayerSpeechOnsetOffsetProtectionTime"), 0.2);
    *(double *)(v2 + 16) = VCDefaults_GetDoubleValueForKey(CFSTR("audioPlayerQueueSteeringMultiplier"), 0.3);
  }
  else
  {
    *v3 = v4;
    *(_OWORD *)v7 = v10;
  }
}

void _VCAudioPlayer_ResetVariables(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 50) = 0;
  v2 = a1 + 35520;
  *(_DWORD *)(a1 + 35540) = 0;
  v3 = a1 + 52464;
  *(_DWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  _VCAudioPlayer_ResetPlaybackBuffer(a1 + 64);
  _VCAudioPlayer_ResetPlaybackBuffer(a1 + 200);
  _VCAudioPlayer_ResetPlaybackBuffer(a1 + 328);
  *(_WORD *)(a1 + 780) = 257;
  *(_QWORD *)(v3 + 128) = 0;
  *(_BYTE *)v3 = 0;
  *(_QWORD *)(a1 + 792) = 0;
  *(_QWORD *)(a1 + 784) = 0;
  *(_BYTE *)(a1 + 29) = 1;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(v2 + 20) = 0;
  *(_BYTE *)(v3 + 64) = 0;
  *(_QWORD *)v2 = 0;
}

void VCAudioPlayer_Finalize(uint64_t a1)
{
  int ErrorLogLevelForModule;
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (a1)
  {
    if (ErrorLogLevelForModule >= 7)
    {
      v3 = VRTraceErrorLogLevelToCSTR();
      v4 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v5 = 136315650;
        v6 = v3;
        v7 = 2080;
        v8 = "VCAudioPlayer_Finalize";
        v9 = 1024;
        v10 = 387;
        _os_log_impl(&dword_1D8A54000, v4, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Finalizing Audio Player", (uint8_t *)&v5, 0x1Cu);
      }
    }
    *(_QWORD *)(a1 + 35568) = 0;
    Crossfade_Finalize(a1 + 512);
    _VCAudioPlayer_FreePlaybackBuffer(a1 + 64);
    _VCAudioPlayer_FreePlaybackBuffer(a1 + 200);
    _VCAudioPlayer_FreePlaybackBuffer(a1 + 328);
    VCTimescale_Finalize(a1 + 808);
    if (*(_BYTE *)(a1 + 53608))
      LogDump_CloseLog(*(_QWORD *)(a1 + 53616));
    VCAudioPlayerDTMF_Finalize(a1 + 53704);
    VCAudioDump_Finalize((void **)(a1 + 53808));
    VCAudioDump_Finalize((void **)(a1 + 53816));
  }
  else if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioPlayer_Finalize_cold_1();
  }
}

void VCAudioPlayer_NewStream(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    _VCAudioPlayer_ResetVariables(a1);
    _VCAudioPlayer_InitializeQueueSteeringAlgo(a1, 0);
    *(_BYTE *)(a1 + 176) = 0;
    *(_BYTE *)(a1 + 312) = 0;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      v2 = VRTraceErrorLogLevelToCSTR();
      v3 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v4 = 136315650;
        v5 = v2;
        v6 = 2080;
        v7 = "VCAudioPlayer_NewStream";
        v8 = 1024;
        v9 = 378;
        _os_log_impl(&dword_1D8A54000, v3, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d New Stream", (uint8_t *)&v4, 0x1Cu);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioPlayer_NewStream_cold_1();
  }
}

BOOL VCAudioPlayer_IsUnderrunQueueBoostEnabled(uint64_t a1)
{
  _BOOL8 result;

  if (a1)
    return *(_BYTE *)(a1 + 52464) != 0;
  if ((int)VRTraceGetErrorLogLevelForModule() < 3)
    return 0;
  VRTraceErrorLogLevelToCSTR();
  result = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR);
  if (result)
  {
    VCAudioPlayer_IsUnderrunQueueBoostEnabled_cold_1();
    return 0;
  }
  return result;
}

void VCAudioPlayer_ForceDecoderReset(uint64_t a1)
{
  if (a1)
  {
    *(_BYTE *)(a1 + 28) = 1;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioPlayer_ForceDecoderReset_cold_1();
  }
}

float VCAudioPlayer_GetAverageInterarrivalTimeForWindow(uint64_t a1)
{
  if (a1)
    return *(float *)(a1 + 52796);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioPlayer_GetAverageInterarrivalTimeForWindow_cold_1();
  }
  return NAN;
}

_DWORD *VCAudioPlayer_GetStatistics(_DWORD *a1)
{
  _DWORD *v1;
  float *v2;
  _DWORD *v3;
  int v4;
  int v5;
  int v6;
  int v7;

  if (a1)
  {
    v1 = a1 + 13162;
    v2 = (float *)(a1 + 8888);
    v3 = a1 + 13160;
    v4 = a1[77];
    v5 = a1[42];
    a1[13162] = a1[43];
    a1[13163] = v4;
    v6 = a1[76] + v5;
    v7 = VCTimescale_TailSize((uint64_t)(a1 + 202));
    v1[4] = v6 + v7;
    v1[5] = (int)(float)(*v2 + (float)(v6 + v7));
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCAudioPlayer_GetStatistics_cold_1();
    }
    return 0;
  }
  return v3;
}

uint64_t VCAudioPlayer_GetLeftOverSamples(uint64_t a1)
{
  int v1;
  uint64_t result;

  if (a1)
  {
    v1 = *(_DWORD *)(a1 + 304) + *(_DWORD *)(a1 + 168);
    return v1 + VCTimescale_TailSize(a1 + 808);
  }
  if ((int)VRTraceGetErrorLogLevelForModule() < 3)
    return 0;
  VRTraceErrorLogLevelToCSTR();
  result = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR);
  if ((_DWORD)result)
  {
    VCAudioPlayer_GetLeftOverSamples_cold_1();
    return 0;
  }
  return result;
}

void VCAudioPlayer_ResetReportingMetrics(uint64_t a1)
{
  uint64_t v2;
  int AppBooleanValue;
  CFPropertyListRef v4;
  Boolean keyExistsAndHasValidFormat;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = a1 + 52716;
    keyExistsAndHasValidFormat = 0;
    AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("printMissingAudioPackets"), CFSTR("com.apple.VideoConference"), &keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat)
      *(_DWORD *)(v2 + 92) = AppBooleanValue;
    v4 = CFPreferencesCopyAppValue(CFSTR("forceNOLOG"), CFSTR("com.apple.VideoConference"));
    if (v4)
    {
      *(_DWORD *)(v2 + 88) = 0;
      CFRelease(v4);
    }
    else
    {
      *(_DWORD *)(v2 + 88) = 1;
    }
    *(_DWORD *)(v2 + 64) = 0;
    *(_OWORD *)(a1 + 52672) = 0u;
    *(_OWORD *)(a1 + 52688) = 0u;
    *(_OWORD *)(a1 + 52700) = 0u;
    *(_QWORD *)(a1 + 52728) = 0;
    *(_QWORD *)(a1 + 52736) = 0;
    *(_QWORD *)(a1 + 52720) = 0;
    *(_DWORD *)(a1 + 52744) = 0;
    *(_QWORD *)(a1 + 52760) = 0;
    *(_QWORD *)(a1 + 52768) = 0;
    *(_QWORD *)(a1 + 52752) = 0;
    *(_DWORD *)(v2 + 68) = 0;
    *(_DWORD *)(v2 + 72) = 0;
    *(_DWORD *)v2 = 0;
    *(_OWORD *)(a1 + 52836) = 0u;
    *(_OWORD *)(a1 + 52852) = 0u;
    *(_QWORD *)(a1 + 52868) = 0;
    *(_BYTE *)(v2 + 1124) = 0;
    *(_DWORD *)(v2 + 1128) = 0;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioPlayer_ResetReportingMetrics_cold_1();
  }
}

float VCAudioPlayer_GetFrameErasureRate(uint64_t a1)
{
  int v1;

  if (a1)
  {
    v1 = *(_DWORD *)(a1 + 52768);
    if (v1)
      return (float)*(int *)(a1 + 52772) / (float)v1;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioPlayer_GetFrameErasureRate_cold_1();
  }
  return NAN;
}

float VCAudioPlayer_GetSpeechErasureRate(uint64_t a1)
{
  int v1;

  if (a1)
  {
    v1 = *(_DWORD *)(a1 + 52768);
    if (v1)
      return (float)*(int *)(a1 + 52780) / (float)v1;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioPlayer_GetSpeechErasureRate_cold_1();
  }
  return NAN;
}

void VCAudioPlayer_SuspendAudioErasureMeasurement(uint64_t a1)
{
  if (a1)
  {
    *(_BYTE *)(a1 + 53840) = 1;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioPlayer_SuspendAudioErasureMeasurement_cold_1();
  }
}

void VCAudioPlayer_ResumeAudioErasureMeasurement(uint64_t a1, int a2)
{
  if (a1)
  {
    if (*(_BYTE *)(a1 + 53840))
    {
      *(_DWORD *)(a1 + 53844) = a2;
      *(_BYTE *)(a1 + 53840) = 0;
    }
    else
    {
      *(_DWORD *)(a1 + 53844) = 0;
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioPlayer_ResumeAudioErasureMeasurement_cold_1();
  }
}

void VCAudioPlayer_GetTimescaleMetrics(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  __int32 v9;
  unsigned int v10;
  int v11;
  int32x2_t v12;
  int32x2_t v13;
  int v14;
  unsigned int v15;
  float32x2_t v16;
  float v17;
  uint32x2_t v18;

  if (a1)
  {
    v5 = *(_DWORD *)(a1 + 52836);
    v6 = *(_DWORD *)(a1 + 52840);
    v7 = *(_DWORD *)(a1 + 52680);
    v8 = *(_DWORD *)(a1 + 52852);
    v9 = v5 - *(_DWORD *)(a1 + 52856);
    v10 = v6 - *(_DWORD *)(a1 + 52860);
    v11 = v8 - *(_DWORD *)(a1 + 52872);
    v12 = *(int32x2_t *)(a1 + 52844);
    v13 = vsub_s32(v12, *(int32x2_t *)(a1 + 52864));
    v14 = *(_DWORD *)(a1 + 52728);
    *(_DWORD *)(a1 + 52856) = v5;
    *(_DWORD *)(a1 + 52860) = v6;
    *(int32x2_t *)(a1 + 52864) = v12;
    *(_DWORD *)(a1 + 52872) = v8;
    v15 = v7 - v14;
    if (v7 == v14)
    {
      v16 = 0;
      v17 = 0.0;
    }
    else
    {
      *(float *)&a5 = (float)v15;
      v17 = (float)v10 / (float)v15;
      v18 = (uint32x2_t)vdup_lane_s32(v13, 0);
      v18.i32[0] = v9;
      v16 = vdiv_f32(vcvt_f32_u32(v18), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a5, 0));
    }
    *(float *)(a2 + 120) = v17;
    *(float32x2_t *)(a2 + 112) = v16;
    *(_DWORD *)(a2 + 92) = v9;
    *(_DWORD *)(a2 + 96) = v10;
    *(int32x2_t *)(a2 + 100) = v13;
    *(_DWORD *)(a2 + 108) = v11;
    *(int32x2_t *)(a2 + 124) = vrev64_s32(*(int32x2_t *)(a1 + 52876));
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioPlayer_GetTimescaleMetrics_cold_1();
  }
}

void VCAudioPlayer_GetRedErasureMetrics(uint64_t a1, uint64_t a2)
{
  int32x2_t *v3;
  __int32 v4;
  uint64_t v5;
  __int32 v6;
  __int32 v7;
  __int32 v8;
  __int32 v9;
  __int32 v10;
  __int32 v11;
  int32x2_t v12;
  __int32 SpeechUnderflowCount;
  int32x2_t v14;
  __int32 v15;
  __int32 v16;
  __int32 v17;
  int32x2_t v18;
  __int32 v19;
  __int32 v20;
  int v21;
  __int32 v22;
  __int32 v23;
  __int32 v24;
  __int32 v25;
  __int32 v26;
  int v27;
  __int32 v28;
  int32x4_t v29;
  float v30;
  float32x4_t v31;
  float v32;
  __int32 v33;
  __int32 v34;

  if (a1)
  {
    v3 = (int32x2_t *)(a1 + 52672);
    v4 = *(_DWORD *)(a1 + 52676);
    v34 = *(_DWORD *)(a1 + 52672);
    v5 = a1 + 35568;
    v7 = *(_DWORD *)(a1 + 52688);
    v6 = *(_DWORD *)(a1 + 52692);
    v8 = *(_DWORD *)(a1 + 52696);
    v9 = *(_DWORD *)(a1 + 52700);
    v10 = *(_DWORD *)(a1 + 52704);
    v11 = *(_DWORD *)(a1 + 52708);
    v12 = *(int32x2_t *)(a1 + 52680);
    SpeechUnderflowCount = JitterQueue_GetSpeechUnderflowCount(*(_QWORD *)(a1 + 35568));
    v15 = *(_DWORD *)(v5 + 16096);
    v17 = v3[6].i32[0];
    v16 = v3[6].i32[1];
    v18 = vsub_s32(v12, v3[7]);
    v19 = v6 - v3[8].i32[1];
    v20 = v7 - v3[8].i32[0];
    v21 = v8 - v3[9].i32[0];
    v22 = v9 - v3[9].i32[1];
    v23 = v3[10].i32[1];
    v24 = v10 - v3[10].i32[0];
    v25 = SpeechUnderflowCount - v3[11].i32[0];
    v26 = v15 - v3[11].i32[1];
    v3[6].i32[0] = v34;
    v3[6].i32[1] = v4;
    v3[7] = v12;
    v3[9].i32[0] = v8;
    v3[9].i32[1] = v9;
    v3[10].i32[0] = v10;
    v3[10].i32[1] = v11;
    v3[11].i32[0] = SpeechUnderflowCount;
    v3[11].i32[1] = v15;
    v3[8].i32[0] = v7;
    v3[8].i32[1] = v6;
    if (v18.i32[0] < 1)
    {
      v28 = 0;
      v27 = 0;
      v31 = 0uLL;
      v30 = 0.0;
      v32 = 0.0;
    }
    else
    {
      v27 = v4 - v16;
      v28 = v34 - v17;
      *(float *)v14.i32 = (float)v18.i32[0];
      v29.i64[0] = __PAIR64__(v24, v22);
      v30 = (float)v21 / (float)v18.i32[0];
      v29.i64[1] = __PAIR64__(v11 - v23, v25);
      v31 = vdivq_f32(vcvtq_f32_s32(v29), (float32x4_t)vdupq_lane_s32(v14, 0));
      v32 = (float)v27 / (float)v18.i32[0];
    }
    *(float *)(a2 + 16) = v30;
    *(float32x4_t *)(a2 + 20) = v31;
    v33 = v3[5].i32[1];
    *(float *)(a2 + 36) = v32;
    *(_DWORD *)(a2 + 40) = v33;
    v3[5].i32[1] = 0;
    *(_DWORD *)(a2 + 44) = v27;
    *(_DWORD *)(a2 + 48) = v28;
    *(int32x2_t *)(a2 + 52) = v18;
    *(_DWORD *)(a2 + 68) = v21;
    *(_DWORD *)(a2 + 72) = v22;
    *(_DWORD *)(a2 + 76) = v25;
    *(_DWORD *)(a2 + 80) = v24;
    *(_DWORD *)(a2 + 84) = v26;
    *(_DWORD *)(a2 + 60) = v19;
    *(_DWORD *)(a2 + 64) = v20;
    if (!v3[20].i8[0])
    {
      *(_DWORD *)(a2 + 88) = v3[5].i32[0];
      v3[5].i32[0] = 0;
    }
    *(_DWORD *)(a2 + 160) = v3[27].i32[0];
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioPlayer_GetRedErasureMetrics_cold_1();
  }
}

float VCAudioPlayer_GetAverageLossRate(uint64_t a1)
{
  if (a1)
    return *(float *)(a1 + 52784);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioPlayer_GetAverageLossRate_cold_1();
  }
  return NAN;
}

float VCAudioPlayer_GetLastAverageMissingPercentOverWindow(uint64_t a1)
{
  if (a1)
    return *(float *)(a1 + 52788);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioPlayer_GetLastAverageMissingPercentOverWindow_cold_1();
  }
  return NAN;
}

float VCAudioPlayer_GetAverageJitterSizeForWindow(uint64_t a1)
{
  if (a1)
    return *(float *)(a1 + 52800);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioPlayer_GetAverageJitterSizeForWindow_cold_1();
  }
  return NAN;
}

float VCAudioPlayer_MaxInterArrivalTimeForWindow(uint64_t a1)
{
  if (a1)
    return *(float *)(a1 + 52792);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioPlayer_MaxInterArrivalTimeForWindow_cold_1();
  }
  return NAN;
}

void VCAudioPlayer_GetDTMFEventCount(uint64_t a1)
{
  if (!a1 && (int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioPlayer_GetDTMFEventCount_cold_1();
  }
}

void VCAudioPlayer_UpdateLastEnqueuedFrameInformation(uint64_t a1, uint64_t a2, int a3, float a4)
{
  int v4;
  _BOOL4 v5;
  _BOOL4 v6;
  float v7;

  if (a1 && a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 35536);
    if (*(_BYTE *)(a1 + 35536))
      v5 = 0;
    else
      v5 = *(_DWORD *)(a2 + 1176) != 0;
    v6 = *(_DWORD *)(a2 + 1196) == 104 && !*(_BYTE *)(a1 + 35537) && *(_BYTE *)(a2 + 1268) != 0;
    if (v5 || v6)
      *(_DWORD *)(a1 + 35588) = *(_DWORD *)(a2 + 12);
    if (a3)
    {
      if (*(float *)(a1 + 52792) < a4)
        *(float *)(a1 + 52792) = a4;
      v7 = a4 * 0.1 + *(float *)(a1 + 52796) * 0.9;
      *(float *)(a1 + 52796) = v7;
      if (!v4)
        *(float *)(a1 + 52368) = a4;
    }
    *(_BYTE *)(a1 + 35536) = *(_DWORD *)(a2 + 1176) != 0;
    *(_BYTE *)(a1 + 35537) = *(_BYTE *)(a2 + 1268);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioPlayer_UpdateLastEnqueuedFrameInformation_cold_1();
  }
}

uint64_t VCAudioPlayer_GetWrmMetrics(uint64_t a1)
{
  uint64_t v2;
  float v3;
  int v4;
  int v5;
  unint64_t v6;
  double v7;
  uint64_t result;

  if (a1)
  {
    v2 = a1 + 52552;
    v3 = *(float *)(a1 + 35552);
    v4 = *(_DWORD *)(a1 + 304) + *(_DWORD *)(a1 + 168);
    v5 = VCTimescale_TailSize(a1 + 808);
    HIDWORD(v6) = 1083129856;
    LODWORD(v6) = *(_DWORD *)v2;
    v7 = (float)(v3 + (float)(v4 + v5)) * 1000.0 / (double)v6;
    result = a1 + 52896;
    *(_QWORD *)(v2 + 360) = (unint64_t)v7;
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCAudioPlayer_GetWrmMetrics_cold_1();
    }
    return 0;
  }
  return result;
}

float VCAudioPlayer_GetPercentPacketsLateAndMissing(uint64_t a1)
{
  if (a1)
    return *(float *)(a1 + 52784);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioPlayer_GetPercentPacketsLateAndMissing_cold_1();
  }
  return NAN;
}

uint64_t VCAudioPlayer_GetPlaybackFormat(uint64_t a1)
{
  if (a1)
    return a1 + 52552;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioPlayer_GetPlaybackFormat_cold_1();
  }
  return 0;
}

void VCAudioPlayer_SetMaxHoleSize(uint64_t a1, double a2)
{
  if (a1)
  {
    if (a2 < 0.109999999)
      a2 = 0.109999999;
    *(double *)(a1 + 35576) = a2;
    JitterQueue_SetMaxPacketTimeDelta(*(uint64_t **)(a1 + 35568), *(_DWORD *)(a1 + 52552), a2);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioPlayer_SetMaxHoleSize_cold_1();
  }
}

void VCAudioPlayer_GetBurstMetrics(uint64_t a1, uint64_t a2)
{
  int *v4;
  int v5;
  unsigned int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int16 *v10;
  unsigned int v12;
  unsigned __int16 *v13;
  int v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned __int16 *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  float v27;
  float v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint8_t buf[4];
  uint64_t v44;
  __int16 v45;
  const char *v46;
  __int16 v47;
  int v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = (int *)(a1 + 52928);
    v41 = a1 + 52552;
    v42 = a1 + 53608;
    if (*(unsigned __int16 *)(a2 + 14) - *(unsigned __int16 *)(a2 + 12) >= 320)
      v5 = 320;
    else
      v5 = *(unsigned __int16 *)(a2 + 14) - *(unsigned __int16 *)(a2 + 12);
    v6 = *(unsigned __int16 *)(a1 + 53606);
    v7 = 0;
    if (v5)
    {
      v8 = a1 + 52964;
      v9 = a1 + 53604;
      do
      {
        v10 = (unsigned __int16 *)(v8 + 2 * v6);
        if ((unint64_t)v10 >= v9 || (unint64_t)v10 < v8)
          goto LABEL_57;
        v12 = *v10;
        if (*(unsigned __int16 *)(a2 + 14) <= v12)
          goto LABEL_16;
        if ((unint64_t)v4 >= v42)
          goto LABEL_57;
        _VCAudioPlayer_UpdateBurstInfo(v4, v12, *(_DWORD *)(a1 + 12) != 0);
        v6 = (v6 + 1) % 0x140;
        ++v7;
      }
      while (v5 != v7);
      v7 = v5;
    }
LABEL_16:
    if (v6)
    {
      v13 = (unsigned __int16 *)(a1 + 52964 + 2 * (v6 - 1));
      if ((unint64_t)v13 >= a1 + 53604 || (unint64_t)v13 < a1 + 52964)
LABEL_57:
        __break(0x5519u);
    }
    else
    {
      v13 = (unsigned __int16 *)(v41 + 1050);
    }
    v15 = *v13;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      v16 = VRTraceErrorLogLevelToCSTR();
      v17 = *MEMORY[0x1E0CF2758];
      v18 = *MEMORY[0x1E0CF2758];
      if (*MEMORY[0x1E0CF2748])
      {
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          v19 = *(unsigned __int16 *)(v41 + 1054);
          v20 = *(unsigned __int16 *)(v41 + 1052);
          v21 = *(unsigned __int16 *)(a2 + 12);
          v22 = *(unsigned __int16 *)(a2 + 14);
          *(_DWORD *)buf = 136317698;
          v44 = v16;
          v45 = 2080;
          v46 = "VCAudioPlayer_GetBurstMetrics";
          v47 = 1024;
          v48 = 2125;
          v49 = 2048;
          v50 = a1;
          v51 = 1024;
          v52 = v7;
          v53 = 1024;
          v54 = v5;
          v55 = 1024;
          v56 = v19;
          v57 = 1024;
          v58 = v20;
          v59 = 1024;
          v60 = v21;
          v61 = 1024;
          v62 = v22;
          v63 = 1024;
          v64 = v15;
          _os_log_impl(&dword_1D8A54000, v17, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d audioPlayer=%p frameCount=%d numFramesInRTCPReport=%d readIndex=%d writeIndex=%d SeqStart=%d SeqEnd=%d endSequenceNumber=%d", buf, 0x50u);
          if (!v7)
            goto LABEL_35;
          goto LABEL_30;
        }
      }
      else if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        v37 = *(unsigned __int16 *)(v41 + 1054);
        v38 = *(unsigned __int16 *)(v41 + 1052);
        v39 = *(unsigned __int16 *)(a2 + 12);
        v40 = *(unsigned __int16 *)(a2 + 14);
        *(_DWORD *)buf = 136317698;
        v44 = v16;
        v45 = 2080;
        v46 = "VCAudioPlayer_GetBurstMetrics";
        v47 = 1024;
        v48 = 2125;
        v49 = 2048;
        v50 = a1;
        v51 = 1024;
        v52 = v7;
        v53 = 1024;
        v54 = v5;
        v55 = 1024;
        v56 = v37;
        v57 = 1024;
        v58 = v38;
        v59 = 1024;
        v60 = v39;
        v61 = 1024;
        v62 = v40;
        v63 = 1024;
        v64 = v15;
        _os_log_debug_impl(&dword_1D8A54000, v17, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d audioPlayer=%p frameCount=%d numFramesInRTCPReport=%d readIndex=%d writeIndex=%d SeqStart=%d SeqEnd=%d endSequenceNumber=%d", buf, 0x50u);
        if (!v7)
          goto LABEL_35;
        goto LABEL_30;
      }
    }
    if (!v7)
    {
LABEL_35:
      *(_WORD *)(v41 + 1054) = v6;
      v24 = *(_DWORD *)(v41 + 388);
      v25 = *(_DWORD *)(v41 + 392);
      v26 = *(_DWORD *)(v41 + 404);
      v27 = 0.0;
      v28 = 0.0;
      v29 = *(_DWORD *)(v41 + 396);
      if (v24)
        v28 = (double)v25 / (double)v24;
      v30 = *(_DWORD *)(v41 + 408);
      v31 = *(_DWORD *)(v41 + 400);
      *(float *)a2 = v28;
      v32 = v26 - v24;
      if (v32)
        v27 = (double)(v30 - v25) / (double)v32;
      *(float *)(a2 + 4) = v27;
      v33 = (1000 * *(_DWORD *)(v41 + 4)) / *(_DWORD *)v41;
      if (v29)
      {
        v34 = v33 * v24 / v29;
        if (v34 >= 0xFFFF)
          LOWORD(v34) = -1;
      }
      else
      {
        LOWORD(v34) = 0;
      }
      *(_WORD *)(a2 + 8) = v34;
      if (*(_DWORD *)(v41 + 384))
        v35 = v31 + 1;
      else
        v35 = v31;
      if (v35)
      {
        v36 = v33 * v32 / v35;
        if (v36 >= 0xFFFF)
          LOWORD(v36) = -1;
        *(_WORD *)(a2 + 10) = v36;
      }
      else
      {
        *(_WORD *)(a2 + 10) = 0;
      }
      return;
    }
LABEL_30:
    if (*(unsigned __int16 *)(a2 + 14) - 1 != v15)
    {
      if ((unint64_t)v4 >= v42)
        goto LABEL_57;
      v23 = (unsigned __int16 *)(a1 + 52964 + 2 * v6);
      if ((unint64_t)v23 >= a1 + 53604 || (unint64_t)v23 < a1 + 52964)
        goto LABEL_57;
      _VCAudioPlayer_UpdateBurstInfo(v4, *v23, *(_DWORD *)(a1 + 12) != 0);
    }
    goto LABEL_35;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioPlayer_GetBurstMetrics_cold_1();
  }
}

void _VCAudioPlayer_UpdateBurstInfo(int *a1, int a2, int a3)
{
  __int16 v3;
  unsigned __int16 v4;
  int v5;
  unsigned __int16 v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned __int16 v12;
  __int16 v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  __int16 v19;
  int32x4_t v20;
  unsigned int v21;
  int v22;
  unsigned int v23;

  if (a3 && *((_BYTE *)a1 + 4))
  {
    v3 = a2 - 1;
    if (!a2)
      v3 = 0;
    *((_WORD *)a1 + 3) = v3;
  }
  v4 = *((_WORD *)a1 + 3) + 1;
  v5 = *a1;
  if (*a1 == 2)
  {
    if (a2 != v4)
    {
      v12 = a2 - v4;
      if ((unsigned __int16)(a2 - v4) <= 0x7FFEu)
      {
        v13 = v12 + *((_WORD *)a1 + 4);
        v14 = a1[8] + v12;
        a1[7] += (unsigned __int16)(v12 + 1);
        a1[8] = v14;
        *((_WORD *)a1 + 3) = a2;
        v15 = a1[4];
        v16 = a1[3] + v13;
        a1[2] = 1;
        a1[3] = v16;
        a1[4] = v15 + v12;
        return;
      }
    }
    if (a2 == v4)
    {
      ++a1[7];
      v21 = a1[2] + 1;
      a1[2] = v21;
      *((_WORD *)a1 + 3) = a2;
      v22 = 2 * (v21 < 0x10);
LABEL_36:
      *a1 = v22;
    }
  }
  else
  {
    if (v5 != 1)
    {
      if (v5)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            _VCAudioPlayer_UpdateBurstInfo_cold_1();
        }
      }
      else if (a2 == v4 || (v6 = a2 - v4, (unsigned __int16)(a2 - v4) > 0x7FFEu))
      {
        if (a2 == v4 || a3 && *((_BYTE *)a1 + 4))
        {
          *((_BYTE *)a1 + 4) = 0;
          ++a1[7];
          ++a1[2];
          *((_WORD *)a1 + 3) = a2;
        }
      }
      else
      {
        v7 = (unsigned __int16)(a2 - v4);
        v8 = a1[8] + v6;
        a1[7] += (unsigned __int16)(v6 + 1);
        a1[8] = v8;
        *((_WORD *)a1 + 3) = a2;
        a1[2] = 1;
        if ((v6 & 0xFFFE) != 0)
          v9 = v6;
        else
          v9 = 0;
        v10 = a1[3];
        a1[4] += v9;
        if (v7 <= 1)
          v11 = 1;
        else
          v11 = 2;
        *a1 = v11;
        if (v7 >= 2)
        {
          *(int32x2_t *)(a1 + 5) = vadd_s32(*(int32x2_t *)(a1 + 5), (int32x2_t)0x100000001);
          a1[3] = v10 + v7;
        }
      }
      return;
    }
    if (a2 != v4 && (unsigned __int16)(a2 - v4) <= 0x7FFEu)
    {
      v17 = a1[8] + (unsigned __int16)(a2 - v4);
      v18 = (unsigned __int16)(a2 - v4) + 1;
      v19 = a1[2] + v18;
      a1[7] += v18;
      a1[8] = v17;
      *((_WORD *)a1 + 3) = a2;
      a1[2] = 1;
      *a1 = 2;
      v20.i64[1] = 0x100000001;
      v20.i32[0] = v19;
      v20.i32[1] = v18;
      *(int32x4_t *)(a1 + 3) = vaddq_s32(*(int32x4_t *)(a1 + 3), v20);
      return;
    }
    if (a2 == v4)
    {
      ++a1[7];
      v23 = a1[2] + 1;
      a1[2] = v23;
      *((_WORD *)a1 + 3) = a2;
      v22 = v23 < 0x10;
      goto LABEL_36;
    }
  }
}

void VCAudioPlayer_AdjustmentDisabled(uint64_t a1, char a2)
{
  if (a1)
  {
    *(_BYTE *)(a1 + 52584) = a2;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioPlayer_AdjustmentDisabled_cold_1();
  }
}

void VCAudioPlayer_SetTargetBoostMode(uint64_t a1, int a2, double a3)
{
  uint64_t *v6;
  uint64_t v7;
  NSObject *v8;
  char **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  double v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (*(_DWORD *)(a1 + 12))
    {
      v6 = (uint64_t *)(a1 + 52424);
      if (*(_DWORD *)(a1 + 52544) != a2 && (int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        v7 = VRTraceErrorLogLevelToCSTR();
        v8 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        {
          v9 = &targetBoostingDescription[a2];
          if (v9 >= (char **)VCControlChannel_UnencryptedString || v9 < targetBoostingDescription)
          {
            __break(0x5519u);
            return;
          }
          v10 = *v9;
          v12 = *v6;
          v11 = *(_QWORD *)(a1 + 52432);
          v13 = *(_DWORD *)(a1 + 20);
          v14 = *(_DWORD *)(a1 + 24);
          v15 = 136317186;
          v16 = v7;
          v17 = 2080;
          v18 = "VCAudioPlayer_SetTargetBoostMode";
          v19 = 1024;
          v20 = 2884;
          v21 = 2080;
          v22 = v10;
          v23 = 2048;
          v24 = v11;
          v25 = 2048;
          v26 = v12;
          v27 = 2048;
          v28 = a3;
          v29 = 1024;
          v30 = v13;
          v31 = 1024;
          v32 = v14;
          _os_log_impl(&dword_1D8A54000, v8, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Target boosting has changed: targetBoostMode=%s, minQueueSize=%.2f, currentTargetSize=%.2f, targetBoostingInSec=%.2f, lastDecodedFrameSN=%d, lastDecodedFrameTS=%d", (uint8_t *)&v15, 0x50u);
        }
      }
      *(_DWORD *)(a1 + 52544) = a2;
      *(_BYTE *)(a1 + 52528) = a2 != 0;
      *(double *)(a1 + 52536) = a3;
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioPlayer_SetTargetBoostMode_cold_1();
  }
}

void VCAudioPlayer_GetSilenceSamples(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  int32x2_t *v5;
  __int32 v6;
  char **v7;
  int32x2_t v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  __int32 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        v5 = a1 + 4440;
        v6 = a1[4441].i32[0];
        _VCAudioPlayer_UpdateJitterQueueSize((uint64_t)a1);
        _VCAudioPlayer_FillSilenceBuffer(a1, *(_QWORD *)a2, *(_DWORD *)(a2 + 8), *(_QWORD *)(a2 + 24), *(int **)(a2 + 16));
        **(_BYTE **)(a2 + 56) = 1;
        _VCAudioPlayer_UpdateLogDumpStats((uint64_t)a1, *(_DWORD *)(a2 + 8), 0, *(_DWORD *)(a2 + 8));
        _VCAudioPlayer_LogStats((FILE **)a1);
        v7 = &audioPlayerMode[a1[89].u32[0]];
        if (v7 >= queueGrowthMode || v7 < audioPlayerMode)
        {
          __break(0x5519u);
        }
        else
        {
          v5[2142] = (int32x2_t)*v7;
          if (v5[1].i32[1])
            v8 = 0;
          else
            v8 = a1[6603];
          v5[2140] = v8;
          ++a1[6612].i32[0];
          a1[6613] = vadd_s32(a1[6613], (int32x2_t)0x100000001);
          ++a1[6585].i32[0];
          ++a1[6596].i32[0];
          _VCAudioPlayer_UpdateLosses((uint64_t)a1);
          *(double *)v5 = micro();
          if (v6 == v5[1].i32[0] && (int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            v9 = VRTraceErrorLogLevelToCSTR();
            v10 = *MEMORY[0x1E0CF2758];
            v11 = *MEMORY[0x1E0CF2758];
            if (*MEMORY[0x1E0CF2748])
            {
              if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
              {
                v12 = 136315906;
                v13 = v9;
                v14 = 2080;
                v15 = "VCAudioPlayer_GetSilenceSamples";
                v16 = 1024;
                v17 = 3492;
                v18 = 1024;
                v19 = v6;
                _os_log_impl(&dword_1D8A54000, v10, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Timestamp did not increment: %d", (uint8_t *)&v12, 0x22u);
              }
            }
            else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
            {
              VCAudioPlayer_GetSilenceSamples_cold_4();
            }
          }
          v5[10].i32[1] += *(_DWORD *)(a2 + 8);
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          VCAudioPlayer_GetSilenceSamples_cold_3();
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCAudioPlayer_GetSilenceSamples_cold_2();
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCAudioPlayer_GetSilenceSamples_cold_1();
  }
}

float _VCAudioPlayer_UpdateJitterQueueSize(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  int LeftOverSamples;
  unint64_t v6;
  double v7;
  float result;

  v2 = a1 + 52552;
  v3 = a1 + 35552;
  *(float *)(a1 + 35552) = (float)JitterQueue_QueuedSamples(*(_QWORD *)(a1 + 35568));
  v4 = *(float *)v3;
  LeftOverSamples = VCAudioPlayer_GetLeftOverSamples(a1);
  LODWORD(v6) = *(_DWORD *)v2;
  v7 = (float)(v4 + (float)LeftOverSamples) / (double)v6;
  *(double *)(v3 + 8) = v7;
  result = v7 * 0.1 + *(float *)(v2 + 248) * 0.9;
  *(float *)(v2 + 248) = result;
  return result;
}

void _VCAudioPlayer_FillSilenceBuffer(_DWORD *a1, uint64_t a2, int a3, uint64_t a4, int *a5)
{
  double *v9;
  unint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  uint64_t v16;
  NSObject *v17;
  double v18;
  double v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  _DWORD *v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v9 = (double *)(a1 + 8880);
  VCAudioBufferList_ZeroMemory(a2);
  v11 = micro();
  if (*v9 <= 0.0
    || (v12 = v11 - *v9, v13 = (double)(5 * a3), LODWORD(v10) = a1[13138], v14 = (double)v10, v12 <= v13 / v14))
  {
    v15 = a3;
  }
  else
  {
    v15 = (int)(v12 * v14);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      v16 = VRTraceErrorLogLevelToCSTR();
      v17 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v18 = v11 - *v9;
        v22 = 136316930;
        v19 = (double)a1[13138];
        v23 = v16;
        v24 = 2080;
        v25 = "_VCAudioPlayer_FillSilenceBuffer";
        v26 = 1024;
        v27 = 2400;
        v28 = 2048;
        v29 = a1;
        v30 = 2048;
        v31 = v18;
        v32 = 2048;
        v33 = v13 / v19;
        v34 = 1024;
        v35 = v15;
        v36 = 1024;
        v37 = a3;
        _os_log_impl(&dword_1D8A54000, v17, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d [%p] Detected a time gap of %0.6f seconds (larger than %0.6f threshold). Incrementing by sampleCount=%d instead of by oldSampleCount=%d.", (uint8_t *)&v22, 0x46u);
      }
    }
  }
  v20 = *((_DWORD *)v9 + 2) + v15;
  *((_DWORD *)v9 + 2) = v20;
  v21 = a1[43] + v15;
  a1[77] += v15;
  a1[42] = 0;
  a1[43] = v21;
  a1[76] = 0;
  *a5 = v20;
  if (a4)
    *(_QWORD *)(a4 + 16) = 0;
  ++*a1;
}

uint64_t _VCAudioPlayer_UpdateLogDumpStats(uint64_t result, int a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  v4 = result + 53608;
  if (*(_BYTE *)(result + 53608))
  {
    v5 = result + 35568;
    *(_DWORD *)(result + 53656) = a2;
    *(_DWORD *)(result + 53664) = a3;
    *(_DWORD *)(result + 53668) = a4;
    result = JitterQueue_GetSpeechUnderflowCount(*(_QWORD *)(result + 35568));
    v12 = *(_DWORD *)(v5 + 16096) + result;
    *(_DWORD *)(v4 + 80) = v12;
    v13 = v12 - *(_DWORD *)(v4 + 84);
    *(_DWORD *)(v4 + 88) = v13;
    if (v13)
    {
      result = (uint64_t)VRLogfilePrintSync(*(FILE ***)(v4 + 8), "Warning: Jitter Queue underflow detected. UnderflowCount=%d  lastDecodedTimestamp=%u\n", v6, v7, v8, v9, v10, v11, v13);
      v12 = *(_DWORD *)(v4 + 80);
    }
    *(_DWORD *)(v4 + 84) = v12;
  }
  return result;
}

FILE **_VCAudioPlayer_LogStats(FILE **result)
{
  FILE **v1;
  uint64_t v2;
  FILE **v3;
  double v4;
  char **v5;
  char **v6;
  char **v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  FILE **v11;
  _QWORD v12[5];

  v12[3] = *MEMORY[0x1E0C80C00];
  v1 = result + 6547;
  if (*((_BYTE *)result + 53608))
  {
    v2 = (uint64_t)result;
    v3 = result + 4438;
    memset(v12, 170, 20);
    v4 = micro();
    LogDump_GetTimestampString(v4);
    v11 = (FILE **)v1[155];
    JitterQueue_QueuedSamples((uint64_t)v3[8]);
    VCAudioPlayer_GetLeftOverSamples(v2);
    v5 = &targetBoostingDescription[*((unsigned int *)v1 + 42)];
    if (v5 >= (char **)VCControlChannel_UnencryptedString
      || v5 < targetBoostingDescription
      || (v6 = &audioPlayerMode[*(unsigned int *)(v2 + 712)], v6 >= queueGrowthMode)
      || v6 < audioPlayerMode
      || (v7 = &queueGrowthMode[*((unsigned int *)v1 + 20)], v7 >= targetBoostingDescription)
      || v7 < queueGrowthMode
      || ((v8 = *((_DWORD *)v3 + 4030), v8 <= 0) ? (v9 = 0) : (v9 = v8 - 1),
          (v10 = v2 + 35624 + 40 * v9, v10 >= (unint64_t)(v3 + 2015)) || v10 < v2 + 35624))
    {
      __break(0x5519u);
    }
    return VRLogfilePrintSync(v11, "%s, %u, %u, %d, %d, %d, %d, %d, %d, %u, %d, %d, %d, %d, %d, %d, %s, %f, %d, %d, %d, %d, %d, %d, %d, %s, %s, %s, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %f, %d, %f, %f, %f, %f, %f, %d, %d, %d, %d, %f, %f, %d, %d, %d, %f, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %d \n", *((unsigned __int8 *)v1 + 5), *((unsigned __int8 *)v1 + 4), *((unsigned __int8 *)v1 + 18), *((unsigned __int8 *)v1 + 17), *((unsigned __int8 *)v1 + 32), *((unsigned __int8 *)v1 + 27), (char)v12);
  }
  return result;
}

void _VCAudioPlayer_UpdateLosses(uint64_t a1)
{
  uint64_t v1;
  int v2;
  float v3;
  float v4;
  float v5;
  BOOL v6;
  float v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  int v11;
  double v12;
  double v13;
  double v14;
  double v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  double v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v1 = a1 + 52552;
  v2 = *(_DWORD *)(a1 + 52768);
  if ((float)((float)(*(_DWORD *)(a1 + 52556) * v2) / (float)*(unsigned int *)(a1 + 52552)) > 5.0)
  {
    v3 = (float)*(int *)(a1 + 52772) / (float)v2;
    v4 = *(float *)(a1 + 52784);
    v5 = v3 * 0.3 + v4 * 0.7;
    v6 = v4 <= 0.0;
    if (v4 >= 0.0)
      v7 = (float)*(int *)(a1 + 52772) / (float)v2;
    else
      v7 = v3 * 0.3 + v4 * 0.7;
    if (!v6)
      v7 = v5;
    *(float *)(a1 + 52784) = v7;
    if (!*(_DWORD *)(a1 + 52804) && (int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      v8 = VRTraceErrorLogLevelToCSTR();
      v9 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_DWORD *)(v1 + 216);
        v10 = *(_DWORD *)(v1 + 220);
        v12 = *(float *)(v1 + 232);
        v13 = *(float *)(v1 + 240);
        v14 = *(float *)(v1 + 248);
        v15 = *(float *)(v1 + 244);
        v16 = 136317442;
        v17 = v8;
        v18 = 2080;
        v19 = "_VCAudioPlayer_UpdateLosses";
        v20 = 1024;
        v21 = 575;
        v22 = 2048;
        v23 = v3;
        v24 = 1024;
        v25 = v10;
        v26 = 1024;
        v27 = v11;
        v28 = 2048;
        v29 = v12;
        v30 = 2048;
        v31 = v13;
        v32 = 2048;
        v33 = v14;
        v34 = 2048;
        v35 = v15;
        _os_log_impl(&dword_1D8A54000, v9, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Fraction of missing packets during 5 seconds = %f, missing = %d, total = %d, average = %f [max interarrival = %f, average jitter size = %f, average interarrival = %f]", (uint8_t *)&v16, 0x5Au);
      }
    }
    *(float *)(v1 + 236) = v3;
    *(_QWORD *)(v1 + 216) = 0;
    *(_DWORD *)(v1 + 228) = 0;
    *(_DWORD *)(v1 + 240) = 0;
  }
}

void VCAudioPlayer_GetSamples(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t SizedBufferAtIndex;
  char **v17;
  uint64_t v18;
  double v19;
  int v20;
  int v21;
  unsigned int v22;
  double v23;
  double v24;
  double v25;
  __n128 v26;
  int v27;
  _DWORD *v28;
  int v29;
  float v30;
  int v31;
  int v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  NSObject *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  __n128 v43;
  double v44;
  float v45;
  double v46;
  double v47;
  double v48;
  __n128 v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  NSObject *v55;
  double v56;
  char **v57;
  uint64_t v58;
  int v59;
  char v60;
  int v61;
  BOOL v62;
  char v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  int *v67;
  unint64_t v68;
  int v69;
  unsigned __int8 i;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  _QWORD *v75;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  int v86;
  int v87;
  int v88;
  int v89;
  char v90;
  int active;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char Available;
  _DWORD *v99;
  int v100;
  BOOL v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  double *v116;
  double v117;
  double v118;
  uint64_t v119;
  NSObject *v120;
  double v121;
  double v122;
  int v123;
  int v124;
  int v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  int v134;
  int v135;
  uint64_t v136;
  size_t v137;
  int v138;
  NSObject *v139;
  size_t v140;
  uint64_t v144;
  NSObject *v145;
  int v146;
  uint64_t *v147;
  uint64_t v148;
  NSObject *v149;
  int v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t v153;
  size_t v154;
  int v157;
  int SampleCount;
  unsigned int v159;
  unsigned __int8 v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  NSObject *v165;
  unint64_t isa;
  NSObject *v168;
  Class v169;
  unint64_t v170;
  _DWORD *v171;
  BOOL v172;
  unint64_t v173;
  unint64_t v176;
  NSObject *v177;
  _WORD *v179;
  BOOL v180;
  unint64_t v181;
  unint64_t v184;
  NSObject *v185;
  uint64_t v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned __int8 ChannelCount;
  int v197;
  uint64_t v198;
  NSObject *v199;
  int v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t v203;
  size_t v204;
  BOOL v205;
  uint64_t v207;
  size_t v208;
  int v210;
  char v211;
  unint64_t v212;
  size_t v213;
  int v214;
  NSObject *v215;
  size_t v216;
  BOOL v217;
  BOOL v218;
  int *v220;
  BOOL v221;
  int v222;
  _DWORD *v223;
  unint64_t *v224;
  size_t v225;
  size_t v226;
  unsigned int v227;
  char **v228;
  uint64_t v229;
  int v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  NSObject *v239;
  NSObject *v240;
  double v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  int *v250;
  int v251;
  int v252;
  int v253;
  NSObject *v254;
  double v255;
  int v256;
  int v257;
  double v258;
  int v259;
  int v260;
  _DWORD *v261;
  int v262;
  double v263;
  BOOL v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int v278;
  _DWORD *v279;
  int v280;
  unsigned __int8 v281;
  unint64_t *v282;
  unint64_t v283;
  unint64_t v284;
  unsigned int v285;
  unsigned int v286;
  os_log_t v287;
  _DWORD *v288;
  BOOL v289;
  _DWORD *v290;
  int v293;
  const void *v294;
  size_t v296;
  BOOL v297;
  BOOL v298;
  unsigned __int8 v300;
  unint64_t *v301;
  unint64_t v302;
  unint64_t v303;
  unsigned int v304;
  unsigned int v305;
  os_log_t v306;
  _WORD *v307;
  BOOL v308;
  _WORD *v309;
  int v312;
  const void *v313;
  size_t v315;
  BOOL v316;
  BOOL v317;
  NSObject *v319;
  double v320;
  uint64_t v321;
  NSObject *v322;
  uint64_t v323;
  NSObject *v324;
  int v325;
  double v326;
  double v327;
  char v328;
  _DWORD *v329;
  int v330;
  uint64_t v331;
  os_log_t v332;
  os_log_t v333;
  NSObject *v334;
  NSObject *log;
  int loga;
  int v337;
  int *v338;
  int v339;
  int *v340;
  int v341;
  int v342;
  int v343;
  uint64_t v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  _DWORD *v348;
  int v349;
  int v350;
  int v351;
  unsigned int v352;
  int v353;
  int v354;
  int buf;
  _BYTE buf_4[20];
  __int128 v357;
  _QWORD v358[15];
  __int128 v359;
  _OWORD v360[6];
  uint64_t v361;
  uint8_t v362[24];
  int v363;
  __int16 v364;
  _BYTE v365[10];
  _BYTE v366[10];
  _BYTE v367[6];
  _BYTE v368[6];
  int v369;
  __int16 v370;
  int v371;
  uint64_t v372;

  v372 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCAudioPlayer_GetSamples_cold_1();
    }
    return;
  }
  v6 = a3;
  v9 = a1 + 52640;
  v10 = (unsigned __int8 *)(a1 + 52376);
  v11 = a1 + 35504;
  *(_BYTE *)(a1 + 52600) = (int)(*(double *)(a3 + 32) * 1000.0) == 20;
  if (!VCAudioPlayerDTMF_ShouldProcessDTMF(a1))
  {
    v5 = 0.0;
    if (VRTraceIsInternalOSInstalled())
      v5 = micro();
    v343 = *(_DWORD *)(v11 + 24);
    v19 = micro();
    ++*(_DWORD *)(v11 + 36);
    v20 = *(_DWORD *)(a1 + 304);
    *(_DWORD *)(v9 + 1020) = v20;
    v21 = (*(_DWORD *)(a2 + 8) - v20) & ~((*(_DWORD *)(a2 + 8) - v20) >> 31);
    v352 = 0;
    v353 = v21;
    v351 = v21;
    v361 = 0;
    memset(v360, 0, sizeof(v360));
    v22 = *((_DWORD *)v10 + 46) * v20;
    v4 = a1 + 200;
    *(_DWORD *)(a1 + 300) = v22;
    _VCAudioPlayer_InitializePlaybackBuffer((unint64_t)v360, a1 + 200, v22);
    *(float *)&v23 = _VCAudioPlayer_UpdateJitterQueueSize(a1);
    v27 = _VCAudioPlayer_CalcAdjustment(a1, (int **)v6, v21, &v351, v23, v24, v25, v26);
    v28 = (_DWORD *)(a1 + 808);
    v345 = v11;
    v346 = v9;
    if (*(_DWORD *)(a1 + 808))
    {
      v29 = v27;
      v30 = *(float *)(v11 + 48);
      v31 = *(_DWORD *)(a1 + 168);
      LODWORD(v11) = *(_DWORD *)(a1 + 304);
      v32 = VCTimescale_TailSize(a1 + 808);
      if (*((_DWORD *)v10 + 16))
      {
        if (*(_DWORD *)(*(_QWORD *)v6 + 4))
        {
          v33 = 9;
          v3 = v345;
          v34 = (_QWORD *)v346;
          goto LABEL_40;
        }
        v50 = 0;
        *((_DWORD *)v10 + 17) = 1;
        v33 = 8;
LABEL_39:
        v3 = v345;
        v34 = (_QWORD *)v346;
        *((_DWORD *)v10 + 16) = v50;
LABEL_40:
        *(_DWORD *)(a1 + 712) = v33;
        _VCAudioPlayer_FillSilenceBuffer((_DWORD *)a1, *(_QWORD *)a2, *(_DWORD *)(a2 + 8), *(_QWORD *)(a2 + 24), *(int **)(a2 + 16));
        v57 = &audioPlayerMode[*(unsigned int *)(a1 + 712)];
        if (v57 >= queueGrowthMode || v57 < audioPlayerMode)
          goto LABEL_469;
        v34[2] = *v57;
        if (*(_DWORD *)(v3 + 28))
          v58 = 0;
        else
          v58 = v34[23];
        *v34 = v58;
        *(double *)(v3 + 16) = v19;
        return;
      }
      v37 = v32;
      LODWORD(v347) = v31;
      v38 = v6;
      v6 = *(unsigned int *)(v6 + 16);
      if (*((_DWORD *)v10 + 17))
      {
        *((_DWORD *)v10 + 17) = 0;
        _VCAudioPlayer_DiscardSamples(a1, v6, *(double **)(v38 + 24), v19);
        v39 = v38;
        v27 = _VCAudioPlayer_CalcAdjustment(a1, (int **)v38, 0, 0, v40, v41, v42, v43);
        *((_DWORD *)v10 + 18) = 1;
      }
      else
      {
        v39 = v38;
        v27 = v29;
        if (*(_DWORD *)(*(_QWORD *)v38 + 4))
        {
          v33 = 9;
          v50 = 1;
          goto LABEL_39;
        }
      }
      v44 = v19 - *(double *)(v345 + 16);
      if (v44 <= 0.300000012)
      {
        v11 = v345;
        v6 = v39;
      }
      else
      {
        v45 = (float)((int)(float)(v30 + (float)(v11 + v347 + v37)) - v6);
        v11 = v345;
        v6 = v39;
        if ((float)((float)*((unsigned int *)v10 + 44) * 0.3) < v45)
        {
          _VCAudioPlayer_DiscardSamples(a1, *(_DWORD *)(v39 + 16), *(double **)(v39 + 24), v19);
          v27 = _VCAudioPlayer_CalcAdjustment(a1, (int **)v39, 0, 0, v46, v47, v48, v49);
          *((_QWORD *)v10 + 9) = 0x100000000;
          v44 = v19 - *(double *)(v345 + 16);
        }
      }
      v28 = (_DWORD *)(a1 + 808);
      if (v44 > 0.03)
      {
        v51 = v27;
        *((_DWORD *)v10 + 18) = 1;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          v52 = v6;
          v53 = VRTraceErrorLogLevelToCSTR();
          v54 = *MEMORY[0x1E0CF2758];
          v55 = *MEMORY[0x1E0CF2758];
          if (*MEMORY[0x1E0CF2748])
          {
            if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
            {
              v56 = v19 - *(double *)(v11 + 16);
              buf = 136316162;
              *(_QWORD *)buf_4 = v53;
              *(_WORD *)&buf_4[8] = 2080;
              *(_QWORD *)&buf_4[10] = "_VCAudioPlayer_ProcessDiscardState";
              *(_WORD *)&buf_4[18] = 1024;
              LODWORD(v357) = 3133;
              WORD2(v357) = 2048;
              *(double *)((char *)&v357 + 6) = v19;
              HIWORD(v357) = 2048;
              *(double *)v358 = v56;
              _os_log_impl(&dword_1D8A54000, v54, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Timestamp jumped due to callbacks freeze. Time=%f, TimeDelta=%f", (uint8_t *)&buf, 0x30u);
            }
          }
          else if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
          {
            v263 = v19 - *(double *)(v11 + 16);
            buf = 136316162;
            *(_QWORD *)buf_4 = v53;
            *(_WORD *)&buf_4[8] = 2080;
            *(_QWORD *)&buf_4[10] = "_VCAudioPlayer_ProcessDiscardState";
            *(_WORD *)&buf_4[18] = 1024;
            LODWORD(v357) = 3133;
            WORD2(v357) = 2048;
            *(double *)((char *)&v357 + 6) = v19;
            HIWORD(v357) = 2048;
            *(double *)v358 = v263;
            _os_log_debug_impl(&dword_1D8A54000, v54, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d Timestamp jumped due to callbacks freeze. Time=%f, TimeDelta=%f", (uint8_t *)&buf, 0x30u);
          }
          v6 = v52;
        }
        v27 = v51;
      }
    }
    v59 = *(_DWORD *)(a2 + 8);
    if (v59 >= *(_DWORD *)(a1 + 192))
      v59 = *(_DWORD *)(a1 + 192);
    *(_DWORD *)(a2 + 8) = v59;
    v344 = v6;
    v337 = v27;
    if (*(_DWORD *)(a1 + 304))
      v60 = *(_BYTE *)(a1 + 29);
    else
      v60 = 1;
    v6 = a1 + 304;
    *(_BYTE *)(a1 + 30) = v60;
    v61 = _VCAudioPlayer_DecodeSamples(a1, &v351, &v353, a2, v344, v19);
    v348 = v28;
    if (v10[192])
    {
      if (*(float *)(a1 + 792) < 0.0058)
      {
        v62 = *(float *)(a1 + 796) < 0.0058;
        goto LABEL_60;
      }
    }
    else if (*(float *)(a1 + 784) < 72.0)
    {
      v62 = *(float *)(a1 + 788) < 72.0;
LABEL_60:
      v63 = v62;
LABEL_64:
      v3 = 1;
      v347 = a2;
      if ((v63 & 1) == 0 && v61)
        v3 = *(_DWORD *)(v11 + 28) != 0;
      v64 = a1 + 64;
      v65 = v353;
      SizedBufferAtIndex = (unint64_t)_VCAudioPlayer_CopyPlaybackBuffer((void **)v360, a1 + 64, 0, *((_DWORD *)v10 + 46) * v353);
      v359 = xmmword_1D9110AA0;
      memset(&v358[3], 170, 96);
      HIDWORD(v66) = -1431655766;
      memset(v358, 170, 24);
      v341 = v65;
      buf = v65;
      *(_DWORD *)buf_4 = v337;
      *(_QWORD *)&buf_4[4] = &v352;
      *(_DWORD *)&buf_4[12] = v3;
      *(_DWORD *)&buf_4[16] = v351;
      v67 = (int *)(a1 + 712);
      *(_QWORD *)&v357 = a1 + 304;
      *((_QWORD *)&v357 + 1) = a1 + 712;
      LODWORD(v358[0]) = *((_DWORD *)v10 + 46);
      *(_QWORD *)((char *)v358 + 4) = *((_QWORD *)v10 + 9);
      *(_QWORD *)&v359 = 0;
      BYTE8(v359) = 0;
      HIDWORD(v359) = 0;
      memset(&v358[2], 0, 97);
      v68 = v346;
      *(_QWORD *)(v346 + 1036) = 0;
      *(_DWORD *)v11 = 0;
      v69 = *(_DWORD *)(a1 + 296);
      if (v69 >= 1)
      {
        for (i = 0; i < v69; v358[i++ + 10] = v83)
        {
          v71 = (uint64_t *)v360 + 3 * i;
          v72 = *v71;
          v73 = v71[1];
          if (v72)
            v74 = v73 == 0;
          else
            v74 = 0;
          v75 = &v358[i + 2];
          if (v74 || v75 >= &v358[6] || v75 < &v358[2])
            goto LABEL_469;
          *v75 = v72;
          v78 = (uint64_t *)(v64 + 24 * i);
          v79 = *v78;
          v80 = v78[1];
          if (v79 && v80 == 0)
            goto LABEL_469;
          v358[i + 6] = v79;
          v82 = (uint64_t *)(v4 + 24 * i);
          v83 = *v82;
          v84 = v82[1];
          if (v83 && v84 == 0)
            goto LABEL_469;
        }
      }
      v342 = v3;
      v340 = (int *)(a1 + 712);
      if (!*v348)
        goto LABEL_130;
      LODWORD(v66) = *((_DWORD *)v10 + 44);
      *(double *)&v359 = (double)v337 / (double)v66;
      BYTE8(v359) = *(_DWORD *)(v11 + 28) != 0;
      if (v10[152])
      {
        v86 = *(unsigned __int8 *)(v11 + 97);
        if (!*(_BYTE *)(v11 + 97) && *((_DWORD *)v10 + 42) == 5)
          goto LABEL_126;
      }
      else
      {
        v86 = *(unsigned __int8 *)(v11 + 97);
      }
      if (v86)
      {
        if (v10[21] && !v10[24] || v10[11])
        {
          v87 = 1;
        }
        else
        {
          v87 = *v10;
          if (*v10)
            v87 = v10[17] == 0;
        }
        if (v10[39] || v10[22])
        {
          if ((v87 & 1) == 0)
            goto LABEL_123;
          v88 = 1;
        }
        else
        {
          if (v87)
            v89 = 3;
          else
            v89 = 2;
          if (v10[25])
            v90 = v87;
          else
            v90 = 1;
          if (v10[25])
            v88 = 1;
          else
            v88 = v89;
          if ((v90 & 1) == 0)
          {
LABEL_123:
            active = VCTimescale_ActiveSpeechAdapt((uint64_t)v348);
            if (active < 0)
              VRLogfilePrintSync(*(FILE ***)(v346 + 976), "Warning: Active Speech Timescaling did not complete! Result=%d", v92, v93, v94, v95, v96, v97, active);
            if (LOBYTE(v358[14]))
              goto LABEL_143;
LABEL_126:
            Available = VCTimescale_TailExtractAvailable((uint64_t)v348);
            v67 = (int *)(a1 + 712);
            if (!*(_DWORD *)(a1 + 808) || (Available & 1) != 0 || *((_DWORD *)v10 + 18) || *((_DWORD *)v10 + 19))
              goto LABEL_130;
            if (*(_DWORD *)&buf_4[12] && *(_DWORD *)a1 && *(int *)buf_4 >= 1)
            {
              v241 = 0.0;
              if (VRTraceIsInternalOSInstalled())
                v241 = micro();
              v249 = *(_DWORD *)&buf_4[16];
              v250 = *(int **)&buf_4[4];
              if (*(_DWORD *)&buf_4[16])
              {
                v338 = *(int **)&buf_4[4];
                v251 = *(_DWORD *)buf_4;
                v252 = *(_DWORD *)&buf_4[16] - *(_DWORD *)buf_4;
                if (*(_DWORD *)&buf_4[16] - *(_DWORD *)buf_4 <= *((_DWORD *)v10 + 45))
                  v253 = *((_DWORD *)v10 + 45);
                else
                  v253 = *(_DWORD *)&buf_4[16] - *(_DWORD *)buf_4;
                _VCAudioPlayer_CopyPlaybackBuffer((void **)v360, a1 + 64, 0, v253 * *((_DWORD *)v10 + 46));
                *(_DWORD *)(a1 + 712) = 3;
                if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
                {
                  v332 = (os_log_t)VRTraceErrorLogLevelToCSTR();
                  v254 = *MEMORY[0x1E0CF2758];
                  log = *MEMORY[0x1E0CF2758];
                  if (*MEMORY[0x1E0CF2748])
                  {
                    if (os_log_type_enabled(v254, OS_LOG_TYPE_DEFAULT))
                    {
                      v255 = micro();
                      *(_DWORD *)v362 = 136316930;
                      *(_QWORD *)&v362[4] = v332;
                      *(_WORD *)&v362[12] = 2080;
                      *(_QWORD *)&v362[14] = "_VCAudioPlayer_DecodeSkipSilence";
                      *(_WORD *)&v362[22] = 1024;
                      v363 = 2326;
                      v364 = 2048;
                      *(double *)v365 = v255;
                      *(_WORD *)&v365[8] = 1024;
                      *(_DWORD *)v366 = v252;
                      *(_WORD *)&v366[4] = 1024;
                      *(_DWORD *)&v366[6] = v249;
                      *(_WORD *)v367 = 1024;
                      *(_DWORD *)&v367[2] = v253;
                      *(_WORD *)v368 = 1024;
                      *(_DWORD *)&v368[2] = v251;
                      _os_log_impl(&dword_1D8A54000, log, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d %7.03f: %-4i  skip %i -> %i adjust %d", v362, 0x3Eu);
                    }
                  }
                  else if (os_log_type_enabled(v254, OS_LOG_TYPE_DEBUG))
                  {
                    v326 = micro();
                    *(_DWORD *)v362 = 136316930;
                    *(_QWORD *)&v362[4] = v332;
                    *(_WORD *)&v362[12] = 2080;
                    *(_QWORD *)&v362[14] = "_VCAudioPlayer_DecodeSkipSilence";
                    *(_WORD *)&v362[22] = 1024;
                    v363 = 2326;
                    v364 = 2048;
                    *(double *)v365 = v326;
                    *(_WORD *)&v365[8] = 1024;
                    *(_DWORD *)v366 = v252;
                    *(_WORD *)&v366[4] = 1024;
                    *(_DWORD *)&v366[6] = v249;
                    *(_WORD *)v367 = 1024;
                    *(_DWORD *)&v367[2] = v253;
                    *(_WORD *)v368 = 1024;
                    *(_DWORD *)&v368[2] = v251;
                    _os_log_debug_impl(&dword_1D8A54000, log, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d %7.03f: %-4i  skip %i -> %i adjust %d", v362, 0x3Eu);
                  }
                }
                v11 = v345;
                *(_DWORD *)(v346 + 1040) = v253;
                *(_DWORD *)(v346 + 1036) = v251;
                v250 = v338;
              }
              else
              {
                v253 = 0;
              }
              *v250 = v253;
              LogProfileTimeOverLimit_3("SpkrProc: Skip Silence", v241, 0.00499999989, v242, v243, v244, v245, v246, v247, v248, v328);
              v68 = v346;
              goto LABEL_143;
            }
            if ((*(_DWORD *)buf_4 & 0x80000000) != 0 && *((_DWORD *)v10 + 20))
            {
              v258 = 0.0;
              if (VRTraceIsInternalOSInstalled())
                v258 = micro();
              v259 = *(_DWORD *)buf_4;
              v339 = *(_DWORD *)&buf_4[16];
              v260 = *(_DWORD *)&buf_4[12];
              v261 = *(_DWORD **)&buf_4[4];
              *v340 = 4;
              v329 = v261;
              if (*(_DWORD *)(v11 + 28))
              {
                v259 = 0;
                *v340 = 6;
              }
              else
              {
                if (*(_DWORD *)a1)
                  v264 = v260 == 0;
                else
                  v264 = 1;
                if (v264)
                  v259 = 0;
              }
              if (-v259 < v339)
                v265 = -v259;
              else
                v265 = v339;
              v266 = *(_DWORD *)(a1 + 304) + v339;
              v267 = v266 + v265;
              v268 = *(_DWORD *)(a1 + 192);
              v269 = v268 - v266;
              if (v267 <= v268)
                v270 = v265;
              else
                v270 = v269;
              SizedBufferAtIndex = (unint64_t)_VCAudioPlayer_CopyPlaybackBuffer((void **)v360, a1 + 64, 0, *((_DWORD *)v10 + 46) * v339);
              v278 = v270;
              v279 = v329;
              if (v278)
              {
                if (v278 >= 0)
                  v280 = v278;
                else
                  v280 = v278 + 1;
                v333 = (os_log_t)(v280 >> 1);
                v330 = v278 - (v280 >> 1);
                loga = v278;
                if (v10[192])
                {
                  if ((int)v361 >= 1)
                  {
                    v281 = 0;
                    LODWORD(v11) = (_DWORD)v333 + v339;
                    v3 = (v339 - 1);
                    do
                    {
                      v282 = (unint64_t *)v360 + 3 * v281;
                      v283 = *v282;
                      v284 = *v282 + v282[1];
                      v285 = v339 - 1;
                      v286 = v339;
                      v287 = v333;
                      if (loga >= 2)
                      {
                        do
                        {
                          v288 = (_DWORD *)(v283 + 4 * v285);
                          v289 = (unint64_t)v288 < v284 && (unint64_t)v288 >= v283;
                          v290 = (_DWORD *)(v283 + 4 * v286);
                          if (!v289 || (unint64_t)v290 >= v284 || (unint64_t)v290 < v283)
                            goto LABEL_469;
                          *v290 = *v288;
                          ++v286;
                          --v285;
                          v287 = (os_log_t)((char *)v287 - 1);
                        }
                        while (v287);
                      }
                      v293 = *((_DWORD *)v10 + 46);
                      v294 = (const void *)(v283 + (v293 * (v339 - v330)));
                      if ((unint64_t)v294 > v284 || v283 > (unint64_t)v294)
                        goto LABEL_469;
                      SizedBufferAtIndex = v283 + (v293 * v11);
                      v296 = (v293 * v330);
                      v297 = v283 > SizedBufferAtIndex || SizedBufferAtIndex > v284;
                      v298 = !v297 && v284 - (unint64_t)v294 >= v296;
                      if (!v298 || v284 - SizedBufferAtIndex < v296)
                        goto LABEL_469;
                      SizedBufferAtIndex = (unint64_t)memcpy((void *)SizedBufferAtIndex, v294, v296);
                      ++v281;
                    }
                    while ((int)v361 > v281);
                  }
                }
                else if ((int)v361 >= 1)
                {
                  v300 = 0;
                  LODWORD(v11) = (_DWORD)v333 + v339;
                  v3 = (v339 - 1);
                  do
                  {
                    v301 = (unint64_t *)v360 + 3 * v300;
                    v302 = *v301;
                    v303 = *v301 + v301[1];
                    v304 = v339 - 1;
                    v305 = v339;
                    v306 = v333;
                    if (loga >= 2)
                    {
                      do
                      {
                        v307 = (_WORD *)(v302 + 2 * v304);
                        v308 = (unint64_t)v307 < v303 && (unint64_t)v307 >= v302;
                        v309 = (_WORD *)(v302 + 2 * v305);
                        if (!v308 || (unint64_t)v309 >= v303 || (unint64_t)v309 < v302)
                          goto LABEL_469;
                        *v309 = *v307;
                        ++v305;
                        --v304;
                        v306 = (os_log_t)((char *)v306 - 1);
                      }
                      while (v306);
                    }
                    v312 = *((_DWORD *)v10 + 46);
                    v313 = (const void *)(v302 + (v312 * (v339 - v330)));
                    if ((unint64_t)v313 > v303 || v302 > (unint64_t)v313)
                      goto LABEL_469;
                    SizedBufferAtIndex = v302 + (v312 * v11);
                    v315 = (v312 * v330);
                    v316 = v302 > SizedBufferAtIndex || SizedBufferAtIndex > v303;
                    v317 = !v316 && v303 - (unint64_t)v313 >= v315;
                    if (!v317 || v303 - SizedBufferAtIndex < v315)
                      goto LABEL_469;
                    SizedBufferAtIndex = (unint64_t)memcpy((void *)SizedBufferAtIndex, v313, v315);
                    ++v300;
                  }
                  while ((int)v361 > v300);
                }
                v11 = v345;
                v68 = v346;
                v279 = v329;
                if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
                {
                  v331 = VRTraceErrorLogLevelToCSTR();
                  v319 = *MEMORY[0x1E0CF2758];
                  v334 = *MEMORY[0x1E0CF2758];
                  if (*MEMORY[0x1E0CF2748])
                  {
                    if (os_log_type_enabled(v319, OS_LOG_TYPE_DEFAULT))
                    {
                      v320 = micro();
                      *(_DWORD *)v362 = 136316674;
                      *(_QWORD *)&v362[4] = v331;
                      *(_WORD *)&v362[12] = 2080;
                      *(_QWORD *)&v362[14] = "_VCAudioPlayer_DecodeDup";
                      *(_WORD *)&v362[22] = 1024;
                      v363 = 2361;
                      v364 = 2048;
                      *(double *)v365 = v320;
                      *(_WORD *)&v365[8] = 1024;
                      *(_DWORD *)v366 = loga;
                      *(_WORD *)&v366[4] = 1024;
                      *(_DWORD *)&v366[6] = v339;
                      *(_WORD *)v367 = 1024;
                      *(_DWORD *)&v367[2] = loga + v339;
                      _os_log_impl(&dword_1D8A54000, v334, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d %7.03f: %-4i  dup  %i -> %i", v362, 0x38u);
                    }
                  }
                  else if (os_log_type_enabled(v319, OS_LOG_TYPE_DEBUG))
                  {
                    v327 = micro();
                    *(_DWORD *)v362 = 136316674;
                    *(_QWORD *)&v362[4] = v331;
                    *(_WORD *)&v362[12] = 2080;
                    *(_QWORD *)&v362[14] = "_VCAudioPlayer_DecodeDup";
                    *(_WORD *)&v362[22] = 1024;
                    v363 = 2361;
                    v364 = 2048;
                    *(double *)v365 = v327;
                    *(_WORD *)&v365[8] = 1024;
                    *(_DWORD *)v366 = loga;
                    *(_WORD *)&v366[4] = 1024;
                    *(_DWORD *)&v366[6] = v339;
                    *(_WORD *)v367 = 1024;
                    *(_DWORD *)&v367[2] = loga + v339;
                    _os_log_debug_impl(&dword_1D8A54000, v334, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d %7.03f: %-4i  dup  %i -> %i", v362, 0x38u);
                  }
                }
                *v340 = 5;
                v278 = loga;
              }
              *v279 = v278 + v339;
              LogProfileTimeOverLimit_3("SpkrProc: Dup", v258, 0.00499999989, v271, v272, v273, v274, v275, v276, v277, v328);
LABEL_143:
              VCTimescale_UpdateTimescaleHistoryBuffer((uint64_t)v348);
              v110 = *v340;
              if (*v340 > 5 || ((1 << v110) & 0x3A) == 0)
                goto LABEL_157;
              ++*(_DWORD *)(v68 + 196);
              if (v110 == 5 || v110 == 3)
                v111 = *(_DWORD *)(v68 + 200) + 1;
              else
                v111 = *(_DWORD *)(v68 + 200);
              *(_DWORD *)(v68 + 200) = v111;
              if (v110 == 4 || v110 == 1)
                v112 = *(_DWORD *)(v68 + 204) + 1;
              else
                v112 = *(_DWORD *)(v68 + 204);
              *(_DWORD *)(v68 + 204) = v112;
              if ((v110 | 2) == 3)
              {
                ++*(_DWORD *)(v68 + 212);
              }
              else if ((v110 & 0xFFFFFFFE) == 4)
              {
                v113 = *(_DWORD *)(v68 + 208) + 1;
                goto LABEL_156;
              }
              v113 = *(_DWORD *)(v68 + 208);
LABEL_156:
              *(_DWORD *)(v68 + 208) = v113;
LABEL_157:
              *(_DWORD *)v11 = *(_DWORD *)&buf_4[16] - **(_DWORD **)&buf_4[4];
              v114 = v352;
              v115 = v352 - v351;
              if (v352 != v351)
              {
                v116 = *(double **)(v344 + 24);
                v117 = *v116;
                if (*v116 >= (double)(int)(v351 - v352))
                {
                  v118 = v117 + (double)v115;
                }
                else
                {
                  VRLogfilePrintSync(*(FILE ***)(v68 + 976), "Average JB queue size protected from going negative. Current size: %f new size: %f samplesDelta: %d needed samples: %d audioPlayer mode: %d silent: %d\n", v104, v105, v106, v107, v108, v109, SLOBYTE(v117));
                  v118 = 0.0;
                  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                  {
                    v119 = VRTraceErrorLogLevelToCSTR();
                    v120 = *MEMORY[0x1E0CF2758];
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
                    {
                      v121 = *v116;
                      v122 = *v116 + (double)v115;
                      v123 = *v340;
                      *(_DWORD *)v362 = 136317186;
                      *(_QWORD *)&v362[4] = v119;
                      *(_WORD *)&v362[12] = 2080;
                      *(_QWORD *)&v362[14] = "_VCAudioPlayer_UpdateAvgQueueSize";
                      *(_WORD *)&v362[22] = 1024;
                      v363 = 3146;
                      v364 = 2048;
                      *(double *)v365 = v121;
                      *(_WORD *)&v365[8] = 2048;
                      *(double *)v366 = v122;
                      *(_WORD *)&v366[8] = 1024;
                      *(_DWORD *)v367 = v115;
                      *(_WORD *)&v367[4] = 1024;
                      *(_DWORD *)v368 = v341;
                      *(_WORD *)&v368[4] = 1024;
                      v369 = v123;
                      v370 = 1024;
                      v371 = v342;
                      _os_log_error_impl(&dword_1D8A54000, v120, OS_LOG_TYPE_ERROR, "VCAudioPlayer [%s] %s:%d Average JB queue size protected from going negative. Current size: %f, new size: %f, samplesDelta: %d, needed samples: %d, audioPlayer mode: %d, silent: %d", v362, 0x48u);
                    }
                  }
                }
                *v116 = v118;
                v114 = v352;
              }
              if (v114 >= 20 && *((_DWORD *)v10 + 18))
              {
                _VCAudioPlayer_Sample_RampUp(a1, (uint64_t)v360, 20);
                *((_DWORD *)v10 + 18) = 0;
              }
              if (v114 >= 20 && *((_DWORD *)v10 + 19))
              {
                _VCAudioPlayer_SimulateCrossFade((float *)a1, 1, (uint64_t)v360, 20);
                *((_DWORD *)v10 + 19) = 0;
              }
              v124 = v351;
              v3 = v352;
              v125 = *(_DWORD *)(v347 + 8);
              v126 = VCTimescale_TailExtractAvailable((uint64_t)v348);
              LODWORD(v11) = 0;
              if (v124 && (v126 & 1) == 0)
              {
                v133 = *(_DWORD *)(a1 + 172) + v124;
                v134 = *(_DWORD *)(a1 + 168) - v124;
                *(_DWORD *)(a1 + 168) = v134;
                *(_DWORD *)(a1 + 172) = v133;
                v135 = *(_DWORD *)(a1 + 184);
                if (v135 < 1)
                {
                  LODWORD(v11) = 0;
                }
                else
                {
                  *(_DWORD *)(a1 + 184) = v135 - v124;
                  LODWORD(v11) = 1;
                }
                if (v134 < 1)
                {
                  if (v134 < 0)
                  {
                    VRLogfilePrintSync(*(FILE ***)(v346 + 976), "Critical: Number of samples in the input buffer would have become negative! samples=%d samplesIn=%d\n", v127, v128, v129, v130, v131, v132, v134);
                    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                    {
                      v144 = VRTraceErrorLogLevelToCSTR();
                      v145 = *MEMORY[0x1E0CF2758];
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
                      {
                        v262 = *(_DWORD *)(a1 + 168);
                        *(_DWORD *)v362 = 136316162;
                        *(_QWORD *)&v362[4] = v144;
                        *(_WORD *)&v362[12] = 2080;
                        *(_QWORD *)&v362[14] = "_VCAudioPlayer_UpdateInputBuffer";
                        *(_WORD *)&v362[22] = 1024;
                        v363 = 3197;
                        v364 = 1024;
                        *(_DWORD *)v365 = v262;
                        *(_WORD *)&v365[4] = 1024;
                        *(_DWORD *)&v365[6] = v124;
                        _os_log_error_impl(&dword_1D8A54000, v145, OS_LOG_TYPE_ERROR, "VCAudioPlayer [%s] %s:%d Number of samples in the input buffer would have become negative! samples=%d samplesIn=%d", v362, 0x28u);
                      }
                    }
                    *(_DWORD *)(a1 + 168) = 0;
                  }
                }
                else if (*((_DWORD *)v10 + 47))
                {
                  v349 = v11;
                  LODWORD(v11) = 0;
                  do
                  {
                    v136 = v64 + 24 * v11;
                    SizedBufferAtIndex = *(_QWORD *)v136;
                    v137 = *(_QWORD *)(v136 + 8);
                    v138 = *((_DWORD *)v10 + 46);
                    v139 = (SizedBufferAtIndex + (v138 * v124));
                    v140 = (*(_DWORD *)(a1 + 168) * v138);
                    if (SizedBufferAtIndex + v137 < (unint64_t)v139
                      || SizedBufferAtIndex > (unint64_t)v139
                      || v137 - (v138 * v124) < v140
                      || v137 < v140)
                    {
                      goto LABEL_469;
                    }
                    memmove((void *)SizedBufferAtIndex, v139, v140);
                    LODWORD(v11) = v11 + 1;
                  }
                  while (*((_DWORD *)v10 + 47) > v11);
                  LODWORD(v11) = v349;
                }
              }
              v146 = *(_DWORD *)v6;
              if ((_DWORD)v3)
              {
                v146 += v3;
                *(_DWORD *)v6 = v146;
              }
              v147 = (uint64_t *)v347;
              *(_DWORD *)(a1 + 308) = *(_DWORD *)(a1 + 172) - v146;
              *(_BYTE *)(a1 + 312) = *(_BYTE *)(a1 + 176);
              if (!(v11 | v3) && v146 < v125)
              {
                if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                {
                  v148 = VRTraceErrorLogLevelToCSTR();
                  v149 = *MEMORY[0x1E0CF2758];
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
                  {
                    v256 = *(_DWORD *)v6;
                    *(_DWORD *)v362 = 136316162;
                    *(_QWORD *)&v362[4] = v148;
                    *(_WORD *)&v362[12] = 2080;
                    *(_QWORD *)&v362[14] = "_VCAudioPlayer_UpdateOutputBuffer";
                    *(_WORD *)&v362[22] = 1024;
                    v363 = 3214;
                    v364 = 1024;
                    *(_DWORD *)v365 = v256;
                    *(_WORD *)&v365[4] = 1024;
                    *(_DWORD *)&v365[6] = v125;
                    _os_log_error_impl(&dword_1D8A54000, v149, OS_LOG_TYPE_ERROR, "VCAudioPlayer [%s] %s:%d Number of samples in the output buffer would have become negative! samples=%d sampleCount=%d\n", v362, 0x28u);
                  }
                }
                v147 = (uint64_t *)v347;
                if (*((_DWORD *)v10 + 47))
                {
                  v3 = 0;
                  do
                  {
                    v150 = *((_DWORD *)v10 + 46);
                    v151 = (unint64_t *)(v4 + 24 * v3);
                    v152 = *v151;
                    v153 = *v151 + v151[1];
                    SizedBufferAtIndex = v152 + (v150 * *(_DWORD *)v6);
                    v154 = ((v125 - *(_DWORD *)v6) * v150);
                    if (v153 < SizedBufferAtIndex || v152 > SizedBufferAtIndex || v153 - SizedBufferAtIndex < v154)
                      goto LABEL_469;
                    bzero((void *)SizedBufferAtIndex, v154);
                    v3 = (v3 + 1);
                  }
                  while (*((_DWORD *)v10 + 47) > v3);
                }
                *(_DWORD *)(a1 + 304) = v125;
                *(_DWORD *)(a1 + 308) = *(_DWORD *)(a1 + 172) - v125;
              }
              _VCAudioPlayer_UpdateLogDumpStats(a1, v341, v351, v352);
              _VCAudioPlayer_LogStats((FILE **)a1);
              if (v342)
                v157 = *(_DWORD *)a1 + 1;
              else
                v157 = 0;
              v3 = a1 + 296;
              *(_DWORD *)a1 = v157;
              SampleCount = VCAudioBufferList_GetSampleCount(*v147);
              if (SampleCount < 2)
              {
                if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
                {
                  v321 = VRTraceErrorLogLevelToCSTR();
                  v322 = *MEMORY[0x1E0CF2758];
                  SizedBufferAtIndex = *MEMORY[0x1E0CF2758];
                  if (!*MEMORY[0x1E0CF2748])
                    goto LABEL_470;
                  if (os_log_type_enabled((os_log_t)SizedBufferAtIndex, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)v362 = 136315906;
                    *(_QWORD *)&v362[4] = v321;
                    *(_WORD *)&v362[12] = 2080;
                    *(_QWORD *)&v362[14] = "_VCAudioPlayer_FillPlayedSamplesForCrossFade";
                    *(_WORD *)&v362[22] = 1024;
                    v363 = 1072;
                    v364 = 1024;
                    *(_DWORD *)v365 = SampleCount;
                    _os_log_impl(&dword_1D8A54000, v322, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Not able to store the last two played samples for crossfade. sampleCount=%d", v362, 0x22u);
                  }
                }
                goto LABEL_264;
              }
              v159 = *((_DWORD *)v10 + 47);
              if (!v159)
                goto LABEL_264;
              v160 = 0;
              v161 = 4 * (SampleCount - 2);
              v162 = a1 + 448;
              v163 = a1 + 512;
              v164 = 2 * (SampleCount - 2);
              while (1)
              {
                v165 = (v4 + 24 * v160);
                SizedBufferAtIndex = (unint64_t)&v165[3];
                if (v4 > (unint64_t)v165 || SizedBufferAtIndex > v3)
                  break;
                isa = (unint64_t)v165->isa;
                if (v165->isa)
                {
                  v168 = (v4 + 24 * v160);
                  v169 = v168[1].isa;
                  SizedBufferAtIndex = (unint64_t)&v168[1];
                  v170 = (unint64_t)v169 + isa;
                  if (v10[192])
                  {
                    v171 = (_DWORD *)(isa + v161);
                    v172 = isa + v161 < v170 && (unint64_t)v171 >= isa;
                    v173 = v162 + 16 * v160;
                    if (!v172 || v173 >= v163 || v173 < v162)
                      goto LABEL_469;
                    *(_DWORD *)(v173 + 12) = *v171;
                    v176 = (unint64_t)v165->isa;
                    SizedBufferAtIndex = (unint64_t)v165->isa + *(_QWORD *)SizedBufferAtIndex;
                    v177 = ((char *)v165->isa + 4 * (SampleCount - 1));
                    if ((unint64_t)v177 >= SizedBufferAtIndex || (unint64_t)v177 < v176)
                      goto LABEL_469;
                    *(_DWORD *)(v162 + 16 * v160 + 8) = v177->isa;
                  }
                  else
                  {
                    v179 = (_WORD *)(isa + v164);
                    v180 = isa + v164 < v170 && (unint64_t)v179 >= isa;
                    v181 = v162 + 16 * v160;
                    if (!v180 || v181 >= v163 || v181 < v162)
                      goto LABEL_469;
                    *(_WORD *)(v181 + 12) = *v179;
                    v184 = (unint64_t)v165->isa;
                    SizedBufferAtIndex = (unint64_t)v165->isa + *(_QWORD *)SizedBufferAtIndex;
                    v185 = ((char *)v165->isa + 2 * (SampleCount - 1));
                    if ((unint64_t)v185 >= SizedBufferAtIndex || (unint64_t)v185 < v184)
                      goto LABEL_469;
                    *(_WORD *)(v162 + 16 * v160 + 8) = v185->isa;
                  }
                }
                if (v159 <= ++v160)
                  goto LABEL_264;
              }
              while (1)
              {
LABEL_469:
                __break(0x5519u);
LABEL_470:
                if (os_log_type_enabled((os_log_t)SizedBufferAtIndex, OS_LOG_TYPE_DEBUG))
                  VCAudioPlayer_GetSamples_cold_3();
LABEL_264:
                v350 = v11;
                v187 = *(_QWORD *)v347;
                v188 = *(_DWORD *)(v347 + 8);
                ChannelCount = VCAudioBufferList_GetChannelCount(*(_QWORD *)v347);
                v197 = *(_DWORD *)v6;
                if (*(_DWORD *)v6 >= v188)
                  goto LABEL_280;
                VRLogfilePrintSync(*(FILE ***)(v346 + 976), "Critical: Number of samples in the output buffer would have become negative! samples=%d sampleCount=%d\n", v190, v191, v192, v193, v194, v195, *(_DWORD *)v6);
                if ((int)VRTraceGetErrorLogLevelForModule() > 2)
                {
                  v198 = VRTraceErrorLogLevelToCSTR();
                  v199 = *MEMORY[0x1E0CF2758];
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
                  {
                    v257 = *(_DWORD *)v6;
                    *(_DWORD *)v362 = 136316162;
                    *(_QWORD *)&v362[4] = v198;
                    *(_WORD *)&v362[12] = 2080;
                    *(_QWORD *)&v362[14] = "_VCAudioPlayer_FinalizeOutputBuffer";
                    *(_WORD *)&v362[22] = 1024;
                    v363 = 3229;
                    v364 = 1024;
                    *(_DWORD *)v365 = v257;
                    *(_WORD *)&v365[4] = 1024;
                    *(_DWORD *)&v365[6] = v188;
                    _os_log_error_impl(&dword_1D8A54000, v199, OS_LOG_TYPE_ERROR, "VCAudioPlayer [%s] %s:%d Number of samples in the output buffer would have become negative! samples=%d sampleCount=%d\n", v362, 0x28u);
                  }
                }
                if (*((_DWORD *)v10 + 47))
                {
                  LODWORD(v11) = 0;
                  while (1)
                  {
                    v200 = *((_DWORD *)v10 + 46);
                    v201 = (unint64_t *)(v4 + 24 * v11);
                    v202 = *v201;
                    v203 = *v201 + v201[1];
                    SizedBufferAtIndex = v202 + (v200 * *(_DWORD *)v6);
                    v204 = ((v188 - *(_DWORD *)v6) * v200);
                    v205 = v203 < SizedBufferAtIndex || v202 > SizedBufferAtIndex;
                    if (v205 || v203 - SizedBufferAtIndex < v204)
                      break;
                    bzero((void *)SizedBufferAtIndex, v204);
                    LODWORD(v11) = v11 + 1;
                    if (*((_DWORD *)v10 + 47) <= v11)
                      goto LABEL_279;
                  }
                }
                else
                {
LABEL_279:
                  *(_DWORD *)(a1 + 304) = v188;
                  *(_DWORD *)(a1 + 308) = *(_DWORD *)(a1 + 172) - v188;
                  v197 = v188;
LABEL_280:
                  v11 = ChannelCount;
                  if (ChannelCount == *(_DWORD *)v3)
                  {
                    if (ChannelCount)
                    {
                      v207 = 0;
                      v3 = a1 + 208;
                      do
                      {
                        v354 = 0;
                        memset(v362, 0, sizeof(v362));
                        SizedBufferAtIndex = VCAudioBufferList_GetSizedBufferAtIndex(v187, v207, &v354, v362);
                        if ((_DWORD)SizedBufferAtIndex)
                        {
                          v208 = (*((_DWORD *)v10 + 46) * v188);
                          if (*(_QWORD *)v3 < v208 || *(_QWORD *)&v362[8] < v208)
                            goto LABEL_469;
                          memcpy(*(void **)v362, *(const void **)(v3 - 8), v208);
                        }
                        ++v207;
                        v3 += 24;
                      }
                      while (v11 != v207);
                      v197 = *(_DWORD *)v6;
                    }
                    v210 = v197 - v188;
                    *(_DWORD *)(a1 + 304) = v210;
                    if (*(_BYTE *)(v345 + 98))
                    {
                      if (*(_DWORD *)(v345 + 28))
                        v211 = JitterQueue_QueueEmptyOrAllDTX(*(_QWORD *)(v345 + 64));
                      else
                        v211 = 0;
                      VCAudioBufferList_SetSilenceInQueue(v187, v211);
                      v210 = *(_DWORD *)v6;
                    }
                    if (v210 < 1)
                    {
                      if (v210 < 0)
                        VRLogfilePrintSync(*(FILE ***)(v346 + 976), "Critical: Number of samples in the output buffer became negative! samples=%d sampleCount=%d\n", v190, v191, v192, v193, v194, v195, v210);
                      goto LABEL_315;
                    }
                    if (!*((_DWORD *)v10 + 47))
                      goto LABEL_315;
                    v3 = 0;
                    while (1)
                    {
                      v212 = v4 + 24 * v3;
                      SizedBufferAtIndex = *(_QWORD *)v212;
                      v213 = *(_QWORD *)(v212 + 8);
                      v214 = *((_DWORD *)v10 + 46);
                      v215 = (SizedBufferAtIndex + (v214 * v188));
                      v216 = (*(_DWORD *)v6 * v214);
                      v217 = SizedBufferAtIndex + v213 < (unint64_t)v215
                          || SizedBufferAtIndex > (unint64_t)v215;
                      v218 = !v217 && v213 - (v214 * v188) >= v216;
                      if (!v218 || v213 < v216)
                        break;
                      memmove((void *)SizedBufferAtIndex, v215, v216);
                      v3 = (v3 + 1);
                      if (*((_DWORD *)v10 + 47) <= v3)
                        goto LABEL_315;
                    }
                  }
                  else
                  {
                    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                    {
                      v323 = VRTraceErrorLogLevelToCSTR();
                      v324 = *MEMORY[0x1E0CF2758];
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
                      {
                        v325 = *(_DWORD *)v3;
                        *(_DWORD *)v362 = 136316162;
                        *(_QWORD *)&v362[4] = v323;
                        *(_WORD *)&v362[12] = 2080;
                        *(_QWORD *)&v362[14] = "_VCAudioPlayer_FinalizeOutputBuffer";
                        *(_WORD *)&v362[22] = 1024;
                        v363 = 3237;
                        v364 = 1024;
                        *(_DWORD *)v365 = ChannelCount;
                        *(_WORD *)&v365[4] = 1024;
                        *(_DWORD *)&v365[6] = v325;
                        _os_log_error_impl(&dword_1D8A54000, v324, OS_LOG_TYPE_ERROR, "VCAudioPlayer [%s] %s:%d Channel count mismatch! sampleBufferChannelCount=%hhu audioPlayerChannelCount=%d", v362, 0x28u);
                      }
                    }
LABEL_315:
                    v4 = v347;
                    **(_DWORD **)(v347 + 16) = *(_DWORD *)(a1 + 308);
                    v220 = *(int **)(v347 + 40);
                    if (v220)
                    {
                      if (v350)
                        v221 = 1;
                      else
                        v221 = *(_DWORD *)a1 == 0;
                      v222 = !v221;
                      *v220 = v222;
                    }
                    v223 = *(_DWORD **)(v347 + 48);
                    if (v223)
                      *v223 = *(_DWORD *)a1;
                    v224 = *(unint64_t **)(v347 + 24);
                    v3 = v346;
                    if (!v224)
                      goto LABEL_330;
                    SizedBufferAtIndex = *v224;
                    if (!*v224)
                      goto LABEL_330;
                    v225 = v224[1];
                    v226 = *(unsigned __int8 *)(a1 + 50);
                    v224[2] = v226;
                    if (v226 <= 0x10 && v225 >= v226)
                    {
                      memcpy((void *)SizedBufferAtIndex, (const void *)(a1 + 34), v226);
LABEL_330:
                      v227 = *(unsigned __int8 *)(a1 + 30);
                      if (v227 <= *(unsigned __int8 *)(a1 + 29))
                        LOBYTE(v227) = *(_BYTE *)(a1 + 29);
                      **(_BYTE **)(v347 + 32) = v227;
                      LogProfileTimeOverLimit_3("SpkrProc: GetSamples", v5, 0.00499999989, v189, v190, v191, v192, v193, v194, v195, v328);
                      v228 = &audioPlayerMode[*(unsigned int *)(a1 + 712)];
                      if (v228 < queueGrowthMode && v228 >= audioPlayerMode)
                      {
                        *(_QWORD *)(v346 + 16) = *v228;
                        if (*(_DWORD *)(v345 + 28))
                          v229 = 0;
                        else
                          v229 = *(_QWORD *)(v346 + 184);
                        *(_QWORD *)v346 = v229;
                        *(double *)(v345 + 16) = micro();
                        v230 = **(_DWORD **)(v347 + 16);
                        *(_DWORD *)(v345 + 24) = v230;
                        v231 = *(_DWORD *)(v347 + 8);
                        *(_DWORD *)(a1 + 308) += v231;
                        *(_DWORD *)(v345 + 100) += v231;
                        if (v343 == v230)
                        {
                          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
                          {
                            v238 = VRTraceErrorLogLevelToCSTR();
                            v239 = *MEMORY[0x1E0CF2758];
                            v240 = *MEMORY[0x1E0CF2758];
                            if (*MEMORY[0x1E0CF2748])
                            {
                              if (os_log_type_enabled(v240, OS_LOG_TYPE_DEFAULT))
                              {
                                *(_DWORD *)v362 = 136315906;
                                *(_QWORD *)&v362[4] = v238;
                                *(_WORD *)&v362[12] = 2080;
                                *(_QWORD *)&v362[14] = "_VCAudioPlayer_GetAudioSamples";
                                *(_WORD *)&v362[22] = 1024;
                                v363 = 3634;
                                v364 = 1024;
                                *(_DWORD *)v365 = v343;
                                _os_log_impl(&dword_1D8A54000, v239, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Timestamp did not increment: %d", v362, 0x22u);
                              }
                            }
                            else if (os_log_type_enabled(v240, OS_LOG_TYPE_DEBUG))
                            {
                              VCAudioPlayer_GetSamples_cold_2();
                            }
                          }
                          VRLogfilePrintSync(*(FILE ***)(v346 + 976), "Warning: Timestamp did not increment! prevTimestamp=%d\n", v232, v233, v234, v235, v236, v237, v343);
                        }
                        return;
                      }
                    }
                  }
                }
              }
            }
LABEL_130:
            v99 = *(_DWORD **)&buf_4[4];
            v100 = *(_DWORD *)&buf_4[16];
            if (*(_DWORD *)&buf_4[12])
              v101 = *(_DWORD *)a1 == 0;
            else
              v101 = 1;
            v102 = v101;
            v103 = 7;
            if (*(int *)buf_4 >= 1 && v102)
            {
              if (*((_DWORD *)v10 + 18) || *((_DWORD *)v10 + 19))
              {
                v103 = 7;
              }
              else
              {
                if (!*(_DWORD *)&buf_4[16])
                  goto LABEL_142;
                v103 = 2;
                v67 = (int *)(a1 + 712);
              }
            }
            *v67 = v103;
            _VCAudioPlayer_CopyPlaybackBuffer((void **)v360, a1 + 64, 0, *((_DWORD *)v10 + 46) * v100);
LABEL_142:
            *v99 = v100;
            goto LABEL_143;
          }
        }
      }
      else if (*v10 && !v10[17])
      {
        v88 = 3;
      }
      else if (v10[11])
      {
        v88 = 3;
      }
      else
      {
        v88 = 2;
      }
      HIDWORD(v359) = v88;
      goto LABEL_123;
    }
    v63 = 0;
    goto LABEL_64;
  }
  v12 = *(_DWORD *)(v11 + 24);
  _VCAudioPlayer_UpdateJitterQueueSize(a1);
  VCAudioPlayerDTMF_ProcessDTMF((_DWORD *)a1, a2);
  v13 = *(_DWORD **)(a2 + 16);
  if (v13)
    *v13 = *(_DWORD *)(v11 + 24);
  v14 = *(_QWORD *)(a2 + 24);
  if (v14)
    *(_QWORD *)(v14 + 16) = 0;
  v15 = *(_BYTE **)(a2 + 56);
  if (v15)
    *v15 = 0;
  _VCAudioPlayer_UpdateLogDumpStats(a1, *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 8));
  SizedBufferAtIndex = (unint64_t)_VCAudioPlayer_LogStats((FILE **)a1);
  v17 = &audioPlayerMode[*(unsigned int *)(a1 + 712)];
  if (v17 >= queueGrowthMode || v17 < audioPlayerMode)
    goto LABEL_469;
  *(_QWORD *)(v9 + 16) = *v17;
  if (*(_DWORD *)(v11 + 28))
    v18 = 0;
  else
    v18 = *(_QWORD *)(v9 + 184);
  *(_QWORD *)v9 = v18;
  *(double *)(v11 + 16) = micro();
  if (v12 == *(_DWORD *)(v11 + 24) && (int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    v35 = VRTraceErrorLogLevelToCSTR();
    v36 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      buf = 136315906;
      *(_QWORD *)buf_4 = v35;
      *(_WORD *)&buf_4[8] = 2080;
      *(_QWORD *)&buf_4[10] = "_VCAudioPlayerDTMF_GetDTMFSamples";
      *(_WORD *)&buf_4[18] = 1024;
      LODWORD(v357) = 3544;
      WORD2(v357) = 1024;
      *(_DWORD *)((char *)&v357 + 6) = v12;
      _os_log_impl(&dword_1D8A54000, v36, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d DTMFGenerator: Timestamp did not increment, timestamp=%d", (uint8_t *)&buf, 0x22u);
    }
  }
  *(_DWORD *)(v11 + 100) += *(_DWORD *)(a2 + 8);
  JitterQueue_SetLastDecodedFrameTimestamp(*(_QWORD *)(v11 + 64), *(_DWORD *)(a1 + 24));
}

BOOL VCAudioPlayer_IsTimestampValid(uint64_t a1)
{
  _BOOL8 result;

  if (a1)
    return *(_BYTE *)(a1 + 312) != 0;
  if ((int)VRTraceGetErrorLogLevelForModule() < 3)
    return 0;
  VRTraceErrorLogLevelToCSTR();
  result = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR);
  if (result)
  {
    VCAudioPlayer_IsTimestampValid_cold_1();
    return 0;
  }
  return result;
}

__n128 VCAudioPlayer_GetLastDecodedAudioFrameInfo(uint64_t a1, __n128 *a2)
{
  __n128 result;

  if (a1)
  {
    if (a2)
    {
      result = *(__n128 *)(a1 + 53784);
      a2[1].n128_u64[0] = *(_QWORD *)(a1 + 53800);
      *a2 = result;
    }
  }
  return result;
}

void _VCAudioPlayer_ResetPlaybackBuffer(unint64_t a1)
{
  int v1;
  void **v2;
  unsigned __int8 v4;
  unsigned int v5;
  void **v6;

  v2 = (void **)(a1 + 96);
  v1 = *(_DWORD *)(a1 + 96);
  if (v1 >= 1)
  {
    v4 = 0;
    while (1)
    {
      v5 = v4;
      v6 = (void **)(a1 + 24 * v4);
      if ((unint64_t)v6 < a1 || v6 + 3 > v2)
        break;
      if (*v6)
      {
        bzero(*v6, *(_QWORD *)(a1 + 24 * v5 + 8));
        v1 = *(_DWORD *)v2;
      }
      v4 = v5 + 1;
      if (v1 <= (v5 + 1))
        return;
    }
    __break(0x5519u);
  }
}

unint64_t _VCAudioPlayer_InitializePlaybackBuffer(unint64_t result, unint64_t a2, unsigned int a3)
{
  int v3;
  unsigned __int8 v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;

  v3 = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(result + 96) = v3;
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = a3;
    while (1)
    {
      v6 = v4;
      v7 = 3 * v4;
      v8 = (unint64_t *)(a2 + 8 * v7);
      if ((unint64_t)v8 < a2 || (unint64_t)(v8 + 3) > a2 + 96)
        break;
      v10 = (unint64_t *)(result + 8 * v7);
      v11 = *(_QWORD *)(a2 + 24 * v6 + 8);
      v12 = *v8;
      v13 = *v8 + v11;
      v14 = *v8 + v5;
      v15 = v11 - v5;
      v16 = v13 < v14 || v12 > v14;
      v17 = v16 || v15 > v13 - v14;
      v18 = !v17 && (unint64_t)v10 >= result;
      if (!v18 || (unint64_t)(v10 + 3) > result + 96)
        break;
      *v10 = v14;
      *(_QWORD *)(result + 24 * v6 + 8) = v15;
      v4 = v6 + 1;
      if (v3 <= (v6 + 1))
        return result;
    }
    __break(0x5519u);
  }
  return result;
}

uint64_t _VCAudioPlayer_CalcAdjustment(uint64_t a1, int **a2, int a3, int *a4, double a5, double a6, double a7, __n128 a8)
{
  BOOL *v8;
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  double v23;
  char v24;
  int v25;
  unint64_t v26;
  double v27;
  unsigned int v28;
  double v29;
  double v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  int16x8_t v35;
  unsigned int v36;
  BOOL v37;
  double v38;
  BOOL v39;
  unsigned int v40;
  double v41;
  double *v42;
  int v43;
  BOOL v44;
  char v45;
  double v46;
  BOOL v47;
  unsigned __int8 v48;
  double *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  double *v53;
  int v54;
  int v55;
  int v56;
  double v57;
  BOOL v58;
  double *v59;
  BOOL v60;
  float v61;
  int LeftOverSamples;
  double v63;
  unint64_t v64;
  double v65;
  int v66;
  BOOL v67;
  char v68;
  int v69;
  double v70;
  BOOL v71;
  BOOL v72;
  BOOL v73;
  __n128 v74;
  uint64_t v75;
  NSObject *v76;
  NSObject *v77;
  const char *v78;
  NSObject *v79;
  uint32_t v80;
  int v81;
  _BOOL4 v82;
  int v83;
  _BOOL4 v84;
  _BOOL4 v85;
  _BOOL4 v86;
  uint64_t v87;
  NSObject *v88;
  NSObject *v89;
  _BOOL4 v90;
  uint64_t v91;
  int v92;
  _BOOL4 v93;
  int v94;
  int v95;
  uint64_t v96;
  NSObject *v97;
  NSObject *v98;
  uint64_t v99;
  NSObject *v100;
  NSObject *v101;
  _BOOL4 v102;
  const char *v103;
  double v104;
  int v105;
  unint64_t v106;
  double v107;
  int v108;
  int v109;
  int v110;
  int v111;
  _BOOL4 v112;
  _BOOL4 v113;
  double v114;
  int v115;
  int v116;
  double v117;
  int v118;
  double v119;
  double v120;
  double v122;
  double v123;
  int v124;
  int v125;
  _DWORD *v126;
  uint64_t v127;
  BOOL IsNextFrameDTX;
  int IsCompressionNeeded;
  unint64_t v130;
  int v131;
  uint64_t v132;
  NSObject *v133;
  NSObject *v134;
  int v135;
  int v137;
  _BOOL4 v138;
  uint64_t v139;
  __n128 v140;
  uint8_t buf[4];
  uint64_t v142;
  __int16 v143;
  const char *v144;
  __int16 v145;
  int v146;
  __int16 v147;
  _BYTE v148[28];
  __int16 v149;
  int v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  v8 = (BOOL *)(a1 + 52376);
  if (*(_BYTE *)(a1 + 52584))
    return 0;
  v14 = a1 + 51640;
  v15 = a1 + 35532;
  v16 = (double)*((int *)a2 + 4);
  LODWORD(a5) = *(_DWORD *)(a1 + 52552);
  v17 = (double)*(unint64_t *)&a5;
  a8.n128_f64[0] = v16 / v17;
  v18 = *(double *)a2[3];
  v19 = (v18 - v16) / v17;
  if (*(_BYTE *)(a1 + 52600) && *(_BYTE *)(a1 + 35544) && fabs(v19) < *(double *)(a1 + 52576) * 0.5)
    *(_BYTE *)(a1 + 35544) = 0;
  v140 = a8;
  *(_QWORD *)(a1 + 52424) = a8.n128_u64[0];
  *(_QWORD *)(a1 + 52432) = a2[4];
  v20 = JitterQueue_QueuedSamples(*(_QWORD *)(a1 + 35568));
  LODWORD(v21) = *((_DWORD *)v8 + 44);
  if (v8[1] || v8[8] || v8[11])
    v22 = *((double *)v8 + 31);
  else
    v22 = 0.0;
  v23 = *((double *)a2 + 4) + 0.00001 + v22;
  if (*(double *)(v14 + 688) <= v23)
  {
    v60 = *(_DWORD *)(v15 + 16096) >= *((unsigned __int16 *)v8 + 122);
    *v8 = v60;
    if (!v60 || v8[224] && (double)v20 / (double)v21 > v140.n128_f64[0] * 1.5 || *(_DWORD *)v15)
    {
      v24 = 0;
    }
    else
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        v87 = VRTraceErrorLogLevelToCSTR();
        v88 = *MEMORY[0x1E0CF2758];
        v89 = *MEMORY[0x1E0CF2758];
        if (*MEMORY[0x1E0CF2748])
        {
          if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
          {
            v90 = *v8;
            v91 = *(_QWORD *)(v14 + 688);
            *(_DWORD *)buf = 136316418;
            v142 = v87;
            v143 = 2080;
            v144 = "_VCAudioPlayer_ProtectMinimumQueue";
            v145 = 1024;
            v146 = 2869;
            v147 = 1024;
            *(_DWORD *)v148 = v90;
            *(_WORD *)&v148[4] = 2048;
            *(_QWORD *)&v148[6] = v91;
            *(_WORD *)&v148[14] = 2048;
            *(double *)&v148[16] = v23;
            _os_log_impl(&dword_1D8A54000, v88, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Warning: Protecting minimum queue. packetLifetimeIsLow=%d, packetLifeTime5Perc=%f threshold=%f\n", buf, 0x36u);
          }
        }
        else if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
        {
          v138 = *v8;
          v139 = *(_QWORD *)(v14 + 688);
          *(_DWORD *)buf = 136316418;
          v142 = v87;
          v143 = 2080;
          v144 = "_VCAudioPlayer_ProtectMinimumQueue";
          v145 = 1024;
          v146 = 2869;
          v147 = 1024;
          *(_DWORD *)v148 = v138;
          *(_WORD *)&v148[4] = 2048;
          *(_QWORD *)&v148[6] = v139;
          *(_WORD *)&v148[14] = 2048;
          *(double *)&v148[16] = v23;
          _os_log_debug_impl(&dword_1D8A54000, v88, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d Warning: Protecting minimum queue. packetLifetimeIsLow=%d, packetLifeTime5Perc=%f threshold=%f\n", buf, 0x36u);
        }
      }
      v24 = 1;
      if (v19 > 0.0)
        v19 = 0.0;
    }
  }
  else
  {
    v24 = 0;
    *v8 = 0;
  }
  v8[39] = v24;
  v25 = JitterQueue_QueuedSamples(*(_QWORD *)(v15 + 36));
  LODWORD(v26) = *((_DWORD *)v8 + 44);
  v27 = (double)v26;
  v28 = *(_DWORD *)(v14 + 4);
  v29 = *(double *)a2[3];
  v30 = *((double *)a2 + 4);
  v31 = *(float64x2_t *)(v14 + 672);
  v32 = (float64x2_t)vdupq_n_s64(0x3EE4F8B588E368F1uLL);
  v33.f64[0] = v30;
  *(_QWORD *)&v33.f64[1] = v140.n128_u64[0];
  *(_QWORD *)&v34.f64[0] = v140.n128_u64[0];
  v34.f64[1] = v30;
  v35 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(vaddq_f64(v31, v32), v34), (int32x4_t)vcgtq_f64(vaddq_f64(*(float64x2_t *)(v14 + 688), v32), v33));
  *(int8x8_t *)v35.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v35), (int8x8_t)0x1000100010001);
  *(int16x4_t *)v35.i8 = vzip2_s16(vzip1_s16(*(int16x4_t *)v35.i8, (int16x4_t)vext_s8(*(int8x8_t *)v35.i8, *(int8x8_t *)v35.i8, 6uLL)), *(int16x4_t *)v35.i8);
  *((_DWORD *)v8 + 1) = vmovn_s16(v35).u32[0];
  v36 = *(_DWORD *)(v14 + 724);
  v8[1] = v36 > 1;
  v8[2] = v36 > 7;
  v8[8] = *(_DWORD *)(v14 + 732) > 1u;
  if (*(_BYTE *)(v14 + 720))
    v37 = 0;
  else
    v37 = *(_BYTE *)(v14 + 721) == 0;
  v8[3] = v37;
  v8[13] = v30 < v140.n128_f64[0];
  v38 = (double)v25 / v27;
  v39 = v30 < v140.n128_f64[0] && v31.f64[0] >= *((double *)a2 + 5) * 0.8;
  v8[10] = v39;
  v40 = *(_DWORD *)(v14 + 12);
  v8[18] = v28 < v40;
  v8[19] = v28 > v40;
  v8[17] = *(_DWORD *)v14 == 0;
  v8[16] = v28 == 0;
  v41 = v30 + 0.00001;
  v8[11] = v38 <= v41;
  v8[12] = v38 > v140.n128_f64[0] * 1.5;
  v42 = (double *)*a2;
  v43 = **a2;
  v44 = v38 <= 0.0 || v43 == 0;
  v45 = !v44;
  v8[27] = v45;
  if (v44)
  {
    v47 = 0;
    v8[28] = 0;
  }
  else
  {
    v46 = v29 / v27;
    v8[28] = *(_DWORD *)(v15 + 84) != v43;
    v47 = v42[1] > v46 + 0.00001 && v46 > v41;
  }
  v48 = v45 ^ 1;
  v8[30] = v47;
  if (!v8[32])
    v48 = 0;
  v8[29] = v48;
  *(_DWORD *)(v15 + 84) = v43;
  v49 = (double *)a2[1];
  v50 = (unint64_t)(v49 + 100);
  v51 = *((int *)v49 + 200);
  v52 = (unint64_t)(v49 + 50);
  v53 = &v49[v51 + 50];
  if (v53 >= v49 + 100 || (unint64_t)v53 < v52)
LABEL_275:
    __break(0x5519u);
  v54 = *((_DWORD *)v49 + 201);
  if (v54 >= 1)
  {
    v55 = 0;
    v56 = 0;
    v57 = *v53;
    v58 = 1;
    while (1)
    {
      v59 = (double *)(v52 + 8 * (((int)v51 + v56) % 50));
      v60 = (unint64_t)v59 < v50 && (unint64_t)v59 >= v52;
      if (!v60)
        goto LABEL_275;
      if (vabdd_f64(v57, *v59) <= 5.0)
      {
        if (v55 > 1)
          goto LABEL_53;
        ++v55;
        v57 = *v59;
      }
      v58 = ++v56 < v54;
      if (v54 == v56)
        goto LABEL_53;
    }
  }
  v58 = 0;
LABEL_53:
  v8[33] = v58;
  v61 = *(float *)(v15 + 20);
  LeftOverSamples = VCAudioPlayer_GetLeftOverSamples(a1);
  v65 = *((double *)v8 + 5);
  v8[34] = v65 > 0.0;
  v8[35] = v65 < 0.0;
  v66 = *(_DWORD *)(v14 + 28);
  v8[20] = v66 != 0;
  if (!v8[152])
  {
    v8[21] = 0;
LABEL_64:
    v73 = 0;
    *((_WORD *)v8 + 11) = 0;
    v8[24] = 0;
    v74 = v140;
    goto LABEL_67;
  }
  v67 = *((_DWORD *)v8 + 42) != 5 || v66 == 0;
  v68 = !v67;
  v8[21] = v68;
  if (v67)
    goto LABEL_64;
  v69 = (int)(float)(v61 + (float)LeftOverSamples);
  v70 = *((double *)v8 + 20);
  v71 = *(_DWORD *)(v14 + 36) <= v69;
  v8[22] = v70 > 0.0;
  v8[24] = v71;
  v72 = v70 > 0.0 && *((_DWORD *)a2 + 4) <= v69;
  v74 = v140;
  v8[23] = v72;
  v63 = *(double *)(v14 + 40);
  HIDWORD(v64) = 1065646817;
  v73 = v63 >= 0.01;
LABEL_67:
  v8[25] = v73;
  if (*((_DWORD *)v8 + 32) != 1)
  {
LABEL_193:
    v114 = v19;
    goto LABEL_194;
  }
  if (*(_DWORD *)v15)
  {
    if (v65 != 0.0)
    {
      _VCAudioPlayer_SteerQueueCommand(a1, 2, v74);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        v75 = VRTraceErrorLogLevelToCSTR();
        v76 = *MEMORY[0x1E0CF2758];
        v77 = *MEMORY[0x1E0CF2758];
        if (*MEMORY[0x1E0CF2748])
        {
          if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            v142 = v75;
            v143 = 2080;
            v144 = "_VCAudioPlayer_HandleQueueSteeringReset";
            v145 = 1024;
            v146 = 2697;
            v78 = "VCAudioPlayer [%s] %s:%d Queue Steering: Resetting queue growth state";
            v79 = v76;
            v80 = 28;
LABEL_74:
            _os_log_impl(&dword_1D8A54000, v79, OS_LOG_TYPE_DEFAULT, v78, buf, v80);
            goto LABEL_167;
          }
        }
        else if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
        {
          _VCAudioPlayer_CalcAdjustment_cold_4();
        }
      }
    }
    goto LABEL_167;
  }
  v81 = v8[39];
  v82 = v8[5];
  if (v8[5])
  {
    v83 = 0;
  }
  else
  {
    v83 = v8[1];
    if (v8[1])
    {
      v83 = v8[8];
      if (v8[8])
      {
        v83 = *(unsigned __int8 *)(v14 + 721);
        if (*(_BYTE *)(v14 + 721))
          v83 = v8[13];
      }
    }
  }
  v8[9] = v83;
  if (v81)
  {
    v84 = v8[30];
    if (v8[30])
    {
      v84 = v8[28];
      if (v8[28])
        v84 = *(_BYTE *)(v14 + 721) != 0;
    }
  }
  else
  {
    v84 = 0;
  }
  v8[31] = v84;
  v85 = v8[11];
  if (v8[11] || !v8[17])
  {
    if (!v82)
      goto LABEL_93;
    v86 = 0;
  }
  else
  {
    v86 = 0;
    if (v8[19] && !v82 && v65 < 0.0)
    {
LABEL_93:
      v86 = 0;
      if (*(_BYTE *)(v14 + 721) && v65 <= 0.0)
        v86 = !v8[16];
    }
  }
  v8[14] = v86;
  if (v81)
  {
    v81 = *(unsigned __int8 *)(v14 + 721);
    if (*(_BYTE *)(v14 + 721))
    {
      v81 = v8[2];
      if (v8[2])
        v81 = !v8[16] && v8[13];
    }
  }
  v8[15] = v81;
  v92 = v83 | v84 | v86 | v81;
  v8[36] = v92;
  v93 = v8[30];
  if (v85)
  {
    v94 = 0;
    v95 = 0;
    v8[37] = 0;
    if (v93)
      goto LABEL_143;
    v94 = 0;
    v95 = *(unsigned __int8 *)(v14 + 720);
    goto LABEL_126;
  }
  if (v8[30])
  {
    v94 = 0;
    v95 = 0;
    v8[37] = 0;
    goto LABEL_143;
  }
  v95 = *(unsigned __int8 *)(v14 + 720);
  if (!*(_BYTE *)(v14 + 720) || *(_DWORD *)(v14 + 724) && *(_DWORD *)(v14 + 732))
    goto LABEL_124;
  v94 = v8[16];
  if (!v8[16])
    goto LABEL_125;
  if (!v8[29] && !v8[12] && !v8[7] && !v8[6] && !v8[18] && v65 <= 0.0)
  {
LABEL_124:
    v94 = 0;
    goto LABEL_125;
  }
  v94 = v8[13];
  if (v8[13])
  {
    if (!v8[10])
    {
      v94 = !v8[33] || *(_DWORD *)(a1 + 808) == 2;
      goto LABEL_125;
    }
    goto LABEL_124;
  }
LABEL_125:
  v8[37] = v94;
LABEL_126:
  if (v95)
  {
    v95 = v8[16];
    if (v8[16])
    {
      v95 = v8[18];
      if (v8[18] && (v8[29] || v8[12] || v8[7] || (v95 = v8[6]) != 0))
      {
        v95 = v8[13];
        if (v8[13])
        {
          if (v8[10])
            v95 = 0;
          else
            v95 = !v8[33] || *(_DWORD *)(a1 + 808) == 2;
        }
      }
    }
  }
LABEL_143:
  v8[38] = v95;
  if (v92)
  {
    if ((v94 | v95) == 1)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          _VCAudioPlayer_CalcAdjustment_cold_1();
      }
    }
    else if (*(_DWORD *)(v15 + 16096) >= *((unsigned __int16 *)v8 + 123))
    {
      _VCAudioPlayer_SteerQueueCommand(a1, 0, v74);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        v96 = VRTraceErrorLogLevelToCSTR();
        v97 = *MEMORY[0x1E0CF2758];
        v98 = *MEMORY[0x1E0CF2758];
        if (*MEMORY[0x1E0CF2748])
        {
          if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            v142 = v96;
            v143 = 2080;
            v144 = "_VCAudioPlayer_ExecuteQueueSteering";
            v145 = 1024;
            v146 = 2794;
            _os_log_impl(&dword_1D8A54000, v97, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Queue Steering: Growing queue to protect against low packet lifetime and erasures", buf, 0x1Cu);
          }
        }
        else if (os_log_type_enabled(v98, OS_LOG_TYPE_DEBUG))
        {
          _VCAudioPlayer_CalcAdjustment_cold_2();
        }
      }
      if (v8[28])
        v8[32] = 1;
    }
  }
  else if (*(_DWORD *)(v15 + 16096) >= *((unsigned __int16 *)v8 + 123) && ((v94 | v95) & 1) != 0)
  {
    _VCAudioPlayer_SteerQueueCommand(a1, 1, v74);
    if (v8[29])
      v8[32] = 0;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      v99 = VRTraceErrorLogLevelToCSTR();
      v100 = *MEMORY[0x1E0CF2758];
      v101 = *MEMORY[0x1E0CF2758];
      if (*MEMORY[0x1E0CF2748])
      {
        if (!os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
          goto LABEL_167;
        v102 = v8[38];
        *(_DWORD *)buf = 136315906;
        if (v102)
          v103 = "Proactively ";
        else
          v103 = "";
        v142 = v99;
        v143 = 2080;
        v144 = "_VCAudioPlayer_ExecuteQueueSteering";
        v145 = 1024;
        v146 = 2808;
        v147 = 2080;
        *(_QWORD *)v148 = v103;
        v78 = "VCAudioPlayer [%s] %s:%d Queue Steering: %s shrinking queue";
        v79 = v100;
        v80 = 38;
        goto LABEL_74;
      }
      if (os_log_type_enabled(v101, OS_LOG_TYPE_DEBUG))
        _VCAudioPlayer_CalcAdjustment_cold_3(v99, v8 + 38, v100);
    }
  }
LABEL_167:
  v104 = *((double *)a2 + 4);
  v105 = *((_DWORD *)a2 + 4);
  if (v19 != 0.0 && !*(_DWORD *)v15)
  {
    *(_DWORD *)buf = 0;
    if ((JitterQueue_GetTimestampDeltaToNextDTXPacket(*(_QWORD *)(v15 + 36), buf) & 1) != 0)
    {
      LODWORD(v106) = *((_DWORD *)v8 + 44);
      v107 = (double)*(int *)buf / (double)v106;
      if (v107 != 0.0)
      {
        HIDWORD(v63) = 1070889697;
        if (v107 < 0.32)
          goto LABEL_192;
      }
    }
  }
  v108 = JitterQueue_QueuedSamples(*(_QWORD *)(v15 + 36));
  v109 = *(_DWORD *)(a1 + 168);
  v110 = *(_DWORD *)(a1 + 304);
  v111 = VCTimescale_TailSize(a1 + 808);
  if (v8[21] && !v8[23] && v8[25])
  {
    v113 = 1;
    goto LABEL_189;
  }
  v112 = 1;
  if (v109 + v110 + v108 + v111 <= v105 && !*(_BYTE *)(v14 + 720))
  {
    v112 = v8[24];
    if (!v8[24] && *(double *)(v14 + 688) + 0.00001 >= v104)
    {
      if (!v8[36] && !v8[11])
      {
        v112 = v8[16];
        if (!v8[21])
          goto LABEL_183;
        goto LABEL_182;
      }
      v112 = 0;
    }
  }
  if (!v8[21])
    goto LABEL_183;
LABEL_182:
  if (!v8[24])
  {
    v113 = 1;
    if (!v112)
      goto LABEL_189;
    goto LABEL_188;
  }
LABEL_183:
  v113 = v8[11];
  if (!v112)
    goto LABEL_189;
LABEL_188:
  v114 = 0.0;
  if (v19 < 0.0)
    goto LABEL_194;
LABEL_189:
  if (!v113 || *(_DWORD *)v15)
    goto LABEL_193;
  v114 = v19;
  if (v19 > 0.0)
LABEL_192:
    v114 = 0.0;
LABEL_194:
  *((_DWORD *)v8 + 318) = 0;
  if (!*(_DWORD *)(a1 + 808))
  {
    v9 = 0;
    goto LABEL_230;
  }
  v115 = v8[224];
  if (v8[224] && *(_BYTE *)(v15 + 12))
    goto LABEL_226;
  v116 = 0;
  *((_WORD *)v8 + 662) = 0;
  LODWORD(v63) = *(_DWORD *)(a1 + 24);
  LODWORD(v64) = *((_DWORD *)v8 + 44);
  v117 = (double)v64;
  v118 = *(_DWORD *)v15;
  v119 = (double)*(unint64_t *)&v63 / v117;
  if (!*(_DWORD *)v15)
  {
    LODWORD(v65) = *(_DWORD *)(v15 + 52);
    v65 = (double)*(unint64_t *)&v65 / v117;
    if (v65 != 0.0)
    {
      v65 = vabdd_f64(v119, v65);
      if (v65 >= *(double *)(v15 + 60))
      {
        v116 = 0;
      }
      else
      {
        v116 = 1;
        v8[1324] = 1;
      }
    }
  }
  if (v118 || (LODWORD(v65) = *(_DWORD *)(v15 + 56), v120 = (double)*(unint64_t *)&v65 / v117, v120 == 0.0))
  {
    if (v118)
    {
      *(_DWORD *)(v15 + 52) = 0;
      *(_DWORD *)(v15 + 56) = 0;
    }
  }
  else if (vabdd_f64(v119, v120) < *(double *)(v15 + 60))
  {
    v116 = 1;
    v8[1325] = 1;
  }
  if (v115)
    v115 = *((double *)v8 + 6) == *((double *)v8 + 7) && v114 > 0.0 && *(_DWORD *)v14 == 0;
  v122 = *((double *)v8 + 25);
  v123 = v122 * 0.95;
  if (v118)
  {
    v124 = v122 * -0.45 >= v114;
    if (v123 <= v114)
      v124 = 1;
    goto LABEL_227;
  }
  if (v122 * -0.95 >= v114)
  {
LABEL_226:
    v124 = 1;
  }
  else
  {
    if (v123 <= v114)
      v125 = 1;
    else
      v125 = v115;
    v124 = v125 & (v116 ^ 1);
  }
LABEL_227:
  v9 = 0;
  if (a3 >= 1 && v124)
  {
    v9 = (int)(v18 - v16);
    *((_DWORD *)v8 + 318) = v9;
  }
LABEL_230:
  if (!a4)
    goto LABEL_253;
  v126 = (_DWORD *)(a1 + 808);
  if (!a3 || (int)v9 < 1)
  {
    if ((v9 & 0x80000000) == 0
      || (*v126 & 0xFFFFFFFE) != 2
      || v8[152] && !*(_BYTE *)(v15 + 69) && *((_DWORD *)v8 + 42) == 5)
    {
      goto LABEL_253;
    }
    v127 = a1 + 808;
    goto LABEL_250;
  }
  if (!v8[192])
  {
    if (*(float *)(a1 + 784) >= 72.0 || *(float *)(a1 + 788) >= 72.0)
      goto LABEL_246;
LABEL_245:
    IsNextFrameDTX = 1;
    goto LABEL_247;
  }
  if (*(float *)(a1 + 792) < 0.0058 && *(float *)(a1 + 796) < 0.0058)
    goto LABEL_245;
LABEL_246:
  IsNextFrameDTX = JitterQueue_IsNextFrameDTX(*(_QWORD *)(v15 + 36));
LABEL_247:
  IsCompressionNeeded = VCTimescale_IsCompressionNeeded((uint64_t)v126);
  if (IsNextFrameDTX || !IsCompressionNeeded)
  {
    LODWORD(v130) = *((_DWORD *)v8 + 44);
    v131 = (int)(*((double *)v8 + 29) * (double)v130);
    goto LABEL_252;
  }
  v127 = (uint64_t)v126;
LABEL_250:
  v131 = VCTimescale_WarpFrameSize(v127);
LABEL_252:
  *a4 = v131;
LABEL_253:
  if (v8[224] && !*(_BYTE *)(v15 + 12) && (_DWORD)v9)
    *(_BYTE *)(v15 + 12) = 1;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    v132 = VRTraceErrorLogLevelToCSTR();
    v133 = *MEMORY[0x1E0CF2758];
    v134 = *MEMORY[0x1E0CF2758];
    if (*MEMORY[0x1E0CF2748])
    {
      if (os_log_type_enabled(v134, OS_LOG_TYPE_DEFAULT))
      {
        v135 = JitterQueue_QueuedSamples(*(_QWORD *)(v15 + 36));
        *(_DWORD *)buf = 136316674;
        v142 = v132;
        v143 = 2080;
        v144 = "_VCAudioPlayer_CalcAdjustment";
        v145 = 1024;
        v146 = 3077;
        v147 = 2048;
        *(double *)v148 = v18 - v16;
        *(_WORD *)&v148[8] = 2048;
        *(double *)&v148[10] = v18;
        *(_WORD *)&v148[18] = 2048;
        *(double *)&v148[20] = v16;
        v149 = 1024;
        v150 = v135;
        _os_log_impl(&dword_1D8A54000, v133, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Adjust[%f] AvgQSize[%f] DesiredQsize[%f] QueuedSamples[%d]", buf, 0x40u);
      }
    }
    else if (os_log_type_enabled(v134, OS_LOG_TYPE_DEBUG))
    {
      v137 = JitterQueue_QueuedSamples(*(_QWORD *)(v15 + 36));
      *(_DWORD *)buf = 136316674;
      v142 = v132;
      v143 = 2080;
      v144 = "_VCAudioPlayer_CalcAdjustment";
      v145 = 1024;
      v146 = 3077;
      v147 = 2048;
      *(double *)v148 = v18 - v16;
      *(_WORD *)&v148[8] = 2048;
      *(double *)&v148[10] = v18;
      *(_WORD *)&v148[18] = 2048;
      *(double *)&v148[20] = v16;
      v149 = 1024;
      v150 = v137;
      _os_log_debug_impl(&dword_1D8A54000, v133, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d Adjust[%f] AvgQSize[%f] DesiredQsize[%f] QueuedSamples[%d]", buf, 0x40u);
    }
  }
  return v9;
}

void **_VCAudioPlayer_CopyPlaybackBuffer(void **result, unint64_t a2, int a3, int a4)
{
  int v4;
  void **v5;
  void **v7;
  unsigned __int8 v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  void **v13;
  unint64_t *v15;
  unint64_t v17;
  const void *v18;
  size_t v19;
  BOOL v20;
  BOOL v21;

  v5 = result + 12;
  v4 = *((_DWORD *)result + 24);
  *((_DWORD *)result + 25) = a4;
  if (v4 >= 1)
  {
    v7 = result;
    v8 = 0;
    v9 = a2 + 96;
    v10 = a3;
    while (1)
    {
      v11 = v8;
      v12 = 3 * v8;
      v13 = &v7[3 * v8];
      if (v13 < v7 || v13 + 3 > v5)
        break;
      v15 = (unint64_t *)(a2 + 8 * v12);
      if ((unint64_t)v15 < a2 || (unint64_t)(v15 + 3) > v9)
        break;
      v17 = *v15;
      v18 = (const void *)(v17 + v10);
      v19 = *((int *)v7 + 25);
      v20 = v17 + *(_QWORD *)(a2 + 24 * v11 + 8) < v17 + v10 || v17 > (unint64_t)v18;
      v21 = !v20 && *(_QWORD *)(a2 + 24 * v11 + 8) - v10 >= v19;
      if (!v21 || (unint64_t)v7[3 * v11 + 1] < v19)
        break;
      result = (void **)memcpy(*v13, v18, v19);
      v8 = v11 + 1;
      if (*(_DWORD *)v5 <= (int)(v11 + 1))
        return result;
    }
    __break(0x5519u);
  }
  return result;
}

void LogProfileTimeOverLimit_3(const char *a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  double v14;
  __int128 v15;
  uint64_t v16;
  NSObject *v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  double v27;
  char __str[16];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (VRTraceIsInternalOSInstalled())
  {
    v14 = micro() - a2;
    if (v14 > a3)
    {
      *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v42 = v15;
      v43 = v15;
      v40 = v15;
      v41 = v15;
      v38 = v15;
      v39 = v15;
      v36 = v15;
      v37 = v15;
      v34 = v15;
      v35 = v15;
      v33 = v15;
      v31 = v15;
      v32 = v15;
      v29 = v15;
      v30 = v15;
      *(_OWORD *)__str = v15;
      vsnprintf(__str, 0x100uLL, a1, &a11);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        v16 = VRTraceErrorLogLevelToCSTR();
        v17 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136316162;
          v19 = v16;
          v20 = 2080;
          v21 = "_LogProfileTimeLimitHelper";
          v22 = 1024;
          v23 = 36;
          v24 = 2080;
          v25 = __str;
          v26 = 2048;
          v27 = v14;
          _os_log_impl(&dword_1D8A54000, v17, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d %s: Took a long time %fs", buf, 0x30u);
        }
      }
    }
  }
}

void _VCAudioPlayer_SteerQueueCommand(uint64_t a1, int a2, __n128 a3)
{
  uint64_t (*v3)(__n128);
  double v6;
  double v7;
  _BOOL4 v8;
  double v9;
  double v10;
  double *v11;

  v3 = *(uint64_t (**)(__n128))(a1 + 52512);
  if (!v3 || !*(_QWORD *)(a1 + 52520))
    return;
  v6 = *(double *)(a1 + 52624);
  v7 = a3.n128_f64[0] * *(double *)(a1 + 35608) + 0.00001;
  if (*(_BYTE *)(a1 + 52528))
    v8 = *(_DWORD *)(a1 + 52544) == 2;
  else
    v8 = 1;
  v9 = fmax(v6, v7);
  if (a2 == 1)
  {
    v10 = *(double *)(a1 + 52416);
    a3.n128_f64[0] = v10 - v6;
    if (v10 - v6 < -v9)
      v8 = 0;
  }
  else
  {
    if (a2)
    {
      if (!v8)
        return;
      v11 = (double *)(a1 + 52416);
      v10 = *(double *)(a1 + 52416);
      *(_QWORD *)(a1 + 52416) = 0;
      a3.n128_u64[0] = 0;
      goto LABEL_17;
    }
    v10 = *(double *)(a1 + 52416);
    a3.n128_f64[0] = v6 + v10;
    if (v6 + v10 > v9)
      v8 = 0;
  }
  if (!v8)
    return;
  v11 = (double *)(a1 + 52416);
  *(_QWORD *)(a1 + 52416) = a3.n128_u64[0];
  *(_DWORD *)(a1 + 51652) = *(_DWORD *)(a1 + 51644);
LABEL_17:
  if ((v3(a3) & 0x80000000) != 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        _VCAudioPlayer_SteerQueueCommand_cold_1();
    }
  }
  else if (*v11 != v10)
  {
    _VCAudioPlayer_UpdatePacketLifeTimeCDF(a1, a2);
  }
}

uint64_t _VCAudioPlayer_UpdatePacketLifeTimeCDF(uint64_t result, int a2)
{
  unint64_t v2;
  double v3;
  double v4;
  int v5;
  int v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v12;
  double v13;
  int v14;
  int v15;

  v2 = result + 51624;
  v3 = *(double *)(result + 52624);
  if (a2)
  {
    if (a2 != 2 || (v4 = *(double *)(result + 52416), v4 == 0.0))
    {
      v5 = -1;
      v3 = -v3;
    }
    else
    {
      v5 = (int)((double)(int)v4 / v3);
      v3 = v3 * (double)v5;
    }
  }
  else
  {
    v5 = 1;
  }
  v6 = *(_DWORD *)(result + 51628);
  if (v6 >= 2)
  {
    if (*(int *)v2 >= 2)
      v7 = *(_DWORD *)v2;
    else
      v7 = *(_DWORD *)(result + 51628);
    v8 = result + 35624;
    v9 = 1;
    while (1)
    {
      v10 = v8 + 40 * --v7;
      if (v10 >= v2 || v10 < v8)
        break;
      v12 = v8 + 40 * v7;
      v13 = v3 + *(double *)(v12 + 8);
      if (v13 > 0.5)
        v13 = 0.5;
      if (v13 < 0.0)
        v13 = 0.0;
      v14 = *(unsigned __int16 *)(v2 + 994);
      result = (*(_DWORD *)(v12 + 20) + v5);
      if ((int)result >= v14)
        v15 = v14 - 1;
      else
        v15 = *(_DWORD *)(v12 + 20) + v5;
      *(double *)(v12 + 8) = v13;
      *(_DWORD *)(v12 + 20) = v15 & ~(v15 >> 31);
      if (v7 < 1)
        v7 = v6;
      if (v6 == ++v9)
        return result;
    }
    __break(0x5519u);
  }
  return result;
}

void _VCAudioPlayer_DiscardSamples(uint64_t a1, int a2, double *a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  int ErrorLogLevelForModule;
  os_log_t *v11;
  uint64_t v12;
  NSObject *v13;
  float v14;
  int LeftOverSamples;
  float v16;
  double v17;
  FILE **v18;
  float v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  double v35;
  double v36;
  uint64_t v37;
  NSObject *v38;
  double v39;
  double v40;
  uint64_t v41;
  NSObject *v42;
  unsigned int v43;
  char v44;
  uint8_t buf[4];
  uint64_t v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v8 = a1 + 52552;
  v9 = a1 + 35520;
  ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  v11 = (os_log_t *)MEMORY[0x1E0CF2758];
  if (ErrorLogLevelForModule >= 5)
  {
    v12 = VRTraceErrorLogLevelToCSTR();
    v13 = *v11;
    if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(float *)(v9 + 32);
      LeftOverSamples = VCAudioPlayer_GetLeftOverSamples(a1);
      *(_DWORD *)buf = 136316418;
      v16 = (float)*(unsigned int *)v8;
      v17 = *(double *)v9;
      v46 = v12;
      v47 = 2080;
      v48 = "_VCAudioPlayer_DiscardSamples";
      v49 = 1024;
      v50 = 2417;
      v51 = 2048;
      v52 = (float)((float)(v14 + (float)LeftOverSamples) / v16);
      v53 = 2048;
      v54 = a4;
      v55 = 2048;
      v56 = v17;
      _os_log_impl(&dword_1D8A54000, v13, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d JQ too high, discarding. CurrentJQSize:%f currentTime:%f lastSpkrCallback:%f", buf, 0x3Au);
    }
  }
  if (a2 >= 1)
  {
    JitterQueue_DiscardExcess(*(uint64_t **)(v9 + 48), a2);
    v18 = *(FILE ***)(v8 + 1064);
    v19 = *(float *)(v9 + 32);
    v20 = (float)((float)(v19 + (float)(int)VCAudioPlayer_GetLeftOverSamples(a1)) / (float)*(unsigned int *)v8);
    VRLogfilePrintSync(v18, "Warning: JQ too high, discarding. CurrentJQSize:%f currentTime:%f lastSpkrCallback:%f\n", v21, v22, v23, v24, v25, v26, SLOBYTE(v20));
  }
  *(float *)(v9 + 32) = (float)JitterQueue_QueuedSamples(*(_QWORD *)(v9 + 48));
  v27 = *(float *)(v9 + 32);
  v34 = v27 + (float)(int)VCAudioPlayer_GetLeftOverSamples(a1);
  v35 = v34;
  if (v34 >= 0.0)
  {
    v36 = v34;
  }
  else
  {
    VRLogfilePrintSync(*(FILE ***)(v8 + 1064), "Critical: Average JB queue size is negative!\n", v28, v29, v30, v31, v32, v33, v44);
    v36 = 0.0;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      v37 = VRTraceErrorLogLevelToCSTR();
      v38 = *v11;
      if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        v39 = *a3;
        v40 = *(float *)(v9 + 32);
        *(_DWORD *)buf = 136316418;
        v46 = v37;
        v47 = 2080;
        v48 = "_VCAudioPlayer_DiscardSamples";
        v49 = 1024;
        v50 = 2431;
        v51 = 2048;
        v52 = v39;
        v53 = 2048;
        v54 = v35;
        v55 = 2048;
        v56 = v40;
        _os_log_error_impl(&dword_1D8A54000, v38, OS_LOG_TYPE_ERROR, "VCAudioPlayer [%s] %s:%d Please file a radar on AVConference Media | All. Average JB queue size is negative! Current size: %f, new size: %f, jitter samples: %f", buf, 0x3Au);
      }
    }
  }
  *a3 = v36;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    v41 = VRTraceErrorLogLevelToCSTR();
    v42 = *v11;
    if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315906;
      v43 = *(_DWORD *)v8;
      v46 = v41;
      v47 = 2080;
      v48 = "_VCAudioPlayer_DiscardSamples";
      v49 = 1024;
      v50 = 2435;
      v51 = 2048;
      v52 = v36 / (double)v43;
      _os_log_impl(&dword_1D8A54000, v42, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d NewJQSize:%f", buf, 0x26u);
    }
  }
}

uint64_t _VCAudioPlayer_DecodeSamples(uint64_t a1, int *a2, int *a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v7;
  uint64_t v8;
  int32x2_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  int v24;
  int v25;
  double *v26;
  _DWORD *v27;
  double v28;
  int v29;
  int SizeOfNextFrame;
  uint64_t v31;
  int v32;
  double v33;
  double v34;
  int v35;
  int v36;
  uint64_t v37;
  _BOOL4 NextFrameTimestamp;
  unint64_t v39;
  int v40;
  double v41;
  uint64_t v43;
  NSObject *v44;
  NSObject *v45;
  int v46;
  int v47;
  unsigned int v48;
  _BOOL4 v49;
  _BOOL4 v50;
  unsigned int v51;
  uint64_t v52;
  double v53;
  _BOOL4 HasDTXPacket;
  uint64_t v55;
  NSObject *v56;
  NSObject *v57;
  int v58;
  double v59;
  _BOOL4 v60;
  int v61;
  int v62;
  __int32 v63;
  int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _BOOL4 v68;
  uint64_t v69;
  double v70;
  double v71;
  int v72;
  uint64_t v73;
  NSObject *v74;
  NSObject *v75;
  double v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  int v81;
  int v82;
  unint64_t v83;
  unsigned int v84;
  int v85;
  int v86;
  int v87;
  _BYTE *v88;
  int32x2_t v89;
  int v90;
  int v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  double v95;
  uint64_t v96;
  NSObject *v97;
  NSObject *v98;
  int v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int32x2_t *v109;
  int *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  void *v114;
  unsigned __int8 v115;
  void **v116;
  size_t v117;
  uint64_t v119;
  NSObject *v120;
  uint64_t v121;
  NSObject *v122;
  uint64_t v123;
  NSObject *v124;
  uint64_t v125;
  int v126;
  int v127;
  int v128;
  int32x2_t v129;
  unint64_t v130;
  unint64_t v131;
  int v132;
  double v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int32x2_t *v142;
  uint64_t v143;
  NSObject *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  size_t v151;
  int32x2_t v152;
  int *v153;
  int v154;
  uint64_t v155;
  unsigned __int8 v156;
  void **v157;
  size_t v158;
  int v159;
  NSObject *v160;
  float v161;
  int v162;
  unsigned __int8 v163;
  float **v164;
  float *v165;
  unint64_t v166;
  float *v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  NSObject *v186;
  unsigned int v187;
  unsigned int v188;
  _DWORD *v189;
  int v190;
  int v191;
  unsigned int v192;
  int v193;
  int v194;
  int v195;
  int v196;
  int v197;
  int64x2_t *v198;
  unint64_t v199;
  int v200;
  int32x2_t *v201;
  uint64_t v202;
  NSObject *v203;
  uint64_t v204;
  NSObject *v205;
  NSObject *v206;
  __int32 v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  int v211;
  unsigned int v212;
  int v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  int v217;
  double v218;
  int *v219;
  uint64_t v220;
  int v221;
  double v222;
  float v223;
  int *v224;
  uint64_t v225;
  int v226;
  double v227;
  int v228;
  double *v229;
  uint64_t v230;
  NSObject *v231;
  NSObject *v232;
  double v233;
  double v234;
  double v235;
  BOOL v236;
  float v237;
  double v238;
  double v239;
  __int32 v240;
  int v241;
  uint64_t v242;
  NSObject *v243;
  NSObject *v244;
  int v245;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  double v251;
  double v252;
  int v253;
  double v254;
  int i;
  double *v256;
  BOOL v257;
  int v258;
  int v259;
  int v260;
  double v261;
  unint64_t v262;
  int v263;
  double v264;
  uint64_t v265;
  double *v266;
  double *v267;
  double v269;
  double v270;
  float v271;
  unsigned int v272;
  uint64_t v273;
  NSObject *v274;
  NSObject *v275;
  uint64_t v276;
  int v277;
  int v278;
  uint64_t v279;
  int32x2_t v280;
  uint64_t v281;
  unsigned __int32 v282;
  uint64_t v283;
  NSObject *v284;
  int v285;
  size_t v286;
  unsigned __int32 v287;
  _WORD *v288;
  uint64_t v289;
  int v290;
  int v291;
  int v292;
  unint64_t v293;
  int v294;
  int v295;
  int v297;
  BOOL v298;
  int v299;
  char v300;
  __int32 v301;
  unsigned int v302;
  unsigned int v303;
  _BYTE *v304;
  _BYTE *v305;
  int32x2_t v306;
  uint64_t v307;
  unsigned int v308;
  int v309;
  int v310;
  char v311;
  uint64_t v312;
  double *v313;
  int v314;
  int v315;
  unsigned __int32 v316;
  uint64_t v317;
  NSObject *v318;
  int v319;
  int v320;
  int v321;
  int v322;
  unsigned __int8 v323;
  uint64_t v324;
  unint64_t *v325;
  unint64_t v327;
  unint64_t v328;
  uint64_t v329;
  BOOL v330;
  _DWORD *v331;
  _DWORD *v334;
  BOOL v336;
  _WORD *v337;
  _WORD *v340;
  unsigned __int8 v342;
  __int16 **v343;
  __int16 *v344;
  unint64_t v345;
  __int16 *v346;
  uint64_t v347;
  int v348;
  int v349;
  int v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  const char *v357;
  double v358;
  BOOL v359;
  uint64_t v360;
  NSObject *v361;
  NSObject *v362;
  double v363;
  uint64_t v364;
  NSObject *v365;
  NSObject *v366;
  double v367;
  int v368;
  int v369;
  int v370;
  int v371;
  int v372;
  int v373;
  int v374;
  int v375;
  int v376;
  __int32 v377;
  int v378;
  double v379;
  int v380;
  int v381;
  __int32 v382;
  unint64_t v383;
  unint64_t v384;
  uint64_t v385;
  double v386;
  int v387;
  int v388;
  int v389;
  uint64_t v390;
  int v391;
  int v392;
  uint64_t v393;
  int32x2_t v394;
  uint64_t v395;
  double v396;
  int v397;
  int v398;
  int v399;
  uint64_t v400;
  int v401;
  int v402;
  uint64_t v403;
  NSObject *v404;
  NSObject *v405;
  double v406;
  uint64_t v407;
  NSObject *v408;
  int v409;
  uint64_t v410;
  NSObject *v411;
  int IsInternalOSInstalled;
  int v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  NSObject *v421;
  float v422;
  float v423;
  int v424;
  unsigned __int8 v425;
  unint64_t v426;
  float *v427;
  unint64_t v428;
  uint64_t v429;
  float *v430;
  BOOL v431;
  _BOOL4 v432;
  float v433;
  float *v434;
  float v435;
  uint64_t v436;
  NSObject *v437;
  NSObject *v438;
  int v439;
  double v440;
  double v441;
  int v442;
  double v443;
  double v444;
  uint64_t v445;
  uint64_t v446;
  NSObject *v447;
  NSObject *v448;
  int v449;
  double v450;
  double v451;
  const char *v452;
  int v453;
  unsigned __int8 v454;
  unint64_t v455;
  unint64_t v456;
  uint64_t v457;
  uint64_t v458;
  __int16 *v459;
  uint64_t v460;
  float *v462;
  float v463;
  float v464;
  uint64_t v465;
  uint64_t v466;
  NSObject *v467;
  NSObject *v468;
  int v469;
  double v470;
  double v471;
  int v472;
  int v473;
  double v474;
  double v475;
  uint64_t v476;
  NSObject *v477;
  int v478;
  double v479;
  double v480;
  int v481;
  double v482;
  double v483;
  const char *v484;
  BOOL v485;
  int v486;
  float v487;
  int v488;
  int v490;
  int v491;
  uint64_t v492;
  int v493;
  int v494;
  double v495;
  double v496;
  char v497;
  unint64_t v498;
  __int128 v499;
  uint64_t v500;
  _DWORD *v501;
  unint64_t v503;
  int *v504;
  float *__C;
  unint64_t v506;
  unint64_t v507;
  void *__dst;
  unint64_t v509;
  unint64_t v510;
  uint64_t v511;
  unint64_t v512;
  _BYTE *v515;
  unint64_t v516;
  _WORD *v517;
  double *v518;
  uint64_t v519;
  uint64_t v520;
  void **v522;
  uint64_t v523;
  int v524;
  uint64_t v525;
  uint64_t v526;
  double *v527;
  double *v528;
  int64x2_t *__N;
  vDSP_Length __Na;
  unint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  int32x2_t *v535;
  int v536;
  _QWORD v537[8];
  __int128 v538;
  __int128 v539;
  __int128 v540;
  __int128 v541;
  uint8_t buf[4];
  uint64_t v543;
  __int16 v544;
  const char *v545;
  __int16 v546;
  int v547;
  __int16 v548;
  _BYTE v549[36];
  _BYTE v550[12];
  _BYTE v551[10];
  __int16 v552;
  int v553;
  __int16 v554;
  int v555;
  uint64_t v556;

  v7 = a1;
  v556 = *MEMORY[0x1E0C80C00];
  v8 = a1 + 53616;
  v9 = (int32x2_t *)(a1 + 52456);
  v10 = a1 + 35532;
  _VCAudioPlayer_UpdateLosses(a1);
  v11 = *(_DWORD *)(v7 + 168);
  if (v11)
    v12 = *(_DWORD *)(v7 + 436) > *(_DWORD *)(v7 + 172);
  else
    v12 = 0;
  v533 = v7;
  v535 = v9;
  v526 = v8;
  v534 = v10;
  if (v11 >= *a2)
    goto LABEL_549;
  v504 = (int *)(v7 + 808);
  v501 = (_DWORD *)&v9[3] + 1;
  v512 = v7 + 64;
  v522 = (void **)(v7 + 328);
  v516 = v7 + 512;
  v500 = v7 + 552;
  __N = (int64x2_t *)(v10 + 16092);
  v531 = v7 + 35624;
  v528 = (double *)(v7 + 52328);
  v527 = (double *)(v7 + 52320);
  v518 = (double *)(v7 + 52312);
  v519 = v7 + 51640;
  v13 = v7 + 51704;
  v14 = v7 + 51904;
  v498 = v7 + 52304;
  __dst = (void *)(v7 + 34);
  v503 = v7 + 52964;
  v520 = v7 + 52876;
  v517 = (_WORD *)(v7 + 53604);
  v511 = v7 + 52813;
  v510 = v7 + 52818;
  v509 = v7 + 448;
  __asm { FMOV            V0.2D, #-1.0 }
  v499 = _Q0;
  while (1)
  {
    v540 = 0u;
    v541 = 0u;
    v538 = 0u;
    v539 = 0u;
    memset(v537, 0, sizeof(v537));
    if (micro() - a6 >= 0.00600000005)
      break;
    v23 = (int *)v9[17];
    if (v23)
      v24 = *v23;
    else
      v24 = 128;
    HIDWORD(v537[1]) = v24;
    v25 = *(_DWORD *)(a5 + 16);
    v26 = *(double **)(a5 + 24);
    v27 = *(_DWORD **)a5;
    v28 = *(double *)(a5 + 32);
    v29 = JitterQueue_CheckQSizeBeforePop(*(_QWORD *)(v10 + 36));
    SizeOfNextFrame = JitterQueue_GetSizeOfNextFrame(*(_QWORD *)(v10 + 36));
    v31 = v10;
    v32 = SizeOfNextFrame;
    if (JitterQueue_GetSizeOfNextFrame(*(_QWORD *)(v31 + 36)))
      v35 = 0;
    else
      v35 = v9->i32[1] + 1;
    v36 = v32 + v29;
    v9->i32[1] = v35;
    v37 = v534;
    if (v9->i32[0] == 3 || !v9->i32[0])
    {
      v536 = -1431655766;
      NextFrameTimestamp = JitterQueue_GetNextFrameTimestamp(*(_QWORD *)(v534 + 36), &v536);
      v40 = *(_DWORD *)v534;
      if (*(_DWORD *)v534)
        v40 = !JitterQueue_IsNextFrameDTX(*(_QWORD *)(v534 + 36));
      v33 = (double)(v536 - *(_DWORD *)(v533 + 16) + v9[12].i32[1] * *(_DWORD *)(v533 + 8));
      LODWORD(v39) = v9[12].i32[0];
      v34 = (double)v39;
      v41 = v33 / v34;
      if ((v40 & NextFrameTimestamp) != 1 || (v41 > 0.1 ? (_ZF = *(_DWORD *)(v533 + 808) == 0) : (_ZF = 1), _ZF))
      {
        if (v41 < 0.1 && ((v40 ^ 1) & 1) == 0 && NextFrameTimestamp && (int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          v43 = VRTraceErrorLogLevelToCSTR();
          v44 = *MEMORY[0x1E0CF2758];
          v45 = *MEMORY[0x1E0CF2758];
          if (*MEMORY[0x1E0CF2748])
          {
            if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315906;
              v543 = v43;
              v544 = 2080;
              v545 = "_VCAudioPlayer_ShouldPerformQueueGrowth";
              v546 = 1024;
              v547 = 1244;
              v548 = 2048;
              *(double *)v549 = v41;
              _os_log_impl(&dword_1D8A54000, v44, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Queue growth suspended as silence period=%f is low", buf, 0x26u);
            }
          }
          else if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315906;
            v543 = v43;
            v544 = 2080;
            v545 = "_VCAudioPlayer_ShouldPerformQueueGrowth";
            v546 = 1024;
            v547 = 1244;
            v548 = 2048;
            *(double *)v549 = v41;
            _os_log_debug_impl(&dword_1D8A54000, v44, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d Queue growth suspended as silence period=%f is low", buf, 0x26u);
          }
        }
        v37 = v534;
        if (!*(_DWORD *)v534)
        {
          v46 = *v27 == 2 ? 3 : 5;
          if (v9->i32[1] >= v46)
          {
            v9->i32[0] = 1;
            v9[1].i8[0] = 1;
          }
        }
      }
      else
      {
        v9->i32[0] = 2;
        v37 = v534;
        if (v36 >= v25)
          JitterQueue_GetOldestArrivalTimeStamp(*(_QWORD *)(v534 + 36), v501);
        else
          *v501 = *(_DWORD *)(v534 + 72);
      }
    }
    v47 = *(_DWORD *)(v37 + 72) - v9[3].i32[1];
    v9[5].i32[0] = v47;
    v48 = v9->i32[0] - 1;
    v49 = v47 >= v25 || v36 >= v25;
    v9[5].i8[5] = v47 >= v25;
    v9[5].i8[4] = v36 >= v25;
    v50 = v48 < 2 && v49;
    v9[5].i8[6] = v50;
    if (v50)
    {
      v51 = *(_DWORD *)(v37 + 8);
      v7 = v533;
      if (v51)
      {
        v52 = v519;
        LODWORD(v33) = *(_DWORD *)(v519 + 20);
        HIDWORD(v34) = 1079574528;
        v53 = (double)*(unint64_t *)&v33 / (double)v51 * 100.0;
        *(double *)&v9[2] = v53;
      }
      else
      {
        v53 = *(double *)&v9[2];
        v52 = v519;
      }
      LODWORD(v34) = v9[12].i32[0];
      v9[3].i8[0] = v53 < 0.01;
      if (*(_BYTE *)(v52 + 737))
        v60 = 0;
      else
        v60 = *(_BYTE *)(v52 + 744) == 0;
      v61 = (int)(v28 * (double)*(unint64_t *)&v34);
      v62 = *(_DWORD *)(v52 + 4);
      v9[4].i8[1] = v60;
      if (v25 != v61 || v9[18].i8[0])
      {
        v63 = 0;
        v9[4].i8[2] = 0;
      }
      else
      {
        if (v62)
          v60 = 0;
        if (v53 < 0.01)
          v60 = 1;
        v9[4].i8[2] = v60;
        if (v60)
          v63 = v9[12].i32[1];
        else
          v63 = 0;
      }
      v64 = v61 - v63;
      v9[4].i32[1] = v64;
      v9[4].i8[0] = v64 <= v47;
      if (v64 <= v47)
      {
        v9[1].i8[0] = 0;
        *v9 = 0;
        *v26 = (double)v25;
        goto LABEL_76;
      }
    }
    else
    {
      HasDTXPacket = JitterQueue_HasDTXPacket(*(_QWORD *)(v37 + 36));
      v7 = v533;
      if ((HasDTXPacket | JitterQueue_IsNextFrameDTX(*(_QWORD *)(v37 + 36))) == 1
        && (v9->i32[0] - 1) <= 1)
      {
        v9->i32[0] = 3;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          v55 = VRTraceErrorLogLevelToCSTR();
          v56 = *MEMORY[0x1E0CF2758];
          v57 = *MEMORY[0x1E0CF2758];
          if (*MEMORY[0x1E0CF2748])
          {
            if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
            {
              v58 = *(_DWORD *)(v533 + 20);
              v59 = *v26;
              *(_DWORD *)buf = 136316418;
              v543 = v55;
              v544 = 2080;
              v545 = "_VCAudioPlayer_PerformQueueGrowth";
              v546 = 1024;
              v547 = 1300;
              v548 = 1024;
              *(_DWORD *)v549 = v58;
              *(_WORD *)&v549[4] = 1024;
              *(_DWORD *)&v549[6] = v36;
              *(_WORD *)&v549[10] = 2048;
              *(double *)&v549[12] = v59;
              _os_log_impl(&dword_1D8A54000, v56, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Suspend queue growth audio frame %d queueSize %d AvgQsize %f", buf, 0x32u);
            }
          }
          else if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
          {
            v378 = *(_DWORD *)(v533 + 20);
            v379 = *v26;
            *(_DWORD *)buf = 136316418;
            v543 = v55;
            v544 = 2080;
            v545 = "_VCAudioPlayer_PerformQueueGrowth";
            v546 = 1024;
            v547 = 1300;
            v548 = 1024;
            *(_DWORD *)v549 = v378;
            *(_WORD *)&v549[4] = 1024;
            *(_DWORD *)&v549[6] = v36;
            *(_WORD *)&v549[10] = 2048;
            *(double *)&v549[12] = v379;
            _os_log_debug_impl(&dword_1D8A54000, v56, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d Suspend queue growth audio frame %d queueSize %d AvgQsize %f", buf, 0x32u);
          }
        }
      }
      else
      {
        v9[4].i8[2] = 0;
        v9[4].i32[1] = 0;
        v9[4].i16[0] = 0;
        v9[5].i16[2] = 0;
      }
    }
    if (v9->i32[0] && v9->i32[0] != 3)
    {
      v67 = 0;
      v8 = v526;
LABEL_85:
      v10 = v534;
      goto LABEL_86;
    }
LABEL_76:
    v10 = v534;
    v65 = JitterQueue_Pop(*(_QWORD *)(v534 + 36));
    v67 = v65;
    v68 = v65 != 0;
    LODWORD(v537[1]) = v68 | (8 * (v65 == 0));
    *(_BYTE *)(v534 + 68) |= v68;
    v8 = v526;
    if (v65 && !*(_DWORD *)v534 && *(_DWORD *)(v534 + 8) >= 6u)
    {
      v69 = (*(_DWORD *)(v7 + 168) + *(_DWORD *)(v7 + 172));
      LODWORD(v66) = v9[12].i32[0];
      v70 = (double)v66;
      v71 = (double)(*(unsigned int *)(v65 + 12) - v69) / v70;
      if (v71 >= -*(double *)(v520 + 44))
        goto LABEL_505;
      v72 = *v504;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        v73 = VRTraceErrorLogLevelToCSTR();
        v74 = *MEMORY[0x1E0CF2758];
        v75 = *MEMORY[0x1E0CF2758];
        if (*MEMORY[0x1E0CF2748])
        {
          if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
          {
            v76 = micro();
            v77 = *(_DWORD *)(v67 + 12);
            v79 = *(_DWORD *)(v7 + 168);
            v78 = *(_DWORD *)(v7 + 172);
            v80 = *(_QWORD *)(v534 + 28);
            v81 = *(_DWORD *)(v67 + 1176);
            v82 = *(unsigned __int16 *)(v67 + 10);
            *(_DWORD *)buf = 136318210;
            v543 = v73;
            v544 = 2080;
            v545 = "_VCAudioPlayer_DetectLateFrame";
            v546 = 1024;
            v547 = 1326;
            v548 = 2048;
            *(double *)v549 = v76;
            *(_WORD *)&v549[8] = 2048;
            *(double *)&v549[10] = v71 * 1000.0;
            *(_WORD *)&v549[18] = 1024;
            *(_DWORD *)&v549[20] = v77;
            *(_WORD *)&v549[24] = 1024;
            *(_DWORD *)&v549[26] = v69;
            *(_WORD *)&v549[30] = 1024;
            *(_DWORD *)&v549[32] = v78;
            *(_WORD *)v550 = 1024;
            *(_DWORD *)&v550[2] = v79;
            *(_WORD *)&v550[6] = 1024;
            *(_DWORD *)&v550[8] = v77;
            *(_WORD *)v551 = 2048;
            *(_QWORD *)&v551[2] = v80;
            v552 = 1024;
            v553 = v81;
            v554 = 1024;
            v555 = v82;
            _os_log_impl(&dword_1D8A54000, v74, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d %7.03f: backtrack: %.01fms (%u - %u,%u,%d,%u) (Jitter Size = %f) DTX %d Seq num %d", buf, 0x64u);
          }
        }
        else if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
        {
          v396 = micro();
          v397 = *(_DWORD *)(v67 + 12);
          v399 = *(_DWORD *)(v7 + 168);
          v398 = *(_DWORD *)(v7 + 172);
          v400 = *(_QWORD *)(v534 + 28);
          v401 = *(_DWORD *)(v67 + 1176);
          v402 = *(unsigned __int16 *)(v67 + 10);
          *(_DWORD *)buf = 136318210;
          v543 = v73;
          v544 = 2080;
          v545 = "_VCAudioPlayer_DetectLateFrame";
          v546 = 1024;
          v547 = 1326;
          v548 = 2048;
          *(double *)v549 = v396;
          *(_WORD *)&v549[8] = 2048;
          *(double *)&v549[10] = v71 * 1000.0;
          *(_WORD *)&v549[18] = 1024;
          *(_DWORD *)&v549[20] = v397;
          *(_WORD *)&v549[24] = 1024;
          *(_DWORD *)&v549[26] = v69;
          *(_WORD *)&v549[30] = 1024;
          *(_DWORD *)&v549[32] = v398;
          *(_WORD *)v550 = 1024;
          *(_DWORD *)&v550[2] = v399;
          *(_WORD *)&v550[6] = 1024;
          *(_DWORD *)&v550[8] = v397;
          *(_WORD *)v551 = 2048;
          *(_QWORD *)&v551[2] = v400;
          v552 = 1024;
          v553 = v401;
          v554 = 1024;
          v555 = v402;
          _os_log_debug_impl(&dword_1D8A54000, v74, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d %7.03f: backtrack: %.01fms (%u - %u,%u,%d,%u) (Jitter Size = %f) DTX %d Seq num %d", buf, 0x64u);
        }
      }
      ++*(_DWORD *)(v519 + 24);
      _VCAudioPlayer_UpdatePacketLifeTimeCDF(v7, 0);
      v357 = "played out";
      if (!v72)
        v357 = "dropped";
      v10 = v534;
      VRLogfilePrintSync(*(FILE ***)v526, "Warning: Late packet %s. %.01fms (%u - %u %u %d %u) (Jitter Size = %f) DTX %d Seq num %d\n", v351, v352, v353, v354, v355, v356, (char)v357);
      if (!v72)
      {
        (*(void (**)(_QWORD, unint64_t))(v67 + 1200))(*(_QWORD *)(v67 + 1208), v67);
        v8 = v526;
        goto LABEL_537;
      }
      v8 = v526;
      if (!*(_DWORD *)v534)
      {
LABEL_505:
        if (*(_DWORD *)(v10 + 8) >= 6u)
        {
          LODWORD(v70) = v9[12].i32[0];
          v358 = (double)(uint64_t)(*(unsigned int *)(v67 + 12)
                                 - (unint64_t)(*(_DWORD *)(v7 + 168) + *(_DWORD *)(v7 + 172)))
               / (double)*(unint64_t *)&v70;
          if (v358 > *(double *)(v520 + 44))
          {
            if (*(_DWORD *)(v7 + 12)
              && (v358 <= *(double *)(v10 + 44)
                ? (v359 = (unsigned __int16)(*(_WORD *)(v67 + 10) - *(_WORD *)(v7 + 20)) >= 2u)
                : (v359 = 0),
                  v359 && (unsigned __int16)(*(_WORD *)(v67 + 10) - *(_WORD *)(v7 + 20)) <= 0x7FFEu))
            {
              JitterQueue_Insert(*(_QWORD *)(v10 + 36), v67, 0);
              v67 = 0;
              if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
              {
                v360 = VRTraceErrorLogLevelToCSTR();
                v361 = *MEMORY[0x1E0CF2758];
                v362 = *MEMORY[0x1E0CF2758];
                if (*MEMORY[0x1E0CF2748])
                {
                  if (os_log_type_enabled(v362, OS_LOG_TYPE_DEFAULT))
                  {
                    v363 = micro();
                    *(_DWORD *)buf = 136316162;
                    v543 = v360;
                    v544 = 2080;
                    v545 = "_VCAudioPlayer_HandleHoleDetection";
                    v546 = 1024;
                    v547 = 1348;
                    v548 = 2048;
                    *(double *)v549 = v363;
                    *(_WORD *)&v549[8] = 2048;
                    *(double *)&v549[10] = v358 * 1000.0;
                    _os_log_impl(&dword_1D8A54000, v361, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d %7.03f: silence: %.01fms", buf, 0x30u);
                  }
                }
                else if (os_log_type_enabled(v362, OS_LOG_TYPE_DEBUG))
                {
                  v406 = micro();
                  *(_DWORD *)buf = 136316162;
                  v543 = v360;
                  v544 = 2080;
                  v545 = "_VCAudioPlayer_HandleHoleDetection";
                  v546 = 1024;
                  v547 = 1348;
                  v548 = 2048;
                  *(double *)v549 = v406;
                  *(_WORD *)&v549[8] = 2048;
                  *(double *)&v549[10] = v358 * 1000.0;
                  _os_log_debug_impl(&dword_1D8A54000, v361, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d %7.03f: silence: %.01fms", buf, 0x30u);
                }
                v67 = 0;
                goto LABEL_85;
              }
            }
            else if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
            {
              v364 = VRTraceErrorLogLevelToCSTR();
              v365 = *MEMORY[0x1E0CF2758];
              v366 = *MEMORY[0x1E0CF2758];
              if (*MEMORY[0x1E0CF2748])
              {
                if (os_log_type_enabled(v366, OS_LOG_TYPE_DEFAULT))
                {
                  v367 = micro();
                  *(_DWORD *)buf = 136316162;
                  v543 = v364;
                  v544 = 2080;
                  v545 = "_VCAudioPlayer_HandleHoleDetection";
                  v546 = 1024;
                  v547 = 1350;
                  v548 = 2048;
                  *(double *)v549 = v367;
                  *(_WORD *)&v549[8] = 2048;
                  *(double *)&v549[10] = v358 * 1000.0;
                  _os_log_impl(&dword_1D8A54000, v365, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d %7.03f: jump: %.01fms", buf, 0x30u);
                }
              }
              else if (os_log_type_enabled(v366, OS_LOG_TYPE_DEBUG))
              {
                v386 = micro();
                *(_DWORD *)buf = 136316162;
                v543 = v364;
                v544 = 2080;
                v545 = "_VCAudioPlayer_HandleHoleDetection";
                v546 = 1024;
                v547 = 1350;
                v548 = 2048;
                *(double *)v549 = v386;
                *(_WORD *)&v549[8] = 2048;
                *(double *)&v549[10] = v358 * 1000.0;
                _os_log_debug_impl(&dword_1D8A54000, v365, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d %7.03f: jump: %.01fms", buf, 0x30u);
              }
              goto LABEL_85;
            }
          }
        }
      }
    }
LABEL_86:
    v83 = v67 + 1272;
    LODWORD(v537[1]) |= 4 * (v67 != 0);
    v84 = v9[13].i32[0] * *(_DWORD *)(v7 + 168);
    *(_DWORD *)(v7 + 164) = v84;
    _VCAudioPlayer_InitializePlaybackBuffer((unint64_t)&v537[3], v512, v84);
    if (!v67)
    {
      v87 = *a2;
      v88 = *(_BYTE **)(a4 + 56);
      if (v88)
        *v88 = 1;
      v89 = v9[17];
      if (*(_QWORD *)&v89 && !*(_DWORD *)(*(_QWORD *)&v89 + 24))
      {
        v91 = *(_DWORD *)(*(_QWORD *)&v89 + 20);
        v90 = *(_DWORD *)(v7 + 168);
      }
      else
      {
        v90 = *(_DWORD *)(v7 + 168);
        v91 = v87 - v90;
      }
      LODWORD(v537[0]) = v91;
      if (v90 + v91 > *(_DWORD *)(v7 + 56))
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          v119 = VRTraceErrorLogLevelToCSTR();
          v120 = *MEMORY[0x1E0CF2758];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315906;
            v543 = v119;
            v544 = 2080;
            v545 = "_VCAudioPlayer_GetSilenceBufferSampleCount";
            v546 = 1024;
            v547 = 1781;
            v548 = 1024;
            *(_DWORD *)v549 = v537[0];
            _os_log_impl(&dword_1D8A54000, v120, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d  Decode Buffer Overflow, adding %d = >", buf, 0x22u);
          }
        }
        LODWORD(v537[0]) = *(_DWORD *)(v7 + 56) - *(_DWORD *)(v7 + 168);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          v121 = VRTraceErrorLogLevelToCSTR();
          v122 = *MEMORY[0x1E0CF2758];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315906;
            v543 = v121;
            v544 = 2080;
            v545 = "_VCAudioPlayer_GetSilenceBufferSampleCount";
            v546 = 1024;
            v547 = 1783;
            v548 = 1024;
            *(_DWORD *)v549 = v537[0];
            _os_log_impl(&dword_1D8A54000, v122, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d  clipped to %d", buf, 0x22u);
          }
        }
        v91 = v537[0];
        v83 = v67 + 1272;
      }
      if (v91 < 1)
      {
        v132 = 1;
LABEL_182:
        v153 = (int *)v534;
        goto LABEL_354;
      }
      HIDWORD(v537[0]) = v9[13].i32[0] * v91 * v9[13].i32[1];
      if (v9[44].i32[0])
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          v123 = VRTraceErrorLogLevelToCSTR();
          v124 = *MEMORY[0x1E0CF2758];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
          {
            v125 = *(_QWORD *)(v534 + 28);
            v126 = *(_DWORD *)(v7 + 20) + 1;
            v127 = *(_DWORD *)v534;
            *(_DWORD *)buf = 136316418;
            v543 = v123;
            v544 = 2080;
            v545 = "_VCAudioPlayer_UpdateSilenceDecodeMetrics";
            v546 = 1024;
            v547 = 1808;
            v548 = 2048;
            *(_QWORD *)v549 = v125;
            *(_WORD *)&v549[8] = 1024;
            *(_DWORD *)&v549[10] = v126;
            *(_WORD *)&v549[14] = 1024;
            *(_DWORD *)&v549[16] = v127;
            _os_log_impl(&dword_1D8A54000, v124, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Missing a packet %f [expected seq = %x] DTX[%d]", buf, 0x32u);
          }
        }
      }
      v128 = *(_DWORD *)(v520 + 32) + *(_DWORD *)v534;
      ++*(_DWORD *)(v520 + 28);
      *(_DWORD *)(v520 + 32) = v128;
      v129 = v9[17];
      if (v129)
      {
        v130 = *(_QWORD *)(*(_QWORD *)&v129 + 8);
        v131 = v130 + 272;
      }
      else
      {
        v131 = 0;
        v130 = 0;
      }
      v133 = 0.0;
      if (VRTraceIsInternalOSInstalled())
        v133 = micro();
      kdebug_trace();
      v83 = v67 + 1272;
      if ((v537[0] & 0x8000000000000000) != 0 || v537[4] < SHIDWORD(v537[0]) || v130 && v130 >= v131)
        goto LABEL_639;
      v134 = SoundDec_Decode(v130, 0, 0, (char *)v537[3], SHIDWORD(v537[0]), (int *)v537 + 1, LOBYTE(v537[2]));
      kdebug_trace();
      v142 = v535;
      if (v134 < 0)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          v143 = VRTraceErrorLogLevelToCSTR();
          v144 = *MEMORY[0x1E0CF2758];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          {
            v380 = *(_DWORD *)v534;
            v381 = *(_DWORD *)(v7 + 20);
            *(_DWORD *)buf = 136317442;
            v543 = v143;
            v544 = 2080;
            v545 = "_VCAudioPlayer_DecodeSilence";
            v546 = 1024;
            v547 = 1906;
            v548 = 1024;
            *(_DWORD *)v549 = v134;
            *(_WORD *)&v549[4] = 1024;
            *(_DWORD *)&v549[6] = HIDWORD(v537[1]);
            *(_WORD *)&v549[10] = 1024;
            *(_DWORD *)&v549[12] = v537[1];
            *(_WORD *)&v549[16] = 1024;
            *(_DWORD *)&v549[18] = v380;
            *(_WORD *)&v549[22] = 1024;
            *(_DWORD *)&v549[24] = v381;
            *(_WORD *)&v549[28] = 1024;
            *(_DWORD *)&v549[30] = LOBYTE(v537[2]);
            *(_WORD *)&v549[34] = 1024;
            *(_DWORD *)v550 = v537[0];
            _os_log_error_impl(&dword_1D8A54000, v144, OS_LOG_TYPE_ERROR, "VCAudioPlayer [%s] %s:%d nil SoundDec_Decode failed (%x). Previous payload=%d, history=%x, dtx=%d lastSeq=%x reset=%d sampleCount=%d", buf, 0x46u);
          }
        }
        _VCAudioPlayer_ResetPlaybackBuffer((unint64_t)&v537[3]);
        v8 = v526;
        VRLogfilePrintSync(*(FILE ***)v526, "Warning: Nil decoding failed\n", v145, v146, v147, v148, v149, v150, v497);
        v83 = v67 + 1272;
      }
      LogProfileTimeOverLimit_3("SpkrProc: SoundDec_Decode", v133, 0.00300000003, v135, v136, v137, v138, v139, v140, v141, v497);
      _VCAudioPlayer_UpdateOpusDecodeFECStatus(v7, v130);
      HIDWORD(v537[0]) = v535[13].i32[0] * LODWORD(v537[0]);
      HIDWORD(v541) = HIDWORD(v537[0]);
      _VCAudioPlayer_CopyDecodedSamplesToInput((int *)&v537[3]);
      v151 = *(unsigned __int8 *)(v7 + 50);
      if (*(_BYTE *)(v7 + 50))
      {
        if (v151 > 0x10)
          goto LABEL_639;
        bzero(__dst, v151);
        v142 = v535;
      }
      if (SHIDWORD(v537[0]) < 1)
      {
        v132 = 0;
        goto LABEL_182;
      }
      v152 = v142[17];
      v153 = (int *)v534;
      if (*(_QWORD *)&v152 && !*(_DWORD *)(*(_QWORD *)&v152 + 24))
      {
        v154 = *(_DWORD *)(v7 + 4);
        if (!v154)
          goto LABEL_495;
      }
      else
      {
        v154 = *(_DWORD *)(v7 + 4);
        v155 = LODWORD(v537[0]);
        if (v154)
        {
          if (SDWORD2(v541) >= 1)
          {
            v156 = 0;
            do
            {
              v157 = (void **)&v537[3 * v156 + 3];
              v158 = (v535[13].i32[0] * v155);
              if ((unint64_t)v157[1] < v158)
                goto LABEL_639;
              bzero(*v157, v158);
              ++v156;
            }
            while (SDWORD2(v541) > v156);
            v154 = *(_DWORD *)(v7 + 4);
          }
          goto LABEL_496;
        }
        v161 = 1.0 / (float)SLODWORD(v537[0]);
        v162 = DWORD2(v541);
        if (v142[14].i8[0])
        {
          if (SDWORD2(v541) >= 1)
          {
            v163 = 0;
            while ((int)v155 < 1)
            {
LABEL_194:
              if (v162 <= ++v163)
                goto LABEL_495;
            }
            v164 = (float **)&v537[3 * v163 + 3];
            v165 = *v164;
            v166 = (unint64_t)v164[1] + (_QWORD)*v164;
            v167 = v165;
            v168 = v155;
            while ((unint64_t)v167 < v166 && v167 >= v165)
            {
              *v167 = (float)(v161 * (float)(int)v168) * *v167;
              ++v167;
              if (!--v168)
                goto LABEL_194;
            }
            goto LABEL_639;
          }
        }
        else if (SDWORD2(v541) >= 1)
        {
          v342 = 0;
          while ((int)v155 < 1)
          {
LABEL_494:
            if (v162 <= ++v342)
              goto LABEL_495;
          }
          v343 = (__int16 **)&v537[3 * v342 + 3];
          v344 = *v343;
          v345 = (unint64_t)v343[1] + (_QWORD)*v343;
          v346 = v344;
          v347 = v155;
          while ((unint64_t)v346 < v345 && v346 >= v344)
          {
            *v346 = (int)(float)((float)(v161 * (float)(int)v347) * (float)*v346);
            ++v346;
            if (!--v347)
              goto LABEL_494;
          }
LABEL_639:
          __break(0x5519u);
        }
LABEL_495:
        v154 = 0;
        v12 = (v12 + 1);
        *(_DWORD *)(v7 + 436) += LODWORD(v537[0]);
      }
LABEL_496:
      v132 = 0;
      *(_DWORD *)(v7 + 4) = v154 + 1;
      v83 = v67 + 1272;
      goto LABEL_354;
    }
    if (v67 >= v83)
      goto LABEL_639;
    v85 = *(_DWORD *)(v67 + 12);
    v86 = *(_DWORD *)v10;
    if (!*(_DWORD *)v10 || *(_DWORD *)(v67 + 1176))
    {
      if (v535[14].i8[0])
      {
        if (*(float *)(v7 + 792) >= 0.0058 || *(float *)(v7 + 796) >= 0.0058)
          goto LABEL_107;
      }
      else if (*(float *)(v7 + 784) >= 72.0 || *(float *)(v7 + 788) >= 72.0)
      {
        goto LABEL_107;
      }
      if (!*(_DWORD *)(v67 + 4))
        goto LABEL_107;
    }
    if (*(int *)(v7 + 168) >= 1)
      *(_DWORD *)(v7 + 168) = 0;
    if (*(int *)(v7 + 304) >= 1)
    {
      *(_DWORD *)(v7 + 304) = 0;
      *a2 = v535[12].i32[1];
      *a3 = v535[12].i32[1];
      v86 = *(_DWORD *)v10;
    }
    *(_DWORD *)(v10 + 52) = v85;
LABEL_107:
    v92 = *(_DWORD *)(v67 + 1176);
    if (!v86 && v92)
      *(_DWORD *)(v7 + 16) = *(_DWORD *)(v67 + 12);
    v515 = *(_BYTE **)(a4 + 56);
    v93 = *(_DWORD *)(v67 + 1172);
    *(_DWORD *)v10 = v92;
    v94 = *(_QWORD *)(*(_QWORD *)(v67 + 1216) + 8);
    v537[0] = __PAIR64__(v535[13].i32[0] * v93 * v535[13].i32[1], v93);
    v95 = 0.0;
    if (VRTraceIsInternalOSInstalled())
      v95 = micro();
    if ((int)VRTraceGetErrorLogLevelForModule() > 7)
    {
      v96 = VRTraceErrorLogLevelToCSTR();
      v97 = *MEMORY[0x1E0CF2758];
      v98 = *MEMORY[0x1E0CF2758];
      if (*MEMORY[0x1E0CF2748])
      {
        if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
        {
          v99 = *(_DWORD *)(v7 + 172);
          v100 = *(_DWORD *)(v67 + 12);
          v101 = *(_DWORD *)(v67 + 1176);
          v102 = *(unsigned __int16 *)(v67 + 10);
          *(_DWORD *)buf = 136316674;
          v543 = v96;
          v544 = 2080;
          v545 = "_VCAudioPlayer_DecodeSpeech";
          v546 = 1024;
          v547 = 1690;
          v548 = 1024;
          *(_DWORD *)v549 = v99;
          *(_WORD *)&v549[4] = 1024;
          *(_DWORD *)&v549[6] = v100;
          *(_WORD *)&v549[10] = 1024;
          *(_DWORD *)&v549[12] = v101;
          *(_WORD *)&v549[16] = 1024;
          *(_DWORD *)&v549[18] = v102;
          _os_log_impl(&dword_1D8A54000, v97, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Decode : RequiredTimeStamp[%d] SelectedTimeStamp[%d] DTX[%d] seq[%d]", buf, 0x34u);
        }
      }
      else if (os_log_type_enabled(v98, OS_LOG_TYPE_DEBUG))
      {
        v368 = *(_DWORD *)(v7 + 172);
        v369 = *(_DWORD *)(v67 + 12);
        v370 = *(_DWORD *)(v67 + 1176);
        v371 = *(unsigned __int16 *)(v67 + 10);
        *(_DWORD *)buf = 136316674;
        v543 = v96;
        v544 = 2080;
        v545 = "_VCAudioPlayer_DecodeSpeech";
        v546 = 1024;
        v547 = 1690;
        v548 = 1024;
        *(_DWORD *)v549 = v368;
        *(_WORD *)&v549[4] = 1024;
        *(_DWORD *)&v549[6] = v369;
        *(_WORD *)&v549[10] = 1024;
        *(_DWORD *)&v549[12] = v370;
        *(_WORD *)&v549[16] = 1024;
        *(_DWORD *)&v549[18] = v371;
        _os_log_debug_impl(&dword_1D8A54000, v97, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d Decode : RequiredTimeStamp[%d] SelectedTimeStamp[%d] DTX[%d] seq[%d]", buf, 0x34u);
      }
    }
    v103 = v7;
    v104 = v537[1];
    v105 = HIDWORD(v537[1]);
    v106 = *(_QWORD *)(v67 + 1216);
    v107 = *(_QWORD *)(v106 + 8);
    if (*(_BYTE *)(v103 + 28) || *(unsigned __int16 *)(v67 + 1234) != *(unsigned __int16 *)(v103 + 32))
    {
      SoundDec_Reset(*(_QWORD *)(v106 + 8));
      *(_WORD *)(v103 + 32) = *(_WORD *)(v67 + 1234);
      *(_BYTE *)(v103 + 28) = 0;
      v106 = *(_QWORD *)(v67 + 1216);
    }
    if (*(_DWORD *)v106 != v105)
    {
      LOBYTE(v537[2]) = 1;
      if (v105 == 13)
      {
        v111 = *(_QWORD *)(*(_QWORD *)&v535[17] + 8);
        v112 = *(_QWORD *)(v533 + 536);
        v536 = v112;
        if ((v112 & 0x80000000) != 0 || (int)v112 > v112)
          goto LABEL_639;
        v113 = SoundDec_Decode(v111, 0, 0, *(char **)(v533 + 512), v112, &v536, 0);
        if ((v113 & 0x80000000) == 0)
        {
          __C = *(float **)(v533 + 512);
          v506 = *(_QWORD *)(v533 + 536);
          v507 = v536;
          v108 = v533;
          goto LABEL_199;
        }
        v159 = v113;
        if ((int)VRTraceGetErrorLogLevelForModule() < 3)
        {
          __C = 0;
          v506 = 0;
          v507 = 0;
          v108 = v533;
LABEL_199:
          v109 = v535;
        }
        else
        {
          v523 = VRTraceErrorLogLevelToCSTR();
          v160 = *MEMORY[0x1E0CF2758];
          v109 = v535;
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          {
            v387 = **(_DWORD **)(v67 + 1216);
            v388 = *(_DWORD *)(v533 + 20);
            v389 = *(unsigned __int16 *)(v67 + 10);
            *(_DWORD *)buf = 136317442;
            v543 = v523;
            v544 = 2080;
            v545 = "_VCAudioPlayer_HandleComfortNoiseTransition";
            v546 = 1024;
            v547 = 1614;
            v548 = 1024;
            *(_DWORD *)v549 = v159;
            *(_WORD *)&v549[4] = 1024;
            *(_DWORD *)&v549[6] = 13;
            *(_WORD *)&v549[10] = 1024;
            *(_DWORD *)&v549[12] = v387;
            *(_WORD *)&v549[16] = 1024;
            *(_DWORD *)&v549[18] = v104;
            v108 = v533;
            *(_WORD *)&v549[22] = 1024;
            *(_DWORD *)&v549[24] = v388;
            *(_WORD *)&v549[28] = 1024;
            *(_DWORD *)&v549[30] = v389;
            *(_WORD *)&v549[34] = 1024;
            *(_DWORD *)v550 = LOBYTE(v537[2]);
            _os_log_error_impl(&dword_1D8A54000, v160, OS_LOG_TYPE_ERROR, "VCAudioPlayer [%s] %s:%d nil decode for crossfade failed (%x). Previous payload=%d, payload=%d, history=%x lastSeq=%x seq=%d reset=%d", buf, 0x46u);
            __C = 0;
            v506 = 0;
            v507 = 0;
          }
          else
          {
LABEL_185:
            __C = 0;
            v506 = 0;
            v507 = 0;
            v108 = v533;
          }
        }
        v110 = (int *)v534;
      }
      else
      {
        v109 = v535;
        if (*(_DWORD *)v106 != 13)
          goto LABEL_185;
        SoundDec_Reset(v107);
        v114 = *(void **)(v533 + 328);
        if (v114 && !*(_QWORD *)(v533 + 336))
          goto LABEL_639;
        v108 = v533;
        SoundDec_SetDTXPrimerSamples(v107, v114, v535[13].i32[0] * *(_DWORD *)(v533 + 320));
        v110 = (int *)v534;
        if (*(int *)(v533 + 424) >= 2)
        {
          v115 = 1;
          do
          {
            v116 = &v522[3 * v115];
            v117 = *(int *)(v533 + 428);
            if (*(_QWORD *)(v533 + 336) < v117 || (unint64_t)v116[1] < v117)
              goto LABEL_639;
            memcpy(*v116, *(const void **)(v533 + 328), v117);
          }
          while (*(_DWORD *)(v533 + 424) > (int)++v115);
        }
        __C = 0;
        v506 = 0;
        v507 = 0;
        LOBYTE(v537[2]) = 0;
        v109 = v535;
      }
      v109[17] = *(int32x2_t *)(v67 + 1216);
      VCSilencePredictor_Reset(v500);
      goto LABEL_202;
    }
    __C = 0;
    v506 = 0;
    v507 = 0;
    v108 = v533;
    v109 = v535;
    v110 = (int *)v534;
LABEL_202:
    if (*(_BYTE *)(v67 + 1224))
      SoundDec_SetEVSDecodeRF(v94, *(_DWORD *)(v67 + 1228));
    kdebug_trace();
    *(_DWORD *)(v520 + 12) = *(_DWORD *)(v67 + 1256);
    v169 = *(_QWORD *)(v526 + 192);
    if (v169)
      VCAudioDump_LogCompressedAudio(v169, (void *)(v67 + 16), *(_DWORD *)(v67 + 1144), (unsigned int *)(v67 + 12), (unsigned __int16 *)(v67 + 10), (double *)(v67 + 1184));
    if ((v537[0] & 0x8000000000000000) != 0)
      goto LABEL_639;
    if (v537[4] < SHIDWORD(v537[0]))
      goto LABEL_639;
    v170 = *(_DWORD *)(v67 + 1144);
    if (v170 > 0x465)
      goto LABEL_639;
    v171 = SoundDec_Decode(v94, (const void *)(v67 + 16), v170, (char *)v537[3], SHIDWORD(v537[0]), (int *)v537 + 1, LOBYTE(v537[2]));
    kdebug_trace();
    LogProfileTimeOverLimit_3("SpkrProc: SoundDec_Decode", v95, 0.00300000003, v172, v173, v174, v175, v176, v177, v178, v497);
    *(_DWORD *)(v108 + 12) = 1;
    _VCAudioPlayer_UpdateOpusDecodeFECStatus(v108, v94);
    HIDWORD(v537[0]) = v109[13].i32[0] * LODWORD(v537[0]);
    HIDWORD(v541) = HIDWORD(v537[0]);
    _VCAudioPlayer_CopyDecodedSamplesToInput((int *)&v537[3]);
    if (v171 < 0)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        v185 = VRTraceErrorLogLevelToCSTR();
        v186 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        {
          v372 = **(_DWORD **)(v67 + 1216);
          v373 = *v110;
          v374 = *(_DWORD *)(v108 + 20);
          v375 = *(unsigned __int16 *)(v67 + 10);
          v376 = *(_DWORD *)(v108 + 12);
          *(_DWORD *)buf = 136317698;
          v543 = v185;
          v544 = 2080;
          v545 = "_VCAudioPlayer_DecodeSpeech";
          v546 = 1024;
          v547 = 1728;
          v548 = 1024;
          *(_DWORD *)v549 = v171;
          *(_WORD *)&v549[4] = 1024;
          *(_DWORD *)&v549[6] = HIDWORD(v537[1]);
          *(_WORD *)&v549[10] = 1024;
          *(_DWORD *)&v549[12] = v372;
          *(_WORD *)&v549[16] = 1024;
          *(_DWORD *)&v549[18] = v373;
          *(_WORD *)&v549[22] = 1024;
          *(_DWORD *)&v549[24] = v374;
          *(_WORD *)&v549[28] = 1024;
          *(_DWORD *)&v549[30] = v375;
          *(_WORD *)&v549[34] = 1024;
          *(_DWORD *)v550 = LOBYTE(v537[2]);
          *(_WORD *)&v550[4] = 1024;
          *(_DWORD *)&v550[6] = v376;
          _os_log_error_impl(&dword_1D8A54000, v186, OS_LOG_TYPE_ERROR, "VCAudioPlayer [%s] %s:%d SoundDec_Decode failed (%x). Previous payload=%d, payload=%d, dtx=%d lastSeq=%x seq=%x reset=%d firstFrameDecoded=%d", buf, 0x4Cu);
        }
      }
      VRLogfilePrintSync(*(FILE ***)v526, "Warning: Sound decoding failed. Timestamp=%d SeqNumber=%d DTX=%d\n", v179, v180, v181, v182, v183, v184, *(_DWORD *)(v67 + 12));
    }
    v524 = v12;
    v187 = *(unsigned __int8 *)(v108 + 30);
    v188 = *(unsigned __int8 *)(v67 + 1232);
    if (v187 <= v188)
      LOBYTE(v187) = *(_BYTE *)(v67 + 1232);
    *(_BYTE *)(v108 + 30) = v187;
    *(_BYTE *)(v108 + 29) = v188;
    *(_DWORD *)(v108 + 20) = *(unsigned __int16 *)(v67 + 10);
    *(_DWORD *)(v108 + 24) = *(_DWORD *)(v67 + 12);
    v189 = (_DWORD *)v519;
    v190 = *(_DWORD *)(v519 + 24) + JitterQueue_GetSpeechUnderflowCount(*(_QWORD *)(v110 + 9));
    *(_DWORD *)(v519 + 20) = v190;
    v191 = *(_DWORD *)(v519 + 16);
    if (v109[20].u16[1] - 1 >= (v110[18] - *(_DWORD *)(v67 + 1192)) / v109[12].i32[1])
      v192 = (v110[18] - *(_DWORD *)(v67 + 1192)) / v109[12].i32[1];
    else
      v192 = v109[20].u16[1] - 1;
    v193 = *(_DWORD *)(v108 + 168);
    v194 = *(_DWORD *)(v108 + 304);
    v195 = VCTimescale_TailSize((uint64_t)v504);
    v196 = *(_DWORD *)(v67 + 1176);
    if (!v196)
    {
      v197 = __N->i32[0];
      v198 = (int64x2_t *)(v531 + 40 * __N->i32[0]);
      if (v531 > (unint64_t)v198 || &v198[2].u64[1] > (unint64_t *)__N)
        goto LABEL_639;
      *v198 = vdupq_lane_s64(COERCE__INT64((float)((float)(v194+ v193+ v195+ *(_DWORD *)(v534 + 72)- *(_DWORD *)(v67 + 1192))/ (float)v535[12].u32[0])), 0);
      v199 = v531 + 40 * v197;
      *(_DWORD *)(v199 + 16) = v190 - v191;
      *(_DWORD *)(v199 + 20) = v192;
      *(_BYTE *)(v199 + 24) = *(_BYTE *)(v67 + 8);
      v189 = (_DWORD *)v519;
      *(_DWORD *)(v199 + 28) = *(_DWORD *)(v519 + 728);
      *(_DWORD *)(v199 + 32) = *(_DWORD *)(v67 + 1264);
    }
    v200 = v189[5];
    v189[4] = v200;
    v7 = v533;
    v201 = v535;
    if ((v200 - v189[8]) > 5)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        v202 = VRTraceErrorLogLevelToCSTR();
        v203 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        {
          v348 = v189[5] - v189[8];
          v349 = *(_DWORD *)(v67 + 12);
          v350 = *(unsigned __int16 *)(v67 + 10);
          *(_DWORD *)buf = 136316418;
          v543 = v202;
          v544 = 2080;
          v545 = "_VCAudioPlayer_AddFrameToHistory";
          v546 = 1024;
          v547 = 1550;
          v548 = 1024;
          *(_DWORD *)v549 = v348;
          *(_WORD *)&v549[4] = 1024;
          *(_DWORD *)&v549[6] = v349;
          *(_WORD *)&v549[10] = 1024;
          *(_DWORD *)&v549[12] = v350;
          _os_log_error_impl(&dword_1D8A54000, v203, OS_LOG_TYPE_ERROR, "VCAudioPlayer [%s] %s:%d Late packets played=%d currentTimestamp=%u currentSeqNum=%d", buf, 0x2Eu);
        }
      }
      v189[8] = v189[5];
    }
    if (!v196)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        v204 = VRTraceErrorLogLevelToCSTR();
        v205 = *MEMORY[0x1E0CF2758];
        v206 = *MEMORY[0x1E0CF2758];
        if (*MEMORY[0x1E0CF2748])
        {
          if (os_log_type_enabled(v206, OS_LOG_TYPE_DEFAULT))
          {
            v207 = __N->i32[0];
            v208 = v531 + 40 * __N->i32[0];
            if (v208 >= (unint64_t)__N || v208 < v531)
              goto LABEL_639;
            v209 = v531 + 40 * v207;
            v210 = *(_QWORD *)(v209 + 8);
            LODWORD(v209) = *(_DWORD *)(v209 + 16);
            *(_DWORD *)buf = 136316418;
            v543 = v204;
            v544 = 2080;
            v545 = "_VCAudioPlayer_AddFrameToHistory";
            v546 = 1024;
            v547 = 1555;
            v548 = 1024;
            *(_DWORD *)v549 = v207;
            *(_WORD *)&v549[4] = 2048;
            *(_QWORD *)&v549[6] = v210;
            *(_WORD *)&v549[14] = 1024;
            *(_DWORD *)&v549[16] = v209;
            _os_log_impl(&dword_1D8A54000, v205, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d QueueSteering: Adding frame to history. Index=%d, packetLifeTime=%f, erasureCount=%d\n", buf, 0x32u);
          }
        }
        else if (os_log_type_enabled(v206, OS_LOG_TYPE_DEBUG))
        {
          v382 = __N->i32[0];
          v383 = v531 + 40 * __N->i32[0];
          if (v383 >= (unint64_t)__N || v383 < v531)
            goto LABEL_639;
          v384 = v531 + 40 * v382;
          v385 = *(_QWORD *)(v384 + 8);
          LODWORD(v384) = *(_DWORD *)(v384 + 16);
          *(_DWORD *)buf = 136316418;
          v543 = v204;
          v544 = 2080;
          v545 = "_VCAudioPlayer_AddFrameToHistory";
          v546 = 1024;
          v547 = 1555;
          v548 = 1024;
          *(_DWORD *)v549 = v382;
          *(_WORD *)&v549[4] = 2048;
          *(_QWORD *)&v549[6] = v385;
          *(_WORD *)&v549[14] = 1024;
          *(_DWORD *)&v549[16] = v384;
          _os_log_debug_impl(&dword_1D8A54000, v205, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d QueueSteering: Adding frame to history. Index=%d, packetLifeTime=%f, erasureCount=%d\n", buf, 0x32u);
        }
      }
      v211 = *(_DWORD *)(v534 + 16096);
      v212 = *(_DWORD *)(v534 + 16100);
      if (v211 + 1 < v212)
        v213 = v211 + 1;
      else
        v213 = *(_DWORD *)(v534 + 16100);
      *(_DWORD *)(v534 + 16096) = v213;
      *(_DWORD *)(v534 + 16092) = (*(_DWORD *)(v534 + 16092) + 1) % v212;
      *(_DWORD *)(v519 + 8) = *(_DWORD *)(v519 + 4);
      *(_QWORD *)v519 = 0;
      *(_QWORD *)(v519 + 688) = 0xBFF0000000000000;
      *(_OWORD *)(v519 + 672) = v499;
      *(_OWORD *)v13 = 0u;
      *(_OWORD *)(v13 + 16) = 0u;
      *(_OWORD *)(v13 + 32) = 0u;
      *(_OWORD *)(v13 + 48) = 0u;
      *(_OWORD *)(v13 + 64) = 0u;
      *(_OWORD *)(v13 + 80) = 0u;
      LODWORD(v214) = v213 - 1;
      *(_OWORD *)(v13 + 96) = 0u;
      *(_OWORD *)(v13 + 112) = 0u;
      if (v214 <= 1)
        v214 = 1;
      else
        v214 = v214;
      *(_OWORD *)(v13 + 128) = 0uLL;
      *(_OWORD *)(v13 + 144) = 0uLL;
      *(_OWORD *)(v13 + 160) = 0uLL;
      *(_OWORD *)(v13 + 176) = 0uLL;
      *(_QWORD *)(v13 + 192) = 0;
      if ((int)v214 >= 1)
      {
        v215 = v531;
        v216 = v214;
        while (v215 < (unint64_t)__N && v215 >= v531)
        {
          ++*(_DWORD *)(v13 + 4 * *(int *)(v215 + 20));
          v215 += 40;
          if (!--v216)
            goto LABEL_247;
        }
        goto LABEL_639;
      }
LABEL_247:
      if (v535[20].i16[1])
      {
        v217 = 0;
        v218 = (double)(int)v214;
        v219 = (int *)v13;
        v220 = 1;
        while (1)
        {
          v221 = 0;
          v222 = *(double *)&v201[21] * (double)v217;
          v223 = v222;
          v224 = v219;
          v225 = v220;
          do
          {
            if ((unint64_t)v224 >= v14 || (unint64_t)v224 < v13)
              goto LABEL_639;
            v226 = *v224--;
            v221 += v226;
            v257 = v225-- <= 1;
          }
          while (!v257);
          v227 = (double)v221 / v218;
          if (v227 >= 0.05 && *v528 == -1.0)
          {
            v228 = 5;
            v229 = v528;
          }
          else if (v227 >= 0.1 && *v527 == -1.0)
          {
            v228 = 10;
            v229 = v527;
          }
          else
          {
            if (v227 < 0.9 || (v229 = v518, *v518 != -1.0))
            {
              v228 = 0;
              goto LABEL_265;
            }
            v228 = 90;
          }
          *v229 = v222;
LABEL_265:
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            v230 = VRTraceErrorLogLevelToCSTR();
            v231 = *MEMORY[0x1E0CF2758];
            v232 = *MEMORY[0x1E0CF2758];
            if (*MEMORY[0x1E0CF2748])
            {
              if (os_log_type_enabled(v232, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136316162;
                v543 = v230;
                v544 = 2080;
                v545 = "_VCAudioPlayer_CalcPacketLifeTimeCDFs";
                v546 = 1024;
                v547 = 1399;
                v548 = 1024;
                *(_DWORD *)v549 = v228;
                *(_WORD *)&v549[4] = 2048;
                *(double *)&v549[6] = v223;
                _os_log_impl(&dword_1D8A54000, v231, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d QueueSteering: Packet Lifetime=%d percentile=%f", buf, 0x2Cu);
              }
            }
            else if (os_log_type_enabled(v232, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136316162;
              v543 = v230;
              v544 = 2080;
              v545 = "_VCAudioPlayer_CalcPacketLifeTimeCDFs";
              v546 = 1024;
              v547 = 1399;
              v548 = 1024;
              *(_DWORD *)v549 = v228;
              *(_WORD *)&v549[4] = 2048;
              *(double *)&v549[6] = v223;
              _os_log_debug_impl(&dword_1D8A54000, v231, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d QueueSteering: Packet Lifetime=%d percentile=%f", buf, 0x2Cu);
            }
          }
          ++v217;
          v201 = v535;
          ++v220;
          ++v219;
          if (v217 >= v535[20].u16[1])
          {
            v233 = (double)v217;
            goto LABEL_274;
          }
        }
      }
      v233 = 0.0;
LABEL_274:
      v234 = *v518;
      v235 = *v527;
      v236 = *v518 == -1.0 || v235 == -1.0;
      v7 = v533;
      if (v236)
      {
        v237 = v233 * *(double *)&v201[21];
        v238 = *v528;
        v239 = v237;
        if (*v528 == -1.0)
          v238 = v239;
        *v528 = v238;
        if (v235 == -1.0)
          v235 = v239;
        *v527 = v235;
        if (v234 == -1.0)
          v234 = v239;
        *v518 = v234;
      }
      v240 = __N->i32[0];
      if (__N->i32[0] < 2)
        v240 = *(_DWORD *)(v534 + 16096);
      v241 = v240 - 1;
      if (v240 - 1 <= 400)
      {
        v245 = *(_DWORD *)(v534 + 16096);
        if (v245 < 2)
        {
          v249 = 0;
          v271 = 0.0;
        }
        else
        {
          v246 = 0;
          v247 = 0;
          v248 = 0;
          v249 = 0;
          v250 = 0;
          v251 = 0.0;
          v252 = 0.0;
          v253 = v245 - 1;
          v254 = 0.0;
          for (i = 1; i != v245; ++i)
          {
            v256 = (double *)(v531 + 40 * v241);
            v257 = v531 > (unint64_t)v256 || v256 + 5 > (double *)__N;
            if (v257)
              goto LABEL_639;
            v258 = v241;
            v259 = *(_DWORD *)(v531 + 40 * v241 + 16);
            *(_DWORD *)(v519 + 4) += v259;
            v260 = v201[20].u16[0];
            v261 = *v256;
            if (v246 < v260)
            {
              *(_DWORD *)v519 += v259;
              v252 = v252 + v261;
              if (v261 <= *(double *)&v201[21])
                ++v248;
              if (*(double *)&v201[22] <= *(float *)(v531 + 40 * v241 + 28))
                ++v250;
              ++v246;
            }
            v254 = v254 + v261;
            v251 = fmax(v251, v261);
            v262 = v531 + 40 * v241;
            v249 += *(unsigned __int8 *)(v262 + 24);
            v263 = *(_DWORD *)(v262 + 32);
            if (v247 <= v263)
              v247 = v263;
            if (v241 < 1)
              v258 = v245;
            v241 = v258 - 1;
          }
          if (v246)
          {
            *(_DWORD *)(v519 + 724) = v248;
            v264 = v252 / (double)v246;
            *(double *)(v519 + 696) = v264;
            *(_DWORD *)(v519 + 732) = v250;
            v265 = *(int *)(v519 + 664);
            v266 = (double *)(v14 + 8 * v265);
            if ((unint64_t)v266 >= v498 || (unint64_t)v266 < v14)
              goto LABEL_639;
            *v266 = v264;
            v267 = (double *)(v14 + 8 * ((v260 + (int)v265 - 1) % v260));
            if ((unint64_t)v267 >= v498 || (unint64_t)v267 < v14)
              goto LABEL_639;
            v269 = *v267;
            v270 = *(double *)(v519 + 56);
            *(_BYTE *)(v519 + 720) = *v267 * *(double *)(v519 + 48) < v264;
            *(_BYTE *)(v519 + 721) = v269 * v270 > v264;
            *(_DWORD *)(v519 + 664) = ((int)v265 + 1) % v260;
          }
          *(_DWORD *)(v519 + 28) = v249;
          *(_DWORD *)(v519 + 36) = v247;
          *(double *)(v519 + 40) = (double)v249 / (double)v253;
          *(double *)(v519 + 704) = v254 / (double)v253;
          *(double *)(v519 + 712) = v251;
          v271 = (float)v247;
        }
        v272 = v201[12].u32[0];
        if (v272)
          *(float *)&v201[32].i32[1] = fmaxf(*(float *)&v201[32].i32[1], v271 / (float)v272);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          v273 = VRTraceErrorLogLevelToCSTR();
          v274 = *MEMORY[0x1E0CF2758];
          v275 = *MEMORY[0x1E0CF2758];
          if (*MEMORY[0x1E0CF2748])
          {
            if (os_log_type_enabled(v275, OS_LOG_TYPE_DEFAULT))
            {
              v276 = *(_QWORD *)(v519 + 696);
              v277 = *(_DWORD *)v519;
              v278 = *(_DWORD *)(v519 + 36);
              v279 = *(_QWORD *)(v519 + 40);
              v280 = v201[10];
              v281 = *(_QWORD *)(v519 + 784);
              *(_DWORD *)buf = 136317442;
              v543 = v273;
              v544 = 2080;
              v545 = "_VCAudioPlayer_CalculateQueueSteeringKPIs";
              v546 = 1024;
              v547 = 1507;
              v548 = 2048;
              *(_QWORD *)v549 = v276;
              *(_WORD *)&v549[8] = 1024;
              *(_DWORD *)&v549[10] = v277;
              *(_WORD *)&v549[14] = 1024;
              *(_DWORD *)&v549[16] = v249;
              *(_WORD *)&v549[20] = 1024;
              *(_DWORD *)&v549[22] = v278;
              *(_WORD *)&v549[26] = 2048;
              *(_QWORD *)&v549[28] = v279;
              *(_WORD *)v550 = 2048;
              *(int32x2_t *)&v550[2] = v280;
              *(_WORD *)&v550[10] = 2048;
              *(_QWORD *)v551 = v281;
              _os_log_impl(&dword_1D8A54000, v274, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d QueueSteering: packetLifeTimeAvg=%f, frameErasurecount=%u countOfRedFrames=%d, redFrameDelayInSamples=%d redRecoveryRate=%f targetBoostingInSec=%f, currentTargetQueueSize=%f\n", buf, 0x56u);
            }
          }
          else if (os_log_type_enabled(v275, OS_LOG_TYPE_DEBUG))
          {
            v390 = *(_QWORD *)(v519 + 696);
            v391 = *(_DWORD *)v519;
            v392 = *(_DWORD *)(v519 + 36);
            v393 = *(_QWORD *)(v519 + 40);
            v394 = v201[10];
            v395 = *(_QWORD *)(v519 + 784);
            *(_DWORD *)buf = 136317442;
            v543 = v273;
            v544 = 2080;
            v545 = "_VCAudioPlayer_CalculateQueueSteeringKPIs";
            v546 = 1024;
            v547 = 1507;
            v548 = 2048;
            *(_QWORD *)v549 = v390;
            *(_WORD *)&v549[8] = 1024;
            *(_DWORD *)&v549[10] = v391;
            *(_WORD *)&v549[14] = 1024;
            *(_DWORD *)&v549[16] = v249;
            *(_WORD *)&v549[20] = 1024;
            *(_DWORD *)&v549[22] = v392;
            *(_WORD *)&v549[26] = 2048;
            *(_QWORD *)&v549[28] = v393;
            *(_WORD *)v550 = 2048;
            *(int32x2_t *)&v550[2] = v394;
            *(_WORD *)&v550[10] = 2048;
            *(_QWORD *)v551 = v395;
            _os_log_debug_impl(&dword_1D8A54000, v274, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d QueueSteering: packetLifeTimeAvg=%f, frameErasurecount=%u countOfRedFrames=%d, redFrameDelayInSamples=%d redRecoveryRate=%f targetBoostingInSec=%f, currentTargetQueueSize=%f\n", buf, 0x56u);
          }
        }
        *(int32x2_t *)v520 = vrev64_s32((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(v519 + 704)));
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        v242 = VRTraceErrorLogLevelToCSTR();
        v243 = *MEMORY[0x1E0CF2758];
        v244 = *MEMORY[0x1E0CF2758];
        if (*MEMORY[0x1E0CF2748])
        {
          if (os_log_type_enabled(v244, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136316162;
            v543 = v242;
            v544 = 2080;
            v545 = "_VCAudioPlayer_CalculateQueueSteeringKPIs";
            v546 = 1024;
            v547 = 1468;
            v548 = 1024;
            *(_DWORD *)v549 = v241;
            *(_WORD *)&v549[4] = 1024;
            *(_DWORD *)&v549[6] = 400;
            _os_log_impl(&dword_1D8A54000, v243, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Index=%d is out of bounds compared to packet lifetime history=%d", buf, 0x28u);
          }
        }
        else if (os_log_type_enabled(v244, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136316162;
          v543 = v242;
          v544 = 2080;
          v545 = "_VCAudioPlayer_CalculateQueueSteeringKPIs";
          v546 = 1024;
          v547 = 1468;
          v548 = 1024;
          *(_DWORD *)v549 = v241;
          *(_WORD *)&v549[4] = 1024;
          *(_DWORD *)&v549[6] = 400;
          _os_log_debug_impl(&dword_1D8A54000, v243, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d Index=%d is out of bounds compared to packet lifetime history=%d", buf, 0x28u);
        }
      }
    }
    JitterQueue_SetLastDecodedFrameTimestamp(*(_QWORD *)(v534 + 36), *(_DWORD *)(v7 + 24));
    if (LOBYTE(v537[2]))
    {
      if (v201[13].i32[1] == 1)
      {
        if (v537[4] < (unint64_t)SHIDWORD(v537[0]) || v507 > v506)
          goto LABEL_639;
        Crossfade_Apply(v516, __C, v507, (float *)v537[3], SHIDWORD(v537[0]));
        if (*(_BYTE *)(v7 + 440))
        {
          v282 = v201[13].u32[0];
          if (v282)
            _VCAudioPlayer_SimulateCrossFade((float *)v7, 0, (uint64_t)&v537[3], HIDWORD(v537[0]) / v282);
        }
      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        v283 = VRTraceErrorLogLevelToCSTR();
        v284 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        {
          v377 = v201[13].i32[1];
          *(_DWORD *)buf = 136315906;
          v543 = v283;
          v544 = 2080;
          v545 = "_VCAudioPlayer_CrossFade";
          v546 = 1024;
          v547 = 1656;
          v548 = 1024;
          *(_DWORD *)v549 = v377;
          _os_log_error_impl(&dword_1D8A54000, v284, OS_LOG_TYPE_ERROR, "VCAudioPlayer [%s] %s:%d Attempting to cross-fade with non-mono channels=%u", buf, 0x22u);
        }
      }
    }
    *(_BYTE *)(v7 + 176) = 1;
    v285 = *(_DWORD *)(v67 + 12);
    *(_DWORD *)(v7 + 172) = v285 - *(_DWORD *)(v7 + 168);
    *(_DWORD *)(v7 + 436) = LODWORD(v537[0]) + v285;
    v286 = *(unsigned __int8 *)(v67 + 1168);
    v153 = (int *)v534;
    if (v286 > 0x10)
      goto LABEL_639;
    memcpy(__dst, (const void *)(v67 + 1152), v286);
    *(_BYTE *)(v7 + 50) = *(_BYTE *)(v67 + 1168);
    v8 = v526;
    v83 = v67 + 1272;
    if (*(_DWORD *)(v7 + 4) && SHIDWORD(v537[0]) >= 1)
    {
      if (*(_DWORD *)(*(_QWORD *)(v67 + 1216) + 24))
      {
        v287 = v201[13].u32[0];
        if (v287)
          _VCAudioPlayer_Sample_RampUp(v7, (uint64_t)&v537[3], HIDWORD(v537[0]) / v287);
      }
      *(_DWORD *)(v7 + 4) = 0;
    }
    if (v515)
      *v515 = 0;
    v288 = (_WORD *)(v503 + 2 * (unsigned __int16)*v517);
    if (v288 >= v517 || (unint64_t)v288 < v503)
      goto LABEL_639;
    v132 = 0;
    v12 = (v524 + 1);
    *v288 = *(_WORD *)(v67 + 10);
    *v517 = *v517 + 1 - 320 * ((13421773 * (unint64_t)((unsigned __int16)*v517 + 1)) >> 32);
LABEL_354:
    v289 = *(_QWORD *)(v8 + 200);
    if (v289)
    {
      if (v537[3] && !v537[4])
        goto LABEL_639;
      VCAudioDump_LogUnCompressedAudio(v289, (void *)v537[3], 0, HIDWORD(v537[0]));
    }
    if (v132)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        v410 = VRTraceErrorLogLevelToCSTR();
        v411 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315906;
          v543 = v410;
          v544 = 2080;
          v545 = "_VCAudioPlayer_DecodeSamples";
          v546 = 1024;
          v547 = 2240;
          v548 = 1024;
          *(_DWORD *)v549 = v537[0];
          _os_log_impl(&dword_1D8A54000, v411, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d  sampleCount<=0 breaking loop %d", buf, 0x22u);
        }
      }
      v9 = v535;
      goto LABEL_549;
    }
    if (v67 && v67 >= v83)
      goto LABEL_639;
    v290 = *(_DWORD *)(v520 + 24);
    v291 = *v153;
    if (!*v153)
      ++v290;
    ++*(_DWORD *)(v520 + 20);
    *(_DWORD *)(v520 + 24) = v290;
    ++v535[28].i32[0];
    if (v67)
    {
      if (*(_DWORD *)(v67 + 1176))
      {
        v292 = 0;
        v293 = v511;
LABEL_380:
        v535[28].i32[1] += v292;
        ++v535[39].i32[0];
        if (*(_DWORD *)(v67 + 12) < *(_DWORD *)(v8 + 228) || *(unsigned __int8 *)(v67 + 1232) < 2u)
        {
          v294 = 0;
          v295 = 0;
        }
        else
        {
          v294 = 0;
          v295 = 0;
          *(_BYTE *)(v8 + 224) = 0;
        }
        goto LABEL_384;
      }
      v293 = v511;
      if (v535[14].i8[0])
      {
        if (*(float *)(v7 + 792) < 0.0058)
        {
          _NF = *(float *)(v7 + 796) < 0.0058;
LABEL_375:
          v297 = _NF;
LABEL_379:
          v292 = v297 ^ 1;
          goto LABEL_380;
        }
      }
      else if (*(float *)(v7 + 784) < 72.0)
      {
        _NF = *(float *)(v7 + 788) < 72.0;
        goto LABEL_375;
      }
      v297 = 0;
      goto LABEL_379;
    }
    v294 = 0;
    ++v535[39].i32[0];
    if (*((_BYTE *)v153 + 68))
    {
      v293 = v511;
      if ((v537[1] & 8) != 0)
      {
        v295 = 0;
        if (!v291)
        {
          v295 = *(_BYTE *)(v8 + 224) == 0;
          v294 = 1;
        }
      }
      else
      {
        v295 = 0;
      }
    }
    else
    {
      v295 = 0;
      v293 = v511;
    }
LABEL_384:
    if (v535[14].i8[0])
    {
      if (*(float *)(v7 + 792) >= 0.0058)
        goto LABEL_395;
      v298 = *(float *)(v7 + 796) < 0.0058;
    }
    else
    {
      if (*(float *)(v7 + 784) >= 72.0)
      {
LABEL_395:
        v299 = 0;
        if (!v294)
          goto LABEL_393;
        goto LABEL_396;
      }
      v298 = *(float *)(v7 + 788) < 72.0;
    }
    v299 = v298;
    if (!v294)
    {
LABEL_393:
      v535[47].i8[0] = 0;
      v535[46].i32[0] = 0;
      if (!v295)
        goto LABEL_394;
      goto LABEL_399;
    }
LABEL_396:
    v535[47].i8[0] = 1;
    v301 = v535[46].i32[0];
    v535[46].i32[0] = v301 + 1;
    if (v301 >= v535[32].i32[0])
      v535[32].i32[0] = v301 + 1;
    v535[44].i8[4] = 0;
    ++v535[30].i32[0];
    ++v535[39].i32[1];
    if (!v295)
    {
LABEL_394:
      v300 = 0;
      goto LABEL_400;
    }
LABEL_399:
    v295 = v535[46].i32[1] + 1;
    ++v535[30].i32[1];
    v300 = 1;
LABEL_400:
    v535[47].i8[1] = v300;
    v535[46].i32[1] = v295;
    v302 = v535[45].u32[1];
    v303 = v302 % 5;
    if (((v294 ^ 1 | v299) & 1) != 0)
    {
      v304 = (_BYTE *)(v293 + v303);
      if ((unint64_t)v304 >= v510 || (unint64_t)v304 < v293)
        goto LABEL_639;
      *v304 = 0;
      if (v67)
        goto LABEL_408;
    }
    else
    {
      v535[44].i8[4] = 1;
      ++v535[40].i32[1];
      ++v535[31].i32[0];
      v305 = (_BYTE *)(v293 + v303);
      if ((unint64_t)v305 >= v510 || (unint64_t)v305 < v293)
        goto LABEL_639;
      *v305 = 1;
      if (v67)
      {
LABEL_408:
        if (*(_BYTE *)(v67 + 8))
        {
          v306.i32[1] = 1;
          v306.i32[0] = *(_DWORD *)(v67 + 1144);
          v535[27] = vadd_s32(v535[27], v306);
        }
      }
    }
    if (v299)
      ++v535[29].i32[0];
    if (v67 && *(_BYTE *)(v67 + 1268))
      ++v535[29].i32[1];
    if (v302 >= 5)
    {
      v307 = 0;
      v308 = 0;
      do
        v308 += *(unsigned __int8 *)(v293 + v307++);
      while (v307 != 5);
      if (v308 > 2)
        ++v535[31].i32[1];
    }
    v535[45].i32[1] = v302 + 1;
    *(_DWORD *)(v8 + 56) = v535[12].i32[1] * v12;
    if (v67)
    {
      *(_WORD *)(v8 + 8) = *(_WORD *)(v67 + 10);
      *(_BYTE *)(v8 + 16) = *(_DWORD *)(v67 + 1176) != 0;
      v309 = *(_DWORD *)(v67 + 1144);
      *(_DWORD *)(v8 + 20) = v309;
      *(_DWORD *)(v8 + 12) = *(_DWORD *)(v67 + 12);
      v310 = *(_DWORD *)(v67 + 1196);
      *(_DWORD *)(v8 + 28) = v310;
      *(_BYTE *)(v8 + 24) = *(_BYTE *)(v67 + 8);
      v311 = *(_BYTE *)(v67 + 1268);
      *(_BYTE *)(v8 + 17) = v311;
      *(_DWORD *)(v8 + 172) = *(_DWORD *)(v67 + 1256);
      *(_WORD *)(v8 + 176) = v309;
      *(_WORD *)(v8 + 168) = v310;
      *(_BYTE *)(v8 + 186) = *(_BYTE *)(v67 + 1270);
      *(_BYTE *)(v8 + 187) = v311;
      *(_BYTE *)(v8 + 188) = *(_BYTE *)(v67 + 1269);
      v312 = *(_QWORD *)(v67 + 1216);
      if (v312)
      {
        v313 = *(double **)(v312 + 8);
        if (v313)
          *(_WORD *)(v8 + 184) = (int)*v313;
      }
      (*(void (**)(_QWORD, unint64_t))(v67 + 1200))(*(_QWORD *)(v67 + 1208), v67);
    }
    else
    {
      *(_WORD *)(v8 + 8) = 0;
      *(_DWORD *)(v8 + 12) = 0;
      *(_WORD *)(v8 + 176) = 0;
    }
    v314 = v535[13].i32[0] * *(_DWORD *)(v7 + 320);
    v315 = HIDWORD(v537[0]) - v314;
    if (SHIDWORD(v537[0]) <= v314)
    {
      v315 = 0;
      v314 = HIDWORD(v537[0]);
    }
    _VCAudioPlayer_CopyPlaybackBuffer(v522, (unint64_t)&v537[3], v315, v314);
    v316 = v535[13].u32[0];
    if (v316)
    {
      *(_DWORD *)(v7 + 168) += HIDWORD(v537[0]) / v316;
      if ((_DWORD)v12)
        goto LABEL_434;
    }
    else
    {
      if ((int)VRTraceGetErrorLogLevelForModule() < 3
        || (v317 = VRTraceErrorLogLevelToCSTR(),
            v318 = *MEMORY[0x1E0CF2758],
            !os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR)))
      {
        if (!(_DWORD)v12)
          goto LABEL_435;
LABEL_434:
        *(_DWORD *)(v7 + 184) = *(_DWORD *)(v7 + 168);
        goto LABEL_435;
      }
      *(_DWORD *)buf = 136315650;
      v543 = v317;
      v544 = 2080;
      v545 = "_VCAudioPlayer_PerformPostDecodeActions";
      v546 = 1024;
      v547 = 1990;
      _os_log_error_impl(&dword_1D8A54000, v318, OS_LOG_TYPE_ERROR, "VCAudioPlayer [%s] %s:%d bytesPerFrame is zero while calculating input samples", buf, 0x1Cu);
      if ((_DWORD)v12)
        goto LABEL_434;
    }
LABEL_435:
    v319 = HIDWORD(v537[0]);
    v10 = v534;
    if (SHIDWORD(v537[0]) >= 2 * v535[13].i32[0])
    {
      *(_BYTE *)(v7 + 440) = 1;
      v320 = v535[14].u8[0];
      if (v535[14].i8[0])
        v321 = 7;
      else
        v321 = 3;
      if (v321 >= v319)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          v403 = VRTraceErrorLogLevelToCSTR();
          v404 = *MEMORY[0x1E0CF2758];
          v405 = *MEMORY[0x1E0CF2758];
          if (*MEMORY[0x1E0CF2748])
          {
            if (os_log_type_enabled(v405, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315906;
              v543 = v403;
              v544 = 2080;
              v545 = "_VCAudioPlayer_FillDecodedSamplesForCrossFade";
              v546 = 1024;
              v547 = 1051;
              v548 = 1024;
              *(_DWORD *)v549 = v319;
              _os_log_impl(&dword_1D8A54000, v404, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Not able to store the last two decoded samples for crossfade. bytesOut=%d", buf, 0x22u);
            }
          }
          else if (os_log_type_enabled(v405, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315906;
            v543 = v403;
            v544 = 2080;
            v545 = "_VCAudioPlayer_FillDecodedSamplesForCrossFade";
            v546 = 1024;
            v547 = 1051;
            v548 = 1024;
            *(_DWORD *)v549 = v319;
            _os_log_debug_impl(&dword_1D8A54000, v404, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d Not able to store the last two decoded samples for crossfade. bytesOut=%d", buf, 0x22u);
          }
          v9 = v535;
          v10 = v534;
          goto LABEL_537;
        }
      }
      else
      {
        v322 = DWORD2(v541);
        if (SDWORD2(v541) >= 1)
        {
          v323 = 0;
          v324 = v319;
          v9 = v535;
          while (1)
          {
            v325 = &v537[3 * v323 + 3];
            if (v325 < &v537[3] || v325 + 3 > (unint64_t *)&v541 + 1)
              goto LABEL_639;
            v327 = *v325;
            if (v327)
            {
              v328 = v327 + v537[3 * v323 + 4];
              v329 = v327 + v324;
              if (v320)
              {
                v330 = v329 - 8 < v328 && v329 - 8 >= v327;
                v331 = (_DWORD *)(v509 + 16 * v323);
                if (!v330 || (unint64_t)v331 >= v516 || (unint64_t)v331 < v509)
                  goto LABEL_639;
                v331[1] = *(_DWORD *)(v329 - 8);
                v334 = (_DWORD *)(v329 - 4);
                if ((unint64_t)v334 >= v328 || (unint64_t)v334 < v327)
                  goto LABEL_639;
                *v331 = *v334;
              }
              else
              {
                v336 = v329 - 4 < v328 && v329 - 4 >= v327;
                v337 = (_WORD *)(v509 + 16 * v323);
                if (!v336 || (unint64_t)v337 >= v516 || (unint64_t)v337 < v509)
                  goto LABEL_639;
                v337[2] = *(_WORD *)(v329 - 4);
                v340 = (_WORD *)(v329 - 2);
                if ((unint64_t)v340 >= v328 || (unint64_t)v340 < v327)
                  goto LABEL_639;
                *v337 = *v340;
              }
            }
            if (v322 <= ++v323)
              goto LABEL_537;
          }
        }
      }
      v9 = v535;
    }
    else
    {
      *(_BYTE *)(v7 + 440) = 0;
      v9 = v535;
    }
LABEL_537:
    if (*(_DWORD *)(v7 + 168) >= *a2)
      goto LABEL_549;
  }
  *a2 = v9[12].i32[1] * v12;
  *a3 = *(_DWORD *)(v7 + 168);
  VRLogfilePrintSync(*(FILE ***)v8, "Warning: Timeout in decoder loop. Updating samplesToDecode to %d\n", v17, v18, v19, v20, v21, v22, *a2);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    v407 = VRTraceErrorLogLevelToCSTR();
    v408 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      v409 = *a2;
      *(_DWORD *)buf = 136315906;
      v543 = v407;
      v544 = 2080;
      v545 = "_VCAudioPlayer_DecodeSamples";
      v546 = 1024;
      v547 = 2252;
      v548 = 1024;
      *(_DWORD *)v549 = v409;
      _os_log_impl(&dword_1D8A54000, v408, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Timeout in audio player decoder loop, breaking. Updating samplesToDecode to %d\n", buf, 0x22u);
    }
  }
LABEL_549:
  IsInternalOSInstalled = VRTraceIsInternalOSInstalled();
  v413 = *a2;
  if (IsInternalOSInstalled && (v413 < 0 || v413 > *(_DWORD *)(v7 + 56) || *a3 > *(_DWORD *)(v7 + 168)))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      v420 = VRTraceErrorLogLevelToCSTR();
      v421 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      {
        v490 = *a2;
        v491 = *a3;
        v492 = *(_QWORD *)(v7 + 64);
        v493 = *(_DWORD *)(v7 + 168);
        LODWORD(v537[0]) = 136316930;
        *(_QWORD *)((char *)v537 + 4) = v420;
        WORD2(v537[1]) = 2080;
        *(_QWORD *)((char *)&v537[1] + 6) = "_VCAudioPlayer_DecodeSamples";
        HIWORD(v537[2]) = 1024;
        LODWORD(v537[3]) = 2258;
        WORD2(v537[3]) = 1024;
        *(_DWORD *)((char *)&v537[3] + 6) = v490;
        WORD1(v537[4]) = 1024;
        HIDWORD(v537[4]) = v491;
        LOWORD(v537[5]) = 2048;
        *(_QWORD *)((char *)&v537[5] + 2) = v492;
        WORD1(v537[6]) = 1024;
        HIDWORD(v537[6]) = v493;
        LOWORD(v537[7]) = 1024;
        *(_DWORD *)((char *)&v537[7] + 2) = v12;
        _os_log_error_impl(&dword_1D8A54000, v421, OS_LOG_TYPE_ERROR, "VCAudioPlayer [%s] %s:%d Invalid samplesToDecode=%d, samplesNeed=%d, inputBuffer.playbackBuffer=%p, inputBuffer.samples=%d, decoded=%d", (uint8_t *)v537, 0x3Eu);
      }
    }
    VRLogfilePrintSync(*(FILE ***)v8, "Critical: Invalid samplesToDecode=%d samplesNeed=%d, inputBuffer.playbackBuffer=%p, inputBuffer.samples=%d, decoded=%d", v414, v415, v416, v417, v418, v419, *a2);
    VCTerminateProcess((uint64_t)CFSTR("Invalid samplesToDecode"), CFSTR("_VCAudioPlayer_DecodeSamples"), 0);
    v413 = *a2;
  }
  if (v413 >= 1)
  {
    v532 = v7 + 64;
    v422 = (float)v413 * 10.0 / (float)v9[12].u32[0];
    if (v422 <= 1.0)
      v423 = (float)v413 * 10.0 / (float)v9[12].u32[0];
    else
      v423 = 1.0;
    v525 = v12;
    if (v9[14].i8[0])
    {
      *(float *)(v7 + 800) = v423;
      *(_QWORD *)(v7 + 792) = 0;
      if (*(int *)(v7 + 160) >= 1)
      {
        v424 = 0;
        v425 = 0;
        v426 = v7 + 748;
        __Na = v413;
        v427 = (float *)(v7 + 780);
        v428 = v7 + 764;
        do
        {
          v429 = v425;
          v430 = (float *)(v426 + 4 * v425);
          vDSP_rmsqv(*(const float **)(v532 + 24 * v425), 1, v430, __Na);
          v431 = (unint64_t)v430 < v428 && (unint64_t)v430 >= v426;
          v432 = v431;
          if (*(_BYTE *)v427)
          {
            if (!v432)
              goto LABEL_639;
            v433 = *v430;
          }
          else
          {
            if (!v432)
              goto LABEL_639;
            v433 = (float)(v423 * *v430) + *(float *)(v428 + 4 * v429) * (1.0 - v423);
          }
          *(float *)(v428 + 4 * v429) = v433;
          v434 = (float *)(v428 + 4 * v429);
          if (v434 >= v427 || (unint64_t)v434 < v428)
            goto LABEL_639;
          v7 = v533;
          if (v433 <= *(float *)(v533 + 792))
            v433 = *(float *)(v533 + 792);
          *(float *)(v533 + 792) = v433;
          v435 = *v430;
          if (*v430 <= *(float *)(v533 + 796))
            v435 = *(float *)(v533 + 796);
          *(float *)(v533 + 796) = v435;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            v436 = VRTraceErrorLogLevelToCSTR();
            v437 = *MEMORY[0x1E0CF2758];
            v438 = *MEMORY[0x1E0CF2758];
            if (*MEMORY[0x1E0CF2748])
            {
              v7 = v533;
              if (os_log_type_enabled(v438, OS_LOG_TYPE_DEFAULT))
              {
                v439 = *(_DWORD *)(v533 + 20);
                v440 = *v430;
                v441 = *v434;
                LODWORD(v537[0]) = 136316674;
                *(_QWORD *)((char *)v537 + 4) = v436;
                WORD2(v537[1]) = 2080;
                *(_QWORD *)((char *)&v537[1] + 6) = "_VCAudioPlayer_UpdateMultiChannelRMS";
                HIWORD(v537[2]) = 1024;
                LODWORD(v537[3]) = 970;
                WORD2(v537[3]) = 1024;
                *(_DWORD *)((char *)&v537[3] + 6) = v439;
                WORD1(v537[4]) = 2048;
                *(double *)((char *)&v537[4] + 4) = v440;
                WORD2(v537[5]) = 2048;
                *(double *)((char *)&v537[5] + 6) = v441;
                HIWORD(v537[6]) = 1024;
                LODWORD(v537[7]) = v424;
                _os_log_impl(&dword_1D8A54000, v437, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Audio Frame seq[%d] rms[%f] rmsAvg[%f] channel[%d]", (uint8_t *)v537, 0x3Cu);
              }
            }
            else
            {
              v7 = v533;
              if (os_log_type_enabled(v438, OS_LOG_TYPE_DEBUG))
              {
                v442 = *(_DWORD *)(v533 + 20);
                v443 = *v430;
                v444 = *v434;
                LODWORD(v537[0]) = 136316674;
                *(_QWORD *)((char *)v537 + 4) = v436;
                WORD2(v537[1]) = 2080;
                *(_QWORD *)((char *)&v537[1] + 6) = "_VCAudioPlayer_UpdateMultiChannelRMS";
                HIWORD(v537[2]) = 1024;
                LODWORD(v537[3]) = 970;
                WORD2(v537[3]) = 1024;
                *(_DWORD *)((char *)&v537[3] + 6) = v442;
                WORD1(v537[4]) = 2048;
                *(double *)((char *)&v537[4] + 4) = v443;
                WORD2(v537[5]) = 2048;
                *(double *)((char *)&v537[5] + 6) = v444;
                HIWORD(v537[6]) = 1024;
                LODWORD(v537[7]) = v424;
                _os_log_debug_impl(&dword_1D8A54000, v437, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d Audio Frame seq[%d] rms[%f] rmsAvg[%f] channel[%d]", (uint8_t *)v537, 0x3Cu);
              }
            }
          }
          v425 = v429 + 1;
          v424 = (v429 + 1);
          v9 = v535;
        }
        while (*(_DWORD *)(v7 + 160) > v424);
      }
      *(_BYTE *)(v7 + 780) = 0;
      v12 = v525;
      v445 = v526;
      if ((int)VRTraceGetErrorLogLevelForModule() <= 7)
        goto LABEL_621;
      v446 = VRTraceErrorLogLevelToCSTR();
      v447 = *MEMORY[0x1E0CF2758];
      v448 = *MEMORY[0x1E0CF2758];
      if (*MEMORY[0x1E0CF2748])
      {
        if (os_log_type_enabled(v448, OS_LOG_TYPE_DEFAULT))
        {
          v449 = *(_DWORD *)(v7 + 20);
          v450 = *(float *)(v7 + 796);
          v451 = *(float *)(v7 + 792);
          LODWORD(v537[0]) = 136316418;
          *(_QWORD *)((char *)v537 + 4) = v446;
          WORD2(v537[1]) = 2080;
          *(_QWORD *)((char *)&v537[1] + 6) = "_VCAudioPlayer_UpdateMultiChannelRMS";
          HIWORD(v537[2]) = 1024;
          LODWORD(v537[3]) = 974;
          WORD2(v537[3]) = 1024;
          *(_DWORD *)((char *)&v537[3] + 6) = v449;
          WORD1(v537[4]) = 2048;
          *(double *)((char *)&v537[4] + 4) = v450;
          WORD2(v537[5]) = 2048;
          *(double *)((char *)&v537[5] + 6) = v451;
          v452 = "VCAudioPlayer [%s] %s:%d Audio Frame seq[%d] energyInfo.rms[%f] energyInfo.RMSAvg[%f]";
          goto LABEL_617;
        }
        goto LABEL_621;
      }
      if (!os_log_type_enabled(v448, OS_LOG_TYPE_DEBUG))
        goto LABEL_621;
      v481 = *(_DWORD *)(v7 + 20);
      v482 = *(float *)(v7 + 796);
      v483 = *(float *)(v7 + 792);
      LODWORD(v537[0]) = 136316418;
      *(_QWORD *)((char *)v537 + 4) = v446;
      WORD2(v537[1]) = 2080;
      *(_QWORD *)((char *)&v537[1] + 6) = "_VCAudioPlayer_UpdateMultiChannelRMS";
      HIWORD(v537[2]) = 1024;
      LODWORD(v537[3]) = 974;
      WORD2(v537[3]) = 1024;
      *(_DWORD *)((char *)&v537[3] + 6) = v481;
      WORD1(v537[4]) = 2048;
      *(double *)((char *)&v537[4] + 4) = v482;
      WORD2(v537[5]) = 2048;
      *(double *)((char *)&v537[5] + 6) = v483;
      v484 = "VCAudioPlayer [%s] %s:%d Audio Frame seq[%d] energyInfo.rms[%f] energyInfo.RMSAvg[%f]";
LABEL_638:
      _os_log_debug_impl(&dword_1D8A54000, v447, OS_LOG_TYPE_DEBUG, v484, (uint8_t *)v537, 0x36u);
      goto LABEL_621;
    }
    *(_DWORD *)buf = 0;
    *(_QWORD *)(v7 + 784) = 0;
    if (*(int *)(v7 + 160) >= 1)
    {
      v453 = 0;
      v454 = 0;
      v455 = v7 + 716;
      v456 = v7 + 732;
      do
      {
        v457 = v454;
        v458 = v532 + 24 * v454;
        v459 = *(__int16 **)v458;
        v460 = *(_QWORD *)(v458 + 8);
        if (v459 && v460 == 0)
          goto LABEL_639;
        SVESQ_Q15_Portable(v459, v413, buf, 10);
        v462 = (float *)(v455 + 4 * v457);
        if ((unint64_t)v462 >= v456 || (unint64_t)v462 < v455)
          goto LABEL_639;
        v463 = (float)*(unsigned int *)buf / (float)v413;
        *v462 = v463;
        if (!*(_BYTE *)(v7 + 781))
          v463 = (float)(v423 * v463) + *(float *)(v456 + 4 * v457) * (1.0 - v423);
        *(float *)(v456 + 4 * v457) = v463;
        if (v463 <= *(float *)(v7 + 784))
          v463 = *(float *)(v7 + 784);
        *(float *)(v7 + 784) = v463;
        v464 = *v462;
        if (*v462 <= *(float *)(v7 + 788))
          v464 = *(float *)(v7 + 788);
        *(float *)(v7 + 788) = v464;
        v465 = v7;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          v466 = VRTraceErrorLogLevelToCSTR();
          v467 = *MEMORY[0x1E0CF2758];
          v468 = *MEMORY[0x1E0CF2758];
          if (*MEMORY[0x1E0CF2748])
          {
            v465 = v533;
            if (os_log_type_enabled(v468, OS_LOG_TYPE_DEFAULT))
            {
              v469 = *(_DWORD *)(v533 + 20);
              v470 = *v462;
              v471 = *(float *)(v456 + 4 * v457);
              LODWORD(v537[0]) = 136316674;
              *(_QWORD *)((char *)v537 + 4) = v466;
              WORD2(v537[1]) = 2080;
              *(_QWORD *)((char *)&v537[1] + 6) = "_VCAudioPlayer_UpdateMultiChannelAverageEnergy";
              HIWORD(v537[2]) = 1024;
              LODWORD(v537[3]) = 1001;
              WORD2(v537[3]) = 1024;
              *(_DWORD *)((char *)&v537[3] + 6) = v469;
              WORD1(v537[4]) = 2048;
              *(double *)((char *)&v537[4] + 4) = v470;
              WORD2(v537[5]) = 2048;
              *(double *)((char *)&v537[5] + 6) = v471;
              HIWORD(v537[6]) = 1024;
              LODWORD(v537[7]) = v453;
              _os_log_impl(&dword_1D8A54000, v467, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d Audio Frame seq[%d] energy[%f] energyInfo.energyAvg[%f] channel[%d]", (uint8_t *)v537, 0x3Cu);
            }
          }
          else
          {
            v465 = v533;
            if (os_log_type_enabled(v468, OS_LOG_TYPE_DEBUG))
            {
              v473 = *(_DWORD *)(v533 + 20);
              v474 = *v462;
              v475 = *(float *)(v456 + 4 * v457);
              LODWORD(v537[0]) = 136316674;
              *(_QWORD *)((char *)v537 + 4) = v466;
              WORD2(v537[1]) = 2080;
              *(_QWORD *)((char *)&v537[1] + 6) = "_VCAudioPlayer_UpdateMultiChannelAverageEnergy";
              HIWORD(v537[2]) = 1024;
              LODWORD(v537[3]) = 1001;
              WORD2(v537[3]) = 1024;
              *(_DWORD *)((char *)&v537[3] + 6) = v473;
              WORD1(v537[4]) = 2048;
              *(double *)((char *)&v537[4] + 4) = v474;
              WORD2(v537[5]) = 2048;
              *(double *)((char *)&v537[5] + 6) = v475;
              HIWORD(v537[6]) = 1024;
              LODWORD(v537[7]) = v453;
              _os_log_debug_impl(&dword_1D8A54000, v467, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d Audio Frame seq[%d] energy[%f] energyInfo.energyAvg[%f] channel[%d]", (uint8_t *)v537, 0x3Cu);
            }
          }
        }
        v454 = v457 + 1;
        v453 = (v457 + 1);
        v472 = *(_DWORD *)(v465 + 160);
        v7 = v465;
        v12 = v525;
      }
      while (v472 > v453);
    }
    *(_BYTE *)(v7 + 781) = 0;
    v9 = v535;
    v445 = v526;
    if ((int)VRTraceGetErrorLogLevelForModule() <= 7)
      goto LABEL_621;
    v476 = VRTraceErrorLogLevelToCSTR();
    v447 = *MEMORY[0x1E0CF2758];
    v477 = *MEMORY[0x1E0CF2758];
    if (!*MEMORY[0x1E0CF2748])
    {
      if (!os_log_type_enabled(v477, OS_LOG_TYPE_DEBUG))
        goto LABEL_621;
      v494 = *(_DWORD *)(v7 + 20);
      v495 = *(float *)(v7 + 788);
      v496 = *(float *)(v7 + 784);
      LODWORD(v537[0]) = 136316418;
      *(_QWORD *)((char *)v537 + 4) = v476;
      WORD2(v537[1]) = 2080;
      *(_QWORD *)((char *)&v537[1] + 6) = "_VCAudioPlayer_UpdateMultiChannelAverageEnergy";
      HIWORD(v537[2]) = 1024;
      LODWORD(v537[3]) = 1005;
      WORD2(v537[3]) = 1024;
      *(_DWORD *)((char *)&v537[3] + 6) = v494;
      WORD1(v537[4]) = 2048;
      *(double *)((char *)&v537[4] + 4) = v495;
      WORD2(v537[5]) = 2048;
      *(double *)((char *)&v537[5] + 6) = v496;
      v484 = "VCAudioPlayer [%s] %s:%d Audio Frame seq[%d] energyInfo.energy[%f] energyInfo.energyAvg[%f]";
      goto LABEL_638;
    }
    if (os_log_type_enabled(v477, OS_LOG_TYPE_DEFAULT))
    {
      v478 = *(_DWORD *)(v7 + 20);
      v479 = *(float *)(v7 + 788);
      v480 = *(float *)(v7 + 784);
      LODWORD(v537[0]) = 136316418;
      *(_QWORD *)((char *)v537 + 4) = v476;
      WORD2(v537[1]) = 2080;
      *(_QWORD *)((char *)&v537[1] + 6) = "_VCAudioPlayer_UpdateMultiChannelAverageEnergy";
      HIWORD(v537[2]) = 1024;
      LODWORD(v537[3]) = 1005;
      WORD2(v537[3]) = 1024;
      *(_DWORD *)((char *)&v537[3] + 6) = v478;
      WORD1(v537[4]) = 2048;
      *(double *)((char *)&v537[4] + 4) = v479;
      WORD2(v537[5]) = 2048;
      *(double *)((char *)&v537[5] + 6) = v480;
      v452 = "VCAudioPlayer [%s] %s:%d Audio Frame seq[%d] energyInfo.energy[%f] energyInfo.energyAvg[%f]";
LABEL_617:
      _os_log_impl(&dword_1D8A54000, v447, OS_LOG_TYPE_DEFAULT, v452, (uint8_t *)v537, 0x36u);
    }
LABEL_621:
    if (*(_BYTE *)(v534 + 69))
    {
      if (v9[14].i8[0])
        v485 = *(float *)(v7 + 792) < 0.0058;
      else
        v485 = *(float *)(v7 + 784) < 72.0;
      v486 = v485;
      VCSilencePredictor_AddFrame((unsigned __int8 *)(v7 + 552), *(unsigned __int16 *)(v445 + 168), *(unsigned __int16 *)(v445 + 176), v486);
    }
    v487 = *(float *)(v7 + 796);
    *(float *)(v445 + 180) = v487;
    if (!*(_DWORD *)v534)
    {
      if (v9[14].i8[0])
      {
        if (v487 < 0.0058)
          goto LABEL_632;
LABEL_634:
        v488 = 0;
      }
      else
      {
        if (*(float *)(v7 + 788) >= 72.0)
          goto LABEL_634;
LABEL_632:
        v488 = *(_DWORD *)(v7 + 8) + 1;
      }
      *(_DWORD *)(v7 + 8) = v488;
    }
  }
  return v12;
}

void _VCAudioPlayer_UpdateOpusDecodeFECStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _BYTE *v14;
  int outPropertyData;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  outPropertyData = 0;
  if ((SoundDec_GetOpusDecodeFECStatus(a2, &outPropertyData) & 0x80000000) == 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      v4 = VRTraceErrorLogLevelToCSTR();
      v5 = *MEMORY[0x1E0CF2758];
      v6 = *MEMORY[0x1E0CF2758];
      if (*MEMORY[0x1E0CF2748])
      {
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136316162;
          v18 = v4;
          v19 = 2080;
          v20 = "_VCAudioPlayer_UpdateOpusDecodeFECStatus";
          v21 = 1024;
          v22 = 1864;
          v23 = 2048;
          v24 = a2;
          v25 = 1024;
          v26 = outPropertyData;
          _os_log_impl(&dword_1D8A54000, v5, OS_LOG_TYPE_DEFAULT, "VCAudioPlayer [%s] %s:%d SoundDec_GetOpusDecodeFECStatus soundDec=%p fecStatus=%u", buf, 0x2Cu);
        }
      }
      else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136316162;
        v18 = v4;
        v19 = 2080;
        v20 = "_VCAudioPlayer_UpdateOpusDecodeFECStatus";
        v21 = 1024;
        v22 = 1864;
        v23 = 2048;
        v24 = a2;
        v25 = 1024;
        v26 = outPropertyData;
        _os_log_debug_impl(&dword_1D8A54000, v5, OS_LOG_TYPE_DEBUG, "VCAudioPlayer [%s] %s:%d SoundDec_GetOpusDecodeFECStatus soundDec=%p fecStatus=%u", buf, 0x2Cu);
      }
    }
    if (outPropertyData == 2)
    {
      ++*(_DWORD *)(a1 + 52676);
      v7 = *(_DWORD *)(a1 + 52696);
      if (v7)
      {
        *(_DWORD *)(a1 + 52696) = v7 - 1;
        if (*(_DWORD *)(a1 + 52744) >= v7)
          *(_DWORD *)(a1 + 52744) = v7 - 1;
        v8 = *(_DWORD *)(a1 + 52700);
        *(_DWORD *)(a1 + 52700) = v8 - 1;
        if (*(_DWORD *)(a1 + 52748) >= v8)
          *(_DWORD *)(a1 + 52748) = v8 - 1;
        v9 = *(_DWORD *)(a1 + 52824);
        if (v9)
          *(_DWORD *)(a1 + 52824) = v9 - 1;
      }
      v10 = *(_DWORD *)(a1 + 52772);
      if (v10)
        *(_DWORD *)(a1 + 52772) = v10 - 1;
      if (*(_BYTE *)(a1 + 52812))
      {
        v11 = *(_DWORD *)(a1 + 52704);
        if (v11)
        {
          *(_DWORD *)(a1 + 52704) = v11 - 1;
          if (*(_DWORD *)(a1 + 52752) >= v11)
            *(_DWORD *)(a1 + 52752) = v11 - 1;
        }
        v12 = *(_DWORD *)(a1 + 52780);
        if (v12)
          *(_DWORD *)(a1 + 52780) = v12 - 1;
        v13 = *(_DWORD *)(a1 + 52820) - 1;
        if (v13 >= 0)
        {
          v14 = (_BYTE *)(a1 + 52813 + v13 % 5u);
          if ((unint64_t)v14 < a1 + 52818 && (unint64_t)v14 >= a1 + 52813)
            *v14 = 0;
          else
            __break(0x5519u);
        }
      }
    }
  }
}

int *_VCAudioPlayer_CopyDecodedSamplesToInput(int *result)
{
  int *v1;
  int v2;
  unsigned __int8 v3;
  int *v4;
  size_t v5;
  unint64_t v6;
  const void *v7;
  BOOL v8;
  BOOL v9;

  if (result[24] >= 2)
  {
    v1 = result;
    v2 = 1;
    v3 = 1;
    while (1)
    {
      v4 = &v1[6 * v3];
      v5 = v1[25];
      v6 = *(_QWORD *)v1 + *((_QWORD *)v1 + 1);
      v7 = (const void *)(*(_QWORD *)v1 + (int)v5 * (uint64_t)v2);
      v8 = *((_QWORD *)v4 + 1) < v5 || (unint64_t)v7 > v6;
      v9 = v8 || *(_QWORD *)v1 > (unint64_t)v7;
      if (v9 || v6 - (unint64_t)v7 < v5)
        break;
      result = (int *)memcpy(*(void **)v4, v7, v5);
      v2 = ++v3;
      if (v1[24] <= v3)
        return result;
    }
    __break(0x5519u);
  }
  return result;
}

uint64_t _VCAudioPlayer_Sample_RampUp(uint64_t result, uint64_t a2, int a3)
{
  float v3;
  int v4;
  unsigned __int8 v5;
  int v6;
  float **v7;
  float *v8;
  unint64_t v9;
  uint64_t v10;
  float *v11;
  unsigned __int8 v12;
  int v13;
  __int16 **v14;
  __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  __int16 *v18;

  v3 = 1.0 / (float)a3;
  v4 = *(_DWORD *)(a2 + 96);
  if (*(_BYTE *)(result + 52568))
  {
    if (v4 >= 1)
    {
      v5 = 0;
      while (a3 < 1)
      {
LABEL_9:
        if (v4 <= ++v5)
          return result;
      }
      v6 = 0;
      v7 = (float **)(a2 + 24 * v5);
      v8 = *v7;
      v9 = (unint64_t)v7[1] + (_QWORD)*v7;
      v10 = a3;
      v11 = v8;
      while ((unint64_t)v11 < v9 && v11 >= v8)
      {
        *v11 = (float)(v3 * (float)v6) * *v11;
        ++v11;
        ++v6;
        if (!--v10)
          goto LABEL_9;
      }
LABEL_20:
      __break(0x5519u);
    }
  }
  else if (v4 >= 1)
  {
    v12 = 0;
    while (a3 < 1)
    {
LABEL_18:
      if (v4 <= ++v12)
        return result;
    }
    v13 = 0;
    v14 = (__int16 **)(a2 + 24 * v12);
    v15 = *v14;
    v16 = (unint64_t)v14[1] + (_QWORD)*v14;
    v17 = a3;
    v18 = v15;
    while ((unint64_t)v18 < v16 && v18 >= v15)
    {
      *v18 = (int)(float)((float)(v3 * (float)v13) * (float)*v18);
      ++v18;
      ++v13;
      if (!--v17)
        goto LABEL_18;
    }
    goto LABEL_20;
  }
  return result;
}

float *_VCAudioPlayer_SimulateCrossFade(float *result, int a2, uint64_t a3, int a4)
{
  int v4;
  unsigned __int8 v5;
  float *v6;
  float *v7;
  _BYTE *v8;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  int v17;
  float *v18;
  float *v19;
  float *v20;
  uint64_t *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  unsigned int v27;
  BOOL v28;
  float *v29;
  float *v30;
  float *v31;
  uint64_t *v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;

  if (result)
  {
    if (a4 >= 9)
    {
      v4 = *(_DWORD *)(a3 + 96);
      if (v4 >= 1)
      {
        v5 = 0;
        v6 = result + 112;
        v7 = result + 128;
        v8 = result + 13142;
        while (1)
        {
          result = &v6[4 * v5];
          if (result >= v7 || result < v6)
            break;
          v10 = &v6[4 * v5];
          v11 = v10 + 1;
          v12 = v10 + 2;
          v13 = v10 + 3;
          if (a2 == 1)
            result = v12;
          else
            v13 = v11;
          v14 = *result;
          v15 = *v13;
          v16 = *result;
          if (*v8)
          {
            v17 = LODWORD(v15) ^ LODWORD(v16);
            v18 = (float *)&g_EncodingFormatiPadWiFi2732x2048;
            v19 = (float *)&_VCAudioPlayer_SimulateCrossFade_fadeOutZeroCrossing;
            if (fabsf(v14) <= fabsf(v15))
            {
              v20 = (float *)&_VCAudioPlayer_SimulateCrossFade_fadeOutConverging;
            }
            else
            {
              v19 = (float *)&_VCAudioPlayer_SimulateCrossFade_fadeOutConverging;
              v20 = (float *)&_VCAudioPlayer_SimulateCrossFade_fadeOutDiverging;
            }
            if (v17 < 0)
            {
              result = (float *)&_VCAudioPlayer_SimulateCrossFade_fadeOutZeroCrossing;
            }
            else
            {
              v18 = v19;
              result = v20;
            }
            v21 = (uint64_t *)(a3 + 24 * v5);
            v22 = (unint64_t)v21[1] < 0x21 || result > v18;
            if (v22 || (char *)v18 - (char *)result < 33)
              break;
            v23 = 0;
            v24 = *v21;
            do
            {
              *(float *)(v24 + v23 * 4) = (float)(*(float *)(v24 + v23 * 4)
                                                * _VCAudioPlayer_SimulateCrossFade_fadeIn[v23])
                                        + (float)(v14 * result[v23]);
              ++v23;
            }
            while (v23 != 9);
          }
          else
          {
            v25 = LOWORD(v15) ^ LOWORD(v16);
            v26 = SLOWORD(v16);
            if (SLOWORD(v16) >= 0)
              LODWORD(v16) = SLOWORD(v16);
            else
              LODWORD(v16) = -SLOWORD(v16);
            v27 = SLOWORD(v15);
            if (SLOWORD(v15) < 0)
              v27 = -SLOWORD(v15);
            v28 = v27 >= LODWORD(v16);
            if (v27 >= LODWORD(v16))
              v29 = (float *)&_VCAudioPlayer_SimulateCrossFade_fadeOutZeroCrossing;
            else
              v29 = (float *)&_VCAudioPlayer_SimulateCrossFade_fadeOutConverging;
            if (v28)
              v30 = (float *)&_VCAudioPlayer_SimulateCrossFade_fadeOutConverging;
            else
              v30 = (float *)&_VCAudioPlayer_SimulateCrossFade_fadeOutDiverging;
            if (v25 < 0)
              v31 = (float *)&g_EncodingFormatiPadWiFi2732x2048;
            else
              v31 = v29;
            if (v25 < 0)
              result = (float *)&_VCAudioPlayer_SimulateCrossFade_fadeOutZeroCrossing;
            else
              result = v30;
            v32 = (uint64_t *)(a3 + 24 * v5);
            v33 = (unint64_t)v32[1] < 0x11 || result > v31;
            if (v33 || (char *)v31 - (char *)result < 33)
              break;
            v34 = 0;
            v35 = *v32;
            do
            {
              *(_WORD *)(v35 + 2 * v34) = (int)(float)((float)(_VCAudioPlayer_SimulateCrossFade_fadeIn[v34]
                                                             * (float)*(__int16 *)(v35 + 2 * v34))
                                                     + (float)((float)v26 * result[v34]));
              ++v34;
            }
            while (v34 != 9);
          }
          if (v4 <= ++v5)
            return result;
        }
        __break(0x5519u);
      }
    }
  }
  return result;
}

uint64_t PacketThread_Create(int a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5, const void *a6)
{
  _DWORD *v11;
  uint64_t v12;
  dispatch_semaphore_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  CFStringRef v18;
  void *v19;
  void *v20;
  CFDictionaryRef v21;
  int v22;
  int ErrorLogLevelForModule;
  uint64_t v24;
  NSObject *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  NSObject *v31;
  uint8_t buf[4];
  uint64_t v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  void *values[2];
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  if (!a6)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        PacketThread_Create_cold_1();
    }
    return 0;
  }
  v11 = malloc_type_calloc(1uLL, 0x58uLL, 0x10A0040E05548B6uLL);
  if (!v11)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        PacketThread_Create_cold_2();
    }
    return 0;
  }
  v12 = (uint64_t)v11;
  v11[13] = a1;
  v11[14] = a2;
  v11[12] = a3;
  *((_BYTE *)v11 + 60) = 1;
  v13 = dispatch_semaphore_create(0);
  *(_QWORD *)(v12 + 8) = v13;
  if (!v13)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        PacketThread_Create_cold_3();
    }
    goto LABEL_33;
  }
  *(_QWORD *)(v12 + 16) = _Block_copy(a6);
  v14 = a3;
  v15 = malloc_type_calloc(a3, 8uLL, 0x2004093837F09uLL);
  *(_QWORD *)(v12 + 24) = v15;
  if (!v15)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 3)
      goto LABEL_33;
    v27 = VRTraceErrorLogLevelToCSTR();
    v25 = *MEMORY[0x1E0CF2758];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      goto LABEL_33;
    *(_DWORD *)buf = 136316162;
    v33 = v27;
    v34 = 2080;
    v35 = "PacketThread_Create";
    v36 = 1024;
    v37 = 206;
    v38 = 2048;
    v39 = v12;
    v40 = 1024;
    LODWORD(v41) = a3;
    v26 = " [%s] %s:%d packetThread=%p Failed to allocate packetPool of %u packets";
    goto LABEL_40;
  }
  if (a3)
  {
    v16 = 0;
    v17 = 8 * v14;
    while (PacketThread_AllocatePacketBuffer(v12, (_QWORD *)(*(_QWORD *)(v12 + 24) + v16), a1, a2))
    {
      v16 += 8;
      if (v17 == v16)
        goto LABEL_9;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() < 3)
      goto LABEL_33;
    v28 = VRTraceErrorLogLevelToCSTR();
    v25 = *MEMORY[0x1E0CF2758];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      goto LABEL_33;
    *(_DWORD *)buf = 136316162;
    v33 = v28;
    v34 = 2080;
    v35 = "PacketThread_Create";
    v36 = 1024;
    v37 = 214;
    v38 = 2048;
    v39 = v12;
    v40 = 1024;
    LODWORD(v41) = a1;
    v26 = " [%s] %s:%d packetThread=%p Failed to allocate buffers of %u";
    goto LABEL_40;
  }
LABEL_9:
  if (!PacketThread_AllocatePacketBuffer(v12, (_QWORD *)(v12 + 32), a1, a2)
    || !PacketThread_AllocatePacketBuffer(v12, (_QWORD *)(v12 + 40), a1, a2))
  {
    goto LABEL_33;
  }
  v18 = CFStringCreateWithFormat(0, 0, CFSTR("com.apple.avconference.packetThread.%s"), a5);
  v19 = (void *)*MEMORY[0x1E0CA52D0];
  keys[0] = *(void **)MEMORY[0x1E0CA52C8];
  keys[1] = v19;
  v20 = (void *)*MEMORY[0x1E0C9AE40];
  values[0] = (void *)v18;
  values[1] = v20;
  v21 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v22 = FigThreadCreate();
  if (v21)
    CFRelease(v21);
  if (v18)
    CFRelease(v18);
  ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (v22)
  {
    if (ErrorLogLevelForModule < 3)
      goto LABEL_33;
    v24 = VRTraceErrorLogLevelToCSTR();
    v25 = *MEMORY[0x1E0CF2758];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      goto LABEL_33;
    *(_DWORD *)buf = 136316162;
    v33 = v24;
    v34 = 2080;
    v35 = "PacketThread_Create";
    v36 = 1024;
    v37 = 242;
    v38 = 2048;
    v39 = v12;
    v40 = 1024;
    LODWORD(v41) = v22;
    v26 = " [%s] %s:%d packetThread=%p Failed to create packet thread %d";
LABEL_40:
    _os_log_error_impl(&dword_1D8A54000, v25, OS_LOG_TYPE_ERROR, v26, buf, 0x2Cu);
LABEL_33:
    PacketThread_Destroy((int *)v12);
    return 0;
  }
  if (ErrorLogLevelForModule >= 7)
  {
    v30 = VRTraceErrorLogLevelToCSTR();
    v31 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136316162;
      v33 = v30;
      v34 = 2080;
      v35 = "PacketThread_Create";
      v36 = 1024;
      v37 = 247;
      v38 = 2048;
      v39 = v12;
      v40 = 2080;
      v41 = a5;
      _os_log_impl(&dword_1D8A54000, v31, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d packetThread=%p PacketThread_Create completed for %s", buf, 0x30u);
    }
  }
  return v12;
}

void PacketThread_Destroy(int *a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  NSObject *v7;
  uint8_t buf[4];
  uint64_t v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *((_BYTE *)a1 + 60) = 0;
    v2 = *((_QWORD *)a1 + 1);
    if (v2)
      dispatch_semaphore_signal(v2);
    if (*(_QWORD *)a1)
    {
      FigThreadJoin();
      *(_QWORD *)a1 = 0;
    }
    v3 = *((_QWORD *)a1 + 1);
    if (v3)
    {
      dispatch_release(v3);
      *((_QWORD *)a1 + 1) = 0;
    }
    if (*((_QWORD *)a1 + 3))
    {
      if (a1[12] >= 1)
      {
        v4 = 0;
        do
          PacketThread_FreePacketBuffer(*(_QWORD **)(*((_QWORD *)a1 + 3) + 8 * v4++));
        while (v4 < a1[12]);
      }
      PacketThread_FreePacketBuffer(*((_QWORD **)a1 + 4));
      PacketThread_FreePacketBuffer(*((_QWORD **)a1 + 5));
      free(*((void **)a1 + 3));
    }
    v5 = (const void *)*((_QWORD *)a1 + 2);
    if (v5)
      _Block_release(v5);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      v6 = VRTraceErrorLogLevelToCSTR();
      v7 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        v9 = v6;
        v10 = 2080;
        v11 = "PacketThread_Destroy";
        v12 = 1024;
        v13 = 344;
        v14 = 2048;
        v15 = a1;
        _os_log_impl(&dword_1D8A54000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d packetThread=%p PacketThread_Destroy complete.", buf, 0x26u);
      }
    }
    free(a1);
  }
}

BOOL PacketThread_AllocatePacketBuffer(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _BOOL8 result;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v8 = malloc_type_calloc(1uLL, 0x20uLL, 0x10900400813CB48uLL);
  if (!v8)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      result = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      PacketThread_AllocatePacketBuffer_cold_1();
    }
    return 0;
  }
  v9 = v8;
  v10 = malloc_type_malloc(a3, 0x28E7425uLL);
  *((_QWORD *)v9 + 1) = v10;
  if (v10)
  {
    v11 = malloc_type_malloc(a4, 0xCC234433uLL);
    *((_QWORD *)v9 + 2) = v11;
    if (v11)
    {
      *a2 = v9;
      return 1;
    }
    free(*((void **)v9 + 1));
    free(v9);
    if ((int)VRTraceGetErrorLogLevelForModule() < 3)
      return 0;
    v16 = VRTraceErrorLogLevelToCSTR();
    v17 = *MEMORY[0x1E0CF2758];
    result = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v18 = 136316162;
    v19 = v16;
    v20 = 2080;
    v21 = "PacketThread_AllocatePacketBuffer";
    v22 = 1024;
    v23 = 170;
    v24 = 2048;
    v25 = a1;
    v26 = 1024;
    v27 = a4;
    v15 = v17;
    goto LABEL_15;
  }
  free(v9);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    v13 = VRTraceErrorLogLevelToCSTR();
    v14 = *MEMORY[0x1E0CF2758];
    result = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    v18 = 136316162;
    v19 = v13;
    v20 = 2080;
    v21 = "PacketThread_AllocatePacketBuffer";
    v22 = 1024;
    v23 = 163;
    v24 = 2048;
    v25 = a1;
    v26 = 1024;
    v27 = a3;
    v15 = v14;
LABEL_15:
    _os_log_error_impl(&dword_1D8A54000, v15, OS_LOG_TYPE_ERROR, " [%s] %s:%d packetThread=%p Failed to allocate buffers of %u", (uint8_t *)&v18, 0x2Cu);
  }
  return 0;
}

uint64_t SendPacketsProc(uint64_t a1)
{
  NSObject *v2;
  id v3;
  int ErrorLogLevelForModule;
  os_log_t *v5;
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  int v9;
  int v10;
  uint64_t v11;
  NSObject *v12;
  char v13;
  _DWORD *v14;
  dispatch_time_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t *v19;
  _DWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  NSObject *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  NSObject *v43;
  uint8_t buf[4];
  uint64_t v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  _BYTE v54[10];
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v2 = *(NSObject **)(a1 + 8);
  dispatch_retain(v2);
  v3 = objc_alloc_init(MEMORY[0x1E0CB34A8]);
  ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  v5 = (os_log_t *)MEMORY[0x1E0CF2758];
  if (ErrorLogLevelForModule >= 8)
  {
    v6 = VRTraceErrorLogLevelToCSTR();
    v7 = *v5;
    v8 = *v5;
    if (*MEMORY[0x1E0CF2748])
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        v46 = v6;
        v47 = 2080;
        v48 = "SendPacketsProc";
        v49 = 1024;
        v50 = 104;
        v51 = 2048;
        v52 = a1;
        _os_log_impl(&dword_1D8A54000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d packetThread=%p SendPacketsProc starting", buf, 0x26u);
      }
    }
    else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      SendPacketsProc_cold_1();
    }
  }
  v9 = proc_setthread_cpupercent();
  if (v9)
  {
    v10 = v9;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      v11 = VRTraceErrorLogLevelToCSTR();
      v12 = *v5;
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316162;
        v46 = v11;
        v47 = 2080;
        v48 = "SendPacketsProc";
        v49 = 1024;
        v50 = 110;
        v51 = 2048;
        v52 = a1;
        v53 = 1024;
        *(_DWORD *)v54 = v10;
        _os_log_error_impl(&dword_1D8A54000, v12, OS_LOG_TYPE_ERROR, " [%s] %s:%d packetThread=%p proc_setthread_cpupercent(50, 20) failed with error %d", buf, 0x2Cu);
      }
    }
  }
  v13 = 0;
  v14 = (_DWORD *)(a1 + 80);
  while (1)
  {
    v15 = dispatch_time(0, 60000000000);
    if (dispatch_semaphore_wait(v2, v15))
    {
      if (*(_BYTE *)(a1 + 61))
        break;
    }
    if (!*(_BYTE *)(a1 + 60))
    {
      v14 = (_DWORD *)(a1 + 72);
      break;
    }
    v17 = *(_DWORD *)(a1 + 64);
    v16 = *(_DWORD *)(a1 + 68);
    if (v16 > v17)
    {
      if (v13)
      {
        ++*(_DWORD *)(a1 + 76);
        if (v17 + (*(_DWORD *)(a1 + 48) >> 1) >= v16)
          v13 = 0;
      }
      else
      {
        v18 = 0;
        do
        {
          v19 = (unint64_t *)(*(_QWORD *)(a1 + 24)
                                   + 8 * (*(_DWORD *)(a1 + 64) % *(_DWORD *)(a1 + 48)));
          v20 = (_DWORD *)*v19;
          v21 = *(_QWORD *)(a1 + 40);
          while (1)
          {
            v22 = __ldxr(v19);
            if ((_DWORD *)v22 != v20)
              break;
            if (!__stxr(v21, v19))
            {
              v23 = 1;
              goto LABEL_27;
            }
          }
          v23 = 0;
          __clrex();
        }
        while (v18++ < 2);
LABEL_27:
        if (!v23)
        {
          ++*(_DWORD *)(a1 + 84);
          if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
          {
            v26 = VRTraceErrorLogLevelToCSTR();
            v27 = *v5;
            v13 = 0;
            if (!os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
              goto LABEL_43;
            v28 = *(_DWORD *)(a1 + 64);
            v29 = *(_DWORD *)(a1 + 68);
            v30 = *(_DWORD *)(a1 + 72);
            v31 = *(_DWORD *)(a1 + 76);
            v32 = *(_DWORD *)(a1 + 80);
            v33 = *(_DWORD *)(a1 + 84);
            *(_DWORD *)buf = 136317442;
            v46 = v26;
            v47 = 2080;
            v48 = "_PacketThread_PullPacket";
            v49 = 1024;
            v50 = 86;
            v51 = 2048;
            v52 = a1;
            v53 = 1024;
            *(_DWORD *)v54 = v28;
            *(_WORD *)&v54[4] = 1024;
            *(_DWORD *)&v54[6] = v29;
            v55 = 1024;
            v56 = v32;
            v57 = 1024;
            v58 = v30;
            v59 = 1024;
            v60 = v31;
            v61 = 1024;
            v62 = v33;
            _os_log_impl(&dword_1D8A54000, v27, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d packetThread=%p SendPacketsProc failed to fetch a packet. sent=%u stored=%u, dropping packets. packetsDropped=[S=%u, NR=%u, C=%u, F=%u]", buf, 0x4Au);
          }
          goto LABEL_42;
        }
        *(_QWORD *)(a1 + 40) = v20;
        if (*(_DWORD *)(a1 + 64) >= *v20)
        {
          if (*(_BYTE *)(a1 + 61))
            (*(void (**)(void))(*(_QWORD *)(a1 + 16) + 16))();
LABEL_42:
          v13 = 0;
          goto LABEL_43;
        }
        while (1)
        {
          v25 = __ldxr(v19);
          if (v25 != v21)
            break;
          if (!__stxr((unint64_t)v20, v19))
          {
            *(_QWORD *)(a1 + 40) = v21;
            goto LABEL_38;
          }
        }
        __clrex();
LABEL_38:
        ++*(_DWORD *)(a1 + 76);
        if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
        {
          v34 = VRTraceErrorLogLevelToCSTR();
          v35 = *v5;
          if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
          {
            v36 = *(_DWORD *)(a1 + 64);
            v37 = *(_DWORD *)(a1 + 68);
            v38 = *(_DWORD *)(a1 + 72);
            v39 = *(_DWORD *)(a1 + 76);
            v40 = *(_DWORD *)(a1 + 80);
            v41 = *(_DWORD *)(a1 + 84);
            *(_DWORD *)buf = 136317442;
            v46 = v34;
            v47 = 2080;
            v48 = "_PacketThread_PullPacket";
            v49 = 1024;
            v50 = 79;
            v51 = 2048;
            v52 = a1;
            v53 = 1024;
            *(_DWORD *)v54 = v36;
            *(_WORD *)&v54[4] = 1024;
            *(_DWORD *)&v54[6] = v37;
            v55 = 1024;
            v56 = v40;
            v57 = 1024;
            v58 = v38;
            v59 = 1024;
            v60 = v39;
            v61 = 1024;
            v62 = v41;
            _os_log_impl(&dword_1D8A54000, v35, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d packetThread=%p SendPacketsProc got lapped! sent=%u stored=%u, dropping packets. packetsDropped=[S=%u, NR=%u, C=%u, F=%u]", buf, 0x4Au);
          }
        }
        v13 = 1;
      }
LABEL_43:
      ++*(_DWORD *)(a1 + 64);
    }
  }
  ++*v14;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    v42 = VRTraceErrorLogLevelToCSTR();
    v43 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136316162;
      v46 = v42;
      v47 = 2080;
      v48 = "SendPacketsProc";
      v49 = 1024;
      v50 = 129;
      v51 = 2048;
      v52 = a1;
      v53 = 2048;
      *(_QWORD *)v54 = 0;
      _os_log_impl(&dword_1D8A54000, v43, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d packetThread=%p SendPacketsProc ending. dispatch_semaphore_wait returned %ld", buf, 0x30u);
    }
  }

  dispatch_release(v2);
  return 0;
}

void *_PacketThread_CopyToPacket(uint64_t a1, const void *a2, void *__src, size_t __n, uint64_t a5)
{
  int v6;
  void *result;

  v6 = __n;
  *(_DWORD *)a5 = *(_DWORD *)(a1 + 68);
  memcpy(*(void **)(a5 + 16), __src, __n);
  result = memcpy(*(void **)(a5 + 8), a2, *(unsigned int *)(a1 + 52));
  *(_DWORD *)(a5 + 24) = v6;
  return result;
}

uint64_t _PacketThread_StorePacket(uint64_t a1, unint64_t a2)
{
  unsigned int v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t result;
  uint64_t v10;
  NSObject *v11;
  _BOOL4 v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  uint64_t v39;

  v3 = 0;
  v39 = *MEMORY[0x1E0C80C00];
  do
  {
    v4 = (unint64_t *)(*(_QWORD *)(a1 + 24) + 8 * (*(_DWORD *)(a1 + 68) % *(_DWORD *)(a1 + 48)));
    v5 = *v4;
    while (1)
    {
      v6 = __ldaxr(v4);
      if (v6 != v5)
        break;
      if (!__stlxr(a2, v4))
      {
        v7 = 1;
        goto LABEL_8;
      }
    }
    v7 = 0;
    __clrex();
  }
  while (v3++ < 2);
LABEL_8:
  if (v7)
  {
    *(_QWORD *)(a1 + 32) = v5;
    ++*(_DWORD *)(a1 + 68);
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 8));
    return 1;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    v10 = VRTraceErrorLogLevelToCSTR();
    v11 = *MEMORY[0x1E0CF2758];
    v12 = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v12)
      return result;
    v13 = *(_DWORD *)(a1 + 64);
    v14 = *(_DWORD *)(a1 + 68);
    v15 = *(_DWORD *)(a1 + 72);
    v16 = *(_DWORD *)(a1 + 76);
    v17 = *(_DWORD *)(a1 + 80);
    v18 = *(_DWORD *)(a1 + 84);
    v19 = 136317442;
    v20 = v10;
    v21 = 2080;
    v22 = "_PacketThread_StorePacket";
    v23 = 1024;
    v24 = 280;
    v25 = 2048;
    v26 = a1;
    v27 = 1024;
    v28 = v13;
    v29 = 1024;
    v30 = v14;
    v31 = 1024;
    v32 = v17;
    v33 = 1024;
    v34 = v15;
    v35 = 1024;
    v36 = v16;
    v37 = 1024;
    v38 = v18;
    _os_log_impl(&dword_1D8A54000, v11, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d IOProc: packetThread=%p _PacketThread_StorePacket failed to store a buffer. packetsSent=%u packetsStored=%u packetsDropped=[S=%u, NR=%u, C=%u, F=%u]", (uint8_t *)&v19, 0x4Au);
  }
  return 0;
}

uint64_t PacketThread_SendSampleBuffer(uint64_t a1, const void *a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  _PacketThread_CopyToPacket(a1, a2, 0, 0, v3);
  VCAudioBufferList_ResetDataPointers(*(_QWORD *)(v3 + 8));
  return _PacketThread_StorePacket(a1, v3);
}

uint64_t PacketThread_SendPacket(uint64_t a1, const void *a2, void *a3, size_t __n)
{
  int v4;
  uint64_t v6;
  NSObject *v7;
  unint64_t v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v4 = __n;
  v20 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 56) >= __n)
  {
    v9 = *(_QWORD *)(a1 + 32);
    _PacketThread_CopyToPacket(a1, a2, a3, __n, v9);
    return _PacketThread_StorePacket(a1, v9);
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      v6 = VRTraceErrorLogLevelToCSTR();
      v7 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      {
        v10 = 136316162;
        v11 = v6;
        v12 = 2080;
        v13 = "PacketThread_SendPacket";
        v14 = 1024;
        v15 = 304;
        v16 = 2048;
        v17 = a1;
        v18 = 1024;
        v19 = v4;
        _os_log_error_impl(&dword_1D8A54000, v7, OS_LOG_TYPE_ERROR, " [%s] %s:%d packetThread=%p PacketThread_SendPacket called with too many bytes %d", (uint8_t *)&v10, 0x2Cu);
      }
    }
    return 0;
  }
}

__n128 PacketThread_Statistics(__n128 *a1, __n128 *a2)
{
  __n128 result;

  if (a1)
  {
    if (a2)
    {
      result = a1[4];
      a2[1].n128_u64[0] = a1[5].n128_u64[0];
      *a2 = result;
    }
  }
  return result;
}

void PacketThread_FreePacketBuffer(_QWORD *a1)
{
  void *v2;
  void *v3;

  if (a1)
  {
    v2 = (void *)a1[1];
    if (v2)
      free(v2);
    v3 = (void *)a1[2];
    if (v3)
      free(v3);
    free(a1);
  }
}

uint64_t PacketThread_ReceiverIsReady(uint64_t result)
{
  if (result)
    *(_BYTE *)(result + 61) = 1;
  return result;
}

uint64_t VCDefaults_DefaultDumpEnablementValue()
{
  if ((VRTraceIsInternalOSInstalled() & 1) != 0)
    return 1;
  else
    return VRTraceIsSeedOSInstalled();
}

double VCDefaults_GetInternalOSDoubleValueForKey(const __CFString *a1, double a2)
{
  if (VRTraceIsInternalOSInstalled())
    return VCDefaults_GetDoubleValueForKey(a1, a2);
  else
    return a2;
}

BOOL VCDefaults_GetManagedBoolValueForKey(const __CFString *a1, _BOOL8 a2)
{
  if (((VRTraceIsInternalOSInstalled() & 1) != 0
     || CFPreferencesAppValueIsForced(a1, CFSTR("com.apple.VideoConference")))
    && VRTraceIsInternalOSInstalled())
  {
    return _VCDefaults_GetBoolValueForKey(a1, a2, 1);
  }
  else
  {
    return a2;
  }
}

const void *VCDefaults_CopyDictionaryValueForKey(const __CFString *a1)
{
  CFTypeID TypeID;

  TypeID = CFDictionaryGetTypeID();
  return VCDefaults_CopyValueForKey(a1, TypeID);
}

uint64_t VCDefaults_GetBoolValueForKeyQuiet(const __CFString *a1, unsigned int a2)
{
  _BOOL4 v3;
  Boolean keyExistsAndHasValidFormat;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  keyExistsAndHasValidFormat = -86;
  v3 = CFPreferencesGetAppBooleanValue(a1, CFSTR("com.apple.VideoConference"), &keyExistsAndHasValidFormat) != 0;
  if (keyExistsAndHasValidFormat)
    return v3;
  else
    return a2;
}

BOOL VCTransportStreamIsOfKindVTP(uint64_t a1)
{
  return VCFBOUtils_IsKindOfClass(a1, (uint64_t)&kVCTransportStreamVTPVTable);
}

uint64_t VCTransportStreamVTPCreate(const __CFAllocator *a1, int a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t ClassID;
  uint64_t v9;
  uint64_t DerivedStorage;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  int v15;
  int v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  CFTypeRef cf;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  CFTypeRef v29;
  __int16 v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (!a4)
  {
    v11 = 2150760449;
    if ((int)VRTraceGetErrorLogLevelForModule() < 3)
      return v11;
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCTransportStreamVTPCreate_cold_1();
    goto LABEL_35;
  }
  if (a2 == -1)
  {
    v11 = 2150760490;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      {
        VCTransportStreamVTPCreate_cold_2();
        v11 = 2150760490;
      }
    }
    goto LABEL_35;
  }
  ClassID = VCTransportStreamGetClassID();
  v9 = VCFBOUtils_ObjectCreate((uint64_t)a1, &cf, (uint64_t)&kVCTransportStreamVTPVTable, ClassID, 50);
  if ((v9 & 0x80000000) != 0)
  {
    v11 = v9;
    goto LABEL_35;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  v11 = VCTransportStreamCommonInitialize(DerivedStorage, a3, (uint64_t)cf);
  if ((v11 & 0x80000000) != 0)
    goto LABEL_35;
  *(_DWORD *)(DerivedStorage + 48) = a2;
  *(_QWORD *)(DerivedStorage + 56) = CFNumberCreate(a1, kCFNumberIntType, (const void *)(DerivedStorage + 48));
  *(_DWORD *)(DerivedStorage + 64) = 0;
  *(_DWORD *)(DerivedStorage + 196) = -1;
  *(_QWORD *)(DerivedStorage + 208) = *MEMORY[0x1E0C9AE40];
  VTP_GetTransportSessionID(a2, (_DWORD *)(DerivedStorage + 200));
  if (!*(_DWORD *)(DerivedStorage + 200) || (int)VRTraceGetErrorLogLevelForModule() < 8)
    goto LABEL_12;
  v12 = VRTraceErrorLogLevelToCSTR();
  v13 = *MEMORY[0x1E0CF2758];
  v14 = *MEMORY[0x1E0CF2758];
  if (*MEMORY[0x1E0CF2748])
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(_DWORD *)(DerivedStorage + 200);
      *(_DWORD *)buf = 136315906;
      v23 = v12;
      v24 = 2080;
      v25 = "VCTransportStreamVTPCreate";
      v26 = 1024;
      v27 = 134;
      v28 = 1024;
      LODWORD(v29) = v15;
      _os_log_impl(&dword_1D8A54000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d transportSessionID=%u", buf, 0x22u);
      if (!a3)
        goto LABEL_14;
      goto LABEL_13;
    }
LABEL_12:
    if (!a3)
    {
LABEL_14:
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        v17 = VRTraceErrorLogLevelToCSTR();
        v18 = *MEMORY[0x1E0CF2758];
        v19 = *MEMORY[0x1E0CF2758];
        if (*MEMORY[0x1E0CF2748])
        {
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136316418;
            v23 = v17;
            v24 = 2080;
            v25 = "VCTransportStreamVTPCreate";
            v26 = 1024;
            v27 = 143;
            v28 = 2048;
            v29 = cf;
            v30 = 1024;
            v31 = a2;
            v32 = 2112;
            v33 = a3;
            _os_log_impl(&dword_1D8A54000, v18, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] vfd = %d, options = %@", buf, 0x36u);
          }
        }
        else if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136316418;
          v23 = v17;
          v24 = 2080;
          v25 = "VCTransportStreamVTPCreate";
          v26 = 1024;
          v27 = 143;
          v28 = 2048;
          v29 = cf;
          v30 = 1024;
          v31 = a2;
          v32 = 2112;
          v33 = a3;
          _os_log_debug_impl(&dword_1D8A54000, v18, OS_LOG_TYPE_DEBUG, " [%s] %s:%d [%p] vfd = %d, options = %@", buf, 0x36u);
        }
      }
      *a4 = cf;
      return v11;
    }
    goto LABEL_13;
  }
  if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    goto LABEL_12;
  VCTransportStreamVTPCreate_cold_4();
  if (!a3)
    goto LABEL_14;
LABEL_13:
  *(_DWORD *)buf = 2;
  FigCFDictionaryGetInt32IfPresent();
  v16 = VCGetVTPTrafficClassForVCTrafficClass(*(int *)buf);
  *(_DWORD *)(DerivedStorage + 64) = v16;
  if (v16 != -1)
    goto LABEL_14;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCTransportStreamVTPCreate_cold_3();
  }
  v11 = 2150760449;
LABEL_35:
  if (cf)
    CFRelease(cf);
  return v11;
}

void _VCTransportStreamVTPFinalize(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  NSObject *v4;
  int v5;
  const void *v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    v3 = VRTraceErrorLogLevelToCSTR();
    v4 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      v7 = 136315906;
      v8 = v3;
      v9 = 2080;
      v10 = "_VCTransportStreamVTPFinalize";
      v11 = 1024;
      v12 = 157;
      v13 = 2048;
      v14 = a1;
      _os_log_impl(&dword_1D8A54000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p]", (uint8_t *)&v7, 0x26u);
    }
  }
  VCTransportStreamCommonFinalize((uint64_t *)DerivedStorage);
  v5 = *(_DWORD *)(DerivedStorage + 48);
  if (v5 != -1)
    VTP_Close(v5);
  v6 = *(const void **)(DerivedStorage + 56);
  if (v6)
    CFRelease(v6);
}

uint64_t _VCTransportStreamVTPCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, const void **a4)
{
  uint64_t DerivedStorage;
  void *v8;
  uint64_t v9;
  int v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  const void *v24;
  __int16 v25;
  const void **v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v9 = 2150760449;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        _VCTransportStreamVTPCopyProperty_cold_1();
    }
    return v9;
  }
  if (!a2 || !a4)
  {
    v9 = 2150760449;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      v15 = VRTraceErrorLogLevelToCSTR();
      v16 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      {
        v17 = 136316162;
        v18 = v15;
        v19 = 2080;
        v20 = "_VCTransportStreamVTPCopyProperty";
        v21 = 1024;
        v22 = 171;
        v23 = 2112;
        v24 = a2;
        v25 = 2112;
        v26 = a4;
        _os_log_error_impl(&dword_1D8A54000, v16, OS_LOG_TYPE_ERROR, " [%s] %s:%d Property name '%@' and property value out '%@' must not be NULL", (uint8_t *)&v17, 0x30u);
      }
    }
    return v9;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, CFSTR("UnderlyingVFD")))
  {
    v8 = (void *)CFRetain(*(CFTypeRef *)(DerivedStorage + 56));
LABEL_8:
    v9 = 0;
    *a4 = v8;
    return v9;
  }
  if (CFEqual(a2, CFSTR("TrafficClass")))
  {
    v17 = VCGetVCTrafficClassForVTPTrafficClass(*(_DWORD *)(DerivedStorage + 64));
    v8 = CFNumberCreate(a3, kCFNumberIntType, &v17);
    goto LABEL_8;
  }
  if (CFEqual(a2, CFSTR("PreferredSendQueue")))
  {
    v11 = VTP_CopyPreferredSendQueue(*(_DWORD *)(DerivedStorage + 48), a4);
    if (!v11)
      return 0;
    v12 = v11;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      v13 = VRTraceErrorLogLevelToCSTR();
      v14 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v17 = 136315906;
        v18 = v13;
        v19 = 2080;
        v20 = "_VCTransportStreamVTPCopyProperty";
        v21 = 1024;
        v22 = 183;
        v23 = 1024;
        LODWORD(v24) = v12;
        _os_log_impl(&dword_1D8A54000, v14, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VTP_GetPreferredSendQueue failed - %d", (uint8_t *)&v17, 0x22u);
      }
    }
    return *__error() | 0xC0320000;
  }
  if (CFEqual(a2, CFSTR("IsIPv6")))
    return _VCTransportStreamVTPCopyIsIPv6(DerivedStorage, a4);
  if (CFEqual(a2, CFSTR("ReceiveHopLimitEnabled")))
    return _VCTransportStreamVTPCopyReceiveHopLimitEnabled(DerivedStorage, a4);
  return VCTransportStreamCommonCopyProperty(DerivedStorage, a2, (uint64_t)a3, a4);
}

uint64_t _VCTransportStreamVTPSetProperty(uint64_t a1, const void *a2, const __CFBoolean *a3)
{
  uint64_t DerivedStorage;
  uint64_t IsIPv6;
  int v7;
  int v8;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  CFBooleanRef BOOLean;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  const void *v23;
  __int16 v24;
  const __CFBoolean *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2 && a3)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (CFEqual(a2, CFSTR("ReceiveHopLimitEnabled")))
      {
        if (DerivedStorage)
        {
          BOOLean = 0;
          IsIPv6 = _VCTransportStreamVTPCopyIsIPv6(DerivedStorage, (const void **)&BOOLean);
          if ((_DWORD)IsIPv6 || !BOOLean)
          {
            if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
            {
              v12 = VRTraceErrorLogLevelToCSTR();
              v13 = *MEMORY[0x1E0CF2758];
              v14 = *MEMORY[0x1E0CF2758];
              if (*MEMORY[0x1E0CF2748])
              {
                if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136315906;
                  v17 = v12;
                  v18 = 2080;
                  v19 = "_VCTransportStreamVTPSetReceiveHopLimitEnabled";
                  v20 = 1024;
                  v21 = 223;
                  v22 = 1024;
                  LODWORD(v23) = IsIPv6;
                  _os_log_impl(&dword_1D8A54000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d _VCTransportStreamVTPCopyIsIPv6 failed, result=0x%08x", buf, 0x22u);
                }
              }
              else if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
              {
                _VCTransportStreamVTPSetProperty_cold_4();
              }
            }
          }
          else
          {
            *(_DWORD *)buf = CFBooleanGetValue(a3) != 0;
            if (CFBooleanGetValue(BOOLean))
            {
              v7 = 41;
              v8 = 37;
            }
            else
            {
              v7 = 0;
              v8 = 24;
            }
            IsIPv6 = VTP_Setsockopt(*(_DWORD *)(DerivedStorage + 48), v7, v8, buf, 4u);
            CFRelease(BOOLean);
            if ((_DWORD)IsIPv6)
            {
              IsIPv6 = *__error() | 0xC0010000;
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
                  _VCTransportStreamVTPSetProperty_cold_5();
              }
            }
            else
            {
              *(_QWORD *)(DerivedStorage + 208) = a3;
            }
          }
        }
        else
        {
          IsIPv6 = 2150760449;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
              _VCTransportStreamVTPSetProperty_cold_3();
          }
        }
      }
      else
      {
        IsIPv6 = 2150760464;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          {
            _VCTransportStreamVTPSetProperty_cold_2();
            return 2150760464;
          }
        }
      }
    }
    else
    {
      IsIPv6 = 2150760449;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        v10 = VRTraceErrorLogLevelToCSTR();
        v11 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316162;
          v17 = v10;
          v18 = 2080;
          v19 = "_VCTransportStreamVTPSetProperty";
          v20 = 1024;
          v21 = 201;
          v22 = 2112;
          v23 = a2;
          v24 = 2112;
          v25 = a3;
          _os_log_error_impl(&dword_1D8A54000, v11, OS_LOG_TYPE_ERROR, " [%s] %s:%d propertyKey=%@ and propertyValue=%@ must not be NULL", buf, 0x30u);
        }
      }
    }
  }
  else
  {
    IsIPv6 = 2150760449;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        _VCTransportStreamVTPSetProperty_cold_1();
    }
  }
  return IsIPv6;
}

uint64_t _VCTransportStreamVTPCopyIsIPv6(uint64_t a1, const void **a2)
{
  sockaddr v3;
  int v4;
  const void **v5;
  const void *v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  socklen_t v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  sockaddr v22[8];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      *(_QWORD *)&v3.sa_len = 0xAAAAAAAAAAAAAAAALL;
      *(_QWORD *)&v3.sa_data[6] = 0xAAAAAAAAAAAAAAAALL;
      v22[6] = v3;
      v22[7] = v3;
      v22[5] = v3;
      v22[3] = v3;
      v22[4] = v3;
      v22[1] = v3;
      v22[2] = v3;
      v22[0] = v3;
      v13 = 128;
      v4 = VTP_Getsockname(*(_DWORD *)(a1 + 48), v22, &v13);
      if (v4)
      {
        v9 = v4;
        v7 = *__error() | 0xC0320000;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
        {
          v10 = VRTraceErrorLogLevelToCSTR();
          v11 = *MEMORY[0x1E0CF2758];
          v12 = *MEMORY[0x1E0CF2758];
          if (*MEMORY[0x1E0CF2748])
          {
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315906;
              v15 = v10;
              v16 = 2080;
              v17 = "_VCTransportStreamVTPCopyIsIPv6";
              v18 = 1024;
              v19 = 252;
              v20 = 1024;
              v21 = v9;
              _os_log_impl(&dword_1D8A54000, v11, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VTP_Getsockname failed - %d", buf, 0x22u);
            }
          }
          else if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
          {
            _VCTransportStreamVTPCopyIsIPv6_cold_3();
          }
        }
      }
      else
      {
        if (v22[0].sa_family == 30)
          v5 = (const void **)MEMORY[0x1E0C9AE50];
        else
          v5 = (const void **)MEMORY[0x1E0C9AE40];
        v6 = *v5;
        *a2 = *v5;
        CFRetain(v6);
        return 0;
      }
    }
    else
    {
      v7 = 2150760449;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          _VCTransportStreamVTPCopyIsIPv6_cold_2();
      }
    }
  }
  else
  {
    v7 = 2150760449;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        _VCTransportStreamVTPCopyIsIPv6_cold_1();
    }
  }
  return v7;
}

uint64_t _VCTransportStreamVTPCopyReceiveHopLimitEnabled(uint64_t a1, _QWORD *a2)
{
  const void *v2;
  uint64_t v3;

  if (a1)
  {
    if (a2)
    {
      v2 = *(const void **)(a1 + 208);
      *a2 = v2;
      CFRetain(v2);
      return 0;
    }
    else
    {
      v3 = 2150760449;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          _VCTransportStreamVTPCopyReceiveHopLimitEnabled_cold_2();
      }
    }
  }
  else
  {
    v3 = 2150760449;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        _VCTransportStreamVTPCopyReceiveHopLimitEnabled_cold_1();
    }
  }
  return v3;
}

uint64_t _VCTransportStreamVTPSetSendFailedHandler(uint64_t a1, void *a2, NSObject *a3)
{
  uint64_t DerivedStorage;

  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    return VCTransportStreamCommonSetSendFailedHandler(DerivedStorage, a2, a3);
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        _VCTransportStreamVTPSetSendFailedHandler_cold_1();
    }
    return 2150760449;
  }
}

uint64_t _VCTransportStreamVTPSend(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t DerivedStorage;
  _DWORD *v4;
  size_t DataLength;
  OSStatus v6;
  char v7;
  int v8;
  char v9;
  char v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  int v15;
  int v16;
  char *returnedPointerOut;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  size_t v31;
  _OWORD v32[10];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE __b[1472];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = a2;
    if (a2)
    {
      DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (*(_DWORD *)(DerivedStorage + 8) == 2)
      {
        v4 = (_DWORD *)DerivedStorage;
        while (1)
        {
          if (!*(_QWORD *)v2)
          {
            v2 = 2150760449;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
                _VCTransportStreamVTPSend_cold_3();
            }
            return v2;
          }
          if (*(unsigned __int8 *)(v2 + 34) >= 0xDu)
          {
            v2 = 2150760449;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
                _VCTransportStreamVTPSend_cold_4();
            }
            return v2;
          }
          DataLength = CMBlockBufferGetDataLength(*(CMBlockBufferRef *)v2);
          if (DataLength >= 0x5C1)
          {
            v2 = 2150760449;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
                _VCTransportStreamVTPSend_cold_5();
            }
            return v2;
          }
          memset(__b, 170, sizeof(__b));
          returnedPointerOut = 0;
          v6 = CMBlockBufferAccessDataBytes(*(CMBlockBufferRef *)v2, 0, DataLength, __b, &returnedPointerOut);
          if (v6)
          {
            if (v6 >= 0)
              v11 = v6;
            else
              v11 = -v6;
            v2 = v11 | 0xD0320000;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
                _VCTransportStreamVTPSend_cold_6();
            }
            return v2;
          }
          v41 = 0u;
          v42 = 0u;
          v39 = 0u;
          v40 = 0u;
          v37 = 0u;
          v38 = 0u;
          v35 = 0u;
          v36 = 0u;
          v33 = 0u;
          v34 = 0u;
          memset(v32, 0, sizeof(v32));
          VTP_SetPktTag((uint64_t)v32, 0, *(_QWORD *)(v2 + 56));
          VTP_SetPktTag((uint64_t)v32, 1u, *(_QWORD *)(v2 + 64));
          VTP_SetPktTag((uint64_t)v32, 2u, *(_QWORD *)(v2 + 72));
          VTP_SetPktTag((uint64_t)v32, 3u, *(_QWORD *)(v2 + 80));
          *(_WORD *)((char *)&v33 + 9) = *(_WORD *)(v2 + 152);
          LODWORD(v41) = *(_DWORD *)(v2 + 132);
          DWORD2(v32[0]) = v4[50];
          BYTE8(v42) = *(_BYTE *)(v2 + 49);
          uuid_copy((unsigned __int8 *)&v41 + 4, (const unsigned __int8 *)(v2 + 136));
          v7 = *(_BYTE *)(v2 + 35);
          v8 = *(unsigned __int8 *)(v2 + 34);
          v9 = *(_BYTE *)(v2 + 36);
          if (v7 || *(_BYTE *)(v2 + 34))
            goto LABEL_13;
          if (*(_BYTE *)(v2 + 36))
            break;
          BYTE8(v33) = *(_BYTE *)(v2 + 48);
          if (!BYTE8(v33))
            goto LABEL_16;
          v8 = 0;
          v9 = 0;
          v10 = 1;
LABEL_14:
          BYTE12(v35) = v7;
          BYTE14(v35) = v9;
          *(_QWORD *)&v36 = *(_QWORD *)(v2 + 40);
          BYTE9(v37) = v10;
          BYTE8(v35) = v8;
          if (v8)
            __memcpy_chk();
LABEL_16:
          if (VTP_Send(v4[12], returnedPointerOut, DataLength, v4[16], (uint64_t)v32) == -1)
          {
            v2 = *__error() | 0xC0320000;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              v12 = VRTraceErrorLogLevelToCSTR();
              v13 = *MEMORY[0x1E0CF2758];
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
              {
                v15 = *__error();
                v16 = v4[12];
                *(_DWORD *)buf = 136316674;
                v19 = v12;
                v20 = 2080;
                v21 = "_VCTransportStreamVTPSendOnePacket";
                v22 = 1024;
                v23 = 345;
                v24 = 1024;
                v25 = v15;
                v26 = 1024;
                v27 = v16;
                v28 = 1024;
                v29 = DWORD2(v32[0]);
                v30 = 2048;
                v31 = DataLength;
                _os_log_error_impl(&dword_1D8A54000, v13, OS_LOG_TYPE_ERROR, " [%s] %s:%d VTP_Send failed with errno=%d vfd=%d localCallID=%d, dataLength=%zu", buf, 0x38u);
              }
            }
            return v2;
          }
          v2 = *(_QWORD *)(v2 + 160);
          if (!v2)
            return v2;
        }
        v9 = 1;
LABEL_13:
        BYTE8(v33) = 1;
        v10 = *(_BYTE *)(v2 + 48);
        goto LABEL_14;
      }
      if ((int)VRTraceGetErrorLogLevelForModule() < 3)
      {
        return 2150760509;
      }
      else
      {
        VRTraceErrorLogLevelToCSTR();
        v2 = 2150760509;
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          _VCTransportStreamVTPSend_cold_7();
      }
    }
    else
    {
      v2 = 2150760449;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          _VCTransportStreamVTPSend_cold_2();
      }
    }
  }
  else
  {
    v2 = 2150760449;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        _VCTransportStreamVTPSend_cold_1();
    }
  }
  return v2;
}

uint64_t _VCTransportStreamVTPSetPacketFilter(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  uint64_t v10;
  uint64_t v11;
  int Count;
  int v13;
  char *v14;
  void *v15;
  CFIndex v16;
  char *v17;
  const __CFNumber *ValueAtIndex;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, const __CFString *, _QWORD, CFArrayRef *);
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t CMBaseObject;
  uint64_t (*v27)(uint64_t, const __CFString *, _QWORD, _BYTE *);
  uint64_t v28;
  NSObject *v29;
  CFArrayRef v30;
  const void *v31;
  uint64_t v33;
  NSObject *v34;
  int valuePtr;
  CFArrayRef theArray;
  _BYTE number[12];
  __int16 v38;
  const char *v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v11 = 2150760449;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        _VCTransportStreamVTPSetPacketFilter_cold_1();
    }
    return v11;
  }
  if (!a2)
  {
    v11 = 2150760449;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        _VCTransportStreamVTPSetPacketFilter_cold_2();
    }
    return v11;
  }
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 8) != 1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() < 3)
      return 2150760509;
    VRTraceErrorLogLevelToCSTR();
    v11 = 2150760509;
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      _VCTransportStreamVTPSetPacketFilter_cold_16();
    return v11;
  }
  v4 = DerivedStorage;
  if (!VCPacketFilterIsOfKindRTP((uint64_t)a2))
  {
    if (!VCPacketFilterIsOfKindRTCP((uint64_t)a2))
    {
      if (VCPacketFilterIsOfKindBasebandNotification((uint64_t)a2))
      {
        if (VTP_SetPktType(*(_DWORD *)(v4 + 48), 256) != -1)
        {
          v25 = *(_DWORD *)(v4 + 48);
          *(_QWORD *)number = 0;
          if (v25 == -1)
          {
            v11 = 2150760449;
            if ((int)VRTraceGetErrorLogLevelForModule() <= 2)
              return v11;
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
              _VCTransportStreamVTPSetPacketFilter_cold_12();
          }
          else
          {
            CMBaseObject = VCPacketFilterGetCMBaseObject(a2, v24);
            v27 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, _BYTE *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
            if (v27)
            {
              v11 = v27(CMBaseObject, CFSTR("CellularUniqueTag"), *MEMORY[0x1E0C9AE00], number);
              if ((v11 & 0x80000000) == 0)
              {
                if (*(_QWORD *)number)
                {
                  LODWORD(theArray) = 0;
                  CFNumberGetValue(*(CFNumberRef *)number, kCFNumberSInt32Type, &theArray);
                  if (VTP_SetCellularUniqueTag(v25, (int)theArray) == -1)
                  {
                    v11 = *__error() | 0xC0320000;
                    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                    {
                      VRTraceErrorLogLevelToCSTR();
                      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
                        _VCTransportStreamVTPSetPacketFilter_cold_14();
                    }
                  }
                }
                else
                {
                  v11 = 2150760449;
                  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                  {
                    VRTraceErrorLogLevelToCSTR();
                    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
                      _VCTransportStreamVTPSetPacketFilter_cold_13();
                  }
                }
              }
            }
            else
            {
              v11 = 4294954514;
            }
          }
          v30 = *(CFArrayRef *)number;
          if (!*(_QWORD *)number)
            goto LABEL_48;
          goto LABEL_47;
        }
        v11 = *__error() | 0xC0320000;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            _VCTransportStreamVTPSetPacketFilter_cold_11();
        }
      }
      else
      {
        v11 = 2150760449;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            _VCTransportStreamVTPSetPacketFilter_cold_15();
        }
      }
      return v11;
    }
    if (VTP_SetPktType(*(_DWORD *)(v4 + 48), 192) == -1)
    {
      v11 = *__error() | 0xC0320000;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          _VCTransportStreamVTPSetPacketFilter_cold_8();
      }
      return v11;
    }
    v5 = _VCTransportStreamVTPSetRemoteSSRCOnVFD(*(_DWORD *)(v4 + 48), (uint64_t)a2, (uint64_t)CFSTR("RTCPRemoteSSRC"));
    if ((v5 & 0x80000000) != 0)
      return v5;
    v20 = *(_DWORD *)(v4 + 48);
    theArray = 0;
    if (v20 == -1)
    {
      v11 = 2150760449;
      if ((int)VRTraceGetErrorLogLevelForModule() <= 2)
        return v11;
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        _VCTransportStreamVTPSetPacketFilter_cold_9();
    }
    else
    {
      v21 = VCPacketFilterGetCMBaseObject(a2, v19);
      v22 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                        + 48);
      if (v22
        && (v23 = v22(v21, CFSTR("RTCPLocalSSRC"), *MEMORY[0x1E0C9AE00], &theArray), (v23 & 0x80000000) == 0)
        && (v11 = v23, theArray))
      {
        valuePtr = 0;
        CFNumberGetValue(theArray, kCFNumberSInt32Type, &valuePtr);
        if (VTP_SetLocalSSRC(v20, valuePtr) == -1)
        {
          v11 = *__error() | 0xC0320000;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
              _VCTransportStreamVTPSetPacketFilter_cold_10();
          }
        }
      }
      else
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          v33 = VRTraceErrorLogLevelToCSTR();
          v34 = *MEMORY[0x1E0CF2758];
          v11 = 0;
          if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
            goto LABEL_46;
          *(_DWORD *)number = 136315650;
          *(_QWORD *)&number[4] = v33;
          v38 = 2080;
          v39 = "_VCTransportStreamVTPSetLocalSSRCOnVFD";
          v40 = 1024;
          v41 = 558;
          _os_log_impl(&dword_1D8A54000, v34, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Local SSRC not set on filter", number, 0x1Cu);
        }
        v11 = 0;
      }
    }
LABEL_46:
    v30 = theArray;
    if (!theArray)
    {
LABEL_48:
      if ((v11 & 0x80000000) == 0)
      {
        v31 = *(const void **)(v4 + 40);
        *(_QWORD *)(v4 + 40) = a2;
        CFRetain(a2);
        if (v31)
          CFRelease(v31);
      }
      return v11;
    }
LABEL_47:
    CFRelease(v30);
    goto LABEL_48;
  }
  if (VTP_SetPktType(*(_DWORD *)(v4 + 48), 48) != -1)
  {
    v5 = _VCTransportStreamVTPSetRemoteSSRCOnVFD(*(_DWORD *)(v4 + 48), (uint64_t)a2, (uint64_t)CFSTR("RTPRemoteSSRC"));
    if ((v5 & 0x80000000) == 0)
    {
      v7 = *(_DWORD *)(v4 + 48);
      theArray = 0;
      if (v7 == -1)
      {
        v11 = 2150760449;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            _VCTransportStreamVTPSetPacketFilter_cold_4();
        }
      }
      else
      {
        v8 = VCPacketFilterGetCMBaseObject(a2, v6);
        v9 = *(uint64_t (**)(uint64_t, const __CFString *, _QWORD, CFArrayRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                                         + 48);
        if (!v9
          || (v10 = v9(v8, CFSTR("RTPPayloadList"), *MEMORY[0x1E0C9AE00], &theArray), (v10 & 0x80000000) != 0)
          || (v11 = v10, !theArray))
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
          {
            v28 = VRTraceErrorLogLevelToCSTR();
            v29 = *MEMORY[0x1E0CF2758];
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)number = 136315650;
              *(_QWORD *)&number[4] = v28;
              v38 = 2080;
              v39 = "_VCTransportStreamVTPSetPayloadListOnVFD";
              v40 = 1024;
              v41 = 579;
              _os_log_impl(&dword_1D8A54000, v29, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Payload list not set on filter", number, 0x1Cu);
            }
          }
          v15 = 0;
          v11 = 0;
          goto LABEL_45;
        }
        Count = CFArrayGetCount(theArray);
        v13 = Count;
        if (Count)
        {
          v14 = (char *)malloc_type_malloc(4 * Count, 0x100004052888210uLL);
          if (v14)
          {
            v15 = v14;
            if (v13 >= 1)
            {
              v16 = 0;
              v17 = v14;
              do
              {
                ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v16);
                CFNumberGetValue(ValueAtIndex, kCFNumberIntType, v17);
                ++v16;
                v17 += 4;
              }
              while (v13 != v16);
            }
            if (VTP_SetPayloadList(v7, v13, v15) == -1)
            {
              v11 = *__error() | 0xC0320000;
              if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
              {
                VRTraceErrorLogLevelToCSTR();
                if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
                  _VCTransportStreamVTPSetPacketFilter_cold_7();
              }
            }
            goto LABEL_45;
          }
          if ((int)VRTraceGetErrorLogLevelForModule() < 3)
          {
            v15 = 0;
            v11 = 2150760451;
            goto LABEL_45;
          }
          VRTraceErrorLogLevelToCSTR();
          v11 = 2150760451;
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            _VCTransportStreamVTPSetPacketFilter_cold_6();
        }
        else
        {
          v11 = 2150760449;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
              _VCTransportStreamVTPSetPacketFilter_cold_5();
          }
        }
      }
      v15 = 0;
LABEL_45:
      free(v15);
      goto LABEL_46;
    }
    return v5;
  }
  v11 = *__error() | 0xC0320000;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      _VCTransportStreamVTPSetPacketFilter_cold_3();
  }
  return v11;
}

uint64_t _VCTransportStreamVTPCopyPacketFilter(uint64_t a1, _QWORD *a2)
{
  CFTypeRef v3;
  uint64_t v4;

  if (a1)
  {
    if (a2)
    {
      v3 = *(CFTypeRef *)(CMBaseObjectGetDerivedStorage() + 40);
      if (v3)
        v3 = CFRetain(v3);
      v4 = 0;
      *a2 = v3;
    }
    else
    {
      v4 = 2150760449;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          _VCTransportStreamVTPCopyPacketFilter_cold_2();
      }
    }
  }
  else
  {
    v4 = 2150760449;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        _VCTransportStreamVTPCopyPacketFilter_cold_1();
    }
  }
  return v4;
}

uint64_t _VCTransportStreamVTPSetReceivedHandler(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage;

  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    return VCTransportStreamCommonSetReceivedHandler(DerivedStorage, a2);
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        _VCTransportStreamVTPSetReceivedHandler_cold_1();
    }
    return 2150760449;
  }
}

uint64_t _VCTransportStreamVTPPerformReceive(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int ErrorLogLevelForModule;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(_QWORD *)(DerivedStorage + 32))
  {
    v5 = 2150760504;
    if ((int)VRTraceGetErrorLogLevelForModule() < 5)
      goto LABEL_10;
    v9 = VRTraceErrorLogLevelToCSTR();
    v10 = *MEMORY[0x1E0CF2758];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      goto LABEL_10;
    *(_DWORD *)buf = 136315650;
    v18 = v9;
    v19 = 2080;
    v20 = "_VCTransportStreamVTPPerformReceive";
    v21 = 1024;
    v22 = 442;
    v11 = " [%s] %s:%d receivedHandler not set";
LABEL_20:
    _os_log_impl(&dword_1D8A54000, v10, OS_LOG_TYPE_DEFAULT, v11, buf, 0x1Cu);
    goto LABEL_10;
  }
  v3 = DerivedStorage;
  if (*(_DWORD *)(DerivedStorage + 8) != 2)
  {
    v5 = 2150760509;
    if ((int)VRTraceGetErrorLogLevelForModule() < 5)
      goto LABEL_10;
    v12 = VRTraceErrorLogLevelToCSTR();
    v10 = *MEMORY[0x1E0CF2758];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      goto LABEL_10;
    *(_DWORD *)buf = 136315650;
    v18 = v12;
    v19 = 2080;
    v20 = "_VCTransportStreamVTPPerformReceive";
    v21 = 1024;
    v22 = 443;
    v11 = " [%s] %s:%d Cannot perform receive. Not in activated state";
    goto LABEL_20;
  }
  if (!*(_BYTE *)(DerivedStorage + 12))
  {
    v5 = 2150760509;
    if ((int)VRTraceGetErrorLogLevelForModule() < 5)
      goto LABEL_10;
    v13 = VRTraceErrorLogLevelToCSTR();
    v10 = *MEMORY[0x1E0CF2758];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      goto LABEL_10;
    *(_DWORD *)buf = 136315650;
    v18 = v13;
    v19 = 2080;
    v20 = "_VCTransportStreamVTPPerformReceive";
    v21 = 1024;
    v22 = 444;
    v11 = " [%s] %s:%d Trying to perform receive on a transportStream that is not externally scheduled";
    goto LABEL_20;
  }
  v4 = VTP_Recvfrom(*(_DWORD *)(DerivedStorage + 48), &v16);
  if ((v4 & 0x80000000) != 0)
  {
    v5 = v4;
    v6 = *(_DWORD *)(v3 + 8);
    ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    if (v6 == 3)
    {
      v5 = 2150760515;
      if (ErrorLogLevelForModule >= 7)
      {
        v14 = VRTraceErrorLogLevelToCSTR();
        v15 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          v18 = v14;
          v19 = 2080;
          v20 = "_VCTransportStreamVTPPerformReceive";
          v21 = 1024;
          v22 = 448;
          _os_log_impl(&dword_1D8A54000, v15, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Transport stream deactivated", buf, 0x1Cu);
          v5 = 2150760515;
        }
      }
    }
    else if (ErrorLogLevelForModule >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        _VCTransportStreamVTPPerformReceive_cold_1();
    }
  }
  else
  {
    v5 = _VCTransportStreamVTPHandlePacketReceived(a1, v16);
  }
LABEL_10:
  VTP_ReleasePacket((void **)&v16);
  return v5;
}

uint64_t _VCTransportStreamVTPActivate(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  _BYTE v13[24];
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(_DWORD *)(DerivedStorage + 8) == 1)
    {
      v3 = DerivedStorage;
      if (!*(_BYTE *)(DerivedStorage + 12))
      {
        v4 = CMBaseObjectGetDerivedStorage();
        if (*(_DWORD *)(v4 + 8) != 1)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
              _VCTransportStreamVTPActivate_cold_3();
          }
          return 2150760509;
        }
        v5 = v4;
        *(_OWORD *)(v4 + 68) = 0u;
        v6 = (_OWORD *)(v4 + 68);
        *(_OWORD *)(v4 + 164) = 0u;
        *(_OWORD *)(v4 + 180) = 0u;
        *(_OWORD *)(v4 + 132) = 0u;
        *(_OWORD *)(v4 + 148) = 0u;
        *(_OWORD *)(v4 + 100) = 0u;
        *(_OWORD *)(v4 + 116) = 0u;
        *(_OWORD *)(v4 + 84) = 0u;
        v7 = *(_DWORD *)(v4 + 48);
        if (__darwin_check_fd_set_overflow(v7, (const void *)(v4 + 68), 0))
          *(_DWORD *)((char *)v6 + (((unint64_t)v7 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v7;
        *(_QWORD *)v13 = MEMORY[0x1E0C809B0];
        *(_QWORD *)&v13[8] = 0x40000000;
        *(_QWORD *)&v13[16] = ___VCTransportStreamVTPRegisterPacketCallback_block_invoke;
        *(_QWORD *)&v14 = &__block_descriptor_tmp_20;
        *((_QWORD *)&v14 + 1) = a1;
        *(_DWORD *)(v5 + 196) = VTP_RegisterPacketCallback(v6, a1, v13);
      }
      *(_DWORD *)(v3 + 8) = 2;
      if ((int)VRTraceGetErrorLogLevelForModule() < 8)
        return 0;
      v8 = VRTraceErrorLogLevelToCSTR();
      v9 = *MEMORY[0x1E0CF2758];
      v10 = *MEMORY[0x1E0CF2758];
      if (!*MEMORY[0x1E0CF2748])
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          _VCTransportStreamVTPActivate_cold_2();
        return 0;
      }
      v11 = 0;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v13 = 136315906;
        *(_QWORD *)&v13[4] = v8;
        *(_WORD *)&v13[12] = 2080;
        *(_QWORD *)&v13[14] = "_VCTransportStreamVTPActivate";
        *(_WORD *)&v13[22] = 1024;
        LODWORD(v14) = 378;
        WORD2(v14) = 2048;
        *(_QWORD *)((char *)&v14 + 6) = a1;
        _os_log_impl(&dword_1D8A54000, v9, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p]", v13, 0x26u);
        return 0;
      }
    }
    else
    {
      v11 = 2150760509;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          _VCTransportStreamVTPActivate_cold_4();
      }
    }
  }
  else
  {
    v11 = 2150760449;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        _VCTransportStreamVTPActivate_cold_1();
    }
  }
  return v11;
}

uint64_t _VCTransportStreamVTPDeactivate(uint64_t a1)
{
  uint64_t DerivedStorage;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  int v10;
  uint64_t v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(_DWORD *)(DerivedStorage + 8) == 2)
    {
      v3 = DerivedStorage;
      *(_DWORD *)(DerivedStorage + 8) = 3;
      if (!*(_BYTE *)(DerivedStorage + 12))
      {
        v4 = CMBaseObjectGetDerivedStorage();
        v5 = *(_DWORD *)(v4 + 196);
        if (v5 != -1)
        {
          VTP_UnregisterPacketCallback(v5);
          *(_DWORD *)(v4 + 196) = -1;
        }
      }
      VCCloseVFDIfValid(*(unsigned int *)(v3 + 48));
      *(_DWORD *)(v3 + 48) = -1;
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      v6 = 0;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        v7 = VRTraceErrorLogLevelToCSTR();
        v8 = *MEMORY[0x1E0CF2758];
        v6 = 0;
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        {
          v10 = 136315906;
          v11 = v7;
          v12 = 2080;
          v13 = "_VCTransportStreamVTPDeactivate";
          v14 = 1024;
          v15 = 479;
          v16 = 2048;
          v17 = a1;
          _os_log_impl(&dword_1D8A54000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p]", (uint8_t *)&v10, 0x26u);
          return 0;
        }
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() < 3)
    {
      return 2150760509;
    }
    else
    {
      VRTraceErrorLogLevelToCSTR();
      v6 = 2150760509;
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        _VCTransportStreamVTPDeactivate_cold_2();
    }
  }
  else
  {
    v6 = 2150760449;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        _VCTransportStreamVTPDeactivate_cold_1();
    }
  }
  return v6;
}

uint64_t _VCTransportStreamVTPSetRemoteSSRCOnVFD(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t CMBaseObject;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD, CFNumberRef *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  int valuePtr;
  CFNumberRef number;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  number = 0;
  if (a2)
  {
    if (!a3)
    {
      v8 = 2150760449;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          _VCTransportStreamVTPSetRemoteSSRCOnVFD_cold_2();
      }
      goto LABEL_15;
    }
    if (a1 == -1)
    {
      v8 = 2150760449;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          _VCTransportStreamVTPSetRemoteSSRCOnVFD_cold_3();
      }
      goto LABEL_15;
    }
    CMBaseObject = VCPacketFilterGetCMBaseObject(a2, a2);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, CFNumberRef *))(*(_QWORD *)(CMBaseObjectGetVTable() + 8)
                                                                           + 48);
    if (v6)
    {
      v7 = v6(CMBaseObject, a3, *MEMORY[0x1E0C9AE00], &number);
      if ((v7 & 0x80000000) == 0)
      {
        v8 = v7;
        if (number)
        {
          valuePtr = 0;
          CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
          if (VTP_SetRemoteSSRC(a1, valuePtr) == -1)
          {
            v8 = *__error() | 0xC0320000;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
                _VCTransportStreamVTPSetRemoteSSRCOnVFD_cold_4();
            }
          }
          goto LABEL_15;
        }
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      v9 = VRTraceErrorLogLevelToCSTR();
      v10 = *MEMORY[0x1E0CF2758];
      v8 = 0;
      if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        goto LABEL_15;
      *(_DWORD *)buf = 136315650;
      v15 = v9;
      v16 = 2080;
      v17 = "_VCTransportStreamVTPSetRemoteSSRCOnVFD";
      v18 = 1024;
      v19 = 538;
      _os_log_impl(&dword_1D8A54000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Remote SSRC not set on filter", buf, 0x1Cu);
    }
    v8 = 0;
  }
  else
  {
    v8 = 2150760449;
    if ((int)VRTraceGetErrorLogLevelForModule() < 3)
      return v8;
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      _VCTransportStreamVTPSetRemoteSSRCOnVFD_cold_1();
  }
LABEL_15:
  if (number)
    CFRelease(number);
  return v8;
}

uint64_t _VCTransportStreamVTPHandlePacketReceived(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  _OWORD v11[11];
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    v4 = DerivedStorage;
    if (*(_DWORD *)(DerivedStorage + 8) == 2)
    {
      if (*(_QWORD *)(DerivedStorage + 32))
      {
        v11[7] = unk_1D9110B48;
        v11[8] = xmmword_1D9110B58;
        memset(&v11[9], 170, 24);
        memset(v11, 170, 112);
        VCGetVCPacketWithVTPPacket(a2, (uint64_t)v11);
        (*(void (**)(void))(*(_QWORD *)(v4 + 32) + 16))();
        VCPacketInvalidate((uint64_t *)v11);
        return 0;
      }
      v5 = 2150760504;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        v10 = VRTraceErrorLogLevelToCSTR();
        v8 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          v13 = v10;
          v14 = 2080;
          v15 = "_VCTransportStreamVTPHandlePacketReceived";
          v16 = 1024;
          v17 = 424;
          v9 = " [%s] %s:%d receivedHandler not set";
          goto LABEL_15;
        }
      }
    }
    else
    {
      if ((int)VRTraceGetErrorLogLevelForModule() < 5)
        return 2150760509;
      v7 = VRTraceErrorLogLevelToCSTR();
      v8 = *MEMORY[0x1E0CF2758];
      v5 = 2150760509;
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        v13 = v7;
        v14 = 2080;
        v15 = "_VCTransportStreamVTPHandlePacketReceived";
        v16 = 1024;
        v17 = 423;
        v9 = " [%s] %s:%d Dropping packet. Not in activated state";
LABEL_15:
        _os_log_impl(&dword_1D8A54000, v8, OS_LOG_TYPE_DEFAULT, v9, buf, 0x1Cu);
      }
    }
  }
  else
  {
    v5 = 2150694913;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        _VCTransportStreamVTPHandlePacketReceived_cold_1();
    }
  }
  return v5;
}

void VCMediaControlInfo_SetDelegateAndVTable(uint64_t a1, CFTypeRef cf, _QWORD *a3)
{
  uint64_t v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1 && a3)
  {
    if (cf)
      CFRetain(cf);
    *(_QWORD *)(a1 + 24) = cf;
    *(_QWORD *)(a1 + 32) = *a3;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    v6 = VRTraceErrorLogLevelToCSTR();
    v7 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      v8 = 136316162;
      v9 = v6;
      v10 = 2080;
      v11 = "VCMediaControlInfo_SetDelegateAndVTable";
      v12 = 1024;
      v13 = 30;
      v14 = 2048;
      v15 = a1;
      v16 = 2048;
      v17 = a3;
      _os_log_impl(&dword_1D8A54000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil instance=%p or delegateVTable=%p passed", (uint8_t *)&v8, 0x30u);
    }
  }
}

uint64_t VCMediaControlInfo_SerializedSize(uint64_t a1)
{
  if (a1)
    return *(_QWORD *)(a1 + 16);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCMediaControlInfo_SerializedSize_cold_1();
  }
  return 0;
}

void VCMediaControlInfo_SerializeBuffer()
{
  objc_exception_throw((id)objc_msgSend(MEMORY[0x1E0C99DA0], "exceptionWithName:reason:userInfo:", *MEMORY[0x1E0C99778], objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s must be overridden in a subclass/category"), "HRESULT VCMediaControlInfo_SerializeBuffer(VCMediaControlInfo *, uint8_t *, size_t, size_t *)"), 0));
}

void VCMediaControlInfo_Invalidate(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  uint64_t v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_WORD *)(a1 + 8) = 0;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    v1 = VRTraceErrorLogLevelToCSTR();
    v2 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      v3 = 136315650;
      v4 = v1;
      v5 = 2080;
      v6 = "VCMediaControlInfo_Invalidate";
      v7 = 1024;
      v8 = 94;
      _os_log_impl(&dword_1D8A54000, v2, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d nil context passed", (uint8_t *)&v3, 0x1Cu);
    }
  }
}

void VCMediaControlInfoDispose(uint64_t a1)
{
  void (*v2)(void);
  const void *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (*(_QWORD *)(a1 + 24) && (v2 = *(void (**)(void))(a1 + 32)) != 0)
    {
      v2();
      v3 = *(const void **)(a1 + 24);
      if (v3)
      {
        CFRelease(v3);
        *(_QWORD *)(a1 + 24) = 0;
      }
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      v4 = VRTraceErrorLogLevelToCSTR();
      v5 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v6 = *(_QWORD *)(a1 + 24);
        v7 = *(_QWORD *)(a1 + 32);
        v8 = 136316418;
        v9 = v4;
        v10 = 2080;
        v11 = "VCMediaControlInfoDispose";
        v12 = 1024;
        v13 = 108;
        v14 = 2048;
        v15 = a1;
        v16 = 2048;
        v17 = v6;
        v18 = 2048;
        v19 = v7;
        _os_log_impl(&dword_1D8A54000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d instance=%p nil delegate=%p or disposeControlInfo=%p passed", (uint8_t *)&v8, 0x3Au);
      }
    }
  }
}

void VCMediaControlInfo_SetVersion(uint64_t a1, char a2)
{
  if (a1)
  {
    *(_BYTE *)(a1 + 40) = a2;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCMediaControlInfo_SetVersion_cold_1();
  }
}

uint64_t VCMediaControlInfoIPCamera_SerializedSize(uint64_t a1)
{
  uint64_t result;

  if (a1)
  {
    if ((*(_WORD *)(a1 + 8) & 1) != 0)
    {
      result = 8;
      *(_QWORD *)(a1 + 16) = 8;
    }
    else
    {
      return *(_QWORD *)(a1 + 16);
    }
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCMediaControlInfoIPCamera_SerializedSize_cold_1();
    }
    return 0;
  }
  return result;
}

uint64_t VCMediaControlInfoIPCamera_SerializeBuffer(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v4;

  if (a1)
  {
    if (a2)
    {
      if ((*(_WORD *)(a1 + 8) & 1) == 0)
      {
        if (*(_QWORD *)(a1 + 16) <= a3)
        {
          if ((int)VRTraceGetErrorLogLevelForModule() < 3)
            return 2150563857;
          VRTraceErrorLogLevelToCSTR();
          v4 = 2150563857;
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            VCMediaControlInfoIPCamera_SerializeBuffer_cold_4();
          return v4;
        }
        goto LABEL_19;
      }
      *(_QWORD *)(a1 + 16) = 8;
      if (a3 <= 7)
      {
LABEL_19:
        v4 = 2150563854;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          {
            VCMediaControlInfoIPCamera_SerializeBuffer_cold_3();
            return 2150563854;
          }
        }
        return v4;
      }
      *a2 = *(_QWORD *)(a1 + 64);
      v4 = 0;
      if (a4)
        *a4 = 8;
    }
    else
    {
      v4 = 2150563841;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          VCMediaControlInfoIPCamera_SerializeBuffer_cold_2();
      }
    }
  }
  else
  {
    v4 = 2150563841;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCMediaControlInfoIPCamera_SerializeBuffer_cold_1();
    }
  }
  return v4;
}

uint64_t VCMediaControlInfoSerializeWithData(unsigned __int16 *a1, _WORD *a2, unint64_t a3, unsigned __int8 *a4, uint64_t *a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _WORD *v10;
  int v11;
  unsigned int v12;
  _WORD *v13;
  unsigned int v14;
  unsigned int v15;
  char *v16;
  int v17;
  unsigned int v18;
  __int16 v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v23;
  NSObject *v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  *a5 = 0;
  if (!a1 || !a2 || !a4)
  {
    v21 = 2150563841;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCMediaControlInfoSerializeWithData_cold_5();
    }
    return v21;
  }
  v5 = *a4;
  if (v5 == 2)
  {
    v6 = 10;
    if (!a4[2])
      v6 = 6;
    if (a4[5])
      v6 += 4;
  }
  else
  {
    v6 = 6;
  }
  v7 = 14;
  if (!a4[4])
    v7 = 10;
  v8 = v7 + v6;
  if (v7 + v6 > a3)
  {
    v21 = 2150563854;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCMediaControlInfoSerializeWithData_cold_1();
    }
    return v21;
  }
  if (!a4[1])
  {
    v21 = 2150563857;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCMediaControlInfoSerializeWithData_cold_2();
    }
    return v21;
  }
  if ((v5 - 1) >= 2)
  {
    v21 = 2150563857;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCMediaControlInfoSerializeWithData_cold_4();
    }
    return v21;
  }
  if (a4[2])
    LOWORD(v9) = 5;
  else
    LOWORD(v9) = 1;
  if (a4[5])
    LOWORD(v9) = v9 | 8;
  a2[2] = bswap32(*a1) >> 16;
  if (a1[4] >= 0x10u)
    a1[4] = 15;
  v10 = a1 + 2;
  if (a1[2] >= 0x10u)
    *v10 = 15;
  v11 = *a4;
  if (v11 == 2)
  {
    v12 = *((_DWORD *)a1 + 3);
    v10 = a1 + 4;
  }
  else
  {
    if (v11 != 1)
    {
      v13 = a2 + 3;
      goto LABEL_31;
    }
    v12 = a1[1];
  }
  a2[3] = bswap32(v12) >> 16;
  a2[4] = bswap32(a1[5] & 0xFFF | ((unsigned __int16)*v10 << 12)) >> 16;
  v13 = a2 + 5;
LABEL_31:
  if (a4[3])
  {
    v14 = *((_DWORD *)a1 + 5);
    if (v14 >= 0xFFFF)
      v14 = 0xFFFF;
    *v13 = bswap32(v14) >> 16;
    v13[1] = bswap32(a1[12]) >> 16;
    v15 = *((_DWORD *)a1 + 7);
    if (v15 >= 0xFFFF)
      v15 = 0xFFFF;
    v13[2] = bswap32(v15) >> 16;
    v16 = (char *)(v13 + 3);
    if (*a4 == 2)
    {
      if (!a4[2]
        || (v13[3] = bswap32(a1[3] & 0xFFF | (a1[2] << 12)) >> 16,
            v13[4] = bswap32(a1[1]) >> 16,
            v16 = (char *)(v13 + 5),
            *a4 == 2))
      {
        if (a4[5])
        {
          *(_WORD *)v16 = bswap32(a1[18]) >> 16;
          *((_WORD *)v16 + 1) = bswap32(a1[19]) >> 16;
          v16 += 4;
        }
      }
    }
    if (a4[4])
    {
      LOWORD(v9) = v9 | 2;
      *(_DWORD *)v16 = *((_DWORD *)a1 + 8);
      v16 += 4;
    }
    v17 = *a4;
    if (v17 == 2)
    {
      v18 = bswap32((v8 + 262140) >> 2) >> 16;
      v19 = v9 | 0x80;
      v9 = *((_DWORD *)a1 + 4) / 0x14u;
    }
    else
    {
      if (v17 != 1)
        goto LABEL_48;
      v18 = bswap32((v8 + 262140) >> 2) >> 16;
      v19 = 64;
    }
    *a2 = v19 | ((_WORD)v9 << 8);
    a2[1] = v18;
LABEL_48:
    v20 = v16 - (char *)a2;
    if (v16 - (char *)a2 == v8)
    {
      v21 = 0;
      *a5 = v8;
    }
    else
    {
      v21 = 2150563854;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        v23 = VRTraceErrorLogLevelToCSTR();
        v24 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        {
          v25 = 136316162;
          v26 = v23;
          v27 = 2080;
          v28 = "VCMediaControlInfoSerializeWithData";
          v29 = 1024;
          v30 = 522;
          v31 = 2048;
          v32 = v20;
          v33 = 2048;
          v34 = v8;
          _os_log_error_impl(&dword_1D8A54000, v24, OS_LOG_TYPE_ERROR, " [%s] %s:%d bufferFilledSize(%zu) does not match totalLength(%zu)", (uint8_t *)&v25, 0x30u);
        }
      }
    }
    return v21;
  }
  v21 = 2150563857;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCMediaControlInfoSerializeWithData_cold_3();
  }
  return v21;
}

uint64_t VCMediaControlInfoUnserializeWithData(uint64_t a1, unsigned __int16 *a2, unint64_t a3, unsigned __int8 *a4)
{
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  _BOOL4 v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned __int16 *v28;
  int v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  NSObject *v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  int v47;
  __int16 v48;
  _BYTE v49[10];
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (!a1 || !a2 || !a4)
  {
    v9 = 2150563841;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCMediaControlInfoUnserializeWithData_cold_5();
    }
    return v9;
  }
  if (*a4 - 1 >= 2)
  {
    v9 = 2150563857;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCMediaControlInfoUnserializeWithData_cold_4();
    }
    return v9;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v6 = *a4;
  v7 = 6;
  if (v6 == 2)
  {
    v7 = a4[2] ? 10 : 6;
    if (a4[5])
      v7 += 4;
  }
  v8 = (v7 + 10);
  if (v8 <= a3)
  {
    if (v6 == 2)
    {
      v19 = *a2;
      v20 = v19 >> 6;
      if (v20 != 2)
      {
        v9 = 2150563849;
        if ((int)VRTraceGetErrorLogLevelForModule() < 3)
          return v9;
        v40 = VRTraceErrorLogLevelToCSTR();
        v38 = *MEMORY[0x1E0CF2758];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          return v9;
        v41 = *a4;
        v42 = 136316162;
        v43 = v40;
        v44 = 2080;
        v45 = "VCMediaControlInfoUnserializeWithData";
        v46 = 1024;
        v47 = 581;
        v48 = 1024;
        *(_DWORD *)v49 = v20;
        *(_WORD *)&v49[4] = 1024;
        *(_DWORD *)&v49[6] = v41;
        v12 = " [%s] %s:%d Bad version(%u) for FaceTime audio media control info, expecting %u";
        goto LABEL_84;
      }
      v21 = a2[1];
      *(_DWORD *)(a1 + 16) = 20 * (v19 >> 8);
      v18 = v19 & 0xF;
      if (!v18)
      {
        v9 = 2150563857;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
        {
          v35 = VRTraceErrorLogLevelToCSTR();
          v36 = *MEMORY[0x1E0CF2758];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
          {
            v42 = 136315650;
            v43 = v35;
            v44 = 2080;
            v45 = "VCMediaControlInfoUnserializeWithData";
            v46 = 1024;
            v47 = 587;
            _os_log_impl(&dword_1D8A54000, v36, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d The remote caller is likely in an incompatible AVConference build, please update to AVConference build latest OR after <rdar://problem/49225282> Fix AFRC feedback FaceTimeMediaControlInfoHeaderAudioV2 in LITTLE_ENDIAN case", (uint8_t *)&v42, 0x1Cu);
          }
        }
        return v9;
      }
      v17 = bswap32(v21) >> 14;
    }
    else
    {
      if (v6 == 1)
      {
        v15 = *a2;
        v16 = v15 >> 6;
        if (v16 == 1)
        {
          v17 = (bswap32(a2[1]) >> 14) & 0x3FFFC;
          v18 = (v15 >> 8) & 0xF;
          goto LABEL_24;
        }
        v9 = 2150563849;
        if ((int)VRTraceGetErrorLogLevelForModule() < 3)
          return v9;
        v37 = VRTraceErrorLogLevelToCSTR();
        v38 = *MEMORY[0x1E0CF2758];
        if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          return v9;
        v39 = *a4;
        v42 = 136316162;
        v43 = v37;
        v44 = 2080;
        v45 = "VCMediaControlInfoUnserializeWithData";
        v46 = 1024;
        v47 = 574;
        v48 = 1024;
        *(_DWORD *)v49 = v16;
        *(_WORD *)&v49[4] = 1024;
        *(_DWORD *)&v49[6] = v39;
        v12 = " [%s] %s:%d Bad version(%u) for FaceTime audio media control info, expecting %u";
LABEL_84:
        v13 = v38;
        v14 = 40;
        goto LABEL_15;
      }
      v17 = 0;
      v18 = 0;
    }
LABEL_24:
    if (v17 + 4 != a3)
    {
      v9 = 2150563883;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          VCMediaControlInfoUnserializeWithData_cold_3();
      }
      return v9;
    }
    if (v6 == 1)
      v22 = 1;
    else
      v22 = (v6 == 2) & (v18 >> 2);
    a4[1] = 1;
    a4[2] = v22;
    v23 = v6 == 2 && v18 > 7;
    a4[5] = v23;
    *(_WORD *)a1 = bswap32(a2[2]) >> 16;
    if (v6 != 2)
    {
      if (v6 == 1)
      {
        *(_WORD *)(a1 + 2) = bswap32(a2[3]) >> 16;
        v24 = bswap32(a2[4]);
        *(_WORD *)(a1 + 4) = v24 >> 28;
        *(_WORD *)(a1 + 10) = HIWORD(v24) & 0xFFF;
      }
      v25 = 6;
      goto LABEL_45;
    }
    *(_DWORD *)(a1 + 12) = bswap32(a2[3]) >> 16;
    v26 = bswap32(a2[4]);
    *(_WORD *)(a1 + 8) = v26 >> 28;
    *(_WORD *)(a1 + 10) = HIWORD(v26) & 0xFFF;
    if (v22)
    {
      v27 = bswap32(a2[8]);
      *(_WORD *)(a1 + 4) = v27 >> 28;
      *(_WORD *)(a1 + 6) = HIWORD(v27) & 0xFFF;
      *(_WORD *)(a1 + 2) = bswap32(a2[9]) >> 16;
      v28 = a2 + 10;
      if (!v23)
      {
LABEL_40:
        if (v22)
          v25 = 10;
        else
          v25 = 6;
        if (v23)
          v25 += 4;
LABEL_45:
        v29 = v17 - v25;
        *(_DWORD *)(a1 + 20) = bswap32(a2[5]) >> 16;
        *(_WORD *)(a1 + 24) = bswap32(a2[6]) >> 16;
        *(_DWORD *)(a1 + 28) = bswap32(a2[7]) >> 16;
        a4[3] = 1;
        if ((v18 & 2) != 0)
        {
          if (v29 <= 9)
          {
            v9 = 2150563883;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
            {
              VRTraceErrorLogLevelToCSTR();
              if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
                VCMediaControlInfoUnserializeWithData_cold_2();
            }
            return v9;
          }
          v30 = v29 - 10;
          v31 = v22 == 0;
          v32 = 10;
          if (v31)
            v32 = 6;
          if (v23)
            v32 += 4;
          if (v6 == 2)
            v33 = v32;
          else
            v33 = 6;
          *(_DWORD *)(a1 + 32) = *(_DWORD *)((char *)a2 + v33 + 10);
          a4[4] = 1;
        }
        else
        {
          v30 = v29 - 6;
        }
        if (!v30)
          return 0;
        v9 = 2150563883;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
            VCMediaControlInfoUnserializeWithData_cold_1();
        }
        return v9;
      }
    }
    else
    {
      v28 = a2 + 5;
      if (!v23)
        goto LABEL_40;
    }
    *(_WORD *)(a1 + 36) = bswap32(*v28) >> 16;
    *(_WORD *)(a1 + 38) = bswap32(v28[1]) >> 16;
    goto LABEL_40;
  }
  v9 = 2150563883;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    v10 = VRTraceErrorLogLevelToCSTR();
    v11 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
    {
      v42 = 136316162;
      v43 = v10;
      v44 = 2080;
      v45 = "VCMediaControlInfoUnserializeWithData";
      v46 = 1024;
      v47 = 565;
      v48 = 2048;
      *(_QWORD *)v49 = a3;
      *(_WORD *)&v49[8] = 1024;
      v50 = v8;
      v12 = " [%s] %s:%d Bad buffer length(%zu) for FaceTime audio media control info, expecting %u";
      v13 = v11;
      v14 = 44;
LABEL_15:
      _os_log_error_impl(&dword_1D8A54000, v13, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v42, v14);
    }
  }
  return v9;
}

uint64_t VCMediaControlInfoFaceTimeAudio_SerializedSize(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (a1)
  {
    v1 = 10;
    if ((*(_BYTE *)(a1 + 8) & 4) == 0)
      v1 = 6;
    if ((*(_BYTE *)(a1 + 8) & 8) != 0)
      v1 += 4;
    if (*(_BYTE *)(a1 + 40) == 2)
      v2 = v1;
    else
      v2 = 6;
    v3 = 14;
    if ((*(_BYTE *)(a1 + 8) & 2) == 0)
      v3 = 10;
    return v2 + v3;
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCMediaControlInfoFaceTimeAudio_SerializedSize_cold_1();
    }
    return 0;
  }
}

uint64_t VCMediaControlInfoFaceTimeAudio_SerializeBuffer(uint64_t a1, _WORD *a2, unint64_t a3, uint64_t *a4)
{
  int ErrorLogLevelForModule;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  __int16 v12;
  uint64_t v13;
  unsigned __int8 v15[6];
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (a1)
  {
    if (ErrorLogLevelForModule >= 8)
    {
      v9 = VRTraceErrorLogLevelToCSTR();
      v10 = *MEMORY[0x1E0CF2758];
      v11 = *MEMORY[0x1E0CF2758];
      if (*MEMORY[0x1E0CF2748])
      {
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315906;
          v17 = v9;
          v18 = 2080;
          v19 = "VCMediaControlInfoFaceTimeAudio_SerializeBuffer";
          v20 = 1024;
          v21 = 1080;
          v22 = 2112;
          v23 = objc_msgSend((id)a1, "description");
          _os_log_impl(&dword_1D8A54000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %@", buf, 0x26u);
        }
      }
      else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        VCMediaControlInfoFaceTimeAudio_SerializeBuffer_cold_2(v9, (void *)a1);
      }
    }
    v15[0] = *(_BYTE *)(a1 + 40);
    v12 = *(_WORD *)(a1 + 8);
    v15[1] = v12 & 1;
    v15[2] = (v12 & 4) != 0;
    v15[3] = (v12 & 0x80) != 0;
    v15[4] = (v12 & 2) != 0;
    v15[5] = (v12 & 8) != 0;
    return VCMediaControlInfoSerializeWithData((unsigned __int16 *)(a1 + 88), a2, a3, v15, a4);
  }
  else
  {
    v13 = 2150563841;
    if (ErrorLogLevelForModule >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCMediaControlInfoFaceTimeAudio_SerializeBuffer_cold_1();
    }
  }
  return v13;
}

void VCMediaControlInfoFaceTimeAudio_SetVideoEnabled(uint64_t a1, char a2)
{
  if (a1)
  {
    *(_BYTE *)(a1 + 128) = a2;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCMediaControlInfoFaceTimeAudio_SetVideoEnabled_cold_1();
  }
}

uint64_t VCMediaControlInfoFaceTimeVideo_SerializedSize(uint64_t a1)
{
  __int16 v1;
  uint64_t v2;

  if (a1)
  {
    v1 = *(_WORD *)(a1 + 8);
    v2 = 8;
    if ((v1 & 2) == 0)
      v2 = 4;
    if ((v1 & 1) != 0)
      v2 += 4;
    *(_QWORD *)(a1 + 16) = v2;
    if ((v1 & 4) != 0)
    {
      v2 += *(_QWORD *)(a1 + 112);
      *(_QWORD *)(a1 + 16) = v2;
    }
    if ((v1 & 8) != 0)
    {
      v2 += 4;
      *(_QWORD *)(a1 + 16) = v2;
    }
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCMediaControlInfoFaceTimeVideo_SerializedSize_cold_1();
    }
    return 0;
  }
  return v2;
}

uint64_t VCMediaControlInfoFaceTimeVideo_SerializeBuffer(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  __int16 v11;
  __int16 v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v17;
  NSObject *v18;
  int v19;
  uint64_t v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  unint64_t v26;
  __int16 v27;
  unint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      v8 = VCMediaControlInfoFaceTimeVideo_SerializedSize(a1);
      v9 = v8;
      if (v8 > a3)
      {
        v15 = 2150563854;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          v17 = VRTraceErrorLogLevelToCSTR();
          v18 = *MEMORY[0x1E0CF2758];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          {
            v19 = 136316162;
            v20 = v17;
            v21 = 2080;
            v22 = "VCMediaControlInfoFaceTimeVideo_SerializeBuffer";
            v23 = 1024;
            v24 = 1578;
            v25 = 2048;
            v26 = a3;
            v27 = 2048;
            v28 = v9;
            _os_log_error_impl(&dword_1D8A54000, v18, OS_LOG_TYPE_ERROR, " [%s] %s:%d Not enough buffer(%zu) for media control info, need %zu", (uint8_t *)&v19, 0x30u);
            return 2150563854;
          }
        }
      }
      else
      {
        v10 = *(_BYTE *)(a1 + 40) << 6;
        v11 = *(_WORD *)(a1 + 8);
        if ((v11 & 0x10) != 0)
          v10 |= *(_BYTE *)(a1 + 64) & 0x3F;
        v12 = v10;
        if ((*(_WORD *)(a1 + 8) & 0x100) != 0)
          v12 = v10 | (unsigned __int16)(*(unsigned __int8 *)(a1 + 65) << 12);
        if ((v11 & 2) != 0)
        {
          v12 |= 0x200u;
          *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 68);
          v13 = 8;
        }
        else
        {
          v13 = 4;
        }
        if ((v11 & 1) != 0 && (v12 & 0xC0) == 0x80)
        {
          v12 |= 0x100u;
          *(_WORD *)(a2 + v13) = bswap32(*(unsigned __int16 *)(a1 + 72)) >> 16;
          *(_WORD *)(a2 + (v13 | 2)) = bswap32(*(unsigned __int16 *)(a1 + 74)) >> 16;
          v13 += 4;
          v11 = *(_WORD *)(a1 + 8);
        }
        v14 = bswap32((v8 + 262140) >> 2);
        if ((v11 & 4) != 0)
        {
          v12 |= 0x400u;
          memcpy((void *)(a2 + v13), (const void *)(a1 + 76), *(_QWORD *)(a1 + 112));
          v13 += *(_QWORD *)(a1 + 112);
          v11 = *(_WORD *)(a1 + 8);
        }
        if ((v11 & 8) != 0)
        {
          v12 |= 0x800u;
          *(_DWORD *)(a2 + v13) = *(_DWORD *)(a1 + 120);
        }
        *(_WORD *)a2 = v12;
        *(_WORD *)(a2 + 2) = HIWORD(v14);
        v15 = 0;
        if (a4)
          *a4 = v9;
      }
    }
    else
    {
      v15 = 2150563841;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          VCMediaControlInfoFaceTimeVideo_SerializeBuffer_cold_2();
      }
    }
  }
  else
  {
    v15 = 2150563841;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCMediaControlInfoFaceTimeVideo_SerializeBuffer_cold_1();
    }
  }
  return v15;
}

uint64_t VCMediaControlInfoMultiwayAudio_SerializedSize(uint64_t a1)
{
  __int16 v1;
  uint64_t v2;

  if (a1)
  {
    v1 = *(_WORD *)(a1 + 8);
    if ((v1 & 1) != 0)
      *(_QWORD *)(a1 + 16) += 4;
    v2 = *(_QWORD *)(a1 + 16);
    if ((v1 & 2) != 0)
    {
      v2 += 4;
      *(_QWORD *)(a1 + 16) = v2;
    }
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCMediaControlInfoMultiwayAudio_SerializedSize_cold_1();
    }
    return 0;
  }
  return v2;
}

uint64_t VCMediaControlInfoMultiwayAudio_SerializeBuffer(uint64_t a1, _DWORD *a2, unint64_t a3, unint64_t *a4)
{
  __int16 v4;
  unint64_t v5;
  uint64_t v6;

  if (a1)
  {
    if (a2)
    {
      v4 = *(_WORD *)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 16);
      if ((v4 & 1) != 0)
        v5 += 4;
      if ((v4 & 2) != 0)
        v5 += 4;
      if ((v4 & 3) != 0)
        *(_QWORD *)(a1 + 16) = v5;
      if (v5 > a3)
      {
        v6 = 2150563854;
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          VRTraceErrorLogLevelToCSTR();
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          {
            VCMediaControlInfoMultiwayAudio_SerializeBuffer_cold_3();
            return 2150563854;
          }
        }
      }
      else
      {
        if ((v4 & 1) != 0)
        {
          if ((v4 & 2) != 0)
          {
            *a2 = *(_DWORD *)(a1 + 64);
            a2[1] = *(_DWORD *)(a1 + 68);
            v6 = 0;
            if (a4)
              *a4 = v5;
            return v6;
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            v6 = 2150563857;
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
              VCMediaControlInfoMultiwayAudio_SerializeBuffer_cold_5();
            return v6;
          }
          return 2150563857;
        }
        if ((int)VRTraceGetErrorLogLevelForModule() < 3)
          return 2150563857;
        VRTraceErrorLogLevelToCSTR();
        v6 = 2150563857;
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          VCMediaControlInfoMultiwayAudio_SerializeBuffer_cold_4();
      }
    }
    else
    {
      v6 = 2150563841;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          VCMediaControlInfoMultiwayAudio_SerializeBuffer_cold_2();
      }
    }
  }
  else
  {
    v6 = 2150563841;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCMediaControlInfoMultiwayAudio_SerializeBuffer_cold_1();
    }
  }
  return v6;
}

uint64_t VCMediaControlInfoGetSize(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(void))(result + 48))();
  return result;
}

uint64_t VCMediaControlInfoSerialize(uint64_t a1)
{
  if (a1)
    return (*(uint64_t (**)(void))(a1 + 56))();
  else
    return 2150563841;
}

uint64_t VCMediaControlInfoSetInfoUnserialized(void *a1, const char *a2, uint64_t a3)
{
  return objc_msgSend(a1, "setInfoUnserialized:type:", a2, a3);
}

uint64_t VCMediaControlInfoGetInfoUnserialized(void *a1, const char *a2, uint64_t a3)
{
  return objc_msgSend(a1, "getInfoUnserialized:type:", a2, a3);
}

BOOL VCMediaControlInfoRTPExtensionVersionIsValid(unsigned __int8 a1)
{
  return a1 - 1 < 2;
}

BOOL VCMediaControlInfo_IsLossStatsEnabled(int a1)
{
  return (a1 - 1) < 2;
}

uint64_t VCMediaControlInfoGetVersion(void *a1)
{
  return objc_msgSend(a1, "version");
}

uint64_t VCMediaControlInfoGetFECFeedbackVersion(void *a1)
{
  return objc_msgSend(a1, "fecFeedbackVersion");
}

uint64_t VCMediaControlInfoSetInfo(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(a1, "setInfo:size:type:", a3, a4, a2);
}

uint64_t VCMediaControlInfoHasInfo(void *a1, const char *a2)
{
  return objc_msgSend(a1, "hasInfoType:", a2);
}

uint64_t VCMediaControlInfoGetInfo(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend(a1, "getInfo:bufferLength:infoSize:type:", a3, a4, a5, a2);
}

void *iPadWiFiScreenDecodingRules(uint64_t a1, double a2, double a3)
{
  void *v7;
  uint64_t v8;
  NSObject *v9;
  int v11;
  uint64_t v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  double v18;
  __int16 v19;
  double v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a2 == 2732.0 && a3 == 2048.0)
  {
    v7 = &g_DecodingFormatiPadWiFi2732x2048;
  }
  else if (a2 == 2224.0 && a3 == 1668.0)
  {
    v7 = &g_DecodingFormatiPadWiFi2224x1668;
  }
  else if (a2 == 2388.0 && a3 == 1668.0)
  {
    v7 = &g_DecodingFormatiPadWiFi2388x1668;
  }
  else
  {
    if ((a2 != 2048.0 || a3 != 1536.0) && (int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      v8 = VRTraceErrorLogLevelToCSTR();
      v9 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v11 = 136316162;
        v12 = v8;
        v13 = 2080;
        v14 = "iPadWiFiScreenDecodingRules";
        v15 = 1024;
        v16 = 100;
        v17 = 2048;
        v18 = a2;
        v19 = 2048;
        v20 = a3;
        _os_log_impl(&dword_1D8A54000, v9, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Resolution(%f x %f)  not supported. Defaulting to 2048x1536", (uint8_t *)&v11, 0x30u);
      }
    }
    v7 = &g_DecodingFormatiPadWiFi2048x1536;
  }
  return videoRulesForFormatList_2((uint64_t)v7, 1u, a1);
}

void *videoRulesForFormatList_2(uint64_t a1, unsigned int a2, uint64_t a3)
{
  void *v6;
  BOOL v7;
  uint64_t v9;
  unsigned int *v10;
  os_log_t *v11;
  VCVideoRule *v12;
  double v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = (void *)objc_opt_new();
  if (v6)
    v7 = a2 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v9 = a2;
    v10 = (unsigned int *)(a1 + 8);
    v11 = (os_log_t *)MEMORY[0x1E0CF2758];
    do
    {
      v12 = [VCVideoRule alloc];
      *(float *)&v13 = (float)*v10;
      v14 = -[VCVideoRule initWithFrameWidth:frameHeight:frameRate:payload:](v12, "initWithFrameWidth:frameHeight:frameRate:payload:", *(v10 - 2), *(v10 - 1), a3, v13);
      if (v14)
      {
        v15 = (void *)v14;
        objc_msgSend(v6, "addObject:", v14);

      }
      else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        v16 = VRTraceErrorLogLevelToCSTR();
        v17 = *v11;
        if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v19 = v16;
          v20 = 2080;
          v21 = "videoRulesForFormatList";
          v22 = 1024;
          v23 = 48;
          _os_log_error_impl(&dword_1D8A54000, v17, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to create video rule for secondary screen !", buf, 0x1Cu);
        }
      }
      v10 += 3;
      --v9;
    }
    while (v9);
  }
  return v6;
}

uint64_t VCCallSession_SetUpRemoteAttributes(__CVBuffer *a1, uint64_t a2, char a3, int a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, uint64_t a13, uint64_t a14, uint64_t *a15, VideoAttributes **a16)
{
  int Width;
  int Height;
  __int128 v32;
  int v33;
  VideoAttributes *v34;
  uint64_t result;
  void *v36;
  int v37;
  int v38;
  double v39;
  float v40;
  id v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  char v54;
  double v55;
  char v56;
  int v57;
  int v58;
  VideoAttributes *v59;
  double v60;
  double v61;
  double v62;
  double v63;
  int ErrorLogLevelForModule;
  os_log_t *v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  NSObject *v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  VideoAttributes *v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  int v84;
  int v85;
  __int128 v86;
  __int128 v87;
  uint8_t buf[4];
  uint64_t v89;
  __int16 v90;
  const char *v91;
  __int16 v92;
  int v93;
  __int16 v94;
  _BYTE v95[10];
  __int16 v96;
  int v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  Width = CVPixelBufferGetWidth(a1);
  Height = CVPixelBufferGetHeight(a1);
  *(_QWORD *)&v32 = -1;
  *((_QWORD *)&v32 + 1) = -1;
  v86 = v32;
  v87 = v32;
  VideoUtil_GetVisibleRect(a1, (double *)&v86);
  v33 = *(double *)&v87 < *((double *)&v87 + 1) || (a2 & 2) == 0;
  if ((a2 & 0x80) == 0)
  {
    v34 = 0;
    result = 0;
    goto LABEL_63;
  }
  v36 = (void *)VCVideoCaptureServer_CopyLocalVideoAttributes((uint64_t)+[VCVideoCaptureServer VCVideoCaptureServerSingleton](VCVideoCaptureServer, "VCVideoCaptureServerSingleton", *(double *)&v87));
  v84 = Width;
  v85 = Height;
  if (objc_msgSend(v36, "orientation"))
    v37 = objc_msgSend(v36, "orientation") == 1;
  else
    v37 = 1;
  v38 = v33 ^ v37;
  if (*(double *)&v87 >= *((double *)&v87 + 1))
    v39 = *((double *)&v87 + 1) / *(double *)&v87;
  else
    v39 = *(double *)&v87 / *((double *)&v87 + 1);
  v79 = a10;
  v80 = a9;
  v81 = a12;
  v82 = a11;
  v40 = v39;
  v41 = +[VCVideoCaptureServer VCVideoCaptureServerSingleton](VCVideoCaptureServer, "VCVideoCaptureServerSingleton");
  if (v33)
  {
    objc_msgSend(v41, "localScreenRatioForScreenOrientation:", 0);
    v43 = v42;
    v45 = v44;
    objc_msgSend(+[VCVideoCaptureServer VCVideoCaptureServerSingleton](VCVideoCaptureServer, "VCVideoCaptureServerSingleton"), "localExpectedRatioForScreenOrientation:", 0);
    v48 = v46;
    if ((a3 & 1) != 0)
    {
      if ((v38 & 1) != 0)
        goto LABEL_24;
    }
    else
    {
      if (v46 / v47 < v40)
        v54 = v33 ^ v37;
      else
        v54 = 0;
      if ((v54 & 1) != 0)
        goto LABEL_24;
    }
    v48 = v43;
    v47 = v45;
LABEL_24:
    v55 = v47 / v48;
    goto LABEL_31;
  }
  objc_msgSend(v41, "localScreenRatioForScreenOrientation:", 3);
  v50 = v49;
  v52 = v51;
  objc_msgSend(+[VCVideoCaptureServer VCVideoCaptureServerSingleton](VCVideoCaptureServer, "VCVideoCaptureServerSingleton"), "localExpectedRatioForScreenOrientation:", 3);
  v48 = v53;
  if ((a3 & 1) != 0)
  {
    if ((v38 & 1) != 0)
      goto LABEL_30;
  }
  else
  {
    if (v47 / v53 < v40)
      v56 = v33 ^ v37;
    else
      v56 = 0;
    if ((v56 & 1) != 0)
      goto LABEL_30;
  }
  v48 = v50;
  v47 = v52;
LABEL_30:
  v55 = v48 / v47;
LABEL_31:
  v83 = v47;
  if (!a4
    && VCCallSession_SetUpRemoteAttributes_lastRemotePortrait == v33
    && VCCallSession_SetUpRemoteAttributes_lastLocalPortrait == v37)
  {
    v34 = 0;
    v58 = v84;
    v57 = v85;
  }
  else
  {
    v59 = objc_alloc_init(VideoAttributes);
    v34 = v59;
    if (v37)
      v60 = a6;
    else
      v60 = a8;
    if (v37)
      v61 = a5;
    else
      v61 = a7;
    v62 = v81;
    if (v33)
      v62 = v79;
    v63 = v82;
    if (v33)
      v63 = v80;
    if (!v38)
    {
      v61 = v63;
      v60 = v62;
    }
    -[VideoAttributes setRatio:](v59, "setRatio:", v61, v60);
    -[VideoAttributes setOrientation:](v34, "setOrientation:", objc_msgSend(v36, "orientation"));
    ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    v65 = (os_log_t *)MEMORY[0x1E0CF2758];
    if (ErrorLogLevelForModule >= 7)
    {
      v66 = VRTraceErrorLogLevelToCSTR();
      v67 = *v65;
      if (os_log_type_enabled(*v65, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136316418;
        v89 = v66;
        v90 = 2080;
        v91 = "VCCallSession_SetUpRemoteAttributes";
        v92 = 1024;
        v93 = 348;
        v94 = 1024;
        *(_DWORD *)v95 = a2;
        *(_WORD *)&v95[4] = 1024;
        *(_DWORD *)&v95[6] = v37;
        v96 = 1024;
        v97 = v33;
        _os_log_impl(&dword_1D8A54000, v67, OS_LOG_TYPE_DEFAULT, "VCCallSession [%s] %s:%d [AR_RX] cameraStatusBits=0x%08x, localPortrait=%d, remotePortrait=%d", buf, 0x2Eu);
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      v68 = VRTraceErrorLogLevelToCSTR();
      v69 = *v65;
      if (os_log_type_enabled(*v65, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        v89 = v68;
        v90 = 2080;
        v91 = "VCCallSession_SetUpRemoteAttributes";
        v92 = 1024;
        v93 = 349;
        v94 = 2112;
        *(_QWORD *)v95 = v34;
        _os_log_impl(&dword_1D8A54000, v69, OS_LOG_TYPE_DEFAULT, "VCCallSession [%s] %s:%d [AR_RX] remoteScreenAttributes=%@", buf, 0x26u);
      }
    }
    v58 = v84;
    v57 = v85;
  }
  VCCallSession_SetUpRemoteAttributes_lastRemotePortrait = v33;
  VCCallSession_SetUpRemoteAttributes_lastLocalPortrait = v37;

  v70 = *((double *)&v87 + 1);
  v71 = *(double *)&v87;
  if (*(double *)&v87 / *((double *)&v87 + 1) <= v55)
  {
    *((double *)&v86 + 1) = (*((double *)&v87 + 1) - *(double *)&v87 / v55) * 0.5 + *((double *)&v86 + 1);
    *((double *)&v87 + 1) = *(double *)&v87 / v55;
    v70 = *(double *)&v87 / v55;
  }
  else
  {
    *(double *)&v86 = (*(double *)&v87 - v55 * *((double *)&v87 + 1)) * 0.5 + *(double *)&v86;
    *(double *)&v87 = v55 * *((double *)&v87 + 1);
    v71 = v55 * *((double *)&v87 + 1);
  }
  v72 = (double)v58;
  if ((a2 & 0x10) != 0)
  {
    v48 = (double)v57;
    if (v34)
      -[VideoAttributes setRatio:](v34, "setRatio:", (double)v57, (double)v58);
    v75 = 1.0;
    v73 = 0.0;
    v74 = 0.0;
    v76 = 1.0;
  }
  else
  {
    v73 = *(double *)&v86 / v72;
    v74 = *((double *)&v86 + 1) / (double)v57;
    v75 = v71 / v72;
    v72 = v83;
    v76 = v70 / (double)v57;
  }
  v77 = [VideoAttributes alloc];
  LODWORD(v78) = 1.0;
  result = -[VideoAttributes initWithCameraStatusBits:aspectRatio:contentsRect:scaleFactor:](v77, "initWithCameraStatusBits:aspectRatio:contentsRect:scaleFactor:", a2, v48, v72, v73, v74, v75, v76, v78);
LABEL_63:
  *a15 = result;
  *a16 = v34;
  return result;
}

uint64_t GCKVoiceChatOnPlayVideo(void *a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  v6 = *((_QWORD *)a3 + 2);
  return objc_msgSend(a1, "onPlayVideo:frameTime:cameraStatusBits:", a2, &v5, a4);
}

double ComputeVisibleAspectRatioWithRemoteScreenAspectRatio(int a1, int a2, double a3, double a4, double a5, double a6)
{
  double v10;
  double v11;
  int64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  NSObject *v16;
  int64_t v18;
  int v19;
  int v20;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v19 = a2;
  v20 = a1;
  v10 = (double)a1;
  v11 = (double)a2;
  if (+[VideoUtil compareVideoAspectRatioSizeA:toSizeB:](VideoUtil, "compareVideoAspectRatioSizeA:toSizeB:", (double)a1, (double)a2, a3, a4) == -1&& +[VideoUtil compareVideoAspectRatioSizeA:toSizeB:](VideoUtil, "compareVideoAspectRatioSizeA:toSizeB:", v10, v11, a5, a6) == -1)
  {
    v18 = +[VideoUtil compareVideoAspectRatioSizeA:toSizeB:](VideoUtil, "compareVideoAspectRatioSizeA:toSizeB:", a3, a4, a5, a6);
    if (v18 == 1)
      v13 = a5;
    else
      v13 = a3;
    if (v18 == 1)
      v14 = a6;
    else
      v14 = a4;
  }
  else if (+[VideoUtil compareVideoAspectRatioSizeA:toSizeB:](VideoUtil, "compareVideoAspectRatioSizeA:toSizeB:", v10, v11, a3, a4) == 1&& +[VideoUtil compareVideoAspectRatioSizeA:toSizeB:](VideoUtil, "compareVideoAspectRatioSizeA:toSizeB:", v10, v11, a5, a6) == 1)
  {
    v12 = +[VideoUtil compareVideoAspectRatioSizeA:toSizeB:](VideoUtil, "compareVideoAspectRatioSizeA:toSizeB:", a3, a4, a5, a6);
    if (v12 == 1)
      v13 = a3;
    else
      v13 = a5;
    if (v12 == 1)
      v14 = a4;
    else
      v14 = a6;
  }
  else
  {
    SimplifyRatio(&v20, &v19);
    v13 = (double)v20;
    v14 = (double)v19;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    v15 = VRTraceErrorLogLevelToCSTR();
    v16 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136318722;
      v22 = v15;
      v23 = 2080;
      v24 = "ComputeVisibleAspectRatioWithRemoteScreenAspectRatio";
      v25 = 1024;
      v26 = 498;
      v27 = 2048;
      v28 = a3;
      v29 = 2048;
      v30 = a4;
      v31 = 2048;
      v32 = a3 / a4;
      v33 = 2048;
      v34 = a5;
      v35 = 2048;
      v36 = a6;
      v37 = 2048;
      v38 = a5 / a6;
      v39 = 2048;
      v40 = v10;
      v41 = 2048;
      v42 = v11;
      v43 = 2048;
      v44 = v10 / v11;
      v45 = 2048;
      v46 = v13;
      v47 = 2048;
      v48 = v14;
      v49 = 2048;
      v50 = v13 / v14;
      _os_log_impl(&dword_1D8A54000, v16, OS_LOG_TYPE_DEFAULT, "VCCallSession [%s] %s:%d [AR_TX] remoteScreenAspectRatio %.0f:%.0f (%.3f), remoteExpectedAspectRatio %.0f:%.0f (%.3f), encode %.0f:%.0f (%.3f) --> visibleAspectRatio %.0f:%.0f (%.3f)", buf, 0x94u);
    }
  }
  return v13;
}

void _VCStreamInputCaptureSource_OnCaptureVideoFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  __int128 v6;
  uint64_t v7;
  _DWORD v8[2];
  char v9;
  char v10;
  __int16 v11;
  int v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v11 = -21846;
    v8[0] = -1431699456;
    v8[1] = a5;
    v9 = 0;
    v10 = a6;
    v12 = 0;
    v13 = -1431655936;
    v6 = *(_OWORD *)a3;
    v7 = *(_QWORD *)(a3 + 16);
    VCVideoCapture_DistributeVideoFrame(a1, a2, &v6, (uint64_t)v8);
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      _VCStreamInputCaptureSource_OnCaptureVideoFrame_cold_1();
  }
}

uint64_t VCObject_Lock(uint64_t result)
{
  if (result)
    return pthread_mutex_lock((pthread_mutex_t *)(result + 16));
  return result;
}

uint64_t VCObject_Unlock(uint64_t result)
{
  if (result)
    return pthread_mutex_unlock((pthread_mutex_t *)(result + 16));
  return result;
}

void sub_1D8FE4A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D8FE4CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D8FE6ED4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D8FE8378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D8FE8594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D8FE86C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const char *OUTLINED_FUNCTION_4_11@<X0>(Class cls@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = a2;
  return class_getName(cls);
}

uint64_t OUTLINED_FUNCTION_21_1(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "streamGroupID");
}

uint64_t AVCPacketRelayDriverThreadStart()
{
  int *v0;
  int v1;
  uint64_t result;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t *v5;
  CFDictionaryRef v6;
  int v7;
  int ErrorLogLevelForModule;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  _BOOL4 v13;
  uint64_t v14;
  void *values;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock(&g_DriverHandleMutex);
  if (g_DriverHandle != 0xFFFFFFFFLL)
  {
    pthread_mutex_unlock(&g_DriverHandleMutex);
    v0 = __error();
    v1 = 17;
LABEL_3:
    *v0 = v1;
    return 0xFFFFFFFFLL;
  }
  v3 = malloc_type_calloc(1uLL, 0xE0uLL, 0x102004049390C7CuLL);
  if (!v3)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 2)
    {
      VRTraceErrorLogLevelToCSTR();
      if ((VRTraceIsOSFaultDisabled() & 1) != 0)
      {
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          AVCPacketRelayDriverThreadStart_cold_1();
      }
      else if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_FAULT))
      {
        AVCPacketRelayDriverThreadStart_cold_2();
      }
    }
    pthread_mutex_unlock(&g_DriverHandleMutex);
    v0 = __error();
    v1 = 12;
    goto LABEL_3;
  }
  v4 = v3;
  g_DriverHandle = CreateHandle();
  pthread_mutex_unlock(&g_DriverHandleMutex);
  if (g_DriverHandle == 0xFFFFFFFFLL)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      v9 = VRTraceErrorLogLevelToCSTR();
      v10 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        AVCPacketRelayDriverThreadStart_cold_3(v9, v10);
    }
    free(v4);
    v0 = __error();
    v1 = 22;
    goto LABEL_3;
  }
  pthread_rwlock_init((pthread_rwlock_t *)(v4 + 2), 0);
  *v4 = -1;
  v5 = (uint64_t *)(v4 + 54);
  values = CFSTR("com.apple.avconference.AVCPacketRelayDriverProc");
  v6 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], MEMORY[0x1E0CA52C8], (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v7 = FigThreadCreate();
  if (v6)
    CFRelease(v6);
  ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (v7)
  {
    if (ErrorLogLevelForModule >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        AVCPacketRelayDriverThreadStart_cold_4();
    }
    AVCPacketRelayDriverThreadStop();
    return 0xFFFFFFFFLL;
  }
  if (ErrorLogLevelForModule < 7)
    return 0;
  v11 = VRTraceErrorLogLevelToCSTR();
  v12 = *MEMORY[0x1E0CF2758];
  v13 = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v13)
  {
    v14 = *v5;
    *(_DWORD *)buf = 136315906;
    v17 = v11;
    v18 = 2080;
    v19 = "AVCPacketRelayDriverThreadStart";
    v20 = 1024;
    v21 = 91;
    v22 = 2048;
    v23 = v14;
    _os_log_impl(&dword_1D8A54000, v12, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AVCPacketRelayDriverThread: AVCPacketRelayDriverProc thread(%p) started...", buf, 0x26u);
    return 0;
  }
  return result;
}

uint64_t AVCPacketRelayDriverProc()
{
  uint64_t v0;
  uint64_t v1;
  _opaque_pthread_t *v2;
  uint64_t v3;
  NSObject *v4;
  thread_act_t v5;
  thread_act_t v6;
  int v7;
  int v8;
  int *i;
  unint64_t v10;
  int v11;
  int *j;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int ErrorLogLevelForModule;
  uint64_t v18;
  NSObject *v19;
  int v20;
  timeval v21;
  fd_set buf;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v0 = CheckInHandleDebug();
  if (!v0)
  {
    v15 = -2144731134;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        AVCPacketRelayDriverProc_cold_1();
    }
    return v15;
  }
  v1 = v0;
  v21.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  v20 = -1431655766;
  v2 = pthread_self();
  pthread_getschedparam(v2, &v20, (sched_param *)&v21);
  if (SLODWORD(v21.tv_sec) <= 57)
    LODWORD(v21.tv_sec) = 58;
  pthread_setschedparam(v2, v20, (const sched_param *)&v21);
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    v3 = VRTraceErrorLogLevelToCSTR();
    v4 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      buf.fds_bits[0] = 136316418;
      *(_QWORD *)&buf.fds_bits[1] = v3;
      LOWORD(buf.fds_bits[3]) = 2080;
      *(_QWORD *)((char *)&buf.fds_bits[3] + 2) = "setNonDecayingThreadPriority";
      HIWORD(buf.fds_bits[5]) = 1024;
      buf.fds_bits[6] = 317;
      LOWORD(buf.fds_bits[7]) = 1024;
      *(__int32_t *)((char *)&buf.fds_bits[7] + 2) = v21.tv_sec;
      HIWORD(buf.fds_bits[8]) = 1024;
      buf.fds_bits[9] = 50;
      LOWORD(buf.fds_bits[10]) = 1024;
      *(__int32_t *)((char *)&buf.fds_bits[10] + 2) = 20;
      _os_log_impl(&dword_1D8A54000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AVCPacketRelayDriverProc: Fix priority at %d, CPU limit (%d, %d).", (uint8_t *)&buf, 0x2Eu);
    }
  }
  buf.fds_bits[0] = 0;
  v5 = MEMORY[0x1DF0884DC]();
  thread_policy_set(v5, 1u, buf.fds_bits, 1u);
  if (proc_setthread_cpupercent())
  {
    buf.fds_bits[0] = 1;
    v6 = MEMORY[0x1DF0884DC]();
    thread_policy_set(v6, 1u, buf.fds_bits, 1u);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        AVCPacketRelayDriverProc_cold_3();
    }
  }
  v21.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v21.tv_usec = 0xAAAAAAAAAAAAAAAALL;
  memset(&buf, 0, sizeof(buf));
  pthread_rwlock_rdlock((pthread_rwlock_t *)(v1 + 8));
  if (*(_BYTE *)(v1 + 4))
  {
LABEL_36:
    pthread_rwlock_unlock((pthread_rwlock_t *)(v1 + 8));
    goto LABEL_37;
  }
  while (1)
  {
    v7 = *(_DWORD *)v1;
    if (*(_DWORD *)v1 == -1)
    {
      v7 = socket(2, 1, 6);
      *(_DWORD *)v1 = v7;
    }
    if (__darwin_check_fd_set_overflow(v7, &buf, 0))
      *(__int32_t *)((char *)buf.fds_bits + (((unint64_t)v7 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v7;
    v8 = *(_DWORD *)v1;
    for (i = *(int **)(v1 + 208); i; i = (int *)*((_QWORD *)i + 2))
    {
      v10 = *i;
      if ((_DWORD)v10 != -1)
      {
        if (__darwin_check_fd_set_overflow(*i, &buf, 0))
          *(__int32_t *)((char *)buf.fds_bits + ((v10 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v10;
        if (*i > v8)
          v8 = *i;
      }
    }
    pthread_rwlock_unlock((pthread_rwlock_t *)(v1 + 8));
    v21.tv_sec = 5;
    v21.tv_usec = 0;
    v11 = select(v8 + 1, &buf, 0, 0, &v21);
    if (!v11)
      goto LABEL_35;
    if (v11 != -1)
    {
      pthread_rwlock_rdlock((pthread_rwlock_t *)(v1 + 8));
      for (j = *(int **)(v1 + 208); j; j = (int *)*((_QWORD *)j + 2))
      {
        v13 = *j;
        if ((_DWORD)v13 != -1)
        {
          if (__darwin_check_fd_set_overflow(*j, &buf, 0))
          {
            if (((*(unsigned int *)((char *)buf.fds_bits + ((v13 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> v13) & 1) != 0)
            {
              objc_msgSend(*((id *)j + 1), "readyToRead");
              v14 = *j;
              if (__darwin_check_fd_set_overflow(*j, &buf, 0))
                *(__int32_t *)((char *)buf.fds_bits + (((unint64_t)v14 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) &= ~(1 << v14);
            }
          }
        }
      }
      pthread_rwlock_unlock((pthread_rwlock_t *)(v1 + 8));
      goto LABEL_35;
    }
    if (*__error() != 9)
      break;
LABEL_35:
    memset(&buf, 0, sizeof(buf));
    pthread_rwlock_rdlock((pthread_rwlock_t *)(v1 + 8));
    if (*(_BYTE *)(v1 + 4))
      goto LABEL_36;
  }
  ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (ErrorLogLevelForModule >= 3)
  {
    v18 = VRTraceErrorLogLevelToCSTR();
    v19 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      AVCPacketRelayDriverProc_cold_2(v18, v19);
  }
LABEL_37:
  CheckOutHandleDebug();
  return 0;
}

uint64_t AVCPacketRelayDriverThreadStop()
{
  uint64_t v0;
  uint64_t v1;
  pthread_rwlock_t *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE v9[12];
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  pthread_mutex_lock(&g_DriverHandleMutex);
  v0 = CheckInHandleDebug();
  if (v0)
  {
    v1 = v0;
    v2 = (pthread_rwlock_t *)(v0 + 8);
    pthread_rwlock_wrlock((pthread_rwlock_t *)(v0 + 8));
    *(_BYTE *)(v1 + 4) = 1;
    if (*(_DWORD *)v1 != -1)
      close(*(_DWORD *)v1);
    *(_DWORD *)v1 = -1;
    pthread_rwlock_unlock(v2);
    if (*(_QWORD *)(v1 + 216))
    {
      *(_QWORD *)v9 = 0xAAAAAAAAAAAAAAAALL;
      FigThreadJoin();
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      v3 = VRTraceErrorLogLevelToCSTR();
      v4 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v5 = *(_QWORD *)(v1 + 216);
        *(_DWORD *)v9 = 136315906;
        *(_QWORD *)&v9[4] = v3;
        v10 = 2080;
        v11 = "AVCPacketRelayDriverThreadStop";
        v12 = 1024;
        v13 = 122;
        v14 = 2048;
        v15 = v5;
        _os_log_impl(&dword_1D8A54000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AVCPacketRelayDriverThread: AVCPacketRelayDriverProc thread(%p) end...", v9, 0x26u);
      }
    }
    pthread_rwlock_wrlock(v2);
    v6 = *(_QWORD **)(v1 + 208);
    if (v6)
    {
      do
      {
        v7 = (_QWORD *)v6[2];
        free(v6);
        v6 = v7;
      }
      while (v7);
    }
    pthread_rwlock_unlock(v2);
    CheckOutHandleDebug();
    g_DriverHandle = 0xFFFFFFFFLL;
    pthread_mutex_unlock(&g_DriverHandleMutex);
    pthread_rwlock_destroy(v2);
    free((void *)v1);
    return 0;
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        AVCPacketRelayDriverThreadStop_cold_1();
    }
    *__error() = 13;
    pthread_mutex_unlock(&g_DriverHandleMutex);
    return 0xFFFFFFFFLL;
  }
}

uint64_t AVCPacketRelayDriverThreadAddFileDescriptorWithConnection(int a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  pthread_rwlock_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  int v16;
  uint64_t v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = CheckInHandleDebug();
  if (!v4)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        AVCPacketRelayDriverThreadAddFileDescriptorWithConnection_cold_1();
    }
    *__error() = 13;
    return 0xFFFFFFFFLL;
  }
  v5 = v4;
  v6 = malloc_type_calloc(1uLL, 0x18uLL, 0x10A0040C385777EuLL);
  if (!v6)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        AVCPacketRelayDriverThreadAddFileDescriptorWithConnection_cold_2();
    }
    CheckOutHandleDebug();
    return 0xFFFFFFFFLL;
  }
  v7 = v6;
  v6[1] = a2;
  *(_DWORD *)v6 = a1;
  v8 = (pthread_rwlock_t *)(v5 + 8);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(v5 + 8));
  if (*(_DWORD *)v5 != -1)
  {
    close(*(_DWORD *)v5);
    *(_DWORD *)v5 = -1;
  }
  v11 = *(_QWORD *)(v5 + 208);
  v10 = (_QWORD *)(v5 + 208);
  v9 = v11;
  if (v11)
  {
    do
    {
      v12 = v9;
      v9 = *(_QWORD *)(v9 + 16);
    }
    while (v9);
    v10 = (_QWORD *)(v12 + 16);
  }
  *v10 = v7;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    v13 = VRTraceErrorLogLevelToCSTR();
    v14 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      v16 = 136315906;
      v17 = v13;
      v18 = 2080;
      v19 = "AVCPacketRelayDriverThreadAddFileDescriptorWithConnection";
      v20 = 1024;
      v21 = 171;
      v22 = 1024;
      v23 = a1;
      _os_log_impl(&dword_1D8A54000, v14, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AVCPacketRelayDriverThread: now driving file descriptor %d", (uint8_t *)&v16, 0x22u);
    }
  }
  pthread_rwlock_unlock(v8);
  CheckOutHandleDebug();
  return 0;
}

uint64_t AVCPacketRelayDriverThreadRemoveFileDescriptor(int a1)
{
  uint64_t v2;
  uint64_t v3;
  pthread_rwlock_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  uint64_t v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = CheckInHandleDebug();
  if (v2)
  {
    v3 = v2;
    v4 = (pthread_rwlock_t *)(v2 + 8);
    pthread_rwlock_wrlock((pthread_rwlock_t *)(v2 + 8));
    v7 = *(_QWORD **)(v3 + 208);
    v6 = (_QWORD *)(v3 + 208);
    v5 = v7;
    if (v7)
    {
      if (*(_DWORD *)v5 == a1)
      {
        v8 = 0;
LABEL_7:
        if (v8)
          v9 = v8 + 2;
        else
          v9 = v6;
        *v9 = v5[2];
        if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
        {
          v10 = VRTraceErrorLogLevelToCSTR();
          v11 = *MEMORY[0x1E0CF2758];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
          {
            v12 = *(_DWORD *)v5;
            v16 = 136315906;
            v17 = v10;
            v18 = 2080;
            v19 = "AVCPacketRelayDriverThreadRemoveFileDescriptor";
            v20 = 1024;
            v21 = 204;
            v22 = 1024;
            v23 = v12;
            _os_log_impl(&dword_1D8A54000, v11, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AVCPacketRelayDriverThread: stop driving file descriptor %d", (uint8_t *)&v16, 0x22u);
          }
        }
        free(v5);
        goto LABEL_21;
      }
      while (1)
      {
        v8 = v5;
        v5 = (_QWORD *)v5[2];
        if (!v5)
          break;
        if (*(_DWORD *)v5 == a1)
          goto LABEL_7;
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
    {
      v14 = VRTraceErrorLogLevelToCSTR();
      v15 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v16 = 136315906;
        v17 = v14;
        v18 = 2080;
        v19 = "AVCPacketRelayDriverThreadRemoveFileDescriptor";
        v20 = 1024;
        v21 = 207;
        v22 = 1024;
        v23 = a1;
        _os_log_impl(&dword_1D8A54000, v15, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d AVCPacketRelayDriverThread: didn't find file descriptor %d", (uint8_t *)&v16, 0x22u);
      }
    }
LABEL_21:
    pthread_rwlock_unlock(v4);
    CheckOutHandleDebug();
    return 0;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      AVCPacketRelayDriverThreadRemoveFileDescriptor_cold_1();
  }
  *__error() = 13;
  return 0xFFFFFFFFLL;
}

uint64_t VCCaptionTaskInfo_SetHostTime(uint64_t result, double a2)
{
  if (result)
    *(double *)(result + 32) = a2;
  return result;
}

double VCCaptionTaskInfo_HostTime(uint64_t a1)
{
  if (a1)
    return *(double *)(a1 + 32);
  else
    return NAN;
}

void VCTimescaleWSOLAClass::VCTimescaleWSOLAClass(VCTimescaleWSOLAClass *this, unsigned int a2, unsigned int a3, float a4)
{
  unsigned int v6;
  unsigned int v7;
  signed int v8;
  int v9;
  float *v10;
  VCTimescaleWSOLAShiftBuffer *v11;

  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = 1065353216;
  v6 = 25 * a2 / 0x3E8 + 1;
  v7 = v6 & 0xFFFFFE;
  v6 >>= 1;
  *((_DWORD *)this + 2) = v7;
  *((_DWORD *)this + 3) = v6;
  *((_DWORD *)this + 4) = v6;
  *((_DWORD *)this + 5) = 5 * a2 / 0x3E8;
  v8 = (float)((float)((float)((float)a2 * 0.333) / 1000.0) + 0.5) & 0xFFFFFFFC;
  if (v8 <= 4)
    v8 = 4;
  v9 = (float)((float)((float)((float)a2 * 0.666) / 1000.0) + 0.5);
  if (v9 <= 1)
    v9 = 1;
  *((_DWORD *)this + 6) = v8;
  *((_DWORD *)this + 7) = v9;
  *((float *)this + 8) = (float)((float)(a4 * 0.000015259) * 30.0) * (float)(v7 / v9);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  v10 = (float *)operator new[]();
  *((_QWORD *)this + 11) = v10;
  vDSP_hann_window(v10, *((unsigned int *)this + 2), 0);
  v11 = (VCTimescaleWSOLAShiftBuffer *)operator new();
  VCTimescaleWSOLAShiftBuffer::VCTimescaleWSOLAShiftBuffer(v11, a3);
  *((_QWORD *)this + 9) = v11;
  *((_QWORD *)this + 10) = operator new[]();
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  *((_QWORD *)this + 14) = 0;
  VCTimescaleWSOLAShiftBuffer::clear(*((_QWORD *)this + 9));
}

void sub_1D8FFE2CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF087DC8](v1, 0x1080C40A085CBA5);
  _Unwind_Resume(a1);
}

void VCTimescaleWSOLAClass::~VCTimescaleWSOLAClass(VCTimescaleWSOLAClass *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    VCTimescaleWSOLAShiftBuffer::~VCTimescaleWSOLAShiftBuffer(*((void ***)this + 9));
    MEMORY[0x1DF087DC8](v2, 0x1080C40A085CBA5);
  }
  v3 = *((_QWORD *)this + 10);
  if (v3)
    MEMORY[0x1DF087DB0](v3, 0x1000C8052888210);
  v4 = *((_QWORD *)this + 11);
  if (v4)
    MEMORY[0x1DF087DB0](v4, 0x1000C8052888210);
}

void sub_1D8FFE370(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF087DC8](v1, 0x1080C40A085CBA5);
  _Unwind_Resume(a1);
}

uint64_t VCTimescaleWSOLAClass::minRequiredInputSamples(VCTimescaleWSOLAClass *this)
{
  float v1;
  unsigned int v2;
  unsigned int v3;
  float v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;

  v1 = *((float *)this + 1);
  v2 = *((_DWORD *)this + 3);
  v3 = *((_DWORD *)this + 5);
  v4 = (float)*((int *)this + 24);
  v5 = -(int)(float)((float)((float)((float)((float)v2 / v1) - (float)v3) - (float)v2) - v4);
  v6 = ((v5 & ~(v5 >> 31)) + 3) & 0xFFFFFFFC;
  v7 = v6 + *((_DWORD *)this + 2);
  v8 = v3 + v2 + (int)(float)((float)(ceilf((float)*((unsigned int *)this + 4) / v1) + (float)v6) - v4);
  if (v7 <= v8)
    return v8;
  else
    return v7;
}

uint64_t VCTimescaleWSOLAClass::setTimeout(uint64_t this, double a2)
{
  uint64_t v3;
  unint64_t v4;
  double v5;
  mach_timebase_info v6[2];

  v6[1] = *(mach_timebase_info *)MEMORY[0x1E0C80C00];
  if (vabdd_f64(*(double *)(this + 40), a2) > 0.000001)
  {
    v3 = this;
    *(double *)(this + 40) = a2;
    v6[0] = (mach_timebase_info)0xAAAAAAAAAAAAAAAALL;
    this = mach_timebase_info(v6);
    v5 = 1.0;
    if (!(_DWORD)this)
    {
      LODWORD(v4) = v6[0].denom;
      LODWORD(v5) = v6[0].numer;
      v5 = (double)*(unint64_t *)&v5 / ((double)v4 * 1000000000.0);
    }
    *(_QWORD *)(v3 + 56) = (unint64_t)(a2 / v5);
    *(_BYTE *)(v3 + 48) = 0;
  }
  return this;
}

BOOL VCTimescaleWSOLAClass::isTimeoutExpired(VCTimescaleWSOLAClass *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v6;
  NSObject *v7;
  char v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 7))
    return 0;
  v2 = mach_absolute_time();
  v3 = *((_QWORD *)this + 7);
  v4 = v2 - *((_QWORD *)this + 8);
  v5 = v4 > v3;
  if (v4 > v3)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      v6 = VRTraceErrorLogLevelToCSTR();
      v7 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      {
        v10 = *((_QWORD *)this + 7);
        v11 = 136316162;
        v12 = v6;
        v13 = 2080;
        v14 = "isTimeoutExpired";
        v15 = 1024;
        v16 = 165;
        v17 = 2048;
        v18 = v4;
        v19 = 2048;
        v20 = v10;
        _os_log_error_impl(&dword_1D8A54000, v7, OS_LOG_TYPE_ERROR, " [%s] %s:%d Wsola Timeout: %lld > %lld!!!!!!!!\n", (uint8_t *)&v11, 0x30u);
      }
    }
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  *((_BYTE *)this + 48) = v8;
  return v5;
}

uint64_t _VCTimescaleWSOLA_SearchMinimumCostPosition(VCTimescaleWSOLAClass *a1, unsigned int *a2, unsigned int *a3, int a4, unsigned int a5, unsigned int *a6, float *a7, float *a8)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v14;
  int v15;
  float v19;
  int v20;
  float v21;
  float32x4_t v22;
  unsigned int v23;
  unsigned int i;
  float32x4_t v25;
  float v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  int v30;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  uint64_t v34;
  NSObject *v35;
  NSObject *v36;
  int v37;
  uint64_t v38;
  NSObject *v39;
  NSObject *v40;
  int v41;
  int v43;
  int v44;
  unsigned int v46;
  int v47;
  float v48;
  uint8_t buf[4];
  uint64_t v50;
  __int16 v51;
  const char *v52;
  __int16 v53;
  int v54;
  __int16 v55;
  _BYTE v56[10];
  _DWORD v57[4];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v8 = *((_DWORD *)a1 + 2);
  v9 = *a2;
  v10 = *a3;
  if (v9 <= a5 && v9 >= v10)
  {
    *a6 = v8;
    return v9;
  }
  v14 = *((_DWORD *)a1 + 3);
  v15 = v14 - a4;
  v44 = v14;
  if (v10 > a5)
  {
    v9 = *a3;
    goto LABEL_31;
  }
  v19 = *((float *)a1 + 8);
  v20 = 4 * *((_DWORD *)a1 + 7);
  v47 = -v14;
  v21 = 1.0e32;
  v9 = *a3;
  v46 = *((_DWORD *)a1 + 2);
  while (1)
  {
    v22 = 0uLL;
    v23 = v8 - ((v15 + v10) & ~((v15 + (int)v10) >> 31));
    if (v23)
    {
      for (i = 0; i < v23; i += v20)
      {
        v25 = vsubq_f32(*(float32x4_t *)&a7[i], *(float32x4_t *)&a8[v47 + (_DWORD)v10 + i]);
        v22 = vmlaq_f32(v22, v25, v25);
      }
    }
    v26 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1)))).f32[0];
    if (v26 < v21)
      break;
    v30 = v10;
LABEL_22:
    v10 = (v30 + *((_DWORD *)a1 + 6));
    *a3 = v10;
    if (v10 > a5)
      goto LABEL_31;
  }
  v48 = v26;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    v27 = VRTraceErrorLogLevelToCSTR();
    v28 = *MEMORY[0x1E0CF2758];
    v29 = *MEMORY[0x1E0CF2758];
    if (*MEMORY[0x1E0CF2748])
    {
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        v50 = v27;
        v51 = 2080;
        v52 = "_VCTimescaleWSOLA_SearchMinimumCostPosition";
        v53 = 1024;
        v54 = 217;
        v55 = 2048;
        *(double *)v56 = v48;
        _os_log_impl(&dword_1D8A54000, v28, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %.3f ", buf, 0x26u);
      }
    }
    else if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v50 = v27;
      v51 = 2080;
      v52 = "_VCTimescaleWSOLA_SearchMinimumCostPosition";
      v53 = 1024;
      v54 = 217;
      v55 = 2048;
      *(double *)v56 = v48;
      _os_log_debug_impl(&dword_1D8A54000, v28, OS_LOG_TYPE_DEBUG, " [%s] %s:%d %.3f ", buf, 0x26u);
    }
  }
  v21 = v48;
  if (v48 >= v19)
  {
    v30 = *a3;
    v9 = v10;
    v8 = v46;
    goto LABEL_22;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    v31 = VRTraceErrorLogLevelToCSTR();
    v32 = *MEMORY[0x1E0CF2758];
    v33 = *MEMORY[0x1E0CF2758];
    if (*MEMORY[0x1E0CF2748])
    {
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136316162;
        v50 = v31;
        v51 = 2080;
        v52 = "_VCTimescaleWSOLA_SearchMinimumCostPosition";
        v53 = 1024;
        v54 = 219;
        v55 = 2048;
        *(double *)v56 = v19;
        *(_WORD *)&v56[8] = 1024;
        v57[0] = a5 - v10;
        _os_log_impl(&dword_1D8A54000, v32, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d <%.3f Search Stop[%d]", buf, 0x2Cu);
      }
    }
    else if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136316162;
      v50 = v31;
      v51 = 2080;
      v52 = "_VCTimescaleWSOLA_SearchMinimumCostPosition";
      v53 = 1024;
      v54 = 219;
      v55 = 2048;
      *(double *)v56 = v19;
      *(_WORD *)&v56[8] = 1024;
      v57[0] = a5 - v10;
      _os_log_debug_impl(&dword_1D8A54000, v32, OS_LOG_TYPE_DEBUG, " [%s] %s:%d <%.3f Search Stop[%d]", buf, 0x2Cu);
    }
  }
  v9 = v10;
  v8 = v46;
LABEL_31:
  *a6 = v8 - ((v15 + v9) & ~((v15 + (int)v9) >> 31));
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    v34 = VRTraceErrorLogLevelToCSTR();
    v35 = *MEMORY[0x1E0CF2758];
    v36 = *MEMORY[0x1E0CF2758];
    if (*MEMORY[0x1E0CF2748])
    {
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        v37 = v9 - v44 + *a6;
        *(_DWORD *)buf = 136316418;
        v50 = v34;
        v51 = 2080;
        v52 = "_VCTimescaleWSOLA_SearchMinimumCostPosition";
        v53 = 1024;
        v54 = 229;
        v55 = 1024;
        *(_DWORD *)v56 = v9;
        *(_WORD *)&v56[4] = 1024;
        *(_DWORD *)&v56[6] = v9 - v44;
        LOWORD(v57[0]) = 1024;
        *(_DWORD *)((char *)v57 + 2) = v37;
        _os_log_impl(&dword_1D8A54000, v35, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Found match at position=%d star=%d candidate=%d", buf, 0x2Eu);
      }
    }
    else if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    {
      v43 = v9 - v44 + *a6;
      *(_DWORD *)buf = 136316418;
      v50 = v34;
      v51 = 2080;
      v52 = "_VCTimescaleWSOLA_SearchMinimumCostPosition";
      v53 = 1024;
      v54 = 229;
      v55 = 1024;
      *(_DWORD *)v56 = v9;
      *(_WORD *)&v56[4] = 1024;
      *(_DWORD *)&v56[6] = v9 - v44;
      LOWORD(v57[0]) = 1024;
      *(_DWORD *)((char *)v57 + 2) = v43;
      _os_log_debug_impl(&dword_1D8A54000, v35, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Found match at position=%d star=%d candidate=%d", buf, 0x2Eu);
    }
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    v38 = VRTraceErrorLogLevelToCSTR();
    v39 = *MEMORY[0x1E0CF2758];
    v40 = *MEMORY[0x1E0CF2758];
    if (*MEMORY[0x1E0CF2748])
    {
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        v41 = *a6;
        *(_DWORD *)buf = 136315906;
        v50 = v38;
        v51 = 2080;
        v52 = "_VCTimescaleWSOLA_SearchMinimumCostPosition";
        v53 = 1024;
        v54 = 230;
        v55 = 1024;
        *(_DWORD *)v56 = v41;
        _os_log_impl(&dword_1D8A54000, v39, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Candidate length=%d", buf, 0x22u);
      }
    }
    else if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
    {
      _VCTimescaleWSOLA_SearchMinimumCostPosition();
    }
  }
  return v9;
}

BOOL _VCTimescaleWSOLA_PerformAdaptation(VCTimescaleWSOLAClass *a1, float *a2, unsigned int a3, float *a4, unsigned int a5)
{
  float v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  float v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  float v16;
  float v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  float *v26;
  NSObject *v27;
  NSObject *v28;
  int v29;
  uint64_t v30;
  NSObject *v31;
  NSObject *v32;
  _BOOL8 result;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  float *v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  signed int v50;
  unsigned int v51;
  int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  NSObject *v57;
  NSObject *v58;
  uint64_t v59;
  NSObject *v60;
  NSObject *v61;
  uint64_t v62;
  NSObject *v63;
  NSObject *v64;
  unsigned int v65;
  float *v66;
  unsigned int v67;
  uint64_t v68;
  float *v69;
  float v70;
  uint64_t v71;
  uint64_t v72;
  float *v73;
  int v74;
  float v75;
  NSObject *v76;
  NSObject *v77;
  NSObject *v78;
  NSObject *v79;
  uint64_t v80;
  int v81;
  float *v82;
  uint64_t v83;
  int v84;
  unsigned int *v85;
  float v86;
  unsigned int v87;
  int v88;
  uint64_t v89;
  NSObject *v90;
  NSObject *v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  NSObject *v95;
  NSObject *v96;
  _BOOL4 v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int v114;
  float *v115;
  uint64_t v116;
  unsigned int v117;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  uint8_t buf[4];
  uint64_t v123;
  __int16 v124;
  const char *v125;
  __int16 v126;
  int v127;
  __int16 v128;
  unsigned int v129;
  __int16 v130;
  int v131;
  __int16 v132;
  unsigned int v133;
  __int16 v134;
  unsigned int v135;
  __int16 v136;
  unsigned int v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E0C80C00];
  v6 = *((float *)a1 + 1);
  v8 = *((unsigned int *)a1 + 2);
  v7 = *((_DWORD *)a1 + 3);
  v9 = *((unsigned int *)a1 + 4);
  v10 = *((_DWORD *)a1 + 5);
  v115 = (float *)*((_QWORD *)a1 + 11);
  v11 = *((_DWORD *)a1 + 24);
  v12 = (float)v11;
  v13 = -(int)(float)((float)((float)((float)((float)v7 / v6) - (float)v10) - (float)v7) - (float)v11);
  v14 = ((v13 & ~(v13 >> 31)) + 3) & 0xFFFFFFFC;
  v15 = v14 + v7;
  v121 = v14 + v7;
  v16 = (float)v9 / v6;
  v17 = (float)(ceilf(v16) + (float)v14) - (float)v11;
  v18 = (int)v17;
  if (v14 + v8 <= a3 && v10 + v7 + v18 <= a3)
  {
    v113 = v9;
    v114 = v7;
    v111 = v10;
    v26 = (float *)*((_QWORD *)a1 + 10);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      v116 = VRTraceErrorLogLevelToCSTR();
      v27 = *MEMORY[0x1E0CF2758];
      v28 = *MEMORY[0x1E0CF2758];
      if (*MEMORY[0x1E0CF2748])
      {
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315906;
          v123 = v116;
          v124 = 2080;
          v125 = "_VCTimescaleWSOLA_PerformAdaptation";
          v126 = 1024;
          v127 = 296;
          v128 = 1024;
          v129 = a3;
          _os_log_impl(&dword_1D8A54000, v27, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Nin:%d", buf, 0x22u);
        }
      }
      else if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        _VCTimescaleWSOLA_PerformAdaptation();
      }
    }
    v34 = v113;
    v35 = a3;
    v36 = v114;
    if ((_DWORD)v8 == (_DWORD)v113)
    {
      v37 = 0;
    }
    else
    {
      v38 = (v8 - v113);
      v39 = v114;
      v40 = v14;
      v41 = v26;
      do
      {
        *v41++ = v115[v39++] * a2[v40++];
        --v38;
      }
      while (v38);
      v37 = v8 - v113;
    }
    v42 = v18;
    if (v37 < v8)
    {
      bzero(&v26[v37], 4 * (v8 + ~v37) + 4);
      v34 = v113;
      v36 = v114;
      v35 = a3;
      v42 = v18;
    }
    if (v15 <= v35)
    {
      v117 = v121;
      v46 = v121 + v36;
      if (v121 + v36 <= v35)
      {
        v47 = 0;
        v48 = 0;
        v101 = -v36;
        v45 = v14;
        v102 = (v8 - v113);
        v104 = v14;
        while (1)
        {
          v49 = v8;
          v50 = v42 + v111;
          v51 = v47 + v34;
          if (v42 + v111 + v36 > v35 || v51 >= a5)
          {
            v44 = v47;
            v43 = v104;
            goto LABEL_92;
          }
          v106 = v46;
          v53 = v11;
          v54 = v45;
          v109 = v47;
          v112 = v42;
          if (VCTimescaleWSOLAClass::isTimeoutExpired(a1))
          {
            v44 = v109;
            v43 = v104;
            v45 = v54;
            v11 = v53;
            goto LABEL_92;
          }
          v120 = (v112 - v111) & ~((int)(v112 - v111) >> 31) & 0x7FFFFFFC;
          if (v50 >= (int)a3)
            v55 = a3;
          else
            v55 = v50;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            v56 = VRTraceErrorLogLevelToCSTR();
            v57 = *MEMORY[0x1E0CF2758];
            v58 = *MEMORY[0x1E0CF2758];
            if (*MEMORY[0x1E0CF2748])
            {
              if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315906;
                v123 = v56;
                v124 = 2080;
                v125 = "_VCTimescaleWSOLA_PerformAdaptation";
                v126 = 1024;
                v127 = 323;
                v128 = 1024;
                v129 = v51;
                _os_log_impl(&dword_1D8A54000, v57, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d ------- Wsola Search:%d ---------", buf, 0x22u);
              }
            }
            else if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315906;
              v123 = v56;
              v124 = 2080;
              v125 = "_VCTimescaleWSOLA_PerformAdaptation";
              v126 = 1024;
              v127 = 323;
              v128 = 1024;
              v129 = v51;
              _os_log_debug_impl(&dword_1D8A54000, v57, OS_LOG_TYPE_DEBUG, " [%s] %s:%d ------- Wsola Search:%d ---------", buf, 0x22u);
            }
          }
          v8 = v49;
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            v59 = VRTraceErrorLogLevelToCSTR();
            v60 = *MEMORY[0x1E0CF2758];
            v61 = *MEMORY[0x1E0CF2758];
            if (*MEMORY[0x1E0CF2748])
            {
              if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136316418;
                v123 = v59;
                v124 = 2080;
                v125 = "_VCTimescaleWSOLA_PerformAdaptation";
                v126 = 1024;
                v127 = 324;
                v128 = 1024;
                v129 = v117;
                v130 = 1024;
                v131 = v117 - v114;
                v132 = 1024;
                v133 = v106;
                _os_log_impl(&dword_1D8A54000, v60, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Reference window centered at %d  [%d %d]", buf, 0x2Eu);
              }
            }
            else if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136316418;
              v123 = v59;
              v124 = 2080;
              v125 = "_VCTimescaleWSOLA_PerformAdaptation";
              v126 = 1024;
              v127 = 324;
              v128 = 1024;
              v129 = v117;
              v130 = 1024;
              v131 = v117 - v114;
              v132 = 1024;
              v133 = v106;
              _os_log_debug_impl(&dword_1D8A54000, v60, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Reference window centered at %d  [%d %d]", buf, 0x2Eu);
            }
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            v62 = VRTraceErrorLogLevelToCSTR();
            v63 = *MEMORY[0x1E0CF2758];
            v64 = *MEMORY[0x1E0CF2758];
            if (*MEMORY[0x1E0CF2748])
            {
              if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136316418;
                v123 = v62;
                v124 = 2080;
                v125 = "_VCTimescaleWSOLA_PerformAdaptation";
                v126 = 1024;
                v127 = 325;
                v128 = 1024;
                v129 = v112;
                v130 = 1024;
                v131 = (v112 - v111) & ~((int)(v112 - v111) >> 31) & 0x7FFFFFFC;
                v132 = 1024;
                v133 = v55;
                _os_log_impl(&dword_1D8A54000, v63, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Searching around %d [%d %d]", buf, 0x2Eu);
              }
            }
            else if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136316418;
              v123 = v62;
              v124 = 2080;
              v125 = "_VCTimescaleWSOLA_PerformAdaptation";
              v126 = 1024;
              v127 = 325;
              v128 = 1024;
              v129 = v112;
              v130 = 1024;
              v131 = (v112 - v111) & ~((int)(v112 - v111) >> 31) & 0x7FFFFFFC;
              v132 = 1024;
              v133 = v55;
              _os_log_debug_impl(&dword_1D8A54000, v63, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Searching around %d [%d %d]", buf, 0x2Eu);
            }
          }
          v119 = -1431655766;
          v65 = _VCTimescaleWSOLA_SearchMinimumCostPosition(a1, &v121, &v120, a3, v55, &v119, &a2[v117 - v114], a2);
          v66 = v115;
          if ((_DWORD)v8)
          {
            v67 = v101 + v65;
            v68 = v8;
            v69 = v26;
            do
            {
              v70 = *v66++;
              *v69 = *v69 + (float)(v70 * a2[v67]);
              ++v69;
              ++v67;
              --v68;
            }
            while (v68);
          }
          v108 = v65;
          v117 = v65 + v113;
          v121 = v65 + v113;
          if (v113 >= v119)
            v71 = v119;
          else
            v71 = v113;
          if ((_DWORD)v71)
          {
            v72 = v71;
            v73 = v26;
            v74 = v48;
            do
            {
              v75 = *v73++;
              a4[v74++] = v75;
              --v72;
            }
            while (v72);
          }
          v107 = v71 + v109;
          if ((int)VRTraceGetErrorLogLevelForModule() > 7)
          {
            v103 = VRTraceErrorLogLevelToCSTR();
            v76 = *MEMORY[0x1E0CF2758];
            v77 = *MEMORY[0x1E0CF2758];
            if (*MEMORY[0x1E0CF2748])
            {
              if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136316162;
                v123 = v103;
                v124 = 2080;
                v125 = "_VCTimescaleWSOLA_PerformAdaptation";
                v126 = 1024;
                v127 = 349;
                v128 = 1024;
                v129 = v109;
                v130 = 1024;
                v131 = v71 + v109;
                _os_log_impl(&dword_1D8A54000, v76, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Wrote output [%d %d]", buf, 0x28u);
              }
            }
            else if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136316162;
              v123 = v103;
              v124 = 2080;
              v125 = "_VCTimescaleWSOLA_PerformAdaptation";
              v126 = 1024;
              v127 = 349;
              v128 = 1024;
              v129 = v109;
              v130 = 1024;
              v131 = v71 + v109;
              _os_log_debug_impl(&dword_1D8A54000, v76, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Wrote output [%d %d]", buf, 0x28u);
            }
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
          {
            v110 = VRTraceErrorLogLevelToCSTR();
            v78 = *MEMORY[0x1E0CF2758];
            v79 = *MEMORY[0x1E0CF2758];
            if (*MEMORY[0x1E0CF2748])
            {
              if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136316418;
                v123 = v110;
                v124 = 2080;
                v125 = "_VCTimescaleWSOLA_PerformAdaptation";
                v126 = 1024;
                v127 = 350;
                v128 = 1024;
                v129 = v108;
                v130 = 1024;
                v131 = v117;
                v132 = 1024;
                v133 = a3;
                _os_log_impl(&dword_1D8A54000, v78, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d lastIdx:%d refIdx:%d Nin:%d", buf, 0x2Eu);
              }
            }
            else if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136316418;
              v123 = v110;
              v124 = 2080;
              v125 = "_VCTimescaleWSOLA_PerformAdaptation";
              v126 = 1024;
              v127 = 350;
              v128 = 1024;
              v129 = v108;
              v130 = 1024;
              v131 = v117;
              v132 = 1024;
              v133 = a3;
              _os_log_debug_impl(&dword_1D8A54000, v78, OS_LOG_TYPE_DEBUG, " [%s] %s:%d lastIdx:%d refIdx:%d Nin:%d", buf, 0x2Eu);
            }
          }
          v80 = v102;
          v34 = v113;
          v81 = v113;
          v82 = v26;
          if ((_DWORD)v8 != (_DWORD)v113)
          {
            do
            {
              *v82++ = v26[v81++];
              --v80;
            }
            while (v80);
          }
          v83 = v113;
          v84 = v102;
          v35 = a3;
          v36 = v114;
          v45 = v108;
          if ((_DWORD)v113)
          {
            do
            {
              v26[v84++] = 0.0;
              --v83;
            }
            while (v83);
          }
          v43 = v104;
          v11 = v108 - v112;
          if (v108 + v114 > a3)
            break;
          v42 = v112 + (int)(float)(v16 + 0.5);
          v48 += v71;
          v46 = v117 + v114;
          v44 = v107;
          v47 = v107;
          if (v117 + v114 > a3)
            goto LABEL_92;
        }
        v44 = v107;
      }
      else
      {
        v45 = v14;
        v44 = 0;
        v43 = v45;
      }
LABEL_92:
      v12 = (float)v11;
    }
    else
    {
      v43 = v14;
      v44 = 0;
      v45 = v43;
    }
    *((_DWORD *)a1 + 25) = v44;
    v85 = (unsigned int *)((char *)a1 + 100);
    *((_DWORD *)a1 + 24) = v11;
    v86 = (float)((float)((float)((float)*((unsigned int *)a1 + 3) / v6) - (float)*((unsigned int *)a1 + 5))
                - (float)*((unsigned int *)a1 + 3))
        - v12;
    v87 = ((-(int)v86 & ~(-(int)v86 >> 31)) + 3) & 0xFFFFFFFC;
    v88 = v43;
    *((_DWORD *)a1 + 26) = v43;
    *((_DWORD *)a1 + 27) = v87;
    *((_DWORD *)a1 + 28) = v45 - v87;
    *((_DWORD *)a1 + 29) = v45;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      v89 = VRTraceErrorLogLevelToCSTR();
      v90 = *MEMORY[0x1E0CF2758];
      v91 = *MEMORY[0x1E0CF2758];
      if (*MEMORY[0x1E0CF2748])
      {
        if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
        {
          v92 = *((_DWORD *)a1 + 27);
          v93 = *((_DWORD *)a1 + 28);
          *(_DWORD *)buf = 136316930;
          v123 = v89;
          v124 = 2080;
          v125 = "_VCTimescaleWSOLA_PerformAdaptation";
          v126 = 1024;
          v127 = 369;
          v128 = 1024;
          v129 = v11;
          v130 = 1024;
          v131 = v88;
          v132 = 1024;
          v133 = v92;
          v134 = 1024;
          v135 = v93;
          v136 = 1024;
          v137 = v44;
          _os_log_impl(&dword_1D8A54000, v90, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Wsola search stopped:%d off:%d offNext:%d inStep:%d Nwrit:%d", buf, 0x3Au);
        }
      }
      else if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
      {
        v99 = *((_DWORD *)a1 + 27);
        v100 = *((_DWORD *)a1 + 28);
        *(_DWORD *)buf = 136316930;
        v123 = v89;
        v124 = 2080;
        v125 = "_VCTimescaleWSOLA_PerformAdaptation";
        v126 = 1024;
        v127 = 369;
        v128 = 1024;
        v129 = v11;
        v130 = 1024;
        v131 = v88;
        v132 = 1024;
        v133 = v99;
        v134 = 1024;
        v135 = v100;
        v136 = 1024;
        v137 = v44;
        _os_log_debug_impl(&dword_1D8A54000, v90, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Wsola search stopped:%d off:%d offNext:%d inStep:%d Nwrit:%d", buf, 0x3Au);
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      v94 = VRTraceErrorLogLevelToCSTR();
      v95 = *MEMORY[0x1E0CF2758];
      v96 = *MEMORY[0x1E0CF2758];
      if (*MEMORY[0x1E0CF2748])
      {
        v97 = os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT);
        result = 0;
        if (!v97)
          return result;
        v98 = *v85;
        *(_DWORD *)buf = 136315906;
        v123 = v94;
        v124 = 2080;
        v125 = "_VCTimescaleWSOLA_PerformAdaptation";
        v126 = 1024;
        v127 = 370;
        v128 = 1024;
        v129 = v98;
        _os_log_impl(&dword_1D8A54000, v95, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Wsola output size: %d =========", buf, 0x22u);
      }
      else
      {
        result = os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG);
        if (!result)
          return result;
        _VCTimescaleWSOLA_PerformAdaptation();
      }
    }
    return 0;
  }
  v19 = v7;
  v20 = (int)v17;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    v21 = VRTraceErrorLogLevelToCSTR();
    v22 = *MEMORY[0x1E0CF2758];
    v23 = *MEMORY[0x1E0CF2758];
    if (*MEMORY[0x1E0CF2748])
    {
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136316418;
        v123 = v21;
        v124 = 2080;
        v125 = "_VCTimescaleWSOLA_PerformAdaptation";
        v126 = 1024;
        v127 = 285;
        v128 = 1024;
        v129 = a3;
        v130 = 1024;
        v131 = v14 + v8;
        v132 = 1024;
        v133 = v10 + v19 + v20;
        _os_log_impl(&dword_1D8A54000, v22, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Nin:%d < %d or %d", buf, 0x2Eu);
      }
    }
    else if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136316418;
      v123 = v21;
      v124 = 2080;
      v125 = "_VCTimescaleWSOLA_PerformAdaptation";
      v126 = 1024;
      v127 = 285;
      v128 = 1024;
      v129 = a3;
      v130 = 1024;
      v131 = v14 + v8;
      v132 = 1024;
      v133 = v10 + v19 + v20;
      _os_log_debug_impl(&dword_1D8A54000, v22, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Nin:%d < %d or %d", buf, 0x2Eu);
    }
  }
  v29 = v8;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    v30 = VRTraceErrorLogLevelToCSTR();
    v31 = *MEMORY[0x1E0CF2758];
    v32 = *MEMORY[0x1E0CF2758];
    if (*MEMORY[0x1E0CF2748])
    {
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136316674;
        v123 = v30;
        v124 = 2080;
        v125 = "_VCTimescaleWSOLA_PerformAdaptation";
        v126 = 1024;
        v127 = 286;
        v128 = 1024;
        v129 = v14;
        v130 = 1024;
        v131 = v29;
        v132 = 1024;
        v133 = v20;
        v134 = 1024;
        v135 = v10;
        _os_log_impl(&dword_1D8A54000, v31, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d offset:%d Nwin:%d searchCenter:%d delta:%d", buf, 0x34u);
      }
    }
    else if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136316674;
      v123 = v30;
      v124 = 2080;
      v125 = "_VCTimescaleWSOLA_PerformAdaptation";
      v126 = 1024;
      v127 = 286;
      v128 = 1024;
      v129 = v14;
      v130 = 1024;
      v131 = v29;
      v132 = 1024;
      v133 = v20;
      v134 = 1024;
      v135 = v10;
      _os_log_debug_impl(&dword_1D8A54000, v31, OS_LOG_TYPE_DEBUG, " [%s] %s:%d offset:%d Nwin:%d searchCenter:%d delta:%d", buf, 0x34u);
    }
  }
  *((_DWORD *)a1 + 25) = 0;
  result = 1;
  *((_QWORD *)a1 + 14) = 0;
  return result;
}

uint64_t VCTimescaleWSOLA_Initialize(uint64_t a1, unsigned int a2, uint64_t a3, int a4, char a5)
{
  VCTimescaleWSOLAClass *v9;
  unsigned int v10;
  VCTimescaleWSOLAClass *v11;
  __int128 v12;
  uint64_t v13;
  AudioStreamBasicDescription inDestinationFormat;
  AudioStreamBasicDescription inSourceFormat;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v9 = *(VCTimescaleWSOLAClass **)a1;
  if (*(_QWORD *)a1)
  {
    VCTimescaleWSOLAClass::~VCTimescaleWSOLAClass(*(VCTimescaleWSOLAClass **)a1);
    MEMORY[0x1DF087DC8](v9, 0x10A0C409407E75BLL);
  }
  v10 = (int)((double)a2 * 0.06);
  *(_WORD *)(a1 + 11570) = v10;
  *(_WORD *)(a1 + 11568) = 2 * v10;
  if (v10 >= 0xB41 && (int)VRTraceGetErrorLogLevelForModule() >= 2)
  {
    VRTraceErrorLogLevelToCSTR();
    if ((VRTraceIsOSFaultDisabled() & 1) != 0)
    {
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCTimescaleWSOLA_Initialize_cold_4();
    }
    else if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_FAULT))
    {
      VCTimescaleWSOLA_Initialize_cold_5();
    }
  }
  *(_BYTE *)(a1 + 11572) = a5;
  *(double *)(a1 + 11592) = VCDefaults_GetDoubleValueForKey(CFSTR("wsolaStartCompressionThreshold"), 1.0);
  *(double *)(a1 + 11608) = VCDefaults_GetDoubleValueForKey(CFSTR("wsolaCompressionHysteresis"), 0.300000012);
  *(double *)(a1 + 11600) = VCDefaults_GetDoubleValueForKey(CFSTR("wsolaStopCompressionThreshold"), 0.1);
  v11 = (VCTimescaleWSOLAClass *)operator new();
  VCTimescaleWSOLAClass::VCTimescaleWSOLAClass(v11, a2, *(unsigned __int16 *)(a1 + 11568), 1.0);
  *(_QWORD *)a1 = v11;
  if (a2)
    return 0;
  *(_BYTE *)(a1 + 11573) = 1;
  inSourceFormat.mSampleRate = NAN;
  *(_QWORD *)&v12 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&inSourceFormat.mFormatID = v12;
  *(_OWORD *)&inSourceFormat.mBytesPerFrame = v12;
  inDestinationFormat.mSampleRate = NAN;
  *(_OWORD *)&inDestinationFormat.mFormatID = v12;
  *(_OWORD *)&inDestinationFormat.mBytesPerFrame = v12;
  Format_Short((uint64_t)&inSourceFormat, 1, a4);
  Format_Float((uint64_t)&inDestinationFormat, 1, a4);
  if (AudioConverterNew(&inSourceFormat, &inDestinationFormat, (AudioConverterRef *)(a1 + 11576)))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCTimescaleWSOLA_Initialize_cold_3();
    }
  }
  else
  {
    if (!AudioConverterNew(&inDestinationFormat, &inSourceFormat, (AudioConverterRef *)(a1 + 11584)))
      return 0;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCTimescaleWSOLA_Initialize_cold_2();
    }
  }
  v13 = 2147483650;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCTimescaleWSOLA_Initialize_cold_1();
  }
  return v13;
}

void sub_1D9000048(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF087DC8](v1, 0x10A0C409407E75BLL);
  _Unwind_Resume(a1);
}

OpaqueAudioConverter *VCTimescaleWSOLA_Finalize(VCTimescaleWSOLAClass **a1)
{
  VCTimescaleWSOLAClass *v2;
  OpaqueAudioConverter *v3;
  OpaqueAudioConverter *result;

  v2 = *a1;
  if (*a1)
  {
    VCTimescaleWSOLAClass::~VCTimescaleWSOLAClass(*a1);
    MEMORY[0x1DF087DC8](v2, 0x10A0C409407E75BLL);
  }
  v3 = a1[1447];
  if (v3)
    AudioConverterDispose(v3);
  result = a1[1448];
  if (result)
    return (OpaqueAudioConverter *)AudioConverterDispose(result);
  return result;
}

void sub_1D90000E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1DF087DC8](v1, 0x10A0C409407E75BLL);
  _Unwind_Resume(a1);
}

uint64_t VCTimescaleWSOLA_Adapt(uint64_t *a1, float *a2, unsigned int a3, float *a4, unsigned int *a5, uint64_t a6, unsigned int a7, float a8, double a9)
{
  uint64_t v17;
  float v18;
  unsigned int v19;
  unsigned int v20;
  _DWORD *v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  float *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  unsigned int v33;
  int v35;
  uint64_t v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  unsigned int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v17 = *a1;
  *(_QWORD *)(v17 + 64) = mach_absolute_time();
  VCTimescaleWSOLAClass::setTimeout(v17, a9);
  if (*(float *)(v17 + 4) == a8)
  {
    v20 = *(_DWORD *)(v17 + 112);
  }
  else
  {
    *(float *)(v17 + 4) = a8;
    v18 = (float)((float)((float)((float)*(unsigned int *)(v17 + 12) / a8) - (float)*(unsigned int *)(v17 + 20))
                - (float)*(unsigned int *)(v17 + 12))
        - (float)*(int *)(v17 + 96);
    v19 = ((-(int)v18 & ~(-(int)v18 >> 31)) + 3) & 0xFFFFFFFC;
    v20 = (*(_DWORD *)(v17 + 116) - v19) & ~((int)(*(_DWORD *)(v17 + 116) - v19) >> 31);
    *(_DWORD *)(v17 + 108) = v19;
    *(_DWORD *)(v17 + 112) = v20;
  }
  VCTimescaleWSOLAShiftBuffer::removeSamples(*(void ***)(v17 + 72), v20);
  v21 = *(_DWORD **)(v17 + 72);
  if (a7 && !v21[3])
  {
    v22 = *(_DWORD *)(v17 + 108);
    if (a7 < v22)
    {
      v23 = 0;
      if (!a3)
        goto LABEL_12;
      goto LABEL_11;
    }
    VCTimescaleWSOLAShiftBuffer::appendSamples(v21, (float *)(a6 + 4 * (a7 - v22)), v22);
    v21 = *(_DWORD **)(v17 + 72);
  }
  v23 = 1;
  if (a3)
  {
LABEL_11:
    VCTimescaleWSOLAShiftBuffer::appendSamples(v21, a2, a3);
    v21 = *(_DWORD **)(v17 + 72);
  }
LABEL_12:
  if (*a5 < (float)(*(float *)(v17 + 4) * (float)(v21[3] - *(_DWORD *)(v17 + 108)))
    && (int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCTimescaleWSOLA_Adapt_cold_2();
  }
  v24 = VCTimescaleWSOLAShiftBuffer::count(*(VCTimescaleWSOLAShiftBuffer **)(v17 + 72));
  if (v24 >= VCTimescaleWSOLAClass::minRequiredInputSamples((VCTimescaleWSOLAClass *)v17))
    v25 = v23;
  else
    v25 = 0;
  v26 = *(_QWORD *)(v17 + 72);
  v27 = *(float **)v26;
  v28 = *(unsigned int *)(v26 + 12);
  if ((v25 & 1) != 0)
  {
    v29 = _VCTimescaleWSOLA_PerformAdaptation((VCTimescaleWSOLAClass *)v17, v27, v28, a4, *a5);
    *a5 = *(_DWORD *)(v17 + 100);
    goto LABEL_26;
  }
  memcpy(a4, v27, 4 * v28);
  v30 = *(_QWORD *)(v17 + 72);
  *a5 = *(_DWORD *)(v30 + 12);
  *(_QWORD *)(v17 + 96) = 0;
  *(_DWORD *)(v17 + 104) = 0;
  *(_QWORD *)(v17 + 112) = 0;
  VCTimescaleWSOLAShiftBuffer::clear(v30);
  if ((int)VRTraceGetErrorLogLevelForModule() < 8)
    goto LABEL_25;
  v31 = VRTraceErrorLogLevelToCSTR();
  v32 = *MEMORY[0x1E0CF2758];
  if (*MEMORY[0x1E0CF2748])
  {
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      v33 = *a5;
      v35 = 136315906;
      v36 = v31;
      v37 = 2080;
      v38 = "VCTimescaleWSOLA_Adapt";
      v39 = 1024;
      v40 = 532;
      v41 = 1024;
      v42 = v33;
      _os_log_impl(&dword_1D8A54000, v32, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Copied Output: %d", (uint8_t *)&v35, 0x22u);
    }
LABEL_25:
    v29 = 2;
    goto LABEL_26;
  }
  v29 = 2;
  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEBUG))
    VCTimescaleWSOLA_Adapt_cold_1();
LABEL_26:
  if (*(_BYTE *)(v17 + 48))
    return 3;
  else
    return v29;
}

uint64_t VCTimescaleWSOLA_WindowTail(uint64_t *a1, void *a2, _DWORD *a3)
{
  uint64_t v5;
  float v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;

  v5 = *a1;
  *(_DWORD *)(v5 + 4) = 1065353216;
  v6 = (float)((float)((float)*(unsigned int *)(v5 + 12) - (float)*(unsigned int *)(v5 + 20))
             - (float)*(unsigned int *)(v5 + 12))
     - (float)*(int *)(v5 + 96);
  v7 = ((-(int)v6 & ~(-(int)v6 >> 31)) + 3) & 0xFFFFFFFC;
  v8 = *(_DWORD *)(v5 + 116);
  *(_DWORD *)(v5 + 108) = v7;
  *(_DWORD *)(v5 + 112) = (v8 - v7) & ~((int)(v8 - v7) >> 31);
  VCTimescaleWSOLAShiftBuffer::removeSamples(*(void ***)(v5 + 72), v8);
  memcpy(a2, **(const void ***)(v5 + 72), 4 * *(unsigned int *)(*(_QWORD *)(v5 + 72) + 12));
  v9 = *(_QWORD *)(v5 + 72);
  *a3 = *(_DWORD *)(v9 + 12);
  *(_QWORD *)(v5 + 96) = 0;
  *(_DWORD *)(v5 + 104) = 0;
  *(_QWORD *)(v5 + 112) = 0;
  VCTimescaleWSOLAShiftBuffer::clear(v9);
  return 0;
}

uint64_t VCTimescaleWSOLA_TailSize(uint64_t a1)
{
  return (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 72) + 12) - *(_DWORD *)(*(_QWORD *)a1 + 116));
}

void *VCTimescaleWSOLA_UpdateHistoryBuffer(uint64_t a1, uint64_t a2)
{
  int v3;
  signed int v4;
  void *result;
  UInt32 ioOutputDataSize;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int16 *)(a1 + 11570);
  if (**(_DWORD **)(a2 + 24) >= v3)
    v4 = *(unsigned __int16 *)(a1 + 11570);
  else
    v4 = **(_DWORD **)(a2 + 24);
  if (*(_BYTE *)(a1 + 11573))
  {
    ioOutputDataSize = 4 * v3;
    result = (void *)AudioConverterConvertBuffer(*(AudioConverterRef *)(a1 + 11576), 2 * v4, *(const void **)(a2 + 120), &ioOutputDataSize, (void *)(a1 + 12));
    v4 = ioOutputDataSize >> 2;
  }
  else
  {
    result = memcpy((void *)(a1 + 12), *(const void **)(a2 + 120), 4 * v4);
  }
  *(_DWORD *)(a1 + 11532) = v4;
  return result;
}

uint64_t VCTimescaleWSOLA_CheckCompression(uint64_t a1, int a2, int a3, int a4, double a5)
{
  double v10;
  _BOOL4 v11;
  char v13;
  _BOOL4 v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  double v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v10 = micro();
  v11 = v10 - *(double *)(a1 + 11552) > 10.0 && v10 - *(double *)(a1 + 11560) > 10.0;
  if (a4 | a3)
    return 0;
  *(_BYTE *)(a1 + 8) = 0;
  if (a2)
    *(double *)(a1 + 11552) = v10;
  if (a5 < 0.300000012)
    *(double *)(a1 + 11560) = v10;
  if (*(_BYTE *)(a1 + 11572))
    v13 = v11;
  else
    v13 = 1;
  v14 = (v13 & 1) != 0 || *(double *)(a1 + 11600) < a5;
  if (*(_DWORD *)(a1 + 11536) && v14)
  {
    if (!v11)
      return 1;
    if ((int)VRTraceGetErrorLogLevelForModule() < 5)
      return 1;
    v15 = VRTraceErrorLogLevelToCSTR();
    v16 = *MEMORY[0x1E0CF2758];
    if (!os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      return 1;
    v17 = *(_QWORD *)(a1 + 11552);
    v18 = *(_QWORD *)(a1 + 11560);
    v23 = 136316418;
    v24 = v15;
    v25 = 2080;
    v26 = "VCTimescaleWSOLA_CheckCompression";
    v27 = 1024;
    v28 = 665;
    v29 = 2048;
    v30 = v17;
    v31 = 2048;
    v32 = a5;
    v33 = 2048;
    v34 = v18;
    goto LABEL_33;
  }
  if (*(_BYTE *)(a1 + 11572))
  {
    v19 = *(double *)(a1 + 11592) < a5 && v10 - *(double *)(a1 + 11544) > *(double *)(a1 + 11608);
    if (!v11 && !v19)
      return 0;
  }
  if (a2)
    v11 = 0;
  if (v11 && (int)VRTraceGetErrorLogLevelForModule() >= 5)
  {
    v20 = VRTraceErrorLogLevelToCSTR();
    v16 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      v21 = *(_QWORD *)(a1 + 11552);
      v22 = *(_QWORD *)(a1 + 11560);
      v23 = 136316418;
      v24 = v20;
      v25 = 2080;
      v26 = "VCTimescaleWSOLA_CheckCompression";
      v27 = 1024;
      v28 = 671;
      v29 = 2048;
      v30 = v21;
      v31 = 2048;
      v32 = a5;
      v33 = 2048;
      v34 = v22;
LABEL_33:
      _os_log_impl(&dword_1D8A54000, v16, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Forcing WSOLA, time since silence: %f, Adjust = %f, time since low adjust: %f", (uint8_t *)&v23, 0x3Au);
    }
  }
  return 1;
}

uint64_t VCTimescaleWSOLA_ActiveSpeechAdapt(uint64_t a1, uint64_t a2)
{
  double v4;
  uint64_t v5;
  double v6;
  char v7;
  uint64_t v8;
  NSObject *v9;
  uint8_t buf[4];
  uint64_t v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = 0.0;
  if (VRTraceIsInternalOSInstalled())
    v4 = micro();
  if (VCTimescaleWSOLA_CheckCompression(a1, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 44), *(_DWORD *)(a2 + 48), *(double *)(a2 + 160))&& *(_DWORD *)(a2 + 20) == *(unsigned __int16 *)(a1 + 11570))
  {
    v5 = _VCTimescale_DecodeWarpWsola(a1);
    LogProfileTimeOverLimit(v4, v6, "SpkrProc: Warping");
    v7 = 1;
  }
  else
  {
    v7 = 0;
    v5 = 0;
  }
  *(_BYTE *)(a2 + 152) = v7;
  if (!*(_DWORD *)(a2 + 44))
  {
    if (*(_DWORD *)(a2 + 48))
      v7 = 1;
    if ((v7 & 1) == 0)
    {
      if (*(_DWORD *)(a1 + 11536))
      {
        _VCTimescale_WsolaTail(a1);
        *(double *)(a1 + 11544) = micro();
        *(_DWORD *)(a1 + 11536) = 0;
        *(_BYTE *)(a1 + 8) = 1;
        if ((int)VRTraceGetErrorLogLevelForModule() > 4)
        {
          v8 = VRTraceErrorLogLevelToCSTR();
          v9 = *MEMORY[0x1E0CF2758];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315906;
            v12 = v8;
            v13 = 2080;
            v14 = "_VCTimescaleWSOLA_TailSize";
            v15 = 1024;
            v16 = 398;
            v17 = 1024;
            v18 = 0;
            _os_log_impl(&dword_1D8A54000, v9, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Extracted WSOLA tail, size=%u", buf, 0x22u);
          }
        }
      }
      **(_DWORD **)(a2 + 24) = **(_DWORD **)(a2 + 24);
    }
  }
  return v5;
}

uint64_t _VCTimescale_DecodeWarpWsola(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  int v4;
  int v5;
  unsigned int *v6;
  _DWORD *v7;
  int v8;
  int v9;
  float *v10;
  float *v11;
  uint64_t v12;
  unsigned __int16 *v13;
  void *v14;
  int v15;
  float *v16;
  float v17;
  size_t v18;
  uint64_t v19;
  float *v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t result;
  uint64_t v26;
  NSObject *v27;
  _BOOL4 v28;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  unsigned int *v32;
  unsigned int v33;
  int v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  double v42;
  __int16 v43;
  int v44;
  __int16 v45;
  unsigned int v46;
  uint64_t v47[1452];
  _BYTE v48[11520];
  uint64_t v49;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v31 = v7;
  v32 = v6;
  v9 = v8;
  v11 = v10;
  v12 = v1;
  v49 = *MEMORY[0x1E0C80C00];
  v13 = (unsigned __int16 *)(v1 + 11568);
  v14 = memset(v48, 255, sizeof(v48));
  v15 = v13[1];
  v34 = 4 * v15;
  if (*((_BYTE *)v13 + 5))
  {
    v16 = (float *)v48;
    v14 = (void *)AudioConverterConvertBuffer(*(AudioConverterRef *)(v12 + 11576), 2 * v15, v3, (UInt32 *)&v34, v48);
    v15 = v13[1];
    if (v13[1])
    {
LABEL_3:
      v17 = fmax((double)(v9 / v15), 0.75);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = (float *)v3;
    if (v15)
      goto LABEL_3;
  }
  v17 = 0.75;
LABEL_6:
  v33 = *v13;
  MEMORY[0x1E0C80A78](v14);
  v20 = (float *)((char *)&v30 - v19);
  if (v21)
    memset((char *)&v30 - v19, 255, v18);
  if (!*((_BYTE *)v13 + 5))
    v20 = v11;
  if (*(_DWORD *)(v12 + 11536))
  {
    v22 = 0;
    *(_DWORD *)(v12 + 11532) = 0;
  }
  else
  {
    v22 = *(_DWORD *)(v12 + 11532);
  }
  memcpy(v47, (const void *)v12, sizeof(v47));
  v23 = VCTimescaleWSOLA_Adapt(v47, v16, v13[1], v20, &v33, v12 + 12, v22, v17, 0.00200000009);
  *(_DWORD *)(v12 + 11536) = 1;
  if (v23 == 3)
  {
    memcpy(v11, v3, v13[1] * v5);
    v24 = v13[1];
    result = 23;
  }
  else
  {
    if (*((_BYTE *)v13 + 5))
    {
      v34 = 2 * v33;
      AudioConverterConvertBuffer(*(AudioConverterRef *)(v12 + 11584), 4 * v33, v20, (UInt32 *)&v34, v11);
    }
    if ((int)VRTraceGetErrorLogLevelForModule() <= 4)
    {
      v24 = v33;
    }
    else
    {
      v26 = VRTraceErrorLogLevelToCSTR();
      v27 = *MEMORY[0x1E0CF2758];
      v28 = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT);
      v24 = v33;
      if (v28)
      {
        v29 = v13[1];
        v35 = 136316418;
        v36 = v26;
        v37 = 2080;
        v38 = "_VCTimescale_DecodeWarpWsola";
        v39 = 1024;
        v40 = 604;
        v41 = 2048;
        v42 = v17;
        v43 = 1024;
        v44 = v29;
        v45 = 1024;
        v46 = v33;
        _os_log_impl(&dword_1D8A54000, v27, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d WSOLA WARP, scale = %f, in size = %u, out size = %u", (uint8_t *)&v35, 0x32u);
      }
    }
    result = 0;
    *v31 = 1;
  }
  *v32 = v24;
  return result;
}

void LogProfileTimeOverLimit(double a1, double a2, const char *a3, ...)
{
  double v5;
  __int128 v6;
  uint64_t v7;
  NSObject *v8;
  uint8_t buf[4];
  uint64_t v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  char *v16;
  __int16 v17;
  double v18;
  char __str[16];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  va_list va;

  va_start(va, a3);
  v35 = *MEMORY[0x1E0C80C00];
  if (VRTraceIsInternalOSInstalled())
  {
    v5 = micro() - a1;
    if (v5 > 0.00499999989)
    {
      *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v33 = v6;
      v34 = v6;
      v31 = v6;
      v32 = v6;
      v29 = v6;
      v30 = v6;
      v27 = v6;
      v28 = v6;
      v25 = v6;
      v26 = v6;
      v24 = v6;
      v22 = v6;
      v23 = v6;
      v20 = v6;
      v21 = v6;
      *(_OWORD *)__str = v6;
      vsnprintf(__str, 0x100uLL, a3, va);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        v7 = VRTraceErrorLogLevelToCSTR();
        v8 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136316162;
          v10 = v7;
          v11 = 2080;
          v12 = "_LogProfileTimeLimitHelper";
          v13 = 1024;
          v14 = 36;
          v15 = 2080;
          v16 = __str;
          v17 = 2048;
          v18 = v5;
          _os_log_impl(&dword_1D8A54000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %s: Took a long time %fs", buf, 0x30u);
        }
      }
    }
  }
}

void _VCTimescale_WsolaTail(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;
  _DWORD *v3;
  char *v4;
  char *v5;
  AudioConverterRef *v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  double v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18[1453];

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v6 = (AudioConverterRef *)v1;
  v18[1452] = *MEMORY[0x1E0C80C00];
  v7 = v1 + 11568;
  v17 = *(unsigned __int16 *)(v1 + 11568);
  MEMORY[0x1E0C80A78](v1);
  v10 = (char *)&v16 - v9;
  if (v11)
    memset((char *)&v16 - v9, 255, v8);
  if (!*(_BYTE *)(v7 + 5))
    v10 = v5;
  v12 = 0.0;
  if (VRTraceIsInternalOSInstalled())
    v12 = micro();
  memcpy(v18, v6, 0x2D60uLL);
  VCTimescaleWSOLA_WindowTail(v18, v10, &v17);
  LogProfileTimeOverLimit(v12, v13, "SpkrProc: WsolaTail");
  v14 = *(unsigned __int8 *)(v7 + 5);
  v15 = v17;
  if (v14)
  {
    v16 = 2 * v17;
    AudioConverterConvertBuffer(v6[1448], 4 * v17, v10, (UInt32 *)&v16, v5);
  }
  *v3 = v15;
}

uint64_t VCMemoryUtil_IsProbabilisticGuardMallocEnabled()
{
  if (VCMemoryUtil_IsProbabilisticGuardMallocEnabled_onceToken != -1)
    dispatch_once(&VCMemoryUtil_IsProbabilisticGuardMallocEnabled_onceToken, &__block_literal_global_107);
  return VCMemoryUtil_IsProbabilisticGuardMallocEnabled_isProbabilisticGuardMallocEnabled;
}

uint64_t VCMemoryUtil_IsAddressSanitizerEnabled()
{
  if (VCMemoryUtil_IsAddressSanitizerEnabled_onceToken != -1)
    dispatch_once(&VCMemoryUtil_IsAddressSanitizerEnabled_onceToken, &__block_literal_global_5_0);
  return VCMemoryUtil_IsAddressSanitizerEnabled_isASANEnabled;
}

void HandleWCMEvent(void *a1, void *a2)
{
  id v4;
  uint64_t uint64;
  uint64_t v6;
  NSObject *v7;
  xpc_object_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  xpc_object_t v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t value;
  uint8_t v26[4];
  uint64_t v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  int v31;
  _BYTE buf[24];
  __int128 v33;
  xpc_object_t v34;
  xpc_object_t v35[2];
  char *v36[2];
  xpc_object_t values[2];
  char *keys[2];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v4 = a2;
    uint64 = xpc_dictionary_get_uint64(a1, "kMessageId");
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      v6 = VRTraceErrorLogLevelToCSTR();
      v7 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = v6;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "HandleWCMEvent";
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v33) = 86;
        WORD2(v33) = 1024;
        *(_DWORD *)((char *)&v33 + 6) = uint64;
        _os_log_impl(&dword_1D8A54000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d WCM: receive a WCM event [%d].", buf, 0x22u);
      }
    }
    if (uint64 == 1100)
    {
      value = 0;
      objc_msgSend((id)objc_msgSend(a2, "wcmClientDelegate"), "wcmGetCallConfig:targetBitrate:", (char *)&value + 4, &value);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        v13 = VRTraceErrorLogLevelToCSTR();
        v14 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = v13;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "ProcessGetCallConfig";
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v33) = 40;
          WORD2(v33) = 1024;
          *(_DWORD *)((char *)&v33 + 6) = HIDWORD(value);
          WORD5(v33) = 1024;
          HIDWORD(v33) = value;
          _os_log_impl(&dword_1D8A54000, v14, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d WCM: current bitrate cap [%u] target [%u]", buf, 0x28u);
        }
      }
      *(_OWORD *)keys = xmmword_1E9E58D80;
      v15 = xpc_uint64_create(HIDWORD(value));
      v16 = xpc_uint64_create(value);
      values[0] = v15;
      values[1] = v16;
      v17 = xpc_dictionary_create((const char *const *)keys, values, 2uLL);
      *(_OWORD *)v36 = xmmword_1E9E58D90;
      v18 = xpc_uint64_create(0xC8uLL);
      v35[0] = v18;
      v35[1] = v17;
      v19 = xpc_dictionary_create((const char *const *)v36, v35, 2uLL);
      xpc_release(v17);
      xpc_release(v15);
      xpc_release(v16);
      xpc_release(v18);
      v20 = objc_msgSend(a2, "connectionQueue");
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = __ProcessGetCallConfig_block_invoke;
      *(_QWORD *)&v33 = &unk_1E9E52238;
      *((_QWORD *)&v33 + 1) = a2;
      v34 = v19;
      dispatch_async(v20, buf);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        v21 = VRTraceErrorLogLevelToCSTR();
        v22 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v26 = 136315650;
          v27 = v21;
          v28 = 2080;
          v29 = "ProcessGetCallConfig";
          v30 = 1024;
          v31 = 69;
          _os_log_impl(&dword_1D8A54000, v22, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d WCM: sent reply for WCMFTCallConfig.", v26, 0x1Cu);
        }
      }
    }
    else if (uint64 == 1101)
    {
      v8 = xpc_dictionary_get_value(a1, "kMessageArgs");
      v9 = xpc_dictionary_get_uint64(v8, "kWCMFTCallConfig_BitrateCapability");
      v10 = xpc_dictionary_get_uint64(v8, "kWCMFTCallConfig_InterferenceLevel");
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        v11 = VRTraceErrorLogLevelToCSTR();
        v12 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = v11;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "ProcessSetCallConfig";
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v33) = 31;
          WORD2(v33) = 1024;
          *(_DWORD *)((char *)&v33 + 6) = v9;
          WORD5(v33) = 1024;
          HIDWORD(v33) = v10;
          _os_log_impl(&dword_1D8A54000, v12, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d WCM: BitrateCap [%d] InterferenceLevel [%d]", buf, 0x28u);
        }
      }
      objc_msgSend((id)objc_msgSend(a2, "wcmClientDelegate"), "wcmSetCallConfig:interferenceLevel:", v9, v10);
    }
    else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      v23 = VRTraceErrorLogLevelToCSTR();
      v24 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        HandleWCMEvent_cold_1(v23, v24);
    }

  }
}

uint64_t VCTransportICEConnected(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v13;
  const void *v14;

  v13 = (void *)MEMORY[0x1DF086F1C](objc_msgSend(a1, "weak"));
  if (v13)
  {
    v14 = v13;
    objc_msgSend(v13, "iceConnectedForCallID:result:didReceivePacket:useRelay:secretKey:skeResult:", a2, a3, a4, a5, a6, a7);
    CFRelease(v14);
  }
  return 0;
}

void VCTransportICENewCandidates(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;
  const void *v10;

  v9 = (void *)MEMORY[0x1DF086F1C](objc_msgSend(a1, "weak"));
  if (v9)
  {
    v10 = v9;
    objc_msgSend(v9, "iceNewCandidatesForCallID:blob:size:newCandidateVersion:", a2, a3, a4, a5);
    CFRelease(v10);
  }
}

void VCTransportICEShouldNominate(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v15;
  const void *v16;

  v15 = (void *)MEMORY[0x1DF086F1C](objc_msgSend(a1, "weak"));
  if (v15)
  {
    v16 = v15;
    objc_msgSend(v15, "iceShouldNominateNewCandidate:forCallID:interfaceMask:nominated:demote:connectionPriority:replaceOnly:", a3, a2, a4, a5, a6, a7, a8);
    CFRelease(v16);
  }
}

void VCTransportICERemoveIPPort(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  void *v7;
  const void *v8;

  v7 = (void *)MEMORY[0x1DF086F1C](objc_msgSend(a1, "weak"));
  if (v7)
  {
    v8 = v7;
    objc_msgSend(v7, "iceRemoveIPPort:forCallID:isLocalInterface:", a3, a2, a4 != 0);
    CFRelease(v8);
  }
}

void VCDataPacketReceivedCallback(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v11;
  const void *v12;

  v11 = (void *)MEMORY[0x1DF086F1C](objc_msgSend(a1, "weak"));
  if (v11)
  {
    v12 = v11;
    objc_msgSend(v11, "receivedDataPacket:length:forCallID:encrypted:OFTType:", a2, a3, a4, a5, a6);
    CFRelease(v12);
  }
}

void sub_1D900664C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D9006900(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

FILE **VideoPacketDump_OpenRTPLog(uint64_t a1)
{
  FILE **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  FILE **v8;
  char v10;

  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VideoPacketDump_OpenRTPLog_cold_1();
    }
    return 0;
  }
  v1 = VRLogfileAlloc(0, a1, (uint64_t)"RTPPacketDumpVideo", (uint64_t)".packetdump", "com.apple.VideoConference.RTPPacketDumpQueue", 32);
  if (!v1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VideoPacketDump_OpenRTPLog_cold_2();
    }
    return 0;
  }
  v8 = v1;
  VRLogfilePrintSync(v1, "sTime\tStreamID\tTimestamp\tSeqNumber\tFrameSequenceNumber\tFECPacketStatus\tIsTemporalScaledStream\tIsBaseLayerFrame\n", v2, v3, v4, v5, v6, v7, v10);
  return v8;
}

void VideoPacketDump_CloseRTPLog(uint64_t a1)
{
  uint64_t v1[2];

  v1[1] = *MEMORY[0x1E0C80C00];
  v1[0] = a1;
  VRLogfileFree(v1);
}

void VideoPacketDump_RTPLog(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v8[0] = 0;
    v8[1] = 0;
    v9 = 0;
    VRLogfileGetTimestamp((char *)v8, 0x14u);
    VRLogfilePrint(a1, "%s\t%u\t%u\t%u\t%u\t%d\t%d\t%d\n", v2, v3, v4, v5, v6, v7, (char)v8);
  }
}

void VCVoiceDetector_Destroy(void **a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  if (v2)
  {
    free(v2);
    *a1 = 0;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    v3 = VRTraceErrorLogLevelToCSTR();
    v4 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      v5 = 136315650;
      v6 = v3;
      v7 = 2080;
      v8 = "VCVoiceDetector_Destroy";
      v9 = 1024;
      v10 = 48;
      _os_log_impl(&dword_1D8A54000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d NULL voice detector", (uint8_t *)&v5, 0x1Cu);
    }
  }
}

void *VCVoiceDetector_Create(char a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v7[2];

  v7[1] = *(void **)MEMORY[0x1E0C80C00];
  v2 = malloc_type_calloc(1uLL, 0x68uLL, 0x10A0040FC058773uLL);
  v7[0] = v2;
  if (!v2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCVoiceDetector_Create_cold_1();
    }
    return 0;
  }
  v3 = v2;
  if (VCVoiceDetector_Create_loadPredicate != -1)
    dispatch_once(&VCVoiceDetector_Create_loadPredicate, &__block_literal_global_108);
  v4 = (void *)VCVoiceDetector_Create_libHandle;
  *((_QWORD *)v3 + 1) = VCVoiceDetector_Create_libHandle;
  if (!v4)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCVoiceDetector_Create_cold_2();
    }
    free(v3);
    return 0;
  }
  *((_BYTE *)v3 + 20) = a1;
  *((_QWORD *)v3 + 3) = dlsym(v4, "DNNVAD_CreateInstance");
  *((_QWORD *)v3 + 4) = dlsym(*((void **)v3 + 1), "DNNVAD_Initialize");
  *((_QWORD *)v3 + 5) = dlsym(*((void **)v3 + 1), "DNNVAD_Uninitialize");
  *((_QWORD *)v3 + 6) = dlsym(*((void **)v3 + 1), "DNNVAD_Process");
  *((_QWORD *)v3 + 9) = dlsym(*((void **)v3 + 1), "DNNVAD_DestroyInstance");
  *((_QWORD *)v3 + 7) = dlsym(*((void **)v3 + 1), "DNNVAD_GetSpeechProbabilitySoftValue");
  *((_QWORD *)v3 + 8) = dlsym(*((void **)v3 + 1), "DNNVAD_GetSpeechProbabilityHardValue");
  *((_QWORD *)v3 + 10) = dlsym(*((void **)v3 + 1), "DNNVAD_EnableLegacyVAD");
  *((_QWORD *)v3 + 11) = dlsym(*((void **)v3 + 1), "DNNVAD_GetSoundActivityValue");
  v5 = dlsym(*((void **)v3 + 1), "DNNVAD_GetPowerMeterValue");
  *((_QWORD *)v3 + 12) = v5;
  *((_DWORD *)v3 + 4) = 2143289344;
  if (!*((_QWORD *)v3 + 3)
    || !*((_QWORD *)v3 + 4)
    || !*((_QWORD *)v3 + 5)
    || !*((_QWORD *)v3 + 6)
    || !*((_QWORD *)v3 + 9)
    || !*((_QWORD *)v3 + 7)
    || !*((_QWORD *)v3 + 8)
    || !*((_QWORD *)v3 + 10)
    || !*((_QWORD *)v3 + 11)
    || !v5)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCVoiceDetector_Create_cold_3();
    }
    VCVoiceDetector_Destroy(v7);
    return v7[0];
  }
  return v3;
}

void VCVoiceDetector_Start(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  int v6;
  double v7;
  int v8;
  uint64_t v9;
  NSObject *v10;
  double v11;
  int v12;
  int ErrorLogLevelForModule;
  uint64_t v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  double v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      v4 = VRTraceErrorLogLevelToCSTR();
      v5 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v6 = *(_DWORD *)(a2 + 40);
        v7 = *(double *)a2;
        v16 = 136316418;
        v17 = v4;
        v18 = 2080;
        v19 = "VCVoiceDetector_Start";
        v20 = 1024;
        v21 = 116;
        v22 = 1024;
        v23 = v6;
        v24 = 2048;
        v25 = v7;
        v26 = 2080;
        v27 = "/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib";
        _os_log_impl(&dword_1D8A54000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d  samplesPerFrame=%u -> inSampleRate=%f, AUDIODSP_COMPONENT_DYLIB=%s", (uint8_t *)&v16, 0x36u);
      }
    }
    v8 = ((uint64_t (*)(_QWORD *))a1[3])(a1);
    if (!v8 && *a1)
    {
      if (*((_BYTE *)a1 + 20))
      {
        v12 = ((uint64_t (*)(void))a1[10])();
        ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
        if (v12)
        {
          if (ErrorLogLevelForModule >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
              VCVoiceDetector_Start_cold_2();
          }
          goto LABEL_24;
        }
        if (ErrorLogLevelForModule >= 7)
        {
          v14 = VRTraceErrorLogLevelToCSTR();
          v15 = *MEMORY[0x1E0CF2758];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
          {
            v16 = 136315650;
            v17 = v14;
            v18 = 2080;
            v19 = "VCVoiceDetector_Start";
            v20 = 1024;
            v21 = 128;
            _os_log_impl(&dword_1D8A54000, v15, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Vad_EnableLegacyVAD enabled", (uint8_t *)&v16, 0x1Cu);
          }
        }
      }
      if (!((unsigned int (*)(_QWORD, _QWORD, _QWORD))a1[4])(*a1, *(unsigned int *)(a2 + 40), *(double *)a2))return;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
      {
        VRTraceErrorLogLevelToCSTR();
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          VCVoiceDetector_Start_cold_1();
      }
LABEL_24:
      ((void (*)(_QWORD))a1[9])(*a1);
      *a1 = 0;
      return;
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      v9 = VRTraceErrorLogLevelToCSTR();
      v10 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      {
        v11 = *(double *)a1;
        v16 = 136316162;
        v17 = v9;
        v18 = 2080;
        v19 = "VCVoiceDetector_Start";
        v20 = 1024;
        v21 = 121;
        v22 = 1024;
        v23 = v8;
        v24 = 2048;
        v25 = v11;
        _os_log_error_impl(&dword_1D8A54000, v10, OS_LOG_TYPE_ERROR, " [%s] %s:%d Vad_CreateInstance error=%d, audioVADRef=%p", (uint8_t *)&v16, 0x2Cu);
      }
    }
  }
}

_QWORD *VCVoiceDetector_Stop(_QWORD *result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = result;
    result = (_QWORD *)*result;
    if (result)
    {
      ((void (*)(void))v1[5])();
      result = (_QWORD *)((uint64_t (*)(_QWORD))v1[9])(*v1);
      *v1 = 0;
    }
  }
  return result;
}

uint64_t VCVoiceDetector_ProcessSampleBuffer(_QWORD *a1, uint64_t a2, char a3)
{
  unsigned __int8 v4;
  uint64_t AudioBufferList;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t SampleCount;
  uint64_t v11;
  float *v12;
  float v13;
  float v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  int VoiceActivity;
  char v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  float v24;
  uint64_t v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  _BOOL4 v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = 0;
    if (a2 && *a1)
    {
      v25 = 0;
      v24 = NAN;
      if ((a3 & 1) == 0)
      {
        AudioBufferList = VCAudioBufferList_GetAudioBufferList(a2);
        v7 = (void (*)(uint64_t, uint64_t, uint64_t))a1[6];
        v8 = *a1;
        v9 = *(_QWORD *)(AudioBufferList + 16);
        SampleCount = VCAudioBufferList_GetSampleCount(a2);
        v7(v8, v9, SampleCount);
        if (((unsigned int (*)(_QWORD, char *))a1[8])(*a1, (char *)&v25 + 4))
        {
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
              VCVoiceDetector_ProcessSampleBuffer_cold_3();
          }
        }
        else
        {
          if (!((unsigned int (*)(_QWORD, uint64_t *))a1[7])(*a1, &v25))
          {
            v11 = v25;
            v12 = (float *)(a1 + 2);
            if (*((float *)&v25 + 1) == 0.0)
            {
              VCUtil_ExponentialMovingAverage(v12, *(float *)&v25, 50.0);
              v13 = v14;
            }
            else
            {
              *v12 = NAN;
              v13 = 1.0;
            }
            if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
            {
              v15 = VRTraceErrorLogLevelToCSTR();
              v16 = *MEMORY[0x1E0CF2758];
              v17 = *MEMORY[0x1E0CF2758];
              if (*MEMORY[0x1E0CF2748])
              {
                if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136316418;
                  v27 = v15;
                  v28 = 2080;
                  v29 = "_VCVoiceDetector_CalculateVoiceProbability";
                  v30 = 1024;
                  v31 = 165;
                  v32 = 1024;
                  v33 = *((float *)&v11 + 1) != 0.0;
                  v34 = 2048;
                  v35 = *(float *)&v11;
                  v36 = 2048;
                  v37 = v13;
                  _os_log_impl(&dword_1D8A54000, v16, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d isVoiceActiveDNN=%d voiceProbabilityDNN=%f -> voiceProbability=%f", buf, 0x36u);
                }
              }
              else if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136316418;
                v27 = v15;
                v28 = 2080;
                v29 = "_VCVoiceDetector_CalculateVoiceProbability";
                v30 = 1024;
                v31 = 165;
                v32 = 1024;
                v33 = *((float *)&v11 + 1) != 0.0;
                v34 = 2048;
                v35 = *(float *)&v11;
                v36 = 2048;
                v37 = v13;
                _os_log_debug_impl(&dword_1D8A54000, v16, OS_LOG_TYPE_DEBUG, " [%s] %s:%d isVoiceActiveDNN=%d voiceProbabilityDNN=%f -> voiceProbability=%f", buf, 0x36u);
              }
            }
            if (*((_BYTE *)a1 + 20))
            {
              if (((unsigned int (*)(_QWORD, float *))a1[11])(*a1, &v24))
              {
                if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
                {
                  VRTraceErrorLogLevelToCSTR();
                  if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
                    VCVoiceDetector_ProcessSampleBuffer_cold_1();
                }
                v4 = 0;
                goto LABEL_32;
              }
              VCAudioBufferList_SetVoiceActivity(a2, v24 == 0.0);
            }
            VoiceActivity = VCAudioBufferList_GetVoiceActivity(a2);
            if (VoiceActivity == 1)
              v19 = 127;
            else
              v19 = 1;
            if (*((float *)&v25 + 1) == 0.0)
              v4 = v19;
            else
              v4 = -1;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
            {
              v20 = VRTraceErrorLogLevelToCSTR();
              v21 = *MEMORY[0x1E0CF2758];
              v22 = *MEMORY[0x1E0CF2758];
              if (*MEMORY[0x1E0CF2748])
              {
                if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136316930;
                  v27 = v20;
                  v28 = 2080;
                  v29 = "VCVoiceDetector_ProcessSampleBuffer";
                  v30 = 1024;
                  v31 = 216;
                  v32 = 1024;
                  v33 = VoiceActivity == 1;
                  v34 = 2048;
                  v35 = *((float *)&v25 + 1);
                  v36 = 2048;
                  v37 = *(float *)&v25;
                  v38 = 2048;
                  v39 = v13;
                  v40 = 1024;
                  v41 = v4;
                  _os_log_impl(&dword_1D8A54000, v21, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d vad1=%d hard=%f soft=%f prob=%f priority=%d", buf, 0x46u);
                }
              }
              else if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136316930;
                v27 = v20;
                v28 = 2080;
                v29 = "VCVoiceDetector_ProcessSampleBuffer";
                v30 = 1024;
                v31 = 216;
                v32 = 1024;
                v33 = VoiceActivity == 1;
                v34 = 2048;
                v35 = *((float *)&v25 + 1);
                v36 = 2048;
                v37 = *(float *)&v25;
                v38 = 2048;
                v39 = v13;
                v40 = 1024;
                v41 = v4;
                _os_log_debug_impl(&dword_1D8A54000, v21, OS_LOG_TYPE_DEBUG, " [%s] %s:%d vad1=%d hard=%f soft=%f prob=%f priority=%d", buf, 0x46u);
              }
            }
LABEL_32:
            VCAudioBufferList_SetPriority(a2, v4);
            VCAudioBufferList_SetVoiceProbability(a2, v13);
            return v4;
          }
          if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
          {
            VRTraceErrorLogLevelToCSTR();
            if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
              VCVoiceDetector_ProcessSampleBuffer_cold_2();
          }
        }
        v4 = 0;
        v13 = NAN;
        goto LABEL_32;
      }
      v4 = 1;
      v13 = 0.0;
      goto LABEL_32;
    }
  }
  else
  {
    return 0;
  }
  return v4;
}

uint64_t _VCJitterBuffer_GetJBTargetFromEstimatedTarget(uint64_t a1, float *a2)
{
  float v4;
  uint64_t result;
  float v6;
  float v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    v9 = 0u;
    v10 = 0u;
    v8 = 0u;
    v4 = *a2;
    JTargetJBEstimator_GetSharedSettings(a1 + 54592, (uint64_t)&v8);
    result = 0;
    v6 = fmax(v4, fmax(*(double *)&v9, *(double *)(a1 + 135792)));
    v7 = fmin(v6, *((double *)&v9 + 1));
    *a2 = v7;
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        _VCJitterBuffer_GetJBTargetFromEstimatedTarget_cold_1();
    }
    return 4;
  }
  return result;
}

void _VCJitterBuffer_GetMinMaxQueueSizeFromConfig(_DWORD *a1, double *a2, double *a3)
{
  int v5;
  double v6;
  double v7;
  uint64_t v8;
  NSObject *v9;
  unsigned int v10;
  double v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  double *v19;
  __int16 v20;
  double *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a2 && a3)
  {
    v5 = a1[50];
    v6 = 0.5;
    if ((v5 - 1) < 2)
    {
      v7 = 0.04;
    }
    else if (v5)
    {
      if (v5 != 3)
      {
LABEL_13:
        v10 = a1[63];
        if (v10)
        {
          v11 = (double)v10 / 1000.0;
          *a2 = v11;
        }
        else
        {
          v11 = *a2;
        }
        *a2 = VCDefaults_GetDoubleValueForKey(CFSTR("jitterBufferMinQueueSize"), v11);
        return;
      }
      LODWORD(v6) = a1[62];
      v7 = (double)*(unint64_t *)&v6 / 1000.0;
      v6 = v7;
    }
    else
    {
      v7 = 0.1;
    }
    *a2 = v7;
    *a3 = v6;
    goto LABEL_13;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    v8 = VRTraceErrorLogLevelToCSTR();
    v9 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
    {
      v12 = 136316162;
      v13 = v8;
      v14 = 2080;
      v15 = "_VCJitterBuffer_GetMinMaxQueueSizeFromConfig";
      v16 = 1024;
      v17 = 742;
      v18 = 2048;
      v19 = a2;
      v20 = 2048;
      v21 = a3;
      _os_log_error_impl(&dword_1D8A54000, v9, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid minQSize=%p or maxQSize=%p", (uint8_t *)&v12, 0x30u);
    }
  }
}

_QWORD *VCJitterBuffer_Create(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  double MinQueueSizeOverride5G;
  double v9;
  uint64_t v10;
  NSObject *v11;
  double DoubleValueForKey;
  uint64_t v13;
  double v14;
  int v15;
  int v16;
  int v17;
  double v18;
  double v19;
  int v20;
  const void *v21;
  CFTypeRef v22;
  uint64_t v23;
  NSObject *v24;
  int v25;
  int v26;
  int v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  __int128 v33;
  uint64_t v34;
  double v35;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint8_t buf[4];
  uint64_t v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  int v51;
  __int16 v52;
  double v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  double v59;
  __int16 v60;
  int v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  double v65;
  __int16 v66;
  double v67;
  __int16 v68;
  int v69;
  __int16 v70;
  double v71;
  __int16 v72;
  CFTypeRef v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCJitterBuffer_Create_cold_1();
    }
    return 0;
  }
  v2 = malloc_type_calloc(1uLL, 0x216E8uLL, 0x10F2040E35F69FAuLL);
  v3 = v2;
  if (!v2)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCJitterBuffer_Create_cold_3();
    }
    goto LABEL_46;
  }
  v4 = v2 + 16971;
  memcpy(v2, (const void *)a1, 0x120uLL);
  if (!*((_BYTE *)v3 + 260))
  {
    v5 = VCBoundsSafety_IndexableToNulTerminated((char *)a1, 0xC8uLL);
    v3[17103] = LogDump_OpenLog(v5, (uint64_t)"JitterBuffer", (uint64_t)".jbdump", (char)"STime\tTimestamp\tSPF\tBundling\tDTX\tNetworkType\tFirstTimestamp\tWraps\tIsRed\tLag\tAvgLag\tMaxLag\tMinLag\tJumpThresh\tSlopeThresh\tFlat\tClippedLag\tMinLagAdjustment\tMinClipThreshold\tJB\tJBMin\tJBMax\tTargetJ\tRedOverheadInTargetJ\tTargetJQSize\tJQSize\tAvgJQSize\tERASURE\tMODE\tPayload Type\tSeq Number\tINTS\tOUTTS\tLeftOverSamples\tProminence\tStreamID\tTargetSizeIndependent\tAVSyncOffset\tIntermittentState\tSingleOutagePeriod\tEstimatedIntermittentPeriod\tTargetBoostMode\tErasureAlt\n", 9, (char)"2.7");
  }
  *((double *)v3 + 16978) = VCDefaults_GetDoubleValueForKey(CFSTR("audioJitterBufferWeightedAvgQSizeFactor"), 0.05);
  v44 = 0;
  v45 = 0;
  _VCJitterBuffer_GetMinMaxQueueSizeFromConfig((_DWORD *)a1, (double *)&v45, (double *)&v44);
  v3[17102] = v45;
  *((_BYTE *)v3 + 135808) = *(_DWORD *)(a1 + 200) == 3;
  v6 = v3[17103];
  *(_QWORD *)&v43 = 0;
  *((_QWORD *)&v43 + 1) = v6;
  if ((JLagProcessor_Initialize((uint64_t)(v3 + 6767), &v43) & 1) == 0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCJitterBuffer_Create_cold_7();
    }
    goto LABEL_46;
  }
  v42 = 0;
  v41 = 0u;
  v40 = 0u;
  v39 = 0u;
  v38 = 0u;
  v37 = 0u;
  memset(v36, 0, sizeof(v36));
  v7 = v3[17102];
  *(_QWORD *)&v33 = v7;
  MinQueueSizeOverride5G = GKSConnectivitySettings_GetMinQueueSizeOverride5G();
  v9 = 0.1;
  if (MinQueueSizeOverride5G != 0.0)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      v10 = VRTraceErrorLogLevelToCSTR();
      v11 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        v47 = v10;
        v48 = 2080;
        v49 = "VCJitterBuffer_GetMinJitterBufferQueueSize5G";
        v50 = 1024;
        v51 = 710;
        v52 = 2048;
        v53 = MinQueueSizeOverride5G;
        _os_log_impl(&dword_1D8A54000, v11, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d JB Min Queue Size for 5G is overriden with server bag value %f", buf, 0x26u);
      }
    }
    v9 = MinQueueSizeOverride5G;
  }
  DoubleValueForKey = VCDefaults_GetDoubleValueForKey(CFSTR("kVCDefaultJitterBufferMinQueueSize5G"), v9);
  v13 = v44;
  *((double *)&v33 + 1) = DoubleValueForKey;
  v34 = v44;
  if (*((_DWORD *)v3 + 50))
    v14 = 0.1;
  else
    v14 = 0.25;
  v35 = v14;
  v15 = *(unsigned __int8 *)(a1 + 204);
  LODWORD(v36[0]) = v15;
  *(_OWORD *)((char *)v36 + 8) = xmmword_1D9111190;
  *(_QWORD *)&v37 = v3[17103];
  WORD4(v36[1]) = 257;
  LOBYTE(v39) = 1;
  v16 = *(unsigned __int8 *)(a1 + 218);
  v17 = v16 ^ 1;
  BYTE1(v39) = v16 ^ 1;
  BYTE3(v39) = 1;
  BYTE8(v37) = VCDefaults_GetBoolValueForKey(CFSTR("jitterBufferHistoryUseShortTermWindowForTargetExpansion"), 1);
  v18 = VCDefaults_GetDoubleValueForKey(CFSTR("jitterBufferHistoryShortTermWindowSize"), 5.0);
  *(double *)&v38 = v18;
  v19 = VCDefaults_GetDoubleValueForKey(CFSTR("jitterBufferHistoryLongTermWindowSize"), 10.0);
  *((double *)&v38 + 1) = v19;
  v20 = *(unsigned __int8 *)(a1 + 217);
  BYTE2(v39) = *(_BYTE *)(a1 + 217);
  v21 = *(const void **)(a1 + 232);
  if (v21)
    v22 = CFRetain(v21);
  else
    v22 = 0;
  *((_QWORD *)&v39 + 1) = v22;
  *(_QWORD *)&v40 = 0x4008000000000000;
  DWORD2(v40) = *((_DWORD *)v3 + 60);
  LOBYTE(v42) = 1;
  *(_QWORD *)&v41 = _VCJitterBuffer_GetJBTargetFromEstimatedTarget;
  *((_QWORD *)&v41 + 1) = v3;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    v23 = VRTraceErrorLogLevelToCSTR();
    v24 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      v25 = *((unsigned __int8 *)v3 + 216);
      v26 = *((unsigned __int8 *)v3 + 260);
      v27 = *((unsigned __int8 *)v3 + 280);
      *(_DWORD *)buf = 136319490;
      v47 = v23;
      v48 = 2080;
      v49 = "VCJitterBuffer_Create";
      v50 = 1024;
      v51 = 851;
      v52 = 2048;
      v53 = *(double *)&v3;
      v54 = 2048;
      v55 = v7;
      v56 = 2048;
      v57 = v13;
      v58 = 2048;
      v59 = v14;
      v60 = 1024;
      v61 = v15;
      v62 = 2048;
      v63 = 0x3FEE666666666666;
      v64 = 2048;
      v65 = v18;
      v66 = 2048;
      v67 = v19;
      v68 = 1024;
      v69 = v20;
      v70 = 2048;
      v71 = DoubleValueForKey;
      v72 = 2048;
      v73 = v22;
      v74 = 1024;
      v75 = v17;
      v76 = 1024;
      v77 = v25;
      v78 = 1024;
      v79 = v26;
      v80 = 1024;
      v81 = v27;
      _os_log_impl(&dword_1D8A54000, v24, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCJitterBuffer[%p] Jitter buffer configured with minQSize=%f maxQSize=%f highStartQSize=%f highStartMode=%d targetPercentileToCover=%f shortTermWindowSize=%f longTermWindowSize=%f filterDRXBundleEnabled=%d minQSize5G=%f targetSynchronizer=%p spikeManagement=%d skipDecodeOnSilence=%d skipJBDumpCreation=%d enableEnhancedJBAdaptations=%d", buf, 0x9Au);
    }
  }
  if (!JTargetJBEstimator_Initialize((uint64_t)(v3 + 6824), &v33))
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCJitterBuffer_Create_cold_6();
    }
    goto LABEL_46;
  }
  v28 = JitterPreloadQueue_Create();
  *v4 = v28;
  if (!v28)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCJitterBuffer_Create_cold_4();
    }
    goto LABEL_46;
  }
  JitterQueue_Create();
  v3[16972] = v29;
  if (!v29)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCJitterBuffer_Create_cold_5();
    }
LABEL_46:
    VCJitterBuffer_Finalize((char **)v3);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCJitterBuffer_Create_cold_2();
    }
    return 0;
  }
  *(_OWORD *)(v3 + 17115) = *(_OWORD *)(a1 + 264);
  v3[16998] = 0;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    v30 = VRTraceErrorLogLevelToCSTR();
    v31 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      v47 = v30;
      v48 = 2080;
      v49 = "VCJitterBuffer_Create";
      v50 = 1024;
      v51 = 867;
      _os_log_impl(&dword_1D8A54000, v31, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Jitter Buffer Created Successfully", buf, 0x1Cu);
    }
  }
  return v3;
}

void VCJitterBuffer_Finalize(char **a1)
{
  int ErrorLogLevelForModule;
  char **v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t *v6;
  char *v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  char **v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (a1)
  {
    v3 = a1 + 16971;
    if (ErrorLogLevelForModule >= 7)
    {
      v4 = VRTraceErrorLogLevelToCSTR();
      v5 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v8 = 136315906;
        v9 = v4;
        v10 = 2080;
        v11 = "VCJitterBuffer_Finalize";
        v12 = 1024;
        v13 = 880;
        v14 = 2048;
        v15 = a1;
        _os_log_impl(&dword_1D8A54000, v5, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Cleaning up JitterBuffer (0x%p)", (uint8_t *)&v8, 0x26u);
      }
    }
    v6 = (uint64_t *)a1[16972];
    if (v6)
    {
      JitterQueue_Destroy(v6);
      a1[16972] = 0;
    }
    if (*v3)
    {
      JitterPreloadQueue_Destroy(*v3);
      *v3 = 0;
    }
    VCAudioPlayer_Finalize((uint64_t)(a1 + 36));
    JTargetJBEstimator_Finalize((uint64_t)(a1 + 6824));
    v7 = a1[29];
    if (v7)
    {
      CFRelease(v7);
      a1[29] = 0;
    }
    LogDump_CloseLog((uint64_t)a1[17103]);
    free(a1);
  }
  else if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCJitterBuffer_Finalize_cold_1();
  }
}

uint64_t VCJitterBuffer_QueueSteeringCallback(uint64_t a1, double a2)
{
  uint64_t result;

  if (a1)
  {
    result = 0;
    *(double *)(a1 + 135864) = a2;
  }
  else
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCJitterBuffer_QueueSteeringCallback_cold_1();
    }
    return 4;
  }
  return result;
}

BOOL VCJitterBuffer_InitializePlayback(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;
  _BOOL8 result;
  _QWORD v12[6];
  char v13;
  __int16 v14;
  char v15;
  int32x2_t v16;
  int v17;
  uint64_t v18;
  char v19;
  _BYTE v20[7];
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  char v23;
  _BYTE v24[7];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = a1 + 135776;
    v15 = -86;
    v14 = -21846;
    memset(v20, 170, sizeof(v20));
    memset(v24, 170, sizeof(v24));
    v5 = *(_QWORD *)(a1 + 135776);
    v6 = VCBoundsSafety_IndexableToNulTerminated((char *)a1, 0xC8uLL);
    v7 = *(_BYTE *)(a1 + 244);
    v8 = *(_QWORD *)(v4 + 1136);
    v9 = *(_BYTE *)(a1 + 261);
    v10 = *(_BYTE *)(a1 + 280);
    v12[0] = v5;
    v12[1] = a2;
    v12[2] = v6;
    v12[3] = *(_QWORD *)(a1 + 220);
    v12[4] = VCJitterBuffer_QueueSteeringCallback;
    v12[5] = a1;
    v13 = v7;
    v16 = vrev64_s32(*(int32x2_t *)(a1 + 252));
    v17 = -1431655766;
    v18 = v8;
    v19 = v9;
    v21 = a1;
    v22 = _VCJitterBuffer_DTMFEventCallback;
    v23 = v10;
    return (int)VCAudioPlayer_Initialize(a1 + 288, (unint64_t)v12) >= 0;
  }
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    result = os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    VCJitterBuffer_InitializePlayback_cold_1();
  }
  return 0;
}

uint64_t _VCJitterBuffer_DTMFEventCallback(uint64_t result)
{
  uint64_t (*v1)(_QWORD);

  if (result)
  {
    v1 = *(uint64_t (**)(_QWORD))(result + 136928);
    if (v1)
      return v1(*(_QWORD *)(result + 136920));
  }
  return result;
}

void VCJitterBuffer_Reset(uint64_t a1)
{
  int ErrorLogLevelForModule;
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (a1)
  {
    if (ErrorLogLevelForModule >= 7)
    {
      v3 = VRTraceErrorLogLevelToCSTR();
      v4 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v5 = 136315906;
        v6 = v3;
        v7 = 2080;
        v8 = "VCJitterBuffer_Reset";
        v9 = 1024;
        v10 = 941;
        v11 = 2048;
        v12 = a1;
        _os_log_impl(&dword_1D8A54000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p]", (uint8_t *)&v5, 0x26u);
      }
    }
    *(_BYTE *)(a1 + 135840) = 1;
    VCJitterBuffer_ResetPlaybackReportingMetrics(a1);
    VCJitterBuffer_ResetJitterQueueUnderflowRate(a1);
  }
  else if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCJitterBuffer_Reset_cold_1();
  }
}

void VCJitterBuffer_ResetPlaybackReportingMetrics(uint64_t a1)
{
  int ErrorLogLevelForModule;
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (a1)
  {
    if (ErrorLogLevelForModule >= 7)
    {
      v3 = VRTraceErrorLogLevelToCSTR();
      v4 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v5 = 136315906;
        v6 = v3;
        v7 = 2080;
        v8 = "VCJitterBuffer_ResetPlaybackReportingMetrics";
        v9 = 1024;
        v10 = 968;
        v11 = 2048;
        v12 = a1;
        _os_log_impl(&dword_1D8A54000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p]", (uint8_t *)&v5, 0x26u);
      }
    }
    VCAudioPlayer_ResetReportingMetrics(a1 + 288);
  }
  else if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCJitterBuffer_ResetPlaybackReportingMetrics_cold_1();
  }
}

void VCJitterBuffer_ResetJitterQueueUnderflowRate(uint64_t a1)
{
  int ErrorLogLevelForModule;
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (a1)
  {
    if (ErrorLogLevelForModule >= 7)
    {
      v3 = VRTraceErrorLogLevelToCSTR();
      v4 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v5 = 136315906;
        v6 = v3;
        v7 = 2080;
        v8 = "VCJitterBuffer_ResetJitterQueueUnderflowRate";
        v9 = 1024;
        v10 = 974;
        v11 = 2048;
        v12 = a1;
        _os_log_impl(&dword_1D8A54000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p]", (uint8_t *)&v5, 0x26u);
      }
    }
    JitterQueue_ResetUnderflowRate(*(_DWORD **)(a1 + 135776));
  }
  else if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCJitterBuffer_ResetJitterQueueUnderflowRate_cold_1();
  }
}

void VCJitterBuffer_DiscardQueueExcess(uint64_t a1)
{
  int ErrorLogLevelForModule;
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (a1)
  {
    if (ErrorLogLevelForModule >= 7)
    {
      v3 = VRTraceErrorLogLevelToCSTR();
      v4 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v5 = 136315906;
        v6 = v3;
        v7 = 2080;
        v8 = "VCJitterBuffer_DiscardQueueExcess";
        v9 = 1024;
        v10 = 949;
        v11 = 2048;
        v12 = a1;
        _os_log_impl(&dword_1D8A54000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p]", (uint8_t *)&v5, 0x26u);
      }
    }
    *(_DWORD *)(a1 + 135832) = 1;
  }
  else if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCJitterBuffer_DiscardQueueExcess_cold_1();
  }
}

void VCJitterBuffer_SetRedAudioDelayInSamples(uint64_t a1, int a2)
{
  int ErrorLogLevelForModule;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (a1)
  {
    if (ErrorLogLevelForModule >= 8)
    {
      v5 = VRTraceErrorLogLevelToCSTR();
      v6 = *MEMORY[0x1E0CF2758];
      v7 = *MEMORY[0x1E0CF2758];
      if (*MEMORY[0x1E0CF2748])
      {
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          v8 = 136316162;
          v9 = v5;
          v10 = 2080;
          v11 = "VCJitterBuffer_SetRedAudioDelayInSamples";
          v12 = 1024;
          v13 = 955;
          v14 = 2048;
          v15 = a1;
          v16 = 1024;
          v17 = a2;
          _os_log_impl(&dword_1D8A54000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] redAudioDelayInSamples:%d", (uint8_t *)&v8, 0x2Cu);
        }
      }
      else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        v8 = 136316162;
        v9 = v5;
        v10 = 2080;
        v11 = "VCJitterBuffer_SetRedAudioDelayInSamples";
        v12 = 1024;
        v13 = 955;
        v14 = 2048;
        v15 = a1;
        v16 = 1024;
        v17 = a2;
        _os_log_debug_impl(&dword_1D8A54000, v6, OS_LOG_TYPE_DEBUG, " [%s] %s:%d [%p] redAudioDelayInSamples:%d", (uint8_t *)&v8, 0x2Cu);
      }
    }
    *(_DWORD *)(a1 + 135848) = a2;
  }
  else if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCJitterBuffer_SetRedAudioDelayInSamples_cold_1();
  }
}

void VCJitterBuffer_Flush(uint64_t a1)
{
  int ErrorLogLevelForModule;
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (a1)
  {
    if (ErrorLogLevelForModule >= 7)
    {
      v3 = VRTraceErrorLogLevelToCSTR();
      v4 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v5 = 136315906;
        v6 = v3;
        v7 = 2080;
        v8 = "VCJitterBuffer_Flush";
        v9 = 1024;
        v10 = 961;
        v11 = 2048;
        v12 = a1;
        _os_log_impl(&dword_1D8A54000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p]", (uint8_t *)&v5, 0x26u);
      }
    }
    JitterPreloadQueue_Flush(*(int **)(a1 + 135768));
    JitterQueue_Reset(*(uint64_t **)(a1 + 135776));
  }
  else if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCJitterBuffer_Flush_cold_1();
  }
}

void VCJitterBuffer_EnqueuePacket(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  unsigned int *PlaybackFormat;
  unsigned int v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  int AppIntegerValue;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  int v46;
  double v47;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  _BOOL4 v58;
  uint64_t Statistics;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  NSObject *v63;
  int v64;
  int v65;
  char v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  _BYTE v70[24];
  _BYTE v71[26];
  __int16 v72;
  int v73;
  __int16 v74;
  int v75;
  uint8_t buf[4];
  uint64_t v77;
  __int16 v78;
  const char *v79;
  __int16 v80;
  int v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  unsigned int v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int v89;
  int v90;
  double v91;
  unsigned __int8 v92;
  unsigned __int16 v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = a1 + 135768;
    v5 = (_DWORD *)(a1 + 288);
    PlaybackFormat = (unsigned int *)VCAudioPlayer_GetPlaybackFormat(a1 + 288);
    v7 = *PlaybackFormat;
    v67 = 0u;
    v68 = 0u;
    v69 = 0;
    v8 = *(_WORD *)(a2 + 14);
    LOWORD(v67) = v8;
    DWORD1(v67) = *(_DWORD *)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 1824);
    *((_QWORD *)&v67 + 1) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)&v68 = v9;
    DWORD2(v68) = *(_DWORD *)(a2 + 1516);
    LODWORD(v69) = *(_DWORD *)(a2 + 1816);
    BYTE4(v69) = *(_BYTE *)(a2 + 12);
    BYTE5(v69) = *(_DWORD *)(a2 + 40) != 0;
    if (*(_DWORD *)(v4 + 68) == 3)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        v10 = VRTraceErrorLogLevelToCSTR();
        v11 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        {
          v12 = *(unsigned __int16 *)(a2 + 14);
          *(_DWORD *)buf = 136316162;
          v77 = v10;
          v78 = 2080;
          v79 = "VCJitterBuffer_EnqueuePacket";
          v80 = 1024;
          v81 = 1004;
          v82 = 2048;
          v83 = a1;
          v84 = 1024;
          v85 = v12;
          _os_log_impl(&dword_1D8A54000, v11, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] state Reset dropping packet seqNum=%d", buf, 0x2Cu);
        }
      }
      goto LABEL_15;
    }
    if (*(_DWORD *)(a2 + 4) || *(_BYTE *)(v4 + 72))
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        v19 = VRTraceErrorLogLevelToCSTR();
        v20 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        {
          v21 = *(unsigned __int8 *)(v4 + 72);
          v22 = *(_DWORD *)(a2 + 4);
          v23 = *(unsigned __int16 *)(a2 + 14);
          *(_DWORD *)buf = 136316674;
          v77 = v19;
          v78 = 2080;
          v79 = "VCJitterBuffer_EnqueuePacket";
          v80 = 1024;
          v81 = 1008;
          v82 = 2048;
          v83 = a1;
          v84 = 1024;
          v85 = v21;
          v86 = 1024;
          v87 = v22;
          v88 = 1024;
          v89 = v23;
          _os_log_impl(&dword_1D8A54000, v20, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] Setting state Reset, jqRequested[%d] packetNewStream[%d] seqNum[%d]", buf, 0x38u);
        }
      }
      *(_DWORD *)(v4 + 68) = 3;
      *(_BYTE *)(v4 + 72) = 0;
      VRLogfilePrint(*(_QWORD *)(v4 + 1056), "State = RESET\n", v13, v14, v15, v16, v17, v18, v66);
      goto LABEL_15;
    }
    if (!*(_DWORD *)(v4 + 68))
    {
      v24 = PlaybackFormat;
      JTargetJBEstimator_NewStream(a1 + 54592, v7, v8);
      JLagProcessor_NewStream(a1 + 54136, (__int16 *)&v67, v7, v24[1]);
      JTargetJBEstimator_GetMinJBSize(a1 + 54592);
      v25 = *(_QWORD *)(a1 + 54624);
      *(_QWORD *)(v4 + 24) = v26;
      *(_QWORD *)(v4 + 32) = v25;
      *(_QWORD *)(a1 + 135904) = 0;
      *(_QWORD *)(a1 + 135912) = 0;
      AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("forceJitterBufferSize"), CFSTR("com.apple.VideoConference"), 0);
      *(_DWORD *)(v4 + 44) = AppIntegerValue;
      VCAudioPlayer_AdjustmentDisabled((uint64_t)v5, AppIntegerValue != 0);
      *(_DWORD *)(v4 + 68) = 1;
      if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
      {
        v34 = VRTraceErrorLogLevelToCSTR();
        v35 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315906;
          v77 = v34;
          v78 = 2080;
          v79 = "VCJitterBuffer_EnqueuePacket";
          v80 = 1024;
          v81 = 1027;
          v82 = 2048;
          v83 = a1;
          _os_log_impl(&dword_1D8A54000, v35, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] JBState NEWSTREAM -> SETTLE", buf, 0x26u);
        }
      }
      VRLogfilePrint(*(_QWORD *)(v4 + 1056), "State = STATE_NEWSTREAM, iSampleRate = %d\nState = SETTLE\n", v28, v29, v30, v31, v32, v33, v7);
    }
    v36 = *(_DWORD *)(*(_QWORD *)(a2 + 1840) + 20);
    v43 = JLagProcessor_Process(a1 + 54136, (unsigned __int16 *)&v67, v36, *(_DWORD *)(v4 + 112), *(_DWORD *)(v4 + 68));
    v44 = v43;
    if (*(_DWORD *)(v4 + 68) == 1)
    {
      if (fabs(v43) > 0.0250000004)
      {
LABEL_15:
        VCJitterBuffer_AudioPacketFree(a1, (int *)a2);
        return;
      }
      *(_DWORD *)(v4 + 68) = 2;
      VRLogfilePrint(*(_QWORD *)(v4 + 1056), "State = FILL\n", v37, v38, v39, v40, v41, v42, v66);
    }
    if (*(_DWORD *)(v4 + 68) <= 3u)
      *(_DWORD *)(v4 + 1040) += *(_DWORD *)(a2 + 1816) * *(_DWORD *)(*(_QWORD *)(a2 + 1840) + 20);
    if (*(_DWORD *)(a2 + 40))
      ++*(_DWORD *)(v4 + 152);
    if (*(_DWORD *)(v4 + 68) == 2 && *(_DWORD *)(v4 + 76))
    {
      JTargetJBEstimator_GetMinJBSize(a1 + 54592);
      v46 = *(_DWORD *)(v4 + 44);
      if (v46 && v7)
        v45 = (double)v46 / (double)v7;
      if (v4 + 16 >= (unint64_t)(v4 + 112))
      {
LABEL_58:
        __break(0x5519u);
        return;
      }
      v47 = (double)*(int *)(v4 + 1040) / (double)v7;
      if (*(_BYTE *)(v4 + 40))
        v48 = v47 >= v45;
      else
        v48 = v47 > v45;
      if (v48)
      {
        *(_DWORD *)(v4 + 68) = 4;
        _VCJitterBuffer_UpdateDiscardAlgoParams(a1);
        JTargetJBEstimator_ResetHistory(a1 + 54592);
        VRLogfilePrint(*(_QWORD *)(v4 + 1056), "State = RUN\n", v49, v50, v51, v52, v53, v54, v66);
      }
    }
    v55 = *(unsigned int *)(a2 + 1816);
    if ((int)v55 >= 1)
    {
      v56 = (uint64_t *)(a2 + 1784);
      while ((unint64_t)v56 < a2 + 1816 && (unint64_t)v56 >= a2 + 1784)
      {
        v57 = *v56++;
        *(_DWORD *)(v57 + 1192) = *(_DWORD *)(a1 + 35892);
        if (!--v55)
          goto LABEL_45;
      }
      goto LABEL_58;
    }
LABEL_45:
    bzero(buf, 0x748uLL);
    AudioPacket_initNewPacket(a2, (uint64_t)buf);
    JitterPreloadQueue_Enqueue(*(void ****)v4, (void **)a2);
    if ((_BYTE)v78)
    {
      v58 = 0;
    }
    else
    {
      *(_OWORD *)&v71[8] = 0u;
      *(_QWORD *)v70 = (unsigned __int16)v79;
      *(double *)&v70[8] = v91;
      *(_DWORD *)&v70[16] = v36;
      *(_DWORD *)&v70[20] = v90;
      *(_QWORD *)v71 = *(unsigned int *)((char *)&v79 + 2);
      v71[16] = v85 != 0;
      JTargetJBEstimator_Process(a1 + 54592, (double *)v70, v44);
      v58 = (_BYTE)v78 == 0;
    }
    memset(v70, 170, 20);
    if (*(_QWORD *)(v4 + 1056) && v58)
    {
      LogDump_GetTimestampString(v91);
      Statistics = JTargetJBEstimator_GetStatistics(a1 + 54592);
      v60 = JLagProcessor_GetStatistics(a1 + 54136);
      VCAudioPlayer_GetStatistics(v5);
      VCAudioPlayer_GetPlaybackFormat((uint64_t)v5);
      _VCJitterBuffer_DesiredQSize((_DWORD *)a1);
      VRLogfilePrint(*(_QWORD *)(v4 + 1056), "%s\t%u\t%u\t%d\t%d\t%d\t%u\t%u\t%d\t%02.6f\t%02.6f\t%02.6f\t%02.6f\t%02.4f\t%02.4f\t%d\t%02.6f\t%02.6f\t%02.6f\t%02.4f\t%02.4f\t%02.4f\t%02.4f\t%02.4f\t%6d\t%6d\t%d\t%d\t%s\t%d\t%u\t%u\t%u\t%d\t%d\t%d\t%02.6f\t%02.4f\t%u\t%2.6f\t%2.6f\t%d\t%d\n", v92, v93, *(unsigned int *)(Statistics + 48), *(unsigned int *)(Statistics + 112), v85, *(unsigned int *)(v60 + 16), (char)v70);
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      v61 = VRTraceErrorLogLevelToCSTR();
      v62 = *MEMORY[0x1E0CF2758];
      v63 = *MEMORY[0x1E0CF2758];
      if (*MEMORY[0x1E0CF2748])
      {
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
        {
          v64 = *(_DWORD *)(v4 + 68);
          *(_DWORD *)v70 = 136316930;
          *(_QWORD *)&v70[4] = v61;
          *(_WORD *)&v70[12] = 2080;
          *(_QWORD *)&v70[14] = "VCJitterBuffer_EnqueuePacket";
          *(_WORD *)&v70[22] = 1024;
          *(_DWORD *)v71 = 1098;
          *(_WORD *)&v71[4] = 2048;
          *(_QWORD *)&v71[6] = a1;
          *(_WORD *)&v71[14] = 1024;
          *(_DWORD *)&v71[16] = v64;
          *(_WORD *)&v71[20] = 1024;
          *(_DWORD *)&v71[22] = v81;
          v72 = 1024;
          v73 = HIDWORD(v77);
          v74 = 1024;
          v75 = (unsigned __int16)v79;
          _os_log_impl(&dword_1D8A54000, v62, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] JBState[%d] payloadType[%d] bytes[%d] SeqNumber[%d]", v70, 0x3Eu);
        }
      }
      else if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
      {
        v65 = *(_DWORD *)(v4 + 68);
        *(_DWORD *)v70 = 136316930;
        *(_QWORD *)&v70[4] = v61;
        *(_WORD *)&v70[12] = 2080;
        *(_QWORD *)&v70[14] = "VCJitterBuffer_EnqueuePacket";
        *(_WORD *)&v70[22] = 1024;
        *(_DWORD *)v71 = 1098;
        *(_WORD *)&v71[4] = 2048;
        *(_QWORD *)&v71[6] = a1;
        *(_WORD *)&v71[14] = 1024;
        *(_DWORD *)&v71[16] = v65;
        *(_WORD *)&v71[20] = 1024;
        *(_DWORD *)&v71[22] = v81;
        v72 = 1024;
        v73 = HIDWORD(v77);
        v74 = 1024;
        v75 = (unsigned __int16)v79;
        _os_log_debug_impl(&dword_1D8A54000, v62, OS_LOG_TYPE_DEBUG, " [%s] %s:%d [%p] JBState[%d] payloadType[%d] bytes[%d] SeqNumber[%d]", v70, 0x3Eu);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCJitterBuffer_EnqueuePacket_cold_1();
  }
}

void VCJitterBuffer_AudioPacketFree(uint64_t a1, int *a2)
{
  uint64_t v4;
  void **v5;
  int *v6;
  void **v7;
  void *v8;

  if (a1)
  {
    if (a2[454] < 1)
    {
LABEL_7:
      JitterPreloadQueue_AudioPacketFree(*(_QWORD *)(a1 + 135768), a2);
    }
    else
    {
      v4 = 0;
      v5 = (void **)(a2 + 454);
      v6 = a2 + 446;
      v7 = (void **)(a2 + 446);
      while (v7 < v5 && v7 >= (void **)v6)
      {
        v8 = *v7++;
        JitterPreloadQueue_AudioFrameFree(*(_QWORD *)(a1 + 135768), v8);
        if (++v4 >= *(int *)v5)
          goto LABEL_7;
      }
      __break(0x5519u);
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCJitterBuffer_AudioPacketFree_cold_1();
  }
}

void _VCJitterBuffer_UpdateDiscardAlgoParams(uint64_t a1)
{
  double *v1;
  double v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  double v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = (double *)(a1 + 135336);
  if (*(_DWORD *)(a1 + 52852) == 2)
    v2 = 1.0;
  else
    v2 = 3.0;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
  {
    v3 = VRTraceErrorLogLevelToCSTR();
    v4 = *MEMORY[0x1E0CF2758];
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
    {
      v5 = 136315906;
      v6 = v3;
      v7 = 2080;
      v8 = "_VCJitterBuffer_UpdateDiscardAlgoParams";
      v9 = 1024;
      v10 = 981;
      v11 = 2048;
      v12 = v2;
      _os_log_impl(&dword_1D8A54000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Configuring queue discard threshold=%f", (uint8_t *)&v5, 0x26u);
    }
  }
  *v1 = v2;
}

void VCJitterBuffer_PlaybackGetSamples(int32x2_t *a1, uint64_t a2, int *a3, BOOL *a4, uint64_t a5, int *a6, int *a7)
{
  int32x2_t *v9;
  int *v10;
  int32x2_t *v11;
  double v12;
  uint64_t v13;
  int32x2_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  NSObject *v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  unsigned int v34;
  int32x2_t *v35;
  _DWORD *v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  unint64_t v42;
  int v44;
  __int32 v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  NSObject *v50;
  __int32 v51;
  uint64_t v52;
  double v53;
  unsigned int *Statistics;
  double v55;
  double v56;
  unsigned int v57;
  double v58;
  int v59;
  double v60;
  __int32 v61;
  BOOL IsUnderrunQueueBoostEnabled;
  double v63;
  double v64;
  double v65;
  uint64_t v66;
  NSObject *v67;
  NSObject *v68;
  double v69;
  uint64_t v70;
  NSObject *v71;
  NSObject *v72;
  double v73;
  double v74;
  _BOOL4 v75;
  double v76;
  int v77;
  _BOOL4 v79;
  double v80;
  int v81;
  int v82;
  int ErrorLogLevelForModule;
  uint64_t v85;
  NSObject *v86;
  NSObject *v87;
  unsigned int v88;
  uint64_t v89;
  NSObject *v90;
  NSObject *v91;
  unsigned int v92;
  double Statistical95pDelaySpread;
  double v94;
  int v95;
  double v96;
  int v97;
  double v98;
  int v99;
  int v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  float64x2_t v109;
  unsigned int v110;
  double *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  unint64_t v121;
  int v122;
  double *v123;
  uint64_t v124;
  uint64_t v125;
  double v126;
  float v127;
  int *v128;
  _BOOL4 v131;
  double v132;
  unint64_t v133;
  double v134;
  int v135;
  int v136;
  uint64_t *v137;
  int v138;
  double v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  double v148;
  double v149;
  uint64_t v150;
  NSObject *v151;
  uint64_t *v152;
  int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  double v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  NSObject *v166;
  NSObject *v167;
  unsigned int v168;
  int v169;
  int LastFramePriority;
  BOOL *v171;
  int v172;
  int32x2_t *v173;
  _BOOL4 v174;
  int32x2_t *v175;
  int v176;
  BOOL v177;
  double v178;
  BOOL v179;
  char v180;
  uint64_t v181;
  NSObject *v182;
  NSObject *v183;
  unsigned int v184;
  int v185;
  int v186;
  unsigned int v187;
  int v188;
  int v189;
  unsigned int v190;
  char v191;
  char v192;
  unint64_t v193;
  double v194;
  double v196;
  int SampleCount;
  double *v202;
  uint64_t v203;
  double *v204;
  unsigned __int8 v205;
  uint64_t v206;
  double v207;
  char v208;
  int *v209;
  int32x2_t *v210;
  uint64_t v211;
  _OWORD v212[2];
  __int128 v213;
  char v214;
  char v215;
  int v216;
  BOOL v217;
  _BYTE buf[50];
  _BYTE v219[6];
  double v220;
  int v221;
  _BYTE v222[12];
  _BYTE v223[12];
  __int128 v224;
  int *v225;
  int *v226;
  char *v227;
  uint64_t v228;

  v228 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
    {
      VRTraceErrorLogLevelToCSTR();
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
        VCJitterBuffer_PlaybackGetSamples_cold_1();
    }
    return;
  }
  v9 = a1 + 16985;
  v10 = (int *)&a1[16950];
  v11 = a1 + 6828;
  v12 = micro();
  v216 = 1;
  v215 = 0;
  v214 = 1;
  v203 = a2;
  SampleCount = VCAudioBufferList_GetSampleCount(a2);
  v204 = (double *)(v10 + 46);
  v210 = a1;
  v13 = (uint64_t)&a1[6824];
  JTargetJBEstimator_GetMinJBSize((uint64_t)&a1[6824]);
  v14 = *v11;
  *((_QWORD *)v10 + 24) = v15;
  *((int32x2_t *)v10 + 25) = v14;
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    v16 = VRTraceErrorLogLevelToCSTR();
    v17 = *MEMORY[0x1E0CF2758];
    v18 = *MEMORY[0x1E0CF2758];
    if (*MEMORY[0x1E0CF2748])
    {
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = v16;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "VCJitterBuffer_PlaybackGetSamples";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = 1117;
        *(_WORD *)&buf[28] = 2048;
        *(_QWORD *)&buf[30] = a1;
        _os_log_impl(&dword_1D8A54000, v17, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] Playback get samples", buf, 0x26u);
      }
    }
    else if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      VCJitterBuffer_PlaybackGetSamples_cold_2();
    }
  }
  v196 = v12;
  v19 = micro();
  v20 = dbl_1D91111A0[v10[59] < 4];
  v21 = micro();
  v194 = v19;
  v207 = v19 + v20;
  if (v21 >= v19 + v20)
  {
    v205 = 0;
    v208 = 0;
    goto LABEL_181;
  }
  v205 = 0;
  v208 = 0;
  v22 = (uint64_t)&a1[36];
  v211 = (uint64_t)&a1[105];
  v202 = (double *)&v9[115];
  v193 = (unint64_t)&a1[17000];
  v206 = (uint64_t)&a1[6824];
  while (1)
  {
    v23 = JitterPreloadQueue_Dequeue(*((int **)v10 + 21));
    if ((int)VRTraceGetErrorLogLevelForModule() < 8)
      goto LABEL_19;
    v31 = VRTraceErrorLogLevelToCSTR();
    v32 = *MEMORY[0x1E0CF2758];
    v33 = *MEMORY[0x1E0CF2758];
    if (!*MEMORY[0x1E0CF2748])
      break;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      v34 = v10[59];
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = v31;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "_VCJitterBuffer_DequeuePacketsFromPreloadQueue";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = 602;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v210;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v23 == 0;
      *(_WORD *)&buf[44] = 1024;
      *(_DWORD *)&buf[46] = v34;
      _os_log_impl(&dword_1D8A54000, v32, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] Dequeue packet, is audio packet null:%d, state %d", buf, 0x32u);
      if (!v23)
        goto LABEL_179;
      goto LABEL_20;
    }
LABEL_19:
    if (!v23)
      goto LABEL_179;
LABEL_20:
    v35 = v210;
    if (v210[27].i8[0] && *((unsigned __int8 *)v23 + 1856) >= 2u)
      VCAudioPlayer_ResumeAudioErasureMeasurement(v22, v23[4]);
    if (v23 >= v23 + 466)
      goto LABEL_241;
    v36 = (_DWORD *)v22;
    *(_DWORD *)v222 = 0;
    v37 = v23 + 454;
    v209 = v23;
    if (v23[454] >= 1)
    {
      v38 = 0;
      v39 = 0;
      v40 = v23 + 446;
      while (&v40[v38] < v37 && &v40[v38] >= v40)
      {
        v42 = *(_QWORD *)&v40[2 * v39];
        if (v35[35].i8[0])
          *(_BYTE *)(v42 + 1268) = VCSilencePredictor_PredictSilence(v211, *(_DWORD *)(v42 + 1196), *(_DWORD *)(v42 + 1144));
        if (v42 && v42 >= v42 + 1272)
          break;
        v44 = JitterQueue_Insert(*((_QWORD *)v10 + 22), v42, v222);
        if (*(_BYTE *)(v42 + 8))
        {
          v45 = v9[7].i32[0];
          ++v9[6].i32[1];
          v46 = *(_DWORD *)(*(_QWORD *)&v40[2 * v39] + 1144);
          v9[7].i32[0] = v45 + v46;
          v9[9].i32[0] = *(_DWORD *)(v42 + 1256);
          if (v44)
          {
            v47 = *((_QWORD *)v209 + 228);
            *((_QWORD *)v10 + 32) = v47;
            if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
            {
              v48 = VRTraceErrorLogLevelToCSTR();
              v49 = *MEMORY[0x1E0CF2758];
              v50 = *MEMORY[0x1E0CF2758];
              if (*MEMORY[0x1E0CF2748])
              {
                if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136315906;
                  *(_QWORD *)&buf[4] = v48;
                  *(_WORD *)&buf[12] = 2080;
                  *(_QWORD *)&buf[14] = "_VCJitterBuffer_UpdateRedAudioArrivalTime";
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&buf[24] = 336;
                  *(_WORD *)&buf[28] = 2048;
                  *(_QWORD *)&buf[30] = v47;
                  _os_log_impl(&dword_1D8A54000, v49, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Red frame inserted, updating time red frame was used. lastRedAudioArrivalTime=%f", buf, 0x26u);
                }
              }
              else if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)&buf[4] = v48;
                *(_WORD *)&buf[12] = 2080;
                *(_QWORD *)&buf[14] = "_VCJitterBuffer_UpdateRedAudioArrivalTime";
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&buf[24] = 336;
                *(_WORD *)&buf[28] = 2048;
                *(_QWORD *)&buf[30] = v47;
                _os_log_debug_impl(&dword_1D8A54000, v49, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Red frame inserted, updating time red frame was used. lastRedAudioArrivalTime=%f", buf, 0x26u);
              }
            }
            v52 = *(_QWORD *)&v40[2 * v39];
            memset(buf, 170, 20);
            if (*(_QWORD *)&v9[118] && *(_BYTE *)(v52 + 8))
            {
              v53 = micro();
              LogDump_GetTimestampString(v53);
              Statistics = VCAudioPlayer_GetStatistics(v36);
              VCAudioPlayer_GetPlaybackFormat((uint64_t)v36);
              _VCJitterBuffer_DesiredQSize(v210);
              VRLogfilePrint(*(_QWORD *)&v9[118], "%s\t%u\t%u\t%d\t%d\t%d\t%u\t%u\t%d\t%02.6f\t%02.6f\t%02.6f\t%02.6f\t%02.4f\t%02.4f\t%d\t%02.6f\t%02.6f\t%02.6f\t%02.4f\t%02.4f\t%02.4f\t%02.4f\t%02.4f\t%6d\t%6d\t%d\t%d\t%s\t%d\t%u\t%u\t%u\t%d\t%d\t%d\t%02.6f\t%02.4f\t%u\t%2.6f\t%2.6f\t%d\t%d\n", *(unsigned int *)(v52 + 1176), Statistics[2], Statistics[3], Statistics[7], Statistics[6], *v10, (char)buf);
            }
            v35 = v210;
          }
          else
          {
            v51 = v9[8].i32[0] + v46;
            ++v9[7].i32[1];
            v9[8].i32[0] = v51;
          }
        }
        ++v39;
        v38 += 2;
        if (v39 >= *v37)
          goto LABEL_51;
      }
LABEL_241:
      __break(0x5519u);
    }
LABEL_51:
    LogProfileTimeOverLimit_4("SpkrProc: PreloadQueue_Dequeue and AddPacket", v21, 0.00200000009, v24, v25, v26, v27, v28, v29, v30, v191);
    v55 = *((double *)v209 + 228);
    v56 = 0.0;
    if (VRTraceIsInternalOSInstalled())
      v56 = micro();
    v22 = (uint64_t)v36;
    v57 = *(_DWORD *)VCAudioPlayer_GetPlaybackFormat((uint64_t)v36);
    memset(buf, 0, 48);
    v13 = v206;
    JTargetJBEstimator_GetSharedSettings(v206, (uint64_t)buf);
    v58 = *(double *)&buf[40];
    v59 = *(_DWORD *)&buf[32];
    v60 = *(double *)&buf[8];
    v61 = v210[28].i32[0];
    if (v61 == 1)
    {
      v65 = *((double *)v10 + 33);
      v60 = *(double *)&buf[8] + v65;
      if (v65 != 0.0 && (int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        v66 = VRTraceErrorLogLevelToCSTR();
        v67 = *MEMORY[0x1E0CF2758];
        v68 = *MEMORY[0x1E0CF2758];
        if (*MEMORY[0x1E0CF2748])
        {
          if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v222 = 136315906;
            *(_QWORD *)&v222[4] = v66;
            *(_WORD *)v223 = 2080;
            *(_QWORD *)&v223[2] = "_VCJitterBuffer_ApplyQueueManagementPolicy";
            *(_WORD *)&v223[10] = 1024;
            LODWORD(v224) = 206;
            WORD2(v224) = 2048;
            *(double *)((char *)&v224 + 6) = v65;
            _os_log_impl(&dword_1D8A54000, v67, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Applying queue steering correction. jitterQueueOffset=%f", v222, 0x26u);
          }
        }
        else if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v222 = 136315906;
          *(_QWORD *)&v222[4] = v66;
          *(_WORD *)v223 = 2080;
          *(_QWORD *)&v223[2] = "_VCJitterBuffer_ApplyQueueManagementPolicy";
          *(_WORD *)&v223[10] = 1024;
          LODWORD(v224) = 206;
          WORD2(v224) = 2048;
          *(double *)((char *)&v224 + 6) = v65;
          _os_log_debug_impl(&dword_1D8A54000, v67, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Applying queue steering correction. jitterQueueOffset=%f", v222, 0x26u);
        }
      }
    }
    else if (!v61)
    {
      IsUnderrunQueueBoostEnabled = VCAudioPlayer_IsUnderrunQueueBoostEnabled((uint64_t)v36);
      v63 = (0.5 - v60) * (0.5 - v60) * 2.5 + 1.0;
      if (v60 >= 0.5 || !IsUnderrunQueueBoostEnabled)
        v63 = 1.0;
      v64 = v60 * v63;
      v58 = v64 - v60;
      v59 = 6;
      v60 = v64;
    }
    v69 = *((double *)v10 + 34);
    if (v60 < v69)
    {
      if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
      {
        v70 = VRTraceErrorLogLevelToCSTR();
        v71 = *MEMORY[0x1E0CF2758];
        v72 = *MEMORY[0x1E0CF2758];
        if (*MEMORY[0x1E0CF2748])
        {
          if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v222 = 136315650;
            *(_QWORD *)&v222[4] = v70;
            *(_WORD *)v223 = 2080;
            *(_QWORD *)&v223[2] = "_VCJitterBuffer_ApplyQueueManagementPolicy";
            *(_WORD *)&v223[10] = 1024;
            LODWORD(v224) = 210;
            _os_log_impl(&dword_1D8A54000, v71, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Overriding Desired QueueSize based on network notification", v222, 0x1Cu);
          }
        }
        else if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)v222 = 136315650;
          *(_QWORD *)&v222[4] = v70;
          *(_WORD *)v223 = 2080;
          *(_QWORD *)&v223[2] = "_VCJitterBuffer_ApplyQueueManagementPolicy";
          *(_WORD *)&v223[10] = 1024;
          LODWORD(v224) = 210;
          _os_log_debug_impl(&dword_1D8A54000, v71, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Overriding Desired QueueSize based on network notification", v222, 0x1Cu);
        }
      }
      v69 = *((double *)v10 + 34);
      v58 = v69 - v60;
      v59 = 4;
    }
    if (v60 > v69)
      v69 = v60;
    v73 = *((double *)v10 + 32);
    v74 = v55 - v73;
    v75 = v73 == 0.0;
    if (v55 - v73 >= 30.0)
      v75 = 1;
    v76 = *(double *)&v9[121];
    if (v76 == 0.0)
    {
      v79 = 0;
    }
    else
    {
      v77 = v9[122].i32[0];
      if (v77)
        v79 = v55 - v76 < 0.2 && v10[62] < v77;
      else
        v79 = 0;
    }
    v80 = (double)v57;
    v81 = (int)(fmin(*(double *)&buf[24], fmax(fmax(*(double *)&buf[16], *((double *)v10 + 24)), v69)) * (double)v57);
    if (v10[62])
      v82 = v75;
    else
      v82 = 1;
    ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    if (v82 == 1 && !v79)
    {
      if (ErrorLogLevelForModule >= 8)
      {
        v89 = VRTraceErrorLogLevelToCSTR();
        v90 = *MEMORY[0x1E0CF2758];
        v91 = *MEMORY[0x1E0CF2758];
        if (*MEMORY[0x1E0CF2748])
        {
          if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
          {
            v92 = v10[62];
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = v89;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "_VCJitterBuffer_ShouldAdjustAudioQueuSizeForRed";
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = 297;
            *(_WORD *)&buf[28] = 2048;
            *(double *)&buf[30] = v74;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v92;
            _os_log_impl(&dword_1D8A54000, v90, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Red overhead is disabled. elapsedTimeSinceLastUsedRedFrame=%f, sharedRedAudioDelayInSamples=%d", buf, 0x2Cu);
          }
        }
        else if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
        {
          v156 = v10[62];
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = v89;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "_VCJitterBuffer_ShouldAdjustAudioQueuSizeForRed";
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = 297;
          *(_WORD *)&buf[28] = 2048;
          *(double *)&buf[30] = v74;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v156;
          _os_log_debug_impl(&dword_1D8A54000, v90, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Red overhead is disabled. elapsedTimeSinceLastUsedRedFrame=%f, sharedRedAudioDelayInSamples=%d", buf, 0x2Cu);
        }
      }
    }
    else
    {
      if (ErrorLogLevelForModule >= 8)
      {
        v85 = VRTraceErrorLogLevelToCSTR();
        v86 = *MEMORY[0x1E0CF2758];
        v87 = *MEMORY[0x1E0CF2758];
        if (*MEMORY[0x1E0CF2748])
        {
          if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
          {
            v88 = v10[62];
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = v85;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "_VCJitterBuffer_ShouldAdjustAudioQueuSizeForRed";
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = 294;
            *(_WORD *)&buf[28] = 2048;
            *(double *)&buf[30] = v74;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v88;
            _os_log_impl(&dword_1D8A54000, v86, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Red overhead is enabled. elapsedTimeSinceLastUsedRedFrame=%f, sharedRedAudioDelayInSamples=%d", buf, 0x2Cu);
          }
        }
        else if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
        {
          v155 = v10[62];
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = v85;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "_VCJitterBuffer_ShouldAdjustAudioQueuSizeForRed";
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = 294;
          *(_WORD *)&buf[28] = 2048;
          *(double *)&buf[30] = v74;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v155;
          _os_log_debug_impl(&dword_1D8A54000, v86, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Red overhead is enabled. elapsedTimeSinceLastUsedRedFrame=%f, sharedRedAudioDelayInSamples=%d", buf, 0x2Cu);
        }
      }
      Statistical95pDelaySpread = JTargetJBEstimator_GetStatistical95pDelaySpread(v206);
      v94 = *(double *)&v9[121];
      if (v94 == 0.0 || (v95 = v9[122].i32[0]) == 0 || v55 - v94 >= 0.2 || v10[62] >= v95)
        v95 = v10[62];
      v96 = 0.0;
      if ((double)v95 - (double)(int)(Statistical95pDelaySpread * v80) < v80 * 0.02)
        v96 = v80 * 0.02;
      v97 = (int)(v96 + (double)v95);
      v98 = v80 * 0.18;
      if (v80 * 0.18 >= (double)v97)
        v98 = (double)v97;
      v99 = (int)v98;
      v9[10] = 0;
      v100 = (int)v98 - v81;
      if ((int)v98 > v81)
      {
        v101 = (double)v100 / v80;
        v58 = fmax(v58, v101);
        *(double *)&v9[10] = v101;
        v59 = 5;
        v81 = v99;
        goto LABEL_118;
      }
    }
    v100 = 0;
LABEL_118:
    if (v81 != v10[54])
    {
      ++v9[8].i32[1];
      v10[54] = v81;
      v10[63] = v100;
      VCAudioPlayer_SetMaxHoleSize((uint64_t)v36, (double)v81 / v80);
    }
    VCAudioPlayer_SetTargetBoostMode((uint64_t)v36, v59, v58);
    *v10 = v59;
    LogProfileTimeOverLimit_4("SpkrProc: _VCJitterBuffer_UpdateAudioQSize", v56, 0.00499999989, v102, v103, v104, v105, v106, v107, v108, v192);
    memset(buf, 0, 48);
    JTargetJBEstimator_GetSharedSettings(v206, (uint64_t)buf);
    v109.f64[0] = fmax(fmax(*(double *)&buf[16], *((double *)v10 + 24)), *(double *)&buf[8]);
    v109.f64[1] = *(float64_t *)&buf[8];
    *(float32x2_t *)((char *)&v9[5] + 4) = vcvt_f32_f64(vmlaq_f64(vmulq_f64(v109, (float64x2_t)vdupq_n_s64(0x3FB9999999999998uLL)), (float64x2_t)vdupq_n_s64(0x3FECCCCCCCCCCCCDuLL), vcvtq_f64_f32(*(float32x2_t *)((char *)&v9[5] + 4))));
    v110 = v10[59];
    if (v110 - 1 < 2)
    {
      *((double *)v10 + 23) = (double)JitterQueue_QueuedSamples(*((_QWORD *)v10 + 22));
      v111 = (double *)v209;
LABEL_171:
      if (v10[58])
      {
        v152 = (uint64_t *)*((_QWORD *)v10 + 22);
        v153 = _VCJitterBuffer_DesiredQSize(v210);
        JitterQueue_DiscardExcess(v152, v153);
        v10[58] = 0;
      }
      LogProfileTimeOverLimit_4("SpkrProc: PreloadQueueDequeue", v21, 0.00200000009, v112, v113, v114, v115, v116, v117, v118, v191);
      JitterPreloadQueue_AudioPacketFree(*((_QWORD *)v10 + 21), v111);
      ++v208;
      v205 = 1;
      goto LABEL_174;
    }
    v111 = (double *)v209;
    if (v110 == 4)
    {
      v119 = v9[14].i32[0];
      if (v209[1] || !*(_BYTE *)v202 || ((*((unsigned __int16 *)v209 + 7) - v9[115].u16[1]) & 0x8000) == 0)
      {
        v9[115].i16[1] = *((_WORD *)v209 + 7);
        v9[115].i8[0] = 1;
        v120 = v209[4];
        if ((v120 - v9[115].i32[1]) <= 0x7FFFFFFE)
        {
          v121 = v193 + 8 * v119;
          if (v121 >= (unint64_t)v202 || v121 < v193)
            goto LABEL_241;
          *(_QWORD *)(v193 + 8 * v119) = *((_QWORD *)v209 + 228);
          v122 = v119 - 1;
          if (!(_DWORD)v119)
            v122 = 99;
          v123 = (double *)(v193 + 8 * v122);
          if (v123 >= v202 || (unint64_t)v123 < v193)
            goto LABEL_241;
          if (v209[454] >= 1)
          {
            v124 = 0;
            v125 = 0;
            v126 = *v123;
            v127 = *((double *)v209 + 228) - *v123;
            v128 = v209 + 446;
            do
            {
              if (&v128[v124] >= v37 || &v128[v124] < v128)
                goto LABEL_241;
              v131 = v126 > 0.0 && v125 == 0;
              VCAudioPlayer_UpdateLastEnqueuedFrameInformation(v22, *(_QWORD *)&v128[2 * v125++], v131, v127);
              v124 += 2;
            }
            while (v125 < *v37);
            v120 = v209[4];
          }
          v9[14].i32[0] = ((int)v119 + 1) % 100;
          v9[115].i32[1] = v120;
          v111 = (double *)v209;
        }
      }
      v132 = v111[4];
      LODWORD(v133) = *(_DWORD *)VCAudioPlayer_GetPlaybackFormat(v22);
      v134 = (double)v133;
      v135 = (int)(*(double *)&v9[1] * v134);
      if (v135)
      {
        if (*(double *)&v9[3] + 3.0 < v132)
        {
          v136 = v9->i32[0] + v135;
          if (v136 >= (int)(v134 * 0.2))
            v136 = (int)(v134 * 0.2);
          v9->i32[0] = v136;
          *(double *)&v9[3] = v132;
        }
        *(double *)&v9[4] = v132;
        v9[1] = 0;
      }
      else if (*(double *)&v9[4] + 5.0 < v132)
      {
        if (v9->i32[0] >= 1)
          v9->i32[0] = (int)((double)v9->i32[0] + v134 * -0.02) & ~((int)((double)v9->i32[0] + v134 * -0.02) >> 31);
        *(double *)&v9[4] = v132;
      }
      v139 = 0.0;
      if (VRTraceIsInternalOSInstalled())
        v139 = micro();
      v140 = JitterQueue_QueuedSamples(*((_QWORD *)v10 + 22));
      v148 = (double)(VCAudioPlayer_GetLeftOverSamples(v22) + v140);
      v149 = *((double *)v10 + 28) * v148 + *((double *)v10 + 23) * (1.0 - *((double *)v10 + 28));
      if (v149 < 0.0)
      {
        if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
        {
          v150 = VRTraceErrorLogLevelToCSTR();
          v151 = *MEMORY[0x1E0CF2758];
          if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
          {
            v157 = *v204;
            *(_DWORD *)buf = 136316674;
            *(_QWORD *)&buf[4] = v150;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "_VCJitterBuffer_UpdateAvgQSize";
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = 265;
            *(_WORD *)&buf[28] = 2048;
            *(double *)&buf[30] = v157;
            *(_WORD *)&buf[38] = 2048;
            *(double *)&buf[40] = v149;
            *(_WORD *)&buf[48] = 1024;
            *(_DWORD *)v219 = v140;
            *(_WORD *)&v219[4] = 2048;
            v220 = v148;
            _os_log_error_impl(&dword_1D8A54000, v151, OS_LOG_TYPE_ERROR, " [%s] %s:%d Please file a radar on AVConference Media | All. Average JB queue size is negative! Current size: %f, new size: %f, jitter samples: %d, total samples: %f", buf, 0x40u);
          }
        }
        reportingSymptom();
        v149 = 0.0;
      }
      *v204 = v149;
      LogProfileTimeOverLimit_4("SpkrProc: UpdateAvgQSize", v139, 0.00499999989, v141, v142, v143, v144, v145, v146, v147, v191);
      goto LABEL_171;
    }
    if (v110 != 3)
    {
      v137 = (uint64_t *)*((_QWORD *)v10 + 22);
      v138 = _VCJitterBuffer_DesiredQSize(v210);
      JitterQueue_DiscardExcess(v137, v138);
      v10[58] = 0;
      *((double *)v10 + 23) = (double)JitterQueue_QueuedSamples(*((_QWORD *)v10 + 22));
      goto LABEL_171;
    }
    JitterPreloadQueue_AudioPacketFree(*((_QWORD *)v10 + 21), v209);
LABEL_174:
    v21 = micro();
    if (v21 >= v207)
      goto LABEL_181;
  }
  if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    goto LABEL_19;
  v154 = v10[59];
  *(_DWORD *)buf = 136316418;
  *(_QWORD *)&buf[4] = v31;
  *(_WORD *)&buf[12] = 2080;
  *(_QWORD *)&buf[14] = "_VCJitterBuffer_DequeuePacketsFromPreloadQueue";
  *(_WORD *)&buf[22] = 1024;
  *(_DWORD *)&buf[24] = 602;
  *(_WORD *)&buf[28] = 2048;
  *(_QWORD *)&buf[30] = v210;
  *(_WORD *)&buf[38] = 1024;
  *(_DWORD *)&buf[40] = v23 == 0;
  *(_WORD *)&buf[44] = 1024;
  *(_DWORD *)&buf[46] = v154;
  _os_log_debug_impl(&dword_1D8A54000, v32, OS_LOG_TYPE_DEBUG, " [%s] %s:%d [%p] Dequeue packet, is audio packet null:%d, state %d", buf, 0x32u);
  if (v23)
    goto LABEL_20;
LABEL_179:
  if (v10[59] == 3)
  {
    JitterQueue_Reset(*((uint64_t **)v10 + 22));
    VCAudioPlayer_NewStream(v22);
    v10[59] = 0;
  }
LABEL_181:
  if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
  {
    v165 = VRTraceErrorLogLevelToCSTR();
    v166 = *MEMORY[0x1E0CF2758];
    v167 = *MEMORY[0x1E0CF2758];
    if (*MEMORY[0x1E0CF2748])
    {
      if (os_log_type_enabled(v167, OS_LOG_TYPE_DEFAULT))
      {
        v168 = v10[59];
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = v165;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "_VCJitterBuffer_DequeuePacketsFromPreloadQueue";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = 655;
        *(_WORD *)&buf[28] = 2048;
        *(_QWORD *)&buf[30] = v210;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v168;
        *(_WORD *)&buf[44] = 1024;
        *(_DWORD *)&buf[46] = v205;
        _os_log_impl(&dword_1D8A54000, v166, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] JBState[%d] packetDequeue[%d]", buf, 0x32u);
      }
    }
    else if (os_log_type_enabled(v167, OS_LOG_TYPE_DEBUG))
    {
      v190 = v10[59];
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = v165;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "_VCJitterBuffer_DequeuePacketsFromPreloadQueue";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = 655;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v210;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v190;
      *(_WORD *)&buf[44] = 1024;
      *(_DWORD *)&buf[46] = v205;
      _os_log_debug_impl(&dword_1D8A54000, v166, OS_LOG_TYPE_DEBUG, " [%s] %s:%d [%p] JBState[%d] packetDequeue[%d]", buf, 0x32u);
    }
  }
  LogProfileTimeOverLimit_4("SpkrProc: PreloadQueueDequeue Loop, Iterations = %d", v194, 0.00200000009, v158, v159, v160, v161, v162, v163, v164, v208);
  *(_QWORD *)v222 = v203;
  *(_DWORD *)v223 = -1431655766;
  *(_DWORD *)&v222[8] = SampleCount;
  *(_QWORD *)&v223[4] = a3;
  *(_QWORD *)&v224 = a5;
  *((_QWORD *)&v224 + 1) = &v214;
  v225 = &v216;
  v226 = a7;
  v227 = &v215;
  memset(v212, 170, sizeof(v212));
  v213 = xmmword_1D91111D0;
  *(_QWORD *)&v212[0] = JTargetJBEstimator_GetSpikeInfo(v13);
  *((_QWORD *)&v212[0] + 1) = JTargetJBEstimator_GetFrequentSpikeInfo(v13);
  LODWORD(v212[1]) = _VCJitterBuffer_DesiredQSize(v210);
  *((_QWORD *)&v212[1] + 1) = v10 + 46;
  v213 = *((_OWORD *)v10 + 12);
  if (!v210[27].i8[0])
  {
    v171 = a4;
    if (v9[120].i8[0])
    {
      v9[120].i8[0] = 0;
      VCAudioPlayer_ForceDecoderReset((uint64_t)&v210[36]);
      *(double *)&v9[121] = v196;
      v9[122].i32[0] = v10[62];
    }
LABEL_209:
    v175 = v210 + 36;
    if (v10[59] > 3)
    {
      VCAudioPlayer_GetSamples((uint64_t)v175, (uint64_t)v222, (uint64_t)v212);
      if (v215)
      {
        v176 = v9[12].i32[0];
        v9[12].i32[0] = v176 + 1;
        v177 = v176 < 249;
      }
      else
      {
        v9[12].i32[0] = 0;
        v177 = 1;
      }
      v178 = *(double *)&v9[13];
      v179 = v178 != 0.0;
      if (v196 - v178 > 30.0)
        v179 = 0;
      if (!v177 && !v179)
      {
        reportingSymptom();
        *(double *)&v9[13] = v196;
      }
    }
    else
    {
      VCAudioPlayer_GetSilenceSamples(v175, (uint64_t)v222, (uint64_t)v212);
    }
    if (v214 >= 0)
      v180 = 1;
    else
      v180 = -1;
    VCAudioBufferList_SetPriority(v203, v180);
    if (!v10[61])
      v10[61] = v205;
    if (a6)
      *a6 = v216;
    if (v171)
      *v171 = VCAudioPlayer_IsTimestampValid((uint64_t)&v210[36]);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      v181 = VRTraceErrorLogLevelToCSTR();
      v182 = *MEMORY[0x1E0CF2758];
      v183 = *MEMORY[0x1E0CF2758];
      if (*MEMORY[0x1E0CF2748])
      {
        if (os_log_type_enabled(v183, OS_LOG_TYPE_DEFAULT))
        {
          v184 = v10[59];
          v185 = *a3;
          if (a7)
            v186 = *a7;
          else
            v186 = -1;
          *(_DWORD *)buf = 136317186;
          *(_QWORD *)&buf[4] = v181;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "VCJitterBuffer_PlaybackGetSamples";
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = 1173;
          *(_WORD *)&buf[28] = 2048;
          *(_QWORD *)&buf[30] = v210;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v184;
          *(_WORD *)&buf[44] = 1024;
          *(_DWORD *)&buf[46] = SampleCount;
          *(_WORD *)v219 = 1024;
          *(_DWORD *)&v219[2] = v185;
          LOWORD(v220) = 1024;
          *(_DWORD *)((char *)&v220 + 2) = v216;
          HIWORD(v220) = 1024;
          v221 = v186;
          _os_log_impl(&dword_1D8A54000, v182, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] JBState[%d] sampleCount[%d] timestamp[%d] isSilence[%d] consecutiveSilenceCount[%d]", buf, 0x44u);
        }
      }
      else if (os_log_type_enabled(v183, OS_LOG_TYPE_DEBUG))
      {
        v187 = v10[59];
        v188 = *a3;
        if (a7)
          v189 = *a7;
        else
          v189 = -1;
        *(_DWORD *)buf = 136317186;
        *(_QWORD *)&buf[4] = v181;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "VCJitterBuffer_PlaybackGetSamples";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = 1173;
        *(_WORD *)&buf[28] = 2048;
        *(_QWORD *)&buf[30] = v210;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = v187;
        *(_WORD *)&buf[44] = 1024;
        *(_DWORD *)&buf[46] = SampleCount;
        *(_WORD *)v219 = 1024;
        *(_DWORD *)&v219[2] = v188;
        LOWORD(v220) = 1024;
        *(_DWORD *)((char *)&v220 + 2) = v216;
        HIWORD(v220) = 1024;
        v221 = v189;
        _os_log_debug_impl(&dword_1D8A54000, v182, OS_LOG_TYPE_DEBUG, " [%s] %s:%d [%p] JBState[%d] sampleCount[%d] timestamp[%d] isSilence[%d] consecutiveSilenceCount[%d]", buf, 0x44u);
      }
    }
    return;
  }
  v169 = JitterQueue_QueuedSamples(*((_QWORD *)v10 + 22));
  buf[0] = 0;
  v217 = 0;
  LastFramePriority = JitterQueue_GetLastFramePriority(*((_QWORD *)v10 + 22), buf, &v217);
  v171 = a4;
  if (v210[27].i8[0])
  {
    v172 = buf[0] < 0x7Fu ? LastFramePriority : 0;
    if (v172 == 1)
      VCAudioPlayer_SuspendAudioErasureMeasurement((uint64_t)&v210[36]);
  }
  if (!v169)
  {
    v173 = v9 + 120;
    if (v9[120].i8[0])
    {
      v173->i8[0] = 1;
      goto LABEL_205;
    }
    v174 = v196 - *(double *)&v9[119] > 0.2;
    goto LABEL_204;
  }
  *(double *)&v9[119] = v196;
  if (!v9[120].i8[0])
  {
    v174 = 0;
    v173 = v9 + 120;
LABEL_204:
    v173->i8[0] = v174;
    if (!v174)
      goto LABEL_209;
    goto LABEL_205;
  }
  v9[120].i8[0] = 0;
  VCAudioPlayer_ForceDecoderReset((uint64_t)&v210[36]);
  *(double *)&v9[121] = v196;
  v9[122].i32[0] = v10[62];
  if (!v9[120].i8[0])
    goto LABEL_209;
LABEL_205:
  VCAudioPlayer_GetSilenceSamples(v210 + 36, (uint64_t)v222, (uint64_t)v212);
  if (a6)
    *a6 = 1;
  VCAudioBufferList_SetPriority(v203, 1);
  if (a4)
    *a4 = VCAudioPlayer_IsTimestampValid((uint64_t)&v210[36]);
}

uint64_t _VCJitterBuffer_DesiredQSize(_DWORD *a1)
{
  _DWORD *v2;
  uint64_t result;
  _DWORD *PlaybackFormat;
  unint64_t v5;
  unint64_t v6;

  v2 = a1 + 33953;
  result = a1[33953];
  if (!(_DWORD)result)
  {
    if (a1[50] == 3)
    {
      PlaybackFormat = (_DWORD *)VCAudioPlayer_GetPlaybackFormat((uint64_t)(a1 + 72));
      LODWORD(v5) = a1[62];
      HIDWORD(v6) = 1083129856;
      LODWORD(v6) = *PlaybackFormat;
      return (int)((double)v5 / 1000.0 * (double)v6);
    }
    else
    {
      return (v2[17] + v2[1]);
    }
  }
  return result;
}

double VCJitterBuffer_GetAWDReportingMetrics(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  double result;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  double v10;
  double v11;
  int v12;
  double v13;
  double v14;
  int v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    JitterQueue_GetUnderflowRateForInterval(*(_DWORD **)(a1 + 135776));
    *(_DWORD *)a2 = v4;
    *(float *)(a2 + 4) = VCAudioPlayer_GetFrameErasureRate(a1 + 288);
    *(float *)(a2 + 8) = VCAudioPlayer_GetSpeechErasureRate(a1 + 288);
    v5 = JitterQueue_QueuedSamples(*(_QWORD *)(a1 + 135776));
    *(_DWORD *)(a2 + 12) = VCAudioPlayer_GetLeftOverSamples(a1 + 288) + v5;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      v7 = VRTraceErrorLogLevelToCSTR();
      v8 = *MEMORY[0x1E0CF2758];
      v9 = *MEMORY[0x1E0CF2758];
      if (*MEMORY[0x1E0CF2748])
      {
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          v10 = *(float *)a2;
          v11 = *(float *)(a2 + 4);
          v12 = *(_DWORD *)(a2 + 12);
          v16 = 136316674;
          v17 = v7;
          v18 = 2080;
          v19 = "VCJitterBuffer_GetAWDReportingMetrics";
          v20 = 1024;
          v21 = 1191;
          v22 = 2048;
          v23 = a1;
          v24 = 2048;
          v25 = v10;
          v26 = 2048;
          v27 = v11;
          v28 = 1024;
          v29 = v12;
          _os_log_impl(&dword_1D8A54000, v8, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] AWD Metrics: underflowRate[%f] frameErasureRate[%f] totalQueueSizeSamples[%d]", (uint8_t *)&v16, 0x40u);
        }
      }
      else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        v13 = *(float *)a2;
        v14 = *(float *)(a2 + 4);
        v15 = *(_DWORD *)(a2 + 12);
        v16 = 136316674;
        v17 = v7;
        v18 = 2080;
        v19 = "VCJitterBuffer_GetAWDReportingMetrics";
        v20 = 1024;
        v21 = 1191;
        v22 = 2048;
        v23 = a1;
        v24 = 2048;
        v25 = v13;
        v26 = 2048;
        v27 = v14;
        v28 = 1024;
        v29 = v15;
        _os_log_debug_impl(&dword_1D8A54000, v8, OS_LOG_TYPE_DEBUG, " [%s] %s:%d [%p] AWD Metrics: underflowRate[%f] frameErasureRate[%f] totalQueueSizeSamples[%d]", (uint8_t *)&v16, 0x40u);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCJitterBuffer_GetAWDReportingMetrics_cold_1();
  }
  return result;
}

void VCJitterBuffer_GetWRMReportingMetrics(_DWORD *a1, int *a2)
{
  uint64_t WrmMetrics;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  _DWORD *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    WrmMetrics = VCAudioPlayer_GetWrmMetrics((uint64_t)(a1 + 72));
    *(_OWORD *)a2 = *(_OWORD *)WrmMetrics;
    *((_QWORD *)a2 + 2) = *(_QWORD *)(WrmMetrics + 16);
    a2[8] = a1[33980];
    *((_QWORD *)a2 + 3) = (int)_VCJitterBuffer_DesiredQSize(a1);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      v5 = VRTraceErrorLogLevelToCSTR();
      v6 = *MEMORY[0x1E0CF2758];
      v7 = *MEMORY[0x1E0CF2758];
      if (*MEMORY[0x1E0CF2748])
      {
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          v8 = *a2;
          v9 = a2[1];
          v10 = a2[2];
          v11 = a2[3];
          v12 = *((_QWORD *)a2 + 2);
          v13 = *((_QWORD *)a2 + 3);
          v20 = 136317442;
          v21 = v5;
          v22 = 2080;
          v23 = "VCJitterBuffer_GetWRMReportingMetrics";
          v24 = 1024;
          v25 = 1208;
          v26 = 2048;
          v27 = a1;
          v28 = 1024;
          v29 = v8;
          v30 = 1024;
          v31 = v9;
          v32 = 1024;
          v33 = v10;
          v34 = 1024;
          v35 = v11;
          v36 = 2048;
          v37 = v12;
          v38 = 2048;
          v39 = v13;
          _os_log_impl(&dword_1D8A54000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] WRM Metrics: playbackCount[%d] playbackCountSpeech[%d] erasureCount[%d] erasureSilence[%d] nominalJitterBufferDelay[%llu] targetJitterQueueSize(Audio)[%llu]", (uint8_t *)&v20, 0x52u);
        }
      }
      else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        v14 = *a2;
        v15 = a2[1];
        v16 = a2[2];
        v17 = a2[3];
        v18 = *((_QWORD *)a2 + 2);
        v19 = *((_QWORD *)a2 + 3);
        v20 = 136317442;
        v21 = v5;
        v22 = 2080;
        v23 = "VCJitterBuffer_GetWRMReportingMetrics";
        v24 = 1024;
        v25 = 1208;
        v26 = 2048;
        v27 = a1;
        v28 = 1024;
        v29 = v14;
        v30 = 1024;
        v31 = v15;
        v32 = 1024;
        v33 = v16;
        v34 = 1024;
        v35 = v17;
        v36 = 2048;
        v37 = v18;
        v38 = 2048;
        v39 = v19;
        _os_log_debug_impl(&dword_1D8A54000, v6, OS_LOG_TYPE_DEBUG, " [%s] %s:%d [%p] WRM Metrics: playbackCount[%d] playbackCountSpeech[%d] erasureCount[%d] erasureSilence[%d] nominalJitterBufferDelay[%llu] targetJitterQueueSize(Audio)[%llu]", (uint8_t *)&v20, 0x52u);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCJitterBuffer_GetWRMReportingMetrics_cold_1();
  }
}

double VCJitterBuffer_GetPlaybackReportingMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int ErrorLogLevelForModule;
  double v7;
  double v8;
  double v9;
  _BYTE *v10;
  NSObject **v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double result;
  uint64_t SpikeReportingMetrics;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  int v28;
  int v29;
  int v30;
  double v31;
  double v32;
  int v33;
  int v34;
  uint64_t v35;
  NSObject *v36;
  NSObject *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  int v54;
  int v55;
  int v56;
  double v57;
  double v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  double v66;
  double v67;
  double v68;
  int v69;
  uint64_t v70;
  __int16 v71;
  const char *v72;
  __int16 v73;
  int v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  _BYTE v78[10];
  double v79;
  _BYTE v80[10];
  __int16 v81;
  double v82;
  __int16 v83;
  _BYTE v84[10];
  double v85;
  double v86;
  __int16 v87;
  double v88;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *(_BYTE *)(a2 + 136) = *(_BYTE *)(a1 + 280);
    v4 = a1 + 288;
    *(float *)a2 = VCAudioPlayer_GetAverageLossRate(a1 + 288);
    *(float *)(a2 + 4) = VCAudioPlayer_GetLastAverageMissingPercentOverWindow(v4);
    *(float *)(a2 + 12) = VCAudioPlayer_GetAverageJitterSizeForWindow(v4);
    *(float *)(a2 + 8) = VCAudioPlayer_MaxInterArrivalTimeForWindow(v4);
    VCAudioPlayer_GetDTMFEventCount(v4);
    *(_DWORD *)(a2 + 132) = v5;
    ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
    v10 = (_BYTE *)MEMORY[0x1E0CF2748];
    v11 = (NSObject **)MEMORY[0x1E0CF2758];
    if (ErrorLogLevelForModule >= 8)
    {
      v12 = VRTraceErrorLogLevelToCSTR();
      v13 = *v11;
      v14 = *v11;
      if (*v10)
      {
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          v15 = *(float *)a2;
          v16 = *(float *)(a2 + 4);
          v17 = *(float *)(a2 + 12);
          v18 = *(float *)(a2 + 8);
          v69 = 136316930;
          v70 = v12;
          v71 = 2080;
          v72 = "VCJitterBuffer_GetPlaybackReportingMetrics";
          v73 = 1024;
          v74 = 1224;
          v75 = 2048;
          v76 = a1;
          v77 = 2048;
          *(double *)v78 = v15;
          *(_WORD *)&v78[8] = 2048;
          v79 = v16;
          *(_WORD *)v80 = 2048;
          *(double *)&v80[2] = v17;
          v81 = 2048;
          v82 = v18;
          _os_log_impl(&dword_1D8A54000, v13, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] VRDB Playback Metrics: avgLossRate[%f] lastAvgMissPercent[%f] averageJitter[%f] maxJitterForWindow[%f]", (uint8_t *)&v69, 0x4Eu);
        }
      }
      else if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        v46 = *(float *)a2;
        v47 = *(float *)(a2 + 4);
        v48 = *(float *)(a2 + 12);
        v49 = *(float *)(a2 + 8);
        v69 = 136316930;
        v70 = v12;
        v71 = 2080;
        v72 = "VCJitterBuffer_GetPlaybackReportingMetrics";
        v73 = 1024;
        v74 = 1224;
        v75 = 2048;
        v76 = a1;
        v77 = 2048;
        *(double *)v78 = v46;
        *(_WORD *)&v78[8] = 2048;
        v79 = v47;
        *(_WORD *)v80 = 2048;
        *(double *)&v80[2] = v48;
        v81 = 2048;
        v82 = v49;
        _os_log_debug_impl(&dword_1D8A54000, v13, OS_LOG_TYPE_DEBUG, " [%s] %s:%d [%p] VRDB Playback Metrics: avgLossRate[%f] lastAvgMissPercent[%f] averageJitter[%f] maxJitterForWindow[%f]", (uint8_t *)&v69, 0x4Eu);
      }
    }
    VCAudioPlayer_GetTimescaleMetrics(v4, a2, v7, v8, v9);
    VCAudioPlayer_GetRedErasureMetrics(v4, a2);
    SpikeReportingMetrics = JTargetJBEstimator_GetSpikeReportingMetrics(a1 + 54592);
    *(_DWORD *)(a2 + 144) = *(_DWORD *)SpikeReportingMetrics;
    *(_DWORD *)(a2 + 148) = *(_DWORD *)(SpikeReportingMetrics + 4);
    *(_QWORD *)(a2 + 152) = *(_QWORD *)(SpikeReportingMetrics + 8);
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      v21 = VRTraceErrorLogLevelToCSTR();
      v22 = *v11;
      v23 = *v11;
      if (*v10)
      {
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          v24 = *(float *)(a2 + 16);
          v25 = *(float *)(a2 + 20);
          v26 = *(float *)(a2 + 36);
          v27 = *(float *)(a2 + 40);
          v28 = *(_DWORD *)(a2 + 44);
          v29 = *(_DWORD *)(a2 + 48);
          v30 = *(_DWORD *)(a2 + 52);
          v31 = *(float *)(a2 + 24);
          v32 = *(float *)(a2 + 32);
          v33 = *(_DWORD *)(a2 + 88);
          v34 = *(_DWORD *)(a2 + 68);
          v69 = 136318722;
          v70 = v21;
          v71 = 2080;
          v72 = "VCJitterBuffer_GetPlaybackReportingMetrics";
          v73 = 1024;
          v74 = 1233;
          v75 = 2048;
          v76 = a1;
          v77 = 2048;
          *(double *)v78 = v24;
          *(_WORD *)&v78[8] = 2048;
          v79 = v25;
          *(_WORD *)v80 = 2048;
          *(double *)&v80[2] = v26;
          v81 = 2048;
          v82 = v27;
          v83 = 1024;
          *(_DWORD *)v84 = v28;
          *(_WORD *)&v84[4] = 1024;
          *(_DWORD *)&v84[6] = v29;
          LOWORD(v85) = 1024;
          *(_DWORD *)((char *)&v85 + 2) = v30;
          HIWORD(v85) = 2048;
          v86 = v31;
          v87 = 2048;
          v88 = v32;
          v89 = 1024;
          v90 = v33;
          v91 = 1024;
          v92 = v34;
          _os_log_impl(&dword_1D8A54000, v22, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] VRDB RED Playback Metrics: totalFrameErasureRate[%f] totalFrameErasureRateAlt[%f] redErasureCompensationRate[%f] maxRedFrameRecoveryDepth[%f] redAudioFramesPlayed[%d] redAudioBytesPlayed[%d] totalFramesPlayed[%d] totalSpeechErasureRate[%f] totalWindowedErasureRate[%f] maxConsecutiveAudioErasures[%d], totalErasureCount[%u]", (uint8_t *)&v69, 0x80u);
        }
      }
      else if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        v50 = *(float *)(a2 + 16);
        v51 = *(float *)(a2 + 20);
        v52 = *(float *)(a2 + 36);
        v53 = *(float *)(a2 + 40);
        v54 = *(_DWORD *)(a2 + 44);
        v55 = *(_DWORD *)(a2 + 48);
        v56 = *(_DWORD *)(a2 + 52);
        v57 = *(float *)(a2 + 24);
        v58 = *(float *)(a2 + 32);
        v59 = *(_DWORD *)(a2 + 88);
        v60 = *(_DWORD *)(a2 + 68);
        v69 = 136318722;
        v70 = v21;
        v71 = 2080;
        v72 = "VCJitterBuffer_GetPlaybackReportingMetrics";
        v73 = 1024;
        v74 = 1233;
        v75 = 2048;
        v76 = a1;
        v77 = 2048;
        *(double *)v78 = v50;
        *(_WORD *)&v78[8] = 2048;
        v79 = v51;
        *(_WORD *)v80 = 2048;
        *(double *)&v80[2] = v52;
        v81 = 2048;
        v82 = v53;
        v83 = 1024;
        *(_DWORD *)v84 = v54;
        *(_WORD *)&v84[4] = 1024;
        *(_DWORD *)&v84[6] = v55;
        LOWORD(v85) = 1024;
        *(_DWORD *)((char *)&v85 + 2) = v56;
        HIWORD(v85) = 2048;
        v86 = v57;
        v87 = 2048;
        v88 = v58;
        v89 = 1024;
        v90 = v59;
        v91 = 1024;
        v92 = v60;
        _os_log_debug_impl(&dword_1D8A54000, v22, OS_LOG_TYPE_DEBUG, " [%s] %s:%d [%p] VRDB RED Playback Metrics: totalFrameErasureRate[%f] totalFrameErasureRateAlt[%f] redErasureCompensationRate[%f] maxRedFrameRecoveryDepth[%f] redAudioFramesPlayed[%d] redAudioBytesPlayed[%d] totalFramesPlayed[%d] totalSpeechErasureRate[%f] totalWindowedErasureRate[%f] maxConsecutiveAudioErasures[%d], totalErasureCount[%u]", (uint8_t *)&v69, 0x80u);
      }
    }
    if ((int)VRTraceGetErrorLogLevelForModule() >= 8)
    {
      v35 = VRTraceErrorLogLevelToCSTR();
      v36 = *v11;
      v37 = *v11;
      if (*v10)
      {
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          v38 = *(_DWORD *)(a2 + 92);
          v39 = *(_DWORD *)(a2 + 96);
          v40 = *(_DWORD *)(a2 + 100);
          v41 = *(_DWORD *)(a2 + 104);
          v42 = *(_DWORD *)(a2 + 108);
          v43 = *(float *)(a2 + 112);
          v44 = *(float *)(a2 + 120);
          v45 = *(float *)(a2 + 116);
          v69 = 136317954;
          v70 = v35;
          v71 = 2080;
          v72 = "VCJitterBuffer_GetPlaybackReportingMetrics";
          v73 = 1024;
          v74 = 1235;
          v75 = 2048;
          v76 = a1;
          v77 = 1024;
          *(_DWORD *)v78 = v38;
          *(_WORD *)&v78[4] = 1024;
          *(_DWORD *)&v78[6] = v39;
          LOWORD(v79) = 1024;
          *(_DWORD *)((char *)&v79 + 2) = v40;
          HIWORD(v79) = 1024;
          *(_DWORD *)v80 = v41;
          *(_WORD *)&v80[4] = 1024;
          *(_DWORD *)&v80[6] = v42;
          v81 = 2048;
          v82 = v43;
          v83 = 2048;
          *(double *)v84 = v44;
          *(_WORD *)&v84[8] = 2048;
          v85 = v45;
          _os_log_impl(&dword_1D8A54000, v36, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d [%p] VRDB Timescale Metrics: totalTimescaleCount=%d silenceTimescaleCount=%d speechTimescaleCount=%d expandTimescaleCount=%d compressTimescaleCount=%d totaltimescaleRate=%f silenceTimescaleRate=%f speechTimescaleRate=%f", (uint8_t *)&v69, 0x62u);
        }
      }
      else if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
      {
        v61 = *(_DWORD *)(a2 + 92);
        v62 = *(_DWORD *)(a2 + 96);
        v63 = *(_DWORD *)(a2 + 100);
        v64 = *(_DWORD *)(a2 + 104);
        v65 = *(_DWORD *)(a2 + 108);
        v66 = *(float *)(a2 + 112);
        v67 = *(float *)(a2 + 120);
        v68 = *(float *)(a2 + 116);
        v69 = 136317954;
        v70 = v35;
        v71 = 2080;
        v72 = "VCJitterBuffer_GetPlaybackReportingMetrics";
        v73 = 1024;
        v74 = 1235;
        v75 = 2048;
        v76 = a1;
        v77 = 1024;
        *(_DWORD *)v78 = v61;
        *(_WORD *)&v78[4] = 1024;
        *(_DWORD *)&v78[6] = v62;
        LOWORD(v79) = 1024;
        *(_DWORD *)((char *)&v79 + 2) = v63;
        HIWORD(v79) = 1024;
        *(_DWORD *)v80 = v64;
        *(_WORD *)&v80[4] = 1024;
        *(_DWORD *)&v80[6] = v65;
        v81 = 2048;
        v82 = v66;
        v83 = 2048;
        *(double *)v84 = v67;
        *(_WORD *)&v84[8] = 2048;
        v85 = v68;
        _os_log_debug_impl(&dword_1D8A54000, v36, OS_LOG_TYPE_DEBUG, " [%s] %s:%d [%p] VRDB Timescale Metrics: totalTimescaleCount=%d silenceTimescaleCount=%d speechTimescaleCount=%d expandTimescaleCount=%d compressTimescaleCount=%d totaltimescaleRate=%f silenceTimescaleRate=%f speechTimescaleRate=%f", (uint8_t *)&v69, 0x62u);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCJitterBuffer_GetPlaybackReportingMetrics_cold_1();
  }
  return result;
}

void VCJitterBuffer_GetReportingMetrics(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v8;
  __int128 *v9;
  float v10;
  float v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (a1)
  {
    v8 = *(double *)(a1 + 135224);
    v9 = (__int128 *)(a1 + 135920);
    v10 = *(float *)(a1 + 135924);
    if (v8 > v10)
      v10 = v8;
    *(float *)(a1 + 135924) = v10;
    if (v8 <= v10)
      v11 = v10;
    else
      v11 = v8;
    *(float *)(a1 + 135928) = v11;
    v12 = *v9;
    v13 = *(_OWORD *)(a1 + 135936);
    v14 = *(_OWORD *)(a1 + 135952);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 135968);
    *(_OWORD *)(a2 + 16) = v13;
    *(_OWORD *)(a2 + 32) = v14;
    *(_OWORD *)a2 = v12;
    VRLogfilePrint(*(_QWORD *)(a1 + 136824), "Red Rx Stats, redAudioFramesReceived = %d , redAudioBytesReceived = %d , redAudioFramesDiscarded = %d , redAudioBytesDiscarded = %d \n", a3, a4, a5, a6, a7, a8, *(_DWORD *)(a2 + 12));
    *(_QWORD *)((char *)v9 + 20) = 0;
    *(_QWORD *)((char *)v9 + 12) = 0;
    *((_DWORD *)v9 + 7) = 0;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCJitterBuffer_GetReportingMetrics_cold_1();
  }
}

void VCJitterBuffer_GetBurstMetrics(uint64_t a1, uint64_t a2)
{
  VCAudioPlayer_GetBurstMetrics(a1 + 288, a2);
}

float VCJitterBuffer_GetDiscardRate(uint64_t a1)
{
  return JitterQueue_GetUnderflowRate(*(_QWORD *)(a1 + 135776));
}

uint64_t VCJitterBuffer_GetRTCPXRJitterBufferParameters(uint64_t result, _WORD *a2, _WORD *a3, _WORD *a4)
{
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int *PlaybackFormat;
  int v10;
  unint64_t v11;

  v6 = result;
  v7 = (uint64_t *)(result + 135776);
  v8 = (int)(*(double *)(result + 136816) * 1000.0);
  if (a2)
    *a2 = v8;
  if (a3)
  {
    PlaybackFormat = (unsigned int *)VCAudioPlayer_GetPlaybackFormat(result + 288);
    v10 = JitterQueue_QueuedSamples(*v7);
    result = VCAudioPlayer_GetLeftOverSamples(v6 + 288);
    v11 = 1000 * (unint64_t)(result + v10) / *PlaybackFormat;
    if (v8 >= (unsigned __int16)v11)
      LOWORD(v11) = v8;
    *a3 = v11;
  }
  if (a4)
    *a4 = (int)(*(double *)(v6 + 54624) * 1000.0);
  return result;
}

BOOL VCJitterBuffer_GetIsRunning(_BOOL8 result)
{
  if (result)
    return *(_DWORD *)(result + 135836) == 4;
  return result;
}

float VCJitterBuffer_GetAverageJitter(uint64_t a1)
{
  return VCAudioPlayer_GetAverageInterarrivalTimeForWindow(a1 + 288);
}

float VCJitterBuffer_GetOWRD(uint64_t a1)
{
  return JLagProcessor_GetOWRD(a1 + 54136);
}

uint64_t VCJitterBuffer_ResetLagReference(uint64_t a1)
{
  return JLagProcessor_ResetLagReference(a1 + 54136);
}

float VCJitterBuffer_GetPercentPacketLateAndMissing(uint64_t a1)
{
  return VCAudioPlayer_GetPercentPacketsLateAndMissing(a1 + 288);
}

uint64_t VCJitterBuffer_GetMaxPlaybackSizeSamples(uint64_t a1)
{
  return *(unsigned int *)(a1 + 480);
}

uint64_t VCJitterBuffer_GetTargetTime(_DWORD *a1)
{
  int v2;

  v2 = _VCJitterBuffer_DesiredQSize(a1);
  return (int)(float)((float)((float)v2 * 1000.0)
                                  / (float)*(unsigned int *)VCAudioPlayer_GetPlaybackFormat((uint64_t)(a1 + 72)));
}

double VCJitterBuffer_GetLastDecodedAudioFrameInfo(uint64_t a1, __n128 *a2)
{
  double result;

  if (a1)
  {
    if (a2)
      *(_QWORD *)&result = VCAudioPlayer_GetLastDecodedAudioFrameInfo(a1 + 288, a2).n128_u64[0];
  }
  return result;
}

void VCJitterBuffer_SetMode(uint64_t a1, int a2)
{
  int ErrorLogLevelForModule;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE buf[24];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (a1)
  {
    if (ErrorLogLevelForModule >= 7)
    {
      v5 = VRTraceErrorLogLevelToCSTR();
      v6 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = v5;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "VCJitterBuffer_SetMode";
        *(_WORD *)&buf[22] = 1024;
        LODWORD(v13) = 1324;
        WORD2(v13) = 1024;
        *(_DWORD *)((char *)&v13 + 6) = a2;
        _os_log_impl(&dword_1D8A54000, v6, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d Jitter buffer configured with mode=%d", buf, 0x22u);
      }
    }
    v20 = 0u;
    v19 = 0u;
    v18 = 0u;
    v17 = 0u;
    v16 = 0u;
    v15 = 0u;
    v14 = 0u;
    v13 = 0u;
    *(_OWORD *)&buf[8] = 0u;
    *(_DWORD *)(a1 + 200) = a2;
    v10 = 0;
    v11 = 0;
    _VCJitterBuffer_GetMinMaxQueueSizeFromConfig((_DWORD *)a1, (double *)&v11, (double *)&v10);
    v8 = v10;
    v7 = v11;
    *(_QWORD *)(a1 + 136816) = v11;
    *(_QWORD *)buf = v7;
    v9 = 0.1;
    if (!a2)
      v9 = 0.25;
    *(_QWORD *)&buf[16] = v8;
    *(double *)&v13 = v9;
    *((_QWORD *)&v14 + 1) = 0x3FEE666666666666;
    JTargetJBEstimator_UpdateJitterBufferParams(a1 + 54592, (uint64_t *)buf);
  }
  else if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCJitterBuffer_SetMode_cold_1();
  }
}

void VCJitterBuffer_SetNetworkType(uint64_t a1, int a2, int a3, int a4)
{
  int ErrorLogLevelForModule;
  uint64_t v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  ErrorLogLevelForModule = VRTraceGetErrorLogLevelForModule();
  if (a1)
  {
    if (ErrorLogLevelForModule >= 7)
    {
      v9 = VRTraceErrorLogLevelToCSTR();
      v10 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v11 = 136316418;
        v12 = v9;
        v13 = 2080;
        v14 = "VCJitterBuffer_SetNetworkType";
        v15 = 1024;
        v16 = 1344;
        v17 = 1024;
        v18 = a2;
        v19 = 1024;
        v20 = a3;
        v21 = 1024;
        v22 = a4;
        _os_log_impl(&dword_1D8A54000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d isCellular[%d] localCellTech[%d] remoteCellTech[%d]", (uint8_t *)&v11, 0x2Eu);
      }
    }
    JTargetJBEstimator_SetNetworkType(a1 + 54592, a2, a3, a4);
  }
  else if (ErrorLogLevelForModule >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCJitterBuffer_SetNetworkType_cold_1();
  }
}

double VCJitterBuffer_ProcessWiFiNetworkNotification(uint64_t a1, __int128 *a2, double a3)
{
  uint64_t *v5;
  char v6;
  double v7;
  __int128 v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v5 = (uint64_t *)(a1 + 135176);
    if (*((_BYTE *)a2 + 8) == 1)
    {
      LOWORD(a3) = *((_WORD *)a2 + 6);
      v6 = 1;
      v7 = (double)*(unint64_t *)&a3 / 1000.0;
    }
    else
    {
      v6 = 0;
      v7 = 0.0;
    }
    *(double *)(a1 + 135872) = v7;
    *(_BYTE *)(a1 + 134258) = v6;
    v8 = *a2;
    *(_OWORD *)(a1 + 136864) = *a2;
    if (*((__int16 *)a2 + 5) != -1 && (int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      v9 = VRTraceErrorLogLevelToCSTR();
      v10 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)a2;
        v12 = *((unsigned __int8 *)a2 + 8);
        v13 = *((unsigned __int16 *)a2 + 5);
        v14 = *((unsigned __int16 *)a2 + 6);
        v15 = v5[87];
        v16 = *v5;
        v18 = 136317442;
        v19 = v9;
        v20 = 2080;
        v21 = "VCJitterBuffer_ProcessWiFiNetworkNotification";
        v22 = 1024;
        v23 = 1362;
        v24 = 2048;
        v25 = a1;
        v26 = 2048;
        v27 = v11;
        v28 = 1024;
        v29 = v12;
        v30 = 1024;
        v31 = v13;
        v32 = 1024;
        v33 = v14;
        v34 = 2048;
        v35 = v15;
        v36 = 2048;
        v37 = v16;
        _os_log_impl(&dword_1D8A54000, v10, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCJitterBuffer[%p] Network Notification timestamp=%llu intermittentState=%u estimatedIntermittentPeriod=%u singleOutagePeriod=%u NWNotificationTarget=%f targetJBSize=%f", (uint8_t *)&v18, 0x56u);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCJitterBuffer_ProcessWiFiNetworkNotification_cold_1();
  }
  return *(double *)&v8;
}

void VCJitterBuffer_ProcessCellularNetworkNotification(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  _OWORD *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = (uint64_t *)(a1 + 135176);
    v5 = (_OWORD *)(a1 + 136880);
    if ((*(unsigned __int8 *)(a2 + 24) != *(unsigned __int8 *)(a1 + 136904)
       || *(unsigned __int8 *)(a2 + 16) != *(unsigned __int8 *)(a1 + 136896))
      && (int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      v6 = VRTraceErrorLogLevelToCSTR();
      v7 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v8 = *(_QWORD *)(a2 + 8);
        v9 = *(unsigned __int8 *)(a2 + 16);
        v10 = *(unsigned __int8 *)(a2 + 24);
        v11 = *(unsigned __int16 *)(a2 + 22);
        v12 = *(char *)(a2 + 17);
        v13 = *(unsigned __int8 *)(a2 + 18);
        v14 = *(unsigned __int16 *)(a2 + 20);
        v15 = *v4;
        v17 = 136317954;
        v18 = v6;
        v19 = 2080;
        v20 = "VCJitterBuffer_ProcessCellularNetworkNotification";
        v21 = 1024;
        v22 = 1370;
        v23 = 2048;
        v24 = a1;
        v25 = 2048;
        v26 = v8;
        v27 = 1024;
        v28 = v9;
        v29 = 1024;
        v30 = v10;
        v31 = 1024;
        v32 = v11;
        v33 = 1024;
        v34 = v12;
        v35 = 1024;
        v36 = v13;
        v37 = 1024;
        v38 = v14;
        v39 = 2048;
        v40 = v15;
        _os_log_impl(&dword_1D8A54000, v7, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCJitterBuffer[%p] Cellular Network Notification: timestamp=%llu radioAccessTechnology=%u outageState=%u estimatedOutagePeriod=%u signalQuality=%d dlBLER=%u cdrxCycleLength=%u targetJBSize=%f", (uint8_t *)&v17, 0x5Eu);
      }
    }
    v16 = *(_OWORD *)(a2 + 16);
    *v5 = *(_OWORD *)a2;
    v5[1] = v16;
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCJitterBuffer_ProcessCellularNetworkNotification_cold_1();
  }
}

void VCJitterBuffer_SetSkipDecodeOnSilence(uint64_t a1, char a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *(_BYTE *)(a1 + 216) = a2;
    if ((int)VRTraceGetErrorLogLevelForModule() >= 7)
    {
      v3 = VRTraceErrorLogLevelToCSTR();
      v4 = *MEMORY[0x1E0CF2758];
      if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
      {
        v5 = *(unsigned __int8 *)(a1 + 216);
        v6 = 136316162;
        v7 = v3;
        v8 = 2080;
        v9 = "VCJitterBuffer_SetSkipDecodeOnSilence";
        v10 = 1024;
        v11 = 1380;
        v12 = 2048;
        v13 = a1;
        v14 = 1024;
        v15 = v5;
        _os_log_impl(&dword_1D8A54000, v4, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d VCJitterBuffer[%p] skipDecodeOnSilence=%d", (uint8_t *)&v6, 0x2Cu);
      }
    }
  }
  else if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCJitterBuffer_SetSkipDecodeOnSilence_cold_1();
  }
}

uint64_t VCJitterBuffer_SetPayloadInfo(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (a2)
      *(_QWORD *)(result + 136912) = a2;
  }
  return result;
}

char *VCJitterBuffer_AudioPacketAlloc(uint64_t a1)
{
  if (a1)
    return JitterPreloadQueue_AudioPacketAlloc(*(_QWORD *)(a1 + 135768));
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCJitterBuffer_AudioPacketAlloc_cold_1();
  }
  return 0;
}

_QWORD *VCJitterBuffer_AudioFrameAlloc(uint64_t a1)
{
  if (a1)
    return JitterPreloadQueue_AudioFrameAlloc(*(_QWORD *)(a1 + 135768));
  if ((int)VRTraceGetErrorLogLevelForModule() >= 3)
  {
    VRTraceErrorLogLevelToCSTR();
    if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_ERROR))
      VCJitterBuffer_AudioFrameAlloc_cold_1();
  }
  return 0;
}

void LogProfileTimeOverLimit_4(const char *a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  double v14;
  __int128 v15;
  uint64_t v16;
  NSObject *v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  char *v25;
  __int16 v26;
  double v27;
  char __str[16];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (VRTraceIsInternalOSInstalled())
  {
    v14 = micro() - a2;
    if (v14 > a3)
    {
      *(_QWORD *)&v15 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v42 = v15;
      v43 = v15;
      v40 = v15;
      v41 = v15;
      v38 = v15;
      v39 = v15;
      v36 = v15;
      v37 = v15;
      v34 = v15;
      v35 = v15;
      v33 = v15;
      v31 = v15;
      v32 = v15;
      v29 = v15;
      v30 = v15;
      *(_OWORD *)__str = v15;
      vsnprintf(__str, 0x100uLL, a1, &a11);
      if ((int)VRTraceGetErrorLogLevelForModule() >= 5)
      {
        v16 = VRTraceErrorLogLevelToCSTR();
        v17 = *MEMORY[0x1E0CF2758];
        if (os_log_type_enabled((os_log_t)*MEMORY[0x1E0CF2758], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136316162;
          v19 = v16;
          v20 = 2080;
          v21 = "_LogProfileTimeLimitHelper";
          v22 = 1024;
          v23 = 36;
          v24 = 2080;
          v25 = __str;
          v26 = 2048;
          v27 = v14;
          _os_log_impl(&dword_1D8A54000, v17, OS_LOG_TYPE_DEFAULT, " [%s] %s:%d %s: Took a long time %fs", buf, 0x30u);
        }
      }
    }
  }
}

void sub_1D900DE28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D900FF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D9010124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_10_18@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 40) = a2;
  return objc_msgSend(a1, "UID");
}

void _AVCRateController_ConfigureInternal_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "AVCRC [%s] %s:%d Not allowed to force algorithm config for mode=%d yet!", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _AVCRateController_ConfigureInternal_cold_2()
{
  __int16 v0;
  int v1;
  os_log_t v2;
  uint8_t v3[24];
  int v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  v4 = 1203;
  v5 = v0;
  v6 = v1;
  _os_log_debug_impl(&dword_1D8A54000, v2, OS_LOG_TYPE_DEBUG, "AVCRC [%s] %s:%d AdaptiveLearning(AVCRateController): Initial bitrate defaulted to %d", v3, 0x22u);
  OUTLINED_FUNCTION_3();
}

void _AVCRateController_NotifyTargetBitrateChange_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "AVCRC [%s] %s:%d (%p) rateControllerDelegate is nil", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _AVCRateController_DoRateControlWithStatistics_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "AVCRC [%s] %s:%d Failed to create nwActivity", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _AVCRateController_DoRateControlWithNWConnectionStatistics_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "AVCRC [%s] %s:%d Not using nwConnectionNotification", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _AVCRateController_DoRateControlWithNWConnectionStatistics_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "AVCRC [%s] %s:%d Wrong statistics type=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _AVCRateController_DoRateControl_cold_1()
{
  os_log_t v0;
  uint8_t v1[24];
  int v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  v2 = 2582;
  v3 = 2048;
  v4 = 0;
  _os_log_error_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_ERROR, "AVCRC [%s] %s:%d Invalid statistics=%p", v1, 0x26u);
  OUTLINED_FUNCTION_3();
}

void VCRateControlFeedbackController_SetMode_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Feedback controller is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlFeedbackController_UpdateTxLinkType_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Feedback controller is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlFeedbackController_SetLinkTypeToSupportECN_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Feedback controller is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoHardwareDumpWriter_OpenDumpFile_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate dump file", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoHardwareDumpWriter_RegisterSource_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Received nil writer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoHardwareDumpWriter_RegisterSource_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Attempting to register nil write source", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoHardwareDumpWriter_RegisterSource_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to open dump file", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoHardwareDumpWriter_Write_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Received nil writer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoHardwareDumpWriter_Write_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to get C string from CFString log", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void AVConferenceServerStartInternal_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_2_1(&dword_1D8A54000, MEMORY[0x1E0C81028], a3, "ERROR: avconferenced sandbox initialization failed.  Exiting.", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_0_0();
}

void AVConferenceServerStartInternal_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  __error();
  OUTLINED_FUNCTION_1_0(&dword_1D8A54000, MEMORY[0x1E0C81028], v0, "Couldn't retrieve private temporary directory path: %d.", v1, v2, v3, v4, 0);
  OUTLINED_FUNCTION_0_0();
}

void AVConferenceServerStartInternal_cold_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  __error();
  OUTLINED_FUNCTION_1_0(&dword_1D8A54000, MEMORY[0x1E0C81028], v0, "Error calling realpath on the private temporary directory path: %d.", v1, v2, v3, v4, 0);
  OUTLINED_FUNCTION_0_0();
}

void AVConferenceServerStartInternal_cold_4()
{
  uint8_t v0[8];
  uint64_t v1;

  v1 = *MEMORY[0x1E0C80C00];
  *(_WORD *)v0 = 0;
  _os_log_debug_impl(&dword_1D8A54000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG, "Entered sandbox.", v0, 2u);
  OUTLINED_FUNCTION_0_0();
}

void AVConferenceServerStartInternal_cold_5(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_2_1(&dword_1D8A54000, MEMORY[0x1E0C81028], a3, "Couldn't set private partition in the temporary directory", a5, a6, a7, a8, 0);
  OUTLINED_FUNCTION_0_0();
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d error setting up VCAudioPowerSpectrum", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create octave to index table", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate _octave2IndexTable6 [count=%d]", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create bin interpolation indexes", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Output bin count is 0", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create hanning window", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_7()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create channel settings: channelCount=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_8()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  const char *v3;
  _BYTE v4[14];

  OUTLINED_FUNCTION_2();
  *(_WORD *)&v4[4] = v0;
  *(_QWORD *)&v4[6] = "_VCAudioPowerSpectrum_SetupAudioPowerSpectrumWithBinCount";
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v1, v2, " [%s] %s:%d Failed to setup the channel settings[%d]", v3, *(const char **)v4, (unint64_t)"_VCAudioPowerSpectrum_SetupAudioPowerSpectrumWithBinCount" >> 16, 370);
  OUTLINED_FUNCTION_3();
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_9()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create octave to index table", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_10()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate octaveDbOld [count=%d]", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_11()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate octaveDb [count=%d]", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_12()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate octaveDbFilt [count=%d]", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_13()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate octaveDbFiltInterpolated [count=%d]", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create FFT", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_15()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to history buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_16()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate fftBuffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_17()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate fftBuffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create bins", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_19()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Output bin count is 0!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_20()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Current bin count is %d. Setup run a second time ?", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_21()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate sample buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_22()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unsupported format flags: %x", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioPowerSpectrum_PushAudioSamples_cold_23()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unsupported format id: %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _AVCStatisticsCollector_ProcessVCStatisticsInternal_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Unknown type of packet received statistics", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _AVCStatisticsCollector_GetVCStatisticsWithType_cold_1(uint64_t a1, int *a2, os_log_t log)
{
  int v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = 136315906;
  v5 = a1;
  v6 = 2080;
  v7 = "_AVCStatisticsCollector_GetVCStatisticsWithType";
  v8 = 1024;
  v9 = 556;
  v10 = 1024;
  v11 = v3;
  _os_log_error_impl(&dword_1D8A54000, log, OS_LOG_TYPE_ERROR, "VCRC [%s] %s:%d Mode %d does not support reading the statistics collection", (uint8_t *)&v4, 0x22u);
  OUTLINED_FUNCTION_3();
}

void VCStatisticsCollector_EnableBWELogDump_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. statisticsCollector is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCStatisticsCollector_Mode_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. statisticsCollector is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCStatisticsCollector_SetMode_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. statisticsCollector is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCStatisticsCollector_SetFastSuddenBandwidthDetectionEnabled_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. statisticsCollector is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCStatisticsCollector_SetRadioAccessTechnology_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. statisticsCollector is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCStatisticsCollector_SharedEstimatedBandwidth_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. statisticsCollector is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _AVCStatisticsCollector_UpdateMaxLocalBurstyLoss_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_AVCStatisticsCollector_UpdateMaxLocalBurstyLoss";
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d update audio loss: %d", v2, *(const char **)v3, (unint64_t)"_AVCStatisticsCollector_UpdateMaxLocalBurstyLoss" >> 16, 861);
  OUTLINED_FUNCTION_3();
}

void _AVCStatisticsCollector_UpdateMaxLocalBurstyLoss_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_AVCStatisticsCollector_UpdateMaxLocalBurstyLoss";
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d update video loss: %d", v2, *(const char **)v3, (unint64_t)"_AVCStatisticsCollector_UpdateMaxLocalBurstyLoss" >> 16, 866);
  OUTLINED_FUNCTION_3();
}

void VCAudioStreamReceiveGroup_PullAudioSamples_cold_1()
{
  int v0;
  os_log_t v1;
  uint8_t v2[14];
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "VCAudioStreamReceiveGroup_UpdateAudioPriority";
  v4 = 1024;
  v5 = 397;
  v6 = 1024;
  v7 = 397;
  v8 = 1024;
  v9 = v0;
  _os_log_debug_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_DEBUG, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCAudioStreamReceiveGroup.m:%d: Updating audio priority %d", v2, 0x28u);
  OUTLINED_FUNCTION_3();
}

void VCCaptionsStreamSendGroup_PushAudioSamples_cold_1(uint64_t a1)
{
  os_log_t v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  OUTLINED_FUNCTION_1();
  v4 = 308;
  _os_log_debug_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_DEBUG, " [%s] %s:%d audio no-op no MKM", (uint8_t *)&v2, 0x1Cu);
  OUTLINED_FUNCTION_3();
}

void VCCaptionsStream_CreateSampleBuffer_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Error creating format description for captions: %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCCaptionsStream_CreateSampleBuffer_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Error creating block buffer for captions: %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCVideoJitterBuffer_Create_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCVideoJitterBuffer [%s] %s:%d Invalid Config (nil)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoJitterBuffer_Create_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCVideoJitterBuffer [%s] %s:%d Failed to allocate the Video JitterBuffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoJitterBuffer_Create_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCVideoJitterBuffer [%s] %s:%d Failed to allocate the Video JitterBuffer memory", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoJitterBuffer_Create_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCVideoJitterBuffer [%s] %s:%d maxDisplayRefreshRate cannot be 0!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoJitterBuffer_Create_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCVideoJitterBuffer [%s] %s:%d Failed to initialize the target estimator", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoJitterBuffer_Create_cold_6()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  const char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  v3 = v0;
  v4 = "VCVideoJitterBuffer_GetJitterDistributionBucketSize";
  v5 = 1024;
  v6 = 102;
  v7 = 1024;
  v8 = 0;
  v9 = 1024;
  v10 = 4;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, "VCVideoJitterBuffer [%s] %s:%d Default configuration for number of bins per frame %d for target estimator CDF is incorrect, defaulting to %d bins per frame", v2, 0x28u);
  OUTLINED_FUNCTION_3();
}

void VCVideoJitterBuffer_Create_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCVideoJitterBuffer [%s] %s:%d Failed to initialize the lag processor", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCVideoJitterBuffer_GetJBTargetFromEstimatedTarget_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCVideoJitterBuffer [%s] %s:%d Invalid parameters in callback", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoJitterBuffer_Finalize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCVideoJitterBuffer [%s] %s:%d Invalid JitterBuffer handle (nil)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoJitterBuffer_UpdateMode_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCVideoJitterBuffer [%s] %s:%d Invalid JitterBuffer handle (nil)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoJitterBuffer_GetTargetJitterQueueSize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCVideoJitterBuffer [%s] %s:%d Invalid JitterBuffer handle (nil)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoJitterBuffer_GetJitterBufferMaxQueueSize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCVideoJitterBuffer [%s] %s:%d Invalid JitterBuffer handle (nil)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoJitterBuffer_GetReferenceFrame_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCVideoJitterBuffer [%s] %s:%d Invalid JitterBuffer handle (nil)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoJitterBuffer_EnqueueFrame_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCVideoJitterBuffer [%s] %s:%d Invalid JitterBuffer handle (nil)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoJitterBuffer_HealthPrint_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCVideoJitterBuffer [%s] %s:%d Invalid JitterBuffer handle (nil)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMicrophonePreferencesCMS_GetBuiltInMicPortDictionaryFromSelectableInputsArray_cold_1()
{
  NSObject *v0;
  uint8_t v1[14];
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "VCMicrophonePreferencesCMS_GetBuiltInMicPortDictionaryFromSelectableInputsArray";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_11(&dword_1D8A54000, v0, (uint64_t)v0, " [%s] %s:%d selectableInputs is invalid = %p", v1);
  OUTLINED_FUNCTION_3();
}

void VCMicrophonePreferencesCMS_GetBuiltInMicPortDictionaryFromSelectableInputsArray_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d builtInMicPort returned is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMicrophonePreferencesCMS_GetDataSourcesFromPortDictionary_cold_1()
{
  NSObject *v0;
  uint8_t v1[14];
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "VCMicrophonePreferencesCMS_GetDataSourcesFromPortDictionary";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_11(&dword_1D8A54000, v0, (uint64_t)v0, " [%s] %s:%d builtInMicPort invalid = %p", v1);
  OUTLINED_FUNCTION_3();
}

void VCMicrophonePreferencesCMS_CreateSelectedInputDictWithPolarPattern_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Did not find non-omnidirectional polar pattern", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMicrophonePreferencesCMS_ApplyMicrophonePreferences_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  int v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "VCMicrophonePreferencesCMS_ApplyMicrophonePreferences";
  OUTLINED_FUNCTION_4();
  v4 = 141;
  v5 = 2048;
  v6 = 0;
  OUTLINED_FUNCTION_11(&dword_1D8A54000, v0, v1, " [%s] %s:%d selectedInputDict(%p) == NULL", v2);
  OUTLINED_FUNCTION_3();
}

void VCMicrophonePreferencesCMS_ApplyMicrophonePreferences_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const char *v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_5_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Setting kCMSessionProperty_SelectedInputs with data source failed %.4s", v2, v3, v4, v5);
}

void VCMicrophonePreferencesCMS_ApplyMicrophonePreferences_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const char *v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_8_3();
  OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_5_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Setting kCMSessionProperty_SelectedInputs with polar pattern failed %.4s", v2, v3, v4, v5);
}

void _VCAudioStreamGroup_AddSyncDestination_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed allocating memory for listEntry", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void DynamicStoreCallbackForWifiChanges_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d GKInterfaceListener Dynamic store instance NULL, discontinuing Wifi detection.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaRecorderHistory_AddAudioSampleBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d history is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaRecorderHistory_AddAudioSampleBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d audioBufferList is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaRecorderHistory_AddAudioSampleBuffer_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCMediaRecorderHistory_AddAudioSampleBuffer";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d figFormat is NULL for audioBufferList=%p", v2, *(const char **)v3, (unint64_t)"VCMediaRecorderHistory_AddAudioSampleBuffer" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCMediaRecorderHistory_AddAudioSampleBuffer_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCMediaRecorderHistory_AddAudioSampleBuffer";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d sampleBuffer is NULL for audioBufferList=%p", v2, *(const char **)v3, (unint64_t)"VCMediaRecorderHistory_AddAudioSampleBuffer" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCMediaRecorderHistory_AddLocalVideoSampleBuffer_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCMediaRecorderHistory_AddLocalVideoSampleBuffer";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d cvBufferCopy is NULL for sampleBuffer %p", v2, *(const char **)v3, (unint64_t)"VCMediaRecorderHistory_AddLocalVideoSampleBuffer" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCMediaRecorderHistory_UpdateTargetScreenAttributes_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d object can't be null", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaRecorderHistory_UpdateResizeFlag_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid visible rect", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaRecorderHistory_UpdateResizeFlag_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid capture width", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaRecorderHistory_UpdateResizeFlag_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid capture height", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaRecorderHistory_StopProcessingAllRequests_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d nil instance passed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCEmulatedNetworkAlgorithm_UpdateIndexWithIntervalArray_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  v4 = 2080;
  v5 = "VCEmulatedNetworkAlgorithm_UpdateIndexWithIntervalArray";
  v6 = 1024;
  v7 = 34;
  _os_log_error_impl(&dword_1D8A54000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Cannot update index when updating network settings", (uint8_t *)&v2, 0x1Cu);
}

void VCOverlaySource_Create_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d [VCOverlayManager] newInstance was NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCOverlaySource_Create_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d [VCOverlayManager] allocate failed for VCOverlaySource instance", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCOverlaySource_Create_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d [VCOverlayManager] allocate failed for reader source", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCOverlaySource_Create_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d [VCOverlayManager] allocate failed for writer source", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCOverlaySource_Create_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d [VCOverlayManager] allocate failed for swap source", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCRateControlAlgorithmSparseNOWRD_DoRateControl_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];

  OUTLINED_FUNCTION_8_0();
  *(_QWORD *)&v3[6] = "_VCRateControlAlgorithmSparseNOWRD_DoRateControl";
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d This algorithm does not support statistics type:%d to do rate control", v2, *(const char **)v3, (unint64_t)"_VCRateControlAlgorithmSparseNOWRD_DoRateControl" >> 16, 181);
  OUTLINED_FUNCTION_3();
}

void _VCRateControlAlgorithmSparseNOWRD_DoRateControl_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];

  OUTLINED_FUNCTION_8_0();
  *(_QWORD *)&v3[6] = "_VCRateControlAlgorithmSparseNOWRD_DoRateControlWithVCRCStatistics";
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Unknown VCRateControl state %d", v2, *(const char **)v3, (unint64_t)"_VCRateControlAlgorithmSparseNOWRD_DoRateControlWithVCRCStatistics" >> 16, 280);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmSparseNOWRD_NoServerStatsActivityDetected_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  v4 = 2080;
  v5 = "VCRateControlAlgorithmSparseNOWRD_NoServerStatsActivityDetected";
  v6 = 1024;
  v7 = 352;
  _os_log_error_impl(&dword_1D8A54000, a2, OS_LOG_TYPE_ERROR, "VCRC [%s] %s:%d Invalid argument. Algorithm is nil", (uint8_t *)&v2, 0x1Cu);
  OUTLINED_FUNCTION_3();
}

void captionsAudioConverterCallback_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d One of the pointers passed to AudioResamplerInput callback is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNetworkConditionMonitor_Create_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NetworkConditionMonitor: NULL newInstance", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNetworkConditionMonitor_Create_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NetworkConditionMonitor: NULL didUpdateNetworkConditionCallback", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNetworkConditionMonitor_Create_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NetworkConditionMonitor: NULL didUpdateNetworkConditionContext", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNetworkConditionMonitor_Create_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NetworkConditionMonitor: allocate failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNetworkConditionMonitor_Create_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate the state queue", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNetworkConditionMonitor_SetBrokenNetworkStatus_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d NetworkConditionMonitor: NULL networkConditionMonitor", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNetworkConditionMonitor_SetWiFiChannelQualityScore_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d NetworkConditionMonitor: NULL networkConditionMonitor", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNetworkConditionMonitor_SetCellSignalStrengthBars_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d NetworkConditionMonitor: NULL networkConditionMonitor", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNetworkConditionMonitor_SetRemoteNetworkQuality_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d NetworkConditionMonitor: NULL networkConditionMonitor", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNetworkConditionMonitor_SetIsLocalActiveOnCellular_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d NetworkConditionMonitor: NULL networkConditionMonitor", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaKeyIndex_UniquePrefixBytes_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid parameters passed to the method", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void AFRCCreateHandle_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/AFRC.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void AFRCCreateHandle_cold_2()
{
  os_log_t v0;
  uint8_t v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_3_1();
  _os_log_fault_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_FAULT, "VCRC [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/AFRC.c:%d: calloc(%d) failed", v1, 0x28u);
  OUTLINED_FUNCTION_3();
}

void AFRCCreateHandle_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/AFRC.c:%d: AFRCCreateHandle failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void AFRCCreateHandle_cold_4()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_6_2();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 0x26u);
  OUTLINED_FUNCTION_3();
}

void AFRCCloseHandle_cold_1()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  OUTLINED_FUNCTION_6_2();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 0x50u);
}

void AFRCSetTxCap_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Invalid parameter dwTxCap %u", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void AFRCGetTxInfo_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d ^^^^^ LARGE frame req'd of %d ", v2, v3, v4, 6199);
  OUTLINED_FUNCTION_3();
}

void AFRCGetTxInfo_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Enabling LF", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_3();
}

void AFRCProcessBasebandNotification_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/AFRC.c:%d: Got PTs more than MAX_PAYLOADTYPES(%d) in a DropACK", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void AFRCSetBWEstMode_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d ////^^^^ AFRCSetBWEstMode: FALLING TO BW-EST BACKWARD COMPATIBLITY MODE", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_3();
}

void MediaQueue_CreateHandle_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_10_3();
  v3 = 25600;
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c:%d: calloc(%d) failed", v2);
  OUTLINED_FUNCTION_3();
}

void MediaQueue_CreateHandle_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c:%d: CreateHandle failed", v2);
  OUTLINED_FUNCTION_3();
}

void ActiveProbing_Uninit_cold_1()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  OUTLINED_FUNCTION_6_2();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 0x28u);
  OUTLINED_FUNCTION_3();
}

void MediaQueue_Start_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c:%d: pthread_create(MediaQueueSendProc) failed (%08X)\n", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void MediaQueue_Start_cold_2(uint64_t a1)
{
  os_log_t v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  OUTLINED_FUNCTION_1();
  v4 = 642;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d MediaQueueSendProc Thread already started", (uint8_t *)&v2, 0x1Cu);
  OUTLINED_FUNCTION_3();
}

void MediaQueue_Malloc_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c:%d: Request buffer size(%d) too big!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void MediaQueue_Malloc_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_10_3();
  v3 = 1704;
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c:%d: calloc(%d) failed", v2);
  OUTLINED_FUNCTION_3();
}

void MediaQueue_AddPacket_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c:%d: Media queue closing, free packet!", v2);
  OUTLINED_FUNCTION_3();
}

void _MediaQueue_CheckActiveProbingQueueLength_cold_1()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  const char *v3;
  const char *v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  LOWORD(v6) = 0;
  HIWORD(v6) = v0;
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v1, v2, " [%s] %s:%d Media queue overflow! maxLength=%d, currentLength=%d", v3, v4, v5, 970, v6);
  OUTLINED_FUNCTION_3();
}

void MediaQueue_RexmitPacket_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c:%d: Media queue closing, free packet!", v2);
  OUTLINED_FUNCTION_3();
}

void MediaQueue_RexmitPacket_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/MediaQueue/MediaQueue.c:%d: MediaQueue_LastSN failed (%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void ActiveProbing_ProcessIncomingPacket_cold_1()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  OUTLINED_FUNCTION_6_2();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 0x22u);
  OUTLINED_FUNCTION_3();
}

void ActiveProbing_ProcessIncomingPacket_cold_2(uint64_t a1)
{
  os_log_t v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  OUTLINED_FUNCTION_1();
  v4 = 1641;
  _os_log_debug_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_DEBUG, " [%s] %s:%d AddPacket: ^^^^^^\t\t MP belonging to an active Probe. Going to the main list", (uint8_t *)&v2, 0x1Cu);
  OUTLINED_FUNCTION_3();
}

void ActiveProbing_ProcessIncomingPacket_cold_3()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  OUTLINED_FUNCTION_6_2();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 0x34u);
}

void MediaQueue_ThrottlingFlushThrottlingQueue_cold_1()
{
  __int16 v0;
  int v1;
  os_log_t v2;
  uint8_t v3[24];
  int v4;
  __int16 v5;
  int v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  v4 = 1993;
  v5 = v0;
  v6 = v1;
  v7 = 2048;
  v8 = 0;
  _os_log_error_impl(&dword_1D8A54000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d *** MediaQueue_SetThrottlingFlushThrottlingQueue: Unexpected %d %p ", v3, 0x2Cu);
}

void MediaQueue_SendPacket_cold_1()
{
  __int16 v0;
  int v1;
  NSObject *v2;
  uint8_t v3[24];
  int v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  v4 = 309;
  v5 = v0;
  v6 = v1;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v2, (uint64_t)v2, " [%s] %s:%d Adding extension failed with result %08X", v3);
  OUTLINED_FUNCTION_3();
}

void _VCSFrameCryptorH264_FindAndExtractSPSPPSFromEncodedBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate sps buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSFrameCryptorH264_FindAndExtractSPSPPSFromEncodedBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate pps buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSFrameCryptorH264_CreateAndGetBlockBufferPtr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CMBlockBufferGetDataPointer failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSFrameCryptorH264_CreateAndGetBlockBufferPtr_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CMBlockBufferCreateWithMemoryBlock failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSFrameCryptorH264_ExtractSFramePayloadFromSlice_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCSFrameCryptorH264_ExtractSFramePayloadFromSlice";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d _VCSFrameCryptorH264_ExtractSFramePayloadFromSlice failed to create output buffer, status=%d", v2, *(const char **)v3, (unint64_t)"_VCSFrameCryptorH264_ExtractSFramePayloadFromSlice" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCSFrameCryptorH264_FindAndExtractSliceNalu_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d _VideoReceiver_FindAndCopySliceNalu: Failed to parse nalu length from buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSFrameCryptorH264_FindAndExtractSliceNalu_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d _VideoReceiver_FindAndCopySliceNalu, failed to allocate temporary buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSFrameCryptorH264_FindAndExtractSliceNalu_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d _VCSFrameCryptorH264_ExtractSFramePayloadFromSlice failed to extract SFrame slice payload", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSFrameCryptorH264_FindAndExtractSliceNalu_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  uint64_t v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCSFrameCryptorH264_FindAndExtractSliceNalu";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d _VideoReceiver_FindAndCopySliceNalu, failed to get access to enough bytes contiguously for parsing nalu at offset:%zu", v2, *(const char **)v3, (unint64_t)"_VCSFrameCryptorH264_FindAndExtractSliceNalu" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCSFrameCryptorH264_FindAndExtractSliceNalu_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  uint64_t v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCSFrameCryptorH264_FindAndExtractSliceNalu";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d _VideoReceiver_FindAndCopySliceNalu, failed to get data pointer for nalu at offset:%zu", v2, *(const char **)v3, (unint64_t)"_VCSFrameCryptorH264_FindAndExtractSliceNalu" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCSFrameCryptroH264_EscapeEncryptedBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to perform escaping on encrypted sframe payload", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSFrameCryptroH264_EscapeEncryptedBuffer_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  uint64_t v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCSFrameCryptroH264_EscapeEncryptedBuffer";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create escaped sframe buffer with size:%zu", v2, *(const char **)v3, (unint64_t)"_VCSFrameCryptroH264_EscapeEncryptedBuffer" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCSFrameCryptorH264_RemoveEmulationBytesFromPayloadBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VideoUtil_RemoveEmulationBytesFromBuffer failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSFrameCryptorH264_RemoveEmulationBytesFromPayloadBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CMBlockBufferGetDataPointer failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSFrameCryptorH264_RemoveEmulationBytesFromPayloadBuffer_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CMBlockBufferCreateWithMemoryBlock failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSFrameCryptorH264_Create_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCCryptorRef should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSFrameCryptorH264_Create_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCSFrameCryptorH264_Create create instance failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSFrameCryptorH264_Create_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCSFrameCryptorH264_Create failed to allocate block buffer data allocator", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSFrameCryptorH264_Create_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCSFrameCryptorH264_Create failed to allocate block buffer header allocator", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSFrameCryptorH264_Encrypt_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to append prefix nalus to sframe buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSFrameCryptorH264_Encrypt_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d _VCSFrameCryptorH264_AppendPrefixNalusForSFramePacketization failed due to invalid buffer pointer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSFrameCryptorH264_Encrypt_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d SFrame buffer is not contiguous", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSFrameCryptorH264_Encrypt_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  uint64_t v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCSFrameCryptorH264_Encrypt";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to escape encrypted buffer, escape count:%zu", v2, *(const char **)v3, (unint64_t)"VCSFrameCryptorH264_Encrypt" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCSFrameCryptorH264_Encrypt_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to get encrypted buffer pointer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSFrameCryptorH264_Encrypt_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCSFrameCryptorH264_Encrypt";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCCryptor_Encrypt failed with error %d", v2, *(const char **)v3, (unint64_t)"VCSFrameCryptorH264_Encrypt" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCSFrameCryptorH264_Encrypt_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create encrypted buffer with reference to total SFrame buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSFrameCryptorH264_Encrypt_cold_8()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  uint64_t v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCSFrameCryptorH264_Encrypt";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create sframe buffer with size:%zu", v2, *(const char **)v3, (unint64_t)"VCSFrameCryptorH264_Encrypt" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCSFrameCryptorH264_Encrypt_cold_9()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to get ecrypted buffer size", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSFrameCryptorH264_Encrypt_cold_10()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCSFrameCryptorH264_Encrypt";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to replace NAL length with start code. result=%d", v2, *(const char **)v3, (unint64_t)"VCSFrameCryptorH264_Encrypt" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCSFrameCryptorH264_Encrypt_cold_11()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to extract spspps from encoded buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSFrameCryptorH264_Encrypt_cold_12()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CMBlockBufferGetDataPointer failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSFrameCryptorH264_Encrypt_cold_13()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCSFrameCryptorH264_Encrypt failed due to invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSFrameCryptorH264_ValidateInputParameters_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d vcSFrameCryptorH264 should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSFrameCryptorH264_ValidateInputParameters_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d input buffer should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSFrameCryptorH264_ValidateInputParameters_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d output buffer should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSFrameCryptorH264_ValidateInputParameters_cold_4()
{
  os_log_t v0;
  uint8_t v1[14];
  const char *v2;
  int v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "_VCSFrameCryptorH264_ValidateInputParameters";
  OUTLINED_FUNCTION_4();
  v3 = 59;
  v4 = 2048;
  v5 = 0;
  _os_log_error_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d inputBuffer contains incorrect data size '%zu'", v1, 0x26u);
  OUTLINED_FUNCTION_3();
}

void VCSFrameCryptorH264_Decrypt_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCSFrameCryptorH264_Decrypt";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to replace start code with NAL length. result=%d", v2, *(const char **)v3, (unint64_t)"VCSFrameCryptorH264_Decrypt" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCSFrameCryptorH264_Decrypt_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to get decrypted buffer data pointer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSFrameCryptorH264_Decrypt_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCSFrameCryptorH264_Decrypt";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to decrypt the buffer %d", v2, *(const char **)v3, (unint64_t)"VCSFrameCryptorH264_Decrypt" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCSFrameCryptorH264_Decrypt_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCSFrameCryptorH264_Decrypt";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d _VCSFrameCryptorH264_RemoveEmulationBytesFromPayloadBuffer failed with result:%d", v2, *(const char **)v3, (unint64_t)"VCSFrameCryptorH264_Decrypt" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCSFrameCryptorH264_Decrypt_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CMBlockBufferGetDataPointer failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSFrameCryptorH264_Decrypt_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to parse and copy the SFrame buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSFrameCryptorH264_Decrypt_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCSFrameCryptorH264_Decrypt failed due to invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RSU_Encode_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid Group Size", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RSU_Encode_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to Encode the packet payloads.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RSU_Encode_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to generate parity bits for data payload sizes.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RSU_EncodeByteBuffer_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid number of symbols per packet (%d)", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _RSU_DecodeByteBuffer_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid number of symbols per packet (%d)", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RSU_Decode_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid Buffer Size", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RSU_Decode_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid Buffer Size", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RSU_Decode_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d DecodeByteBuffe failed!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RSU_Decode_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid number of symbols per packet (%d)", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RSU_Decode_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d DecodeByteBuffe failed!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RSU_Decode_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid Buffer Size", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void EncCreateHandle_cold_1(uint64_t a1, _DWORD *a2, NSObject *a3)
{
  _BYTE v3[22];
  uint64_t v4;

  *(_DWORD *)v3 = 136316162;
  *(_QWORD *)&v3[4] = a1;
  *(_WORD *)&v3[12] = 2080;
  *(_QWORD *)&v3[14] = "EncCreateHandle";
  LODWORD(v4) = *a2;
  WORD2(v4) = 1024;
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, (uint64_t)a2, a3, " [%s] %s:%d Invalid resolution %dx%d", *(const char **)v3, *(const char **)&v3[8], (unint64_t)"EncCreateHandle" >> 16, 580, *(_DWORD *)((char *)&v4 + 2));
  OUTLINED_FUNCTION_3();
}

void EncCreateHandle_cold_2()
{
  __int16 v0;
  int v1;
  NSObject *v2;
  _DWORD v3[7];
  __int16 v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3[0] = 136315906;
  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_9();
  v3[6] = 601;
  v4 = v0;
  v5 = v1;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v2, (uint64_t)v2, " [%s] %s:%d Tiles per frame is not set to a valid number %d", (uint8_t *)v3);
  OUTLINED_FUNCTION_3();
}

void EncCreateHandle_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  v2 = 136316162;
  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VCVideoEncoder_VCP.c:%d: VCPCompressionSessionCreate %i", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void EncEncodeFrame_cold_1()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[24];
  int v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  v4 = 1066;
  v5 = v0;
  v6 = 1066;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v1, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VCVideoEncoder_VCP.c:%d: Encoder callback is NULL", v3);
  OUTLINED_FUNCTION_3();
}

void EncEncodeFrame_cold_2()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  const char *v3;
  const char *v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  LOWORD(v6) = 0;
  HIWORD(v6) = v0;
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v1, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VCVideoEncoder_VCP.c:%d: VCPCompressionSessionEncodeFrame failed(%08X)", v3, v4, v5, 1123, v6);
  OUTLINED_FUNCTION_3();
}

void _DumpParameterSetsBitstream_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_11_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VCVideoEncoder_VCP.c:%d: %s: Can't extract format description from saved buffer", v2, v3, v4, v5, v6);
}

void _DumpParameterSetsBitstream_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_11_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VCVideoEncoder_VCP.c:%d: %s: Can't extract avcC from format description", v2, v3, v4, v5, v6);
}

void _DumpParameterSetsBitstream_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  v2 = 136316162;
  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VCVideoEncoder_VCP.c:%d: readAVCCAndEncodeH264SPSPPS %d", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _DumpParameterSetsBitstream_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Can't extract byte pointer from image description", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _DumpFrameBitstream_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCPCompressionSession Error: Encoder returned a NULL frame", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _DumpFrameBitstream_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCPCompressionSession Error: Error getting data buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void vtEncCallback_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Encoder callback function or callback data is not set", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void vtEncCallback_cold_2()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[24];
  int v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  v4 = 313;
  v5 = v0;
  v6 = -12912;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v1, v2, " [%s] %s:%d VCPCompressionSession Error: %d, the system may run into a low memory state", v3);
  OUTLINED_FUNCTION_3();
}

void VCVideoStreamEncoderProc_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to dequeue sample buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoStreamTransmitter_SetFECRatio_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Not implemented!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoStreamTransmitter_SetMediaQueueSize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Not implemented!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void encoderFrameCallback_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d frame encode error %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void JitterQueue_Insert_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  v4 = 2080;
  v5 = "JitterQueue_Insert";
  v6 = 1024;
  v7 = 234;
  _os_log_error_impl(&dword_1D8A54000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Jitter Queue Max maxPacketTimeDelta Size is not set", (uint8_t *)&v2, 0x1Cu);
}

void JitterQueue_Insert_cold_2(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned __int8 *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  v5 = 136316162;
  v6 = a1;
  v7 = 2080;
  v8 = "JitterQueue_Insert";
  v9 = 1024;
  v10 = 212;
  v11 = 1024;
  v12 = v3;
  v13 = 1024;
  v14 = v4;
  _os_log_debug_impl(&dword_1D8A54000, log, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Discarding duplicate audio frame isRedAudio:%d timestamp:%u", (uint8_t *)&v5, 0x28u);
}

void VCNWConnectionMonitor_Create_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create monitor because nwConnection is null!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCNWConnectionMonitor_DispatchedProcessInterfaceAdvisoryNotification_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate memory for notification!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCNWConnectionMonitor_AddNotification_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Can't add a null monitor!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCNWConnectionMonitor_ProcessNotification_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NWConnection notification is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCNWConnectionMonitor_ProcessNotification_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d NWConnection notification submitted with incompatible version=%d, discarding", v2, v3, v4, 480);
  OUTLINED_FUNCTION_3();
}

void _VCNWConnectionMonitor_ProcessNotification_cold_3()
{
  os_log_t v0;
  uint8_t v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_7_3();
  _os_log_debug_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_DEBUG, " [%s] %s:%d  timestamp%llu", v1, 0x26u);
  OUTLINED_FUNCTION_3();
}

void VCNWConnectionMonitor_ResetWlanStats_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d monitor is null!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECGenerator_Create_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL newInstance", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECGenerator_Create_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d allocate failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECGenerator_Create_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCFECGenerator_Create";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d invalid fec header version=%d", v2, *(const char **)v3, (unint64_t)"VCFECGenerator_Create" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCFECGenerator_Create_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCFECGenerator_Create";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d invalid fec feedback version=%d", v2, *(const char **)v3, (unint64_t)"VCFECGenerator_Create" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCFECGenerator_Create_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d memory pool allocate failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECGenerator_Create_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d single list initialization failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECGenerator_Create_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d single list initialization failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECGenerator_Create_cold_8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d single list initialization failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECGenerator_PushPacket_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECGenerator_PushPacket_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL packetBuffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECGenerator_PushPacket_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL fail to allocate list entry", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECGenerator_PopPacket_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECGenerator_PopPacket_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL packetBuffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECGenerator_PopPacket_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL list entry", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECGenerator_GetNumberOutputPackets_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECGenerator_GetNumberOutputMediaPackets_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECGenerator_PerformAction_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECGenerator_PerformAction_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCFECGenerator_PerformAction";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d action not supported action=%d", v2, *(const char **)v3, (unint64_t)"VCFECGenerator_PerformAction" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCFECGenerator_PerformAction_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d FEC Encode failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECGenerator_PerformAction_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failure in dequeing an input packet", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECGenerator_PerformAction_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failure in dequeing an input packet", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECGenerator_SetFixedFECLevel_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECGenerator_SetFixedFECLevel_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d FEC level not in valid range", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECGenerator_SetFECLevelPerGroupSizeVector_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECGenerator_SetFECLevelPerGroupSizeVector_cold_2()
{
  __int16 v0;
  int v1;
  os_log_t v2;
  uint8_t v3[14];
  const char *v4;
  int v5;
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v4 = "VCFECGenerator_SetFECLevelPerGroupSizeVector";
  OUTLINED_FUNCTION_4();
  v5 = 647;
  v6 = v0;
  v7 = v1;
  v8 = v0;
  v9 = 32;
  _os_log_error_impl(&dword_1D8A54000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Number of vector items is not in valid range vectorSize=%d VCFEC_GENERATOR_MAX_VECTOR_ITEMS=%d", v3, 0x28u);
  OUTLINED_FUNCTION_3();
}

void VCFECGenerator_GetProcessingAverageTime_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d fecGenerator is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueueUtil_FindPacketInTxHistory_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  v4 = 2080;
  v5 = "VCMediaQueueUtil_FindPacketInTxHistory";
  v6 = 1024;
  v7 = 240;
  _os_log_error_impl(&dword_1D8A54000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Do not have a valid packetParam", (uint8_t *)&v2, 0x1Cu);
}

void VCPayloadUtils_AudioCodecRateModeForBitrate_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCPayloadUtils_AudioCodecRateModeForBitrate";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unsupported payload %d", v2, *(const char **)v3, (unint64_t)"VCPayloadUtils_AudioCodecRateModeForBitrate" >> 16, 1012);
  OUTLINED_FUNCTION_3();
}

void VCPayloadUtils_ShortREDBitrateForPayload_cold_1()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d shortREDEnabled=%{BOOL}d for payload=%u which does NOT retain a bitrate for it.");
  OUTLINED_FUNCTION_3();
}

void RTCPCopySendControlParameters_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate memory for send control parameters.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTCPCopySendControlParameters_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid parameters.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTCPPackSendControlParameter_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid parameters", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPSendRTCP_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d SRTCP encryption failed (%X)", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPSendRTCP_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d SRTCP add authentication tag failed (%X)", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPSendRTCP_cold_3()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[34];
  __int16 v3;
  int v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  v3 = v0;
  v4 = 8;
  v5 = v0;
  v6 = 1472;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d RTCP buffer too small. Unable to add BYE: %d + %d > %d", v2, 0x2Eu);
  OUTLINED_FUNCTION_19();
}

void RTPSendRTCP_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to write TMMBN: (%X)", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPSendRTCP_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to write TMMBR: (%X)", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPSendRTCP_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to write TSTN: (%X)", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPSendRTCP_cold_7()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to write TSTR: (%X)", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPSendRTCP_cold_8()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to write PLI: (%X)", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPSendRTCP_cold_9()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to write FIR: (%X)", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPSendRTCP_cold_10()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unable to add custom APP packet (%X))", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPSendRTCP_cold_11()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to write PSFB ALFB packet, result=%X", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPSendRTCP_cold_12()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to add a PSFB ALFB Loss Feedback packet, error=%X", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPSendRTCP_cold_13()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to add a PSFB ALFB Loss Feedback packet, error=%X", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPSendRTCP_cold_14()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to write RTCP XR. result=%X", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPSendRTCP_cold_15()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Not enough space for the RTCP XR packet", v2);
  OUTLINED_FUNCTION_3();
}

void RTPSendRTCP_cold_16()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Failed to finalize the XR packet. status=%X", v2, v3, v4, 1741, v5);
  OUTLINED_FUNCTION_3();
}

void RTPSendRTCP_cold_17()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Failed to add the VoIP Metrics Report Block. status=%X", v2);
  OUTLINED_FUNCTION_3();
}

void RTPSendRTCP_cold_18()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_14_0();
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Failed to add the Statistics Summary Report Block. status=%X", v2);
  OUTLINED_FUNCTION_3();
}

void RTPSendRTCP_cold_19()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Failed to add RTCP header", v2);
  OUTLINED_FUNCTION_3();
}

void RTPSendRTCP_cold_20()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unable to add SR/RR packet (%X)", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPSendRTCP_cold_21()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unable to add custom SR/RR packet (%X)", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPSendRTCP_cold_22()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unable to add RTCL packet (%X)", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTCPAddFIR_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unable to add FIR, buffer too small: %d > %d", v2, v3, v4, 449, v5);
  OUTLINED_FUNCTION_3();
}

void RTCPAddPLI_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unable to add PLI, buffer too small: %d > %d", v2, v3, v4, 486, v5);
  OUTLINED_FUNCTION_3();
}

void _RTCPSendWithTransportStream_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL sendParameters", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTCPSendWithTransportStream_cold_2()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  const char *v3;
  const char *v4;
  int v5;
  int v6;
  int v7;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  HIWORD(v7) = v0;
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v1, v2, " [%s] %s:%d streamIDCount=%d is greater than max=%u", v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_3();
}

void _RTCPSendWithSocket_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  __error();
  v5 = 136315906;
  v6 = a1;
  v7 = 2080;
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, a2, v4, " [%s] %s:%d VTP_Send failed with error=%d", (uint8_t *)&v5);
  OUTLINED_FUNCTION_19();
}

void _RTCPTransport_ParsePacket_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Invalid RTCP header", v2);
  OUTLINED_FUNCTION_3();
}

void _RTCPTransport_ParsePacket_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Invalid RTCP packet length", v2);
  OUTLINED_FUNCTION_3();
}

void _RTCPTransport_ParsePacket_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Invalid RTCP SR packet", v2);
  OUTLINED_FUNCTION_3();
}

void _RTCPTransport_ParsePacket_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Invalid RTCP RR packet", v2);
  OUTLINED_FUNCTION_3();
}

void _RTCPTransport_ParsePacket_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Invalid RTCP SDES message", v2);
  OUTLINED_FUNCTION_3();
}

void _RTCPTransport_ParsePacket_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Invalid RTCP BYE message", v2);
  OUTLINED_FUNCTION_3();
}

void _RTCPTransport_ParsePacket_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Bad RTCP APP packet", v2);
  OUTLINED_FUNCTION_3();
}

void _RTCPTransport_ParsePacket_cold_8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Invalid RTCP FIR message", v2);
  OUTLINED_FUNCTION_3();
}

void _RTCPTransport_ParsePacket_cold_9()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Invalid RTCP NACK message", v2);
  OUTLINED_FUNCTION_3();
}

void _RTCPTransport_ParsePacket_cold_10()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Invalid RTCP PSFB message", v2);
  OUTLINED_FUNCTION_3();
}

void _RTCPTransport_ParsePacket_cold_11()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Bad RTCP PSFB ALFB packet", v2);
  OUTLINED_FUNCTION_3();
}

void _RTCPTransport_ParsePacket_cold_12()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Invalid RTCP RTPFB message", v2);
  OUTLINED_FUNCTION_3();
}

void _RTCPTransport_ParsePacket_cold_13()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Bad RTCP packet", v2);
  OUTLINED_FUNCTION_3();
}

void _RTCPTransport_ParsePacket_cold_14()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Invalid RTCP version", v2);
  OUTLINED_FUNCTION_3();
}

void _RTCPPacketCallback_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d RTP error[%x]", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTCPRegisterPacketCallback_cold_1()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  uint8_t v3[12];
  __int16 v4;
  const char *v5;
  int v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  v4 = v0;
  v5 = "RTCPRegisterPacketCallback";
  OUTLINED_FUNCTION_4();
  v6 = 2433;
  v7 = 2048;
  v8 = 0xFFFFFFFFLL;
  v9 = 2048;
  v10 = v1;
  _os_log_error_impl(&dword_1D8A54000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid parameter rtpHandle[%p] callbackContext[%p]!", v3, 0x30u);
  OUTLINED_FUNCTION_19();
}

void RTCPRegisterPacketCallback_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to checking rtpHandle[%p]", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTCPRegisterPacketCallback_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d RTCPHandle[%p] Failed store the callback", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTCPRegisterPacketCallback_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d RTPHandle[%p] Packet callback already registered", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTCPUnregisterPacketCallback_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d RTPHandle[%p] RTCP packet callback was not registered", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPRecvRTCP_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d RTCP receive failed! hResult:(%08X)", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _RTPTransportStreamRTCPCallback_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL packetList", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTPTransportStreamRTCPCallback_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid RTP Handle", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTCPParseVCPacket_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: Drop RTCP packet from a unknown connection.", v2);
  OUTLINED_FUNCTION_3();
}

void _RTCPParseVCPacket_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d RTCP header doesn't fit in packet. Packet length=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _RTCPParseVCPacket_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d SRTCP decryption failed (%X)", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _RTCPParseVCPacket_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d SRTCP verification failed (%X)", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _RTCPParseVCPacket_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTCPTransport.c:%d: RTCP packet failed Version, padding bit, packet type check", v2);
  OUTLINED_FUNCTION_3();
}

void _RTCPParseVCPacket_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unable to retrieve data pointer %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _RTCPAddPSFBAlfbPacket_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unsupported application name=%u", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCFBOUtils_IsKindOfClass_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  v4 = 2080;
  v5 = "VCFBOUtils_IsKindOfClass";
  v6 = 1024;
  v7 = 33;
  _os_log_error_impl(&dword_1D8A54000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d NULL filter", (uint8_t *)&v2, 0x1Cu);
}

void _VCAudioStream_NWConnectionNotificationHandler_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioStream [%s] %s:%d Callback executed with context being nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioStream_NWConnectionNotificationHandler_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioStream [%s] %s:%d nwConnectionNotification is invalid", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioStream_NWConnectionNotificationHandler_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCAudioStream [%s] %s:%d Received Skywalk notification for unsupported interface type=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCAudioStream_NWConnectionNotificationHandler_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCAudioStream [%s] %s:%d Received Skywalk notification with unsupported version=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioStream_PullAudioSamples_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioStream [%s] %s:%d audioStream is invalid", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioStream_PullAudioSamples_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioStream [%s] %s:%d Statistics collector is not valid", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioStream_PullAudioSamples_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCAudioStream [%s] %s:%d OWRD in abnormal levels for %d seconds, triggering lag reference reset", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioStream_PullAudioSamples_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioStream [%s] %s:%d OWRD is not valid, skipping", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioStream_SetAllowedCodecConfigurations_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioStream [%s] %s:%d audio stream is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioStream_SetAllowedCodecConfigurations_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioStream [%s] %s:%d audio transmitter is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioStream_SetAllowedCodecConfigurations_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioStream [%s] %s:%d Failed to allocate allowedAudioPayloads array", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioStream_SetAudioPlayoutDelay_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioStream [%s] %s:%d stream is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCScreenCapture_setRepeatFrameAttributes_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCScreenCapture [%s] %s:%d Failed to get image buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCScreenCapture_handleFrameInternal_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCScreenCapture [%s] %s:%d Rotated sample buffer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCScreenCapture_handleFrameInternal_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCScreenCapture [%s] %s:%d failed to set ioSurfaceTimeStamp", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCScreenCapture_handleFrameInternal_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCScreenCapture [%s] %s:%d failed to set SIGNPOST_IOSURFACE_ID", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCScreenCapture_handleFrameInternal_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCScreenCapture [%s] %s:%d VCScreenCapture: could not create pixel buffer from pool %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCScreenCapture_handleFrameInternal_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCScreenCapture [%s] %s:%d Resized sample buffer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCScreenCapture_attachUpdateWindowToPixelBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCScreenCapture [%s] %s:%d Failed to create array", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCScreenCapture_attachUpdateWindowToPixelBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCScreenCapture [%s] %s:%d Failed to create dictionary representation", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCScreenCapture_attachUpdateWindowToPixelBuffer_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCScreenCapture [%s] %s:%d Failed to create CFNumber for resolution scale", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioDucker_Allocate_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate audio ducker", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioDucker_Start_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d audioDucker is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioDucker_Start_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d AudioUnitInitialize err=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioDucker_Start_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Set tuning parameters failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioDucker_Start_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to set kVCAudioDuckerParameterIDReleaseHoldTime err=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioDucker_Start_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to set kVCAudioDuckerParameterIDUnDuckingRampTime err=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioDucker_Start_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to set kVCAudioDuckerParameterIDHistoryAccumulationTime err=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioDucker_Start_cold_7()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to set kVCAudioDuckerParameterIDDuckingRampTime err=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioDucker_Start_cold_8()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to set kVCAudioDuckerParameterIDOtherAudioRMSLimit err=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioDucker_Start_cold_9()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to set kVCAudioDuckerParameterIDOtherAudioDuckingMinLevel err=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioDucker_Start_cold_10()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to set kVCAudioDuckerParameterIDPrimaryDuckingMinLevel err=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioDucker_Start_cold_11()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to set kVCAudioDuckerParameterIDPrimaryDuckingThreshold err=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioDucker_Start_cold_12()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to set kVCAudioDuckerParameterIDOtherAudioDuckingLevel err=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioDucker_Start_cold_13()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Set properties failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioDucker_Start_cold_14()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d AudioUnitSetProperty kAudioUnitProperty_MaximumFramesPerSlice err=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioDucker_Start_cold_15()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to start due to failing to get new instance", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioDucker_Stop_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d audioDucker is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioDucker_Process_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d processing err=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPProcessH263Packet_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  *(_QWORD *)&v3[6] = "RTPProcessH263Packet";
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPH263.c:%d: Invalid length (%d) for H263PHMODEA", v2, *(const char **)v3, (unint64_t)"RTPProcessH263Packet" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPProcessH263Packet_cold_2(uint64_t a1, int a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = 136315906;
  v4 = a1;
  v5 = 2080;
  v6 = "RTPProcessH263Packet";
  v7 = 1024;
  v8 = 140;
  v9 = 1024;
  v10 = a2;
  _os_log_error_impl(&dword_1D8A54000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to create block buffer. Status=%d", (uint8_t *)&v3, 0x22u);
  OUTLINED_FUNCTION_3();
}

void RTPProcessH263Packet_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  *(_QWORD *)&v3[6] = "RTPProcessH263Packet";
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPH263.c:%d: Invalid length (%d) for H263PHMODEB", v2, *(const char **)v3, (unint64_t)"RTPProcessH263Packet" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCTimescale_InitializeTimescaleAlgo_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  v4 = 2080;
  v5 = "_VCTimescale_SetupAlgoInterfaces";
  v6 = 1024;
  v7 = 74;
  _os_log_error_impl(&dword_1D8A54000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to allocate timescale Interface", (uint8_t *)&v2, 0x1Cu);
}

void RTPSendH264Packet_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPH264.c:%d: data size too big (%d)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPProcessH264FragmentationHeader_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPH264.c:%d: Invalid fragmentation unit length (%d)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPProcessH264FragmentationHeader_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Packet with NALType %d didn't include a decoding order!", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPProcessH264FragmentationHeader_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d FU-B Decoding order is %hu", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPProcessH264FragmentationHeader_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPH264.c:%d: Invalid packet size, does not include DON: unit length (%d)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPProcessH264FragmentationHeader_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d STAP-B Decoding order is %hu", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPProcessH264FragmentationHeader_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPH264.c:%d: Invalid packet size, does not include DON: unit length (%d)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTPProcessH264FragmentationHeaderStartEndBits_cold_1()
{
  os_log_t v0;
  uint8_t v1[36];
  int v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_10_3();
  v2 = 1;
  _os_log_error_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPH264.c:%d: Invalid fragmentation unit length (%d)", v1, 0x28u);
  OUTLINED_FUNCTION_3();
}

void RTPProcessH264Packet_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate the default header bytes", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPProcessH264Packet_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to append the default data", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPProcessH264Packet_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to append default data header buffer. Status=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _RTPProcessSTAPPacket_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[30];
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_15();
  v3 = 0;
  OUTLINED_FUNCTION_11(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid data size of length %zu", v2);
  OUTLINED_FUNCTION_3();
}

void _RTPProcessSTAPPacket_cold_2()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[30];
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_15();
  v3 = v0;
  OUTLINED_FUNCTION_11(&dword_1D8A54000, v1, (uint64_t)v1, " [%s] %s:%d Invalid data length for decoding order %zu", v2);
  OUTLINED_FUNCTION_3();
}

void _RTPProcessSTAPPacket_cold_3(uint64_t a1)
{
  uint64_t v1;
  os_log_t v2;
  __int128 v3;
  int v4;
  int v5;

  LODWORD(v3) = 136315906;
  *(_QWORD *)((char *)&v3 + 4) = a1;
  WORD6(v3) = 2080;
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v1, v2, " [%s] %s:%d Invalid aggregation unit length (%d) for H264NALU_STAP packet, discarded.\n", (const char *)v3, *((const char **)&v3 + 1), v4, v5);
  OUTLINED_FUNCTION_3();
}

void _RTPProcessSTAPPacket_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate the H264NALU_STAP_A header bytes", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTPProcessSTAPPacket_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to append the H264NALU_STAP data", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTPProcessSTAPPacket_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to append H264NALU_STAP header buffer. Status=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _RTPProcessSTAPPacket_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[30];
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_15();
  v3 = 1;
  OUTLINED_FUNCTION_11(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid data length %zu", v2);
  OUTLINED_FUNCTION_3();
}

void _RTPProcessSTAPPacket_cold_8()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d STAP-B Decoding order is %hu", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _RTPProcessFUPacket_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_10_3();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPH264.c:%d: Invalid fragmentation unit length (%d)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTPProcessFUPacket_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to append the H264NALU_FU data", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTPProcessFUPacket_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate the H264NALU_FU header bytes", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTPProcessFUPacket_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to append H264NALU_FU header buffer. Status=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _RTPProcessFUPacket_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d FU-B Decoding order is %hu", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCCannedVideoPacketSource_InjectionThread_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to initialize timing info", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCCannedVideoPacketSource_InjectionThread_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to read first media packet", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCannedVideoPacketSource_RegisterForCannedReplay_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCCannedVideoPacketSource_RegisterCannedReplayWriteCallbacks";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to register canned replay RTP write callbacks. result=%d", v2, *(const char **)v3, (unint64_t)"_VCCannedVideoPacketSource_RegisterCannedReplayWriteCallbacks" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCCannedVideoPacketSource_RegisterForCannedReplay_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCCannedVideoPacketSource_RegisterCannedReplayWriteCallbacks";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to register canned replay RTCP write callbacks. result=%d", v2, *(const char **)v3, (unint64_t)"_VCCannedVideoPacketSource_RegisterCannedReplayWriteCallbacks" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCCannedVideoPacketSource_RegisterForCannedReplay_cold_3()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[14];
  const char *v4;
  int v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v4 = "_VCCannedVideoPacketSource_RegisterCannedReplayReadCallbacks";
  OUTLINED_FUNCTION_4();
  v5 = 560;
  v6 = v0;
  v7 = -2147418113;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v1, v2, " [%s] %s:%d Failed to register canned video packet RTP read callback. result=%d", v3);
  OUTLINED_FUNCTION_3();
}

void VCCannedVideoPacketSource_RegisterForCannedReplay_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Received NULL stream", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCannedVideoPacketSource_UnregisterForCannedReplay_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Received nil packet source context", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCannedVideoPacketSource_UnregisterForCannedReplay_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCCannedVideoPacketSource_UnregisterForCannedReplay";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to unregister RTP packet callback. result=%d", v2, *(const char **)v3, (unint64_t)"VCCannedVideoPacketSource_UnregisterForCannedReplay" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCCannedVideoPacketSource_UnregisterForCannedReplay_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCCannedVideoPacketSource_UnregisterForCannedReplay";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to unregister RTCP packet callback. result=%d", v2, *(const char **)v3, (unint64_t)"VCCannedVideoPacketSource_UnregisterForCannedReplay" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCCannedVideoPacketSource_WriteBytes_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Attempting to write bytes with size 0", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCCannedVideoPacketSource_WriteBytes_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create byte data", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCCannedVideoPacketSource_WriteBlockBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to get block buffer data pointer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCCannedVideoPacketSource_WriteBlockBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create contiguous block buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCCannedVideoPacketSource_ReadPacketAndAllocateBlockBuffers_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to read packet", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCCannedVideoPacketSource_ReadPacketAndAllocateBlockBuffers_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_15_0(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Attempting to read canned video packet while in mode=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCCannedVideoPacketSource_ReadPacketTypeFromFile_cold_1()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[14];
  const char *v4;
  int v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v4 = "_VCCannedVideoPacketSource_ReadPacketTypeFromFile";
  OUTLINED_FUNCTION_4();
  v5 = 478;
  v6 = v0;
  v7 = 0;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v1, v2, " [%s] %s:%d Bad packet type: %d", v3);
  OUTLINED_FUNCTION_3();
}

void _VCCannedVideoPacketSource_ReadBlockBufferFromFile_cold_1()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_12_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d file handle header read error=%@");
  OUTLINED_FUNCTION_3();
}

void _VCCannedVideoPacketSource_ReadBlockBufferFromFile_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to get block buffer data pointer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCCannedVideoPacketSource_ReadBlockBufferFromFile_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCCannedVideoPacketSource_ReadBlockBufferFromFile";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to replace block buffer bytes. Err=%d", v2, *(const char **)v3, (unint64_t)"_VCCannedVideoPacketSource_ReadBlockBufferFromFile" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCCannedVideoPacketSource_ReadBlockBufferFromFile_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCCannedVideoPacketSource_ReadBlockBufferFromFile";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate block buffer. Err=%d", v2, *(const char **)v3, (unint64_t)"_VCCannedVideoPacketSource_ReadBlockBufferFromFile" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCCannedVideoPacketSource_ReadDataFromFile_cold_1()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_12_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_6_3();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d file handle read error=%@");
  OUTLINED_FUNCTION_3();
}

void _VCStreamIOAudioController_SampleBufferCallback_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCStreamIOAudioController [%s] %s:%d context not included.  Cannot process the sampleBuffer.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamIOAudioController_PullAudioSamples_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCStreamIOAudioController [%s] %s:%d Failed to allocate RTP timestamp attachment", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPMapResetMapping_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d RTPMap is NULL!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPMapAddMappingForPayload_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d RTPMap is NULL!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPMapPrintMapping_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d RTPMap is NULL!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPMapGetInternalPayload_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d RTPMap is NULL!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPMapGetExternalPayload_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d RTPMap is NULL!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCRateControlAlgorithmLayeredContinuousTier_DoRateControl_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d This algorithm does not support statistics type=%d to do rate control", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCRateControlAlgorithmLayeredContinuousTier_DoRateControl_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Unknown VCRateControl state=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCRateControlAlgorithmLayeredContinuousTier_DoRateControl_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d bad algorithm state=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCRateControlAlgorithmLayeredContinuousTier_DoRateControl_cold_4(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  v4 = 2080;
  v5 = "_VCRateControlAlgorithmLayeredContinuousTier_DoRateControlWithBasebandStatistics";
  v6 = 1024;
  v7 = 230;
  _os_log_error_impl(&dword_1D8A54000, a2, OS_LOG_TYPE_ERROR, "VCRC [%s] %s:%d media controller is required for VCRateControl", (uint8_t *)&v2, 0x1Cu);
  OUTLINED_FUNCTION_3();
}

void RTPCreateHandle_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "RTPCreateHandle";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: Unknown Payload Type(%d)", v2, *(const char **)v3, (unint64_t)"RTPCreateHandle" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPCreateHandle_cold_2(uint64_t a1, NSObject *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  __error();
  v5 = 136316162;
  v6 = a1;
  v7 = 2080;
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, a2, v4, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: calloc failed(%d)", (uint8_t *)&v5);
  OUTLINED_FUNCTION_19();
}

void RTPCreateHandle_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "RTPCreateHandle";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: Failed to allocate the rtpPacket allocator", v2);
  OUTLINED_FUNCTION_3();
}

void RTPCreateHandle_cold_4()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[14];
  const char *v4;
  int v5;
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v4 = "RTPCreateHandle";
  OUTLINED_FUNCTION_4();
  v5 = 270;
  v6 = v0;
  v7 = 270;
  v8 = v0;
  v9 = -2147418107;
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, v1, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: CreateHandle failed(%08X)", v3);
  OUTLINED_FUNCTION_3();
}

void RTPCreateHandle_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "RTPCreateHandle";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: Failed to allocate the packet metadata allocator", v2);
  OUTLINED_FUNCTION_3();
}

void RTPCreateHandle_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "RTPCreateHandle";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: Failed to allocate the channel data format allocator", v2);
  OUTLINED_FUNCTION_3();
}

void RTPCreateHandle_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "RTPCreateHandle";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: Failed to allocate the RTP block buffer allocator", v2);
  OUTLINED_FUNCTION_3();
}

void RTPCreateHandle_cold_8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "RTPCreateHandle";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: Failed to allocate the block buffer allocator", v2);
  OUTLINED_FUNCTION_3();
}

void RTPCreateHandle_cold_9()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "RTPCreateHandle";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: Failed to create the rtcpPacket allocator (error:%d)", v2, *(const char **)v3, (unint64_t)"RTPCreateHandle" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPSetTxPayloadList_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  uint64_t v5;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "RTPSetTxPayloadList";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_5_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: malloc(%zu) failed", v2, *(const char **)v3, (unint64_t)"RTPSetTxPayloadList" >> 16, v4, v5);
  OUTLINED_FUNCTION_19();
}

void RTPSetRxPayloadList_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  uint64_t v5;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "RTPSetRxPayloadList";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_5_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: malloc(%zu) failed", v2, *(const char **)v3, (unint64_t)"RTPSetRxPayloadList" >> 16, v4, v5);
  OUTLINED_FUNCTION_19();
}

void RTPSetRxPayloadList_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL payloadList", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPSetRxPayloadList_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d payloadCount <= 0", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPGetInternalPayload_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid RTP handle", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPGetExternalPayload_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid RTP handle", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SendRTP_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "SendRTP";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d Header size is negative: %d", v2, *(const char **)v3, (unint64_t)"SendRTP" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void SendRTP_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "SendRTP";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d Data size is negative: %d", v2, *(const char **)v3, (unint64_t)"SendRTP" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void SendRTP_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  v2 = 136315906;
  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d RTP SendRTP direction[%d] dropping packet", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void SendRTP_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to copy data to the RTP buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3_0();
}

void SendRTP_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;
  int v4;
  int v5;

  v2 = 136315906;
  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to send packet due to oversize dataSizeByte %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void SendRTP_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Could not generate media packet metadata", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SendRTP_cold_7()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;
  int v4;
  const void *v5;

  v2 = 136315906;
  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_7_3();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Cannot add media packet=%p to VCMediaQueue!", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void SendRTP_cold_8()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "SendRTP";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to copy data bytes. Error=%d!", v2, *(const char **)v3, (unint64_t)"SendRTP" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void SendRTP_cold_9()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Cannot alloc media packet from VCMediaQueue!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SendRTP_cold_10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unknown packet passing to the VCMediaQueue!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3_0();
}

void SendRTP_cold_11()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "SendRTP";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to enqueue packet in media queue. Error=%x", v2, *(const char **)v3, (unint64_t)"SendRTP" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void SendRTP_cold_12()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d IDS channel data is not setup correctly!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3_0();
}

void SendRTP_cold_13()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "SendRTP";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d SRTP encryption failed (%X)", v2, *(const char **)v3, (unint64_t)"SendRTP" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void SendRTP_cold_14()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "SendRTP";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d SRTP add authentication tag failed (%X)", v2, *(const char **)v3, (unint64_t)"SendRTP" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void SendRTP_cold_15()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to copy padding bytes to the RTP buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3_0();
}

void SendRTP_cold_16()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to copy header to the RTP buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3_0();
}

void SendRTP_cold_17()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to add RTP header extension", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3_0();
}

void SendRTP_cold_18()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "SendRTP";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: Failed to allocate send buffer", v2);
  OUTLINED_FUNCTION_3();
}

void RTPMediaQueueSecurityCallback_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d srtpContext is invalid", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPMediaQueueSecurityCallback_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d payload should not be nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPMediaQueueSecurityCallback_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d payloadSize should not be nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPMediaQueueSecurityCallback_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid RTP handle", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPMediaQueueSecurityCallback_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid authentication mode detected in security callback", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPMediaQueueSecurityCallback_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "RTPMediaQueueSecurityCallback";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d SRTP encryption failed (%X)", v2, *(const char **)v3, (unint64_t)"RTPMediaQueueSecurityCallback" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void RTPMediaQueueSecurityCallback_cold_7()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "RTPMediaQueueSecurityCallback";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d SRTP add authentication tag failed (%08X)", v2, *(const char **)v3, (unint64_t)"RTPMediaQueueSecurityCallback" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _RTPSendTimestampWithMediaSampleTime_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  v2 = 136315906;
  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Send Scaling sendTimestampMode=%d is not supported", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _RTPSendTimestampWithMediaSampleTime_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  v2 = 136315906;
  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unexpected sendTimestampMode=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _RTPGetRTPSocketForMediaQueue_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL rtpInfo", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTPGetRTPSocketForMediaQueue_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL rtpSocketForMediaQueue", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPTransportResendRTP_cold_1()
{
  os_log_t v0;
  uint8_t v1[24];
  int v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  v2 = 1971;
  _os_log_debug_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Couldn't retrieve media packet from cache for retransmission", v1, 0x1Cu);
  OUTLINED_FUNCTION_3();
}

void RTPTransportResendRTP_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Media packet metadata unavailable", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPTransportResendRTP_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL transportStream", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPTransportResendRTP_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL data buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPTransportResendRTP_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d data length <= 0", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPTransportResendRTP_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  v2 = 136315906;
  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to send packet due to oversize dataSizeByte=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPTransportResendRTP_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Cannot alloc media packet from VCMediaQueue!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPTransportResendRTP_cold_8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Couldn't add packet to media queue", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPTransportResendRTP_cold_9()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d ssrc mismatch in packet retrieved from cache", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPTransportResendRTP_cold_10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d SeqNum mismatch in packet retrieved from cache", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTPMediaSampleTimeWithReceiveTimestamp_cold_1()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[14];
  const char *v4;
  int v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v4 = "_RTPMediaSampleTimeWithReceiveTimestamp";
  OUTLINED_FUNCTION_4();
  v5 = 2201;
  v6 = v0;
  v7 = 2;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v1, v2, " [%s] %s:%d Receive Scaling recvTimestampMode=%d is not supported", v3);
  OUTLINED_FUNCTION_3();
}

void _RTPMediaSampleTimeWithReceiveTimestamp_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  v2 = 136315906;
  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unexpected recvTimestampMode=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _RTPProcessDecryptionStatusChange_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;
  int v4;
  uint64_t v5;

  v2 = 136315906;
  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_7_3();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d MEDIANOTIFICATION_DECRYPTION_STATUS callback failed. (%08lX)", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _RTPTransport_ParseMediaPacket_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "_RTPTransport_ParseMediaPacket";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: Drop RTP packet from a unknown source", v2);
  OUTLINED_FUNCTION_3();
}

void _RTPTransport_ParseMediaPacket_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_RTPTransport_ParseMediaPacket";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to parse RTP header: %d", v2, *(const char **)v3, (unint64_t)"_RTPTransport_ParseMediaPacket" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _RTPTransport_ParseMediaPacket_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "_RTPTransport_PrepareRTPHeader";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: First RTP packet had sequence number 0. Dropping", v2);
  OUTLINED_FUNCTION_3();
}

void _RTPTransport_ParseMediaPacket_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_RTPTransport_ExtractPacketData";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to extract packet payload:%d", v2, *(const char **)v3, (unint64_t)"_RTPTransport_ExtractPacketData" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _RTPTransport_ParseMediaPacket_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_RTPTransport_ExtractPacketExtension";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to extract packet extension:%d", v2, *(const char **)v3, (unint64_t)"_RTPTransport_ExtractPacketExtension" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _RTPTransport_ParseMediaPacket_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_RTPTransport_ValidateAndDecryptRTPPacket";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d SRTP verification failed (%X)", v2, *(const char **)v3, (unint64_t)"_RTPTransport_ValidateAndDecryptRTPPacket" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _RTPTransport_ParseMediaPacket_cold_7()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_RTPTransport_ValidateAndDecryptRTPPacket";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d SRTP decryption failed (%X)", v2, *(const char **)v3, (unint64_t)"_RTPTransport_ValidateAndDecryptRTPPacket" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _RTPTransport_ParseMediaPacket_cold_8(uint64_t a1, void **a2, NSObject *a3)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[24];
  int v8;
  __int16 v9;
  uint64_t v10;

  OUTLINED_FUNCTION_27(a2, *MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_9();
  v8 = 2661;
  v9 = v4;
  v10 = v5;
  OUTLINED_FUNCTION_11(&dword_1D8A54000, a3, v6, " [%s] %s:%d VCSecurityKeyHolder_CopyKeyMaterialForKeyIndex failed, MKI=%s", v7);
  OUTLINED_FUNCTION_19();
}

void _RTPTransport_ParseMediaPacket_cold_9(uint64_t a1, void **a2, NSObject *a3)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t v7[24];
  int v8;
  __int16 v9;
  uint64_t v10;

  OUTLINED_FUNCTION_27(a2, *MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_9();
  v8 = 2662;
  v9 = v4;
  v10 = v5;
  OUTLINED_FUNCTION_11(&dword_1D8A54000, a3, v6, " [%s] %s:%d _RTPTransport_CopyKeyMaterial failed to get MKI with prefix=%s", v7);
  OUTLINED_FUNCTION_19();
}

void _RTPTransport_ParseMediaPacket_cold_10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Key material is missing key index", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTPTransport_ParseMediaPacket_cold_11()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_RTPTransport_HandleMKIChanged";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCSecurityKeyHolder_AssociateKeyIndex failed result=%x", v2, *(const char **)v3, (unint64_t)"_RTPTransport_HandleMKIChanged" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _RTPTransport_ParseMediaPacket_cold_12()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d SRTPUpdateKeyMaterialForRTPInfo failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTPTransport_ParseMediaPacket_cold_13()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_RTPTransport_HandleMKIChanged";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d SRTP notify new media key failed (%X)", v2, *(const char **)v3, (unint64_t)"_RTPTransport_HandleMKIChanged" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _RTPTransport_ParseMediaPacket_cold_14()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;
  int v4;
  uint64_t v5;

  v2 = 136315906;
  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_7_3();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d MEDIANOTIFICATION_SRTPKEYUPDATE callback failed. (%08lX)", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _RTPTransport_ParseMediaPacket_cold_15()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;
  int v4;
  uint64_t v5;

  v2 = 136315906;
  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_7_3();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d MEDIANOTIFICATION_RTPSEQGAP callback failed with result=%08lX", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _RTPTransport_ParseMediaPacket_cold_16()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;
  int v4;
  int v5;

  v2 = 136315906;
  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d %d packets lost", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _RTPTransport_ParseMediaPacket_cold_17()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[14];
  const char *v4;
  int v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v4 = "_RTPTransport_ParseMediaPacket";
  OUTLINED_FUNCTION_4();
  v5 = 2898;
  v6 = v0;
  v7 = -2147418097;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v1, v2, " [%s] %s:%d Stream init failed: %d", v3);
  OUTLINED_FUNCTION_3();
}

void _RTPTransport_ParseMediaPacket_cold_18()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_RTPTransport_ParseMediaPacket";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unable to retrieve data pointer %d", v2, *(const char **)v3, (unint64_t)"_RTPTransport_ParseMediaPacket" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _RTPTransport_PacketExtensionLength_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Extension length pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTPTransport_PacketExtensionLength_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Overflow while reading packet extension header", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTPTransport_PacketExtensionLength_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Overflow while reading packet extension data", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTPTransport_PacketExtensionLength_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Extension offset is larger than the packet size", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTPRecvWithSocket_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_RTPRecvWithSocket";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d RTP packet parsing failed: %d", v2, *(const char **)v3, (unint64_t)"_RTPRecvWithSocket" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void RTPGetUplinkReportingStats_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid reportingStats", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPGetUplinkReportingStats_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid RTP Handle", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPGetDownlinkReportingStats_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid reportingStats", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPGetDownlinkReportingStats_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid RTP Handle", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTPSocketRTPAndBBNoteCallback_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid RTP Handle", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTPSocketRTPAndBBNoteCallback_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_RTPSocketRTPAndBBNoteCallback";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d RTP error[%x]", v2, *(const char **)v3, (unint64_t)"_RTPSocketRTPAndBBNoteCallback" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void RTPSetRemoteSSRC_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Remote SSRC is 0", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTPSetCellularUniqueTagOnPacketFilters_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL rtpInfo", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTPSetCellularUniqueTagOnPacketFilters_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d cellularUniqueTag is 0", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTPConfigureVirtualSockets_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_RTPConfigureVirtualSockets";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Getsockname for RTCP socket failed(%08X)", v2, *(const char **)v3, (unint64_t)"_RTPConfigureVirtualSockets" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _RTPConfigureVirtualSockets_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_RTPConfigureVirtualSockets";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Getsockname for RTP socket failed(%08X)", v2, *(const char **)v3, (unint64_t)"_RTPConfigureVirtualSockets" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void RTPMapPacketMultiplexModeToVTPMode_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid RTP packet multiplex mode", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPSetSockets_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "RTPSetSockets";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Creation of RTP socket from real socket failed(%08X)", v2, *(const char **)v3, (unint64_t)"RTPSetSockets" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void RTPSetSockets_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "RTPSetSockets";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Creation of RTCP socket from real socket failed(%08X)", v2, *(const char **)v3, (unint64_t)"RTPSetSockets" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void RTPSetNWConnections_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d RTPSetSockets: Invalid nwConnection passed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPSetNWConnections_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "RTPSetNWConnections";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Creation of RTP socket from NWConnection failed(%08X)", v2, *(const char **)v3, (unint64_t)"RTPSetNWConnections" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void RTPSetNWConnections_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "RTPSetNWConnections";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Creation of RTCP socket from NWConnection failed(%08X)", v2, *(const char **)v3, (unint64_t)"RTPSetNWConnections" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void RTPCreateSocketsForIDSInternal_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "RTPCreateSocketsForIDSInternal";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: VTP_SocketWithIDSDescriptor for RTP failed(%08X)", v2, *(const char **)v3, (unint64_t)"RTPCreateSocketsForIDSInternal" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPCreateSocketsForIDSInternal_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "RTPCreateSocketsForIDSInternal";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: VTP_SocketWithIDSDescriptor for RTCP failed(%08X)", v2, *(const char **)v3, (unint64_t)"RTPCreateSocketsForIDSInternal" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPCreateSocketsRetryBind_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;
  int v4;
  int v5;

  v2 = 136315906;
  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d RTPCreateSocketsRetryBind: RTP port(%d) must be even", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void CreateSocket_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "CreateSocket";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: socket failed(%08X)", v2, *(const char **)v3, (unint64_t)"CreateSocket" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void CreateSocket_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "CreateSocket";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: set sockopt IP_BOUND_IF failed", v2);
  OUTLINED_FUNCTION_3();
}

void RTPCreateSockets_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "RTPCreateSockets";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: socket failed(%08X)", v2, *(const char **)v3, (unint64_t)"RTPCreateSockets" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPCreateSockets_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "RTPCreateSockets";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: socket failed(%08X)", v2, *(const char **)v3, (unint64_t)"RTPCreateSockets" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPSetOWRD_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "RTPSetOWRD";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: RTP Handle invalid", v2);
  OUTLINED_FUNCTION_3();
}

void RTPGetIsIPv6_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL isIPv6", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPGetIsIPv6_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "RTPGetIsIPv6";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid RTP handle %d", v2, *(const char **)v3, (unint64_t)"RTPGetIsIPv6" >> 16, 4411);
  OUTLINED_FUNCTION_3();
}

void RTPFlushBaseband_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "RTPFlushBaseband";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: CFArrayCreateMutable failed poyload array", v2);
  OUTLINED_FUNCTION_3();
}

void RTPFlushBaseband_cold_2()
{
  int v0;
  uint64_t v1;
  os_log_t v2;
  const char *v3;
  int v4;
  uint64_t v5;

  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_9();
  LODWORD(v5) = 0x8000000;
  HIDWORD(v5) = v0;
  OUTLINED_FUNCTION_5_0(&dword_1D8A54000, v1, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: MEDIANOTIFICATION_BBFLUSH callback failed. (%08lX)", 136316162, v3, v4, 4675, v5);
  OUTLINED_FUNCTION_19();
}

void RTPGetAFRCProbeSeqId_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "RTPGetAFRCProbeSeqId";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: RTP extension length(%u) invalid.", v2, *(const char **)v3, (unint64_t)"RTPGetAFRCProbeSeqId" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPGetAFRCProbeSeqId_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  v2 = 136316162;
  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPTransport.c:%d: Bad version(%u) of RTP header extension!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPRegisterPacketCallback_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[24];
  int v3;
  __int16 v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  v3 = 5195;
  v4 = 2048;
  v5 = 0xFFFFFFFFLL;
  v6 = 2048;
  v7 = v0;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid parameter rtpHandle[%p] callbackContext[%p]!", v2, 0x30u);
  OUTLINED_FUNCTION_19();
}

void RTPRegisterPacketCallback_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "RTPRegisterPacketCallback";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to checking rtpHandle[%p]", v2, *(const char **)v3, (unint64_t)"RTPRegisterPacketCallback" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void RTPRegisterPacketCallback_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "RTPRegisterPacketCallback";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d RTPHandle[%p] Failed store the callback", v2, *(const char **)v3, (unint64_t)"RTPRegisterPacketCallback" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void RTPRegisterPacketCallback_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "RTPRegisterPacketCallback";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d RTPHandle[%p] Packet callback already registered", v2, *(const char **)v3, (unint64_t)"RTPRegisterPacketCallback" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _RTPEnsureTransportStreamsActivated_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL rtpInfo", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPUnregisterPacketCallback_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "RTPUnregisterPacketCallback";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d RTPHandle:%p Packet callback was not registered", v2, *(const char **)v3, (unint64_t)"RTPUnregisterPacketCallback" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void RTPSetTransportStreams_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL rtpTransportStream", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPSetTransportStreams_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL rtcpTransportStream", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPSetTransportStreams_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid handle", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPSetTransportStreams_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Trying to set new transport streams while existing ones are already activated", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTPTransportStreamRTPAndBBNoteCallback_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL packetList", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTPTransportStreamRTPAndBBNoteCallback_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid RTP Handle", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPClearTransportStreams_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid handle", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPGetReceiveStatusWithRunLoop_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL rtpHandleList", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPGetReceiveStatusWithRunLoop_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL flagList", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPGetReceiveStatusWithRunLoop_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "RTPGetReceiveStatusWithRunLoop";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d rtpHandleCount is %d", v2, *(const char **)v3, (unint64_t)"RTPGetReceiveStatusWithRunLoop" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void RTPGetReceiveStatusWithRunLoop_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL runLoop", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPGetReceiveStatusWithRunLoop_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate addedTransportStreams", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTPSetReceiveStatusFlags_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL rtpInfoList", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTPSetReceiveStatusFlags_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL flagList", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTPSetReceiveStatusFlags_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL updatedFlagsList", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTPSetReceiveStatusFlags_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_RTPSetReceiveStatusFlags";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d rtpHandleCount is %d", v2, *(const char **)v3, (unint64_t)"_RTPSetReceiveStatusFlags" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void RTPSetConnectionManager_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL connectionManager", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPSetConnectionManager_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid handle", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTPTransport_ParseBasebandNotification_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Error Parsing Baseband Notification", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _RTPTransport_ParseBasebandNotification_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_RTPTransport_ParseBasebandNotification";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Error processing AFRC Baseband notification %d", v2, *(const char **)v3, (unint64_t)"_RTPTransport_ParseBasebandNotification" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _RTPTransport_ParseBasebandNotification_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  v2 = 136315906;
  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d Received baseband notification with type %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _RTPTransport_ParseBasebandNotification_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_RTPTransport_ParseBasebandNotification";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unable to retrieve data pointer %d", v2, *(const char **)v3, (unint64_t)"_RTPTransport_ParseBasebandNotification" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _RTPEnsureTransportStreamsDeactivated_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL rtpInfo", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void BitrateToQuality_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unexpected Codec Family: %d, asking for variable bitrate change using quality setting", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void SoundDec_Create_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/SoundDec.c:%d: AudioConverterSetProperty failed to set property kAudioConverterPrimeMethod with error %08x", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SoundDec_Create_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/SoundDec.c:%d: AudioConverterSetProperty failed to set property kAudioCodecPropertyBitRateControlMode with error %08x", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SoundDec_Create_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d AudioConverterSetProperty failed to set kAudioCodecPrivatePropertyEnableSAD with error %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void SoundDec_Create_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d AudioConverterSetProperty failed to set kAudioCodecPropertySpeexEncodeQuality with error %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void SoundDec_Create_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d AudioConverterSetProperty failed to set kAudioConverterSampleRateConverterQuality with error %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void SoundDec_Create_cold_6(uint64_t a1, int a2, NSObject *a3)
{
  int v4;
  uint64_t v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = 136316162;
  v5 = a1;
  v6 = 2080;
  v7 = "SoundDec_Create";
  v8 = 1024;
  v9 = 713;
  v10 = 1024;
  v11 = a2;
  v12 = 2080;
  v13 = FourccToCStr(a2);
  _os_log_error_impl(&dword_1D8A54000, a3, OS_LOG_TYPE_ERROR, " [%s] %s:%d AudioConverterNew returned %d '%s'", (uint8_t *)&v4, 0x2Cu);
  OUTLINED_FUNCTION_9_1();
}

void TranslateASBDToPayloadFormat_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d SoundDec didn't understand the asbd sent to it", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SoundDec_AudioConverterInstantiate_cold_1(uint64_t a1, int a2, NSObject *a3)
{
  int v5;
  uint64_t v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = 136316418;
  v6 = a1;
  v7 = 2080;
  v8 = "SoundDec_AudioConverterInstantiate";
  v9 = 1024;
  v10 = 1883;
  v11 = 2080;
  v12 = FourccToCStr(1970103906);
  v13 = 1024;
  v14 = a2;
  v15 = 1024;
  v16 = a2;
  _os_log_error_impl(&dword_1D8A54000, a3, OS_LOG_TYPE_ERROR, " [%s] %s:%d AudioConverterSetProperty failed to set kAudioConverterPropertyUseMessengerForBundleData=%s with error=%d (0x%x)", (uint8_t *)&v5, 0x32u);
  OUTLINED_FUNCTION_9_1();
}

void _SoundDec_ConfigureRamStadSRC_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d AudioConverterSetProperty failed to set kAudioConverterSampleRateConverterQuality with error=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _SoundDec_ConfigureRamStadSRC_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d AudioConverterSetProperty failed to set kAudioConverterSampleRateConverterComplexity with error=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void DecodeNilPacket_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d AudioConverterFillComplexBuffer on lost packet returned %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _SoundDec_HandleCodecModeRequest_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to stop AMR CMR", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _SoundDec_HandleCodecModeRequest_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to set pending AMR CMR", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _SoundDec_HandleCodecModeRequest_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to set pending EVS CMRData", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _SoundDec_HandleCodecModeRequest_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d AudioConverterSetProperty failed to set kAudioCodecPrivatePropertyCMR for EVS with error=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _SoundDec_SetAMRCMRInternal_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d AudioConverterSetProperty failed to set kAudioCodecPrivatePropertyCMR for AMR with error=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void SoundDec_SetDTX_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d AudioConverterSetProperty failed to set property kAudioCodecPrivatePropertyEnableSAD with error %08x", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void SoundDec_GetOpusDecodeFECStatus_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d AudioConverterGetProperty(kAudioCodecPrivatePropertyFECStatus) failed error=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void SoundDec_SetEVSAudioCodecBandwidth_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d AudioConverterSetProperty(kAudioCodecPrivatePropertyBandwidth) failed error=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCVideoPlayer_ProcessAlarmForDisplay_cold_1(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = 136315906;
  v4 = a1;
  v5 = 2080;
  v6 = "_VCVideoPlayer_ProcessAlarmForDisplay";
  v7 = 1024;
  v8 = 605;
  v9 = 2048;
  v10 = a2;
  _os_log_error_impl(&dword_1D8A54000, log, OS_LOG_TYPE_ERROR, "VCVideoPlayer [%s] %s:%d VCVideoPlayer[%p] trying to process display alarm when it's not allowed!", (uint8_t *)&v3, 0x26u);
}

void SummerCreateHandle_cold_1(uint64_t a1, NSObject *a2)
{
  __int16 v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  __error();
  v7 = 136316162;
  v8 = a1;
  v9 = 2080;
  OUTLINED_FUNCTION_9();
  v10 = 265;
  v11 = v4;
  v12 = 265;
  v13 = v4;
  v14 = v5;
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, a2, v6, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/Util.c:%d: calloc failed(%d)", (uint8_t *)&v7);
}

void SummerCreateHandle_cold_2()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[24];
  int v4;
  __int16 v5;
  int v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  v4 = 279;
  v5 = v0;
  v6 = 279;
  v7 = v0;
  v8 = -2146238459;
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, v1, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/Util.c:%d: CreateHandle failed(%08X)", v3);
  OUTLINED_FUNCTION_3();
}

void HasMulticore_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  v4 = 2080;
  v5 = "HasMulticore";
  v6 = 1024;
  v7 = 614;
  _os_log_error_impl(&dword_1D8A54000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d sysctlbyname on hw.activecpu failed", (uint8_t *)&v2, 0x1Cu);
  OUTLINED_FUNCTION_3();
}

void ReadFirstMBAndSliceType_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d FigVideoFormatDescriptionCreateFromBigEndianImageDescriptionData failed. status=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void ReadFirstMBAndSliceType_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to parse header, bufferSize=%d is smaller than 12 bytes", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void hwrandom_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d SecRandomCopyBytes failure result:%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void hwrandom16_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d SecRandomCopyBytes failure result:%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void ReadFrameSliceHeader_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d FigVideoFormatDescriptionCreateFromBigEndianImageDescriptionData failed. status=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RetrieveMBSliceTypeFromFrameInfoDict_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d TranslateVCPSliceType unexpected type: %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCUtil_AuditTokenForCurrentProcess_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to fetch audit_token_t, result=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCUtil_AuditTokenForCurrentProcess_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d task=%u is NOT valid", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCUtil_GenerateTailspin_cold_1()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  const char *v3;
  const char *v4;
  int v5;
  const char *v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_9();
  LODWORD(v6) = 1609;
  WORD2(v6) = v0;
  HIWORD(v6) = v1;
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v1, v2, " [%s] %s:%d ##### Attempting tailspin to be written to file \"%s\"", v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCUtil_GenerateStackshot_cold_1()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  const char *v3;
  const char *v4;
  int v5;
  const char *v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_9();
  LODWORD(v6) = 1624;
  WORD2(v6) = v0;
  HIWORD(v6) = v1;
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v1, v2, " [%s] %s:%d ##### Generating stackshot for reason=%s", v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNACKConsumer_Create_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL newInstance", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNACKConsumer_Create_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d allocate failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNACKConsumer_Create_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  _BYTE v3[14];
  const void *v4;

  v2 = 136315906;
  OUTLINED_FUNCTION_9_2();
  *(_QWORD *)&v3[6] = "VCNACKConsumer_Create";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCNACKConsumer_Create[%p] Failed to create summer handle", v2, *(const char **)v3, (unint64_t)"VCNACKConsumer_Create" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCNACKConsumer_Create_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  _BYTE v3[14];
  const void *v4;

  v2 = 136315906;
  OUTLINED_FUNCTION_9_2();
  *(_QWORD *)&v3[6] = "VCNACKConsumer_Create";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCNACKConsumer_Create[%p] Failed to create summer handle", v2, *(const char **)v3, (unint64_t)"VCNACKConsumer_Create" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCNACKConsumer_GetRetransmissionRequestInfoFromNACK_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL nackConsumer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNACKConsumer_GetRetransmissionRequestInfoFromNACK_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL nackInfo", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNACKConsumer_GetRetransmissionRequestInfoFromNACK_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL retransmissionRequestInfo", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNACKConsumer_GetRetransmissionRequestInfoFromNACK_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Cannot retransmit - retransmission bitrate exceeded allotted quota", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNACKConsumer_GetRetransmissionRequestInfoFromNACK_cold_5(uint64_t a1, int *a2, os_log_t log)
{
  int v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = 136315906;
  v5 = a1;
  v6 = 2080;
  v7 = "VCNACKConsumer_GetRetransmissionRequestInfoFromNACK";
  v8 = 1024;
  v9 = 233;
  v10 = 1024;
  v11 = v3;
  _os_log_debug_impl(&dword_1D8A54000, log, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Retransmission packet count exceeded allotted budget. retransmissionBudget=%d", (uint8_t *)&v4, 0x22u);
  OUTLINED_FUNCTION_3();
}

void _VCNACKConsumer_CheckBitrateLimits_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  int v2[3];
  const char *v3;
  int v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2[0] = 136315906;
  OUTLINED_FUNCTION_9_2();
  v3 = "_VCNACKConsumer_CheckBitrateLimits";
  OUTLINED_FUNCTION_4();
  v4 = 291;
  v5 = 2048;
  v6 = v0;
  _os_log_debug_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Use cached canSendNACK, timeSinceLastCheck=%f", (uint8_t *)v2, 0x26u);
  OUTLINED_FUNCTION_3();
}

void _VCNACKConsumer_CheckBitrateLimits_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to get bitrate", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCNACKConsumer_CheckBitrateLimits_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;
  int v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_5_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCNACKConsumer[%p] Failed to get media packet count, err=%d", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_19();
}

void _VCNACKConsumer_GetBitrate_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to compute summer bitrate for retransmitted bytes", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCNACKConsumer_GetBitrate_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to compute summer bitrate for media bytes", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNACKConsumer_UpdateRetransmissionStatus_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL nackConsumer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNACKConsumer_UpdateRetransmissionStatus_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;
  int v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_5_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCNACKConsumer[%p] Failed to add media packet length to retransmitted bytes summer, err=%d", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_19();
}

void VCNACKConsumer_UpdateTransmissionStatus_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL nackConsumer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNACKConsumer_UpdateTransmissionStatus_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;
  int v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_5_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCNACKConsumer[%p] Failed to add media packet length to media bytes summer, err=%d", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_19();
}

void VCNACKConsumer_UpdatePacketCacheStatus_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  _BYTE v3[14];
  const void *v4;

  v2 = 136315906;
  OUTLINED_FUNCTION_9_2();
  *(_QWORD *)&v3[6] = "VCNACKConsumer_UpdatePacketCacheStatus";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NACKConsumer[%p] NULL SSRC context", v2, *(const char **)v3, (unint64_t)"VCNACKConsumer_UpdatePacketCacheStatus" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void FECUtil_SetupFECHeader_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid FEC Header Version: %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _FECHeader_UnpackV0ParitySubHeaderFromBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to unpack legacy parity sub header to buffer.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _FECHeader_UnpackV0ParitySubHeaderFromBuffer_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  uint64_t v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid buffer size %ld", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _FECHeader_UnpackV0ParitySubHeaderFromBuffer_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];

  OUTLINED_FUNCTION_8_0();
  *(_QWORD *)&v3[6] = "_FECHeader_UnpackV0ParitySubHeaderFromBuffer";
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/FECUtil.c:%d: Bad FEC header (%d)!", v2, *(const char **)v3, (unint64_t)"_FECHeader_UnpackV0ParitySubHeaderFromBuffer" >> 16, 195, 0x4000000);
  OUTLINED_FUNCTION_3();
}

void _FECHeader_UnpackV0ParitySubHeaderFromBuffer_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  uint64_t v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid buffer size %ld", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _FECHeader_UnpackV0ParitySubHeaderFromBuffer_cold_5()
{
  int v0;
  os_log_t v1;
  uint8_t v2[14];
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_8_0();
  v3 = "_FECHeader_UnpackV0ParitySubHeaderFromBuffer";
  v4 = 1024;
  v5 = 211;
  v6 = 1024;
  v7 = v0;
  _os_log_debug_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Unpack legacy parity subheader wNumPkt=%d", v2, 0x22u);
  OUTLINED_FUNCTION_3();
}

void _FECHeader_UnpackV1ParitySubHeaderFromBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to unpack parity sub header to buffer.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _FECHeader_UnpackV1ParitySubHeaderFromBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid number of symbols!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _FECHeader_UnpackV1ParitySubHeaderFromBuffer_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  uint64_t v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid buffer size %ld", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _FECHeader_UnpackV1ParitySubHeaderFromBuffer_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  uint64_t v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid buffer size %ld", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void FECHeader_UnpackHeaderFromBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to unpack FEC header to buffer.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void FECHeader_UnpackHeaderFromBuffer_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  uint64_t v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid buffer size %ld", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void FECHeader_UnpackHeaderFromBuffer_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unsupported FEC Header Version: %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _FECHeader_PackV0ParitySubHeaderToBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to pack legacy parity sub header to buffer.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _FECHeader_PackV0ParitySubHeaderToBuffer_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  uint64_t v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid buffer size %ld", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _FECHeader_PackV0ParitySubHeaderToBuffer_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  uint64_t v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid buffer size %ld", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _FECHeader_PackV1ParitySubHeaderToBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to pack parity sub header to buffer.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _FECHeader_PackV1ParitySubHeaderToBuffer_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  uint64_t v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid buffer size %ld", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _FECHeader_PackV1ParitySubHeaderToBuffer_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  uint64_t v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid buffer size %ld", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void FECHeader_PackHeaderToBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to pack FEC header to buffer.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void FECHeader_PackHeaderToBuffer_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid FEC Header Version: %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void FECUtil_GetRealNumParity_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/FECUtil.c:%d: WRONG, cannot have %d packets per group", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void FECUtil_GetRealNumParity_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/FECUtil.c:%d: WRONG, cannot have %d packets per group", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void FECUtil_GetRealNumParity_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/FECUtil.c:%d: WRONG, cannot have %d packets per group", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void FECUtil_GetExpectedParityPacketCount_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Expected parity packet count is only supported with FEC Header V1.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void FECUtil_UpdateParitySequenceNumberHistory_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid parity sequence number arguments.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void FECUtil_ConvertNumberOfSymbolsToPackets_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Number of symbols per packet must be non-zero.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void FECUtil_PackFrameLoss_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid parameter. Field cannot be null.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void FECUtil_UnpackFrameLoss_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid parameters. Size and loss cannot be null.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaRecorderHistoryBuffer_UpdateBufferWithSample_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d historyBuffer nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaRecorderHistoryBuffer_UpdateBufferWithSample_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d frame is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaRecorderHistoryBuffer_UpdateBufferWithSample_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate memory for timestamp=%u", v2, v3, v4, 157);
  OUTLINED_FUNCTION_3();
}

void VCMediaRecorderHistoryBuffer_UpdateBufferWithSample_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d timestamp %d exists already, enqueue failed", v2, v3, v4, 158);
  OUTLINED_FUNCTION_3();
}

void _VCMediaRecorderHistoryBuffer_DequeueOneFrame_cold_1()
{
  __int16 v0;
  __int16 v1;
  os_log_t v2;
  uint8_t v3[12];
  __int16 v4;
  int v5;
  __int16 v6;
  const char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  v4 = v0;
  OUTLINED_FUNCTION_9();
  v5 = 148;
  v6 = v1;
  v7 = "void _VCMediaRecorderHistoryBuffer_DequeueOneFrame(VCMediaRecorderHistoryBuffer *)";
  _os_log_debug_impl(&dword_1D8A54000, v2, OS_LOG_TYPE_DEBUG, " [%s] %s:%d VCMediaRecorderHistoryBuffer %s the old frame does not in buffer, something is wrong", v3, 0x26u);
  OUTLINED_FUNCTION_3();
}

void VCCarrierBundle_GetPSVoiceOnAPEnabled_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  v4 = 2080;
  v5 = "_VCCarrierBundle_GetValueforKeyHierarchy";
  v6 = 1024;
  v7 = 53;
  _os_log_error_impl(&dword_1D8A54000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to initialize CoreTelephonyClient", (uint8_t *)&v2, 0x1Cu);
}

void VCCarrierBundle_GetPSVoiceOnAPEnabled_cold_2(uint64_t a1, uint64_t *a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = 136315906;
  v5 = a1;
  v6 = 2080;
  v7 = "_VCCarrierBundle_GetValueforKeyHierarchy";
  v8 = 1024;
  v9 = 57;
  v10 = 2112;
  v11 = v3;
  _os_log_error_impl(&dword_1D8A54000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to initialize CTXPCServiceSubscriptionContext, error=%@", (uint8_t *)&v4, 0x26u);
}

void RTPUnpackGenericDataPacket_cold_1(uint64_t a1)
{
  __int16 v1;
  uint64_t v2;
  os_log_t v3;
  int v4;
  uint64_t v5;
  int v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = 136316162;
  v5 = a1;
  OUTLINED_FUNCTION_1();
  v6 = 84;
  v7 = v1;
  v8 = 8;
  v9 = 2048;
  v10 = v2;
  _os_log_error_impl(&dword_1D8A54000, v3, OS_LOG_TYPE_ERROR, " [%s] %s:%d Data header size (%d) is larger than the received packet size (%zu)", (uint8_t *)&v4, 0x2Cu);
}

void RTPUnpackGenericDataPacket_cold_2(uint64_t a1)
{
  os_log_t v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  OUTLINED_FUNCTION_1();
  v4 = 91;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to append the uncompressed video data", (uint8_t *)&v2, 0x1Cu);
}

void _VideoPacketBuffer_IsFrameComplete_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d Error! Missing end of frame", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoPacketBuffer_IsFrameComplete_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;
  int v4;
  int v5;

  v2 = 136315906;
  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d Error! Missing inital frames, seq:%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VideoPacketBuffer_IsFrameComplete_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d END", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoPacketBuffer_IsFrameComplete_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d BEGIN", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_Create_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoPacketBuffer_Create";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to allocate memory pool", v2, *(const char **)v3, (unint64_t)"VideoPacketBuffer_Create" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_Create_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoPacketBuffer_Create";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to allocate memory pool allocator", v2, *(const char **)v3, (unint64_t)"VideoPacketBuffer_Create" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_Create_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoPacketBuffer_Create";
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to create figMemoryPool", v2, *(const char **)v3, (unint64_t)"VideoPacketBuffer_Create" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_Create_cold_4()
{
  os_log_t v0;
  uint8_t v1[14];
  const char *v2;
  __int16 v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "VideoPacketBuffer_Create";
  v3 = 1024;
  OUTLINED_FUNCTION_2_0();
  _os_log_fault_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_FAULT, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to create figMemoryPool", v1, 0x26u);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_Create_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_11_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d Failed to get allocator from figMemoryPool", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_Create_cold_6()
{
  os_log_t v0;
  uint8_t v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_11_4();
  _os_log_fault_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_FAULT, "VideoPacketBuffer [%s] %s:%d Failed to get allocator from figMemoryPool", v1, 0x1Cu);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_Create_cold_7()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoPacketBuffer_Create";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to allocate slice header allocator", v2, *(const char **)v3, (unint64_t)"VideoPacketBuffer_Create" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_Create_cold_8()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoPacketBuffer_Create";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to allocate sample buffer allocator", v2, *(const char **)v3, (unint64_t)"VideoPacketBuffer_Create" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_Create_cold_9()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoPacketBuffer_Create";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to allocate block buffer header allocator", v2, *(const char **)v3, (unint64_t)"VideoPacketBuffer_Create" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_Destroy_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer pointer is null", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_NeedRefreshFrame_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer pointer is null", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_GetCachedBurstLossStatistics_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d Invalid arguments to get frame loss stats.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_ResetBurstLossStatistics_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d Invalid arguments for resetting max burst loss stats.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_UpdateMaxFrameBurstLossStatistics_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d Invalid videoPacketBuffer for updating max frame burst loss.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_UpdateMaxFrameBurstLossStatistics_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoPacketBuffer_UpdateMaxFrameBurstLossStatistics";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d Invalid frameStats for updating max frame burst loss for VideoPacketBuffer=%p", v2, *(const char **)v3, (unint64_t)"VideoPacketBuffer_UpdateMaxFrameBurstLossStatistics" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_UpdateMaxFrameBurstLossStatistics_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d Received more parity packets than expected.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_UpdateMaxFrameBurstLossStatistics_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d Received more video packets than expected.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_UpdateMaxGroupBurstLossStatistics_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d Invalid arguments for updating max group burst loss.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_UpdateMaxGroupBurstLossStatistics_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d Lost more video symbols than expected.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_GetStatistics_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer pointer is null", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_ResetStatistics_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer pointer is null", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_AddPacket_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoPacketBuffer_AddPacket";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] pFECHeader is NULL", v2, *(const char **)v3, (unint64_t)"VideoPacketBuffer_AddPacket" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_AddPacket_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;
  int v4;
  int v5;

  v2 = 136315906;
  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d invalidating fecHeader for frame with frameSequenceNumber:%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_AddPacket_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;
  int v4;
  int v5;

  v2 = 136315906;
  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d [Media Priority] Received video priority=%u", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VideoPacketBuffer_StartTrackingEvictedFrameStats_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d Received NULL frame", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_ScheduleFutureFrame_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer pointer is null", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_ScheduleFutureFrame_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoPacketBuffer_ScheduleFutureFrame";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] schedule pointer is null", v2, *(const char **)v3, (unint64_t)"VideoPacketBuffer_ScheduleFutureFrame" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_ScheduleFutureFrame_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoPacketBuffer_ScheduleFutureFrame";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_7_4(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Scheduling FEC Protected Frame after successful recovery (when next frame come)", v2, *(const char **)v3, (unint64_t)"VideoPacketBuffer_ScheduleFutureFrame" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoPacketBuffer_ScheduleSingleFrame_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoPacketBuffer_ScheduleSingleFrame";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Invalid parameter scheduledFrameTimestamp!", v2, *(const char **)v3, (unint64_t)"_VideoPacketBuffer_ScheduleSingleFrame" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoPacketBuffer_ScheduleSingleFrame_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoPacketBuffer_ScheduleSingleFrame";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_7_4(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Scheduling FEC Protected Frame after successful recovery", v2, *(const char **)v3, (unint64_t)"_VideoPacketBuffer_ScheduleSingleFrame" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoPacketBuffer_ScheduleSingleFrame_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoPacketBuffer_ScheduleSingleFrame";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_7_4(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] FEC Protected Frame unsuccessful recovery", v2, *(const char **)v3, (unint64_t)"_VideoPacketBuffer_ScheduleSingleFrame" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoPacketBuffer_ScheduleSingleFrame_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoPacketBuffer_ScheduleSingleFrame";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_7_4(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] FEC Protected Frame begin recovery", v2, *(const char **)v3, (unint64_t)"_VideoPacketBuffer_ScheduleSingleFrame" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_SchedulePastIncompleteFrame_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoPacketBuffer_SchedulePastIncompleteFrame";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_7_4(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] schedule pointer is null", v2, *(const char **)v3, (unint64_t)"VideoPacketBuffer_SchedulePastIncompleteFrame" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_GetFrameDecodingOrder_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer pointer is null", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_GetFrameDecodingOrder_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoPacketBuffer_GetFrameDecodingOrder";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Decoding order not supported!", v2, *(const char **)v3, (unint64_t)"VideoPacketBuffer_GetFrameDecodingOrder" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_GetFrameStreamIDs_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer pointer is null", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_FirstIDRReceived_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer pointer is null", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_SetFrameSize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer pointer is null", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_GetNextFrame_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer pointer is null", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCVideoPacketBuffer_AssembleFrame_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCVideoPacketBuffer_AssembleFrame";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Error while processing packets", v2, *(const char **)v3, (unint64_t)"_VCVideoPacketBuffer_AssembleFrame" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCVideoPacketBuffer_AssembleFrame_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCVideoPacketBuffer_ProcessRTPPackets";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d packet[%p] bufferData.data is NULL", v2, *(const char **)v3, (unint64_t)"_VCVideoPacketBuffer_ProcessRTPPackets" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCVideoPacketBuffer_AssembleFrame_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCVideoPacketBuffer_ParseCompletedPacket";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to get the slice length", v2, *(const char **)v3, (unint64_t)"_VCVideoPacketBuffer_ParseCompletedPacket" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCVideoPacketBuffer_AssembleFrame_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCVideoPacketBuffer_ParseCompletedPacket";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to get data pointer", v2, *(const char **)v3, (unint64_t)"_VCVideoPacketBuffer_ParseCompletedPacket" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCVideoPacketBuffer_AssembleFrame_cold_5()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[14];
  const char *v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "_VCVideoPacketBuffer_AssembleFrame";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  v4 = v0;
  v5 = 0;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to get valid decrypted buffer length=%zu", v2, 0x30u);
}

void _VCVideoPacketBuffer_AssembleFrame_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCVideoPacketBuffer_StripFakeLargeFramePadding";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to truncate the buffer", v2, *(const char **)v3, (unint64_t)"_VCVideoPacketBuffer_StripFakeLargeFramePadding" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCVideoPacketBuffer_AssembleFrame_cold_7()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCVideoPacketBuffer_StripFakeLargeFramePadding";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer[%p] Failed to retrieve magic number and length", v2, *(const char **)v3, (unint64_t)"_VCVideoPacketBuffer_StripFakeLargeFramePadding" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoPacketBuffer_SetRoundTripTime_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoPacketBuffer [%s] %s:%d VideoPacketBuffer pointer is null", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoDecoder_Create_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to init VideoDecoder with NULL config", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoDecoder_Create_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to init VideoDecoder with NULL frame callback", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoDecoder_NewFormat_InitDecoder_cold_1()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[24];
  int v3;
  __int16 v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  v3 = 540;
  v4 = v0;
  v5 = 540;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoDecoder.c:%d: Can't allocate imageDescDataBE", v2, 0x22u);
  OUTLINED_FUNCTION_3();
}

void VideoDecoder_NewFormat_InitDecoder_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoDecoder.c:%d: Can't recreate avcC from SPS/PPS %d", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoDecoder_NewFormat_InitDecoder_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCPDecompressionSessionCreate: error=%d", v2, v3, v4, 714);
  OUTLINED_FUNCTION_3();
}

void VideoDecoder_NewFormat_InitDecoder_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoDecoder.c:%d: ReadCodecConfigParams: error: %X", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoDecoder_NewFormat_InitDecoder_cold_5(uint64_t a1)
{
  __int16 v1;
  uint64_t v2;
  os_log_t v3;
  __int128 v4;
  int v5;
  int v6;

  LODWORD(v4) = 136316162;
  *(_QWORD *)((char *)&v4 + 4) = a1;
  WORD6(v4) = 2080;
  OUTLINED_FUNCTION_9();
  LOWORD(v6) = 0;
  HIWORD(v6) = v1;
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v2, v3, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoDecoder.c:%d: FigVideoFormatDescriptionCreate: error: %X", (const char *)v4, *((const char **)&v4 + 1), v5, 384, v6);
  OUTLINED_FUNCTION_3();
}

void VideoDecoder_NewFormat_InitDecoder_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoDecoder.c:%d: ReadCodecConfigParams: error: %X", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoDecoder_NewFormat_InitDecoder_cold_7()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoDecoder.c:%d: FigVideoFormatDescriptionCreate: error: %d", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoDecoder_NewFormat_InitDecoder_cold_8()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoDecoder.c:%d: FigVideoFormatDescriptionCreateFromBigEndianImageDescriptionData: error: %d ", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoDecoder_VTDecompressionCallback_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VideoDecoder is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoDecoder_VTDecompressionCallback_cold_2()
{
  int v0;
  int v1;
  int v2;
  os_log_t v3;
  uint8_t v4[12];
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_15_1();
  v5 = 2080;
  v6 = "VideoDecoder_VTDecompressionCallback";
  v7 = 1024;
  v8 = 144;
  v9 = 1024;
  v10 = v0;
  v11 = 1024;
  v12 = v1;
  v13 = 1024;
  v14 = v2;
  _os_log_error_impl(&dword_1D8A54000, v3, OS_LOG_TYPE_ERROR, " [%s] %s:%d VCPDecompressionSession Error: Decoder returned a NULL frame for stream %d, showFrame %d, RTPTimestamp=%u", v4, 0x2Eu);
}

void VideoDecoder_VTDecompressionCallback_cold_3()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  os_log_t v4;
  uint8_t v5[12];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_15_1();
  v6 = 2080;
  v7 = "VideoDecoder_VTDecompressionCallback";
  v8 = 1024;
  v9 = 149;
  v10 = 1024;
  v11 = v0;
  v12 = 1024;
  v13 = v1;
  v14 = 2048;
  v15 = v2;
  v16 = 2048;
  v17 = v3;
  _os_log_error_impl(&dword_1D8A54000, v4, OS_LOG_TYPE_ERROR, " [%s] %s:%d VCPDecompressionSession Error: Decoder returned a NULL frame with showFrame %d, RTPTimestamp=%u, decoding order %llu, tileID %llu", v5, 0x3Cu);
  OUTLINED_FUNCTION_14_3();
}

void VideoDecoder_VTDecompressionCallback_cold_4()
{
  int v0;
  int v1;
  os_log_t v2;
  uint8_t v3[12];
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;

  OUTLINED_FUNCTION_12_2(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_15_1();
  v4 = 2080;
  v5 = "VideoDecoder_VTDecompressionCallback";
  v6 = 1024;
  v7 = 141;
  v8 = 1024;
  v9 = v0;
  v10 = 1024;
  v11 = v1;
  v12 = 1024;
  OUTLINED_FUNCTION_10_5();
  _os_log_debug_impl(&dword_1D8A54000, v2, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Decoder returned frame with RTPTimestamp=%u, showFrame %d, streamID %d, decoding order %llu, tileID %llu", v3, 0x42u);
  OUTLINED_FUNCTION_14_3();
}

void VideoDecoder_DecodeFrame_cold_1()
{
  int v0;
  int v1;
  __int16 v2;
  int v3;
  os_log_t v4;
  uint8_t v5[12];
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  __int16 v15;
  int v16;

  OUTLINED_FUNCTION_12_2(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_15_1();
  v6 = 2080;
  v7 = "VideoDecoder_DecodeFrame";
  v8 = 1024;
  v9 = 886;
  v10 = 1024;
  v11 = v0;
  v12 = 1024;
  v13 = v1;
  v14 = 1024;
  OUTLINED_FUNCTION_10_5();
  v15 = v2;
  v16 = v3;
  _os_log_debug_impl(&dword_1D8A54000, v4, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Decode frame with RTPTimestamp=%u, showFrame %d, streamID %d, tileID %llu, decoding order %llu, canStopVideoStall=%d", v5, 0x48u);
  OUTLINED_FUNCTION_14_3();
}

void VideoDecoder_IsLastSubframe_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d out parameter isLastSubframe is NULL. Unable to determine last subframe for tileIndex %u.", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VideoDecoder_IsLastSubframe_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d BlockBuffer is NULL. Unable to determine last subframe for tileIndex %u.", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VideoDecoder_IsLastSubframe_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Decoder not yet initialized. Unable to determine last subframe for tileIndex %u.", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioDecoderList_SetMagicCookieForPayload_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d AudioDecoder is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioDecoderList_GetEVSHeaderFormat_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid decoder format", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioDecoderList_Setup_cold_1()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[24];
  int v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  v3 = 85;
  v4 = 2048;
  v5 = v0;
  OUTLINED_FUNCTION_11(&dword_1D8A54000, v1, (uint64_t)v1, " [%s] %s:%d Failed to allocate payload structure for audio receiver (%p).", v2);
  OUTLINED_FUNCTION_3();
}

void VCAudioDecoderList_GetSpeechCodecBundleData_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d AudioDecoder is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioDecoderList_GetSpeechCodecBundleData_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Asking SpeechCodecBundleData for a invalid bundle data for payload type: %d", v2, v3, v4, 190);
  OUTLINED_FUNCTION_3();
}

void VCAudioDecoderList_GetSpeechCodecBundleData_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d unable to read bundle data[%d]", v2, v3, v4, 202);
  OUTLINED_FUNCTION_3();
}

void VCAudioDecoderList_IsDTXFrame_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_10();
  OUTLINED_FUNCTION_11(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid parameter bitRate=%p", v2);
  OUTLINED_FUNCTION_3();
}

void VCAudioDecoderList_IsDTXFrame_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_10();
  OUTLINED_FUNCTION_11(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid parameter isSID=%p", v2);
  OUTLINED_FUNCTION_3();
}

void _VCConnectionLegacy_IsOnSameInterfacesWithConnection_cold_1(uint64_t a1, char a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = 136315906;
  v4 = a1;
  v5 = 2080;
  v6 = "_VCConnectionLegacy_IsOnSameInterfacesWithConnection";
  v7 = 1024;
  v8 = 223;
  v9 = 1024;
  v10 = a2 & 1;
  _os_log_debug_impl(&dword_1D8A54000, log, OS_LOG_TYPE_DEBUG, " [%s] %s:%d VCConnection: isOnSameInterfacesWithConnection: %{BOOL}d", (uint8_t *)&v3, 0x22u);
  OUTLINED_FUNCTION_3();
}

void _VCConnectionLegacy_IsOnSameInterfacesWithConnection_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCConnection: isOnSameInterfacesWithConnection: NO", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCConnectionLegacy_IsRemoteIPPort_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCConnection: isRemoteIPPort: NO", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCConnectionLegacy_IsRemoteIPPort_cold_2(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  __int16 v3;
  __int16 v4;
  __int16 v5;
  char v6;
  __int128 v7;
  int v8;
  const char *v9;

  *(_QWORD *)((char *)&v7 + 4) = a1;
  OUTLINED_FUNCTION_5_3();
  LODWORD(v9) = 180;
  if (!v6)
    v3 = v4;
  WORD2(v9) = v5;
  HIWORD(v9) = v3;
  OUTLINED_FUNCTION_7_4(&dword_1D8A54000, v1, v2, " [%s] %s:%d VCConnection: isRemoteIPPort: %s", (const char *)v7, *((const char **)&v7 + 1), v8, v9);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_DecoderCallback_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver is null", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_DecoderCallback_cold_2()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  OUTLINED_FUNCTION_15_2();
  OUTLINED_FUNCTION_10_6();
  OUTLINED_FUNCTION_6_2();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 0x38u);
  OUTLINED_FUNCTION_19();
}

void _VideoReceiver_EnqueueDecodedFrameForDisplay_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoReceiver_EnqueueDecodedFrameForDisplay";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_7_4(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] stopping", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_EnqueueDecodedFrameForDisplay" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_CreateReportingEventDictionary_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Failed to create reporting event dictionary", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_HandleStreamSwitch_cold_1()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  OUTLINED_FUNCTION_6_2();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 0x44u);
}

void _VideoReceiver_DecryptFrame_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoReceiver_DecryptFrame";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d VCSFrameCryptorH264_Decrypt failed. result=%x", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_DecryptFrame" >> 16, 3010);
  OUTLINED_FUNCTION_3();
}

void VideoReceiver_SetTargetStreamID_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoReceiver_SetTargetStreamID";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Attempting to switch to a stream that does not exist", v2, *(const char **)v3, (unint64_t)"VideoReceiver_SetTargetStreamID" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_GetVPBStats_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Received NULL videoReceiver", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_GetVPBStats_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Received NULL VPB Stats", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_GetVPBStats_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Received NULL VPB Stats", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoReceiver_CreateHandle_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Failed to create VideoPlayer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoReceiver_CreateHandle_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Failed to create VideoReceiver handle", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoReceiver_CreateHandle_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Failed to create rtcpSendQueue", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoReceiver_CreateHandle_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Failed to create rtcpMemoryPool", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoReceiver_CreateHandle_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoReceiver_CreateHandle";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Failed to create nack generator", v2, *(const char **)v3, (unint64_t)"VideoReceiver_CreateHandle" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoReceiver_CreateHandle_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Failed to allocate sample buffer allocator", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoReceiver_CreateHandle_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Failed to allocate the format description allocator", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoReceiver_CreateHandle_cold_8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Failed to create decodedFrameAllocator", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoReceiver_CreateHandle_cold_9()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Failed to create numberPropertyAllocator", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoReceiver_CreateHandle_cold_10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Failed to create blockBufferHeaderAllocator", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoReceiver_CreateHandle_cold_11()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoReceiver_CreateHandle";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] failed to open in_frame", v2, *(const char **)v3, (unint64_t)"VideoReceiver_CreateHandle" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoReceiver_CreateHandle_cold_12()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoReceiver_CreateHandle";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] failed to open received_rtp_pkts", v2, *(const char **)v3, (unint64_t)"VideoReceiver_CreateHandle" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoReceiver_CreateHandle_cold_13()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoReceiver_CreateHandle";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] failed to open in_pkt", v2, *(const char **)v3, (unint64_t)"VideoReceiver_CreateHandle" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_NoVideoDisplayedTimeoutCallback_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Received no video playback callback with NULL context", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_NoVideoDisplayedTimeoutCallback_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Failed to check in video receiver handle", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoReceiver_DisplayLinkTick_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Invalid handle", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_CallAlarms_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Invalid handle", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoReceiver_GetBitrate_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Failed to compute summer bitrate for decoder media bytes", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoReceiver_GetBitrate_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Failed to compute summer bitrate for media bytes", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoReceiver_GetBitrate_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Failed to compute summer bitrate for metadata bytes", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoReceiver_GetBitrate_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Failed to compute summer bitrate for FEC bytes", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoReceiver_GetBitrate_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Failed to compute summer bitrate for total bytes", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoReceiver_GetShowFrameRTPTimestamp_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Video Receiver is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoReceiver_CellTechChanged_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Video Receiver is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoReceiver_SetSynchronizer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Video Receiver is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoReceiver_SetExternalOutputLatency_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Video Receiver is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoReceiver_SetDeferredAssemblyEnabled_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Video Receiver is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoReceiver_SetLooseAVSyncEnabled_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Video Receiver is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_ShowFrame_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d decodedFrame is null", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_VideoAlarmCommon_cold_1()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_6_2();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 0x22u);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_VideoAlarmCommon_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoReceiver_VideoAlarmCommon";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_7_4(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] stopping", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_VideoAlarmCommon" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_DequeueAndDecode_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoReceiver_DequeueAndDecode";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Video queue is empty", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_DequeueAndDecode" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_DequeueAndDecode_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoReceiver_DequeueAndDecode";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] _VideoReceiver_CreateSampleBufferForDecode failed!", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_DequeueAndDecode" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_DequeueAndDecode_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoReceiver_CreateCompressedVideoFrameForDecode";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] CMSampleBufferCreate failed", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_CreateCompressedVideoFrameForDecode" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_DequeueAndDecode_cold_4()
{
  unint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  LODWORD(v5) = 1112;
  WORD2(v5) = 2048;
  HIWORD(v5) = v0;
  OUTLINED_FUNCTION_5_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Failed to create decode sample buffer attachements. result=%x", v2, v3, v4, v5, v0 >> 16);
  OUTLINED_FUNCTION_19();
}

void _VideoReceiver_DequeueAndDecode_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoReceiver_PrepareDecodeSampleBufferAttachments";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Failed to allocate priority attachment", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_PrepareDecodeSampleBufferAttachments" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_DequeueAndDecode_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoReceiver_PrepareDecodeSampleBufferAttachments";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Failed to allocate RTP timestamp attachment", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_PrepareDecodeSampleBufferAttachments" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_DequeueAndDecode_cold_7()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoReceiver_PrepareDecodeSampleBufferAttachments";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Failed to allocate sub frame ID attachment", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_PrepareDecodeSampleBufferAttachments" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_DequeueAndDecode_cold_8()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoReceiver_PrepareDecodeSampleBufferAttachments";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Failed to allocate tile index attachment", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_PrepareDecodeSampleBufferAttachments" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_DequeueAndDecode_cold_9()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoReceiver_PrepareDecodeSampleBufferAttachments";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Failed to allocate tile order attachment", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_PrepareDecodeSampleBufferAttachments" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_DequeueAndDecode_cold_10()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_6_2();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 0x2Cu);
  OUTLINED_FUNCTION_19();
}

void _VideoReceiver_DequeueAndDecode_cold_11()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoReceiver_CreateSampleBufferForUncompressedFrame";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Failed to create the sample buffer", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_CreateSampleBufferForUncompressedFrame" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_DequeueAndDecode_cold_12()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoReceiver_CreateSampleBufferForUncompressedFrame";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Failed to create format descriptor", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_CreateSampleBufferForUncompressedFrame" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoReceiver_DumpRecvSPSPPS_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoReceiver_DumpRecvSPSPPS";
  OUTLINED_FUNCTION_4();
  LODWORD(v4) = 0x8000000;
  HIDWORD(v4) = v0;
  OUTLINED_FUNCTION_5_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoReceiver.c:%d: VideoReceiver[%p] Can't extract avcC from format description", v2, *(const char **)v3, (unint64_t)"VideoReceiver_DumpRecvSPSPPS" >> 16, 738, v4);
  OUTLINED_FUNCTION_19();
}

void _VideoReceiver_SendRTCPResiliencyInfo_cold_1()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  OUTLINED_FUNCTION_15_2();
  OUTLINED_FUNCTION_10_6();
  OUTLINED_FUNCTION_6_2();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 0x34u);
  OUTLINED_FUNCTION_19();
}

void _VideoReceiver_ProcessVideoRTPInternal_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Could not retrieve base stream", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_ProcessVideoRTPInternal_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d VideoPacketBuffer pointer is null, first packet not received on the base stream", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_ProcessVideoRTPInternal_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoReceiver_UpdateWRMVideoPacketMetrics";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_7_4(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Uninitialized wrmInfo: cannot update WRM video packet metrics!", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_UpdateWRMVideoPacketMetrics" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_ProcessVideoRTPInternal_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoReceiver_UpdateWRMVideoPacketMetrics";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] Unsupported FEC header version: cannot update WRM video packet metrics!", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_UpdateWRMVideoPacketMetrics" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_ProcessVideoRTPInternal_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoReceiver_ProcessProbingSequence";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver[%p] statisticsCollector is invalid", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_ProcessProbingSequence" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_ProcessVideoRTPInternal_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Failed to extract cameraStatusBits from Standard Rtp header extension", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_EnqueueFailedFrameToJitterBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d VideoReceiver is null", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoReceiver_EnqueueFrameToJitterBuffer_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];

  OUTLINED_FUNCTION_8_0();
  *(_QWORD *)&v3[6] = "_VideoReceiver_EnqueueFrameToJitterBuffer";
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VideoReceiver [%s] %s:%d Attempting to enqueue a frame with timestamp %d that has frameArrivalTime not set", v2, *(const char **)v3, (unint64_t)"_VideoReceiver_EnqueueFrameToJitterBuffer" >> 16, 2197);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetectorUtil_Create_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate audio issue detector handle", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetectorUtil_Create_cold_2()
{
  __int16 v0;
  int v1;
  os_log_t v2;
  uint8_t v3[14];
  const char *v4;
  int v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v4 = "VCAudioIssueDetectorUtil_Create";
  OUTLINED_FUNCTION_4();
  v5 = 1515;
  v6 = v0;
  v7 = v1;
  _os_log_debug_impl(&dword_1D8A54000, v2, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Audio issue detector created for direction=%d", v3, 0x22u);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetectorUtil_Create_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate audio issue detector queue", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetectorUtil_UpdateRATType_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "VCAudioIssueDetectorUtil_UpdateRATType";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_10();
  OUTLINED_FUNCTION_11(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid parameter issueDetectorUtil=%p", v2);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetectorUtil_ProcessCellularNetworkNotification_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "VCAudioIssueDetectorUtil_ProcessCellularNetworkNotification";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_10();
  OUTLINED_FUNCTION_11(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid parameter issueDetectorUtil=%p", v2);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetectorUtil_ProcessCellularNetworkNotification_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid input parameters", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioIssueDetectorUtil_StateMachine_cold_1()
{
  NSObject *v0;
  uint8_t v1[14];
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "_VCAudioIssueDetectorUtil_StateMachine";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_11(&dword_1D8A54000, v0, (uint64_t)v0, " [%s] %s:%d Audio issue detector [%p] state is invalid", v1);
  OUTLINED_FUNCTION_3();
}

void _VCAudioIssueDetectorUtil_StateMachine_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_12_3(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unexpected event in init state for direction=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCAudioIssueDetectorUtil_StateMachine_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_12_3(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unexpected event in idle state for direction=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCAudioIssueDetectorUtil_StateMachine_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_12_3(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unexpected event in silence state for direction=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCAudioIssueDetectorUtil_StateMachine_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_12_3(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unexpected event in speech state in direction=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetectorUtil_Start_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Audio issue detector is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetectorUtil_Stop_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Audio issue detector is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetectorUtil_ProcessFrame_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Audio issue detector is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetectorUtil_FlushLogEvents_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Audio issue detector is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetectorUtil_RtpPacketIndication_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "VCAudioIssueDetectorUtil_RtpPacketIndication";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_10();
  OUTLINED_FUNCTION_11(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid parameter issueDetectorUtil=%p", v2);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetectorUtil_RtpPacketTimeoutIndication_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "VCAudioIssueDetectorUtil_RtpPacketTimeoutIndication";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_10();
  OUTLINED_FUNCTION_11(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid parameter issueDetectorUtil=%p", v2);
  OUTLINED_FUNCTION_3();
}

void _VCAudioIssueDetectorUtilDeInit_cold_1()
{
  NSObject *v0;
  uint8_t v1[14];
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "_VCAudioIssueDetectorUtilDeInit";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_11(&dword_1D8A54000, v0, (uint64_t)v0, " [%s] %s:%d Invalid parameter issueDetectorUtil=%p", v1);
  OUTLINED_FUNCTION_3();
}

void _VCAudioIssueDetectorUtil_ReportCallEndStatsIfNeeded_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate reporting dictionary", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioIssueDetectorUtil_ReportCallEndStatsIfNeeded_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate reporting dictionary", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioIssueDetectorUtil_ReportCallEndStatsIfNeeded_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate bitRate string for top1 index", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioIssueDetectorUtil_ReportCallEndStatsIfNeeded_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate bitRate string for top2 index", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioIssueDetectorUtil_ReportCallEndStatsIfNeeded_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate bitRate string for top3 index", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioIssueDetectorUtil_EnqueueDistortion_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Event logging enqueue failed for event=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCAudioIssueDetectorUtil_ReportDistortionRadioHistogram_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate reporting dictionary", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioIssueDetectorUtil_AddHistogramEntryToDict_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate histogram array", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_SetupSFrameCryptors_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VideoTransmitter_CreateHandle failed to allocate encoded block buffer data allocator", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_SetupSFrameCryptors_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VideoTransmitter_CreateHandle failed to allocate encoded block buffer header allocator", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_SetupSFrameCryptors_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoTransmitter_SetupSFrameCryptors";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCSFrameCryptorH264_Create failed with error:%d", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_SetupSFrameCryptors" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_SetupSFrameCryptors_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VideoTransmitter_SetupSFrameCryptor Failed! Payload is not H264 %d while sframe cryptor is valid", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_CreateHandle_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d pVT is nil!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_CreateHandle_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate memory!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_CreateHandle_cold_3()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[34];
  __int16 v3;
  int v4;

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  v3 = v0;
  v4 = 9;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d VideoTransmitter_CreateHandle Failed! Input substream count is %d, which is greather than the max %d", v2, 0x28u);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_CreateHandle_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Video Transmitter mode is not set.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_CreateHandle_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d featureListString is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_CreateHandle_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create handle: hVT", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_CreateHandle_cold_7()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoTransmitter_CreateHandle";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCFECGenerator_Create failed (%x)", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_CreateHandle" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_CreateHandle_cold_8()
{
  os_log_t v0;
  uint8_t v1[14];
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "_VideoTransmitter_SetupLogFiles";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  _os_log_error_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d VideoTransmitter[%p]: failed to open capture_statistics.log", v1, 0x26u);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_CreateHandle_cold_9()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d failed to open out_frame.txt", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_CreateHandle_cold_10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d failed to open out_pkt.txt", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_CreateHandle_cold_11()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoTransmitter_CreateHandle";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCSimpleQueueSetWillDestroyElementCallback failed (%x)", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_CreateHandle" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_CreateHandle_cold_12()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoTransmitter_CreateHandle";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCSimpleQueueSetElementEvictedCallback failed (%x)", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_CreateHandle" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_CreateHandle_cold_13()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCRealTimeThread_Initialize for video encoder thread FAILED", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_CreateHandle_cold_14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d dispatch_semaphore_create failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_CreateHandle_cold_15()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoTransmitter_CreateHandle";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCSimpleQueueCreate failed (%x)", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_CreateHandle" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_CreateHandle_cold_16()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoTransmitter_SetupTransmitQueue";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Retrieving preferred transmit queue from transport has failed %x", v2, *(const char **)v3, (unint64_t)"_VideoTransmitter_SetupTransmitQueue" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_CreateHandle_cold_17()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VideoTransmitter_CreateHandle input MTU was 0. File radar! Overriden to %d ", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_CreateHandle_cold_18()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoTransmitter_CreateHandle";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create packet allocator: %d", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_CreateHandle" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_CreateHandle_cold_19()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Tiles per frame is not set to a valid number %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_CreateHandle_cold_20()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[14];
  const char *v4;
  int v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v4 = "VideoTransmitter_CreateHandle";
  OUTLINED_FUNCTION_4();
  v5 = 1487;
  v6 = v0;
  v7 = -2145517565;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v1, v2, " [%s] %s:%d VideoTransmitter_SetupSFrameCryptors failed with error:%d", v3);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_CreateHandle_cold_21()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoTransmitter_CreateHandle";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VideoTransmitter_CreateHandle Failed! Failed to get local SSRC with error %d", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_CreateHandle" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_CreateHandle_cold_22()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoTransmitter_CreateHandle";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VideoTransmitter_CreateHandle Failed! Failed to create summer handle with error %d", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_CreateHandle" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_CreateHandle_cold_23()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoTransmitter_CreateHandle";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VideoTransmitter_CreateHandle Failed! Failed to create summer handle for media bytes with error %d", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_CreateHandle" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_CreateHandle_cold_24()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoTransmitter_CreateHandle";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VideoTransmitter_CreateHandle Failed! Failed to create summer handle for header bytes with error %d", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_CreateHandle" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_CreateHandle_cold_25()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoTransmitter_CreateHandle";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VideoTransmitter_CreateHandle Failed! Failed to create summer handle for FEC bytes with error %d", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_CreateHandle" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_CreateHandle_cold_26()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoTransmitter_CreateHandle";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VideoTransmitter_CreateHandle Failed! Failed to create summer handle for metadata bytes with error=%d", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_CreateHandle" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_CreateHandle_cold_27()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoTransmitter_CreateHandle";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VideoTransmitter_CreateHandle Failed! Failed to set NACK consumer in RTP result=%d", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_CreateHandle" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_CreateHandle_cold_28()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoTransmitter_CreateHandle";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VideoTransmitter_CreateHandle Failed! Failed to create NACK consumer result=%d", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_CreateHandle" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_UpdateEncoderBitrate_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate bitRate array", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_UpdateEncoderBitrate_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create bitRate value", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_EncodeVideo_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL VideoTransmitter pointer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_EncodeVideo_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL VideoTransmitter encoded pixelBuffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_EncodeVideo_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Ignoring video frame, audio not ready", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_EncodeVideo_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoTransmitter_EncodeVideo";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d EncEncodeFrame failed (%x)", v2, *(const char **)v3, (unint64_t)"_VideoTransmitter_EncodeVideo" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_EncodeVideo_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d Encode frame with RTP timestamp %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_EncodeVideo_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoTransmitter_EncodeVideo";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Ignoring video frame. UpdateRateControlStatus failed (%x)", v2, *(const char **)v3, (unint64_t)"_VideoTransmitter_EncodeVideo" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_UpdateRateControlStatus_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Stopping Video!!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_PrepareAndSetupEncodingArgs_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d generate fake frame now, size %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_CheckStatusAndHandleError_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoTransmitter_CheckStatusAndHandleError";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d encoder callback error %d", v2, *(const char **)v3, (unint64_t)"_VideoTransmitter_CheckStatusAndHandleError" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_TransmitFrame_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoTransmitter_TransmitFrame";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d _VideoTransmitter_TransmitEncodedData failed (%x)", v2, *(const char **)v3, (unint64_t)"_VideoTransmitter_TransmitFrame" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_TransmitEncodedVideoFrame_cold_1()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[14];
  const char *v4;
  int v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v4 = "_VideoTransmitter_TransmitEncodedVideoFrame";
  OUTLINED_FUNCTION_4();
  v5 = 4953;
  v6 = v0;
  v7 = -207;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v1, v2, " [%s] %s:%d Failed to allocate encoder buffer with error %d", v3);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_TransmitEncodedVideoFrame_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid transmitter stream", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_TransmitEncodedVideoFrame_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d  VideoTransmitter_Transmit ISSUING IDR... silently dropping encoded frame...", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_TransmitEncodedVideoFrame_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoTransmitter_PacketizeAndTransmitEncodedVideoFrame";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d  VTU_SplitVideoIntoPackets failed with iNumPackets %d ", v2, *(const char **)v3, (unint64_t)"_VideoTransmitter_PacketizeAndTransmitEncodedVideoFrame" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_TransmitEncodedVideoFrame_cold_5()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  const char *v3;
  const char *v4;
  int v5;
  const char *v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_9();
  LODWORD(v6) = 1913;
  WORD2(v6) = v0;
  HIWORD(v6) = v1;
  OUTLINED_FUNCTION_7_4(&dword_1D8A54000, v1, v2, " [%s] %s:%d szMsg = %s", v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_TransmitEncodedVideoFrame_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d [Media Priority] Sending video priority=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_TransmitEncodedVideoFrame_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to encrypt encoded buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_TransmitEncodedVideoFrame_cold_8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCPCompressionSession Error: Encoder returned a NULL frame", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_TransmitEncodedVideoFrame_cold_9()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Encoder did not set tile ID on frame", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_TransmitEncodedVideoFrame_cold_10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Encoder did not set decoding order on frame", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_TransmitEncodedVideoFrame_cold_11()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unable to retrieve the block buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_DispatchEncoderCallback_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Could not check in hVT handle. Encoded video sample buffer will be dropped.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_DispatchEncoderCallback_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Encoder callback returned a nil sample buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_DispatchEncoderCallback_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Encoder callback returned an empty sample buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_DequeueEncoderError_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoTransmitter_DequeueEncoderError";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d disconnecting call for error (%x)", v2, *(const char **)v3, (unint64_t)"_VideoTransmitter_DequeueEncoderError" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_EnqueueBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Ignoring video frame, does not match capture rule frame size/resolution", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_EnqueueBuffer_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoTransmitter_EnqueueBuffer";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Enqueue failed %x", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_EnqueueBuffer" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_HandleUncompressedVideo_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Could not check in hVT handle. Encoded video sample buffer will be dropped.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_EncoderProc_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Dequeued buffer was nil!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_EncoderProc_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Dequeued sample buffer was nil!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_TransmitVideoPacketsWithFecVersion2_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoTransmitter_TransmitVideoPacketsWithFecVersion2";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCFECGenerator_PushPacket failed! resultFECGenerator=%d", v2, *(const char **)v3, (unint64_t)"_VideoTransmitter_TransmitVideoPacketsWithFecVersion2" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_TransmitVideoPacketsWithFecVersion2_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VideoTransmitter_PushPacketsAndEncodeWithFECVersion2";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCFECGenerator_SetFixedFECLevel failed! newFecLevel=%d", v2, *(const char **)v3, (unint64_t)"_VideoTransmitter_PushPacketsAndEncodeWithFECVersion2" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_UpdateEncoderArgsAndGetStream_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCRC scheduling probing sequence returned error", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_EncryptFrame_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CMBlockBufferRef passed in NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_EncryptFrame_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Encrypted buffer is not contiguous", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_EncryptFrame_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CMBlockBufferGetDataPointer failed for encryptedBuffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_EncryptFrame_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to encrypt SFrame for packetization", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_EncryptFrame_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate encoded data block buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_GetBitrates_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to compute media bitrate", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_GetBitrates_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to compute header bitrate", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_GetBitrates_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to compute fec bitrate", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_GetBitrates_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to compute metadata bitrate", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_GetBitrates_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to compute total bitrate", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_GenerateKeyFrameNow_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoTransmitter_GenerateKeyFrameNow";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VideoTransmitter_GenerateKeyFrameNow returned error:%d", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_GenerateKeyFrameNow" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_RetransmitPackets_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoTransmitter_RetransmitPackets";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_7_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d VideoTransmitter[%p] NACK Consumer is NULL", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_RetransmitPackets" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_ACKLTRFrame_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoTransmitter_ACKLTRFrame";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d Received LTR ACK timestamp=%d", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_ACKLTRFrame" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_SetFECRatio_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d invalid parameter!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_SetPacketExpirationTime_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoTransmitter_SetPacketExpirationTime";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_15_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Setting expiration time (remote jitter size) with %d ms, below the min %d ms", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_SetPacketExpirationTime" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_SetPacketExpirationTime_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoTransmitter_SetPacketExpirationTime";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_15_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Setting expiration time (remote jitter size) with %d ms, above the max %d ms", v2, *(const char **)v3, (unint64_t)"VideoTransmitter_SetPacketExpirationTime" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VideoTransmitter_SetStreamIDs_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d invalid parameter!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VideoTransmitter_GetStreamIndexFromAttachment_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Tile index attachment is missing", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaRecorder_UpdateTargetScreenAttributes_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d object can't be null", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioRedBuilder_SplitRedAudioPacket_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioRedBuilder [%s] %s:%d RED payload invalid. Buffer is too small", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioRedBuilder_SplitRedAudioPacket_cold_2()
{
  os_log_t v0;
  uint8_t v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  _os_log_debug_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_DEBUG, "VCAudioRedBuilder [%s] %s:%d redundant payloads count:%d", v1, 0x22u);
  OUTLINED_FUNCTION_3();
}

void VCAudioRedBuilder_SplitRedAudioPacket_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioRedBuilder [%s] %s:%d Invalid RED header. Abort and drop this packet.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioRedBuilder_SplitRedAudioPacket_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioRedBuilder [%s] %s:%d Invalid RED header", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioRedBuilder_UpdateAudioPacketWithRedPayload_cold_1(uint64_t a1, uint64_t a2, NSObject *a3)
{
  _BYTE v3[22];

  *(_DWORD *)v3 = 136315906;
  *(_QWORD *)&v3[4] = a1;
  *(_WORD *)&v3[12] = 2080;
  *(_QWORD *)&v3[14] = "VCAudioRedBuilder_UpdateAudioPacketWithRedPayload";
  OUTLINED_FUNCTION_5(&dword_1D8A54000, a2, a3, "VCAudioRedBuilder [%s] %s:%d Bad packet large redPayload bufferLength:%d", *(const char **)v3, *(const char **)&v3[8], (unint64_t)"VCAudioRedBuilder_UpdateAudioPacketWithRedPayload" >> 16, 748);
  OUTLINED_FUNCTION_3();
}

void VTU_MoveAndInsertData_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed at VTU_MoveAndInsertData! Not enought buffer size", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTU_ReallocPktsInfo_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to reallocate line offsets array", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTU_ReallocPktsInfo_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to reallocate line sizes array", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTU_ReallocPktsInfo_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to reallocate packet flags array", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTU_ReallocPktsInfo_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to reallocate packet sizes array", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTU_ReallocPktsInfo_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to compute the new max packet count", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTU_ReallocPktsInfo_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VTU_GenerateNewMaxPacketCount";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d _VTU_GenerateNewPacketCount requested %d exceeds the MAX pkts %d. ", v2, *(const char **)v3, (unint64_t)"_VTU_GenerateNewMaxPacketCount" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VTU_ReallocateBuffer_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[14];
  const char *v3;
  int v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "_VTU_ReallocateBuffer";
  OUTLINED_FUNCTION_4();
  v4 = 1145;
  v5 = 2048;
  v6 = v0;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d _VTU_ReallocateBuffer failed to re-allocate %zu bytes", v2, 0x26u);
  OUTLINED_FUNCTION_3();
}

void _VTU_AllocateVPList_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "_VTU_AllocateVPList";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoTransmitterUtils.c:%d: Failed to allocate entry", v2);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitVideoIntoPackets_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unexpected frame with zero data length!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitVideoIntoPackets_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Skip the frame since we failed to prepare the last fragement", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitVideoIntoPackets_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Skip the frame since we failed to prepare the middle fragement", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitVideoIntoPackets_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VTU_PrepareHEVCFrameData";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoTransmitterUtils.c:%d: Allocation of %d bytes failed", v2, *(const char **)v3, (unint64_t)"VTU_PrepareHEVCFrameData" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitVideoIntoPackets_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed at VTU_ReallocPktsInfo!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitVideoIntoPackets_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Skip the frame since we failed to prepare the middle fragement", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitVideoIntoPackets_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Skip the frame since we failed to prepare the last fragement", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitVideoIntoPackets_cold_8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "VTU_PrepareHEVCFrameData";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoTransmitterUtils.c:%d: calloc %d bytes failed", v2);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitVideoIntoPackets_cold_9()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unexpected frame with zero data length!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitVideoIntoPackets_cold_10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Skip the frame since we failed to prepare the last fragement", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitVideoIntoPackets_cold_11()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Skip the frame since we failed to prepare the middle fragement", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitVideoIntoPackets_cold_12()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VTU_PrepareH264FrameData";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoTransmitterUtils.c:%d: malloc %d bytes failed", v2, *(const char **)v3, (unint64_t)"VTU_PrepareH264FrameData" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitVideoIntoPackets_cold_13()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed at VTU_ReallocPktsInfo!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitVideoIntoPackets_cold_14()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Skip the frame since we failed to prepare the middle fragement", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitVideoIntoPackets_cold_15()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Skip the frame since we failed to prepare the last fragement", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitVideoIntoPackets_cold_16()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "VTU_PrepareH264FrameData";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_12_5();
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoTransmitterUtils.c:%d: calloc %d bytes failed", v2);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitVideoIntoPackets_cold_17()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VTU_SplitVideoIntoPackets";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d Exceeded max GOB count (%d > %d)!", v2, *(const char **)v3, (unint64_t)"VTU_SplitVideoIntoPackets" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitVideoIntoPackets_cold_18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate buffer!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitVideoIntoPackets_cold_19()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[14];
  const char *v4;
  int v5;
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v4 = "VTU_SplitVideoIntoPackets";
  OUTLINED_FUNCTION_4();
  v5 = 1391;
  v6 = v0;
  v7 = 1391;
  v8 = v0;
  v9 = 50;
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, v1, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoTransmitterUtils.c:%d: Max number of GOBs reached (%d), discarded.", v3);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitVideoIntoPackets_cold_20()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VTU_SplitVideoIntoPackets";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoTransmitterUtils.c:%d: Invalid slice length (%d), discarded.", v2, *(const char **)v3, (unint64_t)"VTU_SplitVideoIntoPackets" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitVideoIntoPackets_cold_21()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Too many slices in packet", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitGenericDataIntoPackets_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "VTU_SplitGenericDataIntoPackets";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_11_6();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to generate the RTP packet. ret=%d", v2);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitGenericDataIntoPackets_cold_2()
{
  NSObject *v0;
  uint8_t v1[14];
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "_VTU_PrepareGenericFrameData";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, " [%s] %s:%d Invalid output data length. len=%d", v1);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitGenericDataIntoPackets_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "_VTU_PrepareGenericFrameData";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_11_6();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to add on VPList entry. status=%d", v2);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitGenericDataIntoPackets_cold_4()
{
  NSObject *v0;
  uint8_t v1[14];
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "_VTU_PrepareGenericFrameData";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, " [%s] %s:%d Allocation of %d bytes failed", v1);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitGenericDataIntoPackets_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to copy packet payloads", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitGenericDataIntoPackets_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed at VTU_ReallocPktsInfo!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitGenericDataIntoPackets_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "_VTU_PrepareGenericFrameData";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_11_6();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to generate the RTP header. status=%d", v2);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitGenericDataIntoPackets_cold_8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to pack the data", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTU_SplitGenericDataIntoPackets_cold_9()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "_VTU_AddOneVPListGeneric";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoTransmitterUtils.c:%d: Failed to allocate new entry", v2);
  OUTLINED_FUNCTION_3();
}

void AddOneVPList_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "AddOneVPList";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoTransmitterUtils.c:%d: Failed to allocate new entry", v2);
  OUTLINED_FUNCTION_3();
}

void PrepareLastHEVCFragment_cold_1()
{
  NSObject *v0;
  uint8_t v1[14];
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "PrepareLastHEVCFragment";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, " [%s] %s:%d Found out-of-bound data length %d", v1);
  OUTLINED_FUNCTION_3();
}

void PrepareLastH264Fragment_cold_1()
{
  NSObject *v0;
  uint8_t v1[14];
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "PrepareLastH264Fragment";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, " [%s] %s:%d Found out-of-bound data length %d", v1);
  OUTLINED_FUNCTION_3();
}

void VCAudioLimiter_Allocate_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate audio limiter", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_3();
}

void VCAudioLimiter_Start_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Error AudioUnitInitialize voiceLimiterUnit %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioLimiter_Start_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to set the voiceLimiterUnit input gain %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioLimiter_Start_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to set the voiceLimiterUnit lookahead %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioLimiter_Start_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to set the voiceLimiterUnit fast gain release time %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioLimiter_Start_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to set the voiceLimiterUnit min fast gain %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioLimiter_Start_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to set the voiceLimiterUnit threshold db %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioLimiter_Start_cold_7()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Error AudioUnitSetProperty voiceLimiterUnit, kAudioUnitProperty_StreamFormat, kAudioUnitScope_Output %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioLimiter_Start_cold_8()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Error AudioUnitSetProperty voiceLimiterUnit, kAudioUnitProperty_StreamFormat, kAudioUnitScope_Input %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioLimiter_Start_cold_9()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Error AudioUnitSetProperty voiceLimiterUnit, kAudioUnitProperty_MaximumFramesPerSlice %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioLimiter_Start_cold_10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to start due to failing to get new instance", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_3();
}

void VCAudioLimiter_Process_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Error AudioUnitProcess voiceLimiterUnit %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_EnableBWELogDump_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_IsAudioOnly_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_SetAudioOnly_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_SetSenderProbingEnabled_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_SetAllowVideoStop_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_IsVideoStopped_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_IsVideoStoppedByVCRateControl_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_BasebandFlushCount_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_SetBasebandFlushCount_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_LastBasebandFlushCountChangeTime_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_SetLastBasebandFlushCountChangeTime_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_LastVideoKeyFrameTime_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_TrafficMetricsFromMediaQueueTxHistory_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_MediaQueueSettings_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_MediaQueueRateChangeCounter_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_ComputePacketLoss_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_UpdateBasebandSuggestion_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d wrong type of statistics message is processed by media controller", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_SetAudioFractionTier_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_StopVideoBySmartBrake_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_StopVideoByVCRateControl_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_ResumeVideoBySmartBrake_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_ResumeVideo_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_SetTargetBitrate_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_SetMinTargetBitrate_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_AudioSendingBitrate_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_SetAudioSendingBitrate_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_SetShouldDisableLargeFrameRequestsWhenInitialRampUp_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_SetRateLimitedMaxTimeExceeded_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_LastVideoRefreshFrameTime_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_AudioFractionTier_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlMediaController_RampDownAudioFraction_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d VCRateControlMediaController is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCConnection_PerPacketConnectionOverhead_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d instance should not be nil", v2, v3, v4, v5, 2u);
}

void VCConnection_GetDataMode_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d instance should not be nil", v2, v3, v4, v5, 2u);
}

void DLCreateHandle_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_10_3();
  v3 = 1032;
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Dialog.c:%d: calloc(%d) failed", v2);
  OUTLINED_FUNCTION_3();
}

void DLCreateHandle_cold_2()
{
  int v0;
  NSObject *v1;
  uint8_t v2[36];
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_10_3();
  v3 = v0;
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, v1, (uint64_t)v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Dialog.c:%d: MQCreateHandle failed(%08X)", v2);
  OUTLINED_FUNCTION_3();
}

void DLCreateHandle_cold_3()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[24];
  int v3;
  __int16 v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  v3 = 177;
  v4 = v0;
  v5 = 177;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Dialog.c:%d: CreateHandle failed", v2, 0x22u);
  OUTLINED_FUNCTION_3();
}

void MQCreateHandle_cold_1()
{
  os_log_t v0;
  uint8_t v1[14];
  const char *v2;
  __int16 v3;
  int v4;
  __int16 v5;
  int v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "MQCreateHandle";
  v3 = 1024;
  v4 = 34;
  v5 = 1024;
  v6 = 34;
  v7 = 1024;
  v8 = 280;
  _os_log_error_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/MsgQue.c:%d: calloc(%d) failed", v1, 0x28u);
}

void MQCreateHandle_cold_2()
{
  os_log_t v0;
  uint8_t v1[14];
  const char *v2;
  __int16 v3;
  int v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "MQCreateHandle";
  v3 = 1024;
  v4 = 44;
  v5 = 1024;
  v6 = 44;
  _os_log_error_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/MsgQue.c:%d: CreateHandle failed", v1, 0x22u);
}

void _VCRateControlAlogirthmLowLatencyNOWRD_DoRateControl_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];

  OUTLINED_FUNCTION_8_0();
  *(_QWORD *)&v3[6] = "_VCRateControlAlogirthmLowLatencyNOWRD_DoRateControl";
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d This algorithm does not support statistics type:%d to do rate control", v2, *(const char **)v3, (unint64_t)"_VCRateControlAlogirthmLowLatencyNOWRD_DoRateControl" >> 16, 173);
  OUTLINED_FUNCTION_3();
}

void _VCRateControlAlogirthmLowLatencyNOWRD_DoRateControl_cold_2(uint64_t a1, int a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = 136315906;
  v4 = a1;
  v5 = 2080;
  v6 = "_VCRateControlAlogirthmLowLatencyNOWRD_DoRateControlWithVCRCStatistics";
  v7 = 1024;
  v8 = 207;
  v9 = 1024;
  v10 = a2;
  _os_log_debug_impl(&dword_1D8A54000, log, OS_LOG_TYPE_DEBUG, "VCRC [%s] %s:%d Duplicated feedback or out-of-order feedback messages! timestamp:0x%04X", (uint8_t *)&v3, 0x22u);
  OUTLINED_FUNCTION_3();
}

void _VCRateControlAlogirthmLowLatencyNOWRD_DoRateControl_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];

  OUTLINED_FUNCTION_8_0();
  *(_QWORD *)&v3[6] = "_VCRateControlAlogirthmLowLatencyNOWRD_DoRateControlWithVCRCStatistics";
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Unknown VCRateControl state %d", v2, *(const char **)v3, (unint64_t)"_VCRateControlAlogirthmLowLatencyNOWRD_DoRateControlWithVCRCStatistics" >> 16, 253);
  OUTLINED_FUNCTION_3();
}

void VCImageConverterBase_CreateConvertedSampleBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Input sample buffer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCImageConverterBase_CreateConvertedSampleBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Input pixel buffer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCImageConverterBase_CreateConvertedSampleBuffer_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d newPixelBuffer iS NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCImageConverterBase_CreateConvertedSampleBuffer_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Sample buffer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioCaptionsCoordinator_StartCaptioning_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Waiting for captions to start...", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioCaptionsCoordinator_StopCaptioning_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Waiting for captions to stop...", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioCaptionsCoordinator_HandleStartedStateAudioSamples_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Could not stop captioning.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioCaptionsCoordinator_setOneToOneVoicePriority_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Not running voice detector", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioCaptionsCoordinator_setOneToOneVoicePriority_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Running sample through voice detector", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioCaptionsCoordinator_PushAudioSamples_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  uint64_t v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCAudioCaptionsCoordinator_PushAudioSamples";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Attempted to push audio samples to an unregistered token. Token=%ld", v2, *(const char **)v3, (unint64_t)"VCAudioCaptionsCoordinator_PushAudioSamples" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCAudioCaptionsCoordinator_PushAudioSamples_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCAudioCaptionsCoordinator_EnqueueSecondarySamples";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_7_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d [%p] Failed to allocate the secondary sample buffer info", v2, *(const char **)v3, (unint64_t)"_VCAudioCaptionsCoordinator_EnqueueSecondarySamples" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCAudioCaptionsCoordinator_PushAudioSamples_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCAudioCaptionsCoordinator_EnqueueSecondarySamples";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_7_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d [%p] Failed to enqueue the samples", v2, *(const char **)v3, (unint64_t)"_VCAudioCaptionsCoordinator_EnqueueSecondarySamples" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCAudioCaptionsCoordinator_PushAudioSamples_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCAudioCaptionsCoordinator_EnqueueSecondarySamples";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_7_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d [%p] Failed to copy the samples", v2, *(const char **)v3, (unint64_t)"_VCAudioCaptionsCoordinator_EnqueueSecondarySamples" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfoGeneratorCreateControlInfo_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  v4 = 2080;
  v5 = "VCMediaControlInfoGeneratorCreateControlInfo";
  v6 = 1024;
  v7 = 109;
  _os_log_error_impl(&dword_1D8A54000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Generator is nil", (uint8_t *)&v2, 0x1Cu);
}

void VCMediaControlInfoGeneratorCreateControlInfoWithBuffer_cold_1(uint64_t a1, int *a2, os_log_t log)
{
  int v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = 136315906;
  v5 = a1;
  v6 = 2080;
  v7 = "_VCMediaControlInfo_CreateControlInfo";
  v8 = 1024;
  v9 = 214;
  v10 = 1024;
  v11 = v3;
  _os_log_error_impl(&dword_1D8A54000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid VCMediaControlInfoGeneratorType: %d", (uint8_t *)&v4, 0x22u);
}

void ParseMessage_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = 136316162;
  v3 = a1;
  v4 = 2080;
  v5 = "ParseMessage";
  v6 = 1024;
  v7 = 144;
  v8 = 1024;
  v9 = 144;
  v10 = 1024;
  v11 = 1024;
  _os_log_error_impl(&dword_1D8A54000, a2, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipParse.c:%d: calloc(%d) failed", (uint8_t *)&v2, 0x28u);
}

void _VCJBTargetEstimatorSynchronizer_Configure_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d policy = %d out of valid range", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCJBTargetEstimatorSynchronizer_Create_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL newInstance", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCJBTargetEstimatorSynchronizer_Create_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL config", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCJBTargetEstimatorSynchronizer_Create_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d allocate failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCJBTargetEstimatorSynchronizer_Create_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid configuration", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCJBTargetEstimatorSynchronizer_RegisterClient_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCJBTargetEstimatorSynchronizer_SetPolicy_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCJBTargetEstimatorSynchronizer_GetSyncTarget_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCJBTargetEstimatorSynchronizer_GetSyncTarget_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Error in storing current size", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCJBTargetEstimatorSynchronizer_GetSyncTarget_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Error while applying policy", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCJBTargetEstimatorSynchronizer_GetSyncTarget_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid Policy policy=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void decoderFrameCallback_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "decoderFrameCallback";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d frame decode error %d", v2, *(const char **)v3, (unint64_t)"decoderFrameCallback" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCSessionParticipantRemote_AddMetaDataToSpatialAudioSourceID_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCSessionParticipantRemote [%s] %s:%d dictionary is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSessionParticipantRemote_AddMetaDataToSpatialAudioSourceID_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCSessionParticipantRemote [%s] %s:%d mediaType is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSessionParticipantRemote_AddMetaDataToSpatialAudioSourceID_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCSessionParticipantRemote [%s] %s:%d metadataEntry is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSessionParticipantRemote_AddMetaDataToSpatialAudioSourceID_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCSessionParticipantRemote_AddMetaDataToSpatialAudioSourceID";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCSessionParticipantRemote [%s] %s:%d Failed to retrieve spatial audio source ID. status=%08x", v2, *(const char **)v3, (unint64_t)"_VCSessionParticipantRemote_AddMetaDataToSpatialAudioSourceID" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCSessionParticipantRemote_AddMetaDataToSpatialAudioSourceID_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCSessionParticipantRemote [%s] %s:%d Failed to retrieve the media type", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAllocatorMultiQueue_Create_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Queue configuration count is 0", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAllocatorMultiQueue_Create_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Configuration queues pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAllocatorMultiQueue_Create_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Allocator out pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAllocatorMultiQueue_Create_cold_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_8_12();
  FourccToCStr(1852663149);
  OUTLINED_FUNCTION_6_9();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4_5();
  OUTLINED_FUNCTION_3_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d Allocator[%s] Failed to create allocator info: %s", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_9_1();
}

void VCAllocatorMultiQueue_Create_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate allocator info", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAllocatorMultiQueue_Create_cold_6()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_8_12();
  FourccToCStr(0);
  OUTLINED_FUNCTION_6_9();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4_5();
  OUTLINED_FUNCTION_3_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d Allocator[%s] Failed to create allocator info: %s", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_9_1();
}

void VCAllocatorMultiQueue_Create_cold_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_8_12();
  FourccToCStr(1936683620);
  OUTLINED_FUNCTION_6_9();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_4_5();
  OUTLINED_FUNCTION_3_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d Allocator[%s] Failed to create allocator info: %s", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_9_1();
}

void VCAllocatorMultiQueue_Create_cold_8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate allocator context", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAllocatorMultiQueue_Create_cold_9()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Settings entries not ordered by buffer size", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPSetMessageDelegateForCallID_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SIPSetMessageDelegateForCallID: Invalid SIP Handle", v2);
  OUTLINED_FUNCTION_3();
}

void SIPSetCellConditionChangeHandler_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SIPSetCellConditionChangeHandler: Invalid SIP Handle", v2);
  OUTLINED_FUNCTION_3();
}

void SIPCreateHandle_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: fpAppCallback is NULL", v2);
  OUTLINED_FUNCTION_3();
}

void SIPCreateHandle_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: Bad Transport Protocol(%d)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPCreateHandle_cold_3()
{
  os_log_t v0;
  uint8_t v1[36];
  int v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_10_3();
  v2 = 144;
  _os_log_error_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: calloc(%d) failed", v1, 0x28u);
  OUTLINED_FUNCTION_3();
}

void SIPCreateHandle_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: CreateHandle failed", v2);
  OUTLINED_FUNCTION_3();
}

void SIPCreateHandle_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TPCreateHandle failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TUMsgCallback_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: pthread_create failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPSetPacketMultiplexMode_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d Invalid SIP packet multiplex mode", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_3();
}

void SIPStartListen_cold_1()
{
  NSObject *v0;
  uint8_t v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, "SIP [%s] %s:%d invalid SIP transport type %d", v1);
  OUTLINED_FUNCTION_3();
}

void SIPStartListen_cold_2()
{
  NSObject *v0;
  uint8_t v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, "SIP [%s] %s:%d SIPListenOnPhysicalInterface failed with error %08X", v1);
  OUTLINED_FUNCTION_3();
}

void SIPStartListen_cold_3()
{
  NSObject *v0;
  uint8_t v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, "SIP [%s] %s:%d SIPListenOnVirtualInterface failed with error %08X", v1);
  OUTLINED_FUNCTION_3();
}

void SIPStopListen_cold_1()
{
  NSObject *v0;
  uint8_t v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, "SIP [%s] %s:%d invalid SIP transport type %d", v1);
  OUTLINED_FUNCTION_3();
}

void SIPStopListen_cold_2()
{
  NSObject *v0;
  uint8_t v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, "SIP [%s] %s:%d SIPStopListenOnInterface(Physical) failed with error %08X", v1);
  OUTLINED_FUNCTION_3();
}

void SIPStopListen_cold_3()
{
  NSObject *v0;
  uint8_t v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, "SIP [%s] %s:%d SIPStopListenOnInterface(Virtual) failed with error %08X", v1);
  OUTLINED_FUNCTION_3();
}

void SIPConnectIPPort_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: DLCountActiveDialogs(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPConnectIPPort_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: CreateInvite failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPConnectIPPort_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: DLCreateHandle failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPConnectIPPort_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TACreateHandle failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPConnectIPPort_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TAStart failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPConnectIPPort_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: DLGetMsg failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPConnectIPPort_cold_7()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: CreateCancel failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPConnectIPPort_cold_8()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TACreateHandle failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPConnectIPPort_cold_9()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TAStart failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPConnectIPPort_cold_10()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: CreateAck failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPConnectIPPort_cold_11()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TPSend failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPDoKeyExchange_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: CreateSKEMessageInDialog failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPDoKeyExchange_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TACreateHandle failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPDoKeyExchange_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TASetRetransmitTimeoutCap failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPDoKeyExchange_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TAStart failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPDoKeyExchange_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: DLGetMsg failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPDoKeyExchange_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: DLGetMsg returned NULL message", v2);
  OUTLINED_FUNCTION_3();
}

void SIPDoKeyExchange_cold_7()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SKEProc: oom: %d", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPDoKeyExchange_cold_8()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  *(_QWORD *)&v3[6] = "SIPDoKeyExchange";
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SKEProc: oom: %d", v2, *(const char **)v3, (unint64_t)"SIPDoKeyExchange" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void SIPDoKeyExchange_cold_9()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SKENodeCreateAsInitiator failed(%d)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPCancel_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: CreateCancel failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPCancel_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: DLPutMsg failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPHangupWithTimeout_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: CreateBye failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPHangupWithTimeout_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TACreateHandle failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPHangupWithTimeout_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TAStart failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPHangupWithTimeout_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: DLGetMsg failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPSendMessage_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: CreateMessageInDialog failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPSendMessage_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TACreateHandle failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPSendMessage_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TAStart failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPSendMessage_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: DLGetMsg failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPSendMessageAll_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: DLGetMsg failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPSendMessageAll_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: CreateMessageInDialog failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPSendMessageAll_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TACreateHandle failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPSendMessageAll_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TAStart failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPNewCallProc_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: Invalid SIP Handle", v2);
  OUTLINED_FUNCTION_3();
}

void SIPNewCallProc_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: DLCreateHandle failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPNewCallProc_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TACreateHandle failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPNewCallProc_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TAStart failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPNewCallProc_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SendTAStatus failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPNewCallProc_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SendTAStatus failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPNewCallProc_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d SIPNewCallProc: SIPGETCALLEECALLID result == DENIED: Declining SIP INVITE", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_3();
}

void SIPCancelProc_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: Invalid SIP Handle", v2);
  OUTLINED_FUNCTION_3();
}

void SIPCancelProc_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TACreateHandle failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPCancelProc_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TAStart failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPHangupProc_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: Invalid SIP Handle", v2);
  OUTLINED_FUNCTION_3();
}

void SIPHangupProc_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TACreateHandle failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPHangupProc_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TAStart failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPHangupProc_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: DLUnlock: failed to unlock also.", v2);
  OUTLINED_FUNCTION_3();
}

void SIPHangupProc_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: DLUnlock: failed to unlock.", v2);
  OUTLINED_FUNCTION_3();
}

void SIPKeyExchangeProc_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: Invalid SIP Handle", v2);
  OUTLINED_FUNCTION_3();
}

void SIPKeyExchangeProc_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: DLGetMsg failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPKeyExchangeProc_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SKEProc: DLGetMsg returned null", v2);
  OUTLINED_FUNCTION_3();
}

void SIPKeyExchangeProc_cold_4()
{
  int v0;
  __int16 v1;
  os_log_t v2;
  uint8_t v3[36];
  int v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_10_3();
  v4 = v0;
  v5 = v1;
  v6 = 6;
  _os_log_error_impl(&dword_1D8A54000, v2, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SKEProc: seq %d > %d", v3, 0x2Eu);
}

void SIPKeyExchangeProc_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TACreateHandle failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPKeyExchangeProc_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TAStart failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPKeyExchangeProc_cold_7()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TACreateHandle failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPKeyExchangeProc_cold_8()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TAStart failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPKeyExchangeProc_cold_9()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SKENodeCreateAsResponder (%d)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPKeyExchangeProc_cold_10()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SKEProc: oom: %d", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPKeyExchangeProc_cold_11()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  *(_QWORD *)&v3[6] = "SIPKeyExchangeProc";
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SKEProc: oom: %d", v2, *(const char **)v3, (unint64_t)"SIPKeyExchangeProc" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void SIPMessageProc_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: Invalid SIP Handle", v2);
  OUTLINED_FUNCTION_3();
}

void SIPMessageProc_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TACreateHandle failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SIPMessageProc_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: TAStart failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SendTPStatus_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: CreateStatus failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SendTAStatusGeneric_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: CreateGenericStatus failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SKE_FormMessageS_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SKEProc: oom: %d", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SKE_FormMessageS_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SIP.c:%d: SKEProc: oom: %d", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCaptionsEncoder_Encode_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unable to write header. Error=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCCaptionsEncoder_Encode_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unable to encode segment. Error=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCCaptionsEncoder_Encode_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unable to write header. Error=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCCaptionsEncoder_Encode_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unable to write header. Error=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCCaptionsEncoder_Encode_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unable to write header. Error=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCCaptionsEncoder_Encode_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to read value at index=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCDisplayLinkRunLoopObserverCallBack_cold_1()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  uint8_t v3[12];
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  v4 = v0;
  v5 = "_VCDisplayLinkRunLoopObserverCallBack";
  v6 = 1024;
  v7 = 251;
  v8 = 2048;
  v9 = v1;
  _os_log_error_impl(&dword_1D8A54000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Unexpected acitivity %lu", v3, 0x26u);
  OUTLINED_FUNCTION_3();
}

void VCStreamOutput_EnqueueAttributes_cold_1()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  const char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  v3 = v0;
  v4 = "VCStreamOutput_EnqueueAttributes";
  v5 = 1024;
  v6 = 130;
  v7 = 2048;
  v8 = 0;
  v9 = 2048;
  v10 = 0;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid paramter. streamOutput=%p attributes=%p", v2, 0x30u);
}

void VCStreamOutput_EnqueueAttributes_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to enqueue attributes", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCStreamOutput_EnqueueSampleBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Could not create XPC dictionary from sample buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCStreamOutput_EnqueueSampleBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Client Terminated remote queue connection destroying remote queue", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void ParseAcceptHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_12_6();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void ParseAllowHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void ParseAllowEventsHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void ParseCallIDHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_15_4();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void ParseContactHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_14_5();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void ParseContentEncodingHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_6_10();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void ParseContentLengthHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_4_6();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void ParseContentTypeHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_6_10();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void ParseCSeqHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_5();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void ParseEventHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_10_3();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void ParseExpiresHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_4_6();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void ParseFromHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_13();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void ParseMaxForwardsHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_4_6();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void ParseMinExpiresHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_4_6();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void ParseReferToHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_10_3();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void ParseSubscriptionStateHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_5();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void ParseToHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_13();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void ParseUserAgentHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_11_7();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void ParseViaHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_10_8();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void ParseSKESeqHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_5();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void ParseXCallIDHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_4_6();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void ParseReasonHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_13_2();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: ParseReasonHdr calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateAcceptHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_12_6();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateAllowHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateAllowEventsHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7_8();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateCallIDHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_15_4();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateContactHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_14_5();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateContentEncodingHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_6_10();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateContentLengthHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_4_6();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateContentTypeHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_6_10();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateCSeqHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_5();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateExpiresHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_4_6();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateFromHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_13();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateMaxForwardsHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_4_6();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateMinExpiresHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_4_6();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateToHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_13();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateUserAgentHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_11_7();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateViaHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_10_8();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateSKESeqHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_5();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateReasonHdr_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_13_2();
  OUTLINED_FUNCTION_7_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: CreateReasonHdr: calloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CopySipHeader_cold_1()
{
  int v0;
  os_log_t v1;
  uint8_t v2[36];
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_10_3();
  v3 = v0;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipHdr.c:%d: malloc(%d) failed", v2, 0x28u);
  OUTLINED_FUNCTION_3();
}

void CreateInvite_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateCallIDHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateInvite_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateContactHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateInvite_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateContentLengthHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateInvite_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateContentTypeHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateInvite_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateCSeqHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateInvite_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateFromHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateInvite_cold_7()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateMaxForwardsHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateInvite_cold_8()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateToHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateInvite_cold_9()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateViaHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateInvite_cold_10()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateUserAgentHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateInvite_cold_11(uint64_t a1, char *__s, NSObject *a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = 136316162;
  v6 = a1;
  v7 = 2080;
  v8 = "CreateInvite";
  v9 = 1024;
  v10 = 448;
  v11 = 1024;
  v12 = 448;
  v13 = 1024;
  v14 = strlen(__s) + 1;
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, a3, v4, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: malloc(%d) failed", (uint8_t *)&v5);
}

void CreateGenericSIPMsg_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_6_11();
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: calloc(%d) failed", v2);
  OUTLINED_FUNCTION_3();
}

void CreateAck_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CopySipHeader failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateAck_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CopySipHeader failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateAck_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CopySipHeader failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateAck_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CopySipHeader failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateAck_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CopySipHeader failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateAck_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateUserAgentHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateAck_cold_7()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateContentLengthHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateAck_cold_8()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateMaxForwardsHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateCancel_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_6_11();
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: calloc(%d) failed", v2);
  OUTLINED_FUNCTION_3();
}

void CreateCancel_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CopySipHeader failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateCancel_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateCSeqHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateCancel_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CopySipHeader failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateCancel_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CopySipHeader failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateCancel_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CopySipHeader failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateCancel_cold_7()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateUserAgentHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateCancel_cold_8()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateContentLengthHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateCancel_cold_9()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateMaxForwardsHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateBye_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: DLGetData failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateBye_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateCallIDHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateBye_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateCSeqHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateBye_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateFromHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateBye_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateToHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateBye_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateViaHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateBye_cold_7()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateUserAgentHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateBye_cold_8()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateReasonHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateBye_cold_9()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateContentLengthHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateBye_cold_10()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateMaxForwardsHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateBinaryMessageInDialog_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: DLGetData failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateBinaryMessageInDialog_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateCallIDHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateBinaryMessageInDialog_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateCSeqHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateBinaryMessageInDialog_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateFromHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateBinaryMessageInDialog_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateToHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateBinaryMessageInDialog_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateViaHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateBinaryMessageInDialog_cold_7()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateUserAgentHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateBinaryMessageInDialog_cold_8()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateContentTypeHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateBinaryMessageInDialog_cold_9()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateContentLengthHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateBinaryMessageInDialog_cold_10()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateMaxForwardsHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateBinaryMessageInDialog_cold_11()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: malloc(%d) failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateSKEMessageInDialog_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateSKESeqHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateSKEMessageInDialog_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateContentTypeHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateGenericStatus_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CopySipHeader failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateGenericStatus_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CopySipHeader failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateGenericStatus_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CopySipHeader failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateGenericStatus_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CopySipHeader failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateGenericStatus_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CopySipHeader failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateGenericStatus_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateUserAgentHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateGenericStatus_cold_7()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateContentLengthHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateGenericStatus_cold_8()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateContactHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateGenericStatus_cold_9()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateContentTypeHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateGenericStatus_cold_10()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateContentTypeHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateGenericStatus_cold_11()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateAcceptHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateGenericStatus_cold_12()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateAllowHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateGenericStatus_cold_13()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateAllowEventsHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateGenericStatus_cold_14()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateExpiresHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateGenericStatus_cold_15()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateAllowEventsHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateGenericStatus_cold_16()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateMinExpires failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateGenericStatus_cold_17()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/SipMsg.c:%d: CreateAllowEventsHdr failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TACreateHandle_cold_1()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[24];
  int v3;
  __int16 v4;
  int v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  v3 = 79;
  v4 = v0;
  v5 = 79;
  v6 = v0;
  v7 = 224;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transaction.c:%d: calloc(%d) failed", v2, 0x28u);
  OUTLINED_FUNCTION_3();
}

void TASend_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transaction.c:%d: MQPut failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TACancel_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transaction.c:%d: CreateCancel failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TACancel_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transaction.c:%d: MQPut failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TAStart_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transaction.c:%d: pthread_create failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TAInviteClientProc_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transaction.c:%d: Invalid Transaction Handle", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TANonInviteClientProc_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transaction.c:%d: Invalid Transaction Handle", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TAInviteServerProc_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transaction.c:%d: Invalid Transaction Handle", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TANonInviteServerProc_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transaction.c:%d: Invalid Transaction Handle", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TAMsgCallback_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transaction.c:%d: MQPut failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCVideoReceiverDefault_SetExternalOutputLatency_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d videoReceiver is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void EncoderVTCreateHandle_cold_1(uint64_t a1, int *a2, os_log_t log)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = a2[1];
  v5 = 136316162;
  v6 = a1;
  v7 = 2080;
  v8 = "EncoderVTCreateHandle";
  v9 = 1024;
  v10 = 55;
  v11 = 1024;
  v12 = v3;
  v13 = 1024;
  v14 = v4;
  _os_log_error_impl(&dword_1D8A54000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid resolution %dx%d", (uint8_t *)&v5, 0x28u);
  OUTLINED_FUNCTION_3();
}

void EncoderVTCreateHandle_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate bitRate array", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void EncoderVTCreateHandle_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create bitRate value", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void EncoderVTCreateHandle_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "EncoderVTCreateHandle";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTCompressionSessionCreate failed (%d)", v2, *(const char **)v3, (unint64_t)"EncoderVTCreateHandle" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void EncoderVTSetBitRate_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d pEnc is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void EncoderVTSetBitRate_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "EncoderVTSetBitRate";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTCompressionSession set data rate limits property failed with %d", v2, *(const char **)v3, (unint64_t)"EncoderVTSetBitRate" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void EncoderVTSetBitRate_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "EncoderVTSetBitRate";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTCompressionSession set average bitrate property failed with %d", v2, *(const char **)v3, (unint64_t)"EncoderVTSetBitRate" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void EncoderVTEncodeFrame_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d pEnc is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void EncoderVTEncodeFrame_cold_2()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[14];
  const char *v4;
  int v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v4 = "EncoderVTEncodeFrame";
  OUTLINED_FUNCTION_4();
  v5 = 258;
  v6 = v0;
  v7 = 258;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v1, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCVideoEncoder_VT.c:%d: Encoder callback is NULL", v3);
  OUTLINED_FUNCTION_3();
}

void EncoderVTEncodeFrame_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTCompressionSession is not initialized", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void EncoderVTEncodeFrame_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "EncoderVTEncodeFrame";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTCompressionSessionEncodeFrame error: %d", v2, *(const char **)v3, (unint64_t)"EncoderVTEncodeFrame" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void EncoderVTEncodeFrame_cold_5()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[14];
  const char *v4;
  int v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v4 = "EncoderVTEncodeFrame";
  OUTLINED_FUNCTION_4();
  v5 = 271;
  v6 = v0;
  v7 = -12912;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v1, v2, " [%s] %s:%d VTCompressionSessionEncodeFrame error: %d, the system may run into a low memory state", v3);
  OUTLINED_FUNCTION_3();
}

void VCConnectionManager_SetPreWarmState_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d connectionManager must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCConnectionManager_SetActiveLinkProbingEnabled_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d connectionManager must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCConnectionManager_AlertStateUpdated_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d connectionManager must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCConnectionManager_ProcessWRMNotification_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d connectionManager must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCConnectionManager_ProcessWRMNotification_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d WRMNotification must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCConnectionManager_GetNumberOfConnectionsInternal_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d connectionManager must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCConnectionManager_CopyConnectionForQuality_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d connectionManager must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCConnectionManager_UpdateCellularExcessiveBytes_cold_1()
{
  NSObject *v0;
  uint8_t v1[14];
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "_VCConnectionManager_UpdateCellularExcessiveBytes";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, " [%s] %s:%d Failed to acquire the lock! status=%d", v1);
  OUTLINED_FUNCTION_3();
}

void _VCConnectionManagerNWConnectionStatisticsCallback_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Callback executed with context being nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCConnectionManagerNWConnectionStatisticsCallback_cold_2(uint64_t a1, uint64_t a2, NSObject *a3)
{
  _BYTE v3[22];
  __int128 v4;

  *(_DWORD *)v3 = 136315906;
  *(_QWORD *)&v3[4] = a1;
  *(_WORD *)&v3[12] = 2080;
  *(_QWORD *)&v3[14] = "_VCConnectionManagerNWConnectionStatisticsCallback";
  LODWORD(v4) = 1731;
  WORD2(v4) = 2048;
  *(_QWORD *)((char *)&v4 + 6) = *(_QWORD *)(a2 + 8);
  OUTLINED_FUNCTION_7_4(&dword_1D8A54000, a2, a3, " [%s] %s:%d VCNWConnectionNotification timestamp=%llu", *(const char **)v3, *(const char **)&v3[8], (unint64_t)"_VCConnectionManagerNWConnectionStatisticsCallback" >> 16, (_QWORD)v4);
  OUTLINED_FUNCTION_3();
}

void VCConnectionManager_DidUpdateNetworkCondition_cold_1()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[14];
  const char *v4;
  int v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v4 = "VCConnectionManager_DidUpdateNetworkCondition";
  OUTLINED_FUNCTION_4();
  v5 = 1821;
  v6 = v0;
  v7 = 1821;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v1, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/ConnectionManager/VCConnectionManager.m:%d: connectionManager must not be NULL", v3);
  OUTLINED_FUNCTION_3();
}

void _VCConnectionManager_CopyConnectionForQualityInternal_cold_1()
{
  NSObject *v0;
  uint8_t v1[14];
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "_VCConnectionManager_CopyConnectionForQualityInternal";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, " [%s] %s:%d VCConnectionManager: unrecognized connection quality: %d", v1);
  OUTLINED_FUNCTION_3();
}

void VCConnectionManager_CreatePacketRoutingInfoList_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d connectionManager must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCConnectionManager_CreatePacketRoutingInfoList_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate memory for packetRoutingInfoList", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCConnectionManager_CreatePacketRoutingInfoList_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate memory for packetRoutingInfoList", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCConnectionManager_CreatePacketRoutingInfoList_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d p2p link cannot be used for duplication", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCConnectionManager_CreatePacketRoutingInfoList_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d p2p link cannot be used as primary", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCConnectionManager_UpdateNetworkOutageStatus_cold_1()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[14];
  const char *v4;
  int v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v4 = "VCConnectionManager_UpdateNetworkOutageStatus";
  OUTLINED_FUNCTION_4();
  v5 = 3157;
  v6 = v0;
  v7 = 3157;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v1, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/ConnectionManager/VCConnectionManager.m:%d: VCCM: Invalid network outage detection event passed", v3);
  OUTLINED_FUNCTION_3();
}

void _VCConnectionManager_CreatePacketRoutingInfoListForConnection_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate memory for packetRoutingInfoListForConnection", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCConnectionManager_CreatePacketRoutingInfoListForConnection_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate memory for packetRoutingInfoListForConnection", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCConnectionManager_IsSourceOnCellularIPv6_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d invalid parameters", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCConnectionManager_UpdatePacketSendStatus_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d connectionManager must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCConnectionManager_UpdateOnTheWireBytesSentCount_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d connectionManager must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCConnectionManager_UpdateOnTheWireBytesReceivedCount_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d connectionManager must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCConnectionManager_SetWRMNotification_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d WRMNotification must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCImageQueue_setCALayerSize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCImageQueue.m:%d: Invalid CAContext", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCImageQueue_setCALayerSize_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCImageQueue.m:%d: Invalid CALayer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCImageQueue_EnqueueFrame_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create sample buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCImageQueue_EnqueuePixelBuffer_cold_1(uint64_t a1, uint64_t *a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = 136315906;
  v5 = a1;
  v6 = 2080;
  v7 = "_VCImageQueue_EnqueuePixelBuffer";
  v8 = 1024;
  v9 = 1095;
  v10 = 2048;
  v11 = v3;
  _os_log_error_impl(&dword_1D8A54000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed for NULL queue=%p", (uint8_t *)&v4, 0x26u);
  OUTLINED_FUNCTION_3();
}

void _VCImageQueue_EnqueuePixelBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCImageQueue.m:%d: Timed out waiting for layout change", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCImageQueue_EmitFrameEnqueuedSignposts_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate the timestamp value", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCImageQueue_EmitFrameEnqueuedSignposts_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate the frame count", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCImageQueue_EmitFrameEnqueuedSignposts_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate the new entry", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCImageQueue_CleanupStreamOutput_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Client terminated stream output", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioStreamSendGroup_PushAudioSamples_cold_1()
{
  os_log_t v0;
  uint8_t v1[24];
  int v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  v2 = 837;
  _os_log_debug_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_DEBUG, " [%s] %s:%d audio no-op no MKM", v1, 0x1Cu);
  OUTLINED_FUNCTION_3();
}

void VideoUtil_PrintFormatDesc_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d formatDesc is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoUtil_PrintBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Buffer name is not defined", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoUtil_PrintBuffer_cold_2()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  uint8_t v3[24];
  int v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_9();
  v4 = 450;
  v5 = v0;
  v6 = v1;
  _os_log_error_impl(&dword_1D8A54000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d bufferName='%s': Pointer is null", v3, 0x26u);
  OUTLINED_FUNCTION_3();
}

void VideoUtil_PrintBuffer_cold_3()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  uint8_t v3[24];
  int v4;
  __int16 v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_9();
  v4 = 451;
  v5 = v0;
  v6 = v1;
  v7 = 2048;
  v8 = 0;
  _os_log_error_impl(&dword_1D8A54000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d bufferName='%s': Buffer size %zu is not supported", v3, 0x30u);
}

void VideoUtil_AddImgDescToBitstream_cold_1()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[14];
  const char *v4;
  int v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v4 = "VideoUtil_AddImgDescToBitstream";
  OUTLINED_FUNCTION_4();
  v5 = 502;
  v6 = v0;
  v7 = 502;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v1, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoUtil.m:%d: FigSampleBufferGetFormatDescription returned NULL", v3);
  OUTLINED_FUNCTION_3();
}

void VideoUtil_AddImgDescToBitstream_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoUtil_AddImgDescToBitstream";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoUtil.m:%d: FigBlockBufferGetDataPointer %i", v2, *(const char **)v3, (unint64_t)"VideoUtil_AddImgDescToBitstream" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VideoUtil_AddImgDescToBitstream_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoUtil_AddImgDescToBitstream";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoUtil.m:%d: FigVideoFormatDescriptionCopyAsBigEndianImageDescriptionBlockBuffer %d", v2, *(const char **)v3, (unint64_t)"VideoUtil_AddImgDescToBitstream" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VideoUtil_AddImgDescToBitstream_cold_4()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[14];
  const char *v4;
  int v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v4 = "VideoUtil_AddImgDescToBitstream";
  OUTLINED_FUNCTION_4();
  v5 = 548;
  v6 = v0;
  v7 = 548;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v1, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoUtil.m:%d: Can't extract avcC from format description", v3);
  OUTLINED_FUNCTION_3();
}

void VideoUtil_AddImgDescToBitstream_cold_5()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  const char *v3;
  const char *v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_13_3();
  OUTLINED_FUNCTION_9();
  LOWORD(v6) = 0;
  HIWORD(v6) = v0;
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v1, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/VideoUtil.m:%d: gksVCPParseConfigurationRecordAndCreateParameterSets failed with err = %d", v3, v4, v5, 559, v6);
  OUTLINED_FUNCTION_3();
}

void VideoUtil_CreateSampleBufferWithPixelBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d input PixelBuffer is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoUtil_CreateSampleBufferWithPixelBuffer_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VideoUtil_CreateSampleBufferWithPixelBuffer";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create CMSampleBuffer (%d)", v2, *(const char **)v3, (unint64_t)"VideoUtil_CreateSampleBufferWithPixelBuffer" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VideoUtil_CreateSampleBufferWithPixelBuffer_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Could not create format description for image buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoUtil_SetVisibleRectAttachment_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid visible rect", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoUtil_CreateSampleFromBuffer_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;

  OUTLINED_FUNCTION_13_3();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d CMSampleBufferCreate failed %d", v2, v3, v4, 979);
  OUTLINED_FUNCTION_3();
}

void VideoUtil_GetEscapeCountForBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid buffer passed to _VideoTransmitter_GetEscapeCountForBuffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoUtil_PerformEscapingForBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VideoUtil_PerformSFrameEscaping failed due to invalid source/destination buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoUtil_PerformEscapingForBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VideoUtil_PerformSFrameEscaping failed due to insufficient destination buffer size", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoUtil_GetEmulationByteCountForBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid buffer passed to _VideoReceiver_GetUnEscapeCountForBuffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoUtil_RemoveEmulationBytesFromBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VideoUtil_RemoveEmulationBytesFromBuffer failed due to invalid source or destination buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoUtil_RemoveEmulationBytesFromBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VideoUtil_RemoveEmulationBytesFromBuffer failed due to invalid source or destination buffer lengths", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoUtil_ComputeScreenSizeClosestToNativeAspectRatio_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d invalid roudingMultiple", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoUtil_ComputeScreenSizeClosestToNativeAspectRatio_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d invalid desired width", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VideoUtil_ComputeScreenSizeClosestToNativeAspectRatio_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d invalid desired height", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoUtil_AdjustFaceMetadata_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d input pixel buffer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoUtil_AdjustFaceMetadata_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d original width should not be zero.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoUtil_AdjustFaceMetadata_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d original height should not be zero", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoUtil_AdjustFaceMetadata_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d inBuffer width should not be zero", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoUtil_AdjustFaceMetadata_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d inBuffer height should not be zero", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoUtil_AdjustFaceMetadata_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d no metadata dictionary attachment", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoUtil_AdjustFaceMetadata_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d could not find face metadata array attachment", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoUtil_AttachMetadata_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d pixelBuffer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoUtil_AttachMetadata_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d metadataObjects is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoUtil_AttachMetadata_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d attachment metadataDictionary could not be allocated", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoUtil_AttachMetadata_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate the face metadata array", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoUtil_AttachMetadata_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Face Mesh payload was nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TPGetSignalStrength_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d pTP is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TPGetSignalStrength_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d Failed to get signal strength from CT server", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TPGetSignalStrength_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d bars, displayBars, or maxDisplayBars are NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TPUpdateBaseband_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: CFDictionaryCreateMutable failed QoS dictionary", v2);
  OUTLINED_FUNCTION_3();
}

void TPUpdateBaseband_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: CFDictionaryCreateMutable failed for IPPort dictionary", v2);
  OUTLINED_FUNCTION_3();
}

void TPUpdateBaseband_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: Invalid CTServerConnection!", v2);
  OUTLINED_FUNCTION_3();
}

void TPUpdateQualityIndictor_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: _CTServerConnectionUpdateProtocolQualityOfService failed.", v2);
  OUTLINED_FUNCTION_3();
}

void TPSendUDPPacketARPL_cold_1()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_14_6();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x2Cu);
}

void TPSendUDPPacketARPL_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d >>>>>  ARPL packet iLen==0 in sendudppacket(in Transport) <<<<<", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TPSendUDPPacketARPL_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d >>>>>  ARPL packet pbMsg is NULL in sendudppacket(in Transport) <<<<<", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TPSendUDPPacketARPL_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d >>>>>  ARPL packet is UNENCRYPTED in sendudppacket(in Transport) <<<<<", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TPCreateHandle_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_10_3();
  v3 = 34656;
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: calloc(%d) failed", v2);
  OUTLINED_FUNCTION_3();
}

void TPCreateHandle_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: ICECreateHandle failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TPCleanupBaseband_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: _CTServerConnectionUnregisterForNotification for kCTRegistrationDataStatusChangedNotification failed.\n", v2);
  OUTLINED_FUNCTION_3();
}

void dtls_cold_1()
{
  NSObject *v0;
  uint8_t v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, "SIP [%s] %s:%d DTLS_Create failed with %d", v1);
  OUTLINED_FUNCTION_3();
}

void dtls_cold_2()
{
  NSObject *v0;
  uint8_t v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, "SIP [%s] %s:%d dtls: ARPLSessionCreate failed with %d", v1);
  OUTLINED_FUNCTION_3();
}

void dtls_cold_3()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_14_6();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x26u);
  OUTLINED_FUNCTION_3();
}

void dtls_cold_4()
{
  os_log_t v0;
  uint8_t v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  _os_log_debug_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_DEBUG, "SIP [%s] %s:%d dtls: ARPLSessionCreate(p2pID == %08X) ...", v1, 0x22u);
  OUTLINED_FUNCTION_3();
}

void TPListenVirtualInterface_cold_1()
{
  NSObject *v0;
  uint8_t v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, "SIP [%s] %s:%d Create socket for IDS interface failed with error %08X", v1);
  OUTLINED_FUNCTION_3();
}

void TPListenVirtualInterface_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_13_4();
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: calloc(%d) failed", v2);
  OUTLINED_FUNCTION_3();
}

void TPListenVirtualInterface_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: socket failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TPListenOnPhysicalInterface_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: No network interface found.", v2);
  OUTLINED_FUNCTION_3();
}

void TPSend_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: ConstructSipMsg failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TPSend_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: Compress other SIP SDP failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TPSend_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: Compress INVITE/200 SDP failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TPSend_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: Compress Binary SDP failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TPAddTransaction_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: SipMsg doesn't have a Via header", v2);
  OUTLINED_FUNCTION_3();
}

void TPAddTransaction_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_10_3();
  v3 = 144;
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: calloc(%d) failed", v2);
  OUTLINED_FUNCTION_3();
}

void TPGetConnectionData_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: CreateSocketAndBind failed in TPAddIPPortToCLIST = (%08x)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TPGetConnectionData_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: ICEAddOneInterface failed in TPAddIPPortToCLIST = (%08x)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TPUpdateInterfaceList_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: No network interface found.", v2);
  OUTLINED_FUNCTION_3();
}

void TPSetupCTContext_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: _CTServerConnectionCreateOnTargetQueue failed!", v2);
  OUTLINED_FUNCTION_3();
}

void CreateSocketAndBind_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_13_4();
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: calloc(%d) failed", v2);
  OUTLINED_FUNCTION_3();
}

void CreateSocketAndBind_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: getaddrinfo returned NULL", v2);
  OUTLINED_FUNCTION_3();
}

void CreateSocketAndBind_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: socket failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateSocketAndBind_cold_4(uint64_t a1, unsigned __int16 *a2, NSObject *a3)
{
  int v5;
  __int16 v6;
  int v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  __error();
  v8 = 136316418;
  v9 = a1;
  v10 = 2080;
  v11 = "CreateSocketAndBind";
  v12 = 1024;
  OUTLINED_FUNCTION_16_1();
  v13 = v5;
  v14 = v6;
  v15 = v7;
  _os_log_error_impl(&dword_1D8A54000, a3, OS_LOG_TYPE_ERROR, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: bind on %d failed(%d)", (uint8_t *)&v8, 0x2Eu);
}

void CreateSocketAndBind_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: getsockname failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void CreateSocketAndBind_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: getaddrinfo failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TransportMapPacketMultiplexModeToVTPMode_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d Invalid transport packet multiplex mode", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TPProcessRemoteInterfaceChangeMessage_cold_1()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_14_6();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x32u);
}

void SendUDPPacketForCList_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d >>>>>  ARPL packet is UNENCRYPTED in SendUDPPacketForCList(in Transport) <<<<<", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TPEnsureRecvProcStarted_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: pthread_create(TPRecvProc) failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TPRecvProc_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d TPRecvProc: UNEXPECTED! Breaking the loop due to invalid pTP->sReset", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TPRecvProc_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: select failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RecvMessageUDP_cold_1()
{
  __int16 v0;
  __int16 v1;
  NSObject *v2;
  uint64_t v3;
  uint8_t v4[12];
  __int16 v5;
  const char *v6;
  int v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  v5 = v0;
  v6 = "RecvMessageUDP";
  OUTLINED_FUNCTION_4();
  v7 = 1663;
  v8 = v1;
  v9 = 2152;
  v10 = v1;
  v11 = -2146500605;
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, v2, v3, "SIP [%s] %s:%d calloc(%d) failed(%08X)", v4);
  OUTLINED_FUNCTION_3();
}

void RecvMessageUDP_cold_2()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  const char *v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  v3 = v0;
  v4 = "RecvMessageUDP";
  OUTLINED_FUNCTION_4();
  v5 = 1567;
  _os_log_debug_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_DEBUG, "SIP [%s] %s:%d RecvMessageUDP: pass message SIP", v2, 0x1Cu);
  OUTLINED_FUNCTION_3();
}

void PassMessage_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: ParseMessage failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void PassMessage_cold_2(uint64_t a1)
{
  uint64_t v1;
  os_log_t v2;
  __int128 v3;
  int v4;
  int v5;
  int v6;

  LODWORD(v3) = 136316162;
  *(_QWORD *)((char *)&v3 + 4) = a1;
  WORD6(v3) = 2080;
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_16_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v1, v2, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: malloc(%d) failed", (const char *)v3, *((const char **)&v3 + 1), v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void PassMessage_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[36];
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_10_3();
  v3 = -2146500606;
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: CallSIPMessageCallback failed(%08X)", v2);
  OUTLINED_FUNCTION_3();
}

void PassMessage_cold_4()
{
  NSObject *v0;
  uint8_t v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, "SIP [%s] %s:%d SIPMessage callback no via/cseq failed, result = %x", v1);
  OUTLINED_FUNCTION_3();
}

void PassMessage_cold_5()
{
  NSObject *v0;
  uint8_t v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, "SIP [%s] %s:%d SIPMessage callback failed, result = %x", v1);
  OUTLINED_FUNCTION_3();
}

void PassMessage_cold_6()
{
  NSObject *v0;
  uint8_t v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, "SIP [%s] %s:%d SIPMessage transaction callback request failed, result = %x", v1);
  OUTLINED_FUNCTION_3();
}

void PassMessage_cold_7()
{
  NSObject *v0;
  uint8_t v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, "SIP [%s] %s:%d SIPMessage transaction callback response failed, result = %x", v1);
  OUTLINED_FUNCTION_3();
}

void CompressMsg_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/SIP/Transport.c:%d: ConstructSipMsg failed(%08X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void TPGetLocalCellTech_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "SIP [%s] %s:%d CTServerConnection is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCBasebandCongestionDetector_SetMode_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  v4 = 2080;
  v5 = "VCBasebandCongestionDetector_SetMode";
  v6 = 1024;
  v7 = 499;
  _os_log_error_impl(&dword_1D8A54000, a2, OS_LOG_TYPE_ERROR, "AVCRC [%s] %s:%d basebandCongestionDetector is nil", (uint8_t *)&v2, 0x1Cu);
}

void VCTransportStreamRunLoopVTPCreate_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL runLoop", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCTransportStreamRunLoopVTPCreate_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create transport stream array", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCTransportStreamRunLoopVTPCreate_cold_3()
{
  __int16 v0;
  int v1;
  NSObject *v2;
  uint8_t v3[14];
  const char *v4;
  int v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v4 = "VCTransportStreamRunLoopVTPCreate";
  OUTLINED_FUNCTION_4();
  v5 = 80;
  v6 = v0;
  v7 = v1;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v2, (uint64_t)v2, " [%s] %s:%d CMDerivedObjectCreate failed %x", v3);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamRunLoopVTPAddTransportStream_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL runLoop", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamRunLoopVTPAddTransportStream_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL transportStream", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamRunLoopVTPAddTransportStream_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCTransportStreamRunLoopVTPAddTransportStream";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d transportStream %p was already added to run loop", v2, *(const char **)v3, (unint64_t)"_VCTransportStreamRunLoopVTPAddTransportStream" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamRunLoopVTPAddTransportStream_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid transportStream type", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamRunLoopVTPRemoveTransportStream_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL runLoop", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamRunLoopVTPRemoveTransportStream_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL transportStream", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamRunLoopVTPRemoveTransportStream_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCTransportStreamRunLoopVTPRemoveTransportStream";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d transportStream %p being removed was not added to run loop", v2, *(const char **)v3, (unint64_t)"_VCTransportStreamRunLoopVTPRemoveTransportStream" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamRunLoopVTPWaitForReceive_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL runLoop", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamRunLoopVTPWaitForReceive_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Negative timeout", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamRunLoopVTPWaitForReceive_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCTransportStreamRunLoopVTPWaitForReceive";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_7_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d RunLoop %p wait for receive was cancelled", v2, *(const char **)v3, (unint64_t)"_VCTransportStreamRunLoopVTPWaitForReceive" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamRunLoopVTPWaitForReceive_cold_4(uint64_t a1, NSObject *a2)
{
  int v3;
  uint64_t v4;
  uint8_t v5[14];
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  __error();
  OUTLINED_FUNCTION_8_2();
  v6 = "_VCTransportStreamRunLoopVTPWaitForReceive";
  v7 = 1024;
  v8 = 180;
  v9 = 1024;
  v10 = v3;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, a2, v4, " [%s] %s:%d Select failed %d", v5);
  OUTLINED_FUNCTION_3_0();
}

void _VCTransportStreamRunLoopVTPWaitForReceive_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCTransportStreamRunLoopVTPWaitForReceive";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_7_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d RunLoop %p wait for receive timed out", v2, *(const char **)v3, (unint64_t)"_VCTransportStreamRunLoopVTPWaitForReceive" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamRunLoopVTPCancelWait_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL runLoop", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamRunLoopVTPCancelWait_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Reset socket not set up", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamRunLoopVTPUpdateFDSet_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL storage", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamRunLoopVTPUpdateFDSet_cold_2(uint64_t a1, NSObject *a2)
{
  int v3;
  uint64_t v4;
  uint8_t v5[14];
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  __error();
  OUTLINED_FUNCTION_8_2();
  v6 = "_VCTransportStreamRunLoopVTPUpdateFDSet";
  v7 = 1024;
  v8 = 232;
  v9 = 1024;
  v10 = v3;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, a2, v4, " [%s] %s:%d Failed to create reset socket %d", v5);
  OUTLINED_FUNCTION_3_0();
}

void _VCTransportStreamRunLoopVTPIterateTransportStreams_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL storage", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamRunLoopVTPIterateTransportStreams_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCTransportStreamRunLoopVTPIterateTransportStreams";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VFD returned by tranportStream %p is NULL", v2, *(const char **)v3, (unint64_t)"_VCTransportStreamRunLoopVTPIterateTransportStreams" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void SRTPGetROC_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Tried to decrement ROC to -1, prevented this from happening", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPInitCrypt_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "SRTPInitCrypt";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d failed with error %d", v2, *(const char **)v3, (unint64_t)"SRTPInitCrypt" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void SRTPUseEncryption_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d SRTPInfo not initialized properly. Call SRTPPrepareEncryption first", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPUseEncryption_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d invalid SRTP exchange info provided", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _SRTPUpdateEncryption_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d SRTPInfo not initialized properly. Call SRTPPrepareEncryption first", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPUpdateKeyMaterialForRTPInfo_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d update encryption failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPUpdateKeyMaterialForRTPInfo_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d create crypto set failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _SRTPCancelEncryption_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d SRTPInfo not initialized properly. Call SRTPPrepareEncryption first", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPUpdateEncryptionInfo_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d SRTPUpdateEncryptionInfo: attempt to set an invalid media key index", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPDeriveMediaKeyInfo_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d SRTPDeriveMediaKeyInfo: media key/salt derivation failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPEncryptData_cold_1()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  const char *v3;
  const char *v4;
  int v5;
  const char *v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_9();
  LODWORD(v6) = 1084;
  WORD2(v6) = v0;
  HIWORD(v6) = v1;
  OUTLINED_FUNCTION_7_4(&dword_1D8A54000, v1, v2, " [%s] %s:%d SRTPEncryptData: Out=[%s]", v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPEncryptData_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "SRTPEncryptData";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d CCCryptorUpdate failed with error %d", v2, *(const char **)v3, (unint64_t)"SRTPEncryptData" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void SRTPEncryptData_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "SRTPEncryptData";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d CCCryptorReset failed with error %d", v2, *(const char **)v3, (unint64_t)"SRTPEncryptData" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void SRTPEncryptData_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid operating mode %d, falling back to kSRTPOperatingModeRFCCompliant", v2, v3, v4, 401);
  OUTLINED_FUNCTION_3();
}

void SRTPEncryptData_cold_5()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  const char *v3;
  const char *v4;
  int v5;
  const char *v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_9();
  LODWORD(v6) = 1057;
  WORD2(v6) = v0;
  HIWORD(v6) = v1;
  OUTLINED_FUNCTION_7_4(&dword_1D8A54000, v1, v2, " [%s] %s:%d SRTPEncryptData: In=[%s]", v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPEncrypt_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Max number of SRTP packets reached", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTCPEncrypt_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Max number of SRTCP packets reached", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTCPDecrypt_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "SRTCPDecrypt";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d SRTP header doesn't fit in packet. Packet length=%d", v2, *(const char **)v3, (unint64_t)"SRTCPDecrypt" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void SRTPCalculateTotalSuffixBytes_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d SRTPInfo should not be nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPCalculateTotalSuffixBytes_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Could not get HMAC size - invalid parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPCalculateTotalSuffixBytes_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Could not get MKI size - invalid parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPAddAuthenticationTag_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d SRTPInfo should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPAddAuthenticationTag_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d outputLength should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPAddAuthenticationTag_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Could not get MKI size - invalid parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPAddAuthenticationTag_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Could not get HMAC size - invalid parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPAddAuthenticationTag_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Could not generate MKI: invalid parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPAddAuthenticationTag_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d outMKI should not be nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPAddAuthenticationTag_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Could not generate RCCM tag: invalid parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPAddAuthenticationTag_cold_8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d inData should not be nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPAddAuthenticationTag_cold_9()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid MediaKeyIndex. Stop sending the packet", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPIsAuthenticationEnabled_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Authentication is enabled but the tag size is invalid. Size=%d", v2, v3, v4, 1514);
  OUTLINED_FUNCTION_3();
}

void SRTPVerifyAuthenticationTag_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d payload must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPVerifyAuthenticationTag_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d isMKIChanged must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPVerifyAuthenticationTag_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d outputLength must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPVerifyAuthenticationTag_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Could not get HMAC size - invalid parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPVerifyAuthenticationTag_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d SRTP packet too short - no session authentication tag present", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPVerifyAuthenticationTag_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Authentication tag doesn't match. Authentication failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPVerifyAuthenticationTag_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d SRTP packet too short - no MKI present", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPVerifyAuthenticationTag_cold_8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Could not read MKI: invalid parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPVerifyAuthenticationTag_cold_9()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d inMKI should not be nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTPVerifyAuthenticationTag_cold_10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Could not read RCCM tag: invalid parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTCPAddAuthenticationTag_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d No extra buffer space to add authentication tag", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTCPVerifyAuthenticationTag_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d SRTCP packet too short", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SRTCPVerifyAuthenticationTag_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Authentication tag doesn't match. Authentication failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCFECPacketListEntry_Allocate_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Fail to allocate list entry", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECPacketList_AllocateAndPush_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failure in allocating an entry list", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECPacketList_AllocateAndPush_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failing to push a packet, possibly a duplicate", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void MediaCallback_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "MediaCallback";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "VCCallSession [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCCallSession.m:%d: MediaCallback: notificaiton %d unknown, no action.", v2, *(const char **)v3, (unint64_t)"MediaCallback" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void MediaCallback_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "MediaCallback";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCCallSession [%s] %s:%d MediaCallback: srtp key update is not supported for call (%08X).", v2, *(const char **)v3, (unint64_t)"MediaCallback" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void RTPSendUncompressedVideoPacket_cold_1(uint64_t a1, int a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = 136316162;
  v4 = a1;
  v5 = 2080;
  v6 = "RTPSendUncompressedVideoPacket";
  v7 = 1024;
  v8 = 49;
  v9 = 1024;
  v10 = 49;
  v11 = 1024;
  v12 = a2;
  _os_log_error_impl(&dword_1D8A54000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPUncompressedVideo.c:%d: data size too big (%d)", (uint8_t *)&v3, 0x28u);
}

void VCRateControlAlgorithm_IsPaused_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_10();
  OUTLINED_FUNCTION_6_5(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. algorithm=%p", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithm_SetPaused_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_10();
  OUTLINED_FUNCTION_6_5(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. algorithm=%p", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithm_EnableLogDump_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_10();
  OUTLINED_FUNCTION_6_5(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. algorithm=%p", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCMediaQueuePacketBundler_BundlePacketsWithFCFSPolicy_cold_1()
{
  __int16 v0;
  int v1;
  NSObject *v2;
  uint8_t v3[24];
  int v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  v4 = 76;
  v5 = v0;
  v6 = v1;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v2, (uint64_t)v2, " [%s] %s:%d Output Block failed (%d)", v3);
  OUTLINED_FUNCTION_3();
}

void _VCMediaQueuePacketBundler_GetSizeOfHeaderWithBundledPackets_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Reach of number of max packets", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueuePacketBundler_Create_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL bundlerOut", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueuePacketBundler_Create_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d allocate failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueuePacketBundler_Create_cold_3()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[24];
  int v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  v4 = 223;
  v5 = v0;
  v6 = 0;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v1, v2, " [%s] %s:%d CMSimpleQueueCreate failed (%d)", v3);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueuePacketBundler_AddPacket_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL bundler", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueuePacketBundler_AddPacket_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL mediaPacket", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueuePacketBundler_AddPacket_cold_3()
{
  __int16 v0;
  int v1;
  NSObject *v2;
  uint8_t v3[24];
  int v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  v4 = 245;
  v5 = v0;
  v6 = v1;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v2, (uint64_t)v2, " [%s] %s:%d Failed to enqueue media packet to bundler, status=%d", v3);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueuePacketBundler_AddPacket_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d mediaPacket->next is not NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueuePacketBundler_SetMTU_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL bundler", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueuePacketBundler_SetOneToOne_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL bundler", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueuePacketBundler_BundlePackets_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL bundler", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueuePacketBundler_BundlePackets_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL outputBlockHandler", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTPCallback_cold_1()
{
  int v0;
  os_log_t v1;
  uint8_t v2[14];
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "VTPCallback";
  v4 = 1024;
  v5 = 952;
  v6 = 1024;
  v7 = 952;
  v8 = 1024;
  v9 = v0;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VideoConferenceManager.m:%d: VTPCallback error: unknown notificaiton %d.", v2, 0x28u);
}

void VTP_Initialize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_27_1();
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: calloc failed to allocate=%d bytes", v2);
  OUTLINED_FUNCTION_3();
}

void VTP_Initialize_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_27_1();
  OUTLINED_FUNCTION_24_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: calloc failed to allocate=%d bytes", v2);
  OUTLINED_FUNCTION_3();
}

void VTP_Initialize_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: Failed to create VTP memory allocators", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Initialize_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_10_9(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: Failed to create VTP memory allocators", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Initialize_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_36_0();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create blockBufferDataMemoryPool", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Initialize_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_36_0();
  OUTLINED_FUNCTION_11_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create blockBufferDataMemoryPool", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Initialize_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to get allocator from figMemoryPool", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Initialize_cold_8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_11_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to get allocator from figMemoryPool", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Initialize_cold_9()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create the vtp packet allocator", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Initialize_cold_10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_35_0();
  OUTLINED_FUNCTION_11_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create the vtp packet allocator", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Initialize_cold_11()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCMemPool_Create failed to allocate=%d bytes", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Initialize_cold_12()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_29_0();
  OUTLINED_FUNCTION_10_9(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCMemPool_Create failed to allocate=%d bytes", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Initialize_cold_13()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: calloc failed to allocate=%d bytes", v2);
  OUTLINED_FUNCTION_3();
}

void VTP_Initialize_cold_14()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_28_0();
  OUTLINED_FUNCTION_24_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: calloc failed to allocate=%d bytes", v2);
  OUTLINED_FUNCTION_3();
}

void VTP_Initialize_cold_15()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_11_0(*MEMORY[0x1E0C80C00]);
  v3 = 136316162;
  v4 = v1;
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, v0, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: CreateHandle failed with errno=%d", (uint8_t *)&v3);
  OUTLINED_FUNCTION_19();
}

void VTP_Initialize_cold_16()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  const char *v3;
  _BYTE v4[14];
  int v5;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v4[6] = "VTP_Initialize";
  OUTLINED_FUNCTION_4();
  LOWORD(v5) = 0;
  HIWORD(v5) = v0;
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v1, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: Invalid FaceTime traffic class value=%d, ignore.", v3, *(const char **)v4, (unint64_t)"VTP_Initialize" >> 16, 510, v5);
  OUTLINED_FUNCTION_3();
}

void VTP_Initialize_cold_17()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VTP_Initialize";
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTPRecvProc thread failed, osStatus=%d", v2, *(const char **)v3, (unint64_t)"VTP_Initialize" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VTP_Initialize_cold_18()
{
  NSObject *v0;
  uint8_t v1[14];
  const char *v2;
  __int16 v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "VTP_Initialize";
  v3 = 1024;
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_24_0(&dword_1D8A54000, v0, (uint64_t)v0, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTPRecvProc thread failed, osStatus=%d", v1);
  OUTLINED_FUNCTION_3();
}

void VTP_Initialize_cold_19()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_41();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create the VTPPacketRoutingInfoAllocatorName allocator", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Initialize_cold_20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_41();
  OUTLINED_FUNCTION_11_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create the VTPPacketRoutingInfoAllocatorName allocator", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Initialize_cold_21()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create the VTPBlockBufferDataAllocator allocator", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Initialize_cold_22()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_11_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create the VTPBlockBufferDataAllocator allocator", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Initialize_cold_23()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create the VTPBlockBufferHeaderAllocator allocator", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Initialize_cold_24()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_39_0();
  OUTLINED_FUNCTION_11_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create the VTPBlockBufferHeaderAllocator allocator", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTPRecvProc_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTPRecvProc failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTPRecvProc_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VTPRecvProc";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: select failed (%08X)", v2, *(const char **)v3, (unint64_t)"VTPRecvProc" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VTP_Cleanup_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_11_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTP_Cleanup failed due to invalid handle. g_hVTP:[%p]", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_19();
}

void VTP_SocketWithRealSocket_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid VTP handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_CopyPreferredSendQueue_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d preferredSendQueue is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_CopyPreferredSendQueue_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed due to invalid handle", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SocketWithNWConnection_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NWConnection should not be nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SocketWithNWConnection_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid VTP handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SocketWithNWConnection_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d calloc failed for=%d bytes", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SocketWithNWConnection_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_10_9(&dword_1D8A54000, v0, v1, " [%s] %s:%d calloc failed for=%d bytes", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SocketWithNWConnection_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_GetVFD returned invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SocketWithNWConnection_cold_6()
{
  NSObject *v0;
  uint8_t v1[14];
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "VTP_SocketWithNWConnection";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, " [%s] %s:%d Non-UDP protocol=%d is not supported", v1);
  OUTLINED_FUNCTION_3();
}

void VTP_GetVFD_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d ***VTP_GetVFD: UNEXPECTED; ran out of vfd's with i=%d. There must be some socket LEAK!",
    v2,
    v3,
    v4,
    v5,
    v6);
  OUTLINED_FUNCTION_3();
}

void VTP_DuplicateVFD_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_DuplicateVFD failed due to invalid handle", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_DuplicateVFD_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_DuplicateVFD failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VTP_SocketWithRealSocketFromFVDList_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d sourceVFD should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VTP_SocketWithRealSocketFromFVDList_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_37_0();
  OUTLINED_FUNCTION_11_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d sourceVFD should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VTP_SocketWithRealSocketFromFVDList_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d calloc failed for=%d bytes", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VTP_SocketWithRealSocketFromFVDList_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_25_0();
  OUTLINED_FUNCTION_10_9(&dword_1D8A54000, v0, v1, " [%s] %s:%d calloc failed for=%d bytes", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VTP_SocketWithRealSocketFromFVDList_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_GetVFD returned invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VTP_SocketWithRealSocketFromFVDList_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_11_0(*MEMORY[0x1E0C80C00]);
  v3 = 136316162;
  v4 = v1;
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, v0, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: socket failed with errno=%d", (uint8_t *)&v3);
  OUTLINED_FUNCTION_19();
}

void _VTP_SocketWithRealSocketFromFVDList_cold_7()
{
  uint64_t v0;
  NSObject *v1;
  int v2;
  uint64_t v3;

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  v2 = 136316418;
  v3 = v0;
  OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_33_0(&dword_1D8A54000, v1, (uint64_t)v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: socket=%d > FD_SETSIZE=%d", (uint8_t *)&v2);
  OUTLINED_FUNCTION_19();
}

void _VTP_SocketWithRealSocketFromFVDList_cold_8()
{
  uint64_t v0;
  NSObject *v1;
  int v2;
  uint64_t v3;

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  v2 = 136316418;
  v3 = v0;
  OUTLINED_FUNCTION_31_0();
  OUTLINED_FUNCTION_30_0();
  OUTLINED_FUNCTION_33_0(&dword_1D8A54000, v1, (uint64_t)v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: realSocket=%d > FD_SETSIZE=%d", (uint8_t *)&v2);
  OUTLINED_FUNCTION_19();
}

void VTP_SocketForIDSWithFileDescriptor_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTP_Socket failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SocketForIDSWithFileDescriptor_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_11_0(*MEMORY[0x1E0C80C00]);
  v3 = 136315906;
  v4 = v1;
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v2, " [%s] %s:%d VTP create VFDList failed with errno=%d", (uint8_t *)&v3);
  OUTLINED_FUNCTION_19();
}

void VTP_SocketForIDSWithFileDescriptor_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VTP_SocketForIDSWithFileDescriptor";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: fd=%d > FD_SETSIZE", v2, *(const char **)v3, (unint64_t)"VTP_SocketForIDSWithFileDescriptor" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VTP_SocketForIDSWithFileDescriptor_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTP_GetVFD returned invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SetPayloadList_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_SetPayloadList failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SetPayloadList_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTP_SetPayloadList failed to alloc.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SetPayloadList_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_10_9(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTP_SetPayloadList failed to alloc.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SetSocketMode_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_SetSocketMode failed due to invalid input mode.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SetSocketMode_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_SetSocketMode failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SetPktType_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_SetPktType failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_AddPktType_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_AddPktType failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_RemovePktType_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_RemovePktType failed due to invalid handle", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Getsockname_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_Getsockname failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VTP_SetSSRC_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_SetRTPSSRC failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SetTransportSessionID_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid transport session ID", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SetTransportSessionID_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_SetTransportSessionID failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_GetTransportSessionID_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid transport session ID", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_GetTransportSessionID_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_SetTransportSessionID failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Setsockopt_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_Setsockopt failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SetSourceDestinationWithToken_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP handle is invalid", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SetSourceDestinationWithIPPort_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP handle is invalid", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Close_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_Close failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Bind_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_Bind failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Bind_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_11_0(*MEMORY[0x1E0C80C00]);
  v3 = 136316162;
  v4 = v1;
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, v0, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: bind failed(%d)", (uint8_t *)&v3);
  OUTLINED_FUNCTION_19();
}

void VTP_BindNew_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_Bind failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_BindNew_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;

  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_11_0(*MEMORY[0x1E0C80C00]);
  v3 = 136316162;
  v4 = v1;
  OUTLINED_FUNCTION_22_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, v0, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: bind failed(%d)", (uint8_t *)&v3);
  OUTLINED_FUNCTION_19();
}

void VTP_Sendto_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTP_Sendto failed due to invalid parameter.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Sendto_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTP_Sendto failed due to invalid packet type (%d).", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Sendto_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTP_Sendto failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Sendto_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VTP_Sendto";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: DTLS_Write failed %08X.", v2, *(const char **)v3, (unint64_t)"VTP_Sendto" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VTP_Sendto_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: No VFD result found.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Sendto_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: No VFD found for default result key.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void SendOnePacketOnVFDList_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: Invalid relay server type(%d).", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Send_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d got a NULL VPKTFlag", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Send_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_11_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: %s: failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_19();
}

void VTP_Send_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d infoList is NULL! Dropped packet!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Send_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate memory for infoList", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Send_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Un-encrypted/un-authenticated packet detected. Dropping...", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VTP_CreatePacketRoutingInfoListWithVFD_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_11_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: %s failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_19();
}

void _VTP_CreatePacketRoutingInfoListWithVFD_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_11_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: %s failed due to VFDList not found.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_19();
}

void _VTP_CreatePacketRoutingInfoListWithVFD_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate memory for infoList", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VTP_SendWithSourceDestinationInfo_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed due to null VCSourceDestinationInfo", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VTP_SendWithSourceDestinationInfo_cold_2()
{
  NSObject *v0;
  uint8_t v1[40];

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, " [%s] %s:%d RealTransport: source destination info with mode %d is not supported", v1);
  OUTLINED_FUNCTION_3();
}

void _VTP_SendWithSourceDestinationInfo_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_11_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: %s failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_19();
}

void _VTP_SendWithSourceDestinationInfo_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d failed to match a VFDList", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VTP_SendWithSourceDestinationInfo_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d nil idsDatagramChannel", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VTP_SendWithSourceDestinationInfo_cold_6()
{
  NSObject *v0;
  uint8_t v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, " [%s] %s:%d Link (ID=%d) does not support HBH encryption required by packet.", v1);
  OUTLINED_FUNCTION_3();
}

void _VTP_HealthPrint_cold_1()
{
  NSObject *v0;
  uint8_t v1[14];
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "_VTP_HealthPrint";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, " [%s] %s:%d Cannot print health for invalid connectionIndex=%d.", v1);
  OUTLINED_FUNCTION_3();
}

void VTP_SendCompoundPacket_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d got a NULL datagramsVPKTFlag", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SendCompoundPacket_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d got a NULL datagramsLength", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SendCompoundPacket_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d got a NULL datagramsBuffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SendCompoundPacket_cold_4()
{
  NSObject *v0;
  uint8_t v1[14];
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "VTP_SendCompoundPacket";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, " [%s] %s:%d got a bad datagramsCount %d", v1);
  OUTLINED_FUNCTION_3();
}

void VTP_SendCompoundPacket_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: Failed due to invalid handle", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SendCompoundPacket_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d callID should not be 0 when sending IDS compound packet!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SendCompoundPacket_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d infoList is NULL! Dropped packet!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_GetReportingStats_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid reportingStats", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_GetReportingStats_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Cannot check in VTP handle", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SendWithSourceDestinationIP_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_11_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: %s failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_19();
}

void VTP_SendWithSourceDestinationIP_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_11_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: %s: failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_19();
}

void VTP_ReleasePacket_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to retrieve VTP handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Recvfrom_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_Recvfrom failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Recvfrom_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_Recvfrom failed due to no real socket found for vfd", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SetAFRCRecvMode_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTP_SetAFRCRecvMode failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SetAFRC_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_SetAFRC failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SetAFRCConnectionNumber_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_11_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: %s: failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_19();
}

void VTP_NotifyAFRCRxEstimate_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_NotifyAFRCRxEstimate INVALID_HANDLE", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_NotifyAFRCRxEstimate_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTP_NotifyAFRCRxEstimate", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_RegisterPacketCallback_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: Failed due to invalid parameter.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_RegisterPacketCallback_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: Failed VTP check-in", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_RegisterPacketCallback_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to add new vfd set.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_RegisterPacketCallback_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VTP_RegisterPacketCallback";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d Successfully added new vfd set with id: %d", v2, *(const char **)v3, (unint64_t)"VTP_RegisterPacketCallback" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VTP_RegisterPacketCallback_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to copy readFDs.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void AddOneVFDSETList_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: calloc(%d) failed", v2);
  OUTLINED_FUNCTION_3();
}

void AddOneVFDSETList_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_26();
  OUTLINED_FUNCTION_24_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: calloc(%d) failed", v2);
  OUTLINED_FUNCTION_3();
}

void VTP_UnregisterPacketCallback_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: Failed VTP check-in.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_Select_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTP_Select failed due to invalid parameter.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_GetSendRecvStats_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTP_GetSendRecvStats failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SetCellularUniqueTag_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_SetCellularUniqueTag failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SetPktTag_cold_1()
{
  NSObject *v0;
  uint8_t v1[14];
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "VTP_SetPktTag";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, " [%s] %s:%d VTP_SetPktTag: invalid tag index requested '%d'. Ignoring", v1);
  OUTLINED_FUNCTION_3();
}

void VTP_SetRTPSrc_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTP_SetRTPSrc failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SetNetworkLogLevel_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: RealSocketForConnectionResult returned invalid socket", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SetNetworkLogLevel_cold_2()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[36];
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_13_0();
  v3 = v0;
  OUTLINED_FUNCTION_15_5(&dword_1D8A54000, v1, (uint64_t)v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: No VFD found for connection result with localIPPort %s", v2);
  OUTLINED_FUNCTION_19();
}

void VTP_SetNetworkLogLevel_cold_3(uint64_t a1, uint64_t a2, NSObject *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = *__error();
  v7 = 136316418;
  v8 = a1;
  v9 = 2080;
  v10 = "VTP_SetNetworkLogLevel";
  v11 = 1024;
  v12 = 4541;
  v13 = 1024;
  v14 = 4541;
  v15 = 2080;
  v16 = a2;
  v17 = 1024;
  v18 = v6;
  _os_log_error_impl(&dword_1D8A54000, a3, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: ioctl(SIOCSIFLOG) for interface=%s failed with error=%d", (uint8_t *)&v7, 0x32u);
  OUTLINED_FUNCTION_9_1();
}

void VTP_NotifyRemoteNoRemotePacket_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTPCallback failed due to undefined pointer.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_NotifySendFailed_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_7_3();
  OUTLINED_FUNCTION_11(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTPCallback failed due to invalid VTP handle [g_hVTP:%p]", v2);
  OUTLINED_FUNCTION_3();
}

void VTP_NotifySendFailed_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: VTPCallback failed due to undefined pointer.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_DetectNAT64Prefix_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_DetectNAT64Prefix failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_RegisterConnectionManagerWithCallID_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_11_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: %s: failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_19();
}

void VTP_DeregisterConnectionManagerWithCallID_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_11_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: %s: failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_19();
}

void VTP_IncrementTotalBytesSent_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_IncrementTotalBytesSent failed due to invalid handle", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_GetPktType_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP handle is invalid", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_GetPktType_cold_2()
{
  NSObject *v0;
  uint8_t v1[14];
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "VTP_GetPktType";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, " [%s] %s:%d Could not find VFDList for gived fvd=%d", v1);
  OUTLINED_FUNCTION_3();
}

void VTP_ReleaseVFD_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VTP_ReleaseVFD";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: vfd=%d is out-of-range.", v2, *(const char **)v3, (unint64_t)"VTP_ReleaseVFD" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void PrepareOFTMAC_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: SessionID is NULL, cannot generate MAC, reset flag.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void PrepareOFTMAC_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: SessionID length 0, cannot generate MAC, reset flag.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void PrepareOFTMAC_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: No key available to generate MAC, reset flag.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void PrepareOFTCRC32_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: PrepareOFTCRC32 failed due to invalid parameter.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VTP_LogOSChannelInfoToIDSDatagramChannel_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d nil VCDatagramChannelIDS, cannot log os channel info!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_ProcessPacketType_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: out-of-bound OFT type.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_ProcessPacketType_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: Invalid OFT header, discard.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_ProcessPacketType_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "ProcessOFTData";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: OFT packet (%d) missing OFT MAC, discard.", v2, *(const char **)v3, (unint64_t)"ProcessOFTData" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VTP_ProcessPacketType_cold_4()
{
  os_log_t v0;
  uint8_t v1[14];
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "VTP_ProcessPacketType";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5_1();
  _os_log_debug_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_DEBUG, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: unrecognized openfacetime type=%d", v1, 0x28u);
  OUTLINED_FUNCTION_3();
}

void VTP_ProcessPacketType_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VTP_ProcessPacketType";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d received packet with type=%d", v2, *(const char **)v3, (unint64_t)"VTP_ProcessPacketType" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VTP_ProcessPacketType_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: Invalid OFT MAC, discard.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_ProcessPacketType_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: Invalid OFT RTP header version with bad CRC, discard.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_ProcessPacketType_cold_8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_8_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: Invalid OFT RTP header version, discard.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_UpdateReceivedBytes_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_11_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: %s: failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_19();
}

void _VTP_ShrinkPacket_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to retrieve blockBuffer pointer and size", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VTP_ShrinkPacket_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to retrieve blockBuffer pointer and size", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VTP_AllocatePacketWithBufferFreeCallback_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate VTP packet", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VTP_AllocatePacketWithBufferFreeCallback_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to retrieve blockBuffer pointer and size", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VTP_AllocatePacketWithBufferFreeCallback_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate VTP data packet buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VTP_AllocatePacketWithBufferFreeCallback_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate VTP data packet buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VTP_AllocatePacketWithBufferFreeCallback_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate VTP data packet buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_IFIndexToName_cold_1(uint64_t a1, int a2, NSObject *a3)
{
  __int16 v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  __error();
  v9 = 136316418;
  v10 = a1;
  OUTLINED_FUNCTION_31_0();
  v11 = 3608;
  v12 = v6;
  v13 = 3608;
  v14 = v6;
  v15 = a2;
  v16 = v6;
  v17 = v7;
  OUTLINED_FUNCTION_33_0(&dword_1D8A54000, a3, v8, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: if_indextoname failed for index %d (%d)", (uint8_t *)&v9);
  OUTLINED_FUNCTION_9_1();
}

void VTP_IFIndexToName_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  *(_QWORD *)&v3[6] = "VTP_IFIndexToName";
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: realloc (%d) failed", v2, *(const char **)v3, (unint64_t)"VTP_IFIndexToName" >> 16, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VTP_IFIndexToName_cold_3()
{
  NSObject *v0;
  uint8_t v1[14];
  const char *v2;
  __int16 v3;

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  v2 = "VTP_IFIndexToName";
  v3 = 1024;
  OUTLINED_FUNCTION_6_0();
  OUTLINED_FUNCTION_24_0(&dword_1D8A54000, v0, (uint64_t)v0, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: realloc (%d) failed", v1);
  OUTLINED_FUNCTION_3();
}

void VTP_SendOnePacketWithSocket_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d failed due to NULL destination IPPort", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VTP_SendOnePacketWithSocket_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_11_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: %s failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_19();
}

void _VTP_UpdateIDSDatagramOptionWithChannelDataFormat_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Option cannot be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VTP_ReportIDSOnTheWireBytesLocked_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_11_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: %s: datagramOptions is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_19();
}

void _VTP_ReportIDSOnTheWireBytesLocked_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_11_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VTP/VTransport.m:%d: %s: connectionManager is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_19();
}

void _VTP_ProcessPacketForDirectIDSDataPath_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Parameter packet must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VTP_ProcessPacketForSharedIDSDataPath_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Parameter packet must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAVFoundationCapture_ConvertPixelFormat_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCAVFoundationCapture_ConvertPixelFormat";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTPixelTransferSessionTransferImage failed: status=%d", v2, *(const char **)v3, (unint64_t)"_VCAVFoundationCapture_ConvertPixelFormat" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCAVFoundationCapture_ConvertPixelFormat_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CVPixelBufferPoolCreatePixelBuffer failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAVFoundationCapture_ProcessSampleBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d sampleBufferCopy is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAVFoundationCapture_ProcessSampleBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Pixel Buffer nil, dropping frame", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAVFoundationCapture_ProcessSampleBuffer_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d newResizedPixelBuffer failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAVFoundationCapture_ProcessSampleBuffer_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d No synchronizer available, attempting to attach meta data to pixel buffer for face rec", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAVFoundationCapture_ProcessSampleBuffer_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d No synchronizer available, No cached meta data, not attaching any meta data to pixel buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCRateControlAlgorithmTelephony_DoRateControl_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Unknown VCRateControl state=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCRateControlAlgorithmTelephony_DoRateControl_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Wrong statistics interfaceType=%d!", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCRateControlAlgorithmTelephony_DoRateControl_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d This algorithm does not support statistics type=%d to do rate control", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCBlockBufferUtlities_Create_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CMBlockBufferCreateWithMemoryBlock failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCBlockBufferUtlities_Create_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d FigMemoryPoolCreateBlockBuffer failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCBlockBufferUtlities_Create_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d FigMemoryPoolAllocatorCopyMemoryPool failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCBlockBufferUtilities_CreateAndGetDataPointer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CMBlockBufferGetDataPointer failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCBlockBufferUtilities_CreateAndGetDataPointer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCBlockBufferUtlities_Create failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSession_ReportingConfigurationCallback_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, "VCSession [%s] %s:%d Reporting is enabled", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSession_RemoteScreenAttributesDidChange_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCSession [%s] %s:%d vcSession is null", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNWConnectionMonitorUtils_GetRATFromNWNotification_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d notification is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNWConnectionMonitorUtils_GetSignalLevelFromNWNotification_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d notification is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNWConnectionMonitorUtils_GetNotificationFromAdvisory_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d notification is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNWConnectionMonitorUtils_GetNotificationFromAdvisory_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d advisory is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNWConnectionMonitorUtils_GetNotificationFromAdvisory_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Notification type sent in the interface advisory is not valid", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSystemAudioCaptureSession_audioSink_cold_1()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  uint8_t v3[12];
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  v4 = v0;
  v5 = "_VCSystemAudioCaptureSession_audioSink";
  v6 = 1024;
  v7 = 171;
  v8 = 2048;
  v9 = v1;
  _os_log_debug_impl(&dword_1D8A54000, v2, OS_LOG_TYPE_DEBUG, " [%s] %s:%d %p audio sink buffer received", v3, 0x26u);
  OUTLINED_FUNCTION_3();
}

void _VCConnectionIDS_IsOnSameInterfacesWithConnection_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCConnection: connection to check is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCConnectionIDS_IsOnSameInterfacesWithConnection_cold_2(uint64_t a1, char a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = 136315906;
  v4 = a1;
  v5 = 2080;
  v6 = "_VCConnectionIDS_IsOnSameInterfacesWithConnection";
  v7 = 1024;
  v8 = 484;
  v9 = 1024;
  v10 = a2 & 1;
  _os_log_debug_impl(&dword_1D8A54000, log, OS_LOG_TYPE_DEBUG, " [%s] %s:%d VCConnection: isOnSameInterfacesWithConnection: %{BOOL}d", (uint8_t *)&v3, 0x22u);
  OUTLINED_FUNCTION_3();
}

void _VCConnectionIDS_IsOnSameInterfacesWithConnection_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Different non-cell interface type", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCConnectionIDS_IsOnSameInterfacesWithConnection_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Different wired interface type", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCConnectionIDS_ReportingQRServerConfig_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d qrExperiment Dictionary=nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_Configure_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_Configure_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d configuration is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_Configure_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Could not initialize smart brake in rate control algorithm.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCRateControlAlgorithmStabilizedNOWRD_DoRateControl_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];

  OUTLINED_FUNCTION_8_0();
  *(_QWORD *)&v3[6] = "_VCRateControlAlgorithmStabilizedNOWRD_DoRateControl";
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d This algorithm does not support statistics type:%d to do rate control", v2, *(const char **)v3, (unint64_t)"_VCRateControlAlgorithmStabilizedNOWRD_DoRateControl" >> 16, 278);
  OUTLINED_FUNCTION_3();
}

void _VCRateControlAlgorithmStabilizedNOWRD_DoRateControl_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];

  OUTLINED_FUNCTION_8_0();
  *(_QWORD *)&v3[6] = "_VCRateControlAlgorithmStabilizedNOWRD_RunRateControlStateTransition";
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Unknown VCRateControl state %d", v2, *(const char **)v3, (unint64_t)"_VCRateControlAlgorithmStabilizedNOWRD_RunRateControlStateTransition" >> 16, 617);
  OUTLINED_FUNCTION_3();
}

void _VCRateControlAlgorithmStabilizedNOWRD_DoRateControl_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d media controller is required for VCRateControl", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_SetBitrateUnstable_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldRampDownDueToLocalRCEvent_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldRampDownDueToLocalRCEvent_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldRampDownDueToLocalRCEvent";
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d _bytesInFlightThreshold is 0 in algorithm=%p", v2, *(const char **)v3, (unint64_t)"VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldRampDownDueToLocalRCEvent" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldRampUpDueToLocalRCEvent_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldRampUpDueToLocalRCEvent_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldRampUpDueToLocalRCEvent";
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d _bytesInFlightThreshold is 0 in algorithm=%p", v2, *(const char **)v3, (unint64_t)"VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldRampUpDueToLocalRCEvent" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_RampDownTierDueToLocalRCEvent_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_UpdateBytesInFlightThreshold_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_DoRateControlWithNWStatistics_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_DoRateControlWithNWStatistics_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d statistics is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_DoRateControlWithNWStatistics_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d wrong type of statistics message is processed by VCRateControl WiFi", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_UpdateAlgorithmWithBasebandStatistics_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_UpdateAlgorithmWithBasebandStatistics_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d statistics is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_UpdateAlgorithmWithBasebandStatistics_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d statistics type is not for baseband", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_UpdateInternalStatistics_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_UpdateInternalStatistics_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d statistics is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_UpdateVCRateControlHistory_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldFastRampUp_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_RampDownTierDueToBaseband_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldRampUp_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldRampDown_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_UpdateSmartBrakeOutputWithVCRCStatistics_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_UpdateSmartBrakeOutputWithVCRCStatistics_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d statistics is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldRampDownDueToBaseband_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_ShouldRampUpDueToBaseband_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlAlgorithmStabilizedNOWRDPriv_BasebandAdditionalTiersForRampUp_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d algorithm is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaNegotiatorMediaType_StreamGroupIDFromMediaType_cold_1(uint64_t a1, int a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = 136315906;
  v4 = a1;
  v5 = 2080;
  v6 = "VCMediaNegotiatorMediaType_StreamGroupIDFromMediaType";
  v7 = 1024;
  v8 = 31;
  v9 = 1024;
  v10 = a2;
  _os_log_error_impl(&dword_1D8A54000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d Unexpected mediaType=%hhu", (uint8_t *)&v3, 0x22u);
}

void VCMediaNegotiatorMediaType_MediaTypeFromStreamGroupID_cold_1(uint64_t a1, int a2, NSObject *a3)
{
  int v4;
  uint64_t v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = 136315906;
  v5 = a1;
  v6 = 2080;
  v7 = "VCMediaNegotiatorMediaType_MediaTypeFromStreamGroupID";
  v8 = 1024;
  v9 = 68;
  v10 = 2080;
  v11 = FourccToCStr(a2);
  _os_log_error_impl(&dword_1D8A54000, a3, OS_LOG_TYPE_ERROR, " [%s] %s:%d Unexpected streamGroupID=%s", (uint8_t *)&v4, 0x26u);
}

void _VCSessionParticipantLocal_ProcessAudioSamples_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Object can't be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSessionParticipantLocal_ProcessAudioSamples_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d audio no-op no MKM", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSessionPartipantLocal_OnVideoFrame_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d video no-op no MKM", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSilencePredictor_Initialize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate the VCSilencePredictor memory", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSilencePredictor_Reset_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Silence predictor is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSilencePredictor_AddFrame_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Silence predictor is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSilencePredictor_PredictSilence_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Silence predictor is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCPacketFilterRTCPFinalize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Parameter 'filter' should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCPacketFilterRTCPFinalize_cold_2()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Object '%@' is not a valid VCPacketFilterRTCP");
  OUTLINED_FUNCTION_3();
}

void _VCPacketFilterRTCPCopyProperty_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Parameter 'filter' should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCPacketFilterRTCPCopyProperty_cold_2()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unsupported property '%@' requested");
  OUTLINED_FUNCTION_3();
}

void _VCPacketFilterRTCPSetProperty_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Parameter 'filter' should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCPacketFilterRTCPSetProperty_cold_2()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unsupported property '%@' requested");
  OUTLINED_FUNCTION_3();
}

void VCStatisticsCollectorQueue_DrainAndProcessAllStatistics_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Collector is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCStatisticsCollectorQueue_DrainAndProcessAllStatistics_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d This should be called only with _shouldProcessMessageOnExternalThread is true", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCStatisticsCollectorQueue_FlushAllStatistics_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Collector is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCTimescalePSOLA_Accelerate_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  v4 = 2080;
  v5 = "VCTimescalePSOLA_Accelerate";
  v6 = 1024;
  v7 = 135;
  _os_log_error_impl(&dword_1D8A54000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Signal Correlation check failed", (uint8_t *)&v2, 0x1Cu);
}

void VCTimescalePSOLA_Accelerate_cold_2(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *(__int16 *)(a2 + 66);
  v4 = 136315906;
  v5 = a1;
  v6 = 2080;
  v7 = "VCTimescalePSOLA_Accelerate";
  v8 = 1024;
  v9 = 113;
  v10 = 1024;
  v11 = v3;
  _os_log_debug_impl(&dword_1D8A54000, log, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Accelerate buffer  inputBufferLength=%d", (uint8_t *)&v4, 0x22u);
}

void VCFramingOverheadCalculationUtils_PerPacketMediaFramingOverheadWithRTPHandle_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  v4 = 2080;
  v5 = "VCFramingOverheadCalculationUtils_PerPacketMediaFramingOverheadWithRTPHandle";
  v6 = 1024;
  v7 = 21;
  _os_log_error_impl(&dword_1D8A54000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d framingOverhead pointer cannot be NULL", (uint8_t *)&v2, 0x1Cu);
}

void VCAudioCaptionsBufferInfoCollection_AddBufferInfo_cold_1(uint64_t a1, uint64_t *a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = 136315906;
  v5 = a1;
  v6 = 2080;
  v7 = "VCAudioCaptionsBufferInfoCollection_AddBufferInfo";
  v8 = 1024;
  v9 = 193;
  v10 = 2048;
  v11 = v3;
  _os_log_error_impl(&dword_1D8A54000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d Could not create buffer info for captionsToken=%ld", (uint8_t *)&v4, 0x26u);
  OUTLINED_FUNCTION_3();
}

void VCPixelTransferSession_TransferPixelBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d sourcePixelBuffer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCPixelTransferSession_TransferPixelBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d destinationPixelBuffer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCPixelTransferSession_TransferPixelBuffer_cold_3()
{
  __int16 v0;
  int v1;
  os_log_t v2;
  uint8_t v3[12];
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  v4 = v0;
  v5 = "VCPixelTransferSession_TransferPixelBuffer";
  v6 = 1024;
  v7 = 49;
  v8 = 1024;
  v9 = v1;
  _os_log_error_impl(&dword_1D8A54000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d VTPixelTransferSessionTransferImage failed %d", v3, 0x22u);
  OUTLINED_FUNCTION_3();
}

void _VCCaptionsStream_DidReceiveSampleBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCVideoStream: null object was passed to DidReceiveSampleBuffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCCaptionsStream_DidReceiveSampleBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Error creating NSData from sample buffer for captions.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCCaptionsStream_DidReceiveSampleBuffer_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Error getting block buffer from metadata sample buffer!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _AVCStreamInput_ComputeStats_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;
  int v4;
  const void *v5;
  const char *v6;

  v2 = 136316162;
  OUTLINED_FUNCTION_8_6();
  OUTLINED_FUNCTION_8_8();
  OUTLINED_FUNCTION_8_16();
  OUTLINED_FUNCTION_6_1(&dword_1D8A54000, v0, v1, "AVCStreamInput [%s] %s:%d streamInput=%p AVCStreamInputID=%s sample buffer time is invalid", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_19();
}

void VCVideoStreamRateAdaptationFeedbackOnly_SetDidReceiveVideo_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid parameter. rateAdaptation is nil!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCScreenCaptureManager_SharedInstance_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create VCScreenCaptureManager", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAllocatorFirstCome_Create_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Allocator out pointer is NULL", v2, v3, v4, v5, 2u);
}

void VCAllocatorFirstCome_Create_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  FourccToCStr(1852663149);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_6_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create allocator info: %s", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3_0();
}

void VCAllocatorFirstCome_Create_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate allocator info", v2, v3, v4, v5, 2u);
}

void VCAllocatorFirstCome_Create_cold_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  FourccToCStr(0);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_6_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create allocator info: %s", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3_0();
}

void VCRemoteVideoManager_DidReceiveFirstRemoteFrameForStreamToken_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCRemoteVideoManager.m:%d: VCRemoteVideoManager: null object was passed to DidReceiveFirstRemoteFrameForStreamToken", v2);
  OUTLINED_FUNCTION_3();
}

void VCRemoteVideoManager_RemoteScreenAttributesDidChange_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCRemoteVideoManager.m:%d: VCRemoteVideoManager: null object was passed to RemoteScreenAttributesDidChange", v2);
  OUTLINED_FUNCTION_3();
}

void VCRemoteVideoManager_RemoteVideoAttributesDidChange_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCRemoteVideoManager.m:%d: VCRemoteVideoManager: null object was passed to RemoteVideoAttributesDidChange", v2);
  OUTLINED_FUNCTION_3();
}

void networkProc_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d simulator is NULL!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_GetCipherSuite_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d cryptor should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_ComposeSFrameHeaderWithCounterAndMKI_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d buffer must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_ComposeSFrameHeaderWithCounterAndMKI_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d bufferSize must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_ComposeSFrameHeaderWithCounterAndMKI_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d buffer is too small", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_ComposeSFrameHeaderWithCounterAndMKI_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d keyMaterialIndex must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_ParseSFrameHeader_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d buffer must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_ParseSFrameHeader_cold_2()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[24];
  int v3;
  __int16 v4;
  int v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  v3 = 210;
  v4 = v0;
  v5 = 1;
  v6 = 2048;
  v7 = 0;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Wrong size of input SFrame header: expected=%d, received=%zu", v2, 0x2Cu);
}

void VCCryptor_ParseSFrameHeader_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d frameMKI must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_ParseSFrameHeader_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d activeCounter must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_ParseSFrameHeader_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d headerSize must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_ParseSFrameHeader_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d SFrame signatureFlag must not be set", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_ParseSFrameHeader_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d SFrame kidExtentionFlag must be set", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_ParseSFrameHeader_cold_8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d SFrame header is bigger than output buffer size", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_ParseSFrameHeader_cold_9()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Could not create SFrame MKI", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCCryptor_ValidateAuthenticationTag_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d encryptedDataSize is too small", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_Create_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d cryptor should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_Create_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d keyHolder should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_Create_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d cipherSuitepe parameter has wrong value", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_Create_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d encryptionLabel should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_Create_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Create instance failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_Encrypt_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CMBlockBuffer is not contiguous", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_Encrypt_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCCryptor_ComposeSFrameHeaderWithCounterAndMKI failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_Encrypt_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CCCryptorUpdate failed to encryp data", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_Encrypt_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CMBlockBufferGetDataPointer failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_Encrypt_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CCCryptorReset failed to reset cryptor", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_Encrypt_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCCryptor_ComposeSFrameHeaderWithCounterAndMKI failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_Encrypt_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CMBlockBufferGetDataPointer failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_Encrypt_cold_8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CMBlockBufferCreateWithMemoryBlock failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_Encrypt_cold_9()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d _VCCryptor_DeriveIV failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_Encrypt_cold_10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed due to encryption material not being ready", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_Encrypt_cold_11()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed due to invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCCryptor_ValidateCryptographyInputParameters_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d cryptor should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCCryptor_ValidateCryptographyInputParameters_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d input buffer should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCCryptor_ValidateCryptographyInputParameters_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d output buffer should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCCryptor_ValidateCryptographyInputParameters_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  int v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "_VCCryptor_ValidateCryptographyInputParameters";
  OUTLINED_FUNCTION_4();
  v4 = 304;
  v5 = 2048;
  v6 = 0;
  OUTLINED_FUNCTION_11(&dword_1D8A54000, v0, v1, " [%s] %s:%d inputBuffer contains incorrect data size '%zu'", v2);
  OUTLINED_FUNCTION_3();
}

void _VCCryptor_EnsureCryptorIsReady_cold_1(uint64_t a1, void *a2, NSObject *a3)
{
  uint64_t v4;
  uint8_t v5[40];

  OUTLINED_FUNCTION_11_12(a2, *MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10_10();
  OUTLINED_FUNCTION_11(&dword_1D8A54000, a3, v4, " [%s] %s:%d VCSecurityKeyHolder_CopyKeyMaterialForKeyIndex failed, MKI=%s", v5);
  OUTLINED_FUNCTION_3_0();
}

void _VCCryptor_EnsureCryptorIsReady_cold_2(uint64_t a1, void *a2, NSObject *a3)
{
  uint64_t v4;
  uint8_t v5[40];

  OUTLINED_FUNCTION_11_12(a2, *MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10_10();
  OUTLINED_FUNCTION_11(&dword_1D8A54000, a3, v4, " [%s] %s:%d Key material with MKI=%s is not ready yet", v5);
  OUTLINED_FUNCTION_3_0();
}

void _VCCryptor_EnsureCryptorIsReady_cold_3()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d _VCCryptor_SetupCryptor failed for key material '%@'");
  OUTLINED_FUNCTION_3();
}

void _VCCryptor_EnsureCryptorIsReady_cold_4()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid key material received '%@'");
  OUTLINED_FUNCTION_3();
}

void _VCCryptor_EnsureCryptorIsReady_cold_5()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid key material received '%@'");
  OUTLINED_FUNCTION_3();
}

void _VCCryptor_EnsureCryptorIsReady_cold_6()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid key material received '%@'");
  OUTLINED_FUNCTION_3();
}

void _VCCryptor_EnsureCryptorIsReady_cold_7()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid key material received '%@'");
  OUTLINED_FUNCTION_3();
}

void _VCCryptor_EnsureCryptorIsReady_cold_8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CCCryptorCreateWithMode failed to creae cryptor", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCCryptor_EnsureCryptorIsReady_cold_9()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to derive authentication key with key material '%@'");
  OUTLINED_FUNCTION_3();
}

void _VCCryptor_EnsureCryptorIsReady_cold_10()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to derive salt key with key material '%@'");
  OUTLINED_FUNCTION_3();
}

void _VCCryptor_EnsureCryptorIsReady_cold_11()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to derive encryption key with key material '%@'");
  OUTLINED_FUNCTION_3();
}

void _VCCryptor_EnsureCryptorIsReady_cold_12()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to derive secret key with key material '%@'");
  OUTLINED_FUNCTION_3();
}

void _VCCryptor_EnsureCryptorIsReady_cold_13()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid key material received '%@'");
  OUTLINED_FUNCTION_3();
}

void _VCCryptor_EnsureCryptorIsReady_cold_14(uint64_t a1, void *a2, NSObject *a3)
{
  uint64_t v4;
  uint8_t v5[40];

  OUTLINED_FUNCTION_11_12(a2, *MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10_10();
  OUTLINED_FUNCTION_11(&dword_1D8A54000, a3, v4, " [%s] %s:%d VCSecurityKeyHolder_CopyKeyMaterialForKeyIndex failed, MKI=%s", v5);
  OUTLINED_FUNCTION_3_0();
}

void _VCCryptor_EnsureCryptorIsReady_cold_15()
{
  os_log_t v0;
  uint8_t v1[24];
  int v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  v2 = 420;
  _os_log_debug_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Cryptor is valid, nothing to do here", v1, 0x1Cu);
  OUTLINED_FUNCTION_3();
}

void _VCCryptor_EnsureCryptorIsReady_cold_16()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCSecurityKeyHolder_RegisterForKeyMaterialChangeNotification failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCCryptor_DeriveIV_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d iv should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_Decrypt_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CMBlockBuffer is not contiguous", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_Decrypt_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCCryptor_Decrypt failed due to invalid SFrame", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_Decrypt_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCCryptor_Decrypt failed authenticate incoming frame", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_Decrypt_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCSecurityKeyHolder_AssociateKeyIndex failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_Decrypt_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CCCryptorUpdate failed to encryp data", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_Decrypt_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CCCryptorReset failed to reset cryptor", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_Decrypt_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CMBlockBufferGetDataPointer failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_Decrypt_cold_8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CMBlockBufferCreateWithMemoryBlock failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_Decrypt_cold_9()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d _VCCryptor_DeriveIV failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_Decrypt_cold_10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCCryptor_Decrypt failed due to invalid SFrame", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_Decrypt_cold_11()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CMBlockBufferGetDataPointer failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_Decrypt_cold_12()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCCryptor_Decrypt failed due to invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_GetEncryptedBufferSize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d cryptor should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCCryptor_GetEncryptedBufferSize_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d output buffer size param is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCMediaStream_DefaultTransport_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaStream [%s] %s:%d _transportArray is empty, and we are trying to get the default transport, which does not exist.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaStreamFillMediaControlInfoCallback_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_8_12();
  if (OUTLINED_FUNCTION_11_13(*MEMORY[0x1E0C80C00]))
    objc_msgSend((id)objc_msgSend((id)OUTLINED_FUNCTION_17_0(), "description"), "UTF8String");
  OUTLINED_FUNCTION_6_9();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_9_7();
  OUTLINED_FUNCTION_3_4(&dword_1D8A54000, v0, v1, "VCMediaStream [%s] %s:%d %s[%p] Failed to fill the media control info", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_9_1();
}

void VCMediaStreamProcessMediaControlInfoCallback_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_8_12();
  if (OUTLINED_FUNCTION_11_13(*MEMORY[0x1E0C80C00]))
    objc_msgSend((id)objc_msgSend((id)OUTLINED_FUNCTION_17_0(), "description"), "UTF8String");
  OUTLINED_FUNCTION_6_9();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_9_7();
  OUTLINED_FUNCTION_3_4(&dword_1D8A54000, v0, v1, "VCMediaStream [%s] %s:%d %s[%p] Failed to process transport media control info", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_9_1();
}

void VCMediaStreamProcessMediaControlInfoCallback_cold_2()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_8_12();
  if (OUTLINED_FUNCTION_11_13(*MEMORY[0x1E0C80C00]))
    objc_msgSend((id)objc_msgSend((id)OUTLINED_FUNCTION_17_0(), "description"), "UTF8String");
  OUTLINED_FUNCTION_6_9();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_9_7();
  OUTLINED_FUNCTION_3_4(&dword_1D8A54000, v0, v1, "VCMediaStream [%s] %s:%d %s[%p] Failed to process the probing control info", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_9_1();
}

void VCMediaStreamProcessMediaControlInfoCallback_cold_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_8_12();
  if (OUTLINED_FUNCTION_11_13(*MEMORY[0x1E0C80C00]))
    objc_msgSend((id)objc_msgSend((id)OUTLINED_FUNCTION_17_0(), "description"), "UTF8String");
  OUTLINED_FUNCTION_6_9();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_9_7();
  OUTLINED_FUNCTION_3_4(&dword_1D8A54000, v0, v1, "VCMediaStream [%s] %s:%d %s[%p] Failed to process feedback control info", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_9_1();
}

void VCVideoHardwareDumpCollector_CreateHeadersFromCArray_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL C headers array", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoHardwareDumpCollector_CreateHeadersFromCArray_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create mutable header array", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoHardwareDumpCollector_CreateHeadersFromCArray_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate header string", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCVideoHardwareDumpCollector_DumpFrame_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate format generator", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoHardwareDumpCollector_RecordResizeForEncoder_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Received nil dump collector", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoHardwareDumpCollector_RecordResizeForEncoder_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Missing frame data", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoHardwareDumpCollector_RecordEncoderBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Received nil dump collector", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoHardwareDumpCollector_RecordEncoderBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Missing frame data", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoHardwareDumpCollector_RecordEncodedFrame_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Received nil dump collector", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoHardwareDumpCollector_RecordEncodedFrame_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Missing frame data", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoHardwareDumpCollector_RecordDecodedFrame_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Received nil dump collector", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoHardwareDumpCollector_RecordDecodedFrame_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Missing frame data", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoHardwareDumpCollector_RecordActiveCaptureDevice_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Received nil dump collector", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoHardwareDumpCollector_RecordActiveCaptureDevice_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Missing frame data", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void Throttling_MediaQueue_SetAudioInterval_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[14];
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_8_0();
  v3 = "Throttling_MediaQueue_SetAudioInterval";
  v4 = 1024;
  v5 = 1114;
  v6 = 2048;
  v7 = v0;
  _os_log_debug_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_DEBUG, " [%s] %s:%d MediaQueue_Throttling_SetAudioInterval: %f", v2, 0x26u);
  OUTLINED_FUNCTION_3();
}

void Throttling_MediaQueue_SetIsIPv6_cold_1(uint64_t a1, uint64_t a2, NSObject *a3)
{
  _BYTE v3[22];

  *(_DWORD *)v3 = 136315906;
  *(_QWORD *)&v3[4] = a1;
  *(_WORD *)&v3[12] = 2080;
  *(_QWORD *)&v3[14] = "Throttling_MediaQueue_SetIsIPv6";
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, a2, a3, " [%s] %s:%d MediaQueue_Throttling_SetIsIPv6: %d ", *(const char **)v3, *(const char **)&v3[8], (unint64_t)"Throttling_MediaQueue_SetIsIPv6" >> 16, 1121);
  OUTLINED_FUNCTION_3();
}

void Throttling_AFRC_GetDefaults_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = 136316418;
  v3 = a1;
  v4 = 2080;
  v5 = "Throttling_AFRC_GetDefaults";
  v6 = 1024;
  v7 = 1500;
  v8 = 1024;
  v9 = _MergedGlobals;
  v10 = 1024;
  v11 = byte_1ED10CDE9;
  v12 = 1024;
  v13 = g_bThrottlingProbeSeqLog;
  _os_log_debug_impl(&dword_1D8A54000, a2, OS_LOG_TYPE_DEBUG, " [%s] %s:%d g_bThrottlingSendLog: %d  g_bThrottlingRecvLog: %d  g_bThrottlingProbeSeqLog: %d ", (uint8_t *)&v2, 0x2Eu);
}

void Throttling_AFRC_GetDefaults_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];

  OUTLINED_FUNCTION_8_0();
  *(_QWORD *)&v3[6] = "Throttling_AFRC_GetDefaults";
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d Throttling: %d ", v2, *(const char **)v3, (unint64_t)"Throttling_AFRC_GetDefaults" >> 16, 1480);
  OUTLINED_FUNCTION_3();
}

void DTLS_SocketWrite_cold_1(uint64_t a1, uint64_t *a2, NSObject *a3)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = *__error();
  v7 = *a2;
  v8 = 136316162;
  v9 = a1;
  v10 = 2080;
  v11 = "DTLS_SocketWrite";
  v12 = 1024;
  v13 = 187;
  v14 = 1024;
  v15 = v6;
  v16 = 1024;
  v17 = v7;
  _os_log_error_impl(&dword_1D8A54000, a3, OS_LOG_TYPE_ERROR, " [%s] %s:%d SECURETRANSPORT WRITE FAILED -1 errno: %d (%d bytes)...", (uint8_t *)&v8, 0x28u);
}

void DTLS_Cleanup_cold_1()
{
  __int16 v0;
  int v1;
  os_log_t v2;
  uint8_t v3[24];
  int v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  v4 = 325;
  v5 = v0;
  v6 = v1;
  _os_log_debug_impl(&dword_1D8A54000, v2, OS_LOG_TYPE_DEBUG, " [%s] %s:%d DTLS_Cleanup done on handle %d", v3, 0x22u);
  OUTLINED_FUNCTION_3();
}

void DTLS_Handshake_cold_1(uint64_t a1)
{
  os_log_t v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  OUTLINED_FUNCTION_1();
  v4 = 466;
  _os_log_debug_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_DEBUG, " [%s] %s:%d SECURETRANSPORT FAILED...", (uint8_t *)&v2, 0x1Cu);
  OUTLINED_FUNCTION_3();
}

void DTLS_Handshake_cold_2(uint64_t a1, char a2, os_log_t log)
{
  const char *v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = "OK";
  v5 = a1;
  v4 = 136315906;
  v7 = "DTLS_Handshake";
  v6 = 2080;
  v8 = 1024;
  v9 = 463;
  if ((a2 & 1) != 0)
    v3 = "NO";
  v10 = 2080;
  v11 = v3;
  _os_log_debug_impl(&dword_1D8A54000, log, OS_LOG_TYPE_DEBUG, " [%s] %s:%d SECURETRANSPORT SETUP %s...", (uint8_t *)&v4, 0x26u);
  OUTLINED_FUNCTION_3();
}

void DTLS_Read_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d SSLRead failed with status:%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void DTLS_Read_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to retrieve output data pointer with status:%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void DTLS_Read_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate the output data pointer with status:%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void DTLS_Read_cold_4(uint64_t a1)
{
  os_log_t v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  OUTLINED_FUNCTION_1();
  v4 = 574;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to retrieve input data pointer", (uint8_t *)&v2, 0x1Cu);
  OUTLINED_FUNCTION_3();
}

void HandleWRMEvent_cold_1()
{
  __int16 v0;
  __int16 v1;
  uint64_t v2;
  os_log_t v3;
  uint8_t v4[12];
  __int16 v5;
  int v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  v5 = v0;
  OUTLINED_FUNCTION_4_0();
  v6 = 82;
  v7 = v1;
  v8 = 82;
  v9 = 2048;
  v10 = v2;
  _os_log_error_impl(&dword_1D8A54000, v3, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/WRMClient.m:%d: WRMClient: invalid configuration event with kMessageID %llu.", v4, 0x2Cu);
}

void VCCreateVFDForIDS_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  v4 = 2080;
  v5 = "VCCreateVFDForIDS";
  v6 = 1024;
  v7 = 101;
  _os_log_error_impl(&dword_1D8A54000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d NULL vfd", (uint8_t *)&v2, 0x1Cu);
  OUTLINED_FUNCTION_3();
}

void VCCreateVFDForIDS_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_SocketForIDS failed %x", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCCreateVFDForIDS_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_SetSocketMode failed %x", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCCreateVFDForIDS_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_SetPktType failed %x", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCBasebandNotificationParser_ParseNotification_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d Corrupted baseband notification. Length[%d] < needed[%d]", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCBasebandNotificationParser_ParseNotification_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_9();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d Corrupted baseband notification ACK packet. Length[%d] < needed[%d]", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCBasebandNotificationParser_ParseNotification_cold_3()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[24];
  int v3;
  __int16 v4;
  int v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  v3 = 99;
  v4 = v0;
  v5 = 99;
  v6 = v0;
  v7 = 6;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCBasebandNotificationParser.c:%d: Got PTs more than VC_BBNOTE_MAX_PAYLOAD_TYPES (%d) in a DropACK", v2, 0x28u);
  OUTLINED_FUNCTION_3();
}

void VCBasebandNotificationParser_ParseNotification_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d Corrupted baseband notification packet (cookie). Length[%d] < needed[%d]", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCBasebandNotificationParser_ParseNotification_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_9();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d Corrupted baseband notification codec rate change packet. Length[%d] < needed[%d]", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCBasebandNotificationParser_ParseNotification_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d Corrupted baseband notification report packet. Length[%d] < needed[%d]", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCPacketFilterBBNotificationFinalize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Parameter 'filter' should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCPacketFilterBBNotificationFinalize_cold_2()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Object '%@' is not a valid VCPacketFilterBasebandNotification");
  OUTLINED_FUNCTION_3();
}

void _VCPacketFilterBBNotificationCopyProperty_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Parameter 'filter' should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCPacketFilterBBNotificationCopyProperty_cold_2()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unsupported property '%@' requested");
  OUTLINED_FUNCTION_3();
}

void _VCPacketFilterBBNotificationSetProperty_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Parameter 'filter' should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCPacketFilterBBNotificationSetProperty_cold_2()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unsupported property '%@' requested");
  OUTLINED_FUNCTION_3();
}

void VCImageResizingConverter_CreateResizedPixelBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d _transferSession is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCImageResizingConverter_CreateResizedPixelBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d _bufferPool is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCImageResizingConverter_CreateResizedPixelBuffer_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCImageResizingConverter_CreateResizedPixelBuffer";
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTPixelTransferSessionTransferImage failed: %d", v2, *(const char **)v3, (unint64_t)"VCImageResizingConverter_CreateResizedPixelBuffer" >> 16, 59);
  OUTLINED_FUNCTION_3();
}

void VCImageResizingConverter_CreateResizedPixelBuffer_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CVPixelBufferPoolCreatePixelBuffer failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCImageResizingConverter_CreateSampleBufferWithNewTiming_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Input sample buffer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCImageResizingConverter_CreateSampleBufferWithNewTiming_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCImageResizingConverter_CreateSampleBufferWithNewTiming";
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d CMSampleBufferCreateCopyWithNewTiming failed with error=%d", v2, *(const char **)v3, (unint64_t)"_VCImageResizingConverter_CreateSampleBufferWithNewTiming" >> 16, 79);
  OUTLINED_FUNCTION_3();
}

void VCMicrophonePreferencesAVAS_BuiltInMicPortDescriptionFromSelectableInputsArray_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_10();
  OUTLINED_FUNCTION_6_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d selectableInputs is invalid=%p", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMicrophonePreferencesAVAS_DataSourcesFromPortDescription_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_10();
  OUTLINED_FUNCTION_6_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d builtInMicPort invalid=%p", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMicrophonePreferencesAVAS_ApplyMicrophonePreferences_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_10();
  OUTLINED_FUNCTION_6_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d selectedInputDict [%p] == nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCViewpointCorrection_CorrectViewpoint_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate the view point correction parameter dictionary", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCViewpointCorrection_CorrectViewpoint_cold_2()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  const char *v3;
  _BYTE v4[14];

  OUTLINED_FUNCTION_2();
  *(_WORD *)&v4[4] = v0;
  *(_QWORD *)&v4[6] = "VCViewpointCorrection_CorrectViewpoint";
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v1, v2, " [%s] %s:%d CVAViewpointCorrectProcess failed: %d", v3, *(const char **)v4, (unint64_t)"VCViewpointCorrection_CorrectViewpoint" >> 16, 320);
  OUTLINED_FUNCTION_3();
}

void VCViewpointCorrection_CorrectViewpoint_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate fx", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCViewpointCorrection_CorrectViewpoint_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate fy", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCViewpointCorrection_CorrectViewpoint_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate cx", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCViewpointCorrection_CorrectViewpoint_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allcoate zero", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCViewpointCorrection_CorrectViewpoint_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate one", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCViewpointCorrection_CorrectViewpoint_cold_8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate row0", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCViewpointCorrection_CorrectViewpoint_cold_9()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate row1", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCViewpointCorrection_CorrectViewpoint_cold_10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate row2", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCViewpointCorrection_CorrectViewpoint_cold_11()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate intrinisc array", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSecurityKeyHolder_CopyKeyManager_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d keyHolder should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSecurityKeyHolder_SecurityKeyMode_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d keyHolder should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSecurityKeyHolder_Create_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d keyHolder should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSecurityKeyHolder_Create_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d keyManager should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSecurityKeyHolder_Create_cold_3()
{
  int v0;
  os_log_t v1;
  uint8_t v2[14];
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "VCSecurityKeyHolder_Create";
  v4 = 1024;
  v5 = 152;
  v6 = 1024;
  v7 = v0;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d usage has invalid value '%d'", v2, 0x22u);
  OUTLINED_FUNCTION_3();
}

void VCSecurityKeyHolder_Create_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid securityKeyMode", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSecurityKeyHolder_Create_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Create instance failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSecurityKeyHolder_CopyKeyMaterialForKeyIndex_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d keyHolder should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSecurityKeyHolder_CopyKeyMaterialForKeyIndex_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d MKMList should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSecurityKeyHolder_CopyKeyMaterialForKeyIndex_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Immutable instance does not have key manager", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSecurityKeyHolder_RegisterForKeyMaterialChangeNotification_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d keyHolder should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSecurityKeyHolder_RegisterForKeyMaterialChangeNotification_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Can not set key material change notification handler for immutable instance of VCSecurityKeyholder", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSecurityKeyHolder_KeyMaterialCallback_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[14];
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "_VCSecurityKeyHolder_KeyMaterialCallback";
  v4 = 1024;
  v5 = 109;
  v6 = 2112;
  v7 = v0;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Wrong notification received from VCSecurityKeyManager : '%@'", v2, 0x26u);
  OUTLINED_FUNCTION_3();
}

void VCSecurityKeyHolder_AssociateKeyIndex_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d keyHolder should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSecurityKeyHolder_AssociateKeyIndex_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d keyIndex should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCDTMFToneGenerator_Reinit_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Received Invalid DTMF eventType=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCDTMFToneGenerator_Reinit_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Received Invalid powerLevel=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCDTMFToneGenerator_Reinit_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Received Invalid sampleRate=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCDTMFToneGenerator_GenerateSamples_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[24];
  int v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  v3 = 222;
  v4 = 2048;
  v5 = v0;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d VCDTMFToneGenerator[%p] not initialized", v2, 0x26u);
  OUTLINED_FUNCTION_3();
}

void VCAudioFrameDelay_Create_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d settings not specified", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioFrameDelay_Create_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d output pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioFrameDelay_Create_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Create instance failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioFrameDelay_Create_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d [%p] Failed to setup the audio frames", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioFrameDelay_Create_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d [%p] Failed to setup the audio frames", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioFrameDelay_Create_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d [%p] Failed to allocate the audio frame", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioFrameDelay_PullAudioSamples_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d [%p] Failed to allocate the audio frame", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioFrameDelay_PullAudioSamples_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d [%p] Unable to shrink the frame delay since there's currently no delay", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioFrameDelay_UpdateDelay_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Audio frame delay object is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioFrameDelay_RemoveDelayFrame_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d [%p] Frame cannot be removed NULL frame", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCAudioFrameDelay_RemoveDelayFrame_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d [%p] Frame cannot be removed from empty list", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCAudioFrameDelay_RemoveDelayFrame_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d [%p] Cannot remove frame that isn't in the list", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCAudioFrameDelay_AllocateDelayFrame_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d [%p] Failed to allocate the delay frame", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCAudioFrameDelay_AllocateDelayFrame_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d [%p] Failed to allocate the frame info", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCAudioFrameDelay_AllocateDelayFrame_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d [%p] Failed to allocate the audio buffer", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCAudioFrameDelay_InsertDelayFrame_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d [%p] Frame cannot be insert NULL frame", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCAudioFrameDelay_InsertDelayFrame_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d [%p] Cannot insert frame that is already in the list", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCSignalErrorAt_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  v4 = 2080;
  v5 = "VCSignalErrorAt";
  v6 = 1024;
  v7 = 23;
  _os_log_error_impl(&dword_1D8A54000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to create formattedArguments", (uint8_t *)&v2, 0x1Cu);
}

void VCSignalErrorAt_cold_2(uint64_t a1, uint64_t *a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = 136315906;
  v5 = a1;
  v6 = 2080;
  v7 = "VCSignalErrorAt";
  v8 = 1024;
  v9 = 25;
  v10 = 2080;
  v11 = v3;
  _os_log_error_impl(&dword_1D8A54000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d %s", (uint8_t *)&v4, 0x26u);
}

void VCAudioIssueDetector_Create_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCAudioIssueDetector creation failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetector_Create_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unknown issue detector type", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetector_Create_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate the audio issue detector", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetector_Create_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate the utils for receiver issue detector", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetector_Finalize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Audio issue detector ref is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetector_Finalize_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Audio issue detector is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetector_Configure_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Audio issue detector is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetector_Configure_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCAudioIssueDetector_Configure";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_7_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCAudioIssueDetector=%p configured", v2, *(const char **)v3, (unint64_t)"VCAudioIssueDetector_Configure" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetector_UpdateConnectionType_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Audio issue detector is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetector_UpdateConnectionType_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCAudioIssueDetector_UpdateConnectionType";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_7_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCAudioIssueDetector=%p link type updated", v2, *(const char **)v3, (unint64_t)"VCAudioIssueDetector_UpdateConnectionType" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetector_ProcessCellularNetworkNotification_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Audio issue detector is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetector_ProcessCellularNetworkNotification_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCAudioIssueDetector_ProcessCellularNetworkNotification";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_7_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCAudioIssueDetector=%p NW notification received", v2, *(const char **)v3, (unint64_t)"VCAudioIssueDetector_ProcessCellularNetworkNotification" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetector_Start_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Audio issue detector is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetector_Start_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCAudioIssueDetector_Start";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_7_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCAudioIssueDetector=%p started", v2, *(const char **)v3, (unint64_t)"VCAudioIssueDetector_Start" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetector_Stop_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Audio issue detector is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetector_Stop_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCAudioIssueDetector_Stop";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_7_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCAudioIssueDetector=%p stopped", v2, *(const char **)v3, (unint64_t)"VCAudioIssueDetector_Stop" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetector_ReportRTPTraffic_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Audio issue detector is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetector_ReportRTCPTraffic_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Audio issue detector is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioIssueDetector_FlushLogEvents_cold_1()
{
  os_log_t v0;
  uint8_t v1[14];
  const char *v2;
  int v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "VCAudioIssueDetector_FlushLogEvents";
  OUTLINED_FUNCTION_4();
  v3 = 194;
  v4 = 2048;
  v5 = 0;
  _os_log_error_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid parameter issueDetector=%p", v1, 0x26u);
  OUTLINED_FUNCTION_3();
}

void VCFFTMeter_Create_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate the FFT meter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFFTMeter_Create_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate the FFT", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFFTMeter_Create_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate the first come allocator", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCPacketFilterRTPFinalize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Parameter 'filter' should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCPacketFilterRTPFinalize_cold_2()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Object '%@' is not a valid VCPacketFilterRTP");
  OUTLINED_FUNCTION_3();
}

void _VCPacketFilterRTPCopyProperty_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Parameter 'filter' should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCPacketFilterRTPCopyProperty_cold_2()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unsupported property '%@' requested");
  OUTLINED_FUNCTION_3();
}

void _VCPacketFilterRTPSetProperty_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Parameter 'filter' should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCPacketFilterRTPSetProperty_cold_2()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_10_2();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unsupported property '%@' requested");
  OUTLINED_FUNCTION_3();
}

void _VCXPCConnection_timeoutHandlerFunc_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "AVConferenceXPCServer [%s] %s:%d ##### XPC Call timeout event", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_Create_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Metadata address is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_Create_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Max channel count is 0", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_Create_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d SPI pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_Create_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate the metadata", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_Create_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate the metadata entries", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_Create_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Core audio metadata is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_Create_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Metadata serialized size is 0", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_Create_cold_8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create serialized buffer header allocator", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_Create_cold_9()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create serialized buffer allocator", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_Create_cold_10()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to retrieve spatial metadata serialized size. error=%u", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_Create_cold_11()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create the CoreAudio spatial metadata. error=%u", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_CreateEntry_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Metadata entry address is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_CreateEntry_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Metadata is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_CreateEntry_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Reached max number of entries", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_CreateEntry_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d No more available metadata entries", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_ChannelIndex_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Entry is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_ChannelIndex_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Metadata is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_ChannelIndex_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Positional info is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_SpatialAudioSourceID_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d spatialAudioSourceID is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_SpatialAudioSourceID_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Entry is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_SpatialAudioSourceID_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Metadata is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_UpdateGlobalInfo_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Metadata is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_UpdateGlobalInfo_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid global info", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_UpdateGlobalInfo_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid display width", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_UpdateGlobalInfo_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid display height", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_UpdateGlobalInfo_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid window width", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_UpdateGlobalInfo_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid window height", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_UpdateGlobalInfo_cold_7()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];

  OUTLINED_FUNCTION_8_0();
  *(_QWORD *)&v3[6] = "VCSpatialAudioMetadata_UpdateGlobalInfo";
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid uiState=%u", v2, *(const char **)v3, (unint64_t)"VCSpatialAudioMetadata_UpdateGlobalInfo" >> 16, 287);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_UpdateGlobalInfo_cold_8()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];

  OUTLINED_FUNCTION_8_0();
  *(_QWORD *)&v3[6] = "VCSpatialAudioMetadata_UpdateGlobalInfo";
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid uiLayout=%u", v2, *(const char **)v3, (unint64_t)"VCSpatialAudioMetadata_UpdateGlobalInfo" >> 16, 288);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_UpdateOrientation_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Metadata is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_UpdateOrientation_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid orientation=%u", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_UpdatePositionalInfo_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Entry is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_UpdatePositionalInfo_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Metadata is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_UpdatePositionalInfo_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Positional info is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_Serialize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d serializedBuffer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_Serialize_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Metadata is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_Serialize_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to set the buffer size", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_Serialize_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to serialize the metadata", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCSpatialAudioMetadata_SetNeedsRefresh_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Metadata is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSpatialAudioMetadata_Finalize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Metadata is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSpatialAudioMetadata_Finalize_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d The metadata still has an active channel. Unable to release the metadata", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSpatialAudioMetadataEntry_Finalize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Metadata entry is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSpatialAudioMetadataEntry_Finalize_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Metadata is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSpatialAudioMetadataEntry_Finalize_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Channel is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCTimescalePSOLA_CheckforSignalCorrelation_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  v4 = 2080;
  v5 = "VCTimescalePSOLA_CheckforSignalCorrelation";
  v6 = 1024;
  v7 = 387;
  _os_log_error_impl(&dword_1D8A54000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Down sample coarse correlation failed", (uint8_t *)&v2, 0x1Cu);
}

void VCRemoteImageQueue_CreateSenderQueueWithPoolSize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Passed in NULL for remoteImageQueue", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRemoteImageQueue_CreateSenderQueueWithPoolSize_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate remoteImageQueue", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRemoteImageQueue_CreateSenderQueueWithPoolSize_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unable to create FigRemoteQueueSender err=%d", v2, v3, v4, 52);
  OUTLINED_FUNCTION_3();
}

void VCRemoteImageQueue_CreateSenderQueueWithPoolSize_cold_4()
{
  __int16 v0;
  int v1;
  os_log_t v2;
  uint8_t v3[24];
  int v4;
  __int16 v5;
  int v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  v4 = 55;
  v5 = v0;
  v6 = 2000;
  v7 = v0;
  v8 = v1;
  _os_log_error_impl(&dword_1D8A54000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Could not set maximum buffer age=%d err=%d", v3, 0x28u);
  OUTLINED_FUNCTION_3();
}

void VCRemoteImageQueue_CreateSenderQueueWithPoolSize_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Could not create the shared memory pool for the new VCRemoteImageQueue sender returning NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRemoteImageQueue_CreateReceiverQueue_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Could not allocate space for the new VCRemoteImageQueue receiver, returning NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRemoteImageQueue_CreateReceiverQueue_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unable to create FigRemoteQueueReceiver", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRemoteImageQueue_CreateReceiverQueue_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unable to create FigRemoteQueueReceiverHandler", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRemoteImageQueue_CreateReceiverQueue_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Passed in NULL sender queue or NULL remoteImageQueue to the Receiver create.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRemoteImageQueue_EnqueueFrame_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Error occurred when sending the video frame. err=%d", v2, v3, v4, 167);
  OUTLINED_FUNCTION_3();
}

void VCAudioDump_Create_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Parameter passed is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioDump_Create_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate memory for audio dump", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioDump_Create_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate memory for audio dump packet", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioDump_CreateFile_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d ExtAudioFileWriteAsync failed with error=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCAudioDump_CreateFile_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d ExtAudioFileWrapAudioFileID failed with error=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCAudioDump_CreateFile_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d AudioFileCreateWithURL failed with error=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayerDTMF_Initialize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create the float converter", v2, v3, v4, v5, 2u);
}

void VCAudioPlayerDTMF_Initialize_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create the tone generator", v2, v3, v4, v5, 2u);
}

void _VCAudioPlayerDTMF_ShouldPurgeJitterQueue_cold_1(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 32);
  v4 = 136316418;
  v5 = a1;
  v6 = 2080;
  v7 = "_VCAudioPlayerDTMF_ShouldPurgeJitterQueue";
  v8 = 1024;
  v9 = 114;
  v10 = 2048;
  v11 = a2;
  v12 = 1024;
  v13 = v3;
  v14 = 1024;
  v15 = 1;
  _os_log_debug_impl(&dword_1D8A54000, log, OS_LOG_TYPE_DEBUG, " [%s] %s:%d VCAudioPlayerDTMF[%p] Should Purge re-transmitted end events, eventTimeStamp=%d, result=%d", (uint8_t *)&v4, 0x32u);
}

void VCTransportStreamCommonCopyProperty_cold_1()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  uint8_t v3[12];
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  v4 = v0;
  v5 = "VCTransportStreamCommonCopyProperty";
  v6 = 1024;
  v7 = 91;
  v8 = 2112;
  v9 = v1;
  _os_log_error_impl(&dword_1D8A54000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Unsupported property '%@' requested", v3, 0x26u);
  OUTLINED_FUNCTION_3();
}

void VCTransportStreamCommonSetSendFailedHandler_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL sendFailedHandler", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCTransportStreamCommonSetSendFailedHandler_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d sendFailedHandler can only be set in created state", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCTransportStreamCommonSetReceivedHandler_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL receivedHandler", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCTransportStreamCommonSetReceivedHandler_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d receivedHandler can only be set in created state", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCBlockBuffer_Copy_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  v4 = 2080;
  v5 = "VCBlockBuffer_Copy";
  v6 = 1024;
  v7 = 17;
  _os_log_error_impl(&dword_1D8A54000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Attempt to copy a block buffer to an NULL poiner", (uint8_t *)&v2, 0x1Cu);
}

void VCMediaRecorderUtil_CreateResizeFrame_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d , transferSession is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaRecorderUtil_CreateResizeFrame_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d , bufferPool is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaRecorderUtil_CreateResizeFrame_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d , VTPixelTransferSessionTransferImage failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaRecorderUtil_CreateResizeFrame_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d , CVPixelBufferPoolCreatePixelBuffer failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoStreamReceiveGroup_UpdateSourcePlayoutTime_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Receiver group is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoStreamReceiveGroup_UpdateSourcePlayoutTime_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Playout time is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCPacketBundler_CleanupCDRXInfo_cold_1()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[24];
  int v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  v3 = 62;
  v4 = 2048;
  v5 = v0;
  OUTLINED_FUNCTION_11(&dword_1D8A54000, v1, (uint64_t)v1, " [%s] %s:%d cdrxInfo=[%p]", v2);
  OUTLINED_FUNCTION_3();
}

void VCPacketBundler_BundleAudio_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d : bundler can't mix payload types", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPacketBundler_UpdatePriority_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];
  int v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  v3 = 432;
  v4 = 2048;
  v5 = 0;
  OUTLINED_FUNCTION_11(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL access: packetBundler=[%p]", v2);
  OUTLINED_FUNCTION_3();
}

void VCPacketBundler_StoreAndEnqueueCdrxInfo_cold_1(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 144);
  v4 = 136316162;
  v5 = a1;
  v6 = 2080;
  v7 = "VCPacketBundler_StoreAndEnqueueCdrxInfo";
  v8 = 1024;
  v9 = 530;
  v10 = 2048;
  v11 = a2;
  v12 = 2048;
  v13 = v3;
  _os_log_error_impl(&dword_1D8A54000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d NULL access: packetBundler=[%p], packetBundler->_cdrxBundleInfoRef=[%p]", (uint8_t *)&v4, 0x30u);
}

void VCPacketBundler_StoreAndEnqueueCdrxInfo_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Cdrx event queue enqueue failed with error=%d", v2, v3, v4, 549);
  OUTLINED_FUNCTION_3();
}

void VCVideoCaptureServer_OnCaptureVideoFrame_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCVideoCaptureServer [%s] %s:%d captureSource must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoCaptureServer_ApplyPressureLevelChanges_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCVideoCaptureServer [%s] %s:%d captureSource must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoCaptureServer_CopyLocalVideoAttributes_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCVideoCaptureServer [%s] %s:%d captureServer must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCVideoCaptureServer_ProcessPreviewSampleBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCVideoCaptureServer [%s] %s:%d VCImageQueue is nil!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCVideoCaptureServer_ProcessPreviewSampleBuffer_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCVideoCaptureServer [%s] %s:%d Invalid camera, _currentVideoSourceToken=0x%x", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCVideoCaptureServer_ProcessPreviewSampleBuffer_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  int v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "_VCVideoCaptureServer_EnqueueFrameToQueueFront";
  OUTLINED_FUNCTION_4();
  v4 = 1580;
  v5 = 2048;
  v6 = 0x4024000000000000;
  OUTLINED_FUNCTION_11(&dword_1D8A54000, v0, v1, "VCVideoCaptureServer [%s] %s:%d VCVideoCaptureServer: KILLING PREVIEW after %g seconds of faltered rendering", v2);
  OUTLINED_FUNCTION_3();
}

void _VCMediaQueue_GetInternalQueueIndexFromStreamId_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d internalQueueIndex should not be NULL!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCMediaQueue_GetInternalQueueIndexFromStreamId_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d isRTXStream should not be TRUE", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueue_FreeMediaPacket_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d VCMediaQueue is null", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueue_FreeMediaPacket_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCMediaQueue_FreeMediaPacket";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Media packets are drained from the busy pool of mediaQueueStreamId=%u out of order!", v2, *(const char **)v3, (unint64_t)"VCMediaQueue_FreeMediaPacket" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCMediaQueue_SchedulePackets_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Unknown schedule policy %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCMediaQueue_SchedulePacketsWithLimitedBudget_cold_1()
{
  os_log_t v0;
  uint8_t v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  _os_log_debug_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_DEBUG, "VCMediaQueue [%s] %s:%d Starting budget in this interval: %d", v1, 0x22u);
  OUTLINED_FUNCTION_3();
}

void _VCMediaQueue_ScheduleThrottlingQueuesAndReduceRemainingBudget_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Schedule policy %d should not reach here!", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCMediaQueue_ScheduleFramesFromThrottlingQueue_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCMediaQueue_ScheduleFramesFromThrottlingQueue";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Failed to add packet to bundler! status=%d", v2, *(const char **)v3, (unint64_t)"_VCMediaQueue_ScheduleFramesFromThrottlingQueue" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCMediaQueue_SendAndFreePackets_cold_1()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[14];
  const char *v3;
  __int16 v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "_VCMediaQueue_SendAndFreePackets";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  v4 = v0;
  v5 = 30;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, "VCMediaQueue [%s] %s:%d Datagram count %d is larger than VTP max compound packet datagram count %d", v2, 0x28u);
  OUTLINED_FUNCTION_3();
}

void _VCMediaQueue_SendAndFreePackets_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Failed to encrypt/authenticate packet. Dropping packet...", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCMediaQueue_SendAndFreePackets_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d encyptedPayloadOffset must not be 0", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCMediaQueue_SendAndFreePackets_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Deferred encryption and authentication was requested but securityCallback is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCMediaQueue_SendAndFreePackets_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Deferred encryption and authentication was requested but securityCallbackContext is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCMediaQueue_SendAndFreePackets_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCMediaQueue_ProcessDeferredEncryptionAndAuthentication";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Security callback failed with result=%08X", v2, *(const char **)v3, (unint64_t)"_VCMediaQueue_ProcessDeferredEncryptionAndAuthentication" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCMediaQueue_SendAndFreePackets_cold_7()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Not sending the malformatted packet out from VCMediaQueue! with timestamp=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCMediaQueue_RateStats_TrackMediaPacket_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d mediaPacket or rateStats cannot be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCMediaQueue_PreAllocVCMediaPacketsInFreePool_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Out of memory when creating CMBlockBuffer!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCMediaQueue_PreAllocVCMediaPacketsInFreePool_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCMediaQueue_PreAllocVCMediaPacketsInFreePool";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Failed to enqueue! status: %d", v2, *(const char **)v3, (unint64_t)"_VCMediaQueue_PreAllocVCMediaPacketsInFreePool" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCMediaQueue_CreateInternalQueue_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Out of memory when creating internal queues!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCMediaQueue_CreateInternalQueue_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCMediaQueue_CreateInternalQueue";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Error from _VCMediaQueue_PreAllocVCMediaPacketsInFreePool, result %x", v2, *(const char **)v3, (unint64_t)"_VCMediaQueue_CreateInternalQueue" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCMediaQueue_DestroyInternalQueuePool_cold_1(uint64_t a1, CMSimpleQueueRef queue, NSObject *a3)
{
  __int16 v6;
  int v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  const char *v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  CMSimpleQueueRef v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  CMSimpleQueueGetCount(queue);
  v8 = 136316162;
  v9 = a1;
  v10 = 2080;
  v11 = "_VCMediaQueue_DestroyInternalQueuePool";
  OUTLINED_FUNCTION_4();
  v12 = 1597;
  v13 = v6;
  v14 = v7;
  v15 = 2048;
  v16 = queue;
  _os_log_debug_impl(&dword_1D8A54000, a3, OS_LOG_TYPE_DEBUG, "VCMediaQueue [%s] %s:%d count=%d in pool=%p", (uint8_t *)&v8, 0x2Cu);
}

void VCMediaQueue_Create_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Number of internal queues are set too large", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueue_Create_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Not enough memory to create run time instance", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueue_Create_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Failed to create internal thread", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueue_Create_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d VCMediaQueue IN/OUT RealTime stats cannot be malloced", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueue_Create_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Failed to reserve RTX queue", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueue_Create_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Failed to create packet bundler", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueue_Create_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Not enough memory to create internal queues", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueue_Create_cold_8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Not enough memory to create main queue", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueue_SetAudioStallBasebandFlushState_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d mediaQueue cannot be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueue_SetAudioStallBasebandFlushState_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Cannot set audio stall state to flush baseband other than in oneToOne mode!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueue_AllocMediaPacket_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCMediaQueue_AllocMediaPacket";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Cannot get internal queue index for mediaQueueStreamId=%u", v2, *(const char **)v3, (unint64_t)"VCMediaQueue_AllocMediaPacket" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueue_AllocMediaPacket_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCMediaQueue_AllocMediaPacket";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Cannot get media packet from its pool for mediaQueueStreamId=%u", v2, *(const char **)v3, (unint64_t)"VCMediaQueue_AllocMediaPacket" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueue_AllocMediaPacket_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCMediaQueue_AllocMediaPacket";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Failed to enqueue! status: %d", v2, *(const char **)v3, (unint64_t)"VCMediaQueue_AllocMediaPacket" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueue_AllocMediaPacket_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCMediaQueue_AllocMediaPacket";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Failed to get internal queue index for mediaQueueStreamId=%u", v2, *(const char **)v3, (unint64_t)"VCMediaQueue_AllocMediaPacket" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueue_AddPacket_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCMediaQueue_ProcessAudioPacketsForBasebandQueuing";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Cannot issue audio flush to baseband using VCMediaQueue result=%x", v2, *(const char **)v3, (unint64_t)"_VCMediaQueue_ProcessAudioPacketsForBasebandQueuing" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueue_AddPacket_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCMediaQueue_AddPacket";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Add media packet for an unknown packet type %d", v2, *(const char **)v3, (unint64_t)"VCMediaQueue_AddPacket" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueue_FlushPacketsInStream_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCMediaQueue_FlushPacketsInStream";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Cannot get internal queue index for mediaQueueStreamId=%u", v2, *(const char **)v3, (unint64_t)"VCMediaQueue_FlushPacketsInStream" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueue_SetMediaQueueSizeThresholdExceededBlock_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Callback is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueue_ComputeOneToOneStatsWithPacketInfo_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d mediaQueue cannot be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueue_ComputeOneToOneStatsWithPacketInfo_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d VCMediaQueue is not in the oneToOne mode yet", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueue_TrafficMetricFromMediaQueueTxHistory_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d Passed mediaQueue is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaQueue_BasebandFlushAcked_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaQueue [%s] %s:%d mediaQueue cannot be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVirtualHardwareConfigurations_DevicePlatform_cold_1(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = 136315906;
  v4 = a1;
  v5 = 2080;
  v6 = "VCVirtualHardwareConfigurations_DevicePlatform";
  v7 = 1024;
  v8 = 62;
  v9 = 2112;
  v10 = a2;
  _os_log_error_impl(&dword_1D8A54000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to find platform for device=%@", (uint8_t *)&v3, 0x26u);
}

void VCVirtualHardwareConfigurations_DevicePlatform_cold_2(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  v4 = 2080;
  v5 = "VCVirtualHardwareConfigurations_DevicePlatform";
  v6 = 1024;
  v7 = 63;
  _os_log_error_impl(&dword_1D8A54000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Bad lookup - device listed on both platforms", (uint8_t *)&v2, 0x1Cu);
}

void statsReceiveProc_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d statsController is NULL!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void statsReceiveProc_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Receive packet from transport stream fails!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSessionStatsController_HandleRemoteSessionStats_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid remoteSessionStats", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSessionStatsController_HandleRemoteSessionStats_cold_2(uint64_t a1, unsigned __int16 *a2, os_log_t log)
{
  int v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = 136315906;
  v5 = a1;
  v6 = 2080;
  v7 = "_VCSessionStatsController_HandleRemoteSessionStats";
  v8 = 1024;
  v9 = 418;
  v10 = 1024;
  v11 = v3;
  _os_log_debug_impl(&dword_1D8A54000, log, OS_LOG_TYPE_DEBUG, " [%s] %s:%d statsID is same as the previous one %u", (uint8_t *)&v4, 0x22u);
  OUTLINED_FUNCTION_3();
}

void _VCCannedAudioInjector_AudioConverterInput_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d ioNumberDataPackets is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCCannedAudioInjector_AudioConverterInput_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Converter is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCCannedAudioInjector_AudioConverterInput_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d ioData is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCCannedAudioInjector_AudioConverterInput_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d inUserData is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioUnit_NewInstance_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  v4 = 2080;
  v5 = "VCAudioUnit_NewInstance";
  v6 = 1024;
  v7 = 47;
  _os_log_error_impl(&dword_1D8A54000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Dynamic ducker component not found.", (uint8_t *)&v2, 0x1Cu);
}

void VCAudioUnit_NewInstance_cold_2(uint64_t a1, int a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = 136315906;
  v4 = a1;
  v5 = 2080;
  v6 = "VCAudioUnit_NewInstance";
  v7 = 1024;
  v8 = 52;
  v9 = 1024;
  v10 = a2;
  _os_log_error_impl(&dword_1D8A54000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to create a dynamic ducker instance err=%d", (uint8_t *)&v3, 0x22u);
}

void VCRateControlSmartBrake_ResetState_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d smartBrake is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlSmartBrake_ResetState_cold_2()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  const char *v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  v3 = v0;
  v4 = "VCRateControlSmartBrake_ResetState";
  v5 = 1024;
  OUTLINED_FUNCTION_10_2();
  v6 = 2048;
  v7 = 0;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d %@(%p) smartBrake is NULL", v2, 0x30u);
}

void VCMediaStreamSynchronizer_updateDestinationNTPTime_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaStreamSynchronizer [%s] %s:%d synchronizer=nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaStreamSynchronizer_scheduleDestinationPlaybackWithRTPTimestamp_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaStreamSynchronizer [%s] %s:%d synchronizer=nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaStreamSynchronizer_resetDestinationState_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaStreamSynchronizer [%s] %s:%d synchronizer=nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaStreamSynchronizer_setDestinationAlarmHandler_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaStreamSynchronizer [%s] %s:%d synchronizer=nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCMediaStreamSynchronizer_sourceRTPTimestampFromDestinationRTPTimestampInternal_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCMediaStreamSynchronizer_sourceRTPTimestampFromDestinationRTPTimestampInternal";
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_7_4(&dword_1D8A54000, v0, v1, "VCMediaStreamSynchronizer [%s] %s:%d VCMediaStreamSynchronizer[%p]: source info not ready", v2, *(const char **)v3, (unint64_t)"_VCMediaStreamSynchronizer_sourceRTPTimestampFromDestinationRTPTimestampInternal" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCMediaStreamSynchronizer_sourceRTPTimestampFromDestinationRTPTimestampInternal_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCMediaStreamSynchronizer_sourceRTPTimestampFromDestinationRTPTimestampInternal";
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_7_4(&dword_1D8A54000, v0, v1, "VCMediaStreamSynchronizer [%s] %s:%d VCMediaStreamSynchronizer[%p]: destination info not ready", v2, *(const char **)v3, (unint64_t)"_VCMediaStreamSynchronizer_sourceRTPTimestampFromDestinationRTPTimestampInternal" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCMediaStreamSynchronizer_setSourcePlayoutTimeUpdatedHandler_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCMediaStreamSynchronizer [%s] %s:%d synchronizer is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRealTimeThread_Initialize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate real time thread", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRealTimeThread_Initialize_cold_2()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[24];
  int v3;
  __int16 v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  v3 = 86;
  v4 = v0;
  v5 = 86;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCRealTimeThread.c:%d: Failed to start the thread", v2, 0x22u);
  OUTLINED_FUNCTION_3();
}

void VCRealTimeThread_ChangeState_cold_1()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_14_6();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x28u);
  OUTLINED_FUNCTION_3();
}

void VCRealTimeThread_ChangeState_cold_2()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  OUTLINED_FUNCTION_14_6();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x22u);
  OUTLINED_FUNCTION_3();
}

void VCRealTimeThread_Finalize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d called with NULL context!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRealTimeThread_Start_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d called with NULL context!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRealTimeThread_Stop_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d called with NULL context!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRealTimeThread_ThreadProc_cold_1()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_14_6();
  _os_log_error_impl(v0, v1, v2, v3, v4, 0x2Eu);
}

void VCStreamInputUtil_EncodeFormatDescription_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d dictXPCObj returned NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCStreamInputUtil_EncodeFormatDescription_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to add the format description", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_AddFormatDescription_cold_1(uint64_t a1, int a2, NSObject *a3)
{
  uint64_t v4;
  uint8_t v5[40];

  OUTLINED_FUNCTION_8_11(a2, *MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10_10();
  OUTLINED_FUNCTION_11(&dword_1D8A54000, a3, v4, " [%s] %s:%d Unsupported mediaType=%s", v5);
  OUTLINED_FUNCTION_3_0();
}

void _VCStreamInputUtil_AddFormatDescription_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create XPC object for the format extensions", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_AddFormatDescription_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create XPC object for height", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_AddFormatDescription_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create XPC object for width", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_AddFormatDescription_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unable to extract audio stream basic description from formatDescription", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_AddFormatDescription_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d dataXPCObj is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_AddFormatDescription_cold_7(uint64_t a1, int a2, NSObject *a3)
{
  uint64_t v4;
  uint8_t v5[40];

  OUTLINED_FUNCTION_8_11(a2, *MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10_10();
  OUTLINED_FUNCTION_11(&dword_1D8A54000, a3, v4, " [%s] %s:%d Failed to create XPC object for mediaType=%s", v5);
  OUTLINED_FUNCTION_3_0();
}

void _VCStreamInputUtil_AddFormatDescription_cold_8(uint64_t a1, int a2, NSObject *a3)
{
  uint64_t v4;
  uint8_t v5[40];

  OUTLINED_FUNCTION_8_11(a2, *MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10_10();
  OUTLINED_FUNCTION_11(&dword_1D8A54000, a3, v4, " [%s] %s:%d Failed to create XPC object for mediaType=%s", v5);
  OUTLINED_FUNCTION_3_0();
}

void VCStreamInputUtil_EncodeSampleBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d pixelBuffer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCStreamInputUtil_EncodeSampleBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d dictXPCObj returned NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCStreamInputUtil_EncodeSampleBuffer_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CVPixelBufferGetIOSurface returned NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCStreamInputUtil_EncodeSampleBuffer_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d IOSurfaceCreateXPCObject returned NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCStreamInputUtil_EncodeSampleBuffer_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to add format", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCStreamInputUtil_EncodeSampleBuffer_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to add time info", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCStreamInputUtil_EncodeSampleBuffer_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to encode audio sample buffer for XPC", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCStreamInputUtil_EncodeSampleBuffer_cold_8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to add sample count to XPC dictionary for audio sample buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_EncodeDataSampleBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d dataBlock is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_EncodeDataSampleBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d dataLength is 0", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_EncodeDataSampleBuffer_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d temp buffer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_EncodeDataSampleBuffer_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d rootData is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_EncodeDataSampleBuffer_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d formatDescription is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_EncodeDataSampleBuffer_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d dictXPCObj is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_EncodeDataSampleBuffer_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d dataXPCObj is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_EncodeDataSampleBuffer_cold_8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d formatDescription is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_EncodeDataSampleBuffer_cold_9()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to add time info", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_EncodeDataSampleBuffer_cold_10()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCStreamInputUtil_EncodeDataSampleBuffer";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to copy data bytes status=%d", v2, *(const char **)v3, (unint64_t)"_VCStreamInputUtil_EncodeDataSampleBuffer" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCStreamInputUtil_DecodeFormatDescription_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCStreamInputUtil_DecodeVideoFormat";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create format description. status=%d", v2, *(const char **)v3, (unint64_t)"_VCStreamInputUtil_DecodeVideoFormat" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCStreamInputUtil_DecodeFormatDescription_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to read extensions", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCStreamInputUtil_DecodeFormatDescription_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to read the height", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCStreamInputUtil_DecodeFormatDescription_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to read the width", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCStreamInputUtil_DecodeFormatDescription_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to read the pixel format", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCStreamInputUtil_DecodeFormatDescription_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCStreamInputUtil_DecodeMetaDataFormat";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create format description. status=%d", v2, *(const char **)v3, (unint64_t)"_VCStreamInputUtil_DecodeMetaDataFormat" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCStreamInputUtil_DecodeFormatDescription_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to read extensions", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCStreamInputUtil_DecodeFormatDescription_cold_8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to read the pixel format", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCStreamInputUtil_DecodeFormatDescription_cold_9()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCStreamInputUtil_DecodeAudioFormat";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d xpc_data_get_bytes returned an unexpected size=%d for the audio format", v2, *(const char **)v3, (unint64_t)"_VCStreamInputUtil_DecodeAudioFormat" >> 16, 395);
  OUTLINED_FUNCTION_3();
}

void VCStreamInputUtil_DecodeFormatDescription_cold_10()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to read the media type", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_ReadUint32Value_cold_1()
{
  NSObject *v0;
  uint8_t v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_7_12();
  OUTLINED_FUNCTION_11(&dword_1D8A54000, v0, (uint64_t)v0, " [%s] %s:%d XPC object not found for %s", v1);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_ReadUint32Value_cold_2()
{
  NSObject *v0;
  uint8_t v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_7_12();
  OUTLINED_FUNCTION_11(&dword_1D8A54000, v0, (uint64_t)v0, " [%s] %s:%d Failed to create number ref for %s", v1);
  OUTLINED_FUNCTION_3();
}

void VCStreamInputUtil_DecodeSampleBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Incompatible media type", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCStreamInputUtil_DecodeSampleBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to retrieve the pixel buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCStreamInputUtil_DecodeSampleBuffer_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to retrieve the format description", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCStreamInputUtil_DecodeSampleBuffer_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to decode audio sample buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCStreamInputUtil_DecodeSampleBuffer_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to read the audio sample count", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCStreamInputUtil_DecodeSampleBuffer_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to read the media type", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_DecodeDataSampleBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to decode the block buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_DecodeDataSampleBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Data is missing in XPC dictionary", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_DecodeDataSampleBuffer_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to retrieve data buffer from XPC dictionary", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_DecodeDataSampleBuffer_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to decode the format description", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_DecodeDataSampleBuffer_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to decode the time", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_DecodeDataSampleBuffer_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCStreamInputUtil_DecodeBlockBuffer";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unexpected data length=%d", v2, *(const char **)v3, (unint64_t)"_VCStreamInputUtil_DecodeBlockBuffer" >> 16, 368);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_DecodeDataSampleBuffer_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate temporary buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_DecodeDataSampleBuffer_cold_8()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCStreamInputUtil_DecodeBlockBuffer";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Error creating CMBlockBufferRef from CFData. status=%d", v2, *(const char **)v3, (unint64_t)"_VCStreamInputUtil_DecodeBlockBuffer" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_AddUint32Value_cold_1()
{
  NSObject *v0;
  uint8_t v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_7_12();
  OUTLINED_FUNCTION_11(&dword_1D8A54000, v0, (uint64_t)v0, " [%s] %s:%d Failed to allocate value ref for %s", v1);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_AddUint32Value_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create XPC object for media type", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_EncodeSampleBufferAttachments_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Could not encode CMSampleBuffer attachments", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_AddTime_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CMSampleBuffer time returned NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_AddTime_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d timeXPCObj returned NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputUtil_DecodeSampleBufferAttachments_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to decode samplebuffer attachments", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlBandwidthEstimator_SetRadioAccessTechnology_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_10();
  OUTLINED_FUNCTION_6_5(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. estimator=%p", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlBandwidthEstimator_SetEstimatedBandwidth_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_10();
  OUTLINED_FUNCTION_6_5(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. estimator=%p", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlBandwidthEstimator_SetFastSuddenBandwidthDetectionEnabled_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_10();
  OUTLINED_FUNCTION_6_5(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. estimator=%p", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlBandwidthEstimator_CalculateBandwidthEstimation_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_10();
  OUTLINED_FUNCTION_6_5(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. estimator=%p", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlBandwidthEstimator_CalculateBandwidthEstimationForBandwidthSample_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_10();
  OUTLINED_FUNCTION_6_5(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. estimator=%p", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlBandwidthEstimatorMap_BandwidthEstimator_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_10();
  OUTLINED_FUNCTION_6_5(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. estimatorMap=%p", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlBandwidthEstimatorMap_DeregisterBandwidthEstimator_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_10();
  OUTLINED_FUNCTION_6_5(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. estimatorMap=%p", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlBandwidthEstimatorMap_EstimatedBandwidthWithArrivalTime_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_10();
  OUTLINED_FUNCTION_6_5(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. estimatorMap=%p", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlBandwidthEstimatorMap_EstimatedBandwidthUncappedWithArrivalTime_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_10();
  OUTLINED_FUNCTION_6_5(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. estimatorMap=%p", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlBandwidthEstimatorMap_SetEstimatedBandwidth_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_10();
  OUTLINED_FUNCTION_6_5(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. estimatorMap=%p", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlBandwidthEstimatorMap_SetRadioAccessTechnology_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_10();
  OUTLINED_FUNCTION_6_5(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. estimatorMap=%p", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlBandwidthEstimatorMap_SetFastSuddenBandwidthDetectionEnabled_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_10();
  OUTLINED_FUNCTION_6_5(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. estimatorMap=%p", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCRateControlBandwidthEstimatorMap_EnableBWELogDump_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_8_10();
  OUTLINED_FUNCTION_6_5(&dword_1D8A54000, v0, v1, "VCRC [%s] %s:%d Invalid parameter. estimatorMap=%p", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCFECHeader_WriteToBuffer_V0_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d buffer is not big enough", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCFECHeader_WriteToBuffer_V0_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d buffer is not big enough", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCFECHeader_WriteToBuffer_V0_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d buffer is not big enough", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCFECHeader_WriteToBuffer_V0_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_15_0(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_3_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d FEC header version not supported version=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCFECHeader_WriteToBuffer_V1_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d buffer is not big enough", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCFECHeader_WriteToBuffer_V1_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d buffer is not big enough", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCFECHeader_WriteToBuffer_V1_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_15_0(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_3_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d FEC header version not supported version=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCFECHeader_WriteToBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d output buffer pointer NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECHeader_WriteToBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d size pointer NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECHeader_WriteToBuffer_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_15_0(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_3_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid fec header version=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCFECHeader_WriteToBuffer_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_15_0(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_3_8();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d failed to write version specific fields version=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCTimescalePSOLA_PreEmptiveExpand_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  v4 = 2080;
  v5 = "VCTimescalePSOLA_PreEmptiveExpand";
  v6 = 1024;
  v7 = 147;
  _os_log_error_impl(&dword_1D8A54000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Signal Correlation check failed", (uint8_t *)&v2, 0x1Cu);
}

void VCAudioBufferAllocatorCreate_cold_1()
{
  os_log_t v0;
  uint8_t v1[14];
  const char *v2;
  __int16 v3;
  int v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "VCAudioBufferAllocatorCreate";
  v3 = 1024;
  v4 = 119;
  v5 = 2048;
  v6 = 0;
  _os_log_error_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid buffer size=%zu!", v1, 0x26u);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferAllocatorCreate_cold_2()
{
  os_log_t v0;
  uint8_t v1[14];
  const char *v2;
  __int16 v3;
  int v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "VCAudioBufferAllocatorCreate";
  v3 = 1024;
  v4 = 120;
  v5 = 1024;
  v6 = 0;
  _os_log_error_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d Invalid buffer count=%u!", v1, 0x22u);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferAllocatorCreate_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create the allocator info!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferAllocatorCreate_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate the context!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferAllocatorCleanupBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Audio buffer corruption!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCFECFeedbackAnalyzer_Configure_cold_1(uint64_t a1, double *a2, os_log_t log)
{
  float v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  double v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = 136315906;
  v5 = a1;
  v6 = 2080;
  v7 = "_VCFECFeedbackAnalyzer_Configure";
  v8 = 1024;
  v9 = 137;
  v10 = 2048;
  v11 = v3;
  _os_log_error_impl(&dword_1D8A54000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d levelMatchPercentile = %2.3f out of valid range", (uint8_t *)&v4, 0x26u);
  OUTLINED_FUNCTION_3();
}

void _VCFECFeedbackAnalyzer_Configure_cold_2(uint64_t a1, int *a2, os_log_t log)
{
  int v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = 136315906;
  v5 = a1;
  v6 = 2080;
  v7 = "_VCFECFeedbackAnalyzer_Configure";
  v8 = 1024;
  v9 = 138;
  v10 = 1024;
  v11 = v3;
  _os_log_error_impl(&dword_1D8A54000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d buffer size out of valid range bufferMaxSize = %d", (uint8_t *)&v4, 0x22u);
  OUTLINED_FUNCTION_3();
}

void VCFECFeedbackAnalyzer_Create_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL newInstance", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECFeedbackAnalyzer_Create_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL config", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECFeedbackAnalyzer_Create_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d allocate failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECFeedbackAnalyzer_Create_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d history buffer allocate failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECFeedbackAnalyzer_Create_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid configuration", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECFeedbackAnalyzer_ProcessFeedback_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECFeedbackAnalyzer_GetFECLevelVector_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECFeedbackAnalyzer_GetFECLevelVector_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL outputVector", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECFeedbackAnalyzer_GetFECLevelVector_cold_3()
{
  os_log_t v0;
  uint8_t v1[24];
  int v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  v2 = 478;
  _os_log_debug_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_DEBUG, " [%s] %s:%d output not ready", v1, 0x1Cu);
  OUTLINED_FUNCTION_3();
}

void VCFECFeedbackAnalyzer_GetVPLR_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL fecAnalyzer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCFECFeedbackAnalyzer_CleanHistory_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPProcessHEVCFragmentationHeader_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPLRP.c:%d: Invalid fragmentation unit length (%d)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPProcessHEVCFragmentationHeader_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPLRP.c:%d: Invalid fragmentation unit length (%d)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPProcessHEVCFragmentationHeader_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d Received decoding order is %hu", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPProcessHEVCPacket_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid data length. Length %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPProcessHEVCPacket_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid data length. Length %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPProcessHEVCPacket_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate the default header bytes", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPProcessHEVCPacket_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to append the default data", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPProcessHEVCPacket_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to append default header buffer. Status=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPProcessHEVCPacket_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d Received decoding order is %hu", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPProcessHEVCPacket_cold_7()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid data length. Length %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPProcessHEVCPacket_cold_8()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid data length. Length %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPProcessHEVCPacket_cold_9()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid data length. Length %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPProcessHEVCPacket_cold_10()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPLRP.c:%d: Invalid aggregation unit length (%d) for H264NALU_STAP_A packet, discarded.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPProcessHEVCPacket_cold_11()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate the HEVCNALU_AP header bytes", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPProcessHEVCPacket_cold_12()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to append the HEVCNALU_AP data", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPProcessHEVCPacket_cold_13()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to append HEVCNALU_AP header buffer. Status=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPProcessHEVCPacket_cold_14()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  const char *v3;
  const char *v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  LOWORD(v6) = 0;
  HIWORD(v6) = v0;
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v1, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/Others/RTPLRP.c:%d: Invalid fragmentation unit length (%d)", v3, v4, v5, 243, v6);
  OUTLINED_FUNCTION_3();
}

void RTPProcessHEVCPacket_cold_15()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to append the HEVCNALU_FU data", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPProcessHEVCPacket_cold_16()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d Received decoding order is %hu", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void RTPProcessHEVCPacket_cold_17()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate the HEVCNALU_FU header bytes", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void RTPProcessHEVCPacket_cold_18()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to append HEVCNALU_FU header buffer. Status=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_Allocate_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_Allocate_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate buffer list", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_ZeroMemory_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_InvalidateStats_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_ApplyGain_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_ApplyGain_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d No support for interleaved audio channels", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_Mix_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d No support for interleaved audio channels", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_Mix_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Formats don't match", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_Mix_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_MixToMono_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d No support for interleaved audio channels", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_MixToMono_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d No support for non Float formats", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_MixToMono_cold_3(uint64_t a1, uint64_t a2, NSObject *a3)
{
  _BYTE v3[22];

  *(_DWORD *)v3 = 136315906;
  *(_QWORD *)&v3[4] = a1;
  *(_WORD *)&v3[12] = 2080;
  *(_QWORD *)&v3[14] = "VCAudioBufferList_MixToMono";
  OUTLINED_FUNCTION_5(&dword_1D8A54000, a2, a3, " [%s] %s:%d Invalid number of source buffers, mNumberBuffers=%u", *(const char **)v3, *(const char **)&v3[8], (unint64_t)"VCAudioBufferList_MixToMono" >> 16, 327);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_MixToMono_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_AppendSamples_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unable to append all the source samples!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_AppendSamples_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_AppendSilence_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_AppendSilence_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unable to append all the source samples!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_ReplaceSamples_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_Shift_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_Convert_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCAudioBufferList_Convert";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d failed with %d", v2, *(const char **)v3, (unint64_t)"VCAudioBufferList_Convert" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_Convert_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferListConverterCallback_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d One of the pointers passed to AudioConverterInput callback is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_GetSampleFormat_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_GetAudioBufferList_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_GetSizedBufferAtIndex_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCAudioBufferList_GetSizedBufferAtIndex";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d invalid input parameter. Index=%u", v2, *(const char **)v3, (unint64_t)"VCAudioBufferList_GetSizedBufferAtIndex" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_Reset_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_ResetDataPointers_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_ResampleAppend_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d converter failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_InvalidateAveragePower_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_GetTimestamp_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_GetAudioTimestamp_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_GetHostTimeJumpSize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_GetHostTime_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_GetVoiceActivity_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_SetVoiceActivity_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_GetSampleCount_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_GetSampleCapacity_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_GetChannelCount_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_SetSilenceInQueue_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_IsSilenceInQueue_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_GetAveragePower_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_SetAveragePower_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_GetSerializedSize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_GetPriority_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_SetPriority_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_InvalidateNetworkTimestamp_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_SetNetworkTimestamp_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_GetNetworkTimestamp_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_GetVoiceProbability_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_SetVoiceProbability_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_CopySampleBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid sample buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_CopySampleBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid output sample buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioBufferList_CopySampleBuffer_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate the output sample buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNetworkAgentCell_AddCellularAssertion_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to overwrite network status bar icon", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNetworkAgentCell_RemoveCellularAssertion_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to remove overwrite network status bar icon", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioUnitMockMicThreadProc_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_6_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d AudioUnitMock Mic thread=%s terminated", v2, v3, v4, v5, v6);
}

void AUIOCreateHandle_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d AUIO=%p Failed to find component", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void AUIOCreateHandle_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/AUIO/AUIO.mm:%d: AudioUnitSetProperty failed(%X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void AUIOCreateHandle_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/AUIO/AUIO.mm:%d: AudioUnitSetProperty failed(%X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void AUIOCreateHandle_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/AUIO/AUIO.mm:%d: AudioUnitSetProperty failed(%X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void AUIOCreateHandle_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/AUIO/AUIO.mm:%d: AudioComponentInstanceNew failed(%X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _AUIOMicProc()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d getting called with no inRefCon!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d Corrupted metadata!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d AudioUnitComplexRender: error %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void AUIOSetupSystemAudioTap()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/AUIO/AUIO.mm:%d: System Audio Tap initalization failed(%X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void AUIOSetupRendererCallback()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/AUIO/AUIO.mm:%d: AudioUnitSetProperty failed(%X)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void AUIOSuspend_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d AUIO Unit is not found during reinitialization", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void AUIOSuspend_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d AudioUnitUninitialize failed(%d)", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void AUIOSuspend_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d AudioOutputUnitStop failed(%d)", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void AUIOResume_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/AUIO/AUIO.mm:%d: Failed to restart the packet thread result=%x", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void AUIOResume_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/AUIO/AUIO.mm:%d: AudioOutputUnitStart returned %d", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _AUIOStartPacketThread()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d Failed to create the packet thread. auio=%p", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d Packet thread is already running. auio=%p", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void AUIOSetupFormats_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d Failed to allocate the canned audio injector config", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void AUIOSetupFormats_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d Failed to allocate the canned audio injector", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void AUIOSetupFormats_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d AudioUnitGetProperty(MaximumMetadataByteSize) failed(%d)", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void AUIOSetupFormats_cold_4(uint64_t a1, int *a2, NSObject *a3)
{
  int v5;
  __int16 v6;
  __int16 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  FourccToCStr(*a2);
  v9 = 136316162;
  v10 = a1;
  v11 = 2080;
  OUTLINED_FUNCTION_9();
  v12 = 1619;
  v13 = v6;
  v14 = v5;
  v15 = v7;
  v16 = v8;
  _os_log_error_impl(&dword_1D8A54000, a3, OS_LOG_TYPE_ERROR, "AUIO [%s] %s:%d AudioUnitInitialize failed. err=%d (%s)", (uint8_t *)&v9, 0x2Cu);
}

void AUIOSetupFormats_cold_5()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  const char *v3;
  const char *v4;
  int v5;
  int v6;
  int v7;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  HIWORD(v7) = v0;
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v1, v2, "AUIO [%s] %s:%d AudioUnitSetProperty failed to set property kAUVoiceIOProperty_MuteOutput with error %08x %d", v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_3();
}

void AUIOSetupFormats_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d AudioUnitSetProperty(RequestMetadata) failed(%d)", v2, v3, v4, 1506);
  OUTLINED_FUNCTION_3();
}

void AUIOSetupFormats_cold_7()
{
  __int16 v0;
  __int16 v1;
  uint64_t v2;
  os_log_t v3;
  const char *v4;
  const char *v5;
  int v6;
  int v7;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  LOWORD(v7) = v0;
  HIWORD(v7) = v1;
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v2, v3, "AUIO [%s] %s:%d AudioUnitSetProperty failed to set property kAudioOutputUnitProperty_IOBufferDuration with error %08x %d", v4, v5, v6, 1551, v7);
  OUTLINED_FUNCTION_3();
}

void AUIOSetupFormats_cold_8()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;
  int v6;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_3_2(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/AUIO/AUIO.mm:%d: AudioUnitSetProperty(SpkrIn) failed(%d)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void AUIOSetupFormats_cold_9()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d AUIO=%p AudioUnitSetProperty(MicOut) Failed to allcoate the speaker audio buffer list", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void AUIOSetupFormats_cold_10()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d AUIO=%p Failed to allocate the mic sample buffer", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void AUIOSetupFormats_cold_11()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d AUIO=%p AudioUnitSetProperty(MicOut) Failed to allcoate the mic audio buffer list", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void AUIOSetSpatialMetadata_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d AudioUnitSetProperty(kAUVoiceIOProperty_SpatialMetadata) failed(%d)", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void AUIORegisterMutedTalkerNotificationEventListener_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d Failed to set mutedTalker notification err=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void AUIOSetDynamicDuckerVolume_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d AudioUnitSetParameter(kHALOutputParam_Volume) failed(%d)", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _AUIOSpkrProc()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d getting called with no inRefCon!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _AUIOSpkrProcGKS()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "AUIO [%s] %s:%d getting called with no inRefCon!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCNetworkUtils_ComposeMaxedOutIDSOverheadOptions_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d idsOptions must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSystemAudioCapture_handleInputBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_19_3();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d nil context", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSystemAudioCapture_handleInputBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_19_3();
  OUTLINED_FUNCTION_11_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d nil context", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSystemAudioCapture_handleInputBuffer_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d stopped processing audio packets", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCSystemAudioCapture_handleInputBuffer_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCSystemAudioCapture_UpdateAppendBuffer";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d append sample count %d", v2, *(const char **)v3, (unint64_t)"_VCSystemAudioCapture_UpdateAppendBuffer" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCSystemAudioCapture_handleInputBuffer_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCSystemAudioCapture_CopyOutputBufferNonInterFormat";
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d can not copy %d audio samples", v2, *(const char **)v3, (unint64_t)"_VCSystemAudioCapture_CopyOutputBufferNonInterFormat" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCSystemAudioCapture_handleInputBuffer_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCSystemAudioCapture_CopyOutputBufferNonInterFormat";
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_10_7(&dword_1D8A54000, v0, v1, " [%s] %s:%d can not copy %d audio samples", v2, *(const char **)v3, (unint64_t)"_VCSystemAudioCapture_CopyOutputBufferNonInterFormat" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCSystemAudioCapture_handleInputBuffer_cold_7()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCSystemAudioCapture_CopyOutputBufferInterFormat";
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d can not copy %d audio samples", v2, *(const char **)v3, (unint64_t)"_VCSystemAudioCapture_CopyOutputBufferInterFormat" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCSystemAudioCapture_handleInputBuffer_cold_8()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCSystemAudioCapture_CopyOutputBufferInterFormat";
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_10_7(&dword_1D8A54000, v0, v1, " [%s] %s:%d can not copy %d audio samples", v2, *(const char **)v3, (unint64_t)"_VCSystemAudioCapture_CopyOutputBufferInterFormat" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCSystemAudioCapture_handleInputBuffer_cold_9(uint64_t a1, uint64_t a2, NSObject *a3)
{
  __int16 v5;
  int v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  const char *v10;
  int v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  VCAudioBufferList_GetTimestamp(*(_QWORD *)(a2 + 376));
  v7 = 136315906;
  v8 = a1;
  v9 = 2080;
  v10 = "_VCSystemAudioCapture_processInputBuffer";
  OUTLINED_FUNCTION_4();
  v11 = 475;
  v12 = v5;
  v13 = v6;
  _os_log_debug_impl(&dword_1D8A54000, a3, OS_LOG_TYPE_DEBUG, " [%s] %s:%d append timestamp %d", (uint8_t *)&v7, 0x22u);
}

void _VCSystemAudioCapture_handleInputBuffer_cold_10()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCSystemAudioCapture_appendInputBuffer";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d append sample count %d", v2, *(const char **)v3, (unint64_t)"_VCSystemAudioCapture_appendInputBuffer" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCSystemAudioCapture_handleInputBuffer_cold_11()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d input audio bytes %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCSystemAudioCapture_handleInputBuffer_cold_12()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d input timestamp %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCSystemAudioCapture_handleInputBuffer_cold_13()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCSystemAudioCapture_handleInputBuffer";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d input sample count = %d", v2, *(const char **)v3, (unint64_t)"_VCSystemAudioCapture_handleInputBuffer" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCVideoStream_DidReceiveSampleBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "VCVideoStream_DidReceiveSampleBuffer";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, "VCVideoStream [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCVideoStream.m:%d: VCVideoStream: null object was passed to DidReceiveSampleBuffer", v2);
  OUTLINED_FUNCTION_3();
}

void VCVideoStream_DidReceiveSampleBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "VCVideoStream_DidReceiveSampleBuffer";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, "VCVideoStream [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCVideoStream.m:%d: VCVideoStream: no image queue/layer to draw to... This should be reported!", v2);
  OUTLINED_FUNCTION_3();
}

void VCVideoStream_DidReceiveSampleBuffer_cold_3()
{
  NSObject *v0;
  uint8_t v1[14];
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "VCVideoStream_DidReceiveSampleBuffer";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_11(&dword_1D8A54000, v0, (uint64_t)v0, "VCVideoStream [%s] %s:%d VCVideoStream[%p] Failed to enqueue remote frame!", v1);
  OUTLINED_FUNCTION_3();
}

void _VCVideoStream_DidReceiveRemoteFrame_cold_1()
{
  NSObject *v0;
  uint8_t v1[14];
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "_VCVideoStream_DidReceiveRemoteFrame";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_11(&dword_1D8A54000, v0, (uint64_t)v0, "VCVideoStream [%s] %s:%d VCVideoStream[%p] failed to enqueue remote video frame!", v1);
  OUTLINED_FUNCTION_3();
}

void _VCVideoStream_DidReceiveRemoteFrame_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCVideoStream [%s] %s:%d VCVideoStream: no image queue/layer to draw to... This should be reported!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCVideoStream_DidReceiveRemoteFrame_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "_VCVideoStream_DidReceiveRemoteFrame";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_8_5();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, "VCVideoStream [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCVideoStream.m:%d: VCVideoStream: null object was passed to DidReceiveRemoteFrame", v2);
  OUTLINED_FUNCTION_3();
}

void _VCVideoStreamNWConnectionNotificationCallback_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCVideoStream [%s] %s:%d Callback executed with context being nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCVideoStreamNWConnectionPacketEventCallback_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCVideoStream [%s] %s:%d Callback executed with context being nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCVideoStreamVTPNotificationCallback_cold_1()
{
  __int16 v0;
  int v1;
  NSObject *v2;
  uint8_t v3[14];
  const char *v4;
  int v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v4 = "_VCVideoStreamVTPNotificationCallback";
  OUTLINED_FUNCTION_4();
  v5 = 3766;
  v6 = v0;
  v7 = v1;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v2, (uint64_t)v2, "VCVideoStream [%s] %s:%d VTP callback error: unknown notificaiton=%d.", v3);
  OUTLINED_FUNCTION_3();
}

void _VCVideoStream_ReportingVideoStreamEventWithVideoAttributesAndStreamID_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCVideoStream [%s] %s:%d No callID provided for stream!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCVideoStream_SetExternalOutputVideoLatency_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCVideoStream [%s] %s:%d videoStream is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaStreamGroup_ExternalRenderLatency_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d The stream group is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCNACKGenerator_GetBitrate_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to compute summer bitrate for media frames bytes", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCNACKGenerator_GetBitrate_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to compute summer bitrate for retransmitted media bytes", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNACKGenerator_Create_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL newInstance", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNACKGenerator_Create_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL sendNACKCallback", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNACKGenerator_Create_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL sendNACKContext", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNACKGenerator_Create_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d allocate failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNACKGenerator_Create_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;
  int v4;
  const void *v5;

  v2 = 136315906;
  OUTLINED_FUNCTION_9_2();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCNACKGenerator_Create[%p] Failed to create summer handle", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCNACKGenerator_Create_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;
  int v4;
  const void *v5;

  v2 = 136315906;
  OUTLINED_FUNCTION_9_2();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCNACKGenerator_Create[%p] Failed to create summer handle", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCNACKGenerator_AddPacketInfo_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNACKGenerator_AddPacketInfo_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to check bit rate limits for NACK", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNACKGenerator_AddPacketInfo_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;
  int v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_5_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCNACKGenerator[%p] Failed to add media packet length to media bit rate summer, err=%d", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_19();
}

void VCNACKGenerator_AddPacketInfo_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  _DWORD v2[7];
  __int16 v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2[0] = 136315906;
  OUTLINED_FUNCTION_9_2();
  OUTLINED_FUNCTION_4_0();
  v2[6] = 612;
  v3 = 2048;
  v4 = v0;
  _os_log_debug_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Use cached canSendNACK, timeSinceLastCheck=%f", (uint8_t *)v2, 0x26u);
  OUTLINED_FUNCTION_3();
}

void VCNACKGenerator_AddPacketInfo_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to get bit rate", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNACKGenerator_AddPacketInfo_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;
  int v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_5_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCNACKGenerator[%p] Failed to get media packet count, err=%d", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_19();
}

void VCNACKGenerator_AddPacketInfo_cold_7()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  const void *v5;
  int v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_5_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCNACKGenerator[%p] Failed to add media packet length to retransmitted media bit rate summer, err=%d", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_19();
}

void VCNACKGenerator_UpdateRTT_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNACKGenerator_UpdatePlayoutRTPTimestamp_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL object", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMemoryPool_Alloc_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  v4 = 2080;
  v5 = "VCMemoryPool_Alloc";
  v6 = 1024;
  v7 = 36;
  _os_log_error_impl(&dword_1D8A54000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d parameter memory pool is NULL!", (uint8_t *)&v2, 0x1Cu);
}

void VCVirtualAVCaptureDevice_OnVideoFrame_cold_1()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  uint8_t v3[12];
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  v4 = v0;
  v5 = "VCVirtualAVCaptureDevice_OnVideoFrame";
  v6 = 1024;
  v7 = 397;
  v8 = 2048;
  v9 = v1;
  _os_log_error_impl(&dword_1D8A54000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to create samplebuffer from pixelBuffer[%p]", v3, 0x26u);
  OUTLINED_FUNCTION_3();
}

void VCVideoStreamSendGroup_OnVideoFrame_cold_1()
{
  os_log_t v0;
  uint8_t v1[24];
  int v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  v2 = 905;
  _os_log_debug_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_DEBUG, " [%s] %s:%d video no-op no MKM", v1, 0x1Cu);
  OUTLINED_FUNCTION_3();
}

void VCNAT64ResolverRegisterForPrefixUpdate_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCNAT64ResolverRegisterForPrefixUpdate: could not create a shared instance of NAT64Resolver", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNAT64ResolverRegisterForPrefixUpdate_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCNAT64ResolverRegisterForPrefixUpdate: failed on creating VCNAT64ListenerContext", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNAT64ResolverRegisterForPrefixUpdate_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCNAT64ResolverRegisterForPrefixUpdate: failed on creating NAT64CallBackContext", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNAT64ResolverRegisterForPrefixUpdate_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCNAT64ResolverRegisterForPrefixUpdate: failed on creating interfaceName", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNAT64ResolverRegisterForPrefixUpdate_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCNAT64ResolverRegisterForPrefixUpdate: failed on creating listeners array", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNAT64ResolverGetSharedInstance_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCNAT64ResolverGetSharedInstance: failed to create VCNAT64Resolver", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNAT64ResolverGetSharedInstance_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCNAT64ResolverGetSharedInstance: failed to create interface dictionary for shared instance", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNAT64ResolverGetSharedInstance_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCNAT64ResolverGetSharedInstance: failed to create dispatch queue for shared instance", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNAT64ResolverGetSharedInstance_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCNAT64ResolverGetSharedInstance: failed to create retry queue for shared instance", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNAT64ResolveNAT64Prefix_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCNAT64ResolveNAT64Prefix: callbackContext should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNAT64ResolverGetPrefix_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCNAT64ResolverGetPrefix: could not create a shared instance of NAT64Resolver", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCNAT64ResolverGetPrefix_cold_2()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  uint8_t v3[14];
  const char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v4 = "VCNAT64ResolverGetPrefix";
  v5 = 1024;
  v6 = 355;
  v7 = v0;
  v8 = v1;
  _os_log_error_impl(&dword_1D8A54000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d VCNAT64ResolverGetPrefix: can not fetch NAT64 prefix as '%s' has not been registered on NAT64Resolver", v3, 0x26u);
  OUTLINED_FUNCTION_3();
}

void VCSDInfoConstructWithSocket_cold_1(uint64_t a1, int a2, NSObject *a3)
{
  __int16 v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  __error();
  v9 = 136316162;
  v10 = a1;
  v11 = 2080;
  OUTLINED_FUNCTION_9();
  v12 = 63;
  v13 = v6;
  v14 = a2;
  v15 = v6;
  v16 = v7;
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, a3, v8, " [%s] %s:%d destinationIPPort is NULL for socket %d with getpeername errno %d", (uint8_t *)&v9);
}

void VCSDInfoIsPacketFromKnownRemote_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid VCSourceDestinationInfoMode:%d!", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCSDInfoIsPacketFromKnownRemote_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid VCSourceDestinationInfoMode:%d!", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCSDInfoIsSrcDstInfoMatchedWithIP_cold_1(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = 136316162;
  v4 = a1;
  v5 = 2080;
  v6 = "VCSDInfoIsSrcDstInfoMatchedWithIP";
  v7 = 1024;
  v8 = 96;
  v9 = 1024;
  v10 = 0;
  v11 = 1024;
  v12 = 1;
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, a2, a3, " [%s] %s:%d Invalid parameters! cachedSrcDstInfo isValid:%d, IPPort isValid:%d!", (uint8_t *)&v3);
  OUTLINED_FUNCTION_3();
}

void VCSDInfoIsSrcDstInfoMatchedWithIP_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid VCSourceDestinationInfoMode:%d!", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCCaptionsReceiver_ProcessCaptionsData_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  v4 = 2080;
  v5 = "VCCaptionsReceiver_ProcessCaptionsData";
  v6 = 1024;
  v7 = 49;
  _os_log_error_impl(&dword_1D8A54000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Receiver must not be NULL", (uint8_t *)&v2, 0x1Cu);
}

void VCCaptionsReceiver_ProcessCaptionsData_cold_2(uint64_t a1, int a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = 136315906;
  v4 = a1;
  v5 = 2080;
  v6 = "VCCaptionsReceiver_ProcessCaptionsData";
  v7 = 1024;
  v8 = 51;
  v9 = 1024;
  v10 = a2;
  _os_log_error_impl(&dword_1D8A54000, log, OS_LOG_TYPE_ERROR, " [%s] %s:%d Failed to decode captions blob. Error=%d", (uint8_t *)&v3, 0x22u);
}

void FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer_cold_1()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[24];
  int v3;
  __int16 v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  v3 = 623;
  v4 = v0;
  v5 = 0;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d localID_BE=%u", v2, 0x22u);
  OUTLINED_FUNCTION_3();
}

void FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d CMSampleBufferCreate failed with err=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d CMBlockBufferGetDataPointer failed with err=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d CMBlockBufferCreateWithMemoryBlock failed with err=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void FigCaptureMetadataUtilitiesCreateQuickTimeMovieStillImageTimeSampleBuffer_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d CMMetadataFormatDescriptionCreateWithMetadataSpecifications failed with err=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCImageRotationConverterBase_CreateRotatedPixelBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d pixelBuffer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCImageRotationConverterBase_CreateRotatedPixelBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCImageRotationConverterBase pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCImageRotationConverterBase_CreateRotatedPixelBuffer_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d _bufferPool is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCImageRotationConverterBase_CreateRotatedPixelBuffer_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d _rotationSession is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCImageRotationConverterBase_CreateRotatedPixelBuffer_cold_5()
{
  __int16 v0;
  int v1;
  os_log_t v2;
  uint8_t v3[12];
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  v4 = v0;
  v5 = "VCImageRotationConverterBase_CreateRotatedPixelBuffer";
  v6 = 1024;
  v7 = 55;
  v8 = 1024;
  v9 = v1;
  _os_log_error_impl(&dword_1D8A54000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d CVPixelBufferPoolCreatePixelBuffer failed: %d", v3, 0x22u);
  OUTLINED_FUNCTION_3();
}

void VCBitrateArbiter_ModeFromOperatingMode_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unexpected operatingMode=%u", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void rangeCheck_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCBitrateArbiter: value %d failed bitrate range check, ignored", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void IsValidAudioBitrateRange_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCBitrateArbiter: value %d failed audio only bitrate range check, ignored", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCCaptionsDecoder_Decode_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid input parameter", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_3();
}

void VCCaptionsDecoder_Decode_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "VCCaptionsDecoder_Decode";
  v4 = 1024;
  v5 = 242;
  v6 = 1024;
  v7 = -5;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unable to parse segment header. Error=%d", v2);
  OUTLINED_FUNCTION_3();
}

void VCCaptionsDecoder_Decode_cold_3()
{
  int v0;
  NSObject *v1;
  uint8_t v2[14];
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "VCCaptionsDecoder_Decode";
  v4 = 1024;
  v5 = 245;
  v6 = 1024;
  v7 = v0;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v1, (uint64_t)v1, " [%s] %s:%d Failed to decode payload. Error=%d", v2);
  OUTLINED_FUNCTION_3();
}

void VCStatisticsHistory_AddStatsHistory_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "AVCRC [%s] %s:%d Statistics history receives out of order statistics for totalByteReceived!", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_3();
}

void _VCStatisticsHistory_GetStatsHistoryElementIndex_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "AVCRC [%s] %s:%d Statistics history cannot match, because elementIndex is NULL!", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_3();
}

void VCStatisticsHistory_GetBurstyLoss_cold_1(uint64_t a1, NSObject *a2, double a3)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  double v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = 136315906;
  v4 = a1;
  v5 = 2080;
  v6 = "VCStatisticsHistory_GetBurstyLoss";
  v7 = 1024;
  v8 = 188;
  v9 = 2048;
  v10 = a3;
  _os_log_debug_impl(&dword_1D8A54000, a2, OS_LOG_TYPE_DEBUG, "AVCRC [%s] %s:%d Statistics history does not have enough history for the stats within the most recent %f seconds", (uint8_t *)&v3, 0x26u);
  OUTLINED_FUNCTION_3();
}

void openLogDump_cold_1(uint64_t a1, uint64_t a2, NSObject *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v6 = *__error();
  v7 = 136316162;
  v8 = a1;
  v9 = 2080;
  v10 = "openLogDump";
  v11 = 1024;
  v12 = 54;
  v13 = 2112;
  v14 = a2;
  v15 = 1024;
  v16 = v6;
  _os_log_error_impl(&dword_1D8A54000, a3, OS_LOG_TYPE_ERROR, " [%s] %s:%d failed to open %@ with error %d", (uint8_t *)&v7, 0x2Cu);
  OUTLINED_FUNCTION_9_1();
}

void VRLogfileAlloc_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate context", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VRLogfileAlloc_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create log file", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VRLogfileAlloc_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to create log queue", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VRLogfileZipOnly_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d szFullFilePathName must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VRLogfileZipOnly_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate context", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VRLogfileZipOnly_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate space for the fileName", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCTransportStreamRunLoopCreateWithTransportStreams_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL transportStreams", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCTransportStreamRunLoopCreateWithTransportStreams_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL runLoop", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCTransportStreamRunLoopCreateWithTransportStreams_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Empty transportStreams array", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCTransportStreamRunLoopCreateWithTransportStreams_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL transportStream", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCTransportStreamRunLoopCreateWithTransportStreams_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unknown transport stream type", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_CreateReceiver_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d Failed to allocate the audio receiver", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_CreateReceiver_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d Failed to allocate the audio receiver", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_CreateReceiver_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d Failed to create VCJitterBuffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_CreateReceiver_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCAudioReceiver_CreateReceiver";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d Failed to set audio receiver for RTP (%d)", v2, *(const char **)v3, (unint64_t)"VCAudioReceiver_CreateReceiver" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_CreateReceiver_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d Failed to initialize the receiver thread", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_Finalize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d Invalid audio receiver (nil)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_Start_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d Invalid audio receiver (nil)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_Start_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCAudioReceiver_RegisterTransportCallbacks";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d audioReceiver=%p Transport callbacks already registered", v2, *(const char **)v3, (unint64_t)"_VCAudioReceiver_RegisterTransportCallbacks" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_Start_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCAudioReceiver_Start";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d Failed to create the frame delay. error=%x", v2, *(const char **)v3, (unint64_t)"VCAudioReceiver_Start" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_Start_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d Playback was not initialized before start", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_Stop_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d Invalid audio receiver (nil)", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioReceiver_UnregisterReportingTask_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCAudioReceiver_UnregisterReportingTask";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d Failed to unregister the reporting task: (0x%p)", v2, *(const char **)v3, (unint64_t)"_VCAudioReceiver_UnregisterReportingTask" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_GetLatestAudioTimestamp_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_SetupDecoders_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_SetupDecoders_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCAudioReceiver_SetupDecoders";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d Failed to initialize audio receiver (%p) playback.", v2, *(const char **)v3, (unint64_t)"VCAudioReceiver_SetupDecoders" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_RegisterCodecRateModeRequestCallback_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_RegisterActiveAudioStreamRequestCallback_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_ResetLagReference_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_UpdateCellTech_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_GetActiveStreamId_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d ActiveReceiver Stream is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_GetActiveStreamId_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_GetPercentPacketsLateAndMissing_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_PullAudioSamples_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d error bad handle", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_PullAudioSamples_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCAudioReceiver_PullAudioSamples";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d Audio is asking for invalid number of samples %d ", v2, *(const char **)v3, (unint64_t)"VCAudioReceiver_PullAudioSamples" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_DiscardQueueExcess_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioReceiver_SplitRedPacket_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d Ignoring audio packet carrying bad red payload!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_UpdateWrmMetrics_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_UpdateWrmMetrics_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d WRMInfo is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_GetJitterBufferMetrics_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_GetJitterBufferMetrics_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d wrmMetrics is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_SendStartCallReport_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_SendEndCallReport_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_SetMagicCookieForPayload_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_SetTargetStreamID_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_SetOverlayToken_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_ProcessCellularNetworkNotification_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_ProcessConnectionType_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioReceiver_SetAudioPlayoutDelay_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioReceiver_HandleRTPPacket_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d Unsupported packet type:%d", v2, v3, v4, 1939);
  OUTLINED_FUNCTION_3();
}

void _VCAudioReceiver_HandleRTPPacket_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  uint64_t v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_7_3();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d Bad buffer length bufferLength:%zu", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCAudioReceiver_HandleRTPPacket_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  uint64_t v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_7_3();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d Bad padding length paddingLength:%zu", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCAudioReceiver_HandleRTPPacket_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d Could not allocate memory for Audio Packet", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioReceiver_HandleRTPPacket_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d RTPMediaPacketToAudioPacket failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioReceiver_HandleRTPPacket_cold_6()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCAudioReceiver_DecryptAndFillAudioPacket";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d CMBlockBufferCreateEmpty failed with error %d", v2, *(const char **)v3, (unint64_t)"_VCAudioReceiver_DecryptAndFillAudioPacket" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCAudioReceiver_HandleRTPPacket_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d CMBlockBufferGetDataPointer failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioReceiver_HandleRTPPacket_cold_8()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCAudioReceiver_DecryptAndFillAudioPacket";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d _VCAudioReceiver_Decrypt failed %d", v2, *(const char **)v3, (unint64_t)"_VCAudioReceiver_DecryptAndFillAudioPacket" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCAudioReceiver_HandleRTPPacket_cold_9()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCAudioReceiver_Decrypt";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d VCCryptor_Decrypt failed. result=%x", v2, *(const char **)v3, (unint64_t)"_VCAudioReceiver_Decrypt" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCAudioReceiver_HandleRTPPacket_cold_10()
{
  os_log_t v0;
  uint8_t v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_7_3();
  _os_log_debug_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_DEBUG, "VCAudioReceiver [%s] %s:%d received packet time[%f]", v1, 0x26u);
  OUTLINED_FUNCTION_3();
}

void _VCAudioReceiver_HandleRTPPacket_cold_11()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d Ignoring invalid incoming RTP media packet.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioReceiver_HandleRTPPacket_cold_12()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d received VTP_PKT_BBNOTE", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioReceiver_ShouldProcessAudioPacket_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  const void *v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCAudioReceiver_ShouldProcessAudioPacket";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2_0();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, "VCAudioReceiver [%s] %s:%d AudioReceiver[%p] UNEXPECTED: IDS stream ID is not valid", v2, *(const char **)v3, (unint64_t)"_VCAudioReceiver_ShouldProcessAudioPacket" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void JitterPreloadQueue_AudioFrameAlloc_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d JitterPreloadQueue: Allocation failed as the Queue is not valid", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void JitterPreloadQueue_AudioPacketAlloc_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d JitterPreloadQueue: Allocation failed as the Queue is not valid", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void JitterPreloadQueue_Create_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d JitterPreloadQueue: Create Failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void JitterPreloadQueue_Create_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d JitterPreloadQueue: Failed to created Audio Packet Pool", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void JitterPreloadQueue_Create_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d JitterPreloadQueue: Failed to created Audio Frame Pool", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void JitterPreloadQueue_Enqueue_cold_1()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  uint8_t v3[12];
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  v4 = v0;
  v5 = "JitterPreloadQueue_Enqueue";
  v6 = 1024;
  v7 = 119;
  v8 = 2048;
  v9 = v1;
  _os_log_error_impl(&dword_1D8A54000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d Queue=%p is full", v3, 0x26u);
  OUTLINED_FUNCTION_3();
}

void VCAudioTransmitter_SetAllowedPayloads_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d transmitter is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioTransmitter_SetAllowedPayloads_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[14];
  const char *v3;
  int v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "VCAudioTransmitter_SetAllowedPayloads";
  OUTLINED_FUNCTION_4();
  v4 = 747;
  v5 = 2048;
  v6 = v0;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d audioTransmitter=%p allowedAudioPayloads is nil", v2, 0x26u);
  OUTLINED_FUNCTION_3();
}

void VCAudioTransmitter_ReportAWDMetrics_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate reporting dictionary", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioTransmitter_ReportAWDMetrics_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate the codec bitrate value", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioTransmitter_ProcessConnectionType_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Transmitter object is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioTransmitter_UpdateWrmMetrics_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d wrmMetrics is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioTransmitter_FlushBundlers_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCAudioTransmitter_FlushBundlers";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unable to extract bundled packets from CDRx audio packet bundler for index=%d", v2, *(const char **)v3, (unint64_t)"_VCAudioTransmitter_FlushBundlers" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCAudioTransmitter_FlushBundlers_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unable to extract bundled packets from shortRED audio packet bundler", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioTransmitter_FlushBundlers_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unable to extract bundled packets from main audio packet bundler", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioTransmitter_SendAudioBundle_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid payload!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioTransmitter_SendAudioBundle_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCAudioTransmitter_SendSframeEncryptedAudioPacket";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d packet payload contains incorrect data size '%d'", v2, *(const char **)v3, (unint64_t)"_VCAudioTransmitter_SendSframeEncryptedAudioPacket" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCAudioTransmitter_SendAudioBundle_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCAudioTransmitter_SendSframeEncryptedAudioPacket";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d VCCryptor_Encrypt failed with error %d", v2, *(const char **)v3, (unint64_t)"_VCAudioTransmitter_SendSframeEncryptedAudioPacket" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCAudioTransmitter_SendAudioBundle_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CMBlockBufferIsRangeContinuous failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioTransmitter_SendAudioBundle_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CMBlockBufferGetDataPointer failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioTransmitter_SendAudioBundle_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d CMBlockBufferCreateWithMemoryBlock failed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioTransmitter_SendAudioBundle_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid red payload!", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCOverlaySourceTextHelper_appendHeaderTextToString_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d [VCOverlayManager] No textContext was found while appending header text", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCOverlaySourceTextHelper_appendHeaderTextToString_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d [VCOverlayManager] No displayString was found while appending header text", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCOverlaySourceTextHelper_appendVideoTextToString_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d [VCOverlayManager] No textContext was found while appending video text", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCOverlaySourceTextHelper_appendVideoTextToString_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d [VCOverlayManager] No displayString was found while appending video text", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCOverlaySourceTextHelper_appendAudioTextToString_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d [VCOverlayManager] No textContext was found while appending audio text", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCOverlaySourceTextHelper_appendAudioTextToString_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d [VCOverlayManager] No displayString was found while appending audio text", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void ARPLSessionCreate_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "ARPLSessionCreate";
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d ARPLSessionCreate: new session (%08X)...", v2, *(const char **)v3, (unint64_t)"ARPLSessionCreate" >> 16, 1025);
  OUTLINED_FUNCTION_3();
}

void ARPLSessionRelease_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d ARPLSessionRelease: done...", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void ARPLSessionRelease_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d ARPLSessionRelease: delete...", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void ARPLSessionRelease_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];

  OUTLINED_FUNCTION_8_0();
  *(_QWORD *)&v3[6] = "ARPLSessionRelease";
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d ARPLSessionRelease: old session (%08X)...", v2, *(const char **)v3, (unint64_t)"ARPLSessionRelease" >> 16, 2042);
  OUTLINED_FUNCTION_3();
}

void ARPLSessionRelease_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d ARPLSessionRelease: enter...", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void JLagProcessor_Initialize_cold_1(uint64_t a1)
{
  os_log_t v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  OUTLINED_FUNCTION_1();
  v4 = 33;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d Lag processor initialized with invalid pointer", (uint8_t *)&v2, 0x1Cu);
  OUTLINED_FUNCTION_3();
}

void JLagProcessor_Process_cold_1()
{
  int v0;
  NSObject *v1;
  uint8_t v2[14];
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "JLagProcessor_IsSpikeTimeout";
  v4 = 1024;
  v5 = 267;
  v6 = 1024;
  v7 = v0;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v1, (uint64_t)v1, " [%s] %s:%d Bundling looks incorrect %d", v2);
  OUTLINED_FUNCTION_3();
}

void JLagProcessor_Process_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[14];
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "JLagProcessor_DetectSpike";
  v4 = 1024;
  v5 = 278;
  v6 = 1024;
  v7 = 0;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Samples per frame looks incorrect %d", v2);
  OUTLINED_FUNCTION_3();
}

void JLagProcessor_Process_cold_3(uint64_t a1)
{
  os_log_t v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v2 = 136315650;
  v3 = a1;
  OUTLINED_FUNCTION_1();
  v4 = 375;
  _os_log_debug_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Skip lag computation", (uint8_t *)&v2, 0x1Cu);
  OUTLINED_FUNCTION_3();
}

void JTargetJBEstimator_GetSharedSettings_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Shared parameters struct is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void JTargetJBEstimator_Process_cold_1()
{
  os_log_t v0;
  uint8_t v1[24];
  int v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  v2 = 1382;
  _os_log_debug_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_DEBUG, " [%s] %s:%d Failed to update the target size estimated prior to synchronization", v1, 0x1Cu);
  OUTLINED_FUNCTION_3();
}

void JTargetJBEstimator_Process_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Incorrect bundling, it should never be zero", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _JTargetJBEstimator_AddLagToCdf_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Attempting to add lag value to cdf with an index out of range", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCEffectsManager_CapturedPixelBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Dropping video frame due to effects being disabled", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCEffectsManager_CapturedPixelBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Sending video frame to extension to process", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCEffectsManager_CapturedPixelBuffer_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Sending video frame to AVC to process", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCEffectsManager_CapturedPixelBuffer_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, " [%s] %s:%d Sending video frame to client to be processed", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioPlayer_InitializeBuffers_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Failed to allocate Input playback buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioPlayer_InitializeBuffers_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Failed to allocate Output playback buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioPlayer_InitializeBuffers_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Failed to allocate last Decoded playback buffer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_Initialize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d VCAudioPlayer pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_Initialize_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[14];
  const char *v3;
  int v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v3 = "VCAudioPlayer_Initialize";
  OUTLINED_FUNCTION_4();
  v4 = 354;
  v5 = 2048;
  v6 = v0;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, "VCAudioPlayer [%s] %s:%d AudioPlayer[%p] Failed initializing DTMF", v2, 0x26u);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_Initialize_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Player: Failed initializing Timescaler", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_Initialize_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Player: Failed initializing Crossfade", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_Initialize_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Player: Failed allocating in/out buffers", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_Initialize_cold_6()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  const char *v3;
  _BYTE v4[14];
  double v5;

  OUTLINED_FUNCTION_8_0();
  *(_QWORD *)&v4[6] = "_VCAudioPlayer_SetPlaybackFormat";
  LODWORD(v5) = 194;
  WORD2(v5) = 2048;
  HIWORD(v5) = v0;
  OUTLINED_FUNCTION_7_4(&dword_1D8A54000, v1, v2, "VCAudioPlayer [%s] %s:%d holeDetectionThreshold=%f", v3, *(const char **)v4, (unint64_t)"_VCAudioPlayer_SetPlaybackFormat" >> 16, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_Initialize_cold_7()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_10_17();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Invalid number of channels[%d]", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_Initialize_cold_8()
{
  os_log_t v0;
  uint8_t v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_10_17();
  _os_log_fault_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_FAULT, "VCAudioPlayer [%s] %s:%d Invalid number of channels[%d]", v1, 0x22u);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_Finalize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_NewStream_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_IsUnderrunQueueBoostEnabled_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_ForceDecoderReset_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_GetAverageInterarrivalTimeForWindow_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_GetStatistics_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_GetLeftOverSamples_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_ResetReportingMetrics_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_GetFrameErasureRate_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_GetSpeechErasureRate_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_SuspendAudioErasureMeasurement_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_ResumeAudioErasureMeasurement_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_GetTimescaleMetrics_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_GetRedErasureMetrics_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_GetAverageLossRate_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_GetLastAverageMissingPercentOverWindow_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_GetAverageJitterSizeForWindow_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_MaxInterArrivalTimeForWindow_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_GetDTMFEventCount_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_UpdateLastEnqueuedFrameInformation_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Input variables are invalid", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_GetWrmMetrics_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_GetPercentPacketsLateAndMissing_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_GetPlaybackFormat_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_SetMaxHoleSize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_GetBurstMetrics_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioPlayer_UpdateBurstInfo_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];

  OUTLINED_FUNCTION_8_0();
  *(_QWORD *)&v3[6] = "_VCAudioPlayer_UpdateBurstInfo";
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Unexpected burstInfo->state=%d", v2, *(const char **)v3, (unint64_t)"_VCAudioPlayer_UpdateBurstInfo" >> 16, 2095);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_AdjustmentDisabled_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_SetTargetBoostMode_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_GetSilenceSamples_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_GetSilenceSamples_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d samplesInfo pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_GetSilenceSamples_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d jitterInfo pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_GetSilenceSamples_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "VCAudioPlayer_GetSilenceSamples";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Timestamp did not increment: %d", v2, *(const char **)v3, (unint64_t)"VCAudioPlayer_GetSilenceSamples" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_GetSamples_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_GetSamples_cold_2()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCAudioPlayer_GetAudioSamples";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Timestamp did not increment: %d", v2, *(const char **)v3, (unint64_t)"_VCAudioPlayer_GetAudioSamples" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_GetSamples_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCAudioPlayer_FillPlayedSamplesForCrossFade";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Not able to store the last two played samples for crossfade. sampleCount=%d", v2, *(const char **)v3, (unint64_t)"_VCAudioPlayer_FillPlayedSamplesForCrossFade" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void VCAudioPlayer_IsTimestampValid_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Audio player pointer is NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioPlayer_CalcAdjustment_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Queue Steering: Algorithm provided ambiguous output, skipping this instance", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioPlayer_CalcAdjustment_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Queue Steering: Growing queue to protect against low packet lifetime and erasures", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioPlayer_CalcAdjustment_cold_3(uint64_t a1, _BYTE *a2, NSObject *a3)
{
  const char *v3;
  _BYTE v4[22];
  const char *v5;

  v3 = "Proactively ";
  *(_DWORD *)v4 = 136315906;
  *(_QWORD *)&v4[4] = a1;
  *(_WORD *)&v4[12] = 2080;
  *(_QWORD *)&v4[14] = "_VCAudioPlayer_ExecuteQueueSteering";
  if (!*a2)
    v3 = "";
  LODWORD(v5) = 2808;
  WORD2(v5) = 2080;
  HIWORD(v5) = (_WORD)v3;
  OUTLINED_FUNCTION_7_4(&dword_1D8A54000, (uint64_t)a2, a3, "VCAudioPlayer [%s] %s:%d Queue Steering: %s shrinking queue", *(const char **)v4, *(const char **)&v4[8], (unint64_t)"_VCAudioPlayer_ExecuteQueueSteering" >> 16, v5);
  OUTLINED_FUNCTION_3();
}

void _VCAudioPlayer_CalcAdjustment_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2_3(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Queue Steering: Resetting queue growth state", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCAudioPlayer_SteerQueueCommand_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCAudioPlayer_SteerQueueCommand";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, "VCAudioPlayer [%s] %s:%d Queue Steering: Failed to steer queue in direction %d", v2, *(const char **)v3, (unint64_t)"_VCAudioPlayer_SteerQueueCommand" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void PacketThread_Create_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Send callback is null", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void PacketThread_Create_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate packetThread struct", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void PacketThread_Create_cold_3()
{
  os_log_t v0;
  uint8_t v1[14];
  const char *v2;
  __int16 v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "PacketThread_Create";
  v3 = 1024;
  OUTLINED_FUNCTION_2_0();
  _os_log_error_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d packetThread=%p Failed to create dispatch_semaphore", v1, 0x26u);
  OUTLINED_FUNCTION_3();
}

void PacketThread_AllocatePacketBuffer_cold_1()
{
  uint64_t v0;
  __int16 v1;
  os_log_t v2;
  uint8_t v3[24];
  int v4;
  __int16 v5;
  uint64_t v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  v4 = 157;
  v5 = 2048;
  v6 = v0;
  v7 = v1;
  v8 = 32;
  _os_log_error_impl(&dword_1D8A54000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d packetThread=%p Failed to allocate buffers of %u", v3, 0x2Cu);
}

void SendPacketsProc_cold_1()
{
  os_log_t v0;
  uint8_t v1[14];
  const char *v2;
  __int16 v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "SendPacketsProc";
  v3 = 1024;
  OUTLINED_FUNCTION_2_0();
  _os_log_debug_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_DEBUG, " [%s] %s:%d packetThread=%p SendPacketsProc starting", v1, 0x26u);
  OUTLINED_FUNCTION_3();
}

void VCTransportStreamVTPCreate_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL transportStream", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCTransportStreamVTPCreate_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid VFD", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCTransportStreamVTPCreate_cold_3()
{
  NSObject *v0;
  uint8_t v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, " [%s] %s:%d Invalid traffic class %d", v1);
  OUTLINED_FUNCTION_3();
}

void VCTransportStreamVTPCreate_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d transportSessionID=%u", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPCopyProperty_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Parameter 'stream' should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPSetProperty_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Parameter 'transportStream' should not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPSetProperty_cold_2()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_9_8();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unsupported propertyKey=%@ requested");
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPSetProperty_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL storage", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPSetProperty_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCTransportStreamVTPSetReceiveHopLimitEnabled";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d _VCTransportStreamVTPCopyIsIPv6 failed, result=0x%08x", v2, *(const char **)v3, (unint64_t)"_VCTransportStreamVTPSetReceiveHopLimitEnabled" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPSetProperty_cold_5()
{
  NSObject *v0;
  uint8_t v1[14];
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "_VCTransportStreamVTPSetReceiveHopLimitEnabled";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, " [%s] %s:%d set sockopt IPV6_RECVHOPLIMIT/IP_RECVTTL failed , result=0x%08x", v1);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPCopyIsIPv6_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL storage", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPCopyIsIPv6_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL isIPv6", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPCopyIsIPv6_cold_3()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  int v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCTransportStreamVTPCopyIsIPv6";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_Getsockname failed - %d", v2, *(const char **)v3, (unint64_t)"_VCTransportStreamVTPCopyIsIPv6" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPCopyReceiveHopLimitEnabled_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL storage", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPCopyReceiveHopLimitEnabled_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL receiveHopLimit", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPSetSendFailedHandler_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL transportStream", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPSend_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL transportStream", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPSend_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL packetList", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPSend_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL packet data", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPSend_cold_4()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[34];
  __int16 v3;
  int v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  v3 = v0;
  v4 = 12;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d streamIDCount=%u is greater than max=%u", v2, 0x28u);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPSend_cold_5()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];
  uint64_t v4;

  OUTLINED_FUNCTION_6();
  *(_QWORD *)&v3[6] = "_VCTransportStreamVTPSendOnePacket";
  OUTLINED_FUNCTION_4();
  LODWORD(v4) = 312;
  OUTLINED_FUNCTION_9_8();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Packet data too big %ld", v2, *(const char **)v3, (unint64_t)"_VCTransportStreamVTPSendOnePacket" >> 16, v4);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPSend_cold_6()
{
  NSObject *v0;
  uint8_t v1[14];
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "_VCTransportStreamVTPSendOnePacket";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, " [%s] %s:%d CMBlockBufferAccessDataBytes failed %x", v1);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPSend_cold_7()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Send on non-activated stream", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPSetPacketFilter_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL transportStream", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPSetPacketFilter_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL packetFilter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPSetPacketFilter_cold_3()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_11_0(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_0_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_SetPktType failed %d", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3_0();
}

void _VCTransportStreamVTPSetPacketFilter_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid vfd", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPSetPacketFilter_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Empty payloadList", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPSetPacketFilter_cold_6()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to allocate payloadListValue", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPSetPacketFilter_cold_7()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_11_0(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_0_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_SetPayloadList failed %d", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3_0();
}

void _VCTransportStreamVTPSetPacketFilter_cold_8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_11_0(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_0_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_SetPktType failed %d", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3_0();
}

void _VCTransportStreamVTPSetPacketFilter_cold_9()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid vfd", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPSetPacketFilter_cold_10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_11_0(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_0_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_SetRemoteSSRC failed %d", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3_0();
}

void _VCTransportStreamVTPSetPacketFilter_cold_11()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_11_0(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_0_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_SetPktType failed %d", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3_0();
}

void _VCTransportStreamVTPSetPacketFilter_cold_12()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid vfd", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPSetPacketFilter_cold_13()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Cellular Unique Tag not set on filter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPSetPacketFilter_cold_14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_11_0(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_0_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_SetCellularUniqueTag failed %d", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3_0();
}

void _VCTransportStreamVTPSetPacketFilter_cold_15()
{
  uint64_t v0;
  os_log_t v1;

  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_9_8();
  OUTLINED_FUNCTION_10_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unsupported packet filter type %@");
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPSetPacketFilter_cold_16()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d setPacketFilter only allowed in created state", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPCopyPacketFilter_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL transportStream", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPCopyPacketFilter_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL packetFilter pointer", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPSetReceivedHandler_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL transportStream", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPPerformReceive_cold_1()
{
  NSObject *v0;
  uint8_t v1[14];
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "_VCTransportStreamVTPPerformReceive";
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_7();
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v0, (uint64_t)v0, " [%s] %s:%d VTP_Recvfrom failed %x", v1);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPActivate_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL transportStream", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPActivate_cold_2()
{
  os_log_t v0;
  uint8_t v1[14];
  const char *v2;
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  v2 = "_VCTransportStreamVTPActivate";
  OUTLINED_FUNCTION_4();
  v3 = 378;
  OUTLINED_FUNCTION_9_8();
  _os_log_debug_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_DEBUG, " [%s] %s:%d [%p]", v1, 0x26u);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPActivate_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d regiterPacketCallback only allowed in created state", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPActivate_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Activation only allowed in created state", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPDeactivate_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL transportStream", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPDeactivate_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Cannot deactivate a non-activated stream", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPSetRemoteSSRCOnVFD_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL packet filter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPSetRemoteSSRCOnVFD_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL remoteSSRCProperty", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPSetRemoteSSRCOnVFD_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid vfd", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCTransportStreamVTPSetRemoteSSRCOnVFD_cold_4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_11_0(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_0_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP_SetRemoteSSRC failed %d", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3_0();
}

void _VCTransportStreamVTPHandlePacketReceived_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VTP Storage is null, transportStream is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfo_SerializedSize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d MediaControlInfo is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfo_SetVersion_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d MediaControlInfo is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfoIPCamera_SerializedSize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d MediaControlInfo is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfoIPCamera_SerializeBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid mediaControlInfo.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfoIPCamera_SerializeBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid buffer for serialization.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfoIPCamera_SerializeBuffer_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Not enough buffer for media control info", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfoIPCamera_SerializeBuffer_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Missing CVO info", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfoSerializeWithData_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Not enough buffer for media control info", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfoSerializeWithData_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Missing feedback info", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfoSerializeWithData_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Missing media queue info", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfoSerializeWithData_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];

  OUTLINED_FUNCTION_8_0();
  *(_QWORD *)&v3[6] = "VCMediaControlInfoSerializeWithData";
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Wrong MediaControlInfoVersion %d", v2, *(const char **)v3, (unint64_t)"VCMediaControlInfoSerializeWithData" >> 16, 385);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfoSerializeWithData_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL input paramter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfoUnserializeWithData_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Bad data buffer length for FaceTime audio media control info", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfoUnserializeWithData_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Not enough buffer for connection stats", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfoUnserializeWithData_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Bad data length for FaceTime audio media control info", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfoUnserializeWithData_cold_4()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  _BYTE v3[14];

  OUTLINED_FUNCTION_8_0();
  *(_QWORD *)&v3[6] = "VCMediaControlInfoUnserializeWithData";
  OUTLINED_FUNCTION_5(&dword_1D8A54000, v0, v1, " [%s] %s:%d Wrong MediaControlInfoVersion %d", v2, *(const char **)v3, (unint64_t)"VCMediaControlInfoUnserializeWithData" >> 16, 556);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfoUnserializeWithData_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d NULL input paramter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfoFaceTimeAudio_SerializedSize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d MediaControlInfo is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfoFaceTimeAudio_SerializeBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid mediaControlInfo.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfoFaceTimeAudio_SerializeBuffer_cold_2(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  OUTLINED_FUNCTION_10_1(a2, *MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_12_0();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_9_0(&dword_1D8A54000, v2, v3, " [%s] %s:%d %@", v4, v5, v6, v7, v8);
  OUTLINED_FUNCTION_19();
}

void VCMediaControlInfoFaceTimeAudio_SetVideoEnabled_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid mediaControlInfo.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfoFaceTimeVideo_SerializedSize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d MediaControlInfo is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfoFaceTimeVideo_SerializeBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid mediaControlInfo.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfoFaceTimeVideo_SerializeBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid buffer for serialization.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfoMultiwayAudio_SerializedSize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d MediaControlInfo is nil", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfoMultiwayAudio_SerializeBuffer_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid mediaControlInfo.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfoMultiwayAudio_SerializeBuffer_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Invalid buffer for serialization.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfoMultiwayAudio_SerializeBuffer_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Not enough buffer for media control info", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfoMultiwayAudio_SerializeBuffer_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Missing ROC info", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCMediaControlInfoMultiwayAudio_SerializeBuffer_cold_5()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Missing MKI info", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void _VCStreamInputCaptureSource_OnCaptureVideoFrame_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d captureSource must not be NULL", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void AVCPacketRelayDriverThreadStart_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[40];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_1_4();
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/AVCPacketRelayDriverThread.m:%d: AVCPacketRelayDriverThread: calloc(%d) failed", v2);
  OUTLINED_FUNCTION_3();
}

void AVCPacketRelayDriverThreadStart_cold_2()
{
  os_log_t v0;
  uint8_t v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_1_4();
  _os_log_fault_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_FAULT, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/AVCPacketRelayDriverThread.m:%d: AVCPacketRelayDriverThread: calloc(%d) failed", v1, 0x28u);
  OUTLINED_FUNCTION_3();
}

void AVCPacketRelayDriverThreadStart_cold_3(uint64_t a1, NSObject *a2)
{
  __int16 v3;
  int v4;
  uint64_t v5;
  uint8_t v6[24];
  int v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  __error();
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_9();
  v7 = 68;
  v8 = v3;
  v9 = 68;
  v10 = v3;
  v11 = v4;
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, a2, v5, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/AVCPacketRelayDriverThread.m:%d: AVCPacketRelayDriverThread: CreateHandle failed (%d)", v6);
  OUTLINED_FUNCTION_19();
}

void AVCPacketRelayDriverThreadStart_cold_4()
{
  __int16 v0;
  int v1;
  NSObject *v2;
  uint8_t v3[24];
  int v4;
  __int16 v5;
  int v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  v4 = 86;
  v5 = v0;
  v6 = 86;
  v7 = v0;
  v8 = v1;
  OUTLINED_FUNCTION_4_4(&dword_1D8A54000, v2, (uint64_t)v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/AVCPacketRelayDriverThread.m:%d: AVCPacketRelayDriverThread: AVCPacketRelayDriverProc start failed (%d)", v3);
  OUTLINED_FUNCTION_3();
}

void AVCPacketRelayDriverProc_cold_1()
{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  uint8_t v3[24];
  int v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  v4 = 221;
  v5 = v0;
  v6 = 221;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, v1, v2, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/AVCPacketRelayDriverThread.m:%d: AVCPacketRelayDriverProc failed due to invalid handle.", v3);
  OUTLINED_FUNCTION_3();
}

void AVCPacketRelayDriverProc_cold_2(uint64_t a1, NSObject *a2)
{
  __int16 v3;
  int v4;
  uint64_t v5;
  uint8_t v6[24];
  int v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  __error();
  OUTLINED_FUNCTION_8_2();
  OUTLINED_FUNCTION_9();
  v7 = 266;
  v8 = v3;
  v9 = v4;
  OUTLINED_FUNCTION_7_0(&dword_1D8A54000, a2, v5, " [%s] %s:%d AVCPacketRelayDriverProc: select failed with errno %d", v6);
  OUTLINED_FUNCTION_19();
}

void AVCPacketRelayDriverProc_cold_3()
{
  __int16 v0;
  int v1;
  os_log_t v2;
  uint8_t v3[24];
  int v4;
  __int16 v5;
  int v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  v4 = 326;
  v5 = v0;
  v6 = 50;
  v7 = v0;
  v8 = 20;
  v9 = v0;
  v10 = v1;
  _os_log_error_impl(&dword_1D8A54000, v2, OS_LOG_TYPE_ERROR, " [%s] %s:%d AVCPacketRelayDriverProc: Failed to set CPU limit (%d, %d) (error=%d), move back to timeshare.", v3, 0x2Eu);
  OUTLINED_FUNCTION_19();
}

void AVCPacketRelayDriverThreadStop_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_11_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/AVCPacketRelayDriverThread.m:%d: %s: failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_19();
}

void AVCPacketRelayDriverThreadAddFileDescriptorWithConnection_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_11_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/AVCPacketRelayDriverThread.m:%d: %s: failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_19();
}

void AVCPacketRelayDriverThreadAddFileDescriptorWithConnection_cold_2()
{
  __int16 v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  v3 = v0;
  v4 = "AVCPacketRelayDriverThreadAddFileDescriptorWithConnection";
  v5 = 1024;
  v6 = 147;
  _os_log_error_impl(&dword_1D8A54000, v1, OS_LOG_TYPE_ERROR, " [%s] %s:%d AVCPacketRelayDriverThread: allocate new connection failed", v2, 0x1Cu);
  OUTLINED_FUNCTION_3();
}

void AVCPacketRelayDriverThreadRemoveFileDescriptor_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_11_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/AVCPacketRelayDriverThread.m:%d: %s: failed due to invalid handle.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_19();
}

void _VCTimescaleWSOLA_SearchMinimumCostPosition()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d Candidate length=%d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void _VCTimescaleWSOLA_PerformAdaptation()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d Wsola output size: %d =========", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  const char *v3;
  _BYTE v4[14];

  OUTLINED_FUNCTION_2();
  *(_WORD *)&v4[4] = v0;
  *(_QWORD *)&v4[6] = "_VCTimescaleWSOLA_PerformAdaptation";
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v1, v2, " [%s] %s:%d Nin:%d", v3, *(const char **)v4, (unint64_t)"_VCTimescaleWSOLA_PerformAdaptation" >> 16, 296);
  OUTLINED_FUNCTION_3();
}

void VCTimescaleWSOLA_Initialize_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to initialize the warp converters", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCTimescaleWSOLA_Initialize_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to initialize the int converter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCTimescaleWSOLA_Initialize_cold_3()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Failed to initialize the float converter", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCTimescaleWSOLA_Initialize_cold_4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_8_18();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d Unsupported warp frame size", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_3();
}

void VCTimescaleWSOLA_Initialize_cold_5()
{
  os_log_t v0;
  uint8_t v1[40];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_8_18();
  _os_log_fault_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_FAULT, " [%s] %s:%d Unsupported warp frame size", v1, 0x1Cu);
  OUTLINED_FUNCTION_3();
}

void VCTimescaleWSOLA_Adapt_cold_1()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;
  int v5;

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_4_1(&dword_1D8A54000, v0, v1, " [%s] %s:%d Copied Output: %d", v2, v3, v4, v5);
  OUTLINED_FUNCTION_3();
}

void VCTimescaleWSOLA_Adapt_cold_2()
{
  os_log_t v0;
  uint8_t v1[40];

  OUTLINED_FUNCTION_8_1(*MEMORY[0x1E0C80C00]);
  OUTLINED_FUNCTION_8_0();
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_10();
  _os_log_error_impl(&dword_1D8A54000, v0, OS_LOG_TYPE_ERROR, " [%s] %s:%d Output buffer size %d is insufficient to hold data", v1, 0x22u);
  OUTLINED_FUNCTION_3();
}

void HandleWCMEvent_cold_1(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v2 = 136315906;
  v3 = a1;
  v4 = 2080;
  v5 = "ProcessErrorEvent";
  v6 = 1024;
  v7 = 73;
  v8 = 1024;
  v9 = 73;
  _os_log_error_impl(&dword_1D8A54000, a2, OS_LOG_TYPE_ERROR, " [%s] %s:%d /Library/Caches/com.apple.xbs/Sources/AVConference/AVConference.subproj/Sources/VCWCMClient.m:%d: WCM: errro event.", (uint8_t *)&v2, 0x22u);
}

void VideoPacketDump_OpenRTPLog_cold_1()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d dumpID is null", v2, v3, v4, v5, 2u);
}

void VideoPacketDump_OpenRTPLog_cold_2()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_0(&dword_1D8A54000, v0, v1, " [%s] %s:%d VideoPacketDump: failed to open log file", v2, v3, v4, v5, 2u);
}

