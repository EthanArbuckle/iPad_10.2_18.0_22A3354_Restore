void closure #1 in PaperKitExtensionDocumentViewController.thumbnailsVisible.didset(void *a1)
{
  id v1;
  id v2;

  v1 = objc_msgSend(a1, sel_view);
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, sel_layoutIfNeeded);

  }
  else
  {
    __break(1u);
  }
}

uint64_t PaperKitExtensionDocumentViewController.thumbnailsVisible.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_thumbnailsVisible);
  swift_beginAccess();
  return *v1;
}

void PaperKitExtensionDocumentViewController.thumbnailsVisible.setter(char a1)
{
  char *v1;
  int v3;
  char *v4;
  int v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  char *v10;
  _QWORD aBlock[6];

  v3 = a1 & 1;
  v4 = &v1[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_thumbnailsVisible];
  swift_beginAccess();
  v5 = *v4;
  *v4 = a1;
  if (v5 != v3)
  {
    v6 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_collapseThumbnailsConstraint];
    if (v6)
      objc_msgSend(v6, sel_setActive_, (a1 & 1) == 0);
    v7 = (void *)objc_opt_self();
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v1;
    aBlock[4] = partial apply for closure #1 in PaperKitExtensionDocumentViewController.thumbnailsVisible.didset;
    aBlock[5] = v8;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_58;
    v9 = _Block_copy(aBlock);
    v10 = v1;
    swift_release();
    objc_msgSend(v7, sel_animateWithDuration_animations_, v9, 0.2);
    _Block_release(v9);
  }
}

void (*PaperKitExtensionDocumentViewController.thumbnailsVisible.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_thumbnailsVisible;
  v3[9] = v1;
  v3[10] = v4;
  v5 = (_BYTE *)(v1 + v4);
  swift_beginAccess();
  *((_BYTE *)v3 + 88) = *v5;
  return PaperKitExtensionDocumentViewController.thumbnailsVisible.modify;
}

void PaperKitExtensionDocumentViewController.thumbnailsVisible.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  char *v11;

  v2 = *(_QWORD **)a1;
  v3 = *(unsigned __int8 *)(*(_QWORD *)a1 + 88);
  if ((a2 & 1) != 0)
  {
    PaperKitExtensionDocumentViewController.thumbnailsVisible.setter(v3);
  }
  else
  {
    v5 = v2[9];
    v4 = v2[10];
    v6 = *(unsigned __int8 *)(v5 + v4);
    *(_BYTE *)(v5 + v4) = v3;
    if (v3 != v6)
    {
      v7 = (char *)v2[9];
      if (*(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_collapseThumbnailsConstraint])
      {
        objc_msgSend(*(id *)&v7[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_collapseThumbnailsConstraint], sel_setActive_, v3 ^ 1u);
        v7 = (char *)v2[9];
      }
      v8 = (void *)objc_opt_self();
      v9 = swift_allocObject();
      *(_QWORD *)(v9 + 16) = v7;
      v2[4] = closure #1 in PaperKitExtensionDocumentViewController.thumbnailsVisible.didsetpartial apply;
      v2[5] = v9;
      *v2 = MEMORY[0x1E0C809B0];
      v2[1] = 1107296256;
      v2[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      v2[3] = &block_descriptor_20_1;
      v10 = _Block_copy(v2);
      v11 = v7;
      swift_release();
      objc_msgSend(v8, sel_animateWithDuration_animations_, v10, 0.2);
      _Block_release(v10);
    }
  }
  free(v2);
}

Swift::Void __swiftcall PaperKitExtensionDocumentViewController.revertAllChanges()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id *v3;
  id v4;
  uint64_t v5;
  id *v6;
  id v7;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView);
  if (v2)
  {
    v3 = (id *)(v2 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
    swift_beginAccess();
    if (*v3)
    {
      v4 = *v3;
      PaperDocumentView.revertAllChanges()();

    }
  }
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentViewController);
  if (v5)
  {
    v6 = (id *)(v5 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    if (*v6)
    {
      v7 = *v6;
      PaperDocumentView.revertAllChanges()();

    }
  }
}

void PaperKitExtensionDocumentViewController.showParticipantCursors.didset()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  char *v3;
  char v4;
  char *v5;
  void **v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char v13;
  char *v14;
  void **v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;

  v1 = v0;
  v2 = *(char **)(v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView);
  if (v2)
  {
    v3 = (char *)(v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_showParticipantCursors);
    swift_beginAccess();
    v4 = *v3;
    v5 = &v2[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_showParticipantCursors];
    swift_beginAccess();
    *v5 = v4;
    v6 = (void **)&v2[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView];
    swift_beginAccess();
    v7 = (char *)*v6;
    if (*v6)
    {
      v8 = &v7[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors];
      swift_beginAccess();
      *v8 = v4;
      v9 = v2;
      v10 = v7;
      PaperDocumentView.showParticipantCursors.didset();

    }
  }
  v11 = *(char **)(v1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentViewController);
  if (v11)
  {
    v12 = (char *)(v1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_showParticipantCursors);
    swift_beginAccess();
    v13 = *v12;
    v14 = &v11[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_showParticipantCursors];
    swift_beginAccess();
    *v14 = v13;
    v15 = (void **)&v11[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
    swift_beginAccess();
    v16 = (char *)*v15;
    if (*v15)
    {
      v17 = &v16[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors];
      swift_beginAccess();
      *v17 = v13;
      v18 = v11;
      v19 = v16;
      PaperDocumentView.showParticipantCursors.didset();

    }
  }
}

uint64_t PaperKitExtensionDocumentViewController.showParticipantCursors.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_showParticipantCursors);
  swift_beginAccess();
  return *v1;
}

void PaperKitExtensionDocumentViewController.showParticipantCursors.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_showParticipantCursors);
  swift_beginAccess();
  *v3 = a1;
  PaperKitExtensionDocumentViewController.showParticipantCursors.didset();
}

uint64_t (*PaperKitExtensionDocumentViewController.showParticipantCursors.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return PaperKitExtensionDocumentViewController.showParticipantCursors.modify;
}

uint64_t PaperKitExtensionDocumentViewController.showParticipantCursors.modify(uint64_t a1, char a2)
{
  return MiniMenuState._fontName.modify(a1, a2, (uint64_t (*)(uint64_t))PaperKitExtensionDocumentViewController.showParticipantCursors.didset);
}

void PaperKitExtensionDocumentViewController.liveStreamMessenger.didset()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  char *v7;
  void **v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void **v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;

  v1 = v0;
  v2 = *(char **)(v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView);
  if (v2)
  {
    v3 = v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_liveStreamMessenger;
    swift_beginAccess();
    v4 = MEMORY[0x1DF0E666C](v3);
    v5 = *(_QWORD *)(v3 + 8);
    v6 = (uint64_t *)&v2[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_liveStreamMessenger];
    swift_beginAccess();
    *v6 = v4;
    v6[1] = v5;
    v7 = v2;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    v8 = (void **)&v7[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView];
    swift_beginAccess();
    v9 = (char *)*v8;
    if (*v8)
    {
      v10 = v6[1];
      v11 = &v9[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger];
      swift_beginAccess();
      *((_QWORD *)v11 + 1) = v10;
      swift_unknownObjectWeakAssign();
      v12 = v9;
      swift_unknownObjectRetain();
      PaperDocumentView.liveStreamMessenger.didset();

      swift_unknownObjectRelease();
      v7 = v12;
    }

    swift_unknownObjectRelease();
  }
  v13 = *(char **)(v1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentViewController);
  if (v13)
  {
    v14 = v1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_liveStreamMessenger;
    swift_beginAccess();
    MEMORY[0x1DF0E666C](v14);
    v15 = *(_QWORD *)(v14 + 8);
    v16 = &v13[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_liveStreamMessenger];
    swift_beginAccess();
    *((_QWORD *)v16 + 1) = v15;
    swift_unknownObjectWeakAssign();
    v17 = (void **)&v13[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
    swift_beginAccess();
    v18 = (char *)*v17;
    if (*v17)
    {
      MEMORY[0x1DF0E666C](v16);
      v19 = *((_QWORD *)v16 + 1);
      v20 = &v18[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger];
      swift_beginAccess();
      *((_QWORD *)v20 + 1) = v19;
      swift_unknownObjectWeakAssign();
      v21 = v13;
      v22 = v18;
      PaperDocumentView.liveStreamMessenger.didset();

      swift_unknownObjectRelease();
    }
    swift_unknownObjectRelease();
  }
}

uint64_t PaperKitExtensionDocumentViewController.liveStreamMessenger.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_liveStreamMessenger);
}

uint64_t PaperKitExtensionDocumentViewController.liveStreamMessenger.setter(uint64_t a1, uint64_t a2)
{
  return PaperDocumentView.pageOverlayViewProvider.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_liveStreamMessenger, (void (*)(uint64_t))PaperKitExtensionDocumentViewController.liveStreamMessenger.didset);
}

void (*PaperKitExtensionDocumentViewController.liveStreamMessenger.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_liveStreamMessenger;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return PaperKitExtensionDocumentViewController.liveStreamMessenger.modify;
}

void PaperKitExtensionDocumentViewController.liveStreamMessenger.modify(uint64_t a1, char a2)
{
  PaperDocumentView.pageOverlayViewProvider.modify(a1, a2, (void (*)(uint64_t))PaperKitExtensionDocumentViewController.liveStreamMessenger.didset);
}

uint64_t key path setter for PaperKitExtensionDocumentViewController.participantDetailsDataSource : PaperKitExtensionDocumentViewController(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *a1;
  v3 = a1[1];
  v4 = (_QWORD *)(*a2 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_participantDetailsDataSource);
  swift_beginAccess();
  *v4 = v2;
  v4[1] = v3;
  swift_unknownObjectRetain_n();
  swift_unknownObjectRelease();
  PaperKitExtensionDocumentViewController.participantDetailsDataSource.didset();
  return swift_unknownObjectRelease();
}

void PaperKitExtensionDocumentViewController.participantDetailsDataSource.didset()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  void **v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void **v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;

  v1 = v0;
  v2 = *(char **)(v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView);
  if (v2)
  {
    v3 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_participantDetailsDataSource);
    swift_beginAccess();
    v4 = *v3;
    v5 = v3[1];
    v6 = &v2[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_participantDetailsDataSource];
    swift_beginAccess();
    *(_QWORD *)v6 = v4;
    *((_QWORD *)v6 + 1) = v5;
    swift_unknownObjectRetain_n();
    v7 = v2;
    swift_unknownObjectRelease();
    v8 = (void **)&v7[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView];
    swift_beginAccess();
    v9 = (char *)*v8;
    if (*v8)
    {
      v10 = *((_QWORD *)v6 + 1);
      v11 = &v9[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource];
      swift_beginAccess();
      *((_QWORD *)v11 + 1) = v10;
      swift_unknownObjectWeakAssign();
      v12 = v9;
      swift_unknownObjectRetain();
      PaperDocumentView.participantDetailsDataSource.didset();

      swift_unknownObjectRelease();
      v7 = v12;
    }

    swift_unknownObjectRelease();
  }
  v13 = *(char **)(v1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentViewController);
  if (v13)
  {
    v14 = v1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_participantDetailsDataSource;
    swift_beginAccess();
    v15 = *(_QWORD *)(v14 + 8);
    v16 = &v13[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_participantDetailsDataSource];
    swift_beginAccess();
    *((_QWORD *)v16 + 1) = v15;
    swift_unknownObjectWeakAssign();
    v17 = (void **)&v13[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
    swift_beginAccess();
    v18 = (char *)*v17;
    if (*v17)
    {
      MEMORY[0x1DF0E666C](v16);
      v19 = *((_QWORD *)v16 + 1);
      v20 = &v18[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource];
      swift_beginAccess();
      *((_QWORD *)v20 + 1) = v19;
      swift_unknownObjectWeakAssign();
      v21 = v13;
      swift_unknownObjectRetain();
      v22 = v18;
      PaperDocumentView.participantDetailsDataSource.didset();

      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
  }
}

uint64_t PaperKitExtensionDocumentViewController.participantDetailsDataSource.getter()
{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

uint64_t PaperKitExtensionDocumentViewController.participantDetailsDataSource.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_participantDetailsDataSource);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  PaperKitExtensionDocumentViewController.participantDetailsDataSource.didset();
  return swift_unknownObjectRelease();
}

uint64_t (*PaperKitExtensionDocumentViewController.participantDetailsDataSource.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return PaperKitExtensionDocumentViewController.participantDetailsDataSource.modify;
}

uint64_t PaperKitExtensionDocumentViewController.participantDetailsDataSource.modify(uint64_t a1, char a2)
{
  return MiniMenuState._fontName.modify(a1, a2, (uint64_t (*)(uint64_t))PaperKitExtensionDocumentViewController.participantDetailsDataSource.didset);
}

Swift::Void __swiftcall PaperKitExtensionDocumentViewController.participantDetailsDidChange()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  void **v3;
  void *v4;
  char *v5;
  id v6;
  char *v7;
  void **v8;
  void *v9;
  char *v10;
  id v11;

  v1 = v0;
  v2 = *(char **)(v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView);
  if (v2)
  {
    v3 = (void **)&v2[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView];
    swift_beginAccess();
    v4 = *v3;
    if (v4)
    {
      v5 = v2;
      v6 = v4;
      PaperDocumentView.participantDetailsDidChange()();

    }
  }
  v7 = *(char **)(v1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentViewController);
  if (v7)
  {
    v8 = (void **)&v7[OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView];
    swift_beginAccess();
    v9 = *v8;
    if (*v8)
    {
      v10 = v7;
      v11 = v9;
      PaperDocumentView.participantDetailsDidChange()();

    }
  }
}

void PaperKitExtensionDocumentViewController.textualContextProvider.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView);
  if (v1)
  {
    v2 = v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_textualContextProvider;
    swift_beginAccess();
    MEMORY[0x1DF0E666C](v2);
    v3 = *(_QWORD *)(v2 + 8);
    v4 = v1 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_textualContextProvider;
    swift_beginAccess();
    *(_QWORD *)(v4 + 8) = v3;
    swift_unknownObjectWeakAssign();
    v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
    swift_beginAccess();
    v6 = *v5;
    if (*v5)
    {
      MEMORY[0x1DF0E666C](v4);
      v7 = *(_QWORD *)(v4 + 8);
      v8 = v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider;
      swift_beginAccess();
      *(_QWORD *)(v8 + 8) = v7;
      swift_unknownObjectWeakAssign();
      swift_unknownObjectRelease();
    }
    swift_unknownObjectRelease();
  }
  v9 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentViewController);
  if (v9)
  {
    v10 = v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_textualContextProvider;
    swift_beginAccess();
    MEMORY[0x1DF0E666C](v10);
    v11 = *(_QWORD *)(v10 + 8);
    v12 = v9 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_textualContextProvider;
    swift_beginAccess();
    *(_QWORD *)(v12 + 8) = v11;
    swift_unknownObjectWeakAssign();
    v13 = (uint64_t *)(v9 + OBJC_IVAR____TtC8PaperKit27PaperDocumentViewController_paperDocumentView);
    swift_beginAccess();
    v14 = *v13;
    if (*v13)
    {
      MEMORY[0x1DF0E666C](v12);
      v15 = *(_QWORD *)(v12 + 8);
      v16 = v14 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider;
      swift_beginAccess();
      *(_QWORD *)(v16 + 8) = v15;
      swift_unknownObjectWeakAssign();
      swift_unknownObjectRelease();
    }
    swift_unknownObjectRelease();
  }
}

uint64_t PaperKitExtensionDocumentViewController.textualContextProvider.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_textualContextProvider);
}

uint64_t PaperKitExtensionDocumentViewController.textualContextProvider.setter(uint64_t a1, uint64_t a2)
{
  return PaperDocumentView.pageOverlayViewProvider.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_textualContextProvider, (void (*)(uint64_t))PaperKitExtensionDocumentViewController.textualContextProvider.didset);
}

void (*PaperKitExtensionDocumentViewController.textualContextProvider.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_textualContextProvider;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return PaperKitExtensionDocumentViewController.textualContextProvider.modify;
}

void PaperKitExtensionDocumentViewController.textualContextProvider.modify(uint64_t a1, char a2)
{
  PaperDocumentView.pageOverlayViewProvider.modify(a1, a2, (void (*)(uint64_t))PaperKitExtensionDocumentViewController.textualContextProvider.didset);
}

uint64_t PaperKitExtensionDocumentViewController.viewControllerForPresentingUI.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_viewControllerForPresentingUI;
  swift_beginAccess();
  return MEMORY[0x1DF0E666C](v1);
}

void PaperKitExtensionDocumentViewController.viewControllerForPresentingUI.setter(void *a1)
{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();

}

uint64_t (*PaperKitExtensionDocumentViewController.viewControllerForPresentingUI.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_viewControllerForPresentingUI;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x1DF0E666C](v5);
  return PaperKitExtensionDocumentViewController.viewControllerForPresentingUI.modify;
}

uint64_t key path setter for PaperKitExtensionDocumentViewController.magicGenerativePlaygroundTokenProvider : PaperKitExtensionDocumentViewController(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _BYTE v5[40];

  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v5, &demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?);
  v3 = *a2 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_magicGenerativePlaygroundTokenProvider;
  swift_beginAccess();
  outlined assign with take of MagicGenerativePlaygroundTokenProvider?((uint64_t)v5, v3);
  return swift_endAccess();
}

uint64_t PaperKitExtensionDocumentViewController.magicGenerativePlaygroundTokenProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_magicGenerativePlaygroundTokenProvider;
  swift_beginAccess();
  return outlined init with copy of Ref<PKStrokeInheritedProperties>?(v3, a1, &demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?);
}

uint64_t PaperKitExtensionDocumentViewController.magicGenerativePlaygroundTokenProvider.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_magicGenerativePlaygroundTokenProvider;
  swift_beginAccess();
  outlined assign with take of MagicGenerativePlaygroundTokenProvider?(a1, v3);
  return swift_endAccess();
}

uint64_t (*PaperKitExtensionDocumentViewController.magicGenerativePlaygroundTokenProvider.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.backgroundColor.modify;
}

void PaperKitExtensionDocumentViewController.initiateMagicGenerativePlayground(context:in:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  void *v16;
  void *v17;
  char v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(void **)(v5 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentViewController);
  if (v15)
  {
    v17 = *(void **)a1;
    v16 = *(void **)(a1 + 8);
    v18 = *(_BYTE *)(a1 + 16);
    v19 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v14, 1, 1, v19);
    type metadata accessor for MainActor();
    v20 = v15;
    outlined copy of MagicGenerativePlaygroundContext(v17, v16, v18);
    v21 = static MainActor.shared.getter();
    v22 = swift_allocObject();
    v23 = MEMORY[0x1E0DF06E8];
    *(_QWORD *)(v22 + 16) = v21;
    *(_QWORD *)(v22 + 24) = v23;
    *(_QWORD *)(v22 + 32) = v20;
    *(_QWORD *)(v22 + 40) = v17;
    *(_QWORD *)(v22 + 48) = v16;
    *(_BYTE *)(v22 + 56) = v18;
    *(double *)(v22 + 64) = a2;
    *(double *)(v22 + 72) = a3;
    *(double *)(v22 + 80) = a4;
    *(double *)(v22 + 88) = a5;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in PaperDocumentViewController.initiateMagicGenerativePlayground(context:in:), v22);

    swift_release();
  }
}

id PaperKitExtensionDocumentViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  void *v6;
  id v7;

  v4 = v3;
  if (a2)
  {
    v6 = (void *)MEMORY[0x1DF0E41AC]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void PaperKitExtensionDocumentViewController.init(nibName:bundle:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id PaperKitExtensionDocumentViewController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PaperKitExtensionDocumentViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperKitExtensionDocumentViewController(uint64_t a1, uint64_t a2)
{
  return protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperDocumentViewController(a1, a2, &OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_textualContextProvider);
}

uint64_t protocol witness for PaperKitAttachment.textualContextProvider.setter in conformance PaperKitExtensionDocumentViewController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.setter in conformance PaperDocumentView(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_textualContextProvider, (void (*)(uint64_t))PaperKitExtensionDocumentViewController.textualContextProvider.didset);
}

void (*protocol witness for PaperKitAttachment.textualContextProvider.modify in conformance PaperKitExtensionDocumentViewController(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = *v1;
  v5 = OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_textualContextProvider;
  v3[5] = *v1;
  v3[6] = v5;
  v6 = v4 + v5;
  swift_beginAccess();
  v7 = MEMORY[0x1DF0E666C](v6);
  v8 = *(_QWORD *)(v6 + 8);
  v3[3] = v7;
  v3[4] = v8;
  return PaperKitExtensionDocumentViewController.textualContextProvider.modify;
}

uint64_t protocol witness for PaperKitAttachment.viewControllerForPresentingUI.getter in conformance PaperKitExtensionDocumentViewController()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_viewControllerForPresentingUI;
  swift_beginAccess();
  return MEMORY[0x1DF0E666C](v1);
}

void protocol witness for PaperKitAttachment.viewControllerForPresentingUI.setter in conformance PaperKitExtensionDocumentViewController(void *a1)
{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();

}

uint64_t (*protocol witness for PaperKitAttachment.viewControllerForPresentingUI.modify in conformance PaperKitExtensionDocumentViewController(_QWORD *a1))()
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *v1;
  v5 = OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_viewControllerForPresentingUI;
  v3[4] = *v1;
  v3[5] = v5;
  v6 = v4 + v5;
  swift_beginAccess();
  v3[3] = MEMORY[0x1DF0E666C](v6);
  return PaperKitExtensionDocumentViewController.viewControllerForPresentingUI.modify;
}

void PaperKitExtensionDocumentViewController.viewControllerForPresentingUI.modify(id **a1, char a2)
{
  id *v3;
  id v4;

  v3 = *a1;
  v4 = (*a1)[3];
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();

  }
  free(v3);
}

uint64_t protocol witness for PaperDocumentInlineViewDelegate.paperDocumentDidSave() in conformance PaperKitExtensionDocumentViewController(uint64_t a1, uint64_t a2)
{
  return protocol witness for PaperDocumentInlineViewDelegate.paperDocumentDidSave() in conformance PaperKitExtensionDocumentViewController(a1, a2, (void (*)(void))specialized ExtensionViewController.documentViewControllerDidSave(_:));
}

uint64_t protocol witness for PaperDocumentInlineViewDelegate.paperDocumentDidScroll() in conformance PaperKitExtensionDocumentViewController(uint64_t a1, uint64_t a2)
{
  return protocol witness for PaperDocumentInlineViewDelegate.paperDocumentDidSave() in conformance PaperKitExtensionDocumentViewController(a1, a2, (void (*)(void))specialized ExtensionViewController.documentViewControllerDidScroll(_:));
}

uint64_t protocol witness for PaperDocumentInlineViewDelegate.paperDocumentDidSave() in conformance PaperKitExtensionDocumentViewController(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v3;
  uint64_t result;

  result = MEMORY[0x1DF0E666C](v3 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_delegate);
  if (result)
  {
    a3();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.getter in conformance PaperKitExtensionDocumentViewController(uint64_t a1, uint64_t a2)
{
  return protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperDocumentViewController(a1, a2, &OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_liveStreamMessenger);
}

uint64_t protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.setter in conformance PaperKitExtensionDocumentViewController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.setter in conformance PaperDocumentView(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_liveStreamMessenger, (void (*)(uint64_t))PaperKitExtensionDocumentViewController.liveStreamMessenger.didset);
}

void (*protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.modify in conformance PaperKitExtensionDocumentViewController(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = *v1;
  v5 = OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_liveStreamMessenger;
  v3[5] = *v1;
  v3[6] = v5;
  v6 = v4 + v5;
  swift_beginAccess();
  v7 = MEMORY[0x1DF0E666C](v6);
  v8 = *(_QWORD *)(v6 + 8);
  v3[3] = v7;
  v3[4] = v8;
  return PaperKitExtensionDocumentViewController.liveStreamMessenger.modify;
}

uint64_t protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.getter in conformance PaperKitExtensionDocumentViewController()
{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.setter in conformance PaperKitExtensionDocumentViewController(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v5;

  v5 = (_QWORD *)(*v2 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_participantDetailsDataSource);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  PaperKitExtensionDocumentViewController.participantDetailsDataSource.didset();
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.modify in conformance PaperKitExtensionDocumentViewController(uint64_t a1))(uint64_t a1, char a2)
{
  _QWORD *v1;

  *(_QWORD *)(a1 + 24) = *v1;
  swift_beginAccess();
  return PaperKitExtensionDocumentViewController.participantDetailsDataSource.modify;
}

void protocol witness for PaperKitStreamableAttachment.participantDetailsDidChange() in conformance PaperKitExtensionDocumentViewController()
{
  PaperKitExtensionDocumentViewController.participantDetailsDidChange()();
}

uint64_t protocol witness for PaperKitStreamableAttachment.showParticipantCursors.getter in conformance PaperKitExtensionDocumentViewController()
{
  _QWORD *v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(*v0
                         + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_showParticipantCursors);
  swift_beginAccess();
  return *v1;
}

void protocol witness for PaperKitStreamableAttachment.showParticipantCursors.setter in conformance PaperKitExtensionDocumentViewController(char a1)
{
  _QWORD *v1;
  _BYTE *v3;

  v3 = (_BYTE *)(*v1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_showParticipantCursors);
  swift_beginAccess();
  *v3 = a1;
  PaperKitExtensionDocumentViewController.showParticipantCursors.didset();
}

uint64_t (*protocol witness for PaperKitStreamableAttachment.showParticipantCursors.modify in conformance PaperKitExtensionDocumentViewController(uint64_t a1))(uint64_t a1, char a2)
{
  _QWORD *v1;

  *(_QWORD *)(a1 + 24) = *v1;
  swift_beginAccess();
  return PaperKitExtensionDocumentViewController.showParticipantCursors.modify;
}

uint64_t type metadata accessor for PaperKitExtensionDocumentViewController()
{
  return objc_opt_self();
}

uint64_t sub_1DDE7C8FC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1DDE7C920()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for URL();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)(void **a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for URL() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  closure #1 in PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)(a1, v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

void partial apply for closure #2 in PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)(uint64_t a1)
{
  uint64_t v1;

  closure #2 in PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)(a1, v1);
}

uint64_t sub_1DDE7C9EC()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1DDE7CA10()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)()
{
  return closure #3 in PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)();
}

uint64_t sub_1DDE7CA44()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in PaperKitExtensionDocumentViewController.thumbnailsVisible.didset()
{
  uint64_t v0;

  closure #1 in PaperKitExtensionDocumentViewController.thumbnailsVisible.didset(*(void **)(v0 + 16));
}

uint64_t block_copy_helper_58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_58()
{
  return swift_release();
}

uint64_t sub_1DDE7CA88()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  outlined consume of MagicGenerativePlaygroundContext(*(void **)(v0 + 40), *(id *)(v0 + 48), *(_BYTE *)(v0 + 56));
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type PaperKitExtensionDocumentViewController.Layout and conformance PaperKitExtensionDocumentViewController.Layout()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PaperKitExtensionDocumentViewController.Layout and conformance PaperKitExtensionDocumentViewController.Layout;
  if (!lazy protocol witness table cache variable for type PaperKitExtensionDocumentViewController.Layout and conformance PaperKitExtensionDocumentViewController.Layout)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PaperKitExtensionDocumentViewController.Layout, &type metadata for PaperKitExtensionDocumentViewController.Layout);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PaperKitExtensionDocumentViewController.Layout and conformance PaperKitExtensionDocumentViewController.Layout);
  }
  return result;
}

__n128 sub_1DDE7CB08@<Q0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;

  v3 = *a1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_extensionHostSafeAreaInsets;
  swift_beginAccess();
  result = *(__n128 *)v3;
  v5 = *(_OWORD *)(v3 + 16);
  *a2 = *(_OWORD *)v3;
  a2[1] = v5;
  return result;
}

uint64_t sub_1DDE7CB5C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, &OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_thumbnailsVisible, a2);
}

void sub_1DDE7CB68(char *a1)
{
  PaperKitExtensionDocumentViewController.thumbnailsVisible.setter(*a1);
}

uint64_t sub_1DDE7CB8C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, &OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_showParticipantCursors, a2);
}

void sub_1DDE7CB98(char *a1, _QWORD *a2)
{
  char v2;
  _BYTE *v3;

  v2 = *a1;
  v3 = (_BYTE *)(*a2 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_showParticipantCursors);
  swift_beginAccess();
  *v3 = v2;
  PaperKitExtensionDocumentViewController.showParticipantCursors.didset();
}

uint64_t sub_1DDE7CBF0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_liveStreamMessenger, a2);
}

uint64_t sub_1DDE7CBFC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PaperDocumentView.pageOverlayViewProvider : PaperDocumentView(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_liveStreamMessenger, (void (*)(uint64_t))PaperKitExtensionDocumentViewController.liveStreamMessenger.didset);
}

uint64_t sub_1DDE7CC20@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  _OWORD *v3;

  v3 = (_OWORD *)(*a1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_participantDetailsDataSource);
  swift_beginAccess();
  *a2 = *v3;
  return swift_unknownObjectRetain();
}

uint64_t sub_1DDE7CC7C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_textualContextProvider, a2);
}

uint64_t sub_1DDE7CC88(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PaperDocumentView.pageOverlayViewProvider : PaperDocumentView(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_textualContextProvider, (void (*)(uint64_t))PaperKitExtensionDocumentViewController.textualContextProvider.didset);
}

uint64_t sub_1DDE7CCAC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_viewControllerForPresentingUI;
  swift_beginAccess();
  result = MEMORY[0x1DF0E666C](v3);
  *a2 = result;
  return result;
}

uint64_t sub_1DDE7CD00()
{
  swift_beginAccess();
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1DDE7CD54@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1 + OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_magicGenerativePlaygroundTokenProvider;
  swift_beginAccess();
  return outlined init with copy of Ref<PKStrokeInheritedProperties>?(v3, a2, &demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?);
}

uint64_t method lookup function for PaperKitExtensionDocumentViewController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.extensionHostSafeAreaInsets.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x170))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.extensionHostSafeAreaInsets.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x178))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.extensionHostSafeAreaInsets.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x180))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.__allocating_init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 392))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.paperDocumentDidSave()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x198))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.paperDocumentDidFailToLoad(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.paperDocumentDidScroll()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.paperDocumentDidLoad(dataModel:view:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.thumbnailsVisible.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.thumbnailsVisible.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.thumbnailsVisible.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.revertAllChanges()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.showParticipantCursors.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.showParticipantCursors.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.showParticipantCursors.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.liveStreamMessenger.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.liveStreamMessenger.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.liveStreamMessenger.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x200))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.participantDetailsDataSource.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x208))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.participantDetailsDataSource.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x210))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.participantDetailsDataSource.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x218))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.participantDetailsDidChange()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x220))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.textualContextProvider.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x228))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.textualContextProvider.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x230))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.textualContextProvider.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x238))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.viewControllerForPresentingUI.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x240))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.viewControllerForPresentingUI.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x248))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.viewControllerForPresentingUI.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x250))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.magicGenerativePlaygroundTokenProvider.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x258))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.magicGenerativePlaygroundTokenProvider.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x260))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.magicGenerativePlaygroundTokenProvider.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x268))();
}

uint64_t dispatch thunk of PaperKitExtensionDocumentViewController.initiateMagicGenerativePlayground(context:in:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x270))();
}

uint64_t storeEnumTagSinglePayload for PaperKitExtensionDocumentViewController.Layout(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1DDE7D178 + 4 * byte_1DDF458A5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1DDE7D1AC + 4 * byte_1DDF458A0[v4]))();
}

uint64_t sub_1DDE7D1AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDE7D1B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDE7D1BCLL);
  return result;
}

uint64_t sub_1DDE7D1C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDE7D1D0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1DDE7D1D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDE7D1DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PaperKitExtensionDocumentViewController.Layout()
{
  return &type metadata for PaperKitExtensionDocumentViewController.Layout;
}

void specialized PaperKitExtensionDocumentViewController.init(coder:)()
{
  _BYTE *v0;
  unint64_t v1;
  _OWORD *v2;
  __int128 v3;
  _QWORD *v4;
  char *v5;

  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_inlineView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_thumbnailView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_collapseThumbnailsConstraint] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentViewController] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentSyncManager] = 0;
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    v1 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
  else
    v1 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_paperDocumentCancellables] = v1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v2 = &v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_extensionHostSafeAreaInsets];
  v3 = *(_OWORD *)(MEMORY[0x1E0DC49E8] + 16);
  *v2 = *MEMORY[0x1E0DC49E8];
  v2[1] = v3;
  v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_thumbnailsVisible] = 0;
  v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_showParticipantCursors] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_liveStreamMessenger + 8] = 0;
  swift_unknownObjectWeakInit();
  v4 = &v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_participantDetailsDataSource];
  *v4 = 0;
  v4[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_textualContextProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  v5 = &v0[OBJC_IVAR____TtC8PaperKit39PaperKitExtensionDocumentViewController_magicGenerativePlaygroundTokenProvider];
  *(_OWORD *)v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  *((_QWORD *)v5 + 4) = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void partial apply for closure #1 in closure #3 in PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)()
{
  uint64_t v0;

  closure #1 in closure #3 in PaperKitExtensionDocumentViewController.init(paperDocumentURL:coherenceContextURL:encryptionDelegate:layout:)(v0);
}

Swift::Void __swiftcall PPKPDFIconCollectionViewCell_iOS_Swift.prepareForReuse()()
{
  char *v0;
  uint64_t v1;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PPKPDFIconCollectionViewCell_iOS_Swift();
  objc_msgSendSuper2(&v2, sel_prepareForReuse);
  v1 = OBJC_IVAR___PPKPDFIconCollectionViewCell_iOS_Swift_imageFetch;
  if (*(_QWORD *)&v0[OBJC_IVAR___PPKPDFIconCollectionViewCell_iOS_Swift_imageFetch])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(_QWORD *)&v0[v1] = 0;
  swift_release();
}

id PPKPDFIconCollectionViewCell_iOS_Swift.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PPKPDFIconCollectionViewCell_iOS_Swift();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for PPKPDFIconCollectionViewCell_iOS_Swift()
{
  return objc_opt_self();
}

Swift::Void __swiftcall FontSizeViewController.viewDidLoad()()
{
  void *v0;
  uint64_t v1;
  double v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  char *v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  char *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  char *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  char *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  char *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  char *v40;
  id v41;
  id v42;
  id v43;
  id v44;
  char *v45;
  id v46;
  id v47;
  id v48;
  Class isa;
  id v50;
  void *v51;
  id v52;
  id v53;
  char *v54;
  id v55;
  uint64_t v56;
  id v57;
  char *v58;
  id v59;
  id v60;
  id v61;
  id v62;
  char *v63;
  id v64;
  id v65;
  id v66;
  id v67;
  char *v68;
  id v69;
  id v70;
  id v71;
  id v72;
  char *v73;
  id v74;
  id v75;
  id v76;
  id v77;
  char *v78;
  id v79;
  id v80;
  id v81;
  id v82;
  char *v83;
  id v84;
  id v85;
  id v86;
  Class v87;
  void *v88;
  id v89;
  id v90;
  void *v91;
  void *v92;
  objc_super v93;

  v93.receiver = v0;
  v93.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v93, sel_viewDidLoad);
  v1 = *MEMORY[0x1E0DC4B50];
  v2 = *MEMORY[0x1E0DC1438];
  v3 = (void *)*MEMORY[0x1E0DC4920];
  v4 = (void *)objc_opt_self();
  v5 = v3;
  v6 = objc_msgSend(v4, sel_traitCollectionWithPreferredContentSizeCategory_, v5);
  v7 = objc_msgSend((id)objc_opt_self(), sel__preferredFontForTextStyle_weight_, v1, v2);
  if (!v7)
  {
    __break(1u);
    goto LABEL_7;
  }
  v8 = v7;
  v9 = objc_msgSend(v7, sel__fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection_, v6);

  if (!v9)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v10 = objc_msgSend((id)objc_opt_self(), sel_labelColor);
  v90 = (id)objc_opt_self();
  v92 = v9;
  v11 = objc_msgSend(v90, sel_configurationWithFont_scale_, v9, 2);
  v12 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, 0x80000001DDF5A750);
  v89 = (id)objc_opt_self();
  v13 = objc_msgSend(v89, sel_systemImageNamed_withConfiguration_, v12, v11);

  if (!v13)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v88 = v13;
  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_initWithImage_, v13);
  v91 = v10;
  objc_msgSend(v14, sel_setTintColor_, v10);
  objc_msgSend(v14, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v15 = ValueEditingViewController.slider.getter();
  v16 = *(id *)&v15[OBJC_IVAR____TtC8PaperKit11ValueSlider_leadingContentView];

  objc_msgSend(v16, sel_addSubview_, v14);
  v17 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1DDF39360;
  v19 = objc_msgSend(v14, sel_centerXAnchor);
  v20 = ValueEditingViewController.slider.getter();
  v21 = *(id *)&v20[OBJC_IVAR____TtC8PaperKit11ValueSlider_leadingContentView];

  v22 = objc_msgSend(v21, sel_centerXAnchor);
  v23 = objc_msgSend(v19, sel_constraintEqualToAnchor_, v22);

  *(_QWORD *)(v18 + 32) = v23;
  v24 = objc_msgSend(v14, sel_centerYAnchor);
  v25 = ValueEditingViewController.slider.getter();
  v26 = *(id *)&v25[OBJC_IVAR____TtC8PaperKit11ValueSlider_leadingContentView];

  v27 = objc_msgSend(v26, sel_centerYAnchor);
  v28 = objc_msgSend(v24, sel_constraintEqualToAnchor_, v27);

  *(_QWORD *)(v18 + 40) = v28;
  v29 = objc_msgSend(v14, sel_topAnchor);
  v30 = ValueEditingViewController.slider.getter();
  v31 = *(id *)&v30[OBJC_IVAR____TtC8PaperKit11ValueSlider_leadingContentView];

  v32 = objc_msgSend(v31, sel_topAnchor);
  v33 = objc_msgSend(v29, sel_constraintGreaterThanOrEqualToAnchor_, v32);

  *(_QWORD *)(v18 + 48) = v33;
  v34 = objc_msgSend(v14, sel_leadingAnchor);
  v35 = ValueEditingViewController.slider.getter();
  v36 = *(id *)&v35[OBJC_IVAR____TtC8PaperKit11ValueSlider_leadingContentView];

  v37 = objc_msgSend(v36, sel_leadingAnchor);
  v38 = objc_msgSend(v34, sel_constraintEqualToAnchor_constant_, v37, 4.0);

  *(_QWORD *)(v18 + 56) = v38;
  v39 = objc_msgSend(v14, sel_bottomAnchor);
  v40 = ValueEditingViewController.slider.getter();
  v41 = *(id *)&v40[OBJC_IVAR____TtC8PaperKit11ValueSlider_leadingContentView];

  v42 = objc_msgSend(v41, sel_bottomAnchor);
  v43 = objc_msgSend(v39, sel_constraintLessThanOrEqualToAnchor_, v42);

  *(_QWORD *)(v18 + 64) = v43;
  v44 = objc_msgSend(v14, sel_trailingAnchor);
  v45 = ValueEditingViewController.slider.getter();
  v46 = *(id *)&v45[OBJC_IVAR____TtC8PaperKit11ValueSlider_leadingContentView];

  v47 = objc_msgSend(v46, sel_trailingAnchor);
  v48 = objc_msgSend(v44, sel_constraintLessThanOrEqualToAnchor_, v47);

  *(_QWORD *)(v18 + 72) = v48;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v17, sel_activateConstraints_, isa);

  v50 = objc_msgSend(v90, sel_configurationWithFont_scale_, v92, 3);
  v51 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000016, 0x80000001DDF5A770);
  v52 = objc_msgSend(v89, sel_systemImageNamed_withConfiguration_, v51, v50);

  if (v52)
  {
    v53 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_initWithImage_, v52);
    objc_msgSend(v53, sel_setTintColor_, v91);
    objc_msgSend(v53, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    v54 = ValueEditingViewController.slider.getter();
    v55 = *(id *)&v54[OBJC_IVAR____TtC8PaperKit11ValueSlider_trailingContentView];

    objc_msgSend(v55, sel_addSubview_, v53);
    v56 = swift_allocObject();
    *(_OWORD *)(v56 + 16) = xmmword_1DDF39360;
    v57 = objc_msgSend(v53, sel_centerXAnchor);
    v58 = ValueEditingViewController.slider.getter();
    v59 = *(id *)&v58[OBJC_IVAR____TtC8PaperKit11ValueSlider_trailingContentView];

    v60 = objc_msgSend(v59, sel_centerXAnchor);
    v61 = objc_msgSend(v57, sel_constraintEqualToAnchor_, v60);

    *(_QWORD *)(v56 + 32) = v61;
    v62 = objc_msgSend(v53, sel_centerYAnchor);
    v63 = ValueEditingViewController.slider.getter();
    v64 = *(id *)&v63[OBJC_IVAR____TtC8PaperKit11ValueSlider_trailingContentView];

    v65 = objc_msgSend(v64, sel_centerYAnchor);
    v66 = objc_msgSend(v62, sel_constraintEqualToAnchor_, v65);

    *(_QWORD *)(v56 + 40) = v66;
    v67 = objc_msgSend(v53, sel_topAnchor);
    v68 = ValueEditingViewController.slider.getter();
    v69 = *(id *)&v68[OBJC_IVAR____TtC8PaperKit11ValueSlider_trailingContentView];

    v70 = objc_msgSend(v69, sel_topAnchor);
    v71 = objc_msgSend(v67, sel_constraintGreaterThanOrEqualToAnchor_, v70);

    *(_QWORD *)(v56 + 48) = v71;
    v72 = objc_msgSend(v53, sel_leadingAnchor);
    v73 = ValueEditingViewController.slider.getter();
    v74 = *(id *)&v73[OBJC_IVAR____TtC8PaperKit11ValueSlider_trailingContentView];

    v75 = objc_msgSend(v74, sel_leadingAnchor);
    v76 = objc_msgSend(v72, sel_constraintGreaterThanOrEqualToAnchor_, v75);

    *(_QWORD *)(v56 + 56) = v76;
    v77 = objc_msgSend(v53, sel_bottomAnchor);
    v78 = ValueEditingViewController.slider.getter();
    v79 = *(id *)&v78[OBJC_IVAR____TtC8PaperKit11ValueSlider_trailingContentView];

    v80 = objc_msgSend(v79, sel_bottomAnchor);
    v81 = objc_msgSend(v77, sel_constraintLessThanOrEqualToAnchor_, v80);

    *(_QWORD *)(v56 + 64) = v81;
    v82 = objc_msgSend(v53, sel_trailingAnchor);
    v83 = ValueEditingViewController.slider.getter();
    v84 = *(id *)&v83[OBJC_IVAR____TtC8PaperKit11ValueSlider_trailingContentView];

    v85 = objc_msgSend(v84, sel_trailingAnchor);
    v86 = objc_msgSend(v82, sel_constraintEqualToAnchor_constant_, v85, 2.0);

    *(_QWORD *)(v56 + 72) = v86;
    specialized Array._endMutation()();
    v87 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v17, sel_activateConstraints_, v87);

    return;
  }
LABEL_9:
  __break(1u);
}

uint64_t type metadata accessor for FontSizeViewController()
{
  return objc_opt_self();
}

uint64_t getEnumTagSinglePayload for ShapeLayout()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDE7E0D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRKeyPath();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ShapeLayout()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDE7E11C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRKeyPath();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for ShapeLayout()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ShapeLayout;
  if (!type metadata singleton initialization cache for ShapeLayout)
    return swift_getSingletonMetadata();
  return result;
}

_QWORD *ShapeLayout.createView<A>(in:canvas:parent:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinX;
  double MinY;
  double v37;
  double v38;
  uint64_t v39;
  id v40;
  _QWORD *v41;
  _QWORD v43[3];
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _UNKNOWN **v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;

  v43[0] = a4;
  v43[1] = a5;
  v44 = a3;
  v45 = a2;
  v43[2] = a1;
  v6 = type metadata accessor for CRKeyPath();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Shape>);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v46 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)v43 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, v5, v6, v22);
  v25 = type metadata accessor for Shape();
  v26 = lazy protocol witness table accessor for type Shape and conformance Shape();
  Ref.init(id:)();
  type metadata accessor for Capsule();
  lazy protocol witness table accessor for type Ref<Shape> and conformance Ref<A>();
  Capsule.encapsulate<A>(_:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  v47 = v25;
  v48 = v26;
  v49 = &protocol witness table for Shape;
  swift_getKeyPath();
  v27 = v44;
  v28 = v44;
  v29 = v45;
  v30 = v45;
  Capsule<>.subscript.getter();
  swift_release();
  x = v50.origin.x;
  y = v50.origin.y;
  width = v50.size.width;
  height = v50.size.height;
  MinX = CGRectGetMinX(v50);
  v51.origin.x = x;
  v51.origin.y = y;
  v51.size.width = width;
  v51.size.height = height;
  MinY = CGRectGetMinY(v51);
  v52.origin.x = x;
  v52.origin.y = y;
  v52.size.width = width;
  v52.size.height = height;
  v37 = CGRectGetWidth(v52);
  v53.origin.x = x;
  v53.origin.y = y;
  v53.size.width = width;
  v53.size.height = height;
  v38 = CGRectGetHeight(v53);
  v39 = v46;
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v19, v24, v16);
  v40 = objc_allocWithZone((Class)type metadata accessor for ShapeView());
  v41 = specialized ShapeView.init(frame:canvasElement:canvas:parentCanvasElement:)(v19, v29, v27, MinX, MinY, v37, v38);

  (*(void (**)(char *, uint64_t))(v39 + 8))(v24, v16);
  return v41;
}

unint64_t lazy protocol witness table accessor for type Ref<Shape> and conformance Ref<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Ref<Shape> and conformance Ref<A>;
  if (!lazy protocol witness table cache variable for type Ref<Shape> and conformance Ref<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Ref<Shape>);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12878], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ref<Shape> and conformance Ref<A>);
  }
  return result;
}

uint64_t sub_1DDE7E4D4()
{
  return 24;
}

__n128 sub_1DDE7E4E0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t CRAssetOrData.dataAsset.getter@<X0>(__int128 *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t result;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v2 = v1;
  v4 = type metadata accessor for CRAssetOrData();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (__int128 *)((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of CRAssetOrData(v2, (uint64_t)v7);
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    v9 = *v7;
    v10 = v7[1];
  }
  else
  {
    result = outlined destroy of CRAssetOrData((uint64_t)v7);
    v9 = xmmword_1DDF33630;
    v10 = 0uLL;
  }
  *a1 = v9;
  a1[1] = v10;
  return result;
}

uint64_t type metadata accessor for CRAssetOrData()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CRAssetOrData;
  if (!type metadata singleton initialization cache for CRAssetOrData)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t outlined destroy of CRAssetOrData(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CRAssetOrData();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void CRDataAsset.init(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for SHA256();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940];
  MEMORY[0x1E0C80A78](v4, v6);
  v7 = type metadata accessor for SHA256Digest();
  MEMORY[0x1E0C80A78](v7, v8);
  outlined copy of Data._Representation(a1, a2);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, v5, MEMORY[0x1E0CA9930]);
  dispatch thunk of HashFunction.init()();
  __asm { BR              X9 }
}

uint64_t sub_1DDE7E724()
{
  unint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  *(_QWORD *)(v7 - 112) = v2;
  *(_WORD *)(v7 - 104) = v0;
  *(_BYTE *)(v7 - 102) = BYTE2(v0);
  *(_BYTE *)(v7 - 101) = BYTE3(v0);
  *(_BYTE *)(v7 - 100) = BYTE4(v0);
  *(_BYTE *)(v7 - 99) = BYTE5(v0);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  outlined consume of Data._Representation(v2, v0);
  dispatch thunk of HashFunction.finalize()();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 128) + 8))(v6, v5);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA92F8], MEMORY[0x1E0CA92F0]);
  v8 = Digest.makeIterator()();
  v10 = specialized _copySequenceToContiguousArray<A>(_:)(v8, v9);
  swift_bridgeObjectRelease();
  v11 = specialized Data.init<A>(_:)(v10);
  v12 = v3;
  v14 = v13;
  swift_release();
  outlined consume of Data._Representation(v2, v0);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 120) + 8))(v4, v12);
  *v1 = v11;
  v1[1] = v14;
  v1[2] = v2;
  v1[3] = v0;
  return result;
}

uint64_t CRAssetOrData.asset.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = v1;
  v4 = type metadata accessor for CRAssetOrData();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CRAssetOrData(v2, (uint64_t)v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined destroy of CRAssetOrData((uint64_t)v7);
    v8 = type metadata accessor for CRAsset();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
  else
  {
    v10 = type metadata accessor for CRAsset();
    v11 = *(_QWORD *)(v10 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a1, v7, v10);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
  }
}

uint64_t CRDataAsset.digest.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  outlined copy of Data._Representation(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t CRDataAsset.data.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  outlined copy of Data._Representation(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

double CRDataAsset.init(from:)@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  double result;
  __int128 v6;
  __int128 v7;

  swift_retain();
  v3 = Data.init(from:)();
  if (v1)
  {
    swift_release();
  }
  else
  {
    CRDataAsset.init(_:)(v3, v4);
    swift_release();
    result = *(double *)&v6;
    *a1 = v6;
    a1[1] = v7;
  }
  return result;
}

uint64_t CRDataAsset.encode(to:)()
{
  return Data.encode(to:)();
}

void static CRDataAsset.== infix(_:_:)(uint64_t a1)
{
  specialized static Data.== infix(_:_:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

void protocol witness for static Equatable.== infix(_:_:) in conformance CRDataAsset(uint64_t a1)
{
  specialized static Data.== infix(_:_:)(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance CRDataAsset@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  outlined copy of Data._Representation(v2, v3);
  return outlined copy of Data._Representation(v4, v5);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance CRDataAsset()
{
  lazy protocol witness table accessor for type CRDataAsset and conformance CRDataAsset();
  lazy protocol witness table accessor for type CRDataAsset and conformance CRDataAsset();
  return CRValue<>.observableDifference(from:with:)();
}

double protocol witness for CRCodable.init(from:) in conformance CRDataAsset@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  double result;
  __int128 v6;
  __int128 v7;

  swift_retain();
  v3 = Data.init(from:)();
  if (v1)
  {
    swift_release();
  }
  else
  {
    CRDataAsset.init(_:)(v3, v4);
    swift_release();
    result = *(double *)&v6;
    *a1 = v6;
    a1[1] = v7;
  }
  return result;
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance CRDataAsset()
{
  return Data.encode(to:)();
}

uint64_t CRDataAsset.debugDescription.getter()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  Swift::String v3;
  Swift::String v4;
  _QWORD v6[2];

  v1 = *v0;
  v2 = v0[1];
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  strcpy((char *)v6, "<CRDataAsset: ");
  outlined copy of Data._Representation(v1, v2);
  v3._countAndFlagsBits = Data.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v1, v2);
  v4._countAndFlagsBits = 62;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return v6[0];
}

uint64_t CRAssetOrData.init(from:)@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  unint64_t v18;
  __int128 v19;
  _OWORD v21[2];

  v3 = type metadata accessor for CRAssetOrData();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (_OWORD *)((char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CRAsset();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  CRAsset.init(from:)();
  if (v1)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
    swift_retain();
    v16 = Data.init(from:)();
    CRDataAsset.init(_:)(v16, v18);
    swift_release();
    v19 = v21[1];
    *v6 = v21[0];
    v6[1] = v19;
    swift_storeEnumTagMultiPayload();
    return outlined init with take of CRAssetOrData((uint64_t)v6, a1);
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
    swift_release();
    v17 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v17(v15, v10, v11);
    v17((char *)a1, v15, v11);
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t CRAssetOrData.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = type metadata accessor for CRAsset();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CRAssetOrData();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (uint64_t *)((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of CRAssetOrData(v0, (uint64_t)v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v10 = *v9;
    v11 = v9[1];
    v13 = v9[2];
    v12 = v9[3];
    Data.encode(to:)();
    outlined consume of Data._Representation(v10, v11);
    return outlined consume of Data._Representation(v13, v12);
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v2 + 32))(v5, v9, v1);
    CRAsset.encode(to:)();
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
}

uint64_t CRAssetOrData.visitReferences(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for CRAssetOrData();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CRAsset();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CRAssetOrData(v1, (uint64_t)v5);
  if (swift_getEnumCaseMultiPayload() == 1)
    return outlined destroy of CRAssetOrData((uint64_t)v5);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v5, v6);
  CRAsset.visitReferences(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance CRAssetOrData@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of CRAssetOrData(v1, a1);
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance CRAssetOrData()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CRAssetOrData and conformance CRAssetOrData, (uint64_t (*)(uint64_t))type metadata accessor for CRAssetOrData, (uint64_t)&protocol conformance descriptor for CRAssetOrData);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CRAssetOrData and conformance CRAssetOrData, (uint64_t (*)(uint64_t))type metadata accessor for CRAssetOrData, (uint64_t)&protocol conformance descriptor for CRAssetOrData);
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance CRAssetOrData(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v3 = v2;
  MEMORY[0x1E0C80A78](a1, a2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CRAsset();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of CRAssetOrData(v3, (uint64_t)v5);
  if (swift_getEnumCaseMultiPayload() == 1)
    return outlined destroy of CRAssetOrData((uint64_t)v5);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v5, v6);
  CRAsset.visitReferences(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance CRAssetOrData@<X0>(uint64_t a1@<X8>)
{
  return CRAssetOrData.init(from:)(a1);
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance CRAssetOrData()
{
  return CRAssetOrData.encode(to:)();
}

unint64_t CRAssetOrData.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  unint64_t v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v22;
  unint64_t v23;
  unint64_t v24;

  v1 = v0;
  v2 = type metadata accessor for CRAsset();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRAssetOrData();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (uint64_t *)((char *)&v22._countAndFlagsBits - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of CRAssetOrData(v1, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = *v10;
    v12 = v10[1];
    v13 = v10[2];
    v14 = v10[3];
    v23 = 0;
    v24 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    v23 = 0xD000000000000015;
    v24 = 0x80000001DDF5A790;
    v22._countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    outlined copy of Data._Representation(v11, v12);
    outlined copy of Data._Representation(v13, v14);
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    strcpy((char *)&v22, "<CRDataAsset: ");
    HIBYTE(v22._object) = -18;
    outlined copy of Data._Representation(v11, v12);
    v15._countAndFlagsBits = Data.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v11, v12);
    v16._countAndFlagsBits = 62;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    outlined consume of Data._Representation(v11, v12);
    outlined consume of Data._Representation(v13, v14);
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 62;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    outlined consume of Data._Representation(v11, v12);
    outlined consume of Data._Representation(v13, v14);
    return v23;
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v3 + 32))(v6, v10, v2);
    v23 = 0;
    v24 = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    v23 = 0xD000000000000016;
    v24 = 0x80000001DDF5A7B0;
    v19._countAndFlagsBits = CRAsset.debugDescription.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 62;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    v18 = v23;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  return v18;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  unint64_t v14;
  size_t v15;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v2 = *(_QWORD *)(result + 16);
  v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      v5 = a2;
      if (a2 < 0)
      {
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
      if (!v2)
      {
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      v6 = result;
      result = swift_bridgeObjectRetain();
      v4 = 0;
      v7 = v3 + 4;
      while (1)
      {
        v8 = *(_BYTE *)(v6 + v5 + 32);
        if (!v4)
        {
          v9 = v3[3];
          if ((uint64_t)((v9 >> 1) + 0x4000000000000000) < 0)
            goto LABEL_29;
          v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
          if (v10 <= 1)
            v11 = 1;
          else
            v11 = v10;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
          v12 = (_QWORD *)swift_allocObject();
          v13 = 2 * _swift_stdlib_malloc_size_0(v12) - 64;
          v12[2] = v11;
          v12[3] = v13;
          v14 = (unint64_t)(v12 + 4);
          v15 = v3[3] >> 1;
          if (v3[2])
          {
            if (v12 != v3 || v14 >= (unint64_t)v3 + v15 + 32)
              memmove(v12 + 4, v3 + 4, v15);
            v3[2] = 0;
          }
          v7 = (_BYTE *)(v14 + v15);
          v4 = (v13 >> 1) - v15;
          result = swift_release();
          v3 = v12;
        }
        v17 = __OFSUB__(v4--, 1);
        if (v17)
          break;
        ++v5;
        *v7++ = v8;
        if (v2 == v5)
        {
          result = swift_bridgeObjectRelease();
          goto LABEL_24;
        }
      }
      __break(1u);
LABEL_29:
      __break(1u);
    }
    __break(1u);
    goto LABEL_31;
  }
  v4 = 0;
LABEL_24:
  v18 = v3[3];
  if (v18 < 2)
    return (uint64_t)v3;
  v19 = v18 >> 1;
  v17 = __OFSUB__(v19, v4);
  v20 = v19 - v4;
  if (!v17)
  {
    v3[2] = v20;
    return (uint64_t)v3;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  char *v44;
  char *v45;
  char *v46;
  id v47;
  void (*v48)(char *, id, uint64_t);
  uint64_t v49;
  char *v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  size_t v56;
  int64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t result;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char **v71;
  char *v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;

  v85 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v73 = (char *)&v67 - v9;
  v10 = type metadata accessor for PKDrawing();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v80 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v72 = (char *)&v67 - v16;
  v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CHReflowableTextToken, PKDrawing));
  v75 = *(_QWORD *)(v83 - 8);
  MEMORY[0x1E0C80A78](v83, v17);
  v19 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v71 = (char **)((char *)&v67 - v22);
  MEMORY[0x1E0C80A78](v23, v24);
  v79 = (uint64_t)&v67 - v25;
  v84 = a1;
  v74 = a1 >> 62;
  if (!(a1 >> 62))
  {
    v26 = *(id *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_3;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    v26 = (id)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_3:
    v27 = *(_QWORD *)(v85 + 16);
    v28 = v27 >= (uint64_t)v26 ? (uint64_t)v26 : *(_QWORD *)(v85 + 16);
    v81 = *(_QWORD *)(v85 + 16);
    if (v28 <= 0)
      break;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CHReflowableTextToken, PKDrawing)>);
    v29 = *(_QWORD *)(v75 + 72);
    v26 = (id)((*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80));
    v68 = *(unsigned __int8 *)(v75 + 80);
    v69 = (char *)swift_allocObject();
    v30 = _swift_stdlib_malloc_size_0(v69);
    if (!v29)
      goto LABEL_81;
    v31 = v30 - (_QWORD)v26 == 0x8000000000000000 && v29 == -1;
    v77 = v29;
    if (v31)
      goto LABEL_83;
    v32 = (uint64_t)(v30 - (_QWORD)v26) / v29;
    v33 = v69;
    *((_QWORD *)v69 + 2) = v28;
    v33[3] = 2 * v32;
    v70 = (uint64_t)v26;
    v34 = (uint64_t)v26 + (_QWORD)v33;
    v35 = v32 & 0x7FFFFFFFFFFFFFFFLL;
    v36 = v84;
    v76 = v84 & 0xFFFFFFFFFFFFFF8;
    if (v74)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      v78 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v78 = *(_QWORD *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    v40 = 0;
    v82 = v36 & 0xC000000000000001;
    v67 = v35 - v28;
    v41 = v80;
    while (v28 != v40)
    {
      if (v78 == v40)
        goto LABEL_71;
      if (v82)
      {
        v26 = (id)MEMORY[0x1DF0E4D64](v40, v84);
        if (v81 == v40)
          goto LABEL_84;
      }
      else
      {
        v42 = v81;
        if (v40 >= *(_QWORD *)(v76 + 16))
          goto LABEL_75;
        v26 = *(id *)(v84 + 8 * v40 + 32);
        if (v42 == v40)
          goto LABEL_84;
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v6, v85+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v40, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
        goto LABEL_85;
      ++v40;
      v43 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
      v43(v41, v6, v10);
      v44 = &v19[*(int *)(v83 + 48)];
      *(_QWORD *)v19 = v26;
      v43(v44, v41, v10);
      outlined init with take of (CHReflowableTextToken, PKDrawing)((uint64_t)v19, v34);
      v34 += v77;
      if (v28 == v40)
      {
        v19 = (char *)v84;
        v27 = v81;
        v38 = v68;
        v6 = v69;
        v39 = v76;
        v37 = v67;
        goto LABEL_28;
      }
    }
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
  }
  if (v28 < 0)
  {
    __break(1u);
LABEL_81:
    __break(1u);
  }
  else
  {
    v6 = (char *)MEMORY[0x1E0DEE9D8];
    v37 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 24) >> 1;
    v38 = *(unsigned __int8 *)(v75 + 80);
    v70 = (v38 + 32) & ~v38;
    v34 = MEMORY[0x1E0DEE9D8] + v70;
    v19 = (char *)v84;
    v39 = v84 & 0xFFFFFFFFFFFFFF8;
    v82 = v84 & 0xC000000000000001;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_28:
    if ((uint64_t)v19 < 0)
      v45 = v19;
    else
      v45 = (char *)v39;
    v80 = v45;
    v78 = v38 | 7;
    v76 = v39;
    if (v74)
    {
      while (1)
      {
        swift_bridgeObjectRetain();
        v26 = (id)_CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if ((id)v28 == v26)
          break;
LABEL_35:
        if (v82)
        {
          v19 = (char *)MEMORY[0x1DF0E4D64](v28, v19);
          v26 = v73;
          if (__OFADD__(v28, 1))
            goto LABEL_63;
        }
        else
        {
          v26 = v73;
          if ((unint64_t)v28 >= *(_QWORD *)(v39 + 16))
            goto LABEL_72;
          v19 = (char *)*(id *)&v19[8 * v28 + 32];
          if (__OFADD__(v28, 1))
          {
LABEL_63:
            __break(1u);
LABEL_64:
            (*(void (**)(id, uint64_t, uint64_t, uint64_t))(v11 + 56))(v26, 1, 1, v10);
LABEL_65:

            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v26, &demangling cache variable for type metadata for PKDrawing?);
            break;
          }
        }
        if (v27 == v28)
          goto LABEL_64;
        if (v28 >= (unint64_t)v27)
          goto LABEL_73;
        (*(void (**)(id, unint64_t, uint64_t))(v11 + 16))(v26, v85+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v28, v10);
        (*(void (**)(id, _QWORD, uint64_t, uint64_t))(v11 + 56))(v26, 0, 1, v10);
        if ((*(unsigned int (**)(id, uint64_t, uint64_t))(v11 + 48))(v26, 1, v10) == 1)
          goto LABEL_65;
        v46 = v6;
        v47 = v26;
        v48 = *(void (**)(char *, id, uint64_t))(v11 + 32);
        v6 = v72;
        v48(v72, v47, v10);
        v49 = (uint64_t)v71;
        v50 = (char *)v71 + *(int *)(v83 + 48);
        *v71 = v19;
        v48(v50, v6, v10);
        outlined init with take of (CHReflowableTextToken, PKDrawing)(v49, v79);
        if (v37)
        {
          v27 = v81;
        }
        else
        {
          v51 = *((_QWORD *)v46 + 3);
          if ((uint64_t)((v51 >> 1) + 0x4000000000000000) < 0)
            goto LABEL_76;
          v6 = v46;
          v52 = v51 & 0xFFFFFFFFFFFFFFFELL;
          if (v52 <= 1)
            v53 = 1;
          else
            v53 = v52;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CHReflowableTextToken, PKDrawing)>);
          v54 = *(_QWORD *)(v75 + 72);
          v55 = v70;
          v46 = (char *)swift_allocObject();
          v56 = _swift_stdlib_malloc_size_0(v46);
          if (!v54)
            goto LABEL_77;
          v57 = v56 - v55;
          if (v56 - v55 == 0x8000000000000000 && v54 == -1)
            goto LABEL_78;
          v58 = v57 / v54;
          *((_QWORD *)v46 + 2) = v53;
          *((_QWORD *)v46 + 3) = 2 * (v57 / v54);
          v59 = &v46[v55];
          v60 = *((_QWORD *)v6 + 3) >> 1;
          v61 = v60 * v54;
          v27 = v81;
          if (*((_QWORD *)v6 + 2))
          {
            if (v46 < v6 || v59 >= &v6[v70 + v61])
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v46 != v6)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            *((_QWORD *)v6 + 2) = 0;
          }
          v34 = (uint64_t)&v59[v61];
          v37 = (v58 & 0x7FFFFFFFFFFFFFFFLL) - v60;
          swift_release();
        }
        v19 = (char *)v84;
        v62 = __OFSUB__(v37--, 1);
        if (v62)
          goto LABEL_74;
        outlined init with take of (CHReflowableTextToken, PKDrawing)(v79, v34);
        v34 += *(_QWORD *)(v75 + 72);
        ++v28;
        v6 = v46;
        v39 = v76;
        if (!v74)
          goto LABEL_32;
      }
    }
    else
    {
LABEL_32:
      v26 = *(id *)(v39 + 16);
      if ((id)v28 != v26)
        goto LABEL_35;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v63 = *((_QWORD *)v6 + 3);
    if (v63 < 2)
      return (uint64_t)v6;
    v64 = v63 >> 1;
    v62 = __OFSUB__(v64, v37);
    v65 = v64 - v37;
    if (!v62)
    {
      *((_QWORD *)v6 + 2) = v65;
      return (uint64_t)v6;
    }
  }
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v6, 1, 1, v10);
LABEL_85:

  result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for PKDrawing?);
  __break(1u);
  return result;
}

uint64_t specialized static CRAssetOrData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  void (*v38)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;

  v4 = type metadata accessor for CRAsset();
  v41 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v40 - v10;
  v12 = type metadata accessor for CRAssetOrData();
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (uint64_t *)((char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v40 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRAssetOrData, CRAssetOrData));
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (uint64_t *)&v23[*(int *)(v24 + 48)];
  outlined init with copy of CRAssetOrData(a1, (uint64_t)v23);
  outlined init with copy of CRAssetOrData(a2, (uint64_t)v25);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with copy of CRAssetOrData((uint64_t)v23, (uint64_t)v15);
    v26 = *v15;
    v27 = v15[1];
    v28 = v15[2];
    v29 = v15[3];
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v30 = *v25;
      v31 = v25[1];
      v33 = v25[2];
      v32 = v25[3];
      specialized static Data.== infix(_:_:)(v28, v29);
      v35 = v34;
      outlined consume of Data._Representation(v30, v31);
      outlined consume of Data._Representation(v33, v32);
      outlined consume of Data._Representation(v26, v27);
      outlined consume of Data._Representation(v28, v29);
LABEL_9:
      outlined destroy of CRAssetOrData((uint64_t)v23);
      return v35 & 1;
    }
    outlined consume of Data._Representation(v26, v27);
    outlined consume of Data._Representation(v28, v29);
  }
  else
  {
    outlined init with copy of CRAssetOrData((uint64_t)v23, (uint64_t)v19);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      v36 = v41;
      v37 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
      v37(v11, v19, v4);
      v37(v7, (char *)v25, v4);
      v35 = static CRAsset.== infix(_:_:)();
      v38 = *(void (**)(char *, uint64_t))(v36 + 8);
      v38(v7, v4);
      v38(v11, v4);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v41 + 8))(v19, v4);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for (CRAssetOrData, CRAssetOrData));
  v35 = 0;
  return v35 & 1;
}

uint64_t outlined init with take of CRAssetOrData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRAssetOrData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type CRDataAsset and conformance CRDataAsset()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CRDataAsset and conformance CRDataAsset;
  if (!lazy protocol witness table cache variable for type CRDataAsset and conformance CRDataAsset)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CRDataAsset, &type metadata for CRDataAsset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CRDataAsset and conformance CRDataAsset);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CRDataAsset and conformance CRDataAsset;
  if (!lazy protocol witness table cache variable for type CRDataAsset and conformance CRDataAsset)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CRDataAsset, &type metadata for CRDataAsset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CRDataAsset and conformance CRDataAsset);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CRDataAsset and conformance CRDataAsset;
  if (!lazy protocol witness table cache variable for type CRDataAsset and conformance CRDataAsset)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CRDataAsset, &type metadata for CRDataAsset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CRDataAsset and conformance CRDataAsset);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CRDataAsset and conformance CRDataAsset;
  if (!lazy protocol witness table cache variable for type CRDataAsset and conformance CRDataAsset)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CRDataAsset, &type metadata for CRDataAsset);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CRDataAsset and conformance CRDataAsset);
  }
  return result;
}

uint64_t base witness table accessor for CRType in CRAssetOrData()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CRAssetOrData and conformance CRAssetOrData, (uint64_t (*)(uint64_t))type metadata accessor for CRAssetOrData, (uint64_t)&protocol conformance descriptor for CRAssetOrData);
}

uint64_t base witness table accessor for CRCodable in CRAssetOrData()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CRAssetOrData and conformance CRAssetOrData, (uint64_t (*)(uint64_t))type metadata accessor for CRAssetOrData, (uint64_t)&protocol conformance descriptor for CRAssetOrData);
}

uint64_t destroy for CRDataAsset(uint64_t a1)
{
  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t *initializeWithCopy for CRDataAsset(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v7 = a2[2];
  v6 = a2[3];
  outlined copy of Data._Representation(v7, v6);
  a1[2] = v7;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for CRDataAsset(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *a2;
  v5 = a2[1];
  outlined copy of Data._Representation(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  outlined consume of Data._Representation(v6, v7);
  v9 = a2[2];
  v8 = a2[3];
  outlined copy of Data._Representation(v9, v8);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v9;
  a1[3] = v8;
  outlined consume of Data._Representation(v10, v11);
  return a1;
}

uint64_t *assignWithTake for CRDataAsset(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of Data._Representation(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  outlined consume of Data._Representation(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for CRDataAsset(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for CRDataAsset(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CRDataAsset()
{
  return &type metadata for CRDataAsset;
}

uint64_t *initializeBufferWithCopyOfBuffer for CRAssetOrData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = *a2;
      v7 = a2[1];
      outlined copy of Data._Representation(*a2, v7);
      *a1 = v6;
      a1[1] = v7;
      v9 = a2[2];
      v8 = a2[3];
      outlined copy of Data._Representation(v9, v8);
      a1[2] = v9;
      a1[3] = v8;
    }
    else
    {
      v11 = type metadata accessor for CRAsset();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for CRAssetOrData(uint64_t a1)
{
  uint64_t v3;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    return outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
  else
  {
    v3 = type metadata accessor for CRAsset();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
}

uint64_t *initializeWithCopy for CRAssetOrData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = *a2;
    v5 = a2[1];
    outlined copy of Data._Representation(*a2, v5);
    *a1 = v4;
    a1[1] = v5;
    v7 = a2[2];
    v6 = a2[3];
    outlined copy of Data._Representation(v7, v6);
    a1[2] = v7;
    a1[3] = v6;
  }
  else
  {
    v8 = type metadata accessor for CRAsset();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *assignWithCopy for CRAssetOrData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    outlined destroy of CRAssetOrData((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = *a2;
      v5 = a2[1];
      outlined copy of Data._Representation(*a2, v5);
      *a1 = v4;
      a1[1] = v5;
      v7 = a2[2];
      v6 = a2[3];
      outlined copy of Data._Representation(v7, v6);
      a1[2] = v7;
      a1[3] = v6;
    }
    else
    {
      v8 = type metadata accessor for CRAsset();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *initializeWithTake for CRAssetOrData(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for CRAsset();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for CRAssetOrData(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of CRAssetOrData((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for CRAsset();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for CRAssetOrData()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CRAsset();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t outlined init with take of (CHReflowableTextToken, PKDrawing)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CHReflowableTextToken, PKDrawing));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t LineEnd.path(from:to:strokeWidth:)(CGFloat a1, CGFloat a2, double a3, double a4, double a5)
{
  unsigned __int8 *v5;
  int v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  void *v15;
  void *v16;
  uint64_t v17;
  _OWORD v19[3];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v8 = *v5;
  if (v8 == 7)
  {
    v10 = 0.25;
    if (a5 >= 1.0)
    {
LABEL_7:
      v11 = a5 * 3.6 + 2.4;
      goto LABEL_8;
    }
LABEL_5:
    v11 = a5 * 6.0;
LABEL_8:
    v9 = v11 * v10;
    goto LABEL_9;
  }
  if (v8 != 8)
  {
    v10 = 1.0;
    if (a5 >= 1.0)
      goto LABEL_7;
    goto LABEL_5;
  }
  v9 = a5 * 5.0;
LABEL_9:
  v12 = a3 - a1;
  v13 = a4 - a2;
  v14 = sqrt(v12 * v12 + v13 * v13);
  specialized CGAffineTransform.init(transformMovingPoints:to:)(v19, 0.0, 0.0, 1.0, 0.0, a1, a2, v12 / v14 * v9 + a1, v13 / v14 * v9 + a2);
  LineEnd.path.getter();
  v16 = v15;
  v17 = MEMORY[0x1DF0E5880]();

  return v17;
}

PaperKit::LineEnd_optional __swiftcall LineEnd.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;
  char v3;

  v2 = 1;
  switch(rawValue)
  {
    case 0:
      v2 = 0;
      goto LABEL_3;
    case 1:
LABEL_3:
      *v1 = v2;
      break;
    case 2:
      *v1 = 2;
      break;
    case 3:
      *v1 = 3;
      break;
    case 4:
      *v1 = 4;
      break;
    case 5:
      *v1 = 5;
      break;
    case 6:
      *v1 = 6;
      break;
    case 7:
      *v1 = 7;
      break;
    default:
      if (rawValue == 90)
        v3 = 8;
      else
        v3 = 9;
      *v1 = v3;
      break;
  }
  return (PaperKit::LineEnd_optional)rawValue;
}

uint64_t LineEnd.rawValue.getter()
{
  char *v0;

  return qword_1DDF45FA8[*v0];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LineEnd(char *a1, char *a2)
{
  return qword_1DDF45FA8[*a1] == qword_1DDF45FA8[*a2];
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LineEnd()
{
  char *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1DDF45FA8[v1]);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance LineEnd()
{
  char *v0;

  Hasher._combine(_:)(qword_1DDF45FA8[*v0]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LineEnd()
{
  char *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1DDF45FA8[v1]);
  return Hasher._finalize()();
}

PaperKit::LineEnd_optional protocol witness for RawRepresentable.init(rawValue:) in conformance LineEnd(Swift::Int *a1)
{
  return LineEnd.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance LineEnd(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1DDF45FA8[*v1];
}

uint64_t protocol witness for Decodable.init(from:) in conformance LineEnd()
{
  lazy protocol witness table accessor for type LineEnd and conformance LineEnd();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance LineEnd()
{
  lazy protocol witness table accessor for type LineEnd and conformance LineEnd();
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for CRDefaultStateRepresentable.isDefaultState.getter in conformance LineEnd()
{
  lazy protocol witness table accessor for type LineEnd and conformance LineEnd();
  return RawRepresentable<>.isDefaultState.getter();
}

uint64_t protocol witness for CRDefaultStateRepresentable.init(defaultState:) in conformance LineEnd()
{
  lazy protocol witness table accessor for type LineEnd and conformance LineEnd();
  return RawRepresentable<>.init(defaultState:)();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance LineEnd()
{
  lazy protocol witness table accessor for type LineEnd and conformance LineEnd();
  lazy protocol witness table accessor for type LineEnd and conformance LineEnd();
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance LineEnd()
{
  lazy protocol witness table accessor for type LineEnd and conformance LineEnd();
  lazy protocol witness table accessor for type LineEnd and conformance LineEnd();
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance LineEnd()
{
  lazy protocol witness table accessor for type LineEnd and conformance LineEnd();
  lazy protocol witness table accessor for type LineEnd and conformance LineEnd();
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance LineEnd()
{
  lazy protocol witness table accessor for type LineEnd and conformance LineEnd();
  lazy protocol witness table accessor for type LineEnd and conformance LineEnd();
  return CRValue<>.minEncodingVersion.getter();
}

uint64_t storeEnumTagSinglePayload for LineEnd(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1DDE810D4 + 4 * byte_1DDF45D65[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1DDE81108 + 4 * byte_1DDF45D60[v4]))();
}

uint64_t sub_1DDE81108(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDE81110(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDE81118);
  return result;
}

uint64_t sub_1DDE81124(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDE8112CLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1DDE81130(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDE81138(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LineEnd()
{
  return &type metadata for LineEnd;
}

void LineEnd.path.getter()
{
  __asm { BR              X10 }
}

CGPath *sub_1DDE811C8()
{
  CGPath *Mutable;
  CGAffineTransform v2[4];

  Mutable = CGPathCreateMutable();
  v2[0].a = 1.0;
  v2[0].b = 0.0;
  v2[0].c = 0.0;
  v2[0].d = 1.0;
  v2[0].tx = 0.0;
  v2[0].ty = 0.0;
  CGMutablePathRef.move(to:transform:)((CGPoint)0, v2);
  CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(-0.5, 1.0), v2);
  CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(0.5, 1.0), v2);
  CGPathCloseSubpath(Mutable);
  return Mutable;
}

void sub_1DDE813D0()
{
  JUMPOUT(0x1DDE813E0);
}

uint64_t PKDrawingStruct.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  CRRegister.init(wrappedValue:)();
  v2 = type metadata accessor for PKDrawingStruct();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12870]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12888]);
  result = CROrderedSet.init()();
  *(_QWORD *)(a1 + *(int *)(v2 + 24)) = MEMORY[0x1E0DEE9E0];
  return result;
}

uint64_t type metadata accessor for PKDrawingStruct()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PKDrawingStruct;
  if (!type metadata singleton initialization cache for PKDrawingStruct)
    return swift_getSingletonMetadata();
  return result;
}

double PKDrawingStruct.bounds<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = &v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for PKDrawingStruct();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v11, v3 + *(int *)(v12 + 20), v7);
  v13 = *MEMORY[0x1E0C9D628];
  v14 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v15 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  v16 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  v20 = a2;
  v21 = a3;
  v22 = a1;
  v17 = specialized Sequence.reduce<A>(_:_:)((void (*)(_QWORD *__return_ptr, double *, char *))partial apply for closure #1 in PKDrawingStruct.bounds<A>(in:), (uint64_t)v19, v13, v14, v15, v16);
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v11, v7);
  return v17;
}

uint64_t PKDrawingStruct.deleteStrokes<A, B>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v7 = type metadata accessor for CRKeyPath();
  v12 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in PKDrawingStruct.deleteStrokes<A, B>(_:in:), 0, a3, v7, MEMORY[0x1E0DEDCE8], a4, MEMORY[0x1E0DEDD18], v8);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
  v10 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [CRKeyPath] and conformance [A], &demangling cache variable for type metadata for [CRKeyPath], MEMORY[0x1E0DEAF38]);
  PKDrawingStruct.deleteStrokes<A, B>(_:in:)((uint64_t)&v12, a2, v9, v10);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t AssociatedTypeWitness;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t AssociatedConformanceWitness;
  char *v89;
  uint64_t v90;
  uint64_t v91;

  v74 = a2;
  AssociatedConformanceWitness = a1;
  v73 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  v72 = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v73, v6);
  v85 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v8, v9);
  v79 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v80 = (char *)&v72 - v13;
  MEMORY[0x1E0C80A78](v14, v15);
  v89 = (char *)&v72 - v16;
  v17 = type metadata accessor for CRKeyPath();
  v86 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v23);
  v83 = (char *)&v72 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v82 = (char *)&v72 - v27;
  MEMORY[0x1E0C80A78](v28, v29);
  v81 = (uint64_t)&v72 - v30;
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v72 - v33;
  v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v35, v36);
  v38 = (char *)&v72 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v39, v40);
  v42 = (char *)&v72 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v44 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v77 = AssociatedTypeWitness;
  v78 = v44;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v45);
  v47 = (char *)&v72 - v46;
  v48 = swift_allocObject();
  v84 = v48;
  *(_QWORD *)(v48 + 16) = MEMORY[0x1E0DEE9E8];
  v91 = v48 + 16;
  (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v42, AssociatedConformanceWitness, a3);
  dispatch thunk of Sequence.makeIterator()();
  v75 = a3;
  v76 = a4;
  v49 = v77;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  v50 = v86;
  v87 = *(_QWORD *)(v86 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v87)(v38, 1, v17) != 1)
  {
    v86 = *(_QWORD *)(v50 + 32);
    ((void (*)(char *, char *, uint64_t))v86)(v20, v38, v17);
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>, MEMORY[0x1E0D117A8]);
      Ref.init(id:)();
      type metadata accessor for PKDrawingStruct();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
      v70 = (uint64_t)v89;
      CROrderedSet.remove(_:)();
      v71 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v70, 1, v21);
      outlined destroy of StocksKitCurrencyCache.Provider?(v70, (uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
      if (v71 == 1)
      {
        v62 = v82;
        (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v82, v34, v21);
        v63 = v47;
        v64 = v49;
        v65 = v17;
        v66 = v20;
        v67 = v81;
        specialized Set._Variant.insert(_:)(v81, v62);
        v68 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
        v69 = v67;
        v20 = v66;
        v17 = v65;
        v49 = v64;
        v47 = v63;
        v68(v69, v21);
        v68((uint64_t)v34, v21);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v22 + 8))(v34, v21);
      }
      dispatch thunk of IteratorProtocol.next()();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v87)(v38, 1, v17) == 1)
        break;
      ((void (*)(char *, char *, uint64_t))v86)(v20, v38, v17);
    }
  }
  (*(void (**)(char *, uint64_t))(v78 + 8))(v47, v49);
  if (*(_QWORD *)(*(_QWORD *)v91 + 16))
  {
    v51 = v90 + *(int *)(type metadata accessor for PKDrawingStruct() + 20);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
    v90 = v51;
    CROrderedSet.makeIterator()();
    swift_beginAccess();
    v53 = v75;
    v52 = v76;
    v54 = v74;
    v55 = v73;
    v56 = v80;
    v57 = (uint64_t)v83;
    do
    {
      CROrderedSet.Iterator.next()();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v56, 1, v21) == 1)
        break;
      (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v57, v56, v21);
      if ((removeSubstrokes #1 <A, B>(from:) in PKDrawingStruct.deleteStrokes<A, B>(_:in:)(v57, v84, v54, v53, v52) & 1) != 0)
      {
        v59 = v79;
        CROrderedSet.remove(_:)();
        v60 = (uint64_t)v59;
        v56 = v80;
        outlined destroy of StocksKitCurrencyCache.Provider?(v60, (uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
      }
      v58 = *(_QWORD *)(*(_QWORD *)v91 + 16);
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v57, v21);
    }
    while (v58);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v85, v55);
  }
  return swift_release();
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  void (*v16)(char *, char *, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  Swift::Int v39;
  char *v40;
  uint64_t result;
  char *v42;
  char *v43;
  char *v44;
  _QWORD v45[2];
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  char *v60;
  uint64_t v61;
  void (*v62)(char *, char *);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v48 = a8;
  v49 = a5;
  v9 = v8;
  v61 = a4;
  v62 = a1;
  v63 = a2;
  v47 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v60 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v59 = (char *)v45 - v13;
  v53 = v14;
  v16 = v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v19);
  v46 = (char *)v45 - v20;
  v21 = type metadata accessor for Optional();
  v50 = *(_QWORD *)(v21 - 8);
  v51 = v21;
  MEMORY[0x1E0C80A78](v21, v22);
  v57 = (char *)v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)v45 - v26;
  MEMORY[0x1E0C80A78](v28, v29);
  v45[1] = (char *)v45 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v56 = *((_QWORD *)v16 - 1);
  MEMORY[0x1E0C80A78](v33, v34);
  v55 = (char *)v45 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = swift_getAssociatedTypeWitness();
  v52 = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64, v36);
  v54 = (char *)v45 - v37;
  v38 = v16;
  v39 = dispatch thunk of Sequence.underestimatedCount.getter();
  v65 = Array.init()();
  v61 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v39);
  (*(void (**)(char *, _QWORD, _QWORD *))(v56 + 16))(v55, v58, v16);
  v40 = v54;
  v58 = v38;
  result = dispatch thunk of Sequence.makeIterator()();
  if (v39 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v39)
  {
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      dispatch thunk of IteratorProtocol.next()();
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v27, 1, AssociatedTypeWitness);
      if ((_DWORD)result == 1)
        goto LABEL_18;
      v62(v27, v60);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v52 + 8))(v40, v64);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v48, v60, v49);
        return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v27, AssociatedTypeWitness);
      }
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v27, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      if (!--v39)
      {
        v42 = v57;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  v42 = v57;
LABEL_9:
  dispatch thunk of IteratorProtocol.next()();
  v60 = *(char **)(v18 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v60)(v42, 1, AssociatedTypeWitness) == 1)
  {
    v43 = v57;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v52 + 8))(v40, v64);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v43, v51);
    return v65;
  }
  else
  {
    v58 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    v44 = v46;
    v43 = v57;
    while (1)
    {
      v58(v44, v43, AssociatedTypeWitness);
      v62(v44, v59);
      if (v9)
        break;
      v9 = 0;
      (*(void (**)(char *, uint64_t))(v18 + 8))(v44, AssociatedTypeWitness);
      ContiguousArray.append(_:)();
      dispatch thunk of IteratorProtocol.next()();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v60)(v43, 1, AssociatedTypeWitness) == 1)
        goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v44, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v40, v64);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v47 + 32))(v48, v59, v49);
  }
}

double PKDrawingStruct.canvasBounds.getter()
{
  double v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t PKDrawingStruct.canvasBounds.setter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.wrappedValue.setter();
}

uint64_t PKDrawingStruct.requiredContentVersion<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;

  v31 = a2;
  v32 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v5 = *(_QWORD *)(v4 - 8);
  v35 = v4;
  v36 = v5;
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  v33 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PKDrawingStruct();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  CROrderedSet.makeIterator()();
  v39 = v18;
  CROrderedSet.Iterator.next()();
  v37 = v10;
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v23 = 1;
  v24 = v22(v17, 1, v9);
  v38 = v21;
  if (v24 != 1)
  {
    v26 = v31;
    v25 = v32;
    v34 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
    v23 = 1;
    do
    {
      v34(v13, v17, v9);
      v27 = v22;
      Ref.subscript.getter();
      v28 = CRRegister<>.requiredContentVersion<A>(in:)(a1, v26, v25);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v8, v35);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v9);
      if (v23 <= v28)
        v23 = v28;
      CROrderedSet.Iterator.next()();
      v22 = v27;
    }
    while (v27(v17, 1, v9) != 1);
  }
  (*(void (**)(char *, uint64_t))(v33 + 8))(v38, v39);
  return v23;
}

uint64_t static PKDrawingStruct.transformStrokes<A>(_:with:concat:in:)(uint64_t a1, CGFloat *a2, int a3, _QWORD *a4, uint64_t a5)
{
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  void (*v61)(CGAffineTransform *, _QWORD);
  uint64_t v62;
  char *v63;
  uint64_t v64;
  void (*v65)(char *, _QWORD);
  _OWORD *v66;
  _OWORD *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  double v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  double b;
  double a;
  double d;
  double c;
  double tx;
  double ty;
  double *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  void (*v91)(CGAffineTransform *, _QWORD);
  __int128 v92;
  __int128 v93;
  double v94[2];
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  uint64_t v100;
  void (*v101)(char *, uint64_t);
  char *v102;
  char *v103;
  char *v104;
  double *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  _QWORD *v126;
  CGAffineTransform v127;
  CGAffineTransform t2;
  char v129[8];
  char v130[12];
  CGAffineTransform t1;

  v111 = a5;
  v126 = a4;
  v112 = a3;
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = a2[4];
  v11 = a2[5];
  v105 = a2;
  v114 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v114, v12);
  v104 = (char *)v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v110 = *(_QWORD *)(v113 - 8);
  MEMORY[0x1E0C80A78](v113, v14);
  v103 = (char *)v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v109 = (char *)v94 - v18;
  v19 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v19, v20);
  v102 = (char *)v94 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v108 = (char *)v94 - v24;
  v118 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v25 = *(_QWORD *)(v118 - 8);
  MEMORY[0x1E0C80A78](v118, v26);
  v117 = (char *)v94 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v30);
  v116 = (char *)v94 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)v94 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x1E0C80A78](v36, v37);
  v124 = (char *)v94 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  v40 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39, v41);
  v115 = (char *)v94 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  t1.a = v6;
  t1.b = v7;
  t1.c = v8;
  t1.d = v9;
  t1.tx = v10;
  t1.ty = v11;
  result = CGAffineTransformIsIdentity(&t1);
  if (!(_DWORD)result || (v112 & 1) == 0)
  {
    v44 = *(_QWORD *)(a1 + 16);
    if (v44)
    {
      v123 = v29;
      v122 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
      v45 = *(_QWORD *)(v122 - 8);
      v46 = a1 + ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80));
      v121 = *(_QWORD *)(v45 + 72);
      *(_QWORD *)&v94[1] = a1;
      swift_bridgeObjectRetain();
      v95 = 0.001;
      v94[0] = 0.1;
      v99 = v8;
      v98 = v9;
      v97 = v10;
      v96 = v11;
      v107 = v25;
      v119 = v39;
      v106 = v28;
      v125 = v40;
      while (1)
      {
        WeakRef.subscript.getter();
        v48 = v123;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48))(v35, 1, v28))
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v35, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
          v47 = (uint64_t)v124;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v125 + 56))(v124, 1, 1, v39);
        }
        else
        {
          v49 = v116;
          (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v116, v35, v28);
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v35, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
          v50 = v117;
          CRRegister.value.getter();
          v51 = v35;
          v52 = v25;
          v53 = v124;
          v120 = v46;
          v54 = v44;
          v55 = v28;
          v56 = v118;
          SharedTagged_2.tagged1.getter();
          v47 = (uint64_t)v53;
          v25 = v52;
          v35 = v51;
          v57 = v56;
          v28 = v55;
          v44 = v54;
          v46 = v120;
          (*(void (**)(char *, uint64_t))(v25 + 8))(v50, v57);
          v39 = v119;
          (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v28);
          v58 = v125;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v125 + 48))(v47, 1, v39) != 1)
          {
            v59 = v115;
            (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v115, v47, v39);
            v60 = v126;
            v61 = (void (*)(CGAffineTransform *, _QWORD))Ref.subscript.modify();
            PKStrokeStruct.uniqueInheritedPropertiesIfNeeded<A>(in:)(v60, v111);
            v61(&t1, 0);
            if ((v112 & 1) != 0)
            {
              v62 = (uint64_t)v108;
              Ref.subscript.getter();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
              v63 = v109;
              CRRegister.wrappedValue.getter();
              outlined destroy of PKStrokeProperties(v62, type metadata accessor for PKStrokeStruct);
              v64 = v113;
              v101 = (void (*)(char *, uint64_t))Ref.subscript.modify();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
              v65 = (void (*)(char *, _QWORD))CRRegister.wrappedValue.modify();
              v67 = v66;
              v68 = v66[1];
              v69 = v66[2];
              *(_OWORD *)&t1.a = *v66;
              *(_OWORD *)&t1.c = v68;
              *(_OWORD *)&t1.tx = v69;
              t2.a = v6;
              t2.b = v7;
              t2.c = v8;
              t2.d = v9;
              t2.tx = v10;
              t2.ty = v11;
              CGAffineTransformConcat(&v127, &t1, &t2);
              v70 = *(_OWORD *)&v127.c;
              v71 = *(_OWORD *)&v127.tx;
              *v67 = *(_OWORD *)&v127.a;
              v67[1] = v70;
              v67[2] = v71;
              v65(v129, 0);
              v101(v130, 0);
              (*(void (**)(char *, uint64_t))(v110 + 8))(v63, v64);
              (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v39);
            }
            else
            {
              v72 = v6;
              v73 = v59;
              v74 = (uint64_t)v102;
              Ref.subscript.getter();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
              v75 = v103;
              CRRegister.wrappedValue.getter();
              outlined destroy of PKStrokeProperties(v74, type metadata accessor for PKStrokeStruct);
              v76 = (uint64_t)v104;
              v77 = v113;
              Ref.subscript.getter();
              v78 = *(void (**)(char *, uint64_t))(v110 + 8);
              v78(v75, v77);
              v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
              CRRegister.wrappedValue.getter();
              a = t1.a;
              b = t1.b;
              c = t1.c;
              d = t1.d;
              tx = t1.tx;
              ty = t1.ty;
              outlined destroy of PKStrokeProperties(v76, type metadata accessor for PKStrokeInheritedProperties);
              v86 = v105;
              if (vabdd_f64(a, *v105) >= v95
                || vabdd_f64(b, v105[1]) >= v95
                || vabdd_f64(c, v105[2]) >= v95
                || vabdd_f64(d, v105[3]) >= v95
                || vabdd_f64(tx, v105[4]) >= v94[0]
                || vabdd_f64(ty, v105[5]) >= v94[0])
              {
                v87 = (uint64_t)v108;
                v100 = v79;
                v88 = v119;
                Ref.subscript.getter();
                v101 = v78;
                v89 = v109;
                CRRegister.wrappedValue.getter();
                outlined destroy of PKStrokeProperties(v87, type metadata accessor for PKStrokeStruct);
                v90 = v113;
                v91 = (void (*)(CGAffineTransform *, _QWORD))Ref.subscript.modify();
                v92 = *((_OWORD *)v86 + 2);
                v93 = *(_OWORD *)v86;
                *(_OWORD *)&t1.c = *((_OWORD *)v86 + 1);
                *(_OWORD *)&t1.tx = v92;
                *(_OWORD *)&t1.a = v93;
                CRRegister.wrappedValue.setter();
                v91(&t2, 0);
                v39 = v88;
                v101(v89, v90);
                (*(void (**)(char *, uint64_t))(v125 + 8))(v115, v88);
              }
              else
              {
                v39 = v119;
                (*(void (**)(char *, uint64_t))(v125 + 8))(v73, v119);
              }
              v6 = v72;
              v8 = v99;
              v9 = v98;
              v10 = v97;
              v11 = v96;
            }
            v25 = v107;
            v28 = v106;
            goto LABEL_7;
          }
        }
        outlined destroy of StocksKitCurrencyCache.Provider?(v47, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
LABEL_7:
        v46 += v121;
        if (!--v44)
          return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

void (*PKDrawingStruct.canvasBounds.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t PKDrawingStruct.$canvasBounds.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t PKDrawingStruct.$canvasBounds.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*PKDrawingStruct.$canvasBounds.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

uint64_t PKDrawingStruct.strokes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PKDrawingStruct() + 20);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PKDrawingStruct.strokes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PKDrawingStruct() + 20);
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

double (*PKDrawingStruct.strokes.modify())(_QWORD, _QWORD)
{
  type metadata accessor for PKDrawingStruct();
  return UnknownCanvasElementView.flags.modify;
}

uint64_t PKDrawingStruct.additionalFields.getter()
{
  type metadata accessor for PKDrawingStruct();
  return swift_bridgeObjectRetain();
}

uint64_t PKDrawingStruct.additionalFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for PKDrawingStruct() + 24);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

double (*PKDrawingStruct.additionalFields.modify())(_QWORD, _QWORD)
{
  type metadata accessor for PKDrawingStruct();
  return UnknownCanvasElementView.flags.modify;
}

uint64_t static PKDrawingStruct.fields.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (one-time initialization token for fields != -1)
    swift_once();
  v2 = unk_1EDB71B80;
  v4 = qword_1EDB71B88;
  v3 = unk_1EDB71B90;
  v5 = qword_1EDB71B98;
  v6 = qword_1EDB71BA0;
  *a1 = static PKDrawingStruct.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

void closure #1 in PKDrawingStruct.bounds<A>(in:)(CGFloat *a1@<X0>, uint64_t a2@<X2>, CGRect *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  objc_class *v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  uint64_t v24;
  CGRect v25;
  CGRect v26;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (objc_class *)((char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *a1;
  v12 = a1[1];
  v13 = a1[2];
  v14 = a1[3];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  Ref.subscript.getter();
  v15 = type metadata accessor for Capsule();
  v16 = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12B28], v15);
  v17 = specialized CRRegister<>.bounds(in:)(a2, v10, v15, v16);
  v19 = v18;
  v21 = v20;
  v23 = v22;
  (*(void (**)(objc_class *, uint64_t))(v7 + 8))(v10, v6);
  v25.origin.x = v11;
  v25.origin.y = v12;
  v25.size.width = v13;
  v25.size.height = v14;
  v26.origin.x = v17;
  v26.origin.y = v19;
  v26.size.width = v21;
  v26.size.height = v23;
  *a3 = CGRectUnion(v25, v26);
}

void partial apply for closure #1 in PKDrawingStruct.bounds<A>(in:)(CGFloat *a1@<X0>, CGRect *a2@<X8>)
{
  uint64_t v2;

  closure #1 in PKDrawingStruct.bounds<A>(in:)(a1, *(_QWORD *)(v2 + 32), a2);
}

uint64_t PKDrawingStruct.visitStrokes<A>(in:_:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  void (*v18)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  uint64_t v23;

  v22 = a2;
  v23 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  v21 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PKDrawingStruct();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  CROrderedSet.makeIterator()();
  CROrderedSet.Iterator.next()();
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v17(v12, 1, v4) != 1)
  {
    v18 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    do
    {
      v18(v8, v12, v4);
      visit #1 <A>(node:) in PKDrawingStruct.visitStrokes<A>(in:_:)((uint64_t)v8, a1, v22, v23);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      CROrderedSet.Iterator.next()();
    }
    while (v17(v12, 1, v4) != 1);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v16, v13);
}

uint64_t visit #1 <A>(node:) in PKDrawingStruct.visitStrokes<A>(in:_:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(char *, uint64_t);
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  int v53;
  void (*v54)(uint64_t);
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  void (*v72)(uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v71 = a4;
  v72 = a3;
  v73 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v66 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v64 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  v65 = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63, v12);
  v62 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x1E0C80A78](v14, v15);
  v70 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v68 = *(_QWORD *)(v17 - 8);
  v69 = v17;
  MEMORY[0x1E0C80A78](v17, v18);
  v61 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v67 = (char *)&v58 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v25);
  v27 = (char *)&v58 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v58 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v33 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32, v34);
  v36 = (char *)&v58 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = v5;
  v75 = a2;
  v37 = v73;
  Ref.subscript.getter();
  CRRegister.value.getter();
  SharedTagged_2.tagged1.getter();
  v38 = *(void (**)(char *, uint64_t))(v24 + 8);
  v38(v27, v23);
  v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  LODWORD(v5) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 48))(v31, 1, v39);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v31, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  if ((_DWORD)v5 != 1)
  {
    v72(v37);
    v43 = *(uint64_t (**)(char *, uint64_t))(v33 + 8);
    goto LABEL_5;
  }
  v73 = v33;
  CRRegister.value.getter();
  v40 = (uint64_t)v70;
  SharedTagged_2.tagged2.getter();
  v38(v27, v23);
  v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
  v42 = *(_QWORD *)(v41 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v40, (uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
    v43 = *(uint64_t (**)(char *, uint64_t))(v73 + 8);
LABEL_5:
    v44 = v36;
    v45 = v32;
    return v43(v44, v45);
  }
  v59 = v36;
  v60 = v32;
  v46 = v61;
  Ref.subscript.getter();
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v40, v41);
  (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v67, v46, v69);
  v47 = v62;
  CRSequence.makeIterator()();
  v48 = v63;
  CRSequence.Iterator.next()();
  v49 = v64;
  v50 = v66;
  v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48);
  v52 = v74;
  v53 = v51(v11, 1, v74);
  v55 = v71;
  v54 = v72;
  if (v53 != 1)
  {
    v56 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
    do
    {
      v56(v49, v11, v52);
      visit #1 <A>(node:) in PKDrawingStruct.visitStrokes<A>(in:_:)(v49, v75, v54, v55);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v49, v52);
      CRSequence.Iterator.next()();
      v52 = v74;
    }
    while (v51(v11, 1, v74) != 1);
  }
  (*(void (**)(char *, uint64_t))(v65 + 8))(v47, v48);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v67, v69);
  v43 = *(uint64_t (**)(char *, uint64_t))(v73 + 8);
  v44 = v59;
  v45 = v60;
  return v43(v44, v45);
}

uint64_t PKDrawingStruct.filteredStrokes<A>(in:isIncluded:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[5];
  uint64_t v5;

  v5 = MEMORY[0x1E0DEE9D8];
  v4[2] = a2;
  v4[3] = a3;
  v4[4] = &v5;
  PKDrawingStruct.visitStrokes<A>(in:_:)(a1, (void (*)(uint64_t))partial apply for closure #1 in PKDrawingStruct.filteredStrokes<A>(in:isIncluded:), (uint64_t)v4);
  return v5;
}

uint64_t closure #1 in PKDrawingStruct.filteredStrokes<A>(in:isIncluded:)(uint64_t a1, uint64_t (*a2)(uint64_t, double), uint64_t a3, unint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  unint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = a2(a1, v10);
  if ((result & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v12, a1, v7);
    v14 = *a4;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a4 = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v14 + 16) + 1, 1, v14);
      *a4 = v14;
    }
    v17 = *(_QWORD *)(v14 + 16);
    v16 = *(_QWORD *)(v14 + 24);
    if (v17 >= v16 >> 1)
    {
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1, v14);
      *a4 = v14;
    }
    *(_QWORD *)(v14 + 16) = v17 + 1;
    return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32))(v14+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v17, v12, v7);
  }
  return result;
}

uint64_t closure #1 in PKDrawingStruct.deleteStrokes<A, B>(_:in:)()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  return WeakRef.id.getter();
}

uint64_t removeSubstrokes #1 <A, B>(from:) in PKDrawingStruct.deleteStrokes<A, B>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v52 = a5;
  v50 = a4;
  v59 = a3;
  v61 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v56 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v53 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v55 = (char *)&v48 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v57 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)&v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
  v60 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58, v25);
  v54 = (char *)&v48 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v48 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v51 = a2;
  if (!*(_QWORD *)(*(_QWORD *)(a2 + 16) + 16))
    return 0;
  v49 = v6;
  swift_beginAccess();
  specialized Set._Variant.remove(_:)(v61, (uint64_t)v30);
  swift_endAccess();
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v32 = 1;
  v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v30, 1, v31);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v30, (uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  if (v33 == 1)
  {
    v34 = v59;
    Ref.subscript.getter();
    CRRegister.value.getter();
    SharedTagged_2.tagged2.getter();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v15, v12);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
    v35 = v60;
    v36 = v58;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v19, 1, v58) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
    }
    else
    {
      v37 = v54;
      (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v54, v19, v36);
      v38 = v55;
      Ref.subscript.getter();
      v39 = v49;
      v40 = CRSequence.count.getter();
      v41 = *(void (**)(char *, uint64_t))(v56 + 8);
      v41(v38, v39);
      if (v40)
      {
        v42 = Ref.subscript.getter();
        MEMORY[0x1E0C80A78](v42, v43);
        v44 = v52;
        v45 = v53;
        *(&v48 - 4) = v50;
        *(&v48 - 3) = v44;
        *(&v48 - 2) = v51;
        *(&v48 - 1) = v34;
        CRSequence.filter(_:)();
        v41(v38, v39);
        if (!CRSequence.count.getter())
        {
          v41(v45, v39);
          (*(void (**)(char *, uint64_t))(v60 + 8))(v37, v36);
          return 1;
        }
        Ref.subscript.getter();
        v46 = CRSequence.hasDelta(from:)();
        v41(v38, v39);
        if ((v46 & 1) != 0)
        {
          (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v38, v45, v39);
          swift_retain();
          Ref.subscript.setter();
        }
        v41(v45, v39);
        (*(void (**)(char *, uint64_t))(v60 + 8))(v37, v36);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v36);
      }
    }
    return 0;
  }
  return v32;
}

uint64_t PKDrawingStruct.apply<A>(_:concat:in:)(CGFloat *a1, int a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;

  type metadata accessor for PKDrawingStruct();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v8 = CROrderedSet.map<A>(_:)();
  static PKDrawingStruct.transformStrokes<A>(_:with:concat:in:)(v8, a1, a2, a3, a4);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in PKDrawingStruct.apply<A>(_:concat:in:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v0, v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  Ref.id.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>, MEMORY[0x1E0D117A8]);
  return WeakRef.init(id:)();
}

uint64_t base witness table accessor for CRStruct_Base_2 in PKDrawingStruct()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
}

uint64_t PKDrawingStruct.append<A>(_:in:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  Capsule.Ref.import<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  Capsule<>.root.getter();
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v4, &v8[*(int *)(v5 + 20)], v0);
  outlined destroy of PKStrokeProperties((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for PKDrawingStruct);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, MEMORY[0x1E0D11DC0]);
  CROrderedSet.append<A>(contentsOf:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t protocol witness for CRCodable.init(from:) in conformance PKDrawingStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  return CRStruct_2.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance PKDrawingStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  return CRStruct_2.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance PKDrawingStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  return CRStruct_2.minEncodingVersion.getter();
}

uint64_t base witness table accessor for CRStruct_Base in PKDrawingStruct()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
}

uint64_t associated type witness table accessor for CRStruct_Base_2.Type_2 : CRDT in PKDrawingStruct()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, MEMORY[0x1E0D11DB0]);
}

uint64_t protocol witness for static CRStruct_Base_2.fields.getter in conformance PKDrawingStruct@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (one-time initialization token for fields != -1)
    swift_once();
  v2 = unk_1EDB71B80;
  v4 = qword_1EDB71B88;
  v3 = unk_1EDB71B90;
  v5 = qword_1EDB71B98;
  v6 = qword_1EDB71BA0;
  *a1 = static PKDrawingStruct.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t base witness table accessor for CRDT in PKDrawingStruct()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance PKDrawingStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  return static CRStruct_2.fieldKeys.getter();
}

uint64_t protocol witness for CRStruct_Base.init() in conformance PKDrawingStruct@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12870]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12888]);
  result = CROrderedSet.init()();
  *(_QWORD *)(a2 + *(int *)(a1 + 24)) = MEMORY[0x1E0DEE9E0];
  return result;
}

uint64_t base witness table accessor for CRMergeable in PKDrawingStruct()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
}

uint64_t base witness table accessor for CRType in PKDrawingStruct()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in PKDrawingStruct()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRStructMergeableDelta_2<PKDrawingStruct> and conformance CRStructMergeableDelta_2<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_2<PKDrawingStruct>, MEMORY[0x1E0D12738]);
}

uint64_t protocol witness for CRDT.context.getter in conformance PKDrawingStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  return CRType.context.getter();
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance PKDrawingStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  return CRStruct_2.actionUndoingDifference(from:)();
}

uint64_t protocol witness for CRDT.apply(_:) in conformance PKDrawingStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  return CRStruct_2.apply(_:)();
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance PKDrawingStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  return CRStruct_2.hasDelta(from:)();
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance PKDrawingStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  return CRStruct_2.delta(_:from:)();
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance PKDrawingStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  return CRStruct_2.canMerge(delta:)();
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance PKDrawingStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  return CRStruct_2.merge(delta:)();
}

uint64_t base witness table accessor for CRCodable in PKDrawingStruct()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance PKDrawingStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  return CRStruct_2.copy(renamingReferences:)();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance PKDrawingStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  return CRStruct_2.observableDifference(from:with:)();
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance PKDrawingStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  return CRStruct_2.visitReferences(_:)();
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance PKDrawingStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  return CRStruct_2.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance PKDrawingStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  return CRStruct_2.finalizeTimestamps(_:)();
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance PKDrawingStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  return CRStruct_2.merge(_:)();
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance PKDrawingStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance PKDrawingStruct()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  return CRDT.init(serializedData:)();
}

uint64_t sub_1DDE84D60()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t *initializeBufferWithCopyOfBuffer for PKDrawingStruct(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for PKDrawingStruct(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PKDrawingStruct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PKDrawingStruct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for PKDrawingStruct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for PKDrawingStruct(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PKDrawingStruct()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDE85160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for PKDrawingStruct()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDE8521C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

void type metadata completion function for PKDrawingStruct()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for CRRegister<CGRect>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void type metadata accessor for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12870]);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12888]);
    v0 = type metadata accessor for CROrderedSet();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  }
}

uint64_t sub_1DDE853FC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = v2;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, MEMORY[0x1E0CB0998]);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v11, MEMORY[0x1E0CB09C8]);
  swift_bridgeObjectRetain();
  v31 = a2;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v10;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a1;
    v29 = ~v13;
    v30 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v9, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v29;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v27;
        a1 = v28;
        v23 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v31, v6);
    v20(v28, *(_QWORD *)(*v27 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v23 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v31;
    v18(v9, v31, v6);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v25, v6);
    return 1;
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v2;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, MEMORY[0x1E0D12278]);
  swift_bridgeObjectRetain();
  v30 = a2;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v11 + 32);
  v14 = v12 & ~v13;
  v15 = v11;
  v16 = v11 + 56;
  if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v26 = v2;
    v27 = a1;
    v28 = ~v13;
    v29 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v10, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, MEMORY[0x1E0D12280]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v29 + 8);
      v22(v10, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v28;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v26;
        a1 = v27;
        v7 = v29;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v30, v6);
    v20(v27, *(_QWORD *)(*v26 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v24 = v30;
    v18(v10, v30, v6);
    v31 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v10, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v31;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v2;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D11EE0]);
  swift_bridgeObjectRetain();
  v30 = a2;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v11 + 32);
  v14 = v12 & ~v13;
  v15 = v11;
  v16 = v11 + 56;
  if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v26 = v2;
    v27 = a1;
    v28 = ~v13;
    v29 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v10, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D11EE8]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v29 + 8);
      v22(v10, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v28;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v26;
        a1 = v27;
        v7 = v29;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v30, v6);
    v20(v27, *(_QWORD *)(*v26 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v24 = v30;
    v18(v10, v30, v6);
    v31 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v10, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v31;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = v2;
  v6 = type metadata accessor for CRKeyPath();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, MEMORY[0x1E0D12C70]);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, v11, MEMORY[0x1E0D12C88]);
  swift_bridgeObjectRetain();
  v31 = a2;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v10;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a1;
    v29 = ~v13;
    v30 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v9, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], MEMORY[0x1E0D12C90]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v29;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v27;
        a1 = v28;
        v23 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v31, v6);
    v20(v28, *(_QWORD *)(*v27 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v23 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v31;
    v18(v9, v31, v6);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v25, v6);
    return 1;
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v2;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12888]);
  swift_bridgeObjectRetain();
  v30 = a2;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v11 + 32);
  v14 = v12 & ~v13;
  v15 = v11;
  v16 = v11 + 56;
  if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v26 = v2;
    v27 = a1;
    v28 = ~v13;
    v29 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v10, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12890]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v29 + 8);
      v22(v10, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v28;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v26;
        a1 = v27;
        v7 = v29;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v30, v6);
    v20(v27, *(_QWORD *)(*v26 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v24 = v30;
    v18(v10, v30, v6);
    v31 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v10, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v31;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v2;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12B78]);
  swift_bridgeObjectRetain();
  v30 = a2;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v11 + 32);
  v14 = v12 & ~v13;
  v15 = v11;
  v16 = v11 + 56;
  if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v26 = v2;
    v27 = a1;
    v28 = ~v13;
    v29 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v10, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12B80]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v29 + 8);
      v22(v10, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v28;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v26;
        a1 = v27;
        v7 = v29;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v30, v6);
    v20(v27, *(_QWORD *)(*v26 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v24 = v30;
    v18(v10, v30, v6);
    v31 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v10, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v31;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = v2;
  v6 = type metadata accessor for CRAsset();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, MEMORY[0x1E0D12958]);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, v11, MEMORY[0x1E0D12970]);
  swift_bridgeObjectRetain();
  v31 = a2;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v10;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a1;
    v29 = ~v13;
    v30 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v9, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12958], MEMORY[0x1E0D12978]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v29;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v27;
        a1 = v28;
        v23 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v31, v6);
    v20(v28, *(_QWORD *)(*v27 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v23 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v31;
    v18(v9, v31, v6);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  Swift::Int *v14;
  Swift::Int v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (Swift::Int *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(float *a1, float a2)
{
  uint64_t *v2;
  uint64_t *v3;
  float v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t result;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;

  v3 = v2;
  v4 = a2;
  v6 = *v2;
  if ((LODWORD(a2) & 0x7FFFFFFF) != 0)
    v7 = LODWORD(a2);
  else
    v7 = 0;
  v8 = MEMORY[0x1DF0E51CC](*(_QWORD *)(v6 + 40), v7, 4);
  v9 = -1 << *(_BYTE *)(v6 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_11:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(v10, isUniquelyReferenced_nonNull_native, v4);
    *v3 = v16;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_12;
  }
  v11 = *(_QWORD *)(v6 + 48);
  v12 = *(float *)(v11 + 4 * v10);
  if (v12 != v4)
  {
    v14 = ~v9;
    do
    {
      v10 = (v10 + 1) & v14;
      if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_11;
      v12 = *(float *)(v11 + 4 * v10);
    }
    while (v12 != v4);
  }
  result = 0;
  v4 = v12;
LABEL_12:
  *a1 = v4;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::UInt *a1, Swift::UInt a2)
{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;

  v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    *v2 = v13;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(_QWORD *)(v9 + 8 * v8) != a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v9 + 8 * v8) != a2);
  }
  result = 0;
  a2 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(_BYTE *a1, char a2)
{
  uint64_t *v2;
  uint64_t v5;
  int v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v5 = *v2;
  Hasher.init(_seed:)();
  v6 = a2 & 1;
  Hasher._combine(_:)(a2 & 1);
  v7 = Hasher._finalize()();
  v8 = -1 << *(_BYTE *)(v5 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v5 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2 & 1, v9, isUniquelyReferenced_nonNull_native);
    *v2 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v5 + 48);
  if (*(unsigned __int8 *)(v10 + v9) != v6)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v5 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_BYTE *)(v10 + v9) != (a2 & 1));
  }
  result = 0;
  LOBYTE(v6) = *(_BYTE *)(*(_QWORD *)(*v2 + 48) + v9);
LABEL_8:
  *a1 = v6;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(_QWORD *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  char v10;
  uint64_t v11;
  id v12;
  char v13;
  void *v14;
  id v15;
  char isUniquelyReferenced_nonNull_native;
  id v18;
  uint64_t v20;

  v3 = v2;
  v5 = *v2;
  Hasher.init(_seed:)();
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
  swift_bridgeObjectRetain();
  _CFObject.hash(into:)();
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v9 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v8);
    v10 = static _CFObject.== infix(_:_:)();

    if ((v10 & 1) != 0)
    {
LABEL_6:

      swift_bridgeObjectRelease();
      v14 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v8);
      *a1 = v14;
      v15 = v14;
      return 0;
    }
    v11 = ~v7;
    while (1)
    {
      v8 = (v8 + 1) & v11;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        break;
      v12 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v8);
      v13 = static _CFObject.== infix(_:_:)();

      if ((v13 & 1) != 0)
        goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v20 = *v3;
  *v3 = 0x8000000000000000;
  v18 = a2;
  specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v18, v8, isUniquelyReferenced_nonNull_native);
  *v3 = v20;
  swift_bridgeObjectRelease();
  *a1 = v18;
  return 1;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  void *v20;
  id v21;
  Swift::Int v22;
  unint64_t v23;
  _QWORD *v24;
  id v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  id v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = a2;
    v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for AnyCanvasElementView();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v29;
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    v30 = (_QWORD *)v22;
    v23 = *(_QWORD *)(v22 + 16);
    if (*(_QWORD *)(v22 + 24) <= v23)
    {
      v27 = v23 + 1;
      v28 = v8;
      specialized _NativeSet.resize(capacity:)(v27, &demangling cache variable for type metadata for _SetStorage<AnyCanvasElementView>);
      v24 = v30;
    }
    else
    {
      v24 = (_QWORD *)v22;
      v25 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v24);
    *v3 = (uint64_t)v24;
  }
  else
  {
    v11 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain();
    v12 = NSObject._rawHashValue(seed:)(v11);
    v13 = -1 << *(_BYTE *)(v6 + 32);
    v14 = v12 & ~v13;
    if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
    {
      type metadata accessor for AnyCanvasElementView();
      v15 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v14);
      v16 = static NSObject.== infix(_:_:)();

      if ((v16 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v20 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        v21 = v20;
        return 0;
      }
      v17 = ~v13;
      while (1)
      {
        v14 = (v14 + 1) & v17;
        if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
          break;
        v18 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v14);
        v19 = static NSObject.== infix(_:_:)();

        if ((v19 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v31 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for NSObject, 0x1E0DE7910, &demangling cache variable for type metadata for _SetStorage<NSObject>, (void (*)(uint64_t))specialized _NativeSet.copy());
}

{
  return specialized Set._Variant.insert(_:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for UIColor, 0x1E0DC3658, &demangling cache variable for type metadata for _SetStorage<UIColor>, (void (*)(uint64_t))specialized _NativeSet.copy());
}

uint64_t specialized Set._Variant.insert(_:)(_BYTE *a1, Swift::Int a2)
{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;

  v5 = *v2;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v13 = *v2;
    *v2 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v8, isUniquelyReferenced_nonNull_native);
    *v2 = v13;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(unsigned __int8 *)(v9 + v8) != a2);
  }
  result = 0;
  LOBYTE(a2) = *(_BYTE *)(*(_QWORD *)(*v2 + 48) + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = static Hasher._hash(seed:_:)();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(_QWORD *a1, void *a2, unint64_t *a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t))
{
  uint64_t *v6;
  uint64_t *v10;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  id v25;
  char v26;
  void *v27;
  id v28;
  Swift::Int v29;
  unint64_t v30;
  _QWORD *v31;
  id v32;
  char isUniquelyReferenced_nonNull_native;
  id v34;
  uint64_t v35;
  id v36;
  uint64_t v38;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;

  v10 = v6;
  v13 = *v6;
  if ((*v6 & 0xC000000000000001) != 0)
  {
    if (v13 < 0)
      v14 = *v6;
    else
      v14 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v15 = a2;
    v16 = __CocoaSet.member(for:)();

    if (v16)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for NSObject(0, a3);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v41;
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v29 = specialized _NativeSet.init(_:capacity:)(v14, result + 1, a5, a3);
    v42 = (_QWORD *)v29;
    v30 = *(_QWORD *)(v29 + 16);
    if (*(_QWORD *)(v29 + 24) <= v30)
    {
      v35 = v30 + 1;
      v36 = v15;
      specialized _NativeSet.resize(capacity:)(v35, a5);
      v31 = v42;
    }
    else
    {
      v31 = (_QWORD *)v29;
      v32 = v15;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v15, v31);
    *v10 = (uint64_t)v31;
    swift_bridgeObjectRelease();
    *a1 = v15;
  }
  else
  {
    v18 = *(_QWORD *)(v13 + 40);
    swift_bridgeObjectRetain();
    v19 = NSObject._rawHashValue(seed:)(v18);
    v20 = -1 << *(_BYTE *)(v13 + 32);
    v21 = v19 & ~v20;
    v38 = a4;
    if (((*(_QWORD *)(v13 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
    {
      type metadata accessor for NSObject(0, a3);
      v22 = *(id *)(*(_QWORD *)(v13 + 48) + 8 * v21);
      v23 = static NSObject.== infix(_:_:)();

      if ((v23 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v27 = *(void **)(*(_QWORD *)(*v10 + 48) + 8 * v21);
        *a1 = v27;
        v28 = v27;
        return 0;
      }
      v24 = ~v20;
      while (1)
      {
        v21 = (v21 + 1) & v24;
        if (((*(_QWORD *)(v13 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          break;
        v25 = *(id *)(*(_QWORD *)(v13 + 48) + 8 * v21);
        v26 = static NSObject.== infix(_:_:)();

        if ((v26 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v43 = *v10;
    *v10 = 0x8000000000000000;
    v34 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v34, v21, isUniquelyReferenced_nonNull_native, a5, a3, v38, a6);
    *v10 = v43;
    swift_bridgeObjectRelease();
    *a1 = v34;
  }
  return 1;
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCanvasElementView>);
    v2 = static _SetStorage.convert(_:capacity:)();
    v15 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for AnyCanvasElementView();
      do
      {
        swift_dynamicCast();
        v2 = v15;
        v9 = *(_QWORD *)(v15 + 16);
        if (*(_QWORD *)(v15 + 24) <= v9)
        {
          specialized _NativeSet.resize(capacity:)(v9 + 1, &demangling cache variable for type metadata for _SetStorage<AnyCanvasElementView>);
          v2 = v15;
        }
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
        v4 = v2 + 56;
        v5 = -1 << *(_BYTE *)(v2 + 32);
        v6 = result & ~v5;
        v7 = v6 >> 6;
        if (((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          v8 = __clz(__rbit64((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v10 = 0;
          v11 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v11 && (v10 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v12 = v7 == v11;
            if (v7 == v11)
              v7 = 0;
            v10 |= v12;
            v13 = *(_QWORD *)(v4 + 8 * v7);
          }
          while (v13 == -1);
          v8 = __clz(__rbit64(~v13)) + (v7 << 6);
        }
        *(_QWORD *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v14;
        ++*(_QWORD *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  return v2;
}

{
  return specialized _NativeSet.init(_:capacity:)(a1, a2, &demangling cache variable for type metadata for _SetStorage<NSObject>, (unint64_t *)&lazy cache variable for type metadata for NSObject);
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v6;
  Swift::Int result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(a3);
    v6 = static _SetStorage.convert(_:capacity:)();
    v19 = v6;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for NSObject(0, a4);
      do
      {
        swift_dynamicCast();
        v6 = v19;
        v13 = *(_QWORD *)(v19 + 16);
        if (*(_QWORD *)(v19 + 24) <= v13)
        {
          specialized _NativeSet.resize(capacity:)(v13 + 1, a3);
          v6 = v19;
        }
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
        v8 = v6 + 56;
        v9 = -1 << *(_BYTE *)(v6 + 32);
        v10 = result & ~v9;
        v11 = v10 >> 6;
        if (((-1 << v10) & ~*(_QWORD *)(v6 + 56 + 8 * (v10 >> 6))) != 0)
        {
          v12 = __clz(__rbit64((-1 << v10) & ~*(_QWORD *)(v6 + 56 + 8 * (v10 >> 6)))) | v10 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v14 = 0;
          v15 = (unint64_t)(63 - v9) >> 6;
          do
          {
            if (++v11 == v15 && (v14 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v16 = v11 == v15;
            if (v11 == v15)
              v11 = 0;
            v14 |= v16;
            v17 = *(_QWORD *)(v8 + 8 * v11);
          }
          while (v17 == -1);
          v12 = __clz(__rbit64(~v17)) + (v11 << 6);
        }
        *(_QWORD *)(v8 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
        *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v12) = v18;
        ++*(_QWORD *)(v6 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  return v6;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Float>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v28 = v1;
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v27 = -1 << v7;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v29 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_36;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_36;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_36;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_36:
                if (v29 >= 64)
                  bzero((void *)(v2 + 56), 8 * v10);
                else
                  *v6 = v27;
                v1 = v28;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_42;
                  if (v5 >= v10)
                    goto LABEL_36;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v14);
      if ((v18 & 0x7FFFFFFF) != 0)
        v19 = v18;
      else
        v19 = 0;
      result = MEMORY[0x1DF0E51CC](*(_QWORD *)(v4 + 40), v19, 4);
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v11 + 8 * v22);
        }
        while (v26 == -1);
        v12 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSTextAlignment>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (_QWORD *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                v26 = 1 << *(_BYTE *)(v2 + 32);
                if (v26 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v26;
                v1 = v0;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      result = Hasher._finalize()();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt8 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Bool>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (_QWORD *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                v26 = 1 << *(_BYTE *)(v2 + 32);
                if (v26 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v26;
                v1 = v0;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      result = Hasher._finalize()();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_BYTE *)(*(_QWORD *)(v4 + 48) + v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Color>);
  v2 = static _SetStorage.resize(original:capacity:move:)();
  v3 = v2;
  if (*(_QWORD *)(v1 + 16))
  {
    v4 = 1 << *(_BYTE *)(v1 + 32);
    v5 = (_QWORD *)(v1 + 56);
    if (v4 < 64)
      v6 = ~(-1 << v4);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v1 + 56);
    v8 = (unint64_t)(v4 + 63) >> 6;
    v9 = v2 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v13 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v14 = v13 | (v11 << 6);
      }
      else
      {
        v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v8)
          goto LABEL_33;
        v16 = v5[v15];
        ++v11;
        if (!v16)
        {
          v11 = v15 + 1;
          if (v15 + 1 >= v8)
            goto LABEL_33;
          v16 = v5[v11];
          if (!v16)
          {
            v11 = v15 + 2;
            if (v15 + 2 >= v8)
              goto LABEL_33;
            v16 = v5[v11];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v8)
              {
LABEL_33:
                swift_release();
                v26 = 1 << *(_BYTE *)(v1 + 32);
                if (v26 > 63)
                  bzero((void *)(v1 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v5 = -1 << v26;
                *(_QWORD *)(v1 + 16) = 0;
                break;
              }
              v16 = v5[v17];
              if (!v16)
              {
                while (1)
                {
                  v11 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v16 = v5[v11];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v11 = v17;
            }
          }
        }
LABEL_23:
        v7 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      type metadata accessor for CGColorRef(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
      _CFObject.hash(into:)();
      result = Hasher._finalize()();
      v19 = -1 << *(_BYTE *)(v3 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v9 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v9 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v9 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v3 + 16);
    }
  }
  result = swift_release();
  *v0 = v3;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ResizeHandleType>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (_QWORD *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                v26 = 1 << *(_BYTE *)(v2 + 32);
                if (v26 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v26;
                v1 = v0;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      result = Hasher._finalize()();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_BYTE *)(*(_QWORD *)(v4 + 48) + v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ObjectIdentifier>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    v27 = v1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_33;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_33;
          v16 = v6[v5];
          if (!v16)
          {
            v5 = v15 + 2;
            if (v15 + 2 >= v10)
              goto LABEL_33;
            v16 = v6[v5];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64)
                  bzero((void *)(v2 + 56), 8 * v10);
                else
                  *v6 = v26;
                v1 = v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v5 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_39;
                  if (v5 >= v10)
                    goto LABEL_33;
                  v16 = v6[v5];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v5 = v17;
            }
          }
        }
LABEL_23:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      result = static Hasher._hash(seed:_:)();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t *v46;
  uint64_t v47;

  v46 = a4;
  v47 = a5;
  v7 = v5;
  v45 = a2;
  v8 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v44 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v5;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v13 = static _SetStorage.resize(original:capacity:move:)();
  v14 = v13;
  if (*(_QWORD *)(v12 + 16))
  {
    v15 = 1 << *(_BYTE *)(v12 + 32);
    v16 = *(_QWORD *)(v12 + 56);
    v43 = (_QWORD *)(v12 + 56);
    if (v15 < 64)
      v17 = ~(-1 << v15);
    else
      v17 = -1;
    v18 = v17 & v16;
    v41 = v5;
    v42 = (unint64_t)(v15 + 63) >> 6;
    v19 = v13 + 56;
    result = swift_retain();
    v21 = 0;
    while (1)
    {
      if (v18)
      {
        v23 = __clz(__rbit64(v18));
        v18 &= v18 - 1;
        v24 = v23 | (v21 << 6);
      }
      else
      {
        v25 = v21 + 1;
        if (__OFADD__(v21, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v25 >= v42)
          goto LABEL_33;
        v26 = v43[v25];
        ++v21;
        if (!v26)
        {
          v21 = v25 + 1;
          if (v25 + 1 >= v42)
            goto LABEL_33;
          v26 = v43[v21];
          if (!v26)
          {
            v21 = v25 + 2;
            if (v25 + 2 >= v42)
              goto LABEL_33;
            v26 = v43[v21];
            if (!v26)
            {
              v27 = v25 + 3;
              if (v27 >= v42)
              {
LABEL_33:
                swift_release();
                v7 = v41;
                v39 = 1 << *(_BYTE *)(v12 + 32);
                if (v39 > 63)
                  bzero(v43, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v43 = -1 << v39;
                *(_QWORD *)(v12 + 16) = 0;
                break;
              }
              v26 = v43[v27];
              if (!v26)
              {
                while (1)
                {
                  v21 = v27 + 1;
                  if (__OFADD__(v27, 1))
                    goto LABEL_39;
                  if (v21 >= v42)
                    goto LABEL_33;
                  v26 = v43[v21];
                  ++v27;
                  if (v26)
                    goto LABEL_23;
                }
              }
              v21 = v27;
            }
          }
        }
LABEL_23:
        v18 = (v26 - 1) & v26;
        v24 = __clz(__rbit64(v26)) + (v21 << 6);
      }
      v28 = v12;
      v29 = *(_QWORD *)(v12 + 48);
      v30 = *(_QWORD *)(v44 + 72);
      v31 = *(void (**)(char *, unint64_t, uint64_t))(v44 + 32);
      v31(v11, v29 + v30 * v24, v8);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(v46, v45, v47);
      result = dispatch thunk of Hashable._rawHashValue(seed:)();
      v32 = -1 << *(_BYTE *)(v14 + 32);
      v33 = result & ~v32;
      v34 = v33 >> 6;
      if (((-1 << v33) & ~*(_QWORD *)(v19 + 8 * (v33 >> 6))) != 0)
      {
        v22 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v19 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v35 = 0;
        v36 = (unint64_t)(63 - v32) >> 6;
        do
        {
          if (++v34 == v36 && (v35 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v37 = v34 == v36;
          if (v34 == v36)
            v34 = 0;
          v35 |= v37;
          v38 = *(_QWORD *)(v19 + 8 * v34);
        }
        while (v38 == -1);
        v22 = __clz(__rbit64(~v38)) + (v34 << 6);
      }
      *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v31)(*(_QWORD *)(v14 + 48) + v22 * v30, v11, v8);
      ++*(_QWORD *)(v14 + 16);
      v12 = v28;
    }
  }
  result = swift_release();
  *v7 = v14;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t);
  unint64_t *v46;
  uint64_t v47;

  v46 = a4;
  v47 = a5;
  v7 = v5;
  v45 = a2;
  v8 = a2(0);
  v44 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v40 - v10;
  v12 = *v5;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v13 = static _SetStorage.resize(original:capacity:move:)();
  v14 = v13;
  if (*(_QWORD *)(v12 + 16))
  {
    v15 = 1 << *(_BYTE *)(v12 + 32);
    v16 = *(_QWORD *)(v12 + 56);
    v43 = (_QWORD *)(v12 + 56);
    if (v15 < 64)
      v17 = ~(-1 << v15);
    else
      v17 = -1;
    v18 = v17 & v16;
    v41 = v5;
    v42 = (unint64_t)(v15 + 63) >> 6;
    v19 = v13 + 56;
    result = swift_retain();
    v21 = 0;
    while (1)
    {
      if (v18)
      {
        v23 = __clz(__rbit64(v18));
        v18 &= v18 - 1;
        v24 = v23 | (v21 << 6);
      }
      else
      {
        v25 = v21 + 1;
        if (__OFADD__(v21, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v25 >= v42)
          goto LABEL_33;
        v26 = v43[v25];
        ++v21;
        if (!v26)
        {
          v21 = v25 + 1;
          if (v25 + 1 >= v42)
            goto LABEL_33;
          v26 = v43[v21];
          if (!v26)
          {
            v21 = v25 + 2;
            if (v25 + 2 >= v42)
              goto LABEL_33;
            v26 = v43[v21];
            if (!v26)
            {
              v27 = v25 + 3;
              if (v27 >= v42)
              {
LABEL_33:
                swift_release();
                v7 = v41;
                v39 = 1 << *(_BYTE *)(v12 + 32);
                if (v39 > 63)
                  bzero(v43, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v43 = -1 << v39;
                *(_QWORD *)(v12 + 16) = 0;
                break;
              }
              v26 = v43[v27];
              if (!v26)
              {
                while (1)
                {
                  v21 = v27 + 1;
                  if (__OFADD__(v27, 1))
                    goto LABEL_39;
                  if (v21 >= v42)
                    goto LABEL_33;
                  v26 = v43[v21];
                  ++v27;
                  if (v26)
                    goto LABEL_23;
                }
              }
              v21 = v27;
            }
          }
        }
LABEL_23:
        v18 = (v26 - 1) & v26;
        v24 = __clz(__rbit64(v26)) + (v21 << 6);
      }
      v28 = v12;
      v29 = *(_QWORD *)(v12 + 48);
      v30 = *(_QWORD *)(v44 + 72);
      v31 = *(void (**)(char *, unint64_t, uint64_t))(v44 + 32);
      v31(v11, v29 + v30 * v24, v8);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(v46, v45, v47);
      result = dispatch thunk of Hashable._rawHashValue(seed:)();
      v32 = -1 << *(_BYTE *)(v14 + 32);
      v33 = result & ~v32;
      v34 = v33 >> 6;
      if (((-1 << v33) & ~*(_QWORD *)(v19 + 8 * (v33 >> 6))) != 0)
      {
        v22 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v19 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v35 = 0;
        v36 = (unint64_t)(63 - v32) >> 6;
        do
        {
          if (++v34 == v36 && (v35 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v37 = v34 == v36;
          if (v34 == v36)
            v34 = 0;
          v35 |= v37;
          v38 = *(_QWORD *)(v19 + 8 * v34);
        }
        while (v38 == -1);
        v22 = __clz(__rbit64(~v38)) + (v34 << 6);
      }
      *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v31)(*(_QWORD *)(v14 + 48) + v22 * v30, v11, v8);
      ++*(_QWORD *)(v14 + 16);
      v12 = v28;
    }
  }
  result = swift_release();
  *v7 = v14;
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;

  v3 = v2;
  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v5 = static _SetStorage.resize(original:capacity:move:)();
  v6 = v5;
  if (*(_QWORD *)(v4 + 16))
  {
    v30 = v2;
    v7 = 1 << *(_BYTE *)(v4 + 32);
    v8 = (_QWORD *)(v4 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v4 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v11)
          goto LABEL_33;
        v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v11)
            goto LABEL_33;
          v19 = v8[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v11)
              goto LABEL_33;
            v19 = v8[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_33:
                swift_release();
                v3 = v30;
                v29 = 1 << *(_BYTE *)(v4 + 32);
                if (v29 > 63)
                  bzero((void *)(v4 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v29;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v11)
                    goto LABEL_33;
                  v19 = v8[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v17);
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
      v22 = -1 << *(_BYTE *)(v6 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v21;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v3 = v6;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, _QWORD *a2)
{
  unint64_t result;

  NSObject._rawHashValue(seed:)(a2[5]);
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(_QWORD *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v29 = a1;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  v9.n128_f64[0] = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v3 + 16);
  v13 = *(_QWORD *)(*v3 + 24);
  v28 = v3;
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v14, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], &demangling cache variable for type metadata for _SetStorage<UUID>, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09C8]);
  }
  else
  {
    if (v13 > v12)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v14, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], &demangling cache variable for type metadata for _SetStorage<UUID>, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E0CB09C8]);
  }
  v15 = *v3;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v17 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v11, *(_QWORD *)(v15 + 48) + v19 * a2, v6);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
      if ((v21 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v22 = v29;
  v23 = *v28;
  *(_QWORD *)(*v28 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v23 + 48) + *(_QWORD *)(v7 + 72) * a2, v22, v6, v9);
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (!v26)
  {
    *(_QWORD *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v29 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v7 = *(_QWORD *)(v6 - 8);
  v9.n128_f64[0] = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v3 + 16);
  v13 = *(_QWORD *)(*v3 + 24);
  v28 = v3;
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v14, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, &demangling cache variable for type metadata for _SetStorage<SharedTagged_3<TaggedPaperPage>>, &lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, MEMORY[0x1E0D12278]);
  }
  else
  {
    if (v13 > v12)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v14, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, &demangling cache variable for type metadata for _SetStorage<SharedTagged_3<TaggedPaperPage>>, &lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, MEMORY[0x1E0D12278]);
  }
  v15 = *v3;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, MEMORY[0x1E0D12278]);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v17 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v11, *(_QWORD *)(v15 + 48) + v19 * a2, v6);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, MEMORY[0x1E0D12280]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
      if ((v21 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v22 = v29;
  v23 = *v28;
  *(_QWORD *)(*v28 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v23 + 48) + *(_QWORD *)(v7 + 72) * a2, v22, v6, v9);
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (!v26)
  {
    *(_QWORD *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v29 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v7 = *(_QWORD *)(v6 - 8);
  v9.n128_f64[0] = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v3 + 16);
  v13 = *(_QWORD *)(*v3 + 24);
  v28 = v3;
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v14, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, &demangling cache variable for type metadata for _SetStorage<WeakTagged_9<TaggedCanvasElement>>, &lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, MEMORY[0x1E0D11EE0]);
  }
  else
  {
    if (v13 > v12)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v14, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, &demangling cache variable for type metadata for _SetStorage<WeakTagged_9<TaggedCanvasElement>>, &lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, MEMORY[0x1E0D11EE0]);
  }
  v15 = *v3;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D11EE0]);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v17 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v11, *(_QWORD *)(v15 + 48) + v19 * a2, v6);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D11EE8]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
      if ((v21 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v22 = v29;
  v23 = *v28;
  *(_QWORD *)(*v28 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v23 + 48) + *(_QWORD *)(v7 + 72) * a2, v22, v6, v9);
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (!v26)
  {
    *(_QWORD *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v29 = a1;
  v6 = type metadata accessor for CRKeyPath();
  v7 = *(_QWORD *)(v6 - 8);
  v9.n128_f64[0] = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v3 + 16);
  v13 = *(_QWORD *)(*v3 + 24);
  v28 = v3;
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v14, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], &demangling cache variable for type metadata for _SetStorage<CRKeyPath>, (unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x1E0D12C88]);
  }
  else
  {
    if (v13 > v12)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v14, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], &demangling cache variable for type metadata for _SetStorage<CRKeyPath>, (unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x1E0D12C88]);
  }
  v15 = *v3;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], MEMORY[0x1E0D12C88]);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v17 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v11, *(_QWORD *)(v15 + 48) + v19 * a2, v6);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], MEMORY[0x1E0D12C90]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
      if ((v21 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v22 = v29;
  v23 = *v28;
  *(_QWORD *)(*v28 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v23 + 48) + *(_QWORD *)(v7 + 72) * a2, v22, v6, v9);
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (!v26)
  {
    *(_QWORD *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v29 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v7 = *(_QWORD *)(v6 - 8);
  v9.n128_f64[0] = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v3 + 16);
  v13 = *(_QWORD *)(*v3 + 24);
  v28 = v3;
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v14, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, &demangling cache variable for type metadata for _SetStorage<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, (unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, MEMORY[0x1E0D12888]);
  }
  else
  {
    if (v13 > v12)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v14, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, &demangling cache variable for type metadata for _SetStorage<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, (unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, MEMORY[0x1E0D12888]);
  }
  v15 = *v3;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12888]);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v17 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v11, *(_QWORD *)(v15 + 48) + v19 * a2, v6);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12890]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
      if ((v21 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v22 = v29;
  v23 = *v28;
  *(_QWORD *)(*v28 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v23 + 48) + *(_QWORD *)(v7 + 72) * a2, v22, v6, v9);
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (!v26)
  {
    *(_QWORD *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v29 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v7 = *(_QWORD *)(v6 - 8);
  v9.n128_f64[0] = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v3 + 16);
  v13 = *(_QWORD *)(*v3 + 24);
  v28 = v3;
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v14, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>, (unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, MEMORY[0x1E0D12B78]);
  }
  else
  {
    if (v13 > v12)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v14, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>, (unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, MEMORY[0x1E0D12B78]);
  }
  v15 = *v3;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12B78]);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v17 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v11, *(_QWORD *)(v15 + 48) + v19 * a2, v6);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12B80]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
      if ((v21 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v22 = v29;
  v23 = *v28;
  *(_QWORD *)(*v28 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v23 + 48) + *(_QWORD *)(v7 + 72) * a2, v22, v6, v9);
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (!v26)
  {
    *(_QWORD *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;

  v29 = a1;
  v6 = type metadata accessor for CRAsset();
  v7 = *(_QWORD *)(v6 - 8);
  v9.n128_f64[0] = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v3 + 16);
  v13 = *(_QWORD *)(*v3 + 24);
  v28 = v3;
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_12;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v14, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12958], &demangling cache variable for type metadata for _SetStorage<CRAsset>, &lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x1E0D12970]);
  }
  else
  {
    if (v13 > v12)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v14, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12958], &demangling cache variable for type metadata for _SetStorage<CRAsset>, &lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, MEMORY[0x1E0D12970]);
  }
  v15 = *v3;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12958], MEMORY[0x1E0D12970]);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v17 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v11, *(_QWORD *)(v15 + 48) + v19 * a2, v6);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12958], MEMORY[0x1E0D12978]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
      if ((v21 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v22 = v29;
  v23 = *v28;
  *(_QWORD *)(*v28 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v7 + 32))(*(_QWORD *)(v23 + 48) + *(_QWORD *)(v7 + 72) * a2, v22, v6, v9);
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (!v26)
  {
    *(_QWORD *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  Swift::Int *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (Swift::Int *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, char a2, float a3)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v4 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a2 & 1) != 0)
    goto LABEL_17;
  if ((a2 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_17;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  if ((LODWORD(a3) & 0x7FFFFFFF) != 0)
    v9 = LODWORD(a3);
  else
    v9 = 0;
  result = MEMORY[0x1DF0E51CC](*(_QWORD *)(*v3 + 40), v9, 4);
  v10 = -1 << *(_BYTE *)(v8 + 32);
  v4 = result & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v11 = *(_QWORD *)(v8 + 48);
    if (*(float *)(v11 + 4 * v4) == a3)
    {
LABEL_16:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v12 = ~v10;
      while (1)
      {
        v4 = (v4 + 1) & v12;
        if (((*(_QWORD *)(v8 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
          break;
        if (*(float *)(v11 + 4 * v4) == a3)
          goto LABEL_16;
      }
    }
  }
LABEL_17:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (v4 >> 6) + 56) |= 1 << v4;
  *(float *)(*(_QWORD *)(v13 + 48) + 4 * v4) = a3;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t *v3;
  Swift::UInt v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  result = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      type metadata accessor for NSTextAlignment(0);
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v10 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

{
  uint64_t *v3;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5 & 1);
  result = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(_BYTE *)(v10 + a2) == (v5 & 1))
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_BYTE *)(v10 + a2) == (v5 & 1))
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v12 + 48) + a2) = v5 & 1;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

{
  uint64_t *v3;
  Swift::UInt v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  result = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(unsigned __int8 *)(v10 + a2) == (_DWORD)v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(unsigned __int8 *)(v10 + a2) == (_DWORD)v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v12 + 48) + a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v4 = v3;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v9 = *v3;
  Hasher.init(_seed:)();
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
  _CFObject.hash(into:)();
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * a2);
    v13 = static _CFObject.== infix(_:_:)();

    if ((v13 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v14 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v14;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v15 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * a2);
        v16 = static _CFObject.== infix(_:_:)();

        if ((v16 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v17 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v17 + 48) + 8 * a2) = a1;
  v18 = *(_QWORD *)(v17 + 16);
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
    __break(1u);
  else
    *(_QWORD *)(v17 + 16) = v20;
}

{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v8, &demangling cache variable for type metadata for _SetStorage<AnyCanvasElementView>);
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v8, &demangling cache variable for type metadata for _SetStorage<AnyCanvasElementView>);
  }
  v9 = *v3;
  v10 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    type metadata accessor for AnyCanvasElementView();
    v12 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * a2);
    v13 = static NSObject.== infix(_:_:)();

    if ((v13 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v14 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v14;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v15 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * a2);
        v16 = static NSObject.== infix(_:_:)();

        if ((v16 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v17 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v17 + 48) + 8 * a2) = a1;
  v18 = *(_QWORD *)(v17 + 16);
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
    __break(1u);
  else
    *(_QWORD *)(v17 + 16) = v20;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  result = static Hasher._hash(seed:_:)();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v10 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, unint64_t *a5, uint64_t a6, void (*a7)(uint64_t))
{
  uint64_t *v7;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v11 = *(_QWORD *)(*v7 + 16);
  v12 = *(_QWORD *)(*v7 + 24);
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_14;
  v13 = v11 + 1;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)(v13, a4);
  }
  else
  {
    if (v12 > v11)
    {
      a7(v13);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)(v13, a4);
  }
  v14 = *v7;
  v15 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v7 + 40));
  v16 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v15 & ~v16;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    type metadata accessor for NSObject(0, a5);
    v17 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * a2);
    v18 = static NSObject.== infix(_:_:)();

    if ((v18 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v19 = ~v16;
      while (1)
      {
        a2 = (a2 + 1) & v19;
        if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v20 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * a2);
        v21 = static NSObject.== infix(_:_:)();

        if ((v21 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v22 = *v7;
  *(_QWORD *)(*v7 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v22 + 48) + 8 * a2) = a1;
  v23 = *(_QWORD *)(v22 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (v24)
    __break(1u);
  else
    *(_QWORD *)(v22 + 16) = v25;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Float>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_38:
    *v1 = v4;
    return result;
  }
  v27 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v15 >= v10)
      goto LABEL_36;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_36;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_36;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v14);
    if ((v18 & 0x7FFFFFFF) != 0)
      v19 = v18;
    else
      v19 = 0;
    result = MEMORY[0x1DF0E51CC](*(_QWORD *)(v4 + 40), v19, 4);
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v26 == -1);
      v12 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_36:
    result = swift_release();
    v1 = v27;
    goto LABEL_38;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_36;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<NSTextAlignment>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    result = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt8 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Bool>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    result = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  int64_t v27;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Color>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v27 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v27)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v27)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v11);
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v27)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v11);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    type metadata accessor for CGColorRef(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
    v19 = v18;
    _CFObject.hash(into:)();
    result = Hasher._finalize()();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v9 + 8 * v22);
      }
      while (v26 == -1);
      v12 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v19;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v27)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v27)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ResizeHandleType>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    result = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v0;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ObjectIdentifier>);
  result = static _SetStorage.resize(original:capacity:move:)();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_33;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
      {
        v5 = v15 + 2;
        if (v15 + 2 >= v10)
          goto LABEL_33;
        v16 = *(_QWORD *)(v6 + 8 * v5);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    result = static Hasher._hash(seed:_:)();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    result = swift_release();
    v1 = v26;
    goto LABEL_35;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_33;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int64_t v39;
  uint64_t *v40;
  unint64_t *v41;
  uint64_t v42;

  v41 = a4;
  v42 = a5;
  v7 = v5;
  v40 = a2;
  v8 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v5;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v14 = static _SetStorage.resize(original:capacity:move:)();
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
  {
    result = swift_release();
LABEL_35:
    *v7 = v15;
    return result;
  }
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 56);
  v37 = v5;
  v38 = v13 + 56;
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v39 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 56;
  result = swift_retain();
  v22 = 0;
  while (1)
  {
    if (v19)
    {
      v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v25 = v24 | (v22 << 6);
      goto LABEL_24;
    }
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v26 >= v39)
      goto LABEL_33;
    v27 = *(_QWORD *)(v38 + 8 * v26);
    ++v22;
    if (!v27)
    {
      v22 = v26 + 1;
      if (v26 + 1 >= v39)
        goto LABEL_33;
      v27 = *(_QWORD *)(v38 + 8 * v22);
      if (!v27)
      {
        v22 = v26 + 2;
        if (v26 + 2 >= v39)
          goto LABEL_33;
        v27 = *(_QWORD *)(v38 + 8 * v22);
        if (!v27)
          break;
      }
    }
LABEL_23:
    v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v22 << 6);
LABEL_24:
    v29 = *(_QWORD *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v12, *(_QWORD *)(v13 + 48) + v29 * v25, v8);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(v41, v40, v42);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v30 = -1 << *(_BYTE *)(v15 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v20 + 8 * (v31 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v20 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v20 + 8 * v32);
      }
      while (v36 == -1);
      v23 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v15 + 48) + v23 * v29, v12, v8);
    ++*(_QWORD *)(v15 + 16);
  }
  v28 = v26 + 3;
  if (v28 >= v39)
  {
LABEL_33:
    result = swift_release_n();
    v7 = v37;
    goto LABEL_35;
  }
  v27 = *(_QWORD *)(v38 + 8 * v28);
  if (v27)
  {
    v22 = v28;
    goto LABEL_23;
  }
  while (1)
  {
    v22 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v22 >= v39)
      goto LABEL_33;
    v27 = *(_QWORD *)(v38 + 8 * v22);
    ++v28;
    if (v27)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int64_t v39;
  uint64_t (*v40)(uint64_t);
  unint64_t *v41;
  uint64_t v42;

  v41 = a4;
  v42 = a5;
  v7 = v5;
  v40 = a2;
  v8 = a2(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v37 - v11;
  v13 = *v5;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v14 = static _SetStorage.resize(original:capacity:move:)();
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
  {
    result = swift_release();
LABEL_35:
    *v7 = v15;
    return result;
  }
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 56);
  v37 = v5;
  v38 = v13 + 56;
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v39 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 56;
  result = swift_retain();
  v22 = 0;
  while (1)
  {
    if (v19)
    {
      v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v25 = v24 | (v22 << 6);
      goto LABEL_24;
    }
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v26 >= v39)
      goto LABEL_33;
    v27 = *(_QWORD *)(v38 + 8 * v26);
    ++v22;
    if (!v27)
    {
      v22 = v26 + 1;
      if (v26 + 1 >= v39)
        goto LABEL_33;
      v27 = *(_QWORD *)(v38 + 8 * v22);
      if (!v27)
      {
        v22 = v26 + 2;
        if (v26 + 2 >= v39)
          goto LABEL_33;
        v27 = *(_QWORD *)(v38 + 8 * v22);
        if (!v27)
          break;
      }
    }
LABEL_23:
    v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v22 << 6);
LABEL_24:
    v29 = *(_QWORD *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v12, *(_QWORD *)(v13 + 48) + v29 * v25, v8);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(v41, v40, v42);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v30 = -1 << *(_BYTE *)(v15 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v20 + 8 * (v31 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v20 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v20 + 8 * v32);
      }
      while (v36 == -1);
      v23 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v15 + 48) + v23 * v29, v12, v8);
    ++*(_QWORD *)(v15 + 16);
  }
  v28 = v26 + 3;
  if (v28 >= v39)
  {
LABEL_33:
    result = swift_release_n();
    v7 = v37;
    goto LABEL_35;
  }
  v27 = *(_QWORD *)(v38 + 8 * v28);
  if (v27)
  {
    v22 = v28;
    goto LABEL_23;
  }
  while (1)
  {
    v22 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v22 >= v39)
      goto LABEL_33;
    v27 = *(_QWORD *)(v38 + 8 * v22);
    ++v28;
    if (v27)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::Int v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;

  v3 = v2;
  v4 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v5 = static _SetStorage.resize(original:capacity:move:)();
  v6 = v5;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release();
LABEL_35:
    *v3 = v6;
    return result;
  }
  v30 = v2;
  v7 = 1 << *(_BYTE *)(v4 + 32);
  v8 = v4 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v4 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_24;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v11)
      goto LABEL_33;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v11)
        goto LABEL_33;
      v19 = *(_QWORD *)(v8 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v11)
          goto LABEL_33;
        v19 = *(_QWORD *)(v8 + 8 * v14);
        if (!v19)
          break;
      }
    }
LABEL_23:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_24:
    v21 = *(_QWORD *)(v6 + 40);
    v22 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v17);
    result = NSObject._rawHashValue(seed:)(v21);
    v23 = -1 << *(_BYTE *)(v6 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v22;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_33:
    result = swift_release_n();
    v3 = v30;
    goto LABEL_35;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v14 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v11)
      goto LABEL_33;
    v19 = *(_QWORD *)(v8 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

BOOL partial apply for closure #1 in removeSubstrokes #1 <A, B>(from:) in PKDrawingStruct.deleteStrokes<A, B>(_:in:)(uint64_t a1)
{
  _QWORD *v1;

  return (removeSubstrokes #1 <A, B>(from:) in PKDrawingStruct.deleteStrokes<A, B>(_:in:)(a1, v1[4], v1[5], v1[2], v1[3]) & 1) == 0;
}

uint64_t partial apply for closure #1 in PKDrawingStruct.filteredStrokes<A>(in:isIncluded:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PKDrawingStruct.filteredStrokes<A>(in:isIncluded:)(a1, *(uint64_t (**)(uint64_t, double))(v1 + 16), *(_QWORD *)(v1 + 24), *(unint64_t **)(v1 + 32));
}

uint64_t specialized closure #1 in PKDrawingStruct.filteredStrokes<A>(in:isIncluded:)(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t, double);
  uint64_t result;
  unint64_t *v22;
  unint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t v28;

  v27 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v27 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = v6;
  v20 = *(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16);
  v20(v13, a1, v5, v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12878]);
  WeakRef.init<A>(_:)();
  LOBYTE(a3) = specialized Set.contains(_:)((uint64_t)v19, a3);
  result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v19, v14);
  if ((a3 & 1) != 0)
  {
    ((void (*)(char *, uint64_t, uint64_t))v20)(v9, a1, v5);
    v22 = v27;
    v23 = *v27;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v22 = v23;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v23 + 16) + 1, 1, v23);
      *v22 = v23;
    }
    v26 = *(_QWORD *)(v23 + 16);
    v25 = *(_QWORD *)(v23 + 24);
    if (v26 >= v25 >> 1)
    {
      v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1, v23);
      *v22 = v23;
    }
    *(_QWORD *)(v23 + 16) = v26 + 1;
    return (*(uint64_t (**)(unint64_t, char *, uint64_t))(v28 + 32))(v23+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(_QWORD *)(v28 + 72) * v26, v9, v5);
  }
  return result;
}

uint64_t specialized visit #1 <A>(node:) in PKDrawingStruct.visitStrokes<A>(in:_:)(uint64_t (*a1)(char *, uint64_t, uint64_t), uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unint64_t *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  unint64_t *v74;
  uint64_t v75;
  uint64_t (*v76)(char *, uint64_t, uint64_t);
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;

  v64 = a7;
  v69 = a6;
  v74 = a3;
  v80 = a2;
  v76 = a1;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v77 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v68 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v12, v13);
  v65 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  v67 = *(_QWORD *)(v79 - 8);
  MEMORY[0x1E0C80A78](v79, v15);
  v78 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
  MEMORY[0x1E0C80A78](v17, v18);
  v75 = (uint64_t)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v71 = *(_QWORD *)(v20 - 8);
  v72 = v20;
  MEMORY[0x1E0C80A78](v20, v21);
  v73 = (char *)&v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v70 = (char *)&v60 - v25;
  v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v28);
  v30 = (char *)&v60 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v60 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v36 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35, v37);
  v39 = (char *)&v60 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v66 = v9;
  Ref.subscript.getter();
  CRRegister.value.getter();
  SharedTagged_2.tagged1.getter();
  v40 = *(void (**)(char *, uint64_t))(v27 + 8);
  v40(v30, v26);
  v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  LODWORD(v9) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v34, 1, v41);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v34, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  if ((_DWORD)v9 == 1)
  {
    v42 = v73;
    v62 = a5;
    v63 = v36;
    v43 = a4;
    CRRegister.value.getter();
    v44 = v75;
    SharedTagged_2.tagged2.getter();
    v40(v30, v26);
    v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>);
    v46 = *(_QWORD *)(v45 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v75, (uint64_t *)&demangling cache variable for type metadata for Ref<CRSequence<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>>?);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v39, v35);
    }
    else
    {
      v60 = v39;
      v61 = v35;
      v47 = v75;
      Ref.subscript.getter();
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v45);
      (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v70, v42, v72);
      CRSequence.makeIterator()();
      v48 = v65;
      CRSequence.Iterator.next()();
      v49 = v77;
      v50 = v66;
      v76 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v77 + 48);
      v51 = v76(v48, 1, v66);
      v52 = v74;
      v53 = v68;
      v54 = v69;
      v55 = v43;
      v56 = v62;
      if (v51 != 1)
      {
        v57 = v64 & 1;
        v58 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
        do
        {
          v58(v53, v48, v50);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized visit #1 <A>(node:) in PKDrawingStruct.visitStrokes<A>(in:_:)(v53, v80, v52, v55, v56, v54, v57);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v49 + 8))(v53, v50);
          CRSequence.Iterator.next()();
          v49 = v77;
        }
        while (v76(v48, 1, v50) != 1);
      }
      (*(void (**)(char *, uint64_t))(v67 + 8))(v78, v79);
      (*(void (**)(char *, uint64_t))(v71 + 8))(v70, v72);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v60, v61);
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized closure #1 in PKDrawingStruct.filteredStrokes<A>(in:isIncluded:)((uint64_t)v76, v74, a5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v39, v35);
  }
  swift_bridgeObjectRelease_n();
  return swift_bridgeObjectRelease_n();
}

unint64_t specialized PKDrawingStruct.filteredStrokes<A>(in:isIncluded:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unsigned int (*v22)(_BYTE *, uint64_t, uint64_t);
  int v23;
  uint64_t v24;
  void (*v25)(uint64_t (*)(char *, uint64_t, uint64_t), _BYTE *, uint64_t);
  _BYTE v27[4];
  int v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;

  v28 = a6;
  v32 = a5;
  v29 = a1;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (uint64_t (*)(char *, uint64_t, uint64_t))&v27[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = &v27[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  v30 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = &v27[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = MEMORY[0x1E0DEE9D8];
  v35 = MEMORY[0x1E0DEE9D8];
  type metadata accessor for PKDrawingStruct();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  CROrderedSet.makeIterator()();
  v31 = v20;
  CROrderedSet.Iterator.next()();
  v34 = v9;
  v22 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48);
  if (v22(v16, 1, v8) != 1)
  {
    v33 = v17;
    v23 = v28 & 1;
    v24 = v29;
    v25 = *(void (**)(uint64_t (*)(char *, uint64_t, uint64_t), _BYTE *, uint64_t))(v34 + 32);
    do
    {
      v25(v12, v16, v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized visit #1 <A>(node:) in PKDrawingStruct.visitStrokes<A>(in:_:)(v12, v24, &v35, a3, a4, v32, v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t (*)(char *, uint64_t, uint64_t), uint64_t))(v34 + 8))(v12, v8);
      CROrderedSet.Iterator.next()();
    }
    while (v22(v16, 1, v8) != 1);
    v21 = v35;
    v17 = v33;
  }
  (*(void (**)(_BYTE *, uint64_t))(v30 + 8))(v31, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t getEnumTagSinglePayload for MagicGenerativePlaygroundState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MagicGenerativePlaygroundState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1DDE8D614 + 4 * byte_1DDF46295[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1DDE8D648 + 4 * byte_1DDF46290[v4]))();
}

uint64_t sub_1DDE8D648(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDE8D650(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDE8D658);
  return result;
}

uint64_t sub_1DDE8D664(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDE8D66CLL);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1DDE8D670(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDE8D678(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MagicGenerativePlaygroundState()
{
  return &type metadata for MagicGenerativePlaygroundState;
}

uint64_t MagicGenerativePlaygroundState.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1DDE8D6D4 + 4 * byte_1DDF4629A[a1]))(0x616974696E696E75, 0xED000064657A696CLL);
}

uint64_t sub_1DDE8D6D4()
{
  return 0x696C616974696E69;
}

uint64_t sub_1DDE8D6F4()
{
  return 0x656C6553646E6177;
}

unint64_t sub_1DDE8D718()
{
  return 0xD000000000000017;
}

unint64_t sub_1DDE8D770()
{
  return 0xD000000000000011;
}

void sub_1DDE8D788()
{
  JUMPOUT(0x1DDE8D79CLL);
}

uint64_t sub_1DDE8D7A8()
{
  return 0x6E776F4472616574;
}

uint64_t sub_1DDE8D7C0()
{
  return 0x65746172656E6567;
}

uint64_t MagicGenerativePlaygroundState.TransitionError.errorDescription.getter(__int16 a1)
{
  unsigned __int8 v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;

  v1 = a1;
  v2 = HIBYTE(a1);
  v3 = type metadata accessor for Locale();
  MEMORY[0x1E0C80A78](v3, v4);
  v5 = type metadata accessor for String.LocalizationValue();
  MEMORY[0x1E0C80A78](v5, v6);
  v7 = type metadata accessor for String.LocalizationValue.StringInterpolation();
  MEMORY[0x1E0C80A78](v7, v8);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v9._object = (void *)0x80000001DDF5A7D0;
  v9._countAndFlagsBits = 0xD000000000000023;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v9);
  v10._countAndFlagsBits = MagicGenerativePlaygroundState.rawValue.getter(v1);
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 544175136;
  v11._object = (void *)0xE400000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v11);
  v12._countAndFlagsBits = MagicGenerativePlaygroundState.rawValue.getter(v2);
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 46;
  v13._object = (void *)0xE100000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v13);
  String.LocalizationValue.init(stringInterpolation:)();
  static Locale.current.getter();
  return String.init(localized:table:bundle:locale:comment:)();
}

uint64_t protocol witness for LocalizedError.errorDescription.getter in conformance MagicGenerativePlaygroundState.TransitionError()
{
  __int16 *v0;

  return MagicGenerativePlaygroundState.TransitionError.errorDescription.getter(*v0);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MagicGenerativePlaygroundState()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  MagicGenerativePlaygroundState.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance MagicGenerativePlaygroundState()
{
  unsigned __int8 *v0;

  MagicGenerativePlaygroundState.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MagicGenerativePlaygroundState()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  MagicGenerativePlaygroundState.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance MagicGenerativePlaygroundState@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized MagicGenerativePlaygroundState.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MagicGenerativePlaygroundState@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = MagicGenerativePlaygroundState.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MagicGenerativePlaygroundState(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = MagicGenerativePlaygroundState.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == MagicGenerativePlaygroundState.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

unint64_t lazy protocol witness table accessor for type MagicGenerativePlaygroundState and conformance MagicGenerativePlaygroundState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MagicGenerativePlaygroundState and conformance MagicGenerativePlaygroundState;
  if (!lazy protocol witness table cache variable for type MagicGenerativePlaygroundState and conformance MagicGenerativePlaygroundState)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for MagicGenerativePlaygroundState, &type metadata for MagicGenerativePlaygroundState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MagicGenerativePlaygroundState and conformance MagicGenerativePlaygroundState);
  }
  return result;
}

uint64_t specialized static MagicGenerativePlaygroundState.supportsTransition(from:to:)(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = MagicGenerativePlaygroundState.rawValue.getter(a1);
  v6 = v5;
  if (v4 == MagicGenerativePlaygroundState.rawValue.getter(a2) && v6 == v7)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
      __asm { BR              X10 }
  }
  return 1;
}

unint64_t specialized MagicGenerativePlaygroundState.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of MagicGenerativePlaygroundState.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xB)
    return 11;
  else
    return v3;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MagicGenerativePlaygroundState.TransitionError(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 65290 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65290 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65290;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65290;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65290;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MagicGenerativePlaygroundState.TransitionError(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65290 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65290 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1DDE8E1D0 + 4 * byte_1DDF462B5[v4]))();
  *a1 = a2 - 246;
  return ((uint64_t (*)(void))((char *)sub_1DDE8E204 + 4 * byte_1DDF462B0[v4]))();
}

uint64_t sub_1DDE8E204(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1DDE8E20C(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1DDE8E214);
  return result;
}

uint64_t sub_1DDE8E220(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1DDE8E228);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1DDE8E22C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1DDE8E234(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MagicGenerativePlaygroundState.TransitionError()
{
  return &type metadata for MagicGenerativePlaygroundState.TransitionError;
}

double one-time initialization function for edgeInsets()
{
  double result;

  result = 8.0;
  __asm { FMOV            V1.2D, #8.0 }
  *(_OWORD *)&edgeInsets.top = _Q1;
  *(_OWORD *)&edgeInsets.bottom = xmmword_1DDF46420;
  return result;
}

void one-time initialization function for trailingAddLinkImageViewSpacingFromCenterX()
{
  trailingAddLinkImageViewSpacingFromCenterX = 0x403C000000000000;
}

int64x2_t one-time initialization function for linkImageViewSize()
{
  int64x2_t result;

  result = vdupq_n_s64(0x4040000000000000uLL);
  linkImageViewSize = (CGSize)result;
  return result;
}

void one-time initialization function for linkImageViewCornerRadius()
{
  linkImageViewCornerRadius = 0x4020000000000000;
}

void one-time initialization function for verticalTextLabelsInteritemSpacing()
{
  verticalTextLabelsInteritemSpacing = 0;
}

void one-time initialization function for leadingTextLabelsSpacing()
{
  leadingTextLabelsSpacing = 0x4028000000000000;
}

void one-time initialization function for trailingTextLabelsSpacing()
{
  trailingTextLabelsSpacing = 0x4020000000000000;
}

id LinkMenuItemView.imageView.getter(uint64_t *a1, Class *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v3 = *a1;
  v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    v5 = *(id *)(v2 + *a1);
  }
  else
  {
    v6 = objc_msgSend(objc_allocWithZone(*a2), sel_init);
    v7 = *(void **)(v2 + v3);
    *(_QWORD *)(v2 + v3) = v6;
    v5 = v6;

    v4 = 0;
  }
  v8 = v4;
  return v5;
}

id LinkMenuItemView.init(linkItem:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_class *ObjectType;
  char *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  Class isa;
  id v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  Class v57;
  id v58;
  void *v59;
  id v60;
  id v61;
  void *v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  void *v75;
  id v76;
  void *v77;
  id v78;
  id v79;
  id v80;
  double v81;
  double v82;
  uint64_t v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  Class v95;
  id v97;
  id v98;
  objc_super v99;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___titleLabel] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___subtitleLabel] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit16LinkMenuItemView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v6 = &v2[OBJC_IVAR____TtC8PaperKit16LinkMenuItemView_linkItem];
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  v99.receiver = v2;
  v99.super_class = ObjectType;
  swift_unknownObjectRetain();
  v7 = objc_msgSendSuper2(&v99, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v8 = objc_allocWithZone(MEMORY[0x1E0DC3D80]);
  v9 = v7;
  v97 = objc_msgSend(v8, sel_initWithTarget_action_, v9, sel_tapGestureHandler_);
  objc_msgSend(v9, sel_addGestureRecognizer_);
  v10 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView, (Class *)0x1E0DC3890);
  v11 = objc_msgSend(v10, sel_layer);

  objc_msgSend(v11, sel_setMasksToBounds_, 1);
  v12 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView, (Class *)0x1E0DC3890);
  v13 = objc_msgSend(v12, sel_layer);

  if (one-time initialization token for linkImageViewCornerRadius != -1)
    swift_once();
  objc_msgSend(v13, sel_setCornerRadius_, *(double *)&linkImageViewCornerRadius);

  v14 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView, (Class *)0x1E0DC3890);
  objc_msgSend(v14, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  v15 = v9;
  v16 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView, (Class *)0x1E0DC3890);
  objc_msgSend(v15, sel_addSubview_, v16);

  v98 = (id)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1DDF39360;
  v18 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView, (Class *)0x1E0DC3890);
  v19 = objc_msgSend(v18, sel_centerYAnchor);

  v20 = objc_msgSend(v15, sel_centerYAnchor);
  v21 = objc_msgSend(v19, sel_constraintEqualToAnchor_, v20);

  *(_QWORD *)(v17 + 32) = v21;
  v22 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView, (Class *)0x1E0DC3890);
  v23 = objc_msgSend(v22, sel_topAnchor);

  v24 = objc_msgSend(v15, sel_topAnchor);
  if (one-time initialization token for edgeInsets != -1)
    swift_once();
  v25 = objc_msgSend(v23, sel_constraintGreaterThanOrEqualToAnchor_constant_, v24, edgeInsets.top);

  *(_QWORD *)(v17 + 40) = v25;
  v26 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView, (Class *)0x1E0DC3890);
  v27 = objc_msgSend(v26, sel_leadingAnchor);

  v28 = objc_msgSend(v15, sel_leadingAnchor);
  v29 = objc_msgSend(v27, sel_constraintEqualToAnchor_constant_, v28, edgeInsets.leading);

  *(_QWORD *)(v17 + 48) = v29;
  v30 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView, (Class *)0x1E0DC3890);
  v31 = objc_msgSend(v30, sel_bottomAnchor);

  v32 = objc_msgSend(v15, sel_bottomAnchor);
  v33 = objc_msgSend(v31, sel_constraintLessThanOrEqualToAnchor_constant_, v32, edgeInsets.bottom);

  *(_QWORD *)(v17 + 56) = v33;
  v34 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView, (Class *)0x1E0DC3890);
  v35 = objc_msgSend(v34, sel_widthAnchor);

  if (one-time initialization token for linkImageViewSize != -1)
    swift_once();
  v36 = objc_msgSend(v35, sel_constraintEqualToConstant_, linkImageViewSize.width);

  *(_QWORD *)(v17 + 64) = v36;
  v37 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView, (Class *)0x1E0DC3890);
  v38 = objc_msgSend(v37, sel_heightAnchor);

  v39 = objc_msgSend(v38, sel_constraintEqualToConstant_, linkImageViewSize.height);
  *(_QWORD *)(v17 + 72) = v39;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v98, sel_activateConstraints_, isa);

  v41 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3CA8]), sel_init);
  objc_msgSend(v41, sel_setAxis_, 1);
  if (one-time initialization token for verticalTextLabelsInteritemSpacing != -1)
    swift_once();
  objc_msgSend(v41, sel_setSpacing_, *(double *)&verticalTextLabelsInteritemSpacing);
  objc_msgSend(v41, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v15, sel_addSubview_, v41);
  v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_1DDF329D0;
  v43 = objc_msgSend(v41, sel_centerYAnchor);
  v44 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView, (Class *)0x1E0DC3890);
  v45 = objc_msgSend(v44, sel_centerYAnchor);

  v46 = objc_msgSend(v43, sel_constraintEqualToAnchor_, v45);
  *(_QWORD *)(v42 + 32) = v46;
  v47 = objc_msgSend(v41, sel_leadingAnchor);
  v48 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView, (Class *)0x1E0DC3890);
  v49 = objc_msgSend(v48, sel_trailingAnchor);

  if (one-time initialization token for leadingTextLabelsSpacing != -1)
    swift_once();
  v50 = objc_msgSend(v47, sel_constraintEqualToAnchor_constant_, v49, *(double *)&leadingTextLabelsSpacing);

  *(_QWORD *)(v42 + 40) = v50;
  v51 = objc_msgSend(v41, sel_topAnchor);
  v52 = objc_msgSend(v15, sel_topAnchor);
  v53 = objc_msgSend(v51, sel_constraintGreaterThanOrEqualToAnchor_constant_, v52, edgeInsets.top);

  *(_QWORD *)(v42 + 48) = v53;
  v54 = objc_msgSend(v41, sel_bottomAnchor);
  v55 = objc_msgSend(v15, sel_bottomAnchor);
  v56 = objc_msgSend(v54, sel_constraintLessThanOrEqualToAnchor_constant_, v55, edgeInsets.bottom);

  *(_QWORD *)(v42 + 56) = v56;
  specialized Array._endMutation()();
  v57 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v98, sel_activateConstraints_, v57);

  v58 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___titleLabel, (Class *)0x1E0DC3990);
  v59 = (void *)objc_opt_self();
  v60 = objc_msgSend(v59, sel_preferredFontForTextStyle_, *MEMORY[0x1E0DC4B10]);
  objc_msgSend(v58, sel_setFont_, v60);

  v61 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___titleLabel, (Class *)0x1E0DC3990);
  v62 = (void *)objc_opt_self();
  v63 = objc_msgSend(v62, sel_labelColor);
  objc_msgSend(v61, sel_setTextColor_, v63);

  v64 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___titleLabel, (Class *)0x1E0DC3990);
  objc_msgSend(v64, sel_setAdjustsFontForContentSizeCategory_, 1);

  v65 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___titleLabel, (Class *)0x1E0DC3990);
  objc_msgSend(v65, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  v66 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___titleLabel, (Class *)0x1E0DC3990);
  objc_msgSend(v41, sel_addArrangedSubview_, v66);

  v67 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___subtitleLabel, (Class *)0x1E0DC3990);
  v68 = objc_msgSend(v59, sel_preferredFontForTextStyle_, *MEMORY[0x1E0DC4AB8]);
  objc_msgSend(v67, sel_setFont_, v68);

  v69 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___subtitleLabel, (Class *)0x1E0DC3990);
  v70 = objc_msgSend(v62, sel_labelColor);
  objc_msgSend(v69, sel_setTextColor_, v70);

  v71 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___subtitleLabel, (Class *)0x1E0DC3990);
  objc_msgSend(v71, sel_setAdjustsFontForContentSizeCategory_, 1);

  v72 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___subtitleLabel, (Class *)0x1E0DC3990);
  objc_msgSend(v72, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  v73 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___subtitleLabel, (Class *)0x1E0DC3990);
  objc_msgSend(v41, sel_addArrangedSubview_, v73);

  v74 = objc_msgSend(v59, sel_preferredFontForTextStyle_, *MEMORY[0x1E0DC4A88]);
  v75 = (void *)UIFont.applyingWeight(_:)(*MEMORY[0x1E0DC1448]);

  if (v75)
  {
    v76 = objc_msgSend((id)objc_opt_self(), sel_configurationWithFont_, v75);
    v77 = (void *)MEMORY[0x1DF0E41AC](1937075312, 0xE400000000000000);
    v78 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v77, v76);

    if (v78)
    {
      v79 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_initWithImage_, v78);
      v80 = objc_msgSend(v62, sel_labelColor);
      objc_msgSend(v79, sel_setTintColor_, v80);

      LODWORD(v81) = 1148846080;
      objc_msgSend(v79, sel_setContentHuggingPriority_forAxis_, 0, v81);
      LODWORD(v82) = 1148846080;
      objc_msgSend(v79, sel_setContentHuggingPriority_forAxis_, 1, v82);
      objc_msgSend(v79, (SEL)&selRef_annotationController, 0);
      objc_msgSend(v15, sel_addSubview_, v79);
      v83 = swift_allocObject();
      *(_OWORD *)(v83 + 16) = xmmword_1DDF354A0;
      v84 = objc_msgSend(v79, sel_centerXAnchor);
      v85 = objc_msgSend(v15, sel_trailingAnchor);
      if (one-time initialization token for trailingAddLinkImageViewSpacingFromCenterX != -1)
        swift_once();
      v86 = objc_msgSend(v84, sel_constraintEqualToAnchor_constant_, v85, -*(double *)&trailingAddLinkImageViewSpacingFromCenterX);

      *(_QWORD *)(v83 + 32) = v86;
      v87 = objc_msgSend(v79, sel_centerYAnchor);
      v88 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView, (Class *)0x1E0DC3890);
      v89 = objc_msgSend(v88, sel_centerYAnchor);

      v90 = objc_msgSend(v87, sel_constraintEqualToAnchor_, v89);
      *(_QWORD *)(v83 + 40) = v90;
      v91 = objc_msgSend(v79, sel_leadingAnchor);
      v92 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___titleLabel, (Class *)0x1E0DC3990);
      v93 = objc_msgSend(v92, sel_trailingAnchor);

      if (one-time initialization token for trailingTextLabelsSpacing != -1)
        swift_once();
      v94 = objc_msgSend(v91, sel_constraintEqualToAnchor_constant_, v93, *(double *)&trailingTextLabelsSpacing);

      *(_QWORD *)(v83 + 48) = v94;
      specialized Array._endMutation()();
      v95 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v98, sel_activateConstraints_, v95);

    }
  }
  LinkMenuItemView.updateUI()();

  swift_unknownObjectRelease();
  return v15;
}

void LinkMenuItemView.updateUI()()
{
  uint64_t v0;
  id v1;
  uint64_t (**v2)(_QWORD, _QWORD);
  uint64_t ObjectType;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;

  v1 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___imageView, (Class *)0x1E0DC3890);
  v2 = *(uint64_t (***)(_QWORD, _QWORD))(v0 + OBJC_IVAR____TtC8PaperKit16LinkMenuItemView_linkItem + 8);
  ObjectType = swift_getObjectType();
  v4 = (void *)v2[7](ObjectType, v2);
  objc_msgSend(v1, sel_setImage_, v4);

  v5 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___titleLabel, (Class *)0x1E0DC3990);
  v6 = v2[5](ObjectType, v2);
  v7 = (void *)MEMORY[0x1DF0E41AC](v6);
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_setText_, v7);

  v8 = LinkMenuItemView.imageView.getter(&OBJC_IVAR____TtC8PaperKit16LinkMenuItemView____lazy_storage___subtitleLabel, (Class *)0x1E0DC3990);
  v9 = v2[6](ObjectType, v2);
  v10 = (id)MEMORY[0x1DF0E41AC](v9);
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_setText_, v10);

}

uint64_t type metadata accessor for LinkMenuItemView()
{
  return objc_opt_self();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm(a1, a2, a3);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCSb_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm(a1, a2, a3);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5Tm(a1, a2, a3, (uint64_t)&unk_1EA853A10, (uint64_t *)&demangling cache variable for type metadata for ()?);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCSay8PaperKit0D18DocumentFindResultVG_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5Tm(a1, a2, a3, (uint64_t)&unk_1EA853998, (uint64_t *)&demangling cache variable for type metadata for [PaperDocumentFindResult]);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = type metadata accessor for TaskPriority();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  __swift_instantiateConcreteTypeFromMangledName(a5);
  return swift_task_create();
}

uint64_t specialized PKStrokeStruct.uniqueInheritedPropertiesIfNeeded<A>(in:)(uint64_t a1)
{
  return specialized PKStrokeStruct.uniqueInheritedPropertiesIfNeeded<A>(in:)(a1, (unint64_t *)&lazy protocol witness table cache variable for type Capsule<Paper>.Ref and conformance Capsule<A>.Ref, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>.Ref);
}

{
  return specialized PKStrokeStruct.uniqueInheritedPropertiesIfNeeded<A>(in:)(a1, (unint64_t *)&lazy protocol witness table cache variable for type Capsule<PKDrawingStruct>.Ref and conformance Capsule<A>.Ref, (uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>.Ref);
}

uint64_t specialized PKStrokeStruct.uniqueInheritedPropertiesIfNeeded<A>(in:)(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  void (*v46)(char *, uint64_t);
  uint64_t (*v47)(char *, uint64_t, uint64_t);
  int v48;
  uint64_t result;
  uint64_t *v50;
  uint64_t *i;
  uint64_t *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(_QWORD *, _QWORD);
  uint64_t v57;
  unint64_t *v58;
  uint64_t *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[4];

  v58 = a2;
  v59 = a3;
  v66 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x1E0C80A78](v4, v5);
  v63 = (uint64_t)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v62 = (char *)&v57 - v9;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v57 - v12;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v57 - v16;
  v18 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v18, v19);
  v60 = (char *)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v57 - v23;
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v57 - v27;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29, v31);
  v61 = (char *)&v57 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (char *)&v57 - v35;
  MEMORY[0x1E0C80A78](v37, v38);
  v64 = (char *)&v57 - v39;
  MEMORY[0x1E0C80A78](v40, v41);
  v43 = (char *)&v57 - v42;
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  v65 = v3;
  CRRegister.wrappedValue.getter();
  Ref.subscript.getter();
  v45 = v43;
  v46 = *(void (**)(char *, uint64_t))(v30 + 8);
  v46(v45, v29);
  v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
  CRRegister.wrappedValue.getter();
  outlined destroy of PKStrokeProperties((uint64_t)v28, type metadata accessor for PKStrokeInheritedProperties);
  v67 = v30;
  v47 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  v48 = v47(v17, 1, v29);
  result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  if (v48 != 1)
  {
    CRRegister.wrappedValue.getter();
    v69[0] = v66;
    swift_retain_n();
    v57 = v44;
    CRRegister.wrappedValue.getter();
    v50 = v59;
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(v58, v59, MEMORY[0x1E0D12A88]);
    for (i = v50; ; i = v52)
    {
      v52 = i;
      __swift_instantiateConcreteTypeFromMangledName(i);
      Ref.subscript.getter();
      CRRegister.wrappedValue.getter();
      outlined destroy of PKStrokeProperties((uint64_t)v24, type metadata accessor for PKStrokeInheritedProperties);
      if (v47(v13, 1, v29) == 1)
        break;
      v46(v36, v29);
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v36, v13, v29);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    swift_release();
    Ref.subscript.getter();
    v46(v36, v29);
    v53 = v64;
    Ref.subscript.setter();
    v46(v53, v29);
    v54 = v61;
    CRRegister.wrappedValue.getter();
    v55 = (uint64_t)v62;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v67 + 56))(v62, 1, 1, v29);
    v56 = (void (*)(_QWORD *, _QWORD))Ref.subscript.modify();
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v55, v63, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    CRRegister.wrappedValue.setter();
    outlined destroy of StocksKitCurrencyCache.Provider?(v55, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
    v56(v69, 0);
    return ((uint64_t (*)(char *, uint64_t))v46)(v54, v29);
  }
  return result;
}

void *specialized Sequence.first(where:)(uint64_t (*a1)(id *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  char v11;
  id v13;

  if (a3 >> 62)
    goto LABEL_16;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    v7 = 4;
    while (1)
    {
      v8 = (a3 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1DF0E4D64](v7 - 4, a3) : *(id *)(a3 + 8 * v7);
      v9 = v8;
      v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1))
        break;
      v13 = v8;
      v11 = a1(&v13);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return v9;
      }
      if ((v11 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return v9;
      }

      ++v7;
      if (v10 == v6)
        goto LABEL_11;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t i;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t (*v36)(char *);
  uint64_t v37;

  v36 = a1;
  v33 = a3;
  v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView));
  v32 = *(_QWORD *)(v37 - 8);
  v6 = MEMORY[0x1E0C80A78](v37, v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v31 - v10;
  v12 = *(_QWORD *)(a2 + 64);
  v34 = a2 + 64;
  v13 = 1 << *(_BYTE *)(a2 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v35 = (unint64_t)(v13 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v17 = 0;
  if (!v15)
    goto LABEL_5;
LABEL_4:
  v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (i = v18 | (v17 << 6); ; i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    v23 = *(_QWORD *)(a2 + 48);
    v24 = type metadata accessor for CRKeyPath();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v11, v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * i, v24);
    v25 = *(void **)(*(_QWORD *)(a2 + 56) + 8 * i);
    *(_QWORD *)&v11[*(int *)(v37 + 48)] = v25;
    outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v11, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView));
    v26 = v25;
    v27 = v36(v8);
    if (v3)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView));
      return swift_release();
    }
    if ((v27 & 1) != 0)
    {
      swift_release();
      v28 = v33;
      outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v8, v33, (uint64_t *)&demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView));
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v32 + 56))(v28, 0, 1, v37);
    }
    result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView));
    if (v15)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v17++, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v35)
      goto LABEL_28;
    v21 = *(_QWORD *)(v34 + 8 * v17);
    if (!v21)
      break;
LABEL_17:
    v15 = (v21 - 1) & v21;
  }
  v22 = v17 + 1;
  if (v17 + 1 >= v35)
    goto LABEL_28;
  v21 = *(_QWORD *)(v34 + 8 * v22);
  if (v21)
    goto LABEL_16;
  v22 = v17 + 2;
  if (v17 + 2 >= v35)
    goto LABEL_28;
  v21 = *(_QWORD *)(v34 + 8 * v22);
  if (v21)
    goto LABEL_16;
  v22 = v17 + 3;
  if (v17 + 3 >= v35)
    goto LABEL_28;
  v21 = *(_QWORD *)(v34 + 8 * v22);
  if (v21)
    goto LABEL_16;
  v22 = v17 + 4;
  if (v17 + 4 >= v35)
  {
LABEL_28:
    v30 = v32;
    v29 = v33;
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v29, 1, 1, v37);
  }
  v21 = *(_QWORD *)(v34 + 8 * v22);
  if (v21)
  {
LABEL_16:
    v17 = v22;
    goto LABEL_17;
  }
  while (1)
  {
    v17 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v17 >= v35)
      goto LABEL_28;
    v21 = *(_QWORD *)(v34 + 8 * v17);
    ++v22;
    if (v21)
      goto LABEL_17;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  void (*v24)(char *, char *, uint64_t);
  char v25;
  uint64_t v26;
  char *v27;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t (*v32)(char *);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = a2;
  v32 = a1;
  v30 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v35 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator);
  v31 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, v34, v12, v19);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, MEMORY[0x1E0D11DC0]);
  dispatch thunk of Sequence.makeIterator()();
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator and conformance CROrderedSet<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>.Iterator, MEMORY[0x1E0D11D70]);
  v34 = v17;
  v22 = v35;
  dispatch thunk of IteratorProtocol.next()();
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  if (v23(v11, 1, v4) == 1)
  {
LABEL_6:
    (*(void (**)(char *, uint64_t))(v31 + 8))(v21, v34);
    v26 = 1;
    v27 = v30;
  }
  else
  {
    v24 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    while (1)
    {
      v24(v7, v11, v4);
      v25 = v32(v7);
      if (v3)
      {
        (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v4);
        return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v21, v34);
      }
      if ((v25 & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v4);
      dispatch thunk of IteratorProtocol.next()();
      if (v23(v11, 1, v4) == 1)
        goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v21, v34);
    v27 = v30;
    v24(v30, v7, v4);
    v26 = 0;
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56))(v27, v26, 1, v4);
}

void specialized Sequence.first(where:)(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  char v19;
  void *v20;
  id v21;
  __int128 v22;
  int64_t v23;

  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v23 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  v10 = 0;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v11 | (v10 << 6); ; i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    v16 = *(_QWORD *)(a3 + 56);
    v21 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * i);
    v22 = *(_OWORD *)(v16 + 16 * i);
    v20 = (void *)v22;
    v17 = v21;
    v18 = v20;
    v19 = a1(&v21);
    if (v3)
    {
      swift_release();

      return;
    }
    if ((v19 & 1) != 0)
    {
LABEL_27:
      swift_release();
      return;
    }

    if (v9)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v10 >= v23)
      goto LABEL_27;
    v14 = *(_QWORD *)(v6 + 8 * v10);
    if (!v14)
      break;
LABEL_17:
    v9 = (v14 - 1) & v14;
  }
  v15 = v10 + 1;
  if (v10 + 1 >= v23)
    goto LABEL_27;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
    goto LABEL_16;
  v15 = v10 + 2;
  if (v10 + 2 >= v23)
    goto LABEL_27;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
    goto LABEL_16;
  v15 = v10 + 3;
  if (v10 + 3 >= v23)
    goto LABEL_27;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
    goto LABEL_16;
  v15 = v10 + 4;
  if (v10 + 4 >= v23)
    goto LABEL_27;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
LABEL_16:
    v10 = v15;
    goto LABEL_17;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v23)
      goto LABEL_27;
    v14 = *(_QWORD *)(v6 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_17;
  }
LABEL_30:
  __break(1u);
}

{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t i;
  unint64_t v15;
  int64_t v16;
  id v17;
  char v18;
  id v19;

  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  v11 = 0;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v12 | (v11 << 6); ; i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    v19 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * i);
    v17 = v19;
    v18 = a1(&v19);
    if (v3)
    {
      swift_release();

      return;
    }
    if ((v18 & 1) != 0)
    {
LABEL_27:
      swift_release();
      return;
    }

    if (v9)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v11 >= v10)
      goto LABEL_27;
    v15 = *(_QWORD *)(v6 + 8 * v11);
    if (!v15)
      break;
LABEL_17:
    v9 = (v15 - 1) & v15;
  }
  v16 = v11 + 1;
  if (v11 + 1 >= v10)
    goto LABEL_27;
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v11 + 2;
  if (v11 + 2 >= v10)
    goto LABEL_27;
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v11 + 3;
  if (v11 + 3 >= v10)
    goto LABEL_27;
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
    goto LABEL_16;
  v16 = v11 + 4;
  if (v11 + 4 >= v10)
    goto LABEL_27;
  v15 = *(_QWORD *)(v6 + 8 * v16);
  if (v15)
  {
LABEL_16:
    v11 = v16;
    goto LABEL_17;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v10)
      goto LABEL_27;
    v15 = *(_QWORD *)(v6 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_17;
  }
LABEL_30:
  __break(1u);
}

uint64_t Canvas.editingMode.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_editingMode);
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

void Canvas.editingMode.setter(unsigned __int8 *a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  unsigned __int8 *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v2 = *a1;
  v3 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_editingMode);
  swift_beginAccess();
  v4 = *v3;
  *v3 = v2;
  v5 = v4;
  Canvas.editingMode.didset(&v5);
}

void (*Canvas.editingMode.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  _BYTE *v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = (_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_editingMode);
  swift_beginAccess();
  *((_BYTE *)v3 + 32) = *v4;
  return Canvas.editingMode.modify;
}

void Canvas.editingMode.modify(uint64_t a1, char a2)
{
  void *v2;
  unsigned __int8 *v3;
  char v4;
  char v5;

  v2 = *(void **)a1;
  if ((a2 & 1) != 0)
  {
    v4 = *(_BYTE *)(*(_QWORD *)a1 + 32);
    v3 = (unsigned __int8 *)&v4;
  }
  else
  {
    v5 = *(_BYTE *)(*(_QWORD *)a1 + 32);
    v3 = (unsigned __int8 *)&v5;
  }
  Canvas.editingMode.setter(v3);
  free(v2);
}

uint64_t Canvas.editingContainerElementId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  void (*v15)(void);
  _QWORD *v16;
  uint64_t v18;

  v3 = *MEMORY[0x1E0DEEDD8];
  v4 = type metadata accessor for Capsule();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v18 - v7;
  v9 = type metadata accessor for CRKeyPath();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD **)(v1 + direct field offset for Canvas._editingView);
  if (v14)
  {
    v15 = *(void (**)(void))((*v14 & v3) + 0xE0);
    v16 = v14;
    v15();

    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v13, v9);
  }
  else
  {
    CanvasElementView.canvasElement.getter((uint64_t)v8);
    Capsule<>.rootID.getter();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

uint64_t Canvas.editingContainerElementId.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  void *v20;
  uint64_t ObjectType;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  _BYTE v29[16];
  uint64_t v30;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView)?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = &v29[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = Canvas.editingView.getter();
  v10 = v9;
  v11 = *(id *)(v1 + direct field offset for Canvas.paperView);
  v12 = ContainerCanvasElementView.unorderedSubelementViews.getter();

  v30 = a1;
  specialized Sequence.first(where:)((uint64_t (*)(char *))partial apply for closure #1 in Canvas.editingContainerElementId.setter, v12, (uint64_t)v7);
  swift_bridgeObjectRelease();
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView));
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v7, 1, v13) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView)?);
LABEL_11:
    v18 = 0;
    v17 = 0;
    goto LABEL_12;
  }
  v14 = *(void **)&v7[*(int *)(v13 + 48)];
  v15 = type metadata accessor for CRKeyPath();
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v7, v15);
  swift_getObjectType();
  v16 = swift_conformsToProtocol2();
  if (v16)
    v17 = v16;
  else
    v17 = 0;
  if (v16)
    v18 = v14;
  else
    v18 = 0;
  if (!v18)
  {

    goto LABEL_11;
  }
LABEL_12:
  v19 = (_QWORD *)(v2 + direct field offset for Canvas._editingView);
  v20 = *(void **)(v2 + direct field offset for Canvas._editingView);
  *v19 = v18;
  v19[1] = v17;

  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(ObjectType, v10);
  v22 = Canvas.editingView.getter();
  v24 = v23;
  v25 = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v24 + 24))(v25, v24);

  v26 = Canvas.editingView.getter();
  Canvas.updateScribbleIteractions(for:)(v26);

  v27 = type metadata accessor for CRKeyPath();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(a1, v27);
}

void (*Canvas.editingContainerElementId.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = type metadata accessor for CRKeyPath();
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v7 = malloc(v6);
  v3[4] = v7;
  Canvas.editingContainerElementId.getter((uint64_t)v7);
  return Canvas.editingContainerElementId.modify;
}

void Canvas.editingContainerElementId.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    v5 = v2[1];
    v6 = v2[2];
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v4, v5);
    Canvas.editingContainerElementId.setter((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    Canvas.editingContainerElementId.setter(*(_QWORD *)(*(_QWORD *)a1 + 32));
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t Canvas.canvasStateLiveStreamMessenger.getter()
{
  uint64_t v0;

  return MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasStateLiveStreamMessenger);
}

uint64_t Canvas.canvasStateLiveStreamMessenger.setter(uint64_t a1, uint64_t a2)
{
  specialized Canvas.canvasStateLiveStreamMessenger.setter(a1, a2);
  return swift_unknownObjectRelease();
}

uint64_t Canvas.screenScaleOverride.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_screenScaleOverride;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

void Canvas.screenScaleOverride.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_screenScaleOverride;
  swift_beginAccess();
  *(_QWORD *)v5 = a1;
  *(_BYTE *)(v5 + 8) = a2 & 1;
  Canvas.screenScaleOverride.didset();
}

void (*Canvas.screenScaleOverride.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = AnyCanvas.screenScaleOverride.modify();
  return Canvas.screenScaleOverride.modify;
}

void Canvas.screenScaleOverride.modify(_QWORD *a1, char a2)
{
  void *v3;

  v3 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  if ((a2 & 1) == 0)
    Canvas.screenScaleOverride.didset();
  free(v3);
}

id Canvas.editingView.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;

  v1 = *(void **)(v0 + direct field offset for Canvas._editingView);
  if (v1)
  {
    v2 = *(id *)(v0 + direct field offset for Canvas._editingView);
  }
  else
  {
    v2 = *(id *)(v0 + direct field offset for Canvas.paperView);
    v1 = 0;
  }
  v3 = v1;
  return v2;
}

Swift::Void __swiftcall Canvas.setCanvasStateNeedsLayout()()
{
  uint64_t v0;
  uint64_t v1;
  void **v2;
  void *v3;

  AnyCanvas.overlays.getter();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = (void **)(v0 + 32);
    do
    {
      v3 = *v2;
      v2 += 2;
      objc_msgSend(v3, sel_setNeedsLayout);
      --v1;
    }
    while (v1);
  }
  swift_bridgeObjectRelease();
}

id Canvas.overlayBounds.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void **v3;
  id result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_overlayViewControllerForPresentingUI);
  result = (id)swift_beginAccess();
  v5 = *v3;
  if (v5)
  {
    result = objc_msgSend(v5, sel_visibleBoundsForOverlay);
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
  }
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = v5 == 0;
  return result;
}

double Canvas.visibleBounds.getter()
{
  _QWORD *v0;
  char *v1;
  char v2;
  __int128 v3;
  uint64_t v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  id v23;
  double v24;
  _OWORD v26[2];
  char v27;
  double v28;
  char v29;

  v1 = (char *)v0 + direct field offset for Canvas.visibleBoundsOverride;
  swift_beginAccess();
  v2 = v1[32];
  v3 = *((_OWORD *)v1 + 1);
  v26[0] = *(_OWORD *)v1;
  v26[1] = v3;
  v27 = v2;
  v4 = outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v26, (uint64_t)&v28, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
  if ((v29 & 1) == 0)
    return v28;
  v5 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x308))(v4);
  if (v5)
  {
    v6 = v5;
    objc_msgSend(v5, sel_zoomScale);
    v8 = v7;
    objc_msgSend(v6, sel_adjustedContentInset);
    v9 = 1.0 / v8;
    v11 = 1.0 / v8 * v10;
    v13 = v9 * v12;
    objc_msgSend(v6, sel_bounds);
    v15 = v14;
    v17 = v16;
    v19 = v18;
    v21 = v20;

    return UIEdgeInsetsInsetRect(v15, v17, v19, v21, v11, v13);
  }
  else
  {
    v23 = Canvas.editingView.getter();
    objc_msgSend(v23, sel_bounds);
    v22 = v24;

  }
  return v22;
}

Swift::Void __swiftcall Canvas.canvasStateDidChange()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CanvasState>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v0 + direct field offset for Canvas.multipeerCanvasStateConnection))
  {
    v6 = v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasState;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v6, v1);
    swift_retain();
    CRMulticastSyncManager.sync(_:sendDelta:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
}

Swift::Void __swiftcall Canvas.canvasSelectionDidChange()()
{
  _QWORD *v0;
  void *v1;
  char *v2;
  uint64_t v3;
  uint64_t ObjectType;
  void *v5;
  void *v6;

  v1 = v0;
  v2 = (char *)v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate;
  swift_beginAccess();
  if (MEMORY[0x1DF0E666C](v2))
  {
    v3 = *((_QWORD *)v2 + 1);
    ObjectType = swift_getObjectType();
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v3 + 8))(v0, ObjectType, v3);
    swift_unknownObjectRelease();
  }
  Canvas.updateToolPickerContextualEditingView()();
  v5 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x320))();
  if (v5)
  {
    v6 = v5;
    if (objc_msgSend(v5, sel_respondsToSelector_, sel__externalElementsSelectionDidChange))
      objc_msgSend(v6, sel__externalElementsSelectionDidChange);

  }
  objc_msgSend(v1, sel_setNeedsLayout);
}

double Canvas.strokeBounds<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  double v5;
  uint64_t v7;

  v0 = type metadata accessor for Capsule();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v7 - v3;
  type metadata accessor for AnyCanvas();
  CanvasElementView.canvasElement.getter((uint64_t)v4);
  v5 = static AnyCanvas.strokeBounds<A, B>(_:in:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return v5;
}

Swift::Void __swiftcall Canvas.transformStrokes(_:with:concat:)(Swift::OpaquePointer _, CGAffineTransform *with, Swift::Bool concat)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  id v6;
  char v7[24];

  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = *(void **)((char *)v3 + direct field offset for Canvas.paperView);
  swift_beginAccess();
  type metadata accessor for Capsule();
  v6 = v5;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();

  v7[0] = 3;
  (*(void (**)(char *))((*v4 & *v3) + 0x518))(v7);
}

uint64_t Canvas.align(members:to:)()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  id v3;
  char v5[24];

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = *(void **)((char *)v0 + direct field offset for Canvas.paperView);
  swift_beginAccess();
  type metadata accessor for Capsule();
  v3 = v2;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();

  v5[0] = 3;
  return (*(uint64_t (**)(char *))((*v1 & *v0) + 0x518))(v5);
}

uint64_t Canvas.canvasDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v14;

  v0 = type metadata accessor for Capsule();
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v14 - v2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  CanvasElementView.canvasElement.getter((uint64_t)v3);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v9 = swift_dynamicCast();
  v10 = *(_QWORD *)(v8 - 8);
  v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (v9)
  {
    v11(v7, 0, 1, v8);
    swift_getKeyPath();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
    Capsule<>.subscript.getter();
    swift_release();
    v12 = v14;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v8);
  }
  else
  {
    v11(v7, 1, 1, v8);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for Capsule<Image>?);
    return 0;
  }
  return v12;
}

uint64_t Canvas.canvasDescription.setter()
{
  Canvas.undoable(newChange:persistSelection:action:)(1, 0, (uint64_t (*)(double))partial apply for closure #1 in Canvas.canvasDescription.setter);
  return swift_bridgeObjectRelease();
}

uint64_t Canvas.selectedShapes.getter(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[6];

  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    MEMORY[0x1E0C80A78](result, a2);
    v6[2] = v2;
    swift_bridgeObjectRetain();
    v5 = specialized Sequence.compactMap<A>(_:)((void (*)(char *))partial apply for closure #1 in Canvas.selectedShapes.getter, (uint64_t)v6, v4);
    swift_bridgeObjectRelease();
    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Canvas.formattingState(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  _QWORD *v5;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  _QWORD *v10;
  _OWORD v12[2];
  char v13;

  v7 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *v5);
  CanvasFormattingProxy.init(canvas:members:)((uint64_t)v5, a1, a2, a3, a4 & 1, (uint64_t)v12);
  a5[3] = type metadata accessor for CanvasFormattingProxy(0, v7[247], v7[248], v7[249]);
  a5[4] = (uint64_t)&protocol witness table for CanvasFormattingProxy<A>;
  v8 = swift_allocObject();
  *a5 = v8;
  v9 = v12[1];
  *(_OWORD *)(v8 + 16) = v12[0];
  *(_OWORD *)(v8 + 32) = v9;
  *(_BYTE *)(v8 + 48) = v13;
  v10 = v5;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void Canvas.removeImageBackground(for:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;

  v3 = *MEMORY[0x1E0DEEDD8] & *v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(v3 + 1976);
  v9 = *(_QWORD *)(v3 + 1984);
  v70 = v3;
  v71 = v9;
  v10 = type metadata accessor for Capsule();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v61 - v13;
  v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v74 = *(_QWORD *)(v72 - 8);
  v15 = *(_QWORD *)(v74 + 64);
  MEMORY[0x1E0C80A78](v72, v16);
  v68 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v67 = (char *)&v61 - v19;
  MEMORY[0x1E0C80A78](v20, v21);
  v73 = (char *)&v61 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>?);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v61 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
  v32 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v33);
  if (*(_QWORD *)(a1 + 16) == 1)
  {
    v65 = v7;
    v66 = (char *)&v61 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
    v64 = v8;
    v36 = v34;
    specialized Collection.first.getter(a1, (uint64_t)v26);
    v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
    v38 = *(_QWORD *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v26, 1, v37) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
      (*(void (**)(char *, uint64_t, uint64_t, char *))(v32 + 56))(v30, 1, 1, v36);
LABEL_5:
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v30, &demangling cache variable for type metadata for WeakRef<Image>?);
      return;
    }
    WeakTagged_9.tagged2.getter();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v26, v37);
    if ((*(unsigned int (**)(char *, uint64_t, char *))(v32 + 48))(v30, 1, v36) == 1)
      goto LABEL_5;
    (*(void (**)(char *, char *, char *))(v32 + 32))(v66, v30, v36);
    CanvasElementView.canvasElement.getter((uint64_t)v14);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<Image> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<Image>, MEMORY[0x1E0D12B70]);
    v39 = v73;
    Capsule.encapsulate<A>(_:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    v40 = (uint64_t)v65;
    static TaskPriority.background.getter();
    v41 = type metadata accessor for TaskPriority();
    v62 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56);
    v63 = v41;
    v62(v40, 0, 1, v41);
    v42 = v74;
    v43 = v67;
    v44 = v39;
    v45 = v72;
    (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v67, v44, v72);
    v46 = CRContext.assetManager.getter();
    v47 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v48 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
    v69 = v32;
    v49 = v68;
    v48(v68, v43, v45);
    v50 = *(unsigned __int8 *)(v42 + 80);
    v67 = v36;
    v51 = (v50 + 56) & ~v50;
    v52 = (v15 + v51 + 7) & 0xFFFFFFFFFFFFFFF8;
    v53 = (_QWORD *)swift_allocObject();
    v53[2] = 0;
    v53[3] = 0;
    v54 = v71;
    v53[4] = v64;
    v53[5] = v54;
    v53[6] = *(_QWORD *)(v70 + 1992);
    v55 = (char *)v53 + v51;
    v56 = v45;
    v48(v55, v49, v45);
    *(_QWORD *)((char *)v53 + v52) = v47;
    *(_QWORD *)((char *)v53 + ((v52 + 15) & 0xFFFFFFFFFFFFFFF8)) = v46;
    v57 = _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZyt_Tgm5(v40, (uint64_t)&async function pointer to partial apply for closure #1 in Canvas.removeImageBackground(for:), (uint64_t)v53);
    outlined destroy of StocksKitCurrencyCache.Provider?(v40, &demangling cache variable for type metadata for TaskPriority?);
    v62(v40, 1, 1, v63);
    type metadata accessor for MainActor();
    swift_retain();
    v58 = static MainActor.shared.getter();
    v59 = (_QWORD *)swift_allocObject();
    v60 = MEMORY[0x1E0DF06E8];
    v59[2] = v58;
    v59[3] = v60;
    v59[4] = v57;
    _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v40, (uint64_t)&async function pointer to partial apply for closure #2 in Canvas.removeImageBackground(for:), (uint64_t)v59);
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v74 + 8))(v73, v56);
    (*(void (**)(char *, char *))(v69 + 8))(v66, v67);
  }
}

void Canvas.contextualDebug(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t i;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t v29;
  unint64_t v30;
  char v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;

  v2 = type metadata accessor for CRKeyPath();
  v36 = *(_QWORD *)(v2 - 8);
  v37 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v38 = (char *)&v33 - v13;
  v14 = *(_QWORD *)(a1 + 56);
  v34 = a1 + 56;
  v15 = 1 << *(_BYTE *)(a1 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v35 = (unint64_t)(v15 + 63) >> 6;
  v39 = a1;
  swift_bridgeObjectRetain();
  v18 = 0;
  if (v17)
    goto LABEL_6;
LABEL_7:
  v21 = v18 + 1;
  if (!__OFADD__(v18, 1))
  {
    if (v21 < v35)
    {
      v22 = *(_QWORD *)(v34 + 8 * v21);
      ++v18;
      if (v22)
        goto LABEL_20;
      v18 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_25;
      v22 = *(_QWORD *)(v34 + 8 * v18);
      if (v22)
        goto LABEL_20;
      v18 = v21 + 2;
      if (v21 + 2 >= v35)
        goto LABEL_25;
      v22 = *(_QWORD *)(v34 + 8 * v18);
      if (v22)
      {
LABEL_20:
        v17 = (v22 - 1) & v22;
        for (i = __clz(__rbit64(v22)) + (v18 << 6); ; i = v19 | (v18 << 6))
        {
          v24 = v38;
          (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v38, *(_QWORD *)(v39 + 48) + *(_QWORD *)(v7 + 72) * i, v6);
          (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v24, v6);
          v25 = Canvas.editingView.getter();
          v27 = v26;
          ObjectType = swift_getObjectType();
          MEMORY[0x1DF0E30E4](v6);
          v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 32))(ObjectType, v27);

          if (*(_QWORD *)(v29 + 16)
            && (v30 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5), (v31 & 1) != 0))
          {
            v32 = *(id *)(*(_QWORD *)(v29 + 56) + 8 * v30);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v36 + 8))(v5, v37);
            (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);

            if (!v17)
              goto LABEL_7;
          }
          else
          {
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v36 + 8))(v5, v37);
            (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
            if (!v17)
              goto LABEL_7;
          }
LABEL_6:
          v19 = __clz(__rbit64(v17));
          v17 &= v17 - 1;
        }
      }
      v23 = v21 + 3;
      if (v23 < v35)
      {
        v22 = *(_QWORD *)(v34 + 8 * v23);
        if (v22)
        {
          v18 = v23;
          goto LABEL_20;
        }
        while (1)
        {
          v18 = v23 + 1;
          if (__OFADD__(v23, 1))
            goto LABEL_27;
          if (v18 >= v35)
            break;
          v22 = *(_QWORD *)(v34 + 8 * v18);
          ++v23;
          if (v22)
            goto LABEL_20;
        }
      }
    }
LABEL_25:
    swift_release();
    return;
  }
  __break(1u);
LABEL_27:
  __break(1u);
}

uint64_t Canvas.addFlags(_:strokeFlags:to:)()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  id v3;
  char v5[24];

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = *(void **)((char *)v0 + direct field offset for Canvas.paperView);
  swift_beginAccess();
  type metadata accessor for Capsule();
  v3 = v2;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();

  v5[0] = 3;
  return (*(uint64_t (**)(char *))((*v1 & *v0) + 0x518))(v5);
}

void Canvas.applyUndo(_:selection:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  Canvas.undoable(newChange:persistSelection:action:)(1, a2 != 0, (uint64_t (*)(double))partial apply for closure #1 in Canvas.applyUndo(_:selection:));
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    AnyCanvas.selection.setter(a2, a3, a4, a5 & 1);
  }
}

void Canvas.registerUndo(_:selection:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  id v16;
  _QWORD *v17;
  void (*v18)(_BYTE *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _BYTE v30[12];
  int v31;
  uint64_t *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;

  v34 = a2;
  v35 = a3;
  v9 = *v5;
  v10 = *MEMORY[0x1E0DEEDD8];
  v11 = type metadata accessor for CapsuleUndoAction();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v15 = &v30[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = objc_msgSend(v5, sel_undoManager, MEMORY[0x1E0C80A78](v11, v14));
  if (v16)
  {
    v17 = (_QWORD *)(v10 & v9);
    v18 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16);
    v33 = v16;
    v18(&v30[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v11);
    v19 = *(unsigned __int8 *)(v12 + 80);
    v31 = a5;
    v20 = (v19 + 40) & ~v19;
    v32 = v5;
    v21 = (v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
    v22 = (char *)swift_allocObject();
    v23 = v17[247];
    *((_QWORD *)v22 + 2) = v23;
    v24 = v17[248];
    *((_QWORD *)v22 + 3) = v24;
    v25 = v17[249];
    *((_QWORD *)v22 + 4) = v25;
    (*(void (**)(char *, _BYTE *, uint64_t))(v12 + 32))(&v22[v20], v15, v11);
    v26 = &v22[v21];
    v27 = v34;
    v28 = v35;
    *(_QWORD *)v26 = v34;
    *((_QWORD *)v26 + 1) = v28;
    *((_QWORD *)v26 + 2) = a4;
    v26[24] = v31;
    outlined copy of CanvasMembers?(v27);
    type metadata accessor for Canvas(0, v23, v24, v25);
    v29 = v33;
    NSUndoManager.registerUndo<A>(withTarget:handler:)();
    swift_release();

  }
}

void Canvas.registerUndo(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;

  v5 = *v2;
  v6 = *MEMORY[0x1E0DEEDD8];
  v7 = objc_msgSend(v2, sel_undoManager);
  if (v7)
  {
    v9 = v7;
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = a1;
    *(_QWORD *)(v8 + 24) = a2;
    type metadata accessor for Canvas(0, *(_QWORD *)((v6 & v5) + 0x7B8), *(_QWORD *)((v6 & v5) + 0x7C0), *(_QWORD *)((v6 & v5) + 0x7C8));
    swift_retain();
    NSUndoManager.registerUndo<A>(withTarget:handler:)();
    swift_release();

  }
}

uint64_t Canvas.undoable(newChange:persistSelection:action:)(char a1, int a2, uint64_t (*a3)(double))
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  _BYTE *v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_BYTE *, uint64_t);
  _BYTE *v31;
  uint64_t v32;
  _BYTE v33[4];
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;

  LODWORD(v39) = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = &v33[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for CapsuleUndoAction();
  v40 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v38 = &v33[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for Capsule();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = &v33[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = &v33[-v20];
  if ((*((_BYTE *)v3 + direct field offset for Canvas.isInUndoableGroup) & 1) != 0)
  {
    *((_BYTE *)v3 + direct field offset for Canvas.isUndoableGroupNewChange) = (*((_BYTE *)v3
                                                                                + direct field offset for Canvas.isUndoableGroupNewChange) | a1) & 1;
    return a3(v21);
  }
  v37 = v10;
  *((_BYTE *)v3 + direct field offset for Canvas.isInUndoableGroup) = 1;
  *((_BYTE *)v3 + direct field offset for Canvas.isUndoableGroupNewChange) = a1 & 1;
  result = CanvasElementView.canvasElement.getter((uint64_t)&v33[-v20]);
  if ((v39 & 1) != 0)
  {
    v24 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    if (!v24)
    {
      __break(1u);
      return result;
    }
    v25 = v24 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
    v26 = *(_QWORD *)v25;
    v27 = *(_QWORD *)(v25 + 8);
    v35 = *(_QWORD *)(v25 + 16);
    v34 = *(unsigned __int8 *)(v25 + 24);
    v39 = v26;
    swift_bridgeObjectRetain();
    v36 = v27;
    result = swift_bridgeObjectRetain();
  }
  else
  {
    v39 = 0;
    v35 = 0;
    v36 = 0;
    v34 = 0;
  }
  v28 = v37;
  v29 = v40;
  ((void (*)(uint64_t))a3)(result);
  if (*((_BYTE *)v3 + direct field offset for Canvas.isUndoableGroupNewChange) == 1)
  {
    v41 = 3;
    (*(void (**)(char *))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x518))(&v41);
  }
  CanvasElementView.canvasElement.getter((uint64_t)v17);
  Capsule.actionUndoingDifference(from:)();
  v30 = *(void (**)(_BYTE *, uint64_t))(v14 + 8);
  v30(v17, v13);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48))(v9, 1, v28) == 1)
  {
    v30(v22, v13);
    outlined consume of CanvasMembers?(v39);
    result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  }
  else
  {
    v31 = v38;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v29 + 32))(v38, v9, v28);
    v32 = v39;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x458))(v31, v39, v36, v35, v34);
    outlined consume of CanvasMembers?(v32);
    (*(void (**)(_BYTE *, uint64_t))(v40 + 8))(v31, v37);
    result = ((uint64_t (*)(_BYTE *, uint64_t))v30)(v22, v13);
  }
  *((_BYTE *)v3 + direct field offset for Canvas.isInUndoableGroup) = 0;
  return result;
}

uint64_t Canvas.addCanvasElement<A>(_:setSelected:dragItem:harmonize:)(uint64_t a1, int a2, void *a3, int a4, uint64_t a5, char *a6, char *a7)
{
  uint64_t *v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  id v35;
  id v36;
  void *v37;
  unsigned int v38;
  char *v39;
  uint64_t v40;
  id v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t ObjectType;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t v70;
  char *v71;
  id v72;
  SEL *p_base_prots;
  id v74;
  uint64_t v75;
  void *v76;
  __objc2_prot_list **v77;
  unsigned __int8 v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id (*v84)();
  uint64_t v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  id v94;
  _QWORD *v95;
  int64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  char v102;
  char *v104;
  uint64_t v105;
  id v106;
  Swift::String v107;
  void *v108;
  void (*v109)(char *, uint64_t);
  char *v110;
  char **v111;
  id v112;
  id v113;
  uint64_t v114;
  NSObject *v115;
  os_log_type_t v116;
  uint8_t *v117;
  id v118;
  id v119;
  void *v120;
  unsigned __int8 v121;
  _QWORD *v122;
  long double v123;
  double v124;
  uint64_t *v125;
  uint64_t v126;
  id v127;
  unint64_t v128;
  char v129;
  void (*v130)(uint64_t *);
  id v131;
  double v132;
  CGFloat v133;
  double v134;
  CGFloat v135;
  double v136;
  CGFloat v137;
  double v138;
  CGFloat v139;
  CGFloat v140;
  CGFloat v141;
  CGFloat v142;
  CGFloat v143;
  double x;
  double y;
  double width;
  double height;
  id v148;
  uint64_t v149;
  uint64_t v150;
  id v151;
  uint64_t v152;
  uint64_t *v153;
  id v154;
  id v155;
  char isUniquelyReferenced_nonNull_native;
  char *v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  id v162;
  char *v163;
  id v164;
  int v165;
  uint64_t v166;
  int v167;
  char *v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t aBlock;
  unint64_t v177;
  uint64_t (*v178)(uint64_t);
  void *v179;
  uint64_t (*v180)();
  __objc2_prot_list **v181;
  _OWORD v182[2];
  uint64_t v183;
  CGRect v184;
  CGRect v185;
  CGRect v186;
  CGRect v187;

  v170 = a7;
  v167 = a4;
  v165 = a2;
  v12 = *v7;
  v13 = *MEMORY[0x1E0DEEDD8];
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v14, v15);
  v159 = (char *)&v157 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = type metadata accessor for UUID();
  v160 = *(_QWORD *)(v161 - 8);
  MEMORY[0x1E0C80A78](v161, v17);
  v157 = (char *)&v157 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for CRKeyPath();
  v166 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v163 = (char *)&v157 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v158 = (char *)&v157 - v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v168 = (char *)&v157 - v27;
  v169 = a5;
  v28 = type metadata accessor for Capsule();
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v30);
  v32 = (char *)&v157 - v31;
  v164 = (id)objc_opt_self();
  objc_msgSend(v164, sel_begin);
  v173 = v29;
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v174 = v28;
  v33(v32, a1, v28);
  if (a3)
  {
    v171 = v12;
    v34 = v13;
    v35 = a3;
    v36 = objc_msgSend(v35, sel_itemProvider);
    v37 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000011, 0x80000001DDF50250);
    v38 = objc_msgSend(v36, sel_hasItemConformingToTypeIdentifier_, v37);

    if (v38
      && (v39 = &v172[direct field offset for Canvas.stickerDropPreviewInfoMap],
          swift_beginAccess(),
          v40 = *(_QWORD *)v39,
          *(_QWORD *)(*(_QWORD *)v39 + 16)))
    {
      v41 = v35;
      swift_bridgeObjectRetain();
      v42 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v41);
      if ((v43 & 1) != 0)
      {
        v44 = v34 & v171;
        v45 = *(_QWORD *)(v40 + 56) + 40 * v42;
        v46 = *(_QWORD *)(v45 + 32);
        v47 = *(_OWORD *)(v45 + 16);
        v182[0] = *(_OWORD *)v45;
        v182[1] = v47;
        v183 = v46;
        swift_bridgeObjectRelease();

        MEMORY[0x1E0C80A78](v48, v49);
        *((_OWORD *)&v157 - 3) = *(_OWORD *)(v44 + 1976);
        *(&v157 - 4) = *(char **)(v44 + 1992);
        *(&v157 - 3) = a6;
        *(&v157 - 2) = v170;
        *(&v157 - 1) = (char *)v182;
        Capsule.callAsFunction<A>(_:)();
      }
      else
      {
        swift_bridgeObjectRelease();

      }
    }
    else
    {

    }
  }
  v162 = a3;
  v50 = v19;
  v51 = Canvas.editingView.getter();
  v53 = v52;
  swift_getObjectType();
  v171 = (uint64_t)a6;
  v54 = v174;
  type metadata accessor for _ContiguousArrayStorage();
  swift_allocObject();
  v55 = static Array._adoptStorage(_:count:)();
  v33(v56, (uint64_t)v32, v54);
  v57 = v171;
  _finalizeUninitializedArray<A>(_:)(v55);
  v58 = v169;
  v59 = (uint64_t)v170;
  (*(void (**)(void))(v53 + 80))();
  swift_bridgeObjectRelease();

  if ((v167 & 1) != 0)
    Canvas.harmonizeCanvasElement<A>(_:)((uint64_t)v32, v58, v57, v59);
  v60 = Canvas.editingView.getter();
  v62 = v61;
  ObjectType = swift_getObjectType();
  v64 = (uint64_t)v168;
  v65 = v32;
  Capsule<>.rootID.getter();
  v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 32))(ObjectType, v62);

  if (!*(_QWORD *)(v66 + 16) || (v67 = specialized __RawDictionaryStorage.find<A>(_:)(v64), (v68 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    v83 = v64;
    v71 = *(char **)(v166 + 8);
    ((void (*)(uint64_t, uint64_t))v71)(v83, v50);
LABEL_17:
    v84 = 0;
    v85 = (uint64_t)v163;
    goto LABEL_18;
  }
  isEscapingClosureAtFileLocation = (uint64_t)*(id *)(*(_QWORD *)(v66 + 56) + 8 * v67);
  swift_bridgeObjectRelease();
  v70 = v64;
  v71 = *(char **)(v166 + 8);
  ((void (*)(uint64_t, uint64_t))v71)(v70, v50);
  if (!v162)
  {

    goto LABEL_17;
  }
  v169 = v50;
  v170 = v71;
  v72 = v162;
  p_base_prots = (SEL *)&MiniMenuController.base_prots;
  v74 = objc_msgSend(v72, sel_itemProvider);
  v75 = (uint64_t)"roviderReading>\"8@\"NSError\"16";
  v76 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000011, 0x80000001DDF50250);
  v77 = &MiniMenuController.base_prots;
  v78 = objc_msgSend(v74, sel_hasItemConformingToTypeIdentifier_, v76);

  if ((v78 & 1) != 0)
  {
    v79 = v158;
    Capsule<>.rootID.getter();
    v80 = (uint64_t)v159;
    CRKeyPath.uuid.getter();
    ((void (*)(char *, uint64_t))v170)(v79, v169);
    v81 = v160;
    v82 = v161;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v160 + 48))(v80, 1, v161) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v80, &demangling cache variable for type metadata for UUID?);
    }
    else
    {
      v104 = v157;
      (*(void (**)(char *, uint64_t, uint64_t))(v81 + 32))(v157, v80, v82);
      objc_msgSend((id)isEscapingClosureAtFileLocation, sel_setIsAccessibilityElement_, 1);
      aBlock = 0x2D72656B63697453;
      v177 = 0xE800000000000000;
      v105 = v81;
      v106 = (id)isEscapingClosureAtFileLocation;
      v107._countAndFlagsBits = UUID.uuidString.getter();
      String.append(_:)(v107);
      swift_bridgeObjectRelease();
      v108 = (void *)MEMORY[0x1DF0E41AC](aBlock, v177);
      swift_bridgeObjectRelease();
      objc_msgSend(v106, sel_setAccessibilityIdentifier_, v108);

      v109 = *(void (**)(char *, uint64_t))(v105 + 8);
      v77 = &MiniMenuController.base_prots;
      v110 = v104;
      p_base_prots = (SEL *)&MiniMenuController.base_prots;
      v109(v110, v82);
    }
  }
  v111 = &selRef_setImage_;
  v112 = v172;
  v113 = objc_msgSend(v172, sel_window);

  if (v113)
    goto LABEL_32;
  if (one-time initialization token for logger != -1)
    goto LABEL_52;
  while (1)
  {
    v114 = type metadata accessor for Logger();
    __swift_project_value_buffer(v114, (uint64_t)logger);
    v115 = Logger.logObject.getter();
    v116 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v115, v116))
    {
      v117 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v117 = 0;
      _os_log_impl(&dword_1DDB0F000, v115, v116, "Attachment view was removed from its window while loading a dropped item", v117, 2u);
      MEMORY[0x1DF0E6558](v117, -1, -1);
    }

    v112 = v172;
LABEL_32:
    v118 = objc_msgSend(v112, v111[131]);

    v111 = (char **)v112;
    if (v118)
    {
      v119 = objc_msgSend(v72, p_base_prots[355]);
      v120 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000011, v75 | 0x8000000000000000);
      v121 = objc_msgSend(v119, (SEL)v77[286], v120);

      if ((v121 & 1) == 0)
      {
        v122 = Canvas.editingView.getter();
        v123 = (*(double (**)(void))((*MEMORY[0x1E0DEEDD8] & *v122) + 0x140))();

        v124 = fmod(v123, 6.28318531);
        if (v124 > 3.14159265)
          v124 = v124 + -6.28318531;
        if (v124 < -3.14159265)
          v124 = v124 + 6.28318531;
        if (fabs(v124) < 0.01)
        {
          v125 = (uint64_t *)((char *)v111 + direct field offset for Canvas.delayedPreviewProviders);
          swift_beginAccess();
          v126 = *v125;
          if (*(_QWORD *)(v126 + 16))
          {
            v127 = v72;
            swift_bridgeObjectRetain();
            v128 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v127);
            if ((v129 & 1) != 0)
            {
              v130 = *(void (**)(uint64_t *))(*(_QWORD *)(v126 + 56) + 16 * v128);
              swift_retain();
              swift_bridgeObjectRelease();

              v131 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3B78]), sel_init);
              objc_msgSend((id)isEscapingClosureAtFileLocation, sel_bounds);
              objc_msgSend(v172, sel_convertRect_fromCoordinateSpace_, isEscapingClosureAtFileLocation);
              v133 = v132;
              v135 = v134;
              v137 = v136;
              v139 = v138;
              objc_msgSend(v172, sel_bounds);
              v187.origin.x = v140;
              v187.origin.y = v141;
              v187.size.width = v142;
              v187.size.height = v143;
              v184.origin.x = v133;
              v184.origin.y = v135;
              v184.size.width = v137;
              v184.size.height = v139;
              v185 = CGRectIntersection(v184, v187);
              objc_msgSend(v172, sel_convertRect_toCoordinateSpace_, isEscapingClosureAtFileLocation, v185.origin.x, v185.origin.y, v185.size.width, v185.size.height);
              x = v186.origin.x;
              y = v186.origin.y;
              width = v186.size.width;
              height = v186.size.height;
              if (CGRectIsNull(v186))
              {
                width = 0.0;
                height = 0.0;
                x = 0.0;
                y = 0.0;
              }
              v148 = objc_msgSend((id)objc_opt_self(), sel_bezierPathWithRect_, x, y, width, height);
              objc_msgSend(v131, sel_setVisiblePath_, v148);

              v127 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D88]), sel_initWithView_parameters_, isEscapingClosureAtFileLocation, v131);
              aBlock = (uint64_t)v127;
              v130(&aBlock);
              v111 = (char **)v172;

              swift_release();
            }
            else
            {
              swift_bridgeObjectRelease();
            }

          }
        }
      }
    }
    if (*((_BYTE *)v111 + direct field offset for Canvas.dropInteractionSessionIsActive) != 1)
      break;
    v75 = objc_opt_self();
    v149 = swift_allocObject();
    *(_QWORD *)(v149 + 16) = isEscapingClosureAtFileLocation;
    v150 = swift_allocObject();
    *(_QWORD *)(v150 + 16) = partial apply for closure #1 in MarkupContainerViewController.swapPlaceholderImageWithContentView(with:_:);
    *(_QWORD *)(v150 + 24) = v149;
    v180 = partial apply for thunk for @callee_guaranteed () -> ();
    v181 = (__objc2_prot_list **)v150;
    aBlock = MEMORY[0x1E0C809B0];
    v177 = 1107296256;
    v178 = thunk for @escaping @callee_guaranteed () -> ();
    v179 = &block_descriptor_248_0;
    p_base_prots = (SEL *)_Block_copy(&aBlock);
    v77 = v181;
    v151 = (id)isEscapingClosureAtFileLocation;
    swift_retain();
    swift_release();
    objc_msgSend((id)v75, sel_performWithoutAnimation_, p_base_prots);
    _Block_release(p_base_prots);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
      v32 = v65;
      v152 = swift_allocObject();
      *(_QWORD *)(v152 + 16) = v151;
      v153 = (uint64_t *)((char *)v111 + direct field offset for Canvas.dropCompletions);
      swift_beginAccess();
      v154 = v72;
      v155 = v151;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v175 = *v153;
      *v153 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)partial apply for closure #3 in Canvas.addCanvasElement<A>(_:setSelected:dragItem:harmonize:), v152, v154, isUniquelyReferenced_nonNull_native);
      *v153 = v175;
      swift_bridgeObjectRelease();

      swift_endAccess();
      v84 = partial apply for closure #1 in MarkupContainerViewController.swapPlaceholderImageWithContentView(with:_:);
      goto LABEL_50;
    }
    __break(1u);
LABEL_52:
    swift_once();
  }

  v84 = 0;
  v32 = v65;
LABEL_50:
  v85 = (uint64_t)v163;
  v71 = v170;
  v50 = v169;
LABEL_18:
  objc_msgSend(v164, sel_commit);
  if ((v165 & 1) != 0)
  {
    v86 = v50;
    v87 = Canvas.editingView.getter();
    v89 = v88;
    v90 = swift_getObjectType();
    Capsule<>.rootID.getter();
    v91 = (*(uint64_t (**)(uint64_t, uint64_t))(v89 + 32))(v90, v89);

    if (*(_QWORD *)(v91 + 16) && (v92 = specialized __RawDictionaryStorage.find<A>(_:)(v85), (v93 & 1) != 0))
    {
      v94 = *(id *)(*(_QWORD *)(v91 + 56) + 8 * v92);
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v71)(v85, v86);
      v95 = v94;
      v96 = specialized CanvasMembers.init(_:)(v95);
      v98 = v97;
      v100 = v99;
      v102 = v101;

      AnyCanvas.selection.setter(v96, v98, v100, v102 & 1);
    }
    else
    {
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v71)(v85, v86);
    }
  }
  (*(void (**)(char *, uint64_t))(v173 + 8))(v32, v174);
  return outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v84);
}

Swift::Void __swiftcall Canvas.showOrHideContent(below:)(CGPoint below)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGPoint v25;
  CGAffineTransform v26;
  CGAffineTransform v27;
  CGAffineTransform v28;
  _QWORD v29[6];
  _QWORD v30[7];
  _BYTE v31[72];

  v2 = v1;
  v25.x = below.x;
  v25.y = below.y;
  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = Canvas.editingView.getter();
  (*(void (**)(_QWORD *__return_ptr))((*v3 & *v4) + 0x2A0))(v29);
  v23 = *(double *)&v29[1];
  v24 = *(double *)v29;
  v5 = *(double *)&v29[4];
  v21 = *(double *)&v29[3];
  v22 = *(double *)&v29[2];
  v6 = *(double *)&v29[5];

  (*(void (**)(_QWORD *__return_ptr))((*v3 & *v2) + 0x5B8))(v30);
  v8 = *(double *)v30;
  v7 = *(double *)&v30[1];
  v10 = *(double *)&v30[2];
  v9 = *(double *)&v30[3];
  v12 = *(double *)&v30[4];
  v11 = *(double *)&v30[5];
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v30, (uint64_t)v31, (uint64_t *)&demangling cache variable for type metadata for CGAffineTransform?);
  if ((v31[48] & 1) != 0)
  {
    v9 = 1.0;
    v11 = 0.0;
    v12 = 0.0;
    v10 = 0.0;
    v7 = 0.0;
    v8 = 1.0;
  }
  v28.a = v24;
  v28.b = v23;
  v28.c = v22;
  v28.d = v21;
  v28.tx = v5;
  v28.ty = v6;
  v27.a = v8;
  v27.b = v7;
  v27.c = v10;
  v27.d = v9;
  v27.tx = v12;
  v27.ty = v11;
  CGAffineTransformConcat(&v26, &v28, &v27);
  v28 = v26;
  CGAffineTransformInvert(&v27, &v28);
  v28 = v27;
  CGPointApplyAffineTransform(v25, &v28);
  LOBYTE(v27.a) = 1;
  MEMORY[0x1E0C80A78](v13, v14);
  v15 = *(void **)((char *)v2 + direct field offset for Canvas.paperView);
  swift_beginAccess();
  type metadata accessor for Capsule();
  v16 = v15;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();

  MEMORY[0x1E0C80A78](v17, v18);
  v19 = *(void **)((char *)v2 + direct field offset for Canvas.paperView);
  swift_beginAccess();
  v20 = v19;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();

  LOBYTE(v28.a) = 3;
  (*(void (**)(CGAffineTransform *))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x518))(&v28);
}

void Canvas.remove(members:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  char *v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t v18;
  int64_t v19;

  v5 = v4;
  v9 = a4 & 1;
  v10 = Canvas.editingView.getter();
  v12 = v11;
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 88))(a1, a2, a3, v9, ObjectType, v12);

  v14 = *(char **)(v5 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (v14)
  {
    v15 = *(_QWORD *)&v14[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
    v16 = v14[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
    v18 = *(_QWORD *)&v14[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
    v19 = *(_QWORD *)&v14[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
    v17 = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(a1);
    specialized Set._subtract<A>(_:)(a2);
    CanvasElementResizeView.selection.setter(v19, v18, v15, v16);

  }
  else
  {
    __break(1u);
  }
}

uint64_t Canvas.duplicate(members:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;

  v7 = a4 & 1;
  v8 = Canvas.editingView.getter();
  v10 = v9;
  ObjectType = swift_getObjectType();
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 96))(a1, a2, a3, v7, ObjectType, v10);

  return v12;
}

uint64_t Canvas.canConvertToHandwriting(members:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;

  v7 = a4 & 1;
  v8 = Canvas.editingView.getter();
  v10 = v9;
  ObjectType = swift_getObjectType();
  LOBYTE(a3) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 120))(a1, a2, a3, v7, ObjectType, v10);

  return a3 & 1;
}

void Canvas.convertToHandwriting(members:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  id v11;

  v7 = a4 & 1;
  v11 = Canvas.editingView.getter();
  v9 = v8;
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 128))(a1, a2, a3, v7, ObjectType, v9);

}

unint64_t Canvas.addWords(_:layout:)(unint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v3)
      return result;
  }
  else if (!*(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  if (a2)
    result = ReflowLayoutManager.strokeTransforms()();
  MEMORY[0x1E0C80A78](result, a2);
  Canvas.undoable(newChange:persistSelection:action:)(1, 0, (uint64_t (*)(double))partial apply for closure #1 in Canvas.addWords(_:layout:));
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall Canvas.tapOnCanvas(location:fromPencilKit:allowShowingEditMenu:)(CGPoint location, Swift::Bool fromPencilKit, Swift::Bool allowShowingEditMenu)
{
  _QWORD *v3;
  _QWORD *v4;
  double y;
  double x;
  id v8;
  void *v9;
  id v10;
  _QWORD *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  void *v18;
  unsigned __int8 v19;
  char v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjectType;
  char *v25;
  double v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  CGPoint v30;
  uint64_t v31;
  void *v32;
  unsigned __int8 v33;
  void *v34;
  id v35;
  id v36;
  CGAffineTransform v37;
  CGAffineTransform v38;
  CGPoint v39;

  v4 = v3;
  y = location.y;
  x = location.x;
  if (fromPencilKit)
  {
    v8 = objc_msgSend(v4, sel_hitTest_withEvent_, 0, location.x, location.y);
    if (v8)
    {
      v9 = v8;
      type metadata accessor for AnyCanvasElementView();
      v10 = v9;
      v11 = (_QWORD *)swift_dynamicCastClass();
      v12 = v10;
      if (v11)
      {
LABEL_8:

        if (v11 != *(_QWORD **)((char *)v4 + direct field offset for Canvas.paperView))
        {
          v36 = v12;
          objc_msgSend(v11, sel_convertPoint_fromCoordinateSpace_, v4, x, y);
          (*(void (**)(_QWORD, uint64_t, Swift::Bool))((*MEMORY[0x1E0DEEDD8] & *v11) + 0x1C8))(0, 1, allowShowingEditMenu);

          return;
        }
        v10 = v12;
      }
      else
      {
        v12 = v10;
        while (1)
        {
          v13 = objc_msgSend(v12, sel_superview);

          if (!v13)
            break;
          v12 = v13;
          v14 = swift_dynamicCastClass();
          if (v14)
          {
            v11 = (_QWORD *)v14;
            goto LABEL_8;
          }
        }
      }

    }
  }
  if (!allowShowingEditMenu)
    goto LABEL_16;
  v15 = *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v15)
  {
    __break(1u);
    return;
  }
  v16 = (_QWORD *)(v15 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
  if (*(_QWORD *)(*v16 + 16))
    goto LABEL_16;
  if (*(_QWORD *)(v16[1] + 16))
    goto LABEL_16;
  v17 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x320))();
  if (v17)
  {
    v18 = v17;
    v19 = objc_msgSend(v17, sel__hasSelection);

    if ((v19 & 1) != 0)
      goto LABEL_16;
  }
  *(_QWORD *)&v38.d = &type metadata for PencilAndPaperFeatureFlags;
  *(_QWORD *)&v38.tx = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  LOBYTE(v38.a) = 0;
  v20 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38);
  if ((v20 & 1) == 0)
  {
LABEL_16:
    AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);
  }
  else
  {
    if (*(_QWORD *)((char *)v4 + direct field offset for Canvas.editMenuInteractionDelegate)
      && (CanvasEditMenuDelegate.editMenuIsPresented.getter() & 1) != 0)
    {
      objc_msgSend(*(id *)((char *)v4 + direct field offset for Canvas.editMenuInteraction), sel_dismissMenu);
      return;
    }
    v21 = Canvas.editingView.getter();
    v23 = v22;
    ObjectType = swift_getObjectType();
    v25 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(ObjectType, v23);

    if (!v25)
      goto LABEL_30;
    objc_msgSend(v25, sel_convertPoint_fromCoordinateSpace_, v4, x, y);
    v27 = v26;
    v29 = v28;
    objc_msgSend(v25, sel_drawingTransform);
    CGAffineTransformInvert(&v37, &v38);
    v38 = v37;
    v39.x = v27;
    v39.y = v29;
    v30 = CGPointApplyAffineTransform(v39, &v38);
    v31 = *(_QWORD *)&v25[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
    if (!v31
      || (v32 = *(void **)(v31 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController)) == 0)
    {

LABEL_30:
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIEditMenuConfiguration);
      memset(&v38, 0, 40);
      v34 = (void *)UIEditMenuConfiguration.init(identifier:sourcePoint:)();
      v35 = *(id *)((char *)v4 + direct field offset for Canvas.editMenuInteraction);
      objc_msgSend(v35, sel_presentEditMenuWithConfiguration_, v34);

      return;
    }
    v33 = objc_msgSend(v32, sel_handleSingleTapAtDrawingLocation_, v30.x, v30.y);

    if ((v33 & 1) == 0)
      goto LABEL_30;
  }
}

uint64_t Canvas.editMenuIsPresented.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + direct field offset for Canvas.editMenuInteractionDelegate))
    return CanvasEditMenuDelegate.editMenuIsPresented.getter() & 1;
  else
    return 0;
}

void Canvas.tapCanvasElement(_:modifierFlags:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char *v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char **v40;
  char v41;
  char v42;
  _QWORD *v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  void *v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  id v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char **v69;
  char v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  BOOL v76;
  uint64_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  BOOL v85;
  uint64_t v86;
  uint8_t *v87;
  uint64_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  id v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  id v97;
  id v98;
  void *v99;
  id v100;
  void *v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  id v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  char **v110;
  id v111;
  void *v112;
  id v113;
  void *v114;
  id v115;
  char v116;
  char v117;
  void *v118;
  id v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t (*v122)(void);
  void *v123;
  id v124;
  uint64_t v125;
  _QWORD *v126;
  void *v127;
  uint64_t v128[2];
  char *v129;
  char *v130;
  uint64_t v131;
  char **v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  int64_t v136;
  uint64_t v137;
  char **v138;
  unsigned __int8 v139;
  int64_t v140;
  char v141;

  v133 = a2;
  v5 = type metadata accessor for Logger();
  v131 = *(_QWORD *)(v5 - 8);
  v132 = (char **)v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v130 = (char *)v128 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v129 = (char *)v128 - v10;
  v134 = 0;
  v11 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v11, v12);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v14 = *(char ***)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)v128 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v19 = *(_QWORD *)(v18 - 8);
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v23 = (char *)v128 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (((*(uint64_t (**)(double))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x220))(v21) & 1) == 0)
    return;
  if ((a3 & 1) != 0 || (v133 & 0x120000) == 0)
  {
    v43 = a1;
    v44 = specialized CanvasMembers.init(_:)(v43);
    v46 = v45;
    v48 = v47;
    v50 = v49;

    v30 = v135;
    AnyCanvas.selection.setter(v44, v46, v48, v50 & 1);
    goto LABEL_14;
  }
  v133 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  v24 = *(_QWORD *)&v135[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (!v24)
  {
LABEL_95:
    __break(1u);
    goto LABEL_96;
  }
  v25 = (uint64_t *)(v24 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
  v26 = v25[1];
  v128[0] = *v25;
  v128[1] = v26;
  a3 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0xE8);
  swift_bridgeObjectRetain();
  v27 = swift_bridgeObjectRetain();
  ((void (*)(uint64_t))a3)(v27);
  SharedTagged_9.tag.getter();
  v140 = v136;
  v141 = v137;
  MEMORY[0x1DF0E3408](v13);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  WeakTagged_9.init(_:id:)();
  ((void (*)(char *, uint64_t))v14[1])(v17, v13);
  v28 = specialized Set.contains(_:)((uint64_t)v23, v128[0]);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v29 = v133;
  v30 = v135;
  v31 = *(_BYTE **)&v135[v133];
  if ((v28 & 1) != 0)
  {
    if (!v31)
    {
LABEL_96:
      __break(1u);
      goto LABEL_97;
    }
    a3 = (uint64_t)&OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
    v32 = *(_QWORD *)&v31[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
    v33 = *(_QWORD *)&v31[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
    v14 = *(char ***)&v31[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
    v34 = v31[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
    v136 = v32;
    v137 = v33;
    v138 = v14;
    v139 = v34;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v35 = v31;
    CanvasMembers.remove(_:)(a1);
    CanvasElementResizeView.selection.setter(v136, v137, (uint64_t)v138, v139);

    v36 = *(_QWORD *)&v30[v29];
    if (!v36)
    {
LABEL_97:
      __break(1u);
      goto LABEL_98;
    }
    v37 = v36 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
    v38 = *(_QWORD *)v37;
    v39 = *(_QWORD *)(v37 + 8);
    v40 = *(char ***)(v37 + 16);
    v41 = *(_BYTE *)(v37 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((specialized static Set.== infix(_:_:)(v32, v38) & 1) != 0)
    {
      v42 = specialized static Set.== infix(_:_:)(v33, v39);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v42 & 1) != 0)
      {
        if ((v34 & 1) != 0)
        {
          if ((v41 & 1) != 0)
            goto LABEL_14;
        }
        else
        {
          if (v14 == v40)
            v116 = v41;
          else
            v116 = 1;
          if ((v116 & 1) == 0)
            goto LABEL_14;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    if (one-time initialization token for miniMenuLogger != -1)
      swift_once();
    v14 = v132;
    v72 = __swift_project_value_buffer((uint64_t)v132, (uint64_t)miniMenuLogger);
    v73 = v131;
    (*(void (**)(char *, uint64_t, char **))(v131 + 16))(v129, v72, v14);
    a3 = v30;
    v74 = Logger.logObject.getter();
    v75 = static os_log_type_t.info.getter();
    v76 = os_log_type_enabled(v74, v75);
    v77 = v133;
    if (v76)
    {
      v78 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v78 = 134217984;
      v79 = *(_QWORD *)&v30[v77];
      if (!v79)
      {
LABEL_102:

        __break(1u);
        goto LABEL_103;
      }
      v80 = v78;
      v136 = *(_QWORD *)(*(_QWORD *)(v79 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection) + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_1DDB0F000, v74, v75, "Changing selection to have %ld elements", v80, 0xCu);
      MEMORY[0x1DF0E6558](v80, -1, -1);
    }
    else
    {

      v74 = a3;
    }

    v90 = (*(uint64_t (**)(char *, char **))(v73 + 8))(v129, v14);
    MEMORY[0x1E0C80A78](v90, v91);
    v128[-2] = a3;
    AnyCanvas.updateCanvasState(_:)();
    if ((objc_msgSend((id)a3, sel_isFirstResponder) & 1) != 0)
      goto LABEL_73;
    v92 = *(void **)&v30[v77];
    if (!v92)
    {
LABEL_104:
      __break(1u);
      goto LABEL_105;
    }
    v93 = v92;
    v94 = swift_bridgeObjectRetain();
    v95 = specialized Sequence.compactMap<A>(_:)(v94, (uint64_t)v93);

    swift_bridgeObjectRelease();
    if (v95 >> 62)
    {
      swift_bridgeObjectRetain();
      v96 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v96 = *(_QWORD *)((v95 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (!v96)
      goto LABEL_73;
    v97 = (id)a3;
    v98 = objc_msgSend(v97, sel_window);
    if (v98)
    {
      v99 = v98;
      v100 = objc_msgSend((id)objc_opt_self(), sel_activeToolPickerForWindow_, v98);
      if (v100)
      {
        v101 = v100;
        v102 = objc_msgSend(v100, sel__visibilityUpdatesEnabled);
        v14 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
        objc_msgSend(v101, sel__setVisibilityUpdatesEnabled_, 0);
        objc_msgSend(v97, sel_becomeFirstResponder);
        objc_msgSend(v101, sel__setVisibilityUpdatesEnabled_, v102);

        v97 = v101;
LABEL_72:

LABEL_73:
        v118 = *(void **)(a3 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView);
        if (v118)
        {
          v119 = v118;
          HandwritingReflowView.updateForNewSelection()();

        }
        Canvas.canvasSelectionDidChange()();
        v120 = *(_QWORD *)&v30[v77];
        if (!v120)
          goto LABEL_100;
        v121 = (_QWORD *)(v120 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
        if (!*(_QWORD *)(*v121 + 16) && !*(_QWORD *)(v121[1] + 16))
        {
          v122 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)a3) + 0x320);
LABEL_88:
          v127 = (void *)v122();
          objc_msgSend(v127, sel__clearSelectionIfNecessary);

          goto LABEL_14;
        }
        goto LABEL_14;
      }

    }
    objc_msgSend(v97, sel_becomeFirstResponder);
    goto LABEL_72;
  }
  if (!v31)
  {
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  a3 = (uint64_t)&OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
  v61 = *(_QWORD *)&v31[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
  v62 = *(_QWORD *)&v31[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
  v14 = *(char ***)&v31[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
  v63 = v31[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
  v136 = v61;
  v137 = v62;
  v138 = v14;
  v139 = v63;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v64 = v31;
  CanvasMembers.insert(_:)(a1);
  CanvasElementResizeView.selection.setter(v136, v137, (uint64_t)v138, v139);

  v65 = *(_QWORD *)&v30[v29];
  if (!v65)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  v66 = v65 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
  v67 = *(_QWORD *)v66;
  v68 = *(_QWORD *)(v66 + 8);
  v69 = *(char ***)(v66 + 16);
  v70 = *(_BYTE *)(v66 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized static Set.== infix(_:_:)(v61, v67) & 1) != 0)
  {
    v71 = specialized static Set.== infix(_:_:)(v62, v68);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v71 & 1) != 0)
    {
      if ((v63 & 1) != 0)
      {
        if ((v70 & 1) != 0)
          goto LABEL_14;
      }
      else
      {
        if (v14 == v69)
          v117 = v70;
        else
          v117 = 1;
        if ((v117 & 1) == 0)
          goto LABEL_14;
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for miniMenuLogger != -1)
    swift_once();
  a3 = (uint64_t)v132;
  v81 = __swift_project_value_buffer((uint64_t)v132, (uint64_t)miniMenuLogger);
  v82 = v131;
  (*(void (**)(char *, uint64_t, uint64_t))(v131 + 16))(v130, v81, a3);
  v14 = v30;
  v83 = Logger.logObject.getter();
  v84 = static os_log_type_t.info.getter();
  v85 = os_log_type_enabled(v83, v84);
  v86 = v133;
  if (v85)
  {
    v87 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v87 = 134217984;
    v88 = *(_QWORD *)&v30[v86];
    if (!v88)
    {
LABEL_103:

      __break(1u);
      goto LABEL_104;
    }
    v89 = v87;
    v136 = *(_QWORD *)(*(_QWORD *)(v88 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection) + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_1DDB0F000, v83, v84, "Changing selection to have %ld elements", v89, 0xCu);
    MEMORY[0x1DF0E6558](v89, -1, -1);
  }
  else
  {

    v83 = v14;
  }

  v103 = (*(uint64_t (**)(char *, uint64_t))(v82 + 8))(v130, a3);
  MEMORY[0x1E0C80A78](v103, v104);
  v128[-2] = (uint64_t)v14;
  AnyCanvas.updateCanvasState(_:)();
  if ((objc_msgSend(v14, sel_isFirstResponder) & 1) == 0)
  {
    v105 = *(void **)&v30[v86];
    if (!v105)
    {
LABEL_105:
      __break(1u);
      return;
    }
    v106 = v105;
    v107 = swift_bridgeObjectRetain();
    v108 = specialized Sequence.compactMap<A>(_:)(v107, (uint64_t)v106);

    swift_bridgeObjectRelease();
    if (v108 >> 62)
    {
      swift_bridgeObjectRetain();
      v109 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v109 = *(_QWORD *)((v108 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v109)
    {
      v110 = v14;
      v111 = objc_msgSend(v110, sel_window);
      if (v111)
      {
        v112 = v111;
        v113 = objc_msgSend((id)objc_opt_self(), sel_activeToolPickerForWindow_, v111);
        if (v113)
        {
          v114 = v113;
          v115 = objc_msgSend(v113, sel__visibilityUpdatesEnabled);
          a3 = (uint64_t)&selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
          objc_msgSend(v114, sel__setVisibilityUpdatesEnabled_, 0);
          objc_msgSend(v110, sel_becomeFirstResponder);
          objc_msgSend(v114, sel__setVisibilityUpdatesEnabled_, v115);

          v110 = (char **)v114;
LABEL_81:

          goto LABEL_82;
        }

      }
      objc_msgSend(v110, sel_becomeFirstResponder);
      goto LABEL_81;
    }
  }
LABEL_82:
  v123 = *(char **)((char *)v14 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView);
  if (v123)
  {
    v124 = v123;
    HandwritingReflowView.updateForNewSelection()();

  }
  Canvas.canvasSelectionDidChange()();
  v125 = *(_QWORD *)&v30[v86];
  if (!v125)
    goto LABEL_101;
  v126 = (_QWORD *)(v125 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
  if (!*(_QWORD *)(*v126 + 16) && !*(_QWORD *)(v126[1] + 16))
  {
    v122 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & (unint64_t)*v14) + 0x320);
    goto LABEL_88;
  }
LABEL_14:
  a3 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  v51 = *(void **)&v30[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (!v51)
  {
    __break(1u);
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  v52 = v51;
  v53 = swift_bridgeObjectRetain();
  v54 = specialized Sequence.compactMap<A>(_:)(v53, (uint64_t)v52);

  swift_bridgeObjectRelease();
  if (v54 >> 62)
  {
    swift_bridgeObjectRetain();
    v55 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v55 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v55)
  {
    type metadata accessor for Analytics();
    swift_initStaticObject();
    v56 = *(void **)&v135[a3];
    if (v56)
    {
      v57 = v56;
      v58 = swift_bridgeObjectRetain();
      v59 = specialized Sequence.compactMap<A>(_:)(v58, (uint64_t)v57);

      swift_bridgeObjectRelease();
      if (v59 >> 62)
      {
        swift_bridgeObjectRetain();
        v60 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v60 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      Analytics.recordDidMakeSelection(type:contentType:)(0, v60 > 1);
      return;
    }
    goto LABEL_94;
  }
}

Swift::Bool __swiftcall Canvas.validDragDestination(canvasElements:isLasso:)(Swift::OpaquePointer canvasElements, Swift::Bool isLasso)
{
  char *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *rawValue;
  void *v18;
  unint64_t v19;
  void *v20;
  char v21;
  _QWORD *v22;
  char v23;
  _QWORD *v24;
  Swift::Bool result;
  uint64_t v26;
  uint64_t v27;
  id v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  double v33;
  CGFloat v34;
  double v35;
  CGFloat v36;
  double MaxX;
  double MinX;
  _BOOL4 v39;
  double MaxY;
  void *v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55[6];
  uint64_t v56[7];
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;

  LODWORD(v3) = isLasso;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)canvasElements._rawValue >> 62)
    goto LABEL_22;
  v10 = *(_QWORD *)(((unint64_t)canvasElements._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v10)
  {
LABEL_23:
    result = swift_bridgeObjectRelease();
LABEL_24:
    v26 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
    v27 = *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
    if (!v27)
    {
      __break(1u);
      goto LABEL_40;
    }
    v28 = *(id *)(v27 + OBJC_IVAR____TtC8PaperKit10ResizeView_borderView);
    objc_msgSend(v28, sel_bounds);
    objc_msgSend(v28, sel_convertRect_toCoordinateSpace_, v2);
    v30 = v29;
    v32 = v31;
    v34 = v33;
    v36 = v35;

    v57.origin.x = v30;
    v57.origin.y = v32;
    v57.size.width = v34;
    v57.size.height = v36;
    MaxX = CGRectGetMaxX(v57);
    objc_msgSend(v2, sel_bounds);
    if (MaxX >= CGRectGetMinX(v58)
      && (v59.origin.x = v30,
          v59.origin.y = v32,
          v59.size.width = v34,
          v59.size.height = v36,
          MinX = CGRectGetMinX(v59),
          objc_msgSend(v2, sel_bounds),
          CGRectGetMaxX(v60) >= MinX))
    {
      v61.origin.x = v30;
      v61.origin.y = v32;
      v61.size.width = v34;
      v61.size.height = v36;
      MaxY = CGRectGetMaxY(v61);
      objc_msgSend(v2, sel_bounds);
      v39 = MaxY < CGRectGetMinY(v62);
      if ((v3 & 1) == 0)
      {
LABEL_30:
        v41 = *(void **)&v2[v26];
        if (v41)
        {
          v42 = v41;
          v43 = swift_bridgeObjectRetain();
          v44 = specialized Sequence.compactMap<A>(_:)(v43, (uint64_t)v42);

          swift_bridgeObjectRelease();
          if ((v44 & 0x8000000000000000) != 0 || (v44 & 0x4000000000000000) != 0)
          {
            v45 = (unint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v44);
            swift_bridgeObjectRelease();
          }
          else
          {
            v45 = v44 & 0xFFFFFFFFFFFFFF8;
          }
          v46 = specialized static Array<A>.== infix(_:_:)(v45, (unint64_t)canvasElements._rawValue);
          swift_release();
          return (v46 & v39 & 1) == 0;
        }
LABEL_40:
        __break(1u);
        return result;
      }
    }
    else if ((v3 & 1) == 0)
    {
      v39 = 1;
      goto LABEL_30;
    }
    return 1;
  }
  while (1)
  {
    v48 = (int)v3;
    v49 = v2;
    v11 = (unint64_t)canvasElements._rawValue & 0xC000000000000001;
    v12 = ((unint64_t)canvasElements._rawValue & 0xC000000000000001) != 0
        ? (_QWORD *)MEMORY[0x1DF0E4D64](0, canvasElements._rawValue)
        : *((id *)canvasElements._rawValue + 4);
    v3 = v12;
    v13 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    if (((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v12) + 0x1E0))() & 1) == 0)
      break;
    v14 = 0;
    v15 = v10 - 1;
    v52 = v6;
    v51 = v5;
    v50 = v15;
    while (1)
    {
      (*(void (**)(void))((*v13 & *v3) + 0xE8))();
      SharedTagged_9.tag.getter();
      v16 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      if ((v54 & 1) != 0 || v53 != 5)
      {
        v22 = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t))((*v13 & *v3) + 0x1A0))(v55, v16);
        (*(void (**)(uint64_t *__return_ptr, _QWORD *))((*v13 & *v3) + 0x1A8))(v56, v22);
        v23 = static CGAffineTransform.== infix(_:_:)();

        if ((v23 & 1) != 0)
        {
LABEL_19:
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      else
      {
        type metadata accessor for CGPathRef(0);
        rawValue = canvasElements._rawValue;
        v18 = (void *)(*(uint64_t (**)(void))((*v13 & *v3) + 0x1D0))();
        v19 = v11;
        v20 = (void *)(*(uint64_t (**)(void))((*v13 & *v3) + 0x1D8))();
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGPathRef and conformance CGPathRef, (uint64_t (*)(uint64_t))type metadata accessor for CGPathRef, (uint64_t)&protocol conformance descriptor for CGPathRef);
        v15 = v50;
        v21 = static _CFObject.== infix(_:_:)();

        canvasElements._rawValue = rawValue;
        v6 = v52;

        v11 = v19;
        v5 = v51;
        if ((v21 & 1) != 0)
          goto LABEL_19;
      }
      if (v15 == v14)
      {
        result = swift_bridgeObjectRelease();
        v2 = v49;
        LOBYTE(v3) = v48;
        goto LABEL_24;
      }
      v2 = (char *)(v14 + 1);
      v24 = v11
          ? (_QWORD *)MEMORY[0x1DF0E4D64](v14 + 1, canvasElements._rawValue)
          : *((id *)canvasElements._rawValue + v14 + 5);
      v3 = v24;
      if (__OFADD__(v2, 1))
        break;
      ++v14;
      if (((*(uint64_t (**)(void))((*v13 & *v24) + 0x1E0))() & 1) == 0)
        goto LABEL_18;
    }
    __break(1u);
LABEL_22:
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    if (!v10)
      goto LABEL_23;
  }
LABEL_18:
  swift_bridgeObjectRelease();

  return 0;
}

Swift::Void __swiftcall Canvas.hide(weakStrokes:)(Swift::OpaquePointer weakStrokes)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjectType;
  void *v23;
  id v24;
  void *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *rawValue;
  uint64_t v34;
  char *v35;

  rawValue = weakStrokes._rawValue;
  v2 = type metadata accessor for PKDrawing();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v11 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32, v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v31 - v17;
  v34 = v1;
  v19 = Canvas.editingView.getter();
  v21 = v20;
  ObjectType = swift_getObjectType();
  v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(ObjectType, v21);

  if (!v23)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v10, 1, 1, v2);
    goto LABEL_6;
  }
  v24 = objc_msgSend(v23, sel_drawing);

  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v10, v6, v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v10, 0, 1, v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v10, 1, v2) == 1)
  {
LABEL_6:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for PKDrawing?);
    return;
  }
  type metadata accessor for PKDrawingCoherence(0);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v25 = v35;
    v26 = &v35[OBJC_IVAR___PKDrawingCoherence_model];
    swift_beginAccess();
    v27 = v32;
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v26, v32);

    v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v11 + 32))(v18, v14, v27);
    MEMORY[0x1E0C80A78](v28, v29);
    *(&v31 - 2) = (uint64_t)v18;
    v30 = specialized Sequence.compactMap<A>(_:)((void (*)(_QWORD))partial apply for closure #1 in Canvas.hide(weakStrokes:), (uint64_t)(&v31 - 4), (uint64_t)rawValue);
    Canvas.hide(strokes:)((Swift::OpaquePointer)v30);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v27);
  }
}

Swift::Void __swiftcall Canvas.hide(strokes:)(Swift::OpaquePointer strokes)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ObjectType;
  void *v33;
  id v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  _QWORD *v37;
  int64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  Class isa;
  id v43;
  id v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  id v64;
  unint64_t v65;
  _QWORD *rawValue;
  uint64_t v67;
  uint64_t v68;

  rawValue = strokes._rawValue;
  v2 = type metadata accessor for PKStroke();
  v67 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v57 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for PKDrawing();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = v21;
  v25 = MEMORY[0x1E0C80A78](v23, v24);
  v27 = (char *)&v57 - v26;
  v28 = (void *)(*(uint64_t (**)(double))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x320))(v25);
  if (!v28)
    return;
  v63 = v22;
  v64 = v28;
  v61 = v27;
  v29 = Canvas.editingView.getter();
  v31 = v30;
  ObjectType = swift_getObjectType();
  v33 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v31 + 16))(ObjectType, v31);

  if (!v33)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
    goto LABEL_14;
  }
  v34 = objc_msgSend(v33, sel_drawing);

  v35 = v63;
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

  v36 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  v36(v17, v35, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
LABEL_14:

    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for PKDrawing?);
    return;
  }
  v59 = v19;
  v60 = v13;
  v58 = v36;
  v36(v61, v17, v18);
  v37 = rawValue;
  v38 = rawValue[2];
  v39 = MEMORY[0x1E0DEE9D8];
  if (v38)
  {
    v57 = v18;
    v68 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38, 0);
    v65 = (*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
    v40 = (char *)v37 + v65;
    v41 = *(_QWORD *)(v67 + 72);
    rawValue = *(_QWORD **)(v67 + 16);
    while (1)
    {
      ((void (*)(char *, char *, uint64_t))rawValue)(v5, v40, v2);
      isa = PKStroke._bridgeToObjectiveC()().super.isa;
      v43 = -[objc_class copyForMutation](isa, sel_copyForMutation);

      if (!v43)
        break;
      objc_msgSend(v43, sel__setHidden_, 1);
      v44 = v43;
      static PKStroke._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(char *, uint64_t))(v67 + 8))(v5, v2);
      v39 = v68;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v39 + 16) + 1, 1);
        v39 = v68;
      }
      v46 = *(_QWORD *)(v39 + 16);
      v45 = *(_QWORD *)(v39 + 24);
      if (v46 >= v45 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
        v39 = v68;
      }
      *(_QWORD *)(v39 + 16) = v46 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v67 + 32))(v39 + v65 + v46 * v41, v9, v2);
      v68 = v39;
      v40 += v41;
      if (!--v38)
      {
        v18 = v57;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    v47 = type metadata accessor for TaskPriority();
    v48 = (uint64_t)v60;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v60, 1, 1, v47);
    v49 = v59;
    v50 = v63;
    v51 = v61;
    (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v63, v61, v18);
    type metadata accessor for MainActor();
    v52 = v64;
    v53 = static MainActor.shared.getter();
    v54 = (*(unsigned __int8 *)(v49 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
    v55 = (char *)swift_allocObject();
    v56 = MEMORY[0x1E0DF06E8];
    *((_QWORD *)v55 + 2) = v53;
    *((_QWORD *)v55 + 3) = v56;
    *((_QWORD *)v55 + 4) = v52;
    *((_QWORD *)v55 + 5) = v39;
    v58(&v55[v54], v50, v18);
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm(v48, (uint64_t)&async function pointer to partial apply for closure #2 in Canvas.hide(strokes:), (uint64_t)v55);

    swift_release();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v18);
  }
}

Swift::Void __swiftcall Canvas.startCheckingForOldEraserStrokes()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  _QWORD v19[6];

  v4 = *(_QWORD *)((char *)v1 + direct field offset for Canvas.eraserCheckingIndex);
  v5 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_4;
  }
  v0 = v1;
  v6 = *v1;
  v7 = *MEMORY[0x1E0DEEDD8];
  *(_QWORD *)((char *)v1 + direct field offset for Canvas.eraserCheckingIndex) = v5;
  v2 = &unk_1EDB80000;
  if (*(_QWORD *)((char *)v1 + direct field offset for Canvas.removeOldEraserStrokesTimer))
    return;
  v3 = v7 & v6;
  if (one-time initialization token for logger != -1)
    goto LABEL_9;
LABEL_4:
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)logger);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1DDB0F000, v9, v10, "Start checking for old eraser strokes", v11, 2u);
    MEMORY[0x1DF0E6558](v11, -1, -1);
  }

  v12 = (void *)objc_opt_self();
  v13 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = *(_OWORD *)(v3 + 1976);
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(v3 + 1992);
  *(_QWORD *)(v14 + 40) = v13;
  v19[4] = partial apply for closure #1 in Canvas.startCheckingForOldEraserStrokes();
  v19[5] = v14;
  v19[0] = MEMORY[0x1E0C809B0];
  v19[1] = 1107296256;
  v19[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v19[3] = &block_descriptor_234;
  v15 = _Block_copy(v19);
  swift_release();
  v16 = objc_msgSend(v12, sel_scheduledTimerWithTimeInterval_repeats_block_, 1, v15, 30.0);
  _Block_release(v15);
  v17 = v2[336];
  v18 = *(void **)((char *)v0 + v17);
  *(_QWORD *)((char *)v0 + v17) = v16;

}

uint64_t Canvas.updateMultipeer<A>(_:)()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + direct field offset for Canvas.multipeerConnection))
  {
    swift_retain();
    CRMulticastSyncManager.merge<A>(_:sendDelta:)();
    return swift_release();
  }
  return result;
}

uint64_t Canvas.mergeToSelf<A>(_:from:)()
{
  uint64_t v0;
  void *v1;
  id v2;
  char v3;

  v1 = *(void **)(v0 + direct field offset for Canvas.paperView);
  swift_beginAccess();
  type metadata accessor for Capsule();
  v2 = v1;
  v3 = Capsule.merge<A>(_:)();
  swift_endAccess();

  return v3 & 1;
}

Swift::Void __swiftcall Canvas.mergeToCanvasElements()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char v29;
  char v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  id v55;
  char v56;
  void *v57;
  id v58;
  uint64_t v59;
  _QWORD *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v1 = v0;
  v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v0) + 0x7B8);
  v3 = *(_QWORD *)(*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v0) + 0x7C0) + 16);
  v74 = type metadata accessor for Capsule();
  v4 = *(_QWORD *)(v74 - 8);
  MEMORY[0x1E0C80A78](v74, v5);
  v7 = (char *)&v65 - v6;
  v8 = type metadata accessor for Logger();
  v68 = *(_QWORD *)(v8 - 8);
  v69 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v67 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  v14 = *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (!v14)
  {
    __break(1u);
    goto LABEL_41;
  }
  v15 = *(_QWORD *)(v14 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
  MEMORY[0x1E0C80A78](v10, v11);
  *(&v65 - 2) = (uint64_t)v1;
  swift_bridgeObjectRetain();
  v16 = specialized _NativeSet.filter(_:)((uint64_t)partial apply for closure #1 in Canvas.mergeToCanvasElements(), (uint64_t)(&v65 - 4), v15);
  v65 = 0;
  v17 = *(char **)&v1[v13];
  if (!v17)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v18 = v16;
  v70 = v7;
  v71 = v4;
  v72 = v3;
  v73 = v2;
  v19 = *(_QWORD *)&v17[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
  v20 = *(_QWORD *)&v17[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
  v7 = *(char **)&v17[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
  v21 = v17[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  v22 = v17;
  CanvasElementResizeView.selection.setter(v18, v20, (uint64_t)v7, v21);

  v66 = v13;
  v23 = *(_QWORD *)&v1[v13];
  if (!v23)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v24 = v1;
  v25 = v23 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
  v26 = *(_QWORD *)v25;
  v27 = *(_QWORD *)(v25 + 8);
  v28 = *(char **)(v25 + 16);
  v29 = *(_BYTE *)(v25 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized static Set.== infix(_:_:)(v19, v26) & 1) != 0)
  {
    v30 = specialized static Set.== infix(_:_:)(v20, v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31 = v24;
    if ((v30 & 1) != 0)
    {
      if ((v21 & 1) != 0)
      {
        if ((v29 & 1) != 0)
        {
LABEL_38:
          v62 = *(void **)&v31[direct field offset for Canvas.paperView];
          v63 = (uint64_t)v70;
          CanvasElementView.canvasElement.getter((uint64_t)v70);
          v64 = v62;
          CanvasElementView.merge<A>(_:)();

          (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v63, v74);
          objc_msgSend(v31, sel_setNeedsLayout);
          return;
        }
      }
      else
      {
        if (v7 == v28)
          v56 = v29;
        else
          v56 = 1;
        if ((v56 & 1) == 0)
          goto LABEL_38;
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31 = v1;
  }
  if (one-time initialization token for miniMenuLogger != -1)
    swift_once();
  v32 = v69;
  v33 = __swift_project_value_buffer(v69, (uint64_t)miniMenuLogger);
  v35 = v67;
  v34 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v67, v33, v32);
  v7 = v31;
  v36 = Logger.logObject.getter();
  v37 = static os_log_type_t.info.getter();
  v38 = os_log_type_enabled(v36, v37);
  v39 = v66;
  if (v38)
  {
    v40 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v40 = 134217984;
    v41 = *(_QWORD *)&v31[v39];
    if (!v41)
    {
LABEL_44:

      __break(1u);
      goto LABEL_45;
    }
    v42 = v40;
    v75 = *(_QWORD *)(*(_QWORD *)(v41 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection) + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_1DDB0F000, v36, v37, "Changing selection to have %ld elements", v42, 0xCu);
    MEMORY[0x1DF0E6558](v42, -1, -1);
  }
  else
  {

  }
  v43 = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v35, v32);
  MEMORY[0x1E0C80A78](v43, v44);
  *(&v65 - 2) = (uint64_t)v7;
  AnyCanvas.updateCanvasState(_:)();
  if ((objc_msgSend(v7, sel_isFirstResponder, v65) & 1) != 0)
    goto LABEL_32;
  v45 = *(void **)&v31[v39];
  if (v45)
  {
    v46 = v45;
    v47 = swift_bridgeObjectRetain();
    v48 = specialized Sequence.compactMap<A>(_:)(v47, (uint64_t)v46);

    swift_bridgeObjectRelease();
    if (v48 >> 62)
    {
      swift_bridgeObjectRetain();
      v49 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v49 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (!v49)
    {
LABEL_32:
      v57 = *(void **)&v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView];
      if (v57)
      {
        v58 = v57;
        HandwritingReflowView.updateForNewSelection()();

      }
      Canvas.canvasSelectionDidChange()();
      v59 = *(_QWORD *)&v31[v39];
      if (v59)
      {
        v60 = (_QWORD *)(v59 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
        if (!*(_QWORD *)(*v60 + 16) && !*(_QWORD *)(v60[1] + 16))
        {
          v61 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v7) + 0x320))();
          objc_msgSend(v61, sel__clearSelectionIfNecessary);

        }
        goto LABEL_38;
      }
      goto LABEL_43;
    }
    v50 = v7;
    v51 = objc_msgSend(v50, sel_window);
    if (v51)
    {
      v52 = v51;
      v53 = objc_msgSend((id)objc_opt_self(), sel_activeToolPickerForWindow_, v51);
      if (v53)
      {
        v54 = v53;
        v55 = objc_msgSend(v53, sel__visibilityUpdatesEnabled);
        objc_msgSend(v54, sel__setVisibilityUpdatesEnabled_, 0);
        objc_msgSend(v50, sel_becomeFirstResponder);
        objc_msgSend(v54, sel__setVisibilityUpdatesEnabled_, v55);

        v50 = (char *)v54;
LABEL_31:

        goto LABEL_32;
      }

    }
    objc_msgSend(v50, sel_becomeFirstResponder);
    goto LABEL_31;
  }
LABEL_45:
  __break(1u);
}

Swift::Void __swiftcall Canvas.mergeToFilesAndMultipeer()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Capsule();
  MEMORY[0x1E0C80A78](v0, v0);
  v2 = type metadata accessor for AnySubscriber();
  MEMORY[0x1E0C80A78](v2, v1);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  type metadata accessor for Canvas.PaperViewCanvasSubscription();
}

Swift::Void __swiftcall Canvas.mergeToXPC()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = type metadata accessor for Capsule();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v7 - v4;
  v6 = (_QWORD *)(v0 + direct field offset for Canvas.xpcMulticast);
  swift_beginAccess();
  if (*v6)
  {
    CanvasElementView.canvasElement.getter((uint64_t)v5);
    swift_retain();
    CRMulticastSyncManager.sync(_:sendDelta:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
}

uint64_t Canvas.mergeUndoable<A>(_:)()
{
  return Canvas.undoable(newChange:persistSelection:action:)(0, 0, (uint64_t (*)(double))partial apply for closure #1 in Canvas.mergeUndoable<A>(_:));
}

Swift::Void __swiftcall Canvas.updateDrawingTiles()()
{
  _QWORD *v0;
  uint64_t (*v1)(void);
  void *v2;
  void *v3;
  id v4;

  v1 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x320);
  v2 = (void *)v1();
  objc_msgSend(v2, sel__layoutSubviews);

  v3 = (void *)v1();
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v3, sel_updateExistingTiles_, 1);

  }
}

Swift::Void __swiftcall Canvas.transformStrokes(_:)(Swift::OpaquePointer a1)
{
  Canvas.undoable(newChange:persistSelection:action:)(1, 0, (uint64_t (*)(double))partial apply for closure #1 in Canvas.transformStrokes(_:));
}

id Canvas.hitMiniMenuForCanvasElementView(_:location:)()
{
  uint64_t v0;
  uint64_t v1;
  id result;
  unint64_t v3;
  unint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  UIView_optional *v9;
  uint64_t v10;
  uint64_t v11;
  UIEvent_optional v12;

  v1 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  result = objc_msgSend(*(id *)(v0 + direct field offset for Canvas.paperView), sel_convertPoint_toView_, *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView));
  v5 = *(void **)(v0 + v1);
  if (v5)
  {
    v6 = v3;
    v7 = v4;
    v8 = v5;
    v12.value.super.isa = 0;
    CanvasElementResizeView.hitTestMiniMenu(_:with:)(v9, (CGPoint)__PAIR128__(v7, v6), v12);
    v11 = v10;

    return (id)v11;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t Canvas.hitChromeForCanvasElementView(_:location:isStylus:)(double a1, double a2, uint64_t a3, int a4)
{
  return specialized Canvas.hitChromeForCanvasElementView(_:location:isStylus:)(a4, a1, a2);
}

id Canvas.itemProvider(for:)(_QWORD *a1, _QWORD *a2, _QWORD *a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t ObjCClassFromMetadata;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(unint64_t, char *, uint64_t);
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t aBlock;
  uint64_t v30;
  id (*v31)(uint64_t, void *);
  void *v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;

  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8, v11);
  v12 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v27 - v15;
  if (!a1[2] && !a2[2])
    return 0;
  Canvas.createNewPaper(from:)(a1, a2, a3, a4 & 1, (uint64_t)&v27 - v15);
  v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB36C8]), sel_init);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v27 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v27(v12, v16, v8);
  v19 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v20 = swift_allocObject();
  v28 = v9;
  v21 = *(void (**)(unint64_t, char *, uint64_t))(v9 + 32);
  v21(v20 + v19, v12, v8);
  v33 = partial apply for closure #1 in Canvas.itemProvider(for:);
  v34 = v20;
  aBlock = MEMORY[0x1E0C809B0];
  v30 = 1107296256;
  v31 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed @escaping @callee_guaranteed @Sendable (@guaranteed NSItemProviderWriting?, @guaranteed Error?) -> ()) -> (@owned NSProgress?);
  v32 = &block_descriptor_213;
  v22 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v17, sel_registerObjectOfClass_visibility_loadHandler_, ObjCClassFromMetadata, 0, v22);
  _Block_release(v22);
  v23 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
  v27(v12, v16, v8);
  v24 = swift_allocObject();
  v21(v24 + v19, v12, v8);
  v33 = partial apply for closure #2 in Canvas.itemProvider(for:);
  v34 = v24;
  aBlock = MEMORY[0x1E0C809B0];
  v30 = 1107296256;
  v31 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed @escaping @callee_guaranteed @Sendable (@in_guaranteed URL?, @unowned Bool, @guaranteed Error?) -> ()) -> (@owned NSProgress?);
  v32 = &block_descriptor_219;
  v25 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v17, sel_registerFileRepresentationForTypeIdentifier_fileOptions_visibility_loadHandler_, v23, 0, 0, v25);
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v28 + 8))(v16, v8);
  return v17;
}

uint64_t Canvas.pasteboardRepresentations(_:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t *v52;
  NSString *v53;
  char *v54;
  void (*v55)(char *, uint64_t);
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t result;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t *v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _OWORD v87[2];
  __int128 v88;
  __int128 v89;
  uint64_t v90;

  v76 = a4;
  v77 = a3;
  v7 = *MEMORY[0x1E0DEEDD8] & *v4;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v80 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v81 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v67 - v18;
  v20 = *(_QWORD *)(v7 + 1976);
  v78 = *(_QWORD *)(v7 + 1984);
  v79 = v20;
  v21 = type metadata accessor for Capsule();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v23);
  if (!*(_QWORD *)(a1 + 16) && !*(_QWORD *)(a2 + 16))
    return MEMORY[0x1E0DEE9D8];
  v71 = v9;
  v72 = v13;
  v73 = v8;
  v82 = (uint64_t *)a2;
  v74 = (char *)&v67 - v24;
  v85 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v25 = v4;
  v26 = swift_bridgeObjectRetain();
  v27 = specialized Sequence.compactMap<A>(_:)(v26, v25);
  v84 = a1;
  swift_bridgeObjectRelease();
  v83 = v25;

  v28 = v27 >> 62;
  if (!(v27 >> 62))
  {
    v29 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_5;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
LABEL_5:
    v75 = v22;
    if (v29 == 1 && !v82[2])
    {
      if (v28)
      {
        swift_bridgeObjectRetain();
        if (!_CocoaArrayWrapper.endIndex.getter())
        {
LABEL_50:
          swift_bridgeObjectRelease();
          goto LABEL_7;
        }
      }
      else
      {
        v46 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v46)
          goto LABEL_50;
      }
      if ((v27 & 0xC000000000000001) != 0)
        goto LABEL_54;
      if (!*(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        result = swift_bridgeObjectRelease();
        __break(1u);
        return result;
      }
      v47 = *(id *)(v27 + 32);
LABEL_41:
      v48 = v47;
      v49 = swift_bridgeObjectRelease();
      v50 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v48) + 0x340))(v49);

      if (v50)
        break;
    }
LABEL_7:
    v70 = v19;
    if (v28)
    {
      swift_bridgeObjectRetain();
      v30 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      v30 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    v69 = v21;
    if (!v30)
    {
LABEL_18:
      swift_bridgeObjectRelease();
      if (!v29)
      {
        swift_bridgeObjectRelease();
        v33 = MEMORY[0x1E0DEE9D8];
LABEL_30:
        v39 = v84;
        v40 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
        *(_QWORD *)&v88 = v40;
        v41 = *(_QWORD *)(v33 + 16);
        v21 = v69;
        v42 = (uint64_t)v74;
        if (v41)
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v43 = 0;
          do
          {
            v44 = *(_QWORD *)(v33 + 8 * v43++ + 32);
            *(_QWORD *)&v87[0] = v44;
            closure #3 in Canvas.pasteboardRepresentations(_:)((uint64_t *)&v88, (uint64_t *)v87, &v86);
            swift_bridgeObjectRelease();
            v45 = v86;
            *(_QWORD *)&v88 = v86;
          }
          while (v41 != v43);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          v45 = v40;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v85 = v45;
        v19 = v70;
        goto LABEL_44;
      }
      *(_QWORD *)&v88 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29 & ~(v29 >> 63), 0);
      if ((v29 & 0x8000000000000000) == 0)
      {
        v68 = v12;
        v32 = 0;
        v33 = v88;
        do
        {
          if ((v27 & 0xC000000000000001) != 0)
            v34 = (_QWORD *)MEMORY[0x1DF0E4D64](v32, v27);
          else
            v34 = *(id *)(v27 + 8 * v32 + 32);
          v35 = v34;
          v36 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v34) + 0x340))();

          *(_QWORD *)&v88 = v33;
          v38 = *(_QWORD *)(v33 + 16);
          v37 = *(_QWORD *)(v33 + 24);
          if (v38 >= v37 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
            v33 = v88;
          }
          ++v32;
          *(_QWORD *)(v33 + 16) = v38 + 1;
          *(_QWORD *)(v33 + 8 * v38 + 32) = v36;
        }
        while (v29 != v32);
        swift_bridgeObjectRelease();
        v12 = v68;
        goto LABEL_30;
      }
      __break(1u);
LABEL_54:
      v47 = (_QWORD *)MEMORY[0x1DF0E4D64](0, v27);
      goto LABEL_41;
    }
    v28 = v27 & 0xC000000000000001;
    v21 = 4;
    while (1)
    {
      v31 = v28 ? (char *)MEMORY[0x1DF0E4D64](v21 - 4, v27) : (char *)*(id *)(v27 + 8 * v21);
      v19 = v31;
      v22 = v21 - 3;
      if (__OFADD__(v21 - 4, 1))
        break;
      type metadata accessor for ShapeView();
      if (!swift_dynamicCastClass())
      {
        swift_bridgeObjectRelease_n();

        v19 = v70;
        v21 = v69;
        goto LABEL_43;
      }

      ++v21;
      if (v22 == v30)
        goto LABEL_18;
    }
    __break(1u);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v85 = v50;
LABEL_43:
  v42 = (uint64_t)v74;
  v39 = v84;
LABEL_44:
  v51 = v81;
  v52 = v82;
  Canvas.createSubCanvasElement(from:)(v39, (uint64_t)v82, v77, v76 & 1, v42);
  v53 = NSTemporaryDirectory();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  v54 = v80;
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v71 + 8))(v54, v73);
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v55 = *(void (**)(char *, uint64_t))(v72 + 8);
  v55(v51, v12);
  type metadata accessor for CRDataStoreBundle();
  type metadata accessor for CRContext();
  v90 = 0;
  v88 = 0u;
  v89 = 0u;
  v56 = (void *)MEMORY[0x1DF0E3C90](0, &v88);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v88, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  static CRDataStoreBundle.writePaper(_:model:url:)();

  v57 = URL.dataRepresentation.getter();
  *((_QWORD *)&v89 + 1) = MEMORY[0x1E0CB0338];
  *(_QWORD *)&v88 = v57;
  *((_QWORD *)&v88 + 1) = v58;
  outlined init with take of Any(&v88, v87);
  v59 = v85;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v86 = v59;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v87, 0x6C7070612E6D6F63, 0xEF72657061702E65, isUniquelyReferenced_nonNull_native);
  v61 = v86;
  swift_bridgeObjectRelease();
  v62 = Canvas.pasteboardReflowRepresentations(_:)(v84, v52);
  if (v62)
  {
    v63 = v62;
    v64 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v88 = v61;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v63, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v64, (uint64_t)&v88);
    v61 = v88;
    swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<[String : Any]>);
  v65 = swift_allocObject();
  *(_OWORD *)(v65 + 16) = xmmword_1DDF32CF0;
  *(_QWORD *)(v65 + 32) = v61;
  v55(v19, v12);
  (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v42, v21);
  return v65;
}

unint64_t Canvas.pasteboardReflowRepresentations(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  _OWORD v12[2];
  __int128 v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16) && !a2[2])
    return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView);
  if (v5 && *(_QWORD *)(v5 + OBJC_IVAR____TtC8PaperKit21HandwritingReflowView_reflowTextbox))
  {
    swift_retain();
    v6 = ReflowLayoutManager.reflowWords(for:)(a2);
    swift_release();
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    dispatch thunk of PropertyListEncoder.outputFormat.setter();
    specialized static ReflowEnum.typeArray(_:)(v6);
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [ReflowEnum]);
    lazy protocol witness table accessor for type Color? and conformance <A> A?(&lazy protocol witness table cache variable for type [ReflowEnum] and conformance <A> [A], &demangling cache variable for type metadata for [ReflowEnum], (uint64_t (*)(void))lazy protocol witness table accessor for type ReflowEnum and conformance ReflowEnum, MEMORY[0x1E0DEAF10]);
    v7 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    v9 = v8;
    swift_bridgeObjectRelease();
    v14 = MEMORY[0x1E0CB0338];
    *(_QWORD *)&v13 = v7;
    *((_QWORD *)&v13 + 1) = v9;
    outlined init with take of Any(&v13, v12);
    outlined copy of Data._Representation(v7, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0xD00000000000001DLL, 0x80000001DDF59BF0, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v7, v9);
    swift_release();
  }
  return v4;
}

uint64_t Canvas.createElementAndStrokeImages(elementMembers:strokeMembers:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v9 + 144) = a7;
  *(_QWORD *)(v9 + 152) = v8;
  *(_BYTE *)(v9 + 50) = a8;
  *(_QWORD *)(v9 + 128) = a5;
  *(_QWORD *)(v9 + 136) = a6;
  *(_BYTE *)(v9 + 49) = a4;
  *(_QWORD *)(v9 + 112) = a2;
  *(_QWORD *)(v9 + 120) = a3;
  *(_QWORD *)(v9 + 104) = a1;
  type metadata accessor for Paper();
  *(_QWORD *)(v9 + 160) = swift_task_alloc();
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  *(_QWORD *)(v9 + 168) = v10;
  *(_QWORD *)(v9 + 176) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v9 + 184) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(_QWORD *)(v9 + 192) = static MainActor.shared.getter();
  *(_QWORD *)(v9 + 200) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v9 + 208) = v11;
  return swift_task_switch();
}

uint64_t Canvas.createElementAndStrokeImages(elementMembers:strokeMembers:)()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  CGFloat *v24;
  _QWORD *v25;
  uint64_t (*v26)(uint64_t);
  _QWORD *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  CGFloat *v31;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t, char, char);
  CGRect v34;
  CGRect v35;
  CGRect v36;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = Canvas.canvasElementBounds(_:)(*(_QWORD *)(v0 + 104));
  v4 = v3;
  v6 = v5;
  v8 = v7;
  *(_QWORD *)(v0 + 96) = v1;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance Set<A>, (uint64_t *)&demangling cache variable for type metadata for Set<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>, MEMORY[0x1E0DEB3D0]);
  v9 = Canvas.strokeBounds<A>(_:)();
  v11 = v10;
  v13 = v12;
  v15 = v14;
  swift_bridgeObjectRelease();
  v34.origin.x = v2;
  v34.origin.y = v4;
  v34.size.width = v6;
  v34.size.height = v8;
  v36.origin.x = v9;
  v36.origin.y = v11;
  v36.size.width = v13;
  v36.size.height = v15;
  v35 = CGRectUnion(v34, v36);
  x = v35.origin.x;
  y = v35.origin.y;
  width = v35.size.width;
  height = v35.size.height;
  *(CGRect *)(v0 + 216) = v35;
  if (*(_QWORD *)(v1 + 16))
  {
    v20 = v0 + 16;
    Canvas.createNewPaper(from:)(*(_QWORD **)(v0 + 128), *(_QWORD **)(v0 + 136), *(_QWORD **)(v0 + 144), *(_BYTE *)(v0 + 50) & 1, *(_QWORD *)(v0 + 184));
    v21 = objc_msgSend((id)objc_opt_self(), sel_mainScreen);
    objc_msgSend(v21, sel_scale);
    v23 = v22;

    type metadata accessor for ImageRenderer();
    v24 = (CGFloat *)swift_allocObject();
    v24[2] = width;
    v24[3] = height;
    *((_QWORD *)v24 + 4) = v23;
    *(_QWORD *)(v0 + 248) = specialized CanvasElementImageRenderer.__allocating_init(renderer:)((uint64_t)v24);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
    Capsule<>.root.getter();
    *(CGFloat *)(v0 + 16) = x;
    *(CGFloat *)(v0 + 24) = y;
    *(CGFloat *)(v0 + 32) = width;
    *(CGFloat *)(v0 + 40) = height;
    *(_BYTE *)(v0 + 48) = 0;
    v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char))((char *)&async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)
                                                                        + async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:));
    v25 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 256) = v25;
    v26 = Canvas.createElementAndStrokeImages(elementMembers:strokeMembers:);
LABEL_5:
    *v25 = v0;
    v25[1] = v26;
    return v33(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 184), v20, 0, 0);
  }
  *(_QWORD *)(v0 + 272) = 0;
  v27 = *(_QWORD **)(v0 + 104);
  if (v27[2])
  {
    v20 = v0 + 56;
    Canvas.createNewPaper(from:)(v27, *(_QWORD **)(v0 + 112), *(_QWORD **)(v0 + 120), *(_BYTE *)(v0 + 49) & 1, *(_QWORD *)(v0 + 184));
    v28 = objc_msgSend((id)objc_opt_self(), sel_mainScreen);
    objc_msgSend(v28, sel_scale);
    v30 = v29;

    type metadata accessor for ImageRenderer();
    v31 = (CGFloat *)swift_allocObject();
    v31[2] = width;
    v31[3] = height;
    *((_QWORD *)v31 + 4) = v30;
    *(_QWORD *)(v0 + 280) = specialized CanvasElementImageRenderer.__allocating_init(renderer:)((uint64_t)v31);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
    Capsule<>.root.getter();
    *(CGFloat *)(v0 + 56) = x;
    *(CGFloat *)(v0 + 64) = y;
    *(CGFloat *)(v0 + 72) = width;
    *(CGFloat *)(v0 + 80) = height;
    *(_BYTE *)(v0 + 88) = 0;
    v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char))((char *)&async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)
                                                                        + async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:));
    v25 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 288) = v25;
    v26 = Canvas.createElementAndStrokeImages(elementMembers:strokeMembers:);
    goto LABEL_5;
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(0, *(_QWORD *)(v0 + 272));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, char, char);

  v2 = *(_QWORD *)(v0 + 176);
  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 168);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  *(_QWORD *)(v0 + 272) = *(_QWORD *)(v0 + 264);
  v4 = *(_QWORD **)(v0 + 104);
  if (v4[2])
  {
    v6 = *(_QWORD *)(v0 + 232);
    v5 = *(_QWORD *)(v0 + 240);
    v8 = *(_QWORD *)(v0 + 216);
    v7 = *(_QWORD *)(v0 + 224);
    Canvas.createNewPaper(from:)(v4, *(_QWORD **)(v0 + 112), *(_QWORD **)(v0 + 120), *(_BYTE *)(v0 + 49) & 1, *(_QWORD *)(v0 + 184));
    v9 = objc_msgSend((id)objc_opt_self(), sel_mainScreen);
    objc_msgSend(v9, sel_scale);
    v11 = v10;

    type metadata accessor for ImageRenderer();
    v12 = (_QWORD *)swift_allocObject();
    v12[2] = v6;
    v12[3] = v5;
    v12[4] = v11;
    *(_QWORD *)(v0 + 280) = specialized CanvasElementImageRenderer.__allocating_init(renderer:)((uint64_t)v12);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
    Capsule<>.root.getter();
    *(_QWORD *)(v0 + 56) = v8;
    *(_QWORD *)(v0 + 64) = v7;
    *(_QWORD *)(v0 + 72) = v6;
    *(_QWORD *)(v0 + 80) = v5;
    *(_BYTE *)(v0 + 88) = 0;
    v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char))((char *)&async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)
                                                                        + async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:));
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 288) = v13;
    *v13 = v0;
    v13[1] = Canvas.createElementAndStrokeImages(elementMembers:strokeMembers:);
    return v15(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 184), v0 + 56, 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(0, *(_QWORD *)(v0 + 272));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 176);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, _QWORD))(v0 + 8))(v4, *(_QWORD *)(v0 + 272));
}

uint64_t Canvas.createElementAndStrokeImages(elementMembers:strokeMembers:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 264) = a1;
  swift_task_dealloc();
  outlined destroy of PKStrokeProperties(v2, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 296) = a1;
  swift_task_dealloc();
  outlined destroy of PKStrokeProperties(v2, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
  return swift_task_switch();
}

uint64_t Canvas.createNewPaper(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  void *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  void *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  int v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;

  v55 = a4;
  v53 = a2;
  v54 = a3;
  v61 = a5;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v57 = *(_QWORD *)(v7 - 8);
  v58 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v56 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for CRKeyPath();
  v10 = *(_QWORD *)(v62 - 8);
  MEMORY[0x1E0C80A78](v62, v11);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v59 = (char *)&v51 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v51 - v23;
  v25 = type metadata accessor for Paper();
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v51 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = v5;
  v30 = swift_bridgeObjectRetain();
  v60 = specialized Sequence.compactMap<A>(_:)(v30, v29);
  v52 = a1;
  swift_bridgeObjectRelease();
  v51 = v29;

  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  v63 = 0u;
  v64 = 0u;
  CRRegister.init(wrappedValue:)();
  v63 = 0u;
  v64 = 0u;
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v63 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v24, 1, 1, v31);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v24, (uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  *(_QWORD *)&v63 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  lazy protocol witness table accessor for type Color? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type Color? and conformance <A> A?, (uint64_t *)&demangling cache variable for type metadata for Color?, (uint64_t (*)(void))lazy protocol witness table accessor for type Color and conformance Color, MEMORY[0x1E0D12D70]);
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v63 = 0;
  *((_QWORD *)&v63 + 1) = 0xE000000000000000;
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v63 = 0;
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12350]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12358]);
  CROrderedSet.init()();
  *(_QWORD *)&v28[*(int *)(v25 + 48)] = MEMORY[0x1E0DEE9E0];
  static CRKeyPath.unique.getter();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v32 = v60;
  Capsule<>.init(_:id:)();
  if (!(v32 >> 62))
  {
    v33 = *(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v33)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease();
    v36 = MEMORY[0x1E0DEE9D8];
LABEL_14:
    v43 = specialized Set.init<A>(_:)(v36);
    v44 = swift_bridgeObjectRelease();
    MEMORY[0x1E0C80A78](v44, v45);
    *(&v51 - 6) = v51;
    *(&v51 - 5) = (_QWORD *)v43;
    v46 = v53;
    *(&v51 - 4) = v52;
    *(&v51 - 3) = v46;
    *(&v51 - 2) = v54;
    *((_BYTE *)&v51 - 8) = v55 & 1;
    v47 = v58;
    v48 = v61;
    Capsule.callAsFunction<A>(_:)();
    swift_bridgeObjectRelease();
    v49 = v56;
    Capsule.copy()();
    v50 = v57;
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v48, v47);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v50 + 32))(v48, v49, v47);
  }
  swift_bridgeObjectRetain();
  v33 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v33)
    goto LABEL_13;
LABEL_3:
  *(_QWORD *)&v63 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33 & ~(v33 >> 63), 0);
  if ((v33 & 0x8000000000000000) == 0)
  {
    v59 = 0;
    v35 = 0;
    v36 = v63;
    v37 = v32 & 0xC000000000000001;
    v38 = v32;
    do
    {
      if (v37)
        v39 = (_QWORD *)MEMORY[0x1DF0E4D64](v35, v32);
      else
        v39 = *(id *)(v32 + 8 * v35 + 32);
      v40 = v39;
      (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v39) + 0xE0))();

      *(_QWORD *)&v63 = v36;
      v42 = *(_QWORD *)(v36 + 16);
      v41 = *(_QWORD *)(v36 + 24);
      if (v42 >= v41 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1);
        v36 = v63;
      }
      ++v35;
      *(_QWORD *)(v36 + 16) = v42 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v36+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v42, v13, v62);
      v32 = v38;
    }
    while (v33 != v35);
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

double Canvas.canvasElementBounds(_:)(uint64_t a1)
{
  uint64_t v1;
  double x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  CGRect v10;
  CGRect v11;

  v1 = specialized Sequence.compactMap<A>(_:)((void (*)(_OWORD *__return_ptr, char *))partial apply for closure #1 in Canvas.canvasElementBounds(_:), (uint64_t)&v9, a1);
  x = *MEMORY[0x1E0C9D628];
  y = *(double *)(MEMORY[0x1E0C9D628] + 8);
  width = *(double *)(MEMORY[0x1E0C9D628] + 16);
  height = *(double *)(MEMORY[0x1E0C9D628] + 24);
  v6 = *(_QWORD *)(v1 + 16);
  if (v6)
  {
    v7 = v1 + 56;
    do
    {
      v10.origin.x = x;
      v10.origin.y = y;
      v10.size.width = width;
      v10.size.height = height;
      v11 = CGRectUnion(v10, *(CGRect *)(v7 - 24));
      x = v11.origin.x;
      y = v11.origin.y;
      width = v11.size.width;
      height = v11.size.height;
      v7 += 32;
      --v6;
    }
    while (v6);
  }
  swift_bridgeObjectRelease();
  return x;
}

UIImage_optional __swiftcall Canvas.imageOf(canvasElementViews:in:)(Swift::OpaquePointer canvasElementViews, __C::CGRect_optional *in)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  objc_class *v33;
  objc_class *v34;
  Swift::Bool v35;
  void *v36;
  _QWORD v37[4];
  _QWORD aBlock[6];
  __int128 v39;
  double v40[3];
  id v41;
  _OWORD v42[2];
  char v43;
  UIImage_optional result;

  v3 = v2;
  v5 = swift_bridgeObjectRetain();
  v6 = specialized Set.init<A>(_:)(v5);
  swift_bridgeObjectRelease();
  v7 = Canvas.editingView.getter();
  v9 = v8;
  ObjectType = swift_getObjectType();
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 56))(ObjectType, v9);

  v12 = specialized _ArrayProtocol.filter(_:)(v11, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v12 >> 62)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    v13 = _bridgeCocoaArray<A>(_:)();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    v13 = v12;
  }
  swift_bridgeObjectRelease();
  v41 = 0;
  v14 = outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)in, (uint64_t)v42, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
  if ((v43 & 1) != 0)
  {
    v16 = MEMORY[0x1E0C80A78](v14, v15);
    v37[2] = v3;
    v20 = specialized Sequence.reduce<A>(_:_:)((void (*)(_QWORD *__return_ptr, double *, id *))partial apply for closure #2 in Canvas.imageOf(canvasElementViews:in:), v16, v17, v18, v19, (uint64_t)v37, v13);
    v22 = v21;
    v24 = v23;
    *(double *)&v39 = v20;
    *((_QWORD *)&v39 + 1) = v25;
    v40[0] = v21;
    v40[1] = v23;
  }
  else
  {
    v39 = v42[0];
    *(_OWORD *)v40 = v42[1];
    v26 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x320))(v14);
    v27 = objc_msgSend(v26, sel_selectionView);

    v41 = v27;
    v24 = v40[1];
    v22 = v40[0];
  }
  v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3828]), sel_initWithSize_, v22, v24);
  v29 = (_QWORD *)swift_allocObject();
  v29[2] = &v41;
  v29[3] = &v39;
  v29[4] = v13;
  v29[5] = v3;
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = partial apply for closure #3 in Canvas.imageOf(canvasElementViews:in:);
  *(_QWORD *)(v30 + 24) = v29;
  aBlock[4] = partial apply for thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  aBlock[5] = v30;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  aBlock[3] = &block_descriptor_193;
  v31 = _Block_copy(aBlock);
  v32 = v3;
  swift_retain();
  swift_release();
  v33 = (objc_class *)objc_msgSend(v28, sel_imageWithActions_, v31);

  _Block_release(v31);
  LOBYTE(v28) = swift_isEscapingClosureAtFileLocation();
  v34 = (objc_class *)swift_release();
  if ((v28 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v36 = v41;
    swift_release();

    v34 = v33;
  }
  result.value.super.isa = v34;
  result.is_nil = v35;
  return result;
}

Swift::Void __swiftcall Canvas.updateToolPickerContextualEditingView()()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  id v7;
  uint64_t ObjectType;
  uint64_t v9;
  id v10;
  id v11;

  v1 = Canvas.canvasElementController.getter();
  if (v1)
  {
    v10 = (id)v1;
    CanvasElementController.updateToolPickerContextualEditingView()();
    v2 = v10;
LABEL_3:

    return;
  }
  v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x320))();
  if (v3)
  {
    v11 = (id)v3;
    swift_getObjectType();
    v4 = swift_conformsToProtocol2();
    v5 = v4 == 0;
    if (v4)
      v6 = v4;
    else
      v6 = 0;
    v2 = v11;
    if (v5)
      v7 = 0;
    else
      v7 = v11;
    if (v7)
    {
      ObjectType = swift_getObjectType();
      v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 48))(ObjectType, v6);
      CanvasElementController.updateToolPickerContextualEditingView()();

      v2 = (void *)v9;
    }
    goto LABEL_3;
  }
}

uint64_t Canvas.suggestedPositionForNewCanvasElement(withSize:)()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t result;
  void *v4;
  _QWORD *v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  _QWORD *v18;
  id v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  double height;
  CGFloat v29;
  CGFloat v30;
  CGFloat width;
  CGFloat v32;
  double MidX;
  double MidY;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t ObjectType;
  uint64_t v41;
  uint64_t v42;
  CGFloat v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  id v48;
  void *v49;
  CGFloat v50;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  CGFloat v54;
  CGPoint v55;
  double v56;
  CGFloat v58;
  CGFloat v59;
  CGFloat v60;
  CGFloat v61;
  unint64_t v62;
  double v63;
  double v64;
  CGFloat v65;
  CGFloat in;
  CGFloat y;
  CGFloat x;
  CGFloat v69;
  CGFloat v70;
  CGFloat v71;
  CGFloat v72;
  CGFloat v73;
  CGFloat v74;
  CGFloat ty;
  CGFloat v76;
  CGFloat tx;
  CGAffineTransform v78;
  CGAffineTransform t2;
  CGAffineTransform t1;
  _QWORD v81[6];
  _QWORD v82[7];
  _BYTE v83[56];
  CGPoint v84;
  CGRect v85;
  CGRect v86;
  CGRect v87;
  __C::CGRect v88;
  __C::CGRect v89;
  CGRect v90;
  CGRect v91;
  CGRect v92;
  __C::CGRect v93;
  __C::CGRect v94;
  CGRect v95;

  v1 = v0;
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x308))();
  if (!result)
    return result;
  v4 = (void *)result;
  v5 = Canvas.editingView.getter();
  (*(void (**)(_QWORD *__return_ptr))((*v2 & *v5) + 0x2A0))(v81);
  v74 = *(double *)&v81[1];
  v76 = *(double *)v81;
  v6 = *(double *)&v81[4];
  v71 = *(double *)&v81[3];
  v72 = *(double *)&v81[2];
  v7 = *(double *)&v81[5];

  (*(void (**)(_QWORD *__return_ptr))((*v2 & *v1) + 0x5B8))(v82);
  v9 = *(double *)v82;
  v8 = *(double *)&v82[1];
  v10 = *(double *)&v82[2];
  v11 = *(double *)&v82[3];
  v12 = *(double *)&v82[4];
  v13 = *(double *)&v82[5];
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v82, (uint64_t)v83, (uint64_t *)&demangling cache variable for type metadata for CGAffineTransform?);
  if ((v83[48] & 1) != 0)
  {
    v11 = 1.0;
    v13 = 0.0;
    v12 = 0.0;
    v10 = 0.0;
    v8 = 0.0;
    v9 = 1.0;
  }
  t1.a = v76;
  t1.b = v74;
  t1.c = v72;
  t1.d = v71;
  t1.tx = v6;
  t1.ty = v7;
  t2.a = v9;
  t2.b = v8;
  t2.c = v10;
  t2.d = v11;
  t2.tx = v12;
  t2.ty = v13;
  CGAffineTransformConcat(&v78, &t1, &t2);
  t1 = v78;
  CGAffineTransformInvert(&t2, &t1);
  a = t2.a;
  b = t2.b;
  c = t2.c;
  d = t2.d;
  ty = t2.ty;
  tx = t2.tx;
  Canvas.insertionPosition.getter();
  v18 = Canvas.editingView.getter();
  v63 = (*(double (**)(void))((*v2 & *v18) + 0x140))();

  v19 = Canvas.editingView.getter();
  objc_msgSend(v19, sel_bounds);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v27 = v26;

  v73 = a;
  t1.a = a;
  t1.b = b;
  v69 = d;
  v70 = c;
  t1.c = c;
  t1.d = d;
  t1.tx = tx;
  t1.ty = ty;
  v85.origin.x = v21;
  v85.origin.y = v23;
  v85.size.width = v25;
  v85.size.height = v27;
  v86 = CGRectApplyAffineTransform(v85, &t1);
  y = v86.origin.y;
  x = v86.origin.x;
  in = v86.size.width;
  height = v86.size.height;
  if (((*(uint64_t (**)(void))((*v2 & *v1) + 0x570))() & 1) != 0)
  {
    objc_msgSend(v4, sel_bounds);
    height = height + CGRectGetHeight(v87);
  }
  v88.origin.y = y;
  v88.origin.x = x;
  v88.size.width = in;
  v88.size.height = height;
  v89 = CGRect.closestRect(in:)(v88);
  v29 = v89.origin.x;
  v30 = v89.origin.y;
  width = v89.size.width;
  v32 = v89.size.height;
  MidX = CGRectGetMidX((CGRect)v89);
  v90.origin.x = v29;
  v90.origin.y = v30;
  v90.size.width = width;
  v90.size.height = v32;
  MidY = CGRectGetMidY(v90);
  v35 = Canvas.editingView.getter();
  v36 = objc_msgSend(v35, sel_effectiveUserInterfaceLayoutDirection);

  v37 = Canvas.editingView.getter();
  v39 = v38;
  ObjectType = swift_getObjectType();
  v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 56))(ObjectType, v39);

  if (v41 < 0 || (v41 & 0x4000000000000000) != 0)
  {
    v62 = swift_bridgeObjectRetain();
    v42 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v62);
    swift_bridgeObjectRelease();
  }
  else
  {
    v42 = v41 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  *(_QWORD *)&t1.a = v42;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&t1, v36 == 0);
  swift_bridgeObjectRelease();
  v43 = t1.a;
  if (one-time initialization token for canvasElementPasteOffset != -1)
    swift_once();
  v44 = *(double *)&static UIConstants.canvasElementPasteOffset;
  if ((*(_QWORD *)&v43 & 0x8000000000000000) != 0 || (*(_QWORD *)&v43 & 0x4000000000000000) != 0)
  {
    swift_retain();
    v45 = _CocoaArrayWrapper.endIndex.getter();
    if (v45)
      goto LABEL_14;
LABEL_31:

    return swift_release_n();
  }
  v45 = *(_QWORD *)(*(_QWORD *)&v43 + 16);
  swift_retain();
  if (!v45)
    goto LABEL_31;
LABEL_14:
  if (v45 >= 1)
  {
    v46 = 0;
    v47 = -v44;
    if (!v36)
      v47 = v44;
    v64 = v47;
    v65 = height;
    do
    {
      if ((*(_QWORD *)&v43 & 0xC000000000000001) != 0)
        v48 = (id)MEMORY[0x1DF0E4D64](v46, *(_QWORD *)&v43);
      else
        v48 = *(id *)(*(_QWORD *)&v43 + 8 * v46 + 32);
      v49 = v48;
      objc_msgSend(v48, sel_frame, *(_QWORD *)&v63, *(_QWORD *)&v64);
      v50 = v91.origin.x;
      v51 = v91.origin.y;
      v52 = v91.size.width;
      v53 = v91.size.height;
      v54 = CGRectGetMidX(v91);
      v92.origin.x = v50;
      v92.origin.y = v51;
      v92.size.width = v52;
      v92.size.height = v53;
      v84.y = CGRectGetMidY(v92);
      t1.a = v73;
      t1.b = b;
      t1.c = v70;
      t1.d = v69;
      t1.tx = tx;
      t1.ty = ty;
      v84.x = v54;
      v55 = CGPointApplyAffineTransform(v84, &t1);
      v56 = vabdd_f64(v55.y, MidY);
      if (vabdd_f64(v55.x, MidX) < 1.0 && v56 < 1.0)
      {
        v93.size.height = v65;
        v93.origin.y = y;
        v93.origin.x = x;
        v93.size.width = in;
        v94 = CGRect.closestRect(in:)(v93);
        v58 = v94.origin.x;
        v59 = v94.origin.y;
        v60 = v94.size.width;
        v61 = v94.size.height;
        MidX = CGRectGetMidX((CGRect)v94);
        v95.origin.x = v58;
        v95.origin.y = v59;
        v95.size.width = v60;
        v95.size.height = v61;
        MidY = CGRectGetMidY(v95);
      }

      ++v46;
    }
    while (v45 != v46);
    goto LABEL_31;
  }
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t Canvas.canvasCalculateSetShouldSolve(_:stroke:flag:undoable:)(int a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  PKStroke v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v32[12];
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  char v47;
  uint64_t v48;
  char *v49;
  char v50;
  unsigned __int8 v51[16];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;

  v33 = a4;
  v40 = a3;
  v39 = a1;
  v5 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v4);
  v6 = v5[247];
  v38 = v5[248];
  v7 = *(_QWORD *)(v38 + 16);
  v35 = v6;
  v34 = v7;
  v36 = type metadata accessor for Capsule();
  v43 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36, v8);
  v10 = &v32[-v9];
  v11 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v11, v12);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v41 = *(_QWORD *)(v13 - 8);
  v42 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = &v32[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = type metadata accessor for UUID();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = &v32[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = &v32[-v24];
  v26.super.isa = PKStroke._bridgeToObjectiveC()().super.isa;
  v27 = -[objc_class _strokeUUID](v26.super.isa, sel__strokeUUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 16))(v21, v25, v17);
  CRKeyPath.init(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>, MEMORY[0x1E0D117A8]);
  v28 = v37;
  WeakRef.init(id:)();
  CanvasElementView.canvasElement.getter((uint64_t)v10);
  v50 = 0;
  v29 = v5[249];
  v30 = v36;
  v44 = v38;
  v45 = v29;
  v46 = v16;
  v47 = v39;
  v48 = v40;
  v49 = &v50;
  Capsule.callAsFunction<A>(_:)();
  if (v50 == 1)
  {
    if ((v33 & 1) != 0)
    {
      v52 = v35;
      v53 = v34;
      v54 = v28;
      v55 = v10;
      Canvas.undoable(newChange:persistSelection:action:)(0, 0, (uint64_t (*)(double))partial apply for closure #1 in Canvas.mergeUndoable<A>(_:));
    }
    else
    {
      v51[0] = 3;
      AnyCanvas.merge<A>(_:from:)((uint64_t)v10, v51, v35, v34);
    }
  }

  (*(void (**)(_BYTE *, uint64_t))(v43 + 8))(v10, v30);
  (*(void (**)(_BYTE *, uint64_t))(v18 + 8))(v25, v17);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v41 + 8))(v16, v42);
}

Swift::Void __swiftcall Canvas.mathAddGraph(forExpression:range:identifier:expressionLocation:addToExisting:)(Swift::String forExpression, __C::CGRect range, Swift::String identifier, CGPoint expressionLocation, Swift::Bool addToExisting)
{
  _QWORD *v5;
  _QWORD *v6;
  void *object;
  double y;
  double x;
  CGFloat height;
  CGFloat width;
  CGFloat v12;
  CGFloat v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  CGFloat v39;
  uint64_t v40;
  double v41;
  __int128 v42;
  double v43;
  void *v44;
  id v45;
  void *v46;
  double v47;
  double v48;
  id v49;
  void *v50;
  double v51;
  double v52;
  double v53;
  double v54;
  _QWORD *v55;
  CGFloat v56;
  CGFloat v57;
  CGFloat v58;
  CGFloat v59;
  double MinY;
  CGFloat v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  uint64_t v66;
  CGFloat v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  char *v79;
  CGFloat v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double MaxY;
  CGFloat v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t countAndFlagsBits;
  uint64_t v97;
  CGFloat v98;
  double v99;
  double v100;
  __int128 v101;
  char *v102;
  CGRect v103;
  CGRect v104;
  CGRect v105;
  CGRect v106;
  CGRect v107;
  CGRect v108;
  CGRect v109;
  CGRect v110;
  CGRect v111;

  v6 = v5;
  LODWORD(v98) = addToExisting;
  object = identifier._object;
  countAndFlagsBits = forExpression._countAndFlagsBits;
  v97 = identifier._countAndFlagsBits;
  y = expressionLocation.y;
  x = expressionLocation.x;
  height = range.size.height;
  width = range.size.width;
  v12 = range.origin.y;
  v13 = range.origin.x;
  v14 = forExpression._object;
  v15 = *MEMORY[0x1E0DEEDD8] & *v6;
  v16 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v16, v17);
  v91 = (char *)&v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for GraphElement();
  MEMORY[0x1E0C80A78](v95, v19);
  v90 = (uint64_t)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  v93 = *(_QWORD *)(v21 - 8);
  v94 = v21;
  MEMORY[0x1E0C80A78](v21, v22);
  v92 = (char *)&v82 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MaxY = *(double *)(v15 + 1984);
  v86 = type metadata accessor for Capsule();
  v84 = *(_QWORD *)(v86 - 8);
  MEMORY[0x1E0C80A78](v86, v24);
  v83 = (uint64_t)&v82 - v25;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<GraphElement>?);
  MEMORY[0x1E0C80A78](v26, v27);
  v85 = (uint64_t)&v82 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphElement>);
  v88 = *(double *)(v89 - 8);
  MEMORY[0x1E0C80A78](v89, v29);
  v82 = (char *)&v82 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for GraphableExpression();
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v82 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = 0.0;
  v100 = -2.68156159e154;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CRRegister.init(wrappedValue:)();
  v99 = 0.0;
  v100 = -2.68156159e154;
  CRRegister.init(wrappedValue:)();
  v99 = 0.0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  lazy protocol witness table accessor for type Color? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type Color? and conformance <A> A?, (uint64_t *)&demangling cache variable for type metadata for Color?, (uint64_t (*)(void))lazy protocol witness table accessor for type Color and conformance Color, MEMORY[0x1E0D12D70]);
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v34[*(int *)(v31 + 28)] = MEMORY[0x1E0DEE9E0];
  v99 = *(double *)&countAndFlagsBits;
  v100 = *(double *)&v14;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  CRRegister.wrappedValue.setter();
  v99 = *(double *)&v97;
  v100 = *(double *)&object;
  CRRegister.wrappedValue.setter();
  v99 = 0.0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  CRRegister.wrappedValue.setter();
  if ((LOBYTE(v98) & 1) != 0
    && (~*(_QWORD *)&x & 0x7FF0000000000000) != 0
    && (~*(_QWORD *)&y & 0x7FF0000000000000) != 0)
  {
    v35 = v83;
    CanvasElementView.canvasElement.getter(v83);
    v36 = *(_QWORD *)(v15 + 1992);
    v37 = v85;
    v38 = v86;
    Capsule<>.graphElementClosestTo(_:maxDistance:)(0.0, 1, v86, *(uint64_t *)&MaxY, v36, v85, x, y);
    (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v35, v38);
    v39 = v88;
    v40 = v89;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)&v88 + 48))(v37, 1, v89) != 1)
    {
      v79 = v82;
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)&v39 + 32))(v82, v37, v40);
      *(_QWORD *)&v101 = v6;
      *((_QWORD *)&v101 + 1) = v34;
      v102 = v79;
      Canvas.undoable(newChange:persistSelection:action:)(1, 0, (uint64_t (*)(double))partial apply for closure #1 in Canvas.undoablyAdd(_:to:));
      (*(void (**)(char *, uint64_t))(*(_QWORD *)&v39 + 8))(v79, v40);
      goto LABEL_19;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v37, &demangling cache variable for type metadata for Ref<GraphElement>?);
  }
  v89 = *(_QWORD *)&v13;
  *(double *)&countAndFlagsBits = v12;
  *(double *)&v97 = width;
  v98 = height;
  v41 = Canvas.modelCanvasWidth.getter();
  if (one-time initialization token for defaultGraphSize != -1)
    swift_once();
  v42 = static UIConstants.defaultGraphSize;
  if (v41 * 0.5 <= x)
    v43 = 40.0;
  else
    v43 = v41 - (*(double *)&static UIConstants.defaultGraphSize + 40.0);
  v44 = (void *)objc_opt_self();
  v45 = objc_msgSend(v44, sel_standardUserDefaults);
  v46 = (void *)MEMORY[0x1DF0E41AC](0xD00000000000001DLL, 0x80000001DDF5AC40);
  objc_msgSend(v45, sel_doubleForKey_, v46);
  v48 = v47;

  v49 = objc_msgSend(v44, sel_standardUserDefaults);
  v50 = (void *)MEMORY[0x1DF0E41AC](0xD00000000000001DLL, 0x80000001DDF5AC60);
  objc_msgSend(v49, sel_doubleForKey_, v50);
  v52 = v51;

  v53 = v43 + v48;
  v54 = y + 30.0 + v52;
  v99 = v43 + v48;
  v100 = v54;
  v101 = v42;
  v55 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v103.origin.x = (*(double (**)(void))((*MEMORY[0x1E0DEEDD8] & *v6) + 0x348))();
  v104 = CGRectInset(v103, 0.0, 30.0);
  v56 = v104.origin.x;
  v57 = v104.origin.y;
  v58 = v104.size.width;
  v59 = v104.size.height;
  v104.origin.x = v53;
  v104.origin.y = v54;
  v88 = *((double *)&v42 + 1);
  v104.size = (CGSize)v42;
  MinY = CGRectGetMinY(v104);
  v105.origin.x = v56;
  v105.origin.y = v57;
  v105.size.width = v58;
  v105.size.height = v59;
  v61 = CGRectGetMinY(v105);
  v62 = v94;
  v63 = (uint64_t)v92;
  if (MinY < v61)
  {
    v106.origin.x = v56;
    v106.origin.y = v57;
    v106.size.width = v58;
    v106.size.height = v59;
    v64 = CGRectGetMinY(v106);
    v107.origin.x = v53;
    v107.origin.y = v54;
    *(_QWORD *)&v107.size.width = v42;
    v107.size.height = v88;
    v65 = v64 - CGRectGetMinY(v107);
    v66 = v95;
LABEL_15:
    v100 = v54 + v65;
    goto LABEL_16;
  }
  v108.origin.x = v53;
  v108.origin.y = v54;
  *(_QWORD *)&v108.size.width = v42;
  v108.size.height = v88;
  MaxY = CGRectGetMaxY(v108);
  v109.origin.x = v56;
  v109.origin.y = v57;
  v109.size.width = v58;
  v109.size.height = v59;
  v67 = CGRectGetMaxY(v109);
  v66 = v95;
  if (v67 < MaxY)
  {
    v110.origin.x = v53;
    v110.origin.y = v54;
    v110.size = (CGSize)v42;
    v68 = CGRectGetMaxY(v110);
    v111.origin.x = v56;
    v111.origin.y = v57;
    v111.size.width = v58;
    v111.size.height = v59;
    v65 = CGRectGetMaxY(v111) - v68;
    goto LABEL_15;
  }
LABEL_16:
  v69 = specialized static GraphElement.defaultVisibleRange.getter();
  GraphElement.init(frame:visibleRange:rotation:)(v90, 0.0, 0.0, 0.0, 0.0, v69, v70, v71, v72, 0);
  static CRKeyPath.unique.getter();
  v73 = (char *)lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  v74 = Capsule<>.init(_:id:)();
  MEMORY[0x1E0C80A78](v74, v75);
  *(&v82 - 8) = (char *)&v99;
  *(_OWORD *)(&v82 - 7) = v42;
  *(&v82 - 5) = (char *)v89;
  *(&v82 - 4) = (char *)countAndFlagsBits;
  *(&v82 - 3) = (char *)v97;
  v80 = v98;
  v81 = v34;
  v76 = Capsule.callAsFunction<A>(_:)();
  v77 = (void *)(*(uint64_t (**)(uint64_t))((*v55 & *v6) + 0x320))(v76);
  if (v77)
  {
    v78 = v77;
    objc_msgSend(v77, sel__pauseHoverPreviewForTimeInterval_, 1.0);

  }
  static GraphCanvasElementView.isInsertingGraph = 1;
  Canvas.addCanvasElement<A>(_:setSelected:dragItem:harmonize:)(v63, 1, 0, 0, v66, v73, (char *)&protocol witness table for GraphElement);
  static GraphCanvasElementView.isInsertingGraph = 0;
  (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v63, v62);
LABEL_19:
  outlined destroy of PKStrokeProperties((uint64_t)v34, (uint64_t (*)(_QWORD))type metadata accessor for GraphableExpression);
}

uint64_t Canvas.mathExpressionIdentifiersForExistingGraphNearDrawingLocation(_:)(double a1, double a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unsigned int (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  Swift::Int v51;
  Swift::Int v52;
  Swift::Int v53;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  char *v63;
  void (*v64)(char *, char *, uint64_t);
  char *v65;
  void (*v66)(uint64_t, uint64_t);
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  Swift::Int v75[2];
  uint64_t v76;

  v5 = *MEMORY[0x1E0DEEDD8] & *v2;
  v68 = type metadata accessor for GraphableExpression();
  MEMORY[0x1E0C80A78](v68, v6);
  v67 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
  v74 = *(_QWORD *)(v59 - 8);
  MEMORY[0x1E0C80A78](v59, v8);
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<GraphableExpression>?);
  MEMORY[0x1E0C80A78](v11, v12);
  v69 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>.Iterator);
  v62 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60, v14);
  v73 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = (void (*)(char *, char *, uint64_t))type metadata accessor for GraphElement();
  MEMORY[0x1E0C80A78](v64, v16);
  v63 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v5 + 1984);
  v19 = *(_QWORD *)(v18 + 16);
  v72 = *(_QWORD *)(v5 + 1976);
  v70 = v5;
  v71 = v19;
  v20 = type metadata accessor for Capsule();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)&v55 - v23;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<GraphElement>?);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v55 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphElement>);
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29, v31);
  v33 = (char *)&v55 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = v2;
  CanvasElementView.canvasElement.getter((uint64_t)v24);
  Capsule<>.graphElementClosestTo(_:maxDistance:)(0.0, 1, v20, v18, *(_QWORD *)(v70 + 1992), (uint64_t)v28, a1, a2);
  v34 = v30;
  v35 = *(void (**)(char *, uint64_t))(v21 + 8);
  v70 = v20;
  v35(v24, v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v28, 1, v29) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, &demangling cache variable for type metadata for Ref<GraphElement>?);
    return 0;
  }
  else
  {
    v57 = v34;
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v33, v28, v29);
    v37 = (void (*)(uint64_t, uint64_t))v35;
    v38 = v61;
    CanvasElementView.canvasElement.getter((uint64_t)v24);
    v39 = (uint64_t)v63;
    v58 = v29;
    v56 = v33;
    Ref.subscript.getter();
    v65 = v24;
    v66 = v37;
    v37((uint64_t)v24, v70);
    v36 = MEMORY[0x1E0DEE9E8];
    v76 = MEMORY[0x1E0DEE9E8];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
    v40 = v73;
    CROrderedSet.makeIterator()();
    v41 = v69;
    v42 = v60;
    CROrderedSet.Iterator.next()();
    v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48);
    v44 = v59;
    if (v43(v41, 1, v59) != 1)
    {
      v64 = *(void (**)(char *, char *, uint64_t))(v74 + 32);
      v45 = v69;
      v46 = (uint64_t)v67;
      do
      {
        v64(v10, v45, v44);
        v47 = (uint64_t)v65;
        CanvasElementView.canvasElement.getter((uint64_t)v65);
        Ref.subscript.getter();
        v66(v47, v70);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
        CRRegister.wrappedValue.getter();
        v48 = v10;
        v49 = v42;
        v50 = v38;
        v51 = v75[0];
        v52 = v75[1];
        outlined destroy of PKStrokeProperties(v46, (uint64_t (*)(_QWORD))type metadata accessor for GraphableExpression);
        v53 = v52;
        v38 = v50;
        v42 = v49;
        v10 = v48;
        specialized Set._Variant.insert(_:)(v75, v51, v53);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v74 + 8))(v48, v44);
        CROrderedSet.Iterator.next()();
      }
      while (v43(v45, 1, v44) != 1);
      v36 = v76;
      v40 = v73;
      v39 = (uint64_t)v63;
    }
    (*(void (**)(char *, uint64_t))(v62 + 8))(v40, v42);
    outlined destroy of PKStrokeProperties(v39, (uint64_t (*)(_QWORD))type metadata accessor for GraphElement);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v58);
  }
  return v36;
}

Swift::Void __swiftcall Canvas.calculateDocumentChanged()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  _QWORD *v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;

  v0 = type metadata accessor for GraphElement();
  MEMORY[0x1E0C80A78](v0, v1);
  v33 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  v4 = *(_QWORD *)(v3 - 8);
  v31 = v3;
  v32 = v4;
  MEMORY[0x1E0C80A78](v3, v5);
  v30 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = Canvas.editingView.getter();
  v9 = v8;
  ObjectType = swift_getObjectType();
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 56))(ObjectType, v9);

  if (!(v11 >> 62))
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v12)
      goto LABEL_3;
LABEL_15:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v12 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v12)
    goto LABEL_15;
LABEL_3:
  if (v12 >= 1)
  {
    v13 = 0;
    v34 = v11 & 0xC000000000000001;
    v14 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v28 = v11;
    v29 = v12;
    v15 = v32;
    do
    {
      if (v34)
        v21 = (id)MEMORY[0x1DF0E4D64](v13, v11);
      else
        v21 = *(id *)(v11 + 8 * v13 + 32);
      v22 = v21;
      type metadata accessor for GraphCanvasElementView(0);
      v23 = swift_dynamicCastClass();
      if (v23)
      {
        v24 = (_QWORD *)v23;
        v25 = v22;
        specialized CanvasElementView.updateGestures()();
        specialized CanvasElementView.updateFrame()();
        v26 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v24 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
        if (v26)
        {
          v27 = v26;
          (*(void (**)(void))((*v14 & *v26) + 0x668))();

        }
        v16 = (char *)v24 + *(_QWORD *)((*v14 & *v24) + 0x380);
        swift_beginAccess();
        v17 = v30;
        v18 = v16;
        v19 = v31;
        (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v30, v18, v31);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
        v20 = (uint64_t)v33;
        Capsule<>.root.getter();
        (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v19);
        outlined destroy of PKStrokeProperties(v20, (uint64_t (*)(_QWORD))type metadata accessor for GraphElement);
        GraphCanvasElementView.cachedGraphableExpressionsState.getter();
        GraphableExpressionsState.update()();
        swift_release();
        GraphCanvasElementView.updateGraphView()();

        v11 = v28;
        v12 = v29;
      }
      ++v13;

    }
    while (v12 != v13);
    goto LABEL_15;
  }
  __break(1u);
}

uint64_t Canvas.initiateMagicGenerativePlayground(context:in:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  void *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(void **)a1;
  v16 = *(void **)(a1 + 8);
  LOBYTE(a1) = *(_BYTE *)(a1 + 16);
  v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v14, 1, 1, v17);
  type metadata accessor for MainActor();
  v18 = v5;
  outlined copy of MagicGenerativePlaygroundContext(v15, v16, a1);
  v19 = static MainActor.shared.getter();
  v20 = swift_allocObject();
  v21 = MEMORY[0x1E0DF06E8];
  *(_QWORD *)(v20 + 16) = v19;
  *(_QWORD *)(v20 + 24) = v21;
  *(_QWORD *)(v20 + 32) = v18;
  *(_QWORD *)(v20 + 40) = v15;
  *(_QWORD *)(v20 + 48) = v16;
  *(_BYTE *)(v20 + 56) = a1;
  *(double *)(v20 + 64) = a2;
  *(double *)(v20 + 72) = a3;
  *(double *)(v20 + 80) = a4;
  *(double *)(v20 + 88) = a5;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5Tm((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in Canvas.initiateMagicGenerativePlayground(context:in:), v20, (uint64_t)&unk_1EA853A10, (uint64_t *)&demangling cache variable for type metadata for ()?);
  return swift_release();
}

uint64_t Canvas.imageElementFor(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = type metadata accessor for Capsule();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v9 - v5;
  CanvasElementView.canvasElement.getter((uint64_t)&v9 - v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<Image> and conformance WeakRef<A>, &demangling cache variable for type metadata for WeakRef<Image>, MEMORY[0x1E0D12B70]);
  Capsule.encapsulate<A>(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, 0, 1, v7);
}

uint64_t Canvas.encodedRecipeFor(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v0 = type metadata accessor for Capsule();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v12 - v3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  CanvasElementView.canvasElement.getter((uint64_t)v4);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
  WeakRef.subscript.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  v9 = type metadata accessor for Image();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for Image?);
    return 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
    CRRegister.wrappedValue.getter();
    v10 = v12;
    outlined destroy of PKStrokeProperties((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for Image);
  }
  return v10;
}

void __swiftcall Canvas.hitMagicGenerativePlaygroundView(at:)(UIView_optional *__return_ptr retstr, CGPoint at)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  double y;
  double x;
  id v7;
  void *v8;

  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasGenerationTool);
  if (v3)
  {
    v4 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit20CanvasGenerationTool_magicGenerativeVC);
    if (v4)
    {
      y = at.y;
      x = at.x;
      v7 = objc_msgSend(v4, sel_viewIfLoaded);
      if (v7)
      {
        v8 = v7;
        objc_msgSend(*(id *)(v2 + direct field offset for Canvas.paperView), sel_convertPoint_toCoordinateSpace_, v7, x, y);
        objc_msgSend(v8, sel_hitTest_withEvent_, 0);

      }
    }
  }
}

Swift::Void __swiftcall Canvas.generationModelAvailabilityStatusDidChange(_:)(NSNotification a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  _BYTE v6[40];
  __int128 v7;
  __int128 v8;

  v1 = -[objc_class userInfo](a1.super.isa, sel_userInfo);
  if (v1)
  {
    v2 = v1;
    v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    AnyHashable.init<A>(_:)();
    if (*(_QWORD *)(v3 + 16) && (v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6), (v5 & 1) != 0))
    {
      outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v4, (uint64_t)&v7);
    }
    else
    {
      v7 = 0u;
      v8 = 0u;
    }
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)v6);
    if (*((_QWORD *)&v8 + 1))
      swift_dynamicCast();
    else
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v7, &demangling cache variable for type metadata for Any?);
  }
}

uint64_t Canvas.multipeerConnection.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + direct field offset for Canvas.multipeerConnection) = a1;
  return swift_release();
}

uint64_t Canvas.multipeerCanvasStateConnection.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + direct field offset for Canvas.multipeerCanvasStateConnection) = a1;
  return swift_release();
}

void Canvas.removeOldEraserStrokesTimer.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + direct field offset for Canvas.removeOldEraserStrokesTimer);
  *(_QWORD *)(v1 + direct field offset for Canvas.removeOldEraserStrokesTimer) = a1;

}

uint64_t Canvas.liveStreamMessenger.getter()
{
  specialized Canvas.liveStreamMessenger.getter();
  return swift_unknownObjectRetain();
}

uint64_t Canvas.liveStreamMessenger.setter(uint64_t a1, uint64_t a2)
{
  specialized Canvas.liveStreamMessenger.setter(a1, a2);
  return swift_unknownObjectRelease();
}

uint64_t (*Canvas.liveStreamMessenger.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return Canvas.liveStreamMessenger.modify;
}

uint64_t Canvas.liveStreamMessenger.modify(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return Canvas.liveStreamMessenger.didset();
  return result;
}

uint64_t Canvas.dataModelIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for Capsule();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v6 - v3;
  CanvasElementView.canvasElement.getter((uint64_t)&v6 - v3);
  Capsule<>.rootID.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t Canvas.merge<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v4;

  v4 = 3;
  return AnyCanvas.merge<A>(_:from:)(a1, &v4, a2, a3);
}

uint64_t Canvas.updatablePaper.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v16;

  v2 = type metadata accessor for Capsule();
  v3 = type metadata accessor for Optional();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v16 - v6;
  v8 = *(_QWORD *)(v2 - 8);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v13 = (char *)&v16 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v7, a1, v3, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v2) == 1)
  {
    v14 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v14(a1, v3);
    return ((uint64_t (*)(char *, uint64_t))v14)(v7, v3);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v7, v2);
    specialized Canvas.updatablePaper2.setter((uint64_t)v13);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v2);
  }
}

void (*Canvas.updatablePaper.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  type metadata accessor for Capsule();
  v4 = type metadata accessor for Optional();
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  Canvas.updatablePaper.getter();
  return Canvas.updatablePaper.modify;
}

void Canvas.updatablePaper.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    v5 = v2[1];
    v6 = v2[2];
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v4, v5);
    Canvas.updatablePaper.setter((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    Canvas.updatablePaper.setter(*(_QWORD *)(*(_QWORD *)a1 + 32));
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t Canvas.updatablePaper2.getter@<X0>(uint64_t a1@<X8>)
{
  return CanvasElementView.canvasElement.getter(a1);
}

uint64_t Canvas.updatablePaper2.setter(uint64_t a1)
{
  uint64_t v2;

  specialized Canvas.updatablePaper2.setter(a1);
  v2 = type metadata accessor for Capsule();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

void (*Canvas.updatablePaper2.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = Canvas.rootElement.modify(v3);
  return Canvas.updatablePaper2.modify;
}

void Canvas.updatablePaper2.modify(_QWORD *a1, char a2)
{
  _QWORD *v3;
  _QWORD *v4;
  char v5;

  v3 = (_QWORD *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  if ((a2 & 1) == 0)
  {
    v4 = (_QWORD *)v3[4];
    v5 = 3;
    (*(void (**)(char *))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x518))(&v5);
  }
  free(v3);
}

uint64_t Canvas.childViewControllerCancellable.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + direct field offset for Canvas.childViewControllerCancellable) = a1;
  return swift_release();
}

uint64_t Canvas.paper2.setter(uint64_t a1)
{
  uint64_t v2;

  specialized Canvas.rootElement.setter(a1);
  v2 = type metadata accessor for Capsule();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t (*Canvas.rootElement.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  id v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = *(void **)(v1 + direct field offset for Canvas.paperView);
  v3[4] = v4;
  v5 = v4;
  v3[5] = CanvasElementView.canvasElement.modify();
  return Canvas.rootElement.modify;
}

uint64_t Canvas.updatablePaper.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  CanvasElementView.canvasElement.getter(a1);
  v2 = type metadata accessor for Capsule();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 0, 1, v2);
}

uint64_t Canvas.paper.setter(uint64_t a1)
{
  uint64_t v2;

  specialized Canvas.paper.setter(a1);
  type metadata accessor for Capsule();
  v2 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

void (*Canvas.paper.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  type metadata accessor for Capsule();
  v4 = type metadata accessor for Optional();
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  Canvas.updatablePaper.getter();
  return Canvas.paper.modify;
}

void Canvas.paper.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, uint64_t);

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v4, v5);
    specialized Canvas.paper.setter((uint64_t)v3);
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
  }
  else
  {
    specialized Canvas.paper.setter(*(_QWORD *)(*(_QWORD *)a1 + 32));
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v7(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

void Canvas.rootElement.modify(_QWORD *a1)
{
  void *v1;
  void *v2;

  v1 = (void *)*a1;
  v2 = *(void **)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);

  free(v1);
}

uint64_t Canvas.xpcMulticast.getter()
{
  specialized Canvas.xpcMulticast.getter();
  return swift_retain();
}

uint64_t Canvas.xpcMulticast.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + direct field offset for Canvas.xpcMulticast);
  swift_beginAccess();
  *v3 = a1;
  return swift_release();
}

uint64_t (*Canvas.xpcMulticast.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.backgroundColor.modify;
}

void Canvas._editingView.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;

  v3 = (_QWORD *)(v2 + direct field offset for Canvas._editingView);
  v4 = *(void **)(v2 + direct field offset for Canvas._editingView);
  *v3 = a1;
  v3[1] = a2;

}

void Canvas._canvasElementController.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + direct field offset for Canvas._canvasElementController);
  *(_QWORD *)(v1 + direct field offset for Canvas._canvasElementController) = a1;

}

uint64_t Canvas.canvasElementController.getter()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t ObjectType;

  v1 = *(void **)((char *)v0 + direct field offset for Canvas._canvasElementController);
  v2 = (uint64_t)v1;
  if (!v1)
  {
    v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x320))();
    if (v5)
    {
      v6 = (void *)v5;
      swift_getObjectType();
      v7 = swift_conformsToProtocol2();
      if (v7)
        v8 = v7;
      else
        v8 = 0;
      if (v7)
        v9 = v6;
      else
        v9 = 0;
      if (v9)
      {
        ObjectType = swift_getObjectType();
        v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 48))(ObjectType, v8);

      }
      else
      {

        v2 = 0;
      }
    }
    else
    {
      v2 = 0;
    }
  }
  v3 = v1;
  return v2;
}

uint64_t Canvas.dropSessionType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + direct field offset for Canvas.dropSessionType);
}

uint64_t Canvas.dropSessionType.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + direct field offset for Canvas.dropSessionType) = result;
  return result;
}

uint64_t Canvas.dropInteractionSessionIsActive.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + direct field offset for Canvas.dropInteractionSessionIsActive);
}

uint64_t Canvas.dropInteractionSessionIsActive.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + direct field offset for Canvas.dropInteractionSessionIsActive) = result;
  return result;
}

BOOL Canvas.allowsDropInteraction.getter()
{
  _QWORD *v0;
  _QWORD *(*v1)(uint64_t *__return_ptr);
  _QWORD *v2;
  uint64_t v4;

  v1 = *(_QWORD *(**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C8);
  v2 = v1((uint64_t *)((char *)&v4 + 1));
  if (BYTE1(v4) == 3)
    return 1;
  ((void (*)(uint64_t *__return_ptr, _QWORD *))v1)(&v4, v2);
  return v4 == 2;
}

Swift::Void __swiftcall Canvas.setupBandSelection()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  uint64_t aBlock;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD *v24;

  v1 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v0);
  v2 = swift_allocObject();
  v3 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v2 + 16) = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)(v2 + 24) = v3;
  *(_QWORD *)(v2 + 32) = 6;
  *(_BYTE *)(v2 + 40) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  v4 = swift_allocBox();
  v6 = v5;
  v7 = type metadata accessor for PKDrawing();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v9 = (_QWORD *)swift_allocObject();
  v10 = v1[247];
  v9[2] = v10;
  v11 = v1[248];
  v9[3] = v11;
  v12 = v1[249];
  v9[4] = v12;
  v9[5] = v8;
  v9[6] = v2;
  v9[7] = v4;
  v13 = objc_allocWithZone(MEMORY[0x1E0DC34E0]);
  v23 = partial apply for closure #1 in Canvas.setupBandSelection();
  v24 = v9;
  aBlock = MEMORY[0x1E0C809B0];
  v20 = 1107296256;
  v21 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  v22 = &block_descriptor_163_0;
  v14 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  v15 = objc_msgSend(v13, sel_initWithSelectionHandler_, v14);
  _Block_release(v14);
  swift_release();
  swift_release();
  v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v10;
  v17[3] = v11;
  v17[4] = v12;
  v17[5] = v16;
  v23 = partial apply for closure #2 in Canvas.setupBandSelection();
  v24 = v17;
  aBlock = MEMORY[0x1E0C809B0];
  v20 = 1107296256;
  v21 = thunk for @escaping @callee_guaranteed (@guaranteed UIBandSelectionInteraction, @unowned CGPoint) -> (@unowned Bool);
  v22 = &block_descriptor_170_0;
  v18 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v15, sel_setShouldBeginHandler_, v18);
  _Block_release(v18);
  objc_msgSend(v0, sel_addInteraction_, v15);

  swift_release();
  swift_release();
}

double Canvas.insertionPosition.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  void *v3;
  id v4;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MidX;
  double v10;
  double v11;
  _QWORD *v12;
  _QWORD *v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  double v28;
  id v29;
  double v30;
  double v31;
  double v32;
  double v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  double MinX;
  double MaxX;
  double v41;
  CGFloat v43;
  CGFloat v44;
  CGFloat rect;
  CGFloat recta;
  CGFloat v47;
  CGFloat v48;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  CGAffineTransform v52;
  CGAffineTransform t2;
  CGAffineTransform t1;
  _QWORD v55[6];
  _QWORD v56[7];
  _BYTE v57[56];
  CGPoint v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;

  v1 = v0;
  v2 = objc_msgSend(v0, sel_window);
  if (!v2)
    return 0.0;
  v3 = v2;
  v4 = Canvas.editingView.getter();
  objc_msgSend(v3, sel_bounds);
  x = v59.origin.x;
  y = v59.origin.y;
  width = v59.size.width;
  height = v59.size.height;
  MidX = CGRectGetMidX(v59);
  v60.origin.x = x;
  v60.origin.y = y;
  v60.size.width = width;
  v60.size.height = height;
  objc_msgSend(v4, sel_convertPoint_fromCoordinateSpace_, v3, MidX, CGRectGetMidY(v60));
  v49 = v11;
  v51 = v10;

  v12 = Canvas.editingView.getter();
  v13 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v12) + 0x2A0))(v55);
  rect = *(double *)&v55[1];
  v47 = *(double *)v55;
  v14 = *(double *)&v55[4];
  v43 = *(double *)&v55[3];
  v44 = *(double *)&v55[2];
  v15 = *(double *)&v55[5];

  (*(void (**)(_QWORD *__return_ptr))((*v13 & *v1) + 0x5B8))(v56);
  v17 = *(double *)v56;
  v16 = *(double *)&v56[1];
  v19 = *(double *)&v56[2];
  v18 = *(double *)&v56[3];
  v21 = *(double *)&v56[4];
  v20 = *(double *)&v56[5];
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v56, (uint64_t)v57, (uint64_t *)&demangling cache variable for type metadata for CGAffineTransform?);
  if ((v57[48] & 1) != 0)
  {
    v18 = 1.0;
    v20 = 0.0;
    v21 = 0.0;
    v19 = 0.0;
    v16 = 0.0;
    v17 = 1.0;
  }
  t1.a = v47;
  t1.b = rect;
  t1.c = v44;
  t1.d = v43;
  t1.tx = v14;
  t1.ty = v15;
  t2.a = v17;
  t2.b = v16;
  t2.c = v19;
  t2.d = v18;
  t2.tx = v21;
  t2.ty = v20;
  CGAffineTransformConcat(&v52, &t1, &t2);
  t1 = v52;
  CGAffineTransformInvert(&t2, &t1);
  a = t2.a;
  b = t2.b;
  c = t2.c;
  d = t2.d;
  tx = t2.tx;
  ty = t2.ty;
  t1 = t2;
  v58.y = v49;
  v58.x = v51;
  v28 = CGPointApplyAffineTransform(v58, &t1).x;
  v29 = Canvas.editingView.getter();
  objc_msgSend(v29, sel_bounds);
  v48 = v31;
  v50 = v30;
  recta = v32;
  v34 = v33;

  t1.a = a;
  t1.b = b;
  t1.c = c;
  t1.d = d;
  t1.tx = tx;
  t1.ty = ty;
  v61.origin.y = v48;
  v61.origin.x = v50;
  v61.size.width = recta;
  v61.size.height = v34;
  v62 = CGRectApplyAffineTransform(v61, &t1);
  v35 = v62.origin.x;
  v36 = v62.origin.y;
  v37 = v62.size.width;
  v38 = v62.size.height;
  MinX = CGRectGetMinX(v62);
  v63.origin.x = v35;
  v63.origin.y = v36;
  v63.size.width = v37;
  v63.size.height = v38;
  MaxX = CGRectGetMaxX(v63);
  if (MaxX >= v28)
    MaxX = v28;
  if (v28 >= MinX)
    v41 = MaxX;
  else
    v41 = MinX;
  v64.origin.x = v35;
  v64.origin.y = v36;
  v64.size.width = v37;
  v64.size.height = v38;
  CGRectGetMinY(v64);
  v65.origin.x = v35;
  v65.origin.y = v36;
  v65.size.width = v37;
  v65.size.height = v38;
  CGRectGetMaxY(v65);

  return v41;
}

CGFloat Canvas.modelCanvasWidth.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat tx;
  CGFloat ty;
  id v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  __int128 v27;
  CGFloat v28;
  __int128 v29;
  CGAffineTransform v30;
  CGAffineTransform t2;
  CGAffineTransform t1;
  _QWORD v33[6];
  _QWORD v34[7];
  _BYTE v35[56];
  CGRect v36;
  CGRect v37;

  v1 = v0;
  v2 = Canvas.editingView.getter();
  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x2A0))(v33);
  v28 = *(double *)v33;
  v25 = *(double *)&v33[2];
  v26 = *(double *)&v33[1];
  v4 = *(double *)&v33[4];
  v24 = *(double *)&v33[3];
  v5 = *(double *)&v33[5];

  (*(void (**)(_QWORD *__return_ptr))((*v3 & *v1) + 0x5B8))(v34);
  v7 = *(double *)v34;
  v6 = *(double *)&v34[1];
  v8 = *(double *)&v34[2];
  v9 = *(double *)&v34[3];
  v10 = *(double *)&v34[4];
  v11 = *(double *)&v34[5];
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v34, (uint64_t)v35, (uint64_t *)&demangling cache variable for type metadata for CGAffineTransform?);
  if ((v35[48] & 1) != 0)
  {
    v9 = 1.0;
    v11 = 0.0;
    v10 = 0.0;
    v8 = 0.0;
    v6 = 0.0;
    v7 = 1.0;
  }
  t1.a = v28;
  t1.b = v26;
  t1.c = v25;
  t1.d = v24;
  t1.tx = v4;
  t1.ty = v5;
  t2.a = v7;
  t2.b = v6;
  t2.c = v8;
  t2.d = v9;
  t2.tx = v10;
  t2.ty = v11;
  CGAffineTransformConcat(&v30, &t1, &t2);
  t1 = v30;
  CGAffineTransformInvert(&t2, &t1);
  v27 = *(_OWORD *)&t2.c;
  v29 = *(_OWORD *)&t2.a;
  tx = t2.tx;
  ty = t2.ty;
  v14 = Canvas.editingView.getter();
  objc_msgSend(v14, sel_bounds);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v22 = v21;

  *(_OWORD *)&t1.a = v29;
  *(_OWORD *)&t1.c = v27;
  t1.tx = tx;
  t1.ty = ty;
  v36.origin.x = v16;
  v36.origin.y = v18;
  v36.size.width = v20;
  v36.size.height = v22;
  v37 = CGRectApplyAffineTransform(v36, &t1);
  return v37.size.width;
}

Swift::Bool __swiftcall Canvas.canvasElementOrFormFieldExistsAtPoint(_:)(CGPoint a1)
{
  uint64_t v1;
  uint64_t v2;
  double y;
  double x;
  id v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  char v12;
  id v13;
  _QWORD *v15;

  v2 = v1;
  y = a1.y;
  x = a1.x;
  v5 = *(id *)(v1 + direct field offset for Canvas.paperView);
  v6 = ContainerCanvasElementView.subelementViews.getter();

  if (v6 >> 62)
    goto LABEL_17;
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v7; v7 = _CocoaArrayWrapper.endIndex.getter())
  {
    v8 = 4;
    while (1)
    {
      v9 = (v6 & 0xC000000000000001) != 0
         ? (_QWORD *)MEMORY[0x1DF0E4D64](v8 - 4, v6)
         : *(id *)(v6 + 8 * v8);
      v10 = v9;
      v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1))
        break;
      v15 = v9;
      v12 = closure #1 in Canvas.canvasElementOrFormFieldExistsAtPoint(_:)(&v15, v2, x, y);

      if ((v12 & 1) != 0)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_14;
      }
      ++v8;
      if (v11 == v7)
        goto LABEL_10;
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease_n();
  v13 = (id)specialized ContainerCanvasElementView.formFillingView.getter();
  if (v13)
  {
    v13 = objc_msgSend(v13, sel_hitTest_withEvent_, 0, x, y);
    if (v13)
    {

LABEL_14:
      LOBYTE(v13) = 1;
    }
  }
  return (char)v13;
}

__n128 Canvas.visibleBoundsOverride.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  __n128 result;
  __int128 v6;

  v3 = v1 + direct field offset for Canvas.visibleBoundsOverride;
  swift_beginAccess();
  v4 = *(_BYTE *)(v3 + 32);
  result = *(__n128 *)v3;
  v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = v4;
  return result;
}

uint64_t Canvas.visibleBoundsOverride.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + direct field offset for Canvas.visibleBoundsOverride;
  swift_beginAccess();
  return outlined init with take of (key: Int, value: AnyCRValue)?(a1, v3, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
}

uint64_t (*Canvas.visibleBoundsOverride.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.tintColor.modify;
}

void Canvas.selectedTextRange.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD v34[2];
  uint64_t v35;

  v3 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v7)
  {
LABEL_24:
    __break(1u);
    return;
  }
  v8 = v7;
  v9 = swift_bridgeObjectRetain();
  v10 = specialized Sequence.compactMap<A>(_:)(v9, (uint64_t)v8);

  swift_bridgeObjectRelease();
  v34[1] = v6;
  v35 = a1;
  if (v10 >> 62)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    if (v11)
    {
LABEL_4:
      v12 = 4;
      v13 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      while (1)
      {
        if ((v10 & 0xC000000000000001) != 0)
          v14 = (_QWORD *)MEMORY[0x1DF0E4D64](v12 - 4, v10);
        else
          v14 = *(id *)(v10 + 8 * v12);
        v15 = v14;
        v16 = v12 - 3;
        if (__OFADD__(v12 - 4, 1))
        {
          __break(1u);
          goto LABEL_19;
        }
        v17 = *(uint64_t (**)(void))((*v13 & *v14) + 0x2D0);
        v18 = (char *)v17();
        if (v18)
        {
          v19 = *(_QWORD *)&v18[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];

          if (v19)
            break;
        }

        ++v12;
        if (v16 == v11)
          goto LABEL_20;
      }
      v20 = swift_bridgeObjectRelease_n();
      v21 = ((uint64_t (*)(uint64_t))v17)(v20);
      if (!v21
        || (v22 = (void *)v21,
            v23 = *(void **)(v21 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView),
            v24 = v23,
            v22,
            !v23))
      {

        goto LABEL_21;
      }
      v25 = (char *)objc_msgSend(v24, sel_selectedRange);
      v27 = v26;

      v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (WeakRef<TextBox>, Range<Int>));
      v29 = *(int *)(v28 + 48);
      (*(void (**)(void))((*v13 & *v15) + 0xE0))();
      type metadata accessor for TextBox();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
      v30 = v35;
      WeakRef.init(id:)();

      v31 = &v25[v27];
      if (__OFADD__(v25, v27))
      {
        __break(1u);
      }
      else if ((uint64_t)v31 >= (uint64_t)v25)
      {
        v32 = (_QWORD *)(v30 + v29);
        *v32 = v25;
        v32[1] = v31;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v30, 0, 1, v28);
        return;
      }
      __break(1u);
      goto LABEL_24;
    }
  }
  else
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v11)
      goto LABEL_4;
  }
LABEL_20:
  swift_bridgeObjectRelease_n();
LABEL_21:
  v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (WeakRef<TextBox>, Range<Int>));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v35, 1, 1, v33);
}

void Canvas.presentSubelement<A>(_:presentationViewController:)(_QWORD *a1, void *a2, uint64_t a3)
{
  unint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  void (*v15)(_QWORD *__return_ptr);
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  _QWORD aBlock[6];

  v40 = *v3;
  v41 = a2;
  v5 = *MEMORY[0x1E0DEEDD8];
  v6 = *(_QWORD *)((*a1 & *MEMORY[0x1E0DEEDD8]) + 0x368);
  v7 = *(_QWORD *)((*a1 & *MEMORY[0x1E0DEEDD8]) + 0x370);
  v8 = type metadata accessor for Capsule();
  v9 = type metadata accessor for Optional();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v36 - v12;
  v37 = v6;
  v38 = v7;
  v39 = a3;
  type metadata accessor for CanvasElementViewController(0, v6, v7, a3);
  v14 = (_QWORD *)(v5 & v40);
  v15 = (void (*)(_QWORD *__return_ptr))v14[89];
  v16 = *(id *)((char *)v3 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_context);
  v40 = (unint64_t)v3;
  v15(aBlock);
  v17 = v8;
  v18 = v41;
  v19 = specialized CanvasElementViewController.__allocating_init(context:editingMode:allowMediaCanvasElements:transparentBackground:)(v16, (char *)aBlock, 1, 0);

  CanvasElementView.canvasElement.getter((uint64_t)v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v13, 0, 1, v17);
  specialized CanvasElementViewController.rootElement.setter(v13);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  objc_msgSend(v19, sel_setModalPresentationStyle_, 3);
  v20 = objc_msgSend(v18, sel_view);
  if (v20)
  {
    v21 = v20;
    v22 = objc_msgSend(v20, sel_tintColor);

    if (v22)
    {
      CanvasElementViewController.createNavigationBack(tintColor:)((UIColor)v22);

      v23 = (_QWORD *)swift_allocObject();
      v24 = v14[247];
      v23[2] = v24;
      v25 = v14[248];
      v23[3] = v25;
      v26 = v14[249];
      v23[4] = v26;
      v23[5] = v19;
      aBlock[4] = partial apply for closure #1 in Canvas.presentSubelement<A>(_:presentationViewController:);
      aBlock[5] = v23;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      aBlock[3] = &block_descriptor_147_0;
      v27 = _Block_copy(aBlock);
      v28 = v19;
      swift_release();
      objc_msgSend(v18, sel_presentViewController_animated_completion_, v28, 1, v27);
      _Block_release(v27);
      aBlock[0] = CanvasElementViewController.publisher.getter();
      v29 = swift_allocObject();
      v30 = v40;
      swift_unknownObjectWeakInit();
      v31 = (_QWORD *)swift_allocObject();
      v32 = v37;
      v31[2] = v24;
      v31[3] = v32;
      v31[4] = v25;
      v31[5] = v26;
      v33 = v39;
      v31[6] = v38;
      v31[7] = v33;
      v31[8] = v29;
      v34 = type metadata accessor for AnyPublisher();
      MEMORY[0x1DF0E6450](MEMORY[0x1E0C95D90], v34);
      v35 = Publisher<>.sink(receiveValue:)();
      swift_release();
      swift_release();
      *(_QWORD *)(v30 + direct field offset for Canvas.childViewControllerCancellable) = v35;

      swift_release();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

Swift::Void __swiftcall Canvas.selectAll()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54[16];
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v1 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v0);
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v43 = *(_QWORD *)(v2 - 8);
  v44 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v42 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v40, v5);
  v41 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v48 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v46 = *(_QWORD *)(v10 - 8);
  v47 = (void (*)(uint64_t, uint64_t))v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v1[247];
  v15 = v1[248];
  v39 = *(_QWORD *)(v15 + 16);
  v16 = type metadata accessor for Capsule();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v37 - v23;
  CanvasElementView.canvasElement.getter((uint64_t)&v37 - v23);
  v56 = v14;
  v57 = v15;
  v45 = v1[249];
  v58 = v45;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v25 = *(void (**)(char *, uint64_t))(v17 + 8);
  v38 = v24;
  v25(v24, v16);
  v55 = v50;
  v49 = specialized Sequence.compactMap<A>(_:)((void (*)(char *))partial apply for closure #1 in Canvas.selectAll(), (uint64_t)v54);
  (*(void (**)(char *, _QWORD))(v46 + 8))(v13, v47);
  CanvasElementView.canvasElement.getter((uint64_t)v20);
  v51 = v14;
  v52 = v15;
  v53 = v45;
  swift_getKeyPath();
  v26 = (uint64_t)v48;
  Capsule<>.subscript.getter();
  swift_release();
  v46 = v16;
  v47 = (void (*)(uint64_t, uint64_t))v25;
  v25(v20, v16);
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v26, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    v29 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v30 = (uint64_t)v38;
    CanvasElementView.canvasElement.getter((uint64_t)v38);
    v31 = (uint64_t)v41;
    Ref.subscript.getter();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
    v33 = v43;
    v32 = v44;
    v34 = v42;
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v42, v31 + *(int *)(v40 + 20), v44);
    outlined destroy of PKStrokeProperties(v31, (uint64_t (*)(_QWORD))type metadata accessor for PKDrawingStruct);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
    v29 = CROrderedSet.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v32);
    v47(v30, v46);
  }
  v35 = specialized Set.init<A>(_:)(v49);
  swift_bridgeObjectRelease();
  v36 = specialized Set.init<A>(_:)(v29);
  swift_bridgeObjectRelease();
  AnyCanvas.selection.setter(v35, v36, 6, 0);
}

Swift::Void __swiftcall Canvas._copyAll()()
{
  void *v0;

  Canvas.selectAll()();
  objc_msgSend(v0, sel_copy_, 0);
  AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);
}

id Canvas.isRulerActive.getter()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  id v3;

  v1 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x320))();
  if (!v1)
    return 0;
  v2 = v1;
  v3 = objc_msgSend(v1, sel_rulerEnabled);

  return v3;
}

void Canvas.isRulerActive.setter(char a1)
{
  _QWORD *v1;
  id v3;

  v3 = (id)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x320))();
  objc_msgSend(v3, sel_setRulerEnabled_, a1 & 1);

}

void (*Canvas.isRulerActive.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = Canvas.isRulerActive.getter() & 1;
  return Canvas.isRulerActive.modify;
}

void Canvas.isRulerActive.modify(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = (id)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)a1) + 0x320))();
  objc_msgSend(v2, sel_setRulerEnabled_, v1);

}

uint64_t Canvas.tool.setter(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  Class isa;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  Class v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  uint64_t v20;
  void *v21;
  uint64_t v22;
  Class v23;
  void *v24;
  void *v25;
  unsigned int v26;
  uint64_t v29[3];
  uint64_t v30;

  v2 = v1;
  v4 = type metadata accessor for PKInk();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v29[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v29[-1] - v11;
  specialized Canvas.tool.getter(v29);
  v13 = v30;
  __swift_project_boxed_opaque_existential_1(v29, v30);
  PKTool.ink.getter(v13, v12);
  isa = PKInk._bridgeToObjectiveC()().super.isa;
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v12, v4);
  v16 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v16);
  PKTool.ink.getter(v16, v8);
  v17 = PKInk._bridgeToObjectiveC()().super.isa;
  v15(v8, v4);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKInk);
  LOBYTE(v16) = static NSObject.== infix(_:_:)();

  v18 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  if ((v16 & 1) == 0)
  {
    v19 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x320);
    v20 = ((uint64_t (*)(uint64_t))v19)(v18);
    if (v20)
    {
      v21 = (void *)v20;
      v22 = a1[3];
      __swift_project_boxed_opaque_existential_1(a1, v22);
      PKTool.ink.getter(v22, v12);
      v23 = PKInk._bridgeToObjectiveC()().super.isa;
      v15(v12, v4);
      objc_msgSend(v21, sel_setInk_, v23);

    }
    v24 = (void *)v19();
    if (v24)
    {
      v25 = v24;
      v26 = objc_msgSend(v24, sel_allowsFingerDrawing);

      if (v26)
        AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void (*Canvas.tool.modify(uint64_t **a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t *v3;

  v3 = (uint64_t *)malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  specialized Canvas.tool.getter(v3);
  return Canvas.tool.modify;
}

void Canvas.tool.modify(uint64_t *a1, char a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)*a1;
  if ((a2 & 1) != 0)
  {
    outlined init with copy of FindResult(*a1, (uint64_t)(v2 + 5));
    Canvas.tool.setter(v2 + 5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  }
  else
  {
    Canvas.tool.setter((_QWORD *)*a1);
  }
  free(v2);
}

uint64_t Canvas.publisher.getter()
{
  return Canvas.publisher.getter();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x7B8);
  v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x7C0);
  v3 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x7C8);
  v4 = v0;
  swift_unknownObjectWeakInit();

  type metadata accessor for Capsule();
  v5 = type metadata accessor for Canvas.PaperViewCanvasPublisher(0, v1, v2, v3);
  MEMORY[0x1DF0E6450](&protocol conformance descriptor for Canvas<A>.PaperViewCanvasPublisher, v5);
  return AnyPublisher.init<A>(_:)();
}

uint64_t Canvas.livePublisher.getter()
{
  return Canvas.publisher.getter();
}

id Canvas.mergeCanvasState(_:)()
{
  uint64_t v0;

  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CanvasState>);
  type metadata accessor for CanvasState();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
  Capsule.merge<A>(_:)();
  swift_endAccess();
  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView), sel_setNeedsLayout);
}

uint64_t Canvas.isInUndoableGroup.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + direct field offset for Canvas.isInUndoableGroup);
}

uint64_t Canvas.isInUndoableGroup.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + direct field offset for Canvas.isInUndoableGroup) = result;
  return result;
}

uint64_t Canvas.isUndoableGroupNewChange.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + direct field offset for Canvas.isUndoableGroupNewChange);
}

uint64_t Canvas.isUndoableGroupNewChange.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + direct field offset for Canvas.isUndoableGroupNewChange) = result;
  return result;
}

uint64_t Canvas.eraserCheckingIndex.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + direct field offset for Canvas.eraserCheckingIndex);
}

Swift::Void __swiftcall Canvas.stopCheckingForOldEraserStrokes(index:)(Swift::Int index)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;

  if (*(_QWORD *)(v1 + direct field offset for Canvas.eraserCheckingIndex) == index)
  {
    v2 = v1;
    if (one-time initialization token for logger != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)logger);
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1DDB0F000, v4, v5, "Stopped checking for old eraser strokes", v6, 2u);
      MEMORY[0x1DF0E6558](v6, -1, -1);
    }

    objc_msgSend(*(id *)(v2 + direct field offset for Canvas.removeOldEraserStrokesTimer), sel_invalidate);
    v7 = *(void **)(v2 + direct field offset for Canvas.removeOldEraserStrokesTimer);
    *(_QWORD *)(v2 + direct field offset for Canvas.removeOldEraserStrokesTimer) = 0;

  }
}

Swift::Void __swiftcall Canvas.removeOldEraserStrokes()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void (*v9)(char *, uint64_t);
  uint64_t v10;

  v0 = type metadata accessor for Date();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v10 - v7;
  static Date.now.getter();
  Date.addingTimeInterval(_:)();
  v9 = *(void (**)(char *, uint64_t))(v1 + 8);
  v9(v4, v0);
  Canvas.removeEraserStrokesCreatedBefore(_:)((uint64_t)v8);
  v9(v8, v0);
}

uint64_t Canvas.removeEraserStrokesCreatedBefore(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = *MEMORY[0x1E0DEEDD8] & *v1;
  v4 = type metadata accessor for Date();
  v34 = *(_QWORD *)(v4 - 8);
  v35 = v4;
  v36 = *(_QWORD *)(v34 + 64);
  MEMORY[0x1E0C80A78](v4, v5);
  v33 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = *(_QWORD *)(v3 + 1976);
  v38 = *(_QWORD *)(v3 + 1984);
  v39 = v3;
  v7 = type metadata accessor for Capsule();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v7, v10);
  v32 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v32 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v20 = swift_allocObject();
  swift_unknownObjectWeakInit();
  CanvasElementView.canvasElement.getter((uint64_t)v14);
  v21 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v22 = v7;
  v21((char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v14, v7);
  v24 = v33;
  v23 = v34;
  v25 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v33, a1, v35);
  v26 = (*(unsigned __int8 *)(v8 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v27 = v23;
  v28 = (v9 + *(unsigned __int8 *)(v23 + 80) + v26) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  v29 = (char *)swift_allocObject();
  *((_QWORD *)v29 + 2) = 0;
  *((_QWORD *)v29 + 3) = 0;
  v30 = v38;
  *((_QWORD *)v29 + 4) = v37;
  *((_QWORD *)v29 + 5) = v30;
  *((_QWORD *)v29 + 6) = *(_QWORD *)(v39 + 1992);
  *((_QWORD *)v29 + 7) = v20;
  v21(&v29[v26], v32, v22);
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(&v29[v28], v24, v25);
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v18, (uint64_t)&async function pointer to partial apply for closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:), (uint64_t)v29);
  swift_release();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for TaskPriority?);
}

uint64_t Canvas.dropSessionFromCurrentCanvas(session:)(void *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  uint64_t *v8;
  id v9;
  char v10;
  _OWORD v12[2];
  __int128 v13;
  __int128 v14;

  swift_getObjectType();
  v3 = *v1;
  v4 = *MEMORY[0x1E0DEEDD8];
  v5 = objc_msgSend(a1, sel_localDragSession);
  if (!v5)
  {
    v13 = 0u;
    v14 = 0u;
LABEL_9:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v13, &demangling cache variable for type metadata for Any?);
    goto LABEL_10;
  }
  v6 = objc_msgSend(v5, sel_localContext);
  swift_unknownObjectRelease();
  if (v6)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v12, (uint64_t)&v13, &demangling cache variable for type metadata for Any?);
  if (!*((_QWORD *)&v14 + 1))
    goto LABEL_9;
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    v10 = 0;
    return v10 & 1;
  }
  v7 = *(void **)&v12[0];
  type metadata accessor for Canvas(0, *(_QWORD *)((v4 & v3) + 0x7B8), *(_QWORD *)((v4 & v3) + 0x7C0), *(_QWORD *)((v4 & v3) + 0x7C8));
  v8 = v1;
  v9 = v7;
  v10 = static NSObject.== infix(_:_:)();

  return v10 & 1;
}

void Canvas.dropFrame(session:)(void *a1@<X0>, double *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  double v15;
  id v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  id v21;
  CGPoint v22;
  id v23;
  unint64_t v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  double v29;
  double width;
  double height;
  double v32;
  CGSize v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  double *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  CGAffineTransform v49;
  CGAffineTransform v50;
  CGAffineTransform v51;
  CGPoint v52;

  v5 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v2);
  v6 = (void *)v5[248];
  v46 = (void *)v5[247];
  v48 = type metadata accessor for Capsule();
  v47 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48, v7);
  v9 = (char *)&v45 - v8;
  v10 = type metadata accessor for UTType();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = 0.0;
  if ((Canvas.dropSessionFromCurrentCanvas(session:)(a1) & 1) != 0)
    goto LABEL_24;
  v16 = Canvas.editingView.getter();
  objc_msgSend(a1, sel_locationInView_, v16);
  v18 = v17;
  v20 = v19;

  v21 = Canvas.editingView.getter();
  AnyCanvasElementView.paperBoundsTransform()(&v51);
  v50 = v51;
  CGAffineTransformInvert(&v49, &v50);
  v50 = v49;
  v52.x = v18;
  v52.y = v20;
  v22 = CGPointApplyAffineTransform(v52, &v50);

  v23 = objc_msgSend(a1, sel_items);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v24 >> 62))
  {
    v25 = *(void **)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v25)
      goto LABEL_4;
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  v25 = (void *)_CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v25)
  {
LABEL_23:
    swift_bridgeObjectRelease();
LABEL_24:
    v29 = 0.0;
    width = 0.0;
    height = 0.0;
    v32 = 0.0;
    goto LABEL_25;
  }
LABEL_4:
  if ((v24 & 0xC000000000000001) != 0)
  {
    v26 = (id)MEMORY[0x1DF0E4D64](0, v24);
  }
  else
  {
    if (!*(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_28;
    }
    v26 = *(id *)(v24 + 32);
  }
  v27 = v26;
  swift_bridgeObjectRelease();
  v28 = objc_msgSend(v27, sel_itemProvider);

  v29 = 0.0;
  width = 0.0;
  height = 0.0;
  v32 = 0.0;
  if (v28)
  {
    v25 = v28;
    v33 = NSItemProvider.preferredSizeForCanvasElement()();
    width = v33.width;
    height = v33.height;
    if (v33.width != 0.0 || v33.height != 0.0)
      goto LABEL_21;
    static UTType.utf8PlainText.getter();
    v34 = UTType.identifier.getter();
    v45 = v25;
    v36 = v35;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    v37 = (void *)MEMORY[0x1DF0E41AC](v34, v36);
    v25 = v45;
    swift_bridgeObjectRelease();
    v38 = objc_msgSend(v25, sel_hasItemConformingToTypeIdentifier_, v37);

    if (!v38)
    {
      if ((specialized static LinkLayout.canHandle(itemProvider:)(v25) & 1) != 0)
      {
        if (one-time initialization token for linkSize != -1)
          swift_once();
        v41 = (double *)&static UIConstants.linkSize;
      }
      else
      {
        if (one-time initialization token for canvasElementDefaultSize != -1)
          swift_once();
        v41 = (double *)&static UIConstants.canvasElementDefaultSize;
      }
      width = *v41;
      height = v41[1];
      goto LABEL_21;
    }
    if (one-time initialization token for textBoxDefaultPointSize == -1)
    {
LABEL_12:
      height = UnknownCanvasElementView.flags.modify(v39, v40);
      width = 2.0;
LABEL_21:
      v15 = v22.x - width * 0.5;
      v29 = v22.y - height * 0.5;
      v42 = CanvasElementView.canvasElement.getter((uint64_t)v9);
      MEMORY[0x1E0C80A78](v42, v43);
      *(&v45 - 4) = v46;
      *(&v45 - 3) = v6;
      *(&v45 - 2) = (void *)v5[249];
      swift_getKeyPath();
      v44 = v48;
      Capsule<>.subscript.getter();
      swift_release();

      (*(void (**)(char *, uint64_t))(v47 + 8))(v9, v44);
      v32 = -v50.a;
      goto LABEL_25;
    }
LABEL_28:
    v39 = swift_once();
    goto LABEL_12;
  }
LABEL_25:
  *a2 = v15;
  a2[1] = v29;
  a2[2] = width;
  a2[3] = height;
  a2[4] = v32;
}

uint64_t Canvas.isValidDropPoint(dropLocation:)(double a1, double a2)
{
  _QWORD *v2;
  uint64_t v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  id v11;
  uint64_t v12;

  v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x320))();
  if (!v5)
    return 0;
  v6 = (void *)v5;
  objc_msgSend(v2, sel_convertPoint_toCoordinateSpace_, v5, a1, a2);
  v8 = v7;
  v10 = v9;
  v11 = objc_msgSend(v6, sel_hitAttachment_);

  if (v11)
    v12 = 1;
  else
    v12 = (uint64_t)objc_msgSend(v6, sel_insertAttachmentIfInBlankSpace_, v8, v10);

  return v12;
}

uint64_t Canvas.createSubCanvasElement(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;

  v49 = a4;
  v41 = a3;
  v48 = a2;
  v8 = *MEMORY[0x1E0DEEDD8] & *v5;
  v50 = type metadata accessor for CRKeyPath();
  v9 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50, v10);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = *(_QWORD *)(v8 + 1984);
  v44 = v8;
  v13 = type metadata accessor for Capsule();
  v46 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v45 = (char *)&v39 - v15;
  v16 = v5;
  v17 = swift_bridgeObjectRetain();
  v18 = specialized Sequence.compactMap<A>(_:)(v17, v16);
  v47 = a1;
  swift_bridgeObjectRelease();

  v19 = v18;
  CanvasElementView.canvasElement.getter(a5);
  v20 = v18;
  if (!(v18 >> 62))
  {
    v21 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    v42 = 0;
    if (v21)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease();
    v24 = MEMORY[0x1E0DEE9D8];
LABEL_14:
    v30 = v49;
    v31 = specialized Set.init<A>(_:)(v24);
    v32 = swift_bridgeObjectRelease();
    MEMORY[0x1E0C80A78](v32, v33);
    v34 = *(_QWORD *)(v44 + 1992);
    *(&v39 - 8) = v43;
    *(&v39 - 7) = v34;
    v35 = v47;
    *(&v39 - 6) = v31;
    *(&v39 - 5) = v35;
    v36 = v41;
    *(&v39 - 4) = v48;
    *(&v39 - 3) = v36;
    *((_BYTE *)&v39 - 16) = v30 & 1;
    Capsule.callAsFunction<A>(_:)();
    swift_bridgeObjectRelease();
    v37 = v45;
    Capsule.copy()();
    v38 = v46;
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(a5, v13);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v38 + 32))(a5, v37, v13);
  }
  swift_bridgeObjectRetain();
  v19 = v18;
  v21 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  v42 = 0;
  if (!v21)
    goto LABEL_13;
LABEL_3:
  v51 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21 & ~(v21 >> 63), 0);
  if ((v21 & 0x8000000000000000) == 0)
  {
    v39 = a5;
    v40 = v13;
    v23 = 0;
    v24 = v51;
    v25 = v19 & 0xC000000000000001;
    do
    {
      if (v25)
        v26 = (_QWORD *)MEMORY[0x1DF0E4D64](v23, v19);
      else
        v26 = *(id *)(v19 + 8 * v23 + 32);
      v27 = v26;
      (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v26) + 0xE0))();

      v51 = v24;
      v29 = *(_QWORD *)(v24 + 16);
      v28 = *(_QWORD *)(v24 + 24);
      if (v29 >= v28 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
        v24 = v51;
      }
      ++v23;
      *(_QWORD *)(v24 + 16) = v29 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v24+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v29, v12, v50);
      v19 = v20;
    }
    while (v21 != v23);
    swift_bridgeObjectRelease();
    a5 = v39;
    v13 = v40;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t Canvas.undoablyAdd(_:to:)()
{
  return Canvas.undoable(newChange:persistSelection:action:)(1, 0, (uint64_t (*)(double))partial apply for closure #1 in Canvas.undoablyAdd(_:to:));
}

id Canvas.updateScribbleIteractions(for:)(id result)
{
  uint64_t v1;
  void *v2;

  if (*(_QWORD *)(v1 + direct field offset for Canvas.scribbleInteraction))
  {
    v2 = result;
    result = objc_msgSend(result, sel_addInteraction_);
    if (*(_QWORD *)(v1 + direct field offset for Canvas.indirectScribbleInteraction))
      return objc_msgSend(v2, sel_addInteraction_);
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t Canvas.harmonizeCanvasElement<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[2];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v60 = a4;
  v69 = a1;
  v63 = *v4;
  v62 = *MEMORY[0x1E0DEEDD8];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7, v8);
  v61 = (char *)v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x1E0C80A78](v10, v11);
  v66 = (char *)v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v65 = (char *)v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for CRAssetOrData();
  v67 = *(_QWORD *)(v64 - 8);
  v17 = *(_QWORD *)(v67 + 64);
  MEMORY[0x1E0C80A78](v64, v18);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)v57 - v21;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)v57 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = a2;
  v59 = a3;
  v27 = type metadata accessor for Capsule();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v29);
  v31 = (char *)v57 - v30;
  v68 = swift_allocBox();
  v33 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v31, v69, v27);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v57[0] = v17;
    v35 = v62;
    v34 = v63;
    v69 = (uint64_t)v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    v36 = v61;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v26, 0, 1, v13);
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v33, v26, v13);
    v37 = v65;
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v65, v33, v13);
    swift_getKeyPath();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
    v38 = (uint64_t)v66;
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v37, v13);
    v39 = v67;
    v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v38, 1, v64);
    v41 = v68;
    if (v40 == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v38, &demangling cache variable for type metadata for CRAssetOrData?);
    }
    else
    {
      v43 = (_QWORD *)(v35 & v34);
      v44 = (uint64_t)v22;
      outlined init with take of PKStrokeStruct(v38, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
      v45 = type metadata accessor for TaskPriority();
      v46 = (uint64_t)v36;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v36, 1, 1, v45);
      v47 = v69;
      outlined init with copy of PKStrokeProperties((uint64_t)v22, v69, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
      type metadata accessor for MainActor();
      v48 = (id)v57[1];
      swift_retain();
      v49 = static MainActor.shared.getter();
      v50 = (*(unsigned __int8 *)(v39 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      v51 = (v57[0] + v50 + 7) & 0xFFFFFFFFFFFFFFF8;
      v52 = v41;
      v53 = (_QWORD *)swift_allocObject();
      v54 = MEMORY[0x1E0DF06E8];
      v53[2] = v49;
      v53[3] = v54;
      v55 = v58;
      v53[4] = v43[247];
      v53[5] = v55;
      v53[6] = v43[248];
      v56 = v59;
      v53[7] = v43[249];
      v53[8] = v56;
      v53[9] = v60;
      v53[10] = v48;
      outlined init with take of PKStrokeStruct(v47, (uint64_t)v53 + v50, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
      *(_QWORD *)((char *)v53 + v51) = v52;
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm(v46, (uint64_t)&async function pointer to partial apply for closure #1 in Canvas.harmonizeCanvasElement<A>(_:), (uint64_t)v53);
      swift_release();
      outlined destroy of PKStrokeProperties(v44, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
    }
    return swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v26, 1, 1, v13);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v26, &demangling cache variable for type metadata for Capsule<Image>?);
    return swift_deallocBox();
  }
}

uint64_t Canvas.harmonizeImage(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  v4 = *MEMORY[0x1E0DEEDD8];
  v3[10] = *v2;
  v3[11] = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  v3[13] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v3[14] = v5;
  v3[15] = *(_QWORD *)(v5 - 8);
  v3[16] = swift_task_alloc();
  v6 = type metadata accessor for CRAssetOrData();
  v3[17] = v6;
  v3[18] = *(_QWORD *)(v6 - 8);
  v3[19] = swift_task_alloc();
  type metadata accessor for MainActor();
  v3[20] = static MainActor.shared.getter();
  v3[21] = dispatch thunk of Actor.unownedExecutor.getter();
  v3[22] = v7;
  return swift_task_switch();
}

void Canvas.harmonizeImage(_:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  int v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _BYTE *v15;
  double Width;
  double Height;
  double v18;
  id v19;
  void *v20;
  id v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  _QWORD *v26;
  CGRect v27;
  CGRect v28;

  v1 = *(void **)(v0 + 72);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasView<Image>);
  v2 = swift_dynamicCastClass();
  if (!v2)
  {
    swift_release();
    goto LABEL_5;
  }
  v3 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 112);
  v9 = *(_QWORD *)(v2 + direct field offset for Canvas.paperView)
     + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v2 + direct field offset for Canvas.paperView)) + 0x380);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v9, v8);
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  v10 = v1;
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v8);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v7, 1, v3);
  v12 = *(_QWORD *)(v0 + 104);
  v13 = *(void **)(v0 + 72);
  if (v11 == 1)
  {
    swift_release();

    outlined destroy of StocksKitCurrencyCache.Provider?(v12, &demangling cache variable for type metadata for CRAssetOrData?);
LABEL_5:
    v14 = type metadata accessor for Canvas.CanvasHarmonizationError(0, *(_QWORD *)((*(_QWORD *)(v0 + 80) & *(_QWORD *)(v0 + 88)) + 0x7B8), *(_QWORD *)((*(_QWORD *)(v0 + 80) & *(_QWORD *)(v0 + 88)) + 0x7C0), *(_QWORD *)((*(_QWORD *)(v0 + 80) & *(_QWORD *)(v0 + 88)) + 0x7C8));
    MEMORY[0x1DF0E6450](&protocol conformance descriptor for Canvas<A>.CanvasHarmonizationError, v14);
    swift_allocError();
    *v15 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  outlined init with take of PKStrokeStruct(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 152), (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
  objc_msgSend(v13, sel_bounds);
  Width = CGRectGetWidth(v27);
  *(double *)(v0 + 184) = Width;
  objc_msgSend(v13, sel_bounds);
  Height = CGRectGetHeight(v28);
  *(double *)(v0 + 192) = Height;
  if (Width > Height)
    v18 = Width;
  else
    v18 = Height;
  v19 = objc_msgSend(v13, sel_window);
  if (v19)
  {
    v20 = v19;
    v21 = objc_msgSend(v19, sel_screen);

    objc_msgSend(v21, sel_scale);
    v23 = v22;

  }
  else
  {
    v23 = 1.0;
  }
  *(double *)(v0 + 200) = v23;
  v24 = v18 * v23;
  if ((~COERCE__INT64(v18 * v23) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v24 <= -9.22337204e18)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v24 < 9.22337204e18)
  {
    v25 = (uint64_t)v24;
    v26 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 208) = v26;
    *v26 = v0;
    v26[1] = Canvas.harmonizeImage(_:);
    CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(v25, 1, 0);
    return;
  }
LABEL_18:
  __break(1u);
}

uint64_t Canvas.harmonizeImage(_:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 216) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 232) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t Canvas.harmonizeImage(_:)()
{
  uint64_t v0;
  double v1;
  double v2;
  double v3;
  _QWORD *v4;
  double v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _BYTE *v12;

  if (*(_QWORD *)(v0 + 216))
  {
    v2 = *(double *)(v0 + 192);
    v1 = *(double *)(v0 + 200);
    v3 = *(double *)(v0 + 184);
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 224) = v4;
    *v4 = v0;
    v4[1] = Canvas.harmonizeImage(_:);
    if (v3 > v2)
      v5 = v3;
    else
      v5 = v2;
    return CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)((uint64_t)(v1 * v5), 1, 0);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 152);
    v9 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 88);
    v10 = *(void **)(v0 + 72);
    swift_release();
    v11 = type metadata accessor for Canvas.CanvasHarmonizationError(0, *(_QWORD *)((v9 & v8) + 0x7B8), *(_QWORD *)((v9 & v8) + 0x7C0), *(_QWORD *)((v9 & v8) + 0x7C8));
    MEMORY[0x1DF0E6450](&protocol conformance descriptor for Canvas<A>.CanvasHarmonizationError, v11);
    swift_allocError();
    *v12 = 1;
    swift_willThrow();

    outlined destroy of PKStrokeProperties(v7, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _BYTE *v16;

  v1 = *(void **)(v0 + 232);
  if (v1)
  {
    v2 = *(void **)(v0 + 216);
    v3 = *(_QWORD *)(v0 + 96);
    v4 = *(_QWORD *)(v0 + 80) & *(_QWORD *)(v0 + 88);
    static TaskPriority.userInitiated.getter();
    v5 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v3, 0, 1, v5);
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    *(_OWORD *)(v6 + 32) = *(_OWORD *)(v4 + 1976);
    *(_QWORD *)(v6 + 48) = *(_QWORD *)(v4 + 1992);
    *(_QWORD *)(v6 + 56) = v1;
    *(_QWORD *)(v6 + 64) = v2;
    v7 = v1;
    v8 = v2;
    *(_QWORD *)(v0 + 240) = _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZ10Foundation4DataVSg_Tgm5Tm(v3, (uint64_t)&async function pointer to partial apply for closure #1 in Canvas.harmonizeImage(_:), v6, &demangling cache variable for type metadata for Data?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v3, &demangling cache variable for type metadata for TaskPriority?);
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 248) = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    *v9 = v0;
    v9[1] = Canvas.harmonizeImage(_:);
    return Task.value.getter();
  }
  else
  {

    v11 = *(_QWORD *)(v0 + 152);
    v13 = *(_QWORD *)(v0 + 80);
    v12 = *(_QWORD *)(v0 + 88);
    v14 = *(void **)(v0 + 72);
    swift_release();
    v15 = type metadata accessor for Canvas.CanvasHarmonizationError(0, *(_QWORD *)((v13 & v12) + 0x7B8), *(_QWORD *)((v13 & v12) + 0x7C0), *(_QWORD *)((v13 & v12) + 0x7C8));
    MEMORY[0x1DF0E6450](&protocol conformance descriptor for Canvas<A>.CanvasHarmonizationError, v15);
    swift_allocError();
    *v16 = 1;
    swift_willThrow();

    outlined destroy of PKStrokeProperties(v11, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 256) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release();
  v1 = *(void **)(v0 + 232);
  v2 = *(void **)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 152);
  v4 = *(void **)(v0 + 72);
  if (*(_QWORD *)(v0 + 48) >> 60 == 15)
  {
    outlined destroy of PKStrokeProperties(*(_QWORD *)(v0 + 152), (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);

    swift_release();
    v5 = 1;
  }
  else
  {
    CRContext.assetManager.getter();
    CRAsset.init(data:assetManager:)();
    swift_release();

    outlined destroy of PKStrokeProperties(v3, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
    v5 = 0;
  }
  v6 = *(_QWORD *)(v0 + 56);
  v7 = type metadata accessor for CRAsset();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, v5, 1, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v1 = *(void **)(v0 + 232);
  v2 = *(void **)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 152);
  v4 = *(void **)(v0 + 72);
  swift_release();
  swift_release();

  outlined destroy of PKStrokeProperties(v3, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v8, &demangling cache variable for type metadata for TaskPriority?);
  v9 = type metadata accessor for TaskPriority();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for TaskPriority?);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
  }
  swift_getObjectType();
  swift_unknownObjectRetain();
  v11 = dispatch thunk of Actor.unownedExecutor.getter();
  v13 = v12;
  swift_unknownObjectRelease();
  if (v13 | v11)
  {
    v15[0] = 0;
    v15[1] = 0;
    v15[2] = v11;
    v15[3] = v13;
  }
  return swift_task_create();
}

uint64_t _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZ9Coherence7CapsuleVy8PaperKit5ImageVG_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZ10Foundation4DataVSg_Tgm5Tm(a1, a2, a3, &demangling cache variable for type metadata for Capsule<Image>);
}

uint64_t _sScTss5Error_pRs_rlE8detached8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntFZ10Foundation4DataVSg_Tgm5Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[4];

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v10, &demangling cache variable for type metadata for TaskPriority?);
  v11 = type metadata accessor for TaskPriority();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for TaskPriority?);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v13 = dispatch thunk of Actor.unownedExecutor.getter();
      v15 = v14;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  __swift_instantiateConcreteTypeFromMangledName(a4);
  if (v15 | v13)
  {
    v17[0] = 0;
    v17[1] = 0;
    v17[2] = v13;
    v17[3] = v15;
  }
  return swift_task_create();
}

uint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t result;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(unint64_t, char *, uint64_t);
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  char *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  void (*v54)(char *);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v53 = a2;
  v54 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PKStroke();
  v55 = *(_QWORD *)(v9 - 8);
  v56 = v9;
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v49 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v13);
  v48 = (char *)&v45 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = MEMORY[0x1E0C80A78](v15, v17);
  v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v21);
  v23 = (char *)&v45 - v22;
  v24 = *(_QWORD *)(a3 + 56);
  v51 = a3 + 56;
  v25 = 1 << *(_BYTE *)(a3 + 32);
  v26 = -1;
  if (v25 < 64)
    v26 = ~(-1 << v25);
  v27 = v26 & v24;
  v52 = (unint64_t)(v25 + 63) >> 6;
  v57 = a3;
  result = swift_bridgeObjectRetain();
  v29 = 0;
  v50 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (v27)
    {
      v30 = __clz(__rbit64(v27));
      v27 &= v27 - 1;
      v31 = v30 | (v29 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v29++, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v29 >= v52)
      goto LABEL_32;
    v33 = *(_QWORD *)(v51 + 8 * v29);
    if (!v33)
      break;
LABEL_18:
    v27 = (v33 - 1) & v33;
    v31 = __clz(__rbit64(v33)) + (v29 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v23, *(_QWORD *)(v57 + 48) + *(_QWORD *)(v16 + 72) * v31, v15);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v20, v23, v15);
    v54(v20);
    if (v3)
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v15);
      v44 = v50;
      swift_bridgeObjectRelease();
LABEL_33:
      swift_release();
      return v44;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v15);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v8, 1, v56) == 1)
    {
      result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for PKStroke?);
    }
    else
    {
      v35 = v56;
      v47 = *(void (**)(char *, char *, uint64_t))(v55 + 32);
      v47(v48, v8, v56);
      v36 = v35;
      v37 = (uint64_t (*)(unint64_t, char *, uint64_t))v47;
      v47(v49, v48, v36);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v50 + 16) + 1, 1, v50);
      v39 = *(_QWORD *)(v50 + 16);
      v38 = *(_QWORD *)(v50 + 24);
      v40 = v39 + 1;
      if (v39 >= v38 >> 1)
      {
        v45 = *(_QWORD *)(v50 + 16);
        v46 = v39 + 1;
        v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1, v50);
        v39 = v45;
        v40 = v46;
        v50 = v43;
      }
      v41 = v49;
      v42 = v50;
      *(_QWORD *)(v50 + 16) = v40;
      result = v37(v42+ ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))+ *(_QWORD *)(v55 + 72) * v39, v41, v56);
    }
  }
  v34 = v29 + 1;
  if (v29 + 1 >= v52)
    goto LABEL_32;
  v33 = *(_QWORD *)(v51 + 8 * v34);
  if (v33)
    goto LABEL_17;
  v34 = v29 + 2;
  if (v29 + 2 >= v52)
    goto LABEL_32;
  v33 = *(_QWORD *)(v51 + 8 * v34);
  if (v33)
    goto LABEL_17;
  v34 = v29 + 3;
  if (v29 + 3 >= v52)
    goto LABEL_32;
  v33 = *(_QWORD *)(v51 + 8 * v34);
  if (v33)
    goto LABEL_17;
  v34 = v29 + 4;
  if (v29 + 4 >= v52)
  {
LABEL_32:
    v44 = v50;
    goto LABEL_33;
  }
  v33 = *(_QWORD *)(v51 + 8 * v34);
  if (v33)
  {
LABEL_17:
    v29 = v34;
    goto LABEL_18;
  }
  while (1)
  {
    v29 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v29 >= v52)
      goto LABEL_32;
    v33 = *(_QWORD *)(v51 + 8 * v29);
    ++v34;
    if (v33)
      goto LABEL_18;
  }
LABEL_35:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t result;
  int64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *);
  uint64_t v54;

  v52 = a2;
  v53 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Shape();
  v10 = *(_QWORD *)(v9 - 8);
  v50 = v9;
  v51 = v10;
  MEMORY[0x1E0C80A78](v9, v11);
  v46 = (uint64_t)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v45 = (uint64_t)&v44 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v44 - v23;
  v25 = *(_QWORD *)(a3 + 56);
  v48 = a3 + 56;
  v26 = 1 << *(_BYTE *)(a3 + 32);
  v27 = -1;
  if (v26 < 64)
    v27 = ~(-1 << v26);
  v28 = v27 & v25;
  v49 = (unint64_t)(v26 + 63) >> 6;
  v54 = a3;
  result = swift_bridgeObjectRetain();
  v30 = 0;
  v47 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (v28)
    {
      v31 = __clz(__rbit64(v28));
      v28 &= v28 - 1;
      v32 = v31 | (v30 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v30++, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v30 >= v49)
      goto LABEL_32;
    v34 = *(_QWORD *)(v48 + 8 * v30);
    if (!v34)
      break;
LABEL_18:
    v28 = (v34 - 1) & v34;
    v32 = __clz(__rbit64(v34)) + (v30 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v24, *(_QWORD *)(v54 + 48) + *(_QWORD *)(v17 + 72) * v32, v16);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v20, v24, v16);
    v53(v20);
    if (v3)
    {
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
      v43 = v47;
      swift_bridgeObjectRelease();
LABEL_33:
      swift_release();
      return v43;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v8, 1, v50) == 1)
    {
      result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for Shape?);
    }
    else
    {
      v36 = v45;
      outlined init with take of PKStrokeStruct((uint64_t)v8, v45, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      outlined init with take of PKStrokeStruct(v36, v46, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v47 + 16) + 1, 1, v47);
      v38 = *(_QWORD *)(v47 + 16);
      v37 = *(_QWORD *)(v47 + 24);
      v39 = v38 + 1;
      if (v38 >= v37 >> 1)
      {
        v44 = v38 + 1;
        v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1, v47);
        v39 = v44;
        v47 = v42;
      }
      v40 = v46;
      v41 = v47;
      *(_QWORD *)(v47 + 16) = v39;
      result = outlined init with take of PKStrokeStruct(v40, v41+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))+ *(_QWORD *)(v51 + 72) * v38, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    }
  }
  v35 = v30 + 1;
  if (v30 + 1 >= v49)
    goto LABEL_32;
  v34 = *(_QWORD *)(v48 + 8 * v35);
  if (v34)
    goto LABEL_17;
  v35 = v30 + 2;
  if (v30 + 2 >= v49)
    goto LABEL_32;
  v34 = *(_QWORD *)(v48 + 8 * v35);
  if (v34)
    goto LABEL_17;
  v35 = v30 + 3;
  if (v30 + 3 >= v49)
    goto LABEL_32;
  v34 = *(_QWORD *)(v48 + 8 * v35);
  if (v34)
    goto LABEL_17;
  v35 = v30 + 4;
  if (v30 + 4 >= v49)
  {
LABEL_32:
    v43 = v47;
    goto LABEL_33;
  }
  v34 = *(_QWORD *)(v48 + 8 * v35);
  if (v34)
  {
LABEL_17:
    v30 = v35;
    goto LABEL_18;
  }
  while (1)
  {
    v30 = v35 + 1;
    if (__OFADD__(v35, 1))
      break;
    if (v30 >= v49)
      goto LABEL_32;
    v34 = *(_QWORD *)(v48 + 8 * v30);
    ++v35;
    if (v34)
      goto LABEL_18;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(uint64_t *__return_ptr, char *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  void (*v28)(uint64_t *__return_ptr, char *);
  uint64_t v29;
  void (*v31)(uint64_t *__return_ptr, char *);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = v2;
  v37 = a2;
  v31 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v33 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  v32 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)&v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = MEMORY[0x1E0DEE9D8];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, v39, v12, v19);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>, MEMORY[0x1E0D11DC0]);
  dispatch thunk of Sequence.makeIterator()();
  v22 = v33;
  v23 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator and conformance CROrderedSet<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator, MEMORY[0x1E0D11D70]);
  v38 = v21;
  v39 = v17;
  dispatch thunk of IteratorProtocol.next()();
  v24 = v4;
  v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  if (v25(v11, 1, v4) == 1)
  {
    v26 = v32;
    v24 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v27 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    v35 = v23;
    v36 = v27;
    v28 = v31;
    v34 = v11;
    v27(v7, v11, v4);
    while (1)
    {
      v28(&v40, v7);
      v29 = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v7, v4);
      if (v3)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v38, v39);
        swift_bridgeObjectRelease();
        return v24;
      }
      if (v40)
      {
        v37 = 0;
        MEMORY[0x1DF0E4398](v29);
        if (*(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        v11 = v34;
        v3 = v37;
      }
      dispatch thunk of IteratorProtocol.next()();
      if (v25(v11, 1, v4) == 1)
        break;
      v36(v7, v11, v4);
    }
    v24 = v41;
    v26 = v32;
  }
  (*(void (**)(char *, uint64_t))(v26 + 8))(v38, v39);
  return v24;
}

unint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  void (*v28)(_QWORD);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  v33 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for PKStroke();
  v10 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v11);
  v32 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v29 = (char *)&v27 - v15;
  v16 = *(_QWORD *)(a3 + 16);
  if (!v16)
    return MEMORY[0x1E0DEE9D8];
  v17 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>)
                  - 8);
  v18 = a3 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  v31 = *(_QWORD *)(v17 + 72);
  v27 = a3;
  swift_bridgeObjectRetain();
  v19 = MEMORY[0x1E0DEE9D8];
  v28 = a1;
  v20 = v30;
  do
  {
    a1(v18);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v19;
    }
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v20) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for PKStroke?);
    }
    else
    {
      v21 = v10;
      v22 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      v23 = v29;
      v22(v29, v9, v20);
      v22(v32, v23, v20);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v19 + 16) + 1, 1, v19);
      v25 = *(_QWORD *)(v19 + 16);
      v24 = *(_QWORD *)(v19 + 24);
      if (v25 >= v24 >> 1)
        v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, v19);
      *(_QWORD *)(v19 + 16) = v25 + 1;
      v20 = v30;
      v22((char *)(v19+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(_QWORD *)(v21 + 72) * v25), v32, v30);
      v10 = v21;
      a1 = v28;
    }
    v18 += v31;
    --v16;
  }
  while (v16);
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(_OWORD *__return_ptr, char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  __int128 v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  _QWORD *v36;
  uint64_t v37;
  int64_t v38;
  _OWORD v39[2];
  char v40;
  void (*v41)(_OWORD *__return_ptr, char *);

  v41 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v32 - v12;
  v14 = *(_QWORD *)(a3 + 56);
  v37 = a3 + 56;
  v15 = 1 << *(_BYTE *)(a3 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v38 = (unint64_t)(v15 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v19 = 0;
  v36 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (v17)
    {
      v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v21 = v20 | (v19 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v19++, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v19 >= v38)
      goto LABEL_31;
    v23 = *(_QWORD *)(v37 + 8 * v19);
    if (!v23)
      break;
LABEL_18:
    v17 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v19 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v13, *(_QWORD *)(a3 + 48) + *(_QWORD *)(v6 + 72) * v21, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v13, v5);
    v41(v39, v9);
    if (v3)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      v31 = v36;
      swift_bridgeObjectRelease();
LABEL_32:
      swift_release();
      return (uint64_t)v31;
    }
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    if ((v40 & 1) == 0)
    {
      v34 = v39[1];
      v35 = v39[0];
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36[2] + 1, 1, v36);
        v36 = (_QWORD *)result;
      }
      v26 = v36[2];
      v25 = v36[3];
      v27 = v26 + 1;
      if (v26 >= v25 >> 1)
      {
        v32 = v36[2];
        v33 = v26 + 1;
        result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v26 + 1, 1, v36);
        v26 = v32;
        v27 = v33;
        v36 = (_QWORD *)result;
      }
      v28 = v36;
      v36[2] = v27;
      v29 = &v28[4 * v26];
      v30 = v34;
      *((_OWORD *)v29 + 2) = v35;
      *((_OWORD *)v29 + 3) = v30;
    }
  }
  v24 = v19 + 1;
  if (v19 + 1 >= v38)
    goto LABEL_31;
  v23 = *(_QWORD *)(v37 + 8 * v24);
  if (v23)
    goto LABEL_17;
  v24 = v19 + 2;
  if (v19 + 2 >= v38)
    goto LABEL_31;
  v23 = *(_QWORD *)(v37 + 8 * v24);
  if (v23)
    goto LABEL_17;
  v24 = v19 + 3;
  if (v19 + 3 >= v38)
    goto LABEL_31;
  v23 = *(_QWORD *)(v37 + 8 * v24);
  if (v23)
    goto LABEL_17;
  v24 = v19 + 4;
  if (v19 + 4 >= v38)
  {
LABEL_31:
    v31 = v36;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v37 + 8 * v24);
  if (v23)
  {
LABEL_17:
    v19 = v24;
    goto LABEL_18;
  }
  while (1)
  {
    v19 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v19 >= v38)
      goto LABEL_31;
    v23 = *(_QWORD *)(v37 + 8 * v19);
    ++v24;
    if (v23)
      goto LABEL_18;
  }
LABEL_34:
  __break(1u);
  return result;
}

unint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(char *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  char *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  void (*v54)(char *, char *, uint64_t);
  uint64_t (*v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;

  v58 = a2;
  v59 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v3, v4);
  v53 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v7 = *(_QWORD *)(v6 - 8);
  v62 = v6;
  v63 = v7;
  MEMORY[0x1E0C80A78](v6, v8);
  v57 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v52 = (char *)&v50 - v12;
  v51 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v13 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51, v14);
  v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v23);
  v25 = (char *)&v50 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  v50 = *(_QWORD *)(v26 - 8);
  v28 = MEMORY[0x1E0C80A78](v26, v27);
  v30 = (char *)&v50 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, unint64_t, uint64_t, double))(v22 + 16))(v25, v64, v21, v28);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>, MEMORY[0x1E0D11DC0]);
  dispatch thunk of Sequence.makeIterator()();
  v31 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator and conformance CROrderedSet<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator, MEMORY[0x1E0D11D70]);
  v60 = v30;
  v61 = v26;
  v56 = v31;
  dispatch thunk of IteratorProtocol.next()();
  v32 = v51;
  v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v55(v20, 1, v51) == 1)
  {
    v64 = MEMORY[0x1E0DEE9D8];
LABEL_3:
    (*(void (**)(char *, uint64_t))(v50 + 8))(v60, v61);
  }
  else
  {
    v54 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v64 = MEMORY[0x1E0DEE9D8];
    v33 = (uint64_t)v53;
    while (1)
    {
      v35 = v20;
      v54(v16, v20, v32);
      v59(v16);
      if (v2)
        break;
      v36 = v13;
      v37 = v16;
      v38 = v16;
      v39 = v32;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v38, v32);
      v40 = v62;
      v41 = v63;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v33, 1, v62) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v33, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
      }
      else
      {
        v42 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 32);
        v43 = v52;
        v42(v52, v33, v40);
        v42(v57, (uint64_t)v43, v40);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v64 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v64 + 16) + 1, 1, v64);
        v45 = *(_QWORD *)(v64 + 16);
        v44 = *(_QWORD *)(v64 + 24);
        v46 = v63;
        v20 = v35;
        if (v45 >= v44 >> 1)
        {
          v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1, v64);
          v46 = v63;
          v64 = v48;
        }
        v47 = v64;
        *(_QWORD *)(v64 + 16) = v45 + 1;
        v42((char *)(v47+ ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))+ *(_QWORD *)(v46 + 72) * v45), (uint64_t)v57, v62);
        v33 = (uint64_t)v53;
      }
      dispatch thunk of IteratorProtocol.next()();
      v32 = v39;
      v34 = v55(v20, 1, v39);
      v13 = v36;
      v16 = v37;
      if (v34 == 1)
        goto LABEL_3;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v32);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v60, v61);
    swift_bridgeObjectRelease();
  }
  return v64;
}

void specialized Sequence.compactMap<A>(_:)(void (*a1)(_QWORD, __n128), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD, __n128);
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v33 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19.n128_f64[0] = MEMORY[0x1E0C80A78](v17, v18);
  v32 = (char *)&v28 - v20;
  if (a3 != a4)
  {
    if (a4 >= a3)
    {
      v21 = MEMORY[0x1E0DEE9D8];
      v30 = a1;
      v31 = a2;
      v29 = v14;
      while (a3 < a4)
      {
        v34 = a3;
        a1(&v34, v19);
        if (v4)
        {
          swift_bridgeObjectRelease();
          return;
        }
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
        }
        else
        {
          v22 = a4;
          v23 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
          v24 = v32;
          v23(v32, v12, v13);
          v23(v33, v24, v13);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v21 + 16) + 1, 1, v21);
          v26 = *(_QWORD *)(v21 + 16);
          v25 = *(_QWORD *)(v21 + 24);
          if (v26 >= v25 >> 1)
            v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1, v21);
          *(_QWORD *)(v21 + 16) = v26 + 1;
          v27 = v21
              + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))
              + *(_QWORD *)(v29 + 72) * v26;
          v14 = v29;
          v23((char *)v27, v33, v13);
          a4 = v22;
          a1 = v30;
        }
        if (a4 == ++a3)
          return;
      }
      __break(1u);
    }
    __break(1u);
  }
}

double Canvas.visibleBoundsInModelSpace.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGAffineTransform *v14;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double v19;
  double v20;
  double v21;
  double v22;
  id v23;
  double v24;
  double v25;
  double v26;
  CGFloat v27;
  double v28;
  double v29;
  CGFloat width;
  CGFloat height;
  double v32;
  CGFloat v34;
  CGFloat y;
  CGFloat v36;
  CGFloat x;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat ty;
  CGFloat v46;
  CGFloat tx;
  CGAffineTransform v48;
  CGAffineTransform t2;
  CGAffineTransform t1;
  _QWORD v51[6];
  _QWORD v52[7];
  _BYTE v53[56];
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;

  v1 = v0;
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x308))();
  if (!v3)
    return 0.0;
  v4 = (void *)v3;
  v5 = Canvas.editingView.getter();
  (*(void (**)(_QWORD *__return_ptr))((*v2 & *v5) + 0x2A0))(v51);
  v44 = *(double *)&v51[1];
  v46 = *(double *)v51;
  v6 = *(double *)&v51[4];
  v40 = *(double *)&v51[3];
  v42 = *(double *)&v51[2];
  v7 = *(double *)&v51[5];

  (*(void (**)(_QWORD *__return_ptr))((*v2 & *v1) + 0x5B8))(v52);
  v9 = *(double *)v52;
  v8 = *(double *)&v52[1];
  v10 = *(double *)&v52[2];
  v11 = *(double *)&v52[3];
  v12 = *(double *)&v52[4];
  v13 = *(double *)&v52[5];
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v52, (uint64_t)v53, (uint64_t *)&demangling cache variable for type metadata for CGAffineTransform?);
  if ((v53[48] & 1) != 0)
  {
    v11 = 1.0;
    v13 = 0.0;
    v12 = 0.0;
    v10 = 0.0;
    v8 = 0.0;
    v9 = 1.0;
  }
  t1.a = v46;
  t1.b = v44;
  t1.c = v42;
  t1.d = v40;
  t1.tx = v6;
  t1.ty = v7;
  t2.a = v9;
  t2.b = v8;
  t2.c = v10;
  t2.d = v11;
  t2.tx = v12;
  t2.ty = v13;
  CGAffineTransformConcat(&v48, &t1, &t2);
  t1 = v48;
  v14 = CGAffineTransformInvert(&t2, &t1);
  a = t2.a;
  b = t2.b;
  c = t2.c;
  d = t2.d;
  ty = t2.ty;
  tx = t2.tx;
  (*(void (**)(CGAffineTransform *))((*v2 & *v1) + 0x340))(v14);
  objc_msgSend(v4, sel_convertRect_toCoordinateSpace_, v1);
  v41 = v20;
  v43 = v19;
  v38 = v22;
  v39 = v21;
  v23 = Canvas.editingView.getter();
  objc_msgSend(v23, sel_bounds);
  v34 = v25;
  v36 = v24;
  v27 = v26;
  v29 = v28;

  if (((*(uint64_t (**)(void))((*v2 & *v1) + 0x570))() & 1) != 0)
  {
    objc_msgSend(v4, sel_bounds);
    v29 = v29 + CGRectGetHeight(v54);
  }
  t1.a = a;
  t1.b = b;
  t1.c = c;
  t1.d = d;
  t1.tx = tx;
  t1.ty = ty;
  v55.origin.y = v34;
  v55.origin.x = v36;
  v55.size.width = v27;
  v55.size.height = v29;
  v56 = CGRectApplyAffineTransform(v55, &t1);
  y = v56.origin.y;
  x = v56.origin.x;
  width = v56.size.width;
  height = v56.size.height;
  t1.a = a;
  t1.b = b;
  t1.c = c;
  t1.d = d;
  t1.tx = tx;
  t1.ty = ty;
  v56.origin.y = v41;
  v56.origin.x = v43;
  v56.size.height = v38;
  v56.size.width = v39;
  v58 = CGRectApplyAffineTransform(v56, &t1);
  v57.origin.y = y;
  v57.origin.x = x;
  v57.size.width = width;
  v57.size.height = height;
  *(_QWORD *)&v32 = (unint64_t)CGRectIntersection(v57, v58);

  return v32;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, char a2)
{
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8[2];

  v4 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v4);
  v6 = *(_QWORD *)(v4 + 16);
  v8[0] = v4 + 32;
  v8[1] = v6;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v8, a2 & 1);
  return specialized ContiguousArray._endMutation()();
}

{
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8[2];

  v4 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v4);
  v6 = *(_QWORD *)(v4 + 16);
  v8[0] = v4 + 32;
  v8[1] = v6;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v8, a2 & 1);
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContainerCanvasElement.ensureHasDrawing<A>(in:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t result;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v5, v6);
  v35 = (uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v30 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v12, v13);
  v34 = (uint64_t)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v30 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v30 - v21;
  v23 = v0 + *(int *)(type metadata accessor for Paper() + 28);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v33 = v23;
  CRRegister.wrappedValue.getter();
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24);
  result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  if (v26 == 1)
  {
    v28 = *(_OWORD *)(MEMORY[0x1E0C9D628] + 16);
    v36 = *MEMORY[0x1E0C9D628];
    v37 = v28;
    type metadata accessor for CGRect(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
    CRRegister.init(wrappedValue:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12870]);
    v31 = v25;
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12888]);
    CROrderedSet.init()();
    *(_QWORD *)&v11[*(int *)(v5 + 24)] = MEMORY[0x1E0DEE9E0];
    outlined init with copy of PKStrokeProperties((uint64_t)v11, v35, (uint64_t (*)(_QWORD))type metadata accessor for PKDrawingStruct);
    v29 = type metadata accessor for CRKeyPath();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v4, 1, 1, v29);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
    swift_retain();
    Ref.init<A>(_:_:identity:)();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v18, 0, 1, v24);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v18, v34, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    CRRegister.wrappedValue.setter();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    return outlined destroy of PKStrokeProperties((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for PKDrawingStruct);
  }
  return result;
}

uint64_t key path getter for ContainerCanvasElement.subelements : <A>A(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a3 + a2 - 8) + 72))(*(_QWORD *)(a3 + a2 - 24));
}

uint64_t key path setter for ContainerCanvasElement.subelements : <A>A(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v5 = *(_QWORD *)(a4 + a3 - 24);
  v6 = *(_QWORD *)(a4 + a3 - 8);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v12 + 16))(v11, a1, v9);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 80))(v11, v5, v6);
}

uint64_t key path getter for ContainerCanvasElement.drawing : <A>A(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a3 + a2 - 8) + 48))(*(_QWORD *)(a3 + a2 - 24));
}

uint64_t key path setter for ContainerCanvasElement.drawing : <A>A(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v5 = *(_QWORD *)(a4 + a3 - 24);
  v6 = *(_QWORD *)(a4 + a3 - 8);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 56))(v10, v5, v6);
}

uint64_t protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.getter in conformance Canvas<A>()
{
  specialized Canvas.liveStreamMessenger.getter();
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.setter in conformance Canvas<A>(uint64_t a1, uint64_t a2)
{
  specialized Canvas.liveStreamMessenger.setter(a1, a2);
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.modify in conformance Canvas<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Canvas.liveStreamMessenger.modify((uint64_t)v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t specialized static PKDrawingStruct.transformStrokes<A>(_:with:concat:in:)(uint64_t a1, CGFloat *a2, int a3, uint64_t a4)
{
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void (*v60)(CGAffineTransform *, _QWORD);
  uint64_t v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, _QWORD);
  _OWORD *v65;
  _OWORD *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  double v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  double b;
  double a;
  double d;
  double c;
  double tx;
  double ty;
  double *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  void (*v89)(CGAffineTransform *, _QWORD);
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  double v93;
  uint64_t v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  uint64_t v100;
  void (*v101)(char *, uint64_t);
  char *v102;
  char *v103;
  char *v104;
  double *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  CGAffineTransform v126;
  CGAffineTransform t2;
  char v128[8];
  char v129[8];
  CGAffineTransform t1;

  v125 = a4;
  v112 = a3;
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  v10 = a2[5];
  v105 = a2;
  v114 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v114, v11);
  v104 = (char *)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v111 = *(_QWORD *)(v113 - 8);
  MEMORY[0x1E0C80A78](v113, v13);
  v103 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v110 = (char *)&v92 - v17;
  v18 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v18, v19);
  v102 = (char *)&v92 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v109 = (char *)&v92 - v23;
  v117 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v24 = *(_QWORD *)(v117 - 8);
  MEMORY[0x1E0C80A78](v117, v25);
  v27 = (char *)&v92 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v30);
  v116 = (char *)&v92 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v92 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x1E0C80A78](v36, v37);
  v123 = (char *)&v92 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  v40 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39, v41);
  v115 = (char *)&v92 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  t1.a = v5;
  t1.b = v6;
  t1.c = v7;
  t1.d = v8;
  t1.tx = v9;
  t1.ty = v10;
  result = CGAffineTransformIsIdentity(&t1);
  if (!(_DWORD)result || (v112 & 1) == 0)
  {
    v44 = *(_QWORD *)(a1 + 16);
    if (v44)
    {
      v122 = v29;
      v121 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
      v45 = *(_QWORD *)(v121 - 8);
      v46 = a1 + ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80));
      v120 = *(_QWORD *)(v45 + 72);
      v94 = a1;
      swift_bridgeObjectRetain();
      v95 = 0.001;
      v93 = 0.1;
      v99 = v7;
      v98 = v8;
      v97 = v9;
      v96 = v10;
      v108 = v24;
      v107 = v27;
      v118 = v39;
      v106 = v28;
      v124 = v40;
      while (1)
      {
        WeakRef.subscript.getter();
        v48 = v122;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v122 + 48))(v35, 1, v28))
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v35, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
          v47 = (uint64_t)v123;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v124 + 56))(v123, 1, 1, v39);
        }
        else
        {
          v49 = v116;
          (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v116, v35, v28);
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v35, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
          CRRegister.value.getter();
          v50 = v35;
          v51 = v24;
          v52 = v123;
          v119 = v46;
          v53 = v44;
          v54 = v28;
          v55 = v117;
          SharedTagged_2.tagged1.getter();
          v47 = (uint64_t)v52;
          v24 = v51;
          v35 = v50;
          v56 = v55;
          v28 = v54;
          v44 = v53;
          v46 = v119;
          (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v56);
          v39 = v118;
          (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v28);
          v57 = v124;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v124 + 48))(v47, 1, v39) != 1)
          {
            v58 = v115;
            (*(void (**)(char *, uint64_t, uint64_t))(v57 + 32))(v115, v47, v39);
            v59 = v125;
            v60 = (void (*)(CGAffineTransform *, _QWORD))Ref.subscript.modify();
            specialized PKStrokeStruct.uniqueInheritedPropertiesIfNeeded<A>(in:)(v59, (unint64_t *)&lazy protocol witness table cache variable for type Capsule<PKDrawingStruct>.Ref and conformance Capsule<A>.Ref, (uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>.Ref);
            v60(&t1, 0);
            if ((v112 & 1) != 0)
            {
              v61 = (uint64_t)v109;
              Ref.subscript.getter();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
              v62 = v110;
              CRRegister.wrappedValue.getter();
              outlined destroy of PKStrokeProperties(v61, type metadata accessor for PKStrokeStruct);
              v63 = v113;
              v101 = (void (*)(char *, uint64_t))Ref.subscript.modify();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
              v64 = (void (*)(char *, _QWORD))CRRegister.wrappedValue.modify();
              v66 = v65;
              v67 = v65[1];
              v68 = v65[2];
              *(_OWORD *)&t1.a = *v65;
              *(_OWORD *)&t1.c = v67;
              *(_OWORD *)&t1.tx = v68;
              t2.a = v5;
              t2.b = v6;
              t2.c = v7;
              t2.d = v8;
              t2.tx = v9;
              t2.ty = v10;
              CGAffineTransformConcat(&v126, &t1, &t2);
              v69 = *(_OWORD *)&v126.c;
              v70 = *(_OWORD *)&v126.tx;
              *v66 = *(_OWORD *)&v126.a;
              v66[1] = v69;
              v66[2] = v70;
              v64(v128, 0);
              v101(v129, 0);
              (*(void (**)(char *, uint64_t))(v111 + 8))(v62, v63);
              (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v39);
            }
            else
            {
              v71 = v5;
              v72 = (uint64_t)v102;
              Ref.subscript.getter();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
              v73 = v103;
              CRRegister.wrappedValue.getter();
              outlined destroy of PKStrokeProperties(v72, type metadata accessor for PKStrokeStruct);
              v74 = (uint64_t)v104;
              v75 = v113;
              Ref.subscript.getter();
              v76 = *(void (**)(char *, uint64_t))(v111 + 8);
              v76(v73, v75);
              v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGAffineTransform>);
              CRRegister.wrappedValue.getter();
              a = t1.a;
              b = t1.b;
              c = t1.c;
              d = t1.d;
              tx = t1.tx;
              ty = t1.ty;
              outlined destroy of PKStrokeProperties(v74, type metadata accessor for PKStrokeInheritedProperties);
              v84 = v105;
              if (vabdd_f64(a, *v105) >= v95
                || vabdd_f64(b, v105[1]) >= v95
                || vabdd_f64(c, v105[2]) >= v95
                || vabdd_f64(d, v105[3]) >= v95
                || vabdd_f64(tx, v105[4]) >= v93
                || vabdd_f64(ty, v105[5]) >= v93)
              {
                v85 = (uint64_t)v109;
                v100 = v77;
                v86 = v118;
                Ref.subscript.getter();
                v101 = v76;
                v87 = v110;
                CRRegister.wrappedValue.getter();
                outlined destroy of PKStrokeProperties(v85, type metadata accessor for PKStrokeStruct);
                v88 = v113;
                v89 = (void (*)(CGAffineTransform *, _QWORD))Ref.subscript.modify();
                v90 = *((_OWORD *)v84 + 2);
                v91 = *(_OWORD *)v84;
                *(_OWORD *)&t1.c = *((_OWORD *)v84 + 1);
                *(_OWORD *)&t1.tx = v90;
                *(_OWORD *)&t1.a = v91;
                CRRegister.wrappedValue.setter();
                v89(&t2, 0);
                v39 = v86;
                v101(v87, v88);
                (*(void (**)(char *, uint64_t))(v124 + 8))(v115, v86);
              }
              else
              {
                v39 = v118;
                (*(void (**)(char *, uint64_t))(v124 + 8))(v58, v118);
              }
              v5 = v71;
              v7 = v99;
              v8 = v98;
              v9 = v97;
              v10 = v96;
            }
            v24 = v108;
            v27 = v107;
            v28 = v106;
            goto LABEL_7;
          }
        }
        outlined destroy of StocksKitCurrencyCache.Provider?(v47, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
LABEL_7:
        v46 += v120;
        if (!--v44)
          return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t key path setter for Canvas.liveStreamMessenger : <A>Canvas<A>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = swift_unknownObjectRetain();
  specialized Canvas.liveStreamMessenger.setter(v2, v1);
  return swift_unknownObjectRelease();
}

uint64_t Canvas.liveStreamMessenger.didset()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t ObjectType;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  BOOL v46;
  unsigned __int8 *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71[3];

  v1 = v0;
  v2 = *MEMORY[0x1E0DEEDD8] & *v0;
  v3 = type metadata accessor for CRMulticastSyncManagerCatchupBehavior();
  v62 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (uint64_t *)((char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_QWORD *)(v2 + 1976);
  v67 = *(_QWORD *)(v2 + 1984);
  v8 = type metadata accessor for Capsule();
  v66 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v65 = (uint64_t)&v56 - v10;
  v11 = type metadata accessor for CRKeyPath();
  v64 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v63 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)((char *)v1 + direct field offset for Canvas.liveStreamMessenger);
  swift_beginAccess();
  v69 = v14;
  if (*v14)
  {
    v59 = v8;
    v61 = v2;
    v68 = v69[1];
    v15 = one-time initialization token for multipeerLogger;
    swift_unknownObjectRetain();
    if (v15 != -1)
      swift_once();
    v58 = v11;
    v60 = v7;
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)multipeerLogger);
    swift_unknownObjectRetain_n();
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc();
      v57 = v3;
      v20 = (uint8_t *)v19;
      v21 = swift_slowAlloc();
      v71[0] = v21;
      *(_DWORD *)v20 = 136315138;
      v22 = ObjectIdentifier.debugDescription.getter();
      v56 = v6;
      v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v6 = v56;
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease_n();
      _os_log_impl(&dword_1DDB0F000, v17, v18, "New session for %s", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v21, -1, -1);
      v3 = v57;
      MEMORY[0x1DF0E6558](v20, -1, -1);
    }
    else
    {
      swift_unknownObjectRelease_n();
    }

    ObjectType = swift_getObjectType();
    v57 = ObjectType;
    v33 = *(void **)((char *)v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_context);
    v34 = (uint64_t)v63;
    (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x910))();
    v35 = v65;
    CanvasElementView.canvasElement.getter(v65);
    v36 = v62;
    v37 = v3;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v62 + 104))(v6, *MEMORY[0x1E0D127D0], v3);
    v38 = v67;
    v39 = ObjectType;
    v40 = v60;
    v56 = (uint64_t *)PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:)(v33, v34, v35, (uint64_t)v6, 0x7265706150, 0xE500000000000000, v39, v60, v68, v67);
    (*(void (**)(uint64_t *, uint64_t))(v36 + 8))(v6, v37);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v35, v59);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v34, v58);
    v41 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v42 = (_QWORD *)swift_allocObject();
    v42[2] = v40;
    v42[3] = v38;
    v43 = *(_QWORD *)(v61 + 1992);
    v42[4] = v43;
    v42[5] = v41;
    v44 = type metadata accessor for Canvas(0, v40, v38, v43);
    swift_retain();
    v45 = v56;
    PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:)(v56, (uint64_t)v1, 0x7265706150, 0xE500000000000000, (uint64_t)partial apply for closure #1 in Canvas.liveStreamMessenger.didset, (uint64_t)v42, v57, v44, v68, (uint64_t)&protocol witness table for AnyCanvas);
    swift_release();
    swift_release();
    *(_QWORD *)((char *)v1 + direct field offset for Canvas.multipeerConnection) = v45;
    swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for multipeerLogger != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)multipeerLogger);
    v25 = v1;
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      v29 = swift_slowAlloc();
      v71[0] = v29;
      *(_DWORD *)v28 = 136315138;
      v30 = ObjectIdentifier.debugDescription.getter();
      v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1DDB0F000, v26, v27, "Ended session for %s", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v29, -1, -1);
      MEMORY[0x1DF0E6558](v28, -1, -1);
    }
    else
    {

    }
    *(_QWORD *)((char *)v25 + direct field offset for Canvas.multipeerConnection) = 0;
  }
  swift_release();
  v46 = *v69 != 0;
  v47 = (unsigned __int8 *)v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings;
  v48 = swift_beginAccess();
  *v47 = v46;
  v49 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x320))(v48);
  if (v49)
  {
    v50 = v49;
    v51 = objc_msgSend(v49, sel_canvasView);

    if (v51)
    {
      objc_msgSend(v51, sel_setGenerateLiveDrawing_, *v47);

    }
  }
  v52 = v69[1];
  v53 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x208);
  v54 = swift_unknownObjectRetain();
  return v53(v54, v52);
}

void closure #1 in Canvas.liveStreamMessenger.didset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned __int8 v11;

  v7 = a2 + 16;
  swift_beginAccess();
  v8 = MEMORY[0x1DF0E666C](v7);
  if (v8)
  {
    v9 = (void *)v8;
    v10 = *(_QWORD *)(a4 + 16);
    v11 = 3;
    AnyCanvas.merge<A>(_:from:)(a1, &v11, a3, v10);

  }
}

uint64_t Canvas.canvasStateLiveStreamMessenger.didset()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t ObjectType;

  v1 = v0;
  v2 = *v0;
  v3 = *MEMORY[0x1E0DEEDD8];
  v39 = type metadata accessor for CRMulticastSyncManagerCatchupBehavior();
  v4 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39, v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CanvasState>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CRKeyPath();
  v37 = *(_QWORD *)(v13 - 8);
  v38 = v13;
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (_QWORD *)(v3 & v2);
  if ((*(uint64_t (**)(double))((v3 & v2) + 0x200))(v15))
  {
    v40 = v19;
    ObjectType = swift_getObjectType();
    v36 = *(void **)((char *)v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_context);
    (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x910))();
    v20 = (char *)v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasState;
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v20, v8);
    v21 = *MEMORY[0x1E0D127C8];
    v35 = v8;
    v22 = v4;
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
    v24 = v39;
    v23(v7, v21, v39);
    v25 = type metadata accessor for CanvasState();
    v26 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
    v36 = (void *)PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:)(v36, (uint64_t)v17, (uint64_t)v12, (uint64_t)v7, 0x74537361766E6143, 0xEB00000000657461, ObjectType, v25, v40, v26);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v24);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v35);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v17, v38);
    v27 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v28 = (_QWORD *)swift_allocObject();
    v29 = v18[247];
    v28[2] = v29;
    v30 = v18[248];
    v28[3] = v30;
    v31 = v18[249];
    v28[4] = v31;
    v28[5] = v27;
    v32 = type metadata accessor for Canvas(0, v29, v30, v31);
    v33 = v36;
    PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:)((uint64_t *)v36, (uint64_t)v1, 0x74537361766E6143, 0xEB00000000657461, (uint64_t)partial apply for closure #1 in Canvas.canvasStateLiveStreamMessenger.didset, (uint64_t)v28, ObjectType, v32, v40, (uint64_t)&protocol witness table for AnyCanvas);
    swift_release();
    *(_QWORD *)((char *)v1 + direct field offset for Canvas.multipeerCanvasStateConnection) = v33;
    swift_unknownObjectRelease();
  }
  else
  {
    *(_QWORD *)((char *)v1 + direct field offset for Canvas.multipeerCanvasStateConnection) = 0;
  }
  return swift_release();
}

void closure #1 in Canvas.canvasStateLiveStreamMessenger.didset(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x1DF0E666C](v2);
  if (v3)
  {
    v4 = (void *)v3;
    Canvas.mergeCanvasState(_:)();

  }
}

uint64_t key path setter for Canvas.updatablePaper : <A>Canvas<A>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  type metadata accessor for Capsule();
  v2 = type metadata accessor for Optional();
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v6 = (char *)&v9 - v5;
  (*(void (**)(char *, uint64_t, double))(v7 + 16))((char *)&v9 - v5, a1, v4);
  return Canvas.updatablePaper.setter((uint64_t)v6);
}

uint64_t closure #1 in Canvas.mergeToCanvasElements()(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;

  v39 = a1;
  v2 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *a2);
  v3 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v3, v4);
  v38 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v7 = *(_QWORD *)(v6 - 8);
  v33 = v6;
  v34 = v7;
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v40 = *(_QWORD *)(v11 - 8);
  v41 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v35 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v15 = *(_QWORD *)(v14 - 8);
  v36 = v14;
  v37 = v15;
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = v2[247];
  v20 = v2[248];
  v21 = type metadata accessor for Capsule();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v23);
  v25 = (char *)&v32 - v24;
  CanvasElementView.canvasElement.getter((uint64_t)&v32 - v24);
  v42 = v19;
  v43 = v20;
  v44 = v2[249];
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v21);
  v26 = v33;
  v27 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v10, v39, v33);
  WeakTagged_9.tag.getter();
  v45 = v47;
  v46 = v48;
  MEMORY[0x1DF0E30E4](v26);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  v28 = v35;
  SharedTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v26);
  v29 = v28;
  v30 = v36;
  LOBYTE(v28) = CROrderedSet.contains(_:)();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v29, v41);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v18, v30);
  return v28 & 1;
}

void Canvas.editingMode.didset(unsigned __int8 *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  int v3;
  _QWORD *v4;
  void (*v5)(uint64_t *__return_ptr);
  void *v6;
  uint64_t (*v7)(void);
  char v8;
  char **v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;

  v2 = v1;
  v3 = *a1;
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = *(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x2C8);
  v5((uint64_t *)((char *)&v17 + 2));
  if (BYTE2(v17) != v3)
  {
    v6 = *(void **)((char *)v1 + direct field offset for Canvas.dropInteraction);
    if (v6)
    {
      v7 = *(uint64_t (**)(void))((*v4 & *v1) + 0xAF8);
      v16 = v6;
      v8 = v7();
      v9 = &selRef_addInteraction_;
      if ((v8 & 1) == 0)
        v9 = &selRef_removeInteraction_;
      ((void (*)(uint64_t *__return_ptr, id))v5)((uint64_t *)((char *)&v17 + 1), objc_msgSend(v1, *v9, v16));
      if (v3 == 1 || BYTE1(v17) == 1)
      {
        v10 = Canvas.editingView.getter();
        v12 = v11;
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v12 + 24))(ObjectType, v12);

      }
      v5(&v17);
      if ((_BYTE)v17)
        goto LABEL_13;
      v14 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
      if (v14)
      {
        v15 = (_QWORD *)(v14 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
        if (*(_QWORD *)(*v15 + 16) || *(_QWORD *)(v15[1] + 16))
          AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);
LABEL_13:

        return;
      }
      __break(1u);
    }
  }
}

void @objc Canvas.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  specialized Canvas.init(coder:)();
}

void closure #1 in Canvas.setupBandSelection()(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t ObjectType;
  void *v51;
  id v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  double v57;
  id v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  unint64_t v76;
  id v77;
  double v78;
  double v79;
  double v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t i;
  _QWORD *v87;
  void *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  void *v97;
  void *v98;
  id v99;
  char *v100;
  uint64_t v101;
  id v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t, uint64_t);
  char *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  unint64_t v123;
  void *v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  id v145;
  uint64_t v146[4];
  _OWORD v147[2];
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  int64_t v151;
  char v152[8];
  _QWORD v153[4];
  char v154;

  v6 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v6, v7);
  v134 = (char *)&v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v9, v10);
  v136 = (char *)&v121 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v139 = *(_QWORD *)(v140 - 8);
  MEMORY[0x1E0C80A78](v140, v12);
  v135 = (char *)&v121 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v133 = (char *)&v121 - v16;
  v138 = type metadata accessor for NSFastEnumerationIterator();
  v128 = *(_QWORD *)(v138 - 8);
  MEMORY[0x1E0C80A78](v138, v17);
  v137 = (char *)&v121 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v19, v20);
  v143 = (char *)&v121 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v142 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v121 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v26 = *(_QWORD *)(v141 - 8);
  MEMORY[0x1E0C80A78](v141, v27);
  v144 = (char *)&v121 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v29, v30);
  v129 = (uint64_t)&v121 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v121 - v34;
  v36 = swift_projectBox();
  swift_beginAccess();
  v37 = MEMORY[0x1DF0E666C](a2 + 16);
  if (!v37)
    return;
  v38 = (char *)v37;
  v127 = v36;
  switch((unint64_t)objc_msgSend(a1, sel_state))
  {
    case 1uLL:
      v39 = *(_QWORD *)&v38[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
      if (!v39)
        goto LABEL_66;
      v40 = a3;
      v41 = v38;
      v42 = (uint64_t *)(v39 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
      v43 = *v42;
      v44 = v42[1];
      v45 = v42[2];
      v46 = *((_BYTE *)v42 + 24);
      swift_beginAccess();
      *(_QWORD *)(v40 + 16) = v43;
      *(_QWORD *)(v40 + 24) = v44;
      *(_QWORD *)(v40 + 32) = v45;
      *(_BYTE *)(v40 + 40) = v46;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v47 = Canvas.editingView.getter();
      v49 = v48;
      ObjectType = swift_getObjectType();
      v51 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v49 + 16))(ObjectType, v49);

      if (v51)
      {
        v52 = objc_msgSend(v51, sel_drawing);

        static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
        v53 = type metadata accessor for PKDrawing();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v35, 0, 1, v53);
      }
      else
      {

        v82 = type metadata accessor for PKDrawing();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v35, 1, 1, v82);
      }
      v83 = v127;
      swift_beginAccess();
      outlined assign with take of Date?((uint64_t)v35, v83, &demangling cache variable for type metadata for PKDrawing?);
      return;
    case 2uLL:
      v125 = a3 + 16;
      UIBandSelectionInteraction.selectionRect.getter();
      outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v152, (uint64_t)v153, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
      if (v154 == 1)
        goto LABEL_3;
      v124 = a1;
      v54 = *(double *)v153;
      v55 = *(double *)&v153[1];
      v56 = *(double *)&v153[2];
      v57 = *(double *)&v153[3];
      v58 = Canvas.editingView.getter();
      objc_msgSend(v58, sel_convertRect_fromCoordinateSpace_, v38, v54, v55, v56, v57);
      v60 = v59;
      v62 = v61;
      v64 = v63;
      v66 = v65;

      v150 = MEMORY[0x1E0DEE9E8];
      v151 = MEMORY[0x1E0DEE9E8];
      v67 = Canvas.editingView.getter();
      v69 = v68;
      v70 = swift_getObjectType();
      v71 = (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 56))(v70, v69);

      *(_QWORD *)&v148 = MEMORY[0x1E0DEE9D8];
      if (v71 >> 62)
        goto LABEL_41;
      v72 = *(_QWORD *)((v71 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_10:
      v73 = MEMORY[0x1E0DEE9D8];
      v123 = a3;
      if (v72)
      {
        a3 = 0;
        v132 = v71 & 0xC000000000000001;
        v131 = v71 & 0xFFFFFFFFFFFFFF8;
        v126 = v25;
        v130 = v72;
        while (1)
        {
          if (v132)
          {
            v74 = (_QWORD *)MEMORY[0x1DF0E4D64](a3, v71);
          }
          else
          {
            if (a3 >= *(_QWORD *)(v131 + 16))
            {
              __break(1u);
LABEL_40:
              __break(1u);
LABEL_41:
              swift_bridgeObjectRetain();
              v72 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              goto LABEL_10;
            }
            v74 = *(id *)(v71 + 8 * a3 + 32);
          }
          v75 = v74;
          v76 = a3 + 1;
          if (__OFADD__(a3, 1))
            goto LABEL_40;
          v77 = objc_msgSend(v38, sel_bounds);
          if (((*(uint64_t (**)(id, double, double, double, double, double, double, double, double))((*MEMORY[0x1E0DEEDD8] & *v75) + 0x328))(v77, v60, v62, v64, v66, v78, v79, v80, v81) & 1) != 0)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            v25 = v126;
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
          else
          {

          }
          ++a3;
          if (v76 == v130)
          {
            v84 = v148;
            a3 = v123;
            goto LABEL_25;
          }
        }
      }
      v84 = MEMORY[0x1E0DEE9D8];
LABEL_25:
      swift_bridgeObjectRelease();
      v122 = v38;
      if (v84 < 0 || (v84 & 0x4000000000000000) != 0)
      {
        swift_bridgeObjectRetain();
        v85 = _CocoaArrayWrapper.endIndex.getter();
        swift_release();
        if (v85)
          goto LABEL_28;
      }
      else
      {
        v85 = *(_QWORD *)(v84 + 16);
        if (v85)
        {
LABEL_28:
          v146[0] = v73;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v85 & ~(v85 >> 63), 0);
          if (v85 < 0)
          {
            __break(1u);
LABEL_66:
            __break(1u);
            JUMPOUT(0x1DDEA39D0);
          }
          for (i = 0; i != v85; ++i)
          {
            if ((v84 & 0xC000000000000001) != 0)
              v87 = (_QWORD *)MEMORY[0x1DF0E4D64](i, v84);
            else
              v87 = *(id *)(v84 + 8 * i + 32);
            v88 = v87;
            (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v87) + 0xE8))();
            SharedTagged_9.tag.getter();
            *(_QWORD *)&v147[0] = v148;
            BYTE8(v147[0]) = BYTE8(v148);
            MEMORY[0x1DF0E3408](v22);
            lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
            WeakTagged_9.init(_:id:)();
            (*(void (**)(char *, uint64_t))(v142 + 8))(v25, v22);

            v89 = v146[0];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v89 + 16) + 1, 1);
              v89 = v146[0];
            }
            v91 = *(_QWORD *)(v89 + 16);
            v90 = *(_QWORD *)(v89 + 24);
            if (v91 >= v90 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v90 > 1, v91 + 1, 1);
              v89 = v146[0];
            }
            *(_QWORD *)(v89 + 16) = v91 + 1;
            (*(void (**)(unint64_t, char *, uint64_t))(v26 + 32))(v89+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(_QWORD *)(v26 + 72) * v91, v144, v141);
          }
          swift_release();
          a3 = v123;
          goto LABEL_44;
        }
      }
      swift_release();
      v89 = MEMORY[0x1E0DEE9D8];
LABEL_44:
      v92 = specialized Set.init<A>(_:)(v89);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v151 = v92;
      v93 = v127;
      swift_beginAccess();
      v94 = v129;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v93, v129, &demangling cache variable for type metadata for PKDrawing?);
      v95 = type metadata accessor for PKDrawing();
      v96 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 48))(v94, 1, v95);
      v97 = v124;
      if (v96 == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v94, &demangling cache variable for type metadata for PKDrawing?);
      }
      else
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKDrawing);
        swift_dynamicCast();
        v98 = (void *)v148;
        v99 = objc_msgSend((id)v148, sel_intersectedStrokesFromRect_visibleOnscreenStrokes_, 0, v60, v62, v64, v66);

        v100 = (char *)v99;
        NSOrderedSet.makeIterator()();
        v144 = v100;

        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFB58], MEMORY[0x1E0CAFB80]);
        dispatch thunk of IteratorProtocol.next()();
        if (v149)
        {
          v101 = MEMORY[0x1E0DEE9D8];
          do
          {
            outlined init with take of Any(&v148, v147);
            outlined init with copy of Any((uint64_t)v147, (uint64_t)v146);
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKStroke);
            if (swift_dynamicCast())
            {
              v102 = v145;
              v103 = objc_msgSend(v145, sel__strokeUUID);
              static UUID._unconditionallyBridgeFromObjectiveC(_:)();

              CRKeyPath.init(_:)();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
              lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>, MEMORY[0x1E0D117A8]);
              v104 = (uint64_t)v136;
              WeakRef.init(id:)();

              v105 = 0;
            }
            else
            {
              v105 = 1;
              v104 = (uint64_t)v136;
            }
            v106 = v140;
            v107 = v139;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v139 + 56))(v104, v105, 1, v140);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v147);
            v108 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v107 + 48))(v104, 1, v106);
            v109 = v104;
            if (v108 == 1)
            {
              outlined destroy of StocksKitCurrencyCache.Provider?(v104, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>?);
            }
            else
            {
              v110 = *(void (**)(char *, uint64_t, uint64_t))(v107 + 32);
              v111 = v133;
              v110(v133, v109, v106);
              v110(v135, (uint64_t)v111, v106);
              v112 = a3;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v101 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v101 + 16) + 1, 1, v101);
              v114 = *(_QWORD *)(v101 + 16);
              v113 = *(_QWORD *)(v101 + 24);
              if (v114 >= v113 >> 1)
                v101 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v113 > 1, v114 + 1, 1, v101);
              *(_QWORD *)(v101 + 16) = v114 + 1;
              v110((char *)(v101+ ((*(unsigned __int8 *)(v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80))+ *(_QWORD *)(v139 + 72) * v114), (uint64_t)v135, v140);
              a3 = v112;
            }
            dispatch thunk of IteratorProtocol.next()();
          }
          while (v149);
        }
        else
        {
          v101 = MEMORY[0x1E0DEE9D8];
        }
        (*(void (**)(char *, uint64_t))(v128 + 8))(v137, v138);

        v115 = specialized Set.init<A>(_:)(v101);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v150 = v115;
        v97 = v124;
      }
      if (objc_msgSend(v97, sel_initialModifierFlags) == (id)0x20000)
      {
        swift_beginAccess();
        v116 = *(_QWORD *)(a3 + 16);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        specialized Set.formSymmetricDifference(_:)(v116);
        v117 = swift_bridgeObjectRetain();
        specialized Set.formSymmetricDifference(_:)(v117);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v119 = v150;
      v118 = v151;
      v120 = v122;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      AnyCanvas.selection.setter(v118, v119, 6, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    default:
LABEL_3:

      return;
  }
}

uint64_t closure #2 in Canvas.setupBandSelection()(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  char v19;
  _QWORD *v20;

  v6 = a4 + 16;
  swift_beginAccess();
  result = MEMORY[0x1DF0E666C](v6);
  if (result)
  {
    v8 = (void *)result;
    (*(void (**)(_QWORD **__return_ptr))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)result) + 0x2C8))(&v20);
    if ((_BYTE)v20 && *((_BYTE *)v8 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_nonDrawingToolMode) == 1)
    {
      v9 = Canvas.editingView.getter();
      v11 = v10;
      ObjectType = swift_getObjectType();
      v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 56))(ObjectType, v11);

      if (v13 >> 62)
        goto LABEL_19;
      v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      for (; v14; v14 = _CocoaArrayWrapper.endIndex.getter())
      {
        v15 = 4;
        while (1)
        {
          v16 = (v13 & 0xC000000000000001) != 0
              ? (_QWORD *)MEMORY[0x1DF0E4D64](v15 - 4, v13)
              : *(id *)(v13 + 8 * v15);
          v17 = v16;
          v18 = v15 - 3;
          if (__OFADD__(v15 - 4, 1))
            break;
          v20 = v16;
          v19 = closure #1 in closure #2 in Canvas.setupBandSelection()(&v20, (uint64_t)v8, a1, a2);

          if ((v19 & 1) == 0)
          {

            swift_bridgeObjectRelease_n();
            return 0;
          }
          ++v15;
          if (v18 == v14)
            goto LABEL_13;
        }
        __break(1u);
LABEL_19:
        swift_bridgeObjectRetain();
      }
LABEL_13:

      swift_bridgeObjectRelease_n();
      return 1;
    }
    else
    {

      return 0;
    }
  }
  return result;
}

uint64_t closure #1 in closure #2 in Canvas.setupBandSelection()(_QWORD **a1, uint64_t a2, double a3, double a4)
{
  _QWORD *v7;
  id v8;

  v7 = *a1;
  if (((*(uint64_t (**)(void))((**a1 & *MEMORY[0x1E0DEEDD8]) + 0x218))() & 1) != 0)
    return 1;
  objc_msgSend(v7, sel_convertPoint_fromCoordinateSpace_, a2, a3, a4);
  v8 = objc_msgSend(v7, sel_hitTest_withEvent_, 0);
  if (!v8)
    return 1;

  return 0;
}

Swift::Void __swiftcall Canvas.didMoveToSuperview()()
{
  _QWORD *v0;
  _QWORD *v1;
  objc_class *v2;
  id v3;
  uint64_t (*v4)(void);
  void *v5;
  void *v6;
  void *v7;
  objc_super v8;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = (objc_class *)type metadata accessor for Canvas(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x7B8), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x7C0), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x7C8));
  v8.receiver = v0;
  v8.super_class = v2;
  objc_msgSendSuper2(&v8, sel_didMoveToSuperview);
  v3 = objc_msgSend(v0, sel_superview);

  if (v3)
  {
    v4 = *(uint64_t (**)(void))((*v1 & *v0) + 0x320);
    v5 = (void *)v4();
    objc_msgSend(v5, sel__layoutSubviews);

    v6 = (void *)v4();
    objc_msgSend(v6, sel__didAddDrawingAttachmentView);

    v7 = (void *)v4();
    objc_msgSend(v7, sel_updateTilesForVisibleRect);

  }
}

void @objc Canvas.didMoveToSuperview()(void *a1)
{
  id v1;

  v1 = a1;
  Canvas.didMoveToSuperview()();

}

uint64_t closure #1 in Canvas.canvasElementOrFormFieldExistsAtPoint(_:)(_QWORD **a1, uint64_t a2, double a3, double a4)
{
  _QWORD *v7;
  uint64_t result;

  v7 = *a1;
  if (((*(uint64_t (**)(void))((**a1 & *MEMORY[0x1E0DEEDD8]) + 0x218))() & 1) != 0)
    return 0;
  objc_msgSend(v7, sel_convertPoint_fromCoordinateSpace_, *(_QWORD *)(a2 + direct field offset for Canvas.paperView), a3, a4);
  result = (uint64_t)objc_msgSend(v7, sel_hitTest_withEvent_, 0);
  if (result)
  {

    return 1;
  }
  return result;
}

void @objc Canvas.generationModelAvailabilityStatusDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  Canvas.generationModelAvailabilityStatusDidChange(_:)((NSNotification)v4);

}

uint64_t closure #1 in Canvas.showOrHideContent(below:)(char **a1, char *a2, char *a3, char *a4, double a5, double a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  double v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  void (*v56)(char *, uint64_t);
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char **v74;
  char **v75;
  char *v76;
  char *v77;
  char *v78;
  _QWORD v79[3];
  uint64_t v80;
  uint64_t v81;

  v71 = a2;
  v73 = *a1;
  v74 = a1;
  v10 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v10, v11);
  v62 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v64 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v65 = *(_QWORD *)(v66 - 8);
  MEMORY[0x1E0C80A78](v66, v16);
  v61 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v61 - v25;
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v61 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v72 = *(_QWORD *)(v69 - 8);
  MEMORY[0x1E0C80A78](v69, v31);
  v33 = (char *)&v61 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = (char **)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  v70 = (uint64_t)*(v75 - 1);
  MEMORY[0x1E0C80A78](v75, v34);
  v36 = (char *)&v61 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = *(char **)&v73[*MEMORY[0x1E0D12A70]];
  v76 = v63;
  v77 = a3;
  v68 = a4;
  v78 = a4;
  swift_getKeyPath();
  v67 = a3;
  Capsule.Ref<>.subscript.getter();
  swift_release();
  v37 = v69;
  CROrderedSet.makeIterator()();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v33, v37);
  v73 = v36;
  CROrderedSet.Iterator.next()();
  v72 = *(_QWORD *)(v19 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v72)(v30, 1, v18) != 1)
  {
    v47 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
    v47(v26, v30, v18);
    while (1)
    {
      SharedTagged_9.subscript.getter();
      v50 = v80;
      v49 = v81;
      __swift_project_boxed_opaque_existential_1(v79, v80);
      (*(void (**)(uint64_t))(*(_QWORD *)(v49 + 8) + 8))(v50);
      v52 = v51;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v22, v26, v18);
      if (v52 <= a6)
      {
        v48 = *(void (**)(char *, uint64_t))(v19 + 8);
        v48(v22, v18);
        v48(v26, v18);
      }
      else
      {
        SharedTagged_9.subscript.getter();
        v54 = v80;
        v53 = v81;
        __swift_project_boxed_opaque_existential_1(v79, v80);
        v55 = (*(double (**)(uint64_t))(*(_QWORD *)(v53 + 8) + 8))(v54);
        v56 = *(void (**)(char *, uint64_t))(v19 + 8);
        v56(v22, v18);
        v56(v26, v18);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
        if (v55 > 5000.0)
        {
          result = (*(uint64_t (**)(char *, char **))(v70 + 8))(v73, v75);
          *v71 = 0;
          return result;
        }
      }
      CROrderedSet.Iterator.next()();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v72)(v30, 1, v18) == 1)
        break;
      v47(v26, v30, v18);
    }
  }
  result = (*(uint64_t (**)(char *, char **))(v70 + 8))(v73, v75);
  v40 = v71;
  if (*v71 == 1)
  {
    MEMORY[0x1E0C80A78](result, v39);
    v42 = v67;
    v41 = v68;
    *(&v61 - 4) = v63;
    *(&v61 - 3) = v42;
    *(&v61 - 2) = v41;
    swift_getKeyPath();
    v43 = (uint64_t)v64;
    v44 = (uint64_t)v74;
    Capsule.Ref<>.subscript.getter();
    swift_release();
    v45 = v65;
    v46 = v66;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v43, 1, v66) == 1)
    {
      return outlined destroy of StocksKitCurrencyCache.Provider?(v43, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    }
    else
    {
      v57 = v61;
      (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v61, v43, v46);
      v58 = (uint64_t)v62;
      v59 = Ref.subscript.getter();
      v75 = &v61;
      MEMORY[0x1E0C80A78](v59, v60);
      *(&v61 - 6) = v42;
      *(&v61 - 5) = v41;
      *(&v61 - 4) = (char *)v44;
      *((double *)&v61 - 3) = a5;
      *((double *)&v61 - 2) = a6;
      *(&v61 - 1) = v40;
      PKDrawingStruct.visitStrokes<A>(in:_:)(v44, partial apply for closure #1 in closure #1 in Canvas.showOrHideContent(below:), (uint64_t)(&v61 - 8));
      outlined destroy of PKStrokeProperties(v58, (uint64_t (*)(_QWORD))type metadata accessor for PKDrawingStruct);
      return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v57, v46);
    }
  }
  return result;
}

void closure #1 in closure #1 in Canvas.showOrHideContent(below:)(double a1, CGFloat a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  objc_class *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  CGRect v24;
  CGRect v25;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (objc_class *)((char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  Ref.subscript.getter();
  v23 = a4;
  v13 = type metadata accessor for Capsule.Ref();
  swift_retain();
  v14 = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12A88], v13);
  v15 = specialized CRRegister<>.bounds(in:)((uint64_t)&v23, v12, v13, v14);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  (*(void (**)(objc_class *, uint64_t))(v9 + 8))(v12, v8);
  swift_release();
  if (CGRect.isFinite.getter(v15, v17, v19, v21))
  {
    v24.origin.x = v15;
    v24.origin.y = v17;
    v24.size.width = v19;
    v24.size.height = v21;
    if (CGRectGetMinY(v24) > a2)
    {
      v25.origin.x = v15;
      v25.origin.y = v17;
      v25.size.width = v19;
      v25.size.height = v21;
      if (CGRectGetMinX(v25) > 5000.0)
        *a5 = 0;
    }
  }
}

uint64_t closure #2 in Canvas.showOrHideContent(below:)(_QWORD *a1, _BYTE *a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  void (*v45)(char *, _QWORD *);
  _QWORD *v46;
  uint64_t (*v47)(_QWORD, _QWORD, _QWORD);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v56)(char *, uint64_t);
  int v57;
  CGFloat tx;
  CGFloat d;
  double v60;
  double v61;
  char *v62;
  int v63;
  _QWORD *v64;
  _BYTE *v65;
  char *v66;
  CGFloat v67;
  CGFloat v68;
  double v69;
  double v70;
  void (*v71)(CGAffineTransform *, _QWORD);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(_BYTE *, _QWORD);
  double *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t, uint64_t);
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  double v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t (*v104)(_QWORD, _QWORD, _QWORD);
  char *v105;
  _BYTE *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  _QWORD *v114;
  char *v115;
  char *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE v122[24];
  CGAffineTransform v123;

  v106 = a2;
  v10 = a1;
  v116 = (char *)*a1;
  v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v113 = *(_QWORD *)(v111 - 8);
  MEMORY[0x1E0C80A78](v111, v11);
  v110 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v109 = (char *)&v94 - v15;
  v108 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v107 = *(_QWORD *)(v108 - 8);
  MEMORY[0x1E0C80A78](v108, v16);
  v112 = (char *)&v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v18, v19);
  v95 = (char *)&v94 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v117 = *(_QWORD **)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  v115 = (char *)&v94 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v94 - v26;
  v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v28, v29);
  v98 = (char *)&v94 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v101 = *(_QWORD *)(v102 - 8);
  MEMORY[0x1E0C80A78](v102, v31);
  v100 = (char *)&v94 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (char *)&v94 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = (_QWORD *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v37 = *(v114 - 1);
  MEMORY[0x1E0C80A78](v114, v38);
  v40 = (char *)&v94 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  v96 = *(_QWORD *)(v118 - 8);
  MEMORY[0x1E0C80A78](v118, v41);
  v43 = (char *)&v94 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = *(_QWORD *)&v116[*MEMORY[0x1E0D12A70]];
  v119 = v97;
  v120 = a3;
  v99 = a4;
  v121 = a4;
  swift_getKeyPath();
  v103 = a3;
  Capsule.Ref<>.subscript.getter();
  swift_release();
  v44 = v114;
  CROrderedSet.makeIterator()();
  v45 = *(void (**)(char *, _QWORD *))(v37 + 8);
  v46 = v117;
  v45(v40, v44);
  v116 = v43;
  CROrderedSet.Iterator.next()();
  v47 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v46[6];
  if (v47(v36, 1, v21) != 1)
  {
    v114 = (_QWORD *)v46[4];
    v105 = v36;
    v104 = v47;
    ((void (*)(char *, char *, uint64_t))v114)(v27, v36, v21);
    while (1)
    {
      SharedTagged_9.subscript.getter();
      d = v123.d;
      tx = v123.tx;
      __swift_project_boxed_opaque_existential_1(&v123, *(uint64_t *)&v123.d);
      (*(void (**)(CGFloat))(*(_QWORD *)(*(_QWORD *)&tx + 8) + 8))(COERCE_CGFLOAT(*(_QWORD *)&d));
      v61 = v60;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v123);
      v62 = v115;
      ((void (*)(char *, char *, uint64_t))v46[2])(v115, v27, v21);
      if (v61 <= a6)
      {
        v56 = (void (*)(char *, uint64_t))v46[1];
        v56(v62, v21);
      }
      else
      {
        v63 = *v106;
        v64 = v10;
        v65 = v106;
        v66 = v62;
        SharedTagged_9.subscript.getter();
        v68 = v123.d;
        v67 = v123.tx;
        __swift_project_boxed_opaque_existential_1(&v123, *(uint64_t *)&v123.d);
        v69 = (*(double (**)(CGFloat))(*(_QWORD *)(*(_QWORD *)&v67 + 8) + 8))(COERCE_CGFLOAT(*(_QWORD *)&v68));
        v56 = (void (*)(char *, uint64_t))v46[1];
        v56(v66, v21);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v123);
        if (((v63 ^ (v69 >= 5000.0)) & 1) != 0)
        {
          v70 = *v65 ? 10000.0 : -10000.0;
          v71 = (void (*)(CGAffineTransform *, _QWORD))SharedTagged_9.subscript.modify();
          v74 = *(_QWORD *)(v72 + 24);
          v73 = *(_QWORD *)(v72 + 32);
          __swift_mutable_project_boxed_opaque_existential_1(v72, v74);
          v75 = v74;
          v10 = v64;
          v76 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v73 + 24))(v122, v75, v73);
          *v77 = v70 + *v77;
          v76(v122, 0);
          v71(&v123, 0);
        }
        else
        {
          v10 = v64;
        }
        v36 = v105;
        v47 = v104;
      }
      v56(v27, v21);
      CROrderedSet.Iterator.next()();
      v57 = v47(v36, 1, v21);
      v46 = v117;
      if (v57 == 1)
        break;
      ((void (*)(char *, char *, uint64_t))v114)(v27, v36, v21);
    }
  }
  v48 = (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v116, v118);
  MEMORY[0x1E0C80A78](v48, v49);
  v50 = v103;
  *(&v94 - 4) = v97;
  *(&v94 - 3) = v50;
  v51 = v99;
  *(&v94 - 2) = v99;
  swift_getKeyPath();
  v52 = (uint64_t)v98;
  Capsule.Ref<>.subscript.getter();
  swift_release();
  v53 = v101;
  v54 = v102;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v101 + 48))(v52, 1, v102) == 1)
    return outlined destroy of StocksKitCurrencyCache.Provider?(v52, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(v100, v52, v54);
  v78 = (uint64_t)v95;
  v79 = Ref.subscript.getter();
  MEMORY[0x1E0C80A78](v79, v80);
  *(&v94 - 6) = v50;
  *(&v94 - 5) = v51;
  *(&v94 - 4) = (uint64_t)v10;
  *((double *)&v94 - 3) = a5;
  *((double *)&v94 - 2) = a6;
  *(&v94 - 1) = (uint64_t)v106;
  v81 = PKDrawingStruct.filteredStrokes<A>(in:isIncluded:)((uint64_t)v10, (uint64_t)partial apply for closure #1 in closure #2 in Canvas.showOrHideContent(below:), (uint64_t)(&v94 - 8));
  outlined destroy of PKStrokeProperties(v78, (uint64_t (*)(_QWORD))type metadata accessor for PKDrawingStruct);
  v82 = *(_QWORD *)(v81 + 16);
  if (v82)
  {
    v117 = v10;
    *(_QWORD *)&v123.a = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v82, 0);
    v83 = *(unsigned __int8 *)(v113 + 80);
    v116 = (char *)v81;
    v84 = v81 + ((v83 + 32) & ~v83);
    v118 = *(_QWORD *)(v113 + 72);
    v85 = *(void (**)(char *, uint64_t, uint64_t))(v113 + 16);
    v86 = *(_QWORD *)&v123.a;
    v87 = v109;
    v88 = v110;
    do
    {
      v89 = v111;
      v85(v87, v84, v111);
      v85(v88, (uint64_t)v87, v89);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12878]);
      WeakRef.init<A>(_:)();
      (*(void (**)(char *, uint64_t))(v113 + 8))(v87, v89);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v86 + 16) + 1, 1);
        v86 = *(_QWORD *)&v123.a;
      }
      v91 = *(_QWORD *)(v86 + 16);
      v90 = *(_QWORD *)(v86 + 24);
      v92 = v112;
      if (v91 >= v90 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v90 > 1, v91 + 1, 1);
        v86 = *(_QWORD *)&v123.a;
      }
      *(_QWORD *)(v86 + 16) = v91 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v107 + 32))(v86+ ((*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80))+ *(_QWORD *)(v107 + 72) * v91, v92, v108);
      v84 += v118;
      --v82;
    }
    while (v82);
    swift_bridgeObjectRelease();
    v50 = v103;
    v10 = v117;
    v54 = v102;
    v53 = v101;
  }
  else
  {
    swift_bridgeObjectRelease();
    v86 = MEMORY[0x1E0DEE9D8];
  }
  v93 = -10000.0;
  if (*v106)
    v93 = 10000.0;
  CGAffineTransformMakeTranslation(&v123, v93, 0.0);
  static PKDrawingStruct.transformStrokes<A>(_:with:concat:in:)(v86, &v123.a, 1, v10, v50);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v100, v54);
}

uint64_t closure #1 in closure #2 in Canvas.showOrHideContent(below:)(double a1, CGFloat a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  objc_class *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  char v22;
  char v23;
  uint64_t v25;
  uint64_t v26;
  CGRect v27;
  CGRect v28;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (objc_class *)((char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  Ref.subscript.getter();
  v26 = a4;
  v13 = type metadata accessor for Capsule.Ref();
  swift_retain();
  v14 = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12A88], v13);
  v15 = specialized CRRegister<>.bounds(in:)((uint64_t)&v26, v12, v13, v14);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  (*(void (**)(objc_class *, uint64_t))(v9 + 8))(v12, v8);
  swift_release();
  v27.origin.x = v15;
  v27.origin.y = v17;
  v27.size.width = v19;
  v27.size.height = v21;
  if (CGRectGetMinY(v27) <= a2)
  {
    v23 = 0;
  }
  else
  {
    v22 = *a5;
    v28.origin.x = v15;
    v28.origin.y = v17;
    v28.size.width = v19;
    v28.size.height = v21;
    v23 = v22 ^ (CGRectGetMinX(v28) >= 5000.0);
  }
  return v23 & 1;
}

uint64_t closure #1 in Canvas.addCanvasElement<A>(_:setSelected:dragItem:harmonize:)()
{
  swift_getKeyPath();
  __asm { FMOV            V1.2D, #-0.5 }
  Capsule.Ref<>.subscript.setter();
  swift_getKeyPath();
  return Capsule.Ref<>.subscript.setter();
}

uint64_t closure #3 in Canvas.addCanvasElement<A>(_:setSelected:dragItem:harmonize:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t result;
  _QWORD v8[6];

  v2 = objc_opt_self();
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = a1;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = partial apply for closure #1 in closure #3 in Canvas.addCanvasElement<A>(_:setSelected:dragItem:harmonize:);
  *(_QWORD *)(v4 + 24) = v3;
  v8[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v8[5] = v4;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1107296256;
  v8[2] = thunk for @escaping @callee_guaranteed () -> ();
  v8[3] = &block_descriptor_271_0;
  v5 = _Block_copy(v8);
  v6 = a1;
  swift_retain();
  swift_release();
  objc_msgSend((id)v2, sel_performWithoutAnimation_, v5);
  _Block_release(v5);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v2 & 1) != 0)
    __break(1u);
  return result;
}

void Canvas.screenScaleOverride.didset()
{
  uint64_t v0;
  _QWORD *v1;
  void (*v2)(void);
  _QWORD *v3;

  v1 = *(_QWORD **)(v0 + direct field offset for Canvas.paperView);
  v2 = *(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x270);
  v3 = v1;
  v2();

}

void closure #2 in Canvas.presentSubelement<A>(_:presentationViewController:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned __int8 v13;

  v10 = a2 + 16;
  swift_beginAccess();
  v11 = MEMORY[0x1DF0E666C](v10);
  if (v11)
  {
    v12 = (void *)v11;
    v13 = 4;
    AnyCanvas.merge<A>(_:from:)(a1, &v13, a4, *(_QWORD *)(a7 + 16));

  }
}

uint64_t @objc Canvas.canBecomeFirstResponder.getter()
{
  return 1;
}

void Canvas.pressesBegan(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  void *v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v15;
  uint64_t *v16;
  Class isa;
  objc_class *v18;
  uint64_t v19;
  objc_super v20;

  v3 = v2;
  v6 = *v2;
  v7 = *MEMORY[0x1E0DEEDD8];
  if (!objc_msgSend(v3, sel_isFirstResponder))
    goto LABEL_7;
  v19 = v6;
  AnyCanvas.overlays.getter();
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
  {
LABEL_6:
    swift_bridgeObjectRelease();
    v6 = v19;
LABEL_7:
    v16 = (uint64_t *)(v7 & v6);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPress);
    lazy protocol witness table accessor for type UIPress and conformance NSObject();
    isa = Set._bridgeToObjectiveC()().super.isa;
    v18 = (objc_class *)type metadata accessor for Canvas(0, v16[247], v16[248], v16[249]);
    v20.receiver = v3;
    v20.super_class = v18;
    objc_msgSendSuper2(&v20, sel_pressesBegan_withEvent_, isa, a2);

    return;
  }
  v10 = (uint64_t *)(v8 + 16 * v9 + 24);
  while (1)
  {
    v11 = (void *)*(v10 - 1);
    v12 = *v10;
    ObjectType = swift_getObjectType();
    v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 8);
    v15 = v11;
    LOBYTE(v12) = v14(a1, a2, ObjectType, v12);

    if ((v12 & 1) != 0)
      break;
    v10 -= 2;
    if (!--v9)
      goto LABEL_6;
  }
  swift_bridgeObjectRelease();
}

void @objc Canvas.pressesBegan(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  @objc Canvas.pressesBegan(_:with:)(a1, a2, a3, a4, (void (*)(uint64_t, void *))Canvas.pressesBegan(_:with:));
}

void Canvas.pressesEnded(_:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v13;
  Class isa;
  objc_class *v15;
  uint64_t v16;
  uint64_t v17;
  objc_super v18;

  v3 = v2;
  v17 = *v2;
  v16 = *MEMORY[0x1E0DEEDD8];
  AnyCanvas.overlays.getter();
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = (uint64_t *)(v6 + 16 * v7 + 24);
    while (1)
    {
      v9 = (void *)*(v8 - 1);
      v10 = *v8;
      ObjectType = swift_getObjectType();
      v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 16);
      v13 = v9;
      LOBYTE(v10) = v12(a1, a2, ObjectType, v10);

      if ((v10 & 1) != 0)
        break;
      v8 -= 2;
      if (!--v7)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPress);
    lazy protocol witness table accessor for type UIPress and conformance NSObject();
    isa = Set._bridgeToObjectiveC()().super.isa;
    v15 = (objc_class *)type metadata accessor for Canvas(0, *(_QWORD *)((v16 & v17) + 0x7B8), *(_QWORD *)((v16 & v17) + 0x7C0), *(_QWORD *)((v16 & v17) + 0x7C8));
    v18.receiver = v3;
    v18.super_class = v15;
    objc_msgSendSuper2(&v18, sel_pressesEnded_withEvent_, isa, a2);

  }
}

void @objc Canvas.pressesEnded(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  @objc Canvas.pressesBegan(_:with:)(a1, a2, a3, a4, (void (*)(uint64_t, void *))Canvas.pressesEnded(_:with:));
}

void @objc Canvas.pressesBegan(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, void *))
{
  uint64_t v8;
  id v9;
  id v10;

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPress);
  lazy protocol witness table accessor for type UIPress and conformance NSObject();
  v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = a4;
  v9 = a1;
  a5(v8, a4);
  swift_bridgeObjectRelease();

}

uint64_t closure #1 in Canvas.selectAll()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  v23 = a2;
  v3 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v3, v4);
  v22[1] = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v22[0] = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Capsule();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)v22 - v13;
  CanvasElementView.canvasElement.getter((uint64_t)v22 - v13);
  SharedTagged_9.subscript.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  v15 = v28;
  v16 = v29;
  __swift_project_boxed_opaque_existential_1(&v26, v28);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v16 + 64))(&v24, v15, v16);
  LOBYTE(v15) = v24;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
  if ((v15 & 2) != 0)
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v23, 1, 1, v21);
  }
  else
  {
    v17 = v22[0];
    (*(void (**)(char *, uint64_t, uint64_t))(v22[0] + 16))(v9, a1, v6);
    SharedTagged_9.tag.getter();
    v24 = v26;
    v25 = v27;
    MEMORY[0x1DF0E3408](v6);
    lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
    v18 = v23;
    WeakTagged_9.init(_:id:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v9, v6);
    v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 0, 1, v19);
  }
}

uint64_t Canvas.PaperViewCanvasPublisher.receive<A>(subscriber:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t result;
  void *v45;
  void (*v46)(char *, uint64_t, uint64_t);
  char *v47;
  int v48;
  void (*v49)(char *, uint64_t, uint64_t, uint64_t);
  void (*v50)(char *, char *, uint64_t);
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)();
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[2];
  char *v70;
  int v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v86 = a4;
  v87 = a1;
  v7 = *(_QWORD *)(a2 + 16);
  v83 = a2;
  v84 = v7;
  v85 = *(_QWORD *)(a2 + 24);
  v78 = type metadata accessor for Capsule();
  v8 = type metadata accessor for AnySubscriber();
  v75 = type metadata accessor for Optional();
  v74 = *(_QWORD *)(v75 - 8);
  MEMORY[0x1E0C80A78](v75, v9);
  v79 = (char *)v69 - v10;
  v11 = *(_QWORD *)(a3 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x1E0C80A78](v13, v14);
  v70 = (char *)v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v77 = (char *)v69 - v17;
  MEMORY[0x1E0C80A78](v18, v19);
  v76 = (char *)v69 - v20;
  MEMORY[0x1E0C80A78](v21, v22);
  v80 = (char *)v69 - v23;
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)v69 - v26;
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)v69 - v30;
  v32 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v33, v34);
  v36 = (char *)v69 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37, v38);
  v81 = (_QWORD *)((char *)v69 - v39);
  v42 = MEMORY[0x1E0C80A78](v40, v41);
  v82 = (char *)v69 - v43;
  result = MEMORY[0x1DF0E666C](v4, v42);
  if (result)
  {
    v45 = (void *)result;
    v71 = *(unsigned __int8 *)(v4 + 8);
    v73 = v11;
    v46 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    v46(v31, v87, a3);
    v46(v27, (uint64_t)v31, a3);
    v72 = v45;
    v47 = v79;
    v48 = swift_dynamicCast();
    v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56);
    if (v48)
    {
      v49(v47, 0, 1, v8);
      v50 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
      v50(v36, v47, v8);
      v50((char *)v81, v36, v8);
    }
    else
    {
      v69[1] = v32;
      v49(v47, 1, 1, v8);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v47, v75);
      v51 = v81;
      v52 = v86;
      dispatch thunk of CustomCombineIdentifierConvertible.combineIdentifier.getter();
      type metadata accessor for AnySubscriberBox();
      v46(v80, (uint64_t)v31, a3);
      *v51 = AnySubscriberBox.__allocating_init(_:)();
      v46(v76, (uint64_t)v31, a3);
      v79 = (char *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CustomStringConvertible);
      if ((swift_dynamicCast() & 1) != 0)
      {
        outlined init with take of FindResult(&v88, (uint64_t)&v91);
        outlined init with take of FindResult(&v91, (uint64_t)&v88);
        v53 = swift_allocObject();
        outlined init with take of FindResult(&v88, v53 + 16);
        v54 = partial apply for closure #1 in AnySubscriber.init<A>(_:);
      }
      else
      {
        v90 = 0;
        v88 = 0u;
        v89 = 0u;
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v88, (uint64_t *)&demangling cache variable for type metadata for CustomStringConvertible?);
        swift_getDynamicType();
        v55 = _typeName(_:qualified:)();
        v57 = v56;
        v53 = swift_allocObject();
        *(_QWORD *)(v53 + 16) = v55;
        *(_QWORD *)(v53 + 24) = v57;
        v54 = partial apply for closure #2 in AnySubscriber.init<A>(_:);
      }
      v58 = v73;
      v51[1] = (uint64_t)v54;
      v51[2] = v53;
      v59 = v80;
      v46(v80, (uint64_t)v31, a3);
      v60 = (*(unsigned __int8 *)(v58 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
      v61 = (char *)swift_allocObject();
      *((_QWORD *)v61 + 2) = v78;
      *((_QWORD *)v61 + 3) = a3;
      *((_QWORD *)v61 + 4) = v52;
      (*(void (**)(char *, char *, uint64_t))(v58 + 32))(&v61[v60], v59, a3);
      v51[3] = (uint64_t)partial apply for closure #3 in AnySubscriber.init<A>(_:);
      v51[4] = (uint64_t)v61;
      v46(v77, (uint64_t)v31, a3);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CustomPlaygroundDisplayConvertible);
      if (swift_dynamicCast())
      {
        outlined init with take of FindResult(&v88, (uint64_t)&v91);
        outlined init with take of FindResult(&v91, (uint64_t)&v88);
        v62 = swift_allocObject();
        outlined init with take of FindResult(&v88, v62 + 16);
        v51[5] = (uint64_t)partial apply for closure #4 in AnySubscriber.init<A>(_:);
        v51[6] = v62;
      }
      else
      {
        v90 = 0;
        v88 = 0u;
        v89 = 0u;
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v88, &demangling cache variable for type metadata for CustomPlaygroundDisplayConvertible?);
        v46(v70, (uint64_t)v31, a3);
        if (swift_dynamicCast())
        {
          outlined init with take of FindResult(&v88, (uint64_t)&v91);
          outlined init with take of FindResult(&v91, (uint64_t)&v88);
          v63 = swift_allocObject();
          outlined init with take of FindResult(&v88, v63 + 16);
          v51[5] = (uint64_t)partial apply for closure #5 in AnySubscriber.init<A>(_:);
          v51[6] = v63;
        }
        else
        {
          v90 = 0;
          v88 = 0u;
          v89 = 0u;
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v88, (uint64_t *)&demangling cache variable for type metadata for CustomStringConvertible?);
          swift_getDynamicType();
          v64 = _typeName(_:qualified:)();
          v66 = v65;
          v67 = swift_allocObject();
          *(_QWORD *)(v67 + 16) = v64;
          *(_QWORD *)(v67 + 24) = v66;
          v51[5] = (uint64_t)partial apply for closure #6 in AnySubscriber.init<A>(_:);
          v51[6] = v67;
        }
      }
    }
    v68 = *(_QWORD *)(v83 + 32);
    *(_QWORD *)&v91 = v84;
    *((_QWORD *)&v91 + 1) = v84;
    v92 = v85;
    v93 = v68;
    v94 = v85;
    type metadata accessor for Canvas.PaperViewCanvasSubscription();
  }
  return result;
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance Canvas<A>.PaperViewCanvasPublisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Canvas.PaperViewCanvasPublisher.receive<A>(subscriber:)(a1, a4, a2, a3);
}

Swift::Void __swiftcall Canvas.setNeedsLayout()()
{
  _QWORD *v0;
  objc_class *v1;
  objc_super v2;

  v1 = (objc_class *)type metadata accessor for Canvas(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x7B8), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x7C0), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x7C8));
  v2.receiver = v0;
  v2.super_class = v1;
  objc_msgSendSuper2(&v2, sel_setNeedsLayout);
  Canvas.setCanvasStateNeedsLayout()();
}

void @objc Canvas.setNeedsLayout()(void *a1)
{
  id v1;

  v1 = a1;
  Canvas.setNeedsLayout()();

}

Swift::Void __swiftcall Canvas.layoutSubviews()()
{
  _QWORD *v0;
  objc_class *v1;
  uint64_t v2;
  uint64_t v3;
  id *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  id v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double x;
  double y;
  double width;
  double height;
  int IsNull;
  int v32;
  uint64_t v33;
  objc_super v34;
  CGRect v35;
  CGRect v36;

  v1 = (objc_class *)type metadata accessor for Canvas(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x7B8), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x7C0), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x7C8));
  v34.receiver = v0;
  v34.super_class = v1;
  objc_msgSendSuper2(&v34, sel_layoutSubviews);
  AnyCanvas.overlays.getter();
  v33 = v2;
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = (id *)(v2 + 32);
    do
    {
      v6 = *v4;
      v7 = objc_msgSend(v6, sel_superview);
      if (v7)
      {
        v8 = v7;
        v9 = Canvas.editingView.getter();
        objc_msgSend(v9, sel_bounds);
        v11 = v10;
        v13 = v12;
        v15 = v14;
        v17 = v16;

        v18 = Canvas.editingView.getter();
        objc_msgSend(v8, sel_convertRect_fromCoordinateSpace_, v18, v11, v13, v15, v17);
        v20 = v19;
        v22 = v21;
        v24 = v23;
        v26 = v25;

        objc_msgSend(v6, sel_frame);
        x = v35.origin.x;
        y = v35.origin.y;
        width = v35.size.width;
        height = v35.size.height;
        IsNull = CGRectIsNull(v35);
        v36.origin.x = v20;
        v36.origin.y = v22;
        v36.size.width = v24;
        v36.size.height = v26;
        v32 = CGRectIsNull(v36);
        if (IsNull && v32
          || IsNull == v32
          && vabdd_f64(x, v20) < 0.1
          && vabdd_f64(y, v22) < 0.1
          && vabdd_f64(width, v24) < 0.1
          && vabdd_f64(height, v26) < 0.1)
        {
          v5 = v6;
          v6 = v8;
        }
        else
        {
          objc_msgSend(v6, sel_setFrame_, v20, v22, v24, v26, v33);
          v5 = v8;
        }

      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }
  swift_bridgeObjectRelease();
}

void @objc Canvas.layoutSubviews()(void *a1)
{
  id v1;

  v1 = a1;
  Canvas.layoutSubviews()();

}

void closure #1 in Canvas.applyUndo(_:selection:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CapsuleUndoAction();
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a2, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  v10 = *(void **)(a1 + direct field offset for Canvas.paperView);
  swift_beginAccess();
  type metadata accessor for Capsule();
  v11 = v10;
  Capsule.apply(_:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  swift_endAccess();

}

uint64_t Canvas.PaperViewCanvasSubscription.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 120);
  type metadata accessor for Capsule();
  v2 = type metadata accessor for AnySubscriber();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_unknownObjectWeakDestroy();
  return v0;
}

uint64_t Canvas.PaperViewCanvasSubscription.__deallocating_deinit()
{
  Canvas.PaperViewCanvasSubscription.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomCombineIdentifierConvertible.combineIdentifier.getter in conformance Canvas<A>.PaperViewCanvasSubscription<A1>()
{
  return CustomCombineIdentifierConvertible<>.combineIdentifier.getter();
}

uint64_t closure #1 in closure #1 in Canvas.addWords(_:layout:)(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_BYTE *, _QWORD);
  uint64_t v24;
  uint64_t result;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _BYTE v63[40];
  char *v64;

  v55 = a3;
  v9 = *a1;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v49 = *(_QWORD **)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v46 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v9 + *MEMORY[0x1E0D12A70]);
  v54 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v53 = (char *)&v45 - v20;
  v58 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v62 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58, v21);
  v64 = (char *)&v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = a4;
  v23 = (void (*)(_BYTE *, _QWORD))Capsule.Ref<>.root.modify();
  v47 = v17;
  v57 = a5;
  ContainerCanvasElement.ensureHasDrawing<A>(in:)((uint64_t)a1, v17, a5);
  v23(v63, 0);
  v61 = a2;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v24 = result;
  }
  else
  {
    v24 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
  }
  v26 = v49;
  v27 = v58;
  if (!v24)
    return swift_bridgeObjectRelease();
  if (v24 >= 1)
  {
    v52 = v10;
    v28 = 0;
    v60 = v61 & 0xC000000000000001;
    v48 = MEMORY[0x1E0DEE9C0] + 8;
    v29 = v47;
    v50 = v24;
    v51 = a1;
    do
    {
      if (v60)
        MEMORY[0x1DF0E4D64](v28, v61);
      else
        swift_retain();
      v30 = v64;
      type metadata accessor for ReflowWord();
      v31 = swift_dynamicCastClass();
      if (v31)
      {
        v32 = *(_QWORD *)(v31 + 272) + OBJC_IVAR___PKDrawingCoherence_model;
        swift_beginAccess();
        v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 16))(v30, v32, v27);
        if (v55)
        {
          MEMORY[0x1E0C80A78](v33, v34);
          *(&v45 - 2) = v35;
          v36 = v59;
          Capsule.callAsFunction<A>(_:)();
          v59 = v36;
        }
        v37 = v53;
        Capsule.Ref<>.root.getter();
        (*(void (**)(uint64_t))(v57 + 48))(v29);
        (*(void (**)(char *, uint64_t))(v54 + 8))(v37, v29);
        v38 = (unsigned int (*)(char *, uint64_t, uint64_t))v26[6];
        v39 = v26;
        v40 = v52;
        if (v38(v16, 1, v52))
        {
          v27 = v58;
          (*(void (**)(char *, uint64_t))(v62 + 8))(v64, v58);
          swift_release();
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
        }
        else
        {
          v41 = (uint64_t)v16;
          v42 = v46;
          ((void (*)(char *, uint64_t, uint64_t))v39[2])(v46, v41, v40);
          outlined destroy of StocksKitCurrencyCache.Provider?(v41, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
          v49 = (_QWORD *)Ref.subscript.modify();
          v43 = v64;
          PKDrawingStruct.append<A>(_:in:)();
          ((void (*)(_BYTE *, _QWORD))v49)(v63, 0);
          swift_release();
          v44 = v42;
          v16 = (char *)v41;
          v29 = v47;
          ((void (*)(char *, uint64_t))v39[1])(v44, v40);
          v27 = v58;
          (*(void (**)(char *, uint64_t))(v62 + 8))(v43, v58);
        }
        v26 = v39;
        v24 = v50;
      }
      else
      {
        swift_release();
      }
      ++v28;
    }
    while (v24 != v28);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in Canvas.addWords(_:layout:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  char *v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  uint64_t v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  __int128 v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD v60[4];
  unint64_t v61;

  v55 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v4 = *(_QWORD *)(v3 - 8);
  v58 = v3;
  v59 = v4;
  MEMORY[0x1E0C80A78](v3, v5);
  v54 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v53 = (char *)&v47 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, value: CGAffineTransform)?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v56 = (char *)&v47 - v16;
  v17 = *(_QWORD *)(a2 + 64);
  v49 = a2 + 64;
  v18 = 1 << *(_BYTE *)(a2 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v50 = (unint64_t)(v18 + 63) >> 6;
  v48 = v50 - 1;
  v51 = a2;
  result = swift_bridgeObjectRetain();
  v57 = 0;
  v52 = xmmword_1DDF32CF0;
  v22 = v58;
  v23 = v54;
  if (!v20)
    goto LABEL_8;
LABEL_6:
  v32 = __clz(__rbit64(v20));
  v33 = (v20 - 1) & v20;
  v34 = (uint64_t)v56;
  v35 = v32 | (v57 << 6);
  while (2)
  {
    v36 = v51;
    (*(void (**)(char *, unint64_t, uint64_t))(v59 + 16))(v13, *(_QWORD *)(v51 + 48) + *(_QWORD *)(v59 + 72) * v35, v58);
    v37 = (_OWORD *)(*(_QWORD *)(v36 + 56) + 48 * v35);
    v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, value: CGAffineTransform));
    v39 = &v13[*(int *)(v38 + 48)];
    v40 = v37[1];
    v41 = v37[2];
    *(_OWORD *)v39 = *v37;
    *((_OWORD *)v39 + 1) = v40;
    *((_OWORD *)v39 + 2) = v41;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v13, 0, 1, v38);
    while (1)
    {
      outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v13, v34, &demangling cache variable for type metadata for (key: Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, value: CGAffineTransform)?);
      v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, value: CGAffineTransform));
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v34, 1, v46) == 1)
        return swift_release();
      v24 = (_OWORD *)(v34 + *(int *)(v46 + 48));
      v25 = v24[1];
      v60[0] = *v24;
      v60[1] = v25;
      v60[2] = v24[2];
      v26 = v59;
      v27 = *(void (**)(char *, uint64_t, uint64_t))(v59 + 32);
      v61 = v33;
      v28 = v13;
      v29 = v53;
      v27(v53, v34, v22);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
      v30 = swift_allocObject();
      *(_OWORD *)(v30 + 16) = v52;
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v29, v22);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12878]);
      WeakRef.init<A>(_:)();
      specialized static PKDrawingStruct.transformStrokes<A>(_:with:concat:in:)(v30, (CGFloat *)v60, 0, v55);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      v31 = v29;
      v13 = v28;
      v20 = v61;
      result = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v31, v22);
      if (v20)
        goto LABEL_6;
LABEL_8:
      v34 = (uint64_t)v56;
      v42 = v57 + 1;
      if (__OFADD__(v57, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v42 < v50)
      {
        v43 = *(_QWORD *)(v49 + 8 * v42);
        if (v43)
          goto LABEL_11;
        v44 = v57 + 2;
        ++v57;
        if (v42 + 1 < v50)
        {
          v43 = *(_QWORD *)(v49 + 8 * v44);
          if (v43)
            goto LABEL_14;
          v57 = v42 + 1;
          if (v42 + 2 < v50)
          {
            v43 = *(_QWORD *)(v49 + 8 * (v42 + 2));
            if (v43)
            {
              v42 += 2;
              goto LABEL_11;
            }
            v44 = v42 + 3;
            v57 = v42 + 2;
            if (v42 + 3 < v50)
              break;
          }
        }
      }
LABEL_25:
      v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, value: CGAffineTransform));
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v13, 1, 1, v45);
      v33 = 0;
    }
    v43 = *(_QWORD *)(v49 + 8 * v44);
    if (v43)
    {
LABEL_14:
      v42 = v44;
LABEL_11:
      v33 = (v43 - 1) & v43;
      v35 = __clz(__rbit64(v43)) + (v42 << 6);
      v57 = v42;
      continue;
    }
    break;
  }
  while (1)
  {
    v42 = v44 + 1;
    if (__OFADD__(v44, 1))
      break;
    if (v42 >= v50)
    {
      v57 = v48;
      goto LABEL_25;
    }
    v43 = *(_QWORD *)(v49 + 8 * v42);
    ++v44;
    if (v43)
      goto LABEL_11;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t closure #1 in Canvas.transformStrokes(_:)(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  id v4;

  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = *(void **)((char *)a1 + direct field offset for Canvas.paperView);
  swift_beginAccess();
  type metadata accessor for Capsule();
  v4 = v3;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();

  return (*(uint64_t (**)(uint64_t))((*v2 & *a1) + 0x5B0))(1);
}

uint64_t closure #1 in closure #1 in Canvas.transformStrokes(_:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  char *v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t);
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  __int128 v51;
  char *v52;
  char *v53;
  _QWORD *v54;
  uint64_t v55;
  char *v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD v60[4];
  unint64_t v61;

  v54 = a1;
  v55 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v5 = *(_QWORD *)(v4 - 8);
  v58 = v4;
  v59 = v5;
  MEMORY[0x1E0C80A78](v4, v6);
  v53 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v52 = (char *)&v46 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, value: CGAffineTransform)?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v56 = (char *)&v46 - v17;
  v18 = *(_QWORD *)(a2 + 64);
  v48 = a2 + 64;
  v19 = 1 << *(_BYTE *)(a2 + 32);
  v20 = -1;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  v21 = v20 & v18;
  v49 = (unint64_t)(v19 + 63) >> 6;
  v47 = v49 - 1;
  v50 = a2;
  result = swift_bridgeObjectRetain();
  v57 = 0;
  v51 = xmmword_1DDF32CF0;
  v23 = v58;
  v24 = v53;
  if (!v21)
    goto LABEL_8;
LABEL_6:
  v31 = __clz(__rbit64(v21));
  v32 = (v21 - 1) & v21;
  v33 = (uint64_t)v56;
  v34 = v31 | (v57 << 6);
  while (2)
  {
    v35 = v50;
    (*(void (**)(char *, unint64_t, uint64_t))(v59 + 16))(v14, *(_QWORD *)(v50 + 48) + *(_QWORD *)(v59 + 72) * v34, v58);
    v36 = (_OWORD *)(*(_QWORD *)(v35 + 56) + 48 * v34);
    v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, value: CGAffineTransform));
    v38 = &v14[*(int *)(v37 + 48)];
    v39 = v36[1];
    v40 = v36[2];
    *(_OWORD *)v38 = *v36;
    *((_OWORD *)v38 + 1) = v39;
    *((_OWORD *)v38 + 2) = v40;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v14, 0, 1, v37);
    while (1)
    {
      outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v14, v33, &demangling cache variable for type metadata for (key: Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, value: CGAffineTransform)?);
      v45 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, value: CGAffineTransform));
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 48))(v33, 1, v45) == 1)
        return swift_release();
      v25 = (_OWORD *)(v33 + *(int *)(v45 + 48));
      v26 = v25[1];
      v60[0] = *v25;
      v60[1] = v26;
      v60[2] = v25[2];
      v61 = v32;
      v27 = v59;
      v28 = v52;
      (*(void (**)(char *, uint64_t, uint64_t))(v59 + 32))(v52, v33, v23);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
      v29 = swift_allocObject();
      *(_OWORD *)(v29 + 16) = v51;
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v28, v23);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12878]);
      WeakRef.init<A>(_:)();
      static PKDrawingStruct.transformStrokes<A>(_:with:concat:in:)(v29, (CGFloat *)v60, 0, v54, v55);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      v30 = *(uint64_t (**)(char *, uint64_t))(v27 + 8);
      v21 = v61;
      result = v30(v28, v23);
      if (v21)
        goto LABEL_6;
LABEL_8:
      v33 = (uint64_t)v56;
      v41 = v57 + 1;
      if (__OFADD__(v57, 1))
      {
        __break(1u);
        goto LABEL_29;
      }
      if (v41 < v49)
      {
        v42 = *(_QWORD *)(v48 + 8 * v41);
        if (v42)
          goto LABEL_11;
        v43 = v57 + 2;
        ++v57;
        if (v41 + 1 < v49)
        {
          v42 = *(_QWORD *)(v48 + 8 * v43);
          if (v42)
            goto LABEL_14;
          v57 = v41 + 1;
          if (v41 + 2 < v49)
          {
            v42 = *(_QWORD *)(v48 + 8 * (v41 + 2));
            if (v42)
            {
              v41 += 2;
              goto LABEL_11;
            }
            v43 = v41 + 3;
            v57 = v41 + 2;
            if (v41 + 3 < v49)
              break;
          }
        }
      }
LABEL_25:
      v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, value: CGAffineTransform));
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v14, 1, 1, v44);
      v32 = 0;
    }
    v42 = *(_QWORD *)(v48 + 8 * v43);
    if (v42)
    {
LABEL_14:
      v41 = v43;
LABEL_11:
      v32 = (v42 - 1) & v42;
      v34 = __clz(__rbit64(v42)) + (v41 << 6);
      v57 = v41;
      continue;
    }
    break;
  }
  while (1)
  {
    v41 = v43 + 1;
    if (__OFADD__(v43, 1))
      break;
    if (v41 >= v49)
    {
      v57 = v47;
      goto LABEL_25;
    }
    v42 = *(_QWORD *)(v48 + 8 * v41);
    ++v43;
    if (v42)
      goto LABEL_11;
  }
LABEL_29:
  __break(1u);
  return result;
}

void closure #1 in Canvas.startCheckingForOldEraserStrokes()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x1DF0E666C](v2);
  if (v3)
  {
    v4 = (void *)v3;
    Canvas.removeOldEraserStrokes()();

  }
}

uint64_t closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v8[9] = a8;
  v8[10] = v12;
  v8[7] = a6;
  v8[8] = a7;
  v8[5] = a4;
  v8[6] = a5;
  v8[11] = *(_QWORD *)(a8 + 16);
  v9 = type metadata accessor for Capsule();
  v8[12] = v9;
  v10 = type metadata accessor for Optional();
  v8[13] = v10;
  v8[14] = *(_QWORD *)(v10 - 8);
  v8[15] = swift_task_alloc();
  v8[16] = *(_QWORD *)(v9 - 8);
  v8[17] = swift_task_alloc();
  v8[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1DF0E666C](v1);
  *(_QWORD *)(v0 + 152) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 120);
    v4 = *(_QWORD *)(v0 + 128);
    v5 = *(_QWORD *)(v0 + 96);
    Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)(*(_QWORD *)(v0 + 56), v5, *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), v3);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v3, 1, v5) == 1)
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104));
      *(_QWORD *)(v0 + 168) = type metadata accessor for MainActor();
      *(_QWORD *)(v0 + 176) = static MainActor.shared.getter();
      dispatch thunk of Actor.unownedExecutor.getter();
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 32))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96));
      if (one-time initialization token for logger != -1)
        swift_once();
      v7 = type metadata accessor for Logger();
      __swift_project_value_buffer(v7, (uint64_t)logger);
      v8 = Logger.logObject.getter();
      v9 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v10 = 0;
        _os_log_impl(&dword_1DDB0F000, v8, v9, "Removed old eraser stroke(s)", v10, 2u);
        MEMORY[0x1DF0E6558](v10, -1, -1);
      }

      *(_BYTE *)(v0 + 208) = 3;
      type metadata accessor for MainActor();
      *(_QWORD *)(v0 + 160) = static MainActor.shared.getter();
      dispatch thunk of Actor.unownedExecutor.getter();
    }
    return swift_task_switch();
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 64);
  swift_release();
  AnyCanvas.merge<A>(_:from:)(v1, (unsigned __int8 *)(v0 + 208), v3, v2);
  return swift_task_switch();
}

{
  _QWORD *v0;

  (*(void (**)(_QWORD, _QWORD))(v0[16] + 8))(v0[18], v0[12]);
  v0[21] = type metadata accessor for MainActor();
  v0[22] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 152);
  swift_release();
  *(_QWORD *)(v0 + 184) = *(_QWORD *)(v1 + direct field offset for Canvas.eraserCheckingIndex);
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 192) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  swift_release();
  CanvasElementView.canvasElement.getter(v1);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;

  if ((Capsule<>.hasAnyEraserStrokes()(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80)) & 1) != 0)
  {
    v1 = *(void **)(v0 + 152);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 96));

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 200) = static MainActor.shared.getter();
    dispatch thunk of Actor.unownedExecutor.getter();
    return swift_task_switch();
  }
}

{
  uint64_t v0;
  Swift::Int v1;

  v1 = *(_QWORD *)(v0 + 184);
  swift_release();
  Canvas.stopCheckingForOldEraserStrokes(index:)(v1);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 128);
  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 96);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in Canvas.align(members:to:)(uint64_t a1, uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  CGFloat v33;
  double v34;
  CGFloat v35;
  double v36;
  CGFloat v37;
  double v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  double MinX;
  CGFloat v44;
  double MinY;
  CGFloat v46;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t result;
  int64_t v58;
  unint64_t v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  int64_t v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, _QWORD);
  uint64_t v67;
  uint64_t v68;
  void (*v69)(_BYTE *, _QWORD);
  CGRect *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  char *v75;
  uint64_t v76;
  char v77[16];
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE v81[32];
  char v82[32];
  CGAffineTransform v83;
  CGFloat v84;
  CGRect v85;
  CGRect v86;
  CGRect v87;
  CGRect v88;
  CGRect v89;

  v84 = a3;
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v75 = (char *)&v71 - v27;
  v28 = *MEMORY[0x1E0C9D628];
  v29 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v30 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  v31 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  v78 = a10;
  v79 = a11;
  v76 = a1;
  v80 = a1;
  swift_bridgeObjectRetain();
  specialized Sequence.reduce<A>(_:_:)((void (*)(_QWORD *__return_ptr, double *, char *))partial apply for closure #1 in closure #1 in Canvas.align(members:to:), v28, v29, v30, v31, (uint64_t)v77, a2);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  v39 = v38;
  v72 = v11;
  swift_bridgeObjectRelease();
  v85.origin.x = a3;
  v85.origin.y = a4;
  v40 = a4;
  v85.size.width = a5;
  v41 = a5;
  v85.size.height = a6;
  v42 = a6;
  MinX = CGRectGetMinX(v85);
  v86.origin.x = v33;
  v86.origin.y = v35;
  v86.size.width = v37;
  v86.size.height = v39;
  v44 = MinX - CGRectGetMinX(v86);
  v87.origin.x = v84;
  v87.origin.y = v40;
  v87.size.width = v41;
  v87.size.height = v42;
  MinY = CGRectGetMinY(v87);
  v88.origin.x = v33;
  v88.origin.y = v35;
  v88.size.width = v37;
  v88.size.height = v39;
  v46 = CGRectGetMinY(v88);
  CGAffineTransformMakeTranslation(&v83, v44, MinY - v46);
  a = v83.a;
  b = v83.b;
  c = v83.c;
  d = v83.d;
  tx = v83.tx;
  ty = v83.ty;
  v53 = *(_QWORD *)(a2 + 56);
  v73 = a2 + 56;
  v54 = 1 << *(_BYTE *)(a2 + 32);
  v55 = -1;
  if (v54 < 64)
    v55 = ~(-1 << v54);
  v56 = v55 & v53;
  v74 = (unint64_t)(v54 + 63) >> 6;
  v84 = *(double *)&a2;
  result = swift_bridgeObjectRetain();
  v58 = 0;
  while (1)
  {
    if (v56)
    {
      v59 = __clz(__rbit64(v56));
      v56 &= v56 - 1;
      v60 = v59 | (v58 << 6);
      goto LABEL_21;
    }
    v61 = v58 + 1;
    if (__OFADD__(v58, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v61 >= v74)
      return swift_release();
    v62 = *(_QWORD *)(v73 + 8 * v61);
    ++v58;
    if (!v62)
    {
      v58 = v61 + 1;
      if (v61 + 1 >= v74)
        return swift_release();
      v62 = *(_QWORD *)(v73 + 8 * v58);
      if (!v62)
      {
        v58 = v61 + 2;
        if (v61 + 2 >= v74)
          return swift_release();
        v62 = *(_QWORD *)(v73 + 8 * v58);
        if (!v62)
          break;
      }
    }
LABEL_20:
    v56 = (v62 - 1) & v62;
    v60 = __clz(__rbit64(v62)) + (v58 << 6);
LABEL_21:
    v64 = v75;
    (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))(v75, *(_QWORD *)(*(_QWORD *)&v84 + 48) + *(_QWORD *)(v21 + 72) * v60, v20);
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v24, v64, v20);
    v66 = (void (*)(char *, _QWORD))WeakTagged_9.subscript.modify();
    v67 = *(_QWORD *)(v65 + 24);
    if (v67)
    {
      v68 = *(_QWORD *)(v65 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v65, *(_QWORD *)(v65 + 24));
      v69 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v68 + 24))(v81, v67, v68);
      v89 = *v70;
      v83.a = a;
      v83.b = b;
      v83.c = c;
      v83.d = d;
      v83.tx = tx;
      v83.ty = ty;
      *v70 = CGRectApplyAffineTransform(v89, &v83);
      v69(v81, 0);
    }
    v66(v82, 0);
    result = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v24, v20);
  }
  v63 = v61 + 3;
  if (v63 >= v74)
    return swift_release();
  v62 = *(_QWORD *)(v73 + 8 * v63);
  if (v62)
  {
    v58 = v63;
    goto LABEL_20;
  }
  while (1)
  {
    v58 = v63 + 1;
    if (__OFADD__(v63, 1))
      break;
    if (v58 >= v74)
      return swift_release();
    v62 = *(_QWORD *)(v73 + 8 * v58);
    ++v63;
    if (v62)
      goto LABEL_20;
  }
LABEL_25:
  __break(1u);
  return result;
}

void closure #1 in closure #1 in Canvas.align(members:to:)(CGFloat *a1@<X0>, CGFloat *a2@<X8>)
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v7;
  uint64_t v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;

  x = *a1;
  y = a1[1];
  width = a1[2];
  height = a1[3];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  WeakTagged_9.subscript.getter();
  v7 = v17;
  if (v17)
  {
    v8 = v18;
    __swift_project_boxed_opaque_existential_1(v16, v17);
    v9 = (*(double (**)(uint64_t))(*(_QWORD *)(v8 + 8) + 8))(v7);
    v11 = v10;
    v13 = v12;
    v15 = v14;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for CanvasElement?);
    v19.origin.x = x;
    v19.origin.y = y;
    v19.size.width = width;
    v19.size.height = height;
    v21.origin.x = v9;
    v21.origin.y = v11;
    v21.size.width = v13;
    v21.size.height = v15;
    v20 = CGRectUnion(v19, v21);
    x = v20.origin.x;
    y = v20.origin.y;
    width = v20.size.width;
    height = v20.size.height;
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for CanvasElement?);
  }
  *a2 = x;
  a2[1] = y;
  a2[2] = width;
  a2[3] = height;
}

void closure #1 in Canvas.addWords(_:layout:)(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + direct field offset for Canvas.paperView);
  swift_beginAccess();
  type metadata accessor for Capsule();
  v2 = v1;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();

}

uint64_t closure #1 in closure #1 in Canvas.canvasDescription.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  void (*v17)(_BYTE *, _QWORD);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[32];

  v20 = a2;
  v21 = a3;
  v3 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v3, v4);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>);
  v19 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Image();
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  Capsule.Ref<>.root.getter();
  result = swift_dynamicCast();
  if ((_DWORD)result)
  {
    outlined destroy of PKStrokeProperties((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for Image);
    Capsule.Ref<>.rootID.getter();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
    Ref.init(id:)();
    v16 = v21;
    swift_bridgeObjectRetain();
    v17 = (void (*)(_BYTE *, _QWORD))Ref.subscript.modify();
    v22 = v20;
    v23 = v16;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String?>);
    CRRegister.wrappedValue.setter();
    v17(v24, 0);
    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v8, v5);
  }
  return result;
}

uint64_t closure #1 in Canvas.selectedShapes.getter@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v16 = a2;
  v15 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x7B8);
  v2 = type metadata accessor for Capsule();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v15 - v5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  WeakTagged_9.tagged6.getter();
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for WeakRef<Shape>?);
    v13 = type metadata accessor for Shape();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v16, 1, 1, v13);
  }
  else
  {
    CanvasElementView.canvasElement.getter((uint64_t)v6);
    WeakRef.subscript.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  }
}

uint64_t closure #1 in Canvas.initiateMagicGenerativePlayground(context:in:)(uint64_t a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v12;

  *(double *)(v11 + 88) = a4;
  *(double *)(v11 + 96) = a5;
  *(double *)(v11 + 72) = a2;
  *(double *)(v11 + 80) = a3;
  *(_BYTE *)(v11 + 33) = a11;
  *(_QWORD *)(v11 + 56) = a9;
  *(_QWORD *)(v11 + 64) = a10;
  *(_QWORD *)(v11 + 40) = a1;
  *(_QWORD *)(v11 + 48) = a8;
  type metadata accessor for MainActor();
  *(_QWORD *)(v11 + 104) = static MainActor.shared.getter();
  *(_QWORD *)(v11 + 112) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v11 + 120) = v12;
  return swift_task_switch();
}

uint64_t closure #1 in Canvas.initiateMagicGenerativePlayground(context:in:)()
{
  uint64_t v0;
  void *v1;
  char v2;
  _QWORD *v3;

  v1 = *(void **)(*(_QWORD *)(v0 + 48) + OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasGenerationTool);
  *(_QWORD *)(v0 + 128) = v1;
  if (v1)
  {
    v2 = *(_BYTE *)(v0 + 33);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 56);
    *(_BYTE *)(v0 + 32) = v2;
    v1;
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v3;
    *v3 = v0;
    v3[1] = closure #1 in Canvas.initiateMagicGenerativePlayground(context:in:);
    return CanvasGenerationTool.initiateMagicGenerativePlayground(context:in:)(v0 + 16, *(double *)(v0 + 72), *(double *)(v0 + 80), *(double *)(v0 + 88), *(double *)(v0 + 96));
  }
  else
  {
    swift_release();
    **(_BYTE **)(v0 + 40) = *(_QWORD *)(v0 + 128) == 0;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 128);
  swift_task_dealloc();

  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  **(_BYTE **)(v0 + 40) = *(_QWORD *)(v0 + 128) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in Canvas.removeImageBackground(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;

  v6[23] = a5;
  v6[24] = a6;
  v6[22] = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v6[25] = v7;
  v6[26] = *(_QWORD *)(v7 - 8);
  v6[27] = swift_task_alloc();
  v6[28] = swift_task_alloc();
  v6[29] = type metadata accessor for Image();
  v6[30] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  v6[31] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in Canvas.removeImageBackground(for:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(v0 + 240);
  v1 = *(_QWORD *)(v0 + 248);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  Capsule<>.root.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.getter();
  outlined destroy of PKStrokeProperties(v2, (uint64_t (*)(_QWORD))type metadata accessor for Image);
  v3 = type metadata accessor for CRAssetOrData();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v1, 1, v3) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 248), &demangling cache variable for type metadata for CRAssetOrData?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v5 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 256) = v5;
    *v5 = v0;
    v5[1] = closure #1 in Canvas.removeImageBackground(for:);
    return CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(0x7FFFFFFFFFFFFFFFLL, 1, 0);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(void **)(v0 + 264);
  if (v1)
  {
    if ((static Task<>.isCancelled.getter() & 1) == 0)
    {
      v2 = *(_QWORD *)(v0 + 184) + 16;
      swift_beginAccess();
      v3 = (void *)MEMORY[0x1DF0E666C](v2);

      if (v3)
      {
        v4 = swift_task_alloc();
        *(_QWORD *)(v0 + 272) = v4;
        *(_QWORD *)(v4 + 16) = v1;
        v5 = (_QWORD *)swift_task_alloc();
        *(_QWORD *)(v0 + 280) = v5;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CGImageRef?, CGRect));
        *v5 = v0;
        v5[1] = closure #1 in Canvas.removeImageBackground(for:);
        return withCheckedThrowingContinuation<A>(isolation:function:_:)();
      }
    }

  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 288) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void (*v21)(_QWORD, _QWORD, _QWORD);
  uint64_t v22;

  v1 = *(void **)(v0 + 64);
  *(_QWORD *)(v0 + 296) = v1;
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 96);
  if ((static Task<>.isCancelled.getter() & 1) != 0
    || (v6 = *(_QWORD *)(v0 + 184) + 16,
        swift_beginAccess(),
        v7 = (void *)MEMORY[0x1DF0E666C](v6),
        v7,
        !v7))
  {

    goto LABEL_7;
  }
  if (!v1)
  {

    goto LABEL_7;
  }
  v8 = v1;
  v9 = CGImageRef.imageData(compressionQuality:asPng:)(1, 0.9);
  *(_QWORD *)(v0 + 304) = v9;
  *(_QWORD *)(v0 + 312) = v10;
  if (v10 >> 60 == 15)
  {
    v11 = *(void **)(v0 + 264);

LABEL_7:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v13 = v9;
  v14 = v10;
  v15 = *(_QWORD *)(v0 + 192);
  v16 = *(_QWORD *)(v0 + 184) + 16;
  v21 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 208) + 16);
  v22 = *(_QWORD *)(v0 + 264);
  v21(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 200));
  v17 = (_QWORD *)swift_task_alloc();
  v17[2] = v13;
  v17[3] = v14;
  v17[4] = v15;
  v17[5] = v22;
  v17[6] = v1;
  v17[7] = v2;
  v17[8] = v3;
  v17[9] = v4;
  v17[10] = v5;
  Capsule.callAsFunction<A>(_:)();
  swift_task_dealloc();
  swift_beginAccess();
  v18 = MEMORY[0x1DF0E666C](v16);
  *(_QWORD *)(v0 + 320) = v18;
  if (!v18)
  {
    v19 = *(void **)(v0 + 264);
    v20 = *(_QWORD *)(v0 + 208);

    outlined consume of Data?(v13, v14);
    (*(void (**)(_QWORD, _QWORD))(v20 + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 200));
    goto LABEL_7;
  }
  v21(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 200));
  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 328) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);

  v1 = (void *)v0[40];
  v2 = v0[29];
  v4 = v0[26];
  v3 = v0[27];
  v5 = v0[25];
  swift_release();
  v6 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  v0[4] = v2;
  v0[5] = v6;
  v0[6] = v1;
  v0[7] = v3;
  Canvas.undoable(newChange:persistSelection:action:)(0, 0, (uint64_t (*)(double))partial apply for closure #1 in Canvas.mergeUndoable<A>(_:));

  v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v0[42] = v7;
  v7(v3, v5);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  void *v3;
  void *v4;

  v1 = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 312);
  v3 = *(void **)(v0 + 296);
  v4 = *(void **)(v0 + 264);

  outlined consume of Data?(v1, v2);
  (*(void (**)(_QWORD, _QWORD))(v0 + 336))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 200));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in Canvas.removeImageBackground(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 248);
  *(_QWORD *)(*(_QWORD *)v1 + 264) = a1;
  swift_task_dealloc();
  outlined destroy of PKStrokeProperties(v2, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
  return swift_task_switch();
}

void closure #1 in closure #1 in Canvas.removeImageBackground(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD aBlock[6];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(CGImageRef?, CGRect), Error>);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v6 = MEMORY[0x1E0C80A78](v2, v5);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v6);
  v7 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v8 + v7, (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in Canvas.removeImageBackground(for:);
  aBlock[5] = v8;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed CGImageRef?, @unowned CGRect, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_291;
  v9 = _Block_copy(aBlock);
  swift_release();
  vk_cgImageRemoveBackground();
  _Block_release(v9);
}

uint64_t closure #1 in closure #1 in closure #1 in Canvas.removeImageBackground(for:)(void *a1, id a2)
{
  id v2;
  id v4;

  if (a2)
  {
    v2 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(CGImageRef?, CGRect), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    v4 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(CGImageRef?, CGRect), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed CGImageRef?, @unowned CGRect, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3, double a4, double a5, double a6, double a7)
{
  void (*v13)(void *, void *, double, double, double, double);
  id v14;
  id v15;

  v13 = *(void (**)(void *, void *, double, double, double, double))(a1 + 32);
  swift_retain();
  v15 = a2;
  v14 = a3;
  v13(a2, a3, a4, a5, a6, a7);
  swift_release();

}

uint64_t closure #2 in closure #1 in Canvas.removeImageBackground(for:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, CGImage *a5, double *a6)
{
  double v9;
  double v10;
  CGFloat v11;
  CGFloat v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(_QWORD *, _QWORD);
  int64_t Width;
  CGFloat Height;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  double v35;
  double v36;
  CGFloat v37;
  CGFloat v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t (*v45)(_QWORD *, _QWORD);
  uint64_t v47;
  CGFloat v48;
  double v49;
  double v50;
  uint64_t v51;
  double v52;
  double v53;
  double v54;
  double v55;
  _QWORD v56[5];
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;

  v51 = a1;
  v9 = a6[1];
  v10 = a6[2];
  v11 = a6[3];
  v12 = a6[4];
  v13 = type metadata accessor for Image();
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v47 - v23;
  outlined copy of Data._Representation(a2, a3);
  swift_retain();
  CRAsset.init(data:assetManager:)();
  v25 = type metadata accessor for CRAssetOrData();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 0, 1, v25);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  v26 = (void (*)(_QWORD *, _QWORD))Capsule.Ref<>.root.modify();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v24, (uint64_t)v20, &demangling cache variable for type metadata for CRAssetOrData?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, &demangling cache variable for type metadata for CRAssetOrData?);
  v26(v56, 0);
  Width = CGImageGetWidth(a5);
  Height = (double)(uint64_t)CGImageGetHeight(a5);
  v57.origin.x = v9;
  v57.origin.y = v10;
  v57.size.width = v11;
  v57.size.height = v12;
  v29 = CGRectGetWidth(v57);
  v58.origin.x = 0.0;
  v58.origin.y = 0.0;
  v58.size.width = (double)Width;
  v58.size.height = Height;
  v30 = v29 / CGRectGetWidth(v58);
  v59.origin.x = v9;
  v59.origin.y = v10;
  v59.size.width = v11;
  v59.size.height = v12;
  v31 = CGRectGetHeight(v59);
  v60.origin.x = 0.0;
  v60.origin.y = 0.0;
  v60.size.width = (double)Width;
  v60.size.height = Height;
  v32 = v31 / CGRectGetHeight(v60);
  v61.origin.x = 0.0;
  v61.origin.y = 0.0;
  v61.size.width = (double)Width;
  v61.size.height = Height;
  v33 = v9 / CGRectGetWidth(v61);
  v48 = v33;
  v62.origin.x = 0.0;
  v62.origin.y = 0.0;
  v62.size.width = (double)Width;
  v62.size.height = Height;
  v34 = v10 / CGRectGetHeight(v62);
  Capsule.Ref<>.root.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  v35 = *(double *)v56;
  v36 = *(double *)&v56[1];
  v37 = *(double *)&v56[2];
  v38 = *(double *)&v56[3];
  outlined destroy of PKStrokeProperties((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Image);
  v63.origin.x = v33;
  v63.origin.y = v34;
  v49 = v34;
  v63.size.width = v30;
  v63.size.height = v32;
  v39 = CGRectGetWidth(v63);
  v64.origin.x = v35;
  v64.origin.y = v36;
  v64.size.width = v37;
  v64.size.height = v38;
  v50 = v39 * CGRectGetWidth(v64);
  v40 = v48;
  v65.origin.x = v48;
  v65.origin.y = v34;
  v65.size.width = v30;
  v65.size.height = v32;
  v41 = CGRectGetHeight(v65);
  v66.origin.x = v35;
  v66.origin.y = v36;
  v66.size.width = v37;
  v66.size.height = v38;
  v42 = v41 * CGRectGetHeight(v66);
  v67.origin.x = v35;
  v67.origin.y = v36;
  v67.size.width = v37;
  v67.size.height = v38;
  v43 = v35 + v40 * CGRectGetWidth(v67);
  v68.origin.x = v35;
  v68.origin.y = v36;
  v68.size.width = v37;
  v68.size.height = v38;
  v44 = v36 + v49 * CGRectGetHeight(v68);
  v45 = (uint64_t (*)(_QWORD *, _QWORD))Capsule.Ref<>.root.modify();
  v52 = v43;
  v53 = v44;
  v54 = v50;
  v55 = v42;
  CRRegister.wrappedValue.setter();
  return v45(v56, 0);
}

uint64_t closure #2 in Canvas.removeImageBackground(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[2] = a4;
  v5 = type metadata accessor for ContinuousClock();
  v4[3] = v5;
  v4[4] = *(_QWORD *)(v5 - 8);
  v4[5] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[6] = static MainActor.shared.getter();
  v4[7] = dispatch thunk of Actor.unownedExecutor.getter();
  v4[8] = v6;
  return swift_task_switch();
}

uint64_t closure #2 in Canvas.removeImageBackground(for:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  ContinuousClock.init()();
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                        + async function pointer to specialized Clock.sleep(for:tolerance:));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = closure #2 in Canvas.removeImageBackground(for:);
  return v3(5000000000000000000, 0, 0, 0, 1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  swift_release();
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  MEMORY[0x1DF0E453C](v1, MEMORY[0x1E0DEE9C0] + 8, v2, MEMORY[0x1E0DEDB38]);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in Canvas.addFlags(_:strokeFlags:to:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, char *a8, char *a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t result;
  int64_t v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, _QWORD);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(_BYTE *, uint64_t, uint64_t);
  uint64_t v48;
  void (*v49)(_BYTE *, _QWORD);
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  char *v70;
  char *v71;
  char *v72;
  _BYTE v73[32];
  char v74[40];
  uint64_t v75;

  v64 = a7;
  v63 = a8;
  v10 = (uint64_t)a1;
  v66 = a9;
  v67 = a6;
  v61 = *a1;
  v11 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v11, v12);
  v60 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v65 = *(_QWORD *)(v62 - 8);
  MEMORY[0x1E0C80A78](v62, v14);
  v59 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)&v59 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v71 = (char *)&v59 - v27;
  v28 = *(_QWORD *)(a2 + 56);
  v68 = a2 + 56;
  v29 = 1 << *(_BYTE *)(a2 + 32);
  v30 = -1;
  if (v29 < 64)
    v30 = ~(-1 << v29);
  v31 = v30 & v28;
  v69 = (unint64_t)(v29 + 63) >> 6;
  v75 = a2;
  result = swift_bridgeObjectRetain();
  v33 = 0;
  v72 = v19;
  v70 = v24;
  while (1)
  {
    if (v31)
    {
      v34 = __clz(__rbit64(v31));
      v31 &= v31 - 1;
      v35 = v34 | (v33 << 6);
      goto LABEL_21;
    }
    v36 = v33 + 1;
    if (__OFADD__(v33, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    v38 = v65;
    v37 = v66;
    if (v36 >= v69)
      goto LABEL_23;
    v39 = *(_QWORD *)(v68 + 8 * v36);
    ++v33;
    if (!v39)
    {
      v33 = v36 + 1;
      if (v36 + 1 >= v69)
        goto LABEL_23;
      v39 = *(_QWORD *)(v68 + 8 * v33);
      if (!v39)
      {
        v33 = v36 + 2;
        if (v36 + 2 >= v69)
          goto LABEL_23;
        v39 = *(_QWORD *)(v68 + 8 * v33);
        if (!v39)
          break;
      }
    }
LABEL_20:
    v31 = (v39 - 1) & v39;
    v35 = __clz(__rbit64(v39)) + (v33 << 6);
    v24 = v70;
LABEL_21:
    v41 = v71;
    (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))(v71, *(_QWORD *)(v75 + 48) + *(_QWORD *)(v21 + 72) * v35, v20);
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v24, v41, v20);
    v43 = (void (*)(char *, _QWORD))WeakTagged_9.subscript.modify();
    v44 = *(_QWORD *)(v42 + 24);
    if (v44)
    {
      v45 = v10;
      v46 = *(_QWORD *)(v42 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v42, *(_QWORD *)(v42 + 24));
      v47 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v46 + 80);
      v48 = v46;
      v10 = v45;
      v24 = v70;
      v49 = (void (*)(_BYTE *, _QWORD))v47(v73, v44, v48);
      *v50 |= v67;
      v49(v73, 0);
    }
    v43(v74, 0);
    result = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v24, v20);
    v19 = v72;
  }
  v40 = v36 + 3;
  if (v40 < v69)
  {
    v39 = *(_QWORD *)(v68 + 8 * v40);
    if (!v39)
    {
      while (1)
      {
        v33 = v40 + 1;
        if (__OFADD__(v40, 1))
          goto LABEL_29;
        if (v33 >= v69)
          goto LABEL_23;
        v39 = *(_QWORD *)(v68 + 8 * v33);
        ++v40;
        if (v39)
          goto LABEL_20;
      }
    }
    v33 = v40;
    goto LABEL_20;
  }
LABEL_23:
  result = swift_release();
  v52 = v64;
  if (v64)
  {
    MEMORY[0x1E0C80A78](result, v51);
    v53 = v63;
    *(&v59 - 4) = *(char **)(v61 + *MEMORY[0x1E0D12A70]);
    *(&v59 - 3) = v53;
    *(&v59 - 2) = v37;
    swift_getKeyPath();
    Capsule.Ref<>.subscript.getter();
    swift_release();
    v54 = v62;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v19, 1, v62))
    {
      return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    }
    else
    {
      v55 = v59;
      (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v59, v19, v54);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      v56 = (uint64_t)v60;
      Ref.subscript.getter();
      v57 = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v55, v54);
      MEMORY[0x1E0C80A78](v57, v58);
      *(&v59 - 4) = v53;
      *(&v59 - 3) = v37;
      *(&v59 - 2) = (char *)v10;
      *(&v59 - 1) = v52;
      PKDrawingStruct.visitStrokes<A>(in:_:)(v10, (void (*)(uint64_t))partial apply for closure #1 in closure #1 in Canvas.addFlags(_:strokeFlags:to:), (uint64_t)(&v59 - 6));
      return outlined destroy of PKStrokeProperties(v56, (uint64_t (*)(_QWORD))type metadata accessor for PKDrawingStruct);
    }
  }
  return result;
}

uint64_t closure #1 in closure #1 in Canvas.addFlags(_:strokeFlags:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v21)(_BYTE *, _QWORD);
  void (*v22)(_BYTE *, _QWORD);
  _QWORD *v23;
  _BYTE v24[32];
  _BYTE v25[32];

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = &v24[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = &v24[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  Ref.subscript.getter();
  CRRegister.value.getter();
  SharedTagged_2.tagged1.getter();
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  v21 = (void (*)(_BYTE *, _QWORD))Ref.subscript.modify();
  type metadata accessor for PKStrokeStruct(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  v22 = (void (*)(_BYTE *, _QWORD))CRRegister.wrappedValue.modify();
  *v23 &= a3;
  v22(v24, 0);
  v21(v25, 0);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v19 + 8))(v17, v18);
}

uint64_t closure #1 in Canvas.hide(weakStrokes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, double);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v32 = *(_QWORD *)(v5 - 8);
  v33 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v31 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)&v28 - v20;
  v29 = *(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16);
  v30 = a1;
  v29(v16, a1, v12, v19);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12B70]);
  WeakRef.init<A>(_:)();
  type metadata accessor for PKDrawingStruct();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  v34 = a2;
  WeakRef.subscript.getter();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v21, v12);
  LODWORD(v21) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v11, 1, v22);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  if ((_DWORD)v21 == 1)
  {
    v23 = type metadata accessor for PKStroke();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v35, 1, 1, v23);
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t))v29)(v16, v30, v12);
    v25 = (uint64_t)v31;
    Ref.init<A>(_:)();
    v26 = v35;
    specialized static PKStrokeCoherenceBase.initStroke<A>(strokeNodeRef:in:)(v25, v34, v35);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v25, v33);
    v27 = type metadata accessor for PKStroke();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 0, 1, v27);
  }
}

uint64_t closure #2 in Canvas.hide(strokes:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;

  v6[16] = a5;
  v6[17] = a6;
  v6[15] = a4;
  type metadata accessor for MainActor();
  v6[18] = static MainActor.shared.getter();
  v6[19] = dispatch thunk of Actor.unownedExecutor.getter();
  v6[20] = v7;
  return swift_task_switch();
}

uint64_t closure #2 in Canvas.hide(strokes:)()
{
  _QWORD *v0;
  void *v1;
  Class isa;
  PKDrawing *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = (void *)v0[15];
  type metadata accessor for PKStroke();
  isa = Array._bridgeToObjectiveC()().super.isa;
  v0[21] = isa;
  PKDrawing._bridgeToObjectiveC()(v3);
  v5 = v4;
  v0[22] = v4;
  v0[2] = v0;
  v0[3] = closure #2 in Canvas.hide(strokes:);
  v6 = swift_continuation_init();
  v0[10] = MEMORY[0x1E0C809B0];
  v7 = v0 + 10;
  v7[1] = 0x40000000;
  v7[2] = @objc completion handler block implementation for <A>@escaping @callee_unowned @convention(block) () -> () with result type ();
  v7[3] = &block_descriptor_239;
  v7[4] = v6;
  objc_msgSend(v1, sel__setAdditionalStrokes_inDrawing_completion_, isa, v5, v7);
  return swift_continuation_await();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 168);
  v2 = *(void **)(v0 + 176);
  swift_release();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #2 in Canvas.imageOf(canvasElementViews:in:)(CGFloat *a1@<X0>, id *a2@<X1>, void *a3@<X2>, CGRect *a4@<X8>)
{
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  id v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGRect v15;
  CGRect v16;

  v6 = *a1;
  v7 = a1[1];
  v8 = a1[2];
  v9 = a1[3];
  v10 = *a2;
  objc_msgSend(*a2, sel_bounds);
  objc_msgSend(a3, sel_convertRect_fromCoordinateSpace_, v10);
  v16.origin.x = v11;
  v16.origin.y = v12;
  v16.size.width = v13;
  v16.size.height = v14;
  v15.origin.x = v6;
  v15.origin.y = v7;
  v15.size.width = v8;
  v15.size.height = v9;
  *a4 = CGRectUnion(v15, v16);
}

void closure #3 in Canvas.imageOf(canvasElementViews:in:)(id a1, id *a2, CGRect *a3, unint64_t a4, _QWORD *a5)
{
  CGContext *v9;
  CGContext *v10;
  CGContext *v11;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGContext *v16;
  CGFloat v17;
  CGFloat MinY;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  CGContext *v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  CGContext *v32;
  CGFloat MinX;
  CGFloat v34;
  id v35;
  id v36;
  CGContext *v37;
  uint64_t (*v38)(void);
  void *v39;
  void *v40;
  id v41;
  double v42;
  CGFloat v43;
  double v44;
  CGFloat v45;
  double v46;
  CGFloat v47;
  double v48;
  CGFloat v49;
  CGContext *v50;
  double v51;
  id v52;
  void *v53;
  CGImage *v54;
  id v55;
  id v56;
  void *v57;
  CGImage *v58;
  CGContext *v59;
  id v60;
  id v61;
  void *v62;
  CGImage *v63;
  CGContext *v64;
  id v65;
  id v67;
  CGAffineTransform v68;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect ClipBoundingBox;
  CGRect v72;
  CGRect v73;
  CGRect v74;
  CGRect v75;
  CGRect v76;
  __C::CGRect v77;
  __C::CGRect v78;
  __C::CGRect v79;

  if (*a2)
  {
    v9 = (CGContext *)objc_msgSend(a1, sel_CGContext);
    CGContextSetGrayFillColor(v9, 1.0, 1.0);

    v10 = (CGContext *)objc_msgSend(a1, sel_CGContext);
    v11 = (CGContext *)objc_msgSend(a1, sel_CGContext);
    ClipBoundingBox = CGContextGetClipBoundingBox(v11);
    x = ClipBoundingBox.origin.x;
    y = ClipBoundingBox.origin.y;
    width = ClipBoundingBox.size.width;
    height = ClipBoundingBox.size.height;

    v72.origin.x = x;
    v72.origin.y = y;
    v72.size.width = width;
    v72.size.height = height;
    CGContextFillRect(v10, v72);

  }
  v16 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  v17 = -CGRectGetMinX(*a3);
  MinY = CGRectGetMinY(*a3);
  CGContextTranslateCTM(v16, v17, -MinY);

  if (a4 >> 62)
  {
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    if (!v19)
      goto LABEL_12;
  }
  else
  {
    v19 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v19)
      goto LABEL_12;
  }
  if (v19 < 1)
  {
    __break(1u);
    return;
  }
  v20 = 0;
  do
  {
    if ((a4 & 0xC000000000000001) != 0)
      v21 = (id)MEMORY[0x1DF0E4D64](v20, a4);
    else
      v21 = *(id *)(a4 + 8 * v20 + 32);
    v22 = v21;
    ++v20;
    v23 = (CGContext *)objc_msgSend(a1, sel_CGContext);
    CGContextSaveGState(v23);

    objc_msgSend(v22, sel_bounds);
    objc_msgSend(a5, sel_convertRect_fromCoordinateSpace_, v22);
    v25 = v24;
    v27 = v26;
    v29 = v28;
    v31 = v30;
    v32 = (CGContext *)objc_msgSend(a1, sel_CGContext);
    v73.origin.x = v25;
    v73.origin.y = v27;
    v73.size.width = v29;
    v73.size.height = v31;
    MinX = CGRectGetMinX(v73);
    v74.origin.x = v25;
    v74.origin.y = v27;
    v74.size.width = v29;
    v74.size.height = v31;
    v34 = CGRectGetMinY(v74);
    CGContextTranslateCTM(v32, MinX, v34);

    v35 = objc_msgSend(v22, sel_layer);
    v36 = objc_msgSend(a1, sel_CGContext);
    objc_msgSend(v35, sel_renderInContext_, v36);

    v37 = (CGContext *)objc_msgSend(a1, sel_CGContext);
    CGContextRestoreGState(v37);

  }
  while (v19 != v20);
LABEL_12:
  swift_bridgeObjectRelease();
  if (*a2)
  {
    v38 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a5) + 0x320);
    v67 = *a2;
    v39 = (void *)v38();
    if (v39
      && (v40 = v39,
          v41 = objc_msgSend(v39, sel_selectionImage),
          v40,
          v41))
    {
      objc_msgSend(v67, sel_bounds);
      objc_msgSend(a5, sel_convertRect_fromCoordinateSpace_, v67);
      v43 = v42;
      v45 = v44;
      v47 = v46;
      v49 = v48;
      v50 = (CGContext *)objc_msgSend(a1, sel_CGContext);
      v75.origin.x = v43;
      v75.origin.y = v45;
      v75.size.width = v47;
      v75.size.height = v49;
      v51 = CGRectGetMinY(v75);
      v76.origin.x = v43;
      v76.origin.y = v45;
      v76.size.width = v47;
      v76.size.height = v49;
      t1.a = 1.0;
      t1.b = 0.0;
      t1.c = 0.0;
      t1.d = 1.0;
      t1.tx = 0.0;
      t1.ty = 0.0;
      t2.b = 0.0;
      t2.c = 0.0;
      t2.a = 1.0;
      *(_OWORD *)&t2.d = xmmword_1DDF325E0;
      t2.ty = v51 + CGRectGetMaxY(v76);
      CGAffineTransformConcat(&v68, &t1, &t2);
      t1 = v68;
      CGContextConcatCTM(v50, &t1);

      v52 = objc_msgSend(v41, sel_image);
      if (v52)
      {
        v53 = v52;
        v54 = (CGImage *)objc_msgSend(v52, sel_CGImage);

        if (v54)
        {
          v55 = objc_msgSend(a1, sel_CGContext);
          v77.origin.x = v43;
          v77.origin.y = v45;
          v77.size.width = v47;
          v77.size.height = v49;
          CGContextRef.draw(_:in:byTiling:)(v54, v77, 0);

        }
      }
      v56 = objc_msgSend(v41, sel_mulImage);
      if (v56)
      {
        v57 = v56;
        v58 = (CGImage *)objc_msgSend(v56, sel_CGImage);

        if (v58)
        {
          v59 = (CGContext *)objc_msgSend(a1, sel_CGContext);
          CGContextSetBlendMode(v59, kCGBlendModeMultiply);

          v60 = objc_msgSend(a1, sel_CGContext);
          v78.origin.x = v43;
          v78.origin.y = v45;
          v78.size.width = v47;
          v78.size.height = v49;
          CGContextRef.draw(_:in:byTiling:)(v58, v78, 0);

        }
      }
      v61 = objc_msgSend(v41, sel_addImage);
      if (v61
        && (v62 = v61,
            v63 = (CGImage *)objc_msgSend(v61, sel_CGImage),
            v62,
            v63))
      {
        v64 = (CGContext *)objc_msgSend(a1, sel_CGContext);
        CGContextSetBlendMode(v64, kCGBlendModePlusLighter);

        v65 = objc_msgSend(a1, sel_CGContext);
        v79.origin.x = v43;
        v79.origin.y = v45;
        v79.size.width = v47;
        v79.size.height = v49;
        CGContextRef.draw(_:in:byTiling:)(v63, v79, 0);

      }
      else
      {

      }
    }
    else
    {

    }
  }
}

uint64_t closure #2 in Canvas.dropInteraction(_:performDrop:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v29 = type metadata accessor for CRStableAsset();
  v10 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29, v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for URL();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v28 - v25;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v17, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for URL?);
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v26, v17, v18);
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v22, v26, v18);
  CRStableAsset.init(url:extension:)();
  closure #1 in closure #2 in Canvas.dropInteraction(_:performDrop:)((uint64_t)v13, &v30, a2, a3, a4, a5);
  swift_release();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v26, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v29);
}

uint64_t closure #1 in closure #2 in Canvas.dropInteraction(_:performDrop:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  double *v33;
  uint64_t result;
  id v35;
  uint64_t *v36;

  v36 = a2;
  v11 = type metadata accessor for CRStableAsset();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11, v14);
  v15 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v35 - v18;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v35 = Canvas.editingView.getter();
  v26 = v25;
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v27(v19, a1, v11);
  v27(v15, (uint64_t)v19, v11);
  type metadata accessor for MainActor();
  v28 = static MainActor.shared.getter();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v11);
  v29 = (*(unsigned __int8 *)(v12 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v30 = (v13 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = (char *)swift_allocObject();
  v32 = MEMORY[0x1E0DF06E8];
  *((_QWORD *)v31 + 2) = v28;
  *((_QWORD *)v31 + 3) = v32;
  *((_QWORD *)v31 + 4) = v35;
  *((_QWORD *)v31 + 5) = v26;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v31[v29], v15, v11);
  v33 = (double *)&v31[v30];
  *v33 = a3;
  v33[1] = a4;
  v33[2] = a5;
  v33[3] = a6;
  result = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm((uint64_t)v23, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #2 in Canvas.dropInteraction(_:performDrop:), (uint64_t)v31);
  *v36 = result;
  return result;
}

uint64_t closure #1 in closure #1 in closure #2 in Canvas.dropInteraction(_:performDrop:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  *(double *)(v10 + 56) = a3;
  *(double *)(v10 + 64) = a4;
  *(double *)(v10 + 40) = a1;
  *(double *)(v10 + 48) = a2;
  *(_QWORD *)(v10 + 24) = a9;
  *(_QWORD *)(v10 + 32) = a10;
  *(_QWORD *)(v10 + 16) = a8;
  v11 = type metadata accessor for URL();
  *(_QWORD *)(v10 + 72) = v11;
  *(_QWORD *)(v10 + 80) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v10 + 88) = swift_task_alloc();
  type metadata accessor for MainActor();
  *(_QWORD *)(v10 + 96) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in closure #2 in Canvas.dropInteraction(_:performDrop:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  uint64_t v8;
  uint64_t ObjectType;
  CGFloat MidX;
  CGFloat MidY;
  CGRect v13;
  CGRect v14;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v5 = *(double *)(v0 + 56);
  v4 = *(double *)(v0 + 64);
  v7 = *(double *)(v0 + 40);
  v6 = *(double *)(v0 + 48);
  v8 = *(_QWORD *)(v0 + 24);
  swift_release();
  ObjectType = swift_getObjectType();
  CRStableAsset.url.getter();
  v13.origin.x = v7;
  v13.origin.y = v6;
  v13.size.width = v5;
  v13.size.height = v4;
  MidX = CGRectGetMidX(v13);
  v14.origin.x = v7;
  v14.origin.y = v6;
  v14.size.width = v5;
  v14.size.height = v4;
  MidY = CGRectGetMidY(v14);
  (*(void (**)(uint64_t, uint64_t, CGFloat, _QWORD, _QWORD, uint64_t, uint64_t))(v8 + 112))(v1, 1, COERCE_CGFLOAT(*(_QWORD *)&MidX), *(_QWORD *)&MidY, 0, ObjectType, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in Canvas.dropInteraction(_:item:willAnimateDropWith:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t v7;
  char v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v4 = (uint64_t *)(a2 + direct field offset for Canvas.dropCompletions);
  swift_beginAccess();
  v5 = *v4;
  if (*(_QWORD *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    v6 = a3;
    v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if ((v8 & 1) != 0)
    {
      v9 = *(void (**)(uint64_t))(*(_QWORD *)(v5 + 56) + 16 * v7);
      swift_retain_n();

      v10 = swift_bridgeObjectRelease();
      v9(v10);
      swift_release_n();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
  }
  swift_beginAccess();
  v11 = specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)a3);
  result = swift_endAccess();
  if (v11)
    return outlined consume of (@escaping @callee_guaranteed () -> ())?(v11);
  return result;
}

uint64_t Canvas.canPerformAction(_:withSender:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  objc_class *v16;
  objc_super v18;
  _QWORD v19[3];
  uint64_t v20;

  v5 = *v2;
  v6 = *MEMORY[0x1E0DEEDD8];
  if ((static Selector.== infix(_:_:)() & 1) != 0)
    return 1;
  v8 = (uint64_t *)(v6 & v5);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a2, (uint64_t)v19, &demangling cache variable for type metadata for Any?);
  v9 = v20;
  if (v20)
  {
    v10 = __swift_project_boxed_opaque_existential_1(v19, v20);
    v11 = *(_QWORD *)(v9 - 8);
    v12 = MEMORY[0x1E0C80A78](v10, v10);
    v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v11 + 16))(v14, v12);
    v15 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    v15 = 0;
  }
  v16 = (objc_class *)type metadata accessor for Canvas(0, v8[247], v8[248], v8[249]);
  v18.receiver = v2;
  v18.super_class = v16;
  v7 = objc_msgSendSuper2(&v18, sel_canPerformAction_withSender_, a1, v15);
  swift_unknownObjectRelease();
  return (uint64_t)v7;
}

uint64_t @objc Canvas.canPerformAction(_:withSender:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6;
  id v7;
  char v8;
  _OWORD v10[2];

  if (a4)
  {
    v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    v7 = a1;
  }
  v8 = Canvas.canPerformAction(_:withSender:)(a3, (uint64_t)v10);

  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for Any?);
  return v8 & 1;
}

uint64_t @objc Canvas.cut(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  return @objc Canvas.cut(_:)(a1, a2, a3, 0);
}

uint64_t @objc Canvas.copy(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  return @objc Canvas.cut(_:)(a1, a2, a3, 1);
}

uint64_t @objc Canvas.cut(_:)(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  id v6;
  id v7;
  _OWORD v9[2];

  if (a3)
  {
    v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    v7 = (id)swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
    v7 = a1;
  }
  Canvas.cut(_:)((uint64_t)v7, a4);

  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for Any?);
}

uint64_t @objc Canvas.paste(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  return @objc Canvas.cut(_:)(a1, a2, a3, 2);
}

uint64_t Canvas.cut(_:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (v3)
  {
    v5 = v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
    v6 = *(_QWORD *)v5;
    v7 = *(_QWORD *)(v5 + 8);
    v8 = *(_QWORD *)(v5 + 16);
    v9 = *(unsigned __int8 *)(v5 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    AnyCanvas.performSelectionAction(_:_:at:)(a2, v6, v7, v8, v9, 0);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t @objc Canvas.duplicate(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  return @objc Canvas.cut(_:)(a1, a2, a3, 3);
}

uint64_t closure #1 in Canvas.itemProvider(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](v6, v9);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v6);
  v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v16 + v15, (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  v17 = (_QWORD *)(v16 + ((v8 + v15 + 7) & 0xFFFFFFFFFFFFFFF8));
  *v17 = a1;
  v17[1] = a2;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5Tm((uint64_t)v13, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in Canvas.itemProvider(for:), v16);
  swift_release();
  return 0;
}

uint64_t closure #1 in closure #1 in Canvas.itemProvider(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[8] = a5;
  v6[9] = a6;
  v6[7] = a4;
  type metadata accessor for Paper();
  v6[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in Canvas.itemProvider(for:)()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  BOOL v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, char, char);

  v1 = Capsule<>.contentBounds(includeDrawing:)(1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  if (one-time initialization token for copyImageMaxDimension != -1)
    swift_once();
  v8 = *(double *)&static UIConstants.copyImageMaxDimension < v5
    || *(double *)&static UIConstants.copyImageMaxDimension < v7;
  v9 = v5;
  v10 = v7;
  if (v8)
  {
    v11 = *(double *)&static UIConstants.copyImageMaxDimension / v7;
    if (*(double *)&static UIConstants.copyImageMaxDimension / v7 >= *(double *)&static UIConstants.copyImageMaxDimension
                                                                    / v5)
      v11 = *(double *)&static UIConstants.copyImageMaxDimension / v5;
    v9 = v5 * v11;
    v10 = v7 * v11;
  }
  if (one-time initialization token for copyImageScale != -1)
    swift_once();
  v12 = static UIConstants.copyImageScale;
  type metadata accessor for ImageRenderer();
  v13 = swift_allocObject();
  *(double *)(v13 + 16) = v9;
  *(double *)(v13 + 24) = v10;
  *(_QWORD *)(v13 + 32) = v12;
  *(_QWORD *)(v0 + 88) = specialized CanvasElementImageRenderer.__allocating_init(renderer:)(v13);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  Capsule<>.root.getter();
  *(double *)(v0 + 16) = v1;
  *(_QWORD *)(v0 + 24) = v3;
  *(double *)(v0 + 32) = v5;
  *(double *)(v0 + 40) = v7;
  *(_BYTE *)(v0 + 48) = 0;
  v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char))((char *)&async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)
                                                                      + async function pointer to specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:));
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 96) = v14;
  *v14 = v0;
  v14[1] = closure #1 in closure #1 in Canvas.itemProvider(for:);
  return v16(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56), v0 + 16, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  void (*v2)(void *, _QWORD);
  id v3;

  v1 = *(void **)(v0 + 104);
  v2 = *(void (**)(void *, _QWORD))(v0 + 64);
  v3 = v1;
  v2(v1, 0);

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in Canvas.itemProvider(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = a1;
  swift_task_dealloc();
  outlined destroy of PKStrokeProperties(v2, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
  return swift_task_switch();
}

id thunk for @escaping @callee_guaranteed @Sendable (@guaranteed @escaping @callee_guaranteed @Sendable (@guaranteed NSItemProviderWriting?, @guaranteed Error?) -> ()) -> (@owned NSProgress?)(uint64_t a1, void *aBlock)
{
  uint64_t (*v2)(_QWORD, uint64_t);
  void *v3;
  uint64_t v4;
  void *v5;

  v2 = *(uint64_t (**)(_QWORD, uint64_t))(a1 + 32);
  v3 = _Block_copy(aBlock);
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v3;
  swift_retain();
  v5 = (void *)v2(partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSItemProviderWriting?, @unowned NSError?) -> (), v4);
  swift_release();
  swift_release();
  return v5;
}

void thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSItemProviderWriting?, @unowned NSError?) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)();
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);

}

uint64_t closure #2 in Canvas.itemProvider(for:)(void (*a1)(uint64_t, _QWORD, _QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  NSString *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void (*v28)(unint64_t, _QWORD, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(uint64_t, _QWORD, _QWORD);
  _OWORD v39[2];
  uint64_t v40;

  v34 = a3;
  v37 = a2;
  v38 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v3, v4);
  v36 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v32 - v18;
  v20 = NSTemporaryDirectory();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  v35 = v12;
  v33 = *(void (**)(char *, uint64_t))(v12 + 8);
  v33(v15, v11);
  type metadata accessor for CRContext();
  v40 = 0;
  memset(v39, 0, sizeof(v39));
  v21 = (void *)MEMORY[0x1DF0E3C90](0, v39);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v39, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDataStoreBundle<Paper>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  v22 = type metadata accessor for CRCodableVersion();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(_QWORD *)(v23 + 72);
  v25 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_1DDF33AB0;
  v27 = v26 + v25;
  v28 = *(void (**)(unint64_t, _QWORD, uint64_t))(v23 + 104);
  v28(v26 + v25, *MEMORY[0x1E0D12370], v22);
  v28(v27 + v24, *MEMORY[0x1E0D12378], v22);
  if (one-time initialization token for allFileFormatVersions != -1)
    swift_once();
  static CRDataStoreBundle.write(_:model:url:allowedEncodings:allowedAppFormats:)();

  swift_bridgeObjectRelease();
  v30 = v35;
  v29 = (uint64_t)v36;
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v36, v19, v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56))(v29, 0, 1, v11);
  v38(v29, 0, 0);
  outlined destroy of StocksKitCurrencyCache.Provider?(v29, &demangling cache variable for type metadata for URL?);
  v33(v19, v11);
  return 0;
}

uint64_t closure #3 in Canvas.pasteboardRepresentations(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  char v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t result;
  void *v35;
  void *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t *v58;
  __int128 aBlock;
  __int128 v60;
  uint64_t (*v61)();
  uint64_t v62;
  _OWORD v63[2];
  void *v64;

  v58 = a3;
  v5 = type metadata accessor for UTType();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v52 - v12;
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v52 - v16;
  v18 = *a1;
  v19 = *a2;
  static UTType.png.getter();
  v20 = UTType.identifier.getter();
  v22 = v21;
  v23 = *(void (**)(char *, uint64_t))(v6 + 8);
  v23(v17, v5);
  if (*(_QWORD *)(v18 + 16) && (v24 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v22), (v25 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v18 + 56) + 32 * v24, (uint64_t)&aBlock);
  }
  else
  {
    aBlock = 0u;
    v60 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v60 + 1))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&aBlock, &demangling cache variable for type metadata for Any?);
    v33 = v58;
    if (v19)
    {
LABEL_24:
      *v33 = v19;
      return swift_bridgeObjectRetain();
    }
LABEL_12:
    result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    *v33 = result;
    return result;
  }
  outlined init with take of Any(&aBlock, v63);
  outlined init with copy of Any((uint64_t)v63, (uint64_t)&aBlock);
  v26 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_23:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
    v33 = v58;
    if (v19)
      goto LABEL_24;
    goto LABEL_12;
  }
  v27 = v64;
  if (!v19)
  {
    aBlock = 0u;
    v60 = 0u;
LABEL_21:

    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&aBlock, &demangling cache variable for type metadata for Any?);
    goto LABEL_23;
  }
  v56 = v26;
  v57 = v64;
  static UTType.png.getter();
  v28 = UTType.identifier.getter();
  v30 = v29;
  v23(v13, v5);
  if (*(_QWORD *)(v19 + 16) && (v31 = specialized __RawDictionaryStorage.find<A>(_:)(v28, v30), (v32 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v19 + 56) + 32 * v31, (uint64_t)&aBlock);
  }
  else
  {
    aBlock = 0u;
    v60 = 0u;
  }
  v27 = v57;
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v60 + 1))
    goto LABEL_21;
  if ((swift_dynamicCast() & 1) == 0)
  {

    goto LABEL_23;
  }
  v35 = v27;
  v36 = v64;
  objc_msgSend(v35, sel_size);
  v38 = v37;
  objc_msgSend(v36, sel_size);
  if (v38 <= v39)
    v38 = v39;
  objc_msgSend(v35, sel_size);
  v41 = v40;
  objc_msgSend(v36, sel_size);
  v43 = v41 + v42;
  v57 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3828]), sel_initWithSize_, v38, v43);
  v44 = swift_allocObject();
  *(_QWORD *)(v44 + 16) = v35;
  *(double *)(v44 + 24) = v38;
  *(double *)(v44 + 32) = v43;
  *(_QWORD *)(v44 + 40) = v36;
  v45 = swift_allocObject();
  *(_QWORD *)(v45 + 16) = partial apply for closure #1 in closure #3 in Canvas.pasteboardRepresentations(_:);
  *(_QWORD *)(v45 + 24) = v44;
  v55 = v44;
  v61 = thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()partial apply;
  v62 = v45;
  *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v60 = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  *((_QWORD *)&v60 + 1) = &block_descriptor_207;
  v46 = _Block_copy(&aBlock);
  v54 = v35;
  v53 = v36;
  swift_retain();
  swift_release();
  v47 = objc_msgSend(v57, sel_imageWithActions_, v46);
  _Block_release(v46);
  LOBYTE(v46) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v46 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    *v58 = v18;
    swift_bridgeObjectRetain();
    static UTType.png.getter();
    v48 = UTType.identifier.getter();
    v50 = v49;
    v23(v9, v5);
    *((_QWORD *)&v60 + 1) = v56;
    *(_QWORD *)&aBlock = v47;
    v51 = v47;
    specialized Dictionary.subscript.setter((uint64_t)&aBlock, v48, v50);

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
    return swift_release();
  }
  return result;
}

id closure #1 in closure #3 in Canvas.pasteboardRepresentations(_:)(int a1, id a2, double a3, void *a4)
{
  double v7;
  double v8;
  double v9;
  double v10;

  objc_msgSend(a2, sel_size);
  objc_msgSend(a2, sel_drawInRect_, 0.0, 0.0, a3, v7);
  objc_msgSend(a2, sel_size);
  v9 = v8;
  objc_msgSend(a4, sel_size);
  return objc_msgSend(a4, sel_drawInRect_, 0.0, v9, a3, v10);
}

uint64_t closure #1 in Canvas.canvasElementBounds(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  v2 = type metadata accessor for Capsule();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v18[-1] - v5;
  CanvasElementView.canvasElement.getter((uint64_t)&v18[-1] - v5);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  WeakTagged_9.subscript.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v7 = v19;
  if (v19)
  {
    v8 = v20;
    __swift_project_boxed_opaque_existential_1(v18, v19);
    v9 = (*(double (**)(uint64_t))(*(_QWORD *)(v8 + 8) + 8))(v7);
    v11 = v10;
    v13 = v12;
    v15 = v14;
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  }
  else
  {
    result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for CanvasElement?);
    v9 = 0.0;
    v11 = 0;
    v13 = 0;
    v15 = 0;
  }
  *(double *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(a1 + 24) = v15;
  *(_BYTE *)(a1 + 32) = v7 == 0;
  return result;
}

uint64_t closure #2 in Canvas.createSubCanvasElement(from:)(uint64_t *a1, uint64_t a2, char *a3, uint64_t a4, char *a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void (*v51)(uint64_t *, _QWORD);
  uint64_t v52;
  char *v53;
  void (*v54)(uint64_t *, _QWORD);
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  int v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t KeyPath;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v59 = a6;
  v58 = a5;
  v72 = a4;
  v57 = a3;
  v70 = a2;
  v11 = *a1;
  v66 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v66, v12);
  v56 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v64 = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65, v14);
  v63 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v73 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85, v16);
  v60 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v61 = (char *)&v56 - v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v21, v22);
  v67 = (char *)&v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v62 = (char *)&v56 - v26;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v29);
  v31 = (char *)&v56 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32, v33);
  v81 = *(_QWORD *)(v11 + *MEMORY[0x1E0D12A70]);
  v34 = v81;
  v82 = a7;
  v69 = a8;
  v83 = a8;
  KeyPath = swift_getKeyPath();
  v78 = v34;
  v79 = a7;
  v80 = a8;
  swift_getKeyPath();
  Capsule.Ref<>.subscript.getter();
  swift_release();
  v77 = v70;
  v35 = v71;
  CROrderedSet.filter(_:)();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v27);
  v36 = v72;
  Capsule.Ref<>.subscript.setter();
  v37 = *(_QWORD *)(v36 + 16);
  v74 = v34;
  v75 = a7;
  v76 = v69;
  swift_getKeyPath();
  if (v37)
  {
    v71 = v35;
    v38 = (uint64_t)v67;
    Capsule.Ref<>.subscript.getter();
    swift_release();
    v39 = v73;
    v40 = v85;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v38, 1, v85) == 1)
      return outlined destroy of StocksKitCurrencyCache.Provider?(v38, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    v45 = v60;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v60, v38, v40);
    v46 = (uint64_t)v56;
    v47 = Ref.subscript.getter();
    MEMORY[0x1E0C80A78](v47, v48);
    *(&v56 - 4) = v57;
    *(&v56 - 3) = (char *)v36;
    *(&v56 - 2) = v58;
    *((_BYTE *)&v56 - 8) = v59 & 1;
    v49 = PKDrawingStruct.filteredStrokes<A>(in:isIncluded:)((uint64_t)a1, (uint64_t)partial apply for closure #2 in closure #2 in Canvas.createSubCanvasElement(from:), (uint64_t)(&v56 - 6));
    outlined destroy of PKStrokeProperties(v46, (uint64_t (*)(_QWORD))type metadata accessor for PKDrawingStruct);
    v84 = v49;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>]);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12870]);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12888]);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>], MEMORY[0x1E0DEAF38]);
    v50 = v63;
    CROrderedSet.init<A>(_:)();
    v51 = (void (*)(uint64_t *, _QWORD))Ref.subscript.modify();
    (*(void (**)(uint64_t, char *, uint64_t))(v64 + 40))(v52 + *(int *)(v66 + 20), v50, v65);
    v51(&v84, 0);
    return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v45, v40);
  }
  else
  {
    v41 = v61;
    v38 = (uint64_t)v62;
    Capsule.Ref<>.subscript.getter();
    swift_release();
    v42 = v73;
    v43 = v85;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v38, 1, v85))
      return outlined destroy of StocksKitCurrencyCache.Provider?(v38, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v41, v38, v43);
    outlined destroy of StocksKitCurrencyCache.Provider?(v38, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12870]);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12888]);
    v53 = v63;
    CROrderedSet.init()();
    v54 = (void (*)(uint64_t *, _QWORD))Ref.subscript.modify();
    (*(void (**)(uint64_t, char *, uint64_t))(v64 + 40))(v55 + *(int *)(v66 + 20), v53, v65);
    v54(&v84, 0);
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v41, v43);
  }
}

uint64_t closure #2 in closure #2 in Canvas.createSubCanvasElement(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, a1, v5, v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12878]);
  WeakRef.init<A>(_:)();
  LOBYTE(a3) = specialized Set.contains(_:)((uint64_t)v15, a3);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
  return a3 & 1;
}

uint64_t closure #2 in Canvas.createNewPaper(from:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void (*v65)(unint64_t *, _QWORD);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  void (*v71)(unint64_t *, _QWORD);
  uint64_t v72;
  void (*v73)(char *, uint64_t);
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  _QWORD *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t);
  uint64_t KeyPath;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  unint64_t v106;
  uint64_t v107;

  v80 = a7;
  v81 = a6;
  v101 = a5;
  v82 = a4;
  v98 = a3;
  v107 = a1;
  v8 = *MEMORY[0x1E0DEEDD8] & *a2;
  v78 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v77 = *(_QWORD *)(v78 - 8);
  MEMORY[0x1E0C80A78](v78, v9);
  v76 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for Paper();
  MEMORY[0x1E0C80A78](v83, v11);
  v84 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v75, v13);
  v79 = (char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v15, v16);
  v85 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v100 = (uint64_t)&v74 - v20;
  v90 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v91 = *(_QWORD *)(v90 - 8);
  MEMORY[0x1E0C80A78](v90, v21);
  v74 = (char *)&v74 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v89 = (char *)&v74 - v25;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v27 = *(_QWORD *)(v26 - 8);
  v96 = v26;
  v97 = v27;
  MEMORY[0x1E0C80A78](v26, v28);
  v94 = (char *)&v74 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v31);
  v95 = (char *)&v74 - v32;
  v92 = (void (*)(char *, uint64_t))v8;
  v33 = *(char **)(v8 + 1976);
  v34 = *(char **)(v8 + 1984);
  v35 = type metadata accessor for Capsule();
  v36 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35, v37);
  v87 = (uint64_t)&v74 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v39, v40);
  v42 = (char *)&v74 - v41;
  CanvasElementView.canvasElement.getter((uint64_t)&v74 - v41);
  Capsule.Ref.import<A>(_:)();
  v43 = *(void (**)(char *, uint64_t))(v36 + 8);
  v43(v42, v35);
  KeyPath = swift_getKeyPath();
  v88 = a2;
  CanvasElementView.canvasElement.getter((uint64_t)v42);
  v86 = v33;
  v103 = v33;
  v104 = v34;
  v44 = (char *)*((_QWORD *)v92 + 249);
  v105 = v44;
  swift_getKeyPath();
  v45 = v94;
  Capsule<>.subscript.getter();
  swift_release();
  v46 = v42;
  v47 = v35;
  v92 = v43;
  v43(v46, v35);
  v48 = v99;
  v102 = v98;
  v49 = v96;
  CROrderedSet.filter(_:)();
  (*(void (**)(char *, uint64_t))(v97 + 8))(v45, v49);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  result = Capsule.Ref<>.subscript.setter();
  if (*(_QWORD *)(v101 + 16))
  {
    v99 = v48;
    v51 = v87;
    v52 = CanvasElementView.canvasElement.getter(v87);
    MEMORY[0x1E0C80A78](v52, v53);
    *(&v74 - 4) = v86;
    *(&v74 - 3) = v34;
    *(&v74 - 2) = v44;
    swift_getKeyPath();
    v54 = v100;
    Capsule<>.subscript.getter();
    swift_release();
    v92((char *)v51, v47);
    v55 = v91;
    v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v91 + 48);
    v57 = v54;
    v58 = v90;
    if (v56(v57, 1, v90) == 1)
    {
      return outlined destroy of StocksKitCurrencyCache.Provider?(v100, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    }
    else
    {
      v59 = v80 & 1;
      (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(v89, v100, v58);
      v60 = (uint64_t)v79;
      v61 = v107;
      Ref.subscript.getter();
      v62 = v82;
      swift_bridgeObjectRetain();
      v63 = v101;
      swift_bridgeObjectRetain();
      v64 = specialized PKDrawingStruct.filteredStrokes<A>(in:isIncluded:)(v61, v60, v62, v63, v81, v59);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of PKStrokeProperties(v60, (uint64_t (*)(_QWORD))type metadata accessor for PKDrawingStruct);
      v65 = (void (*)(unint64_t *, _QWORD))Capsule.Ref<>.root.modify();
      specialized ContainerCanvasElement.ensureHasDrawing<A>(in:)();
      v65(&v106, 0);
      v66 = (uint64_t)v84;
      Capsule.Ref<>.root.getter();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
      v67 = (uint64_t)v85;
      CRRegister.wrappedValue.getter();
      outlined destroy of PKStrokeProperties(v66, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
      if (v56(v67, 1, v58))
      {
        (*(void (**)(char *, uint64_t))(v91 + 8))(v89, v58);
        swift_bridgeObjectRelease();
        return outlined destroy of StocksKitCurrencyCache.Provider?(v67, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      }
      else
      {
        v68 = v91;
        v69 = v74;
        (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v74, v67, v58);
        outlined destroy of StocksKitCurrencyCache.Provider?(v67, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
        v106 = v64;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>]);
        lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12870]);
        lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12888]);
        lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [Ref<CRRegister<SharedTagged_2<TaggedStroke>>>], MEMORY[0x1E0DEAF38]);
        v70 = v76;
        CROrderedSet.init<A>(_:)();
        v71 = (void (*)(unint64_t *, _QWORD))Ref.subscript.modify();
        (*(void (**)(uint64_t, char *, uint64_t))(v77 + 40))(v72 + *(int *)(v75 + 20), v70, v78);
        v71(&v106, 0);
        v73 = *(void (**)(char *, uint64_t))(v68 + 8);
        v73(v69, v58);
        return ((uint64_t (*)(char *, uint64_t))v73)(v89, v58);
      }
    }
  }
  return result;
}

uint64_t closure #1 in closure #2 in Canvas.createSubCanvasElement(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v11;

  v3 = type metadata accessor for CRKeyPath();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  MEMORY[0x1DF0E34A4](v8);
  v9 = specialized Set.contains(_:)((uint64_t)v7, a2);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v9 & 1;
}

uint64_t closure #1 in Canvas.canvasCalculateSetShouldSolve(_:stroke:flag:undoable:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  uint64_t result;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  void (*v65)(char *, _QWORD);
  void (*v66)(char *, _QWORD);
  uint64_t *v67;
  uint64_t (*v68)(uint64_t, uint64_t, uint64_t);
  void (*v69)(char *, uint64_t);
  void (*v70)(char *, uint64_t);
  char *v71;
  uint64_t v72;
  unsigned int (*v73)(uint64_t, uint64_t, uint64_t);
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  _BYTE *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char v89[32];
  char v90[40];

  v78 = a5;
  v81 = a4;
  LODWORD(v82) = a3;
  v7 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x1E0C80A78](v7, v8);
  v80 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v83, v10);
  v79 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v85 = *(_QWORD *)(v87 - 8);
  MEMORY[0x1E0C80A78](v87, v12);
  v86 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v15 = *(_QWORD **)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v77 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v84 = (char *)&v68 - v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v68 - v27;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)&v68 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v88 = (uint64_t)&v68 - v35;
  v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v37 = a1;
  WeakRef.subscript.getter();
  v38 = (unsigned int (*)(char *, uint64_t, uint64_t))v15[6];
  if (v38(v28, 1, v14))
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  v72 = v36;
  v73 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v38;
  v74 = v24;
  v71 = v32;
  v75 = a2;
  v76 = v37;
  v40 = (void (*)(char *, char *, uint64_t))v15[2];
  v41 = v84;
  v40(v84, v28, v14);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  v42 = v86;
  CRRegister.value.getter();
  v43 = v87;
  v44 = v88;
  SharedTagged_2.tagged1.getter();
  v45 = *(void (**)(char *, uint64_t))(v85 + 8);
  v45(v42, v43);
  v46 = (void (*)(char *, uint64_t))v15[1];
  v46(v41, v14);
  v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
  if (v49(v44, 1, v47) == 1)
    return outlined destroy of StocksKitCurrencyCache.Provider?(v88, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  v85 = v14;
  v68 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v49;
  v69 = v46;
  v70 = v45;
  v84 = (char *)v40;
  v50 = (uint64_t)v79;
  v51 = v88;
  Ref.subscript.getter();
  v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  v53 = (uint64_t *)v80;
  CRRegister.wrappedValue.getter();
  outlined destroy of PKStrokeProperties(v50, type metadata accessor for PKStrokeStruct);
  v54 = *v53;
  outlined destroy of PKStrokeProperties((uint64_t)v53, type metadata accessor for PKStrokeProperties);
  v55 = *(uint64_t (**)(uint64_t, uint64_t))(v48 + 8);
  result = v55(v51, v47);
  if ((v82 & 1) != 0)
    v56 = v54 | v81;
  else
    v56 = v54 & ~v81;
  if (v56 != v54)
  {
    v82 = v52;
    v88 = v47;
    v57 = (uint64_t)v74;
    WeakRef.subscript.getter();
    v58 = v85;
    if (v73(v57, 1, v85))
    {
      result = outlined destroy of StocksKitCurrencyCache.Provider?(v57, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
      v59 = v78;
    }
    else
    {
      v60 = v77;
      ((void (*)(char *, uint64_t, uint64_t))v84)(v77, v57, v58);
      outlined destroy of StocksKitCurrencyCache.Provider?(v57, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
      CRRegister.value.getter();
      v61 = (uint64_t)v71;
      v62 = v87;
      SharedTagged_2.tagged1.getter();
      v70(v42, v62);
      v69(v60, v58);
      v63 = v88;
      v64 = v68(v61, 1, v88);
      v59 = v78;
      if (v64 == 1)
      {
        result = outlined destroy of StocksKitCurrencyCache.Provider?(v61, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
      }
      else
      {
        v65 = (void (*)(char *, _QWORD))Ref.subscript.modify();
        v66 = (void (*)(char *, _QWORD))CRRegister.wrappedValue.modify();
        *v67 = v56;
        v66(v89, 0);
        v65(v90, 0);
        result = v55(v61, v63);
      }
    }
    *v59 = 1;
  }
  return result;
}

void closure #1 in Canvas.undoablyAdd(_:to:)(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + direct field offset for Canvas.paperView);
  swift_beginAccess();
  type metadata accessor for Capsule();
  v2 = v1;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();

}

uint64_t closure #1 in closure #1 in Canvas.undoablyAdd(_:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(_BYTE *, _QWORD);
  _QWORD v20[2];
  _BYTE v21[32];

  v20[1] = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for GraphableExpression();
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PKStrokeProperties(a2, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for GraphableExpression);
  v17 = type metadata accessor for CRKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v7, 1, 1, v17);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  swift_retain();
  Ref.init<A>(_:_:identity:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphElement>);
  v18 = (void (*)(_BYTE *, _QWORD))Ref.subscript.modify();
  type metadata accessor for GraphElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  CROrderedSet.append(_:)();
  v18(v21, 0);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t closure #1 in Canvas.mathAddGraph(forExpression:range:identifier:expressionLocation:addToExisting:)(double a1, double a2, double a3, CGFloat a4, CGFloat a5, CGFloat a6, uint64_t a7, __int128 *a8, uint64_t a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  void (*v34)(__int128 *, _QWORD);
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  CGRect v40;

  v37 = a9;
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for GraphableExpression();
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v36 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v26);
  v28 = (char *)&v36 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  v29 = a8[1];
  v38 = *a8;
  v39 = v29;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  Capsule.Ref<>.subscript.setter();
  swift_getKeyPath();
  v38 = 0uLL;
  *(double *)&v39 = a1;
  *((double *)&v39 + 1) = a2;
  Capsule.Ref<>.subscript.setter();
  swift_getKeyPath();
  v40.origin.x = a3;
  v40.origin.y = a4;
  v40.size.width = a5;
  v40.size.height = a6;
  if (CGRectIsEmpty(v40))
  {
    a3 = specialized static GraphElement.defaultVisibleRange.getter();
    a4 = v30;
    a5 = v31;
    a6 = v32;
  }
  *(double *)&v38 = a3;
  *((CGFloat *)&v38 + 1) = a4;
  *(CGFloat *)&v39 = a5;
  *((CGFloat *)&v39 + 1) = a6;
  Capsule.Ref<>.subscript.setter();
  outlined init with copy of PKStrokeProperties(v37, (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for GraphableExpression);
  v33 = type metadata accessor for CRKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v19, 1, 1, v33);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  swift_retain();
  Ref.init<A>(_:_:identity:)();
  swift_getKeyPath();
  v34 = (void (*)(__int128 *, _QWORD))Capsule.Ref<>.subscript.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  CROrderedSet.append(_:)();
  v34(&v38, 0);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v28, v24);
}

uint64_t closure #1 in Canvas.harmonizeCanvasElement<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v5[9] = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v5[10] = v7;
  v5[11] = *(_QWORD *)(v7 - 8);
  v5[12] = swift_task_alloc();
  v8 = type metadata accessor for CRAsset();
  v5[13] = v8;
  v5[14] = *(_QWORD *)(v8 - 8);
  v5[15] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  v5[16] = swift_task_alloc();
  v9 = swift_task_alloc();
  v5[17] = v9;
  v5[18] = swift_task_alloc();
  v5[19] = swift_projectBox();
  v5[20] = type metadata accessor for MainActor();
  v5[21] = static MainActor.shared.getter();
  v10 = (_QWORD *)swift_task_alloc();
  v5[22] = v10;
  *v10 = v5;
  v10[1] = closure #1 in Canvas.harmonizeCanvasElement<A>(_:);
  return Canvas.harmonizeImage(_:)(v9, a5);
}

uint64_t closure #1 in Canvas.harmonizeCanvasElement<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18[9];

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 112);
  swift_release();
  outlined init with take of (key: Int, value: AnyCRValue)?(v1, v2, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v2, v3, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    v6 = *(_QWORD *)(v0 + 128);
    outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 144), (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v6, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 152);
    v8 = *(_QWORD *)(v0 + 120);
    v16 = *(_QWORD *)(v0 + 112);
    v17 = *(_QWORD *)(v0 + 144);
    v9 = *(_QWORD *)(v0 + 88);
    v10 = *(_QWORD *)(v0 + 96);
    v11 = *(_QWORD *)(v0 + 80);
    v15 = *(_QWORD *)(v0 + 104);
    (*(void (**)(uint64_t, _QWORD))(v16 + 32))(v8, *(_QWORD *)(v0 + 128));
    *(_QWORD *)(swift_task_alloc() + 16) = v8;
    swift_beginAccess();
    Capsule.callAsFunction<A>(_:)();
    swift_endAccess();
    swift_task_dealloc();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v10, v7, v11);
    v12 = type metadata accessor for Image();
    v13 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
    v18[0] = 3;
    AnyCanvas.merge<A>(_:from:)(v10, v18, v12, v13);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    outlined destroy of StocksKitCurrencyCache.Provider?(v17, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v8, v15);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint8_t *v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;

  swift_release();
  if (one-time initialization token for logger != -1)
    swift_once();
  v1 = *(void **)(v0 + 184);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)logger);
  v3 = v1;
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 184);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v9 = 138412290;
    v11 = v8;
    v12 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 64) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v12;

    _os_log_impl(&dword_1DDB0F000, v5, v6, "Cannot harmonize image: %@", v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v10, -1, -1);
    MEMORY[0x1DF0E6558](v9, -1, -1);

  }
  else
  {

  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in Canvas.harmonizeCanvasElement<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  v7 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v6, a2, v7);
  v8 = type metadata accessor for CRAssetOrData();
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6, 0, 1, v8);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  return Capsule.Ref<>.subscript.setter();
}

BOOL static Canvas.CanvasHarmonizationError.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void Canvas.CanvasHarmonizationError.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int Canvas.CanvasHarmonizationError.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Canvas<A>.CanvasHarmonizationError(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Canvas.CanvasHarmonizationError.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Canvas<A>.CanvasHarmonizationError()
{
  char *v0;

  return Canvas.CanvasHarmonizationError.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance Canvas<A>.CanvasHarmonizationError(uint64_t a1)
{
  char *v1;

  Canvas.CanvasHarmonizationError.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Canvas<A>.CanvasHarmonizationError()
{
  char *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  Canvas.CanvasHarmonizationError.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t closure #1 in Canvas.harmonizeImage(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;

  v8[6] = a7;
  v8[7] = a8;
  v8[4] = a5;
  v8[5] = a6;
  v8[2] = a1;
  v8[3] = a4;
  v9 = type metadata accessor for UTType();
  v8[8] = v9;
  v8[9] = *(_QWORD *)(v9 - 8);
  v8[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in Canvas.harmonizeImage(_:)()
{
  _QWORD *v0;
  CFMutableDataRef Mutable;
  __CFData *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __CFString *v9;
  CGImageDestinationRef v10;
  id v11;
  id v12;
  id v13;
  CGImage *v14;
  CGImage *v15;
  __CFData *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t (*v22)(void);
  uint64_t *v23;
  uint64_t v25;
  _BYTE *v26;

  Mutable = CFDataCreateMutable(0, 0);
  if (!Mutable)
    goto LABEL_7;
  v2 = Mutable;
  v4 = v0[9];
  v3 = v0[10];
  v5 = v0[8];
  static UTType.png.getter();
  v6 = UTType.identifier.getter();
  v8 = v7;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v9 = (__CFString *)MEMORY[0x1DF0E41AC](v6, v8);
  swift_bridgeObjectRelease();
  v10 = CGImageDestinationCreateWithData(v2, v9, 1uLL, 0);

  if (!v10)
  {

LABEL_7:
    v20 = type metadata accessor for Canvas.CanvasHarmonizationError(0, v0[5], v0[6], v0[7]);
    MEMORY[0x1DF0E6450](&protocol conformance descriptor for Canvas<A>.CanvasHarmonizationError, v20);
    swift_allocError();
    *v21 = 1;
    swift_willThrow();
    goto LABEL_8;
  }
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D3A8D8]), sel_initWithForeground_background_, v0[3], v0[4]);
  v12 = objc_msgSend((id)objc_opt_self(), sel_getDefault);
  objc_msgSend(v12, sel_load);
  v13 = objc_msgSend(v12, sel_harmonize_, v11);
  v14 = (CGImage *)objc_msgSend(v13, sel_harmonized);
  if (!v14)
  {

    v17 = 0;
    v19 = 0xF000000000000000;
    goto LABEL_10;
  }
  v15 = v14;
  CGImageDestinationAddImage(v10, v14, 0);
  if (CGImageDestinationFinalize(v10))
  {
    v16 = v2;
    v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v19 = v18;

LABEL_10:
    v23 = (uint64_t *)v0[2];
    *v23 = v17;
    v23[1] = v19;
    swift_task_dealloc();
    v22 = (uint64_t (*)(void))v0[1];
    return v22();
  }
  v25 = type metadata accessor for Canvas.CanvasHarmonizationError(0, v0[5], v0[6], v0[7]);
  MEMORY[0x1DF0E6450](&protocol conformance descriptor for Canvas<A>.CanvasHarmonizationError, v25);
  swift_allocError();
  *v26 = 1;
  swift_willThrow();

LABEL_8:
  swift_task_dealloc();
  v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

void @objc Canvas.init(frame:)()
{
  specialized Canvas.init(frame:)();
}

uint64_t Canvas.__ivar_destroyer()
{
  uint64_t v0;

  swift_release();
  swift_release();

  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

id Canvas.__deallocating_deinit()
{
  _QWORD *v0;
  objc_class *v1;
  objc_super v3;

  v1 = (objc_class *)type metadata accessor for Canvas(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x7B8), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x7C0), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x7C8));
  v3.receiver = v0;
  v3.super_class = v1;
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t @objc Canvas.__ivar_destroyer(uint64_t a1)
{
  swift_release();
  swift_release();

  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

id CanvasPointerDelegate.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasPointerDelegate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

{
  if ((a2 & 1) != 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(_QWORD *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v5)(char *);
  char v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD v14[2];

  v5 = (uint64_t (*)(char *))isStackAllocationSafe;
  v14[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_BYTE *)(a3 + 32);
  v7 = (unint64_t)((1 << v6) + 63) >> 6;
  v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe, a2);
    bzero((char *)v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    specialized closure #1 in _NativeSet.filter(_:)((_QWORD *)((char *)v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a3, v5);
    v10 = v9;
    swift_release();
    if (v3)
      swift_willThrow();
  }
  else
  {
    v11 = (void *)swift_slowAlloc();
    bzero(v11, v8);
    specialized closure #1 in _NativeSet.filter(_:)((unint64_t *)v11, v7, a3, v5);
    v10 = v12;
    swift_release();
    MEMORY[0x1DF0E6558](v11, -1, -1);
  }
  return v10;
}

void specialized closure #1 in _NativeSet.filter(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t (*v31)(char *);
  uint64_t v32;

  v31 = a4;
  v26 = a2;
  v27 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v7 = *(_QWORD *)(v6 - 8);
  v9.n128_f64[0] = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = 0;
  v32 = a3;
  v13 = *(_QWORD *)(a3 + 56);
  v28 = 0;
  v29 = a3 + 56;
  v14 = 1 << *(_BYTE *)(a3 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v30 = (unint64_t)(v14 + 63) >> 6;
  while (v16)
  {
    v17 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    v18 = v17 | (v12 << 6);
LABEL_17:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16))(v11, *(_QWORD *)(v32 + 48) + *(_QWORD *)(v7 + 72) * v18, v6, v9);
    v22 = v31(v11);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    if (v4)
      return;
    if ((v22 & 1) != 0)
    {
      *(unint64_t *)((char *)v27 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = __OFADD__(v28++, 1);
      if (v19)
        goto LABEL_30;
    }
  }
  v19 = __OFADD__(v12++, 1);
  if (v19)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v12 >= v30)
    goto LABEL_27;
  v20 = *(_QWORD *)(v29 + 8 * v12);
  if (v20)
  {
LABEL_16:
    v16 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v12 << 6);
    goto LABEL_17;
  }
  v21 = v12 + 1;
  if (v12 + 1 >= v30)
    goto LABEL_27;
  v20 = *(_QWORD *)(v29 + 8 * v21);
  if (v20)
    goto LABEL_15;
  v21 = v12 + 2;
  if (v12 + 2 >= v30)
    goto LABEL_27;
  v20 = *(_QWORD *)(v29 + 8 * v21);
  if (v20)
    goto LABEL_15;
  v21 = v12 + 3;
  if (v12 + 3 >= v30)
  {
LABEL_27:
    v23 = v26;
    v24 = v28;
    v25 = v32;
    swift_retain();
    specialized _NativeSet.extractSubset(using:count:)(v27, v23, v24, v25, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, &demangling cache variable for type metadata for _SetStorage<WeakTagged_9<TaggedCanvasElement>>, &lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, MEMORY[0x1E0D11EE0]);
    return;
  }
  v20 = *(_QWORD *)(v29 + 8 * v21);
  if (v20)
  {
LABEL_15:
    v12 = v21;
    goto LABEL_16;
  }
  while (1)
  {
    v12 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v12 >= v30)
      goto LABEL_27;
    v20 = *(_QWORD *)(v29 + 8 * v12);
    ++v21;
    if (v20)
      goto LABEL_16;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized _NativeSet.extractSubset(using:count:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, &demangling cache variable for type metadata for _SetStorage<WeakTagged_9<TaggedCanvasElement>>, &lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, MEMORY[0x1E0D11EE0]);
}

{
  return specialized _NativeSet.extractSubset(using:count:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, (uint64_t *)&demangling cache variable for type metadata for _SetStorage<WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>>, (unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, MEMORY[0x1E0D12B78]);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t *v28;

  v4 = a4;
  if (!a3)
  {
    v9 = MEMORY[0x1E0DEE9E8];
LABEL_36:
    swift_release();
    return v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ResizeHandleType>);
  result = static _SetStorage.allocate(capacity:)();
  v9 = result;
  v28 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_36;
    v16 = v28[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_36;
      v16 = v28[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_36;
        v16 = v28[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 48) + v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    result = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(v9 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_BYTE *)(*(_QWORD *)(v9 + 48) + v22) = v18;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_36;
  v16 = v28[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_36;
    v16 = v28[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t *a6, unint64_t *a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  unint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t *v42;
  uint64_t v43;
  uint64_t v44;

  v42 = a7;
  v43 = a8;
  v41 = a5;
  v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
  v44 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return MEMORY[0x1E0DEE9E8];
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  __swift_instantiateConcreteTypeFromMangledName(a6);
  result = static _SetStorage.allocate(capacity:)();
  v17 = result;
  v39 = a1;
  v40 = a2;
  if (a2 < 1)
    v19 = 0;
  else
    v19 = *a1;
  v20 = 0;
  v21 = result + 56;
  while (1)
  {
    if (v19)
    {
      v22 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v23 = v22 | (v20 << 6);
    }
    else
    {
      v24 = v20 + 1;
      if (__OFADD__(v20, 1))
        goto LABEL_40;
      if (v24 >= v40)
      {
LABEL_37:
        swift_release();
        return v17;
      }
      v25 = v39[v24];
      ++v20;
      if (!v25)
      {
        v20 = v24 + 1;
        if (v24 + 1 >= v40)
          goto LABEL_37;
        v25 = v39[v20];
        if (!v25)
        {
          v20 = v24 + 2;
          if (v24 + 2 >= v40)
            goto LABEL_37;
          v25 = v39[v20];
          if (!v25)
          {
            v26 = v24 + 3;
            if (v26 >= v40)
              goto LABEL_37;
            v25 = v39[v26];
            if (!v25)
            {
              while (1)
              {
                v20 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_41;
                if (v20 >= v40)
                  goto LABEL_37;
                v25 = v39[v20];
                ++v26;
                if (v25)
                  goto LABEL_24;
              }
            }
            v20 = v26;
          }
        }
      }
LABEL_24:
      v19 = (v25 - 1) & v25;
      v23 = __clz(__rbit64(v25)) + (v20 << 6);
    }
    v27 = a4;
    v28 = *(_QWORD *)(a4 + 48);
    v29 = *(_QWORD *)(v44 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v44 + 16))(v16, v28 + v29 * v23, v13);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(v42, v41, v43);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v30 = -1 << *(_BYTE *)(v17 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v21 + 8 * (v31 >> 6))) != 0)
    {
      v33 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v21 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v36 = v32 == v35;
        if (v32 == v35)
          v32 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v21 + 8 * v32);
      }
      while (v37 == -1);
      v33 = __clz(__rbit64(~v37)) + (v32 << 6);
    }
    *(_QWORD *)(v21 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v44 + 32))(*(_QWORD *)(v17 + 48) + v33 * v29, v16, v13);
    ++*(_QWORD *)(v17 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v27;
    if (!a3)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v4 = *a1;
  v3 = a1[1];
  outlined init with copy of Any((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  Swift::Int v16;
  void *v17;
  id v18;
  id v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  Swift::Int v32;
  BOOL v33;
  _BOOL4 v34;
  Swift::Int v35;
  void *v36;
  id v37;
  id v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  BOOL v51;
  int v52;
  uint64_t *v53;
  Swift::Int v54;
  Swift::Int v55;
  uint64_t *v56;
  uint64_t v57;
  Swift::Int v58;
  uint64_t v59;
  Swift::Int v60;
  void *v61;
  Swift::Int v62;
  uint64_t v63;
  void *v64;
  id v65;
  id v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  void *v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  char v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  unint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  unint64_t v137;
  char *v138;
  uint64_t *v139;
  uint64_t v140;
  Swift::Int v141;
  Swift::Int v142;
  Swift::Int v143;
  void **v144;
  char v145;
  uint64_t v146;
  uint64_t v147;

  v3 = v2;
  v6 = a1[1];
  v7 = _minimumMergeRunLength(_:)(v6);
  if (v7 < v6)
  {
    if (v6 >= 0)
      v8 = v6;
    else
      v8 = v6 + 1;
    if (v6 >= -1)
    {
      v9 = v7;
      v145 = a2;
      v139 = a1;
      if (v6 < 2)
      {
        v12 = (char *)MEMORY[0x1E0DEE9D8];
        v147 = MEMORY[0x1E0DEE9D8];
        v144 = (void **)((MEMORY[0x1E0DEE9D8] & 0xFFFFFFFFFFFFFF8) + 32);
        if (v6 != 1)
        {
          v15 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
          if (v15 < 2)
            goto LABEL_130;
          goto LABEL_118;
        }
      }
      else
      {
        v10 = v8 >> 1;
        type metadata accessor for AnyCanvasElementView();
        v11 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) = v10;
        v144 = (void **)((v11 & 0xFFFFFFFFFFFFFF8) + 32);
        v147 = v11;
      }
      v141 = v9;
      v13 = 0;
      v14 = *a1;
      v140 = *a1 - 8;
      v12 = (char *)MEMORY[0x1E0DEE9D8];
      v143 = v6;
      v146 = *a1;
      while (1)
      {
        v16 = v13++;
        if (v13 < v6)
        {
          v17 = *(void **)(v14 + 8 * v16);
          v18 = *(id *)(v14 + 8 * v13);
          v19 = v17;
          objc_msgSend(v18, sel_center);
          v21 = v20;
          objc_msgSend(v19, sel_center);
          v23 = v22;
          objc_msgSend(v18, sel_center);
          v25 = v24;
          v27 = v26;
          objc_msgSend(v19, sel_center);
          v29 = v28;
          v31 = v30;

          if (v21 == v23)
          {
            v32 = v16 + 2;
            if ((a2 & 1) != 0)
              v33 = v25 < v29;
            else
              v33 = v29 < v25;
            v34 = v33;
          }
          else
          {
            v34 = v27 < v31;
            v32 = v16 + 2;
          }
          v14 = v146;
          if (v32 < v143)
          {
            v35 = v32;
            while (1)
            {
              v32 = v35;
              v36 = *(void **)(v14 + 8 * v13);
              v37 = *(id *)(v14 + 8 * v35);
              v38 = v36;
              objc_msgSend(v37, sel_center);
              v40 = v39;
              objc_msgSend(v38, sel_center);
              v42 = v41;
              objc_msgSend(v37, sel_center);
              v44 = v43;
              v46 = v45;
              objc_msgSend(v38, sel_center);
              v48 = v47;
              v50 = v49;

              if (v40 != v42)
                break;
              if ((a2 & 1) != 0)
              {
                v51 = v44 < v48;
                goto LABEL_32;
              }
              v14 = v146;
              if (v34 == v48 >= v44)
                goto LABEL_36;
LABEL_27:
              v35 = v32 + 1;
              v13 = v32;
              if (v32 + 1 >= v143)
              {
                ++v32;
                if (!v34)
                  goto LABEL_45;
                goto LABEL_37;
              }
            }
            v51 = v46 < v50;
LABEL_32:
            v52 = !v51;
            v14 = v146;
            if (((v34 ^ v52) & 1) == 0)
              goto LABEL_36;
            goto LABEL_27;
          }
LABEL_36:
          if (!v34)
            goto LABEL_45;
LABEL_37:
          if (v32 < v16)
            goto LABEL_154;
          if (v16 < v32)
          {
            v53 = (uint64_t *)(v140 + 8 * v32);
            v54 = v32;
            v55 = v16;
            v56 = (uint64_t *)(v14 + 8 * v16);
            do
            {
              if (v55 != --v54)
              {
                if (!v14)
                  goto LABEL_159;
                v57 = *v56;
                *v56 = *v53;
                *v53 = v57;
              }
              ++v55;
              --v53;
              ++v56;
            }
            while (v55 < v54);
          }
LABEL_45:
          v13 = v32;
          v6 = v143;
        }
        if (v13 < v6)
        {
          if (__OFSUB__(v13, v16))
            goto LABEL_152;
          if (v13 - v16 < v141)
          {
            if (__OFADD__(v16, v141))
              goto LABEL_155;
            if (v16 + v141 >= v6)
              v58 = v6;
            else
              v58 = v16 + v141;
            if (v58 < v16)
            {
LABEL_156:
              __break(1u);
LABEL_157:
              __break(1u);
LABEL_158:
              __break(1u);
LABEL_159:
              __break(1u);
LABEL_160:
              __break(1u);
              break;
            }
            if (v13 != v58)
            {
              v142 = v16;
              v138 = v12;
              v59 = v140 + 8 * v13;
              do
              {
                v60 = v58;
                v61 = *(void **)(v14 + 8 * v13);
                v62 = v142;
                v63 = v59;
                do
                {
                  v64 = *(void **)v63;
                  v65 = v61;
                  v66 = v64;
                  objc_msgSend(v65, sel_center);
                  v68 = v67;
                  objc_msgSend(v66, sel_center);
                  v70 = v69;
                  objc_msgSend(v65, sel_center);
                  v72 = v71;
                  v74 = v73;
                  objc_msgSend(v66, sel_center);
                  v76 = v75;
                  v78 = v77;

                  if (v68 == v70)
                  {
                    if ((a2 & 1) != 0)
                    {
                      v14 = v146;
                      if (v72 >= v76)
                        break;
                    }
                    else
                    {
                      v14 = v146;
                      if (v76 >= v72)
                        break;
                    }
                  }
                  else
                  {
                    v14 = v146;
                    if (v74 >= v78)
                      break;
                  }
                  if (!v14)
                    goto LABEL_157;
                  v79 = *(void **)v63;
                  v61 = *(void **)(v63 + 8);
                  *(_QWORD *)v63 = v61;
                  *(_QWORD *)(v63 + 8) = v79;
                  v63 -= 8;
                  ++v62;
                }
                while (v13 != v62);
                ++v13;
                v59 += 8;
                v58 = v60;
              }
              while (v13 != v60);
              v13 = v60;
              v12 = v138;
              v16 = v142;
            }
          }
        }
        if (v13 < v16)
          goto LABEL_147;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
        v81 = *((_QWORD *)v12 + 2);
        v80 = *((_QWORD *)v12 + 3);
        v15 = v81 + 1;
        v14 = v146;
        if (v81 >= v80 >> 1)
        {
          v130 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v80 > 1), v81 + 1, 1, v12);
          v14 = v146;
          v12 = v130;
        }
        *((_QWORD *)v12 + 2) = v15;
        v82 = v12 + 32;
        v83 = &v12[16 * v81 + 32];
        *(_QWORD *)v83 = v16;
        *((_QWORD *)v83 + 1) = v13;
        if (v81)
        {
          while (1)
          {
            v84 = v15 - 1;
            if (v15 >= 4)
            {
              v89 = &v82[16 * v15];
              v90 = *((_QWORD *)v89 - 8);
              v91 = *((_QWORD *)v89 - 7);
              v95 = __OFSUB__(v91, v90);
              v92 = v91 - v90;
              if (v95)
                goto LABEL_136;
              v94 = *((_QWORD *)v89 - 6);
              v93 = *((_QWORD *)v89 - 5);
              v95 = __OFSUB__(v93, v94);
              v87 = v93 - v94;
              v88 = v95;
              if (v95)
                goto LABEL_137;
              v96 = v15 - 2;
              v97 = &v82[16 * v15 - 32];
              v99 = *(_QWORD *)v97;
              v98 = *((_QWORD *)v97 + 1);
              v95 = __OFSUB__(v98, v99);
              v100 = v98 - v99;
              if (v95)
                goto LABEL_139;
              v95 = __OFADD__(v87, v100);
              v101 = v87 + v100;
              if (v95)
                goto LABEL_142;
              if (v101 >= v92)
              {
                v119 = &v82[16 * v84];
                v121 = *(_QWORD *)v119;
                v120 = *((_QWORD *)v119 + 1);
                v95 = __OFSUB__(v120, v121);
                v122 = v120 - v121;
                if (v95)
                  goto LABEL_146;
                v112 = v87 < v122;
                goto LABEL_106;
              }
            }
            else
            {
              if (v15 != 3)
              {
                v113 = *((_QWORD *)v12 + 4);
                v114 = *((_QWORD *)v12 + 5);
                v95 = __OFSUB__(v114, v113);
                v106 = v114 - v113;
                v107 = v95;
                goto LABEL_100;
              }
              v86 = *((_QWORD *)v12 + 4);
              v85 = *((_QWORD *)v12 + 5);
              v95 = __OFSUB__(v85, v86);
              v87 = v85 - v86;
              v88 = v95;
            }
            if ((v88 & 1) != 0)
              goto LABEL_138;
            v96 = v15 - 2;
            v102 = &v82[16 * v15 - 32];
            v104 = *(_QWORD *)v102;
            v103 = *((_QWORD *)v102 + 1);
            v105 = __OFSUB__(v103, v104);
            v106 = v103 - v104;
            v107 = v105;
            if (v105)
              goto LABEL_141;
            v108 = &v82[16 * v84];
            v110 = *(_QWORD *)v108;
            v109 = *((_QWORD *)v108 + 1);
            v95 = __OFSUB__(v109, v110);
            v111 = v109 - v110;
            if (v95)
              goto LABEL_144;
            if (__OFADD__(v106, v111))
              goto LABEL_145;
            if (v106 + v111 >= v87)
            {
              v112 = v87 < v111;
LABEL_106:
              if (v112)
                v84 = v96;
              goto LABEL_108;
            }
LABEL_100:
            if ((v107 & 1) != 0)
              goto LABEL_140;
            v115 = &v82[16 * v84];
            v117 = *(_QWORD *)v115;
            v116 = *((_QWORD *)v115 + 1);
            v95 = __OFSUB__(v116, v117);
            v118 = v116 - v117;
            if (v95)
              goto LABEL_143;
            if (v118 < v106)
              goto LABEL_14;
LABEL_108:
            v123 = v12;
            v124 = v84 - 1;
            if (v84 - 1 >= v15)
            {
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
LABEL_155:
              __break(1u);
              goto LABEL_156;
            }
            if (!v14)
              goto LABEL_158;
            v125 = &v82[16 * v124];
            v126 = *(_QWORD *)v125;
            v127 = &v82[16 * v84];
            v128 = *((_QWORD *)v127 + 1);
            specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v14 + 8 * *(_QWORD *)v125), (id *)(v14 + 8 * *(_QWORD *)v127), v14 + 8 * v128, v144, v145 & 1);
            if (v2)
              goto LABEL_130;
            if (v128 < v126)
              goto LABEL_133;
            if (v84 > *((_QWORD *)v123 + 2))
              goto LABEL_134;
            *(_QWORD *)v125 = v126;
            *(_QWORD *)&v82[16 * v124 + 8] = v128;
            v129 = *((_QWORD *)v123 + 2);
            if (v84 >= v129)
              goto LABEL_135;
            v12 = v123;
            v15 = v129 - 1;
            memmove(&v82[16 * v84], v127 + 16, 16 * (v129 - 1 - v84));
            *((_QWORD *)v123 + 2) = v129 - 1;
            a2 = v145;
            v14 = v146;
            if (v129 <= 2)
              goto LABEL_14;
          }
        }
        v15 = 1;
LABEL_14:
        v6 = v143;
        if (v13 >= v143)
        {
          v3 = v2;
          if (v15 < 2)
          {
LABEL_130:
            swift_bridgeObjectRelease();
            *(_QWORD *)((v147 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
            specialized Array._endMutation()();
            swift_bridgeObjectRelease();
            return;
          }
LABEL_118:
          v131 = *v139;
          while (1)
          {
            v132 = v15 - 2;
            if (v15 < 2)
              goto LABEL_148;
            if (!v131)
              goto LABEL_160;
            v133 = v12;
            v134 = *(_QWORD *)&v12[16 * v132 + 32];
            v135 = *(_QWORD *)&v12[16 * v15 + 24];
            specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v131 + 8 * v134), (id *)(v131 + 8 * *(_QWORD *)&v12[16 * v15 + 16]), v131 + 8 * v135, v144, v145 & 1);
            if (v3)
              goto LABEL_130;
            if (v135 < v134)
              goto LABEL_149;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v133 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v12);
            if (v132 >= *((_QWORD *)v133 + 2))
              goto LABEL_150;
            v136 = &v133[16 * v132 + 32];
            *(_QWORD *)v136 = v134;
            *((_QWORD *)v136 + 1) = v135;
            v137 = *((_QWORD *)v133 + 2);
            if (v15 > v137)
              goto LABEL_151;
            memmove(&v133[16 * v15 + 16], &v133[16 * v15 + 32], 16 * (v137 - v15));
            *((_QWORD *)v133 + 2) = v137 - 1;
            v15 = v137 - 1;
            v12 = v133;
            if (v137 <= 2)
              goto LABEL_130;
          }
        }
      }
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if (v6 < 0)
    goto LABEL_153;
  if (v6)
    specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v6, 1, a1, a2 & 1);
}

{
  uint64_t v2;
  uint64_t v3;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  Swift::Int v16;
  void *v17;
  id v18;
  id v19;
  double MinY;
  double v21;
  uint64_t v22;
  double MinX;
  double v27;
  Swift::Int v28;
  BOOL v29;
  double v30;
  double v31;
  int v32;
  Swift::Int v33;
  void *v34;
  id v35;
  id v36;
  double v37;
  double v38;
  uint64_t v39;
  double v43;
  double v44;
  uint64_t *v45;
  Swift::Int v46;
  Swift::Int v47;
  uint64_t *v48;
  uint64_t v49;
  Swift::Int v50;
  uint64_t v51;
  Swift::Int v52;
  void *v53;
  Swift::Int v54;
  uint64_t v55;
  void *v56;
  id v57;
  id v58;
  double v59;
  double v60;
  uint64_t v61;
  double v65;
  double v66;
  void *v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  char v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  unint64_t v125;
  char *v126;
  uint64_t *v127;
  uint64_t v128;
  Swift::Int v129;
  _BOOL4 v130;
  Swift::Int v131;
  Swift::Int v132;
  void **v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  CGRect v137;
  CGRect v138;
  CGRect v139;
  CGRect v140;
  CGRect v141;
  CGRect v142;
  CGRect v143;
  CGRect v144;
  CGRect v145;
  CGRect v146;
  CGRect v147;
  CGRect v148;

  v3 = v2;
  v6 = a1[1];
  v7 = _minimumMergeRunLength(_:)(v6);
  if (v7 < v6)
  {
    if (v6 >= 0)
      v8 = v6;
    else
      v8 = v6 + 1;
    if (v6 >= -1)
    {
      v9 = v7;
      v134 = a2;
      v127 = a1;
      if (v6 < 2)
      {
        v12 = (char *)MEMORY[0x1E0DEE9D8];
        v136 = MEMORY[0x1E0DEE9D8];
        v133 = (void **)((MEMORY[0x1E0DEE9D8] & 0xFFFFFFFFFFFFFF8) + 32);
        if (v6 != 1)
        {
          v15 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
          if (v15 < 2)
            goto LABEL_127;
          goto LABEL_115;
        }
      }
      else
      {
        v10 = v8 >> 1;
        type metadata accessor for AnyCanvasElementView();
        v11 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) = v10;
        v133 = (void **)((v11 & 0xFFFFFFFFFFFFFF8) + 32);
        v136 = v11;
      }
      v129 = v9;
      v13 = 0;
      v14 = *a1;
      v128 = *a1 - 8;
      v12 = (char *)MEMORY[0x1E0DEE9D8];
      v132 = v6;
      v135 = *a1;
LABEL_15:
      v16 = v13++;
      if (v13 < v6)
      {
        v17 = *(void **)(v14 + 8 * v16);
        v18 = *(id *)(v14 + 8 * v13);
        v19 = v17;
        objc_msgSend(v18, sel_frame);
        MinY = CGRectGetMinY(v137);
        objc_msgSend(v19, sel_frame);
        v21 = CGRectGetMinY(v138);
        objc_msgSend(v18, sel_frame);
        if (MinY == v21)
        {
          MinX = CGRectGetMinX(*(CGRect *)&v22);
          objc_msgSend(v19, sel_frame);
          v27 = CGRectGetMinX(v139);

          v28 = v16 + 2;
          if ((a2 & 1) != 0)
            v29 = MinX < v27;
          else
            v29 = v27 < MinX;
          v32 = v29;
          v130 = v32;
        }
        else
        {
          v30 = CGRectGetMinY(*(CGRect *)&v22);
          objc_msgSend(v19, sel_frame);
          v31 = CGRectGetMinY(v140);

          v130 = v30 < v31;
          v28 = v16 + 2;
        }
        v14 = v135;
        if (v28 < v132)
        {
          v33 = v28;
          while (1)
          {
            v28 = v33;
            v34 = *(void **)(v14 + 8 * v13);
            v35 = *(id *)(v14 + 8 * v33);
            v36 = v34;
            objc_msgSend(v35, sel_frame);
            v37 = CGRectGetMinY(v141);
            objc_msgSend(v36, sel_frame);
            v38 = CGRectGetMinY(v142);
            objc_msgSend(v35, sel_frame);
            if (v37 != v38)
              break;
            v43 = CGRectGetMinX(*(CGRect *)&v39);
            objc_msgSend(v36, sel_frame);
            v44 = CGRectGetMinX(v143);

            if ((a2 & 1) != 0)
              goto LABEL_33;
            v14 = v135;
            if (v130 == v44 >= v43)
              goto LABEL_34;
LABEL_28:
            v33 = v28 + 1;
            v13 = v28;
            if (v28 + 1 >= v132)
            {
              ++v28;
              if (!v130)
                goto LABEL_43;
              goto LABEL_35;
            }
          }
          v43 = CGRectGetMinY(*(CGRect *)&v39);
          objc_msgSend(v36, sel_frame);
          v44 = CGRectGetMinY(v144);

LABEL_33:
          v14 = v135;
          if (((v130 ^ (v43 >= v44)) & 1) == 0)
            goto LABEL_34;
          goto LABEL_28;
        }
LABEL_34:
        if (!v130)
          goto LABEL_43;
LABEL_35:
        if (v28 < v16)
          goto LABEL_151;
        if (v16 < v28)
        {
          v45 = (uint64_t *)(v128 + 8 * v28);
          v46 = v28;
          v47 = v16;
          v48 = (uint64_t *)(v14 + 8 * v16);
          do
          {
            if (v47 != --v46)
            {
              if (!v14)
                goto LABEL_156;
              v49 = *v48;
              *v48 = *v45;
              *v45 = v49;
            }
            ++v47;
            --v45;
            ++v48;
          }
          while (v47 < v46);
        }
LABEL_43:
        v13 = v28;
        v6 = v132;
      }
      if (v13 >= v6)
        goto LABEL_66;
      if (__OFSUB__(v13, v16))
        goto LABEL_149;
      if (v13 - v16 >= v129)
        goto LABEL_66;
      if (__OFADD__(v16, v129))
        goto LABEL_152;
      if (v16 + v129 >= v6)
        v50 = v6;
      else
        v50 = v16 + v129;
      if (v50 >= v16)
      {
        if (v13 == v50)
          goto LABEL_66;
        v131 = v16;
        v126 = v12;
        v51 = v128 + 8 * v13;
LABEL_55:
        v52 = v50;
        v53 = *(void **)(v14 + 8 * v13);
        v54 = v131;
        v55 = v51;
        while (1)
        {
          v56 = *(void **)v55;
          v57 = v53;
          v58 = v56;
          objc_msgSend(v57, sel_frame);
          v59 = CGRectGetMinY(v145);
          objc_msgSend(v58, sel_frame);
          v60 = CGRectGetMinY(v146);
          objc_msgSend(v57, sel_frame);
          if (v59 != v60)
            break;
          v65 = CGRectGetMinX(*(CGRect *)&v61);
          objc_msgSend(v58, sel_frame);
          v66 = CGRectGetMinX(v147);

          if ((a2 & 1) != 0)
            goto LABEL_61;
          v14 = v135;
          if (v66 >= v65)
            goto LABEL_54;
LABEL_62:
          if (!v14)
            goto LABEL_154;
          v67 = *(void **)v55;
          v53 = *(void **)(v55 + 8);
          *(_QWORD *)v55 = v53;
          *(_QWORD *)(v55 + 8) = v67;
          v55 -= 8;
          if (v13 == ++v54)
          {
LABEL_54:
            ++v13;
            v51 += 8;
            v50 = v52;
            if (v13 != v52)
              goto LABEL_55;
            v13 = v52;
            v12 = v126;
            v16 = v131;
LABEL_66:
            if (v13 < v16)
              goto LABEL_144;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
            v69 = *((_QWORD *)v12 + 2);
            v68 = *((_QWORD *)v12 + 3);
            v15 = v69 + 1;
            v14 = v135;
            if (v69 >= v68 >> 1)
            {
              v118 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v68 > 1), v69 + 1, 1, v12);
              v14 = v135;
              v12 = v118;
            }
            *((_QWORD *)v12 + 2) = v15;
            v70 = v12 + 32;
            v71 = &v12[16 * v69 + 32];
            *(_QWORD *)v71 = v16;
            *((_QWORD *)v71 + 1) = v13;
            if (v69)
            {
              while (2)
              {
                v72 = v15 - 1;
                if (v15 >= 4)
                {
                  v77 = &v70[16 * v15];
                  v78 = *((_QWORD *)v77 - 8);
                  v79 = *((_QWORD *)v77 - 7);
                  v83 = __OFSUB__(v79, v78);
                  v80 = v79 - v78;
                  if (v83)
                    goto LABEL_133;
                  v82 = *((_QWORD *)v77 - 6);
                  v81 = *((_QWORD *)v77 - 5);
                  v83 = __OFSUB__(v81, v82);
                  v75 = v81 - v82;
                  v76 = v83;
                  if (v83)
                    goto LABEL_134;
                  v84 = v15 - 2;
                  v85 = &v70[16 * v15 - 32];
                  v87 = *(_QWORD *)v85;
                  v86 = *((_QWORD *)v85 + 1);
                  v83 = __OFSUB__(v86, v87);
                  v88 = v86 - v87;
                  if (v83)
                    goto LABEL_136;
                  v83 = __OFADD__(v75, v88);
                  v89 = v75 + v88;
                  if (v83)
                    goto LABEL_139;
                  if (v89 >= v80)
                  {
                    v107 = &v70[16 * v72];
                    v109 = *(_QWORD *)v107;
                    v108 = *((_QWORD *)v107 + 1);
                    v83 = __OFSUB__(v108, v109);
                    v110 = v108 - v109;
                    if (v83)
                      goto LABEL_143;
                    v100 = v75 < v110;
                  }
                  else
                  {
LABEL_85:
                    if ((v76 & 1) != 0)
                      goto LABEL_135;
                    v84 = v15 - 2;
                    v90 = &v70[16 * v15 - 32];
                    v92 = *(_QWORD *)v90;
                    v91 = *((_QWORD *)v90 + 1);
                    v93 = __OFSUB__(v91, v92);
                    v94 = v91 - v92;
                    v95 = v93;
                    if (v93)
                      goto LABEL_138;
                    v96 = &v70[16 * v72];
                    v98 = *(_QWORD *)v96;
                    v97 = *((_QWORD *)v96 + 1);
                    v83 = __OFSUB__(v97, v98);
                    v99 = v97 - v98;
                    if (v83)
                      goto LABEL_141;
                    if (__OFADD__(v94, v99))
                      goto LABEL_142;
                    if (v94 + v99 < v75)
                      goto LABEL_97;
                    v100 = v75 < v99;
                  }
                  if (v100)
                    v72 = v84;
                }
                else
                {
                  if (v15 == 3)
                  {
                    v74 = *((_QWORD *)v12 + 4);
                    v73 = *((_QWORD *)v12 + 5);
                    v83 = __OFSUB__(v73, v74);
                    v75 = v73 - v74;
                    v76 = v83;
                    goto LABEL_85;
                  }
                  v101 = *((_QWORD *)v12 + 4);
                  v102 = *((_QWORD *)v12 + 5);
                  v83 = __OFSUB__(v102, v101);
                  v94 = v102 - v101;
                  v95 = v83;
LABEL_97:
                  if ((v95 & 1) != 0)
                    goto LABEL_137;
                  v103 = &v70[16 * v72];
                  v105 = *(_QWORD *)v103;
                  v104 = *((_QWORD *)v103 + 1);
                  v83 = __OFSUB__(v104, v105);
                  v106 = v104 - v105;
                  if (v83)
                    goto LABEL_140;
                  if (v106 < v94)
                    goto LABEL_14;
                }
                v111 = v12;
                v112 = v72 - 1;
                if (v72 - 1 >= v15)
                {
                  __break(1u);
LABEL_130:
                  __break(1u);
LABEL_131:
                  __break(1u);
LABEL_132:
                  __break(1u);
LABEL_133:
                  __break(1u);
LABEL_134:
                  __break(1u);
LABEL_135:
                  __break(1u);
LABEL_136:
                  __break(1u);
LABEL_137:
                  __break(1u);
LABEL_138:
                  __break(1u);
LABEL_139:
                  __break(1u);
LABEL_140:
                  __break(1u);
LABEL_141:
                  __break(1u);
LABEL_142:
                  __break(1u);
LABEL_143:
                  __break(1u);
LABEL_144:
                  __break(1u);
LABEL_145:
                  __break(1u);
LABEL_146:
                  __break(1u);
LABEL_147:
                  __break(1u);
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
                  goto LABEL_153;
                }
                if (!v14)
                  goto LABEL_155;
                v113 = &v70[16 * v112];
                v114 = *(_QWORD *)v113;
                v115 = &v70[16 * v72];
                v116 = *((_QWORD *)v115 + 1);
                specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v14 + 8 * *(_QWORD *)v113), (id *)(v14 + 8 * *(_QWORD *)v115), v14 + 8 * v116, v133, v134 & 1);
                if (v2)
                  goto LABEL_127;
                if (v116 < v114)
                  goto LABEL_130;
                if (v72 > *((_QWORD *)v111 + 2))
                  goto LABEL_131;
                *(_QWORD *)v113 = v114;
                *(_QWORD *)&v70[16 * v112 + 8] = v116;
                v117 = *((_QWORD *)v111 + 2);
                if (v72 >= v117)
                  goto LABEL_132;
                v12 = v111;
                v15 = v117 - 1;
                memmove(&v70[16 * v72], v115 + 16, 16 * (v117 - 1 - v72));
                *((_QWORD *)v111 + 2) = v117 - 1;
                a2 = v134;
                v14 = v135;
                if (v117 <= 2)
                  goto LABEL_14;
                continue;
              }
            }
            v15 = 1;
LABEL_14:
            v6 = v132;
            if (v13 >= v132)
            {
              v3 = v2;
              if (v15 < 2)
              {
LABEL_127:
                swift_bridgeObjectRelease();
                *(_QWORD *)((v136 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
                specialized Array._endMutation()();
                swift_bridgeObjectRelease();
                return;
              }
LABEL_115:
              v119 = *v127;
              while (1)
              {
                v120 = v15 - 2;
                if (v15 < 2)
                  goto LABEL_145;
                if (!v119)
                  goto LABEL_157;
                v121 = v12;
                v122 = *(_QWORD *)&v12[16 * v120 + 32];
                v123 = *(_QWORD *)&v12[16 * v15 + 24];
                specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v119 + 8 * v122), (id *)(v119 + 8 * *(_QWORD *)&v12[16 * v15 + 16]), v119 + 8 * v123, v133, v134 & 1);
                if (v3)
                  goto LABEL_127;
                if (v123 < v122)
                  goto LABEL_146;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v121 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v12);
                if (v120 >= *((_QWORD *)v121 + 2))
                  goto LABEL_147;
                v124 = &v121[16 * v120 + 32];
                *(_QWORD *)v124 = v122;
                *((_QWORD *)v124 + 1) = v123;
                v125 = *((_QWORD *)v121 + 2);
                if (v15 > v125)
                  goto LABEL_148;
                memmove(&v121[16 * v15 + 16], &v121[16 * v15 + 32], 16 * (v125 - v15));
                *((_QWORD *)v121 + 2) = v125 - 1;
                v15 = v125 - 1;
                v12 = v121;
                if (v125 <= 2)
                  goto LABEL_127;
              }
            }
            goto LABEL_15;
          }
        }
        v65 = CGRectGetMinY(*(CGRect *)&v61);
        objc_msgSend(v58, sel_frame);
        v66 = CGRectGetMinY(v148);

LABEL_61:
        v14 = v135;
        if (v65 >= v66)
          goto LABEL_54;
        goto LABEL_62;
      }
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if (v6 < 0)
    goto LABEL_150;
  if (v6)
    specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v6, 1, a1, a2 & 1);
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  void *v27;

  if (a3 != a2)
  {
    v6 = a3;
    v7 = *a4;
    v8 = *a4 + 8 * a3 - 8;
LABEL_5:
    v9 = *(void **)(v7 + 8 * v6);
    v10 = a1;
    v11 = v8;
    while (1)
    {
      v12 = *(void **)v11;
      v13 = v9;
      v14 = v12;
      objc_msgSend(v13, sel_center);
      v16 = v15;
      objc_msgSend(v14, sel_center);
      v18 = v17;
      objc_msgSend(v13, sel_center);
      v20 = v19;
      v22 = v21;
      objc_msgSend(v14, sel_center);
      v24 = v23;
      v26 = v25;

      if (v16 == v18)
      {
        if ((a5 & 1) != 0)
        {
          if (v20 >= v24)
            goto LABEL_4;
        }
        else if (v24 >= v20)
        {
          goto LABEL_4;
        }
      }
      else if (v22 >= v26)
      {
        goto LABEL_4;
      }
      if (!v7)
        break;
      v27 = *(void **)v11;
      v9 = *(void **)(v11 + 8);
      *(_QWORD *)v11 = v9;
      *(_QWORD *)(v11 + 8) = v27;
      v11 -= 8;
      if (v6 == ++v10)
      {
LABEL_4:
        ++v6;
        v8 += 8;
        if (v6 == a2)
          return;
        goto LABEL_5;
      }
    }
    __break(1u);
  }
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  double MinY;
  double v16;
  uint64_t v17;
  double MinX;
  double v22;
  void *v23;
  CGRect v26;
  CGRect v27;
  CGRect v28;
  CGRect v29;

  if (a3 != a2)
  {
    v6 = a3;
    v7 = *a4;
    v8 = *a4 + 8 * a3 - 8;
LABEL_5:
    v9 = *(void **)(v7 + 8 * v6);
    v10 = a1;
    v11 = v8;
    while (1)
    {
      v12 = *(void **)v11;
      v13 = v9;
      v14 = v12;
      objc_msgSend(v13, sel_frame);
      MinY = CGRectGetMinY(v26);
      objc_msgSend(v14, sel_frame);
      v16 = CGRectGetMinY(v27);
      objc_msgSend(v13, sel_frame);
      if (MinY == v16)
      {
        MinX = CGRectGetMinX(*(CGRect *)&v17);
        objc_msgSend(v14, sel_frame);
        v22 = CGRectGetMinX(v28);

        if ((a5 & 1) == 0)
        {
          if (v22 >= MinX)
            goto LABEL_4;
          goto LABEL_12;
        }
      }
      else
      {
        MinX = CGRectGetMinY(*(CGRect *)&v17);
        objc_msgSend(v14, sel_frame);
        v22 = CGRectGetMinY(v29);

      }
      if (MinX >= v22)
        goto LABEL_4;
LABEL_12:
      if (!v7)
      {
        __break(1u);
        return;
      }
      v23 = *(void **)v11;
      v9 = *(void **)(v11 + 8);
      *(_QWORD *)v11 = v9;
      *(_QWORD *)(v11 + 8) = v23;
      v11 -= 8;
      if (v6 == ++v10)
      {
LABEL_4:
        ++v6;
        v8 += 8;
        if (v6 == a2)
          return;
        goto LABEL_5;
      }
    }
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(void **__src, id *a2, unint64_t a3, void **a4, char a5)
{
  id *v6;
  void **v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void **v15;
  void *v16;
  id v17;
  id v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  id *v31;
  id *v32;
  id *v33;
  id *v34;
  id *v35;
  void *v36;
  id v37;
  id v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  unint64_t v51;
  uint64_t result;
  void **v53;
  char *v56;
  void **v57;
  id *v58;

  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v58 = __src;
  v57 = a4;
  if (v10 >= v12 >> 3)
  {
    if (v11 < -7)
      goto LABEL_54;
    if (a4 != a2 || &a2[v13] <= a4)
      memmove(a4, a2, 8 * v13);
    v32 = &a4[v13];
    v56 = (char *)v32;
    v58 = v6;
    if (v7 >= v6 || v11 < 8)
    {
LABEL_53:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v58, &v57, &v56);
      return 1;
    }
    v33 = (id *)(a3 - 8);
    v34 = v6;
    v53 = v7;
    while (1)
    {
      v35 = v33 + 1;
      v36 = *--v34;
      v37 = *(v32 - 1);
      v38 = v36;
      objc_msgSend(v37, sel_center);
      v40 = v39;
      objc_msgSend(v38, sel_center);
      v42 = v41;
      objc_msgSend(v37, sel_center);
      v44 = v43;
      v46 = v45;
      objc_msgSend(v38, sel_center);
      v48 = v47;
      v50 = v49;

      if (v40 == v42)
      {
        if ((a5 & 1) != 0)
        {
          v51 = (unint64_t)v53;
          if (v44 >= v48)
            goto LABEL_47;
        }
        else
        {
          v51 = (unint64_t)v53;
          if (v48 >= v44)
          {
LABEL_47:
            v56 = (char *)(v32 - 1);
            if (v35 < v32 || v33 >= v32 || v35 != v32)
              *v33 = *(v32 - 1);
            v34 = v6;
            --v32;
            if ((unint64_t)v6 <= v51)
              goto LABEL_53;
            goto LABEL_52;
          }
        }
      }
      else
      {
        v51 = (unint64_t)v53;
        if (v46 >= v50)
          goto LABEL_47;
      }
      if (v35 != v6 || v33 >= v6)
        *v33 = *v34;
      v58 = v34;
      if ((unint64_t)v34 <= v51)
        goto LABEL_53;
LABEL_52:
      --v33;
      v6 = v34;
      if (v32 <= a4)
        goto LABEL_53;
    }
  }
  if (v8 >= -7)
  {
    if (a4 != __src || &__src[v10] <= a4)
      memmove(a4, __src, 8 * v10);
    v14 = &a4[v10];
    v56 = (char *)v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      v15 = a4;
      while (1)
      {
        v16 = *v15;
        v17 = *v6;
        v18 = v16;
        objc_msgSend(v17, sel_center);
        v20 = v19;
        objc_msgSend(v18, sel_center);
        v22 = v21;
        objc_msgSend(v17, sel_center);
        v24 = v23;
        v26 = v25;
        objc_msgSend(v18, sel_center);
        v28 = v27;
        v30 = v29;

        if (v20 == v22)
        {
          if ((a5 & 1) != 0)
          {
            if (v24 < v28)
              goto LABEL_18;
          }
          else if (v28 < v24)
          {
LABEL_18:
            v31 = v6 + 1;
            if (v7 < v6 || v7 >= v31 || v7 != v6)
              *v7 = *v6;
            goto LABEL_26;
          }
        }
        else if (v26 < v30)
        {
          goto LABEL_18;
        }
        if (v7 != v15)
          *v7 = *v15;
        v57 = ++v15;
        v31 = v6;
LABEL_26:
        ++v7;
        if (v15 < v14)
        {
          v6 = v31;
          if ((unint64_t)v31 < a3)
            continue;
        }
        v58 = v7;
        goto LABEL_53;
      }
    }
    goto LABEL_53;
  }
LABEL_54:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  id *v6;
  void **v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void **v15;
  void *v16;
  id v17;
  id v18;
  double v19;
  double v20;
  uint64_t v21;
  double v25;
  double v26;
  id *v27;
  id *v28;
  id *v29;
  id *v30;
  id *v31;
  void *v32;
  id v33;
  id v34;
  double MinY;
  double v36;
  uint64_t v37;
  double MinX;
  double v42;
  unint64_t v43;
  uint64_t result;
  void **v45;
  char *v48;
  void **v49;
  id *v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;

  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v50 = __src;
  v49 = a4;
  if (v10 >= v12 >> 3)
  {
    if (v11 < -7)
      goto LABEL_52;
    if (a4 != a2 || &a2[v13] <= a4)
      memmove(a4, a2, 8 * v13);
    v28 = &a4[v13];
    v48 = (char *)v28;
    v50 = v6;
    if (v7 >= v6 || v11 < 8)
    {
LABEL_51:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v50, &v49, &v48);
      return 1;
    }
    v29 = (id *)(a3 - 8);
    v30 = v6;
    v45 = v7;
    while (1)
    {
      v31 = v29 + 1;
      v32 = *--v30;
      v33 = *(v28 - 1);
      v34 = v32;
      objc_msgSend(v33, sel_frame);
      MinY = CGRectGetMinY(v55);
      objc_msgSend(v34, sel_frame);
      v36 = CGRectGetMinY(v56);
      objc_msgSend(v33, sel_frame);
      if (MinY == v36)
      {
        MinX = CGRectGetMinX(*(CGRect *)&v37);
        objc_msgSend(v34, sel_frame);
        v42 = CGRectGetMinX(v57);

        if ((a5 & 1) == 0)
        {
          v43 = (unint64_t)v45;
          if (v42 >= MinX)
            goto LABEL_38;
          goto LABEL_46;
        }
      }
      else
      {
        MinX = CGRectGetMinY(*(CGRect *)&v37);
        objc_msgSend(v34, sel_frame);
        v42 = CGRectGetMinY(v58);

      }
      v43 = (unint64_t)v45;
      if (MinX >= v42)
      {
LABEL_38:
        v48 = (char *)(v28 - 1);
        if (v31 < v28 || v29 >= v28 || v31 != v28)
          *v29 = *(v28 - 1);
        v30 = v6;
        --v28;
        if ((unint64_t)v6 <= v43)
          goto LABEL_51;
        goto LABEL_50;
      }
LABEL_46:
      if (v31 != v6 || v29 >= v6)
        *v29 = *v30;
      v50 = v30;
      if ((unint64_t)v30 <= v43)
        goto LABEL_51;
LABEL_50:
      --v29;
      v6 = v30;
      if (v28 <= a4)
        goto LABEL_51;
    }
  }
  if (v8 >= -7)
  {
    if (a4 != __src || &__src[v10] <= a4)
      memmove(a4, __src, 8 * v10);
    v14 = &a4[v10];
    v48 = (char *)v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      v15 = a4;
      while (1)
      {
        v16 = *v15;
        v17 = *v6;
        v18 = v16;
        objc_msgSend(v17, sel_frame);
        v19 = CGRectGetMinY(v51);
        objc_msgSend(v18, sel_frame);
        v20 = CGRectGetMinY(v52);
        objc_msgSend(v17, sel_frame);
        if (v19 == v20)
        {
          v25 = CGRectGetMinX(*(CGRect *)&v21);
          objc_msgSend(v18, sel_frame);
          v26 = CGRectGetMinX(v53);

          if ((a5 & 1) == 0)
          {
            if (v26 < v25)
              goto LABEL_21;
            goto LABEL_16;
          }
        }
        else
        {
          v25 = CGRectGetMinY(*(CGRect *)&v21);
          objc_msgSend(v18, sel_frame);
          v26 = CGRectGetMinY(v54);

        }
        if (v25 < v26)
        {
LABEL_21:
          v27 = v6 + 1;
          if (v7 < v6 || v7 >= v27 || v7 != v6)
            *v7 = *v6;
          goto LABEL_25;
        }
LABEL_16:
        if (v7 != v15)
          *v7 = *v15;
        v49 = ++v15;
        v27 = v6;
LABEL_25:
        ++v7;
        if (v15 < v14)
        {
          v6 = v27;
          if ((unint64_t)v27 < a3)
            continue;
        }
        v50 = v7;
        goto LABEL_51;
      }
    }
    goto LABEL_51;
  }
LABEL_52:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #3 in AnySubscriber.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, double);
  uint64_t v24;
  uint64_t v26;
  __int128 v27[2];
  uint64_t v28;
  _QWORD v29[4];

  v6 = type metadata accessor for Mirror.AncestorRepresentation();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = *(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16);
  v23((char *)v27 - v24, a1, a4, v21);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CustomReflectable);
  if ((swift_dynamicCast() & 1) != 0)
  {
    outlined init with take of FindResult(v27, (uint64_t)v29);
    __swift_project_boxed_opaque_existential_1(v29, v29[3]);
    dispatch thunk of CustomReflectable.customMirror.getter();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }
  else
  {
    v28 = 0;
    memset(v27, 0, sizeof(v27));
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for CustomReflectable?);
    ((void (*)(char *, uint64_t, uint64_t))v23)(v18, a1, a4);
    v26 = type metadata accessor for Mirror.DisplayStyle();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v14, 1, 1, v26);
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, *MEMORY[0x1E0DEDFE8], v6);
    return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  }
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v3)();
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x1DF0E4D64](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x1DF0E4D64](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return destroy for ReflowSpacingAdjustment;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x1DF0E4D64](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_unknownObjectRetain();
LABEL_5:
    *v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void Array.subscript.readspecialized (id *a1)
{

}

uint64_t Array.subscript.readspecialized ()
{
  return swift_unknownObjectRelease();
}

uint64_t specialized Canvas.paperView.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + direct field offset for Canvas.paperView);
}

uint64_t partial apply for closure #1 in Canvas.editingContainerElementId.setter()
{
  return static CRKeyPath.== infix(_:_:)() & 1;
}

uint64_t sub_1DDEB0DCC()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  outlined consume of MagicGenerativePlaygroundContext(*(void **)(v0 + 40), *(id *)(v0 + 48), *(_BYTE *)(v0 + 56));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Canvas.initiateMagicGenerativePlayground(context:in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  char v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(double *)(v1 + 64);
  v10 = *(double *)(v1 + 72);
  v11 = *(double *)(v1 + 80);
  v12 = *(double *)(v1 + 88);
  v13 = *(_BYTE *)(v1 + 56);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in Canvas.initiateMagicGenerativePlayground(context:in:)(a1, v9, v10, v11, v12, v4, v5, v6, v7, v8, v13);
}

uint64_t specialized Canvas.xpcMulticast.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + direct field offset for Canvas.xpcMulticast;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

void specialized Canvas.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:)(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4, int a5)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v24 = a4;
  v25 = a5;
  v23[1] = a1;
  v7 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v5);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v8, v9);
  v23[0] = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  MEMORY[0x1E0C80A78](v11, v12);
  *(_QWORD *)((char *)v5 + direct field offset for Canvas.multipeerConnection) = 0;
  *(_QWORD *)((char *)v5 + direct field offset for Canvas.multipeerCanvasStateConnection) = 0;
  *(_QWORD *)((char *)v5 + direct field offset for Canvas.removeOldEraserStrokesTimer) = 0;
  v13 = (_QWORD *)((char *)v5 + direct field offset for Canvas.liveStreamMessenger);
  *v13 = 0;
  v13[1] = 0;
  *(_QWORD *)((char *)v5 + direct field offset for Canvas.childViewControllerCancellable) = 0;
  *(_QWORD *)((char *)v5 + direct field offset for Canvas.xpcMulticast) = 0;
  v26 = *a3;
  v14 = (_QWORD *)((char *)v5 + direct field offset for Canvas._editingView);
  *v14 = 0;
  v14[1] = 0;
  *(_QWORD *)((char *)v5 + direct field offset for Canvas._canvasElementController) = 0;
  v15 = direct field offset for Canvas.delayedPreviewProviders;
  v16 = v5;
  v17 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)((char *)v5 + v15) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v18 = direct field offset for Canvas.dropCompletions;
  *(_QWORD *)((char *)v16 + v18) = specialized Dictionary.init(dictionaryLiteral:)(v17);
  *((_BYTE *)v16 + direct field offset for Canvas.dropSessionType) = 3;
  *(_QWORD *)((char *)v16 + direct field offset for Canvas.scribbleDelegate) = 0;
  *(_QWORD *)((char *)v16 + direct field offset for Canvas.scribbleInteraction) = 0;
  *(_QWORD *)((char *)v16 + direct field offset for Canvas.indirectScribbleInteraction) = 0;
  *(_QWORD *)((char *)v16 + direct field offset for Canvas.pointerDelegate) = 0;
  *((_BYTE *)v16 + direct field offset for Canvas.dropInteractionSessionIsActive) = 0;
  *(_QWORD *)((char *)v16 + direct field offset for Canvas.dropInteraction) = 0;
  *(_QWORD *)((char *)v16 + direct field offset for Canvas.dropDelegate) = 0;
  *(_QWORD *)((char *)v16 + direct field offset for Canvas.editMenuInteraction) = 0;
  *(_QWORD *)((char *)v16 + direct field offset for Canvas.editMenuInteractionDelegate) = 0;
  v19 = (char *)v16 + direct field offset for Canvas.visibleBoundsOverride;
  *(_OWORD *)v19 = 0u;
  *((_OWORD *)v19 + 1) = 0u;
  v19[32] = 1;
  v20 = v7[247];
  v21 = v7[248];
  v22 = v7[249];
  v27 = v20;
  v28 = v20;
  v29 = v21;
  v30 = v22;
  v31 = v21;
  type metadata accessor for Canvas.PaperViewCanvasSubscription();
}

void sub_1DDEB1140()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  char *v22;
  uint64_t v23;
  void *v24;
  char *v25;
  id v26;
  __objc2_prot_list **p_base_prots;
  char *v28;
  id v29;
  void *v30;
  id v31;
  objc_class *ObjCClassFromMetadata;
  id v33;
  id v34;
  char *v35;
  id v36;
  void *v37;
  uint64_t v38;
  char *v39;
  id v40;
  uint64_t v41;
  void *v42;
  void *v43;
  objc_class *v44;
  id v45;
  id v46;
  void *v47;
  void *v48;
  id v49;
  uint64_t v50;
  void *v51;
  id v52;
  id v53;
  uint64_t v54;
  void *v55;
  id v56;
  char *v57;
  id v58;
  void *v59;
  id v60;
  id v61;
  void *v62;
  id v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  *(_QWORD *)&v9[v1] = Array.init()();
  v9[direct field offset for Canvas.isInUndoableGroup] = 0;
  v9[direct field offset for Canvas.isUndoableGroupNewChange] = 0;
  *(_QWORD *)&v9[direct field offset for Canvas.eraserCheckingIndex] = 0;
  v15 = direct field offset for Canvas.dropTargets;
  *(_QWORD *)&v9[v15] = specialized Dictionary.init(dictionaryLiteral:)(v7);
  v16 = direct field offset for Canvas.stickerDropPreviewInfoMap;
  *(_QWORD *)&v9[v16] = specialized Dictionary.init(dictionaryLiteral:)(v7);
  v17 = *(_QWORD *)(v3 + 16);
  v18 = type metadata accessor for Capsule();
  Capsule<>.sharedCanvasElement.getter(v18, *(_QWORD *)(v5 + 8), v0);
  SharedTagged_9<>.layout()((uint64_t *)(v10 - 152));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0, v6);
  v19 = *(_QWORD *)(v10 - 128);
  v20 = *(_QWORD *)(v10 - 120);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v10 - 152), v19);
  if (!(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 8))(v8, 0, 0, v2, v17, v19, v20))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  type metadata accessor for ContainerCanvasElementView(0, v2, v3, v5);
  *(_QWORD *)&v9[direct field offset for Canvas.paperView] = swift_dynamicCastClassUnconditional();

  __swift_destroy_boxed_opaque_existential_1(v10 - 152);
  *(_BYTE *)(v10 - 152) = *(_DWORD *)(v10 - 156);
  v21 = *(id *)(v10 - 184);
  v22 = (char *)specialized AnyCanvas.init(context:frame:editingMode:transparentBackground:)(v21, (unsigned __int8 *)(v10 - 152), *(_DWORD *)(v10 - 168) & 1, v14, v13, v12, v11);
  *(_QWORD *)(v10 - 184) = v21;

  v23 = direct field offset for Canvas.paperView;
  v24 = *(void **)&v22[direct field offset for Canvas.paperView];
  v25 = v22;
  v26 = v24;
  specialized ContainerCanvasElementView.canvas.setter();

  objc_msgSend(v25, sel_addSubview_, *(_QWORD *)&v22[v23]);
  p_base_prots = (__objc2_prot_list **)(&MiniMenuController + 40);
  *(_QWORD *)(v10 - 168) = v5;
  if ((*(_DWORD *)(v10 - 172) & 1) != 0)
  {
    type metadata accessor for CanvasDropDelegate(0, v2, v3, v5);
    v28 = v25;
    v29 = specialized CanvasDropDelegate.__allocating_init(canvas:)();

    v30 = *(void **)&v28[direct field offset for Canvas.dropDelegate];
    *(_QWORD *)&v28[direct field offset for Canvas.dropDelegate] = v29;
    v31 = v29;

    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDropInteraction);
    ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
    v33 = v31;
    v34 = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_initWithDelegate_, v33);

    if (((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v28) + 0xAF8))() & 1) != 0)
    {
      v35 = v28;
      v36 = v34;
      objc_msgSend(v35, sel_addInteraction_, v36);

    }
    v37 = *(void **)&v28[direct field offset for Canvas.dropInteraction];
    *(_QWORD *)&v28[direct field offset for Canvas.dropInteraction] = v34;

    v5 = *(_QWORD *)(v10 - 168);
    p_base_prots = &MiniMenuController.base_prots;
  }
  v38 = type metadata accessor for CanvasScribbleDelegate(0, v2, v3, v5);
  v39 = v25;
  v40 = specialized CanvasScribbleDelegate.__allocating_init(canvas:)();

  v41 = direct field offset for Canvas.scribbleDelegate;
  v42 = *(void **)&v39[direct field offset for Canvas.scribbleDelegate];
  *(_QWORD *)&v39[direct field offset for Canvas.scribbleDelegate] = v40;

  v43 = *(void **)&v39[v41];
  if (!v43)
    goto LABEL_13;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIScribbleInteraction);
  v44 = (objc_class *)swift_getObjCClassFromMetadata();
  v45 = v43;
  v46 = objc_msgSend(objc_allocWithZone(v44), sel_initWithDelegate_, v45);

  v47 = *(void **)&v39[direct field offset for Canvas.scribbleInteraction];
  *(_QWORD *)&v39[direct field offset for Canvas.scribbleInteraction] = v46;

  v48 = *(void **)&v39[v41];
  if (!v48)
  {
LABEL_14:
    __break(1u);
    return;
  }
  MEMORY[0x1DF0E6450](&protocol conformance descriptor for CanvasScribbleDelegate<A>, v38);
  type metadata accessor for UIIndirectScribbleInteraction();
  v49 = v48;
  v50 = UIIndirectScribbleInteraction.__allocating_init(delegate:)();
  v51 = *(void **)&v39[direct field offset for Canvas.indirectScribbleInteraction];
  *(_QWORD *)&v39[direct field offset for Canvas.indirectScribbleInteraction] = v50;

  v52 = *(id *)&v22[v23];
  Canvas.updateScribbleIteractions(for:)(v52);

  v53 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CanvasPointerDelegate()), sel_init);
  v54 = direct field offset for Canvas.pointerDelegate;
  v55 = *(void **)&v39[direct field offset for Canvas.pointerDelegate];
  *(_QWORD *)&v39[direct field offset for Canvas.pointerDelegate] = v53;

  v56 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3B18]), sel_initWithDelegate_, *(_QWORD *)&v39[v54]);
  objc_msgSend(v39, (SEL)p_base_prots[124], v56);
  *(_QWORD *)(v10 - 128) = &type metadata for PencilAndPaperFeatureFlags;
  *(_QWORD *)(v10 - 120) = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  *(_BYTE *)(v10 - 152) = 0;
  LOBYTE(v54) = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1(v10 - 152);
  if ((v54 & 1) != 0)
  {
    if (*(_DWORD *)(v10 - 156))
    {
      type metadata accessor for CanvasEditMenuDelegate(0, v2, v3, *(_QWORD *)(v10 - 168));
      v57 = v39;
      v58 = specialized CanvasEditMenuDelegate.__allocating_init(canvas:)();

      v59 = *(void **)&v57[direct field offset for Canvas.editMenuInteractionDelegate];
      *(_QWORD *)&v57[direct field offset for Canvas.editMenuInteractionDelegate] = v58;
      v60 = v58;

      v61 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC37A0]), sel_initWithDelegate_, v60);
      objc_msgSend(v57, (SEL)p_base_prots[124], v61);
      v62 = *(void **)&v57[direct field offset for Canvas.editMenuInteraction];
      *(_QWORD *)&v57[direct field offset for Canvas.editMenuInteraction] = v61;
      v63 = v61;

      Canvas.setupBandSelection()();
    }
  }
  v64 = v39;
  v65 = *(_QWORD *)(v10 - 192);
  Date.init()();
  v66 = type metadata accessor for Date();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v65, 0, 1, v66);
  v67 = (uint64_t)&v64[OBJC_IVAR____TtC8PaperKit9AnyCanvas_analytics_timeOfOpeningContainerView];
  swift_beginAccess();
  outlined assign with take of Date?(v65, v67, &demangling cache variable for type metadata for Date?);
  swift_endAccess();

}

uint64_t specialized Canvas.liveStreamMessenger.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + direct field offset for Canvas.liveStreamMessenger);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return Canvas.liveStreamMessenger.didset();
}

uint64_t specialized Canvas.canvasStateLiveStreamMessenger.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasStateLiveStreamMessenger + 8) = a2;
  swift_unknownObjectWeakAssign();
  return Canvas.canvasStateLiveStreamMessenger.didset();
}

void specialized Canvas.undoable(newChange:persistSelection:action:)(char a1, char a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  specialized Canvas.undoable(newChange:persistSelection:action:)(a1, a2, a3, a4, a5, (uint64_t)partial apply for closure #1 in closure #1 in PaperTextAttachmentView.endLiveResize(discard:), partial apply for closure #1 in closure #1 in PaperTextAttachmentView.endLiveResize(discard:));
}

void specialized Canvas.undoable(newChange:persistSelection:action:)(char a1, char a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(_BYTE *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  _QWORD *v38;
  id v39;
  uint64_t v40;
  void (*v41)(_BYTE *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  void (*v45)(_BYTE *, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v46;
  _BYTE v47[12];
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(_BYTE *, uint64_t, uint64_t);
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61[24];

  v57 = a7;
  v60 = a6;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = &v47[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for CapsuleUndoAction();
  v58 = *(_QWORD *)(v16 - 8);
  v59 = v16;
  MEMORY[0x1E0C80A78](v16, v17);
  v56 = &v47[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = &v47[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = &v47[-v26];
  if (*((_BYTE *)a3 + direct field offset for Canvas.isInUndoableGroup) == 1)
  {
    *((_BYTE *)a3 + direct field offset for Canvas.isUndoableGroupNewChange) = (*((_BYTE *)a3
                                                                                + direct field offset for Canvas.isUndoableGroupNewChange) | a1) & 1;
    v28 = *(void **)(a4 + direct field offset for Canvas.paperView);
    swift_beginAccess();
    v29 = v28;
    Capsule.callAsFunction<A>(_:)();
    swift_endAccess();

    return;
  }
  v55 = a5;
  v60 = direct field offset for Canvas.isInUndoableGroup;
  *((_BYTE *)a3 + direct field offset for Canvas.isInUndoableGroup) = 1;
  v30 = direct field offset for Canvas.isUndoableGroupNewChange;
  *((_BYTE *)a3 + direct field offset for Canvas.isUndoableGroupNewChange) = a1 & 1;
  v52 = v30;
  v53 = direct field offset for Canvas.paperView;
  v31 = *(_QWORD *)((char *)a3 + direct field offset for Canvas.paperView)
      + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)((char *)a3 + direct field offset for Canvas.paperView))
                  + 0x380);
  swift_beginAccess();
  v32 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v20 + 16);
  v32(v27, v31, v19);
  v54 = v32;
  if ((a2 & 1) != 0)
  {
    v33 = *(_QWORD *)((char *)a3 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    if (!v33)
    {
      __break(1u);
      return;
    }
    v34 = v33 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
    v35 = *(_QWORD *)v34;
    v36 = *(_QWORD *)(v34 + 8);
    v49 = *(_QWORD *)(v34 + 16);
    v48 = *(unsigned __int8 *)(v34 + 24);
    v51 = v35;
    swift_bridgeObjectRetain();
    v50 = v36;
    swift_bridgeObjectRetain();
  }
  else
  {
    v50 = 0;
    v51 = 0;
    v49 = 0;
    v48 = 0;
  }
  v37 = *(void **)(a4 + direct field offset for Canvas.paperView);
  v38 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_beginAccess();
  v39 = v37;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();

  if (*((_BYTE *)a3 + v52) == 1)
  {
    v61[0] = 3;
    (*(void (**)(char *))((*v38 & *a3) + 0x518))(v61);
  }
  v40 = *(_QWORD *)((char *)a3 + v53) + *(_QWORD *)((*v38 & **(_QWORD **)((char *)a3 + v53)) + 0x380);
  swift_beginAccess();
  v54(v23, v40, v19);
  Capsule.actionUndoingDifference(from:)();
  v41 = *(void (**)(_BYTE *, uint64_t))(v20 + 8);
  v41(v23, v19);
  v43 = v58;
  v42 = v59;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v58 + 48))(v15, 1, v59) == 1)
  {
    v41(v27, v19);
    outlined consume of CanvasMembers?(v51);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  }
  else
  {
    v44 = v56;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v43 + 32))(v56, v15, v42);
    v45 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, _QWORD))((*v38 & *a3) + 0x458);
    v46 = v51;
    v57 = v27;
    v55 = v19;
    v45(v44, v51, v50, v49, v48);
    outlined consume of CanvasMembers?(v46);
    (*(void (**)(_BYTE *, uint64_t))(v43 + 8))(v44, v42);
    v41(v57, v55);
  }
  *((_BYTE *)a3 + v60) = 0;
}

uint64_t specialized Canvas.liveStreamMessenger.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + direct field offset for Canvas.liveStreamMessenger;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t specialized Canvas.updatablePaper2.setter(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t);
  _QWORD *v8;
  char v10[24];

  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = *(_QWORD **)((char *)v1 + direct field offset for Canvas.paperView);
  v5 = (char *)v4 + *(_QWORD *)((*v4 & *MEMORY[0x1E0DEEDD8]) + 0x380);
  swift_beginAccess();
  v6 = type metadata accessor for Capsule();
  v7 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v8 = v4;
  v7(v5, a1, v6);
  swift_endAccess();

  v10[0] = 3;
  return (*(uint64_t (**)(char *))((*v3 & *v1) + 0x518))(v10);
}

void specialized Canvas.rootElement.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t);
  _QWORD *v7;

  v3 = *(_QWORD **)(v1 + direct field offset for Canvas.paperView);
  v4 = (char *)v3 + *(_QWORD *)((*v3 & *MEMORY[0x1E0DEEDD8]) + 0x380);
  swift_beginAccess();
  v5 = type metadata accessor for Capsule();
  v6 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24);
  v7 = v3;
  v6(v4, a1, v5);
  swift_endAccess();

}

uint64_t specialized Canvas.paper.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v2 = type metadata accessor for Capsule();
  v3 = type metadata accessor for Optional();
  v5 = MEMORY[0x1E0C80A78](v3, v4);
  v7 = (char *)&v11 - v6;
  (*(void (**)(char *, uint64_t, double))(v8 + 16))((char *)&v11 - v6, a1, v5);
  v9 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v2);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    specialized Canvas.rootElement.setter((uint64_t)v7);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v7, v2);
  }
  return result;
}

uint64_t sub_1DDEB2368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a3 + a2 - 8) + 72))(*(_QWORD *)(a3 + a2 - 24));
}

uint64_t sub_1DDEB23A0()
{
  return 24;
}

__n128 sub_1DDEB23AC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #1 in Canvas.selectAll()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Canvas.selectAll()(a1, a2);
}

uint64_t sub_1DDEB23D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a3 + a2 - 8) + 48))(*(_QWORD *)(a3 + a2 - 24));
}

uint64_t sub_1DDEB2410()
{
  return 24;
}

__n128 sub_1DDEB241C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for Canvas.PaperViewCanvasPublisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Canvas.PaperViewCanvasPublisher);
}

void partial apply for closure #1 in Canvas.undoablyAdd(_:to:)()
{
  uint64_t v0;

  closure #1 in Canvas.undoablyAdd(_:to:)(*(_QWORD *)(v0 + 16));
}

uint64_t type metadata accessor for Canvas(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Canvas);
}

unint64_t lazy protocol witness table accessor for type UIPress and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UIPress and conformance NSObject;
  if (!lazy protocol witness table cache variable for type UIPress and conformance NSObject)
  {
    v1 = type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UIPress);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIPress and conformance NSObject);
  }
  return result;
}

uint64_t sub_1DDEB24AC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = specialized Canvas.liveStreamMessenger.getter();
  a1[1] = v2;
  return swift_unknownObjectRetain();
}

uint64_t sub_1DDEB24D8()
{
  return 24;
}

__n128 sub_1DDEB24E4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDEB24F8()
{
  return Canvas.updatablePaper.getter();
}

uint64_t sub_1DDEB251C()
{
  return 24;
}

__n128 sub_1DDEB2528(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDEB253C@<X0>(uint64_t a1@<X8>)
{
  return Canvas.updatablePaper2.getter(a1);
}

uint64_t sub_1DDEB255C(uint64_t a1)
{
  return specialized Canvas.updatablePaper2.setter(a1);
}

uint64_t sub_1DDEB257C()
{
  return 24;
}

__n128 sub_1DDEB2588(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDEB259C@<X0>(uint64_t a1@<X8>)
{
  return Canvas.updatablePaper2.getter(a1);
}

void sub_1DDEB25BC(uint64_t a1)
{
  specialized Canvas.rootElement.setter(a1);
}

uint64_t sub_1DDEB25DC()
{
  return 24;
}

__n128 sub_1DDEB25E8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDEB25FC(uint64_t a1)
{
  return specialized Canvas.paper.setter(a1);
}

uint64_t sub_1DDEB261C()
{
  return 24;
}

__n128 sub_1DDEB2628(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDEB263C()
{
  return 24;
}

__n128 sub_1DDEB2648(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDEB265C@<X0>(uint64_t *a1@<X8>)
{
  *a1 = specialized Canvas.xpcMulticast.getter();
  return swift_retain();
}

uint64_t sub_1DDEB2684()
{
  uint64_t v0;

  v0 = swift_retain();
  return Canvas.xpcMulticast.setter(v0);
}

uint64_t sub_1DDEB26AC()
{
  return 24;
}

__n128 sub_1DDEB26B8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDEB26CC@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[40];

  Canvas.visibleBoundsOverride.getter((uint64_t)v3);
  return outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v3, a1, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
}

uint64_t sub_1DDEB2710(uint64_t a1)
{
  _BYTE v2[40];

  outlined init with take of (key: Int, value: AnyCRValue)?(a1, (uint64_t)v2, (uint64_t *)&demangling cache variable for type metadata for CGRect?);
  return Canvas.visibleBoundsOverride.setter((uint64_t)v2);
}

uint64_t sub_1DDEB2750()
{
  return 24;
}

__n128 sub_1DDEB275C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

id sub_1DDEB2770@<X0>(_BYTE *a1@<X8>)
{
  id result;

  result = Canvas.isRulerActive.getter();
  *a1 = result & 1;
  return result;
}

void sub_1DDEB279C(char *a1)
{
  Canvas.isRulerActive.setter(*a1);
}

uint64_t sub_1DDEB27C0()
{
  return 24;
}

__n128 sub_1DDEB27CC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDEB27E0@<X0>(uint64_t *a1@<X8>)
{
  return specialized Canvas.tool.getter(a1);
}

uint64_t sub_1DDEB2800(uint64_t a1)
{
  _QWORD v2[5];

  outlined init with copy of FindResult(a1, (uint64_t)v2);
  return Canvas.tool.setter(v2);
}

uint64_t sub_1DDEB2838()
{
  return 24;
}

__n128 sub_1DDEB2844(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t type metadata completion function for Canvas()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for Canvas()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Canvas.liveStreamMessenger.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x8F8))();
}

uint64_t dispatch thunk of Canvas.liveStreamMessenger.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x900))();
}

uint64_t dispatch thunk of Canvas.liveStreamMessenger.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x908))();
}

uint64_t dispatch thunk of Canvas.merge<A>(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x918))();
}

uint64_t dispatch thunk of Canvas.updatablePaper.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x920))();
}

uint64_t dispatch thunk of Canvas.updatablePaper.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x928))();
}

uint64_t dispatch thunk of Canvas.updatablePaper.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x930))();
}

uint64_t dispatch thunk of Canvas.updatablePaper2.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x938))();
}

uint64_t dispatch thunk of Canvas.updatablePaper2.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x940))();
}

uint64_t dispatch thunk of Canvas.updatablePaper2.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x948))();
}

uint64_t dispatch thunk of Canvas.rootElement.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x968))();
}

uint64_t dispatch thunk of Canvas.rootElement.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x970))();
}

uint64_t dispatch thunk of Canvas.rootElement.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x978))();
}

uint64_t dispatch thunk of Canvas.paper.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x980))();
}

uint64_t dispatch thunk of Canvas.paper.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x988))();
}

uint64_t dispatch thunk of Canvas.paper.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x990))();
}

uint64_t dispatch thunk of Canvas.paper2.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x998))();
}

uint64_t dispatch thunk of Canvas.paper2.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x9A0))();
}

uint64_t dispatch thunk of Canvas.paper2.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x9A8))();
}

uint64_t dispatch thunk of Canvas.xpcMulticast.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x9B0))();
}

uint64_t dispatch thunk of Canvas.xpcMulticast.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x9B8))();
}

uint64_t dispatch thunk of Canvas.xpcMulticast.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x9C0))();
}

uint64_t dispatch thunk of Canvas.editingContainerElementId.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x9F8))();
}

uint64_t dispatch thunk of Canvas.editingContainerElementId.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA00))();
}

uint64_t dispatch thunk of Canvas.visibleBoundsOverride.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB88))();
}

uint64_t dispatch thunk of Canvas.visibleBoundsOverride.setter(uint64_t a1)
{
  _QWORD *v1;
  char v2;
  uint64_t (*v3)(_OWORD *);
  __int128 v4;
  _OWORD v6[2];
  char v7;

  v2 = *(_BYTE *)(a1 + 32);
  v3 = *(uint64_t (**)(_OWORD *))((*MEMORY[0x1E0DEEDD8] & *v1) + 0xB90);
  v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  v7 = v2;
  return v3(v6);
}

uint64_t dispatch thunk of Canvas.visibleBoundsOverride.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB98))();
}

uint64_t dispatch thunk of Canvas.selectedTextRange.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xBA0))();
}

uint64_t dispatch thunk of Canvas.selectAll()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xBB0))();
}

uint64_t dispatch thunk of Canvas._copyAll()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xBB8))();
}

uint64_t dispatch thunk of Canvas.isRulerActive.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xBC0))();
}

uint64_t dispatch thunk of Canvas.isRulerActive.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xBC8))();
}

uint64_t dispatch thunk of Canvas.isRulerActive.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xBD0))();
}

uint64_t dispatch thunk of Canvas.tool.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xBD8))();
}

uint64_t dispatch thunk of Canvas.tool.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xBE0))();
}

uint64_t dispatch thunk of Canvas.tool.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xBE8))();
}

uint64_t dispatch thunk of Canvas.publisher.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC08))();
}

uint64_t dispatch thunk of Canvas.livePublisher.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC10))();
}

uint64_t dispatch thunk of Canvas.undoablyAdd(_:to:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD20))();
}

uint64_t type metadata completion function for Canvas.PaperViewCanvasSubscription()
{
  uint64_t result;
  unint64_t v1;

  type metadata accessor for Capsule();
  result = type metadata accessor for AnySubscriber();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void type metadata accessor for Canvas.PaperViewCanvasSubscription()
{
  JUMPOUT(0x1DF0E63B4);
}

uint64_t type metadata accessor for CanvasPointerDelegate()
{
  return objc_opt_self();
}

uint64_t initializeWithCopy for Canvas.PaperViewCanvasPublisher(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyInit();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t assignWithCopy for Canvas.PaperViewCanvasPublisher(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakCopyAssign();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t initializeWithTake for Canvas.PaperViewCanvasPublisher(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakTakeInit();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for Canvas.PaperViewCanvasPublisher(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_unknownObjectWeakTakeAssign();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
  return result;
}

uint64_t getEnumTagSinglePayload for Canvas.PaperViewCanvasPublisher(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Canvas.PaperViewCanvasPublisher(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

void base witness table accessor for Cancellable in Canvas<A>.PaperViewCanvasSubscription<A1>()
{
  JUMPOUT(0x1DF0E6450);
}

void base witness table accessor for CustomCombineIdentifierConvertible in Canvas<A>.PaperViewCanvasSubscription<A1>()
{
  JUMPOUT(0x1DF0E6450);
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in Canvas<A>.PaperViewCanvasPublisher()
{
  return MEMORY[0x1E0DEDD18];
}

uint64_t sub_1DDEB2FC8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in AnySubscriber.init<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1DDEB3018()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in AnySubscriber.init<A>(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  return closure #3 in AnySubscriber.init<A>(_:)(v0 + ((v2 + 40) & ~v2), *(_QWORD *)(v0 + 16), MEMORY[0x1E0DEDCE8], v1);
}

uint64_t partial apply for closure #6 in AnySubscriber.init<A>(_:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = v3;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t specialized Canvas.dropInteraction(_:canHandle:)(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v7;
  double v8;

  if (((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0xAF8))() & 1) == 0)
    return 0;
  v3 = AnyCanvas.acceptedDropLayouts.getter();
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
  {
LABEL_6:
    swift_bridgeObjectRelease();
    return 0;
  }
  v5 = v3 + 40;
  while (((*(uint64_t (**)(void *))(*(_QWORD *)v5 + 24))(a1) & 1) == 0)
  {
    v5 += 16;
    if (!--v4)
      goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_locationInView_, v1);
  return Canvas.isValidDropPoint(dropLocation:)(v7, v8);
}

id specialized Canvas.dropInteraction(_:sessionDidUpdate:)(void *a1)
{
  _QWORD *v1;
  void *v2;
  double v4;
  double v5;
  id v6;
  id v7;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t (*v12)(void);
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  char v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v2 = v1;
  if ((Canvas.dropSessionFromCurrentCanvas(session:)(a1) & 1) != 0)
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3788]), sel_initWithDropOperation_, 0);
  objc_msgSend(a1, sel_locationInView_, v1);
  if ((Canvas.isValidDropPoint(dropLocation:)(v4, v5) & 1) == 0)
    return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3788]), sel_initWithDropOperation_, 0);
  *((_BYTE *)v1 + direct field offset for Canvas.dropSessionType) = 0;
  v6 = objc_msgSend(a1, sel_localDragSession);
  if (!v6)
  {
    v23 = 0u;
    v24 = 0u;
LABEL_13:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v23, &demangling cache variable for type metadata for Any?);
    goto LABEL_14;
  }
  v7 = objc_msgSend(v6, sel_localContext);
  swift_unknownObjectRelease();
  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v21 = 0u;
    v22 = 0u;
  }
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v21, (uint64_t)&v23, &demangling cache variable for type metadata for Any?);
  if (!*((_QWORD *)&v24 + 1))
    goto LABEL_13;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v9 = (void *)v21;
    type metadata accessor for AnyCanvas();
    v10 = (_QWORD *)swift_dynamicCastClass();
    v11 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    if (v10)
    {
      v12 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v10) + 0x320);
      v13 = v9;
      v14 = (void *)v12();

    }
    else
    {
      v14 = 0;
    }
    v16 = (*(uint64_t (**)(void))((*v11 & *v1) + 0x320))();
    v17 = (void *)v16;
    if (v14)
    {
      if (v16)
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKTiledView);
        v18 = v14;
        v19 = static NSObject.== infix(_:_:)();

        if ((v19 & 1) != 0)
          goto LABEL_28;
LABEL_26:
        v20 = objc_msgSend(v2, sel_isDescendantOfView_, v9, v21, v22);

        if (v20)
          *((_BYTE *)v2 + direct field offset for Canvas.dropSessionType) = 2;
        goto LABEL_14;
      }
    }
    else
    {
      if (!v16)
      {
LABEL_28:

        *((_BYTE *)v2 + direct field offset for Canvas.dropSessionType) = 1;
        goto LABEL_14;
      }
      v14 = (void *)v16;
    }

    goto LABEL_26;
  }
LABEL_14:
  if (*((_BYTE *)v2 + direct field offset for Canvas.dropSessionType))
    v15 = 3;
  else
    v15 = 2;
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3788]), sel_initWithDropOperation_, v15);
}

void specialized Canvas.dropInteraction(_:performDrop:)(void *a1)
{
  char *v1;
  char *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double width;
  double height;
  double v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  void *v18;
  unsigned __int8 v19;
  id v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  double v25;
  id v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  char *v48;
  id v49;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  void *v60;
  CGFloat *v61;
  CGFloat v62;
  void *v63;
  char *v64;
  id v65;
  uint64_t inited;
  int v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  void *v72;
  unint64_t v73;
  uint64_t v74;
  id v75;
  unint64_t v76;
  char *v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  CGFloat y;
  CGFloat x;
  uint64_t v87;
  CGFloat v88;
  double v89;
  double v90;
  id v91;
  id v92;
  unint64_t v93;
  CGRect aBlock;
  double v95;
  CGFloat *v96;
  uint64_t v97[5];
  uint64_t v98;
  CGRect v99;

  v2 = v1;
  v4 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v1) + 0x7B8);
  v82 = *MEMORY[0x1E0DEEDD8] & *(_QWORD *)v1;
  v84 = *(_QWORD *)(v82 + 1984);
  v93 = v4;
  v83 = type metadata accessor for Capsule();
  v81 = *(_QWORD *)(v83 - 8);
  MEMORY[0x1E0C80A78](v83, v5);
  v80 = (uint64_t)&v73 - v6;
  Canvas.dropFrame(session:)(a1, &aBlock.origin.x);
  x = aBlock.origin.x;
  width = aBlock.size.width;
  y = aBlock.origin.y;
  height = aBlock.size.height;
  v9 = v95;
  v91 = a1;
  v10 = objc_msgSend(a1, sel_items);
  v92 = (id)type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDragItem);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v11 >> 62)
    goto LABEL_44;
  v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v12; v12 = _CocoaArrayWrapper.endIndex.getter())
  {
    v13 = 4;
    while (1)
    {
      v14 = (v11 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x1DF0E4D64](v13 - 4, v11)
          : *(id *)(v11 + 8 * v13);
      v15 = v14;
      v16 = v13 - 3;
      if (__OFADD__(v13 - 4, 1))
        break;
      v17 = objc_msgSend(v14, sel_itemProvider);
      v18 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
      v19 = objc_msgSend(v17, sel_hasItemConformingToTypeIdentifier_, v18);

      if ((v19 & 1) != 0)
      {
        swift_bridgeObjectRelease_n();
        v59 = objc_msgSend(v15, sel_itemProvider);
        v60 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
        v61 = (CGFloat *)swift_allocObject();
        *((_QWORD *)v61 + 2) = v2;
        v62 = y;
        v61[3] = x;
        v61[4] = v62;
        v61[5] = width;
        v61[6] = height;
        v95 = COERCE_DOUBLE(partial apply for closure #2 in Canvas.dropInteraction(_:performDrop:));
        v96 = v61;
        *(_QWORD *)&aBlock.origin.x = MEMORY[0x1E0C809B0];
        *(_QWORD *)&aBlock.origin.y = 1107296256;
        *(_QWORD *)&aBlock.size.width = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed URL?, @guaranteed Error?) -> ();
        *(_QWORD *)&aBlock.size.height = &block_descriptor_110;
        v63 = _Block_copy(&aBlock);
        v64 = v2;
        swift_release();
        v65 = objc_msgSend(v59, sel_loadFileRepresentationForTypeIdentifier_completionHandler_, v60, v63);
        _Block_release(v63);

        goto LABEL_48;
      }

      ++v13;
      if (v16 == v12)
        goto LABEL_10;
    }
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease_n();
  v20 = objc_msgSend(v91, sel_items);
  v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v21 >> 62)
  {
    swift_bridgeObjectRetain();
    v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v22)
      goto LABEL_12;
  }
  else
  {
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v22)
    {
LABEL_12:
      v87 = 0;
      v23 = 0;
      v78 = &v2[direct field offset for Canvas.dropTargets];
      v79 = v21 & 0xC000000000000001;
      v74 = v21 & 0xFFFFFFFFFFFFFF8;
      v73 = v21 + 32;
      v76 = v21;
      v75 = (id)v22;
      v77 = v2;
      v24 = x;
      v25 = y;
      do
      {
        if (v79)
        {
          v26 = (id)MEMORY[0x1DF0E4D64](v23, v21);
          v27 = v93;
          v11 = v84;
          v28 = v83;
          v29 = __OFADD__(v23, 1);
          v30 = (void *)(v23 + 1);
          if (v29)
            goto LABEL_40;
        }
        else
        {
          v27 = v93;
          v11 = v84;
          v28 = v83;
          if (v23 >= *(_QWORD *)(v74 + 16))
            goto LABEL_42;
          v26 = *(id *)(v73 + 8 * v23);
          v29 = __OFADD__(v23, 1);
          v30 = (void *)(v23 + 1);
          if (v29)
          {
LABEL_40:
            __break(1u);
            goto LABEL_41;
          }
        }
        v91 = v30;
        v92 = v26;
        v31 = objc_msgSend(v26, sel_itemProvider, v73);
        v32 = v80;
        v33 = CanvasElementView.canvasElement.getter(v80);
        MEMORY[0x1E0C80A78](v33, v34);
        *(&v73 - 4) = v27;
        *(&v73 - 3) = v11;
        v35 = *(_QWORD *)(v82 + 1992);
        *(&v73 - 2) = v35;
        swift_getKeyPath();
        Capsule<>.subscript.getter();
        swift_release();
        v36 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
        v36(v32, v28);
        v37 = CGRectGetWidth(aBlock);
        if (one-time initialization token for dropItemSpacing != -1)
          swift_once();
        v38 = *(double *)&static UIConstants.dropItemSpacing;
        v99.origin.x = v24;
        v99.origin.y = v25;
        v99.size.width = width;
        v99.size.height = height;
        v39 = CGRectGetWidth(v99);
        if (v38 > v24)
          v40 = v38;
        else
          v40 = v24;
        v41 = v37 - v38 - v39;
        if (v40 < v41)
          v41 = v40;
        v90 = v41;
        v42 = *((double *)&static UIConstants.dropItemSpacing + 1);
        if (*((double *)&static UIConstants.dropItemSpacing + 1) > v25)
          v43 = *((double *)&static UIConstants.dropItemSpacing + 1);
        else
          v43 = v25;
        v89 = v43;
        v44 = (unint64_t)v77;
        v45 = CanvasElementView.canvasElement.getter(v32);
        MEMORY[0x1E0C80A78](v45, v46);
        *(&v73 - 4) = v93;
        *(&v73 - 3) = v11;
        *(&v73 - 2) = v35;
        swift_getKeyPath();
        Capsule<>.subscript.getter();
        swift_release();
        v36(v32, v28);
        v47 = aBlock.origin.x;
        v88 = aBlock.origin.y;
        v48 = v78;
        swift_beginAccess();
        v49 = v92;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v98 = *(_QWORD *)v48;
        *(_QWORD *)v48 = 0x8000000000000000;
        *(double *)v97 = v24;
        *(double *)&v97[1] = v25;
        *(double *)&v97[2] = width;
        *(double *)&v97[3] = height;
        *(double *)&v97[4] = v9;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v97, v49, isUniquelyReferenced_nonNull_native);
        *(_QWORD *)v48 = v98;

        swift_bridgeObjectRelease();
        swift_endAccess();
        v11 = v44;
        v51 = AnyCanvas.acceptedDropLayouts.getter();
        v52 = *(_QWORD *)(v51 + 16);
        if (v52)
        {
          v53 = v38 * (double)v87 + v90 + v47;
          v54 = v42 * (double)v87 + v89 + v88;
          v55 = v51 + 40;
          while (1)
          {
            v56 = *(_QWORD *)(v55 - 8);
            v57 = *(_QWORD *)v55;
            v2 = *(char **)(*(_QWORD *)v55 + 16);
            v58 = v49;
            LOBYTE(v56) = ((uint64_t (*)(id, unint64_t, id, uint64_t, uint64_t, double, double, double, double, double))v2)(v31, v11, v49, v56, v57, v53, v54, width, height, v9);

            if ((v56 & 1) != 0)
              break;
            v55 += 16;
            if (!--v52)
              goto LABEL_13;
          }

          swift_bridgeObjectRelease();
          v29 = __OFADD__(v87++, 1);
          if (v29)
            goto LABEL_43;
        }
        else
        {
LABEL_13:

          swift_bridgeObjectRelease();
        }
        v23 = (unint64_t)v91;
        v2 = (char *)v11;
        v21 = v76;
      }
      while (v91 != v75);
    }
  }
  swift_bridgeObjectRelease();
LABEL_48:
  type metadata accessor for Analytics();
  inited = swift_initStaticObject();
  v67 = v2[direct field offset for Canvas.dropSessionType];
  if (v67 == 3)
  {
    __break(1u);
  }
  else
  {
    v68 = inited;
    v69 = swift_allocObject();
    *(_QWORD *)(v69 + 16) = v68;
    *(_BYTE *)(v69 + 24) = v67;
    v70 = (void *)MEMORY[0x1DF0E41AC](0xD00000000000001ELL, 0x80000001DDF4AEC0);
    v71 = swift_allocObject();
    *(_QWORD *)(v71 + 16) = partial apply for implicit closure #1 in Analytics.recordDragAndDropEvent(type:);
    *(_QWORD *)(v71 + 24) = v69;
    v95 = COERCE_DOUBLE(partial apply for closure #1 in Analytics.sendEventLazy(key:payload:));
    v96 = (CGFloat *)v71;
    *(_QWORD *)&aBlock.origin.x = MEMORY[0x1E0C809B0];
    *(_QWORD *)&aBlock.origin.y = 1107296256;
    *(_QWORD *)&aBlock.size.width = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
    *(_QWORD *)&aBlock.size.height = &block_descriptor_104;
    v72 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v72);
    swift_release();

    v2[direct field offset for Canvas.dropSessionType] = 3;
  }
}

id specialized Canvas.dropInteraction(_:previewForDropping:withDefault:)(void *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v6;
  uint64_t v7;
  id v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  id v17;
  void *v18;
  unsigned int v19;
  id v20;
  CGFloat tx;
  CGFloat ty;
  double Width;
  double v24;
  CGFloat v25;
  double Height;
  double v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  CGAffineTransform *v31;
  CGFloat a;
  CGFloat b;
  CGFloat d;
  CGFloat c;
  CGFloat v36;
  CGFloat v37;
  void *v38;
  void *v39;
  double v40;
  CGFloat v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  CGFloat v45;
  CGFloat v46;
  id v47;
  double MidX;
  double MidY;
  id v50;
  id v51;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  CGFloat v57;
  CGFloat v58;
  CGFloat v59;
  CGAffineTransform v60;
  CGAffineTransform t2;
  CGAffineTransform t1;
  _BYTE v63[48];
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;

  v3 = v2;
  v6 = (_QWORD *)((char *)v2 + direct field offset for Canvas.dropTargets);
  swift_beginAccess();
  v7 = *v6;
  if (!*(_QWORD *)(v7 + 16))
    return 0;
  swift_bridgeObjectRetain();
  v8 = a1;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v8);
  if ((v10 & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 56) + 40 * v9;
    v12 = *(double *)v11;
    v13 = *(double *)(v11 + 8);
    v15 = *(double *)(v11 + 16);
    v14 = *(double *)(v11 + 24);
    v16 = *(double *)(v11 + 32);

    swift_bridgeObjectRelease();
    swift_beginAccess();
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v8, (uint64_t)v63);
    swift_endAccess();
    v17 = objc_msgSend(v8, sel_itemProvider);
    v18 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000011, 0x80000001DDF50250);
    v19 = objc_msgSend(v17, sel_hasItemConformingToTypeIdentifier_, v18);

    if (v19)
    {
      return specialized Canvas.stickerDropInteraction(_:previewForDropping:withDefault:)(v8, a2);
    }
    else
    {
      CGAffineTransformMakeRotation(&t1, v16);
      v53 = *(_OWORD *)&t1.c;
      v55 = *(_OWORD *)&t1.a;
      tx = t1.tx;
      ty = t1.ty;
      v64.origin.x = v12;
      v64.origin.y = v13;
      v64.size.width = v15;
      v64.size.height = v14;
      Width = CGRectGetWidth(v64);
      objc_msgSend(a2, sel_size);
      v25 = Width / v24;
      v58 = v13;
      v59 = v12;
      v65.origin.x = v12;
      v65.origin.y = v13;
      v57 = v15;
      v65.size.width = v15;
      v65.size.height = v14;
      Height = CGRectGetHeight(v65);
      objc_msgSend(a2, sel_size);
      CGAffineTransformMakeScale(&t1, v25, Height / v27);
      v28 = *(_OWORD *)&t1.a;
      v29 = *(_OWORD *)&t1.c;
      v30 = *(_OWORD *)&t1.tx;
      *(_OWORD *)&t1.a = v55;
      *(_OWORD *)&t1.c = v53;
      t1.tx = tx;
      t1.ty = ty;
      *(_OWORD *)&t2.a = v28;
      *(_OWORD *)&t2.c = v29;
      *(_OWORD *)&t2.tx = v30;
      v31 = CGAffineTransformConcat(&v60, &t1, &t2);
      a = v60.a;
      b = v60.b;
      c = v60.c;
      d = v60.d;
      v36 = v60.tx;
      v37 = v60.ty;
      v38 = (void *)(*(uint64_t (**)(CGAffineTransform *))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x308))(v31);
      if (v38)
      {
        v39 = v38;
        objc_msgSend(v38, sel_zoomScale);
        v41 = v40;

      }
      else
      {
        v41 = 1.0;
      }
      CGAffineTransformMakeScale(&t1, v41, v41);
      v42 = *(_OWORD *)&t1.a;
      v43 = *(_OWORD *)&t1.c;
      v44 = *(_OWORD *)&t1.tx;
      t1.a = a;
      t1.b = b;
      t1.c = c;
      t1.d = d;
      t1.tx = v36;
      t1.ty = v37;
      *(_OWORD *)&t2.a = v42;
      *(_OWORD *)&t2.c = v43;
      *(_OWORD *)&t2.tx = v44;
      CGAffineTransformConcat(&v60, &t1, &t2);
      v54 = *(_OWORD *)&v60.c;
      v56 = *(_OWORD *)&v60.a;
      v45 = v60.tx;
      v46 = v60.ty;
      v47 = Canvas.editingView.getter();
      v66.origin.x = v59;
      v66.origin.y = v58;
      v66.size.width = v57;
      v66.size.height = v14;
      MidX = CGRectGetMidX(v66);
      v67.origin.x = v59;
      v67.origin.y = v58;
      v67.size.width = v57;
      v67.size.height = v14;
      MidY = CGRectGetMidY(v67);
      v50 = objc_allocWithZone(MEMORY[0x1E0DC3770]);
      *(_OWORD *)&t1.a = v56;
      *(_OWORD *)&t1.c = v54;
      t1.tx = v45;
      t1.ty = v46;
      v51 = objc_msgSend(v50, sel_initWithContainer_center_transform_, v47, &t1, MidX, MidY);

      v20 = objc_msgSend(a2, sel_retargetedPreviewWithTarget_, v51);
    }
  }
  else
  {

    swift_bridgeObjectRelease();
    return 0;
  }
  return v20;
}

void specialized Canvas.dropInteraction(_:item:willAnimateDropWith:)(void *a1, void *a2)
{
  void *v2;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  _QWORD v9[6];

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 24) = a1;
  v9[4] = partial apply for closure #1 in Canvas.dropInteraction(_:item:willAnimateDropWith:);
  v9[5] = v5;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed (@unowned PDFRequirePasswordsResult) -> ();
  v9[3] = &block_descriptor_59;
  v6 = _Block_copy(v9);
  v7 = v2;
  v8 = a1;
  swift_release();
  objc_msgSend(a2, sel_addCompletion_, v6);
  _Block_release(v6);
}

uint64_t specialized Canvas.dropInteraction(_:sessionDidEnter:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;

  v2 = *(_QWORD *)(v1 + direct field offset for Canvas.dropInteraction);
  if (v2)
    v3 = v2 == result;
  else
    v3 = 0;
  if (v3)
    *(_BYTE *)(v1 + direct field offset for Canvas.dropInteractionSessionIsActive) = 1;
  return result;
}

uint64_t specialized Canvas.dropInteraction(_:sessionDidEnd:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;

  v2 = v1;
  v3 = *(_QWORD *)(v1 + direct field offset for Canvas.dropInteraction);
  if (v3)
    v4 = v3 == a1;
  else
    v4 = 0;
  if (v4)
    *(_BYTE *)(v1 + direct field offset for Canvas.dropInteractionSessionIsActive) = 0;
  v5 = (uint64_t *)(v1 + direct field offset for Canvas.dropCompletions);
  swift_beginAccess();
  v6 = *v5;
  v7 = *v5 + 64;
  v8 = 1 << *(_BYTE *)(*v5 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(*v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v14 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v15 = v14 | (v13 << 6);
      goto LABEL_11;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v18 >= v11)
      goto LABEL_29;
    v19 = *(_QWORD *)(v7 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v11)
        goto LABEL_29;
      v19 = *(_QWORD *)(v7 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v11)
          goto LABEL_29;
        v19 = *(_QWORD *)(v7 + 8 * v13);
        if (!v19)
        {
          v13 = v18 + 3;
          if (v18 + 3 >= v11)
            goto LABEL_29;
          v19 = *(_QWORD *)(v7 + 8 * v13);
          if (!v19)
            break;
        }
      }
    }
LABEL_28:
    v10 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_11:
    v16 = *(void (**)(uint64_t))(*(_QWORD *)(v6 + 56) + 16 * v15);
    v17 = swift_retain();
    v16(v17);
    result = swift_release();
  }
  v20 = v18 + 4;
  if (v20 >= v11)
  {
LABEL_29:
    swift_release();
    v21 = (_QWORD *)(v2 + direct field offset for Canvas.dropCompletions);
    swift_beginAccess();
    v22 = MEMORY[0x1E0DEE9E0];
    *v21 = MEMORY[0x1E0DEE9E0];
    swift_bridgeObjectRelease();
    v23 = (_QWORD *)(v2 + direct field offset for Canvas.delayedPreviewProviders);
    swift_beginAccess();
    *v23 = v22;
    swift_bridgeObjectRelease();
    v24 = (_QWORD *)(v2 + direct field offset for Canvas.stickerDropPreviewInfoMap);
    swift_beginAccess();
    *v24 = v22;
    return swift_bridgeObjectRelease();
  }
  v19 = *(_QWORD *)(v7 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_28;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v11)
      goto LABEL_29;
    v19 = *(_QWORD *)(v7 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_28;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t specialized Canvas._dropInteraction(_:delayedPreviewProviderForDropping:previewProvider:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t *v8;
  id v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;

  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  v8 = (uint64_t *)(v3 + direct field offset for Canvas.delayedPreviewProviders);
  swift_beginAccess();
  v9 = a1;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12 = *v8;
  *v8 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@guaranteed UITargetedDragPreview) -> (), v7, v9, isUniquelyReferenced_nonNull_native);
  *v8 = v12;

  swift_bridgeObjectRelease();
  return swift_endAccess();
}

void specialized Canvas.init(coder:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v0 + direct field offset for Canvas.multipeerConnection) = 0;
  *(_QWORD *)(v0 + direct field offset for Canvas.multipeerCanvasStateConnection) = 0;
  *(_QWORD *)(v0 + direct field offset for Canvas.removeOldEraserStrokesTimer) = 0;
  v1 = (_QWORD *)(v0 + direct field offset for Canvas.liveStreamMessenger);
  *v1 = 0;
  v1[1] = 0;
  *(_QWORD *)(v0 + direct field offset for Canvas.childViewControllerCancellable) = 0;
  *(_QWORD *)(v0 + direct field offset for Canvas.xpcMulticast) = 0;
  v2 = (_QWORD *)(v0 + direct field offset for Canvas._editingView);
  *v2 = 0;
  v2[1] = 0;
  *(_QWORD *)(v0 + direct field offset for Canvas._canvasElementController) = 0;
  v3 = direct field offset for Canvas.delayedPreviewProviders;
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + v3) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v5 = direct field offset for Canvas.dropCompletions;
  *(_QWORD *)(v0 + v5) = specialized Dictionary.init(dictionaryLiteral:)(v4);
  *(_BYTE *)(v0 + direct field offset for Canvas.dropSessionType) = 3;
  *(_QWORD *)(v0 + direct field offset for Canvas.scribbleDelegate) = 0;
  *(_QWORD *)(v0 + direct field offset for Canvas.scribbleInteraction) = 0;
  *(_QWORD *)(v0 + direct field offset for Canvas.indirectScribbleInteraction) = 0;
  *(_QWORD *)(v0 + direct field offset for Canvas.pointerDelegate) = 0;
  *(_BYTE *)(v0 + direct field offset for Canvas.dropInteractionSessionIsActive) = 0;
  *(_QWORD *)(v0 + direct field offset for Canvas.dropInteraction) = 0;
  *(_QWORD *)(v0 + direct field offset for Canvas.dropDelegate) = 0;
  *(_QWORD *)(v0 + direct field offset for Canvas.editMenuInteraction) = 0;
  *(_QWORD *)(v0 + direct field offset for Canvas.editMenuInteractionDelegate) = 0;
  v6 = v0 + direct field offset for Canvas.visibleBoundsOverride;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_BYTE *)(v6 + 32) = 1;
  type metadata accessor for Canvas.PaperViewCanvasSubscription();
}

void sub_1DDEB46C4()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)&v1[v2] = Array.init()();
  v1[direct field offset for Canvas.isInUndoableGroup] = 0;
  v1[direct field offset for Canvas.isUndoableGroupNewChange] = 0;
  *(_QWORD *)&v1[direct field offset for Canvas.eraserCheckingIndex] = 0;
  v3 = direct field offset for Canvas.dropTargets;
  *(_QWORD *)&v1[v3] = specialized Dictionary.init(dictionaryLiteral:)(v0);
  v4 = direct field offset for Canvas.stickerDropPreviewInfoMap;
  *(_QWORD *)&v1[v4] = specialized Dictionary.init(dictionaryLiteral:)(v0);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized Canvas.PaperViewCanvasSubscription.init(canvas:live:subscriber:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  swift_unknownObjectWeakInit();
  v6 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 120);
  type metadata accessor for Capsule();
  v7 = type metadata accessor for AnySubscriber();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, a3, v7);
  swift_unknownObjectWeakAssign();
  *(_BYTE *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 136)) = a2;
  return v3;
}

uint64_t sub_1DDEB482C()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t partial apply for closure #5 in AnySubscriber.init<A>(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
  result = dispatch thunk of CustomStringConvertible.description.getter();
  a1[3] = MEMORY[0x1E0DEA968];
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t partial apply for closure #4 in AnySubscriber.init<A>(_:)()
{
  uint64_t v0;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  return dispatch thunk of CustomPlaygroundDisplayConvertible.playgroundDescription.getter();
}

uint64_t partial apply for closure #1 in AnySubscriber.init<A>(_:)()
{
  uint64_t v0;

  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void partial apply for closure #1 in Canvas.canvasStateLiveStreamMessenger.didset(uint64_t a1)
{
  uint64_t v1;

  closure #1 in Canvas.canvasStateLiveStreamMessenger.didset(a1, *(_QWORD *)(v1 + 40));
}

uint64_t sub_1DDEB4938()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for CapsuleUndoAction();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  if (*(_QWORD *)(v0 + v4))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

void partial apply for closure #1 in Canvas.registerUndo(_:selection:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for CapsuleUndoAction() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  Canvas.applyUndo(_:selection:)(v0 + v2, *(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16), *(_BYTE *)(v3 + 24));
}

uint64_t partial apply for closure #1 in Canvas.mergeToCanvasElements()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Canvas.mergeToCanvasElements()(a1, *(_QWORD **)(v1 + 16)) & 1;
}

void specialized Canvas.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSb_TG5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSb_TG5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSb_TG5Tu))(a1, v4);
}

uint64_t sub_1DDEB4ACC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Canvas.dropInteraction(_:item:willAnimateDropWith:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Canvas.dropInteraction(_:item:willAnimateDropWith:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t block_copy_helper_59(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_59()
{
  return swift_release();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed UITargetedDragPreview) -> ()(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t sub_1DDEB4B44()
{
  return 24;
}

__n128 sub_1DDEB4B50(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDEB4B64()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1DDEB4B88()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1DDEB4BAC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in Canvas.dropInteraction(_:performDrop:)(uint64_t a1)
{
  double *v1;

  return closure #2 in Canvas.dropInteraction(_:performDrop:)(a1, v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1DDEB4BE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for CRStableAsset();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in Canvas.dropInteraction(_:performDrop:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  _QWORD *v16;

  v4 = *(_QWORD *)(type metadata accessor for CRStableAsset() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = (uint64_t)v1 + v5;
  v11 = (double *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v12 = *v11;
  v13 = v11[1];
  v14 = v11[2];
  v15 = v11[3];
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v16;
  *v16 = v2;
  v16[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in closure #1 in closure #2 in Canvas.dropInteraction(_:performDrop:)(v12, v13, v14, v15, a1, v6, v7, v8, v9, v10);
}

uint64_t type metadata accessor for Canvas.CanvasHarmonizationError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Canvas.CanvasHarmonizationError);
}

uint64_t sub_1DDEB4D58()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Canvas.harmonizeImage(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[4];
  v5 = v1[5];
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in Canvas.harmonizeImage(_:)(a1, v6, v7, v9, v10, v4, v5, v8);
}

uint64_t sub_1DDEB4E20()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for CRAssetOrData() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  swift_unknownObjectRelease();

  v3 = v0 + v2;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined consume of Data._Representation(*(_QWORD *)v3, *(_QWORD *)(v3 + 8));
    outlined consume of Data._Representation(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
  }
  else
  {
    v4 = type metadata accessor for CRAsset();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v0 + v2, v4);
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Canvas.harmonizeCanvasElement<A>(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(type metadata accessor for CRAssetOrData() - 8);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[10];
  v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in Canvas.harmonizeCanvasElement<A>(_:)(a1, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in closure #1 in Canvas.harmonizeCanvasElement<A>(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in Canvas.harmonizeCanvasElement<A>(_:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #2 in Canvas.createSubCanvasElement(from:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #2 in Canvas.createSubCanvasElement(from:)(a1, *(_QWORD *)(v1 + 32), *(char **)(v1 + 40), *(_QWORD *)(v1 + 48), *(char **)(v1 + 56), *(unsigned __int8 *)(v1 + 64), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #2 in closure #2 in Canvas.createSubCanvasElement(from:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in closure #2 in Canvas.createSubCanvasElement(from:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1DDEB500C()
{
  return 24;
}

__n128 sub_1DDEB5018(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDEB502C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for Capsule();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = v1[4];
  v5 = v1[5];
  v6 = *(_QWORD *)(type metadata accessor for Capsule() - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Date() - 8) + 80);
  v10 = v7 + v8 + v9;
  v11 = v1[2];
  v12 = v1[3];
  v13 = v1[7];
  v14 = (uint64_t)v1 + v7;
  v15 = (uint64_t)v1 + (v10 & ~v9);
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v16;
  *v16 = v2;
  v16[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in Canvas.removeEraserStrokesCreatedBefore(_:)(a1, v11, v12, v13, v14, v15, v4, v5);
}

uint64_t sub_1DDEB51E0()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in Canvas.presentSubelement<A>(_:presentationViewController:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 40), sel_becomeFirstResponder);
}

uint64_t sub_1DDEB5214()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1DDEB5238()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in Canvas.presentSubelement<A>(_:presentationViewController:)(uint64_t a1)
{
  uint64_t *v1;

  closure #2 in Canvas.presentSubelement<A>(_:presentationViewController:)(a1, v1[8], v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1DDEB5270()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1DDEB529C()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in Canvas.setupBandSelection()(void *a1)
{
  uint64_t v1;

  closure #1 in Canvas.setupBandSelection()(a1, *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1DDEB52E0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in Canvas.setupBandSelection()(uint64_t a1, double a2, double a3)
{
  uint64_t v3;

  return closure #2 in Canvas.setupBandSelection()(a2, a3, a1, *(_QWORD *)(v3 + 40));
}

uint64_t partial apply for closure #1 in Canvas.mathAddGraph(forExpression:range:identifier:expressionLocation:addToExisting:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Canvas.mathAddGraph(forExpression:range:identifier:expressionLocation:addToExisting:)(*(double *)(v1 + 24), *(double *)(v1 + 32), *(double *)(v1 + 40), *(CGFloat *)(v1 + 48), *(CGFloat *)(v1 + 56), *(CGFloat *)(v1 + 64), a1, *(__int128 **)(v1 + 16), *(_QWORD *)(v1 + 72));
}

uint64_t partial apply for closure #1 in Canvas.canvasCalculateSetShouldSolve(_:stroke:flag:undoable:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Canvas.canvasCalculateSetShouldSolve(_:stroke:flag:undoable:)(a1, *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_BYTE **)(v1 + 56));
}

void partial apply for closure #2 in Canvas.imageOf(canvasElementViews:in:)(CGFloat *a1@<X0>, id *a2@<X1>, CGRect *a3@<X8>)
{
  uint64_t v3;

  closure #2 in Canvas.imageOf(canvasElementViews:in:)(a1, a2, *(void **)(v3 + 16), a3);
}

uint64_t sub_1DDEB538C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void partial apply for closure #3 in Canvas.imageOf(canvasElementViews:in:)(void *a1)
{
  uint64_t v1;

  closure #3 in Canvas.imageOf(canvasElementViews:in:)(a1, *(id **)(v1 + 16), *(CGRect **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD **)(v1 + 40));
}

uint64_t sub_1DDEB53C4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Canvas.canvasElementBounds(_:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in Canvas.canvasElementBounds(_:)(a1);
}

uint64_t partial apply for closure #2 in Canvas.createNewPaper(from:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in Canvas.createNewPaper(from:)(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(unsigned __int8 *)(v1 + 56));
}

uint64_t partial apply for closure #1 in closure #2 in Canvas.createNewPaper(from:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #2 in Canvas.createSubCanvasElement(from:)(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_1DDEB5470()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in closure #3 in Canvas.pasteboardRepresentations(_:)(int a1)
{
  uint64_t v1;

  return closure #1 in closure #3 in Canvas.pasteboardRepresentations(_:)(a1, *(id *)(v1 + 16), *(double *)(v1 + 24), *(void **)(v1 + 40));
}

uint64_t sub_1DDEB54AC()
{
  return swift_deallocObject();
}

uint64_t sub_1DDEB54BC()
{
  return objectdestroy_209Tm((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
}

uint64_t partial apply for closure #1 in Canvas.itemProvider(for:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in Canvas.itemProvider(for:)(a1, a2, closure #1 in Canvas.itemProvider(for:));
}

uint64_t sub_1DDEB54D4()
{
  return objectdestroy_209Tm((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
}

uint64_t partial apply for closure #2 in Canvas.itemProvider(for:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in Canvas.itemProvider(for:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #2 in Canvas.itemProvider(for:));
}

uint64_t partial apply for closure #1 in Canvas.itemProvider(for:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v6;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>)
                                      - 8)
                          + 80);
  return a3(a1, a2, v3 + ((v6 + 16) & ~v6));
}

uint64_t sub_1DDEB554C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSItemProviderWriting?, @unowned NSError?) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSItemProviderWriting?, @unowned NSError?) -> ()(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1DDEB5578()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in Canvas.itemProvider(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>)
                 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = (uint64_t *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v10 = *v9;
  v11 = v9[1];
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in closure #1 in Canvas.itemProvider(for:)(a1, v6, v7, v8, v10, v11);
}

uint64_t partial apply for closure #1 in Canvas.transformStrokes(_:)()
{
  uint64_t v0;

  return closure #1 in Canvas.transformStrokes(_:)(*(_QWORD **)(v0 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in Canvas.transformStrokes(_:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in Canvas.transformStrokes(_:)(a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in Canvas.mergeUndoable<A>(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v5;

  v1 = v0[2];
  v2 = v0[3];
  v3 = v0[5];
  v5 = 3;
  return AnyCanvas.merge<A>(_:from:)(v3, &v5, v1, v2);
}

void partial apply for closure #1 in Canvas.startCheckingForOldEraserStrokes()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in Canvas.startCheckingForOldEraserStrokes()(a1, *(_QWORD *)(v1 + 40));
}

uint64_t sub_1DDEB572C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for PKDrawing();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in Canvas.hide(strokes:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PKDrawing() - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v9 = (uint64_t)v1 + ((v4 + 48) & ~v4);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #2 in Canvas.hide(strokes:)(a1, v5, v6, v7, v8, v9);
}

uint64_t partial apply for closure #1 in Canvas.hide(weakStrokes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in Canvas.hide(weakStrokes:)(a1, *(_QWORD *)(v2 + 16), a2);
}

void partial apply for closure #1 in Canvas.addWords(_:layout:)()
{
  uint64_t v0;

  closure #1 in Canvas.addWords(_:layout:)(*(_QWORD *)(v0 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in Canvas.addWords(_:layout:)(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in Canvas.addWords(_:layout:)(a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in Canvas.addWords(_:layout:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #1 in Canvas.addWords(_:layout:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in Canvas.showOrHideContent(below:)(uint64_t a1)
{
  return partial apply for closure #1 in Canvas.showOrHideContent(below:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, double, double))closure #1 in Canvas.showOrHideContent(below:));
}

uint64_t partial apply for closure #2 in Canvas.showOrHideContent(below:)(uint64_t a1)
{
  return partial apply for closure #1 in Canvas.showOrHideContent(below:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, double, double))closure #2 in Canvas.showOrHideContent(below:));
}

uint64_t partial apply for closure #1 in Canvas.showOrHideContent(below:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, double, double))
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(double *)(v2 + 32), *(double *)(v2 + 40));
}

uint64_t partial apply for closure #1 in closure #2 in Canvas.showOrHideContent(below:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #2 in Canvas.showOrHideContent(below:)(*(double *)(v1 + 40), *(CGFloat *)(v1 + 48), a1, *(_QWORD *)(v1 + 32), *(char **)(v1 + 56));
}

void partial apply for closure #1 in closure #1 in Canvas.showOrHideContent(below:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #1 in Canvas.showOrHideContent(below:)(*(double *)(v1 + 40), *(CGFloat *)(v1 + 48), a1, *(_QWORD *)(v1 + 32), *(_BYTE **)(v1 + 56));
}

uint64_t sub_1DDEB593C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1DDEB5960()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in Canvas.addCanvasElement<A>(_:setSelected:dragItem:harmonize:)()
{
  uint64_t v0;

  return closure #3 in Canvas.addCanvasElement<A>(_:setSelected:dragItem:harmonize:)(*(void **)(v0 + 16));
}

uint64_t partial apply for closure #1 in Canvas.addCanvasElement<A>(_:setSelected:dragItem:harmonize:)()
{
  return closure #1 in Canvas.addCanvasElement<A>(_:setSelected:dragItem:harmonize:)();
}

void sub_1DDEB5998(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(double *)a3 = (*(double (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + a1 - 8) + 8) + 8))(*(_QWORD *)(a2 + a1 - 40));
  *(_QWORD *)(a3 + 8) = v4;
  *(_QWORD *)(a3 + 16) = v5;
  *(_QWORD *)(a3 + 24) = v6;
}

uint64_t sub_1DDEB59DC(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, double, double, double, double))(*(_QWORD *)(a4 + a3 - 8) + 16))(*(_QWORD *)(a4 + a3 - 40), *(_QWORD *)(a4 + a3 - 8), *a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1DDEB5A1C()
{
  return 48;
}

__n128 sub_1DDEB5A28(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

void sub_1DDEB5A3C(uint64_t a1@<X1>, uint64_t a2@<X2>, double *a3@<X8>)
{
  *a3 = (*(double (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 32))(*(_QWORD *)(a2 + a1 - 40));
}

uint64_t sub_1DDEB5A78(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, double))(*(_QWORD *)(a4 + a3 - 8) + 40))(*(_QWORD *)(a4 + a3 - 40), *(_QWORD *)(a4 + a3 - 8), *a1);
}

uint64_t sub_1DDEB5AB4()
{
  return 48;
}

__n128 sub_1DDEB5AC0(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

id partial apply for closure #1 in closure #3 in Canvas.addCanvasElement<A>(_:setSelected:dragItem:harmonize:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_setAlpha_, 1.0);
}

uint64_t sub_1DDEB5AE8()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in Canvas.applyUndo(_:selection:)()
{
  uint64_t v0;

  closure #1 in Canvas.applyUndo(_:selection:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t partial apply for closure #1 in Canvas.addFlags(_:strokeFlags:to:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in Canvas.addFlags(_:strokeFlags:to:)(a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(unsigned __int8 *)(v1 + 56), *(_QWORD *)(v1 + 64), *(char **)(v1 + 72), *(char **)(v1 + 16), *(char **)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in Canvas.addFlags(_:strokeFlags:to:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in Canvas.addFlags(_:strokeFlags:to:)(a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1DDEB5B40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Canvas.removeImageBackground(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>)
                 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(_QWORD *)(v1 + 24);
  v9 = v1 + v5;
  v10 = *(_QWORD *)(v1 + v6);
  v11 = *(_QWORD *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in Canvas.removeImageBackground(for:)(a1, v7, v8, v9, v10, v11);
}

uint64_t sub_1DDEB5CC0()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in Canvas.removeImageBackground(for:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #2 in Canvas.removeImageBackground(for:)(a1, v4, v5, v6);
}

void partial apply for closure #1 in closure #1 in Canvas.removeImageBackground(for:)(uint64_t a1)
{
  closure #1 in closure #1 in Canvas.removeImageBackground(for:)(a1);
}

uint64_t partial apply for closure #2 in closure #1 in Canvas.removeImageBackground(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  CGImage *v5;
  __int128 v6;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(CGImage **)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v6 = *(_OWORD *)(v1 + 72);
  v9 = *(_OWORD *)(v1 + 56);
  v10 = v6;
  return closure #2 in closure #1 in Canvas.removeImageBackground(for:)(a1, v2, v3, v4, v5, (double *)&v8);
}

uint64_t sub_1DDEB5D9C()
{
  return objectdestroy_209Tm(&demangling cache variable for type metadata for CheckedContinuation<(CGImageRef?, CGRect), Error>);
}

uint64_t objectdestroy_209Tm(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80)), v2);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in Canvas.removeImageBackground(for:)(void *a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(CGImageRef?, CGRect), Error>);
  return closure #1 in closure #1 in closure #1 in Canvas.removeImageBackground(for:)(a1, a2);
}

uint64_t sub_1DDEB5E84()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Canvas.selectedShapes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in Canvas.selectedShapes.getter(*(_QWORD **)(v1 + 16), a1);
}

void partial apply for closure #1 in Canvas.canvasDescription.setter()
{
  uint64_t v0;

  closure #1 in Canvas.addWords(_:layout:)(*(_QWORD *)(v0 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in Canvas.canvasDescription.setter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in Canvas.canvasDescription.setter(a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t partial apply for closure #1 in Canvas.align(members:to:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Canvas.align(members:to:)(a1, *(_QWORD *)(v1 + 32), *(CGFloat *)(v1 + 64), *(CGFloat *)(v1 + 72), *(CGFloat *)(v1 + 80), *(CGFloat *)(v1 + 88), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(unsigned __int8 *)(v1 + 56), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void partial apply for closure #1 in closure #1 in Canvas.align(members:to:)(CGFloat *a1@<X0>, CGFloat *a2@<X8>)
{
  closure #1 in closure #1 in Canvas.align(members:to:)(a1, a2);
}

uint64_t partial apply for closure #1 in Canvas.transformStrokes(_:with:concat:)(_QWORD *a1)
{
  uint64_t v1;

  return static PKDrawingStruct.transformStrokes<A>(_:with:concat:in:)(*(_QWORD *)(v1 + 32), *(CGFloat **)(v1 + 40), *(unsigned __int8 *)(v1 + 48), a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in PaperTextAttachmentView.endLiveResize(discard:)()
{
  return closure #1 in closure #1 in PaperTextAttachmentView.endLiveResize(discard:)();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSay8PaperKit0D18DocumentFindResultVG_TG5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSay8PaperKit0D18DocumentFindResultVG_TG5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRSay8PaperKit0D18DocumentFindResultVG_TG5Tu))(a1, v4);
}

uint64_t partial apply for closure #1 in closure #1 in Canvas.undoablyAdd(_:to:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in Canvas.undoablyAdd(_:to:)(a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

void partial apply for closure #1 in Canvas.liveStreamMessenger.didset(uint64_t a1)
{
  uint64_t *v1;

  closure #1 in Canvas.liveStreamMessenger.didset(a1, v1[5], v1[2], v1[3]);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRytSg_TG5Tu))(a1, v4);
}

uint64_t storeEnumTagSinglePayload for Canvas.CanvasHarmonizationError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1DDEB6100 + 4 * byte_1DDF46485[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1DDEB6134 + 4 * byte_1DDF46480[v4]))();
}

uint64_t sub_1DDEB6134(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDEB613C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDEB6144);
  return result;
}

uint64_t sub_1DDEB6150(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDEB6158);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1DDEB615C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDEB6164(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void base witness table accessor for Equatable in Canvas<A>.CanvasHarmonizationError()
{
  JUMPOUT(0x1DF0E6450);
}

uint64_t partial apply for closure #1 in closure #2 in Canvas.createSubCanvasElement(from:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #2 in Canvas.createNewPaper(from:)(a1) & 1;
}

uint64_t closure #1 in CalculateResultAttributionHandler.init()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[2] = a1;
  type metadata accessor for MainActor();
  v1[3] = static MainActor.shared.getter();
  v1[4] = dispatch thunk of Actor.unownedExecutor.getter();
  v1[5] = v2;
  return swift_task_switch();
}

uint64_t closure #1 in CalculateResultAttributionHandler.init()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  type metadata accessor for StocksKitCurrencyCache();
  *(_QWORD *)(v0 + 48) = static StocksKitCurrencyCache.shared.getter();
  v3 = (uint64_t (*)(void))((int)*MEMORY[0x1E0D09E18] + MEMORY[0x1E0D09E18]);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  *v1 = v0;
  v1[1] = closure #1 in CalculateResultAttributionHandler.init();
  return v3();
}

{
  uint64_t v0;
  char v1;
  _BYTE *v2;

  v1 = *(_BYTE *)(v0 + 64);
  v2 = *(_BYTE **)(v0 + 16);
  swift_release();
  *v2 = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in CalculateResultAttributionHandler.init()(char a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(*(_QWORD *)v1 + 48);
  *(_BYTE *)(*(_QWORD *)v1 + 64) = a1;
  swift_task_dealloc();

  return swift_task_switch();
}

uint64_t type metadata accessor for CalculateResultAttributionHandler()
{
  return objc_opt_self();
}

uint64_t specialized CalculateResultAttributionHandler.lightModeImage()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[2] = v0;
  v1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<ColorScheme>);
  v1[4] = swift_task_alloc();
  v2 = type metadata accessor for ColorScheme();
  v1[5] = v2;
  v1[6] = *(_QWORD *)(v2 - 8);
  v1[7] = swift_task_alloc();
  v1[8] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<ColorScheme>>);
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StocksKitCurrencyCache.Provider?);
  v1[11] = swift_task_alloc();
  type metadata accessor for MainActor();
  v1[12] = static MainActor.shared.getter();
  v1[13] = dispatch thunk of Actor.unownedExecutor.getter();
  v1[14] = v3;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v3;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 16) + 16))
  {
    swift_release();
    v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
  }
  else
  {
    type metadata accessor for StocksKitCurrencyCache();
    *(_QWORD *)(v0 + 120) = static StocksKitCurrencyCache.shared.getter();
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v3;
    *v3 = v0;
    v3[1] = specialized CalculateResultAttributionHandler.lightModeImage();
    return StocksKitCurrencyCache.provider.getter();
  }
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 120);
  swift_task_dealloc();

  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t KeyPath;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 88);
  swift_release();
  v2 = type metadata accessor for StocksKitCurrencyCache.Provider();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  v5 = *(_QWORD *)(v0 + 88);
  if (v4 == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 88), &demangling cache variable for type metadata for StocksKitCurrencyCache.Provider?);
  }
  else
  {
    v6 = StocksKitCurrencyCache.Provider.logo.getter();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v2);
    if (v6)
    {
      v7 = *(uint64_t **)(v0 + 80);
      v8 = *(_QWORD *)(v0 + 56);
      v9 = *(_QWORD *)(v0 + 64);
      v10 = *(_QWORD *)(v0 + 40);
      v11 = *(_QWORD *)(v0 + 48);
      v12 = *(_QWORD *)(v0 + 24);
      v13 = *(uint64_t **)(v0 + 32);
      v20 = *(_QWORD *)(v0 + 72);
      v21 = *(_QWORD *)(v0 + 16);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 104))(v8, *MEMORY[0x1E0CD86E0], v10);
      KeyPath = swift_getKeyPath();
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v13 + *(int *)(v12 + 28), v8, v10);
      *v13 = KeyPath;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v13, (uint64_t)v7 + *(int *)(v9 + 36), &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<ColorScheme>);
      *v7 = v6;
      swift_retain();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<ColorScheme>);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v8, v10);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v7, v20, &demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<ColorScheme>>);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageRenderer<ModifiedContent<Image, _EnvironmentKeyWritingModifier<ColorScheme>>>);
      swift_allocObject();
      ImageRenderer.init(content:)();
      v15 = objc_msgSend((id)objc_opt_self(), sel_mainScreen);
      objc_msgSend(v15, sel_scale);

      ImageRenderer.scale.setter();
      v16 = ImageRenderer.uiImage.getter();
      swift_release();
      swift_release();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<ColorScheme>>);
      v17 = *(void **)(v21 + 16);
      *(_QWORD *)(v21 + 16) = v16;

    }
  }
  v18 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v18);
}

uint64_t specialized CalculateResultAttributionHandler.darkModeImage()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[2] = v0;
  v1[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<ColorScheme>);
  v1[4] = swift_task_alloc();
  v2 = type metadata accessor for ColorScheme();
  v1[5] = v2;
  v1[6] = *(_QWORD *)(v2 - 8);
  v1[7] = swift_task_alloc();
  v1[8] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<ColorScheme>>);
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StocksKitCurrencyCache.Provider?);
  v1[11] = swift_task_alloc();
  type metadata accessor for MainActor();
  v1[12] = static MainActor.shared.getter();
  v1[13] = dispatch thunk of Actor.unownedExecutor.getter();
  v1[14] = v3;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v3;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 16) + 24))
  {
    swift_release();
    v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
  }
  else
  {
    type metadata accessor for StocksKitCurrencyCache();
    *(_QWORD *)(v0 + 120) = static StocksKitCurrencyCache.shared.getter();
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v3;
    *v3 = v0;
    v3[1] = specialized CalculateResultAttributionHandler.darkModeImage();
    return StocksKitCurrencyCache.provider.getter();
  }
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 120);
  swift_task_dealloc();

  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t KeyPath;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 88);
  swift_release();
  v2 = type metadata accessor for StocksKitCurrencyCache.Provider();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  v5 = *(_QWORD *)(v0 + 88);
  if (v4 == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 88), &demangling cache variable for type metadata for StocksKitCurrencyCache.Provider?);
  }
  else
  {
    v6 = StocksKitCurrencyCache.Provider.logo.getter();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v2);
    if (v6)
    {
      v7 = *(uint64_t **)(v0 + 80);
      v8 = *(_QWORD *)(v0 + 56);
      v9 = *(_QWORD *)(v0 + 64);
      v10 = *(_QWORD *)(v0 + 40);
      v11 = *(_QWORD *)(v0 + 48);
      v12 = *(_QWORD *)(v0 + 24);
      v13 = *(uint64_t **)(v0 + 32);
      v20 = *(_QWORD *)(v0 + 72);
      v21 = *(_QWORD *)(v0 + 16);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 104))(v8, *MEMORY[0x1E0CD86D0], v10);
      KeyPath = swift_getKeyPath();
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v13 + *(int *)(v12 + 28), v8, v10);
      *v13 = KeyPath;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v13, (uint64_t)v7 + *(int *)(v9 + 36), &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<ColorScheme>);
      *v7 = v6;
      swift_retain();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for _EnvironmentKeyWritingModifier<ColorScheme>);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v8, v10);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v7, v20, &demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<ColorScheme>>);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ImageRenderer<ModifiedContent<Image, _EnvironmentKeyWritingModifier<ColorScheme>>>);
      swift_allocObject();
      ImageRenderer.init(content:)();
      v15 = objc_msgSend((id)objc_opt_self(), sel_mainScreen);
      objc_msgSend(v15, sel_scale);

      ImageRenderer.scale.setter();
      v16 = ImageRenderer.uiImage.getter();
      swift_release();
      swift_release();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for ModifiedContent<Image, _EnvironmentKeyWritingModifier<ColorScheme>>);
      v17 = *(void **)(v21 + 24);
      *(_QWORD *)(v21 + 24) = v16;

    }
  }
  v18 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v18);
}

uint64_t sub_1DDEB6E18()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_1DDEB6E3C()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CalculateResultAttributionHandler.init()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in CalculateResultAttributionHandler.init()(a1);
}

uint64_t closure #1 in SynapseLinkingEngine.fetchLinkableItems(limit:excluding:completion:)(unint64_t a1, id a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  unint64_t v8;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint8_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  objc_class *v30;
  char *v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  void (*v44)(_QWORD);
  objc_super v46;
  unint64_t v47;

  v8 = a1;
  if (a2)
  {
    v10 = a2;
    if (one-time initialization token for logger != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)logger);
    v12 = a2;
    v13 = a2;
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      v47 = v17;
      *(_DWORD *)v16 = 136315138;
      swift_getErrorValue();
      v18 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, (uint64_t *)&v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1DDB0F000, v14, v15, "%s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v17, -1, -1);
      v20 = v16;
      v8 = a1;
      MEMORY[0x1DF0E6558](v20, -1, -1);

    }
    else
    {

    }
  }
  v21 = MEMORY[0x1E0DEE9D8];
  if (!v8)
    goto LABEL_17;
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = a1;
    v22 = _CocoaArrayWrapper.endIndex.getter();
    if (v22)
      goto LABEL_10;
  }
  else
  {
    v22 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v22)
    {
LABEL_10:
      v47 = v21;
      v23 = (uint64_t *)&v47;
      specialized ContiguousArray.reserveCapacity(_:)();
      if ((v22 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v43 = a3;
      v44 = a5;
      v24 = (void *)objc_opt_self();
      v25 = 0;
      v26 = v8 & 0xC000000000000001;
      v27 = *MEMORY[0x1E0DB0760];
      do
      {
        if (v26)
          v28 = (id)MEMORY[0x1DF0E4D64](v25, v8);
        else
          v28 = *(id *)(v8 + 8 * v25 + 32);
        v29 = v28;
        ++v25;
        v30 = (objc_class *)type metadata accessor for SynapseLinkItem();
        v31 = (char *)objc_allocWithZone(v30);
        *(_QWORD *)&v31[OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_delegate + 8] = 0;
        swift_unknownObjectWeakInit();
        *(_QWORD *)&v31[OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem] = v29;
        v46.receiver = v31;
        v46.super_class = v30;
        v32 = v29;
        v33 = objc_msgSendSuper2(&v46, sel_init);
        v34 = objc_msgSend(v24, sel_defaultCenter);
        objc_msgSend(v34, sel_addObserver_selector_name_object_, v33, sel_linkPreviewDidFinishLoadingWithNotification_, v27, v32);

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v8 = a1;
      }
      while (v22 != v25);
      v21 = v47;
      swift_bridgeObjectRelease();
      a3 = v43;
      a5 = v44;
LABEL_17:
      if ((a4 & 1) == 0)
        goto LABEL_18;
LABEL_29:
      v41 = specialized _arrayForceCast<A, B>(_:)(v21);
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRelease();
  if ((a4 & 1) != 0)
    goto LABEL_29;
LABEL_18:
  v23 = (uint64_t *)specialized Collection.prefix(_:)(a3, v21, (void (*)(_QWORD))type metadata accessor for SynapseLinkItem);
  a3 = v35;
  a4 = v36;
  v22 = v37;
  swift_bridgeObjectRelease();
  if ((v22 & 1) != 0)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    v39 = swift_dynamicCastClass();
    if (!v39)
    {
      swift_unknownObjectRelease();
      v39 = MEMORY[0x1E0DEE9D8];
    }
    v40 = *(_QWORD *)(v39 + 16);
    swift_release();
    if (!__OFSUB__(v22 >> 1, a4))
    {
      if (v40 == (v22 >> 1) - a4)
      {
        v38 = swift_dynamicCastClass();
        if (!v38)
        {
          swift_unknownObjectRelease();
          v38 = MEMORY[0x1E0DEE9D8];
        }
        goto LABEL_26;
      }
      goto LABEL_33;
    }
LABEL_32:
    __break(1u);
LABEL_33:
    swift_unknownObjectRelease();
  }
  v38 = specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v23, a3, a4, v22);
LABEL_26:
  swift_unknownObjectRelease();
  v41 = specialized _arrayForceCast<A, B>(_:)(v38);
  swift_release();
LABEL_30:
  a5(v41);
  return swift_bridgeObjectRelease();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [SYContentItem]?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  id v6;

  v4 = a2;
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for SYContentItem);
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for SynapseLinkingEngine()
{
  return objc_opt_self();
}

uint64_t protocol witness for LinkingEngine.delegate.setter in conformance SynapseLinkingEngine(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit20SynapseLinkingEngine_delegate + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void protocol witness for LinkingEngine.fetchLinkableItems(limit:excluding:completion:) in conformance SynapseLinkingEngine(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v10;
  Class isa;
  uint64_t v12;
  void *v13;
  _QWORD v14[6];

  v10 = *(void **)(v5 + OBJC_IVAR____TtC8PaperKit20SynapseLinkingEngine_engine);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSUserActivity);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a1;
  *(_BYTE *)(v12 + 24) = a2 & 1;
  *(_QWORD *)(v12 + 32) = a4;
  *(_QWORD *)(v12 + 40) = a5;
  v14[4] = partial apply for closure #1 in SynapseLinkingEngine.fetchLinkableItems(limit:excluding:completion:);
  v14[5] = v12;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1107296256;
  v14[2] = thunk for @escaping @callee_guaranteed (@guaranteed [SYContentItem]?, @guaranteed Error?) -> ();
  v14[3] = &block_descriptor_60;
  v13 = _Block_copy(v14);
  swift_retain();
  swift_release();
  objc_msgSend(v10, sel_fetchLinkableContentItemsExcludingActivities_completion_, isa, v13);
  _Block_release(v13);

}

uint64_t sub_1DDEB778C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SynapseLinkingEngine.fetchLinkableItems(limit:excluding:completion:)(unint64_t a1, void *a2)
{
  uint64_t v2;

  return closure #1 in SynapseLinkingEngine.fetchLinkableItems(limit:excluding:completion:)(a1, a2, *(_QWORD *)(v2 + 16), *(unsigned __int8 *)(v2 + 24), *(void (**)(_QWORD))(v2 + 32));
}

uint64_t block_copy_helper_60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_60()
{
  return swift_release();
}

uint64_t specialized Collection.prefix(_:)(uint64_t a1, unint64_t a2)
{
  return specialized Collection.prefix(_:)(a1, a2, (void (*)(_QWORD))type metadata accessor for ReflowElement);
}

uint64_t specialized Collection.prefix(_:)(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    return String.subscript.getter();
  }
  return result;
}

uint64_t specialized Collection.prefix(_:)(uint64_t result, unint64_t a2, void (*a3)(_QWORD))
{
  unint64_t v3;
  uint64_t v4;
  void (*v5)(_QWORD);
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = a3;
    v3 = a2;
    v4 = result;
    v6 = a2 >> 62;
    if (!(a2 >> 62))
    {
      v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
LABEL_4:
  if (v7 >= v4)
    v8 = v4;
  else
    v8 = v7;
  if (v7 < 0)
    v8 = v4;
  if (v4)
    v9 = v8;
  else
    v9 = 0;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v11 < 0)
    {
LABEL_28:
      __break(1u);
      return result;
    }
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
  }
  else
  {
    v10 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v10 < v9)
  {
    __break(1u);
    goto LABEL_28;
  }
  if ((v3 & 0xC000000000000001) != 0 && v9)
  {
    v5(0);
    v12 = 0;
    do
    {
      v13 = v12 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v12);
      v12 = v13;
    }
    while (v9 != v13);
  }
  if (v6)
  {
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.subscript.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  return v14;
}

uint64_t NoLinkingEngine.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of weak AnyContainerCanvasElementView?(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NoLinkingEngine()
{
  return objc_opt_self();
}

uint64_t protocol witness for LinkingEngine.delegate.setter in conformance NoLinkingEngine(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for LinkingEngine.fetchLinkableItems(limit:excluding:completion:) in conformance NoLinkingEngine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  return a4(MEMORY[0x1E0DEE9D8]);
}

Swift::Void __swiftcall TextToolListViewController.viewDidLoad()()
{
  char *v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  double v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  Class isa;
  id v34;
  objc_super v35;

  v1 = v0;
  v35.receiver = v0;
  v35.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v35, sel_viewDidLoad);
  v2 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_stackView];
  objc_msgSend(v2, sel_setAxis_, 1);
  objc_msgSend(v2, sel_setDistribution_, 0);
  objc_msgSend(v2, sel_setAlignment_, 0);
  objc_msgSend(v2, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v3 = objc_msgSend(v1, sel_view);
  if (!v3)
  {
    __break(1u);
    goto LABEL_8;
  }
  v4 = v3;
  objc_msgSend(v3, sel_addSubview_, v2);

  v5 = objc_msgSend(v2, sel_bottomAnchor);
  v6 = objc_msgSend(v1, sel_view);
  if (!v6)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v7 = v6;
  v8 = objc_msgSend(v6, sel_safeAreaLayoutGuide);

  v9 = objc_msgSend(v8, sel_bottomAnchor);
  v10 = objc_msgSend(v5, sel_constraintEqualToAnchor_, v9);

  LODWORD(v11) = 1144750080;
  objc_msgSend(v10, sel_setPriority_, v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1DDF329D0;
  v13 = objc_msgSend(v2, sel_topAnchor);
  v14 = objc_msgSend(v1, sel_view);
  if (!v14)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v15 = v14;
  v16 = objc_msgSend(v14, sel_safeAreaLayoutGuide);

  v17 = objc_msgSend(v16, sel_topAnchor);
  v18 = objc_msgSend(v13, sel_constraintEqualToAnchor_, v17);

  *(_QWORD *)(v12 + 32) = v18;
  *(_QWORD *)(v12 + 40) = v10;
  v19 = v10;
  v20 = objc_msgSend(v2, sel_leadingAnchor);
  v21 = objc_msgSend(v1, sel_view);
  if (!v21)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v22 = v21;
  v23 = objc_msgSend(v21, sel_safeAreaLayoutGuide);

  v24 = objc_msgSend(v23, sel_leadingAnchor);
  v25 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v24);

  *(_QWORD *)(v12 + 48) = v25;
  v26 = objc_msgSend(v2, sel_trailingAnchor);
  v27 = objc_msgSend(v1, sel_view);
  if (v27)
  {
    v28 = v27;
    v29 = (void *)objc_opt_self();
    v30 = objc_msgSend(v28, sel_safeAreaLayoutGuide);

    v31 = objc_msgSend(v30, sel_trailingAnchor);
    v32 = objc_msgSend(v26, sel_constraintEqualToAnchor_, v31);

    *(_QWORD *)(v12 + 56) = v32;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v29, sel_activateConstraints_, isa);

    TextToolListViewController.updateUI()();
    v34 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
    objc_msgSend(v34, sel_addObserver_selector_name_object_, v1, sel_updatePreferredContentSize, *MEMORY[0x1E0DC48E8], 0);

    return;
  }
LABEL_11:
  __break(1u);
}

unint64_t TextToolListViewController.updateUI()()
{
  char *v0;
  char *v1;
  unint64_t result;
  void *v3;
  id v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  id v14;
  objc_class *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  id v28;
  void *v29;
  id v30;
  char v31;
  double v32;
  objc_super v33;

  v1 = v0;
  result = (unint64_t)objc_msgSend(v0, sel_isViewLoaded);
  if (!(_DWORD)result)
    return result;
  v3 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_stackView];
  v4 = objc_msgSend(v3, sel_arrangedSubviews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v6 = result;
    if (!result)
      goto LABEL_11;
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (!v6)
      goto LABEL_11;
  }
  if (v6 < 1)
  {
    __break(1u);
LABEL_42:
    __break(1u);
    return result;
  }
  for (i = 0; i != v6; ++i)
  {
    if ((v5 & 0xC000000000000001) != 0)
      v8 = (id)MEMORY[0x1DF0E4D64](i, v5);
    else
      v8 = *(id *)(v5 + 8 * i + 32);
    v9 = v8;
    objc_msgSend(v8, sel_removeFromSuperview);

  }
LABEL_11:
  swift_bridgeObjectRelease_n();
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___listItemViews] = TextToolListViewController.configuredListItemViews()();
  swift_bridgeObjectRelease();
  result = TextToolListViewController.listItemViews.getter();
  v10 = result;
  if (result >> 62)
    goto LABEL_36;
  v11 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v11)
  {
    do
    {
      if (v11 < 1)
        goto LABEL_42;
      v12 = 0;
      v13 = *(double *)&v1[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_minimumItemHeight];
      while (1)
      {
        v19 = (v10 & 0xC000000000000001) != 0
            ? (id)MEMORY[0x1DF0E4D64](v12, v10)
            : *(id *)(v10 + 8 * v12 + 32);
        v20 = v19;
        v21 = objc_msgSend(v19, sel_heightAnchor);
        v22 = objc_msgSend(v21, sel_constraintGreaterThanOrEqualToConstant_, v13);

        objc_msgSend(v22, sel_setActive_, 1);
        objc_msgSend(v20, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
        objc_msgSend(v3, sel_addArrangedSubview_, v20);
        v23 = v20;
        v24 = TextToolListViewController.listItemViews.getter();
        if (v24 >> 62)
        {
          v25 = _CocoaArrayWrapper.endIndex.getter();
          if (!v25)
          {
LABEL_15:

            swift_bridgeObjectRelease();
LABEL_16:
            v14 = objc_msgSend((id)objc_opt_self(), sel_separatorColor);
            v15 = (objc_class *)type metadata accessor for SeparatorView();
            v33.receiver = objc_allocWithZone(v15);
            v33.super_class = v15;
            v16 = objc_msgSendSuper2(&v33, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
            objc_msgSend(v16, sel_setBackgroundColor_, v14);

            objc_msgSend(v16, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
            v17 = objc_msgSend(v16, sel_heightAnchor);
            v18 = objc_msgSend(v17, sel_constraintEqualToConstant_, 1.0);

            objc_msgSend(v18, sel_setActive_, 1);
            objc_msgSend(v3, sel_addArrangedSubview_, v16);

            goto LABEL_17;
          }
        }
        else
        {
          v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (!v25)
            goto LABEL_15;
        }
        v26 = __OFSUB__(v25, 1);
        v27 = v25 - 1;
        if (v26)
          break;
        if ((v24 & 0xC000000000000001) != 0)
        {
          v28 = (id)MEMORY[0x1DF0E4D64](v27, v24);
        }
        else
        {
          if ((v27 & 0x8000000000000000) != 0)
            goto LABEL_34;
          if (v27 >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_35;
          v28 = *(id *)(v24 + 8 * v27 + 32);
        }
        v29 = v28;
        swift_bridgeObjectRelease();
        type metadata accessor for TextToolListItemView();
        v30 = v23;
        v31 = static NSObject.== infix(_:_:)();

        if ((v31 & 1) == 0)
          goto LABEL_16;
LABEL_17:
        ++v12;

        if (v11 == v12)
          goto LABEL_37;
      }
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      result = _CocoaArrayWrapper.endIndex.getter();
      v11 = result;
    }
    while (result);
  }
LABEL_37:
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_systemLayoutSizeFittingSize_, *MEMORY[0x1E0DC4FF8], *(double *)(MEMORY[0x1E0DC4FF8] + 8));
  if (*(double *)&v1[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_minimumPreferredContentSizeWidth] > v32)
    v32 = *(double *)&v1[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_minimumPreferredContentSizeWidth];
  return (unint64_t)objc_msgSend(v1, sel_setPreferredContentSize_, v32);
}

void TextToolListViewController.addStickerListItemVisible.didset(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _BYTE v8[24];
  ValueMetadata *v9;
  unint64_t v10;

  v2 = OBJC_IVAR____TtC8PaperKit26TextToolListViewController_addStickerListItemVisible;
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit26TextToolListViewController_addStickerListItemVisible) != (a1 & 1))
  {
    v9 = &type metadata for VisualIntelligenceFeatureFlags;
    v10 = lazy protocol witness table accessor for type VisualIntelligenceFeatureFlags and conformance VisualIntelligenceFeatureFlags();
    v3 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
    if ((v3 & 1) != 0)
    {
      TextToolListViewController.updateUI()();
    }
    else
    {
      *(_BYTE *)(v1 + v2) = 0;
      if (one-time initialization token for logger != -1)
        swift_once();
      v4 = type metadata accessor for Logger();
      __swift_project_value_buffer(v4, (uint64_t)logger);
      v5 = Logger.logObject.getter();
      v6 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v5, v6))
      {
        v7 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v7 = 0;
        _os_log_impl(&dword_1DDB0F000, v5, v6, "TextTool: Can't change Add Sticker element visibility if feature flag is disabled.", v7, 2u);
        MEMORY[0x1DF0E6558](v7, -1, -1);
      }

    }
  }
}

uint64_t TextToolListViewController.listItemViews.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___listItemViews))
  {
    v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___listItemViews);
  }
  else
  {
    v1 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___listItemViews) = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TextToolListViewController.configuredListItemViews()()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  char v3;
  uint64_t v5;

  v1 = v0;
  v5 = MEMORY[0x1E0DEE9D8];
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC8PaperKit26TextToolListViewController_descriptionItemVisible) == 1)
  {
    TextToolListViewController.addTextBoxListItemView.getter(&OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___descriptionListItemView, (uint64_t *)&selRef_didTapDescriptionListItemView_forEvent_, (uint64_t (*)(_QWORD *, uint64_t))specialized static TextToolListItemView.newDescriptionListItemView(_:action:));
    MEMORY[0x1DF0E4398]();
    if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC8PaperKit26TextToolListViewController_addStickerListItemVisible) == 1)
  {
    v2 = (id)MGCopyAnswer();
    v3 = objc_msgSend(v2, "BOOLValue");

    if ((v3 & 1) == 0)
    {
      TextToolListViewController.addTextBoxListItemView.getter(&OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___addStickerListItemView, (uint64_t *)&selRef_didTapAddStickerListItemView_forEvent_, (uint64_t (*)(_QWORD *, uint64_t))specialized static TextToolListItemView.newAddStickerListItemView(_:action:));
      MEMORY[0x1DF0E4398]();
      if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  TextToolListViewController.addTextBoxListItemView.getter(&OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___addTextBoxListItemView, (uint64_t *)&selRef_didTapAddTextBoxListItemView_forEvent_, (uint64_t (*)(_QWORD *, uint64_t))specialized static TextToolListItemView.newAddTextBoxListItemView(_:action:));
  MEMORY[0x1DF0E4398]();
  if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit26TextToolListViewController_autoFillFormListItemVisible) == 1)
  {
    TextToolListViewController.addTextBoxListItemView.getter(&OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___autoFillFormListItemView, (uint64_t *)&selRef_didTapAutoFillFormListItemView_forEvent_, (uint64_t (*)(_QWORD *, uint64_t))specialized static TextToolListItemView.newAutoFillFormListItemView(_:action:));
    MEMORY[0x1DF0E4398]();
    if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  TextToolListViewController.addTextBoxListItemView.getter(&OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___addSignatureListItemView, (uint64_t *)&selRef_didTapAddSignatureListItemView_forEvent_, (uint64_t (*)(_QWORD *, uint64_t))specialized static TextToolListItemView.newAddSignatureListItemView(_:action:));
  MEMORY[0x1DF0E4398]();
  if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit26TextToolListViewController_addShapeListItemVisible) == 1)
  {
    TextToolListViewController.addTextBoxListItemView.getter(&OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___addShapeListItemView, (uint64_t *)&selRef_didTapAddShapeListItemView_forEvent_, (uint64_t (*)(_QWORD *, uint64_t))specialized static TextToolListItemView.newAddShapeListItemView(_:action:));
    MEMORY[0x1DF0E4398]();
    if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit26TextToolListViewController_opacityItemVisible) == 1)
  {
    TextToolListViewController.addTextBoxListItemView.getter(&OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___opacityListItemView, (uint64_t *)&selRef_didTapOpacityListItemView_forEvent_, (uint64_t (*)(_QWORD *, uint64_t))specialized static TextToolListItemView.newOpacityListItemView(_:action:));
    MEMORY[0x1DF0E4398]();
    if (*(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  return v5;
}

id TextToolListViewController.addTextBoxListItemView.getter(uint64_t *a1, uint64_t *a2, uint64_t (*a3)(_QWORD *, uint64_t))
{
  char *v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v9;
  char *v10;
  void *v11;
  void *v12;
  id v13;
  _QWORD v15[4];

  v4 = *a1;
  v5 = *(void **)&v3[*a1];
  if (v5)
  {
    v6 = *(id *)&v3[*a1];
  }
  else
  {
    v15[3] = swift_getObjectType();
    v15[0] = v3;
    v9 = *a2;
    v10 = v3;
    v11 = (void *)a3(v15, v9);
    outlined destroy of Any?((uint64_t)v15);
    v12 = *(void **)&v3[v4];
    *(_QWORD *)&v3[v4] = v11;
    v6 = v11;

    v5 = 0;
  }
  v13 = v5;
  return v6;
}

uint64_t @objc TextToolListViewController.didTapAddSignatureListItemView(_:forEvent:)(char *a1, uint64_t a2, void *a3, void *a4, void (*a5)(void))
{
  uint64_t result;
  id v10;
  id v11;
  char *v12;

  result = MEMORY[0x1DF0E666C](&a1[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_delegate]);
  if (result)
  {
    v10 = a3;
    v11 = a4;
    v12 = a1;
    a5();

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t @objc TextToolListViewController.didTapDescriptionListItemView(_:forEvent:)(char *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  char *v18;
  _QWORD v19[6];

  result = MEMORY[0x1DF0E666C](&a1[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_delegate]);
  if (result)
  {
    v13 = result;
    v14 = swift_allocObject();
    *(_QWORD *)(v14 + 16) = v13;
    v19[4] = a6;
    v19[5] = v14;
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 1107296256;
    v19[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v19[3] = a7;
    v15 = _Block_copy(v19);
    v16 = a3;
    v17 = a4;
    v18 = a1;
    swift_unknownObjectRetain();
    swift_release();
    objc_msgSend(v18, sel_dismissViewControllerAnimated_completion_, 1, v15);
    _Block_release(v15);

    return swift_unknownObjectRelease();
  }
  return result;
}

id TextToolListViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  char *v4;
  objc_class *ObjectType;
  uint64_t v9;
  id v10;
  char *v11;
  void *v12;
  id v13;
  objc_super v15;

  v4 = v3;
  ObjectType = (objc_class *)swift_getObjectType();
  v9 = OBJC_IVAR____TtC8PaperKit26TextToolListViewController_stackView;
  v10 = objc_allocWithZone(MEMORY[0x1E0DC3CA8]);
  v11 = v4;
  *(_QWORD *)&v4[v9] = objc_msgSend(v10, sel_init);
  *(_QWORD *)&v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_minimumItemHeight] = 0x4046000000000000;
  *(_QWORD *)&v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_minimumPreferredContentSizeWidth] = 0x406DC00000000000;
  *(_QWORD *)&v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_autoFillFormListItemVisible] = 0;
  v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_addStickerListItemVisible] = 0;
  v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_addShapeListItemVisible] = 0;
  v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_opacityItemVisible] = 0;
  v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_descriptionItemVisible] = 0;
  v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_graphItemVisible] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___listItemViews] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___addTextBoxListItemView] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___autoFillFormListItemView] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___addSignatureListItemView] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___addStickerListItemView] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___opacityListItemView] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___descriptionListItemView] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___addShapeListItemView] = 0;

  if (a2)
  {
    v12 = (void *)MEMORY[0x1DF0E41AC](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = 0;
  }
  v15.receiver = v11;
  v15.super_class = ObjectType;
  v13 = objc_msgSendSuper2(&v15, sel_initWithNibName_bundle_, v12, a3);

  return v13;
}

id TextToolListViewController.init(coder:)(void *a1)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  uint64_t v5;
  id v6;
  char *v7;
  id v8;
  objc_super v10;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType();
  v5 = OBJC_IVAR____TtC8PaperKit26TextToolListViewController_stackView;
  v6 = objc_allocWithZone(MEMORY[0x1E0DC3CA8]);
  v7 = v2;
  *(_QWORD *)&v2[v5] = objc_msgSend(v6, sel_init);
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_minimumItemHeight] = 0x4046000000000000;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_minimumPreferredContentSizeWidth] = 0x406DC00000000000;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_autoFillFormListItemVisible] = 0;
  v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_addStickerListItemVisible] = 0;
  v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_addShapeListItemVisible] = 0;
  v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_opacityItemVisible] = 0;
  v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_descriptionItemVisible] = 0;
  v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_graphItemVisible] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___listItemViews] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___addTextBoxListItemView] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___autoFillFormListItemView] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___addSignatureListItemView] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___addStickerListItemView] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___opacityListItemView] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___descriptionListItemView] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit26TextToolListViewController____lazy_storage___addShapeListItemView] = 0;

  v10.receiver = v7;
  v10.super_class = ObjectType;
  v8 = objc_msgSendSuper2(&v10, sel_initWithCoder_, a1);

  return v8;
}

uint64_t type metadata accessor for TextToolListViewController()
{
  return objc_opt_self();
}

uint64_t sub_1DDEB92C4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddGraphWithEvent:)()
{
  uint64_t v0;

  return closure #1 in ToolPickerController.textToolListViewController(_:didSelectAddGraphWithEvent:)(*(_QWORD *)(v0 + 16));
}

uint64_t block_copy_helper_61(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_61()
{
  return swift_release();
}

void partial apply for closure #1 in ToolPickerController.textToolListViewController(_:didSelectDescriptionWithEvent:)()
{
  closure #1 in ToolPickerController.textToolListViewController(_:didSelectDescriptionWithEvent:)();
}

_QWORD *LinkLayout.createView<A>(in:canvas:parent:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinX;
  double MinY;
  double v37;
  double v38;
  uint64_t v39;
  id v40;
  _QWORD *v41;
  _QWORD v43[3];
  id v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _UNKNOWN **v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;

  v43[0] = a4;
  v43[1] = a5;
  v44 = a3;
  v45 = a2;
  v43[2] = a1;
  v6 = type metadata accessor for CRKeyPath();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Link>);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  v46 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20, v21);
  v24 = (char *)v43 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, v5, v6, v22);
  v25 = type metadata accessor for Link();
  v26 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  Ref.init(id:)();
  type metadata accessor for Capsule();
  lazy protocol witness table accessor for type Ref<Link> and conformance Ref<A>();
  Capsule.encapsulate<A>(_:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  v47 = v25;
  v48 = v26;
  v49 = &protocol witness table for Link;
  swift_getKeyPath();
  v27 = v44;
  v28 = v44;
  v29 = v45;
  v30 = v45;
  Capsule<>.subscript.getter();
  swift_release();
  x = v50.origin.x;
  y = v50.origin.y;
  width = v50.size.width;
  height = v50.size.height;
  MinX = CGRectGetMinX(v50);
  v51.origin.x = x;
  v51.origin.y = y;
  v51.size.width = width;
  v51.size.height = height;
  MinY = CGRectGetMinY(v51);
  v52.origin.x = x;
  v52.origin.y = y;
  v52.size.width = width;
  v52.size.height = height;
  v37 = CGRectGetWidth(v52);
  v53.origin.x = x;
  v53.origin.y = y;
  v53.size.width = width;
  v53.size.height = height;
  v38 = CGRectGetHeight(v53);
  v39 = v46;
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v19, v24, v16);
  v40 = objc_allocWithZone((Class)type metadata accessor for LinkCanvasElementView());
  v41 = LinkCanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)((uint64_t)v19, v29, v27, MinX, MinY, v37, v38);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v24, v16);
  return v41;
}

uint64_t closure #1 in static LinkLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, double a6, uint64_t a7, void (*a8)(char *), uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void *v29;
  id v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v40;
  id v41[2];

  v41[1] = *(id *)MEMORY[0x1E0C80C00];
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>?);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)v41 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    goto LABEL_6;
  objc_opt_self();
  v29 = (void *)swift_dynamicCastObjCClass();
  if (!v29)
    goto LABEL_6;
  v41[0] = 0;
  v30 = objc_msgSend(v29, sel_dataRepresentationWithError_, v41);
  v31 = v41[0];
  if (!v30)
  {
    v36 = v31;
    v37 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_6:
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v28, 1, 1, v38);
    a8(v28);
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, &demangling cache variable for type metadata for Capsule<Link>?);
  }
  HIDWORD(v40) = a14 & 1;
  v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v34 = v33;

  LOBYTE(v41[0]) = a11;
  static LinkLayout.load(_:canvasFrame:frame:rotation:anchor:offset:)(v32, v34, a10, (unsigned __int8 *)v41, *(double *)&a12, *(double *)&a13, SBYTE4(v40), (uint64_t)v28, a2, a3, a4, a5, a6);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v28, 0, 1, v35);
  a8(v28);
  outlined consume of Data._Representation(v32, v34);
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, &demangling cache variable for type metadata for Capsule<Link>?);
}

uint64_t static LinkLayout.load(_:canvasFrame:frame:rotation:anchor:offset:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, double a5@<X4>, double a6@<X5>, char a7@<W6>, uint64_t a8@<X8>, CGFloat a9@<D0>, CGFloat a10@<D1>, CGFloat a11@<D2>, CGFloat a12@<D3>, double a13@<D4>)
{
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  int v41;
  double y;
  double x;
  CGFloat width;
  CGFloat height;
  double v46;
  double v47;
  double v48;
  double v49;
  char *v50;
  char *v51;
  uint64_t v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  _QWORD v65[5];
  _BYTE v66[48];
  __C::CGRect v67;
  __C::CGRect v68;

  v54 = a5;
  v62 = a8;
  outlined init with take of CGRect?(a3, (uint64_t)v65);
  v24 = *(double *)v65;
  v25 = *(double *)&v65[1];
  v26 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v26, v27);
  v61 = (char *)&v53 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  v58 = *(_QWORD *)(v59 - 8);
  MEMORY[0x1E0C80A78](v59, v29);
  v57 = (char *)&v53 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v55 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56, v31);
  v33 = (char *)&v53 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)&v34 = COERCE_DOUBLE(type metadata accessor for Link());
  MEMORY[0x1E0C80A78](v34, v35);
  v60 = (uint64_t)&v53 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37, v38);
  v40 = (char *)&v53 - v39;
  v41 = *a4;
  outlined init with take of CGRect?(a3, (uint64_t)v66);
  y = 0.0;
  if (v66[32])
  {
    v24 = 0.0;
    v25 = 0.0;
  }
  if (one-time initialization token for linkSize != -1)
    swift_once();
  x = 0.0;
  if ((~*(_QWORD *)&v24 & 0x7FF0000000000000) != 0)
  {
    if ((*(_QWORD *)&v25 & 0x7FF0000000000000) == 0x7FF0000000000000)
      y = 0.0;
    else
      y = v25;
    if ((*(_QWORD *)&v25 & 0x7FF0000000000000) == 0x7FF0000000000000)
      x = 0.0;
    else
      x = v24;
  }
  height = *((double *)&static UIConstants.linkSize + 1);
  width = *(double *)&static UIConstants.linkSize;
  if (v41 != 9)
  {
    LOBYTE(v63) = v41;
    v67.origin.x = a9;
    v67.origin.y = a10;
    v67.size.width = a11;
    v67.size.height = a12;
    v68 = CGRect.position(in:anchor:)(v67, (PaperKit::LayoutAnchor)&v63);
    x = v68.origin.x;
    y = v68.origin.y;
    width = v68.size.width;
    height = v68.size.height;
  }
  v46 = v54;
  v47 = a6;
  if ((a7 & 1) != 0)
    v47 = -0.0;
  v48 = v47 + y;
  if ((a7 & 1) != 0)
    v46 = -0.0;
  v49 = v46 + x;
  v64 = 0u;
  v63 = 0u;
  outlined copy of Data._Representation(a1, a2);
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  v53 = a1;
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v63 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  v50 = &v40[*(int *)(v34 + 24)];
  v63 = xmmword_1DDF33630;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  lazy protocol witness table accessor for type Data? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  v54 = *(double *)&v34;
  *(_QWORD *)&v40[*(int *)(v34 + 28)] = MEMORY[0x1E0DEE9E0];
  *(double *)&v63 = v49;
  *((double *)&v63 + 1) = v48;
  *(CGFloat *)&v64 = width;
  *((CGFloat *)&v64 + 1) = height;
  CRRegister.init(_:)();
  (*(void (**)(char *, char *, uint64_t))(v55 + 40))(v40, v33, v56);
  *(_QWORD *)&v63 = v53;
  *((_QWORD *)&v63 + 1) = a2;
  v51 = v57;
  CRRegister.init(_:)();
  (*(void (**)(char *, char *, uint64_t))(v58 + 40))(v50, v51, v59);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  if (*(double *)&v63 != a13)
  {
    *(double *)&v63 = a13;
    CRRegister.wrappedValue.setter();
  }
  outlined init with copy of Link((uint64_t)v40, v60);
  static CRKeyPath.unique.getter();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  Capsule<>.init(_:id:)();
  return outlined destroy of Link((uint64_t)v40);
}

uint64_t closure #2 in static LinkLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:)(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, double a6, uint64_t a7, void (*a8)(char *), uint64_t a9, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  char *v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  unsigned __int8 v47;
  uint64_t v48;

  v45 = *(double *)&a12;
  v46 = *(double *)&a13;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>?);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v45 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v45 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for URL();
  v32 = *(_QWORD *)(v31 - 8);
  v34 = MEMORY[0x1E0C80A78](v31, v33);
  v36 = (char *)&v45 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v32 + 56))(v30, 1, 1, v31, v34);
    goto LABEL_6;
  }
  v48 = a1;
  swift_unknownObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSItemProviderReading);
  v37 = swift_dynamicCast();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v30, v37 ^ 1u, 1, v31);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31) == 1)
  {
LABEL_6:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v30, &demangling cache variable for type metadata for URL?);
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v36, v30, v31);
  v38 = specialized static Link.synapseDataRepresentation(from:)();
  if (v39 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v36, v31);
LABEL_7:
    v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v26, 1, 1, v40);
    a8(v26);
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v26, &demangling cache variable for type metadata for Capsule<Link>?);
  }
  v42 = v38;
  v43 = v39;
  v47 = a11;
  static LinkLayout.load(_:canvasFrame:frame:rotation:anchor:offset:)(v38, v39, a10, &v47, v45, v46, a14 & 1, (uint64_t)v26, a2, a3, a4, a5, a6);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v26, 0, 1, v44);
  a8(v26);
  outlined consume of Data?(v42, v43);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v26, &demangling cache variable for type metadata for Capsule<Link>?);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v36, v31);
}

uint64_t closure #1 in static LinkLayout.addLinkItem(_:in:completion:)(_QWORD *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t (*v5)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _UNKNOWN **))((*MEMORY[0x1E0DEEDD8] & *a1)
                                                                                                + 0x480);
  v6 = type metadata accessor for Link();
  v7 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  result = v5(a2, 0, 0, 0, v6, v7, &protocol witness table for Link);
  if (a3)
    return a3(result);
  return result;
}

uint64_t specialized static LinkLayout.canHandle(itemProvider:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  v2 = type metadata accessor for UTType();
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, *MEMORY[0x1E0DB0770], v5) & 1) != 0)
    return 1;
  type metadata accessor for SYContentItem();
  if ((objc_msgSend(a1, sel_canLoadObjectOfClass_, swift_getObjCClassFromMetadata()) & 1) != 0)
    return 1;
  static UTType.url.getter();
  v9 = UTType.identifier.getter();
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
  v12 = (void *)MEMORY[0x1DF0E41AC](v9, v11);
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(a1, sel_hasItemConformingToTypeIdentifier_, v12);

  return (uint64_t)v8;
}

uint64_t outlined destroy of Link(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Link();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkLayout()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDEBA260(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRKeyPath();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for LinkLayout()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDEBA2A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRKeyPath();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for LinkLayout()
{
  uint64_t result;

  result = type metadata singleton initialization cache for LinkLayout;
  if (!type metadata singleton initialization cache for LinkLayout)
    return swift_getSingletonMetadata();
  return result;
}

_UNKNOWN **associated type witness table accessor for LayoutItemProvider.Model : CanvasElement in LinkLayout()
{
  return &protocol witness table for Link;
}

unint64_t lazy protocol witness table accessor for type Ref<Link> and conformance Ref<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Ref<Link> and conformance Ref<A>;
  if (!lazy protocol witness table cache variable for type Ref<Link> and conformance Ref<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Ref<Link>);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12878], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ref<Link> and conformance Ref<A>);
  }
  return result;
}

uint64_t sub_1DDEBA384()
{
  return 24;
}

__n128 sub_1DDEBA390(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t closure #1 in static PKGenerationModelAvailabilityController.generationModelAvailabilityForGenerationTool()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5[21] = a4;
  v5[22] = a5;
  v6 = type metadata accessor for GenerativeModelsAvailability.Availability.RestrictedInfo();
  v5[23] = v6;
  v5[24] = *(_QWORD *)(v6 - 8);
  v5[25] = swift_task_alloc();
  v7 = type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo();
  v5[26] = v7;
  v5[27] = *(_QWORD *)(v7 - 8);
  v5[28] = swift_task_alloc();
  v8 = type metadata accessor for GenerativeModelsAvailability.Availability();
  v5[29] = v8;
  v5[30] = *(_QWORD *)(v8 - 8);
  v5[31] = swift_task_alloc();
  v5[32] = swift_task_alloc();
  v5[33] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GenerativeModelsAvailability.Availability?);
  v5[34] = swift_task_alloc();
  v9 = type metadata accessor for GenerativeModelsAvailability.ChangeSequence();
  v5[35] = v9;
  v5[36] = *(_QWORD *)(v9 - 8);
  v5[37] = swift_task_alloc();
  v10 = type metadata accessor for GenerativeModelsAvailability.ChangeSequence.Iterator();
  v5[38] = v10;
  v5[39] = *(_QWORD *)(v10 - 8);
  v5[40] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in static PKGenerationModelAvailabilityController.generationModelAvailabilityForGenerationTool()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[36];
  v1 = v0[37];
  v3 = v0[35];
  GenerativeModelsAvailability.changes.getter();
  GenerativeModelsAvailability.ChangeSequence.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[41] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GenerativeModelsAvailability.ChangeSequence.Iterator and conformance GenerativeModelsAvailability.ChangeSequence.Iterator, (uint64_t (*)(uint64_t))MEMORY[0x1E0D26130], MEMORY[0x1E0D26138]);
  v4 = (_QWORD *)swift_task_alloc();
  v0[42] = v4;
  *v4 = v0;
  v4[1] = closure #1 in static PKGenerationModelAvailabilityController.generationModelAvailabilityForGenerationTool();
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    *(_QWORD *)(v2 + 344) = v0;
  }
  else
  {
    *(_DWORD *)(v2 + 360) = *MEMORY[0x1E0D26088];
    *(_DWORD *)(v2 + 364) = *MEMORY[0x1E0D25F80];
    *(_DWORD *)(v2 + 368) = *MEMORY[0x1E0D25F70];
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  int v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  id v41;
  _QWORD *v42;
  uint64_t v43;

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 240);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 312) + 8))(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 304));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v5 = *(_DWORD *)(v0 + 360);
    v6 = *(_QWORD *)(v0 + 264);
    *(_QWORD *)(v0 + 144) = 0;
    *(_QWORD *)(v0 + 152) = 0xE000000000000000;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v6, v1, v2);
    v7 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 88);
    v8 = v7(v6, v2);
    v9 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v9(v6, v2);
    if (v8 == v5)
    {
      swift_beginAccess();
      *(_QWORD *)(v0 + 144) = 0x6C62616C69617661;
      *(_QWORD *)(v0 + 152) = 0xE900000000000065;
      swift_bridgeObjectRelease();
      v10 = 0;
    }
    else
    {
      v11 = *(_DWORD *)(v0 + 364);
      v12 = *(_QWORD *)(v0 + 256);
      v13 = *(_QWORD *)(v0 + 232);
      v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 240) + 16);
      v14(v12, *(_QWORD *)(v0 + 176), v13);
      if (v7(v12, v13) == v11)
      {
        v15 = *(_QWORD *)(v0 + 256);
        v17 = *(_QWORD *)(v0 + 216);
        v16 = *(_QWORD *)(v0 + 224);
        v18 = *(_QWORD *)(v0 + 208);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 240) + 96))(v15, *(_QWORD *)(v0 + 232));
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v16, v15, v18);
        strcpy((char *)(v0 + 128), "unavailable ");
        *(_BYTE *)(v0 + 141) = 0;
        *(_WORD *)(v0 + 142) = -5120;
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GenerativeModelsAvailability.Availability.UnavailableInfo and conformance GenerativeModelsAvailability.Availability.UnavailableInfo, (uint64_t (*)(uint64_t))MEMORY[0x1E0D26058], MEMORY[0x1E0D26060]);
        v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        v20 = *(_QWORD *)(v0 + 128);
        v21 = *(_QWORD *)(v0 + 136);
        (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
        v10 = 1;
        swift_beginAccess();
        *(_QWORD *)(v0 + 144) = v20;
        *(_QWORD *)(v0 + 152) = v21;
        swift_bridgeObjectRelease();
      }
      else
      {
        v22 = *(_DWORD *)(v0 + 368);
        v23 = *(_QWORD *)(v0 + 248);
        v24 = *(_QWORD *)(v0 + 232);
        v25 = *(_QWORD *)(v0 + 176);
        v9(*(_QWORD *)(v0 + 256), v24);
        v14(v23, v25, v24);
        v26 = v7(v23, v24);
        v27 = *(_QWORD *)(v0 + 248);
        if (v26 == v22)
        {
          v29 = *(_QWORD *)(v0 + 192);
          v28 = *(_QWORD *)(v0 + 200);
          v30 = *(_QWORD *)(v0 + 184);
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 240) + 96))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 232));
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(v28, v27, v30);
          *(_QWORD *)(v0 + 112) = 0x7463697274736572;
          *(_QWORD *)(v0 + 120) = 0xEB00000000206465;
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GenerativeModelsAvailability.Availability.RestrictedInfo and conformance GenerativeModelsAvailability.Availability.RestrictedInfo, (uint64_t (*)(uint64_t))MEMORY[0x1E0D25FB0], MEMORY[0x1E0D25FB8]);
          v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v31);
          swift_bridgeObjectRelease();
          v32 = *(_QWORD *)(v0 + 112);
          v33 = *(_QWORD *)(v0 + 120);
          (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
          swift_beginAccess();
          *(_QWORD *)(v0 + 144) = v32;
          *(_QWORD *)(v0 + 152) = v33;
          swift_bridgeObjectRelease();
          v10 = 2;
        }
        else
        {
          v9(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 232));
          v10 = 3;
        }
      }
    }
    if (one-time initialization token for generativeLogger != -1)
      swift_once();
    v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)generativeLogger);
    v35 = Logger.logObject.getter();
    v36 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = swift_slowAlloc();
      v38 = swift_slowAlloc();
      v43 = v38;
      *(_DWORD *)v37 = 136315138;
      swift_beginAccess();
      v39 = *(_QWORD *)(v0 + 144);
      v40 = *(_QWORD *)(v0 + 152);
      swift_bridgeObjectRetain();
      *(_QWORD *)(v37 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v43);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v35, v36, "Generation Model changed to %s for this device ", (uint8_t *)v37, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v38, -1, -1);
      MEMORY[0x1DF0E6558](v37, -1, -1);
    }

    v41 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
    objc_msgSend(v41, sel_handleAvailabilityChange_, v10);

    swift_bridgeObjectRelease();
    v42 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 352) = v42;
    *v42 = v0;
    v42[1] = closure #1 in static PKGenerationModelAvailabilityController.generationModelAvailabilityForGenerationTool();
    return dispatch thunk of AsyncIteratorProtocol.next()();
  }
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 160) = *(_QWORD *)(v0 + 344);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 344) = v0;
  return swift_task_switch();
}

uint64_t @objc static PKGenerationModelAvailabilityController.generationModelAvailabilityForGenerationTool()(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = _Block_copy(a3);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v9;
  *(_QWORD *)(v10 + 24) = a1;
  v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 1, 1, v11);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = &async function pointer to partial apply for @objc closure #1 in static PKGenerationModelAvailabilityController.generationModelAvailabilityForGenerationTool();
  v12[5] = v10;
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = &_sIeghH_IeAgH_TRTATu;
  v13[5] = v12;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5((uint64_t)v8, (uint64_t)&_sIeAgH_ytIeAgHr_TRTATu, (uint64_t)v13);
  return swift_release();
}

uint64_t @objc closure #1 in static PKGenerationModelAvailabilityController.generationModelAvailabilityForGenerationTool()(const void *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 16) = _Block_copy(a1);
  v4 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized static PKGenerationModelAvailabilityController.generationModelAvailabilityForGenerationTool()
                             + async function pointer to specialized static PKGenerationModelAvailabilityController.generationModelAvailabilityForGenerationTool());
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = @objc closure #1 in static PKGenerationModelAvailabilityController.generationModelAvailabilityForGenerationTool();
  return v4();
}

uint64_t @objc closure #1 in static PKGenerationModelAvailabilityController.generationModelAvailabilityForGenerationTool()(uint64_t a1)
{
  uint64_t *v1;
  void (**v3)(_QWORD, _QWORD);
  uint64_t v5;

  v3 = *(void (***)(_QWORD, _QWORD))(*v1 + 16);
  v5 = *v1;
  swift_task_dealloc();
  v3[2](v3, a1);
  _Block_release(v3);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1DDEBAE28()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in static PKGenerationModelAvailabilityController.generationModelAvailabilityForGenerationTool()()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  _QWORD *v3;

  v2 = *(const void **)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return ((uint64_t (*)(const void *))((char *)&async function pointer to @objc closure #1 in static PKGenerationModelAvailabilityController.generationModelAvailabilityForGenerationTool()
                                               + async function pointer to @objc closure #1 in static PKGenerationModelAvailabilityController.generationModelAvailabilityForGenerationTool()))(v2);
}

uint64_t _sIeghH_IeAgH_TR(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return v6();
}

uint64_t _sIeAgH_ytIeAgHr_TR(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return v7();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1DDEBB0A4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu))(a1, v4);
}

uint64_t specialized static PKGenerationModelAvailabilityController.generationModelAvailabilityForGenerationTool()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v0[4] = swift_task_alloc();
  v1 = type metadata accessor for GenerativeModelsAvailability.Availability.RestrictedInfo();
  v0[5] = v1;
  v0[6] = *(_QWORD *)(v1 - 8);
  v0[7] = swift_task_alloc();
  v0[8] = swift_task_alloc();
  v2 = type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo();
  v0[9] = v2;
  v0[10] = *(_QWORD *)(v2 - 8);
  v0[11] = swift_task_alloc();
  v0[12] = swift_task_alloc();
  v3 = type metadata accessor for GenerativeModelsAvailability.Availability();
  v0[13] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v0[14] = v4;
  v0[15] = *(_QWORD *)(v4 + 64);
  v0[16] = swift_task_alloc();
  v0[17] = swift_task_alloc();
  v0[18] = swift_task_alloc();
  v0[19] = swift_task_alloc();
  v0[20] = swift_task_alloc();
  v5 = type metadata accessor for GenerativeModelsAvailability.Parameters();
  v0[21] = v5;
  v0[22] = *(_QWORD *)(v5 - 8);
  v0[23] = swift_task_alloc();
  v6 = type metadata accessor for GenerativeModelsAvailability();
  v0[24] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v0[25] = v7;
  v0[26] = *(_QWORD *)(v7 + 64);
  v0[27] = swift_task_alloc();
  v0[28] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v9)(uint64_t, uint64_t);
  int v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  void (*v63)(uint64_t, uint64_t);
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t, uint64_t, uint64_t);
  void (*v90)(uint64_t, uint64_t);
  uint64_t v91;

  v2 = *(_QWORD *)(v0 + 176);
  v1 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD **)(v0 + 112);
  GenerativeModelsAvailability.Parameters.init(useCaseIdentifier:)();
  static GenerativeModelsAvailability.current(parameters:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  GenerativeModelsAvailability.availability.getter();
  v8 = (void (*)(uint64_t, uint64_t, uint64_t))v7[2];
  v8(v5, v4, v6);
  v9 = (uint64_t (*)(uint64_t, uint64_t))v7[11];
  v10 = v9(v5, v6);
  LODWORD(v1) = *MEMORY[0x1E0D26088];
  v11 = (void (*)(uint64_t, uint64_t))v7[1];
  v11(v5, v6);
  v89 = v8;
  v90 = v11;
  if (v10 != (_DWORD)v1)
  {
    v16 = *(_QWORD *)(v0 + 144);
    v17 = *(_QWORD *)(v0 + 104);
    v8(v16, *(_QWORD *)(v0 + 160), v17);
    if (v9(v16, v17) == *MEMORY[0x1E0D25F80])
    {
      v18 = *(_QWORD *)(v0 + 144);
      v19 = *(_QWORD *)(v0 + 96);
      v21 = *(_QWORD *)(v0 + 72);
      v20 = *(_QWORD *)(v0 + 80);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 112) + 96))(v18, *(_QWORD *)(v0 + 104));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v19, v18, v21);
      if (one-time initialization token for generativeLogger != -1)
        swift_once();
      v23 = *(_QWORD *)(v0 + 88);
      v22 = *(_QWORD *)(v0 + 96);
      v25 = *(_QWORD *)(v0 + 72);
      v24 = *(_QWORD *)(v0 + 80);
      v26 = type metadata accessor for Logger();
      __swift_project_value_buffer(v26, (uint64_t)generativeLogger);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v23, v22, v25);
      v27 = Logger.logObject.getter();
      v28 = static os_log_type_t.info.getter();
      v29 = os_log_type_enabled(v27, v28);
      v30 = *(_QWORD *)(v0 + 88);
      v31 = *(_QWORD *)(v0 + 96);
      v33 = *(_QWORD *)(v0 + 72);
      v32 = *(_QWORD *)(v0 + 80);
      if (v29)
      {
        v88 = *(_QWORD *)(v0 + 80);
        v34 = (uint8_t *)swift_slowAlloc();
        v85 = swift_slowAlloc();
        v91 = v85;
        *(_DWORD *)v34 = 136315138;
        GenerativeModelsAvailability.Availability.UnavailableInfo.reasons.getter();
        type metadata accessor for GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason();
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason and conformance GenerativeModelsAvailability.Availability.UnavailableInfo.UnavailableReason, (uint64_t (*)(uint64_t))MEMORY[0x1E0D26030], MEMORY[0x1E0D26038]);
        v35 = Set.description.getter();
        v37 = v36;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, &v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v38 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
        v38(v30, v33);
        _os_log_impl(&dword_1DDB0F000, v27, v28, "Generation Model is unavailable for this device %s", v34, 0xCu);
        v87 = 1;
        swift_arrayDestroy();
        MEMORY[0x1DF0E6558](v85, -1, -1);
        MEMORY[0x1DF0E6558](v34, -1, -1);

        v38(v31, v33);
        goto LABEL_22;
      }

      v64 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
      v64(v30, v33);
      v64(v31, v33);
      v65 = 1;
    }
    else
    {
      v39 = *(_QWORD *)(v0 + 160);
      v40 = *(_QWORD *)(v0 + 136);
      v41 = *(_QWORD *)(v0 + 104);
      v11(*(_QWORD *)(v0 + 144), v41);
      v8(v40, v39, v41);
      v42 = v9(v40, v41);
      v43 = *(_QWORD *)(v0 + 136);
      if (v42 == *MEMORY[0x1E0D25F70])
      {
        v44 = *(_QWORD *)(v0 + 64);
        v45 = *(_QWORD *)(v0 + 40);
        v46 = *(_QWORD *)(v0 + 48);
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 112) + 96))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 104));
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32))(v44, v43, v45);
        if (one-time initialization token for generativeLogger != -1)
          swift_once();
        v47 = *(_QWORD *)(v0 + 56);
        v48 = *(_QWORD *)(v0 + 64);
        v49 = *(_QWORD *)(v0 + 40);
        v50 = *(_QWORD *)(v0 + 48);
        v51 = type metadata accessor for Logger();
        __swift_project_value_buffer(v51, (uint64_t)generativeLogger);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v47, v48, v49);
        v52 = Logger.logObject.getter();
        v53 = static os_log_type_t.info.getter();
        v54 = os_log_type_enabled(v52, v53);
        v55 = *(_QWORD *)(v0 + 56);
        v56 = *(_QWORD *)(v0 + 64);
        v58 = *(_QWORD *)(v0 + 40);
        v57 = *(_QWORD *)(v0 + 48);
        if (v54)
        {
          v59 = (uint8_t *)swift_slowAlloc();
          v86 = swift_slowAlloc();
          v91 = v86;
          *(_DWORD *)v59 = 136315138;
          GenerativeModelsAvailability.Availability.RestrictedInfo.reasons.getter();
          type metadata accessor for GenerativeModelsAvailability.Availability.RestrictedInfo.RestrictedReason();
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GenerativeModelsAvailability.Availability.RestrictedInfo.RestrictedReason and conformance GenerativeModelsAvailability.Availability.RestrictedInfo.RestrictedReason, (uint64_t (*)(uint64_t))MEMORY[0x1E0D25F88], MEMORY[0x1E0D25F90]);
          v60 = Set.description.getter();
          v62 = v61;
          swift_bridgeObjectRelease();
          *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v62, &v91);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v63 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
          v63(v55, v58);
          _os_log_impl(&dword_1DDB0F000, v52, v53, "Generation Model is restricted for this device %s", v59, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1DF0E6558](v86, -1, -1);
          MEMORY[0x1DF0E6558](v59, -1, -1);

        }
        else
        {

          v63 = *(void (**)(uint64_t, uint64_t))(v57 + 8);
          v63(v55, v58);
        }
        v63(v56, v58);
        v65 = 2;
      }
      else
      {
        v11(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 104));
        v65 = 3;
      }
    }
    v87 = v65;
    goto LABEL_22;
  }
  if (one-time initialization token for generativeLogger != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)generativeLogger);
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1DDB0F000, v13, v14, "Generation Model is available for this device", v15, 2u);
    MEMORY[0x1DF0E6558](v15, -1, -1);
  }

  v87 = 0;
LABEL_22:
  v66 = *(_QWORD *)(v0 + 216);
  v67 = *(_QWORD *)(v0 + 224);
  v68 = *(_QWORD *)(v0 + 200);
  v69 = *(_QWORD *)(v0 + 192);
  v84 = v67;
  v70 = *(_QWORD *)(v0 + 160);
  v81 = *(_QWORD *)(v0 + 208);
  v82 = v70;
  v71 = *(_QWORD *)(v0 + 128);
  v72 = *(_QWORD *)(v0 + 112);
  v73 = *(_QWORD *)(v0 + 104);
  v74 = *(_QWORD *)(v0 + 32);
  v83 = v74;
  v75 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v74, 1, 1, v75);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 16))(v66, v67, v69);
  v76 = v71;
  v89(v71, v70, v73);
  v77 = (*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80);
  v78 = (v81 + *(unsigned __int8 *)(v72 + 80) + v77) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
  v79 = swift_allocObject();
  *(_QWORD *)(v79 + 16) = 0;
  *(_QWORD *)(v79 + 24) = 0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v68 + 32))(v79 + v77, v66, v69);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v72 + 32))(v79 + v78, v76, v73);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v83, (uint64_t)&async function pointer to partial apply for closure #1 in static PKGenerationModelAvailabilityController.generationModelAvailabilityForGenerationTool(), v79);
  swift_release();
  v90(v82, v73);
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v84, v69);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v87);
}

uint64_t sub_1DDEBBB44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for GenerativeModelsAvailability();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for GenerativeModelsAvailability.Availability();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static PKGenerationModelAvailabilityController.generationModelAvailabilityForGenerationTool()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for GenerativeModelsAvailability() - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for GenerativeModelsAvailability.Availability() - 8)
                          + 80);
  v8 = v5 + v6 + v7;
  v9 = *(_QWORD *)(v1 + 16);
  v10 = *(_QWORD *)(v1 + 24);
  v11 = v1 + v5;
  v12 = v1 + (v8 & ~v7);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in static PKGenerationModelAvailabilityController.generationModelAvailabilityForGenerationTool()(a1, v9, v10, v11, v12);
}

uint64_t specialized Sequence.flatMap<A>(_:)(void (*a1)(uint64_t *__return_ptr, char *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  int64_t v33;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  void (*v48)(uint64_t *__return_ptr, char *);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v3 = v2;
  v48 = a1;
  v49 = a2;
  v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v52 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44, v4);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  v43 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v15, v51, v11, v18);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>, MEMORY[0x1E0D11DC0]);
  v21 = v52;
  v22 = v44;
  dispatch thunk of Sequence.makeIterator()();
  v23 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator and conformance CROrderedSet<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator, MEMORY[0x1E0D11D70]);
  v50 = v20;
  v51 = v16;
  v47 = v23;
  dispatch thunk of IteratorProtocol.next()();
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  if (v46(v10, 1, v22) == 1)
  {
    v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_3:
    (*(void (**)(char *, uint64_t))(v43 + 8))(v50, v51);
    return (uint64_t)v24;
  }
  else
  {
    v45 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v45(v6, v10, v22);
    while (1)
    {
      v48(&v53, v6);
      if (v3)
      {
        (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v22);
        (*(void (**)(char *, uint64_t))(v43 + 8))(v50, v51);
        swift_bridgeObjectRelease();
        return (uint64_t)v24;
      }
      v26 = v10;
      v27 = v6;
      v28 = v6;
      v29 = v22;
      (*(void (**)(char *, uint64_t))(v21 + 8))(v28, v22);
      v30 = v53;
      v31 = *(_QWORD *)(v53 + 16);
      v32 = v24[2];
      v33 = v32 + v31;
      if (__OFADD__(v32, v31))
        break;
      isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
      if (!(_DWORD)isUniquelyReferenced_nonNull_native || v33 > v24[3] >> 1)
      {
        if (v32 <= v33)
          v35 = v32 + v31;
        else
          v35 = v32;
        v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v35, 1, v24);
      }
      v22 = v29;
      v6 = v27;
      if (*(_QWORD *)(v30 + 16))
      {
        v36 = v24[2];
        if ((v24[3] >> 1) - v36 < v31)
          goto LABEL_30;
        v37 = (unint64_t)&v24[4 * v36 + 4];
        if (v30 + 32 < v37 + 32 * v31 && v37 < v30 + 32 + 32 * v31)
          goto LABEL_32;
        v10 = v26;
        swift_arrayInitWithCopy();
        v3 = 0;
        if (v31)
        {
          v39 = v24[2];
          v40 = __OFADD__(v39, v31);
          v41 = v39 + v31;
          if (v40)
            goto LABEL_31;
          v24[2] = v41;
        }
      }
      else
      {
        v10 = v26;
        v3 = 0;
        if (v31)
          goto LABEL_29;
      }
      swift_bridgeObjectRelease();
      dispatch thunk of IteratorProtocol.next()();
      v25 = v46(v10, 1, v22);
      v21 = v52;
      if (v25 == 1)
        goto LABEL_3;
      v45(v6, v10, v22);
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t *__return_ptr, char *);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v30 = a1;
  v31 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v28 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  v29 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = MEMORY[0x1E0DEE9D8];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v15, v33, v11, v18);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>, MEMORY[0x1E0D11DC0]);
  dispatch thunk of Sequence.makeIterator()();
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator and conformance CROrderedSet<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator, MEMORY[0x1E0D11D70]);
  v32 = v20;
  v33 = v16;
  v21 = v28;
  dispatch thunk of IteratorProtocol.next()();
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  if (v22(v10, 1, v3) == 1)
  {
    v23 = MEMORY[0x1E0DEE9D8];
LABEL_7:
    (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v33);
  }
  else
  {
    v24 = v21;
    v25 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    while (1)
    {
      v25(v6, v10, v3);
      v23 = v31;
      v30(&v34, v6);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v3);
      if (v2)
        break;
      specialized Array.append<A>(contentsOf:)(v34);
      dispatch thunk of IteratorProtocol.next()();
      if (v22(v10, 1, v3) == 1)
      {
        v23 = v35;
        goto LABEL_7;
      }
    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v33);
    swift_bridgeObjectRelease();
  }
  return v23;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  int64_t v33;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  void (*v48)(uint64_t *__return_ptr, char *);
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v3 = v2;
  v48 = a1;
  v49 = a2;
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v52 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44, v4);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
  v43 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v15, v51, v11, v18);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>, MEMORY[0x1E0D11DC0]);
  v21 = v52;
  v22 = v44;
  dispatch thunk of Sequence.makeIterator()();
  v23 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator, MEMORY[0x1E0D11D70]);
  v50 = v20;
  v51 = v16;
  v47 = v23;
  dispatch thunk of IteratorProtocol.next()();
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  if (v46(v10, 1, v22) == 1)
  {
    v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_3:
    (*(void (**)(char *, uint64_t))(v43 + 8))(v50, v51);
    return (uint64_t)v24;
  }
  else
  {
    v45 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v45(v6, v10, v22);
    while (1)
    {
      v48(&v53, v6);
      if (v3)
      {
        (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v22);
        (*(void (**)(char *, uint64_t))(v43 + 8))(v50, v51);
        swift_bridgeObjectRelease();
        return (uint64_t)v24;
      }
      v26 = v10;
      v27 = v6;
      v28 = v6;
      v29 = v22;
      (*(void (**)(char *, uint64_t))(v21 + 8))(v28, v22);
      v30 = v53;
      v31 = *(_QWORD *)(v53 + 16);
      v32 = v24[2];
      v33 = v32 + v31;
      if (__OFADD__(v32, v31))
        break;
      isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
      if (!(_DWORD)isUniquelyReferenced_nonNull_native || v33 > v24[3] >> 1)
      {
        if (v32 <= v33)
          v35 = v32 + v31;
        else
          v35 = v32;
        v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v35, 1, v24);
      }
      v22 = v29;
      v6 = v27;
      if (*(_QWORD *)(v30 + 16))
      {
        v36 = v24[2];
        if ((v24[3] >> 1) - v36 < v31)
          goto LABEL_30;
        v37 = (unint64_t)&v24[4 * v36 + 4];
        if (v30 + 32 < v37 + 32 * v31 && v37 < v30 + 32 + 32 * v31)
          goto LABEL_32;
        v10 = v26;
        swift_arrayInitWithCopy();
        v3 = 0;
        if (v31)
        {
          v39 = v24[2];
          v40 = __OFADD__(v39, v31);
          v41 = v39 + v31;
          if (v40)
            goto LABEL_31;
          v24[2] = v41;
        }
      }
      else
      {
        v10 = v26;
        v3 = 0;
        if (v31)
          goto LABEL_29;
      }
      swift_bridgeObjectRelease();
      dispatch thunk of IteratorProtocol.next()();
      v25 = v46(v10, 1, v22);
      v21 = v52;
      if (v25 == 1)
        goto LABEL_3;
      v45(v6, v10, v22);
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for CanvasElement.indexableTextContent<A>(in:) in conformance PaperDocumentPage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ContainerCanvasElement.indexableTextContent<A>(in:)(a1, a4, a2, (uint64_t)&protocol witness table for PaperDocumentPage, a3);
}

uint64_t ContainerCanvasElement.indexableTextContent<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;

  v10 = ContainerCanvasElement.drawingIndexableTextContent<A>(in:)(a1, a2, a3, a4, a5);
  v11 = ContainerCanvasElement.subelementsIndexableTextContent<A>(in:)(a1, a2, a3, a4, a5);
  specialized Array.append<A>(contentsOf:)(v11);
  return v10;
}

uint64_t protocol witness for PaperPage.search<A>(query:fullWordsOnly:caseMatchingOnly:in:) in conformance PaperDocumentPage(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v15;
  _QWORD *v16;

  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v15;
  *v15 = v8;
  v15[1] = protocol witness for PaperRenderable.renderedImage(in:) in conformance Image;
  v16 = (_QWORD *)swift_task_alloc();
  v15[2] = v16;
  *v16 = v15;
  v16[1] = protocol witness for PaperRenderable.renderedImage(in:) in conformance Image;
  return ContainerCanvasElement.searchDrawing<A>(query:fullWordsOnly:caseMatchingOnly:in:)(a1, a2, a3, a4, a5, a8, a6, (uint64_t)&protocol witness table for PaperDocumentPage);
}

uint64_t ContainerCanvasElement.search<A>(query:fullWordsOnly:caseMatchingOnly:in:)(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v17;

  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v17;
  *v17 = v8;
  v17[1] = protocol witness for PaperRenderable.renderedImage(in:) in conformance Image;
  return ContainerCanvasElement.searchDrawing<A>(query:fullWordsOnly:caseMatchingOnly:in:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

PaperKit::IndexableTextContent __swiftcall IndexableTextContent.init(_:)(Swift::String a1)
{
  Swift::String *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  PaperKit::IndexableTextContent result;

  *v1 = a1;
  v1[1] = a1;
  v2 = swift_bridgeObjectRetain();
  result.presentableText._object = v5;
  result.presentableText._countAndFlagsBits = v4;
  result.indexableText._object = v3;
  result.indexableText._countAndFlagsBits = v2;
  return result;
}

uint64_t protocol witness for CanvasElement.indexableTextContent<A>(in:) in conformance Image(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ContainerCanvasElement.indexableTextContent<A>(in:)(a1, a4, a2, (uint64_t)&protocol witness table for Image, a3);
}

uint64_t protocol witness for PaperPage.search<A>(query:fullWordsOnly:caseMatchingOnly:in:) in conformance Image(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v15;
  _QWORD *v16;

  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v15;
  *v15 = v8;
  v15[1] = protocol witness for PaperRenderable.renderedImage(in:) in conformance Image;
  v16 = (_QWORD *)swift_task_alloc();
  v15[2] = v16;
  *v16 = v15;
  v16[1] = protocol witness for PaperRenderable.renderedImage(in:) in conformance Image;
  return ContainerCanvasElement.searchDrawing<A>(query:fullWordsOnly:caseMatchingOnly:in:)(a1, a2, a3, a4, a5, a8, a6, (uint64_t)&protocol witness table for Image);
}

uint64_t protocol witness for CanvasElement.indexableTextContent<A>(in:) in conformance Paper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ContainerCanvasElement.indexableTextContent<A>(in:)(a1, a4, a2, (uint64_t)&protocol witness table for Paper, a3);
}

uint64_t protocol witness for PaperPage.search<A>(query:fullWordsOnly:caseMatchingOnly:in:) in conformance Paper(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v15;
  _QWORD *v16;

  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v15;
  *v15 = v8;
  v15[1] = dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  v16 = (_QWORD *)swift_task_alloc();
  v15[2] = v16;
  *v16 = v15;
  v16[1] = protocol witness for PaperRenderable.renderedImage(in:) in conformance Image;
  return ContainerCanvasElement.searchDrawing<A>(query:fullWordsOnly:caseMatchingOnly:in:)(a1, a2, a3, a4, a5, a8, a6, (uint64_t)&protocol witness table for Paper);
}

uint64_t Capsule<>.search(query:fullWordsOnly:caseMatchingOnly:)(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v5 + 80) = a2;
  *(_QWORD *)(v5 + 88) = v4;
  *(_BYTE *)(v5 + 277) = a4;
  *(_BYTE *)(v5 + 276) = a3;
  *(_QWORD *)(v5 + 72) = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>));
  *(_QWORD *)(v5 + 96) = v6;
  *(_QWORD *)(v5 + 104) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 112) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
  *(_QWORD *)(v5 + 120) = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  *(_QWORD *)(v5 + 128) = v7;
  *(_QWORD *)(v5 + 136) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 144) = swift_task_alloc();
  *(_QWORD *)(v5 + 152) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?);
  *(_QWORD *)(v5 + 160) = swift_task_alloc();
  *(_QWORD *)(v5 + 168) = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  *(_QWORD *)(v5 + 176) = v8;
  *(_QWORD *)(v5 + 184) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v5 + 192) = swift_task_alloc();
  *(_QWORD *)(v5 + 200) = type metadata accessor for PaperDocument(0);
  *(_QWORD *)(v5 + 208) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>);
  *(_QWORD *)(v5 + 216) = swift_task_alloc();
  *(_QWORD *)(v5 + 224) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
  *(_QWORD *)(v5 + 232) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t Capsule<>.search(query:fullWordsOnly:caseMatchingOnly:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  *(_QWORD *)(v0 + 56) = MEMORY[0x1E0DEE9D8];
  v40 = *(_QWORD *)(v0 + 232);
  v1 = *(_QWORD *)(v0 + 216);
  v41 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 176);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  *(_QWORD *)(v0 + 240) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  Capsule<>.root.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v4, v2, v5);
  outlined destroy of PKStrokeProperties(v2, type metadata accessor for PaperDocument);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
  v6(v1, v4, v5);
  v6(v4, v1, v5);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>, MEMORY[0x1E0D11DC0]);
  dispatch thunk of Sequence.makeIterator()();
  v7 = *(int *)(v41 + 36);
  *(_DWORD *)(v0 + 272) = v7;
  *(_QWORD *)(v40 + v7) = 0;
  v8 = *(_QWORD *)(v0 + 128);
  v9 = *(_QWORD *)(v0 + 136);
  v10 = *(_QWORD *)(v0 + 120);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator, MEMORY[0x1E0D11D70]);
  dispatch thunk of IteratorProtocol.next()();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v10, 1, v8) == 1)
  {
    v11 = *(_QWORD *)(v0 + 160);
    v12 = *(_QWORD *)(v0 + 96);
    v13 = *(_QWORD *)(v0 + 104);
    outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 120), &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  }
  else
  {
    v14 = *(int *)(v0 + 272);
    v15 = *(_QWORD *)(v0 + 232);
    v16 = *(_QWORD *)(v0 + 152);
    v17 = *(_QWORD *)(v0 + 128);
    v18 = *(_QWORD *)(v0 + 112);
    v19 = *(_QWORD *)(v0 + 96);
    v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 136) + 32);
    v20(v16, *(_QWORD *)(v0 + 120), v17);
    v21 = v18 + *(int *)(v19 + 48);
    v22 = *(_QWORD *)(v15 + v14);
    result = v20(v21, v16, v17);
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      return result;
    }
    v24 = *(_QWORD **)(v0 + 160);
    v25 = *(_QWORD *)(v0 + 128);
    v26 = *(_QWORD *)(v0 + 96);
    v27 = *(_QWORD *)(v0 + 104);
    *(_QWORD *)(*(_QWORD *)(v0 + 232) + *(int *)(v0 + 272)) = v22 + 1;
    v28 = (char *)v24 + *(int *)(v26 + 48);
    *v24 = v22;
    v20((uint64_t)v28, v21, v25);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  v29 = *(_QWORD *)(v0 + 168);
  v30 = *(_QWORD *)(v0 + 96);
  v31 = *(_QWORD *)(v0 + 104);
  outlined init with take of (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?(*(_QWORD *)(v0 + 160), v29);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) != 1)
  {
    v32 = *(char **)(v0 + 168);
    v33 = *(_QWORD *)(v0 + 136);
    v34 = *(_QWORD *)(v0 + 144);
    v35 = *(_QWORD *)(v0 + 128);
    v36 = *(_QWORD *)(v0 + 96);
    *(_QWORD *)(v0 + 248) = *(_QWORD *)v32;
    (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v34, &v32[*(int *)(v36 + 48)], v35);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
    SharedTagged_3.subscript.getter();
    v37 = *(_QWORD *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v42 = **(int **)(v37 + 192) + *(_QWORD *)(v37 + 192);
    v38 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 256) = v38;
    *v38 = v0;
    v38[1] = Capsule<>.search(query:fullWordsOnly:caseMatchingOnly:);
    __asm { BR              X8 }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 232), &demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
  v39 = specialized _arrayForceCast<A, B>(_:)(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v39);
}

{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = (uint64_t *)(v0 + 64);
    *(_QWORD *)(v0 + 64) = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v4 = *(_QWORD *)(v0 + 64);
    v5 = *(_QWORD *)(v4 + 16);
    v6 = 40 * v5;
    v7 = (__int128 *)(v1 + 48);
    do
    {
      v8 = *(v7 - 1);
      v9 = *v7;
      *v3 = v4;
      v10 = *(_QWORD *)(v4 + 24);
      v11 = v5 + 1;
      if (v5 >= v10 >> 1)
      {
        v48 = v9;
        v49 = v8;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v5 + 1, 1);
        v9 = v48;
        v8 = v49;
        v4 = *v3;
      }
      v12 = *(_QWORD *)(v0 + 248);
      *(_QWORD *)(v4 + 16) = v11;
      v13 = v4 + v6;
      *(_QWORD *)(v13 + 32) = v12;
      *(_OWORD *)(v13 + 40) = v8;
      *(_OWORD *)(v13 + 56) = v9;
      v6 += 40;
      v7 += 2;
      v5 = v11;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v4 = MEMORY[0x1E0DEE9D8];
  }
  v15 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 144);
  v16 = *(_QWORD *)(v0 + 128);
  specialized Array.append<A>(contentsOf:)(v4);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v17 = *(_QWORD *)(v0 + 128);
  v18 = *(_QWORD *)(v0 + 136);
  v19 = *(_QWORD *)(v0 + 120);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator and conformance CROrderedSet<A>.Iterator, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator, MEMORY[0x1E0D11D70]);
  dispatch thunk of IteratorProtocol.next()();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v19, 1, v17) == 1)
  {
    v20 = *(_QWORD *)(v0 + 160);
    v21 = *(_QWORD *)(v0 + 96);
    v22 = *(_QWORD *)(v0 + 104);
    outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 120), &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(v20, 1, 1, v21);
  }
  else
  {
    v23 = *(int *)(v0 + 272);
    v24 = *(_QWORD *)(v0 + 232);
    v25 = *(_QWORD *)(v0 + 152);
    v26 = *(_QWORD *)(v0 + 128);
    v27 = *(_QWORD *)(v0 + 112);
    v28 = *(_QWORD *)(v0 + 96);
    v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 136) + 32);
    v29(v25, *(_QWORD *)(v0 + 120), v26);
    v30 = v27 + *(int *)(v28 + 48);
    v31 = *(_QWORD *)(v24 + v23);
    result = v29(v30, v25, v26);
    if (__OFADD__(v31, 1))
    {
      __break(1u);
      return result;
    }
    v33 = *(_QWORD **)(v0 + 160);
    v34 = *(_QWORD *)(v0 + 128);
    v35 = *(_QWORD *)(v0 + 96);
    v36 = *(_QWORD *)(v0 + 104);
    *(_QWORD *)(*(_QWORD *)(v0 + 232) + *(int *)(v0 + 272)) = v31 + 1;
    v37 = (char *)v33 + *(int *)(v35 + 48);
    *v33 = v31;
    v29((uint64_t)v37, v30, v34);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  }
  v38 = *(_QWORD *)(v0 + 168);
  v39 = *(_QWORD *)(v0 + 96);
  v40 = *(_QWORD *)(v0 + 104);
  outlined init with take of (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?(*(_QWORD *)(v0 + 160), v38);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39) != 1)
  {
    v41 = *(char **)(v0 + 168);
    v42 = *(_QWORD *)(v0 + 136);
    v43 = *(_QWORD *)(v0 + 144);
    v44 = *(_QWORD *)(v0 + 128);
    v45 = *(_QWORD *)(v0 + 96);
    *(_QWORD *)(v0 + 248) = *(_QWORD *)v41;
    (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, &v41[*(int *)(v45 + 48)], v44);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
    SharedTagged_3.subscript.getter();
    v46 = *(_QWORD *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v50 = **(int **)(v46 + 192) + *(_QWORD *)(v46 + 192);
    v47 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 256) = v47;
    *v47 = v0;
    v47[1] = Capsule<>.search(query:fullWordsOnly:caseMatchingOnly:);
    __asm { BR              X8 }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 232), &demangling cache variable for type metadata for EnumeratedSequence<CROrderedSet<SharedTagged_3<TaggedPaperPage>>>.Iterator);
  v51 = specialized _arrayForceCast<A, B>(_:)(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v51);
}

uint64_t Capsule<>.search(query:fullWordsOnly:caseMatchingOnly:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 264) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t specialized ContainerCanvasElement.drawingIndexableTextContent<A>(in:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  objc_class *v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  id v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  objc_super v33;

  v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  CRRegister.wrappedValue.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    return MEMORY[0x1E0DEE9D8];
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v8, v9);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>, MEMORY[0x1E0D12878]);
  Capsule.encapsulateTransient<A>(_:)();
  v14 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
  v15 = objc_allocWithZone(v14);
  (*(void (**)(uint64_t, char *, uint64_t))(v1 + 16))((uint64_t)v15 + OBJC_IVAR___PKDrawingCoherence_model, v4, v0);
  v33.receiver = v15;
  v33.super_class = v14;
  v16 = objc_msgSendSuper2(&v33, sel_init);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  objc_msgSend(v16, sel_setRecognitionEnabled_, 1);
  v17 = objc_msgSend(v16, sel_indexableContent);
  if (!v17)
  {

    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    return MEMORY[0x1E0DEE9D8];
  }
  v18 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexableTextContent>);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1DDF32CF0;
  v20 = objc_msgSend(v18, sel_indexableTextRepresentation);
  if (v20)
  {
    v21 = v20;
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v23 = v22;

  }
  else
  {
    v32 = 0;
    v23 = 0xE000000000000000;
  }
  v24 = v13;
  v25 = objc_msgSend(v18, sel_presentableTextRepresentation);
  if (v25)
  {
    v26 = v25;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v29 = v28;

  }
  else
  {
    v27 = 0;
    v29 = 0xE000000000000000;
  }
  *(_QWORD *)(v19 + 32) = v32;
  *(_QWORD *)(v19 + 40) = v23;
  *(_QWORD *)(v19 + 48) = v27;
  *(_QWORD *)(v19 + 56) = v29;

  (*(void (**)(char *, uint64_t))(v10 + 8))(v24, v9);
  return v19;
}

uint64_t ContainerCanvasElement.drawingIndexableTextContent<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  objc_class *v22;
  id v23;
  id v24;
  id v25;
  char *v26;
  void *v27;
  uint64_t v28;
  id v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD v39[3];
  uint64_t v40;
  objc_super v41;

  v39[1] = a5;
  v39[2] = a3;
  v40 = a1;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v17 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v16, v18);
  v21 = (char *)v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, double))(a4 + 48))(a2, a4, v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    return MEMORY[0x1E0DEE9D8];
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v21, v15, v16);
  type metadata accessor for Capsule();
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>, MEMORY[0x1E0D12878]);
  Capsule.encapsulateTransient<A>(_:)();
  v22 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
  v23 = objc_allocWithZone(v22);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 16))((uint64_t)v23 + OBJC_IVAR___PKDrawingCoherence_model, v11, v7);
  v41.receiver = v23;
  v41.super_class = v22;
  v24 = objc_msgSendSuper2(&v41, sel_init);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  objc_msgSend(v24, sel_setRecognitionEnabled_, 1);
  v25 = objc_msgSend(v24, sel_indexableContent);
  v26 = v21;
  if (!v25)
  {

    (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v16);
    return MEMORY[0x1E0DEE9D8];
  }
  v27 = v25;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexableTextContent>);
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1DDF32CF0;
  v29 = objc_msgSend(v27, sel_indexableTextRepresentation);
  if (v29)
  {
    v30 = v29;
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v32 = v31;

  }
  else
  {
    v40 = 0;
    v32 = 0xE000000000000000;
  }
  v33 = objc_msgSend(v27, sel_presentableTextRepresentation);
  if (v33)
  {
    v34 = v33;
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v37 = v36;

  }
  else
  {
    v35 = 0;
    v37 = 0xE000000000000000;
  }
  *(_QWORD *)(v28 + 32) = v40;
  *(_QWORD *)(v28 + 40) = v32;
  *(_QWORD *)(v28 + 48) = v35;
  *(_QWORD *)(v28 + 56) = v37;

  (*(void (**)(char *, uint64_t))(v17 + 8))(v26, v16);
  return v28;
}

uint64_t ContainerCanvasElement.subelementsIndexableTextContent<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x1E0C80A78](v10, v12);
  v15 = &v18[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t, uint64_t, double))(a4 + 72))(a2, a4, v13);
  v19 = a2;
  v20 = a3;
  v21 = a4;
  v22 = a5;
  v23 = a1;
  v16 = specialized Sequence.flatMap<A>(_:)((void (*)(uint64_t *__return_ptr, char *))partial apply for closure #1 in ContainerCanvasElement.subelementsIndexableTextContent<A>(in:), (uint64_t)v18);
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v15, v10);
  return v16;
}

PaperKit::IndexableTextContent __swiftcall IndexableTextContent.init(indexableText:presentableText:)(Swift::String indexableText, Swift::String presentableText)
{
  Swift::String *v2;
  PaperKit::IndexableTextContent result;

  *v2 = indexableText;
  v2[1] = presentableText;
  result.presentableText = presentableText;
  result.indexableText = indexableText;
  return result;
}

uint64_t closure #1 in ContainerCanvasElement.subelementsIndexableTextContent<A>(in:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X5>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  SharedTagged_9.subscript.getter();
  v8 = v12;
  v9 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  *a4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 120))(a1, a2, a3, v8, v9);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t ContainerCanvasElement.searchDrawing<A>(query:fullWordsOnly:caseMatchingOnly:in:)(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  *(_QWORD *)(v9 + 88) = v13;
  *(_QWORD *)(v9 + 96) = v8;
  *(_QWORD *)(v9 + 72) = a7;
  *(_QWORD *)(v9 + 80) = a8;
  *(_QWORD *)(v9 + 56) = a5;
  *(_QWORD *)(v9 + 64) = a6;
  *(_BYTE *)(v9 + 185) = a4;
  *(_BYTE *)(v9 + 184) = a3;
  *(_QWORD *)(v9 + 40) = a1;
  *(_QWORD *)(v9 + 48) = a2;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  *(_QWORD *)(v9 + 104) = v10;
  *(_QWORD *)(v9 + 112) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v9 + 120) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  *(_QWORD *)(v9 + 128) = swift_task_alloc();
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  *(_QWORD *)(v9 + 136) = v11;
  *(_QWORD *)(v9 + 144) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v9 + 152) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t ContainerCanvasElement.searchDrawing<A>(query:fullWordsOnly:caseMatchingOnly:in:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  objc_class *v9;
  id v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  char v16;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 80) + 48))(*(_QWORD *)(v0 + 64));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 128), (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(MEMORY[0x1E0DEE9D8]);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 112);
    v5 = *(_QWORD *)(v0 + 120);
    v7 = *(_QWORD *)(v0 + 104);
    v15 = *(_BYTE *)(v0 + 184);
    v16 = *(_BYTE *)(v0 + 185);
    v14 = *(_QWORD *)(v0 + 48);
    v8 = *(_QWORD *)(v0 + 40);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 32))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
    type metadata accessor for Capsule();
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>, MEMORY[0x1E0D12878]);
    Capsule.encapsulateTransient<A>(_:)();
    v9 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
    v10 = objc_allocWithZone(v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))((uint64_t)v10 + OBJC_IVAR___PKDrawingCoherence_model, v5, v7);
    *(_QWORD *)(v0 + 16) = v10;
    *(_QWORD *)(v0 + 24) = v9;
    v11 = objc_msgSendSuper2((objc_super *)(v0 + 16), sel_init);
    *(_QWORD *)(v0 + 160) = v11;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    objc_msgSend(v11, sel_setRecognitionEnabled_, 1);
    v12 = swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v12;
    *(_QWORD *)(v12 + 16) = v11;
    *(_QWORD *)(v12 + 24) = v8;
    *(_QWORD *)(v12 + 32) = v14;
    *(_BYTE *)(v12 + 40) = v15;
    *(_BYTE *)(v12 + 41) = v16;
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 176) = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SearchQueryResult]);
    *v13 = v0;
    v13[1] = ContainerCanvasElement.searchDrawing<A>(query:fullWordsOnly:caseMatchingOnly:in:);
    return withCheckedContinuation<A>(isolation:function:_:)();
  }
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t outlined init with take of (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: SharedTagged_3<TaggedPaperPage>)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void closure #1 in ContainerCanvasElement.searchDrawing<A>(query:fullWordsOnly:caseMatchingOnly:in:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  _QWORD aBlock[6];

  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SearchQueryResult], Never>);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v16 = MEMORY[0x1E0C80A78](v12, v15);
  v17 = (void *)MEMORY[0x1DF0E41AC](a3, a4, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12);
  v18 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v19 + v18, (char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  aBlock[4] = partial apply for closure #1 in closure #1 in ContainerCanvasElement.searchDrawing<A>(query:fullWordsOnly:caseMatchingOnly:in:);
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [PKSearchQueryItem]) -> ();
  aBlock[3] = &block_descriptor_62;
  v20 = _Block_copy(aBlock);
  v21 = a2;
  swift_release();
  objc_msgSend(v21, sel_performSearchQuery_fullWordsOnly_caseMatchingOnly_withBlock_, v17, a5 & 1, a6 & 1, v20);
  _Block_release(v20);

}

uint64_t closure #1 in closure #1 in ContainerCanvasElement.searchDrawing<A>(query:fullWordsOnly:caseMatchingOnly:in:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v2)
  {
LABEL_12:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SearchQueryResult], Never>);
    return CheckedContinuation.resume(returning:)();
  }
  v18 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v4 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v5 = (id)MEMORY[0x1DF0E4D64](v4, a1);
      else
        v5 = *(id *)(a1 + 8 * v4 + 32);
      v6 = v5;
      objc_msgSend(v5, sel_bounds);
      v8 = v7;
      v10 = v9;
      v12 = v11;
      v14 = v13;

      v16 = *(_QWORD *)(v18 + 16);
      v15 = *(_QWORD *)(v18 + 24);
      if (v16 >= v15 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      ++v4;
      *(_QWORD *)(v18 + 16) = v16 + 1;
      v17 = (_QWORD *)(v18 + 32 * v16);
      v17[4] = v8;
      v17[5] = v10;
      v17[6] = v12;
      v17[7] = v14;
    }
    while (v2 != v4);
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [PKSearchQueryItem]) -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  type metadata accessor for PKSearchQueryItem();
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t Capsule<>.search(query:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for Paper();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = &v16[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  Capsule<>.root.getter();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v9, &v13[*(int *)(v10 + 44)], v5);
  outlined destroy of PKStrokeProperties((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
  v17 = v2;
  v18 = a1;
  v19 = a2;
  v14 = specialized Sequence.flatMap<A>(_:)((void (*)(uint64_t *__return_ptr, char *))partial apply for closure #1 in Capsule<>.search(query:), (uint64_t)v16);
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
  return v14;
}

uint64_t closure #1 in Capsule<>.search(query:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v26;
  __int128 v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[2];
  char v32;
  uint64_t v33;

  v33 = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v4 = type metadata accessor for Paper();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  SharedTagged_9.subscript.getter();
  v5 = v30;
  __swift_project_boxed_opaque_existential_1(v28, v29);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v7 = v6(a1, v4);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = v7;
    lazy protocol witness table accessor for type String and conformance String();
    v10 = v9 + 40;
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v26 = *(_OWORD *)(v10 - 8);
      if ((StringProtocol.localizedCaseInsensitiveContains<A>(_:)() & 1) != 0)
      {
        v14 = v29;
        v13 = v30;
        __swift_project_boxed_opaque_existential_1(v28, v29);
        swift_getKeyPath();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
        Capsule<>.subscript.getter();
        swift_release();
        v31[0] = v26;
        v31[1] = v27;
        v32 = 0;
        v15 = (*(double (**)(_OWORD *, uint64_t, uint64_t))(v13 + 112))(v31, v14, v13);
        v17 = v16;
        v19 = v18;
        v21 = v20;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
        v23 = v11[2];
        v22 = v11[3];
        if (v23 >= v22 >> 1)
          v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, v11);
        v11[2] = v23 + 1;
        v12 = (double *)&v11[4 * v23];
        v12[4] = v15;
        *((_QWORD *)v12 + 5) = v17;
        *((_QWORD *)v12 + 6) = v19;
        *((_QWORD *)v12 + 7) = v21;
      }
      v10 += 32;
      --v8;
    }
    while (v8);
  }
  else
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease();
  *a3 = v11;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
}

uint64_t Capsule<>.indexableTextContent.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[16];
  uint64_t v15;
  uint64_t v16;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for Paper();
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  Capsule<>.root.getter();
  v10 = specialized ContainerCanvasElement.drawingIndexableTextContent<A>(in:)();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v2 + 16))(v5, &v9[*(int *)(v6 + 44)], v1);
  v15 = v0;
  v11 = specialized Sequence.flatMap<A>(_:)((void (*)(uint64_t *__return_ptr, char *))partial apply for specialized closure #1 in ContainerCanvasElement.subelementsIndexableTextContent<A>(in:), (uint64_t)v14);
  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v5, v1);
  v16 = v10;
  specialized Array.append<A>(contentsOf:)(v11);
  v12 = v16;
  outlined destroy of PKStrokeProperties((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
  return v12;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE v12[16];
  uint64_t v13;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = &v12[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for PaperDocument(0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  Capsule<>.root.getter();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v2 + 16))(v5, v9, v1);
  outlined destroy of PKStrokeProperties((uint64_t)v9, type metadata accessor for PaperDocument);
  v13 = v0;
  v10 = specialized Sequence.flatMap<A>(_:)((void (*)(uint64_t *__return_ptr, char *))partial apply for closure #1 in Capsule<>.indexableTextContent.getter, (uint64_t)v12);
  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v5, v1);
  return v10;
}

uint64_t closure #1 in Capsule<>.indexableTextContent.getter@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v4 = type metadata accessor for PaperDocument(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  SharedTagged_3.subscript.getter();
  v5 = v11;
  v6 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 184);
  v8 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  *a2 = v7(a1, v4, v8, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t Array<A>.indexableTextContentString.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v6 = *(v2 - 1);
      v5 = *v2;
      v7 = HIBYTE(*v2) & 0xF;
      if ((*v2 & 0x2000000000000000) == 0)
        v7 = v6 & 0xFFFFFFFFFFFFLL;
      if (v7)
      {
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        v9 = v3[2];
        v8 = v3[3];
        if (v9 >= v8 >> 1)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v3);
        v3[2] = v9 + 1;
        v4 = &v3[2 * v9];
        v4[4] = v6;
        v4[5] = v5;
      }
      v2 += 4;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
  v10 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t Array<A>.presentableTextContentString.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v6 = *(v2 - 1);
      v5 = *v2;
      v7 = HIBYTE(*v2) & 0xF;
      if ((*v2 & 0x2000000000000000) == 0)
        v7 = v6 & 0xFFFFFFFFFFFFLL;
      if (v7)
      {
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
        v9 = v3[2];
        v8 = v3[3];
        if (v9 >= v8 >> 1)
          v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v8 > 1), v9 + 1, 1, v3);
        v3[2] = v9 + 1;
        v4 = &v3[2 * v9];
        v4[4] = v6;
        v4[5] = v5;
      }
      v2 += 4;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
  v10 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t IndexableTextContent.indexableText.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IndexableTextContent.presentableText.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t partial apply for closure #1 in Capsule<>.search(query:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in Capsule<>.search(query:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t specialized closure #1 in ContainerCanvasElement.subelementsIndexableTextContent<A>(in:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v4 = type metadata accessor for Paper();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  SharedTagged_9.subscript.getter();
  v5 = v12;
  v6 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 120);
  v8 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v9 = v7(a1, v4, v8, v5, v6);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  *a2 = v9;
  return result;
}

uint64_t partial apply for specialized closure #1 in ContainerCanvasElement.subelementsIndexableTextContent<A>(in:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return specialized closure #1 in ContainerCanvasElement.subelementsIndexableTextContent<A>(in:)(*(_QWORD *)(v1 + 16), a1);
}

uint64_t partial apply for closure #1 in Capsule<>.indexableTextContent.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in Capsule<>.indexableTextContent.getter(*(_QWORD *)(v1 + 16), a1);
}

uint64_t specialized static IndexableTextContent.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t result;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a2[2];
  v5 = a2[3];
  v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return result;
}

_QWORD *initializeWithCopy for IndexableTextContent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for IndexableTextContent(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for IndexableTextContent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IndexableTextContent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IndexableTextContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IndexableTextContent()
{
  return &type metadata for IndexableTextContent;
}

void partial apply for closure #1 in ContainerCanvasElement.searchDrawing<A>(query:fullWordsOnly:caseMatchingOnly:in:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in ContainerCanvasElement.searchDrawing<A>(query:fullWordsOnly:caseMatchingOnly:in:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40), *(_BYTE *)(v1 + 41));
}

uint64_t sub_1DDEBF358()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SearchQueryResult], Never>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ContainerCanvasElement.searchDrawing<A>(query:fullWordsOnly:caseMatchingOnly:in:)(unint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[SearchQueryResult], Never>);
  return closure #1 in closure #1 in ContainerCanvasElement.searchDrawing<A>(query:fullWordsOnly:caseMatchingOnly:in:)(a1);
}

uint64_t block_copy_helper_62(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_62()
{
  return swift_release();
}

unint64_t type metadata accessor for PKSearchQueryItem()
{
  unint64_t result;

  result = lazy cache variable for type metadata for PKSearchQueryItem;
  if (!lazy cache variable for type metadata for PKSearchQueryItem)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PKSearchQueryItem);
  }
  return result;
}

uint64_t partial apply for closure #1 in ContainerCanvasElement.subelementsIndexableTextContent<A>(in:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in ContainerCanvasElement.subelementsIndexableTextContent<A>(in:)(v1[6], v1[3], v1[5], a1);
}

uint64_t type metadata completion function for CanvasEditMenuDelegate()
{
  return swift_initClassMetadata2();
}

void CanvasEditMenuDelegate.canvas.getter()
{
  JUMPOUT(0x1DF0E666CLL);
}

uint64_t CanvasEditMenuDelegate.editMenuIsPresented.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + direct field offset for CanvasEditMenuDelegate.editMenuIsPresented);
}

uint64_t CanvasEditMenuDelegate.editMenuIsPresented.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + direct field offset for CanvasEditMenuDelegate.editMenuIsPresented) = result;
  return result;
}

void closure #3 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  id v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CGAffineTransform v24;
  CGAffineTransform v25;
  CGAffineTransform v26;
  CGPoint v27;

  v4 = a2 + 16;
  swift_beginAccess();
  v5 = MEMORY[0x1DF0E666C](v4);
  if (v5)
  {
    v6 = (char *)v5;
    objc_msgSend(a3, sel_sourcePoint);
    v8 = v7;
    v10 = v9;
    v11 = Canvas.editingView.getter();
    objc_msgSend(v6, sel_convertPoint_toCoordinateSpace_, v11, v8, v10);
    v13 = v12;
    v15 = v14;

    v16 = Canvas.editingView.getter();
    AnyCanvasElementView.paperBoundsTransform()(&v26);
    v25 = v26;
    CGAffineTransformInvert(&v24, &v25);
    v25 = v24;
    v27.x = v13;
    v27.y = v15;
    v17 = *(_OWORD *)&CGPointApplyAffineTransform(v27, &v25);

    v18 = *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
    if (v18)
    {
      v19 = v18 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
      v20 = *(_QWORD *)v19;
      v21 = *(_QWORD *)(v19 + 8);
      v22 = *(_QWORD *)(v19 + 16);
      v23 = *(unsigned __int8 *)(v19 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      AnyCanvas.performSelectionAction(_:_:at:)(2, v20, v21, v22, v23, v17);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
}

void closure #4 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v6)(void);
  _QWORD *v7;
  void *v8;

  v4 = a2 + 16;
  swift_beginAccess();
  v5 = (_QWORD *)MEMORY[0x1DF0E666C](v4);
  if (v5)
  {
    v6 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x320);
    v7 = v5;
    v8 = (void *)v6();

    if (v8)
    {
      objc_msgSend(a3, sel_sourcePoint);
      objc_msgSend(v7, sel_convertPoint_toCoordinateSpace_, v8);
      objc_msgSend(v8, sel_insertSpaceAtLocation_);

      v7 = v8;
    }

  }
}

void closure #1 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v7 = a2 + 16;
  swift_beginAccess();
  v8 = MEMORY[0x1DF0E666C](v7);
  if (v8)
  {
    v9 = (void *)v8;
    a6();

  }
}

void closure #6 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  void *v7;

  v4 = a2 + 16;
  swift_beginAccess();
  v5 = (_QWORD *)MEMORY[0x1DF0E666C](v4);
  if (v5)
  {
    v6 = v5;
    v7 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x320))();

    if (v7)
    {
      objc_msgSend(v7, sel__getAllHandwritingTranscription_, a3);

    }
  }
}

void closure #7 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;

  v4 = a2 + 16;
  swift_beginAccess();
  v5 = MEMORY[0x1DF0E666C](v4);
  if (v5)
  {
    v6 = (void *)v5;
    objc_msgSend(a3, sel_sourcePoint);
    Canvas.showOrHideContent(below:)((CGPoint)__PAIR128__(v8, v7));

  }
}

Class @objc CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;
  Class isa;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  isa = specialized CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(v7).super.super.isa;

  return isa;
}

void @objc CanvasEditMenuDelegate.editMenuInteraction(_:willPresentMenuFor:animator:)()
{
  specialized CanvasEditMenuDelegate.editMenuInteraction(_:willPresentMenuFor:animator:)();
}

void closure #1 in CanvasEditMenuDelegate.editMenuInteraction(_:willDismissMenuFor:animator:)(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = (_BYTE *)MEMORY[0x1DF0E666C](v1);
  if (v2)
  {
    v2[direct field offset for CanvasEditMenuDelegate.editMenuIsPresented] = 0;

  }
}

void @objc CanvasEditMenuDelegate.editMenuInteraction(_:willDismissMenuFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8;
  id v9;
  id v10;

  v8 = a3;
  v9 = a4;
  swift_unknownObjectRetain();
  v10 = a1;
  specialized CanvasEditMenuDelegate.editMenuInteraction(_:willDismissMenuFor:animator:)(a5);

  swift_unknownObjectRelease();
}

void @objc CanvasEditMenuDelegate.init()()
{
  specialized CanvasEditMenuDelegate.init()();
}

id CanvasEditMenuDelegate.__deallocating_deinit()
{
  _QWORD *v0;
  objc_class *v1;
  objc_super v3;

  v1 = (objc_class *)type metadata accessor for CanvasEditMenuDelegate(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60));
  v3.receiver = v0;
  v3.super_class = v1;
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t @objc CanvasEditMenuDelegate.__ivar_destroyer()
{
  return swift_unknownObjectWeakDestroy();
}

uint64_t type metadata accessor for CanvasEditMenuDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CanvasEditMenuDelegate);
}

id specialized CanvasEditMenuDelegate.init(canvas:)()
{
  _QWORD *v0;
  uint64_t *v1;
  objc_class *v2;
  objc_super v4;

  v1 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *v0);
  swift_unknownObjectWeakInit();
  *((_BYTE *)v0 + direct field offset for CanvasEditMenuDelegate.editMenuIsPresented) = 0;
  swift_unknownObjectWeakAssign();
  v2 = (objc_class *)type metadata accessor for CanvasEditMenuDelegate(0, v1[10], v1[11], v1[12]);
  v4.receiver = v0;
  v4.super_class = v2;
  return objc_msgSendSuper2(&v4, sel_init);
}

id specialized CanvasEditMenuDelegate.__allocating_init(canvas:)()
{
  uint64_t *v0;
  id v1;

  v1 = objc_allocWithZone((Class)type metadata accessor for CanvasEditMenuDelegate(0, v0[10], v0[11], v0[12]));
  return specialized CanvasEditMenuDelegate.init(canvas:)();
}

UIMenu specialized CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t inited;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String_optional v10;
  Swift::String v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String_optional v26;
  Swift::String v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  unsigned int v39;
  Swift::String v40;
  Swift::String_optional v41;
  Swift::String v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  id v46;
  void *v47;
  char **v48;
  id v49;
  void *v50;
  char **v51;
  unsigned int v52;
  Swift::String v53;
  Swift::String_optional v54;
  Swift::String v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  void *v61;
  unsigned int v62;
  Swift::String v63;
  Swift::String_optional v64;
  Swift::String v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  id v71;
  void *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  _QWORD *v80;
  void *v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  UIMenuElementSize v117;
  Swift::String v118;
  UIMenuElementSize preferredElementSize;
  UIMenuElementSize preferredElementSizea;
  Swift::OpaquePointer v122;
  uint64_t v123;
  _QWORD *v124;
  UIMenuElementSize v126;
  UIImage_optional v127;
  Swift::String v128;
  Swift::String v129;
  Swift::String v130;
  Swift::String v131;
  Swift::String v132;

  v2 = v1;
  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = *MEMORY[0x1E0DEEDD8] & *v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UIMenuElement?>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF32930;
  v6 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v1 + direct field offset for CanvasEditMenuDelegate.canvas);
  if (v6
    && (v7 = v6,
        (*(void (**)(UIMenuElementSize *__return_ptr))((*v3 & *v6) + 0x2C8))(&v126),
        v7,
        v126 == UIMenuElementSizeMedium))
  {
    v8 = 0;
  }
  else
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    v128._countAndFlagsBits = 0xD000000000000025;
    v128._object = (void *)0x80000001DDF5B1B0;
    v9._countAndFlagsBits = 0x41207463656C6553;
    v9._object = (void *)0xEA00000000006C6CLL;
    v10.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v10.value._object = (void *)0xEB00000000656C62;
    v11._countAndFlagsBits = 0;
    v11._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v9, v10, paperKitBundle, v11, v128);
    v12 = swift_allocObject();
    v13 = (void *)MEMORY[0x1DF0E666C]((char *)v2 + direct field offset for CanvasEditMenuDelegate.canvas);
    swift_unknownObjectWeakInit();

    v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = *(_OWORD *)(v4 + 80);
    *(_QWORD *)(v14 + 32) = *(_QWORD *)(v4 + 96);
    *(_QWORD *)(v14 + 40) = v12;
    preferredElementSize = UIMenuElementSizeSmall;
    v122._rawValue = 0;
    v8 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  }
  *(_QWORD *)(inited + 32) = v8;
  v15 = objc_msgSend((id)objc_opt_self(), sel_generalPasteboard);
  v16 = objc_msgSend(v15, sel_pasteboardTypes);

  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v18 = *(_QWORD *)(v17 + 16);
  v124 = v2;
  if (v18)
  {
    v123 = v4;
    swift_bridgeObjectRetain();
    v19 = (uint64_t *)(v17 + 40);
    while (1)
    {
      v20 = *(v19 - 1);
      v21 = *v19;
      v22 = v20 == 0x6C7070612E6D6F63 && v21 == 0xEF72657061702E65;
      if (v22
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v20 == 0xD000000000000017 && v21 == 0x80000001DDF4B920)
      {
        break;
      }
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        break;
      v23 = v20 == 0xD000000000000011 && v21 == 0x80000001DDF4B940;
      if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        break;
      v19 += 2;
      swift_arrayDestroy();
      if (!--v18)
      {
        swift_bridgeObjectRelease_n();
        v24 = 0;
        v4 = v123;
        goto LABEL_28;
      }
    }
    swift_bridgeObjectRelease_n();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    v129._countAndFlagsBits = 0xD000000000000020;
    v129._object = (void *)0x80000001DDF5B340;
    v25._countAndFlagsBits = 0x6574736150;
    v25._object = (void *)0xE500000000000000;
    v26.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v26.value._object = (void *)0xEB00000000656C62;
    v27._countAndFlagsBits = 0;
    v27._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v25, v26, paperKitBundle, v27, v129);
    v28 = swift_allocObject();
    v29 = (void *)MEMORY[0x1DF0E666C]((char *)v2 + direct field offset for CanvasEditMenuDelegate.canvas);
    swift_unknownObjectWeakInit();

    v30 = swift_allocObject();
    v4 = v123;
    *(_OWORD *)(v30 + 16) = *(_OWORD *)(v123 + 80);
    *(_QWORD *)(v30 + 32) = *(_QWORD *)(v123 + 96);
    *(_QWORD *)(v30 + 40) = v28;
    *(_QWORD *)(v30 + 48) = a1;
    v31 = a1;
    preferredElementSize = UIMenuElementSizeSmall;
    v122._rawValue = 0;
    v24 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  }
  else
  {
    swift_bridgeObjectRelease();
    v24 = 0;
  }
LABEL_28:
  *(_QWORD *)(inited + 40) = v24;
  v32 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v2 + direct field offset for CanvasEditMenuDelegate.canvas);
  if (v32)
  {
    v37 = v32;
    v38 = (void *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v32)
                                                                                          + 0x320))(v32, v33, v34, v35, v36);

    if (v38 && (v39 = objc_msgSend(v38, sel_insertSpaceEnabled), v38, v39))
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      v130._countAndFlagsBits = 0xD000000000000027;
      v130._object = (void *)0x80000001DDF5B310;
      v40._countAndFlagsBits = 0x5320747265736E49;
      v40._object = (void *)0xEC00000065636170;
      v41.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v41.value._object = (void *)0xEB00000000656C62;
      v42._countAndFlagsBits = 0;
      v42._object = (void *)0xE000000000000000;
      NSLocalizedString(_:tableName:bundle:value:comment:)(v40, v41, paperKitBundle, v42, v130);
      v43 = swift_allocObject();
      v44 = (void *)MEMORY[0x1DF0E666C]((char *)v2 + direct field offset for CanvasEditMenuDelegate.canvas);
      swift_unknownObjectWeakInit();

      v45 = swift_allocObject();
      *(_OWORD *)(v45 + 16) = *(_OWORD *)(v4 + 80);
      *(_QWORD *)(v45 + 32) = *(_QWORD *)(v4 + 96);
      *(_QWORD *)(v45 + 40) = v43;
      *(_QWORD *)(v45 + 48) = a1;
      v46 = a1;
      preferredElementSize = UIMenuElementSizeSmall;
      v122._rawValue = 0;
      v32 = (_QWORD *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    }
    else
    {
      v32 = 0;
    }
  }
  *(_QWORD *)(inited + 48) = v32;
  v47 = (void *)objc_opt_self();
  v48 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
  v49 = objc_msgSend(v47, sel_standardUserDefaults);
  v50 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000026, 0x80000001DDF5B1E0);
  v51 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
  v52 = objc_msgSend(v49, sel_BOOLForKey_, v50);

  if (v52)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    v131._countAndFlagsBits = 0xD000000000000023;
    v131._object = (void *)0x80000001DDF5B2E0;
    v53._countAndFlagsBits = 0x6C6C412079706F43;
    v53._object = (void *)0xE800000000000000;
    v54.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v54.value._object = (void *)0xEB00000000656C62;
    v55._countAndFlagsBits = 0;
    v55._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v53, v54, paperKitBundle, v55, v131);
    v56 = swift_allocObject();
    v57 = (void *)MEMORY[0x1DF0E666C]((char *)v2 + direct field offset for CanvasEditMenuDelegate.canvas);
    swift_unknownObjectWeakInit();

    v58 = swift_allocObject();
    *(_OWORD *)(v58 + 16) = *(_OWORD *)(v4 + 80);
    *(_QWORD *)(v58 + 32) = *(_QWORD *)(v4 + 96);
    *(_QWORD *)(v58 + 40) = v56;
    preferredElementSize = UIMenuElementSizeSmall;
    v122._rawValue = 0;
    v59 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    v48 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
    v51 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
  }
  else
  {
    v59 = 0;
  }
  *(_QWORD *)(inited + 56) = v59;
  v60 = objc_msgSend(v47, v48[257], preferredElementSize);
  v61 = (void *)MEMORY[0x1DF0E41AC](0xD00000000000003ELL, 0x80000001DDF5B210);
  v62 = objc_msgSend(v60, v51[258], v61);

  if (v62)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    v63._countAndFlagsBits = 0xD000000000000016;
    v132._countAndFlagsBits = 0xD000000000000031;
    v132._object = (void *)0x80000001DDF5B2A0;
    v63._object = (void *)0x80000001DDF5B280;
    v64.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v64.value._object = (void *)0xEB00000000656C62;
    v65._countAndFlagsBits = 0;
    v65._object = (void *)0xE000000000000000;
    NSLocalizedString(_:tableName:bundle:value:comment:)(v63, v64, paperKitBundle, v65, v132);
    v66 = swift_allocObject();
    v67 = (void *)MEMORY[0x1DF0E666C]((char *)v124 + direct field offset for CanvasEditMenuDelegate.canvas);
    swift_unknownObjectWeakInit();

    v68 = swift_allocObject();
    *(_OWORD *)(v68 + 16) = *(_OWORD *)(v4 + 80);
    *(_QWORD *)(v68 + 32) = *(_QWORD *)(v4 + 96);
    *(_QWORD *)(v68 + 40) = v66;
    *(_QWORD *)(v68 + 48) = a1;
    v69 = a1;
    preferredElementSizea = UIMenuElementSizeSmall;
    v122._rawValue = 0;
    v70 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    v48 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
    v51 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
  }
  else
  {
    v70 = 0;
  }
  *(_QWORD *)(inited + 64) = v70;
  v71 = objc_msgSend(v47, v48[257], preferredElementSizea);
  v72 = (void *)MEMORY[0x1DF0E41AC](0xD00000000000002ELL, 0x80000001DDF5B250);
  v73 = objc_msgSend(v71, v51[258], v72);

  if (v73)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
    v74 = swift_allocObject();
    v75 = v4;
    v76 = (void *)MEMORY[0x1DF0E666C]((char *)v124 + direct field offset for CanvasEditMenuDelegate.canvas);
    swift_unknownObjectWeakInit();

    v77 = swift_allocObject();
    *(_OWORD *)(v77 + 16) = *(_OWORD *)(v75 + 80);
    *(_QWORD *)(v77 + 32) = *(_QWORD *)(v75 + 96);
    *(_QWORD *)(v77 + 40) = v74;
    *(_QWORD *)(v77 + 48) = a1;
    v78 = a1;
    v122._rawValue = 0;
    v79 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  }
  else
  {
    v79 = 0;
  }
  *(_QWORD *)(inited + 72) = v79;
  v126 = inited;
  specialized Array._endMutation()();
  v80 = (_QWORD *)v126;
  v126 = MEMORY[0x1E0DEE9D8];
  v81 = (void *)v80[4];
  if (v81)
  {
    v82 = v81;
    MEMORY[0x1DF0E4398](v82, v83, v84, v85, v86);
    if (*(_QWORD *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  v87 = (void *)v80[5];
  if (v87)
  {
    v88 = v87;
    MEMORY[0x1DF0E4398](v88, v89, v90, v91, v92);
    if (*(_QWORD *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  v93 = (void *)v80[6];
  if (v93)
  {
    v94 = v93;
    MEMORY[0x1DF0E4398](v94, v95, v96, v97, v98);
    if (*(_QWORD *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  v99 = (void *)v80[7];
  if (v99)
  {
    v100 = v99;
    MEMORY[0x1DF0E4398](v100, v101, v102, v103, v104);
    if (*(_QWORD *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  v105 = (void *)v80[8];
  if (v105)
  {
    v106 = v105;
    MEMORY[0x1DF0E4398](v106, v107, v108, v109, v110);
    if (*(_QWORD *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  v111 = (void *)v80[9];
  if (v111)
  {
    v112 = v111;
    MEMORY[0x1DF0E4398](v112, v113, v114, v115, v116);
    if (*(_QWORD *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v126 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenu);
  v117 = v126;
  swift_bridgeObjectRelease();
  v118._countAndFlagsBits = 0;
  v118._object = (void *)0xE000000000000000;
  v127.value.super.isa = 0;
  v127.is_nil = 0;
  return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v118, (Swift::String_optional)0, v127, 0, 0xFFFFFFFFFFFFFFFFLL, v117, v122);
}

void specialized CanvasEditMenuDelegate.editMenuInteraction(_:willPresentMenuFor:animator:)()
{
  uint64_t v0;

  *(_BYTE *)(v0 + direct field offset for CanvasEditMenuDelegate.editMenuIsPresented) = 1;
}

void specialized CanvasEditMenuDelegate.editMenuInteraction(_:willDismissMenuFor:animator:)(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[6];

  v3 = *MEMORY[0x1E0DEEDD8] & *v1;
  v4 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(v3 + 80);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(v3 + 96);
  *(_QWORD *)(v5 + 40) = v4;
  v7[4] = partial apply for closure #1 in CanvasEditMenuDelegate.editMenuInteraction(_:willDismissMenuFor:animator:);
  v7[5] = v5;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v7[3] = &block_descriptor_63;
  v6 = _Block_copy(v7);
  swift_release();
  objc_msgSend(a1, sel_addCompletion_, v6);
  _Block_release(v6);
}

void specialized CanvasEditMenuDelegate.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1DDEC0AF8()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in CanvasEditMenuDelegate.editMenuInteraction(_:willDismissMenuFor:animator:)()
{
  uint64_t v0;

  closure #1 in CanvasEditMenuDelegate.editMenuInteraction(_:willDismissMenuFor:animator:)(*(_QWORD *)(v0 + 40));
}

uint64_t block_copy_helper_63(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_63()
{
  return swift_release();
}

void partial apply for closure #1 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1)
{
  uint64_t *v1;

  closure #1 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(a1, v1[5], v1[2], v1[3], v1[4], Canvas.selectAll());
}

uint64_t partial apply for closure #7 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1)
{
  return partial apply for closure #7 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #7 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:));
}

uint64_t partial apply for closure #6 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1)
{
  return partial apply for closure #7 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #6 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:));
}

uint64_t sub_1DDEC0B84()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #5 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1)
{
  uint64_t *v1;

  closure #1 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(a1, v1[5], v1[2], v1[3], v1[4], Canvas._copyAll());
}

uint64_t partial apply for closure #4 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1)
{
  return partial apply for closure #7 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #4 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:));
}

uint64_t objectdestroy_13Tm_0()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1)
{
  return partial apply for closure #7 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #3 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:));
}

uint64_t partial apply for closure #7 in CanvasEditMenuDelegate.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[5], v2[6], v2[2], v2[3], v2[4]);
}

uint64_t *initializeBufferWithCopyOfBuffer for MiniMagicButtons(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_weakCopyInit();
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for MiniMagicButtons(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_weakDestroy();
  return swift_release();
}

uint64_t initializeWithCopy for MiniMagicButtons(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  swift_weakCopyInit();
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MiniMagicButtons(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  swift_weakCopyAssign();
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for MiniMagicButtons(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  swift_weakTakeInit();
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for MiniMagicButtons(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  swift_weakTakeAssign();
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MiniMagicButtons()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDEC0F10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for MiniMagicButtons()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDEC0F9C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for MiniMagicButtons()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MiniMagicButtons;
  if (!type metadata singleton initialization cache for MiniMagicButtons)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for MiniMagicButtons()
{
  unint64_t v0;

  type metadata accessor for Bindable<MiniMenuState>();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for Bindable<MiniMenuState>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Bindable<MiniMenuState>)
  {
    type metadata accessor for MiniMenuState();
    v0 = type metadata accessor for Bindable();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Bindable<MiniMenuState>);
  }
}

uint64_t associated type witness table accessor for View.Body : View in MiniMagicButtons()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t MiniMagicButtons.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t (*v58)@<X0>(uint64_t@<X8>);
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(void);
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(void);
  uint64_t v70;
  uint64_t (*v71)(uint64_t);
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t (*v77)@<X0>(uint64_t@<X8>);
  char *v78;
  uint64_t OpaqueTypeConformance2;
  uint64_t v80;
  char *v81;
  uint64_t (*v82)@<X0>(uint64_t@<X8>);
  _QWORD *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t);
  uint64_t v91;
  uint64_t (*v92)@<X0>(uint64_t@<X8>);
  uint64_t v93;
  uint64_t (*v94)@<X0>(uint64_t@<X8>);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  int has_internal_ui;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t (*v175)@<X0>(uint64_t@<X8>);
  _QWORD *v176;
  uint64_t v177;
  ValueMetadata *v178;
  unint64_t v179;

  v2 = v1;
  v171 = a1;
  v159 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0>.Storage);
  MEMORY[0x1E0C80A78](v159, v3);
  v161 = (char *)&v133 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  v162 = *(_QWORD *)(v5 - 8);
  v163 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v158 = (char *)&v133 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v160 = (char *)&v133 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0>?);
  MEMORY[0x1E0C80A78](v11, v12);
  v166 = (char *)&v133 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v165 = (char *)&v133 - v16;
  v150 = type metadata accessor for LiftHoverEffect();
  v153 = *(_QWORD *)(v150 - 8);
  MEMORY[0x1E0C80A78](v150, v17);
  v152 = (char *)&v133 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for PlainButtonStyle();
  v169 = *(_QWORD *)(v19 - 8);
  v170 = v19;
  MEMORY[0x1E0C80A78](v19, v20);
  v168 = (char *)&v133 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = type metadata accessor for MenuOrder();
  v145 = *(_QWORD *)(v146 - 8);
  MEMORY[0x1E0C80A78](v146, v22);
  v143 = (char *)&v133 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Menu<<<opaque return type of View.labelStyle<A>(_:)>>.0, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>>);
  v142 = *(_QWORD *)(v144 - 8);
  MEMORY[0x1E0C80A78](v144, v24);
  v141 = (char *)&v133 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.menuOrder(_:)>>.0);
  v148 = *(_QWORD *)(v149 - 8);
  MEMORY[0x1E0C80A78](v149, v26);
  v147 = (char *)&v133 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.buttonStyle<A>(_:)>>.0);
  v28 = *(_QWORD *)(v151 - 8);
  MEMORY[0x1E0C80A78](v151, v29);
  v31 = (char *)&v133 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0);
  v167 = *(_QWORD *)(v164 - 8);
  MEMORY[0x1E0C80A78](v164, v32);
  v34 = (char *)&v133 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for FBKSEvaluation.Action();
  v36 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35, v37);
  v39 = (char *)&v133 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40, v41);
  v43 = (char *)&v133 - v42;
  v44 = type metadata accessor for MiniMagicButtons();
  v156 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44, v45);
  v157 = (uint64_t)&v133 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = v46;
  MEMORY[0x1E0C80A78](v47, v48);
  v50 = (char *)&v133 - v49;
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0)?);
  MEMORY[0x1E0C80A78](v51, v52);
  v172 = (uint64_t)&v133 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v54, v55);
  v174 = (uint64_t)&v133 - v56;
  has_internal_ui = os_variant_has_internal_ui();
  v178 = &type metadata for FeedbackFeatures;
  v179 = lazy protocol witness table accessor for type FeedbackFeatures and conformance FeedbackFeatures();
  v57 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v175);
  v173 = v2;
  outlined init with copy of MiniMagicButtons(v2, (uint64_t)v50);
  if ((v57 & 1) != 0)
  {
    v139 = v43;
    v136 = v34;
    v140 = v36;
    v137 = v31;
    v138 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
    Bindable.wrappedValue.getter();
    v58 = v175;
    swift_getKeyPath();
    v175 = v58;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v59 = *((_DWORD *)v58 + 10);
    swift_release();
    outlined destroy of MiniMagicButtons((uint64_t)v50);
    v60 = v173;
    v61 = v164;
    if ((has_internal_ui & (v59 >> 17) & 1) != 0)
    {
      v62 = *(void (**)(void))(v140 + 104);
      v63 = v139;
      v135 = v35;
      v62();
      v64 = *MEMORY[0x1E0D21040];
      v134 = v39;
      v65 = ((uint64_t (*)(char *, uint64_t, uint64_t))v62)(v39, v64, v35);
      MEMORY[0x1E0C80A78](v65, v66);
      *(&v133 - 4) = v60;
      *(&v133 - 3) = (uint64_t)v63;
      *(&v133 - 2) = (uint64_t)v39;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of View.labelStyle<A>(_:)>>.0);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>);
      v67 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Label<Text, Image>);
      v68 = type metadata accessor for IconOnlyLabelStyle();
      v69 = MEMORY[0x1E0CDAF30];
      v70 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, (uint64_t *)&demangling cache variable for type metadata for Label<Text, Image>, MEMORY[0x1E0CDF8C8]);
      v71 = (uint64_t (*)(uint64_t))v69;
      v60 = v173;
      v72 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle, v71, MEMORY[0x1E0CDAF20]);
      v175 = (uint64_t (*)@<X0>(uint64_t@<X8>))v67;
      v176 = (_QWORD *)v68;
      v177 = v70;
      v178 = (ValueMetadata *)v72;
      swift_getOpaqueTypeConformance2();
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>, MEMORY[0x1E0CE0680]);
      v73 = v141;
      Menu.init(content:label:)();
      v74 = v143;
      static MenuOrder.fixed.getter();
      v75 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Menu<<<opaque return type of View.labelStyle<A>(_:)>>.0, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>> and conformance Menu<A, B>, &demangling cache variable for type metadata for Menu<<<opaque return type of View.labelStyle<A>(_:)>>.0, TupleView<(Button<Label<Text, Image>>, Button<Label<Text, Image>>)>>, MEMORY[0x1E0CDD990]);
      v76 = v147;
      v77 = (uint64_t (*)@<X0>(uint64_t@<X8>))v144;
      View.menuOrder(_:)();
      (*(void (**)(char *, uint64_t))(v145 + 8))(v74, v146);
      (*(void (**)(char *, uint64_t (*)@<X0>(uint64_t@<X8>)))(v142 + 8))(v73, v77);
      v78 = v168;
      PlainButtonStyle.init()();
      v175 = v77;
      v176 = (_QWORD *)v75;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
      v80 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9F78], MEMORY[0x1E0CD9F68]);
      v81 = v137;
      v82 = (uint64_t (*)@<X0>(uint64_t@<X8>))v149;
      v83 = (_QWORD *)v170;
      View.buttonStyle<A>(_:)();
      (*(void (**)(char *, _QWORD *))(v169 + 8))(v78, v83);
      (*(void (**)(char *, uint64_t (*)@<X0>(uint64_t@<X8>)))(v148 + 8))(v76, v82);
      v84 = v152;
      static CustomHoverEffect<>.lift.getter();
      v175 = v82;
      v176 = v83;
      v177 = OpaqueTypeConformance2;
      v178 = (ValueMetadata *)v80;
      swift_getOpaqueTypeConformance2();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type LiftHoverEffect and conformance LiftHoverEffect, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9AD8], MEMORY[0x1E0CD9AD0]);
      v85 = v136;
      v86 = v151;
      v87 = v150;
      View.hoverEffect<A>(_:isEnabled:)();
      (*(void (**)(char *, uint64_t))(v153 + 8))(v84, v87);
      (*(void (**)(char *, uint64_t))(v138 + 8))(v81, v86);
      v88 = v167;
      v89 = v174;
      (*(void (**)(uint64_t, char *, uint64_t))(v167 + 32))(v174, v85, v61);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v88 + 56))(v89, 0, 1, v61);
      v90 = *(void (**)(char *, uint64_t))(v140 + 8);
      v91 = v135;
      v90(v134, v135);
      v90(v139, v91);
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of MiniMagicButtons((uint64_t)v50);
    v60 = v173;
    v61 = v164;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v167 + 56))(v174, 1, 1, v61);
LABEL_6:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  Bindable.wrappedValue.getter();
  v92 = v175;
  swift_getKeyPath();
  v175 = v92;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v93 = *((_QWORD *)v92 + 5);
  swift_release();
  if ((v93 & 0x40) != 0)
  {
    v99 = v157;
    outlined init with copy of MiniMagicButtons(v60, v157);
    v100 = (*(unsigned __int8 *)(v156 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v156 + 80);
    v101 = swift_allocObject();
    outlined init with take of MiniMagicButtons(v99, v101 + v100);
    v102 = (_QWORD *)swift_allocObject();
    v102[2] = partial apply for closure #3 in MiniMagicButtons.body.getter;
    v102[3] = v101;
    v102[4] = 0xD000000000000016;
    v102[5] = 0x80000001DDF4E090;
    v175 = (uint64_t (*)@<X0>(uint64_t@<X8>))closure #1 in miniButton(systemName:_:)partial apply;
    v176 = v102;
    v103 = v168;
    PlainButtonStyle.init()();
    v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MiniButton<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0>);
    v105 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type MiniButton<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0> and conformance MiniButton<A>, &demangling cache variable for type metadata for MiniButton<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0>, (uint64_t)&protocol conformance descriptor for MiniButton<A>);
    v106 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9F78], MEMORY[0x1E0CD9F68]);
    v107 = v158;
    v108 = (_QWORD *)v170;
    View.buttonStyle<A>(_:)();
    (*(void (**)(char *, _QWORD *))(v169 + 8))(v103, v108);
    swift_release();
    v110 = v162;
    v109 = v163;
    v111 = v160;
    (*(void (**)(char *, char *, uint64_t))(v162 + 32))(v160, v107, v163);
    (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v161, v111, v109);
    swift_storeEnumTagMultiPayload();
    v175 = (uint64_t (*)@<X0>(uint64_t@<X8>))v104;
    v176 = v108;
    v177 = v105;
    v178 = (ValueMetadata *)v106;
    swift_getOpaqueTypeConformance2();
    v96 = (uint64_t)v166;
    _ConditionalContent<>.init(storage:)();
    (*(void (**)(char *, uint64_t))(v110 + 8))(v111, v109);
    v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0>);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 56))(v96, 0, 1, v112);
    v113 = v96;
    v97 = (uint64_t)v165;
LABEL_11:
    outlined init with take of _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0>?(v113, v97);
    goto LABEL_12;
  }
  Bindable.wrappedValue.getter();
  v94 = v175;
  swift_getKeyPath();
  v175 = v94;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v95 = *((_QWORD *)v94 + 5);
  swift_release();
  v97 = (uint64_t)v165;
  v96 = (uint64_t)v166;
  if ((v95 & 0x20) != 0)
  {
    v114 = v157;
    outlined init with copy of MiniMagicButtons(v60, v157);
    v115 = (*(unsigned __int8 *)(v156 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v156 + 80);
    v116 = swift_allocObject();
    outlined init with take of MiniMagicButtons(v114, v116 + v115);
    v117 = (_QWORD *)swift_allocObject();
    v117[2] = partial apply for closure #4 in MiniMagicButtons.body.getter;
    v117[3] = v116;
    v117[4] = 0xD000000000000016;
    v117[5] = 0x80000001DDF4E090;
    v175 = partial apply for closure #1 in miniButton(systemName:_:);
    v176 = v117;
    v118 = v168;
    PlainButtonStyle.init()();
    v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MiniButton<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0>);
    v120 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type MiniButton<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0> and conformance MiniButton<A>, &demangling cache variable for type metadata for MiniButton<<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0>, (uint64_t)&protocol conformance descriptor for MiniButton<A>);
    v121 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9F78], MEMORY[0x1E0CD9F68]);
    v122 = v158;
    v123 = (_QWORD *)v170;
    View.buttonStyle<A>(_:)();
    (*(void (**)(char *, _QWORD *))(v169 + 8))(v118, v123);
    swift_release();
    v125 = v162;
    v124 = v163;
    v126 = v160;
    (*(void (**)(char *, char *, uint64_t))(v162 + 32))(v160, v122, v163);
    (*(void (**)(char *, char *, uint64_t))(v125 + 16))(v161, v126, v124);
    swift_storeEnumTagMultiPayload();
    v175 = (uint64_t (*)@<X0>(uint64_t@<X8>))v119;
    v176 = v123;
    v177 = v120;
    v178 = (ValueMetadata *)v121;
    swift_getOpaqueTypeConformance2();
    _ConditionalContent<>.init(storage:)();
    (*(void (**)(char *, uint64_t))(v125 + 8))(v126, v124);
    v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0>);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v127 - 8) + 56))(v96, 0, 1, v127);
    v113 = v96;
    goto LABEL_11;
  }
  v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 56))(v97, 1, 1, v98);
LABEL_12:
  v128 = v174;
  v129 = v172;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v174, v172, &demangling cache variable for type metadata for (<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0)?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v97, v96, &demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0>?);
  v130 = v171;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v129, v171, &demangling cache variable for type metadata for (<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0)?);
  v131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ((<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0)?, _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0>?, MiniDivider));
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v96, v130 + *(int *)(v131 + 48), &demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v97, &demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v128, &demangling cache variable for type metadata for (<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0)?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v96, &demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0>?);
  return outlined destroy of StocksKitCurrencyCache.Provider?(v129, &demangling cache variable for type metadata for (<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0)?);
}

uint64_t closure #1 in MiniMagicButtons.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String_optional v32;
  Swift::String v33;
  Swift::String v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void (*v59)(char *, char *, uint64_t);
  Swift::String v60;
  Swift::String_optional v61;
  Swift::String v62;
  Swift::String v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  void (*v86)(char *, char *, uint64_t);
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t object;
  uint64_t countAndFlagsBits;
  uint64_t (*v99)(uint64_t, char *, uint64_t);
  void (*v100)(char *, uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  Swift::String v120;
  Swift::String v121;

  v112 = a4;
  v115 = type metadata accessor for FBKSEvaluation.Action();
  v7 = *(_QWORD *)(v115 - 8);
  MEMORY[0x1E0C80A78](v115, v8);
  v105 = v9;
  v114 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MiniMagicButtons();
  v102 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v103 = v12;
  v113 = (uint64_t)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<Label<Text, Image>>);
  v117 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v111 = (char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v110 = (char *)&v93 - v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v107 = (char *)&v93 - v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v109 = (char *)&v93 - v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v106 = (char *)&v93 - v27;
  MEMORY[0x1E0C80A78](v28, v29);
  v116 = (char *)&v93 - v30;
  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v121._object = (void *)0x80000001DDF5B3A0;
  v31._countAndFlagsBits = 0x73655220646F6F47;
  v31._object = (void *)0xEB00000000746C75;
  v32.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v32.value._object = (void *)0xEB00000000656C62;
  v33._countAndFlagsBits = 0;
  v33._object = (void *)0xE000000000000000;
  v120._countAndFlagsBits = 0xD00000000000002FLL;
  v34 = NSLocalizedString(_:tableName:bundle:value:comment:)(v31, v32, paperKitBundle, v33, v120);
  countAndFlagsBits = v34._countAndFlagsBits;
  object = (uint64_t)v34._object;
  v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  Bindable.wrappedValue.getter();
  v35 = v118;
  swift_getKeyPath();
  v118 = v35;
  v101 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v37 = *((_QWORD *)v35 + 30);
  v36 = *((_QWORD *)v35 + 31);
  swift_bridgeObjectRetain();
  swift_release();
  v38 = FBKSEvaluation.Action.rawValue.getter();
  v108 = a3;
  if (v36)
  {
    if (v37 == v38 && v36 == v39)
      v40 = 1;
    else
      v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    v40 = 0;
  }
  swift_bridgeObjectRelease();
  v41 = specialized FeedbackManager.feedbackImageName(action:hasResponse:)(a2, v40 & 1);
  v43 = v42;
  v44 = v113;
  outlined init with copy of MiniMagicButtons(a1, v113);
  v45 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v95 = a1;
  v46 = v114;
  v47 = v115;
  v100 = v45;
  v45(v114, a2, v115);
  v48 = *(unsigned __int8 *)(v102 + 80);
  v49 = v7;
  v50 = (v48 + 16) & ~v48;
  v51 = *(unsigned __int8 *)(v49 + 80);
  v52 = (v103 + v51 + v50) & ~v51;
  v102 = v48 | v51 | 7;
  v103 = v52 + v105;
  v53 = swift_allocObject();
  v94 = v50;
  outlined init with take of MiniMagicButtons(v44, v53 + v50);
  v105 = v52;
  v99 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v49 + 32);
  v54 = v99(v53 + v52, v46, v47);
  v118 = (char *)countAndFlagsBits;
  v119 = object;
  MEMORY[0x1E0C80A78](v54, v55);
  *(&v93 - 4) = (uint64_t)&v118;
  *(&v93 - 3) = v41;
  v121._object = v43;
  v56 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Label<Text, Image>);
  v57 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, (uint64_t *)&demangling cache variable for type metadata for Label<Text, Image>, MEMORY[0x1E0CDF8C8]);
  v58 = v106;
  countAndFlagsBits = v56;
  object = v57;
  Button.init(action:label:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v59 = *(void (**)(char *, char *, uint64_t))(v117 + 32);
  v59(v116, v58, v13);
  v121._countAndFlagsBits = 0xD000000000000032;
  v121._object = (void *)0x80000001DDF5B3D0;
  v60._countAndFlagsBits = 0x7573655220646142;
  v60._object = (void *)0xEA0000000000746CLL;
  v61.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v61.value._object = (void *)0xEB00000000656C62;
  v62._countAndFlagsBits = 0;
  v62._object = (void *)0xE000000000000000;
  v63 = NSLocalizedString(_:tableName:bundle:value:comment:)(v60, v61, paperKitBundle, v62, v121);
  v106 = (char *)v63._countAndFlagsBits;
  v96 = v63._object;
  v64 = v95;
  Bindable.wrappedValue.getter();
  v65 = v118;
  swift_getKeyPath();
  v118 = v65;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v66 = *((_QWORD *)v65 + 30);
  v67 = *((_QWORD *)v65 + 31);
  swift_bridgeObjectRetain();
  swift_release();
  v68 = v108;
  v69 = FBKSEvaluation.Action.rawValue.getter();
  if (v67)
  {
    if (v66 == v69 && v67 == v70)
      v71 = 1;
    else
      v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v72 = v94;
    swift_bridgeObjectRelease();
  }
  else
  {
    v71 = 0;
    v72 = v94;
  }
  swift_bridgeObjectRelease();
  v73 = specialized FeedbackManager.feedbackImageName(action:hasResponse:)(v68, v71 & 1);
  v75 = v74;
  v76 = v113;
  outlined init with copy of MiniMagicButtons(v64, v113);
  v78 = v114;
  v77 = v115;
  v100(v114, v68, v115);
  v79 = swift_allocObject();
  outlined init with take of MiniMagicButtons(v76, v79 + v72);
  v80 = v99(v79 + v105, v78, v77);
  v118 = v106;
  v119 = (uint64_t)v96;
  MEMORY[0x1E0C80A78](v80, v81);
  *(&v93 - 4) = (uint64_t)&v118;
  *(&v93 - 3) = v73;
  v121._object = v75;
  v82 = v107;
  Button.init(action:label:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v83 = v109;
  v59(v109, v82, v13);
  v85 = v116;
  v84 = v117;
  v86 = *(void (**)(char *, char *, uint64_t))(v117 + 16);
  v87 = v110;
  v86(v110, v116, v13);
  v88 = v111;
  v86(v111, v83, v13);
  v89 = v112;
  v86(v112, v87, v13);
  v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Button<Label<Text, Image>>, Button<Label<Text, Image>>));
  v86(&v89[*(int *)(v90 + 48)], v88, v13);
  v91 = *(void (**)(char *, uint64_t))(v84 + 8);
  v91(v83, v13);
  v91(v85, v13);
  v91(v88, v13);
  return ((uint64_t (*)(char *, uint64_t))v91)(v87, v13);
}

uint64_t closure #1 in closure #1 in MiniMagicButtons.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  Bindable.wrappedValue.getter();
  FBKSEvaluation.Action.rawValue.getter();
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for MiniMagicButtons();
  result = swift_weakLoadStrong();
  if (result)
  {
    v4 = result;
    v5 = MEMORY[0x1DF0E666C](result + 32);
    v6 = *(_QWORD *)(v4 + 40);
    result = swift_release();
    if (v5)
    {
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 96))(a2, ObjectType, v6);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #2 in closure #1 in MiniMagicButtons.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  Bindable.wrappedValue.getter();
  FBKSEvaluation.Action.rawValue.getter();
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState, (uint64_t (*)(uint64_t))type metadata accessor for MiniMenuState, (uint64_t)&protocol conformance descriptor for MiniMenuState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for MiniMagicButtons();
  result = swift_weakLoadStrong();
  if (result)
  {
    v4 = result;
    v5 = MEMORY[0x1DF0E666C](result + 32);
    v6 = *(_QWORD *)(v4 + 40);
    result = swift_release();
    if (v5)
    {
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 96))(a2, ObjectType, v6);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #2 in MiniMagicButtons.body.getter()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v0 = type metadata accessor for IconOnlyLabelStyle();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CDAF30];
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Label<Text, Image>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Label.init(title:icon:)();
  IconOnlyLabelStyle.init()();
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, (uint64_t *)&demangling cache variable for type metadata for Label<Text, Image>, MEMORY[0x1E0CDF8C8]);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle, v1, MEMORY[0x1E0CDAF20]);
  View.labelStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t closure #1 in closure #2 in MiniMagicButtons.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  uint64_t v5;

  LocalizedStringKey.init(stringLiteral:)();
  result = Text.init(_:tableName:bundle:comment:)();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4 & 1;
  *(_QWORD *)(a1 + 24) = v5;
  return result;
}

uint64_t closure #2 in closure #2 in MiniMagicButtons.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t ObjCClassFromMetadata;
  id v3;
  uint64_t result;

  type metadata accessor for MiniMenuController();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v3 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  result = Image.init(_:bundle:)();
  *a1 = result;
  return result;
}

uint64_t closure #3 in MiniMagicButtons.body.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  type metadata accessor for MiniMagicButtons();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = MEMORY[0x1DF0E666C](result + 32);
    v3 = *(_QWORD *)(v1 + 40);
    result = swift_release();
    if (v2)
    {
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 80))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #4 in MiniMagicButtons.body.getter()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  type metadata accessor for MiniMagicButtons();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = MEMORY[0x1DF0E666C](result + 32);
    v3 = *(_QWORD *)(v1 + 40);
    result = swift_release();
    if (v2)
    {
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v3 + 88))(ObjectType, v3);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t outlined init with copy of MiniMagicButtons(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MiniMagicButtons();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of MiniMagicButtons(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MiniMagicButtons();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of MiniMagicButtons(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MiniMagicButtons();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #4 in MiniMagicButtons.body.getter()
{
  return partial apply for closure #4 in MiniMagicButtons.body.getter((uint64_t (*)(uint64_t))closure #4 in MiniMagicButtons.body.getter);
}

uint64_t outlined init with take of _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t objectdestroyTm_9()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MiniMagicButtons() - 8) + 80);
  v2 = v0 + ((v1 + 16) & ~v1);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  swift_weakDestroy();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in MiniMagicButtons.body.getter()
{
  return partial apply for closure #4 in MiniMagicButtons.body.getter((uint64_t (*)(uint64_t))closure #3 in MiniMagicButtons.body.getter);
}

uint64_t partial apply for closure #4 in MiniMagicButtons.body.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MiniMagicButtons() - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t objectdestroy_2Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MiniMagicButtons.body.getter@<X0>(char *a1@<X8>)
{
  uint64_t *v1;

  return closure #1 in MiniMagicButtons.body.getter(v1[2], v1[3], v1[4], a1);
}

uint64_t partial apply for closure #1 in closure #1 in MiniMagicButtons.body.getter()
{
  return partial apply for closure #1 in closure #1 in MiniMagicButtons.body.getter((uint64_t (*)(unint64_t, unint64_t))closure #1 in closure #1 in MiniMagicButtons.body.getter);
}

uint64_t partial apply for specialized closure #1 in Button<>.init<A>(_:systemImage:action:)()
{
  _QWORD *v0;

  return specialized closure #1 in Button<>.init<A>(_:systemImage:action:)(v0[2], v0[3], v0[4]);
}

uint64_t objectdestroy_16Tm_0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(type metadata accessor for MiniMagicButtons() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = type metadata accessor for FBKSEvaluation.Action();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (v2 + v3 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v2, v7);
  swift_weakDestroy();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v0 + v6, v4);
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in MiniMagicButtons.body.getter()
{
  return partial apply for closure #1 in closure #1 in MiniMagicButtons.body.getter((uint64_t (*)(unint64_t, unint64_t))closure #2 in closure #1 in MiniMagicButtons.body.getter);
}

uint64_t partial apply for closure #1 in closure #1 in MiniMagicButtons.body.getter(uint64_t (*a1)(unint64_t, unint64_t))
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(type metadata accessor for MiniMagicButtons() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FBKSEvaluation.Action() - 8) + 80);
  return a1(v1 + v3, v1 + ((v3 + v4 + v5) & ~v5));
}

uint64_t partial apply for closure #1 in MiniMenuState.feedbackAction.setter()
{
  uint64_t *v0;

  return closure #1 in MiniMenuState.feedbackAction.setter(v0[2], v0[3], v0[4]);
}

uint64_t sub_1DDEC3204()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type TupleView<((<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0)?, _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0>?, MiniDivider)> and conformance TupleView<A>, &demangling cache variable for type metadata for TupleView<((<<opaque return type of View.hoverEffect<A>(_:isEnabled:)>>.0)?, _ConditionalContent<<<opaque return type of View.buttonStyle<A>(_:)>>.0, <<opaque return type of View.buttonStyle<A>(_:)>>.0>?, MiniDivider)>, MEMORY[0x1E0CE0680]);
}

uint64_t closure #1 in MiniMenuState.feedbackAction.setterpartial apply()
{
  return partial apply for closure #1 in MiniMenuState.feedbackAction.setter();
}

id PaperTextAttachmentCanvasView.__allocating_init(frame:paperIdentifier:paperURL:coherenceContextURL:encryptionDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9)
{
  objc_class *v9;
  id v19;

  v19 = objc_allocWithZone(v9);
  return PaperTextAttachmentCanvasView.init(frame:paperIdentifier:paperURL:coherenceContextURL:encryptionDelegate:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t PaperTextAttachmentCanvasView.liveStreamMessenger.setter(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t *v6;
  char *v7;

  v3 = *(char **)(v2 + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView);
  if (v3)
  {
    v5 = result;
    v6 = (uint64_t *)&v3[direct field offset for Canvas.liveStreamMessenger];
    swift_beginAccess();
    *v6 = v5;
    v6[1] = a2;
    v7 = v3;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    specialized Canvas.liveStreamMessenger.didset();

    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void PaperTextAttachmentCanvasView.paperBounds.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  v1 = type metadata accessor for Paper();
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(char **)(v0 + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView);
  if (v10)
  {
    v11 = *(_QWORD *)&v10[direct field offset for Canvas.paperView]
        + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)&v10[direct field offset for Canvas.paperView]) + 0x380);
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v11, v5);
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, 255, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
    v12 = v10;
    Capsule<>.root.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    outlined destroy of PKStrokeProperties((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for Paper);

  }
  else
  {
    __break(1u);
  }
}

void PaperTextAttachmentCanvasView.setLinedPaper(horizontalLineSpacing:verticalLineSpacing:horizontalInset:)(double a1, double a2, double a3)
{
  uint64_t v3;
  id v4;
  char *v5;
  void *v6;
  char *v7;
  id v8;

  if (a1 > 0.0 || a2 > 0.0)
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD11C8]), sel_initWithLineSpacing_horizontalInset_, a1, a2, a3);
  else
    v4 = 0;
  v5 = *(char **)(v3 + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView);
  if (v5)
  {
    v6 = *(void **)&v5[direct field offset for PaperTextAttachmentView.linedPaper];
    *(_QWORD *)&v5[direct field offset for PaperTextAttachmentView.linedPaper] = v4;
    v7 = v5;
    v8 = v4;

    objc_msgSend(v7, sel_setNeedsLayout);
  }
  else
  {

    __break(1u);
  }
}

uint64_t PaperTextAttachmentCanvasView.setMathDocument(_:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  void *v3;
  _UNKNOWN **v4;
  id v5;
  uint64_t ObjectType;
  uint64_t (*v7)(uint64_t, _UNKNOWN **);
  id v8;
  void *v9;
  id v10;

  v1 = CanvasCalculateDocumentProxy.calculateDocumentProvider.getter();
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView);
  if (v2)
  {
    v3 = *(void **)(v2 + direct field offset for Canvas._editingView);
    if (v3)
    {
      v4 = *(_UNKNOWN ***)(v2 + direct field offset for Canvas._editingView + 8);
      v5 = *(id *)(v2 + direct field offset for Canvas._editingView);
    }
    else
    {
      v5 = *(id *)(v2 + direct field offset for Canvas.paperView);
      v4 = &protocol witness table for ContainerCanvasElementView<A>;
    }
    ObjectType = swift_getObjectType();
    v7 = (uint64_t (*)(uint64_t, _UNKNOWN **))v4[2];
    v8 = v3;
    v9 = (void *)v7(ObjectType, v4);

    if (v9)
    {
      v10 = objc_msgSend(v9, sel_recognitionController);

      objc_msgSend(v10, sel_setCalculateDocumentProvider_, v1);
    }
  }
  return swift_unknownObjectRelease();
}

void PaperTextAttachmentCanvasView.setMathResult(_:expressionUUID:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v6;
  _UNKNOWN **v7;
  id v8;
  uint64_t ObjectType;
  uint64_t (*v10)(uint64_t, _UNKNOWN **);
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  Class isa;
  char *v17;

  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView);
  if (v3)
  {
    v6 = *(void **)(v3 + direct field offset for Canvas._editingView);
    if (v6)
    {
      v7 = *(_UNKNOWN ***)(v3 + direct field offset for Canvas._editingView + 8);
      v8 = *(id *)(v3 + direct field offset for Canvas._editingView);
    }
    else
    {
      v8 = *(id *)(v3 + direct field offset for Canvas.paperView);
      v7 = &protocol witness table for ContainerCanvasElementView<A>;
    }
    ObjectType = swift_getObjectType();
    v10 = (uint64_t (*)(uint64_t, _UNKNOWN **))v7[2];
    v11 = v6;
    v17 = (char *)v10(ObjectType, v7);

    v12 = v17;
    if (v17)
    {
      v13 = *(_QWORD *)&v17[OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_mathRecognitionDelegate];
      if (v13)
      {
        v14 = *(void **)(v13 + OBJC_IVAR____TtC8PaperKit37MathRecognitionViewControllerDelegate_viewController);
        if (v14)
        {
          v15 = v14;
          if (a2)
            a2 = (void *)MEMORY[0x1DF0E41AC](a1, a2);
          isa = UUID._bridgeToObjectiveC()().super.isa;
          objc_msgSend(v14, sel_mathResult_itemUUID_, a2, isa);

          v12 = v17;
        }
      }

    }
  }
}

Swift::Void __swiftcall PaperTextAttachmentCanvasView.setupMathIfNecessary()()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  id v21;
  _QWORD *v22;
  void *v23;
  char v24[24];
  ValueMetadata *v25;
  unint64_t v26;

  v1 = v0;
  v25 = &type metadata for PencilAndPaperFeatureFlags;
  v26 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v24[0] = 5;
  v2 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  if ((v2 & 1) == 0)
    return;
  v3 = OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView);
  if (!v4)
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = (_QWORD *)(v4 + direct field offset for PaperTextAttachmentView.calculateDocument);
  swift_beginAccess();
  if (*v5)
    return;
  if (one-time initialization token for mathLogger != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)mathLogger);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1DDB0F000, v7, v8, "Creating CanvasCalculateDocumentProxy", v9, 2u);
    MEMORY[0x1DF0E6558](v9, -1, -1);
  }

  v10 = *(void **)(v1 + v3);
  if (!v10)
  {
LABEL_18:
    __break(1u);
    return;
  }
  type metadata accessor for CanvasCalculateDocumentProxy();
  v11 = swift_allocObject();
  *(_BYTE *)(v11 + 16) = 0;
  v12 = v10;
  *(_QWORD *)(v11 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  type metadata accessor for CalculateDocument();
  swift_allocObject();
  *(_QWORD *)(v11 + 32) = CalculateDocument.init()();
  v13 = (uint64_t *)&v12[direct field offset for PaperTextAttachmentView.calculateDocument];
  swift_beginAccess();
  *v13 = v11;
  v13[1] = (uint64_t)&protocol witness table for CanvasCalculateDocumentProxy;
  swift_retain();
  swift_unknownObjectRelease();
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1DDB0F000, v14, v15, "setupCanvasMathIfNecessary", v16, 2u);
    MEMORY[0x1DF0E6558](v16, -1, -1);
  }

  v17 = direct field offset for Canvas.paperView;
  v18 = *(_QWORD **)&v12[direct field offset for Canvas.paperView];
  v19 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v20 = *(void **)((char *)v18 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v18) + 0x4C0));
  if (v20)
  {
    v21 = v20;
    CanvasElementDrawingView.initializeMathRecognitionIfNecessary()();

    v18 = *(_QWORD **)&v12[v17];
  }
  v22 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v18 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v22)
  {
    v23 = v22;
    (*(void (**)(void))((*v19 & *v22) + 0x750))();

    swift_release();
  }
  else
  {

    swift_release();
  }
}

uint64_t PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:)(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v5 + 32) = a2;
  *(_QWORD *)(v5 + 40) = v4;
  *(_BYTE *)(v5 + 145) = a4;
  *(_BYTE *)(v5 + 144) = a3;
  *(_QWORD *)(v5 + 24) = a1;
  v6 = type metadata accessor for PKDrawing();
  *(_QWORD *)(v5 + 48) = v6;
  *(_QWORD *)(v5 + 56) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 64) = swift_task_alloc();
  *(_QWORD *)(v5 + 72) = type metadata accessor for MainActor();
  *(_QWORD *)(v5 + 80) = static MainActor.shared.getter();
  *(_QWORD *)(v5 + 88) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v5 + 96) = v7;
  return swift_task_switch();
}

uint64_t PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  _UNKNOWN **v3;
  id v4;
  uint64_t ObjectType;
  uint64_t (*v6)(uint64_t, _UNKNOWN **);
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  id v14;
  id v15;
  PKDrawing *v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView);
  if (!v1)
    goto LABEL_7;
  v2 = *(void **)(v1 + direct field offset for Canvas._editingView);
  if (v2)
  {
    v3 = *(_UNKNOWN ***)(v1 + direct field offset for Canvas._editingView + 8);
    v4 = *(id *)(v1 + direct field offset for Canvas._editingView);
  }
  else
  {
    v4 = *(id *)(v1 + direct field offset for Canvas.paperView);
    v3 = &protocol witness table for ContainerCanvasElementView<A>;
  }
  ObjectType = swift_getObjectType();
  v6 = (uint64_t (*)(uint64_t, _UNKNOWN **))v3[2];
  v7 = v2;
  v8 = (void *)v6(ObjectType, v3);
  *(_QWORD *)(v0 + 104) = v8;

  if (v8)
  {
    v9 = *(_QWORD *)(v0 + 64);
    v10 = *(_QWORD *)(v0 + 32);
    v23 = *(_QWORD *)(v0 + 40);
    v11 = *(_BYTE *)(v0 + 145);
    v12 = *(_BYTE *)(v0 + 144);
    v13 = *(_QWORD *)(v0 + 24);
    v14 = objc_msgSend(v8, sel_drawing);
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

    v15 = objc_allocWithZone((Class)type metadata accessor for PKDrawingCoherence(0));
    PKDrawing._bridgeToObjectiveC()(v16);
    v18 = v17;
    v19 = objc_msgSend(v15, sel_initWithDrawing_, v17);
    *(_QWORD *)(v0 + 112) = v19;

    objc_msgSend(v19, sel_setRecognitionEnabled_, 1);
    *(_QWORD *)(v0 + 120) = static MainActor.shared.getter();
    v20 = swift_task_alloc();
    *(_QWORD *)(v0 + 128) = v20;
    *(_QWORD *)(v20 + 16) = v19;
    *(_QWORD *)(v20 + 24) = v13;
    *(_QWORD *)(v20 + 32) = v10;
    *(_BYTE *)(v20 + 40) = v11;
    *(_BYTE *)(v20 + 41) = v12;
    *(_QWORD *)(v20 + 48) = v23;
    *(_QWORD *)(v20 + 56) = v8;
    *(_QWORD *)(v20 + 64) = v9;
    v21 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 136) = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DrawingFindResult]);
    *v21 = v0;
    v21[1] = PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:);
    return withCheckedContinuation<A>(isolation:function:_:)();
  }
  else
  {
LABEL_7:
    swift_release();
    swift_task_dealloc();
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(MEMORY[0x1E0DEE9D8]);
  }
}

{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v5 = *(_QWORD *)(v0 + 16);
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

__n128 DrawingFindResult.frames(in:)()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __n128 result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
  v1 = swift_allocObject();
  v2 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 16) = xmmword_1DDF32CF0;
  *(_OWORD *)(v1 + 32) = v2;
  result = *(__n128 *)(v0 + 40);
  *(__n128 *)(v1 + 48) = result;
  return result;
}

uint64_t DrawingFindResult.draw(for:)(uint64_t a1)
{
  double *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  dispatch_semaphore_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  char *v34;
  uint64_t v35;

  v3 = type metadata accessor for Paper();
  MEMORY[0x1E0C80A78](v3, v4);
  v34 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v35 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UIGraphicsImageRendererFormat();
  v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_preferredFormat);
  objc_msgSend(v10, sel_setScale_, 1.0);
  objc_msgSend(v10, sel_setPreferredRange_, 2);
  v11 = *((_QWORD *)v1 + 5);
  v12 = *((_QWORD *)v1 + 6);
  v13 = v10;
  objc_msgSend(v13, sel_scale);
  v15 = v14;
  type metadata accessor for ImageRenderer();
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = v11;
  v16[3] = v12;
  v16[4] = v15;
  v17 = specialized CanvasElementImageRenderer.__allocating_init(renderer:)((uint64_t)v16);
  v33 = v13;

  v18 = dispatch_semaphore_create(0);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = 0;
  result = swift_beginAccess();
  *(_BYTE *)(v17 + 72) = 0;
  v21 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView);
  if (v21)
  {
    v22 = *(_QWORD *)(v21 + direct field offset for Canvas.paperView)
        + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v21 + direct field offset for Canvas.paperView)) + 0x380);
    swift_beginAccess();
    v23 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v9, v22, v6);
    v24 = v1[7];
    v25 = v1[8];
    v26 = v1[9];
    v27 = v1[10];
    v28 = swift_allocObject();
    *(_QWORD *)(v28 + 16) = v19;
    *(_QWORD *)(v28 + 24) = v18;
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, 255, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
    swift_retain();
    v29 = v18;
    v30 = (uint64_t)v34;
    Capsule<>.root.getter();
    specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)(v30, (uint64_t)v9, (uint64_t)partial apply for closure #1 in DrawingFindResult.draw(for:), v28, v24, v25, v26, v27);
    outlined destroy of PKStrokeProperties(v30, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
    swift_release();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v6);
    OS_dispatch_semaphore.wait()();
    swift_release();

    swift_beginAccess();
    v31 = *(void **)(v19 + 16);
    v32 = v31;
    swift_release();
    return (uint64_t)v31;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  double *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v42[4];
  _BOOL4 v43;
  _BYTE *v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v51 = a3;
  v52 = a4;
  v48 = a1;
  v49 = a2;
  v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v12 = *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64);
  v13 = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47, v14);
  v15 = type metadata accessor for Paper();
  v46 = *(_QWORD *)(v15 - 8);
  v16 = *(_QWORD *)(v46 + 64);
  MEMORY[0x1E0C80A78](v15, v17);
  v18 = &v42[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = &v42[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v44 = v22;
  v23 = (void *)objc_opt_self();
  v24 = objc_msgSend(v23, sel_currentTraitCollection);
  v25 = objc_msgSend(v24, sel_layoutDirection);

  v45 = v25 == (id)1;
  v26 = objc_msgSend(v23, sel_currentTraitCollection);
  v27 = objc_msgSend(v26, sel_userInterfaceStyle);

  v43 = v27 == (id)2;
  v28 = type metadata accessor for TaskPriority();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v22, 1, 1, v28);
  outlined init with copy of Paper(v48, (uint64_t)v18);
  v29 = v13;
  v30 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16);
  v31 = &v42[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v32 = v47;
  v30(v31, v49, v47);
  v33 = (*(unsigned __int8 *)(v46 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
  v34 = (v16 + *(unsigned __int8 *)(v29 + 80) + v33) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  v35 = (v12 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  v36 = (char *)swift_allocObject();
  *((_QWORD *)v36 + 2) = 0;
  *((_QWORD *)v36 + 3) = 0;
  *((_QWORD *)v36 + 4) = v50;
  outlined init with take of Paper((uint64_t)v18, (uint64_t)&v36[v33]);
  (*(void (**)(char *, _BYTE *, uint64_t))(v29 + 32))(&v36[v34], v31, v32);
  v37 = (double *)&v36[v35];
  *v37 = a5;
  v37[1] = a6;
  v37[2] = a7;
  v37[3] = a8;
  *((_BYTE *)v37 + 32) = v43;
  *((_BYTE *)v37 + 33) = v45;
  v38 = &v36[(v35 + 41) & 0xFFFFFFFFFFFFFFF8];
  v39 = v52;
  *(_QWORD *)v38 = v51;
  *((_QWORD *)v38 + 1) = v39;
  swift_retain();
  swift_retain();
  v40 = (uint64_t)v44;
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v44, (uint64_t)&async function pointer to partial apply for specialized closure #1 in CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:), (uint64_t)v36);
  swift_release();
  return outlined destroy of StocksKitCurrencyCache.Provider?(v40, &demangling cache variable for type metadata for TaskPriority?);
}

uint64_t specialized closure #1 in CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char a12)
{
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v12 + 152) = v14;
  *(_QWORD *)(v12 + 160) = v15;
  *(_BYTE *)(v12 + 193) = a12;
  *(_BYTE *)(v12 + 192) = a11;
  *(double *)(v12 + 136) = a3;
  *(double *)(v12 + 144) = a4;
  *(double *)(v12 + 120) = a1;
  *(double *)(v12 + 128) = a2;
  *(_QWORD *)(v12 + 104) = a9;
  *(_QWORD *)(v12 + 112) = a10;
  *(_QWORD *)(v12 + 96) = a8;
  *(_QWORD *)(v12 + 168) = type metadata accessor for RendererOutput();
  *(_QWORD *)(v12 + 176) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized closure #1 in CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)()
{
  uint64_t v0;
  _QWORD *v1;
  char *v3;

  swift_storeEnumTagMultiPayload();
  v3 = (char *)&async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:)
     + async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 184) = v1;
  *v1 = v0;
  v1[1] = specialized closure #1 in CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:);
  return ((uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double, double, double, double))v3)(v0 + 16, *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(unsigned __int8 *)(v0 + 192), *(unsigned __int8 *)(v0 + 193), *(_QWORD *)(v0 + 176), *(double *)(v0 + 120), *(double *)(v0 + 128), *(double *)(v0 + 136), *(double *)(v0 + 144));
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 176);
  swift_task_dealloc();
  outlined destroy of PKStrokeProperties(v1, (uint64_t (*)(_QWORD))type metadata accessor for RendererOutput);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void (*v4)(void);
  id v5;

  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v0 + 16, v0 + 56, &demangling cache variable for type metadata for RendererContext?);
  v1 = *(_QWORD *)(v0 + 80);
  if (!v1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 56, &demangling cache variable for type metadata for RendererContext?);
    goto LABEL_5;
  }
  v2 = *(_QWORD *)(v0 + 88);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
  v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  if (!v3)
  {
LABEL_5:
    (*(void (**)(_QWORD))(v0 + 152))(0);
    goto LABEL_6;
  }
  v4 = *(void (**)(void))(v0 + 152);
  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3870]), sel_initWithCGImage_, v3);
  v4();

LABEL_6:
  outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 16, &demangling cache variable for type metadata for RendererContext?);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized Canvas.liveStreamMessenger.didset()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  _QWORD *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  void (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  unsigned __int8 *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t ObjectType;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75[3];

  v1 = v0;
  v2 = type metadata accessor for CRMulticastSyncManagerCatchupBehavior();
  v3 = *(_QWORD **)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CRKeyPath();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v71 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (_QWORD *)((char *)v1 + direct field offset for Canvas.liveStreamMessenger);
  swift_beginAccess();
  v73 = v16;
  v17 = *v16;
  if (v17)
  {
    v69 = v7;
    v70 = v6;
    v67 = v73[1];
    v18 = one-time initialization token for multipeerLogger;
    swift_unknownObjectRetain();
    if (v18 != -1)
      swift_once();
    v64 = v13;
    v65 = v12;
    v68 = v8;
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)multipeerLogger);
    swift_unknownObjectRetain_n();
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v66 = v3;
      v22 = swift_slowAlloc();
      ObjectType = v2;
      v23 = (uint8_t *)v22;
      v24 = v11;
      v25 = swift_slowAlloc();
      v75[0] = v25;
      *(_DWORD *)v23 = 136315138;
      v26 = ObjectIdentifier.debugDescription.getter();
      v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v75);
      v3 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v20, v21, "New session for %s", v23, 0xCu);
      swift_arrayDestroy();
      v28 = v25;
      v11 = v24;
      MEMORY[0x1DF0E6558](v28, -1, -1);
      v29 = v23;
      v2 = ObjectType;
      MEMORY[0x1DF0E6558](v29, -1, -1);

    }
    else
    {

      swift_unknownObjectRelease_n();
    }
    ObjectType = swift_getObjectType();
    v63 = *(void **)((char *)v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_context);
    v38 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v39 = *(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x910);
    v62 = v17;
    v40 = (uint64_t)v71;
    v39(ObjectType);
    v41 = *(_QWORD *)((char *)v1 + direct field offset for Canvas.paperView)
        + *(_QWORD *)((*v38 & **(_QWORD **)((char *)v1 + direct field offset for Canvas.paperView)) + 0x380);
    swift_beginAccess();
    v66 = v1;
    v43 = v68;
    v42 = v69;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v11, v41, v69);
    v44 = (uint64_t)v70;
    ((void (*)(char *, _QWORD, uint64_t))v3[13])(v70, *MEMORY[0x1E0D127D0], v2);
    v45 = type metadata accessor for Paper();
    v46 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, 255, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
    v47 = v67;
    v48 = (uint64_t *)PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:)(v63, v40, (uint64_t)v11, v44, 0x7265706150, 0xE500000000000000, ObjectType, v45, v67, v46);
    ((void (*)(uint64_t, uint64_t))v3[1])(v44, v2);
    v49 = *(void (**)(char *, uint64_t))(v43 + 8);
    v1 = v66;
    v49(v11, v42);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v40, v65);
    v50 = swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Canvas<Paper>);
    PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:)(v48, (uint64_t)v1, 0x7265706150, 0xE500000000000000, (uint64_t)partial apply for specialized closure #1 in Canvas.liveStreamMessenger.didset, v50, ObjectType, v51, v47, (uint64_t)&protocol witness table for AnyCanvas);
    swift_release_n();
    *(_QWORD *)((char *)v1 + direct field offset for Canvas.multipeerConnection) = v48;
    swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for multipeerLogger != -1)
      swift_once();
    v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)multipeerLogger);
    v31 = v1;
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      v35 = swift_slowAlloc();
      v75[0] = v35;
      *(_DWORD *)v34 = 136315138;
      v36 = ObjectIdentifier.debugDescription.getter();
      v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v32, v33, "Ended session for %s", v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v35, -1, -1);
      MEMORY[0x1DF0E6558](v34, -1, -1);

    }
    else
    {

    }
    *(_QWORD *)((char *)v31 + direct field offset for Canvas.multipeerConnection) = 0;
  }
  swift_release();
  v52 = *v73 != 0;
  v53 = (unsigned __int8 *)v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings;
  v54 = swift_beginAccess();
  *v53 = v52;
  v55 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x320))(v54);
  if (v55)
  {
    v56 = v55;
    v57 = objc_msgSend(v55, sel_canvasView);

    if (v57)
    {
      objc_msgSend(v57, sel_setGenerateLiveDrawing_, *v53);

    }
  }
  v58 = v73[1];
  v59 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x208);
  v60 = swift_unknownObjectRetain();
  return v59(v60, v58);
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  _QWORD *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  unsigned __int8 *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  id v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  void *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  char *v70;
  uint64_t v71;
  uint8_t *ObjectType;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75[3];

  v1 = v0;
  v2 = type metadata accessor for CRMulticastSyncManagerCatchupBehavior();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v73 = *(_QWORD **)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CRKeyPath();
  v71 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v70 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)((char *)v1 + direct field offset for Canvas.liveStreamMessenger);
  swift_beginAccess();
  v15 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (*v14)
  {
    v64 = v11;
    v68 = v2;
    v65 = v14[1];
    v16 = one-time initialization token for multipeerLogger;
    swift_unknownObjectRetain();
    if (v16 != -1)
      swift_once();
    v66 = v6;
    v67 = v3;
    v69 = v14;
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)multipeerLogger);
    swift_unknownObjectRetain_n();
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = v7;
      v21 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v75[0] = v22;
      *(_DWORD *)v21 = 136315138;
      ObjectType = v21 + 4;
      v23 = ObjectIdentifier.debugDescription.getter();
      v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v18, v19, "New session for %s", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v22, -1, -1);
      v25 = v21;
      v7 = v20;
      MEMORY[0x1DF0E6558](v25, -1, -1);

    }
    else
    {

      swift_unknownObjectRelease_n();
    }
    ObjectType = (uint8_t *)swift_getObjectType();
    v63 = *(void **)((char *)v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_context);
    v35 = direct field offset for Canvas.paperView;
    v36 = *(_QWORD *)((char *)v1 + direct field offset for Canvas.paperView)
        + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)((char *)v1 + direct field offset for Canvas.paperView))
                    + 0x380);
    swift_beginAccess();
    v37 = (uint64_t)v73;
    v38 = (void (*)(char *, uint64_t, uint64_t))v73[2];
    v38(v10, v36, v7);
    v39 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Image and conformance Image, 255, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
    v40 = (uint64_t)v70;
    Capsule<>.rootID.getter();
    v62 = *(void (**)(char *, uint64_t))(v37 + 8);
    v62(v10, v7);
    v41 = *(_QWORD *)((char *)v1 + v35)
        + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)((char *)v1 + v35)) + 0x380);
    swift_beginAccess();
    v38(v10, v41, v7);
    v42 = (uint64_t)v66;
    v43 = v67;
    v44 = v68;
    (*(void (**)(char *, _QWORD, uint64_t))(v67 + 104))(v66, *MEMORY[0x1E0D127D0], v68);
    v45 = type metadata accessor for Image();
    v73 = v1;
    v46 = v65;
    v47 = (uint64_t *)PaperKitLiveStreamMessenger.newMultipeerConnection<A>(_:id:model:catchup:name:)(v63, v40, (uint64_t)v10, v42, 0x7265706150, 0xE500000000000000, (uint64_t)ObjectType, v45, v65, v39);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
    v62(v10, v7);
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v40, v64);
    v48 = swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Canvas<Image>);
    v60 = v46;
    v1 = v73;
    PaperKitLiveStreamMessenger.listenTo<A, B>(multicast:liveEditable:name:merge:)(v47, (uint64_t)v73, 0x7265706150, 0xE500000000000000, (uint64_t)partial apply for specialized closure #1 in Canvas.liveStreamMessenger.didset, v48, (uint64_t)ObjectType, v49, v60, (uint64_t)&protocol witness table for AnyCanvas);
    swift_release_n();
    *(_QWORD *)((char *)v1 + direct field offset for Canvas.multipeerConnection) = v47;
    v15 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    swift_unknownObjectRelease();
    v14 = v69;
  }
  else
  {
    if (one-time initialization token for multipeerLogger != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)multipeerLogger);
    v27 = v1;
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      v31 = swift_slowAlloc();
      v75[0] = v31;
      *(_DWORD *)v30 = 136315138;
      v32 = ObjectIdentifier.debugDescription.getter();
      v74 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1DDB0F000, v28, v29, "Ended session for %s", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v31, -1, -1);
      v34 = v30;
      v15 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      MEMORY[0x1DF0E6558](v34, -1, -1);

    }
    else
    {

    }
    *(_QWORD *)((char *)v27 + direct field offset for Canvas.multipeerConnection) = 0;
  }
  swift_release();
  v50 = *v14 != 0;
  v51 = (unsigned __int8 *)v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings;
  v52 = swift_beginAccess();
  *v51 = v50;
  v53 = (void *)(*(uint64_t (**)(uint64_t))((*v15 & *v1) + 0x320))(v52);
  if (v53)
  {
    v54 = v53;
    v55 = objc_msgSend(v53, sel_canvasView);

    if (v55)
    {
      objc_msgSend(v55, sel_setGenerateLiveDrawing_, *v51);

    }
  }
  v56 = v14[1];
  v57 = *(uint64_t (**)(uint64_t, uint64_t))((*v15 & *v1) + 0x208);
  v58 = swift_unknownObjectRetain();
  return v57(v58, v56);
}

void specialized closure #1 in Canvas.liveStreamMessenger.didset(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void (*v7)(uint64_t, char *, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = a2 + 16;
  swift_beginAccess();
  v4 = (_QWORD *)MEMORY[0x1DF0E666C](v3);
  if (v4)
  {
    v5 = v4;
    v10 = 3;
    v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v7 = *(void (**)(uint64_t, char *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x538);
    v8 = type metadata accessor for Paper();
    v9 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Paper and conformance Paper, 255, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
    v7(a1, &v10, v8, v9);
    v10 = 3;
    (*(void (**)(char *))((*v6 & *v5) + 0x518))(&v10);

  }
}

{
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  void (*v6)(uint64_t, char *, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = a2 + 16;
  swift_beginAccess();
  v4 = (_QWORD *)MEMORY[0x1DF0E666C](v3);
  if (v4)
  {
    v5 = v4;
    v9 = 3;
    v6 = *(void (**)(uint64_t, char *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x538);
    v7 = type metadata accessor for Image();
    v8 = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type Image and conformance Image, 255, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
    v6(a1, &v9, v7, v8);
    v9 = 3;
    AnyCanvas.forwardChanges(from:)((PaperKit::AnyCanvas::MergeSource)&v9);

  }
}

uint64_t PaperTextAttachmentCanvasView.liveStreamMessenger.getter()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView))
  {
    swift_beginAccess();
    return swift_unknownObjectRetain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *key path getter for PaperTextAttachmentCanvasView.liveStreamMessenger : PaperTextAttachmentCanvasView@<X0>(_QWORD *result@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  _OWORD *v4;

  v3 = *(_QWORD *)(*result + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView);
  if (v3)
  {
    v4 = (_OWORD *)(v3 + direct field offset for Canvas.liveStreamMessenger);
    swift_beginAccess();
    *a2 = *v4;
    return (_QWORD *)swift_unknownObjectRetain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t *key path setter for PaperTextAttachmentCanvasView.liveStreamMessenger : PaperTextAttachmentCanvasView(uint64_t *result, _QWORD *a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;

  v2 = *(char **)(*a2 + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView);
  if (v2)
  {
    v3 = *result;
    v4 = result[1];
    v5 = &v2[direct field offset for Canvas.liveStreamMessenger];
    swift_beginAccess();
    *(_QWORD *)v5 = v3;
    *((_QWORD *)v5 + 1) = v4;
    swift_unknownObjectRetain_n();
    v6 = v2;
    swift_unknownObjectRelease();
    specialized Canvas.liveStreamMessenger.didset();

    return (uint64_t *)swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void (*PaperTextAttachmentCanvasView.liveStreamMessenger.modify(void (**a1)(uint64_t a1, char a2)))(uint64_t a1, char a2)
{
  uint64_t v1;
  void (*result)(uint64_t, char);
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, char);
  _OWORD *v7;

  result = (void (*)(uint64_t, char))malloc(0x68uLL);
  *a1 = result;
  v4 = OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView;
  *((_QWORD *)result + 11) = v1;
  *((_QWORD *)result + 12) = v4;
  v5 = *(_QWORD *)(v1 + v4);
  if (v5)
  {
    v6 = result;
    v7 = (_OWORD *)(v5 + direct field offset for Canvas.liveStreamMessenger);
    swift_beginAccess();
    *(_OWORD *)((char *)v6 + 72) = *v7;
    swift_unknownObjectRetain();
    return PaperTextAttachmentCanvasView.liveStreamMessenger.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void PaperTextAttachmentCanvasView.liveStreamMessenger.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;

  v2 = *(_QWORD **)a1;
  v3 = *(char **)(*(_QWORD *)(*(_QWORD *)a1 + 88) + *(_QWORD *)(*(_QWORD *)a1 + 96));
  if ((a2 & 1) != 0)
  {
    if (v3)
    {
      v4 = v2[9];
      v5 = v2[10];
      v6 = &v3[direct field offset for Canvas.liveStreamMessenger];
      swift_beginAccess();
      *(_QWORD *)v6 = v4;
      *((_QWORD *)v6 + 1) = v5;
      swift_unknownObjectRetain_n();
      v7 = v3;
      swift_unknownObjectRelease();
      specialized Canvas.liveStreamMessenger.didset();
      swift_unknownObjectRelease();

      swift_unknownObjectRelease();
LABEL_6:
      free(v2);
      return;
    }
    __break(1u);
  }
  else if (v3)
  {
    v8 = v2[9];
    v9 = v2[10];
    v10 = &v3[direct field offset for Canvas.liveStreamMessenger];
    swift_beginAccess();
    *(_QWORD *)v10 = v8;
    *((_QWORD *)v10 + 1) = v9;
    v11 = v3;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    specialized Canvas.liveStreamMessenger.didset();
    swift_unknownObjectRelease();

    goto LABEL_6;
  }
  __break(1u);
}

id PaperTextAttachmentCanvasView.init(frame:paperIdentifier:paperURL:coherenceContextURL:encryptionDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9)
{
  char *v9;
  char *v10;
  objc_class *ObjectType;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  id v27;
  objc_super v29;

  v10 = v9;
  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_canvasViewDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_canvasTiledView] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_contentView] = 0;
  v21 = (uint64_t)&v10[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_encryptionDelegate];
  *(_OWORD *)v21 = 0u;
  *(_OWORD *)(v21 + 16) = 0u;
  *(_QWORD *)(v21 + 32) = 0;
  v22 = &v10[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_paperIdentifier];
  *(_QWORD *)v22 = a1;
  *((_QWORD *)v22 + 1) = a2;
  v23 = &v10[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_paperURL];
  v24 = type metadata accessor for URL();
  v25 = *(_QWORD *)(v24 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v23, a3, v24);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a4, (uint64_t)&v10[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_coherenceContextURL], &demangling cache variable for type metadata for URL?);
  swift_beginAccess();
  v26 = v10;
  outlined assign with copy of EncryptionDelegate?(a5, v21);
  swift_endAccess();

  v29.receiver = v26;
  v29.super_class = ObjectType;
  v27 = objc_msgSendSuper2(&v29, sel_initWithFrame_, a6, a7, a8, a9);
  PaperTextAttachmentCanvasView.setupViews()();

  outlined destroy of StocksKitCurrencyCache.Provider?(a5, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  outlined destroy of StocksKitCurrencyCache.Provider?(a4, &demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(a3, v24);
  return v27;
}

Swift::Void __swiftcall PaperTextAttachmentCanvasView.setupViews()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;
  objc_class *v46;
  unint64_t v47;
  char v48;
  id v49;
  id v50;
  void *v51;
  id v52;
  id v53;
  void *v54;
  id v55;
  char v56;
  id v57;
  void *v58;
  void *v59;
  id v60;
  uint64_t v61;
  unsigned int v62;
  unsigned __int8 v63;
  _BYTE v64[40];
  _BYTE v65[24];
  ValueMetadata *v66;
  unint64_t v67;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v62 - v8;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v62 - v12;
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v62 - v17;
  objc_msgSend(v1, sel_frame, v16);
  v20 = v19;
  v22 = v21;
  objc_msgSend(v1, sel_setMinimumZoomScale_, 1.0);
  objc_msgSend(v1, sel_setMaximumZoomScale_, 1.0);
  objc_msgSend(v1, sel_setAlwaysBounceVertical_, 0);
  objc_msgSend(v1, sel_setAlwaysBounceHorizontal_, 0);
  objc_msgSend(v1, sel_setDelaysContentTouches_, 1);
  objc_msgSend(v1, sel_setContentInsetAdjustmentBehavior_, 2);
  v23 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v24 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000036, 0x80000001DDF5B610);
  v62 = objc_msgSend(v23, sel_BOOLForKey_, v24);

  v25 = *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_paperIdentifier];
  v26 = *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_paperIdentifier + 8];
  v27 = &v1[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_paperURL];
  v28 = type metadata accessor for URL();
  v29 = *(_QWORD *)(v28 - 8);
  (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v18, v27, v28);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v18, 0, 1, v28);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v1[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_coherenceContextURL], (uint64_t)v13, &demangling cache variable for type metadata for URL?);
  v30 = (uint64_t)&v1[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_encryptionDelegate];
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v30, (uint64_t)v65, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  objc_allocWithZone((Class)type metadata accessor for PaperNoTextViewTextAttachmentView(0));
  swift_unknownObjectUnownedInit();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v18, (uint64_t)v9, &demangling cache variable for type metadata for URL?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v13, (uint64_t)v5, &demangling cache variable for type metadata for URL?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v65, (uint64_t)v64, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  v63 = 0;
  swift_bridgeObjectRetain();
  v31 = PaperTextAttachmentView.init(paperIdentifier:paperURL:attachment:coherenceContextURL:encryptionDelegate:editingMode:inserted:)(v25, v26, (uint64_t)v9, 0, (uint64_t)v5, (uint64_t)v64, &v63, 0);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v65, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for URL?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for URL?);
  v32 = OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView;
  v33 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView];
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView] = v31;

  v34 = *(void **)&v1[v32];
  if (!v34)
  {
    __break(1u);
    goto LABEL_19;
  }
  objc_msgSend(v34, sel_setFrame_, 0.0, 0.0, v20, v22);
  v35 = *(_QWORD *)&v1[v32];
  if (!v35)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  *(_QWORD *)(v35 + direct field offset for PaperTextAttachmentView.paperViewDelegate + 8) = &protocol witness table for PaperTextAttachmentCanvasView;
  swift_unknownObjectWeakAssign();
  v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_initWithFrame_, 0.0, 0.0, v20, v22);
  v37 = OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_contentView;
  v38 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_contentView];
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_contentView] = v36;

  v39 = *(void **)&v1[v37];
  if (!v39)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  objc_msgSend(v39, sel_setOpaque_, 1);
  v40 = *(void **)&v1[v37];
  if (!v40)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v41 = (void *)objc_opt_self();
  v42 = v40;
  v43 = objc_msgSend(v41, sel_systemBackgroundColor);
  objc_msgSend(v42, sel_setBackgroundColor_, v43);

  v44 = *(void **)&v1[v37];
  if (!v44)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (!*(_QWORD *)&v1[v32])
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v45 = v62 ^ 1;
  objc_msgSend(v44, sel_addSubview_);
  v46 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
  v66 = &type metadata for PencilAndPaperFeatureFlags;
  v47 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v67 = v47;
  v65[0] = 3;
  v48 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
  v49 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD1260]), sel_initInScrollView_sixChannelBlending_defaultDrawingClass_readOnly_, v1, v45, swift_getObjCClassFromMetadata(), (v48 & 1) == 0);
  v50 = objc_msgSend(v49, sel_canvasView);
  if (v50)
  {
    v51 = v50;
    v52 = objc_msgSend(objc_allocWithZone(v46), sel_init);
    objc_msgSend(v51, sel_setDrawing_, v52);

  }
  v53 = objc_msgSend(v49, sel_canvasView);
  if (v53)
  {
    v54 = v53;
    v55 = objc_msgSend(v53, sel_drawingGestureRecognizer);

    v66 = &type metadata for PencilAndPaperFeatureFlags;
    v67 = v47;
    v65[0] = 3;
    v56 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
    objc_msgSend(v55, sel_setEnabled_, v56 & 1);

  }
  objc_msgSend(v49, sel_setDrawingPolicy_, 0);
  v57 = objc_msgSend(v49, sel_canvasView);
  if (v57)
  {
    v58 = v57;
    objc_msgSend(v57, sel_setOpaque_, 0);

  }
  if ((v62 & 1) == 0)
    objc_msgSend(v49, sel_setContentSnapshottingView_, v1);
  v59 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_canvasTiledView];
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_canvasTiledView] = v49;
  v60 = v49;

  if (!*(_QWORD *)&v1[v32])
    goto LABEL_24;
  swift_unknownObjectUnownedAssign();
  objc_msgSend(v60, sel_setAttachmentContainerView_, *(_QWORD *)&v1[v37]);
  v61 = *(_QWORD *)&v1[v37];
  if (v61)
  {
    objc_msgSend(v1, sel_insertSubview_atIndex_, v61, 0);
    objc_msgSend(v60, sel__layoutSubviews);

    return;
  }
LABEL_25:
  __break(1u);
}

uint64_t PaperNoTextViewTextAttachmentView.__allocating_init(paperIdentifier:paperURL:attachment:coherenceContextURL:encryptionDelegate:editingMode:inserted:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7, int a8)
{
  objc_class *v8;
  objc_class *v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v26;
  void *v27;
  int v28;
  unsigned __int8 v29;
  _BYTE v30[40];

  v9 = v8;
  v28 = a8;
  v26 = a2;
  v27 = a4;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v26 - v21;
  objc_allocWithZone(v9);
  v23 = *a7;
  swift_unknownObjectUnownedInit();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a3, (uint64_t)v22, &demangling cache variable for type metadata for URL?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a5, (uint64_t)v18, &demangling cache variable for type metadata for URL?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a6, (uint64_t)v30, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  v29 = v23;
  v24 = PaperTextAttachmentView.init(paperIdentifier:paperURL:attachment:coherenceContextURL:encryptionDelegate:editingMode:inserted:)(a1, v26, (uint64_t)v22, v27, (uint64_t)v18, (uint64_t)v30, &v29, v28);
  outlined destroy of StocksKitCurrencyCache.Provider?(a6, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  outlined destroy of StocksKitCurrencyCache.Provider?(a5, &demangling cache variable for type metadata for URL?);
  outlined destroy of StocksKitCurrencyCache.Provider?(a3, &demangling cache variable for type metadata for URL?);
  return v24;
}

Swift::Void __swiftcall PaperTextAttachmentCanvasView.layoutSubviews()()
{
  void *v0;
  objc_super v1;
  __C::CGRect v2;

  v1.receiver = v0;
  v1.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v1, sel_layoutSubviews);
  objc_msgSend(v0, sel_bounds);
  PaperTextAttachmentCanvasView.updateSubviews(bounds:)(v2);
}

Swift::Void __swiftcall PaperTextAttachmentCanvasView.updateSubviews(bounds:)(__C::CGRect bounds)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  double height;
  double width;
  double y;
  double x;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  UIView_optional *v24;
  CGSize v25;
  BOOL v26;
  void *v27;
  void *v28;
  CGRect v29;
  CGRect v30;
  __C::CGRect v31;
  CGRect v32;
  CGRect v33;

  v2 = v1;
  v3 = OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_contentView;
  v4 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_contentView);
  if (!v4)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  height = bounds.size.height;
  width = bounds.size.width;
  y = bounds.origin.y;
  x = bounds.origin.x;
  objc_msgSend(v4, sel_frame);
  v32.origin.x = x;
  v32.origin.y = y;
  v32.size.width = width;
  v32.size.height = height;
  if (CGRectEqualToRect(v29, v32))
    return;
  v9 = *(void **)(v2 + v3);
  if (!v9)
    goto LABEL_10;
  objc_msgSend(v9, sel_setFrame_, x, y, width, height);
  v10 = OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_canvasTiledView;
  v11 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_canvasTiledView);
  if (!v11)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  objc_msgSend(v11, sel_setFrame_, x, y, width, height);
  v12 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView);
  if (!v12)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v13 = v12;
  objc_msgSend(v13, sel_frame);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  objc_msgSend(v13, sel_frame);
  v23 = v22;
  v24 = (UIView_optional *)objc_msgSend(v13, sel_superview);
  v25 = PaperTextAttachmentView.desiredTextAttachmentSize(containerView:)(v24);

  v30.origin.x = 0.0;
  v30.origin.y = v23;
  v30.size.width = v25.width;
  v30.size.height = v25.height;
  v33.origin.x = v15;
  v33.origin.y = v17;
  v33.size.width = v19;
  v33.size.height = v21;
  v26 = CGRectEqualToRect(v30, v33);
  v31.origin.x = 0.0;
  v31.origin.y = v23;
  v31.size.width = v25.width;
  v31.size.height = v25.height;
  PaperTextAttachmentView.updateAttachmentBounds(frame:ensureLayout:needsInvalidateLayout:shouldRedraw:)(v31, 0, !v26, 1);

  v27 = *(void **)(v2 + v10);
  if (!v27)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  objc_msgSend(v27, sel__layoutSubviews);
  v28 = *(void **)(v2 + v10);
  if (v28)
  {
    objc_msgSend(v28, sel_updateTilesForVisibleRect);
    return;
  }
LABEL_14:
  __break(1u);
}

id PaperTextAttachmentCanvasView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), sel_initWithFrame_, a1, a2, a3, a4);
}

void PaperTextAttachmentCanvasView.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id PaperTextAttachmentCanvasView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

BOOL static DrawingFindResult.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) < *(_QWORD *)(a2 + 16);
}

BOOL static DrawingFindResult.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

Swift::Int closure #1 in DrawingFindResult.draw(for:)(void *a1, uint64_t a2)
{
  void *v4;
  id v5;

  swift_beginAccess();
  v4 = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = a1;
  v5 = a1;

  return OS_dispatch_semaphore.signal()();
}

uint64_t DrawingFindResult.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DrawingFindResult.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

__n128 protocol witness for FindResult.frames(in:) in conformance DrawingFindResult()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __n128 result;

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
  v2 = swift_allocObject();
  v3 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)(v2 + 16) = xmmword_1DDF32CF0;
  *(_OWORD *)(v2 + 32) = v3;
  result = *(__n128 *)(v1 + 40);
  *(__n128 *)(v2 + 48) = result;
  return result;
}

uint64_t protocol witness for FindResult.draw(for:) in conformance DrawingFindResult(uint64_t *a1)
{
  return DrawingFindResult.draw(for:)(*a1);
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance DrawingFindResult(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 16) < *(_QWORD *)(*(_QWORD *)a2 + 16);
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance DrawingFindResult(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a2 + 16) >= *(_QWORD *)(*(_QWORD *)a1 + 16);
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance DrawingFindResult(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 16) >= *(_QWORD *)(*(_QWORD *)a2 + 16);
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance DrawingFindResult(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a2 + 16) < *(_QWORD *)(*(_QWORD *)a1 + 16);
}

void closure #1 in PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5, int a6, void *a7, void *a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  uint64_t v42;
  int v43;
  int v44;
  _QWORD aBlock[6];

  v40 = a7;
  v41 = a8;
  v43 = a6;
  v44 = a5;
  v37 = a1;
  v38 = a9;
  v39 = a2;
  v11 = type metadata accessor for PKDrawing();
  v12 = *(_QWORD *)(v11 - 8);
  v35 = v11;
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11, v14);
  v36 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[DrawingFindResult], Never>);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  v19 = MEMORY[0x1E0C80A78](v15, v18);
  v20 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = MEMORY[0x1DF0E41AC](a3, a4, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v20, v37, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v38, v11);
  v21 = (*(unsigned __int8 *)(v16 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v22 = (v17 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = (*(unsigned __int8 *)(v12 + 80) + v23 + 8) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v25 = swift_allocObject();
  v26 = v39;
  *(_QWORD *)(v25 + 16) = v39;
  (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v25 + v21, v20, v15);
  v27 = v40;
  *(_QWORD *)(v25 + v22) = v40;
  v28 = v41;
  *(_QWORD *)(v25 + v23) = v41;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v25 + v24, v36, v35);
  aBlock[4] = partial apply for closure #1 in closure #1 in PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:);
  aBlock[5] = v25;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [PKSearchQueryItem]) -> ();
  aBlock[3] = &block_descriptor_64;
  v29 = _Block_copy(aBlock);
  v30 = v26;
  v31 = v27;
  v32 = v28;
  swift_release();
  v33 = (void *)v42;
  objc_msgSend(v30, sel_performSearchQuery_fullWordsOnly_caseMatchingOnly_withBlock_, v42, v44 & 1, (v43 & 1) == 0, v29);
  _Block_release(v29);

}

uint64_t closure #1 in closure #1 in PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:)()
{
  unint64_t v0;

  v0 = swift_bridgeObjectRetain();
  _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySo17PKSearchQueryItemCGG_8PaperKit17DrawingFindResultCs5NeverOTg508_sSiSo17fgh2C8i5Kit17klm32CIgygo_Si6offset_AB7elementtAEs5N11OIegnrzr_TRSiAiNIgygo_Tf1cn_nTf4ng_n(v0, (void (*)(unint64_t, id))partial apply for closure #1 in closure #1 in closure #1 in PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:));
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[DrawingFindResult], Never>);
  return CheckedContinuation.resume(returning:)();
}

CGFloat *closure #1 in closure #1 in closure #1 in PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:)(uint64_t a1, id a2, void *a3, uint64_t a4)
{
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  CGFloat Width;
  CGFloat x;
  CGFloat y;
  CGFloat v18;
  CGFloat height;
  CGFloat *result;
  CGAffineTransform v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;

  objc_msgSend(a2, sel_bounds);
  objc_msgSend(a3, sel_convertRect_fromCoordinateSpace_, a4);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;
  PKDrawing.bounds.getter();
  Width = CGRectGetWidth(v22);
  CGAffineTransformMakeScale(&v21, Width / *MEMORY[0x1E0CD1338], Width / *MEMORY[0x1E0CD1338]);
  v23.origin.x = v8;
  v23.origin.y = v10;
  v23.size.width = v12;
  v23.size.height = v14;
  v24 = CGRectApplyAffineTransform(v23, &v21);
  v25 = CGRectInset(v24, -8.0, -8.0);
  x = v25.origin.x;
  y = v25.origin.y;
  v18 = v25.size.width;
  height = v25.size.height;
  type metadata accessor for DrawingFindResult();
  result = (CGFloat *)swift_allocObject();
  *((_QWORD *)result + 2) = a1;
  result[3] = x;
  result[4] = y;
  result[5] = v18;
  result[6] = height;
  result[7] = v8;
  result[8] = v10;
  result[9] = v12;
  result[10] = v14;
  return result;
}

uint64_t protocol witness for FindResultProvider.performTextSearch(queryString:ignoreCase:wholeWords:) in conformance PaperTextAttachmentCanvasView(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  return PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:)(a1, a2, a3, a4);
}

uint64_t PaperNoTextViewTextAttachmentView.tiledView.getter()
{
  return swift_unknownObjectUnownedLoadStrong();
}

uint64_t (*PaperNoTextViewTextAttachmentView.calculateDocumentExpressionSolvingBehavior.modify(_BYTE *a1))(_QWORD, _QWORD)
{
  *a1 = 3;
  return UnknownCanvasElementView.flags.modify;
}

id @objc PaperNoTextViewTextAttachmentView.init(coder:)(void *a1, uint64_t a2, uint64_t a3)
{
  objc_super v6;

  swift_unknownObjectUnownedInit();
  v6.receiver = a1;
  v6.super_class = (Class)type metadata accessor for PaperNoTextViewTextAttachmentView(0);
  return objc_msgSendSuper2(&v6, sel_initWithCoder_, a3);
}

uint64_t PaperNoTextViewTextAttachmentView.__ivar_destroyer()
{
  return swift_unknownObjectUnownedDestroy();
}

id PaperNoTextViewTextAttachmentView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PaperNoTextViewTextAttachmentView(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t @objc PaperNoTextViewTextAttachmentView.__ivar_destroyer()
{
  return swift_unknownObjectUnownedDestroy();
}

void partial apply for closure #1 in PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(unsigned __int8 *)(v1 + 41), *(void **)(v1 + 48), *(void **)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t specialized CanvasElementImageRenderer.__allocating_init(renderer:)(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 v3;
  _BYTE v5[40];
  _QWORD v6[5];

  v6[3] = type metadata accessor for ImageRenderer();
  v6[4] = &protocol witness table for ImageRenderer;
  v6[0] = a1;
  type metadata accessor for CanvasElementImageRenderer();
  v2 = swift_allocObject();
  outlined init with copy of FindResult((uint64_t)v6, (uint64_t)v5);
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_BYTE *)(v2 + 72) = PKIsSixChannelBlendEnabledInPaper();
  outlined init with copy of FindResult((uint64_t)v5, v2 + 16);
  v3 = objc_msgSend((id)objc_opt_self(), sel_isMainThread);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  *(_BYTE *)(v2 + 73) = v3;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  return v2;
}

uint64_t sub_1DDEC70A4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1DDEC70C8()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

Swift::Int partial apply for closure #1 in DrawingFindResult.draw(for:)(void *a1)
{
  uint64_t v1;

  return closure #1 in DrawingFindResult.draw(for:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t outlined assign with copy of EncryptionDelegate?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t associated type witness table accessor for FindResult.Provider : FindResultProvider in DrawingFindResult()
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type PaperTextAttachmentCanvasView and conformance PaperTextAttachmentCanvasView, 255, type metadata accessor for PaperTextAttachmentCanvasView, (uint64_t)&protocol conformance descriptor for PaperTextAttachmentCanvasView);
}

uint64_t type metadata accessor for PaperTextAttachmentCanvasView(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PaperTextAttachmentCanvasView);
}

uint64_t instantiation function for generic protocol witness table for DrawingFindResult(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DrawingFindResult and conformance DrawingFindResult, a2, (uint64_t (*)(uint64_t))type metadata accessor for DrawingFindResult, (uint64_t)&protocol conformance descriptor for DrawingFindResult);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for DrawingFindResult()
{
  return objc_opt_self();
}

uint64_t base witness table accessor for Equatable in DrawingFindResult(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DrawingFindResult and conformance DrawingFindResult, a2, (uint64_t (*)(uint64_t))type metadata accessor for DrawingFindResult, (uint64_t)&protocol conformance descriptor for DrawingFindResult);
}

uint64_t associated type witness table accessor for FindResultProvider.Result : FindResult in PaperTextAttachmentCanvasView(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type DrawingFindResult and conformance DrawingFindResult, a2, (uint64_t (*)(uint64_t))type metadata accessor for DrawingFindResult, (uint64_t)&protocol conformance descriptor for DrawingFindResult);
}

uint64_t ObjC metadata update function for PaperTextAttachmentCanvasView()
{
  return type metadata accessor for PaperTextAttachmentCanvasView(0);
}

void type metadata completion function for PaperTextAttachmentCanvasView()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    type metadata accessor for URL?();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for PaperTextAttachmentCanvasView()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PaperTextAttachmentCanvasView.__allocating_init(frame:paperIdentifier:paperURL:coherenceContextURL:encryptionDelegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

void type metadata accessor for URL?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for URL?)
  {
    type metadata accessor for URL();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for URL?);
  }
}

uint64_t method lookup function for DrawingFindResult()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata accessor for PaperNoTextViewTextAttachmentView(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PaperNoTextViewTextAttachmentView);
}

uint64_t type metadata completion function for PaperNoTextViewTextAttachmentView()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for PaperNoTextViewTextAttachmentView()
{
  return type metadata accessor for PaperNoTextViewTextAttachmentView(0);
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySo17PKSearchQueryItemCGG_8PaperKit17DrawingFindResultCs5NeverOTg508_sSiSo17fgh2C8i5Kit17klm32CIgygo_Si6offset_AB7elementtAEs5N11OIegnrzr_TRSiAiNIgygo_Tf1cn_nTf4ng_n(unint64_t a1, void (*a2)(unint64_t, id))
{
  uint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  unint64_t v7;
  uint64_t v10;

  v10 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray.reserveCapacity(_:)();
  if (a1 >> 62)
    goto LABEL_13;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v3)
  {
    while (1)
    {
      v4 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v5 = (id)MEMORY[0x1DF0E4D64](v4, a1);
LABEL_7:
        v6 = v5;
        v7 = v4 + 1;
        if (__OFADD__(v4, 1))
          goto LABEL_12;
        a2(v4, v5);

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        ++v4;
        if (v7 == v3)
          goto LABEL_14;
      }
      if (v4 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_12:
      __break(1u);
LABEL_13:
      swift_bridgeObjectRetain();
      v3 = _CocoaArrayWrapper.endIndex.getter();
      if (!v3)
        goto LABEL_14;
    }
    v5 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_7;
  }
LABEL_14:
  swift_bridgeObjectRelease();
  return v10;
}

void specialized PaperTextAttachmentCanvasView.init(coder:)()
{
  char *v0;
  char *v1;

  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_canvasViewDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_canvasTiledView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_attachmentView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_contentView] = 0;
  v1 = &v0[OBJC_IVAR____TtC8PaperKit29PaperTextAttachmentCanvasView_encryptionDelegate];
  *(_OWORD *)v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((_QWORD *)v1 + 4) = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void partial apply for specialized closure #1 in Canvas.liveStreamMessenger.didset(uint64_t a1)
{
  uint64_t v1;

  specialized closure #1 in Canvas.liveStreamMessenger.didset(a1, v1);
}

{
  uint64_t v1;

  specialized closure #1 in Canvas.liveStreamMessenger.didset(a1, v1);
}

uint64_t outlined init with copy of Paper(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Paper();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1DDEC7624()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (int *)type metadata accessor for Paper();
  v2 = *((_QWORD *)v1 - 1);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v3 + *(_QWORD *)(v2 + 64);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  swift_release();
  v8 = v0 + v3;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v8 + v1[5], v9);
  v11 = v8 + v1[6];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = v8 + v1[7];
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = v8 + v1[8];
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = v8 + v1[9];
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = v8 + v1[10];
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = v8 + v1[11];
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  char v17;
  char v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(type metadata accessor for Paper() - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>)
                 - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v1[2];
  v9 = v1[3];
  v10 = v1[4];
  v11 = (uint64_t)v1 + v7;
  v12 = (double *)((char *)v1 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  v13 = *v12;
  v14 = v12[1];
  v15 = v12[2];
  v16 = v12[3];
  v17 = *((_BYTE *)v12 + 32);
  v18 = *((_BYTE *)v12 + 33);
  v19 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v19;
  *v19 = v2;
  v19[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return specialized closure #1 in CanvasElementImageRenderer.image<A, B>(_:in:bounds:completion:)(v13, v14, v15, v16, a1, v8, v9, v10, (uint64_t)v1 + v4, v11, v17, v18);
}

uint64_t sub_1DDEC796C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[DrawingFindResult], Never>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for PKDrawing();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + v5 + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v0 + v8, v6);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[DrawingFindResult], Never>);
  type metadata accessor for PKDrawing();
  return closure #1 in closure #1 in PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:)();
}

uint64_t block_copy_helper_64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_64()
{
  return swift_release();
}

CGFloat *partial apply for closure #1 in closure #1 in closure #1 in PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:)(uint64_t a1, void *a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in closure #1 in PaperTextAttachmentCanvasView.performTextSearch(queryString:ignoreCase:wholeWords:)(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1DDEC7B14()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t destroy for MiniLineEndsButton()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for MiniLineEndsButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MiniLineEndsButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  v4 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

uint64_t assignWithTake for MiniLineEndsButton(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  return a1;
}

uint64_t getEnumTagSinglePayload for MiniLineEndsButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 58))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MiniLineEndsButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 58) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 58) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MiniLineEndsButton()
{
  return &type metadata for MiniLineEndsButton;
}

uint64_t associated type witness table accessor for View.Body : View in MiniLineEndsButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t MiniLineEndsButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[2];

  v3 = v1[1];
  v14 = *v1;
  v15 = v3;
  v16[0] = v1[2];
  *(_OWORD *)((char *)v16 + 10) = *(__int128 *)((char *)v1 + 42);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.projectedValue.getter();
  v4 = (_OWORD *)swift_allocObject();
  v5 = v15;
  v4[1] = v14;
  v4[2] = v5;
  v4[3] = v16[0];
  *(_OWORD *)((char *)v4 + 58) = *(_OWORD *)((char *)v16 + 10);
  outlined retain of MiniLineEndsButton((uint64_t)&v14);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CGSize?);
  State.init(wrappedValue:)();
  type metadata accessor for MiniPopoverState();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type MiniPopoverState and conformance MiniPopoverState, (uint64_t (*)(uint64_t))type metadata accessor for MiniPopoverState, (uint64_t)&protocol conformance descriptor for MiniPopoverState);
  v6 = EnvironmentObject.init()();
  v8 = v7;
  result = static VerticalAlignment.firstTextBaseline.getter();
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v12;
  *(_DWORD *)(a1 + 17) = v10;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)((char *)&v10 + 3);
  *(_QWORD *)(a1 + 24) = v13;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v11;
  *(_BYTE *)(a1 + 48) = v12;
  *(_DWORD *)(a1 + 49) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = closure #1 in MiniLineEndsButton.body.getter;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = partial apply for closure #2 in MiniLineEndsButton.body.getter;
  *(_QWORD *)(a1 + 96) = v4;
  *(_QWORD *)(a1 + 104) = result;
  *(_QWORD *)(a1 + 112) = closure #1 in MiniDivider.body.getter;
  *(_QWORD *)(a1 + 120) = 0;
  return result;
}

uint64_t closure #1 in MiniLineEndsButton.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = Image.init(systemName:)();
  v7 = objc_msgSend((id)objc_opt_self(), sel_labelColor);
  v8 = MEMORY[0x1DF0E22F8](v7);
  KeyPath = swift_getKeyPath();
  if (one-time initialization token for buttonFontSize != -1)
    swift_once();
  v10 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v5, 1, 1, v10);
  v11 = static Font.system(size:weight:design:)();
  outlined destroy of Font.Design?((uint64_t)v5);
  result = swift_getKeyPath();
  *a1 = v6;
  a1[1] = KeyPath;
  a1[2] = v8;
  a1[3] = result;
  a1[4] = v11;
  return result;
}

void *closure #2 in MiniLineEndsButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  _BYTE v13[344];
  _BYTE __src[360];

  v2 = static HorizontalAlignment.leading.getter();
  closure #1 in closure #2 in MiniLineEndsButton.body.getter((uint64_t)v13);
  __src[352] = 0;
  memcpy(&__src[7], v13, 0x152uLL);
  v3 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = 0x4020000000000000;
  *(_BYTE *)(a1 + 16) = 0;
  result = memcpy((void *)(a1 + 17), __src, 0x159uLL);
  *(_BYTE *)(a1 + 368) = v3;
  *(_QWORD *)(a1 + 376) = v5;
  *(_QWORD *)(a1 + 384) = v7;
  *(_QWORD *)(a1 + 392) = v9;
  *(_QWORD *)(a1 + 400) = v11;
  *(_BYTE *)(a1 + 408) = 0;
  return result;
}

uint64_t closure #1 in closure #2 in MiniLineEndsButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  Swift::String v2;
  Swift::String_optional v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _BYTE __src[288];
  _BYTE v27[304];
  _QWORD v28[39];
  char v29;
  _QWORD v30[2];
  char v31;
  _BYTE v32[289];
  Swift::String v33;

  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v33._object = (void *)0x80000001DDF5B650;
  v2._countAndFlagsBits = 0x646E4520656E694CLL;
  v2._object = (void *)0xE900000000000073;
  v3.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v3.value._object = (void *)0xEB00000000656C62;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v33._countAndFlagsBits = 0xD00000000000001FLL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, paperKitBundle, v4, v33);
  String.uppercased()();
  swift_bridgeObjectRelease();
  static Font.caption.getter();
  v5 = Text.font(_:)();
  v7 = v6;
  v9 = v8;
  swift_bridgeObjectRelease();
  swift_release();
  v10 = v9 & 1;
  static Font.Weight.bold.getter();
  v11 = Text.fontWeight(_:)();
  v13 = v12;
  v15 = v14 & 1;
  outlined consume of Text.Storage(v5, v7, v10);
  swift_bridgeObjectRelease();
  static Color.secondary.getter();
  v16 = Text.foregroundColor(_:)();
  v18 = v17;
  v20 = v19;
  v22 = v21;
  swift_release();
  outlined consume of Text.Storage(v11, v13, v15);
  swift_bridgeObjectRelease();
  v23 = static VerticalAlignment.center.getter();
  closure #1 in closure #1 in closure #2 in MiniLineEndsButton.body.getter((uint64_t)__src);
  v27[296] = 0;
  memcpy(&v27[7], __src, 0x11AuLL);
  v28[0] = v23;
  v28[1] = 0x4000000000000000;
  LOBYTE(v28[2]) = 0;
  memcpy((char *)&v28[2] + 1, v27, 0x121uLL);
  v29 = v20 & 1;
  memcpy((void *)(a1 + 32), v28, 0x132uLL);
  v24 = v29;
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 16) = v24;
  *(_QWORD *)(a1 + 24) = v22;
  v30[0] = v23;
  v30[1] = 0x4000000000000000;
  v31 = 0;
  memcpy(v32, v27, sizeof(v32));
  outlined copy of Text.Storage(v16, v18, v20 & 1);
  swift_bridgeObjectRetain();
  outlined retain of HStack<TupleView<(ToggleLineEndsButton, ToggleLineEndsButton, ToggleLineEndsButton)>>((uint64_t)v28);
  outlined release of HStack<TupleView<(ToggleLineEndsButton, ToggleLineEndsButton, ToggleLineEndsButton)>>((uint64_t)v30);
  outlined consume of Text.Storage(v16, v18, v20 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in closure #2 in MiniLineEndsButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;

  v5 = Image.init(systemName:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<(CRExtensible<LineEnd>, CRExtensible<LineEnd>)>>);
  Binding.projectedValue.getter();
  v4 = Image.init(systemName:)();
  Binding.projectedValue.getter();
  v2 = Image.init(systemName:)();
  Binding.projectedValue.getter();
  *(_QWORD *)a1 = v5;
  *(_OWORD *)(a1 + 8) = xmmword_1DDF46F50;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 64) = v7;
  *(_BYTE *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 80) = v9;
  *(_BYTE *)(a1 + 88) = v10;
  *(_BYTE *)(a1 + 89) = v11;
  *(_QWORD *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 104) = xmmword_1DDF32D00;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 144) = v6;
  *(_QWORD *)(a1 + 160) = v7;
  *(_BYTE *)(a1 + 168) = v8;
  *(_QWORD *)(a1 + 176) = v9;
  *(_BYTE *)(a1 + 184) = v10;
  *(_BYTE *)(a1 + 185) = v11;
  *(_QWORD *)(a1 + 192) = v2;
  *(_OWORD *)(a1 + 200) = xmmword_1DDF46F60;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 1;
  *(_BYTE *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 240) = v6;
  *(_QWORD *)(a1 + 256) = v7;
  *(_BYTE *)(a1 + 264) = v8;
  *(_QWORD *)(a1 + 272) = v9;
  *(_BYTE *)(a1 + 280) = v10;
  *(_BYTE *)(a1 + 281) = v11;
  swift_retain();
  swift_retain();
  swift_release();
  return swift_release();
}

uint64_t sub_1DDEC86A0()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

void *partial apply for closure #2 in MiniLineEndsButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in MiniLineEndsButton.body.getter(a1);
}

uint64_t outlined retain of MiniLineEndsButton(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined consume of Text.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease();
}

uint64_t outlined copy of Text.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain();
  else
    return swift_bridgeObjectRetain();
}

uint64_t outlined retain of HStack<TupleView<(ToggleLineEndsButton, ToggleLineEndsButton, ToggleLineEndsButton)>>(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined release of HStack<TupleView<(ToggleLineEndsButton, ToggleLineEndsButton, ToggleLineEndsButton)>>(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t closure #1 in ToggleLineEndsButton.body.getter(_OWORD *a1)
{
  __int128 v2;
  _QWORD v4[4];
  __int128 v5;
  _OWORD v6[2];

  v2 = a1[4];
  v5 = a1[3];
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 10) = *(_OWORD *)((char *)a1 + 74);
  outlined retain of ToggleLineEndsButton((uint64_t)a1);
  outlined retain of Binding<Inspected<(CRExtensible<LineEnd>, CRExtensible<LineEnd>)>>((uint64_t)&v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<(CRExtensible<LineEnd>, CRExtensible<LineEnd>)>>);
  MEMORY[0x1DF0E24B4](v4);
  Binding.wrappedValue.setter();
  outlined release of Binding<Inspected<(CRExtensible<LineEnd>, CRExtensible<LineEnd>)>>((uint64_t)&v5);
  return outlined release of ToggleLineEndsButton((uint64_t)a1);
}

uint64_t closure #2 in ToggleLineEndsButton.body.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;

  v4 = *a1;
  swift_retain();
  v5 = static Alignment.center.getter();
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(54.0, 0, 0.0, 1, 54.0, 0, 36.0, 0, (uint64_t)v33, 0.0, 1, 36.0, 0, v5, v6, v4);
  swift_release();
  v22 = v33[1];
  v23 = v33[0];
  v21 = v34;
  v20 = v35;
  v7 = v36;
  v8 = v38;
  v30 = v39;
  v31 = v37;
  v29 = v40;
  v28 = v41;
  v27 = v42;
  v9 = v44;
  v25 = v45;
  v26 = v43;
  v24 = v46;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<(CRExtensible<LineEnd>, CRExtensible<LineEnd>)>>);
  MEMORY[0x1DF0E24B4](&v32, v10);
  lazy protocol witness table accessor for type LineEnd and conformance LineEnd();
  if ((static CRExtensible.== infix(_:_:)() & 1) == 0)
  {
    v12 = v22;
    v11 = v23;
    v13 = v21;
    v14 = v20;
    goto LABEL_5;
  }
  v12 = v22;
  v11 = v23;
  v13 = v21;
  v14 = v20;
  if ((static CRExtensible.== infix(_:_:)() & 1) == 0)
  {
LABEL_5:
    v16 = objc_msgSend((id)objc_opt_self(), sel_secondarySystemBackgroundColor);
    v15 = MEMORY[0x1DF0E23A0](v16);
    goto LABEL_6;
  }
  v15 = static Color.accentColor.getter();
LABEL_6:
  v17 = v15;
  result = static Edge.Set.all.getter();
  LOBYTE(v32) = v7;
  v19 = a1[1];
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = v12;
  *(_BYTE *)(a2 + 16) = v13;
  *(_QWORD *)(a2 + 24) = v14;
  *(_BYTE *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 40) = v31;
  *(_BYTE *)(a2 + 48) = v8;
  *(_QWORD *)(a2 + 56) = v30;
  *(_BYTE *)(a2 + 64) = v29;
  *(_QWORD *)(a2 + 72) = v28;
  *(_BYTE *)(a2 + 80) = v27;
  *(_QWORD *)(a2 + 88) = v26;
  *(_BYTE *)(a2 + 96) = v9;
  *(_QWORD *)(a2 + 104) = v25;
  *(_QWORD *)(a2 + 112) = v24;
  *(_QWORD *)(a2 + 120) = v17;
  *(_BYTE *)(a2 + 128) = result;
  *(_QWORD *)(a2 + 136) = 0x4014000000000000;
  *(_QWORD *)(a2 + 144) = v19;
  *(_WORD *)(a2 + 152) = 256;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance ToggleLineEndsButton()
{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  _BYTE v17[16];
  _OWORD *v18;
  _OWORD v19[4];
  _OWORD v20[2];

  v1 = type metadata accessor for PlainButtonStyle();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = v0[3];
  v19[2] = v0[2];
  v19[3] = v11;
  v20[0] = v0[4];
  *(_OWORD *)((char *)v20 + 10) = *(_OWORD *)((char *)v0 + 74);
  v12 = v0[1];
  v19[0] = *v0;
  v19[1] = v12;
  v13 = (_OWORD *)swift_allocObject();
  v14 = v0[3];
  v13[3] = v0[2];
  v13[4] = v14;
  v13[5] = v0[4];
  *(_OWORD *)((char *)v13 + 90) = *(_OWORD *)((char *)v0 + 74);
  v15 = v0[1];
  v13[1] = *v0;
  v13[2] = v15;
  v18 = v19;
  outlined retain of ToggleLineEndsButton((uint64_t)v19);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>> and conformance <> ModifiedContent<A, B>();
  Button.init(action:label:)();
  PlainButtonStyle.init()();
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>>, MEMORY[0x1E0CDFA58]);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9F78], MEMORY[0x1E0CD9F68]);
  View.buttonStyle<A>(_:)();
  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v5, v1);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t destroy for ToggleLineEndsButton()
{
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for ToggleLineEndsButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ToggleLineEndsButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_retain();
  swift_release();
  v6 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v7;
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  return a1;
}

__n128 __swift_memcpy90_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for ToggleLineEndsButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToggleLineEndsButton(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 90))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ToggleLineEndsButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 88) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 90) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 90) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ToggleLineEndsButton()
{
  return &type metadata for ToggleLineEndsButton;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, ModifiedContent<VStack<TupleView<(Text, HStack<TupleView<(ToggleLineEndsButton, ToggleLineEndsButton, ToggleLineEndsButton)>>)>>, _PaddingLayout>>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, ModifiedContent<VStack<TupleView<(Text, HStack<TupleView<(ToggleLineEndsButton, ToggleLineEndsButton, ToggleLineEndsButton)>>)>>, _PaddingLayout>>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, ModifiedContent<VStack<TupleView<(Text, HStack<TupleView<(ToggleLineEndsButton, ToggleLineEndsButton, ToggleLineEndsButton)>>)>>, _PaddingLayout>>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, ModifiedContent<VStack<TupleView<(Text, HStack<TupleView<(ToggleLineEndsButton, ToggleLineEndsButton, ToggleLineEndsButton)>>)>>, _PaddingLayout>>, _AlignmentWritingModifier>);
    v2[0] = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type MiniPopoverButton<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, ModifiedContent<VStack<TupleView<(Text, HStack<TupleView<(ToggleLineEndsButton, ToggleLineEndsButton, ToggleLineEndsButton)>>)>>, _PaddingLayout>> and conformance MiniPopoverButton<A, B>, (uint64_t *)&demangling cache variable for type metadata for MiniPopoverButton<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, ModifiedContent<VStack<TupleView<(Text, HStack<TupleView<(ToggleLineEndsButton, ToggleLineEndsButton, ToggleLineEndsButton)>>)>>, _PaddingLayout>>, (uint64_t)&protocol conformance descriptor for MiniPopoverButton<A, B>);
    v2[1] = lazy protocol witness table accessor for type _AlignmentWritingModifier and conformance _AlignmentWritingModifier();
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, ModifiedContent<VStack<TupleView<(Text, HStack<TupleView<(ToggleLineEndsButton, ToggleLineEndsButton, ToggleLineEndsButton)>>)>>, _PaddingLayout>>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ToggleLineEndsButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1DDEC914C()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ToggleLineEndsButton.body.getter()
{
  uint64_t v0;

  return closure #1 in ToggleLineEndsButton.body.getter((_OWORD *)(v0 + 16));
}

uint64_t partial apply for closure #2 in ToggleLineEndsButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #2 in ToggleLineEndsButton.body.getter(*(uint64_t **)(v1 + 16), a1);
}

uint64_t outlined retain of ToggleLineEndsButton(uint64_t a1)
{
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined retain of Binding<Inspected<(CRExtensible<LineEnd>, CRExtensible<LineEnd>)>>(uint64_t a1)
{
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined release of Binding<Inspected<(CRExtensible<LineEnd>, CRExtensible<LineEnd>)>>(uint64_t a1)
{
  swift_release();
  swift_release();
  return a1;
}

uint64_t outlined release of ToggleLineEndsButton(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_1DDEC9280()
{
  uint64_t (*v0)(uint64_t);

  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>>);
  type metadata accessor for PlainButtonStyle();
  v0 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9F78];
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>> and conformance Button<A>, &demangling cache variable for type metadata for Button<ModifiedContent<ModifiedContent<ModifiedContent<Image, _FlexFrameLayout>, _BackgroundStyleModifier<Color>>, _ClipEffect<RoundedCorner>>>, MEMORY[0x1E0CDFA58]);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle, v0, MEMORY[0x1E0CD9F68]);
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for CanvasScribbleDelegate()
{
  return swift_initClassMetadata2();
}

uint64_t specialized Sequence.reversed()(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v1 = a1;
  if ((a1 & 0x8000000000000000) != 0 || (a1 & 0x4000000000000000) != 0)
    goto LABEL_39;
  v2 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v15 = v1 & 0xFFFFFFFFFFFFFF8;
LABEL_4:
  if ((v2 & 0x4000000000000000) == 0)
  {
    v3 = *(_QWORD *)(v2 + 16);
    swift_bridgeObjectRelease();
    v4 = (unint64_t)v3 >> 1;
    goto LABEL_6;
  }
  while (1)
  {
    swift_retain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    swift_release();
    v14 = v3 >= 0 ? v3 : v3 + 1;
    if (v3 < -1)
      __break(1u);
    v4 = v14 >> 1;
LABEL_6:
    if ((unint64_t)(v3 + 1) < 3)
      return v2;
    v5 = 0;
    while (1)
    {
      v6 = v5 + 1;
      v1 = v3 - (v5 + 1);
      if (__OFSUB__(v3, v5 + 1))
        break;
      if (v5 != v1)
      {
        if ((v15 & 0xC000000000000001) != 0)
        {
          v9 = MEMORY[0x1DF0E4D64](v5, v15);
          v10 = (id)MEMORY[0x1DF0E4D64](v3 - (v5 + 1), v15);
        }
        else
        {
          if ((v5 & 0x8000000000000000) != 0)
            goto LABEL_33;
          v7 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v5 >= v7)
            goto LABEL_34;
          v8 = *(id *)(v15 + 8 * v5 + 32);
          if ((v1 & 0x8000000000000000) != 0)
            goto LABEL_35;
          if (v1 >= v7)
            goto LABEL_37;
          v9 = (uint64_t)v8;
          v10 = *(id *)(v15 + 32 + 8 * v1);
        }
        v11 = v10;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || v15 < 0
          || (v15 & 0x4000000000000000) != 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew()(v15);
        }
        v12 = (v15 & 0xFFFFFFFFFFFFFF8) + 8 * v5;

        *(_QWORD *)(v12 + 32) = v11;
        specialized Array._endMutation()();
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || v15 < 0
          || (v15 & 0x4000000000000000) != 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew()(v15);
        }
        if ((v1 & 0x8000000000000000) != 0)
          goto LABEL_36;
        if (v1 >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_38;

        *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 8 * v1 + 0x20) = v9;
        specialized Array._endMutation()();
      }
      v5 = v6;
      if (v4 == v6)
        return v15;
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    v2 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v1);
    v15 = v2;
    if ((v2 & 0x8000000000000000) == 0)
      goto LABEL_4;
  }
}

uint64_t specialized Sequence.reversed()(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _OWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v1 = (_QWORD *)result;
  v2 = *(_QWORD *)(result + 16);
  if (v2 < 2)
    return (uint64_t)v1;
  v3 = 0;
  v4 = v2 >> 1;
  v5 = v2 - 1;
  v6 = 4 * v2;
  v7 = 7;
  while (1)
  {
    if (v3 == v5)
      goto LABEL_5;
    v10 = v1[2];
    if (v3 >= v10)
      break;
    if (v5 >= v10)
      goto LABEL_12;
    v14 = *(_OWORD *)&v1[v7 - 1];
    v15 = *(_OWORD *)&v1[v7 - 3];
    v11 = v1[v6];
    v13 = *(_OWORD *)&v1[v6 + 1];
    v12 = v1[v6 + 3];
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
      v1 = (_QWORD *)result;
    }
    v8 = &v1[v7];
    *(v8 - 3) = v11;
    *((_OWORD *)v8 - 1) = v13;
    *v8 = v12;
    v9 = &v1[v6];
    *v9 = v15;
    v9[1] = v14;
LABEL_5:
    ++v3;
    v7 += 4;
    --v5;
    v6 -= 4;
    if (v4 == v3)
      return (uint64_t)v1;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

void specialized Sequence.reversed()(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t, __n128);
  unint64_t v18;
  void (*v19)(unint64_t, char *, uint64_t);
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;

  v2 = type metadata accessor for CRKeyPath();
  v23 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8.n128_f64[0] = MEMORY[0x1E0C80A78](v6, v7);
  v22 = (char *)&v20 - v9;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10 < 2)
    return;
  v11 = 0;
  v12 = v10 >> 1;
  v13 = v10 - 1;
  v20 = v10 >> 1;
  while (1)
  {
    if (v11 == v13)
      goto LABEL_4;
    v14 = *(_QWORD *)(a1 + 16);
    if (v11 >= v14)
      break;
    v21 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
    v15 = a1 + v21;
    v16 = *(_QWORD *)(v23 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v23 + 16);
    v17(v22, a1 + v21 + v16 * v11, v2, v8);
    if (v13 >= v14)
      goto LABEL_14;
    ((void (*)(char *, unint64_t, uint64_t))v17)(v5, v15 + v16 * v13, v2);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      a1 = specialized _ArrayBuffer._consumeAndCreateNew()(a1);
    if (v11 >= *(_QWORD *)(a1 + 16))
      goto LABEL_15;
    v18 = a1 + v21;
    v19 = *(void (**)(unint64_t, char *, uint64_t))(v23 + 40);
    v19(a1 + v21 + v16 * v11, v5, v2);
    if (v13 >= *(_QWORD *)(a1 + 16))
      goto LABEL_16;
    v19(v18 + v16 * v13, v22, v2);
    v12 = v20;
LABEL_4:
    ++v11;
    --v13;
    if (v12 == v11)
      return;
  }
  __break(1u);
LABEL_14:
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
}

void CanvasScribbleDelegate.canvas.getter()
{
  JUMPOUT(0x1DF0E666CLL);
}

uint64_t @objc CanvasScribbleDelegate.scribbleInteraction(_:shouldBeginAt:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  LOBYTE(a1) = specialized CanvasScribbleDelegate.scribbleInteraction(_:shouldBeginAt:)();

  return a1 & 1;
}

void CanvasScribbleDelegate.textboxCreatedForScribble.getter()
{
  JUMPOUT(0x1DF0E666CLL);
}

uint64_t CanvasScribbleDelegate.textBoxForScribble(elementIdentifier:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;

  v3 = type metadata accessor for CRKeyPath();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  CRKeyPath.init(_:)();
  v8 = static CRKeyPath.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) == 0)
  {
    v10 = MEMORY[0x1DF0E666C](v1 + direct field offset for CanvasScribbleDelegate.canvas);
    if (v10)
    {
      v11 = (void *)v10;
      v12 = Canvas.editingView.getter();
      v14 = v13;

      ObjectType = swift_getObjectType();
      v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 32))(ObjectType, v14);

      if (*(_QWORD *)(v16 + 16))
      {
        v17 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
        if ((v18 & 1) != 0)
        {
          v19 = *(id *)(*(_QWORD *)(v16 + 56) + 8 * v17);
          v20 = swift_bridgeObjectRelease();
          v9 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v19) + 0x2D0))(v20);

          return v9;
        }
      }
      swift_bridgeObjectRelease();
    }
    return 0;
  }
  return MEMORY[0x1DF0E666C](v1 + direct field offset for CanvasScribbleDelegate.textboxCreatedForScribble);
}

void @objc CanvasScribbleDelegate.init()()
{
  specialized CanvasScribbleDelegate.init()();
}

id CanvasScribbleDelegate.__deallocating_deinit()
{
  _QWORD *v0;
  objc_class *v1;
  objc_super v3;

  v1 = (objc_class *)type metadata accessor for CanvasScribbleDelegate(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60));
  v3.receiver = v0;
  v3.super_class = v1;
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t @objc CanvasScribbleDelegate.__ivar_destroyer()
{
  swift_unknownObjectWeakDestroy();
  return swift_unknownObjectWeakDestroy();
}

uint64_t type metadata accessor for CanvasScribbleDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CanvasScribbleDelegate);
}

uint64_t associated type witness table accessor for UIIndirectScribbleInteractionDelegate.ElementIdentifier : Hashable in CanvasScribbleDelegate<A>()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], MEMORY[0x1E0D12C88]);
}

uint64_t protocol witness for UIIndirectScribbleInteractionDelegate.indirectScribbleInteraction(_:requestElementsIn:completion:) in conformance CanvasScribbleDelegate<A>(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, uint64_t (*a6)(_QWORD), uint64_t a7)
{
  return specialized CanvasScribbleDelegate.indirectScribbleInteraction(_:requestElementsIn:completion:)(a6, a7, a1, a2, a3, a4);
}

uint64_t protocol witness for UIIndirectScribbleInteractionDelegate.indirectScribbleInteraction(_:requestElementsIn:) in conformance CanvasScribbleDelegate<A>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  type metadata accessor for CanvasScribbleDelegate(0, a2[10], a2[11], a2[12]);
  *v4 = v2;
  v4[1] = dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  return UIIndirectScribbleInteractionDelegate.indirectScribbleInteraction(_:requestElementsIn:)();
}

uint64_t protocol witness for UIIndirectScribbleInteractionDelegate.indirectScribbleInteraction(_:isElementFocused:) in conformance CanvasScribbleDelegate<A>(uint64_t a1, uint64_t a2)
{
  return specialized CanvasScribbleDelegate.indirectScribbleInteraction(_:isElementFocused:)(a2);
}

double protocol witness for UIIndirectScribbleInteractionDelegate.indirectScribbleInteraction(_:frameForElement:) in conformance CanvasScribbleDelegate<A>(uint64_t a1, uint64_t a2)
{
  return specialized CanvasScribbleDelegate.indirectScribbleInteraction(_:frameForElement:)(a2);
}

void protocol witness for UIIndirectScribbleInteractionDelegate.indirectScribbleInteraction(_:focusElementIfNeeded:referencePoint:completion:) in conformance CanvasScribbleDelegate<A>(CGFloat a1, CGFloat a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  specialized CanvasScribbleDelegate.indirectScribbleInteraction(_:focusElementIfNeeded:referencePoint:completion:)(a4, a5, a6, a1, a2);
}

uint64_t protocol witness for UIIndirectScribbleInteractionDelegate.indirectScribbleInteraction(_:focusElementIfNeeded:referencePoint:) in conformance CanvasScribbleDelegate<A>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v5;
  type metadata accessor for CanvasScribbleDelegate(0, a3[10], a3[11], a3[12]);
  *v5 = v3;
  v5[1] = protocol witness for PaperRenderable.renderedImage(in:) in conformance Image;
  return UIIndirectScribbleInteractionDelegate.indirectScribbleInteraction(_:focusElementIfNeeded:referencePoint:)();
}

uint64_t protocol witness for UIIndirectScribbleInteractionDelegate.indirectScribbleInteraction(_:shouldDelayFocusForElement:) in conformance CanvasScribbleDelegate<A>()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;
  uint64_t v7;

  v0 = type metadata accessor for CRKeyPath();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  CRKeyPath.init(_:)();
  v5 = static CRKeyPath.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return v5 & 1;
}

void protocol witness for UIIndirectScribbleInteractionDelegate.indirectScribbleInteraction(_:willBeginWritingInElement:) in conformance CanvasScribbleDelegate<A>(uint64_t a1, uint64_t a2)
{
  specialized CanvasScribbleDelegate.indirectScribbleInteraction(_:willBeginWritingInElement:)(a2);
}

void protocol witness for UIIndirectScribbleInteractionDelegate.indirectScribbleInteraction(_:didFinishWritingInElement:) in conformance CanvasScribbleDelegate<A>(uint64_t a1, uint64_t a2)
{
  specialized CanvasScribbleDelegate.indirectScribbleInteraction(_:didFinishWritingInElement:)(a2);
}

id specialized CanvasScribbleDelegate.init(canvas:)()
{
  _QWORD *v0;
  uint64_t *v1;
  objc_class *v2;
  objc_super v4;

  v1 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *v0);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  v2 = (objc_class *)type metadata accessor for CanvasScribbleDelegate(0, v1[10], v1[11], v1[12]);
  v4.receiver = v0;
  v4.super_class = v2;
  return objc_msgSendSuper2(&v4, sel_init);
}

id specialized CanvasScribbleDelegate.__allocating_init(canvas:)()
{
  uint64_t *v0;
  id v1;

  v1 = objc_allocWithZone((Class)type metadata accessor for CanvasScribbleDelegate(0, v0[10], v0[11], v0[12]));
  return specialized CanvasScribbleDelegate.init(canvas:)();
}

uint64_t specialized CanvasScribbleDelegate.scribbleInteraction(_:shouldBeginAt:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  void *v12;
  objc_class *v13;
  Class isa;
  id v15;
  uint64_t v16;
  objc_class *v17;
  uint64_t v19;

  v1 = type metadata accessor for PKInk();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKInk?);
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)MEMORY[0x1DF0E666C](v0 + direct field offset for CanvasScribbleDelegate.canvas, v8);
  if (!v11)
    return 0;
  v12 = v11;
  v13 = (objc_class *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v11) + 0x320))();
  isa = v13;
  if (v13)
  {
    v15 = -[objc_class ink](v13, "ink");

    static PKInk._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v10, v5, v1);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v2 + 56))(v10, 0, 1, v1);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v10, 1, v1) == 1)
    {
      isa = 0;
    }
    else
    {
      isa = PKInk._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v10, v1);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56))(v10, 1, 1, v1);
  }
  v17 = isa;
  v16 = -[objc_class _isHandwritingInk](v17, "_isHandwritingInk");

  return v16;
}

uint64_t specialized CanvasScribbleDelegate.indirectScribbleInteraction(_:requestElementsIn:completion:)(uint64_t (*a1)(_QWORD), uint64_t a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  id v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t ObjectType;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  __objc2_prot_list **p_base_prots;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  void *v64;
  void *v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  id v74;
  double v75;
  CGFloat v76;
  double v77;
  CGFloat v78;
  double v79;
  CGFloat v80;
  double v81;
  CGFloat v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  void (*v87)(void);
  char *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t (*v103)(_QWORD);
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  char *v111;
  unint64_t v112;
  CGRect v113;
  CGRect v114;

  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v107 = *(_QWORD *)(v13 - 8);
  v108 = v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v106 = (char *)&v102 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (uint64_t *)((char *)&v102 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = type metadata accessor for CRKeyPath();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v104 = (char *)&v102 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v111 = (char *)&v102 - v26;
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (uint64_t)&v102 - v29;
  v33 = MEMORY[0x1E0C80A78](v31, v32);
  v35 = (uint64_t)&v102 - v34;
  v36 = (void *)MEMORY[0x1DF0E666C](v6 + direct field offset for CanvasScribbleDelegate.canvas, v33);
  if (!v36)
    return a1(MEMORY[0x1E0DEE9D8]);
  v37 = v36;
  AnyCanvas.selectedCanvasElementIds.getter();
  v39 = v38;

  v40 = *(_QWORD *)(v39 + 16);
  swift_bridgeObjectRelease();
  v109 = v21;
  v110 = v37;
  if (v40 != 1)
  {
LABEL_17:
    v51 = Canvas.editingView.getter();
    v53 = v52;
    ObjectType = swift_getObjectType();
    v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 64))(ObjectType, v53);

    if ((unint64_t)v35 >> 62)
    {
      if (v35 < 0)
        v51 = (_QWORD *)v35;
      else
        v51 = (_QWORD *)(v35 & 0xFFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain();
      v30 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v30)
        goto LABEL_19;
    }
    else
    {
      v56 = v35 & 0xFFFFFFFFFFFFF8;
      v30 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v30)
      {
LABEL_19:
        if (v30 >= 1)
        {
          v105 = v20;
          v102 = a2;
          v103 = a1;
          v57 = 0;
          v58 = v35 & 0xC000000000000001;
          v112 = MEMORY[0x1E0DEE9D8];
          v59 = (_QWORD *)MEMORY[0x1E0DEEDD8];
          p_base_prots = (__objc2_prot_list **)(&MiniMenuController + 40);
          do
          {
            if (v58)
              v62 = (_QWORD *)MEMORY[0x1DF0E4D64](v57, v35);
            else
              v62 = *(id *)(v35 + 8 * v57 + 32);
            v63 = v62;
            v64 = (void *)(*(uint64_t (**)(void))((*v59 & *v62) + 0x2D0))();
            if (v64)
            {
              v65 = v64;
              objc_msgSend(v64, (SEL)p_base_prots[277]);
              v67 = v66;
              v69 = v68;
              v71 = v70;
              v73 = v72;
              v74 = Canvas.editingView.getter();
              objc_msgSend(v65, sel_convertRect_toCoordinateSpace_, v74, v67, v69, v71, v73);
              v76 = v75;
              v78 = v77;
              v80 = v79;
              v82 = v81;

              v113.origin.x = v76;
              v113.origin.y = v78;
              v113.size.width = v80;
              v113.size.height = v82;
              v114.origin.x = a3;
              v114.origin.y = a4;
              v114.size.width = a5;
              v114.size.height = a6;
              if (CGRectIntersectsRect(v113, v114))
              {
                v83 = v30;
                v84 = v58;
                v85 = v35;
                v86 = v59;
                v87 = *(void (**)(void))((*v59 & *v63) + 0xE8);
                v88 = v106;
                v87();
                v89 = v108;
                MEMORY[0x1DF0E3408](v108);
                (*(void (**)(char *, uint64_t))(v107 + 8))(v88, v89);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                  v90 = v112;
                else
                  v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v112 + 16) + 1, 1, v112);
                v92 = *(_QWORD *)(v90 + 16);
                v91 = *(_QWORD *)(v90 + 24);
                v59 = v86;
                if (v92 >= v91 >> 1)
                  v90 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v91 > 1, v92 + 1, 1, v90);
                v35 = v85;
                *(_QWORD *)(v90 + 16) = v92 + 1;
                v61 = (*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80);
                v112 = v90;
                (*(void (**)(unint64_t, char *, uint64_t))(v109 + 32))(v90 + v61 + *(_QWORD *)(v109 + 72) * v92, v111, v105);
                v58 = v84;
                v30 = v83;
                p_base_prots = &MiniMenuController.base_prots;
              }

            }
            ++v57;

          }
          while (v30 != v57);
          swift_bridgeObjectRelease();
          a1 = v103;
          v20 = v105;
          v93 = v112;
          goto LABEL_42;
        }
        __break(1u);
        goto LABEL_49;
      }
    }
    swift_bridgeObjectRelease();
    v93 = MEMORY[0x1E0DEE9D8];
    goto LABEL_42;
  }
  v41 = v37;
  AnyCanvas.selectedCanvasElementIds.getter();
  v40 = v42;

  if (*(_QWORD *)(v40 + 16))
  {
    (*(void (**)(_QWORD *, unint64_t, uint64_t))(v21 + 16))(v19, v40 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80)), v20);
    v43 = 0;
  }
  else
  {
    v43 = 1;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, v43, 1, v20);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    outlined destroy of CRKeyPath?((uint64_t)v19);
    goto LABEL_17;
  }
  v39 = *(_QWORD *)(v21 + 32);
  ((void (*)(uint64_t, _QWORD *, uint64_t))v39)(v35, v19, v20);
  v19 = Canvas.editingView.getter();
  v40 = v45;
  v46 = swift_getObjectType();
  v47 = (*(uint64_t (**)(uint64_t, unint64_t))(v40 + 32))(v46, v40);

  if (!*(_QWORD *)(v47 + 16) || (v48 = specialized __RawDictionaryStorage.find<A>(_:)(v35), (v49 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  v19 = *(id *)(*(_QWORD *)(v47 + 56) + 8 * v48);
  v50 = swift_bridgeObjectRelease();
  v40 = MEMORY[0x1E0DEEDD8];
  v51 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v19) + 0x2D0))(v50);

  if (!v51)
  {
LABEL_16:
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v35, v20);
    goto LABEL_17;
  }
  if (((*(uint64_t (**)(void))((*(_QWORD *)v40 & *v51) + 0x98))() & 1) == 0
    || ((*(uint64_t (**)(void))((*(_QWORD *)v40 & *v51) + 0xA0))() & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v35, v20);

    goto LABEL_17;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v30, v35, v20);
  v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v40 = *(_QWORD *)(v55 + 16);
  v56 = *(_QWORD *)(v55 + 24);
  v19 = (_QWORD *)(v40 + 1);
  if (v40 >= v56 >> 1)
LABEL_49:
    v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, (int64_t)v19, 1, v55);
  *(_QWORD *)(v55 + 16) = v19;
  v94 = v109;
  v95 = v55
      + ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80))
      + *(_QWORD *)(v109 + 72) * v40;
  v93 = v55;
  ((void (*)(unint64_t, uint64_t, uint64_t))v39)(v95, v30, v20);

  (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v35, v20);
LABEL_42:
  v96 = v104;
  CRKeyPath.init(_:)();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    v97 = v93;
  else
    v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v93 + 16) + 1, 1, v93);
  v99 = *(_QWORD *)(v97 + 16);
  v98 = *(_QWORD *)(v97 + 24);
  if (v99 >= v98 >> 1)
    v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v98 > 1, v99 + 1, 1, v97);
  *(_QWORD *)(v97 + 16) = v99 + 1;
  v100 = v97;
  (*(void (**)(unint64_t, char *, uint64_t))(v109 + 32))(v97+ ((*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80))+ *(_QWORD *)(v109 + 72) * v99, v96, v20);
  specialized Sequence.reversed()(v100);

  v101 = swift_bridgeObjectRetain();
  a1(v101);
  return swift_bridgeObjectRelease_n();
}

double specialized CanvasScribbleDelegate.indirectScribbleInteraction(_:frameForElement:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  void *v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  double v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  id v34;
  id v35;
  double *v36;
  double v38;
  id v39;
  double v40;
  uint64_t v41;

  v3 = type metadata accessor for CRKeyPath();
  v4 = *(_QWORD *)(v3 - 8);
  v6 = MEMORY[0x1E0C80A78](v3, v5);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1DF0E666C](v1 + direct field offset for CanvasScribbleDelegate.canvas, v6);
  v10 = 0.0;
  if (v9)
  {
    v11 = (void *)v9;
    CRKeyPath.init(_:)();
    v12 = static CRKeyPath.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
    v13 = Canvas.editingView.getter();
    v15 = v13;
    if ((v12 & 1) != 0)
    {
      objc_msgSend(v13, sel_bounds);
      v10 = v16;

    }
    else
    {
      v17 = v14;
      ObjectType = swift_getObjectType();
      v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 32))(ObjectType, v17);

      if (!*(_QWORD *)(v19 + 16) || (v20 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v21 & 1) == 0))
      {

        swift_bridgeObjectRelease();
        return v10;
      }
      v22 = *(id *)(*(_QWORD *)(v19 + 56) + 8 * v20);
      v23 = swift_bridgeObjectRelease();
      v24 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v25 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v22) + 0x2D0))(v23);
      if (!v25)
      {

        return v10;
      }
      v15 = v25;
      if (((*(uint64_t (**)(void))((*v24 & *v25) + 0x98))() & 1) != 0
        && ((*(uint64_t (**)(void))((*v24 & *v15) + 0xA0))() & 1) == 0)
      {
        v39 = Canvas.editingView.getter();
        objc_msgSend(v39, sel_bounds);
        v10 = v40;

        return v10;
      }
      objc_msgSend(v22, sel_bounds);
      v27 = v26;
      v29 = v28;
      v31 = v30;
      v33 = v32;
      v34 = objc_msgSend(v11, sel_traitCollection);
      v35 = objc_msgSend(v34, sel_layoutDirection);

      if (v35 == (id)1)
      {
        if (one-time initialization token for scribbleHitToleranceInsetsRTL != -1)
          swift_once();
        v36 = (double *)&static UIConstants.scribbleHitToleranceInsetsRTL;
      }
      else
      {
        if (one-time initialization token for scribbleHitToleranceInsetsLTR != -1)
          swift_once();
        v36 = (double *)&static UIConstants.scribbleHitToleranceInsetsLTR;
      }
      objc_msgSend(v11, sel_convertRect_fromCoordinateSpace_, v22, UIEdgeInsetsInsetRect(v27, v29, v31, v33, *v36, v36[1]));
      v10 = v38;

    }
  }
  return v10;
}

uint64_t specialized CanvasScribbleDelegate.indirectScribbleInteraction(_:isElementFocused:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  char v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  unint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  uint64_t v23;

  v3 = type metadata accessor for CRKeyPath();
  v4 = *(_QWORD *)(v3 - 8);
  v6 = MEMORY[0x1E0C80A78](v3, v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1DF0E666C](v1 + direct field offset for CanvasScribbleDelegate.canvas, v6);
  if (!v9)
    goto LABEL_8;
  v10 = (void *)v9;
  CRKeyPath.init(_:)();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], MEMORY[0x1E0D12C90]);
  v11 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
  if ((v11 & 1) != 0)
  {

LABEL_8:
    v21 = 0;
    return v21 & 1;
  }
  v12 = Canvas.editingView.getter();
  v14 = v13;
  ObjectType = swift_getObjectType();
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 32))(ObjectType, v14);

  if (!*(_QWORD *)(v16 + 16) || (v17 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v18 & 1) == 0))
  {

    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v19 = *(id *)(*(_QWORD *)(v16 + 56) + 8 * v17);
  v20 = swift_bridgeObjectRelease();
  v21 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v19) + 0x100))(v20);

  return v21 & 1;
}

void specialized CanvasScribbleDelegate.indirectScribbleInteraction(_:focusElementIfNeeded:referencePoint:completion:)(uint64_t a1, void (*a2)(void), uint64_t a3, CGFloat a4, CGFloat a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  void (*v39)(char *, uint64_t);
  void (*v40)(void);
  _QWORD *v41;
  uint64_t (*v42)(void);
  _QWORD *v43;
  void *v44;
  void *v45;
  double v46;
  double v47;
  void (*v48)(_QWORD *__return_ptr);
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  CGPoint v54;
  _QWORD *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  double v59;
  double v60;
  double a;
  double b;
  double v63;
  id v64;
  void *v65;
  Class isa;
  id v67;
  char *v68;
  CGColorSpace *v69;
  CGColorSpace *v70;
  CGColorRef v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t ObjectType;
  uint64_t v86;
  unint64_t v87;
  char v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  void *v94;
  id v95;
  _QWORD *v96;
  id v97;
  uint64_t v98;
  int64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  char v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t);
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(void);
  uint64_t v129;
  uint64_t v130;
  CGColorRef v131[5];
  CGFloat v132[4];
  _QWORD v133[7];
  _QWORD v134[7];
  CGAffineTransform v135;
  char v136;
  _QWORD v137[6];
  char v138;
  CGPoint v139;

  v127 = a3;
  v128 = a2;
  v124 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v9 = *(_QWORD *)(v124 - 8);
  MEMORY[0x1E0C80A78](v124, v10);
  v12 = (char *)&v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v119 = (char *)&v108 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  MEMORY[0x1E0C80A78](v16, v17);
  v125 = (char *)&v108 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = type metadata accessor for Shape();
  MEMORY[0x1E0C80A78](v121, v19);
  v118 = (uint64_t)&v108 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v123 = (uint64_t)&v108 - v23;
  v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v120 = *(_QWORD *)(v122 - 8);
  MEMORY[0x1E0C80A78](v122, v24);
  v126 = (uint64_t)&v108 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for CRKeyPath();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v28);
  v30 = (char *)&v108 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x1E0C80A78](v31, v32);
  v35 = (char *)&v108 - v34;
  v117 = v5;
  v36 = MEMORY[0x1DF0E666C](v5 + direct field offset for CanvasScribbleDelegate.canvas, v33);
  if (!v36)
  {
    v128();
    return;
  }
  v37 = (_QWORD *)v36;
  v114 = v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v35, a1, v26);
  CRKeyPath.init(_:)();
  v38 = static CRKeyPath.== infix(_:_:)();
  v113 = v27;
  v39 = *(void (**)(char *, uint64_t))(v27 + 8);
  v115 = v30;
  v39(v30, v26);
  v40 = v128;
  if ((v38 & 1) == 0)
  {
LABEL_20:
    v82 = Canvas.editingView.getter();
    v84 = v83;
    ObjectType = swift_getObjectType();
    v86 = (*(uint64_t (**)(uint64_t, uint64_t))(v84 + 32))(ObjectType, v84);

    if (*(_QWORD *)(v86 + 16) && (v87 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v35), (v88 & 1) != 0))
    {
      v116 = v37;
      v89 = *(id *)(*(_QWORD *)(v86 + 56) + 8 * v87);
      v90 = swift_bridgeObjectRelease();
      v91 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v92 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v89) + 0x2D0))(v90);
      if (v92)
      {
        v93 = v92;
        (*(void (**)(_QWORD))((*v91 & *v92) + 0x128))(0);
        (*(void (**)(uint64_t))((*v91 & *v93) + 0xC8))(1);
        swift_unknownObjectWeakAssign();
        v94 = *(void **)((char *)v93 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
        v95 = v116;
        v96 = v89;
        v97 = v94;
        v98 = specialized CanvasMembers.init(_:)(v96);
        v111 = v35;
        v112 = v26;
        v110 = v39;
        v99 = v98;
        v101 = v100;
        v103 = v102;
        v105 = v104;

        v106 = v101;
        v40 = v128;
        AnyCanvas.selection.setter(v99, v106, v103, v105 & 1);

        v110(v111, v112);
LABEL_26:
        v107 = v94;
        ((void (*)(void *))v40)(v94);

        return;
      }
      v39(v35, v26);

    }
    else
    {
      swift_bridgeObjectRelease();
      v39(v35, v26);

    }
    v94 = 0;
    goto LABEL_26;
  }
  v109 = v9;
  v41 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v42 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v37) + 0x308);
  v116 = v37;
  v43 = v37;
  v44 = (void *)v42();
  if (v44)
  {
    v45 = v44;
    objc_msgSend(v44, sel_zoomScale);
    v47 = v46;

  }
  else
  {
    v47 = 1.0;
  }
  v48 = *(void (**)(_QWORD *__return_ptr))((*v41 & *v43) + 0x5B8);
  v48(v133);
  outlined init with take of CGAffineTransform?((uint64_t)v133, (uint64_t)v137);
  if ((v138 & 1) != 0)
  {

    v49 = 1.0;
  }
  else
  {
    v50 = *(double *)v137;
    v51 = *(double *)&v137[1];

    v49 = sqrt(v50 * v50 + v51 * v51);
  }
  v110 = v39;
  v111 = v35;
  v112 = v26;
  v52 = v47 * v49;
  v53 = 1.0;
  CGAffineTransformMakeScale(&v135, 1.0 / v52, 1.0 / v52);
  v139.x = a4;
  v139.y = a5;
  v54 = CGPointApplyAffineTransform(v139, &v135);
  if (one-time initialization token for defaultTextBoxAttributes != -1)
    swift_once();
  v55 = v43;
  v56 = swift_bridgeObjectRetain();
  v57 = (void *)((uint64_t (*)(uint64_t))v42)(v56);
  if (v57)
  {
    v58 = v57;
    objc_msgSend(v57, sel_zoomScale);
    v53 = v59;

  }
  v48(v134);
  outlined init with take of CGAffineTransform?((uint64_t)v134, (uint64_t)&v135);
  if ((v136 & 1) != 0)
  {

    v60 = 1.0;
  }
  else
  {
    a = v135.a;
    b = v135.b;

    v60 = sqrt(a * a + b * b);
  }
  v63 = 1.0 / (v53 * v60);
  v64 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
  v65 = (void *)MEMORY[0x1DF0E41AC](32, 0xE100000000000000);
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v67 = objc_msgSend(v64, sel_initWithString_attributes_, v65, isa);

  CRAttributedString<>.init(nsAttributedString:scale:)(v67, v126, v63);
  lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
  lazy protocol witness table accessor for type Line and conformance Line();
  lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
  lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
  lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
  lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
  lazy protocol witness table accessor for type Star and conformance Star();
  lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
  v68 = v125;
  TaggedValue_9.init(_:)();
  memset(v132, 0, sizeof(v132));
  v69 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D960]);
  if (v69)
  {
    v70 = v69;
    v71 = CGColorCreate(v69, v132);

    v72 = v115;
    v37 = v116;
    if (v71)
    {
      v130 = 0;
      v131[0] = v71;
      v73 = (uint64_t)v119;
      v74 = v120;
      v75 = v122;
      (*(void (**)(char *, uint64_t, uint64_t))(v120 + 16))(v119, v126, v122);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v74 + 56))(v73, 0, 1, v75);
      v129 = 3;
      v76 = v123;
      Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v68, (uint64_t *)v131, &v130, v73, &v129, v123, v54.x + -0.5, v54.y + -0.5, 1.0, 1.0, 5.0);
      outlined init with copy of Shape(v76, v118);
      static CRKeyPath.unique.getter();
      v77 = (char *)lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
      v78 = v72;
      v79 = (uint64_t)v114;
      v80 = v121;
      Capsule<>.init(_:id:)();
      Canvas.addCanvasElement<A>(_:setSelected:dragItem:harmonize:)(v79, 0, 0, 0, v80, v77, (char *)&protocol witness table for Shape);
      v81 = v124;
      Capsule<>.rootID.getter();
      (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v79, v81);
      outlined destroy of Shape(v76);
      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v126, v75);
      v35 = v111;
      v26 = v112;
      v39 = v110;
      v110(v111, v112);
      (*(void (**)(char *, char *, uint64_t))(v113 + 32))(v35, v78, v26);
      v40 = v128;
      goto LABEL_20;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void specialized CanvasScribbleDelegate.indirectScribbleInteraction(_:willBeginWritingInElement:)(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v3;
  _QWORD *v4;
  id v5;

  v3 = (_BYTE *)MEMORY[0x1DF0E666C](v1 + direct field offset for CanvasScribbleDelegate.canvas);
  if (v3)
  {
    v3[OBJC_IVAR____TtC8PaperKit9AnyCanvas_isScribbling] = 1;

  }
  v4 = (_QWORD *)CanvasScribbleDelegate.textBoxForScribble(elementIdentifier:)(a1);
  if (v4)
  {
    v5 = v4;
    (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v4) + 0xC8))(1);

  }
}

void specialized CanvasScribbleDelegate.indirectScribbleInteraction(_:didFinishWritingInElement:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _BYTE *v15;
  void *v16;
  _QWORD *v17;

  v2 = v1;
  v4 = (_BYTE *)MEMORY[0x1DF0E666C](v2 + direct field offset for CanvasScribbleDelegate.canvas);
  if (v4)
  {
    v4[OBJC_IVAR____TtC8PaperKit9AnyCanvas_isScribbling] = 0;

  }
  v5 = (_QWORD *)CanvasScribbleDelegate.textBoxForScribble(elementIdentifier:)(a1);
  if (v5)
  {
    v6 = v5;
    (*(void (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & *v5) + 0xC8))(0);

  }
  swift_unknownObjectWeakAssign();
  v7 = MEMORY[0x1DF0E666C](v2 + direct field offset for CanvasScribbleDelegate.canvas);
  if (v7)
  {
    v8 = (void *)v7;
    v9 = *(_BYTE **)(v7 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    if (v9)
    {
      v10 = MEMORY[0x1DF0E666C](&v9[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
      if (v10)
      {
        v17 = (_QWORD *)v10;
        if (*(_QWORD *)&v9[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_miniMenuController])
        {
          v11 = *(_QWORD *)&v9[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
          v12 = *(_QWORD *)&v9[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
          v13 = *(_QWORD *)&v9[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
          v14 = v9[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
          v15 = v9;
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          MiniMenuState.update(from:in:)(v11, v12, v13, v14, v17);

          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {

        }
        v16 = v17;
      }
      else
      {
        v16 = v8;
      }

    }
    else
    {
      __break(1u);
    }
  }
}

void specialized CanvasScribbleDelegate.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id StandinGraphView.init(frame:)(double a1, double a2, double a3, double a4)
{
  _BYTE *v4;
  _OWORD *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  objc_super v16;

  *(_QWORD *)&v4[OBJC_IVAR____TtC8PaperKit16StandinGraphView_label] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC8PaperKit16StandinGraphView_expressions] = MEMORY[0x1E0DEE9D8];
  v9 = &v4[OBJC_IVAR____TtC8PaperKit16StandinGraphView_range];
  *v9 = 0u;
  v9[1] = 0u;
  v4[OBJC_IVAR____TtC8PaperKit16StandinGraphView_isSelected] = 0;
  v16.receiver = v4;
  v16.super_class = (Class)type metadata accessor for StandinGraphView();
  v10 = objc_msgSendSuper2(&v16, sel_initWithFrame_, a1, a2, a3, a4);
  v11 = (void *)objc_opt_self();
  v12 = v10;
  v13 = objc_msgSend(v11, sel_redColor);
  objc_msgSend(v12, sel_setBackgroundColor_, v13);

  v14 = objc_msgSend(v12, sel_layer);
  if (one-time initialization token for resizeCornerRadius != -1)
    swift_once();
  objc_msgSend(v14, sel_setCornerRadius_, *(double *)&static UIConstants.resizeCornerRadius);

  return v12;
}

Swift::Void __swiftcall StandinGraphView.layoutSubviews()()
{
  char *v0;
  void *v1;
  id v2;
  double v3;
  double v4;
  double v5;
  double v6;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MidX;
  objc_super v12;
  CGRect v13;
  CGRect v14;

  v12.receiver = v0;
  v12.super_class = (Class)type metadata accessor for StandinGraphView();
  objc_msgSendSuper2(&v12, sel_layoutSubviews);
  v1 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit16StandinGraphView_label];
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v2, sel_intrinsicContentSize);
    v4 = v3;
    v6 = v5;
    objc_msgSend(v0, sel_bounds);
    x = v13.origin.x;
    y = v13.origin.y;
    width = v13.size.width;
    height = v13.size.height;
    MidX = CGRectGetMidX(v13);
    v14.origin.x = x;
    v14.origin.y = y;
    v14.size.width = width;
    v14.size.height = height;
    objc_msgSend(v2, sel_setFrame_, MidX - v4 * 0.5, CGRectGetMidY(v14) - v6 * 0.5, v4, v6);

  }
}

id StandinGraphView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StandinGraphView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for StandinGraphView()
{
  return objc_opt_self();
}

void PaperDocumentPageView.ScrollViewObserver.attachment.getter()
{
  JUMPOUT(0x1DF0E666CLL);
}

double PaperDocumentPageView.ScrollViewObserver.lastZoomScale.getter()
{
  uint64_t v0;

  return *(double *)(v0 + direct field offset for PaperDocumentPageView.ScrollViewObserver.lastZoomScale);
}

void PaperDocumentPageView.ScrollViewObserver.lastZoomScale.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + direct field offset for PaperDocumentPageView.ScrollViewObserver.lastZoomScale) = a1;
}

Swift::Void __swiftcall PaperDocumentPageView.ScrollViewObserver._observeScrollViewDidScroll(_:)(UIScrollView *a1)
{
  uint64_t v1;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;

  -[UIScrollView zoomScale](a1, sel_zoomScale);
  v4 = v3;
  v5 = *(double *)(v1 + direct field offset for PaperDocumentPageView.ScrollViewObserver.lastZoomScale);
  v6 = MEMORY[0x1DF0E666C](v1 + direct field offset for PaperDocumentPageView.ScrollViewObserver.attachment);
  if (v4 == v5)
  {
    if (v6)
    {
      v8 = (id)v6;
      specialized PaperDocumentPageView.didScroll(in:)();

    }
  }
  else
  {
    if (v6)
    {
      v9 = (id)v6;
      specialized PaperDocumentPageView.didZoom(in:)();

    }
    -[UIScrollView zoomScale](a1, sel_zoomScale);
    *(_QWORD *)(v1 + direct field offset for PaperDocumentPageView.ScrollViewObserver.lastZoomScale) = v7;
  }
}

void @objc PaperDocumentPageView.ScrollViewObserver._observeScrollViewDidScroll(_:)(void *a1, uint64_t a2, void *a3)
{
  UIScrollView *v4;
  id v5;

  v4 = a3;
  v5 = a1;
  PaperDocumentPageView.ScrollViewObserver._observeScrollViewDidScroll(_:)(v4);

}

id PaperDocumentPageView.ScrollViewObserver.init()()
{
  _QWORD *v0;
  uint64_t *v1;
  objc_class *v2;
  objc_super v4;

  v1 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *v0);
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v0 + direct field offset for PaperDocumentPageView.ScrollViewObserver.lastZoomScale) = 0;
  v2 = (objc_class *)type metadata accessor for PaperDocumentPageView.ScrollViewObserver(0, v1[10], v1[11], v1[12]);
  v4.receiver = v0;
  v4.super_class = v2;
  return objc_msgSendSuper2(&v4, sel_init);
}

id @objc PaperDocumentPageView.ScrollViewObserver.init()()
{
  return PaperDocumentPageView.ScrollViewObserver.init()();
}

id PaperDocumentPageView.ScrollViewObserver.__deallocating_deinit()
{
  _QWORD *v0;
  objc_class *v1;
  objc_super v3;

  v1 = (objc_class *)type metadata accessor for PaperDocumentPageView.ScrollViewObserver(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x58), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60));
  v3.receiver = v0;
  v3.super_class = v1;
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t @objc PaperDocumentPageView.ScrollViewObserver.__ivar_destroyer()
{
  return swift_unknownObjectWeakDestroy();
}

void PaperDocumentPageView._scrollView.getter()
{
  JUMPOUT(0x1DF0E666CLL);
}

void PaperDocumentPageView._tiledView.getter()
{
  JUMPOUT(0x1DF0E666CLL);
}

void PaperDocumentPageView._pdfPage.getter()
{
  JUMPOUT(0x1DF0E666CLL);
}

void PaperDocumentPageView.overlayView.didset(void *a1)
{
  char *v1;
  void *v2;
  id v3;

  objc_msgSend(a1, sel_removeFromSuperview);
  v2 = *(void **)&v1[direct field offset for PaperDocumentPageView.overlayView];
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v1, sel_addSubview_, v3);
    objc_msgSend(v1, sel_setNeedsLayout);

  }
}

void PaperDocumentPageView.overlayView.setter(void *a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + direct field offset for PaperDocumentPageView.overlayView);
  *(_QWORD *)(v1 + direct field offset for PaperDocumentPageView.overlayView) = a1;
  v3 = a1;
  PaperDocumentPageView.overlayView.didset(v2);

}

void PaperDocumentPageView.documentView.getter()
{
  JUMPOUT(0x1DF0E666CLL);
}

uint64_t PaperDocumentPageView.sharedPaperPage.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t result;
  _BYTE v8[16];

  v0 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v0, v1);
  v2 = type metadata accessor for Capsule();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = &v8[-v5];
  type metadata accessor for Paper();
  if (swift_dynamicCastMetatype())
  {
    v8[13] = 0;
    Canvas.updatablePaper2.getter((uint64_t)v6);
    Capsule<>.rootID.getter();
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v6, v2);
    lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
    return SharedTagged_3.init(_:id:)();
  }
  type metadata accessor for Image();
  if (swift_dynamicCastMetatype())
  {
    v8[14] = 1;
    Canvas.updatablePaper2.getter((uint64_t)v6);
    Capsule<>.rootID.getter();
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v6, v2);
    lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
    return SharedTagged_3.init(_:id:)();
  }
  type metadata accessor for PaperDocumentPage();
  if (swift_dynamicCastMetatype())
  {
    v8[15] = 2;
    Canvas.updatablePaper2.getter((uint64_t)v6);
    Capsule<>.rootID.getter();
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v6, v2);
    lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
    return SharedTagged_3.init(_:id:)();
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t PaperDocumentPageView.canvasUUID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v5 = MEMORY[0x1E0C80A78](v3, v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1DF0E666C](v1 + direct field offset for PaperDocumentPageView.documentView, v5);
  if (v8)
  {
    v9 = (void *)v8;
    v10 = v8 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewUUID;
    v11 = type metadata accessor for UUID();
    v12 = *(_QWORD *)(v11 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v7, v10, v11);

    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v7, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v7, 1, v11) != 1)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a1, v7, v11);
  }
  else
  {
    v11 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v7, 1, 1, v11);
  }
  v14 = v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas__canvasUUID;
  type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, v14, v11);
  return outlined destroy of UUID?((uint64_t)v7);
}

void PaperDocumentPageView.canvasStateLiveStreamMessenger.didset()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  unsigned __int8 *v3;
  void *v4;
  void *v5;
  id v6;

  v1 = Canvas.canvasStateLiveStreamMessenger.getter();
  if (v1)
    swift_unknownObjectRelease();
  v2 = v1 != 0;
  v3 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings);
  swift_beginAccess();
  *v3 = v2;
  v4 = (void *)MEMORY[0x1DF0E666C](v0 + direct field offset for PaperDocumentPageView._tiledView);
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, sel_canvasView);

    if (v6)
    {
      objc_msgSend(v6, sel_setGenerateLiveDrawing_, *v3);

    }
  }
}

uint64_t PaperDocumentPageView.canvasStateLiveStreamMessenger.setter(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentPageView.canvasStateLiveStreamMessenger.setter(a1, a2);
  return swift_unknownObjectRelease();
}

void PaperDocumentPageView.editingMode.setter(unsigned __int8 *a1)
{
  unsigned __int8 v1;

  v1 = *a1;
  Canvas.editingMode.setter(&v1);
  PaperDocumentPageView.updateToolPicker()();
}

void (*PaperDocumentPageView.editingMode.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = Canvas.editingMode.modify(v3);
  return PaperDocumentPageView.editingMode.modify;
}

void PaperDocumentPageView.editingMode.modify(_QWORD *a1, char a2)
{
  void *v3;

  v3 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  if ((a2 & 1) == 0)
    PaperDocumentPageView.updateToolPicker()();
  free(v3);
}

uint64_t PaperDocumentPageView.scrollViewForAvoidingKeyboard.getter()
{
  uint64_t v0;
  uint64_t result;
  void *v2;
  id v3;

  result = MEMORY[0x1DF0E666C](v0 + direct field offset for PaperDocumentPageView.documentView);
  if (result)
  {
    v2 = (void *)result;
    v3 = PaperDocumentView.scrollViewForAvoidingKeyboard.getter();

    return (uint64_t)v3;
  }
  return result;
}

uint64_t PaperDocumentPageView.pencilKitAttachmentViews()()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v7;
  uint64_t v8;

  v1 = *(void **)(v0 + direct field offset for PaperDocumentPageView.overlayView);
  if (v1)
  {
    v2 = v1;
    v3 = UIView.getPencilKitAttachmentViews()();
    v4 = Canvas.editingView.getter();
    v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x298))();

    specialized Array.append<A>(contentsOf:)(v5);
    return v3;
  }
  else
  {
    v7 = Canvas.editingView.getter();
    v8 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v7) + 0x298))();

    return v8;
  }
}

uint64_t UIView.getPencilKitAttachmentViews()()
{
  void *v0;
  void *v1;
  unsigned __int8 v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (*v8)(void);
  id v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  void *v15;
  unint64_t v16;
  uint64_t v18;

  v1 = v0;
  v2 = objc_msgSend(v0, sel_isHidden);
  v3 = MEMORY[0x1E0DEE9D8];
  if ((v2 & 1) != 0)
    return v3;
  type metadata accessor for AnyCanvas();
  v5 = (_QWORD *)swift_dynamicCastClass();
  if (v5)
  {
    v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v7 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x2F8))();
    v8 = *(uint64_t (**)(void))((*v6 & *v7) + 0x298);
    v9 = v1;
    v10 = v8();

    return v10;
  }
  v11 = objc_msgSend(v1, sel_subviews);
  type metadata accessor for UIView();
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v18 = v3;
  if (v12 >> 62)
    goto LABEL_20;
  v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v13)
  {
LABEL_21:
    swift_bridgeObjectRelease_n();
    return MEMORY[0x1E0DEE9D8];
  }
  while (!__OFSUB__(v13--, 1))
  {
    if ((v12 & 0xC000000000000001) != 0)
    {
      v14 = (id)MEMORY[0x1DF0E4D64](v13, v12);
LABEL_10:
      v15 = v14;
      v16 = UIView.getPencilKitAttachmentViews()();

      specialized Array.append<A>(contentsOf:)(v16);
      if (!v13)
        goto LABEL_17;
    }
    else
    {
      if ((v13 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v13 < *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        v14 = *(id *)(v12 + 32 + 8 * v13);
        goto LABEL_10;
      }
      __break(1u);
LABEL_20:
      swift_bridgeObjectRetain();
      v13 = _CocoaArrayWrapper.endIndex.getter();
      if (!v13)
        goto LABEL_21;
    }
  }
  __break(1u);
LABEL_17:
  swift_bridgeObjectRelease_n();
  return v18;
}

uint64_t PaperDocumentPageView.paperCanvases()()
{
  char *v0;
  void *v1;
  void *v2;
  id v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = *(void **)&v0[direct field offset for PaperDocumentPageView.overlayView];
  if (v2)
  {
    v3 = v2;
    v10 = UIView.getPaperCanvases()();
    v4 = v0;
    v5 = swift_bridgeObjectRetain();
    MEMORY[0x1DF0E4398](v5);
    if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v6 = v10;

    swift_bridgeObjectRelease();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_1DDF35440;
    *(_QWORD *)(v7 + 32) = v0;
    v11 = v7;
    specialized Array._endMutation()();
    v6 = v11;
    v8 = v1;
  }
  return v6;
}

uint64_t UIView.getPaperCanvases()()
{
  void *v0;
  void *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  void *v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = objc_msgSend(v0, sel_isHidden);
  v3 = MEMORY[0x1E0DEE9D8];
  if ((v2 & 1) != 0)
    return v3;
  type metadata accessor for AnyCanvas();
  v4 = swift_dynamicCastClass();
  if (v4)
  {
    v5 = v4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1DDF35440;
    *(_QWORD *)(v6 + 32) = v5;
    v16 = v6;
    specialized Array._endMutation()();
    v3 = v16;
    v7 = v1;
    return v3;
  }
  v9 = objc_msgSend(v1, sel_subviews);
  type metadata accessor for UIView();
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v17 = v3;
  if (v10 >> 62)
    goto LABEL_19;
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v11)
  {
LABEL_20:
    swift_bridgeObjectRelease_n();
    return MEMORY[0x1E0DEE9D8];
  }
  while (!__OFSUB__(v11--, 1))
  {
    if ((v10 & 0xC000000000000001) != 0)
    {
      v12 = (id)MEMORY[0x1DF0E4D64](v11, v10);
LABEL_9:
      v13 = v12;
      v14 = UIView.getPaperCanvases()();

      specialized Array.append<A>(contentsOf:)(v14);
      if (!v11)
        goto LABEL_16;
    }
    else
    {
      if ((v11 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v11 < *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        v12 = *(id *)(v10 + 32 + 8 * v11);
        goto LABEL_9;
      }
      __break(1u);
LABEL_19:
      swift_bridgeObjectRetain();
      v11 = _CocoaArrayWrapper.endIndex.getter();
      if (!v11)
        goto LABEL_20;
    }
  }
  __break(1u);
LABEL_16:
  swift_bridgeObjectRelease_n();
  return v17;
}

void PaperDocumentPageView.__allocating_init(context:frame:paper:documentView:)(void *a1, uint64_t a2, uint64_t a3)
{
  specialized PaperDocumentPageView.__allocating_init(context:frame:paper:documentView:pdfPage:)(a1, a2, a3);
}

uint64_t sub_1DDECC9F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Capsule();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v1, v3);
  return a1;
}

void @objc PaperDocumentPageView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  specialized PaperDocumentPageView.init(coder:)();
}

uint64_t @objc PaperDocumentPageView.isHidden.getter(void *a1)
{
  id v1;
  unsigned __int8 v2;

  v1 = a1;
  v2 = PaperDocumentPageView.isHidden.getter();

  return v2 & 1;
}

id PaperDocumentPageView.isHidden.getter()
{
  _QWORD *v0;
  objc_class *v1;
  objc_super v3;

  v1 = (objc_class *)type metadata accessor for PaperDocumentPageView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD40), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD48), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD50));
  v3.receiver = v0;
  v3.super_class = v1;
  return objc_msgSendSuper2(&v3, sel_isHidden);
}

void @objc PaperDocumentPageView.isHidden.setter(void *a1, uint64_t a2, char a3)
{
  id v4;

  v4 = a1;
  PaperDocumentPageView.isHidden.setter(a3);

}

void PaperDocumentPageView.isHidden.setter(char a1)
{
  _QWORD *v1;
  objc_class *v3;
  char v4;
  objc_super v5;
  objc_super v6;

  v3 = (objc_class *)type metadata accessor for PaperDocumentPageView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xD40), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xD48), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0xD50));
  v6.receiver = v1;
  v6.super_class = v3;
  v4 = objc_msgSendSuper2(&v6, sel_isHidden);
  v5.receiver = v1;
  v5.super_class = v3;
  objc_msgSendSuper2(&v5, sel_setHidden_, a1 & 1);
  PaperDocumentPageView.isHidden.didset(v4);
}

void PaperDocumentPageView.isHidden.didset(char a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  if (objc_msgSend(v1, sel_isHidden) != (a1 & 1))
  {
    AnyCanvas.overlays.getter();
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      v4 = (void **)(v2 + 32);
      do
      {
        v5 = *v4;
        v4 += 2;
        v6 = v5;
        objc_msgSend(v6, sel_setHidden_, objc_msgSend(v1, sel_isHidden));

        --v3;
      }
      while (v3);
    }
    swift_bridgeObjectRelease();
    if ((objc_msgSend(v1, sel_isHidden) & 1) == 0)
    {
      v7 = (void *)MEMORY[0x1DF0E666C](&v1[direct field offset for PaperDocumentPageView._tiledView]);
      if (v7)
      {
        v8 = v7;
        objc_msgSend(v7, sel_layoutSubviews);

      }
    }
  }
}

Swift::Void __swiftcall PaperDocumentPageView.updateToolPicker()()
{
  uint64_t v0;
  void *v1;
  char v2;

  Canvas.editingMode.getter(&v2);
  v1 = *(void **)(v0 + direct field offset for PaperDocumentPageView.toolPicker);
  if (v1)
    objc_msgSend(v1, sel_setVisible_forFirstResponder_, v2 == 3, v0);
}

Swift::Void __swiftcall PaperDocumentPageView.removeFromSuperview()()
{
  _QWORD *v0;
  objc_class *v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void *v5;
  void *v6;
  void *v7;
  objc_super v8;

  v1 = (objc_class *)type metadata accessor for PaperDocumentPageView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD40), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD48), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD50));
  v8.receiver = v0;
  v8.super_class = v1;
  objc_msgSendSuper2(&v8, sel_removeFromSuperview);
  AnyCanvas.overlays.getter();
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = (void **)(v2 + 32);
    do
    {
      v5 = *v4;
      v4 += 2;
      objc_msgSend(v5, sel_removeFromSuperview);
      --v3;
    }
    while (v3);
  }
  swift_bridgeObjectRelease();
  v6 = (void *)MEMORY[0x1DF0E666C]((char *)v0 + direct field offset for PaperDocumentPageView._scrollView);
  if (v6)
  {
    v7 = v6;
    objc_msgSend(v6, sel__removeScrollViewScrollObserver_, *(_QWORD *)((char *)v0 + direct field offset for PaperDocumentPageView.scrollViewObserver));

  }
}

void @objc PaperDocumentPageView.removeFromSuperview()(void *a1)
{
  id v1;

  v1 = a1;
  PaperDocumentPageView.removeFromSuperview()();

}

Swift::Void __swiftcall PaperDocumentPageView.layoutSubviews()()
{
  _QWORD *v0;
  objc_class *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  objc_super v7;
  CGAffineTransform drawingTransform;
  __C::CGRect v9;

  v1 = (objc_class *)type metadata accessor for PaperDocumentPageView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD40), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD48), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD50));
  v7.receiver = v0;
  v7.super_class = v1;
  objc_msgSendSuper2(&v7, sel_layoutSubviews);
  v2 = (id)specialized Canvas.paperView.getter();
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v2, sel_setFrame_);

  v3 = *(void **)((char *)v0 + direct field offset for PaperDocumentPageView.overlayView);
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v0, sel_bounds);
    objc_msgSend(v4, sel_setFrame_);

  }
  v5 = *(void **)((char *)v0 + direct field offset for PaperDocumentPageView.linedPaperView);
  if (v5)
  {
    v6 = v5;
    objc_msgSend(v0, sel_bounds);
    drawingTransform.a = 1.0;
    drawingTransform.b = 0.0;
    drawingTransform.c = 0.0;
    drawingTransform.d = 1.0;
    drawingTransform.tx = 0.0;
    drawingTransform.ty = 0.0;
    LinedPaperView.update(bounds:drawingTransform:shouldClip:)(v9, &drawingTransform, 1);

  }
}

void @objc PaperDocumentPageView.layoutSubviews()(void *a1)
{
  id v1;

  v1 = a1;
  PaperDocumentPageView.layoutSubviews()();

}

uint64_t PaperDocumentPageView.hitChromeForCanvasElementView(_:location:isStylus:)(double a1, double a2, uint64_t a3, char a4)
{
  uint64_t v4;
  void *v5;
  uint64_t result;

  v5 = *(void **)(v4 + direct field offset for PaperDocumentPageView.overlayView);
  if (!v5)
    return specialized Canvas.hitChromeForCanvasElementView(_:location:isStylus:)(a4 & 1, a1, a2);
  result = (uint64_t)objc_msgSend(v5, sel_hitTest_withEvent_, 0);
  if (result)
  {

    return 1;
  }
  return result;
}

uint64_t PaperDocumentPageView.allowsDropInteraction.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  char v6;
  char *v8;

  if (Canvas.allowsDropInteraction.getter()
    && (v1 = MEMORY[0x1DF0E666C](v0 + direct field offset for PaperDocumentPageView.documentView)) != 0)
  {
    v2 = (char *)v1;
    v3 = v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
    swift_beginAccess();
    if (MEMORY[0x1DF0E666C](v3))
    {
      v4 = *(_QWORD *)(v3 + 8);
      ObjectType = swift_getObjectType();
      v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 24))(v2, ObjectType, v4);

      swift_unknownObjectRelease();
    }
    else
    {
      v8 = &v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode];
      swift_beginAccess();
      LODWORD(v8) = *v8;

      v6 = (_DWORD)v8 != 0;
    }
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

void __swiftcall PaperDocumentPageView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  char *v3;
  char *v4;
  Class isa;
  double y;
  double x;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  Class v23;
  objc_class *v24;
  NSString *v25;
  objc_class *v26;
  Class v27;
  id v28;
  objc_class *v29;
  id v30;
  objc_class *v31;
  int v32;
  id v33;
  id v34;
  double v35;
  double v36;
  double v37;
  double v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t ObjectType;
  void *v44;
  id v45;
  double v46;
  double v47;
  double v48;
  double v49;
  id v50;
  unsigned __int8 *v51;
  int v52;
  int v53;
  objc_class *v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  id v62;
  void *v63;
  id v64;
  uint64_t v65;
  objc_super v66;
  char v67;
  objc_super v68;

  v4 = v3;
  isa = with.value.super.isa;
  y = _.y;
  x = _.x;
  v8 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v3);
  v9 = type metadata accessor for PKInk();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKInk?);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (void *)MEMORY[0x1DF0E666C](&v3[direct field offset for PaperDocumentPageView._pdfPage], v16);

  if (!v19)
  {
    v29 = (objc_class *)type metadata accessor for PaperDocumentPageView(0, v8[424], v8[425], v8[426]);
    v66.receiver = v4;
    v66.super_class = v29;
    v30 = -[UIView_optional hitTest:withEvent:](&v66, sel_hitTest_withEvent_, isa, x, y);
LABEL_26:
    v30;
    return;
  }
  v20 = *(void **)&v4[direct field offset for PaperDocumentPageView.overlayView];
  if (!v20
    || (v21 = v20,
        objc_msgSend(v21, sel_convertPoint_fromCoordinateSpace_, v4, x, y),
        v22 = objc_msgSend(v21, sel_hitTest_withEvent_, isa),
        v21,
        !v22))
  {
    LODWORD(v23) = 0;
    if ((PaperDocumentPageView.allowsDropInteraction.getter() & 1) != 0 && isa)
    {
      v24 = isa;
      v25 = (NSString *)MEMORY[0x1DF0E41AC](0x7645676172444955, 0xEB00000000746E65);
      v23 = NSClassFromString(v25);

      if (v23)
        LODWORD(v23) = -[objc_class isKindOfClass:](v24, sel_isKindOfClass_, v23);

    }
    v26 = (objc_class *)MEMORY[0x1DF0E666C](&v4[direct field offset for PaperDocumentPageView._tiledView]);
    v27 = v26;
    if (v26)
    {
      v28 = -[objc_class ink](v26, "ink");

      static PKInk._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v18, v13, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v18, 0, 1, v9);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v18, 1, v9) == 1)
      {
        v27 = 0;
      }
      else
      {
        v27 = PKInk._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v9);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v18, 1, 1, v9);
    }
    v31 = v27;
    v32 = -[objc_class _isHandwritingInk](v31, "_isHandwritingInk");

    if (!v32)
      goto LABEL_48;
    v33 = Canvas.editingView.getter();
    v34 = Canvas.editingView.getter();
    objc_msgSend(v34, sel_convertPoint_fromCoordinateSpace_, v4, x, y);
    v36 = v35;
    v38 = v37;

    v39 = objc_msgSend(v33, sel_hitTest_withEvent_, isa, v36, v38);
    if (!v39)
    {
LABEL_48:
      v40 = Canvas.editingView.getter();
      v42 = v41;
      ObjectType = swift_getObjectType();
      v44 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v42 + 144))(ObjectType, v42);

      if (!v44
        || (v45 = Canvas.editingView.getter(),
            objc_msgSend(v45, sel_convertPoint_fromCoordinateSpace_, v4, x, y),
            v47 = v46,
            v49 = v48,
            v45,
            v50 = objc_msgSend(v44, sel_hitTest_withEvent_, isa, v47, v49),
            v44,
            !v50))
      {
        v51 = (unsigned __int8 *)MEMORY[0x1DF0E666C](&v4[direct field offset for PaperDocumentPageView.documentView]);
        if (!v51
          || (v52 = v51[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_nonDrawingToolMode], v51, v52)
          || ((Canvas.editingMode.getter(&v67), v67 == 1) ? (v53 = 1) : (v53 = (int)v23), v53 == 1))
        {
          v54 = (objc_class *)type metadata accessor for PaperDocumentPageView(0, v8[424], v8[425], v8[426]);
          v68.receiver = v4;
          v68.super_class = v54;
          v30 = -[UIView_optional hitTest:withEvent:](&v68, sel_hitTest_withEvent_, isa, x, y);
          goto LABEL_26;
        }
        v55 = Canvas.editingView.getter();
        v57 = v56;
        v58 = swift_getObjectType();
        v59 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 56))(v58, v57);

        if (v59 >> 62)
          goto LABEL_44;
        v60 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFF8) + 0x10);
        while (v60)
        {
          v65 = v59 & 0xFFFFFFFFFFFFFF8;
          while (!__OFSUB__(v60--, 1))
          {
            if ((v59 & 0xC000000000000001) != 0)
            {
              v62 = (id)MEMORY[0x1DF0E4D64](v60, v59);
            }
            else
            {
              if ((v60 & 0x8000000000000000) != 0)
                goto LABEL_42;
              if (v60 >= *(_QWORD *)(v65 + 16))
                goto LABEL_43;
              v62 = *(id *)(v59 + 32 + 8 * v60);
            }
            v63 = v62;
            objc_msgSend(v62, sel_convertPoint_fromCoordinateSpace_, v4, x, y, v65);
            v64 = objc_msgSend(v63, sel_hitTest_withEvent_, isa);

            if (v64 || !v60)
              goto LABEL_39;
          }
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          swift_bridgeObjectRetain();
          v60 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
LABEL_39:
        swift_bridgeObjectRelease();
      }
    }
  }
}

id @objc PaperDocumentPageView.hitTest(_:with:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  UIView_optional *v11;
  void *v12;
  void *v13;
  UIEvent_optional v15;

  v9 = a5;
  v10 = a1;
  v15.value.super.isa = (Class)a5;
  PaperDocumentPageView.hitTest(_:with:)(v11, (CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), v15);
  v13 = v12;

  return v13;
}

UIContextMenuConfiguration_optional __swiftcall PaperDocumentPageView.customContextMenuInteraction(canvasElementViews:suggestedActions:)(Swift::OpaquePointer canvasElementViews, Swift::OpaquePointer suggestedActions)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  UIContextMenuConfiguration_optional v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t ObjectType;
  char *v28;
  void *v29;
  objc_class *isa;
  uint64_t v31;
  uint64_t v32;
  void *rawValue;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v5 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41, v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v10 = *(_QWORD *)(v9 - 8);
  v12 = MEMORY[0x1E0C80A78](v9, v11);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1DF0E666C](v2 + direct field offset for PaperDocumentPageView.documentView, v12);
  if (!v15)
    goto LABEL_17;
  v40 = v14;
  v16 = v15 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
  v17 = (void *)v15;
  swift_beginAccess();
  v18 = MEMORY[0x1DF0E666C](v16);
  if (!v18)
  {

LABEL_17:
    v21 = AnyCanvas.customContextMenuInteraction(canvasElementViews:suggestedActions:)(canvasElementViews, suggestedActions);
    isa = v21.value.super.isa;
    goto LABEL_18;
  }
  v37 = v17;
  v38 = v10;
  v36 = *(_QWORD *)(v16 + 8);
  if ((unint64_t)canvasElementViews._rawValue >> 62)
  {
    v31 = v18;
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v18 = v31;
  }
  else
  {
    v19 = *(_QWORD *)(((unint64_t)canvasElementViews._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v20 = MEMORY[0x1E0DEE9D8];
  v39 = v9;
  if (v19)
  {
    v34 = v18;
    v35 = v2;
    v42 = MEMORY[0x1E0DEE9D8];
    v21.value.super.isa = (Class)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19 & ~(v19 >> 63), 0);
    if (v19 < 0)
    {
      __break(1u);
      return v21;
    }
    rawValue = suggestedActions._rawValue;
    v22 = 0;
    v20 = v42;
    do
    {
      if (((unint64_t)canvasElementViews._rawValue & 0xC000000000000001) != 0)
        v23 = (_QWORD *)MEMORY[0x1DF0E4D64](v22, canvasElementViews._rawValue);
      else
        v23 = *((id *)canvasElementViews._rawValue + v22 + 4);
      v24 = v23;
      (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v23) + 0xE8))();

      v42 = v20;
      v26 = *(_QWORD *)(v20 + 16);
      v25 = *(_QWORD *)(v20 + 24);
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
        v20 = v42;
      }
      ++v22;
      *(_QWORD *)(v20 + 16) = v26 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v20+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v26, v8, v41);
    }
    while (v19 != v22);
    suggestedActions._rawValue = rawValue;
  }
  ObjectType = swift_getObjectType();
  v28 = v40;
  PaperDocumentPageView.sharedPaperPage.getter();
  v29 = v37;
  isa = (objc_class *)(*(uint64_t (**)(void *, uint64_t, char *, void *, uint64_t))(v36 + 8))(v37, v20, v28, suggestedActions._rawValue, ObjectType);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  (*(void (**)(char *, uint64_t))(v38 + 8))(v28, v39);
LABEL_18:
  v21.value.super.isa = isa;
  return v21;
}

uint64_t PaperDocumentPageView.mergeToSelf<A>(_:from:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;
  char v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a2;
  v10 = Canvas.mergeToSelf<A>(_:from:)();
  if (((v10 & 1) != 0 || (v9 - 3) <= 1) && !AnyCanvas.isLiveEditing()())
  {
    v11 = MEMORY[0x1DF0E666C](v2 + direct field offset for PaperDocumentPageView.documentView);
    if (v11)
    {
      v12 = (void *)v11;
      PaperDocumentPageView.sharedPaperPage.getter();
      PaperDocumentView.didChange(page:)((uint64_t)v8);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
  }
  return v10 & 1;
}

uint64_t PaperDocumentPageView.canvasCalculateDocument.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t *v3;
  uint64_t v4;

  v1 = MEMORY[0x1DF0E666C](v0 + direct field offset for PaperDocumentPageView.documentView);
  if (!v1)
    return 0;
  v2 = (void *)v1;
  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_calculateDocument);
  swift_beginAccess();
  v4 = *v3;
  swift_unknownObjectRetain();

  return v4;
}

void PaperDocumentPageView.canvasCalculateDocumentExpressionSolvingBehavior.getter(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  char *v5;
  char v6;

  v3 = MEMORY[0x1DF0E666C](v1 + direct field offset for PaperDocumentPageView.documentView);
  if (v3)
  {
    v4 = (void *)v3;
    v5 = (char *)(v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_calculateDocumentExpressionSolvingBehavior);
    swift_beginAccess();
    v6 = *v5;

  }
  else
  {
    v6 = 2;
  }
  *a1 = v6;
}

void PaperDocumentPageView.__ivar_destroyer()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();

  swift_bridgeObjectRelease();
  swift_unknownObjectWeakDestroy();

}

id PaperDocumentPageView.__deallocating_deinit()
{
  _QWORD *v0;
  objc_class *v1;
  objc_super v3;

  v1 = (objc_class *)type metadata accessor for PaperDocumentPageView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD40), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD48), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD50));
  v3.receiver = v0;
  v3.super_class = v1;
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

void @objc PaperDocumentPageView.__ivar_destroyer(uint64_t a1)
{

  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();

  swift_bridgeObjectRelease();
  swift_unknownObjectWeakDestroy();

}

void *protocol witness for PageOverlayView.overlayView.getter in conformance PaperDocumentPageView<A>()
{
  void *v0;
  id v1;

  v0 = (void *)specialized PaperDocumentPageView.overlayView.getter();
  v1 = v0;
  return v0;
}

void protocol witness for PageOverlayView.editingMode.setter in conformance PaperDocumentPageView<A>(unsigned __int8 *a1)
{
  unsigned __int8 v1;

  v1 = *a1;
  PaperDocumentPageView.editingMode.setter(&v1);
}

void protocol witness for PageOverlayView.toolPicker.setter in conformance PaperDocumentPageView<A>(void *a1)
{
  specialized PaperDocumentPageView.toolPicker.setter(a1);

}

uint64_t specialized PaperDocumentPageView.overlayView.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + direct field offset for PaperDocumentPageView.overlayView);
}

void specialized PaperDocumentPageView.canvasStateLiveStreamMessenger.setter(uint64_t a1, uint64_t a2)
{
  specialized Canvas.canvasStateLiveStreamMessenger.setter(a1, a2);
  PaperDocumentPageView.canvasStateLiveStreamMessenger.didset();
}

void specialized PaperDocumentPageView.toolPicker.setter(void *a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + direct field offset for PaperDocumentPageView.toolPicker);
  *(_QWORD *)(v1 + direct field offset for PaperDocumentPageView.toolPicker) = a1;
  v3 = a1;

  PaperDocumentPageView.updateToolPicker()();
}

void specialized PaperDocumentPageView.init(context:frame:paper:documentView:pdfPage:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t *v9;
  void *v10;
  objc_class *v11;
  id v12;
  id v13;
  unsigned __int8 *v14;
  unsigned __int8 v17[24];

  v5 = *v3;
  v6 = *MEMORY[0x1E0DEEDD8];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(uint64_t *)((char *)v3 + direct field offset for PaperDocumentPageView.linedPaperView) = 0;
  *(uint64_t *)((char *)v3 + direct field offset for PaperDocumentPageView.cancellables) = MEMORY[0x1E0DEE9E8];
  *(uint64_t *)((char *)v3 + direct field offset for PaperDocumentPageView.overlayView) = 0;
  swift_unknownObjectWeakInit();
  *(uint64_t *)((char *)v3 + direct field offset for PaperDocumentPageView.toolPicker) = 0;
  v7 = (void **)(a3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  v8 = *v7;
  if (v8)
  {
    v9 = v3;
    if (objc_msgSend(v8, sel_documentScrollView))
    {
      v10 = *(void **)(a3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
      if (v10)
      {
        swift_unknownObjectWeakAssign();
        swift_unknownObjectWeakAssign();
        swift_unknownObjectWeakAssign();
        v11 = (objc_class *)type metadata accessor for PaperDocumentPageView.ScrollViewObserver(0, *(_QWORD *)((v6 & v5) + 0xD40), *(_QWORD *)((v6 & v5) + 0xD48), *(_QWORD *)((v6 & v5) + 0xD50));
        v12 = v10;
        v13 = objc_msgSend(objc_allocWithZone(v11), sel_init);
        *(uint64_t *)((char *)v9 + direct field offset for PaperDocumentPageView.scrollViewObserver) = (uint64_t)v13;
        swift_unknownObjectWeakAssign();

        v14 = (unsigned __int8 *)(a3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode);
        swift_beginAccess();
        v17[0] = *v14;
        specialized Canvas.init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:)((uint64_t)a1, a2, v17, 1, 1);
      }
LABEL_7:
      __break(1u);
      JUMPOUT(0x1DDECE214);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  goto LABEL_7;
}

void specialized PaperDocumentPageView.__allocating_init(context:frame:paper:documentView:pdfPage:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  id v7;

  v7 = objc_allocWithZone((Class)type metadata accessor for PaperDocumentPageView(0, v3[424], v3[425], v3[426]));
  specialized PaperDocumentPageView.init(context:frame:paper:documentView:pdfPage:)(a1, a2, a3);
}

uint64_t type metadata accessor for PaperDocumentPageView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PaperDocumentPageView);
}

uint64_t specialized PaperDocumentPageView.didZoom(in:)()
{
  void *v0;
  void *v1;
  _QWORD *v2;
  void (*v3)(void *);
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *v8;

  v1 = v0;
  v2 = (_QWORD *)specialized Canvas.paperView.getter();
  v3 = *(void (**)(void *))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x280);
  v4 = v2;
  v3(v1);

  objc_msgSend(v1, sel_layoutSubviews);
  AnyCanvas.overlays.getter();
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (void **)(v5 + 32);
    do
    {
      v8 = *v7;
      v7 += 2;
      objc_msgSend(v8, sel_layoutSubviews);
      --v6;
    }
    while (v6);
  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized PaperDocumentPageView.didScroll(in:)()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void *v6;

  v1 = v0;
  v2 = (id)specialized Canvas.paperView.getter();
  ContainerCanvasElementView.didScroll(in:)((uint64_t)v1);

  objc_msgSend(v1, sel_layoutSubviews);
  AnyCanvas.overlays.getter();
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (void **)(v3 + 32);
    do
    {
      v6 = *v5;
      v5 += 2;
      objc_msgSend(v6, sel_layoutSubviews);
      --v4;
    }
    while (v4);
  }
  return swift_bridgeObjectRelease();
}

uint64_t type metadata completion function for PaperDocumentPageView()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for PaperDocumentPageView()
{
  return swift_lookUpClassMethod();
}

uint64_t type metadata completion function for PaperDocumentPageView.ScrollViewObserver()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for PaperDocumentPageView.ScrollViewObserver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PaperDocumentPageView.ScrollViewObserver);
}

void specialized PaperDocumentPageView.init(coder:)()
{
  char *v0;

  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[direct field offset for PaperDocumentPageView.linedPaperView] = 0;
  *(_QWORD *)&v0[direct field offset for PaperDocumentPageView.cancellables] = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v0[direct field offset for PaperDocumentPageView.overlayView] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[direct field offset for PaperDocumentPageView.toolPicker] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall CompactShapeOpacityController.viewDidLoad()()
{
  char *v0;
  char *v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  double v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  double v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  Class isa;
  objc_super v35;

  v1 = v0;
  v35.receiver = v0;
  v35.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v35, sel_viewDidLoad);
  v2 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit29CompactShapeOpacityController_slider];
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v3, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
    v4 = objc_msgSend(v0, sel_view);
    if (v4)
    {
      v5 = v4;
      objc_msgSend(v4, sel_addSubview_, v3);

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_1DDF329D0;
      v7 = objc_msgSend(v3, sel_topAnchor);
      v8 = objc_msgSend(v1, sel_view);
      if (v8)
      {
        v9 = v8;
        v10 = objc_msgSend(v8, sel_safeAreaLayoutGuide);

        v11 = objc_msgSend(v10, sel_topAnchor);
        v12 = *(double *)&v1[OBJC_IVAR____TtC8PaperKit29CompactShapeOpacityController_contentViewMargin];
        v13 = objc_msgSend(v7, sel_constraintEqualToAnchor_constant_, v11, v12);

        *(_QWORD *)(v6 + 32) = v13;
        v14 = objc_msgSend(v3, sel_leadingAnchor);
        v15 = objc_msgSend(v1, sel_view);
        if (v15)
        {
          v16 = v15;
          v17 = objc_msgSend(v15, sel_safeAreaLayoutGuide);

          v18 = objc_msgSend(v17, sel_leadingAnchor);
          v19 = objc_msgSend(v14, sel_constraintEqualToAnchor_constant_, v18, v12);

          *(_QWORD *)(v6 + 40) = v19;
          v20 = objc_msgSend(v3, sel_bottomAnchor);
          v21 = objc_msgSend(v1, sel_view);
          if (v21)
          {
            v22 = v21;
            v23 = objc_msgSend(v21, sel_safeAreaLayoutGuide);

            v24 = objc_msgSend(v23, sel_bottomAnchor);
            v25 = -v12;
            v26 = objc_msgSend(v20, sel_constraintEqualToAnchor_constant_, v24, v25);

            *(_QWORD *)(v6 + 48) = v26;
            v27 = objc_msgSend(v3, sel_trailingAnchor);
            v28 = objc_msgSend(v1, sel_view);
            if (v28)
            {
              v29 = v28;
              v30 = (void *)objc_opt_self();
              v31 = objc_msgSend(v29, sel_safeAreaLayoutGuide);

              v32 = objc_msgSend(v31, sel_trailingAnchor);
              v33 = objc_msgSend(v27, sel_constraintEqualToAnchor_constant_, v32, v25);

              *(_QWORD *)(v6 + 56) = v33;
              specialized Array._endMutation()();
              type metadata accessor for NSLayoutConstraint();
              isa = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              objc_msgSend(v30, sel_activateConstraints_, isa);

              objc_msgSend(v1, sel_setPreferredContentSize_, *(double *)&v1[OBJC_IVAR____TtC8PaperKit29CompactShapeOpacityController_preferredPopoverSize], *(double *)&v1[OBJC_IVAR____TtC8PaperKit29CompactShapeOpacityController_preferredPopoverSize + 8]);
              return;
            }
LABEL_13:
            __break(1u);
            return;
          }
LABEL_12:
          __break(1u);
          goto LABEL_13;
        }
LABEL_11:
        __break(1u);
        goto LABEL_12;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
}

id CompactShapeOpacityController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  objc_class *ObjectType;
  void *v8;
  id v9;
  objc_super v11;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit29CompactShapeOpacityController_slider] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit29CompactShapeOpacityController_contentViewMargin] = 0x4030000000000000;
  *(_OWORD *)&v3[OBJC_IVAR____TtC8PaperKit29CompactShapeOpacityController_preferredPopoverSize] = xmmword_1DDF353E0;
  if (a2)
  {
    v8 = (void *)MEMORY[0x1DF0E41AC](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = 0;
  }
  v11.receiver = v3;
  v11.super_class = ObjectType;
  v9 = objc_msgSendSuper2(&v11, sel_initWithNibName_bundle_, v8, a3);

  return v9;
}

id CompactShapeOpacityController.init(coder:)(void *a1)
{
  char *v1;
  objc_class *ObjectType;
  id v4;
  objc_super v6;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit29CompactShapeOpacityController_slider] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit29CompactShapeOpacityController_contentViewMargin] = 0x4030000000000000;
  *(_OWORD *)&v1[OBJC_IVAR____TtC8PaperKit29CompactShapeOpacityController_preferredPopoverSize] = xmmword_1DDF353E0;
  v6.receiver = v1;
  v6.super_class = ObjectType;
  v4 = objc_msgSendSuper2(&v6, sel_initWithCoder_, a1);

  return v4;
}

uint64_t type metadata accessor for CompactShapeOpacityController()
{
  return objc_opt_self();
}

char *CompactSignatureStrokeWidthControl.init(width:unit:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  objc_class *ObjectType;
  char *v8;
  id v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  void *v14;
  uint64_t v15;
  char *v16;
  id v17;
  id v18;
  char *v19;
  id v20;
  id v21;
  id v22;
  char *v23;
  id v24;
  id v25;
  id v26;
  Class isa;
  char *v28;
  CGAffineTransform v30;
  objc_super v31;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit34CompactSignatureStrokeWidthControl_strokePreviewWidth] = 0x4036000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit34CompactSignatureStrokeWidthControl_strokePreviewRotationAngle] = 0xBFE921FB54442D18;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit34CompactSignatureStrokeWidthControl____lazy_storage___strokeWidthPreview] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit34CompactSignatureStrokeWidthControl_width] = a1;
  v8 = &v3[OBJC_IVAR____TtC8PaperKit34CompactSignatureStrokeWidthControl_unit];
  *(_QWORD *)v8 = a2;
  *((_QWORD *)v8 + 1) = a3;
  v31.receiver = v3;
  v31.super_class = ObjectType;
  v9 = objc_msgSendSuper2(&v31, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v10 = CompactSignatureStrokeWidthControl.strokeWidthPreview.getter();
  objc_msgSend(v10, sel_setUserInteractionEnabled_, 0);

  v11 = CompactSignatureStrokeWidthControl.strokeWidthPreview.getter();
  objc_msgSend(v11, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  v12 = (char *)v9;
  v13 = CompactSignatureStrokeWidthControl.strokeWidthPreview.getter();
  objc_msgSend(v12, sel_addSubview_, v13);

  v14 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1DDF354A0;
  v16 = CompactSignatureStrokeWidthControl.strokeWidthPreview.getter();
  v17 = objc_msgSend(v16, sel_widthAnchor);

  v18 = objc_msgSend(v17, sel_constraintEqualToConstant_, *(double *)&v12[OBJC_IVAR____TtC8PaperKit34CompactSignatureStrokeWidthControl_strokePreviewWidth]);
  *(_QWORD *)(v15 + 32) = v18;
  v19 = CompactSignatureStrokeWidthControl.strokeWidthPreview.getter();
  v20 = objc_msgSend(v19, sel_centerXAnchor);

  v21 = objc_msgSend(v12, sel_centerXAnchor);
  v22 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v21);

  *(_QWORD *)(v15 + 40) = v22;
  v23 = CompactSignatureStrokeWidthControl.strokeWidthPreview.getter();
  v24 = objc_msgSend(v23, sel_centerYAnchor);

  v25 = objc_msgSend(v12, sel_centerYAnchor);
  v26 = objc_msgSend(v24, sel_constraintEqualToAnchor_, v25);

  *(_QWORD *)(v15 + 48) = v26;
  *(_QWORD *)&v30.a = v15;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_activateConstraints_, isa);

  v28 = CompactSignatureStrokeWidthControl.strokeWidthPreview.getter();
  CGAffineTransformMakeRotation(&v30, *(CGFloat *)&v12[OBJC_IVAR____TtC8PaperKit34CompactSignatureStrokeWidthControl_strokePreviewRotationAngle]);
  objc_msgSend(v28, sel_setTransform_, &v30);

  CompactSignatureStrokeWidthControl.updateUI()();
  return v12;
}

char *CompactSignatureStrokeWidthControl.strokeWidthPreview.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  char *v7;
  void *v8;
  id v9;

  v1 = OBJC_IVAR____TtC8PaperKit34CompactSignatureStrokeWidthControl____lazy_storage___strokeWidthPreview;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit34CompactSignatureStrokeWidthControl____lazy_storage___strokeWidthPreview);
  if (v2)
  {
    v3 = *(char **)(v0
                  + OBJC_IVAR____TtC8PaperKit34CompactSignatureStrokeWidthControl____lazy_storage___strokeWidthPreview);
  }
  else
  {
    v4 = v0;
    v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit34CompactSignatureStrokeWidthControl_width);
    v6 = objc_allocWithZone((Class)type metadata accessor for SignatureStrokeWidthPreview());
    v7 = SignatureStrokeWidthPreview.init(width:)(v5);
    v8 = *(void **)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v7;
    v3 = v7;

    v2 = 0;
  }
  v9 = v2;
  return v3;
}

void CompactSignatureStrokeWidthControl.updateUI()()
{
  void *v0;
  objc_class *ObjectType;
  char **v2;
  id v3;
  char *v4;
  char **v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  objc_super v10;
  objc_super v11;
  objc_super v12;
  objc_super v13;
  objc_super v14;
  objc_super v15;

  ObjectType = (objc_class *)swift_getObjectType();
  v15.receiver = v0;
  v15.super_class = ObjectType;
  v2 = &selRef_quaternarySystemFillColor;
  if (objc_msgSendSuper2(&v15, sel_isEnabled))
  {
    v11.receiver = v0;
    v11.super_class = ObjectType;
    v2 = &selRef_systemBlueColor;
    if ((objc_msgSendSuper2(&v11, sel_isSelected) & 1) == 0)
    {
      v10.receiver = v0;
      v10.super_class = ObjectType;
      if (!objc_msgSendSuper2(&v10, sel_isHighlighted))
        v2 = &selRef_quaternarySystemFillColor;
    }
  }
  v3 = objc_msgSend((id)objc_opt_self(), *v2);
  objc_msgSend(v0, sel_setBackgroundColor_, v3);

  v4 = CompactSignatureStrokeWidthControl.strokeWidthPreview.getter();
  v14.receiver = v0;
  v14.super_class = ObjectType;
  if (objc_msgSendSuper2(&v14, sel_isEnabled))
  {
    v13.receiver = v0;
    v13.super_class = ObjectType;
    v5 = &selRef_systemBackgroundColor;
    if ((objc_msgSendSuper2(&v13, sel_isSelected) & 1) == 0)
    {
      v12.receiver = v0;
      v12.super_class = ObjectType;
      if (!objc_msgSendSuper2(&v12, sel_isHighlighted))
        v5 = &selRef_labelColor;
    }
  }
  else
  {
    v5 = &selRef_tertiaryLabelColor;
  }
  v6 = objc_msgSend((id)objc_opt_self(), *v5);
  v7 = OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokeColor;
  v8 = *(void **)&v4[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokeColor];
  *(_QWORD *)&v4[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokeColor] = v6;
  v9 = v6;

  objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC8PaperKit27SignatureStrokeWidthPreview_strokePreview], sel_setBackgroundColor_, *(_QWORD *)&v4[v7]);
}

void @objc CompactSignatureStrokeWidthControl.isSelected.setter(void *a1, uint64_t a2, uint64_t a3, const char **a4)
{
  const char *v6;
  id v7;
  objc_super v8;

  v8.receiver = a1;
  v8.super_class = (Class)swift_getObjectType();
  v6 = *a4;
  v7 = v8.receiver;
  objc_msgSendSuper2(&v8, v6, a3);
  CompactSignatureStrokeWidthControl.updateUI()();

}

uint64_t type metadata accessor for CompactSignatureStrokeWidthControl()
{
  return objc_opt_self();
}

uint64_t getEnumTagSinglePayload for PaperDocumentPageLayout()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDECF404(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRKeyPath();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PaperDocumentPageLayout()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDECF44C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CRKeyPath();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for PaperDocumentPageLayout()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PaperDocumentPageLayout;
  if (!type metadata singleton initialization cache for PaperDocumentPageLayout)
    return swift_getSingletonMetadata();
  return result;
}

_QWORD *PaperDocumentPageLayout.createView<A>(in:canvas:parent:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  id v24;
  id v25;
  id v26;
  _QWORD *v27;
  _QWORD v29[4];

  v6 = v5;
  v29[1] = a4;
  v29[2] = a5;
  v29[3] = a1;
  v9 = type metadata accessor for CRKeyPath();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PaperDocumentPage>);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<PaperDocumentPage>);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)v29 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v13, v6, v9, v21);
  type metadata accessor for PaperDocumentPage();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
  Ref.init(id:)();
  type metadata accessor for Capsule();
  lazy protocol witness table accessor for type Ref<PaperDocumentPage> and conformance Ref<A>();
  Capsule.encapsulate<A>(_:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  v24 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContainerCanvasElementView<PaperDocumentPage>));
  v25 = a3;
  v26 = a2;
  v27 = specialized ContainerCanvasElementView.init(canvasElement:canvas:parentCanvasElement:)((uint64_t)v23, a2, a3);

  return v27;
}

unint64_t lazy protocol witness table accessor for type Ref<PaperDocumentPage> and conformance Ref<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Ref<PaperDocumentPage> and conformance Ref<A>;
  if (!lazy protocol witness table cache variable for type Ref<PaperDocumentPage> and conformance Ref<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Ref<PaperDocumentPage>);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12878], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Ref<PaperDocumentPage> and conformance Ref<A>);
  }
  return result;
}

_QWORD *specialized ContainerCanvasElementView.init(canvasElement:canvas:parentCanvasElement:)(uint64_t a1, void *a2, void *a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  _QWORD *v17;
  _QWORD v19[8];

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x4C0)) = 0;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v12 & *v3) + 0x4C8)) = 0;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v12 & *v3) + 0x4D0)) = 0;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v12 & *v3) + 0x4D8)) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v12 & *v3) + 0x4E0)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v12 & *v3) + 0x4E8)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v12 & *v3) + 0x4F0)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v12 & *v3) + 0x4F8)) = 0;
  v19[0] = type metadata accessor for Image();
  v19[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  v19[2] = &protocol witness table for Image;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v13 = *(double *)&v19[4];
  v14 = *(double *)&v19[5];
  v15 = *(double *)&v19[6];
  v16 = *(double *)&v19[7];
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  v17 = specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)((uint64_t)v11, a2, a3, v13, v14, v15, v16);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return v17;
}

{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  _QWORD *v17;
  _QWORD v19[8];

  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x4C0)) = 0;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v12 & *v3) + 0x4C8)) = 0;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v12 & *v3) + 0x4D0)) = 0;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v12 & *v3) + 0x4D8)) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v12 & *v3) + 0x4E0)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v12 & *v3) + 0x4E8)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v12 & *v3) + 0x4F0)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v12 & *v3) + 0x4F8)) = 0;
  v19[0] = type metadata accessor for Paper();
  v19[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v19[2] = &protocol witness table for Paper;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v13 = *(double *)&v19[4];
  v14 = *(double *)&v19[5];
  v15 = *(double *)&v19[6];
  v16 = *(double *)&v19[7];
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  v17 = specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)((uint64_t)v11, a2, a3, v13, v14, v15, v16);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return v17;
}

{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  _QWORD *v17;
  _QWORD v19[8];

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<PaperDocumentPage>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x4C0)) = 0;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v12 & *v3) + 0x4C8)) = 0;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v12 & *v3) + 0x4D0)) = 0;
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v12 & *v3) + 0x4D8)) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)((char *)v3 + *(_QWORD *)((*v12 & *v3) + 0x4E0)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v12 & *v3) + 0x4E8)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v12 & *v3) + 0x4F0)) = 0;
  *((_BYTE *)v3 + *(_QWORD *)((*v12 & *v3) + 0x4F8)) = 0;
  v19[0] = type metadata accessor for PaperDocumentPage();
  v19[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
  v19[2] = &protocol witness table for PaperDocumentPage;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v13 = *(double *)&v19[4];
  v14 = *(double *)&v19[5];
  v15 = *(double *)&v19[6];
  v16 = *(double *)&v19[7];
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  v17 = specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)((uint64_t)v11, a2, a3, v13, v14, v15, v16);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
  return v17;
}

uint64_t sub_1DDECFD60()
{
  return 24;
}

__n128 sub_1DDECFD6C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDECFD88()
{
  return 24;
}

__n128 sub_1DDECFD94(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

Swift::Void __swiftcall FontAttributeStylingControl.updateTintColor()()
{
  char *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;

  if (v0[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_useCompactStyle] == 1)
  {
    v1 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit27FontAttributeStylingControl_titleLabelTintColor];
    objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_titleLabel], sel_setTextColor_, v1);
    v2 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_imageView];
    v3 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit27FontAttributeStylingControl_overrideImageViewTintColor];
    if (v3)
    {
      v5 = *(id *)&v0[OBJC_IVAR____TtC8PaperKit27FontAttributeStylingControl_overrideImageViewTintColor];
    }
    else
    {
      v5 = v1;
      v3 = 0;
    }
    v4 = v3;
    objc_msgSend(v2, sel_setTintColor_, v5);

  }
  else
  {
    objc_msgSend(v0, sel_setTintColor_, 0);
  }
}

UIColor_optional __swiftcall FontAttributeStylingControl.resolvedBackgroundColor()()
{
  uint64_t v0;
  int v1;
  void *v2;
  char **v3;
  objc_class *v4;
  Swift::Bool v5;
  UIColor_optional result;

  v1 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit23AttributeStylingControl_useCompactStyle);
  v2 = (void *)objc_opt_self();
  v3 = &selRef_quaternarySystemFillColor;
  if (!v1)
    v3 = &selRef_tertiarySystemFillColor;
  v4 = (objc_class *)objc_msgSend(v2, *v3);
  result.value.super.isa = v4;
  result.is_nil = v5;
  return result;
}

id FontAttributeStylingControl.init(coder:)(void *a1)
{
  char *v1;
  objc_class *ObjectType;
  uint64_t v4;
  void *v5;
  char *v6;
  id v7;
  objc_super v9;

  ObjectType = (objc_class *)swift_getObjectType();
  v4 = OBJC_IVAR____TtC8PaperKit27FontAttributeStylingControl_titleLabelTintColor;
  v5 = (void *)objc_opt_self();
  v6 = v1;
  *(_QWORD *)&v1[v4] = objc_msgSend(v5, sel_labelColor);
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit27FontAttributeStylingControl_overrideImageViewTintColor] = 0;

  v9.receiver = v6;
  v9.super_class = ObjectType;
  v7 = objc_msgSendSuper2(&v9, sel_initWithCoder_, a1);

  return v7;
}

void FontAttributeStylingControl.__ivar_destroyer()
{
  uint64_t v0;

}

uint64_t type metadata accessor for FontAttributeStylingControl()
{
  return objc_opt_self();
}

Swift::Void __swiftcall TextStyleViewController.viewDidLoad()()
{
  char *v0;
  char *v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  double v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  double v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  Class isa;
  objc_super v34;

  v1 = v0;
  v34.receiver = v0;
  v34.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v34, sel_viewDidLoad);
  v2 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit23TextStyleViewController_textStyleView];
  objc_msgSend(v2, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v3 = objc_msgSend(v0, sel_view);
  if (!v3)
  {
    __break(1u);
    goto LABEL_8;
  }
  v4 = v3;
  objc_msgSend(v3, sel_addSubview_, v2);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1DDF329D0;
  v6 = objc_msgSend(v2, sel_topAnchor);
  v7 = objc_msgSend(v1, sel_view);
  if (!v7)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v8 = v7;
  v9 = objc_msgSend(v7, sel_safeAreaLayoutGuide);

  v10 = objc_msgSend(v9, sel_topAnchor);
  v11 = *(double *)&v1[OBJC_IVAR____TtC8PaperKit23TextStyleViewController_contentViewMargin];
  v12 = objc_msgSend(v6, sel_constraintEqualToAnchor_constant_, v10, v11);

  *(_QWORD *)(v5 + 32) = v12;
  v13 = objc_msgSend(v2, sel_leadingAnchor);
  v14 = objc_msgSend(v1, sel_view);
  if (!v14)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v15 = v14;
  v16 = objc_msgSend(v14, sel_safeAreaLayoutGuide);

  v17 = objc_msgSend(v16, sel_leadingAnchor);
  v18 = objc_msgSend(v13, sel_constraintEqualToAnchor_constant_, v17, v11);

  *(_QWORD *)(v5 + 40) = v18;
  v19 = objc_msgSend(v2, sel_bottomAnchor);
  v20 = objc_msgSend(v1, sel_view);
  if (!v20)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v21 = v20;
  v22 = objc_msgSend(v20, sel_safeAreaLayoutGuide);

  v23 = objc_msgSend(v22, sel_bottomAnchor);
  v24 = -v11;
  v25 = objc_msgSend(v19, sel_constraintEqualToAnchor_constant_, v23, v24);

  *(_QWORD *)(v5 + 48) = v25;
  v26 = objc_msgSend(v2, sel_trailingAnchor);
  v27 = objc_msgSend(v1, sel_view);
  if (v27)
  {
    v28 = v27;
    v29 = (void *)objc_opt_self();
    v30 = objc_msgSend(v28, sel_safeAreaLayoutGuide);

    v31 = objc_msgSend(v30, sel_trailingAnchor);
    v32 = objc_msgSend(v26, sel_constraintEqualToAnchor_constant_, v31, v24);

    *(_QWORD *)(v5 + 56) = v32;
    specialized Array._endMutation()();
    type metadata accessor for NSLayoutConstraint();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v29, sel_activateConstraints_, isa);

    objc_msgSend(v1, sel_setPreferredContentSize_, *(double *)&v1[OBJC_IVAR____TtC8PaperKit23TextStyleViewController_preferredPopoverSize], *(double *)&v1[OBJC_IVAR____TtC8PaperKit23TextStyleViewController_preferredPopoverSize + 8]);
    return;
  }
LABEL_11:
  __break(1u);
}

uint64_t type metadata accessor for TextStyleViewController()
{
  return objc_opt_self();
}

void one-time initialization function for isMacIdiom()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
  v1 = objc_msgSend(v0, sel_userInterfaceIdiom);

  static UIConstants.isMacIdiom = v1 == (id)5;
}

void one-time initialization function for isIPhoneIdiom()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
  v1 = objc_msgSend(v0, sel_userInterfaceIdiom);

  static UIConstants.isIPhoneIdiom = v1 == 0;
}

void one-time initialization function for supportsPencil()
{
  id v0;
  unsigned __int8 v1;

  v0 = objc_msgSend((id)objc_opt_self(), sel_currentDevice);
  v1 = objc_msgSend(v0, sel__supportsPencil);

  static UIConstants.supportsPencil = v1;
}

void one-time initialization function for pinchVelocityThresholdToNormalizeScale()
{
  static UIConstants.pinchVelocityThresholdToNormalizeScale = 0xC020000000000000;
}

void one-time initialization function for translationThresholdToUnsnapCentering()
{
  static UIConstants.translationThresholdToUnsnapCentering = 0x4059000000000000;
}

void one-time initialization function for translationThresholdToResnapCentering()
{
  static UIConstants.translationThresholdToResnapCentering = 0x4049000000000000;
}

void one-time initialization function for unsnappedScrollInset()
{
  static UIConstants.unsnappedScrollInset = 0x4059000000000000;
}

void one-time initialization function for maximumPaperZoomScale()
{
  static UIConstants.maximumPaperZoomScale = 0x4020000000000000;
}

void one-time initialization function for canvasElementDefaultDimension()
{
  static UIConstants.canvasElementDefaultDimension = 0x406E000000000000;
}

double one-time initialization function for canvasElementDefaultSize()
{
  double result;

  if (one-time initialization token for canvasElementDefaultDimension != -1)
    swift_once();
  result = *(double *)&static UIConstants.canvasElementDefaultDimension;
  static UIConstants.canvasElementDefaultSize = static UIConstants.canvasElementDefaultDimension;
  unk_1F042ED20 = static UIConstants.canvasElementDefaultDimension;
  return result;
}

int64x2_t one-time initialization function for stickerTapToInsertSize()
{
  int64x2_t result;

  result = vdupq_n_s64(0x4064000000000000uLL);
  static UIConstants.stickerTapToInsertSize = (__int128)result;
  return result;
}

int64x2_t one-time initialization function for emojiTapToInsertSize()
{
  int64x2_t result;

  result = vdupq_n_s64(0x4058000000000000uLL);
  static UIConstants.emojiTapToInsertSize = (__int128)result;
  return result;
}

void one-time initialization function for maxCanvasSizeBeforeScalingNewElements()
{
  static UIConstants.maxCanvasSizeBeforeScalingNewElements = 0x4090000000000000;
}

void one-time initialization function for maxTextureSize()
{
  static UIConstants.maxTextureSize = 0x40A0000000000000;
}

__n128 one-time initialization function for canvasElementPasteOffset()
{
  __n128 result;

  __asm { FMOV            V0.2D, #20.0 }
  static UIConstants.canvasElementPasteOffset = (__int128)result;
  return result;
}

void one-time initialization function for copyImageMaxDimension()
{
  static UIConstants.copyImageMaxDimension = 0x4090000000000000;
}

void one-time initialization function for copyImageScale()
{
  static UIConstants.copyImageScale = 0x4000000000000000;
}

id one-time initialization function for backboardColor()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithWhite_alpha_, 0.9, 1.0);
  static UIConstants.backboardColor = (uint64_t)result;
  return result;
}

void one-time initialization function for maximumDropCanvasElementDimension()
{
  static UIConstants.maximumDropCanvasElementDimension = 0x407E000000000000;
}

int64x2_t one-time initialization function for dropItemSpacing()
{
  int64x2_t result;

  result = vdupq_n_s64(0x4040000000000000uLL);
  static UIConstants.dropItemSpacing = (__int128)result;
  return result;
}

uint64_t one-time initialization function for resizeHandleSize()
{
  double v0;
  uint64_t result;

  if (one-time initialization token for isMacIdiom != -1)
    result = swift_once();
  v0 = 16.0;
  if (static UIConstants.isMacIdiom)
    v0 = 10.0;
  static UIConstants.resizeHandleSize = *(_QWORD *)&v0;
  return result;
}

uint64_t one-time initialization function for resizeHandleInset()
{
  double v0;
  uint64_t result;

  if (one-time initialization token for isMacIdiom != -1)
    result = swift_once();
  v0 = 3.0;
  if (static UIConstants.isMacIdiom)
    v0 = 1.0;
  static UIConstants.resizeHandleInset = *(_QWORD *)&v0;
  return result;
}

void one-time initialization function for resizeHandleObscureInset()
{
  static UIConstants.resizeHandleObscureInset = 0x4008000000000000;
}

uint64_t one-time initialization function for resizeHandleEdgeWidth()
{
  double v0;
  uint64_t result;

  if (one-time initialization token for isMacIdiom != -1)
    result = swift_once();
  v0 = 2.0;
  if (static UIConstants.isMacIdiom)
    v0 = 1.0;
  static UIConstants.resizeHandleEdgeWidth = *(_QWORD *)&v0;
  return result;
}

void one-time initialization function for resizeHandleFingerHitTestSize()
{
  static UIConstants.resizeHandleFingerHitTestSize = 0x4046000000000000;
}

id one-time initialization function for resizeHandleColor(uint64_t a1)
{
  return one-time initialization function for resizeHandleColor(a1, (SEL *)&selRef_systemBlueColor, &static UIConstants.resizeHandleColor);
}

id one-time initialization function for resizeHandleColorControl(uint64_t a1)
{
  return one-time initialization function for resizeHandleColor(a1, (SEL *)&selRef_systemGreenColor, &static UIConstants.resizeHandleColorControl);
}

id one-time initialization function for resizeHandleColorCrop(uint64_t a1)
{
  return one-time initialization function for resizeHandleColor(a1, (SEL *)&selRef_blackColor, &static UIConstants.resizeHandleColorCrop);
}

id one-time initialization function for resizeHandleColorReflow(uint64_t a1)
{
  return one-time initialization function for resizeHandleColor(a1, (SEL *)&selRef_purpleColor, &static UIConstants.resizeHandleColorReflow);
}

id one-time initialization function for resizeHandleColorDisabled()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithWhite_alpha_, 0.9, 1.0);
  static UIConstants.resizeHandleColorDisabled = (uint64_t)result;
  return result;
}

void one-time initialization function for resizeCornerRadius()
{
  static UIConstants.resizeCornerRadius = 0x4030000000000000;
}

void one-time initialization function for resizeMoreButtonSize()
{
  static UIConstants.resizeMoreButtonSize = 0x4036000000000000;
}

void one-time initialization function for resizeMiddleHandlesMinSelectionSize()
{
  static UIConstants.resizeMiddleHandlesMinSelectionSize = 0x4044000000000000;
}

CGColorRef one-time initialization function for resizeInvisibleShapeBorderColor()
{
  CGColorRef result;

  result = CGColorCreateGenericGray(0.8, 1.0);
  static UIConstants.resizeInvisibleShapeBorderColor = (uint64_t)result;
  return result;
}

void one-time initialization function for resizeNudgeSmallJumpDistance()
{
  static UIConstants.resizeNudgeSmallJumpDistance = 0x3FF0000000000000;
}

void one-time initialization function for resizeNudgeLargeJumpDistance()
{
  static UIConstants.resizeNudgeLargeJumpDistance = 0x4024000000000000;
}

void one-time initialization function for resizeLineSnapToStraightThreshold()
{
  static UIConstants.resizeLineSnapToStraightThreshold = 0x4034000000000000;
}

void one-time initialization function for resizeLineSnapToAngleThreshold()
{
  static UIConstants.resizeLineSnapToAngleThreshold = 0x4034000000000000;
}

void one-time initialization function for resizeLineSnapToAngleStep()
{
  static UIConstants.resizeLineSnapToAngleStep = 0x3FE921FB54442D18;
}

void one-time initialization function for resizeRotateTwoFingerDefaultSnapRadius()
{
  static UIConstants.resizeRotateTwoFingerDefaultSnapRadius = 0x4072C00000000000;
}

void one-time initialization function for resizeRotateSnapToAngleStep()
{
  static UIConstants.resizeRotateSnapToAngleStep = 0x3FE921FB54442D18;
}

void one-time initialization function for resizeRotateSnapToAngleThreshold()
{
  static UIConstants.resizeRotateSnapToAngleThreshold = 0x4014000000000000;
}

void one-time initialization function for resizeRotateMaximumSnapAngle()
{
  static UIConstants.resizeRotateMaximumSnapAngle = 0x3FB657184AE74487;
}

void one-time initialization function for resizeRotateMinimumSnapAngle()
{
  static UIConstants.resizeRotateMinimumSnapAngle = 0x3FA1DF46A2529D39;
}

void one-time initialization function for resizeDragConstraintLimit()
{
  static UIConstants.resizeDragConstraintLimit = 0x4062C00000000000;
}

double one-time initialization function for textBoxTextContainerInset()
{
  double result;

  result = 0.0;
  static UIConstants.textBoxTextContainerInset = 0u;
  *(_OWORD *)&qword_1EDB806D8 = 0u;
  return result;
}

uint64_t one-time initialization function for textBoxDefaultPointSize()
{
  double v0;
  uint64_t result;

  if (one-time initialization token for isIPhoneIdiom != -1)
    result = swift_once();
  v0 = 60.0;
  if (!static UIConstants.isIPhoneIdiom)
    v0 = 24.0;
  static UIConstants.textBoxDefaultPointSize = *(_QWORD *)&v0;
  return result;
}

uint64_t one-time initialization function for textBoxFontUnitString()
{
  Swift::String v0;
  Swift::String_optional v1;
  Swift::String v2;
  uint64_t result;
  Swift::String v4;
  Swift::String v5;

  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v5._object = (void *)0x80000001DDF5BA60;
  v0._countAndFlagsBits = 29808;
  v0._object = (void *)0xE200000000000000;
  v1.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v1.value._object = (void *)0xEB00000000656C62;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0xD000000000000031;
  v4 = NSLocalizedString(_:tableName:bundle:value:comment:)(v0, v1, paperKitBundle, v2, v5);
  result = v4._countAndFlagsBits;
  static UIConstants.textBoxFontUnitString = (__int128)v4;
  return result;
}

void one-time initialization function for textBoxDefaultFont()
{
  double v0;
  void *v1;
  id v2;

  if (one-time initialization token for textBoxDefaultPointSize != -1)
    swift_once();
  v0 = *(double *)&static UIConstants.textBoxDefaultPointSize;
  v1 = (void *)MEMORY[0x1DF0E41AC](0x63697465766C6548, 0xE900000000000061);
  v2 = objc_msgSend((id)objc_opt_self(), sel_fontWithName_size_, v1, v0);

  if (v2)
    static UIConstants.textBoxDefaultFont = (uint64_t)v2;
  else
    __break(1u);
}

id one-time initialization function for textBoxDefaultTextColor(uint64_t a1)
{
  return one-time initialization function for resizeHandleColor(a1, (SEL *)&selRef_blackColor, &static UIConstants.textBoxDefaultTextColor);
}

unint64_t one-time initialization function for defaultTextBoxAttributes()
{
  uint64_t inited;
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  unint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(NSAttributedStringKey, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF33AB0;
  v1 = (void *)*MEMORY[0x1E0DC1138];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1138];
  v2 = one-time initialization token for textBoxDefaultFont;
  v3 = v1;
  if (v2 != -1)
    swift_once();
  v4 = (void *)static UIConstants.textBoxDefaultFont;
  v5 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFont);
  *(_QWORD *)(inited + 40) = v4;
  v6 = (void *)*MEMORY[0x1E0DC1178];
  *(_QWORD *)(inited + 64) = v5;
  *(_QWORD *)(inited + 72) = v6;
  v7 = objc_allocWithZone(MEMORY[0x1E0DC1288]);
  v8 = v4;
  v9 = v6;
  v10 = objc_msgSend(v7, sel_init);
  objc_msgSend(v10, sel_setAlignment_, 1);
  *(_QWORD *)(inited + 104) = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableParagraphStyle);
  *(_QWORD *)(inited + 80) = v10;
  result = specialized Dictionary.init(dictionaryLiteral:)(inited);
  static UIConstants.defaultTextBoxAttributes = result;
  return result;
}

void one-time initialization function for shapeStrokeMiterLimit()
{
  static UIConstants.shapeStrokeMiterLimit = 0x4024000000000000;
}

void one-time initialization function for shapeDefaultStrokeWidth()
{
  static UIConstants.shapeDefaultStrokeWidth = 0x4014000000000000;
}

uint64_t one-time initialization function for shapeStrokeWidthUnitString()
{
  Swift::String v0;
  Swift::String_optional v1;
  Swift::String v2;
  uint64_t result;
  Swift::String v4;
  Swift::String v5;

  if (one-time initialization token for paperKitBundle != -1)
    swift_once();
  v5._object = (void *)0x80000001DDF5BB30;
  v0._countAndFlagsBits = 29808;
  v0._object = (void *)0xE200000000000000;
  v1.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v1.value._object = (void *)0xEB00000000656C62;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0xD000000000000034;
  v4 = NSLocalizedString(_:tableName:bundle:value:comment:)(v0, v1, paperKitBundle, v2, v5);
  result = v4._countAndFlagsBits;
  static UIConstants.shapeStrokeWidthUnitString = (__int128)v4;
  return result;
}

void one-time initialization function for shapePreviewCornerRadius()
{
  static UIConstants.shapePreviewCornerRadius = 0x4034000000000000;
}

id one-time initialization function for imageMissingBackgroundColor(uint64_t a1)
{
  return one-time initialization function for resizeHandleColor(a1, (SEL *)&selRef_systemGray5Color, &static UIConstants.imageMissingBackgroundColor);
}

id one-time initialization function for imageMissingIconColor(uint64_t a1)
{
  return one-time initialization function for resizeHandleColor(a1, (SEL *)&selRef_systemGrayColor, &static UIConstants.imageMissingIconColor);
}

id one-time initialization function for resizeHandleColor(uint64_t a1, SEL *a2, _QWORD *a3)
{
  id result;

  result = objc_msgSend((id)objc_opt_self(), *a2);
  *a3 = result;
  return result;
}

void one-time initialization function for imageCornerRadius()
{
  static UIConstants.imageCornerRadius = 0x4010000000000000;
}

double one-time initialization function for linkSize()
{
  double result;

  result = 327.0;
  static UIConstants.linkSize = xmmword_1DDF473A0;
  return result;
}

double one-time initialization function for minimumWindowSizeToShowLinkPreviewsOnPad()
{
  double result;

  result = 300.0;
  static UIConstants.minimumWindowSizeToShowLinkPreviewsOnPad = xmmword_1DDF473B0;
  return result;
}

uint64_t one-time initialization function for signatureInstructionString()
{
  Class isa;
  unint64_t v1;
  unint64_t v2;
  Swift::String_optional v3;
  Swift::String v4;
  unint64_t v5;
  uint64_t result;
  Swift::String v7;
  unint64_t v8;

  if (one-time initialization token for supportsPencil != -1)
    swift_once();
  if (static UIConstants.supportsPencil == 1)
  {
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    isa = paperKitBundle.super.isa;
    v8 = 0x80000001DDF5BAD0;
    v1 = 0x80000001DDF5BB00;
    v2 = 0xD00000000000002ALL;
  }
  else
  {
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    isa = paperKitBundle.super.isa;
    v2 = 0xD000000000000020;
    v8 = 0x80000001DDF5BAD0;
    v1 = 0x80000001DDF5BAA0;
  }
  v3.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v3.value._object = (void *)0xEB00000000656C62;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v5 = 0xD00000000000002ALL;
  v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v2, v3, (NSBundle)isa, v4, *(Swift::String *)(&v8 - 1));
  result = v7._countAndFlagsBits;
  static UIConstants.signatureInstructionString = (__int128)v7;
  return result;
}

double one-time initialization function for scribbleHitToleranceInsetsLTR()
{
  double result;

  static UIConstants.scribbleHitToleranceInsetsLTR = 0;
  *(_QWORD *)algn_1F042EED8 = 0;
  result = -50.0;
  xmmword_1F042EEE0 = xmmword_1DDF473C0;
  return result;
}

double one-time initialization function for scribbleHitToleranceInsetsRTL()
{
  double result;

  result = 0.0;
  static UIConstants.scribbleHitToleranceInsetsRTL = xmmword_1DDF473D0;
  *(_OWORD *)&qword_1F042EF00 = xmmword_1DDF473E0;
  return result;
}

int64x2_t one-time initialization function for defaultGraphSize()
{
  int64x2_t result;

  result = vdupq_n_s64(0x4072C00000000000uLL);
  static UIConstants.defaultGraphSize = (__int128)result;
  return result;
}

void one-time initialization function for maxGraphElementDistance()
{
  static UIConstants.maxGraphElementDistance = 0x4080000000000000;
}

int64x2_t one-time initialization function for defaultLineShapeSize()
{
  int64x2_t result;

  result = vdupq_n_s64(0x4062C00000000000uLL);
  static UIConstants.defaultLineShapeSize = (__int128)result;
  return result;
}

void one-time initialization function for defaultShapeTopOffsetInAttachment()
{
  static UIConstants.defaultShapeTopOffsetInAttachment = 0x4024000000000000;
}

int64x2_t one-time initialization function for defaultRegularPolygonShapeSize()
{
  int64x2_t result;

  result = vdupq_n_s64(0x4065400000000000uLL);
  static UIConstants.defaultRegularPolygonShapeSize = (__int128)result;
  return result;
}

int64x2_t one-time initialization function for defaultStarShapeSize()
{
  int64x2_t result;

  result = vdupq_n_s64(0x4066800000000000uLL);
  static UIConstants.defaultStarShapeSize = (__int128)result;
  return result;
}

int64x2_t one-time initialization function for defaultArrowShapeSize()
{
  int64x2_t result;

  result = vdupq_n_s64(0x4062C00000000000uLL);
  static UIConstants.defaultArrowShapeSize = (__int128)result;
  return result;
}

int64x2_t one-time initialization function for defaultEllipseShapeSize()
{
  int64x2_t result;

  result = vdupq_n_s64(0x4062C00000000000uLL);
  static UIConstants.defaultEllipseShapeSize = (__int128)result;
  return result;
}

int64x2_t one-time initialization function for defaultRectangleShapeSize()
{
  int64x2_t result;

  result = vdupq_n_s64(0x4062C00000000000uLL);
  static UIConstants.defaultRectangleShapeSize = (__int128)result;
  return result;
}

double one-time initialization function for defaultChatBubbleShapeSize()
{
  double result;

  result = 165.0;
  static UIConstants.defaultChatBubbleShapeSize = xmmword_1DDF473F0;
  return result;
}

void one-time initialization function for defaultMiterLimit()
{
  static UIConstants.defaultMiterLimit = 0x4024000000000000;
}

void one-time initialization function for defaultRoundedRect()
{
  static UIConstants.defaultRoundedRect = 0x3FB999999999999ALL;
}

double one-time initialization function for defaultLine()
{
  double result;

  __asm { FMOV            V1.2D, #0.5 }
  static UIConstants.defaultLine = xmmword_1DDF33970;
  *(_OWORD *)algn_1F042EFD0 = _Q1;
  result = 0.0;
  xmmword_1F042EFE0 = xmmword_1DDF33A30;
  return result;
}

double one-time initialization function for defaultStar()
{
  double result;

  if (one-time initialization token for defaultInnerRadius != -1)
    swift_once();
  result = *(double *)&static Star.defaultInnerRadius;
  static UIConstants.defaultStar = 5;
  qword_1F042EFF8 = static Star.defaultInnerRadius;
  return result;
}

double one-time initialization function for defaultShadowOffset()
{
  double result;

  result = 0.0;
  static UIConstants.defaultShadowOffset = xmmword_1DDF47400;
  return result;
}

void one-time initialization function for defaultShadowColor()
{
  Color.init(red:green:blue:alpha:)((CGColorRef *)&static UIConstants.defaultShadowColor, 0.0, 0.0, 0.0, 0.3);
}

void one-time initialization function for initialHeightOfInsertedTextAttachment()
{
  static UIConstants.initialHeightOfInsertedTextAttachment = 0x406E000000000000;
}

void one-time initialization function for defaultTextAttachmentHeight()
{
  static UIConstants.defaultTextAttachmentHeight = 0x4078000000000000;
}

void one-time initialization function for minimumTextAttachmentHeight()
{
  static UIConstants.minimumTextAttachmentHeight = 0x4050000000000000;
}

double one-time initialization function for maxTextAttachmentHeightForCheckingInvalidBounds()
{
  double result;

  if (one-time initialization token for minimumTextAttachmentHeight != -1)
    swift_once();
  result = *(double *)&static UIConstants.minimumTextAttachmentHeight + 65.0;
  *(double *)&static UIConstants.maxTextAttachmentHeightForCheckingInvalidBounds = *(double *)&static UIConstants.minimumTextAttachmentHeight
                                                                                 + 65.0;
  return result;
}

void one-time initialization function for selectionAllowableMovementForFingerDrawingTap()
{
  static UIConstants.selectionAllowableMovementForFingerDrawingTap = 0x4008000000000000;
}

void one-time initialization function for imageMarkupMaxDimensionBounds()
{
  static UIConstants.imageMarkupMaxDimensionBounds = 0x4090000000000000;
}

void one-time initialization function for imageMarkupOldMaxArea()
{
  static UIConstants.imageMarkupOldMaxArea = 0x41493BF600000000;
}

double one-time initialization function for defaultPageSize()
{
  double result;

  result = 612.0;
  static UIConstants.defaultPageSize = xmmword_1DDF47410;
  return result;
}

double one-time initialization function for defaultPageBounds()
{
  double result;

  if (one-time initialization token for defaultPageSize != -1)
    swift_once();
  static UIConstants.defaultPageBounds = 0;
  *(_QWORD *)algn_1F042F058 = 0;
  result = *(double *)&static UIConstants.defaultPageSize;
  xmmword_1F042F060 = static UIConstants.defaultPageSize;
  return result;
}

void one-time initialization function for formFieldFont()
{
  void *v0;
  id v1;

  v0 = (void *)MEMORY[0x1DF0E41AC](0x63697465766C6548, 0xE900000000000061);
  v1 = objc_msgSend((id)objc_opt_self(), sel_fontWithName_size_, v0, 14.0);

  if (v1)
    static UIConstants.formFieldFont = (uint64_t)v1;
  else
    __break(1u);
}

void one-time initialization function for formFieldBackgroundColor()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(), sel_systemBlueColor);
  v1 = objc_msgSend(v0, sel_colorWithAlphaComponent_, 0.12);

  static UIConstants.formFieldBackgroundColor = (uint64_t)v1;
}

void one-time initialization function for pageLabelViewTopOffset()
{
  static UIConstants.pageLabelViewTopOffset = 0x4030000000000000;
}

void one-time initialization function for pageLabelViewLeftOffset()
{
  static UIConstants.pageLabelViewLeftOffset = 0x4034000000000000;
}

uint64_t one-time initialization function for largeThumbnailViewWidth()
{
  char v0;
  uint64_t result;
  double v2;
  _BYTE v3[24];
  ValueMetadata *v4;
  unint64_t v5;

  v4 = &type metadata for MobileQuickLookFeatureFlags;
  v5 = lazy protocol witness table accessor for type MobileQuickLookFeatureFlags and conformance MobileQuickLookFeatureFlags();
  v3[0] = 0;
  v0 = isFeatureEnabled(_:)();
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  v2 = 81.0;
  if ((v0 & 1) != 0)
    v2 = 160.0;
  static UIConstants.largeThumbnailViewWidth = *(_QWORD *)&v2;
  return result;
}

void one-time initialization function for handwritingReflowInset()
{
  static UIConstants.handwritingReflowInset = 0x4024000000000000;
}

id one-time initialization function for handwritingReflowNonActiveBorderColor()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithWhite_alpha_, 0.75, 0.4);
  static UIConstants.handwritingReflowNonActiveBorderColor = (uint64_t)result;
  return result;
}

void one-time initialization function for handwritingReflowMinimumWidth()
{
  static UIConstants.handwritingReflowMinimumWidth = 0x4054000000000000;
}

void one-time initialization function for handwritingReflowVerticalOverflow()
{
  static UIConstants.handwritingReflowVerticalOverflow = 0x402E000000000000;
}

void one-time initialization function for handwritingReflowMinimumSpaceWidth()
{
  static UIConstants.handwritingReflowMinimumSpaceWidth = 0x402E000000000000;
}

void one-time initialization function for handwritingReflowFrameHitTestOutset()
{
  static UIConstants.handwritingReflowFrameHitTestOutset = 0x4024000000000000;
}

void one-time initialization function for handwritingReflowAnimationDuration()
{
  static UIConstants.handwritingReflowAnimationDuration = 0x3FB1111111111111;
}

void one-time initialization function for handwritingReflowInsertSpaceMinDistanceForAdjustment()
{
  static UIConstants.handwritingReflowInsertSpaceMinDistanceForAdjustment = 0x4034000000000000;
}

void one-time initialization function for handwritingReflowDefaultTextSize()
{
  static UIConstants.handwritingReflowDefaultTextSize = 0x402C000000000000;
}

void one-time initialization function for handwritingReflowPasteAnimationDuration()
{
  static UIConstants.handwritingReflowPasteAnimationDuration = 0x3FF0000000000000;
}

int64x2_t one-time initialization function for defaultGeneratedImageSize()
{
  int64x2_t result;

  result = vdupq_n_s64(0x4074000000000000uLL);
  static UIConstants.defaultGeneratedImageSize = (__int128)result;
  return result;
}

int64x2_t one-time initialization function for minGeneratedImageSize()
{
  int64x2_t result;

  result = vdupq_n_s64(0x4074000000000000uLL);
  static UIConstants.minGeneratedImageSize = (__int128)result;
  return result;
}

int64x2_t one-time initialization function for maxGeneratedImageSize()
{
  int64x2_t result;

  result = vdupq_n_s64(0x4089000000000000uLL);
  static UIConstants.maxGeneratedImageSize = result;
  return result;
}

void one-time initialization function for imageGenerationParameterResolution()
{
  static UIConstants.imageGenerationParameterResolution = 0x4080000000000000;
}

void one-time initialization function for estimatedMaxPopoverHeight()
{
  static UIConstants.estimatedMaxPopoverHeight = 0x406B800000000000;
}

void one-time initialization function for estimatedMaxPopoverWidth()
{
  static UIConstants.estimatedMaxPopoverWidth = 0x4073400000000000;
}

double one-time initialization function for estimatedPopoverSize()
{
  uint64_t v0;
  double result;

  if (one-time initialization token for estimatedMaxPopoverWidth != -1)
    swift_once();
  v0 = static UIConstants.estimatedMaxPopoverWidth;
  if (one-time initialization token for estimatedMaxPopoverHeight != -1)
    swift_once();
  result = *(double *)&static UIConstants.estimatedMaxPopoverHeight;
  static UIConstants.estimatedPopoverSize = v0;
  qword_1F042F140 = static UIConstants.estimatedMaxPopoverHeight;
  return result;
}

uint64_t type metadata completion function for CanvasElementView()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t inited;

  v0 = type metadata accessor for Capsule();
  if (v1 <= 0x3F)
  {
    v0 = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      inited = swift_initClassMetadata2();
      if (inited)
        return inited;
      else
        return 0;
    }
  }
  return v0;
}

Swift::Void __swiftcall CanvasElementView.updateUI()()
{
  _QWORD *v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v1 = v0;
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = *MEMORY[0x1E0DEEDD8] & *v0;
  v4 = *(_QWORD *)(v3 + 0x368);
  v17 = *(_QWORD *)(v4 - 8);
  ((void (*)())MEMORY[0x1E0C80A78])();
  v6 = (char *)&v17 - v5;
  v7 = type metadata accessor for Capsule();
  v8 = *(_QWORD *)(v7 - 8);
  v10 = MEMORY[0x1E0C80A78](v7, v9);
  v12 = (char *)&v17 - v11;
  v13 = (*(uint64_t (**)(double))(v3 + 1152))(v10);
  v14 = (*(uint64_t (**)(uint64_t))((*v2 & *v0) + 0x288))(v13);
  v15 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*v2 & *v0) + 0x88))(v14);
  if (v15)
  {
    v16 = v15;
    (*(void (**)(void))((*v2 & *v15) + 0x668))();

  }
  CanvasElementView.canvasElement.getter((uint64_t)v12);
  Capsule<>.root.getter();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)(v3 + 888) + 64))(&v18, v4);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v6, v4);
  if ((v18 & 2) != 0)
    objc_msgSend(v1, sel_setUserInteractionEnabled_, 0);
}

uint64_t CanvasElementView.identity.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for Capsule();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v6 - v3;
  CanvasElementView.canvasElement.getter((uint64_t)&v6 - v3);
  Capsule<>.rootID.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t CanvasElementView.isFixedWidth.getter()
{
  return CanvasElementView.isFixedWidth.getter(Capsule<>.isFixedWidth.getter);
}

uint64_t CanvasElementView.isTextBox.getter()
{
  return CanvasElementView.isFixedWidth.getter(Capsule<>.isTextBox.getter);
}

uint64_t CanvasElementView.isFormField.getter()
{
  return CanvasElementView.isFixedWidth.getter(Capsule<>.isFormField.getter);
}

uint64_t CanvasElementView.isFixedWidth.getter(uint64_t (*a1)(uint64_t, uint64_t, _QWORD))
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v3 = *MEMORY[0x1E0DEEDD8] & *v1;
  v4 = *(_QWORD *)(v3 + 0x370);
  v5 = type metadata accessor for Capsule();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v11 - v8;
  CanvasElementView.canvasElement.getter((uint64_t)&v11 - v8);
  LOBYTE(a1) = a1(v5, v4, *(_QWORD *)(v3 + 888));
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return a1 & 1;
}

void CanvasElementView.merge<A>(_:)()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  char v3;
  void *v4;

  v1 = v0;
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_beginAccess();
  type metadata accessor for Capsule();
  v3 = Capsule.merge<A>(_:)();
  v4 = (void *)swift_endAccess();
  if ((v3 & 1) != 0
    || (v4 = (void *)MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement)) == 0)
  {
    (*(void (**)(void *))((*v2 & *v1) + 0x488))(v4);
  }
  else
  {

  }
}

double CanvasElementView.modelBounds.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[4];

  v1 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v0);
  v2 = v1[109];
  v3 = v1[110];
  v4 = type metadata accessor for Capsule();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v10 - v7;
  CanvasElementView.canvasElement.getter((uint64_t)v10 - v7);
  v10[0] = v2;
  v10[1] = v3;
  v10[2] = v1[111];
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return 0.0;
}

double CanvasElementView.modelRotation.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[4];

  v1 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v0);
  v2 = v1[109];
  v3 = v1[110];
  v4 = type metadata accessor for Capsule();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v10 - v7;
  CanvasElementView.canvasElement.getter((uint64_t)v10 - v7);
  v10[0] = v2;
  v10[1] = v3;
  v10[2] = v1[111];
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return *(double *)&v10[3];
}

double CanvasElementView.uneditedModelFrame.getter()
{
  return CanvasElementView.uneditedModelFrame.getter((void (*)(double))CanvasElementView.uneditedCanvasElement.getter);
}

double CanvasElementView.modelFrame.getter()
{
  return CanvasElementView.uneditedModelFrame.getter((void (*)(double))CanvasElementView.canvasElement.getter);
}

double CanvasElementView.uneditedModelFrame.getter(void (*a1)(double))
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  _QWORD v13[5];

  v3 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v1);
  v4 = v3[109];
  v5 = v3[110];
  v6 = type metadata accessor for Capsule();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)v13 - v10;
  a1(v9);
  v13[0] = v4;
  v13[1] = v5;
  v13[2] = v3[111];
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  return *(double *)&v13[4];
}

uint64_t CanvasElementView.modelFrame.setter()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_beginAccess();
  type metadata accessor for Capsule();
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  CanvasElementView.commitWithoutStateChange()();
  return (*(uint64_t (**)(void))((*v1 & *v0) + 0x288))();
}

double CanvasElementView.uneditedModelCoordinateSpace.getter@<D0>(_OWORD *a1@<X8>)
{
  return CanvasElementView.uneditedModelCoordinateSpace.getter((void (*)(double))CanvasElementView.uneditedCanvasElement.getter, a1);
}

double CanvasElementView.modelCoordinateSpace.getter@<D0>(_OWORD *a1@<X8>)
{
  return CanvasElementView.uneditedModelCoordinateSpace.getter((void (*)(double))CanvasElementView.canvasElement.getter, a1);
}

double CanvasElementView.uneditedModelCoordinateSpace.getter@<D0>(void (*a1)(double)@<X0>, _OWORD *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  double result;
  __int128 v15;
  __int128 v16;
  _QWORD v17[4];
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v5 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v2);
  v6 = v5[109];
  v7 = v5[110];
  v8 = type metadata accessor for Capsule();
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v13 = (char *)v17 - v12;
  a1(v11);
  v17[0] = v6;
  v17[1] = v7;
  v17[2] = v5[111];
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  result = *(double *)&v18;
  v15 = v19;
  v16 = v20;
  *a2 = v18;
  a2[1] = v15;
  a2[2] = v16;
  return result;
}

id CanvasElementView.modelCoordinateSpace.setter()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_beginAccess();
  type metadata accessor for Capsule();
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  CanvasElementView.commitWithoutStateChange()();
  (*(void (**)(void))((*v1 & *v0) + 0x288))();
  return objc_msgSend(v0, sel_setNeedsLayout);
}

void (*CanvasElementView.modelCoordinateSpace.modify(_QWORD *a1))(_OWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  CanvasElementView.modelCoordinateSpace.getter((_OWORD *)v3 + 6);
  return CanvasElementView.modelCoordinateSpace.modify;
}

void CanvasElementView.modelCoordinateSpace.modify(_OWORD **a1, char a2)
{
  _OWORD *v2;
  _OWORD *v3;
  __int128 v4;

  v2 = *a1;
  if ((a2 & 1) != 0)
    v3 = *a1;
  else
    v3 = *a1 + 3;
  v4 = v2[7];
  *v3 = v2[6];
  v3[1] = v4;
  v3[2] = v2[8];
  CanvasElementView.modelCoordinateSpace.setter();
  free(v2);
}

Swift::Void __swiftcall CanvasElementView.tapped(location:modifierFlags:allowShowingEditMenu:)(CGPoint location, __C::UIKeyModifierFlags_optional modifierFlags, Swift::Bool allowShowingEditMenu)
{
  _QWORD *v3;
  Swift::Bool is_nil;
  Swift::Int rawValue;
  double y;
  double x;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;

  is_nil = modifierFlags.is_nil;
  rawValue = modifierFlags.value.rawValue;
  y = location.y;
  x = location.x;
  v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v10 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x88))();
  if (v10)
  {
    v12 = (_QWORD *)v10;
    v11 = (void *)MEMORY[0x1DF0E666C]((char *)v3 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
    if (!v11
      || (v11, (AnyCanvasElementView.isEditingCanvasElement.getter() & 1) != 0)
      || ((*(void (**)(char *__return_ptr))((*v9 & *v3) + 0x200))((char *)&v13 + 1), (v13 & 0x200) != 0))
    {
      objc_msgSend(v12, sel_convertPoint_fromCoordinateSpace_, v3, x, y);
      (*(void (**)(_QWORD, Swift::Bool))((*v9 & *v12) + 0x4C0))(0, allowShowingEditMenu);
    }
    else
    {
      (*(void (**)(uint64_t *__return_ptr))((*v9 & *v12) + 0x2C8))(&v13);
      if (v13 == 3)
        (*(void (**)(_QWORD *, Swift::Int, Swift::Bool))((*v9 & *v12) + 0x4D0))(v3, rawValue, is_nil);
    }

  }
}

uint64_t CanvasElementView.uneditedModelHitTestPath.getter()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3A8));
  if (v1)
  {
    v2 = *(_QWORD *)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3A8));
  }
  else
  {
    v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D8))();
    v1 = 0;
  }
  v3 = v1;
  return v2;
}

CGPathRef CanvasElementView.modelHitTestPath.getter()
{
  _QWORD *v0;
  CGAffineTransform transform;
  uint64_t v3;
  CGRect v4;

  v3 = *MEMORY[0x1E0C80C00];
  (*(void (**)(CGAffineTransform *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A8))(&transform);
  v4.origin.x = 0.0;
  v4.origin.y = 0.0;
  v4.size.width = 1.0;
  v4.size.height = 1.0;
  return CGPathCreateWithRect(v4, &transform);
}

BOOL CanvasElementView.isInLiveEdit.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _BOOL8 v6;
  uint64_t v8;

  v0 = type metadata accessor for Capsule();
  v1 = type metadata accessor for Optional();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v8 - v4;
  CanvasElementView.snapshotCanvasElement.getter((uint64_t)&v8 - v4);
  v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 48))(v5, 1, v0) != 1;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  return v6;
}

Swift::Void __swiftcall CanvasElementView.beginLiveEdit()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = type metadata accessor for Capsule();
  v3 = type metadata accessor for Optional();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v19 - v10;
  CanvasElementView.snapshotCanvasElement.getter((uint64_t)&v19 - v10);
  v12 = *(_QWORD *)(v2 - 8);
  v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v2);
  v14 = *(void (**)(char *, uint64_t))(v4 + 8);
  v14(v11, v3);
  if (v13 == 1)
  {
    CanvasElementView.canvasElement.getter((uint64_t)v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v7, 0, 1, v2);
    specialized CanvasElementView.snapshotCanvasElement.setter((uint64_t)v7);
    v15 = ((uint64_t (*)(char *, uint64_t))v14)(v7, v3);
    v16 = (*(uint64_t (**)(uint64_t))((*v1 & *v0) + 0x1D8))(v15);
    v17 = *(_QWORD *)((*v1 & *v0) + 0x3A8);
    v18 = *(void **)((char *)v0 + v17);
    *(_QWORD *)((char *)v0 + v17) = v16;

  }
}

Swift::Void __swiftcall CanvasElementView.endLiveEdit(undoable:discard:)(Swift::Bool undoable, Swift::Bool discard)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  BOOL v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _BOOL4 v51;
  _BOOL4 v52;

  v3 = v2;
  v51 = undoable;
  v52 = discard;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v4, v5);
  v46 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v48 = (char *)&v45 - v9;
  v10 = type metadata accessor for CapsuleUndoAction();
  v49 = *(_QWORD *)(v10 - 8);
  v50 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v47 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Capsule();
  v14 = type metadata accessor for Optional();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v45 - v21;
  v23 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v45 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v45 - v30;
  CanvasElementView.snapshotCanvasElement.getter((uint64_t)v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v22, 1, v13) == 1)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v22, v14);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v31, v22, v13);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v18, 1, 1, v13);
    specialized CanvasElementView.snapshotCanvasElement.setter((uint64_t)v18);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    v32 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v33 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + 0x3A8);
    v34 = *(void **)((char *)v2 + v33);
    *(_QWORD *)((char *)v2 + v33) = 0;

    v36 = v52;
    if (v52 || v51)
    {
      v35 = (*(uint64_t (**)(void))((*v32 & *v2) + 0x88))();
      if (v35)
      {
        v37 = (_QWORD *)v35;
        CanvasElementView.canvasElement.getter((uint64_t)v27);
        v38 = v48;
        Capsule.actionUndoingDifference(from:)();
        v39 = (uint64_t)v38;
        (*(void (**)(char *, uint64_t))(v23 + 8))(v27, v13);
        v41 = v49;
        v40 = v50;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v39, 1, v50) == 1)
        {

          v35 = outlined destroy of CapsuleUndoAction?(v39);
        }
        else
        {
          v42 = v47;
          (*(void (**)(void))(v41 + 32))();
          if (v36)
          {
            v43 = (uint64_t)v46;
            (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v46, v42, v40);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v41 + 56))(v43, 0, 1, v40);
            v32 = (_QWORD *)MEMORY[0x1E0DEEDD8];
            swift_beginAccess();
            Capsule.apply(_:)();
            outlined destroy of CapsuleUndoAction?(v43);
            swift_endAccess();

            v35 = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v47, v40);
          }
          else
          {
            v44 = v42;
            v32 = (_QWORD *)MEMORY[0x1E0DEEDD8];
            (*(void (**)(char *, _QWORD, _QWORD, _QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v37) + 0x458))(v44, 0, 0, 0, 0);

            v35 = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v44, v40);
          }
        }
      }
    }
    (*(void (**)(uint64_t))((*v32 & *v3) + 0x288))(v35);
    CanvasElementView.commitWithoutStateChange()();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v31, v13);
  }
}

uint64_t CanvasElementView.isReadOnly.getter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  unint64_t v15;

  v3 = *MEMORY[0x1E0DEEDD8] & *v2;
  v4 = *(_QWORD *)(v3 + 0x368);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v14 - v6;
  v8 = type metadata accessor for Capsule();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v14 - v11;
  CanvasElementView.canvasElement.getter((uint64_t)&v14 - v11);
  Capsule<>.root.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(_QWORD *)(v3 + 888) + 64))(&v15, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return (v15 >> 1) & 1;
}

id CanvasElementView.isSelected.setter(char a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isSelected) = a1;
  return CanvasElementView.isSelected.didset();
}

Swift::Void __swiftcall CanvasElementView.updateFrame()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  double v3;
  void *v4;
  CGFloat b;
  double a;
  double d;
  CGFloat c;
  CGFloat ty;
  CGFloat tx;
  id v11;
  void *v12;
  id v13;
  double v14;
  _QWORD *v15;
  _QWORD *v16;
  double v17;
  void *v18;
  void *v19;
  double v20;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinX;
  double MinY;
  double v27;
  double v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  CGAffineTransform v33;
  CGAffineTransform v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;

  v1 = v0;
  v2 = MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
  v3 = 1.0;
  if (v2)
  {
    v4 = (void *)v2;
    AnyCanvasElementView.paperBoundsTransform()(&v34);

    a = v34.a;
    b = v34.b;
    c = v34.c;
    d = v34.d;
    tx = v34.tx;
    ty = v34.ty;
  }
  else
  {
    ty = 0.0;
    tx = 0.0;
    d = 1.0;
    c = 0.0;
    b = 0.0;
    a = 1.0;
  }
  v11 = objc_msgSend(v1, sel_window);
  if (v11)
  {
    v12 = v11;
    v13 = objc_msgSend(v11, sel_screen);

    objc_msgSend(v13, sel_scale);
    v3 = v14;

  }
  v15 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v16 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x88))();
  v17 = 1.0;
  if (v16)
  {
    v18 = v16;
    v19 = (void *)(*(uint64_t (**)(void))((*v15 & *v16) + 0x308))();

    if (v19)
    {
      objc_msgSend(v19, sel_zoomScale);
      v17 = v20;

    }
  }
  v35.origin.x = CanvasElementView.modelFrame.getter();
  v33.a = a;
  v33.b = b;
  v33.c = c;
  v33.d = d;
  v33.tx = tx;
  v33.ty = ty;
  v36 = CGRectApplyAffineTransform(v35, &v33);
  v37.origin.x = CGRect.rounded(scale:)(v3 * v17, v36.origin.x, v36.origin.y, v36.size.width, v36.size.height);
  x = v37.origin.x;
  y = v37.origin.y;
  width = v37.size.width;
  height = v37.size.height;
  MinX = CGRectGetMinX(v37);
  v38.origin.x = x;
  v38.origin.y = y;
  v38.size.width = width;
  v38.size.height = height;
  MinY = CGRectGetMinY(v38);
  v39.origin.x = x;
  v39.origin.y = y;
  v39.size.width = width;
  v39.size.height = height;
  v27 = CGRectGetWidth(v39);
  v40.origin.x = x;
  v40.origin.y = y;
  v40.size.width = width;
  v40.size.height = height;
  v28 = CGRectGetHeight(v40);
  if (CGRect.isFinite.getter(MinX, MinY, v27, v28))
  {
    objc_msgSend(v1, sel_setFrame_, MinX, MinY, v27, v28);
    objc_msgSend(v1, sel_setNeedsLayout);
  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)logger);
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v32 = 0;
      _os_log_impl(&dword_1DDB0F000, v30, v31, "Shape has non finite frame.", v32, 2u);
      MEMORY[0x1DF0E6558](v32, -1, -1);
    }

  }
}

uint64_t CanvasElementView.canvasElement.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  char *v3;
  uint64_t v4;

  v3 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
  swift_beginAccess();
  v4 = type metadata accessor for Capsule();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t (*CanvasElementView.canvasElement.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.backgroundColor.modify;
}

uint64_t CanvasElementView.snapshotCanvasElement.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  char *v3;
  uint64_t v4;

  v3 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x388);
  swift_beginAccess();
  type metadata accessor for Capsule();
  v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

BOOL CanvasElementView.isSelectable.getter()
{
  _QWORD *v0;
  uint64_t v2;

  (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x200))(&v2);
  return (v2 & 2) == 0;
}

void CanvasElementView.tapGestureRecognizer.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x390);
  v3 = *(void **)((char *)v1 + v2);
  *(_QWORD *)((char *)v1 + v2) = a1;

}

void CanvasElementView.dragGestureRecognizer.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x398);
  v3 = *(void **)((char *)v1 + v2);
  *(_QWORD *)((char *)v1 + v2) = a1;

}

void CanvasElementView.contextMenuInteraction.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x3A0);
  v3 = *(void **)((char *)v1 + v2);
  *(_QWORD *)((char *)v1 + v2) = a1;

}

Swift::Void __swiftcall CanvasElementView.tapped(_:)(UITapGestureRecognizer *a1)
{
  uint64_t v1;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __C::UIKeyModifierFlags_optional v7;

  -[UITapGestureRecognizer locationInView:](a1, sel_locationInView_, v1);
  v4 = v3;
  v6 = v5;
  v7.value.rawValue = (Swift::Int)-[UITapGestureRecognizer modifierFlags](a1, sel_modifierFlags);
  v7.is_nil = 0;
  CanvasElementView.tapped(location:modifierFlags:allowShowingEditMenu:)((CGPoint)__PAIR128__(v6, v4), v7, 1);
}

uint64_t CanvasElementView.uneditedCanvasElement.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v2 = type metadata accessor for Capsule();
  v3 = type metadata accessor for Optional();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v10 - v6;
  CanvasElementView.snapshotCanvasElement.getter((uint64_t)&v10 - v6);
  v8 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v2) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a1, v7, v2);
  CanvasElementView.canvasElement.getter(a1);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

void CanvasElementView._uneditedModelHitTestPath.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x3A8);
  v3 = *(void **)((char *)v1 + v2);
  *(_QWORD *)((char *)v1 + v2) = a1;

}

Swift::Void __swiftcall CanvasElementView.commitWithoutStateChange()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unsigned __int8 v13;

  v1 = *MEMORY[0x1E0DEEDD8] & *v0;
  v2 = *(_QWORD *)(v1 + 0x368);
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 0x370) + 16);
  v4 = type metadata accessor for Capsule();
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)&v12 - v8;
  v10 = (*(uint64_t (**)(double))(v1 + 136))(v7);
  if (v10)
  {
    v11 = (void *)v10;
    CanvasElementView.canvasElement.getter((uint64_t)v9);
    v13 = 4;
    AnyCanvas.merge<A>(_:from:)((uint64_t)v9, &v13, v2, v3);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  }
}

Swift::Void __swiftcall CanvasElementView.dragMoved(_:)(UIPanGestureRecognizer *a1)
{
  _QWORD *v1;
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  _QWORD *(*v22)(int64_t *__return_ptr);
  _QWORD *v23;
  char **v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  unint64_t v43;
  _QWORD *v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  BOOL v71;
  uint64_t v72;
  uint8_t *v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  id v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  id v83;
  id v84;
  void *v85;
  id v86;
  void *v87;
  id v88;
  char v89;
  void *v90;
  id v91;
  uint64_t v92;
  _QWORD *v93;
  void *v94;
  void *v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  UIPanGestureRecognizer *v104;
  char *v105;
  int64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int8 v109;
  int64_t v110;
  char v111;

  i = (uint64_t)v1;
  v104 = a1;
  v3 = type metadata accessor for Logger();
  v4 = *(_QWORD *)(v3 - 8);
  v101 = v3;
  v102 = v4;
  MEMORY[0x1E0C80A78](v3, v5);
  v103 = (char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v7, v8);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v19 = (char *)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v21 = (char *)(*(uint64_t (**)(double))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x88))(v17);
  if (v21)
  {
    v22 = *(_QWORD *(**)(int64_t *__return_ptr))((*v20 & *(_QWORD *)v21) + 0x2C8);
    v105 = v21;
    v23 = v22(&v106);
    if (v106 == 3)
    {
      (*(void (**)(int64_t *__return_ptr, _QWORD *))((*v20 & *v1) + 0x200))(&v106, v23);
      v24 = &selRef_setCanvasWidth_;
      if ((v106 & 2) != 0)
      {
        v30 = v105;
        goto LABEL_15;
      }
      if (-[UIPanGestureRecognizer state](v104, sel_state) != (id)1)
      {
        v30 = v105;
        goto LABEL_15;
      }
      v98 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
      v25 = *(_QWORD *)&v105[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
      if (!v25)
        goto LABEL_76;
      v26 = (uint64_t *)(v25 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
      v27 = v26[1];
      v99 = *v26;
      v100 = v27;
      v28 = *(void (**)(uint64_t))((*v20 & *(_QWORD *)i) + 0xE8);
      swift_bridgeObjectRetain();
      v29 = swift_bridgeObjectRetain();
      v28(v29);
      SharedTagged_9.tag.getter();
      v110 = v106;
      v111 = v107;
      MEMORY[0x1DF0E3408](v9);
      lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
      WeakTagged_9.init(_:id:)();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      LOBYTE(v27) = specialized Set.contains(_:)((uint64_t)v19, v99);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v27 & 1) != 0)
        goto LABEL_7;
      v31 = v98;
      v32 = *(_QWORD *)&v105[v98];
      if (!v32)
        goto LABEL_77;
      *(_BYTE *)(v32 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_suppressMiniMenu) = 1;
      if ((-[UIPanGestureRecognizer modifierFlags](v104, sel_modifierFlags) & 0x20000) == 0)
      {
        v33 = (id)i;
        v34 = specialized CanvasMembers.init(_:)(v33);
        v36 = v35;
        v38 = v37;
        i = v39;

        AnyCanvas.selection.setter(v34, v36, v38, i & 1);
        v30 = v105;
        goto LABEL_14;
      }
      v54 = *(_BYTE **)&v105[v31];
      if (!v54)
        goto LABEL_78;
      v55 = *(_QWORD *)&v54[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
      v56 = *(_QWORD *)&v54[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
      v57 = *(_QWORD *)&v54[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
      v58 = v54[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
      v106 = v55;
      v107 = v56;
      v108 = v57;
      v109 = v58;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v59 = v54;
      CanvasMembers.insert(_:)((_QWORD *)i);
      CanvasElementResizeView.selection.setter(v106, v107, v108, v109);

      v60 = *(_QWORD *)&v105[v31];
      v44 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      if (v60)
      {
        v61 = v60 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
        v63 = *(_QWORD *)v61;
        v62 = *(_QWORD *)(v61 + 8);
        v64 = *(_QWORD *)(v61 + 16);
        v65 = *(_BYTE *)(v61 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if ((specialized static Set.== infix(_:_:)(v55, v63) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_38;
        }
        i = specialized static Set.== infix(_:_:)(v56, v62);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((i & 1) == 0)
          goto LABEL_38;
        if ((v58 & 1) != 0)
        {
          if ((v65 & 1) == 0)
            goto LABEL_38;
        }
        else
        {
          if (v57 == v64)
            v89 = v65;
          else
            v89 = 1;
          if ((v89 & 1) != 0)
          {
LABEL_38:
            if (one-time initialization token for miniMenuLogger != -1)
              goto LABEL_72;
            goto LABEL_39;
          }
        }
LABEL_7:
        v30 = v105;
LABEL_14:
        v24 = &selRef_setCanvasWidth_;
        while (1)
        {
LABEL_15:
          v40 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
          v41 = *(void **)&v30[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
          if (!v41)
          {
            __break(1u);
            goto LABEL_75;
          }
          v42 = v41;
          i = (uint64_t)v104;
          v43 = ((unint64_t)objc_msgSend(v104, v24[371]) >> 17) & 1;
          v44 = v42;
          v45 = (id)i;
          specialized ResizeView.transformWithGesture(_:activeHandle:transform:)(v45, (void *)1, v44, v45, v44, v43);

          if (objc_msgSend(v45, sel_state) != (id)3)
          {
            if (objc_msgSend(v45, sel_state) != (id)4)
              goto LABEL_68;
LABEL_67:
            *((_BYTE *)v44 + OBJC_IVAR____TtC8PaperKit10ResizeView_dragConstainedAxis) = 0;
LABEL_68:

            v95 = *(void **)&v105[v40];
            if (v95)
            {
              v96 = v95;

              v96[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_suppressMiniMenu] = 0;
              return;
            }
LABEL_75:
            __break(1u);
LABEL_76:
            __break(1u);
LABEL_77:
            __break(1u);
LABEL_78:
            __break(1u);
            goto LABEL_79;
          }
          i = v44;
          v46 = swift_bridgeObjectRetain();
          v47 = specialized Sequence.compactMap<A>(_:)(v46, i);
          swift_bridgeObjectRelease();

          v103 = (char *)v40;
          if (v47 >> 62)
          {
            swift_bridgeObjectRetain();
            v48 = _CocoaArrayWrapper.endIndex.getter();
            if (!v48)
              goto LABEL_66;
          }
          else
          {
            v48 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (!v48)
              goto LABEL_66;
          }
          if (v48 >= 1)
          {
            for (i = 0; i != v48; ++i)
            {
              if ((v47 & 0xC000000000000001) != 0)
                v49 = (_QWORD *)MEMORY[0x1DF0E4D64](i, v47);
              else
                v49 = *(id *)(v47 + 8 * i + 32);
              v50 = v49;
              v51 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v49) + 0x2D0))();
              if (v51)
              {
                v52 = (void *)v51;
                v53 = *(_QWORD *)(v51 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics);
                swift_retain();

                *(_BYTE *)(v53 + 51) = 1;
                FormTextFieldAnalytics.recordEvent()();

                swift_release();
              }
              else
              {

              }
            }
LABEL_66:
            swift_bridgeObjectRelease_n();
            v40 = (uint64_t)v103;
            goto LABEL_67;
          }
          __break(1u);
LABEL_72:
          swift_once();
LABEL_39:
          v66 = v101;
          v67 = __swift_project_value_buffer(v101, (uint64_t)miniMenuLogger);
          v68 = v102;
          (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v103, v67, v66);
          i = v105;
          v69 = Logger.logObject.getter();
          v70 = static os_log_type_t.info.getter();
          v71 = os_log_type_enabled(v69, v70);
          v72 = v98;
          if (v71)
          {
            v73 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)v73 = 134217984;
            v74 = *(_QWORD *)&v105[v72];
            if (!v74)
              goto LABEL_81;
            v75 = *(_QWORD *)(*(_QWORD *)(v74 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection) + 16);

            v106 = v75;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            _os_log_impl(&dword_1DDB0F000, v69, v70, "Changing selection to have %ld elements", v73, 0xCu);
            MEMORY[0x1DF0E6558](v73, -1, -1);
            v68 = v102;
          }
          else
          {

            v69 = i;
          }

          v76 = (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v103, v66);
          MEMORY[0x1E0C80A78](v76, v77);
          *(&v97 - 2) = i;
          AnyCanvas.updateCanvasState(_:)();
          if ((objc_msgSend((id)i, sel_isFirstResponder) & 1) == 0)
          {
            v78 = *(void **)&v105[v72];
            if (!v78)
              goto LABEL_82;
            v79 = v78;
            v80 = swift_bridgeObjectRetain();
            v81 = specialized Sequence.compactMap<A>(_:)(v80, (uint64_t)v79);

            swift_bridgeObjectRelease();
            if (v81 >> 62)
            {
              swift_bridgeObjectRetain();
              v82 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              v82 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFF8) + 0x10);
            }
            v44 = (_QWORD *)MEMORY[0x1E0DEEDD8];
            swift_bridgeObjectRelease();
            if (v82)
              break;
          }
LABEL_59:
          v90 = *(void **)(i + OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView);
          if (v90)
          {
            v91 = v90;
            HandwritingReflowView.updateForNewSelection()();

          }
          (*(void (**)(void))((*v44 & *(_QWORD *)i) + 0x3A0))();
          v30 = v105;
          v92 = *(_QWORD *)&v105[v72];
          if (!v92)
            goto LABEL_80;
          v93 = (_QWORD *)(v92 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
          v24 = &selRef_setCanvasWidth_;
          if (!*(_QWORD *)(*v93 + 16) && !*(_QWORD *)(v93[1] + 16))
          {
            v24 = &selRef_setCanvasWidth_;
            v94 = (void *)(*(uint64_t (**)(void))((*v44 & *(_QWORD *)i) + 0x320))();
            objc_msgSend(v94, sel__clearSelectionIfNecessary);

            v30 = v105;
          }
        }
        v83 = (id)i;
        v84 = objc_msgSend(v83, sel_window);
        if (v84)
        {
          v85 = v84;
          v86 = objc_msgSend((id)objc_opt_self(), sel_activeToolPickerForWindow_, v84);
          if (v86)
          {
            v87 = v86;
            v88 = objc_msgSend(v86, sel__visibilityUpdatesEnabled);
            objc_msgSend(v87, sel__setVisibilityUpdatesEnabled_, 0);
            objc_msgSend(v83, sel_becomeFirstResponder);
            objc_msgSend(v87, sel__setVisibilityUpdatesEnabled_, v88);

            v83 = v87;
            v44 = (_QWORD *)MEMORY[0x1E0DEEDD8];
LABEL_58:

            goto LABEL_59;
          }

        }
        objc_msgSend(v83, sel_becomeFirstResponder);
        goto LABEL_58;
      }
LABEL_79:
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:

      __break(1u);
LABEL_82:
      __break(1u);
    }
    else
    {

    }
  }
}

Swift::Void __swiftcall CanvasElementView.updateGestures()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char v7;
  int v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t (*v18)(void);
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  char v31;
  uint64_t v32;
  void *v33;
  char v34;
  objc_class *v35;
  _BYTE *v36;
  _QWORD *v37;
  _BYTE *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  _QWORD *v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  id v49;
  objc_super v50;
  _QWORD v51[5];

  v1 = v0;
  v2 = *v0;
  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = *MEMORY[0x1E0DEEDD8];
  if ((AnyCanvasElementView.isEditingCanvasElement.getter() & 1) != 0
    || (v5 = MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement)) != 0
    && (v6 = (void *)v5, v7 = AnyCanvasElementView.isEditingCanvasElement.getter(), v6, (v7 & 1) != 0))
  {
    if (((*(uint64_t (**)(void))((*v3 & *v1) + 0x3E0))() & 1) != 0
      && !*(_QWORD *)((char *)v1 + *(_QWORD *)((*v3 & *v1) + 0x390)))
    {
      v51[0] = v1;
      v26 = objc_allocWithZone(MEMORY[0x1E0DC3D80]);
      type metadata accessor for CanvasElementView(0, *(_QWORD *)((v4 & v2) + 0x368), *(_QWORD *)((v4 & v2) + 0x370), *(_QWORD *)((v4 & v2) + 0x378));
      v27 = objc_msgSend(v26, sel_initWithTarget_action_, _bridgeAnythingToObjectiveC<A>(_:)(), sel_tapped_);
      swift_unknownObjectRelease();
      v28 = *(_QWORD *)((*v3 & *v1) + 0x390);
      v29 = *(void **)((char *)v1 + v28);
      *(_QWORD *)((char *)v1 + v28) = v27;

      v30 = *(void **)((char *)v1 + *(_QWORD *)((*v3 & *v1) + 0x390));
      if (v30)
        objc_msgSend(v30, sel_setDelegate_, v1);
      v51[3] = &type metadata for PencilAndPaperFeatureFlags;
      v51[4] = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
      LOBYTE(v51[0]) = 0;
      v31 = isFeatureEnabled(_:)();
      v32 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
      if ((v31 & 1) != 0)
      {
        if (!*(_QWORD *)((char *)v1 + *(_QWORD *)((*v3 & *v1) + 0x390)))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          goto LABEL_44;
        }
        objc_msgSend(v1, sel_addGestureRecognizer_);
        v33 = (void *)MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
        if (v33)
        {

          if ((AnyCanvasElementView.isEditingCanvasElement.getter() & 1) == 0)
          {
            v34 = (*(uint64_t (**)(void))((*v3 & *v1) + 0x308))();
            v35 = (objc_class *)type metadata accessor for PrecisePanGestureRecognizer();
            v36 = objc_allocWithZone(v35);
            *(_QWORD *)&v36[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_initialModifierFlags] = 0;
            v36[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
            swift_unknownObjectWeakInit();
            *(_QWORD *)&v36[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_touchesBeganTimestamp] = 0;
            *(_QWORD *)&v36[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_tapAndHoldTimeout] = 0x3FB999999999999ALL;
            v50.receiver = v36;
            v50.super_class = v35;
            v37 = v1;
            v38 = objc_msgSendSuper2(&v50, sel_initWithTarget_action_, 0, 0);
            v38[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = v34 & 1;
            swift_unknownObjectWeakAssign();

            v39 = *(_QWORD *)((*v3 & *v37) + 0x398);
            v40 = *(void **)((char *)v37 + v39);
            *(_QWORD *)((char *)v37 + v39) = v38;

            v41 = *v3 & *v37;
            v42 = *(void **)((char *)v37 + *(_QWORD *)(v41 + 0x398));
            if (v42)
            {
              objc_msgSend(v42, sel_setDelegate_, v37);
              v41 = *v3 & *v37;
            }
            v43 = *(void **)((char *)v37 + *(_QWORD *)(v41 + 920));
            if (v43)
            {
              objc_msgSend(v43, sel_addTarget_action_, v37, sel_dragMoved_);
              v41 = *v3 & *v37;
            }
            if (!*(_QWORD *)((char *)v37 + *(_QWORD *)(v41 + 920)))
              goto LABEL_43;
            objc_msgSend(v37, sel_addGestureRecognizer_);
          }
        }
      }
      else
      {
        v44 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*v3 & *v1) + 0x88))(v32);
        if (v44)
        {
          v45 = v44;
          v46 = (void *)(*(uint64_t (**)(void))((*v3 & *v44) + 0x320))();

          if (v46)
          {
            v47 = objc_msgSend(v46, sel_canvasView);

            if (v47)
            {
              v48 = objc_msgSend(v47, sel_drawingGestureRecognizer);

              v49 = objc_msgSend(v48, sel_view);
              if (v49)
              {
                if (!*(_QWORD *)((char *)v1 + *(_QWORD *)((*v3 & *v1) + 0x390)))
                {
LABEL_44:
                  __break(1u);
                  return;
                }
                objc_msgSend(v49, sel_addGestureRecognizer_);

              }
            }
          }
        }
      }
      goto LABEL_15;
    }
    if (((*(uint64_t (**)(void))((*v3 & *v1) + 0x3E0))() & 1) != 0)
      goto LABEL_15;
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  v9 = *v3 & *v1;
  v10 = *(void **)((char *)v1 + *(_QWORD *)(v9 + 0x390));
  if (v10)
  {
    v11 = v10;
    objc_msgSend(v1, sel_removeGestureRecognizer_, v11);
    v12 = *(_QWORD *)((*v3 & *v1) + 0x390);
    v13 = *(void **)((char *)v1 + v12);
    *(_QWORD *)((char *)v1 + v12) = 0;

    v9 = *v3 & *v1;
  }
  v14 = *(void **)((char *)v1 + *(_QWORD *)(v9 + 920));
  if (!v14)
  {
    if (!v8)
      goto LABEL_18;
    goto LABEL_15;
  }
  v15 = v14;
  objc_msgSend(v1, sel_removeGestureRecognizer_, v15);
  v16 = *(_QWORD *)((*v3 & *v1) + 0x398);
  v17 = *(void **)((char *)v1 + v16);
  *(_QWORD *)((char *)v1 + v16) = 0;

  if ((v8 & 1) != 0)
  {
LABEL_15:
    v18 = *(uint64_t (**)(void))((*v3 & *v1) + 0x3E8);
    if ((v18() & 1) == 0 || *(_QWORD *)((char *)v1 + *(_QWORD *)((*v3 & *v1) + 0x3A0)))
    {
      if ((v18() & 1) != 0)
        return;
      goto LABEL_18;
    }
    v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC36C0]), sel_initWithDelegate_, v1);
    v24 = *(_QWORD *)((*v3 & *v1) + 0x3A0);
    v25 = *(void **)((char *)v1 + v24);
    *(_QWORD *)((char *)v1 + v24) = v23;

    if (*(_QWORD *)((char *)v1 + *(_QWORD *)((*v3 & *v1) + 0x3A0)))
    {
      objc_msgSend(v1, sel_addInteraction_);
      return;
    }
    __break(1u);
    goto LABEL_42;
  }
LABEL_18:
  v19 = *(void **)((char *)v1 + *(_QWORD *)((*v3 & *v1) + 0x3A0));
  if (v19)
  {
    v20 = v19;
    objc_msgSend(v1, sel_removeInteraction_, v20);
    v21 = *(_QWORD *)((*v3 & *v1) + 0x3A0);
    v22 = *(void **)((char *)v1 + v21);
    *(_QWORD *)((char *)v1 + v21) = 0;

  }
}

Swift::String_optional __swiftcall CanvasElementView.accessibilityDescription()()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  void *v14;
  Swift::String_optional result;

  v0 = specialized CanvasElementView.accessibilityDescriptionForAttribute(_:)(2);
  v2 = v1;
  v3 = specialized CanvasElementView.accessibilityDescriptionForAttribute(_:)(1);
  v5 = v4;
  v6 = specialized CanvasElementView.accessibilityDescriptionForAttribute(_:)(0);
  v8 = v7;
  v9._countAndFlagsBits = 8236;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = v3;
  v10._object = v5;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 8236;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = v6;
  v12._object = v8;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13 = v0;
  v14 = v2;
  result.value._object = v14;
  result.value._countAndFlagsBits = v13;
  return result;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, unint64_t, uint64_t);
  char v13;
  uint64_t v15;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v16 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D11EE0]), v7 = dispatch thunk of Hashable._rawHashValue(seed:)(), v8 = -1 << *(_BYTE *)(a2 + 32), v9 = v7 & ~v8, ((*(_QWORD *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    v10 = ~v8;
    v11 = *(_QWORD *)(v16 + 72);
    v12 = *(void (**)(char *, unint64_t, uint64_t))(v16 + 16);
    do
    {
      v12(v6, *(_QWORD *)(a2 + 48) + v11 * v9, v3);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D11EE8]);
      v13 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v3);
      if ((v13 & 1) != 0)
        break;
      v9 = (v9 + 1) & v10;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, unint64_t, uint64_t);
  char v13;
  uint64_t v15;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v16 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12B78]), v7 = dispatch thunk of Hashable._rawHashValue(seed:)(), v8 = -1 << *(_BYTE *)(a2 + 32), v9 = v7 & ~v8, ((*(_QWORD *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    v10 = ~v8;
    v11 = *(_QWORD *)(v16 + 72);
    v12 = *(void (**)(char *, unint64_t, uint64_t))(v16 + 16);
    do
    {
      v12(v6, *(_QWORD *)(a2 + 48) + v11 * v9, v3);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12B80]);
      v13 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v3);
      if ((v13 & 1) != 0)
        break;
      v9 = (v9 + 1) & v10;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, unint64_t, uint64_t);
  char v13;
  uint64_t v15;
  uint64_t v16;

  v3 = type metadata accessor for CRKeyPath();
  v16 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (lazy protocol witness table accessor for type CRKeyPath and conformance CRKeyPath((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x1E0D12C88]), v7 = dispatch thunk of Hashable._rawHashValue(seed:)(), v8 = -1 << *(_BYTE *)(a2 + 32), v9 = v7 & ~v8, ((*(_QWORD *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    v10 = ~v8;
    v11 = *(_QWORD *)(v16 + 72);
    v12 = *(void (**)(char *, unint64_t, uint64_t))(v16 + 16);
    do
    {
      v12(v6, *(_QWORD *)(a2 + 48) + v11 * v9, v3);
      lazy protocol witness table accessor for type CRKeyPath and conformance CRKeyPath((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, MEMORY[0x1E0D12C90]);
      v13 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v3);
      if ((v13 & 1) != 0)
        break;
      v9 = (v9 + 1) & v10;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t specialized Set.contains(_:)(void *a1, uint64_t a2)
{
  id v3;
  char v4;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  char v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  id v15;

  if ((a2 & 0xC000000000000001) != 0)
  {
    v3 = a1;
    v4 = __CocoaSet.contains(_:)();

    return v4 & 1;
  }
  if (!*(_QWORD *)(a2 + 16)
    || (v6 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40)),
        v7 = -1 << *(_BYTE *)(a2 + 32),
        v8 = v6 & ~v7,
        v9 = a2 + 56,
        ((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0))
  {
LABEL_11:
    v12 = 0;
    return v12 & 1;
  }
  type metadata accessor for NSObject();
  v10 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v8);
  v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    v13 = ~v7;
    v14 = (v8 + 1) & v13;
    if (((*(_QWORD *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
    {
      do
      {
        v15 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v14);
        v12 = static NSObject.== infix(_:_:)();

        if ((v12 & 1) != 0)
          break;
        v14 = (v14 + 1) & v13;
      }
      while (((*(_QWORD *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
      return v12 & 1;
    }
    goto LABEL_11;
  }
  v12 = 1;
  return v12 & 1;
}

uint64_t CanvasElementView.sharedCanvasElement.getter@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v3 = *MEMORY[0x1E0DEEDD8] & *v1;
  v4 = type metadata accessor for Capsule();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v10 - v7;
  CanvasElementView.canvasElement.getter((uint64_t)&v10 - v7);
  Capsule<>.sharedCanvasElement.getter(v4, *(_QWORD *)(v3 + 888), a1);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t CanvasElementView.flags.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v10[4];

  v1 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v0);
  v2 = v1[109];
  v3 = v1[110];
  v4 = type metadata accessor for Capsule();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v10 - v7;
  CanvasElementView.canvasElement.getter((uint64_t)v10 - v7);
  v10[0] = v2;
  v10[1] = v3;
  v10[2] = v1[111];
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t CanvasElementView.flags.setter()
{
  _QWORD *v0;
  _QWORD *v1;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  swift_beginAccess();
  type metadata accessor for Capsule();
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  CanvasElementView.commitWithoutStateChange()();
  return (*(uint64_t (**)(void))((*v1 & *v0) + 0x488))();
}

uint64_t (*CanvasElementView.flags.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)(a1 + 8) = v1;
  CanvasElementView.flags.getter();
  return CanvasElementView.flags.modify;
}

uint64_t CanvasElementView.flags.modify()
{
  return CanvasElementView.flags.setter();
}

void CanvasElementView.snapshotCanvasElement.didset()
{
  _QWORD *v0;
  uint64_t v1;
  id v2;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
  if (v1)
  {
    v2 = (id)v1;
    specialized LiveEditable.didChangeLiveEditing()();

  }
}

void @objc CanvasElementView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  specialized CanvasElementView.init(coder:)();
}

void __swiftcall CanvasElementView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  _QWORD *v3;
  void *v4;
  Class isa;
  double y;
  double x;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  objc_class *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  CGFloat v30;
  double MidX;
  double MidY;
  CGFloat v33;
  CGFloat tx;
  CGFloat ty;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGPathRef v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  id v48;
  __int128 v49;
  __int128 v50;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  CGFloat v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  objc_super v59;
  CGAffineTransform v60;
  double v61;
  CGAffineTransform t2;
  CGAffineTransform t1;
  uint64_t v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;

  v4 = v3;
  isa = with.value.super.isa;
  y = _.y;
  x = _.x;
  v64 = *MEMORY[0x1E0C80C00];
  v8 = *MEMORY[0x1E0DEEDD8] & *v3;
  v58 = type metadata accessor for CGPathFillRule();
  v57 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58, v9);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v8 + 872);
  v13 = *(_QWORD *)(v8 + 880);
  v14 = type metadata accessor for Capsule();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v49 - v17;
  if (((*(uint64_t (**)(double, double))(v8 + 192))(x, y) & 1) == 0
    || (v19 = (objc_class *)type metadata accessor for CanvasElementView(0, v12, v13, *(_QWORD *)(v8 + 888)),
        v59.receiver = v3,
        v59.super_class = v19,
        !-[UIView_optional hitTest:withEvent:](&v59, sel_hitTest_withEvent_, isa, x, y)))
  {
    objc_msgSend(v3, sel_bounds);
    v21 = v20;
    v23 = v22;
    v25 = v24;
    v27 = v26;
    v28 = CanvasElementView.canvasElement.getter((uint64_t)v18);
    MEMORY[0x1E0C80A78](v28, v29);
    *((_QWORD *)&v49 - 4) = v12;
    *((_QWORD *)&v49 - 3) = v13;
    *((_QWORD *)&v49 - 2) = *(_QWORD *)(v8 + 888);
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    v30 = v61;
    v54 = v21 - v25 * 0.0;
    v53 = v23 - v27 * 0.0;
    v65.origin.x = v21;
    v65.origin.y = v23;
    v65.size.width = v25;
    v51 = v25;
    v65.size.height = v27;
    v52 = v27;
    MidX = CGRectGetMidX(v65);
    v66.origin.x = v21;
    v66.origin.y = v23;
    v66.size.width = v25;
    v66.size.height = v27;
    MidY = CGRectGetMidY(v66);
    CGAffineTransformMakeRotation(&t1, v30);
    v50 = *(_OWORD *)&t1.a;
    v49 = *(_OWORD *)&t1.c;
    v33 = -MidY;
    tx = t1.tx;
    ty = t1.ty;
    CGAffineTransformMakeTranslation(&t1, -MidX, v33);
    a = t1.a;
    b = t1.b;
    v56 = y;
    v55 = x;
    c = t1.c;
    d = t1.d;
    v40 = t1.tx;
    v41 = t1.ty;
    *(_OWORD *)&t2.a = v50;
    *(_OWORD *)&t2.c = v49;
    t2.tx = tx;
    t2.ty = ty;
    CGAffineTransformConcat(&v60, &t1, &t2);
    v50 = *(_OWORD *)&v60.a;
    v49 = *(_OWORD *)&v60.c;
    v42 = v60.tx;
    v43 = v60.ty;
    t1.a = a;
    t1.b = b;
    t1.c = c;
    t1.d = d;
    t1.tx = v40;
    t1.ty = v41;
    CGAffineTransformInvert(&t2, &t1);
    *(_OWORD *)&t1.a = v50;
    *(_OWORD *)&t1.c = v49;
    t1.tx = v42;
    t1.ty = v43;
    CGAffineTransformConcat(&v60, &t1, &t2);
    t1.a = v51;
    t1.b = 0.0;
    t1.c = 0.0;
    t1.d = v52;
    t1.tx = v54;
    t1.ty = v53;
    t2 = v60;
    CGAffineTransformConcat(&v60, &t1, &t2);
    t2 = v60;
    v67.origin.x = 0.0;
    v67.origin.y = 0.0;
    v67.size.width = 1.0;
    v67.size.height = 1.0;
    v44 = CGPathCreateWithRect(v67, &t2);
    v45 = v57;
    v46 = v58;
    (*(void (**)(char *, _QWORD, uint64_t))(v57 + 104))(v11, *MEMORY[0x1E0C9B8A0], v58);
    t1.a = 1.0;
    t1.b = 0.0;
    t1.c = 0.0;
    t1.d = 1.0;
    t1.tx = 0.0;
    t1.ty = 0.0;
    v47 = CGPathRef.contains(_:using:transform:)();

    (*(void (**)(char *, uint64_t))(v45 + 8))(v11, v46);
    if ((v47 & 1) != 0)
      v48 = v4;
  }
}

id @objc CanvasElementView.hitTest(_:with:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  UIView_optional *v11;
  void *v12;
  void *v13;
  UIEvent_optional v15;

  v9 = a5;
  v10 = a1;
  v15.value.super.isa = (Class)a5;
  CanvasElementView.hitTest(_:with:)(v11, (CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), v15);
  v13 = v12;

  return v13;
}

void @objc CanvasElementView.tapped(_:)(void *a1, uint64_t a2, void *a3)
{
  UITapGestureRecognizer *v4;
  id v5;

  v4 = a3;
  v5 = a1;
  CanvasElementView.tapped(_:)(v4);

}

uint64_t @objc CanvasElementView.gestureRecognizerShouldBegin(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  LOBYTE(a1) = specialized CanvasElementView.gestureRecognizerShouldBegin(_:)();

  return a1 & 1;
}

void @objc CanvasElementView.dragMoved(_:)(void *a1, uint64_t a2, void *a3)
{
  UIPanGestureRecognizer *v4;
  id v5;

  v4 = a3;
  v5 = a1;
  CanvasElementView.dragMoved(_:)(v4);

}

UIContextMenuConfiguration_optional __swiftcall CanvasElementView.contextMenuInteraction(_:configurationForMenuAtLocation:)(UIContextMenuInteraction _, CGPoint configurationForMenuAtLocation)
{
  _QWORD *v2;
  double y;
  double x;
  _QWORD *v6;
  _QWORD *v7;
  Swift::Bool v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  objc_class *v19;
  objc_class *v20;
  objc_class *v21;
  uint64_t v22;
  UIContextMenuConfiguration_optional result;

  y = configurationForMenuAtLocation.y;
  x = configurationForMenuAtLocation.x;
  v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v7 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x88))();
  if (!v7)
    goto LABEL_6;
  v9 = v7;
  v10 = (*(_QWORD *(**)(uint64_t *__return_ptr))((*v6 & *v7) + 0x2C8))(&v22);
  if (v22 != 3 || ((*(uint64_t (**)(_QWORD *))((*v6 & *v2) + 0x228))(v10) & 1) == 0)
  {

LABEL_6:
    v21 = 0;
    goto LABEL_7;
  }
  v11 = v2;
  v12 = specialized CanvasMembers.init(_:)(v11);
  v14 = v13;
  v16 = v15;
  v18 = v17;

  AnyCanvas.contextMenuInteraction(_:members:configurationForMenuAtLocation:)((uint64_t)_.super.isa, v12, v14, v16, v18 & 1, x, y);
  v20 = v19;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = v20;
LABEL_7:
  result.value.super.isa = v21;
  result.is_nil = v8;
  return result;
}

id @objc CanvasElementView.contextMenuInteraction(_:configurationForMenuAtLocation:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v8;
  id v9;
  void *v10;

  v8 = a5;
  v9 = a1;
  v10 = (void *)CanvasElementView.contextMenuInteraction(_:configurationForMenuAtLocation:)((UIContextMenuInteraction)v8, (CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2));

  return v10;
}

void CanvasElementView.contextMenuInteraction(_:willDisplayMenuFor:animator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  objc_class *v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  objc_super v36;

  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v8 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *v3);
  v9 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v9, v10);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v31 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v29 = *(_QWORD *)(v15 - 8);
  v30 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (objc_class *)type metadata accessor for CanvasElementView(0, v8[109], v8[110], v8[111]);
  v36.receiver = v3;
  v36.super_class = v19;
  v20 = objc_msgSendSuper2(&v36, sel_contextMenuInteraction_willDisplayMenuForConfiguration_animator_, a1, a2, a3);
  v21 = (*(uint64_t (**)(id))((*v7 & *v3) + 0x88))(v20);
  if (v21)
  {
    v22 = (void *)v21;
    v23 = *(_QWORD *)(v21 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    if (v23)
    {
      v24 = *(_QWORD *)(v23 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
      v25 = *(void (**)(uint64_t))((*v7 & *v3) + 0xE8);
      swift_bridgeObjectRetain();
      v26 = swift_bridgeObjectRetain();
      v25(v26);
      SharedTagged_9.tag.getter();
      v32 = v34;
      v33 = v35;
      MEMORY[0x1DF0E3408](v11);
      lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
      WeakTagged_9.init(_:id:)();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v11);
      v27 = specialized Set.contains(_:)((uint64_t)v18, v24);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v18, v30);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v27 & 1) == 0)
        AnyCanvas.selectedCanvasElementIds.setter(MEMORY[0x1E0DEE9D8]);

    }
    else
    {
      __break(1u);
    }
  }
}

void @objc CanvasElementView.contextMenuInteraction(_:willDisplayMenuFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  @objc CanvasElementView.contextMenuInteraction(_:willDisplayMenuFor:animator:)(a1, a2, a3, a4, a5, (void (*)(id, id, uint64_t))CanvasElementView.contextMenuInteraction(_:willDisplayMenuFor:animator:));
}

id CanvasElementView.contextMenuInteraction(_:willEndFor:animator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  objc_class *v7;
  objc_super v9;

  v7 = (objc_class *)type metadata accessor for CanvasElementView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x368), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x370), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x378));
  v9.receiver = v3;
  v9.super_class = v7;
  return objc_msgSendSuper2(&v9, sel_contextMenuInteraction_willEndForConfiguration_animator_, a1, a2, a3);
}

void @objc CanvasElementView.contextMenuInteraction(_:willEndFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  @objc CanvasElementView.contextMenuInteraction(_:willDisplayMenuFor:animator:)(a1, a2, a3, a4, a5, (void (*)(id, id, uint64_t))CanvasElementView.contextMenuInteraction(_:willEndFor:animator:));
}

void @objc CanvasElementView.contextMenuInteraction(_:willDisplayMenuFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void (*a6)(id, id, uint64_t))
{
  id v10;
  id v11;
  id v12;

  v10 = a3;
  v11 = a4;
  swift_unknownObjectRetain();
  v12 = a1;
  a6(v10, v11, a5);

  swift_unknownObjectRelease();
}

uint64_t closure #3 in CanvasElementView.setupAccessibility()(uint64_t a1, uint64_t (*a2)(double))
{
  return a2(15.0) & 1;
}

uint64_t closure #4 in CanvasElementView.setupAccessibility()(uint64_t a1, uint64_t (*a2)(double))
{
  return a2(-15.0) & 1;
}

uint64_t closure #5 in CanvasElementView.setupAccessibility()(uint64_t a1, uint64_t (*a2)(double))
{
  return a2(1.1) & 1;
}

uint64_t closure #6 in CanvasElementView.setupAccessibility()(uint64_t a1, uint64_t (*a2)(double))
{
  return a2(0.9) & 1;
}

id CanvasElementView.isSelected.didset()
{
  _QWORD *v0;
  char v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x228))();
  v2 = *MEMORY[0x1E0DC46B0];
  v3 = (unint64_t)objc_msgSend(v0, sel_accessibilityTraits);
  if ((v3 & v2) == v2)
    v4 = 0;
  else
    v4 = v2;
  v5 = v4 | v3;
  v6 = -1;
  if ((v3 & v2) != 0)
    v6 = ~v2;
  v7 = v6 & v3;
  if ((v1 & 1) != 0)
    v8 = v5;
  else
    v8 = v7;
  return objc_msgSend(v0, sel_setAccessibilityTraits_, v8);
}

void CanvasElementView.__ivar_destroyer()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380);
  v3 = type metadata accessor for Capsule();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  v4 = (char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x388);
  v5 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

}

id CanvasElementView.__deallocating_deinit()
{
  _QWORD *v0;
  objc_class *v1;
  objc_super v3;

  v1 = (objc_class *)type metadata accessor for CanvasElementView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x368), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x370), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x378));
  v3.receiver = v0;
  v3.super_class = v1;
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

void @objc CanvasElementView.__ivar_destroyer(_QWORD *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x380);
  v4 = type metadata accessor for Capsule();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = (char *)a1 + *(_QWORD *)((*v2 & *a1) + 0x388);
  v6 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);

}

uint64_t type metadata accessor for CanvasElementView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CanvasElementView);
}

void specialized CanvasElementView.snapshotCanvasElement.setter(uint64_t a1)
{
  _QWORD *v1;
  char *v3;
  uint64_t v4;

  v3 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x388);
  swift_beginAccess();
  type metadata accessor for Capsule();
  v4 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(v3, a1, v4);
  swift_endAccess();
  CanvasElementView.snapshotCanvasElement.didset();
}

void specialized CanvasElementView.init(coder:)()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x388);
  v3 = type metadata accessor for Capsule();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *(_QWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x390)) = 0;
  *(_QWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x398)) = 0;
  *(_QWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x3A0)) = 0;
  *(_QWORD *)((char *)v0 + *(_QWORD *)((*v1 & *v0) + 0x3A8)) = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

BOOL specialized CanvasElementView.gestureRecognizerShouldBegin(_:)()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  _BOOL8 result;
  uint64_t v5;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
  result = 0;
  if (v2)
  {
    v3 = v2;
    (*(void (**)(uint64_t *__return_ptr))((*v1 & *v2) + 0x2C8))(&v5);

    if ((_BYTE)v5)
      return 1;
  }
  return result;
}

void sub_1DDED5F80(uint64_t a1@<X1>, uint64_t a2@<X2>, double *a3@<X8>)
{
  *a3 = (*(double (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 32))(*(_QWORD *)(a2 + a1 - 24));
}

uint64_t sub_1DDED5FBC(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, double))(*(_QWORD *)(a4 + a3 - 8) + 40))(*(_QWORD *)(a4 + a3 - 24), *(_QWORD *)(a4 + a3 - 8), *a1);
}

uint64_t sub_1DDED5FF8()
{
  return 24;
}

__n128 sub_1DDED6004(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #1 in CanvasElementView.flags.setter()
{
  swift_getKeyPath();
  return Capsule.Ref<>.subscript.setter();
}

uint64_t sub_1DDED60A8()
{
  return 24;
}

__n128 sub_1DDED60B4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t outlined destroy of CapsuleUndoAction?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in CanvasElementView.modelCoordinateSpace.setter()
{
  swift_getKeyPath();
  return Capsule.Ref<>.subscript.setter();
}

uint64_t sub_1DDED61A4()
{
  return 24;
}

__n128 sub_1DDED61B0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #1 in CanvasElementView.modelFrame.setter()
{
  swift_getKeyPath();
  return Capsule.Ref<>.subscript.setter();
}

uint64_t sub_1DDED6268()
{
  return 24;
}

__n128 sub_1DDED6274(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

CGSize __swiftcall NSItemProvider.preferredSizeForCanvasElement()()
{
  void *v0;
  double v1;
  double v2;
  double v3;
  BOOL v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  CGSize result;

  objc_msgSend(v0, sel_preferredPresentationSize);
  if (v2 != 0.0 || (v3 = 0.0, v4 = v1 == 0.0, v5 = 0.0, !v4))
  {
    objc_msgSend(v0, sel_preferredPresentationSize);
    v8 = v7;
    if (v7 >= 64.0)
    {
      v9 = v6;
    }
    else
    {
      if (one-time initialization token for canvasElementDefaultSize != -1)
        swift_once();
      v8 = *(double *)&static UIConstants.canvasElementDefaultSize;
      v9 = unk_1F042ED20;
    }
    if (v8 > v9)
      v10 = v8;
    else
      v10 = v9;
    if (one-time initialization token for maximumDropCanvasElementDimension != -1)
      swift_once();
    v11 = fmin(*(double *)&static UIConstants.maximumDropCanvasElementDimension / v10, 1.0);
    v3 = v8 * v11;
    v5 = v9 * v11;
  }
  result.height = v5;
  result.width = v3;
  return result;
}

void __swiftcall CanvasElementResizeView.hitTestMiniMenu(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  char *v3;
  char *v4;
  objc_class *isa;
  CGFloat y;
  CGFloat x;
  UIView *v8;
  UIView_optional *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  char *v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  UIEvent_optional v25;

  v4 = v3;
  isa = with.value.super.isa;
  y = _.y;
  x = _.x;
  if ((objc_msgSend(v4, sel_isHidden) & 1) != 0)
    return;
  if (!*(_QWORD *)&v4[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_miniMenuController])
    return;
  swift_retain();
  v25.value.super.isa = isa;
  v25.is_nil = (char)v4;
  MiniMenuController.hitTestMenu(_:with:sendingView:)(v9, (CGPoint)__PAIR128__(*(unint64_t *)&y, *(unint64_t *)&x), v25, v8);
  v11 = v10;
  swift_release();
  if (!v11)
    return;
  v12 = v4;
  v13 = swift_bridgeObjectRetain();
  v14 = specialized Sequence.compactMap<A>(_:)(v13, (uint64_t)v12);
  swift_bridgeObjectRelease();

  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15)
      goto LABEL_22;
  }
  else
  {
    v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      goto LABEL_22;
  }
  if ((v14 & 0xC000000000000001) != 0)
  {
    v16 = (_QWORD *)MEMORY[0x1DF0E4D64](0, v14);
  }
  else
  {
    if (!*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_21;
    }
    v16 = *(id *)(v14 + 32);
  }
  v17 = v16;
  v18 = swift_bridgeObjectRelease();
  v19 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v17) + 0x100))(v18);

  if ((v19 & 1) == 0)
    return;
  v20 = v12;
  v21 = swift_bridgeObjectRetain();
  v15 = specialized Sequence.compactMap<A>(_:)(v21, (uint64_t)v20);
  swift_bridgeObjectRelease();

  if (v15 >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain();
    v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v24)
      goto LABEL_12;
LABEL_22:
    swift_bridgeObjectRelease();
    return;
  }
  if (!*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_22;
LABEL_12:
  if ((v15 & 0xC000000000000001) != 0)
  {
    v22 = (id)MEMORY[0x1DF0E4D64](0, v15);
    goto LABEL_15;
  }
  if (*(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v22 = *(id *)(v15 + 32);
LABEL_15:
    v23 = v22;
    swift_bridgeObjectRelease();
    objc_msgSend(v23, sel_resignFirstResponder);

    return;
  }
  __break(1u);
}

uint64_t protocol witness for MiniMenuControllerDelegate.miniMenuCut() in conformance CanvasElementResizeView()
{
  return CanvasElementResizeView.miniMenuCut()(0);
}

uint64_t protocol witness for MiniMenuControllerDelegate.miniMenuCopy() in conformance CanvasElementResizeView()
{
  return CanvasElementResizeView.miniMenuCut()(1);
}

uint64_t protocol witness for MiniMenuControllerDelegate.miniMenuPaste() in conformance CanvasElementResizeView()
{
  return CanvasElementResizeView.miniMenuCut()(2);
}

uint64_t protocol witness for MiniMenuControllerDelegate.miniMenuDuplicate() in conformance CanvasElementResizeView()
{
  return CanvasElementResizeView.miniMenuCut()(3);
}

uint64_t protocol witness for MiniMenuControllerDelegate.miniMenuDelete() in conformance CanvasElementResizeView()
{
  return CanvasElementResizeView.miniMenuCut()(4);
}

uint64_t protocol witness for MiniMenuControllerDelegate.miniMenuConvertTextToHandwriting() in conformance CanvasElementResizeView()
{
  return CanvasElementResizeView.miniMenuCut()(5);
}

uint64_t CanvasElementResizeView.miniMenuCut()(char a1)
{
  uint64_t v1;
  uint64_t result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (result)
  {
    v4 = (void *)result;
    v5 = v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
    v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8);
    v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16);
    v9 = *(unsigned __int8 *)(v5 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    AnyCanvas.performSelectionAction(_:_:at:)(a1, v6, v7, v8, v9, 0);

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *protocol witness for MiniMenuControllerDelegate.miniMenuRemoveBackground() in conformance CanvasElementResizeView()
{
  uint64_t v0;
  _QWORD *result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  result = (_QWORD *)MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (result)
  {
    v2 = result;
    v3 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
    v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8);
    v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16);
    v7 = *(unsigned __int8 *)(v3 + 24);
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *result) + 0x438);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8(v4, v5, v6, v7);

    swift_bridgeObjectRelease();
    return (_QWORD *)swift_bridgeObjectRelease();
  }
  return result;
}

void protocol witness for MiniMenuControllerDelegate.miniMenuRegenerateMagicGenerativePlayground() in conformance CanvasElementResizeView()
{
  CanvasElementResizeView.miniMenuRegenerateMagicGenerativePlayground()((uint64_t)&unk_1EA854F68, (uint64_t)&async function pointer to partial apply for closure #1 in CanvasElementResizeView.miniMenuRegenerateMagicGenerativePlayground());
}

void protocol witness for MiniMenuControllerDelegate.miniMenuGenerateMagicGenerativePlaygroundForSelection() in conformance CanvasElementResizeView()
{
  CanvasElementResizeView.miniMenuRegenerateMagicGenerativePlayground()((uint64_t)&unk_1EA854F40, (uint64_t)&async function pointer to partial apply for closure #1 in CanvasElementResizeView.miniMenuGenerateMagicGenerativePlaygroundForSelection());
}

void CanvasElementResizeView.miniMenuRegenerateMagicGenerativePlayground()(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  id v11;
  unsigned __int8 v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v6 = MEMORY[0x1E0C80A78](v4, v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend(v2, sel_window, v6);
  if (!v9
    || (v10 = v9,
        v11 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance),
        v12 = objc_msgSend(v11, sel_presentGreymatterAvailabilityAlertControllerInWindow_, v10),
        v11,
        v10,
        (v12 & 1) == 0))
  {
    v13 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 1, 1, v13);
    type metadata accessor for MainActor();
    v14 = v2;
    v15 = static MainActor.shared.getter();
    v16 = (_QWORD *)swift_allocObject();
    v17 = MEMORY[0x1E0DF06E8];
    v16[2] = v15;
    v16[3] = v17;
    v16[4] = v14;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5((uint64_t)v8, a2, (uint64_t)v16);
    swift_release();
  }
}

uint64_t protocol witness for MiniMenuControllerDelegate.miniMenuSendFeedback(action:) in conformance CanvasElementResizeView(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;

  v3 = type metadata accessor for FBKSEvaluation.Action();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x1E0C80A78](v3, v6);
  v7 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, a1, v3);
  type metadata accessor for MainActor();
  v13 = v1;
  v14 = static MainActor.shared.getter();
  v15 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v16 = (char *)swift_allocObject();
  v17 = MEMORY[0x1E0DF06E8];
  *((_QWORD *)v16 + 2) = v14;
  *((_QWORD *)v16 + 3) = v17;
  *((_QWORD *)v16 + 4) = v13;
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(&v16[v15], v7, v3);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for closure #1 in CanvasElementResizeView.miniMenuSendFeedback(action:), (uint64_t)v16);
  return swift_release();
}

_QWORD *protocol witness for MiniMenuControllerDelegate.miniMenuDebug() in conformance CanvasElementResizeView()
{
  uint64_t v0;
  _QWORD *result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  result = (_QWORD *)MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (result)
  {
    v2 = result;
    v3 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
    v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8);
    v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16);
    v7 = *(unsigned __int8 *)(v3 + 24);
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *result) + 0x440);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8(v4, v5, v6, v7);

    swift_bridgeObjectRelease();
    return (_QWORD *)swift_bridgeObjectRelease();
  }
  return result;
}

void protocol witness for MiniMenuControllerDelegate.miniMenuDebugReadOnly() in conformance CanvasElementResizeView()
{
  CanvasElementResizeView.miniMenuDebugReadOnly()(2, 0);
}

void protocol witness for MiniMenuControllerDelegate.miniMenuDebugSetSyntheticStrokes() in conformance CanvasElementResizeView()
{
  CanvasElementResizeView.miniMenuDebugReadOnly()(0, 0x10000000000);
}

void CanvasElementResizeView.miniMenuDebugReadOnly()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  v5 = (_QWORD *)MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (v5)
  {
    v6 = v5;
    v13 = a1;
    v7 = v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
    v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
    v9 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8);
    v10 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16);
    v11 = *(unsigned __int8 *)(v7 + 24);
    v12 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v5)
                                                                                        + 0x448);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(&v13, a2, v8, v9, v10, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

  }
}

void *CanvasElementResizeView.viewControllerForPresentingMiniMenu.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void **v4;
  void *v5;
  id v6;
  _QWORD *v7;
  void *v8;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas;
  v2 = MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (!v2
    || (v3 = (void *)v2,
        v4 = (void **)(v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_overlayViewControllerForPresentingUI),
        swift_beginAccess(),
        v5 = *v4,
        v6 = v5,
        v3,
        !v5))
  {
    v7 = (_QWORD *)MEMORY[0x1DF0E666C](v1);
    if (v7)
    {
      v8 = v7;
      v5 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v7) + 0x608))();

    }
    else
    {
      return 0;
    }
  }
  return v5;
}

char *CanvasElementResizeView.viewForContainingMiniMenu.getter()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id *v3;
  id v4;
  id v5;
  id v6;

  v1 = MEMORY[0x1DF0E666C](&v0[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (!v1)
    return v0;
  v2 = (void *)v1;
  v3 = (id *)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_overlayViewControllerForPresentingUI);
  swift_beginAccess();
  v4 = *v3;
  v5 = *v3;

  if (!v4)
    return v0;
  v6 = objc_msgSend(v5, sel_viewForOverlay);

  return (char *)v6;
}

uint64_t CanvasElementResizeView.shouldShowMiniMenu.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char v5;
  char v6;

  v1 = v0;
  v2 = MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (v2)
  {
    v3 = (void *)v2;
    if ((*(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection) + 16)
       || (v4 = *(_QWORD *)(CanvasElementResizeView.resizingStrokes.getter() + 16), swift_bridgeObjectRelease(), v4))
      && !*(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle))
    {
      v5 = AnyCanvas.isEditingTextBox.getter();

      if ((v5 & 1) == 0)
      {
        v6 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_suppressMiniMenu) ^ 1;
        return v6 & 1;
      }
    }
    else
    {

    }
  }
  v6 = 0;
  return v6 & 1;
}

double CanvasElementResizeView.miniMenuAttachedBounds.getter()
{
  uint64_t v0;
  CGFloat v1;
  CGFloat v2;
  double x;
  double y;
  double width;
  double height;
  uint64_t v7;
  void *v8;
  id *v9;
  id v10;
  id v11;
  id v12;
  double v13;
  __int128 v15;
  __int128 v16;
  CGAffineTransform v17;
  CGAffineTransform t2;
  CGAffineTransform t1;
  __int128 v20[2];
  double v21;
  double v22;
  CGAffineTransform v23;
  CGRect v24;
  CGRect v25;

  CanvasElementResizeView.rectangularSelectionTransformCoordinateSpace.getter(v20);
  v15 = v20[1];
  v16 = v20[0];
  v1 = v21;
  v2 = v22;
  ResizeView.modelToViewTransform.getter((__int128 *)&v23);
  *(_OWORD *)&t1.a = v16;
  *(_OWORD *)&t1.c = v15;
  t1.tx = v1;
  t1.ty = v2;
  t2 = v23;
  CGAffineTransformConcat(&v17, &t1, &t2);
  t1 = v17;
  v24.origin.x = 0.0;
  v24.origin.y = 0.0;
  v24.size.width = 1.0;
  v24.size.height = 1.0;
  v25 = CGRectApplyAffineTransform(v24, &t1);
  x = v25.origin.x;
  y = v25.origin.y;
  width = v25.size.width;
  height = v25.size.height;
  v7 = MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (v7)
  {
    v8 = (void *)v7;
    v9 = (id *)(v7 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_overlayViewControllerForPresentingUI);
    swift_beginAccess();
    v10 = *v9;
    v11 = *v9;

    if (v10)
    {
      v12 = objc_msgSend(v11, sel_viewForOverlay);
      objc_msgSend(v12, sel_convertRect_fromCoordinateSpace_, v0, x, y, width, height);
      x = v13;

    }
  }
  return x;
}

void CanvasElementResizeView.miniMenuVisibleBounds.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  void *v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  CGAffineTransform v14;
  _QWORD v15[5];
  CGAffineTransform v16;
  uint64_t v17;
  char v18;
  CGRect v19;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas;
  v2 = (_QWORD *)MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (!v2
    || (v4 = v2,
        (*(void (**)(_QWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x338))(v15),
        v4,
        outlined init with take of CGRect?((uint64_t)v15, (uint64_t)&v17),
        (v18 & 1) != 0))
  {
    v5 = (_QWORD *)MEMORY[0x1DF0E666C](v1);
    if (v5)
    {
      v6 = v5;
      v7 = (*(double (**)(void))((*v3 & *v5) + 0x348))();
      v9 = v8;
      v11 = v10;
      v13 = v12;

      ResizeView.modelToViewTransform.getter((__int128 *)&v16);
      v14 = v16;
      v19.origin.x = v7;
      v19.origin.y = v9;
      v19.size.width = v11;
      v19.size.height = v13;
      CGRectApplyAffineTransform(v19, &v14);
    }
  }
}

Swift::Void __swiftcall CanvasElementResizeView.miniMenuOpenLink()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  id v4;
  void *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;

  v1 = (void *)MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (!v1)
    return;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
  v10 = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = specialized Sequence.compactMap<A>(_:)(v2, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v7 == 1)
    {
      swift_bridgeObjectRetain();
      v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v8)
      {

        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_4;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10) != 1)
    goto LABEL_14;
LABEL_4:
  if ((v3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x1DF0E4D64](0, v3);
    goto LABEL_7;
  }
  if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v4 = *(id *)(v3 + 32);
LABEL_7:
    v5 = v4;
    swift_bridgeObjectRelease();
    type metadata accessor for LinkCanvasElementView();
    if (swift_dynamicCastClass())
    {
      v9 = LinkCanvasElementView.linkView.getter();
      (*(void (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v9) + 0x88))(0);

      v6 = v9;
LABEL_16:

      return;
    }

LABEL_15:
    v6 = (char *)v10;
    goto LABEL_16;
  }
  __break(1u);
}

uint64_t closure #1 in CanvasElementResizeView.miniMenuRegenerateMagicGenerativePlayground()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[2] = a1;
  v4[3] = a4;
  type metadata accessor for MainActor();
  v4[4] = static MainActor.shared.getter();
  v4[5] = dispatch thunk of Actor.unownedExecutor.getter();
  v4[6] = v5;
  return swift_task_switch();
}

uint64_t closure #1 in CanvasElementResizeView.miniMenuRegenerateMagicGenerativePlayground()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  _QWORD *v4;

  v1 = MEMORY[0x1DF0E666C](*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (v1
    && (v2 = (void *)v1,
        v3 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasGenerationTool),
        *(_QWORD *)(v0 + 56) = v3,
        v3,
        v2,
        v3))
  {
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 64) = v4;
    *v4 = v0;
    v4[1] = closure #1 in CanvasElementResizeView.miniMenuRegenerateMagicGenerativePlayground();
    return CanvasGenerationTool.recreateMagicGenerativePlayground()();
  }
  else
  {
    swift_release();
    **(_BYTE **)(v0 + 16) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 56);
  swift_task_dealloc();

  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  **(_BYTE **)(v0 + 16) = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in CanvasElementResizeView.miniMenuGenerateMagicGenerativePlaygroundForSelection()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[2] = a1;
  v4[3] = a4;
  type metadata accessor for MainActor();
  v4[4] = static MainActor.shared.getter();
  v4[5] = dispatch thunk of Actor.unownedExecutor.getter();
  v4[6] = v5;
  return swift_task_switch();
}

uint64_t closure #1 in CanvasElementResizeView.miniMenuGenerateMagicGenerativePlaygroundForSelection()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;

  v1 = MEMORY[0x1DF0E666C](*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (v1
    && (v2 = (void *)v1,
        v3 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasGenerationTool),
        *(_QWORD *)(v0 + 56) = v3,
        v3,
        v2,
        v3))
  {
    v4 = *(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
    v5 = *(_QWORD *)v4;
    *(_QWORD *)(v0 + 64) = *(_QWORD *)v4;
    v6 = *(_QWORD *)(v4 + 8);
    *(_QWORD *)(v0 + 72) = v6;
    v7 = *(_QWORD *)(v4 + 16);
    v8 = *(_BYTE *)(v4 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 80) = v9;
    *v9 = v0;
    v9[1] = closure #1 in CanvasElementResizeView.miniMenuGenerateMagicGenerativePlaygroundForSelection();
    return CanvasGenerationTool.initiateMagicGenerativePlayground(for:)(v5, v6, v7, v8);
  }
  else
  {
    swift_release();
    **(_BYTE **)(v0 + 16) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 56);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_task_switch();
}

uint64_t closure #1 in CanvasElementResizeView.miniMenuSendFeedback(action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  type metadata accessor for MainActor();
  v5[5] = static MainActor.shared.getter();
  v5[6] = dispatch thunk of Actor.unownedExecutor.getter();
  v5[7] = v6;
  return swift_task_switch();
}

uint64_t closure #1 in CanvasElementResizeView.miniMenuSendFeedback(action:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  _QWORD *v4;

  v1 = MEMORY[0x1DF0E666C](*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (v1
    && (v2 = (void *)v1,
        v3 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasGenerationTool),
        *(_QWORD *)(v0 + 64) = v3,
        v3,
        v2,
        v3))
  {
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 72) = v4;
    *v4 = v0;
    v4[1] = closure #1 in CanvasElementResizeView.miniMenuSendFeedback(action:);
    return CanvasGenerationTool.sendFeedback(action:)(*(_QWORD *)(v0 + 32));
  }
  else
  {
    swift_release();
    **(_BYTE **)(v0 + 16) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 64);
  swift_task_dealloc();

  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  **(_BYTE **)(v0 + 16) = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1DDED78E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for FBKSEvaluation.Action();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CanvasElementResizeView.miniMenuSendFeedback(action:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for FBKSEvaluation.Action() - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in CanvasElementResizeView.miniMenuSendFeedback(action:)(a1, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in CanvasElementResizeView.miniMenuGenerateMagicGenerativePlaygroundForSelection()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in CanvasElementResizeView.miniMenuGenerateMagicGenerativePlaygroundForSelection()(a1, v4, v5, v6);
}

uint64_t objectdestroy_4Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CanvasElementResizeView.miniMenuRegenerateMagicGenerativePlayground()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in CanvasElementResizeView.miniMenuRegenerateMagicGenerativePlayground()(a1, v4, v5, v6);
}

uint64_t SignatureTableViewCell.init(style:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  id v8;
  char *v9;
  void *v10;
  char *v11;
  uint64_t v12;
  void *v13;
  char *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  void *v27;
  uint64_t result;
  void *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  Class isa;
  objc_super v45;

  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_contentLeadingInset] = 0x403E000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_contentEditLeadingInset] = 0x402E000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_contentTrailingInset] = 0x403E000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_contentVerticalInset] = 0x4024000000000000;
  v7 = OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureView;
  v8 = objc_allocWithZone(MEMORY[0x1E0DC3890]);
  v9 = v3;
  *(_QWORD *)&v3[v7] = objc_msgSend(v8, sel_init);
  *(_QWORD *)&v9[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signature] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureViewLeadingConstraint] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureViewTrailingConstraint] = 0;

  if (a3)
  {
    v10 = (void *)MEMORY[0x1DF0E41AC](a2, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = 0;
  }
  v45.receiver = v9;
  v45.super_class = (Class)type metadata accessor for SignatureTableViewCell();
  v11 = (char *)objc_msgSendSuper2(&v45, sel_initWithStyle_reuseIdentifier_, a1, v10);

  v12 = OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureView;
  v13 = *(void **)&v11[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureView];
  v14 = v11;
  objc_msgSend(v13, sel_setContentMode_, 4);
  objc_msgSend(v13, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v15 = objc_msgSend(v14, sel_contentView);
  objc_msgSend(v15, sel_addSubview_, v13);

  v16 = objc_msgSend(*(id *)&v11[v12], sel_leadingAnchor);
  v17 = objc_msgSend(v14, sel_contentView);
  v18 = objc_msgSend(v17, sel_leadingAnchor);

  v19 = objc_msgSend(v16, sel_constraintEqualToAnchor_constant_, v18, 30.0);
  v20 = OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureViewLeadingConstraint;
  v21 = *(void **)&v14[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureViewLeadingConstraint];
  *(_QWORD *)&v14[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureViewLeadingConstraint] = v19;

  v22 = objc_msgSend(*(id *)&v11[v12], sel_trailingAnchor);
  v23 = objc_msgSend(v14, sel_contentView);
  v24 = objc_msgSend(v23, sel_trailingAnchor);

  v25 = objc_msgSend(v22, sel_constraintEqualToAnchor_constant_, v24, -30.0);
  v26 = OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureViewTrailingConstraint;
  v27 = *(void **)&v14[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureViewTrailingConstraint];
  *(_QWORD *)&v14[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureViewTrailingConstraint] = v25;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_1DDF329D0;
  v29 = *(void **)&v14[v20];
  if (v29)
  {
    v30 = (_QWORD *)result;
    *(_QWORD *)(result + 32) = v29;
    v31 = *(void **)&v14[v26];
    if (v31)
    {
      v32 = (void *)objc_opt_self();
      v30[5] = v31;
      v33 = *(void **)&v11[v12];
      v34 = v29;
      v35 = v31;
      v36 = objc_msgSend(v33, sel_topAnchor);
      v37 = objc_msgSend(v14, sel_contentView);
      v38 = objc_msgSend(v37, sel_topAnchor);

      v39 = objc_msgSend(v36, sel_constraintEqualToAnchor_constant_, v38, 10.0);
      v30[6] = v39;
      v40 = objc_msgSend(*(id *)&v11[v12], sel_bottomAnchor);
      v41 = objc_msgSend(v14, sel_contentView);
      v42 = objc_msgSend(v41, sel_bottomAnchor);

      v43 = objc_msgSend(v40, sel_constraintEqualToAnchor_constant_, v42, -10.0);
      v30[7] = v43;
      specialized Array._endMutation()();
      type metadata accessor for NSLayoutConstraint();
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v32, sel_activateConstraints_, isa);

      return (uint64_t)v14;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall SignatureTableViewCell.layoutSubviews()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v7[6];

  v1 = objc_opt_self();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v0;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in SignatureTableViewCell.layoutSubviews();
  *(_QWORD *)(v3 + 24) = v2;
  v7[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v7[5] = v3;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed () -> ();
  v7[3] = &block_descriptor_65;
  v4 = _Block_copy(v7);
  v5 = v0;
  swift_retain();
  swift_release();
  objc_msgSend((id)v1, sel_performWithoutAnimation_, v4);
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  v6 = swift_release();
  if ((v1 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v5) + 0xE8))(v6);
    swift_release();
  }
}

void closure #1 in SignatureTableViewCell.layoutSubviews()(void *a1)
{
  id v2;
  objc_super v3;

  v3.receiver = a1;
  v3.super_class = (Class)type metadata accessor for SignatureTableViewCell();
  objc_msgSendSuper2(&v3, sel_layoutSubviews);
  v2 = objc_msgSend(a1, sel_contentView);
  objc_msgSend(v2, sel_layoutSubviews);

}

Swift::Void __swiftcall SignatureTableViewCell.updateSignature()()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  Swift::Bool v4;
  unint64_t v5;
  unint64_t v6;
  id v7;
  UIColor_optional v8;
  Swift::Int_optional v9;
  CGRect v10;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureView);
  objc_msgSend(v1, sel_bounds);
  if (!CGRectIsEmpty(v10))
  {
    v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signature);
    if (v2)
    {
      v3 = v2;
      objc_msgSend(v1, sel_bounds);
      v8.value.super.isa = 0;
      v8.is_nil = 0;
      v9.value = 1;
      v9.is_nil = 0;
      v7 = (id)SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)((CGSize)__PAIR128__(v6, v5), v8, v9, v4);

    }
    else
    {
      v7 = 0;
    }
    objc_msgSend(v1, sel_setImage_, v7);

  }
}

id SignatureTableViewCell.__deallocating_deinit()
{
  return ControlHandleView.__deallocating_deinit(type metadata accessor for SignatureTableViewCell);
}

uint64_t type metadata accessor for SignatureTableViewCell()
{
  return objc_opt_self();
}

char *SignatureAndDescriptionTableViewCell.init(style:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  char *result;
  uint64_t v26;
  char *v27;
  void *v28;
  char *v29;
  id v30;
  id v31;
  id v32;
  void *v33;
  void *v34;
  char *v35;
  id v36;
  Class isa;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  Class v55;
  id v56;
  objc_super v57;

  v7 = OBJC_IVAR____TtC8PaperKit36SignatureAndDescriptionTableViewCell_descriptionFont;
  v8 = (void *)objc_opt_self();
  v9 = *MEMORY[0x1E0DC4A98];
  v10 = v3;
  *(_QWORD *)&v3[v7] = objc_msgSend(v8, sel_preferredFontForTextStyle_, v9);
  v11 = OBJC_IVAR____TtC8PaperKit36SignatureAndDescriptionTableViewCell_descriptionColor;
  *(_QWORD *)&v10[v11] = objc_msgSend((id)objc_opt_self(), sel_secondaryLabelColor);
  *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit36SignatureAndDescriptionTableViewCell_descriptionFraction] = 0x3FD49BA5E353F7CFLL;
  v12 = OBJC_IVAR____TtC8PaperKit36SignatureAndDescriptionTableViewCell_descriptionLabel;
  *(_QWORD *)&v10[v12] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_init);

  if (a3)
  {
    v13 = (void *)MEMORY[0x1DF0E41AC](a2, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = 0;
  }
  v57.receiver = v10;
  v57.super_class = (Class)type metadata accessor for SignatureAndDescriptionTableViewCell();
  v14 = (char *)objc_msgSendSuper2(&v57, sel_initWithStyle_reuseIdentifier_, a1, v13);

  v15 = OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureView;
  v16 = *(void **)&v14[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureView];
  v17 = v14;
  v18 = v16;
  if (objc_msgSend(v17, sel_effectiveUserInterfaceLayoutDirection) == (id)1)
    v19 = 8;
  else
    v19 = 7;
  objc_msgSend(v18, sel_setContentMode_, v19);

  v20 = OBJC_IVAR____TtC8PaperKit36SignatureAndDescriptionTableViewCell_descriptionLabel;
  v21 = *(void **)&v17[OBJC_IVAR____TtC8PaperKit36SignatureAndDescriptionTableViewCell_descriptionLabel];
  objc_msgSend(v21, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v21, sel_setFont_, *(_QWORD *)&v17[OBJC_IVAR____TtC8PaperKit36SignatureAndDescriptionTableViewCell_descriptionFont]);
  objc_msgSend(v21, sel_setTextColor_, *(_QWORD *)&v17[OBJC_IVAR____TtC8PaperKit36SignatureAndDescriptionTableViewCell_descriptionColor]);
  v22 = v21;
  objc_msgSend(v22, sel_setTextAlignment_, 2 * (objc_msgSend(v17, sel_effectiveUserInterfaceLayoutDirection) != (id)1));

  v23 = *(void **)&v17[v20];
  objc_msgSend(v23, sel_setNumberOfLines_, 0);
  v24 = objc_msgSend(v17, sel_contentView);
  objc_msgSend(v24, sel_addSubview_, v23);

  result = (char *)objc_msgSend(v17, sel_contentView);
  v26 = OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureViewTrailingConstraint;
  if (*(_QWORD *)&v17[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureViewTrailingConstraint])
  {
    v27 = result;
    objc_msgSend(result, sel_removeConstraint_);

    v28 = *(void **)&v14[v15];
    v29 = v17;
    v30 = objc_msgSend(v28, sel_trailingAnchor);
    v31 = objc_msgSend(*(id *)&v17[v20], sel_leadingAnchor);
    v32 = objc_msgSend(v30, sel_constraintEqualToAnchor_, v31);

    v33 = *(void **)&v17[v26];
    *(_QWORD *)&v17[v26] = v32;

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    result = (char *)swift_allocObject();
    *((_OWORD *)result + 1) = xmmword_1DDF35440;
    v34 = *(void **)&v17[v26];
    if (v34)
    {
      v35 = result;
      v56 = (id)objc_opt_self();
      *((_QWORD *)v35 + 4) = v34;
      specialized Array._endMutation()();
      type metadata accessor for NSLayoutConstraint();
      v36 = v34;
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v56, sel_activateConstraints_, isa);

      v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = xmmword_1DDF329D0;
      v39 = objc_msgSend(*(id *)&v17[v20], sel_widthAnchor);
      v40 = objc_msgSend(v29, sel_contentView);
      v41 = objc_msgSend(v40, sel_widthAnchor);

      v42 = objc_msgSend(v39, sel_constraintEqualToAnchor_multiplier_, v41, 0.322);
      *(_QWORD *)(v38 + 32) = v42;
      v43 = objc_msgSend(*(id *)&v17[v20], sel_trailingAnchor);
      v44 = objc_msgSend(v29, sel_contentView);
      v45 = objc_msgSend(v44, sel_trailingAnchor);

      v46 = objc_msgSend(v43, sel_constraintEqualToAnchor_constant_, v45, -30.0);
      *(_QWORD *)(v38 + 40) = v46;
      v47 = objc_msgSend(*(id *)&v17[v20], sel_topAnchor);
      v48 = objc_msgSend(v29, (SEL)&selRef_initWithHandler_);
      v49 = objc_msgSend(v48, sel_topAnchor);

      v50 = objc_msgSend(v47, sel_constraintEqualToAnchor_constant_, v49, 10.0);
      *(_QWORD *)(v38 + 48) = v50;
      v51 = objc_msgSend(*(id *)&v17[v20], sel_bottomAnchor);
      v52 = objc_msgSend(v29, (SEL)&selRef_initWithHandler_);
      v53 = objc_msgSend(v52, sel_bottomAnchor);

      v54 = objc_msgSend(v51, sel_constraintEqualToAnchor_constant_, v53, -10.0);
      *(_QWORD *)(v38 + 56) = v54;
      specialized Array._endMutation()();
      v55 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v56, sel_activateConstraints_, v55);

      return v29;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t @objc SignatureTableViewCell.init(style:reuseIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    a4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;
  }
  else
  {
    v8 = 0;
  }
  return a5(a3, a4, v8);
}

Swift::Void __swiftcall SignatureAndDescriptionTableViewCell.updateSignature()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  Swift::Bool v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t countAndFlagsBits;
  uint64_t v13;
  Swift::String v14;
  void *object;
  id v16;
  UIColor_optional v17;
  Swift::Int_optional v18;
  CGRect v19;

  v1 = v0;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureView);
  objc_msgSend(v2, sel_bounds);
  if (!CGRectIsEmpty(v19))
  {
    v3 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signature);
    if (v3)
    {
      v4 = v3;
      objc_msgSend(v2, sel_bounds);
      v17.value.super.isa = 0;
      v17.is_nil = 0;
      v18.value = 1;
      v18.is_nil = 0;
      v8 = (void *)SignatureItem.image(withMaximumSize:withColor:width:forPrinting:)((CGSize)__PAIR128__(v7, v6), v17, v18, v5);

    }
    else
    {
      v8 = 0;
    }
    objc_msgSend(v2, sel_setImage_, v8);

  }
  v9 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit36SignatureAndDescriptionTableViewCell_descriptionLabel);
  v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signature);
  if (v10)
  {
    v11 = (uint64_t *)(v10 + OBJC_IVAR____TtC8PaperKit13SignatureItem_signatureDescription);
    v13 = *v11;
    countAndFlagsBits = v11[1];
    if ((unint64_t)(countAndFlagsBits - 1) >= 5)
    {
      if (countAndFlagsBits)
      {
        object = (void *)v11[1];
        swift_bridgeObjectRetain();
        countAndFlagsBits = v13;
      }
      else
      {
        object = (void *)0xE000000000000000;
      }
    }
    else
    {
      v14 = SignatureDescription.localizedTitle()();
      countAndFlagsBits = v14._countAndFlagsBits;
      object = v14._object;
    }
    v16 = (id)MEMORY[0x1DF0E41AC](countAndFlagsBits, object);
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = 0;
  }
  objc_msgSend(v9, sel_setText_, v16);

}

void SignatureAndDescriptionTableViewCell.__ivar_destroyer()
{
  uint64_t v0;

}

id SignatureAndDescriptionTableViewCell.__deallocating_deinit()
{
  return ControlHandleView.__deallocating_deinit(type metadata accessor for SignatureAndDescriptionTableViewCell);
}

uint64_t type metadata accessor for SignatureAndDescriptionTableViewCell()
{
  return objc_opt_self();
}

void specialized SignatureTableViewCell.init(coder:)()
{
  char *v0;
  uint64_t v1;

  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_contentLeadingInset] = 0x403E000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_contentEditLeadingInset] = 0x402E000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_contentTrailingInset] = 0x403E000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_contentVerticalInset] = 0x4024000000000000;
  v1 = OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureView;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_init);
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signature] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureViewLeadingConstraint] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit22SignatureTableViewCell_signatureViewTrailingConstraint] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized SignatureAndDescriptionTableViewCell.init(coder:)()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = OBJC_IVAR____TtC8PaperKit36SignatureAndDescriptionTableViewCell_descriptionFont;
  *(_QWORD *)&v0[v1] = objc_msgSend((id)objc_opt_self(), sel_preferredFontForTextStyle_, *MEMORY[0x1E0DC4A98]);
  v2 = OBJC_IVAR____TtC8PaperKit36SignatureAndDescriptionTableViewCell_descriptionColor;
  *(_QWORD *)&v0[v2] = objc_msgSend((id)objc_opt_self(), sel_secondaryLabelColor);
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit36SignatureAndDescriptionTableViewCell_descriptionFraction] = 0x3FD49BA5E353F7CFLL;
  v3 = OBJC_IVAR____TtC8PaperKit36SignatureAndDescriptionTableViewCell_descriptionLabel;
  *(_QWORD *)&v0[v3] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_init);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1DDED8DDC()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in SignatureTableViewCell.layoutSubviews()()
{
  uint64_t v0;

  closure #1 in SignatureTableViewCell.layoutSubviews()(*(void **)(v0 + 16));
}

uint64_t sub_1DDED8E08()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_65(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_65()
{
  return swift_release();
}

uint64_t ImageRenderer.Context.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

CGImageRef protocol witness for RendererContext.currentImage.getter in conformance ImageRenderer.Context()
{
  uint64_t v0;

  return CGBitmapContextCreateImage(*(CGContextRef *)(*(_QWORD *)v0 + 32));
}

CGContextRef_optional __swiftcall ImageRenderer.createCGContext()()
{
  double *v0;
  CGContext *v1;
  double v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  CGContextRef_optional result;
  double v7;
  double v8;
  double v9;
  CGContextRef value;
  size_t v12;
  double MinY;
  CGFloat MaxY;
  CGAffineTransform v15;
  CGAffineTransform t2;
  CGAffineTransform transform;
  CGRect v18;
  CGRect v19;

  v1 = 0;
  v2 = v0[2];
  v3 = (*(_QWORD *)&v2 >> 52) & 0x7FFLL;
  if (!v3)
    return (CGContextRef_optional)v1;
  if (v3 == 2047)
    return (CGContextRef_optional)v1;
  v1 = 0;
  v4 = v0[3];
  v5 = (*(_QWORD *)&v4 >> 52) & 0x7FFLL;
  if (!v5 || v5 == 2047)
    return (CGContextRef_optional)v1;
  result.value = CGColorSpaceCreateDeviceRGB();
  v7 = v0[4];
  v8 = v2 * v7;
  if (v2 * v7 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 >= 9.22337204e18)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v4 * v7;
  if ((*(_QWORD *)&v8 & 0x7FF0000000000000) == 0x7FF0000000000000
    || (COERCE_UNSIGNED_INT64(v4 * v7) & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_24;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v9 >= 9.22337204e18)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  value = result.value;
  v12 = (uint64_t)v8;
  if ((uint64_t)v8 < 1 || (uint64_t)v9 <= 0)
  {

    return 0;
  }
  if ((v12 - 0x2000000000000000) >> 62 != 3)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (!__OFADD__(4 * v12, 64))
  {
    v1 = CGBitmapContextCreate(0, v12, (uint64_t)v9, 8uLL, (4 * v12 + 63) & 0xFFFFFFFFFFFFFFC0, result.value, 0x4002u);
    if (v1)
    {
      CGAffineTransformMakeScale(&transform, v7, v7);
      CGContextConcatCTM(v1, &transform);
      v18.origin.x = 0.0;
      v18.origin.y = 0.0;
      v18.size.width = v2;
      v18.size.height = v4;
      MinY = CGRectGetMinY(v18);
      v19.origin.x = 0.0;
      v19.origin.y = 0.0;
      v19.size.width = v2;
      v19.size.height = v4;
      MaxY = CGRectGetMaxY(v19);
      transform.a = 1.0;
      transform.b = 0.0;
      transform.c = 0.0;
      transform.d = 1.0;
      transform.tx = 0.0;
      transform.ty = 0.0;
      t2.b = 0.0;
      t2.c = 0.0;
      t2.a = 1.0;
      *(_OWORD *)&t2.d = xmmword_1DDF325E0;
      t2.ty = MinY + MaxY;
      CGAffineTransformConcat(&v15, &transform, &t2);
      transform = v15;
      CGContextConcatCTM(v1, &transform);
    }

    return (CGContextRef_optional)v1;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t ImageRenderer.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ImageRenderer()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for ImageRenderer.Context()
{
  return objc_opt_self();
}

double protocol witness for Renderer.size.getter in conformance ImageRenderer()
{
  uint64_t v0;

  return *(double *)(*(_QWORD *)v0 + 16);
}

CGContextRef_optional protocol witness for Renderer.createContext(output:) in conformance ImageRenderer@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  CGContextRef_optional result;
  CGContextRef value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *v1;
  result.value = ImageRenderer.createCGContext()().value;
  if (result.value)
  {
    value = result.value;
    v6 = *(_QWORD *)(v3 + 16);
    v7 = *(_QWORD *)(v3 + 24);
    v8 = type metadata accessor for ImageRenderer.Context();
    result.value = (CGContextRef)swift_allocObject();
    *((_QWORD *)result.value + 2) = v6;
    *((_QWORD *)result.value + 3) = v7;
    *((_QWORD *)result.value + 4) = value;
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = &protocol witness table for ImageRenderer.Context;
    *(CGContextRef_optional *)a1 = result;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for RendererOutput(char *a1, char **a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v9[(v6 + 16) & ~(unint64_t)v6];
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v10 = *a2;
      *(_QWORD *)a1 = *a2;
      v11 = v10;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v8 = type metadata accessor for URL();
      (*(void (**)(char *, char **, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void destroy for RendererOutput(id *a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {

  }
  else if (!EnumCaseMultiPayload)
  {
    v3 = type metadata accessor for URL();
    (*(void (**)(id *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  }
}

void **initializeWithCopy for RendererOutput(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void *v8;
  id v9;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v8 = *a2;
    *a1 = *a2;
    v9 = v8;
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void **assignWithCopy for RendererOutput(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  void *v8;
  id v9;

  if (a1 != a2)
  {
    outlined destroy of RendererOutput((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v8 = *a2;
      *a1 = *a2;
      v9 = v8;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for URL();
      (*(void (**)(void **, void **, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t outlined destroy of RendererOutput(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RendererOutput();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for RendererOutput()
{
  uint64_t result;

  result = type metadata singleton initialization cache for RendererOutput;
  if (!type metadata singleton initialization cache for RendererOutput)
    return swift_getSingletonMetadata();
  return result;
}

void *initializeWithTake for RendererOutput(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for RendererOutput(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    outlined destroy of RendererOutput((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for RendererOutput()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t PaperAttachmentTextualContext.title.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PaperAttachmentTextualContext.title.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PaperAttachmentTextualContext.title.modify())(_QWORD, _QWORD)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t PaperAttachmentTextualContext.precedingParagraph.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PaperAttachmentTextualContext.precedingParagraph.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*PaperAttachmentTextualContext.precedingParagraph.modify())(_QWORD, _QWORD)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t PaperAttachmentTextualContext.followingParagraph.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PaperAttachmentTextualContext.followingParagraph.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*PaperAttachmentTextualContext.followingParagraph.modify())(_QWORD, _QWORD)
{
  return UnknownCanvasElementView.flags.modify;
}

void __swiftcall PaperAttachmentTextualContext.init(title:precedingParagraph:followingParagraph:)(PaperKit::PaperAttachmentTextualContext *__return_ptr retstr, Swift::String title, Swift::String precedingParagraph, Swift::String followingParagraph)
{
  retstr->title = title;
  retstr->precedingParagraph = precedingParagraph;
  retstr->followingParagraph = followingParagraph;
}

uint64_t dispatch thunk of PaperKitStreamableAttachment.liveStreamMessenger.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PaperKitStreamableAttachment.liveStreamMessenger.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of PaperKitStreamableAttachment.liveStreamMessenger.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PaperKitStreamableAttachment.participantDetailsDataSource.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of PaperKitStreamableAttachment.participantDetailsDataSource.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of PaperKitStreamableAttachment.participantDetailsDataSource.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of PaperKitStreamableAttachment.participantDetailsDidChange()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of PaperKitStreamableAttachment.showParticipantCursors.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of PaperKitStreamableAttachment.showParticipantCursors.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of PaperKitStreamableAttachment.showParticipantCursors.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of PaperKitAttachment.textualContextProvider.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PaperKitAttachment.textualContextProvider.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of PaperKitAttachment.textualContextProvider.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of PaperKitAttachment.viewControllerForPresentingUI.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of PaperKitAttachment.viewControllerForPresentingUI.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of PaperKitAttachment.viewControllerForPresentingUI.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t destroy for PaperAttachmentTextualContext()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for PaperAttachmentTextualContext(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PaperAttachmentTextualContext(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for PaperAttachmentTextualContext(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PaperAttachmentTextualContext(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PaperAttachmentTextualContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PaperAttachmentTextualContext()
{
  return &type metadata for PaperAttachmentTextualContext;
}

uint64_t dispatch thunk of PaperAttachmentTextualContextProvider.textualContext(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

void destroy for TextBoxViewAttributes(uint64_t a1)
{
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for TextBoxViewAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(void **)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v6 = *(void **)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v6;
  swift_bridgeObjectRetain();
  v7 = v5;
  v8 = v6;
  return a1;
}

uint64_t assignWithCopy for TextBoxViewAttributes(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(void **)(a1 + 32);
  v5 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = v5;

  v7 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v8 = *(void **)(a2 + 72);
  v9 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v8;
  v10 = v8;

  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for TextBoxViewAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v6 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);

  return a1;
}

uint64_t getEnumTagSinglePayload for TextBoxViewAttributes(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextBoxViewAttributes(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextBoxViewAttributes()
{
  return &type metadata for TextBoxViewAttributes;
}

uint64_t specialized Sequence<>.uniqueElements()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t (**v31)(Swift::Int *);
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  void (*v36)(Swift::Int *__return_ptr, char *);
  Swift::Int v37;
  Swift::Int v38;
  void (*v39)(Swift::Int *__return_ptr, Swift::Int *);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  Swift::Int v48;
  Swift::Int v49;
  Swift::Int v50;
  Swift::Int v51;
  uint64_t v52;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v46 = (char *)&v41 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  v45 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, String?>);
  MEMORY[0x1E0C80A78](v44, v16);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, String?>>);
  MEMORY[0x1E0C80A78](v43, v19);
  v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, String?>>, String>);
  MEMORY[0x1E0C80A78](v42, v22);
  v24 = (char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, String?>>, String>.Iterator);
  MEMORY[0x1E0C80A78](v41, v25);
  v27 = (char *)&v41 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = MEMORY[0x1E0DEE9E8];
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v47, (uint64_t)v24, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, String?>>, String>);
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v24, (uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, String?>>);
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v21, (uint64_t)v18, &demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, String?>);
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v15, v18, v12);
  lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs(&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs, MEMORY[0x1E0D12508]);
  v45 = v12;
  dispatch thunk of Sequence.makeIterator()();
  v28 = *(int *)(v44 + 44);
  v29 = &v27[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, String?>.Iterator)
                    + 44)];
  *(_OWORD *)v29 = *(_OWORD *)&v18[v28];
  v30 = *(int *)(v43 + 36);
  v31 = (uint64_t (**)(Swift::Int *))&v27[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, String?>>.Iterator)
                                                           + 36)];
  *(_OWORD *)v31 = *(_OWORD *)&v21[v30];
  v32 = *(int *)(v42 + 44);
  v33 = *(int *)(v41 + 44);
  v47 = v27;
  v34 = *(_OWORD *)&v24[v32];
  v44 = (uint64_t)&v27[v33];
  *(_OWORD *)v44 = v34;
  lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs(&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs, MEMORY[0x1E0D12510]);
  while (1)
  {
    v35 = (uint64_t)v46;
    dispatch thunk of IteratorProtocol.next()();
    v36 = *(void (**)(Swift::Int *__return_ptr, char *))v29;
    outlined init with take of (key: Int, value: AnyCRValue)?(v35, (uint64_t)v8, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v8, 1, v0) == 1)
      break;
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v4, v8, v0);
    v36(&v48, v4);
    v37 = v48;
    v38 = v49;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    v50 = v37;
    v51 = v38;
    if (((*v31)(&v50) & 1) != 0)
    {
      v39 = *(void (**)(Swift::Int *__return_ptr, Swift::Int *))v44;
      v50 = v37;
      v51 = v38;
      v39(&v48, &v50);
      swift_bridgeObjectRelease();
      specialized Set._Variant.insert(_:)(&v50, v48, v49);
    }
    swift_bridgeObjectRelease();
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v47, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, String?>>, String>.Iterator);
  return v52;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  void (*v37)(uint64_t *__return_ptr, char *);
  int v38;
  char v39;
  void (*v40)(uint64_t *__return_ptr, int *);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  int v52;
  char v53;
  uint64_t v54;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v49 = (char *)&v42 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  v48 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>);
  MEMORY[0x1E0C80A78](v47, v16);
  v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>>);
  MEMORY[0x1E0C80A78](v46, v19);
  v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>>, Float>);
  MEMORY[0x1E0C80A78](v45, v22);
  v24 = (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>>, Float>.Iterator);
  MEMORY[0x1E0C80A78](v44, v25);
  v27 = (char *)&v42 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = MEMORY[0x1E0DEE9E8];
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v50, (uint64_t)v24, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>>, Float>);
  v43 = v21;
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v24, (uint64_t)v21, &demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>>);
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v21, (uint64_t)v18, &demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>);
  (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v15, v18, v12);
  lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs(&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs, MEMORY[0x1E0D12508]);
  v48 = v12;
  dispatch thunk of Sequence.makeIterator()();
  v28 = *(int *)(v47 + 44);
  v29 = &v27[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>.Iterator)
                    + 44)];
  *(_OWORD *)v29 = *(_OWORD *)&v18[v28];
  v30 = *(int *)(v46 + 36);
  v31 = &v27[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>>.Iterator)
                    + 36)];
  v32 = v44;
  *(_OWORD *)v31 = *(_OWORD *)&v43[v30];
  v33 = *(int *)(v45 + 44);
  v34 = *(int *)(v32 + 44);
  v50 = v27;
  v35 = *(_OWORD *)&v24[v33];
  v47 = (uint64_t)&v27[v34];
  *(_OWORD *)v47 = v35;
  lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs(&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs, MEMORY[0x1E0D12510]);
  while (1)
  {
    v36 = (uint64_t)v49;
    dispatch thunk of IteratorProtocol.next()();
    v37 = *(void (**)(uint64_t *__return_ptr, char *))v29;
    outlined init with take of (key: Int, value: AnyCRValue)?(v36, (uint64_t)v8, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v8, 1, v0) == 1)
      break;
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v4, v8, v0);
    v37(&v51, v4);
    v38 = v51;
    v39 = BYTE4(v51);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    v52 = v38;
    v53 = v39;
    if (((*(uint64_t (**)(int *))v31)(&v52) & 1) != 0)
    {
      v40 = *(void (**)(uint64_t *__return_ptr, int *))v47;
      v52 = v38;
      v53 = v39;
      v40(&v51, &v52);
      specialized Set._Variant.insert(_:)((float *)&v52, *(float *)&v51);
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v50, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Float?>>, Float>.Iterator);
  return v54;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void (*v25)(Swift::UInt *__return_ptr, char *);
  Swift::UInt v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt v32;
  uint64_t v33;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v28 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, NSTextAlignment>);
  MEMORY[0x1E0C80A78](v30, v18);
  v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, NSTextAlignment>.Iterator);
  MEMORY[0x1E0C80A78](v29, v21);
  v23 = (char *)&v28 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x1E0DEE9E8];
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v31, (uint64_t)v20, &demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, NSTextAlignment>);
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v20, v13);
  lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs(&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs, MEMORY[0x1E0D12508]);
  v31 = v13;
  dispatch thunk of Sequence.makeIterator()();
  v24 = &v23[*(int *)(v29 + 44)];
  *(_OWORD *)v24 = *(_OWORD *)&v20[*(int *)(v30 + 44)];
  lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs(&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs, MEMORY[0x1E0D12510]);
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    v25 = *(void (**)(Swift::UInt *__return_ptr, char *))v24;
    outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v12, (uint64_t)v8, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v8, 1, v0) == 1)
      break;
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v4, v8, v0);
    v25(&v32, v4);
    v26 = v32;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    specialized Set._Variant.insert(_:)(&v32, v26);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, &demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, NSTextAlignment>.Iterator);
  return v33;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  void (*v37)(char *__return_ptr, char *);
  char v38;
  void (*v39)(char *__return_ptr, char *);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v47 = (char *)&v41 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  v46 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>);
  MEMORY[0x1E0C80A78](v45, v16);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>);
  MEMORY[0x1E0C80A78](v44, v19);
  v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>, Bool>);
  MEMORY[0x1E0C80A78](v43, v22);
  v24 = (char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>, Bool>.Iterator);
  MEMORY[0x1E0C80A78](v42, v25);
  v27 = (char *)&v41 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = MEMORY[0x1E0DEE9E8];
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v48, (uint64_t)v24, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>, Bool>);
  v41 = v21;
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v24, (uint64_t)v21, &demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>);
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v21, (uint64_t)v18, &demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>);
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v15, v18, v12);
  lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs(&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs, MEMORY[0x1E0D12508]);
  v46 = v12;
  dispatch thunk of Sequence.makeIterator()();
  v28 = *(int *)(v45 + 44);
  v29 = &v27[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>.Iterator)
                    + 44)];
  *(_OWORD *)v29 = *(_OWORD *)&v18[v28];
  v30 = *(int *)(v44 + 36);
  v31 = &v27[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>.Iterator)
                    + 36)];
  v32 = v42;
  *(_OWORD *)v31 = *(_OWORD *)&v41[v30];
  v33 = *(int *)(v43 + 44);
  v34 = *(int *)(v32 + 44);
  v48 = v27;
  v35 = *(_OWORD *)&v24[v33];
  v45 = (uint64_t)&v27[v34];
  *(_OWORD *)v45 = v35;
  lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs(&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs, MEMORY[0x1E0D12510]);
  v36 = (uint64_t)v47;
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    v37 = *(void (**)(char *__return_ptr, char *))v29;
    outlined init with take of (key: Int, value: AnyCRValue)?(v36, (uint64_t)v8, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v8, 1, v0) == 1)
      break;
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v4, v8, v0);
    v37(&v52, v4);
    v38 = v52;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    v53 = v38;
    if (((*(uint64_t (**)(char *))v31)(&v53) & 1) != 0)
    {
      v39 = *(void (**)(char *__return_ptr, char *))v45;
      v51 = v38;
      v39(&v50, &v51);
      specialized Set._Variant.insert(_:)(&v49, v50);
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v48, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Bool?>>, Bool>.Iterator);
  return v54;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t (**v31)(id *);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  void (*v37)(void **__return_ptr, char *);
  void *v38;
  void (*v39)(void **__return_ptr, id *);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  void *v50;
  id v51;
  uint64_t v52;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v48 = (char *)&v41 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  v47 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>);
  MEMORY[0x1E0C80A78](v46, v16);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>);
  MEMORY[0x1E0C80A78](v45, v19);
  v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>, Color>);
  MEMORY[0x1E0C80A78](v44, v22);
  v24 = (char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>, Color>.Iterator);
  MEMORY[0x1E0C80A78](v43, v25);
  v27 = (char *)&v41 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = MEMORY[0x1E0DEE9E8];
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v49, (uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>, Color>);
  v42 = v21;
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v24, (uint64_t)v21, &demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>);
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v21, (uint64_t)v18, &demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>);
  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v15, v18, v12);
  lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs(&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs, MEMORY[0x1E0D12508]);
  v47 = v12;
  dispatch thunk of Sequence.makeIterator()();
  v28 = *(int *)(v46 + 44);
  v29 = &v27[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>.Iterator)
                    + 44)];
  *(_OWORD *)v29 = *(_OWORD *)&v18[v28];
  v30 = *(int *)(v45 + 36);
  v31 = (uint64_t (**)(id *))&v27[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>.Iterator)
                                                   + 36)];
  v32 = v43;
  *(_OWORD *)v31 = *(_OWORD *)&v42[v30];
  v33 = *(int *)(v44 + 44);
  v34 = *(int *)(v32 + 44);
  v49 = v27;
  v35 = *(_OWORD *)&v24[v33];
  v46 = (uint64_t)&v27[v34];
  *(_OWORD *)v46 = v35;
  lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs(&lazy protocol witness table cache variable for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs, MEMORY[0x1E0D12510]);
  v36 = (uint64_t)v48;
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    v37 = *(void (**)(void **__return_ptr, char *))v29;
    outlined init with take of (key: Int, value: AnyCRValue)?(v36, (uint64_t)v8, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v8, 1, v0) == 1)
      break;
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v4, v8, v0);
    v37(&v50, v4);
    v38 = v50;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    v51 = v38;
    if (((*v31)(&v51) & 1) != 0)
    {
      v39 = *(void (**)(void **__return_ptr, id *))v46;
      v51 = v38;
      v39(&v50, &v51);

      specialized Set._Variant.insert(_:)(&v51, v50);
    }
    else
    {

    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v49, &demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>, Color>.Iterator);
  return v52;
}

void Array<A>.displayAttributes.getter(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  id (**v52)@<X0>(uint64_t *@<X8>);
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  id (**v63)@<X0>(uint64_t *@<X8>);
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char v70;
  CGColor *v71;
  uint64_t v72;
  char v73;
  unint64_t v74;
  uint64_t v75;
  BOOL v76;
  char v77;
  uint64_t *v78;
  void *v79;
  char *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  char v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  CGColor *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  BOOL v122;

  v103 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
  v107 = *(_QWORD *)(v3 - 8);
  v108 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (uint64_t)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v105 = *(_QWORD *)(v7 - 8);
  v106 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (uint64_t)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (uint64_t)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>, Color>);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v98 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v113 = (char *)&v98 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v101 = (char *)&v98 - v25;
  v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  v104 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (uint64_t *)((char *)&v98 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  closure #1 in variable initialization expression of TextBoxViewAttributes.fontButtonImage();
  v30 = a1;
  v102 = v31;
  v122 = 0;
  v121 = 1;
  v32 = a1 >> 62;
  v110 = v30;
  if (v32)
    goto LABEL_70;
  v33 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  v34 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v111 = v15;
  v112 = v14;
  if (!v33)
  {
    v29 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v39 = MEMORY[0x1E0DEE9D8];
LABEL_29:
    v10 = Array<A>.fontName.getter((uint64_t)v29);
    v110 = v48;
    swift_bridgeObjectRelease();
    v109 = (uint64_t)Array<A>.fontSize.getter((uint64_t)v29);
    v122 = Array<A>.hasMultipleFontSizes.getter((uint64_t)v29);
    v115 = (_QWORD *)v39;
    v49 = v29[2];
    v108 = v10;
    if (v49)
    {
      v50 = (char *)v29 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
      v113 = *(char **)(v20 + 72);
      v15 = *(_QWORD *)(v20 + 16);
      swift_bridgeObjectRetain();
      v51 = v101;
      do
      {
        ((void (*)(char *, char *, uint64_t))v15)(v51, v50, v19);
        ((void (*)(uint64_t, char *, uint64_t))v15)(v14, v51, v19);
        ((void (*)(char *, uint64_t, uint64_t))v15)(v18, v14, v19);
        v52 = (id (**)@<X0>(uint64_t *@<X8>))&v18[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>)
                                                                   + 44)];
        *v52 = closure #1 in CRAttributedString.Runs<>.fontColors.getter;
        v52[1] = 0;
        v53 = &v18[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>)
                          + 36)];
        *(_QWORD *)v53 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
        *((_QWORD *)v53 + 1) = 0;
        v54 = &v18[*(int *)(v111 + 44)];
        *(_QWORD *)v54 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
        *((_QWORD *)v54 + 1) = 0;
        outlined destroy of StocksKitCurrencyCache.Provider?(v14, &demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
        v55 = specialized Sequence<>.uniqueElements()();
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>, Color>);
        (*(void (**)(char *, uint64_t))(v20 + 8))(v51, v19);
        v56 = v55;
        v14 = v112;
        specialized Array.append<A>(contentsOf:)(v56);
        v50 = &v113[(_QWORD)v50];
        --v49;
      }
      while (v49);
      swift_bridgeObjectRelease();
      v39 = (uint64_t)v115;
      v10 = v108;
    }
    v57 = specialized Set.init<A>(_:)(v39);
    swift_bridgeObjectRelease();
    v58 = *(_QWORD *)(v57 + 16);
    swift_bridgeObjectRelease();
    if (v58 == 1)
    {
      v59 = MEMORY[0x1E0DEE9D8];
      v115 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v60 = v29[2];
      if (v60)
      {
        v61 = (char *)v29
            + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
        v113 = *(char **)(v20 + 72);
        v15 = *(_QWORD *)(v20 + 16);
        swift_bridgeObjectRetain();
        v62 = v101;
        do
        {
          ((void (*)(char *, char *, uint64_t))v15)(v62, v61, v19);
          ((void (*)(uint64_t, char *, uint64_t))v15)(v14, v62, v19);
          ((void (*)(char *, uint64_t, uint64_t))v15)(v18, v14, v19);
          v63 = (id (**)@<X0>(uint64_t *@<X8>))&v18[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>)
                                                                     + 44)];
          *v63 = closure #1 in CRAttributedString.Runs<>.fontColors.getter;
          v63[1] = 0;
          v64 = &v18[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>)
                            + 36)];
          *(_QWORD *)v64 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
          *((_QWORD *)v64 + 1) = 0;
          v65 = &v18[*(int *)(v111 + 44)];
          *(_QWORD *)v65 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
          *((_QWORD *)v65 + 1) = 0;
          outlined destroy of StocksKitCurrencyCache.Provider?(v14, &demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
          v66 = specialized Sequence<>.uniqueElements()();
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>, Color>);
          (*(void (**)(char *, uint64_t))(v20 + 8))(v62, v19);
          v67 = v66;
          v14 = v112;
          specialized Array.append<A>(contentsOf:)(v67);
          v61 = &v113[(_QWORD)v61];
          --v60;
        }
        while (v60);
        swift_bridgeObjectRelease();
        v59 = (uint64_t)v115;
        v10 = v108;
      }
      v26 = specialized Set.init<A>(_:)(v59);
      swift_bridgeObjectRelease();
      v68 = specialized Set.startIndex.getter(v26);
      v6 = v109;
      v19 = v110;
      if ((v70 & 1) != 0)
      {
        __break(1u);
      }
      else
      {
        if (*(_DWORD *)(v26 + 36) != v69)
        {
          while (1)
          {
            __break(1u);
LABEL_73:
            v35 = (_QWORD *)MEMORY[0x1DF0E4D64](0, v26);
LABEL_10:
            v36 = v35;
            v37 = swift_bridgeObjectRelease();
            (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v36) + 0x90))(v37);
            if (!v38)
              break;

LABEL_15:
            v34 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            v33 = v109;
LABEL_16:
            v115 = v34;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33 & ~(v33 >> 63), 0);
            if ((v109 & 0x8000000000000000) == 0)
            {
              v14 = 0;
              v40 = v110;
              v104 = v110 & 0xC000000000000001;
              while (1)
              {
                v41 = v104 ? (_QWORD *)MEMORY[0x1DF0E4D64](v14) : *(id *)(v40 + 8 * v14 + 32);
                v29 = v41;
                v42 = (_QWORD *)MEMORY[0x1E0DEEDD8];
                v43 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v41) + 0x88))();
                v26 = (*(uint64_t (**)(uint64_t))((*v42 & *v29) + 0x90))(v43);
                v32 = v44;
                if (v26 == NSNotFound.getter())
                  break;
                if (__OFADD__(v26, v32))
                  goto LABEL_69;
                v45 = v106;
                CRAttributedString.subscript.getter();
                (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v10, v45);
                v46 = v108;
                CRAttributedString.Substring.runs.getter();
                (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v6, v46);

                v29 = v115;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1);
                  v29 = v115;
                }
                v15 = v29[2];
                v47 = v29[3];
                if (v15 >= v47 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v15 + 1, 1);
                  v29 = v115;
                }
                ++v14;
                v29[2] = v15 + 1;
                (*(void (**)(unint64_t, char *, uint64_t))(v20 + 32))((unint64_t)v29+ ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))+ *(_QWORD *)(v20 + 72) * v15, v113, v19);
                v40 = v110;
                if (v109 == v14)
                {
                  v14 = v112;
                  v39 = MEMORY[0x1E0DEE9D8];
                  goto LABEL_29;
                }
              }
              __break(1u);
LABEL_69:
              __break(1u);
LABEL_70:
              v100 = v26;
              swift_bridgeObjectRetain();
              v26 = v100;
              v109 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              v33 = v109;
              goto LABEL_3;
            }
            __break(1u);
          }
          v79 = *(void **)((char *)v36 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
          if (v79)
          {
            v80 = v79;
            v81 = objc_msgSend(v80, sel_typingAttributes);
            type metadata accessor for NSAttributedStringKey(0);
            lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
            v82 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

            CRAttributedString.Attributes<>.init(nsAttributes:darkMode:)(v82, 0);
            swift_getKeyPath();
            lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
            CRAttributedString.Attributes.subscript.getter();
            swift_release();
            v83 = v116;
            v99 = v36;
            v113 = v80;
            if (v116 == 1)
            {
              v108 = 0x63697465766C6548;
              v19 = 0xE900000000000061;
            }
            else
            {
              v85 = v117;
              v84 = v118;
              v86 = (uint64_t)v115;
              swift_bridgeObjectRetain();
              outlined consume of Font?(v86, v83);
              v87 = 0x63697465766C6548;
              if (v84)
                v87 = v85;
              v108 = v87;
              if (v84)
                v19 = v84;
              else
                v19 = 0xE900000000000061;
            }
            swift_bridgeObjectRelease();
            v6 = (uint64_t)CRAttributedString.Attributes<>.fontSize.getter();
            swift_getKeyPath();
            lazy protocol witness table accessor for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute();
            CRAttributedString.Attributes.subscript.getter();
            swift_release();
            v71 = (CGColor *)v115;
            if (v115)
              goto LABEL_57;
            if (one-time initialization token for textBoxDefaultTextColor == -1)
              goto LABEL_56;
            goto LABEL_75;
          }
          v10 = 0x63697465766C6548;

          v76 = 0;
          v71 = 0;
          v72 = 0;
          v74 = 0;
          v75 = 0;
          v77 = 1;
          v19 = 0xE900000000000061;
          v6 = 5;
LABEL_44:
          v78 = v103;
          *v103 = v10;
          v78[1] = v19;
          v78[2] = v6;
          *((_BYTE *)v78 + 24) = v76;
          v78[4] = (uint64_t)v71;
          v78[5] = v72;
          *((_BYTE *)v78 + 48) = v77;
          v78[7] = v74;
          v78[8] = v75;
          v78[9] = v102;
          return;
        }
        if (v68 != 1 << *(_BYTE *)(v26 + 32))
        {
          specialized Set.subscript.getter(v68, v69, v26, &v115);
          swift_bridgeObjectRelease();
          v71 = (CGColor *)v115;
LABEL_43:
          v72 = Array<A>.textAlignment.getter((uint64_t)v29);
          v121 = v73 & 1;
          v74 = Array<A>.textStyles.getter((uint64_t)v29);
          v75 = Array<A>.allowedTextStyles.getter((uint64_t)v29);
          swift_bridgeObjectRelease();
          v76 = v122;
          v77 = v121;
          goto LABEL_44;
        }
      }
      swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_78;
    }
    v71 = 0;
    v6 = v109;
    v19 = v110;
    goto LABEL_43;
  }
  v109 = v33;
  if (v33 != 1)
    goto LABEL_16;
  v100 = v26;
  if (v32)
  {
    swift_bridgeObjectRetain();
    v26 = _CocoaArrayWrapper.endIndex.getter();
    if (v26)
      goto LABEL_7;
LABEL_14:
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v26 = *(_QWORD *)((v110 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v26)
    goto LABEL_14;
LABEL_7:
  v26 = v110;
  if ((v110 & 0xC000000000000001) != 0)
    goto LABEL_73;
  if (*(_QWORD *)((v110 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v35 = *(id *)(v110 + 32);
    goto LABEL_10;
  }
  __break(1u);
LABEL_75:
  swift_once();
LABEL_56:
  v88 = (id)static UIConstants.textBoxDefaultTextColor;
  Color.init(cgColor:)((CGColor *)objc_msgSend(v88, sel_CGColor), &v114);

  v71 = v114;
  if (v114)
  {
LABEL_57:
    swift_getKeyPath();
    lazy protocol witness table accessor for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute();
    CRAttributedString.Attributes.subscript.getter();
    swift_release();
    if ((_BYTE)v116)
      v72 = 0;
    else
      v72 = (uint64_t)v115;
    v74 = CRAttributedString.Attributes<>.textStyles.getter();
    swift_getKeyPath();
    CRAttributedString.Attributes.subscript.getter();
    swift_release();
    v89 = v116;
    if (v116 == 1)
    {

      v75 = 15;
    }
    else
    {
      v90 = v120;
      v91 = v117;
      v110 = v19;
      v111 = v118;
      v109 = v6;
      v92 = (uint64_t)v115;
      v106 = v119;
      v107 = v117;
      v93 = v119;
      v94 = Font.supportsBold.getter();
      v95 = 14;
      v115 = (_QWORD *)v92;
      v116 = v89;
      if ((v94 & 1) != 0)
        v95 = 15;
      v112 = v95;
      v117 = v91;
      v118 = v111;
      LODWORD(v119) = v93;
      v120 = v90;
      v96 = Font.supportsItalic.getter();
      v97 = v92;
      v6 = v109;
      v19 = v110;
      outlined consume of Font?(v97, v89);

      if ((v96 & 1) != 0)
        v75 = v112;
      else
        v75 = v112 & 0xD;
    }
    v10 = v108;
    (*(void (**)(_QWORD *, uint64_t))(v104 + 8))(v29, v100);
    v77 = 0;
    v76 = 0;
    goto LABEL_44;
  }
LABEL_78:
  __break(1u);
}

void closure #1 in variable initialization expression of TextBoxViewAttributes.fontButtonImage()
{
  uint64_t v0;
  double v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;

  v0 = *MEMORY[0x1E0DC4A88];
  v1 = *MEMORY[0x1E0DC1448];
  v2 = (void *)*MEMORY[0x1E0DC4920];
  v3 = (void *)objc_opt_self();
  v4 = v2;
  v5 = objc_msgSend(v3, sel_traitCollectionWithPreferredContentSizeCategory_, v4);
  v6 = objc_msgSend((id)objc_opt_self(), sel__preferredFontForTextStyle_weight_, v0, v1);
  if (!v6)
  {
    __break(1u);
    goto LABEL_6;
  }
  v7 = v6;
  v8 = objc_msgSend(v6, sel__fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection_, v5);

  if (!v8)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v9 = objc_msgSend((id)objc_opt_self(), sel_configurationWithFont_scale_, v8, 2);

  v10 = v9;
  v11 = (void *)MEMORY[0x1DF0E41AC](0x6D726F6674786574, 0xEA00000000007461);
  v12 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v11, v10);

  if (v12)
  {
    objc_msgSend(v12, sel_imageWithRenderingMode_, 2);

    return;
  }
LABEL_7:
  __break(1u);
}

BOOL specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:)(_QWORD *a1)
{
  return *a1 != 0;
}

id specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:)@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = *a1;
  if (result)
  {
    *a2 = result;
    return result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Runs and conformance CRAttributedString<A>.Runs(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
    result = MEMORY[0x1DF0E6450](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void one-time initialization function for maximumLinkViewSizeHeightToFit()
{
  maximumLinkViewSizeHeightToFit = 0x4079000000000000;
}

id SynapseLinkView.linkPresentationView.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  objc_class *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;

  v1 = OBJC_IVAR____TtC8PaperKit15SynapseLinkView____lazy_storage___linkPresentationView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkView____lazy_storage___linkPresentationView);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkView____lazy_storage___linkPresentationView);
  }
  else
  {
    v4 = (objc_class *)MEMORY[0x1E0CC11C8];
    v5 = objc_retain(*(id *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkView_synapseLink)
                           + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem));
    v6 = (void *)objc_msgSend([v4 alloc], "_initWithSynapseContentItem:", v5);

    v7 = v6;
    v8 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v7;
    v3 = v7;

    v2 = 0;
  }
  v9 = v2;
  return v3;
}

uint64_t SynapseLinkView.analytics.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;

  v1 = OBJC_IVAR____TtC8PaperKit15SynapseLinkView____lazy_storage___analytics;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkView____lazy_storage___analytics))
  {
    inited = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkView____lazy_storage___analytics);
  }
  else
  {
    type metadata accessor for Analytics();
    inited = swift_initStaticObject();
    *(_QWORD *)(v0 + v1) = inited;
    swift_release();
  }
  swift_retain();
  return inited;
}

char *SynapseLinkView.init(canvas:synapseItem:)(void *a1, void *a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  id v19;
  id v20;
  objc_class *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  id v34;
  id v35;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MidX;
  id v41;
  uint64_t v42;
  id v43;
  char *v44;
  objc_super v46;
  CGAffineTransform v47;
  CGRect v48;
  CGRect v49;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v46 - v11;
  *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit15SynapseLinkView____lazy_storage___linkPresentationView] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit15SynapseLinkView____lazy_storage___analytics] = 0;
  swift_unknownObjectWeakInit();
  v13 = OBJC_IVAR____TtC8PaperKit15SynapseLinkView_viewModelSize;
  v14 = one-time initialization token for linkSize;
  v15 = v2;
  if (v14 != -1)
    swift_once();
  *(_OWORD *)&v2[v13] = static UIConstants.linkSize;
  v16 = &v15[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_viewScaleTransform];
  CGAffineTransformMakeScale(&v47, 1.0, 1.0);
  v17 = *(_OWORD *)&v47.c;
  v18 = *(_OWORD *)&v47.tx;
  *(_OWORD *)v16 = *(_OWORD *)&v47.a;
  *((_OWORD *)v16 + 1) = v17;
  *((_OWORD *)v16 + 2) = v18;
  v15[OBJC_IVAR____TtC8PaperKit15SynapseLinkView____lazy_storage___hasUserActivityWithLinkContextInfo] = 2;
  v19 = objc_allocWithZone((Class)type metadata accessor for SynapseLinkItem());
  v20 = a2;
  *(_QWORD *)&v15[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_synapseLink] = SynapseLinkItem.init(synapseItem:)(v20);

  v21 = (objc_class *)type metadata accessor for SynapseLinkView();
  v46.receiver = v15;
  v46.super_class = v21;
  v22 = (char *)objc_msgSendSuper2(&v46, sel_init);
  v23 = *(_QWORD *)&v22[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_synapseLink]
      + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_delegate;
  swift_beginAccess();
  *(_QWORD *)(v23 + 8) = &protocol witness table for SynapseLinkView;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakAssign();
  v24 = v22;
  v25 = objc_msgSend(v20, sel_itemURL);
  if (v25)
  {
    v26 = v25;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v27 = type metadata accessor for URL();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v8, 0, 1, v27);
  }
  else
  {
    v27 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v8, 1, 1, v27);
  }
  outlined init with take of URL?((uint64_t)v8, (uint64_t)v12);
  type metadata accessor for URL();
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v12, 1, v27) == 1)
  {
    outlined destroy of URL?((uint64_t)v12);
    v29 = 0;
  }
  else
  {
    v30 = URL.absoluteString.getter();
    v32 = v31;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v27);
    v29 = (void *)MEMORY[0x1DF0E41AC](v30, v32);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v24, sel_setAccessibilityLabel_, v29);

  objc_msgSend(v24, sel_setClipsToBounds_, 1);
  v33 = v24;
  v34 = SynapseLinkView.linkPresentationView.getter();
  objc_msgSend(v33, sel_addSubview_, v34);

  v35 = SynapseLinkView.linkPresentationView.getter();
  objc_msgSend(v33, sel_bounds);
  x = v48.origin.x;
  y = v48.origin.y;
  width = v48.size.width;
  height = v48.size.height;
  MidX = CGRectGetMidX(v48);
  v49.origin.x = x;
  v49.origin.y = y;
  v49.size.width = width;
  v49.size.height = height;
  objc_msgSend(v35, sel_setFrame_, MidX - *(double *)&v33[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_viewModelSize] * 0.5, CGRectGetMidY(v49) - *(double *)&v33[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_viewModelSize + 8] * 0.5);

  v41 = SynapseLinkView.linkPresentationView.getter();
  if ((SynapseLinkView.hasUserActivityWithLinkContextInfo.getter() & 1) != 0)
    v42 = 9;
  else
    v42 = 8;
  objc_msgSend(v41, sel__setPreferredSizeClass_, v42);

  v43 = SynapseLinkView.linkPresentationView.getter();
  v44 = v33;
  objc_msgSend(v43, sel_setDelegate_, v44);

  return v44;
}

Swift::Void __swiftcall SynapseLinkView.layoutSubviews()()
{
  char *v0;
  id v1;
  id v2;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MidX;
  CGFloat MidY;
  double *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v15;
  double v16;
  CGFloat v17;
  double v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  id v22;
  __int128 v23;
  CGAffineTransform v24;
  CGAffineTransform v25;
  objc_super v26;
  CGRect v27;
  CGRect v28;

  v26.receiver = v0;
  v26.super_class = (Class)type metadata accessor for SynapseLinkView();
  objc_msgSendSuper2(&v26, sel_layoutSubviews);
  v1 = SynapseLinkView.linkPresentationView.getter();
  v25.a = 1.0;
  v25.b = 0.0;
  v25.c = 0.0;
  v25.d = 1.0;
  v25.tx = 0.0;
  v25.ty = 0.0;
  objc_msgSend(v1, sel_setTransform_, &v25);

  v2 = SynapseLinkView.linkPresentationView.getter();
  objc_msgSend(v0, sel_bounds);
  x = v27.origin.x;
  y = v27.origin.y;
  width = v27.size.width;
  height = v27.size.height;
  MidX = CGRectGetMidX(v27);
  v28.origin.x = x;
  v28.origin.y = y;
  v28.size.width = width;
  v28.size.height = height;
  MidY = CGRectGetMidY(v28);
  v9 = (double *)&v0[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_viewModelSize];
  objc_msgSend(v2, sel_setFrame_, MidX - *(double *)&v0[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_viewModelSize] * 0.5, MidY - *(double *)&v0[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_viewModelSize + 8] * 0.5);

  v10 = *v9;
  v11 = v9[1];
  objc_msgSend(v0, sel_bounds);
  if (v10 != v13 || v11 != v12)
  {
    objc_msgSend(v0, sel_bounds);
    v15 = v9[1];
    v17 = v16 / *v9;
    v25.a = 1.0;
    v25.b = 0.0;
    v25.c = 0.0;
    v25.d = 1.0;
    v25.tx = 0.0;
    v25.ty = 0.0;
    CGAffineTransformScale(&v24, &v25, v17, v18 / v15);
    v19 = *(_OWORD *)&v24.c;
    v20 = *(_OWORD *)&v24.tx;
    v21 = &v0[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_viewScaleTransform];
    *(_OWORD *)v21 = *(_OWORD *)&v24.a;
    *((_OWORD *)v21 + 1) = v19;
    *((_OWORD *)v21 + 2) = v20;
    v22 = SynapseLinkView.linkPresentationView.getter();
    v23 = *((_OWORD *)v21 + 1);
    *(_OWORD *)&v25.a = *(_OWORD *)v21;
    *(_OWORD *)&v25.c = v23;
    *(_OWORD *)&v25.tx = *((_OWORD *)v21 + 2);
    objc_msgSend(v22, sel_setTransform_, &v25);

  }
}

Swift::Void __swiftcall SynapseLinkView.tapped(_:)(UITapGestureRecognizer_optional *a1)
{
  void *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  NSObject *v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  char **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  os_log_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  char *v56;
  _QWORD *v57;
  void *v58;
  char *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t ObjectType;
  char *v65;
  NSObject *v66;
  os_log_type_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void (*isa)(char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  NSObject *v77;
  _QWORD *v78;
  uint64_t v79;
  char *v80;
  _QWORD *v81;
  uint64_t v82;
  os_log_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  _QWORD *v89;
  uint64_t v90;
  NSObject *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94[3];
  uint64_t v95[3];

  v95[1] = *MEMORY[0x1E0C80C00];
  v92 = type metadata accessor for URL();
  v2 = *(NSObject **)(v92 - 8);
  MEMORY[0x1E0C80A78](v92, v3);
  v5 = (char *)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v80 - v8;
  v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v90, v10);
  v88 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v80 - v14;
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v80 - v18;
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v80 - v22;
  if (one-time initialization token for logger != -1)
    swift_once();
  v24 = type metadata accessor for Logger();
  v25 = __swift_project_value_buffer(v24, (uint64_t)logger);
  v26 = v1;
  v87 = v25;
  v27 = Logger.logObject.getter();
  LODWORD(v89) = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v27, (os_log_type_t)v89))
  {
    v80 = v23;
    v83 = v27;
    v84 = v15;
    v85 = v5;
    v86 = v9;
    v91 = v2;
    v28 = swift_slowAlloc();
    v29 = (_QWORD *)swift_slowAlloc();
    v82 = swift_slowAlloc();
    v94[0] = v82;
    *(_DWORD *)v28 = 138412803;
    v95[0] = (uint64_t)v26;
    v30 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v81 = v29;
    *v29 = v26;

    *(_WORD *)(v28 + 12) = 2081;
    v31 = *(_QWORD *)&v30[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_synapseLink];
    v32 = OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem;
    v33 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v31
                                                                + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem), sel_itemURL));
    if (v33)
    {
      v34 = v33;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v35 = 0;
    }
    else
    {
      v35 = 1;
    }
    v38 = (uint64_t)v80;
    v37 = v92;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v91[7].isa)(v19, v35, 1, v92);
    outlined init with take of URL?((uint64_t)v19, v38);
    v39 = String.init<A>(describing:)();
    v95[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 22) = 2081;
    v36 = &selRef_setCanvasWidth_;
    v95[0] = (uint64_t)objc_msgSend(*(id *)(v31 + v32), sel_userActivity);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSUserActivity?);
    v41 = String.init<A>(describing:)();
    v95[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v2 = v91;
    swift_bridgeObjectRelease();
    v43 = v83;
    _os_log_impl(&dword_1DDB0F000, v83, (os_log_type_t)v89, "Tapped on link: %@, targetURL: %{private}s, userActivity: %{private}s", (uint8_t *)v28, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v44 = v81;
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v44, -1, -1);
    v45 = v82;
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v45, -1, -1);
    MEMORY[0x1DF0E6558](v28, -1, -1);

    v5 = v85;
    v9 = v86;
    v15 = v84;
  }
  else
  {

    v36 = &selRef_setCanvasWidth_;
    v37 = v92;
  }
  v46 = *(_QWORD *)&v26[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_synapseLink];
  v47 = OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem;
  v48 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v46
                                                              + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem), v36[113]));

  if (v48)
  {
    SynapseLinkView.openLink()();
    return;
  }
  v49 = objc_msgSend(*(id *)(v46 + v47), sel_itemURL);
  if (v49)
  {
    v50 = v49;
    v51 = (uint64_t)v88;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v52 = 0;
  }
  else
  {
    v52 = 1;
    v51 = (uint64_t)v88;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v2[7].isa)(v51, v52, 1, v37);
  outlined init with take of URL?(v51, (uint64_t)v15);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v2[6].isa)(v15, 1, v37) == 1)
  {
    outlined destroy of URL?((uint64_t)v15);
    v53 = Logger.logObject.getter();
    v54 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v55 = 0;
      _os_log_impl(&dword_1DDB0F000, v53, v54, "Unable to open link", v55, 2u);
      MEMORY[0x1DF0E6558](v55, -1, -1);
    }

    return;
  }
  ((void (*)(char *, char *, uint64_t))v2[4].isa)(v9, v15, v37);
  v56 = &v26[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_canvas];
  v57 = (_QWORD *)MEMORY[0x1DF0E666C](&v26[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_canvas]);
  if (v57)
  {
    v58 = v57;
    v59 = v5;
    v60 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v57) + 0x88))();
    if (v60)
    {
      v61 = (void *)v60;
      v62 = v60 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate;
      swift_beginAccess();
      if (MEMORY[0x1DF0E666C](v62))
      {
        v63 = *(_QWORD *)(v62 + 8);
        ObjectType = swift_getObjectType();
        LOBYTE(v63) = (*(uint64_t (**)(void *, char *, uint64_t, uint64_t))(v63 + 48))(v61, v9, ObjectType, v63);

        swift_unknownObjectRelease();
        if ((v63 & 1) == 0)
        {

          v5 = v59;
          goto LABEL_23;
        }
      }
      else
      {

      }
    }
    SynapseLinkView.openLink()();

    ((void (*)(char *, uint64_t))v2[1].isa)(v9, v37);
    return;
  }
LABEL_23:
  ((void (*)(char *, char *, uint64_t))v2[2].isa)(v5, v9, v37);
  v65 = v26;
  v66 = Logger.logObject.getter();
  v67 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v66, v67))
  {
    v91 = v66;
    v86 = v9;
    v68 = v5;
    v69 = swift_slowAlloc();
    v89 = (_QWORD *)swift_slowAlloc();
    v90 = swift_slowAlloc();
    v95[0] = v90;
    *(_DWORD *)v69 = 136380931;
    lazy protocol witness table accessor for type URL and conformance URL();
    v70 = dispatch thunk of CustomStringConvertible.description.getter();
    v71 = v37;
    v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v72, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    isa = (void (*)(char *, uint64_t))v2[1].isa;
    isa(v68, v71);
    *(_WORD *)(v69 + 12) = 2112;
    v74 = MEMORY[0x1DF0E666C](v56);
    v75 = v74;
    if (v74)
      v93 = v74;
    else
      v93 = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v77 = v91;
    v78 = v89;
    *v89 = v75;

    _os_log_impl(&dword_1DDB0F000, v77, v67, "Refused to open link with targetURL: %{private}s, canvas: %@", (uint8_t *)v69, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v78, -1, -1);
    v79 = v90;
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v79, -1, -1);
    MEMORY[0x1DF0E6558](v69, -1, -1);

    isa(v86, v92);
  }
  else
  {

    v76 = (void (*)(char *, uint64_t))v2[1].isa;
    v76(v5, v37);
    v76(v9, v37);
  }
}

void SynapseLinkView.openLink()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  id v28;
  void *v29;
  void *v30;
  _QWORD v31[2];
  _QWORD *v32;
  int v33;
  uint64_t v34;
  id v35;
  uint64_t aBlock[6];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v31 - v7;
  if (one-time initialization token for logger != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)logger);
  v10 = v0;
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, (os_log_type_t)v12))
  {
    v31[1] = v1;
    v33 = v12;
    v13 = swift_slowAlloc();
    v14 = (_QWORD *)swift_slowAlloc();
    v34 = swift_slowAlloc();
    v35 = v10;
    aBlock[0] = v34;
    *(_DWORD *)v13 = 138412803;
    v15 = (char *)v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v32 = v14;
    *v14 = v10;

    *(_WORD *)(v13 + 12) = 2081;
    v16 = *(_QWORD *)&v15[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_synapseLink];
    v17 = OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem;
    v18 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v16
                                                                + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem), sel_itemURL));
    if (v18)
    {
      v19 = v18;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      v20 = type metadata accessor for URL();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v4, 0, 1, v20);
    }
    else
    {
      v21 = type metadata accessor for URL();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v4, 1, 1, v21);
    }
    outlined init with take of URL?((uint64_t)v4, (uint64_t)v8);
    v22 = String.init<A>(describing:)();
    v35 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 22) = 2081;
    v35 = objc_msgSend(*(id *)(v16 + v17), sel_userActivity);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSUserActivity?);
    v24 = String.init<A>(describing:)();
    v35 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1DDB0F000, v11, (os_log_type_t)v33, "Opening link: %@, targetURL: %{private}s, userActivity: %{private}s", (uint8_t *)v13, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSObject?);
    v26 = v32;
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v26, -1, -1);
    v27 = v34;
    swift_arrayDestroy();
    MEMORY[0x1DF0E6558](v27, -1, -1);
    MEMORY[0x1DF0E6558](v13, -1, -1);

  }
  else
  {

  }
  v28 = SynapseLinkView.linkPresentationView.getter();
  objc_msgSend(v28, sel__openURL);

  SynapseLinkView.analytics.getter();
  v29 = (void *)MEMORY[0x1DF0E41AC](0xD00000000000001ELL, 0x80000001DDF4AF40);
  aBlock[4] = (uint64_t)specialized closure #1 in Analytics.sendEventLazy(key:payload:);
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  aBlock[3] = (uint64_t)&block_descriptor_4_0;
  v30 = _Block_copy(aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v30);
  swift_release();

}

void SynapseLinkView.isSelected.setter(char a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  _QWORD v4[6];

  *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit8LinkView_isSelected) = a1;
  if ((a1 & 1) != 0)
  {
    SynapseLinkView.analytics.getter();
    v2 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000020, 0x80000001DDF4AF70);
    v4[4] = specialized closure #1 in Analytics.sendEventLazy(key:payload:);
    v4[5] = 0;
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 1107296256;
    v4[2] = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
    v4[3] = &block_descriptor_66;
    v3 = _Block_copy(v4);
    swift_release();
    AnalyticsSendEventLazy();
    _Block_release(v3);
    swift_release();

  }
}

Swift::OpaquePointer_optional __swiftcall SynapseLinkView.pasteboardRepresentation()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  void *v36;
  void *v37;
  id v38;
  void *v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *boxed_opaque_existential_1;
  char v47;
  Swift::Bool v48;
  void *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  _OWORD v56[2];
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  Swift::OpaquePointer_optional result;

  v59 = *MEMORY[0x1E0C80C00];
  v1 = type metadata accessor for UTType();
  v52 = *(_QWORD *)(v1 - 8);
  v53 = v1;
  MEMORY[0x1E0C80A78](v1, v2);
  v51 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v54 = (char *)&v50 - v15;
  v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v17 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkView_synapseLink);
  v18 = OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem;
  v19 = *(void **)(v17 + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem);
  *(_QWORD *)&v57 = 0;
  v20 = objc_msgSend(v19, sel_dataRepresentationWithError_, &v57);
  v21 = (id)v57;
  if (v20)
  {
    v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v24 = v23;

    v25 = v16;
    v26 = v9;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v50 = v18;
    v28 = v7;
    v29 = v17;
    v30 = v8;
    v31 = v12;
    v33 = v32;
    v58 = MEMORY[0x1E0CB0338];
    *(_QWORD *)&v57 = v22;
    *((_QWORD *)&v57 + 1) = v24;
    outlined init with take of Any(&v57, v56);
    outlined copy of Data._Representation(v22, v24);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v55 = v25;
    v35 = v27;
    v9 = v26;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v56, v35, v33, isUniquelyReferenced_nonNull_native);
    v16 = v55;
    v12 = v31;
    v8 = v30;
    v17 = v29;
    v7 = v28;
    v18 = v50;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v22, v24);
  }
  else
  {
    v36 = v21;
    v37 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
  }
  v38 = objc_msgSend(*(id *)(v17 + v18), sel_itemURL);
  if (!v38)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
    goto LABEL_8;
  }
  v39 = v38;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  v40 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v40(v7, v12, v8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
LABEL_8:
    outlined destroy of URL?((uint64_t)v7);
    goto LABEL_9;
  }
  v41 = v54;
  v40(v54, v7, v8);
  v42 = v51;
  static UTType.url.getter();
  v43 = UTType.identifier.getter();
  v45 = v44;
  (*(void (**)(char *, uint64_t))(v52 + 8))(v42, v53);
  v58 = v8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v57);
  (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(boxed_opaque_existential_1, v41, v8);
  outlined init with take of Any(&v57, v56);
  v47 = swift_isUniquelyReferenced_nonNull_native();
  v55 = v16;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v56, v43, v45, v47);
  v16 = v55;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v41, v8);
LABEL_9:
  v49 = (void *)v16;
  result.value._rawValue = v49;
  result.is_nil = v48;
  return result;
}

uint64_t SynapseLinkView.hasUserActivityWithLinkContextInfo.getter()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t result;
  void *v4;
  id v5;

  v1 = OBJC_IVAR____TtC8PaperKit15SynapseLinkView____lazy_storage___hasUserActivityWithLinkContextInfo;
  v2 = *(unsigned __int8 *)(v0
                          + OBJC_IVAR____TtC8PaperKit15SynapseLinkView____lazy_storage___hasUserActivityWithLinkContextInfo);
  if (v2 != 2)
    return v2 & 1;
  result = (uint64_t)objc_msgSend(*(id *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit15SynapseLinkView_synapseLink)+ OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem), sel_userActivity);
  if (result)
  {
    v4 = (void *)result;
    v5 = objc_msgSend((id)result, sel__linkContextInfo);

    if (v5)
    {

      result = 1;
    }
    else
    {
      result = 0;
    }
  }
  *(_BYTE *)(v0 + v1) = result;
  return result;
}

Swift::Void __swiftcall SynapseLinkView.linkViewNeedsResize(_:)(LPLinkView *a1)
{
  uint64_t v1;
  double v3;
  double v4;
  __int128 v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;

  if (one-time initialization token for linkSize != -1)
    swift_once();
  v3 = *(double *)&static UIConstants.linkSize;
  if (one-time initialization token for maximumLinkViewSizeHeightToFit != -1)
    swift_once();
  -[LPLinkView sizeThatFits:](a1, sel_sizeThatFits_, v3, *(double *)&maximumLinkViewSizeHeightToFit);
  v5 = static UIConstants.linkSize;
  if (*((double *)&static UIConstants.linkSize + 1) > v4)
    v6 = *((double *)&static UIConstants.linkSize + 1);
  else
    v6 = v4;
  v7 = v1 + OBJC_IVAR____TtC8PaperKit15SynapseLinkView_viewModelSize;
  *(_QWORD *)v7 = static UIConstants.linkSize;
  *(double *)(v7 + 8) = v6;
  v8 = v1 + OBJC_IVAR____TtC8PaperKit8LinkView_delegate;
  if (MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit8LinkView_delegate))
  {
    v9 = *(_QWORD *)(v8 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, double, double))(v9 + 16))(v1, ObjectType, v9, *(double *)&v5, v6);
    swift_unknownObjectRelease();
  }
}

uint64_t SynapseLinkView.__ivar_destroyer()
{
  uint64_t v0;

  swift_release();
  return swift_unknownObjectWeakDestroy();
}

id SynapseLinkView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SynapseLinkView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SynapseLinkView()
{
  return objc_opt_self();
}

void protocol witness for LinkItemDelegate.linkItemDidUpdatePreview(_:) in conformance SynapseLinkView()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;

  type metadata accessor for SynapseLinkItem();
  v0 = swift_dynamicCastClass();
  if (v0)
  {
    v1 = v0;
    swift_unknownObjectRetain();
    v2 = SynapseLinkView.linkPresentationView.getter();
    v3 = objc_retainAutoreleasedReturnValue(LPLinkMetadataWithSynapseContentItem(*(void **)(v1
                                                                                          + OBJC_IVAR____TtC8PaperKit15SynapseLinkItem_synapseItem)));
    objc_msgSend(v2, sel_setMetadata_, v3);
    swift_unknownObjectRelease();

  }
}

id LPLinkMetadataWithSynapseContentItem(void *a1)
{
  objc_class *v1;
  id v2;
  void *v3;

  v1 = (objc_class *)MEMORY[0x1E0CC11A8];
  v2 = a1;
  v3 = (void *)objc_msgSend([v1 alloc], "_initWithSynapseContentItem:", v2);

  return v3;
}

uint64_t block_copy_helper_66(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_66()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type URL and conformance URL()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type URL and conformance URL;
  if (!lazy protocol witness table cache variable for type URL and conformance URL)
  {
    v1 = type metadata accessor for URL();
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CB0048], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL);
  }
  return result;
}

void specialized SynapseLinkView.init(coder:)()
{
  _BYTE *v0;
  uint64_t v1;
  _OWORD *v2;
  __int128 v3;
  __int128 v4;
  CGAffineTransform v5;

  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit15SynapseLinkView____lazy_storage___linkPresentationView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit15SynapseLinkView____lazy_storage___analytics] = 0;
  swift_unknownObjectWeakInit();
  v1 = OBJC_IVAR____TtC8PaperKit15SynapseLinkView_viewModelSize;
  if (one-time initialization token for linkSize != -1)
    swift_once();
  *(_OWORD *)&v0[v1] = static UIConstants.linkSize;
  v2 = &v0[OBJC_IVAR____TtC8PaperKit15SynapseLinkView_viewScaleTransform];
  CGAffineTransformMakeScale(&v5, 1.0, 1.0);
  v3 = *(_OWORD *)&v5.c;
  v4 = *(_OWORD *)&v5.tx;
  *v2 = *(_OWORD *)&v5.a;
  v2[1] = v3;
  v2[2] = v4;
  v0[OBJC_IVAR____TtC8PaperKit15SynapseLinkView____lazy_storage___hasUserActivityWithLinkContextInfo] = 2;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

BOOL specialized SynapseLinkView._wantsContextMenuPreview(for:)()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;

  v1 = objc_msgSend(v0, sel_traitCollection);
  v2 = objc_msgSend(v1, sel_userInterfaceIdiom);

  if (v2 != (id)1)
    return 1;
  v3 = objc_msgSend(v0, sel_window);
  if (!v3)
    return 1;
  v4 = v3;
  objc_msgSend(v3, sel_bounds);
  v6 = v5;
  v8 = v7;

  if (one-time initialization token for minimumWindowSizeToShowLinkPreviewsOnPad != -1)
    swift_once();
  return *((double *)&static UIConstants.minimumWindowSizeToShowLinkPreviewsOnPad + 1) <= v8
      && *(double *)&static UIConstants.minimumWindowSizeToShowLinkPreviewsOnPad <= v6;
}

uint64_t CGPathRef.convexHull(centroidRatio:)(double a1)
{
  const CGPath *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float64x2_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float64x2_t *v19;
  unint64_t v20;
  uint64_t v21;
  float64x2_t *v22;
  float64x2_t v23;
  BOOL v24;
  uint64_t v25;
  double v26;
  double v27;
  double *v28;
  _QWORD *v29;
  double v30;
  double v31;
  unint64_t v32;
  unint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  _QWORD aBlock[6];
  uint64_t v43;

  v43 = MEMORY[0x1E0DEE9D8];
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = &v43;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = partial apply for closure #1 in CGPathRef.cgPoints();
  *(_QWORD *)(v4 + 24) = v3;
  aBlock[4] = partial apply for thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  aBlock[5] = v4;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
  aBlock[3] = &block_descriptor_67;
  v5 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  CGPathApplyWithBlock(v1, v5);
  _Block_release(v5);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v8 = v43;
  result = swift_release();
  v9 = *(_QWORD *)(v8 + 16);
  if ((unint64_t)v9 < 2)
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  v10 = (double)v9 * a1;
  if ((~*(_QWORD *)&v10 & 0x7FF0000000000000) == 0)
    goto LABEL_35;
  if (v10 <= -9.22337204e18)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v10 >= 9.22337204e18)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  result = specialized Collection.dropFirst(_:)((uint64_t)v10, v8);
  v14 = v13 >> 1;
  v15 = 0uLL;
  v16 = (v13 >> 1) - v12;
  if (v13 >> 1 == v12)
    goto LABEL_16;
  if ((uint64_t)(v13 >> 1) > v12)
  {
    if (v16 >= 2)
    {
      v17 = v12 + (v16 & 0xFFFFFFFFFFFFFFFELL);
      v19 = (float64x2_t *)(v11 + 16 * v12 + 16);
      v20 = v16 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v15 = vaddq_f64(vaddq_f64(v15, v19[-1]), *v19);
        v19 += 2;
        v20 -= 2;
      }
      while (v20);
      if (v16 == (v16 & 0xFFFFFFFFFFFFFFFELL))
      {
LABEL_16:
        v24 = __OFSUB__(v14, v12);
        v25 = v14 - v12;
        if (!v24)
        {
          v26 = v15.f64[0] / (double)v25;
          v27 = v15.f64[1] / (double)v25;
          swift_bridgeObjectRetain();
          v28 = (double *)(v8 + 40);
          v29 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          do
          {
            v31 = *(v28 - 1);
            v30 = *v28;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v29[2] + 1, 1, v29);
            v33 = v29[2];
            v32 = v29[3];
            if (v33 >= v32 >> 1)
              v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v33 + 1, 1, v29);
            v29[2] = v33 + 1;
            *(double *)&v29[v33 + 4] = sqrt((v31 - v26) * (v31 - v26) + (v30 - v27) * (v30 - v27));
            v28 += 2;
            --v9;
          }
          while (v9);
          v34 = Array<A>.stdDev()((uint64_t)v29);
          v35 = specialized Sequence.filter(_:)(v8, (uint64_t)v29, v34);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v36 = *(_QWORD *)(v35 + 16);
          if (v36)
          {
            v37 = (__int128 *)(v35 + 40);
            v38 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            do
            {
              v41 = *v37;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
              v40 = v38[2];
              v39 = v38[3];
              if (v40 >= v39 >> 1)
                v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v39 > 1), v40 + 1, 1, v38);
              v38[2] = v40 + 1;
              *(_OWORD *)&v38[2 * v40 + 4] = v41;
              v37 = (__int128 *)((char *)v37 + 24);
              --v36;
            }
            while (v36);
          }
          else
          {
            v38 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          }
          swift_bridgeObjectRelease();
          v18 = Array<A>.convexHull()((uint64_t)v38);
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          return v18;
        }
        goto LABEL_38;
      }
    }
    else
    {
      v17 = v12;
    }
    v21 = v14 - v17;
    v22 = (float64x2_t *)(v11 + 16 * v17);
    do
    {
      v23 = *v22++;
      v15 = vaddq_f64(v15, v23);
      --v21;
    }
    while (v21);
    goto LABEL_16;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t specialized Collection.dropFirst(_:)(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v2 >= result)
      v3 = result;
    else
      v3 = *(_QWORD *)(a2 + 16);
    if (result)
      v4 = v3;
    else
      v4 = 0;
    if (v2 >= v4)
      return a2;
  }
  __break(1u);
  return result;
}

uint64_t CGPathRef.endPoints.getter()
{
  const CGPath *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD aBlock[6];
  _QWORD v7[2];
  _QWORD v8[2];
  char v9;

  v8[0] = 0;
  v8[1] = 0;
  v9 = 1;
  v7[0] = 0;
  v7[1] = 0;
  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = v8;
  *(_QWORD *)(v1 + 24) = v7;
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = partial apply for closure #1 in CGPathRef.endPoints.getter;
  *(_QWORD *)(v2 + 24) = v1;
  aBlock[4] = thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()partial apply;
  aBlock[5] = v2;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
  aBlock[3] = &block_descriptor_119;
  v3 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  CGPathApplyWithBlock(v0, v3);
  _Block_release(v3);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
    return swift_release();
  __break(1u);
  return result;
}

CGPathRef __swiftcall CGPathRef.lineSubtractingFromStart(_:)(CGPathRef a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  CGPathRef v14;
  void (*v15)(char *);
  BOOL v16;
  void (*v17)(char *, uint64_t);
  CGPathRef result;
  const CGPath *v19;
  uint64_t v20;
  const CGPath *Mutable;
  void *v22;
  uint64_t v23;
  CGFloat a;
  const CGPath *v25;
  uint64_t v26;
  char v27;
  char *v28;
  BOOL v29;
  CGPathRef v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  CGFloat *v35;
  CGFloat *v36;
  unint64_t v37;
  const CGPath *v38;
  const CGPath *v39;
  uint64_t v40;
  void *v41;
  const CGPath *v42;
  char isEscapingClosureAtFileLocation;
  const CGPath *v44;
  const CGPath *v45;
  uint64_t v46;
  void *v47;
  const CGPath *v48;
  uint64_t (**v49)();
  uint64_t v50;
  CGPathRef v51;
  const CGPath *v52;
  const CGPath *v53;
  CGFloat *p_tx;
  CGFloat *p_b;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t);
  void *v65;
  uint64_t (*v66)();
  uint64_t v67;
  char v68;
  CGAffineTransform transform;
  CGAffineTransform v70;
  uint64_t aBlock;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  uint64_t (*v75)();
  const CGPath *v76;

  v2 = type metadata accessor for CGPathFillRule();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v59 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v50 - v8;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v50 - v12;
  v14 = CGPathRef.openPath()();
  v15 = *(void (**)(char *))(v3 + 104);
  LODWORD(v60) = *MEMORY[0x1E0C9B8A0];
  v15(v13);
  LODWORD(v58) = *MEMORY[0x1E0C9B898];
  v15(v9);
  lazy protocol witness table accessor for type CGPathFillRule and conformance CGPathFillRule();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v16 = aBlock == *(_QWORD *)&v70.a;
  v17 = *(void (**)(char *, uint64_t))(v3 + 8);
  v17(v9, v2);
  v53 = v14;
  v61 = (uint64_t)a1;
  result = CGPathCreateCopyOfLineBySubtractingPath(v14, a1, v16);
  if (!result)
  {
    __break(1u);
LABEL_45:
    __break(1u);
    return result;
  }
  v19 = result;
  v17(v13, v2);
  v70.a = 0.0;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = &v70;
  Mutable = (const CGPath *)swift_allocObject();
  *((_QWORD *)Mutable + 2) = partial apply for closure #1 in CGPathRef.subpathCount.getter;
  *((_QWORD *)Mutable + 3) = v20;
  v75 = thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()partial apply;
  v76 = Mutable;
  aBlock = MEMORY[0x1E0C809B0];
  v72 = 1107296256;
  v73 = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
  v74 = (uint64_t)&block_descriptor_87_0;
  v22 = _Block_copy(&aBlock);
  v23 = (uint64_t)v76;
  swift_retain();
  swift_release();
  v52 = v19;
  CGPathApplyWithBlock(v19, v22);
  _Block_release(v22);
  LOBYTE(v22) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v22 & 1) != 0)
    goto LABEL_37;
  a = v70.a;
  swift_release();
  v25 = (const CGPath *)v61;
  v26 = v60;
  if (*(uint64_t *)&a > 1)
    goto LABEL_5;
  CGPathRef.endPoints.getter();
  ((void (*)(char *, uint64_t, uint64_t))v15)(v9, v26, v2);
  aBlock = 0x3FF0000000000000;
  v72 = 0;
  v73 = 0;
  v74 = 0x3FF0000000000000;
  v75 = 0;
  v76 = 0;
  v27 = CGPathRef.contains(_:using:transform:)();
  v17(v9, v2);
  if ((v27 & 1) != 0)
  {
LABEL_5:
    v28 = v59;
    ((void (*)(char *, uint64_t, uint64_t))v15)(v59, v26, v2);
    ((void (*)(char *, _QWORD, uint64_t))v15)(v9, v58, v2);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    v29 = *(_QWORD *)&v70.a == *(_QWORD *)&transform.a;
    v17(v9, v2);
    result = CGPathCreateCopyOfLineByIntersectingPath(v53, v25, v29);
    if (result)
    {
      v30 = result;
      v17(v28, v2);
      v23 = CGPathRef.subpaths.getter();
      v58 = CGPathRef.subpaths.getter();
      Mutable = CGPathCreateMutable();
      v51 = v30;
      if ((unint64_t)v23 >> 62)
        goto LABEL_38;
      v31 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
      while (1)
      {
        if (!v31)
        {
LABEL_30:

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v49 = (uint64_t (**)())&v74;
          goto LABEL_32;
        }
        v32 = v58;
        if (v58 >> 62)
        {
LABEL_43:
          v56 = v32 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain();
          v32 = v58;
          v61 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          v56 = v58 & 0xFFFFFFFFFFFFFF8;
          v61 = *(_QWORD *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        v33 = 0;
        v34 = v23 & 0xC000000000000001;
        v57 = v32 & 0xC000000000000001;
        p_b = &transform.b;
        p_tx = &transform.tx;
        v60 = v23;
        v59 = (char *)v31;
        while (1)
        {
          v37 = v33;
          if (v34)
            v38 = (const CGPath *)MEMORY[0x1DF0E4D64](v33, v23);
          else
            v38 = (const CGPath *)*(id *)(v23 + 8 * v33 + 32);
          v39 = v38;
          if (CGPathIsEmpty(Mutable))
          {
            v70.b = 0.0;
            v70.c = 0.0;
            v70.a = 1.0;
            v70.d = 1.0;
            v70.tx = 0.0;
            v70.ty = 0.0;
            CGMutablePathRef.addPath(_:transform:)(v39, &v70);

            goto LABEL_21;
          }
          v68 = 1;
          v40 = swift_allocObject();
          *(_QWORD *)(v40 + 16) = &v68;
          *(_QWORD *)(v40 + 24) = Mutable;
          v23 = swift_allocObject();
          *(_QWORD *)(v23 + 16) = closure #1 in CGMutablePathRef.addPathJoiningIfPossible(_:)partial apply;
          *(_QWORD *)(v23 + 24) = v40;
          v66 = thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()partial apply;
          v67 = v23;
          v62 = MEMORY[0x1E0C809B0];
          v63 = 1107296256;
          v64 = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
          v65 = &block_descriptor_98_1;
          v41 = _Block_copy(&v62);
          v42 = Mutable;
          swift_retain();
          swift_release();
          CGPathApplyWithBlock(v39, v41);
          _Block_release(v41);
          isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();

          swift_release();
          swift_release();
          if ((isEscapingClosureAtFileLocation & 1) != 0)
            break;
          v23 = v60;
          v31 = (uint64_t)v59;
LABEL_21:
          v33 = v37 + 1;
          if ((uint64_t)(v37 + 1) < v61)
          {
            if (v57)
            {
              v44 = (const CGPath *)MEMORY[0x1DF0E4D64](v37 + 1, v58);
            }
            else
            {
              if ((v33 & 0x8000000000000000) != 0)
                goto LABEL_34;
              if (v33 >= *(_QWORD *)(v56 + 16))
                goto LABEL_35;
              v44 = (const CGPath *)*(id *)(v58 + 8 * v37 + 40);
            }
            v45 = v44;
            if (CGPathIsEmpty(Mutable))
            {
              v35 = p_b;
              *p_b = 0.0;
              v35[1] = 0.0;
              transform.a = 1.0;
              transform.d = 1.0;
              v36 = p_tx;
              *p_tx = 0.0;
              v36[1] = 0.0;
              CGMutablePathRef.addPath(_:transform:)(v45, &transform);

            }
            else
            {
              v68 = 1;
              v46 = swift_allocObject();
              *(_QWORD *)(v46 + 16) = &v68;
              *(_QWORD *)(v46 + 24) = Mutable;
              v23 = swift_allocObject();
              *(_QWORD *)(v23 + 16) = closure #1 in CGMutablePathRef.addPathJoiningIfPossible(_:)partial apply;
              *(_QWORD *)(v23 + 24) = v46;
              v66 = thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()partial apply;
              v67 = v23;
              v62 = MEMORY[0x1E0C809B0];
              v63 = 1107296256;
              v64 = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
              v65 = &block_descriptor_109_1;
              v47 = _Block_copy(&v62);
              v48 = Mutable;
              swift_retain();
              swift_release();
              CGPathApplyWithBlock(v45, v47);
              _Block_release(v47);
              LOBYTE(v47) = swift_isEscapingClosureAtFileLocation();

              swift_release();
              swift_release();
              if ((v47 & 1) != 0)
                goto LABEL_36;
              v23 = v60;
              v31 = (uint64_t)v59;
            }
          }
          if (v31 == v33)
            goto LABEL_30;
        }
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        if (v23 < 0)
          v32 = v23;
        else
          v32 = v23 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain();
        v31 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v31 < 0)
        {
          __break(1u);
          goto LABEL_43;
        }
      }
    }
    goto LABEL_45;
  }
  Mutable = v52;
  v49 = &v75;
LABEL_32:

  return Mutable;
}

CGPathRef __swiftcall CGPathRef.lineSubtractingFromEnd(_:)(CGPathRef a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  CGPathRef v14;
  void (*v15)(char *);
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  CGPathRef result;
  const CGPath *v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  unint64_t isEscapingClosureAtFileLocation;
  CGFloat a;
  BOOL v26;
  const CGPath *v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  const CGPath *v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  const CGPath *v37;
  uint64_t v38;
  id v39;
  CGFloat *v40;
  CGFloat *v41;
  id v42;
  CGFloat *v43;
  CGFloat *v44;
  uint64_t v45;
  void *v46;
  const CGPath *v47;
  id v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t *v51;
  void *v52;
  const CGPath *v53;
  char v54;
  id v55;
  _QWORD *v56;
  uint64_t *v57;
  uint64_t v58;
  void *v59;
  const CGPath *v60;
  const CGPath *v61;
  uint64_t v62;
  id v63;
  uint64_t *v64;
  _QWORD *v65;
  const CGPath *v66;
  const CGPath *v67;
  uint64_t *v68;
  _QWORD *v69;
  CGFloat *v70;
  CGFloat *v71;
  CGFloat *p_tx;
  CGFloat *p_b;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t, uint64_t);
  void *v83;
  uint64_t (*v84)();
  unint64_t v85;
  char v86;
  uint64_t v87;
  _QWORD v88[3];
  uint64_t v89;
  CGAffineTransform v90;
  uint64_t v91;
  _QWORD v92[3];
  uint64_t v93;
  CGAffineTransform transform;
  uint64_t aBlock;
  uint64_t v96;
  uint64_t (*v97)(uint64_t, uint64_t);
  uint64_t v98;
  uint64_t (*v99)();
  _QWORD *v100;

  v2 = type metadata accessor for CGPathFillRule();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v77 = (unint64_t)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v62 - v8;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v62 - v12;
  v14 = CGPathRef.openPath()();
  v15 = *(void (**)(char *))(v3 + 104);
  LODWORD(v78) = *MEMORY[0x1E0C9B8A0];
  v15(v13);
  LODWORD(v75) = *MEMORY[0x1E0C9B898];
  v15(v9);
  v16 = lazy protocol witness table accessor for type CGPathFillRule and conformance CGPathFillRule();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v76 = v16;
  dispatch thunk of RawRepresentable.rawValue.getter();
  v17 = aBlock == *(_QWORD *)&transform.a;
  v18 = *(_QWORD *)(v3 + 8);
  ((void (*)(char *, uint64_t))v18)(v9, v2);
  v67 = v14;
  v79 = (uint64_t)a1;
  result = CGPathCreateCopyOfLineBySubtractingPath(v14, a1, v17);
  if (!result)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  v20 = result;
  ((void (*)(char *, uint64_t))v18)(v13, v2);
  transform.a = 0.0;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = &transform;
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = partial apply for closure #1 in CGPathRef.subpathCount.getter;
  v22[3] = v21;
  v99 = thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()partial apply;
  v100 = v22;
  aBlock = MEMORY[0x1E0C809B0];
  v96 = 1107296256;
  v97 = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
  v98 = (uint64_t)&block_descriptor_13_4;
  v23 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  v66 = v20;
  CGPathApplyWithBlock(v20, v23);
  _Block_release(v23);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    goto LABEL_59;
  a = transform.a;
  swift_release();
  v26 = *(_QWORD *)&a <= 1;
  v27 = (const CGPath *)v79;
  v28 = v78;
  if (v26)
  {
    CGPathRef.endPoints.getter();
    ((void (*)(char *, uint64_t, uint64_t))v15)(v9, v28, v2);
    aBlock = 0x3FF0000000000000;
    v96 = 0;
    v97 = 0;
    v98 = 0x3FF0000000000000;
    v99 = 0;
    v100 = 0;
    v29 = CGPathRef.contains(_:using:transform:)();
    ((void (*)(char *, uint64_t))v18)(v9, v2);
    if ((v29 & 1) == 0)
    {
      v33 = v66;
      v61 = v67;
LABEL_50:

      return v33;
    }
  }
  v30 = v77;
  ((void (*)(unint64_t, uint64_t, uint64_t))v15)(v77, v28, v2);
  ((void (*)(char *, _QWORD, uint64_t))v15)(v9, v75, v2);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v31 = *(_QWORD *)&transform.a == v91;
  ((void (*)(char *, uint64_t))v18)(v9, v2);
  result = CGPathCreateCopyOfLineByIntersectingPath(v67, v27, v31);
  if (result)
  {
    v22 = result;
    ((void (*)(unint64_t, uint64_t))v18)(v30, v2);
    v18 = CGPathRef.subpaths.getter();
    isEscapingClosureAtFileLocation = CGPathRef.subpaths.getter();
    if (isEscapingClosureAtFileLocation >> 62)
      goto LABEL_60;
    v79 = *(_QWORD *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_9:
    v63 = v22;
    v77 = isEscapingClosureAtFileLocation;
    if (!(v18 >> 62))
    {
      v32 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = CGPathCreateMutable();
LABEL_11:
      v33 = result;
      if (v32)
      {
        v34 = 0;
        v78 = v18 & 0xC000000000000001;
        p_tx = &transform.tx;
        p_b = &transform.b;
        v75 = v77 & 0xFFFFFFFFFFFFFF8;
        v76 = v77 & 0xC000000000000001;
        v64 = &v93;
        v65 = v92;
        v70 = &v90.tx;
        v71 = &v90.b;
        v68 = &v89;
        v69 = v88;
        v74 = v18;
        do
        {
          v38 = v34 + 1;
          if (v32 >= v79)
          {
            if (v78)
              v42 = (id)MEMORY[0x1DF0E4D64](v34, v18);
            else
              v42 = *(id *)(v18 + 8 * v34 + 32);
            isEscapingClosureAtFileLocation = (unint64_t)v42;
            if (CGPathIsEmpty(v33))
            {
              v43 = p_b;
              *p_b = 0.0;
              v43[1] = 0.0;
              transform.a = 1.0;
              transform.d = 1.0;
              v44 = p_tx;
              *p_tx = 0.0;
              v44[1] = 0.0;
              CGMutablePathRef.addPath(_:transform:)((CGPathRef)isEscapingClosureAtFileLocation, &transform);

            }
            else
            {
              v86 = 1;
              v22 = (_QWORD *)swift_allocObject();
              v22[2] = &v86;
              v22[3] = v33;
              v45 = swift_allocObject();
              *(_QWORD *)(v45 + 16) = partial apply for closure #1 in CGMutablePathRef.addPathJoiningIfPossible(_:);
              *(_QWORD *)(v45 + 24) = v22;
              v84 = thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()partial apply;
              v85 = v45;
              v80 = MEMORY[0x1E0C809B0];
              v81 = 1107296256;
              v82 = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
              v83 = &block_descriptor_23_3;
              v46 = _Block_copy(&v80);
              v18 = v85;
              v47 = v33;
              swift_retain();
              swift_release();
              CGPathApplyWithBlock((CGPathRef)isEscapingClosureAtFileLocation, v46);
              _Block_release(v46);
              LOBYTE(v46) = swift_isEscapingClosureAtFileLocation();

              swift_release();
              swift_release();
              if ((v46 & 1) != 0)
                goto LABEL_53;
              v18 = v74;
            }
            if (v38 < v79)
            {
              if (v76)
              {
                v48 = (id)MEMORY[0x1DF0E4D64](v34, v77);
              }
              else
              {
                if ((v34 & 0x8000000000000000) != 0)
                  goto LABEL_54;
                if (v34 >= *(_QWORD *)(v75 + 16))
                  goto LABEL_57;
                v48 = *(id *)(v77 + 8 * v34 + 32);
              }
              isEscapingClosureAtFileLocation = (unint64_t)v48;
              if (CGPathIsEmpty(v33))
              {
                v49 = v65;
                *v65 = 0;
                v49[1] = 0;
                v91 = 0x3FF0000000000000;
                v92[2] = 0x3FF0000000000000;
                v50 = v64;
                *v64 = 0;
                v50[1] = 0;
                v51 = &v91;
LABEL_41:
                CGMutablePathRef.addPath(_:transform:)((CGPathRef)isEscapingClosureAtFileLocation, (CGAffineTransform *)v51);

                goto LABEL_14;
              }
              v86 = 1;
              v22 = (_QWORD *)swift_allocObject();
              v22[2] = &v86;
              v22[3] = v33;
              v58 = swift_allocObject();
              *(_QWORD *)(v58 + 16) = closure #1 in CGMutablePathRef.addPathJoiningIfPossible(_:)partial apply;
              *(_QWORD *)(v58 + 24) = v22;
              v84 = thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()partial apply;
              v85 = v58;
              v80 = MEMORY[0x1E0C809B0];
              v81 = 1107296256;
              v82 = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
              v83 = &block_descriptor_34_0;
              v59 = _Block_copy(&v80);
              v60 = v33;
              swift_retain();
              swift_release();
              CGPathApplyWithBlock((CGPathRef)isEscapingClosureAtFileLocation, v59);
              _Block_release(v59);
              LOBYTE(v59) = swift_isEscapingClosureAtFileLocation();

              swift_release();
              swift_release();
              if ((v59 & 1) != 0)
                goto LABEL_58;
            }
          }
          else
          {
            if (v76)
            {
              v39 = (id)MEMORY[0x1DF0E4D64](v34, v77);
            }
            else
            {
              if ((v34 & 0x8000000000000000) != 0)
              {
                __break(1u);
LABEL_52:
                __break(1u);
LABEL_53:
                __break(1u);
LABEL_54:
                __break(1u);
LABEL_55:
                __break(1u);
LABEL_56:
                __break(1u);
LABEL_57:
                __break(1u);
LABEL_58:
                __break(1u);
LABEL_59:
                __break(1u);
LABEL_60:
                v79 = _CocoaArrayWrapper.endIndex.getter();
                goto LABEL_9;
              }
              if (v34 >= *(_QWORD *)(v75 + 16))
                goto LABEL_52;
              v39 = *(id *)(v77 + 8 * v34 + 32);
            }
            isEscapingClosureAtFileLocation = (unint64_t)v39;
            if (CGPathIsEmpty(v33))
            {
              v40 = v71;
              *v71 = 0.0;
              v40[1] = 0.0;
              v90.a = 1.0;
              v90.d = 1.0;
              v41 = v70;
              *v70 = 0.0;
              v41[1] = 0.0;
              CGMutablePathRef.addPath(_:transform:)((CGPathRef)isEscapingClosureAtFileLocation, &v90);

            }
            else
            {
              v86 = 1;
              v22 = (_QWORD *)swift_allocObject();
              v22[2] = &v86;
              v22[3] = v33;
              v18 = swift_allocObject();
              *(_QWORD *)(v18 + 16) = closure #1 in CGMutablePathRef.addPathJoiningIfPossible(_:)partial apply;
              *(_QWORD *)(v18 + 24) = v22;
              v84 = thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()partial apply;
              v85 = v18;
              v80 = MEMORY[0x1E0C809B0];
              v81 = 1107296256;
              v82 = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
              v83 = &block_descriptor_45_0;
              v52 = _Block_copy(&v80);
              v53 = v33;
              swift_retain();
              swift_release();
              CGPathApplyWithBlock((CGPathRef)isEscapingClosureAtFileLocation, v52);
              _Block_release(v52);
              v54 = swift_isEscapingClosureAtFileLocation();

              swift_release();
              swift_release();
              if ((v54 & 1) != 0)
                goto LABEL_55;
              v18 = v74;
            }
            if (v78)
              v55 = (id)MEMORY[0x1DF0E4D64](v34, v18);
            else
              v55 = *(id *)(v18 + 8 * v34 + 32);
            isEscapingClosureAtFileLocation = (unint64_t)v55;
            if (CGPathIsEmpty(v33))
            {
              v56 = v69;
              *v69 = 0;
              v56[1] = 0;
              v87 = 0x3FF0000000000000;
              v88[2] = 0x3FF0000000000000;
              v57 = v68;
              *v68 = 0;
              v57[1] = 0;
              v51 = &v87;
              goto LABEL_41;
            }
            v86 = 1;
            v22 = (_QWORD *)swift_allocObject();
            v22[2] = &v86;
            v22[3] = v33;
            v35 = swift_allocObject();
            *(_QWORD *)(v35 + 16) = closure #1 in CGMutablePathRef.addPathJoiningIfPossible(_:)partial apply;
            *(_QWORD *)(v35 + 24) = v22;
            v84 = thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()partial apply;
            v85 = v35;
            v80 = MEMORY[0x1E0C809B0];
            v81 = 1107296256;
            v82 = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
            v83 = &block_descriptor_56_0;
            v36 = _Block_copy(&v80);
            v37 = v33;
            swift_retain();
            swift_release();
            CGPathApplyWithBlock((CGPathRef)isEscapingClosureAtFileLocation, v36);
            _Block_release(v36);
            LOBYTE(v36) = swift_isEscapingClosureAtFileLocation();

            swift_release();
            swift_release();
            if ((v36 & 1) != 0)
              goto LABEL_56;
          }
LABEL_14:
          ++v34;
        }
        while (v32 != v38);
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v61 = v66;
      goto LABEL_50;
    }
    swift_bridgeObjectRetain();
    v32 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    result = CGPathCreateMutable();
    if ((v32 & 0x8000000000000000) == 0)
      goto LABEL_11;
    __break(1u);
    goto LABEL_63;
  }
LABEL_64:
  __break(1u);
  return result;
}

uint64_t closure #1 in CGPathRef.endPoints.getter(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  switch(*(_DWORD *)result)
  {
    case 0:
      if (*(_BYTE *)(a2 + 16) == 1)
      {
        v3 = *(uint64_t **)(result + 8);
        v4 = *v3;
        v5 = v3[1];
        *a3 = *v3;
        a3[1] = v5;
        *(_QWORD *)a2 = v4;
        *(_QWORD *)(a2 + 8) = v5;
        *(_BYTE *)(a2 + 16) = 0;
      }
      return result;
    case 1:
      v6 = *(_OWORD *)*(_QWORD *)(result + 8);
      goto LABEL_7;
    case 2:
      v6 = *(_OWORD *)(*(_QWORD *)(result + 8) + 16);
      goto LABEL_7;
    case 3:
      v6 = *(_OWORD *)(*(_QWORD *)(result + 8) + 32);
LABEL_7:
      *(_OWORD *)a3 = v6;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t CGPathRef.subpaths.getter()
{
  const CGPath *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  char isEscapingClosureAtFileLocation;
  uint64_t v5;
  uint64_t v6;
  _QWORD aBlock[6];
  unint64_t v9;

  v9 = MEMORY[0x1E0DEE9D8];
  v1 = swift_allocObject();
  *(_QWORD *)(v1 + 16) = &v9;
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = partial apply for closure #1 in CGPathRef.subpaths.getter;
  *(_QWORD *)(v2 + 24) = v1;
  aBlock[4] = thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()partial apply;
  aBlock[5] = v2;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
  aBlock[3] = &block_descriptor_66;
  v3 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  CGPathApplyWithBlock(v0, v3);
  _Block_release(v3);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  v5 = v9;
  if (v9 >> 62)
  {
LABEL_6:
    type metadata accessor for CGPathRef(0);
    swift_bridgeObjectRetain();
    v6 = _bridgeCocoaArray<A>(_:)();
    goto LABEL_4;
  }
  swift_bridgeObjectRetain_n();
  dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
  type metadata accessor for CGPathRef(0);
  v6 = v5;
LABEL_4:
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v6;
}

void closure #1 in CGPathRef.subpaths.getter(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  id v32;
  CGAffineTransform transform;

  switch(*(_DWORD *)a1)
  {
    case 0:
      CGPathCreateMutable();
      MEMORY[0x1DF0E4398]();
      if (*(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v4 = *a2;
      if (!(v4 >> 62))
      {
        v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v5)
          goto LABEL_44;
LABEL_6:
        v6 = v5 - 1;
        if (__OFSUB__(v5, 1))
        {
          __break(1u);
        }
        else if ((v4 & 0xC000000000000001) == 0)
        {
          if ((v6 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v6 < *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            v7 = *(id *)(v4 + 8 * v6 + 32);
LABEL_11:
            v32 = v7;
            swift_bridgeObjectRelease();
            v8 = *(unint64_t **)(a1 + 8);
            v9 = *v8;
            v10 = v8[1];
            transform.a = 1.0;
            transform.b = 0.0;
            transform.c = 0.0;
            transform.d = 1.0;
            transform.tx = 0.0;
            transform.ty = 0.0;
            CGMutablePathRef.move(to:transform:)((CGPoint)__PAIR128__(v10, v9), &transform);
            goto LABEL_36;
          }
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          v12 = (id)MEMORY[0x1DF0E4D64](v6, v4);
LABEL_19:
          v32 = v12;
          swift_bridgeObjectRelease();
          v13 = *(unint64_t **)(a1 + 8);
          v14 = *v13;
          v15 = v13[1];
          transform.a = 1.0;
          transform.b = 0.0;
          transform.c = 0.0;
          transform.d = 1.0;
          transform.tx = 0.0;
          transform.ty = 0.0;
          CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(v15, v14), &transform);
          goto LABEL_36;
        }
        v7 = (id)MEMORY[0x1DF0E4D64](v6, v4);
        goto LABEL_11;
      }
      swift_bridgeObjectRetain();
      v5 = _CocoaArrayWrapper.endIndex.getter();
      if (v5)
        goto LABEL_6;
      goto LABEL_44;
    case 1:
      v4 = *a2;
      if (*a2 >> 62)
      {
        swift_bridgeObjectRetain();
        v11 = _CocoaArrayWrapper.endIndex.getter();
        if (!v11)
          goto LABEL_44;
      }
      else
      {
        v11 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v11)
          goto LABEL_44;
      }
      v6 = v11 - 1;
      if (__OFSUB__(v11, 1))
        goto LABEL_49;
      if ((v4 & 0xC000000000000001) != 0)
        goto LABEL_50;
      if ((v6 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (v6 < *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v12 = *(id *)(v4 + 8 * v6 + 32);
        goto LABEL_19;
      }
      __break(1u);
      goto LABEL_53;
    case 2:
      v4 = *a2;
      if (!(*a2 >> 62))
      {
        v16 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v16)
          goto LABEL_44;
LABEL_22:
        v6 = v16 - 1;
        if (__OFSUB__(v16, 1))
        {
LABEL_53:
          __break(1u);
        }
        else if ((v4 & 0xC000000000000001) == 0)
        {
          if ((v6 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v6 < *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            v17 = *(id *)(v4 + 8 * v6 + 32);
LABEL_27:
            v32 = v17;
            swift_bridgeObjectRelease();
            v18 = *(unint64_t **)(a1 + 8);
            v19 = v18[2];
            v20 = v18[3];
            v21 = *v18;
            v22 = v18[1];
            transform.a = 1.0;
            transform.b = 0.0;
            transform.c = 0.0;
            transform.d = 1.0;
            transform.tx = 0.0;
            transform.ty = 0.0;
            CGMutablePathRef.addQuadCurve(to:control:transform:)((CGPoint)__PAIR128__(v20, v19), (CGPoint)__PAIR128__(v22, v21), &transform);
            goto LABEL_36;
          }
          __break(1u);
          goto LABEL_57;
        }
        v17 = (id)MEMORY[0x1DF0E4D64](v6, v4);
        goto LABEL_27;
      }
      swift_bridgeObjectRetain();
      v16 = _CocoaArrayWrapper.endIndex.getter();
      if (v16)
        goto LABEL_22;
      goto LABEL_44;
    case 3:
      v4 = *a2;
      if (*a2 >> 62)
      {
        swift_bridgeObjectRetain();
        v23 = _CocoaArrayWrapper.endIndex.getter();
        if (v23)
        {
LABEL_30:
          v6 = v23 - 1;
          if (!__OFSUB__(v23, 1))
          {
            if ((v4 & 0xC000000000000001) == 0)
            {
              if ((v6 & 0x8000000000000000) != 0)
              {
                __break(1u);
              }
              else if (v6 < *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
                v24 = *(id *)(v4 + 8 * v6 + 32);
LABEL_35:
                v32 = v24;
                swift_bridgeObjectRelease();
                v25 = *(unint64_t **)(a1 + 8);
                v26 = v25[4];
                v27 = v25[5];
                v28 = *v25;
                v29 = v25[1];
                v30 = v25[2];
                v31 = v25[3];
                transform.a = 1.0;
                transform.b = 0.0;
                transform.c = 0.0;
                transform.d = 1.0;
                transform.tx = 0.0;
                transform.ty = 0.0;
                CGMutablePathRef.addCurve(to:control1:control2:transform:)((CGPoint)__PAIR128__(v27, v26), (CGPoint)__PAIR128__(v29, v28), (CGPoint)__PAIR128__(v31, v30), &transform);
LABEL_36:

                return;
              }
              __break(1u);
              JUMPOUT(0x1DDEDFF0CLL);
            }
LABEL_58:
            v24 = (id)MEMORY[0x1DF0E4D64](v6, v4);
            goto LABEL_35;
          }
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }
      }
      else
      {
        v23 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v23)
          goto LABEL_30;
      }
LABEL_44:
      swift_bridgeObjectRelease();
      return;
    default:
      return;
  }
}

CGPathRef __swiftcall CGPathRef.openPath()()
{
  const CGPath *v0;
  CGMutablePathRef Mutable;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  const CGPath *v5;
  char isEscapingClosureAtFileLocation;
  CGPathRef result;
  _QWORD v8[6];
  _QWORD v9[2];

  Mutable = CGPathCreateMutable();
  v9[0] = 0;
  v9[1] = 0;
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v9;
  *(_QWORD *)(v2 + 24) = Mutable;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in CGPathRef.openPath();
  *(_QWORD *)(v3 + 24) = v2;
  v8[4] = thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()partial apply;
  v8[5] = v3;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1107296256;
  v8[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafePointer<CGPathElement>) -> ();
  v8[3] = &block_descriptor_76_1;
  v4 = _Block_copy(v8);
  v5 = Mutable;
  swift_retain();
  swift_release();
  CGPathApplyWithBlock(v0, v4);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = (CGPathRef)swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
    return v5;
  __break(1u);
  return result;
}

void closure #1 in CGPathRef.openPath()(uint64_t a1, double *a2, CGPathRef path)
{
  double *v4;
  double v5;
  unint64_t v6;
  CGPoint CurrentPoint;
  double v8;
  double v9;
  double *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  CGAffineTransform v23;

  switch(*(_DWORD *)a1)
  {
    case 0:
      v4 = *(double **)(a1 + 8);
      v5 = *v4;
      v6 = *((_QWORD *)v4 + 1);
      *a2 = *v4;
      *((_QWORD *)a2 + 1) = v6;
      v23.a = 1.0;
      v23.b = 0.0;
      v23.c = 0.0;
      v23.d = 1.0;
      v23.tx = 0.0;
      v23.ty = 0.0;
      CGMutablePathRef.move(to:transform:)((CGPoint)__PAIR128__(v6, *(unint64_t *)&v5), &v23);
      break;
    case 1:
      v10 = *(double **)(a1 + 8);
      v8 = *v10;
      v9 = v10[1];
      goto LABEL_7;
    case 2:
      v11 = *(unint64_t **)(a1 + 8);
      v12 = v11[2];
      v13 = v11[3];
      v14 = *v11;
      v15 = v11[1];
      v23.a = 1.0;
      v23.b = 0.0;
      v23.c = 0.0;
      v23.d = 1.0;
      v23.tx = 0.0;
      v23.ty = 0.0;
      CGMutablePathRef.addQuadCurve(to:control:transform:)((CGPoint)__PAIR128__(v13, v12), (CGPoint)__PAIR128__(v15, v14), &v23);
      break;
    case 3:
      v16 = *(unint64_t **)(a1 + 8);
      v17 = v16[4];
      v18 = v16[5];
      v19 = *v16;
      v20 = v16[1];
      v21 = v16[2];
      v22 = v16[3];
      v23.a = 1.0;
      v23.b = 0.0;
      v23.c = 0.0;
      v23.d = 1.0;
      v23.tx = 0.0;
      v23.ty = 0.0;
      CGMutablePathRef.addCurve(to:control1:control2:transform:)((CGPoint)__PAIR128__(v18, v17), (CGPoint)__PAIR128__(v20, v19), (CGPoint)__PAIR128__(v22, v21), &v23);
      break;
    case 4:
      CurrentPoint = CGPathGetCurrentPoint(path);
      v8 = *a2;
      v9 = a2[1];
      if (vabdd_f64(CurrentPoint.x, *a2) >= 0.001 || vabdd_f64(CurrentPoint.y, v9) >= 0.001)
      {
LABEL_7:
        v23.a = 1.0;
        v23.b = 0.0;
        v23.c = 0.0;
        v23.d = 1.0;
        v23.tx = 0.0;
        v23.ty = 0.0;
        CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(*(unint64_t *)&v9, *(unint64_t *)&v8), &v23);
      }
      break;
    default:
      return;
  }
}

__n128 closure #1 in CGPathRef.cgPoints()(unsigned int *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  int64_t v6;
  int64_t v7;
  __n128 *v8;
  _QWORD *v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  char isUniquelyReferenced_nonNull_native;
  __n128 result;
  int64_t v17;
  __n128 *v18;
  _QWORD *v19;
  int64_t v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;

  v4 = *a1;
  if (v4 < 2)
  {
    v23 = *(__n128 *)*((_QWORD *)a1 + 1);
    v5 = *(_QWORD **)a2;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)a2 = v5;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      *(_QWORD *)a2 = v5;
    }
    v12 = v5[2];
    v13 = v5[3];
    v14 = v12 + 1;
    if (v12 < v13 >> 1)
      goto LABEL_19;
    goto LABEL_30;
  }
  if ((_DWORD)v4 != 2)
  {
    if ((_DWORD)v4 != 3)
      return result;
    v5 = *(_QWORD **)a2;
    v6 = *(_QWORD *)(*(_QWORD *)a2 + 16);
    v7 = v6 + 3;
    if (__OFADD__(v6, 3))
    {
      __break(1u);
    }
    else
    {
      v8 = (__n128 *)*((_QWORD *)a1 + 1);
      v21 = *v8;
      v22 = v8[1];
      v23 = v8[2];
      v9 = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)a2 = v5;
      if (!(_DWORD)v9 || v7 > v5[3] >> 1)
      {
        if (v6 <= v7)
          v10 = v6 + 3;
        else
          v10 = v6;
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v9, v10, 1, v5);
      }
      *(_QWORD *)a2 = v5;
      v2 = v5[2];
      v4 = v5[3];
      v7 = v2 + 1;
      if (v2 < v4 >> 1)
      {
LABEL_12:
        v5[2] = v7;
        *(__n128 *)&v5[2 * v2 + 4] = v21;
        *(_QWORD *)a2 = v5;
        v11 = v5[3];
        v12 = v2 + 2;
        if ((uint64_t)(v2 + 2) > (uint64_t)(v11 >> 1))
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v2 + 2, 1, v5);
        v5[2] = v12;
        *(__n128 *)&v5[2 * v7 + 4] = v22;
        *(_QWORD *)a2 = v5;
        v13 = v5[3];
        v14 = v2 + 3;
        if ((uint64_t)(v2 + 3) <= (uint64_t)(v13 >> 1))
          goto LABEL_19;
        goto LABEL_30;
      }
    }
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v7, 1, v5);
    goto LABEL_12;
  }
  v5 = *(_QWORD **)a2;
  v12 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v17 = v12 + 2;
  if (__OFADD__(v12, 2))
  {
    __break(1u);
LABEL_34:
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v4 > 1), v12, 1, v5);
    goto LABEL_29;
  }
  v18 = (__n128 *)*((_QWORD *)a1 + 1);
  v22 = *v18;
  v23 = v18[1];
  v19 = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)a2 = v5;
  if (!(_DWORD)v19 || v17 > v5[3] >> 1)
  {
    if (v12 <= v17)
      v20 = v12 + 2;
    else
      v20 = v12;
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v19, v20, 1, v5);
  }
  *(_QWORD *)a2 = v5;
  v17 = v5[2];
  v4 = v5[3];
  v12 = v17 + 1;
  if (v17 >= v4 >> 1)
    goto LABEL_34;
LABEL_29:
  v5[2] = v12;
  *(__n128 *)&v5[2 * v17 + 4] = v22;
  *(_QWORD *)a2 = v5;
  v13 = v5[3];
  v14 = v17 + 2;
  if (v14 > (uint64_t)(v13 >> 1))
LABEL_30:
    v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14, 1, v5);
LABEL_19:
  v5[2] = v14;
  result = v23;
  *(__n128 *)&v5[2 * v12 + 4] = v23;
  *(_QWORD *)a2 = v5;
  return result;
}

uint64_t sub_1DDEE03F4()
{
  return swift_deallocObject();
}

double partial apply for closure #1 in CGPathRef.cgPoints()(unsigned int *a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = closure #1 in CGPathRef.cgPoints()(a1, *(_QWORD *)(v1 + 16)).n128_u64[0];
  return result;
}

uint64_t sub_1DDEE040C()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_67(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_67()
{
  return swift_release();
}

void closure #1 in CGMutablePathRef.addPathJoiningIfPossible(_:)(uint64_t a1, _BYTE *a2, CGPathRef path)
{
  double *v5;
  double v6;
  double v7;
  CGPoint CurrentPoint;
  BOOL v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  CGAffineTransform v28;

  switch(*(_DWORD *)a1)
  {
    case 0:
      if (*a2 != 1
        || ((v5 = *(double **)(a1 + 8),
             v6 = *v5,
             v7 = v5[1],
             CurrentPoint = CGPathGetCurrentPoint(path),
             v6 == CurrentPoint.x)
          ? (v9 = v7 == CurrentPoint.y)
          : (v9 = 0),
            !v9))
      {
        v10 = *(unint64_t **)(a1 + 8);
        v11 = *v10;
        v12 = v10[1];
        v28.a = 1.0;
        v28.b = 0.0;
        v28.c = 0.0;
        v28.d = 1.0;
        v28.tx = 0.0;
        v28.ty = 0.0;
        CGMutablePathRef.move(to:transform:)((CGPoint)__PAIR128__(v12, v11), &v28);
      }
      *a2 = 0;
      break;
    case 1:
      v25 = *(unint64_t **)(a1 + 8);
      v26 = *v25;
      v27 = v25[1];
      v28.a = 1.0;
      v28.b = 0.0;
      v28.c = 0.0;
      v28.d = 1.0;
      v28.tx = 0.0;
      v28.ty = 0.0;
      CGMutablePathRef.addLine(to:transform:)((CGPoint)__PAIR128__(v27, v26), &v28);
      break;
    case 2:
      v13 = *(unint64_t **)(a1 + 8);
      v14 = v13[2];
      v15 = v13[3];
      v16 = *v13;
      v17 = v13[1];
      v28.a = 1.0;
      v28.b = 0.0;
      v28.c = 0.0;
      v28.d = 1.0;
      v28.tx = 0.0;
      v28.ty = 0.0;
      CGMutablePathRef.addQuadCurve(to:control:transform:)((CGPoint)__PAIR128__(v15, v14), (CGPoint)__PAIR128__(v17, v16), &v28);
      break;
    case 3:
      v18 = *(unint64_t **)(a1 + 8);
      v19 = v18[4];
      v20 = v18[5];
      v21 = *v18;
      v22 = v18[1];
      v23 = v18[2];
      v24 = v18[3];
      v28.a = 1.0;
      v28.b = 0.0;
      v28.c = 0.0;
      v28.d = 1.0;
      v28.tx = 0.0;
      v28.ty = 0.0;
      CGMutablePathRef.addCurve(to:control1:control2:transform:)((CGPoint)__PAIR128__(v20, v19), (CGPoint)__PAIR128__(v22, v21), (CGPoint)__PAIR128__(v24, v23), &v28);
      break;
    default:
      return;
  }
}

uint64_t specialized Sequence.filter(_:)(uint64_t result, uint64_t a2, double a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;

  v5 = 0;
  v6 = a2 + 32;
  v7 = result + 16;
  v8 = *(_QWORD *)(result + 16);
  v9 = a3 + a3;
  v10 = MEMORY[0x1E0DEE9D8];
LABEL_2:
  if (v5 <= v8)
    v11 = v8;
  else
    v11 = v5;
  v12 = v5;
  while (1)
  {
    if (v8 == v12)
      return v10;
    if (v11 == v12)
      break;
    if (v12 >= *(_QWORD *)(a2 + 16))
      goto LABEL_17;
    v5 = v12 + 1;
    v13 = vabdd_f64(*(double *)(v6 + 8 * v12++), a3);
    if (v13 <= v9)
    {
      v17 = *(_OWORD *)(v7 + 16 * v5);
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v10 + 16) + 1, 1);
      v15 = *(_QWORD *)(v10 + 16);
      v14 = *(_QWORD *)(v10 + 24);
      if (v15 >= v14 >> 1)
        result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      *(_QWORD *)(v10 + 16) = v15 + 1;
      v16 = v10 + 24 * v15;
      *(_QWORD *)(v16 + 32) = v5 - 1;
      *(_OWORD *)(v16 + 40) = v17;
      goto LABEL_2;
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type CGPathFillRule and conformance CGPathFillRule()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CGPathFillRule and conformance CGPathFillRule;
  if (!lazy protocol witness table cache variable for type CGPathFillRule and conformance CGPathFillRule)
  {
    v1 = type metadata accessor for CGPathFillRule();
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0C9B8B0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGPathFillRule and conformance CGPathFillRule);
  }
  return result;
}

uint64_t sub_1DDEE06E4()
{
  return swift_deallocObject();
}

uint64_t sub_1DDEE06F8()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in CGMutablePathRef.addPathJoiningIfPossible(_:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in CGMutablePathRef.addPathJoiningIfPossible(_:)(a1, *(_BYTE **)(v1 + 16), *(CGPathRef *)(v1 + 24));
}

uint64_t sub_1DDEE0710()
{
  return swift_deallocObject();
}

uint64_t sub_1DDEE0720()
{
  return swift_deallocObject();
}

uint64_t sub_1DDEE0730()
{
  return swift_deallocObject();
}

uint64_t sub_1DDEE0740()
{
  return swift_deallocObject();
}

uint64_t sub_1DDEE0750()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in CGPathRef.subpaths.getter(uint64_t a1)
{
  uint64_t v1;

  closure #1 in CGPathRef.subpaths.getter(a1, *(unint64_t **)(v1 + 16));
}

uint64_t sub_1DDEE0768()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in CGPathRef.openPath()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in CGPathRef.openPath()(a1, *(double **)(v1 + 16), *(CGPathRef *)(v1 + 24));
}

uint64_t sub_1DDEE0780()
{
  return swift_deallocObject();
}

uint64_t sub_1DDEE0790()
{
  return swift_deallocObject();
}

_DWORD *partial apply for closure #1 in CGPathRef.subpathCount.getter(_DWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  if (!*result)
  {
    v2 = *(_QWORD **)(v1 + 16);
    if (__OFADD__(*v2, 1))
      __break(1u);
    else
      ++*v2;
  }
  return result;
}

uint64_t sub_1DDEE07C8()
{
  return swift_deallocObject();
}

uint64_t sub_1DDEE07D8()
{
  return swift_deallocObject();
}

uint64_t sub_1DDEE07E8()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1DDEE080C()
{
  return swift_deallocObject();
}

uint64_t sub_1DDEE081C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CGPathRef.endPoints.getter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in CGPathRef.endPoints.getter(a1, *(_QWORD *)(v1 + 16), *(uint64_t **)(v1 + 24));
}

uint64_t sub_1DDEE0834()
{
  return swift_deallocObject();
}

void thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ()(uint64_t a1, void *a2)
{
  void (*v2)(void);
  id v3;

  v2 = *(void (**)(void))(a1 + 32);
  v3 = a2;
  v2();

}

void *PaperDocumentFindResult.frames(in:)(char *a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char v8;
  uint64_t ResultV6frames2inSaySo6e21VGAA0aC4ViewC_tFAGSo7D6CXEfU_So12PDFSelectionC0H3Kit0hkS0CTf1cn_nTf4ngg_n;
  id v10;
  double v11;
  double v12;
  char *v13;
  void *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  unint64_t v21;
  char *v22;

  v3 = *(void **)v1;
  v4 = *(uint64_t *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(uint64_t *)(v1 + 24);
  v7 = *(void **)(v1 + 32);
  v8 = *(_BYTE *)(v1 + 40);
  if ((v8 & 1) == 0)
  {
    v19 = v3;
    v20 = objc_msgSend(v19, sel_pages);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFPage);
    v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    outlined copy of PaperDocumentFindResult.Content(v3, v4, v5, v6, v7, 0);
    v22 = a1;
    ResultV6frames2inSaySo6e21VGAA0aC4ViewC_tFAGSo7D6CXEfU_So12PDFSelectionC0H3Kit0hkS0CTf1cn_nTf4ngg_n = (uint64_t)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo7PDFPageCG_So6CGRectVs5NeverOTg5050_s8PaperKit0A18DocumentFindResultV6frames2inSaySo6e21VGAA0aC4ViewC_tFAGSo7D6CXEfU_So12PDFSelectionC0H3Kit0hkS0CTf1cn_nTf4ngg_n(v21, v19, v22);

    outlined consume of PaperDocumentFindResult.Content(v3, v4, v5, v6, v7, 0);
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGRect>);
  ResultV6frames2inSaySo6e21VGAA0aC4ViewC_tFAGSo7D6CXEfU_So12PDFSelectionC0H3Kit0hkS0CTf1cn_nTf4ngg_n = swift_allocObject();
  *(_OWORD *)(ResultV6frames2inSaySo6e21VGAA0aC4ViewC_tFAGSo7D6CXEfU_So12PDFSelectionC0H3Kit0hkS0CTf1cn_nTf4ngg_n + 16) = xmmword_1DDF32CF0;
  v10 = v7;
  objc_msgSend(v10, sel_boundsForBox_, 0);
  v12 = v11;
  v13 = &a1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
  swift_beginAccess();
  result = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    objc_msgSend(result, sel_convertRect_fromPage_, v10, *(double *)&v3, v12 - *(double *)&v6 - *(double *)&v4, *(double *)&v5);
    objc_msgSend(a1, sel_convertRect_fromView_, *(_QWORD *)v13);
    *(_QWORD *)(ResultV6frames2inSaySo6e21VGAA0aC4ViewC_tFAGSo7D6CXEfU_So12PDFSelectionC0H3Kit0hkS0CTf1cn_nTf4ngg_n + 32) = v15;
    *(_QWORD *)(ResultV6frames2inSaySo6e21VGAA0aC4ViewC_tFAGSo7D6CXEfU_So12PDFSelectionC0H3Kit0hkS0CTf1cn_nTf4ngg_n + 40) = v16;
    *(_QWORD *)(ResultV6frames2inSaySo6e21VGAA0aC4ViewC_tFAGSo7D6CXEfU_So12PDFSelectionC0H3Kit0hkS0CTf1cn_nTf4ngg_n + 48) = v17;
    *(_QWORD *)(ResultV6frames2inSaySo6e21VGAA0aC4ViewC_tFAGSo7D6CXEfU_So12PDFSelectionC0H3Kit0hkS0CTf1cn_nTf4ngg_n + 56) = v18;
LABEL_5:
    outlined consume of PaperDocumentFindResult.Content(v3, v4, v5, v6, v7, v8);
    return (void *)ResultV6frames2inSaySo6e21VGAA0aC4ViewC_tFAGSo7D6CXEfU_So12PDFSelectionC0H3Kit0hkS0CTf1cn_nTf4ngg_n;
  }
  __break(1u);
  return result;
}

void PaperDocumentFindResult.scrollToVisible(in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id *v8;
  id v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  id *v20;

  v4 = *(void **)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = *(void **)(v1 + 32);
  if ((*(_BYTE *)(v1 + 40) & 1) != 0)
  {
    v8 = (id *)(a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
    swift_beginAccess();
    if (*v8)
    {
      objc_msgSend(*v8, sel_goToRect_onPage_, v7, *(double *)&v4, *(double *)&v3, *(double *)&v5, *(double *)&v6);
      return;
    }
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v9 = v4;
  v10 = objc_msgSend(v9, sel_firstPage);
  if (!v10)
  {
    outlined consume of PaperDocumentFindResult.Content(v4, v3, v5, v6, v7, 0);
    return;
  }
  v11 = v10;
  objc_msgSend(v9, sel_boundsForPage_, v10);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v20 = (id *)(a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  if (!*v20)
    goto LABEL_12;
  if (objc_msgSend(*v20, sel_isRectVisible_onPage_, v11, v13, v15, v17, v19))
  {
LABEL_9:

    outlined consume of PaperDocumentFindResult.Content(v4, v3, v5, v6, v7, 0);
    return;
  }
  if (*v20)
  {
    objc_msgSend(*v20, sel_goToRect_onPage_, v11, v13, v15, v17, v19);
    goto LABEL_9;
  }
LABEL_13:
  __break(1u);
}

void PaperDocumentFindResult.draw(for:)(uint64_t a1)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t isEscapingClosureAtFileLocation;
  _QWORD *v8;
  id v9;
  unint64_t v10;
  id v11;
  void *v12;
  double x;
  double y;
  double width;
  double height;
  id *v17;
  double v18;
  double v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD aBlock[6];
  CGRect v24;
  CGRect v25;

  if ((*(_BYTE *)(v1 + 40) & 1) != 0)
    return;
  v3 = *(id *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(id *)(v1 + 24);
  isEscapingClosureAtFileLocation = *(_QWORD *)(v1 + 32);
  v8 = *(id *)v1;
  v9 = objc_msgSend(v8, sel_pages);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFPage);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v10 >> 62)
    goto LABEL_10;
  if (!*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_11:
    swift_bridgeObjectRelease();
    outlined consume of PaperDocumentFindResult.Content(v3, v4, v5, (uint64_t)v6, (void *)isEscapingClosureAtFileLocation, 0);
    return;
  }
  while ((v10 & 0xC000000000000001) != 0)
  {
    v11 = (id)MEMORY[0x1DF0E4D64](0, v10);
LABEL_7:
    v12 = v11;
    v22 = (uint64_t)v6;
    swift_bridgeObjectRelease();
    objc_msgSend(v8, sel_boundsForPage_, v12);
    v25 = CGRectInset(v24, -4.0, -2.0);
    x = v25.origin.x;
    y = v25.origin.y;
    width = v25.size.width;
    height = v25.size.height;
    v17 = (id *)(a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
    swift_beginAccess();
    if (!*v17)
      goto LABEL_15;
    objc_msgSend(*v17, sel_convertRect_fromPage_, v12, x, y, width, height);
    v19 = v18 / width;
    v10 = (unint64_t)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3828]), sel_initWithSize_, width, height);
    a1 = swift_allocObject();
    *(_QWORD *)(a1 + 16) = v12;
    *(double *)(a1 + 24) = x;
    *(double *)(a1 + 32) = y;
    *(double *)(a1 + 40) = width;
    *(double *)(a1 + 48) = height;
    *(double *)(a1 + 56) = v19;
    v8 = (_QWORD *)swift_allocObject();
    v8[2] = partial apply for closure #1 in PaperDocumentFindResult.draw(for:);
    v8[3] = a1;
    aBlock[4] = _sIg_Ieg_TRTA_0;
    aBlock[5] = v8;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
    aBlock[3] = &block_descriptor_68;
    v20 = _Block_copy(aBlock);
    v6 = v12;
    swift_retain();
    swift_release();
    objc_msgSend((id)v10, sel_imageWithActions_, v20);

    outlined consume of PaperDocumentFindResult.Content(v3, v4, v5, v22, (void *)isEscapingClosureAtFileLocation, 0);
    _Block_release(v20);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
      return;
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v21)
      goto LABEL_11;
  }
  if (*(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v11 = *(id *)(v10 + 32);
    goto LABEL_7;
  }
  __break(1u);
LABEL_15:
  __break(1u);
}

id PaperDocumentFindResult.Content.pageIndex.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  char v6;
  id v7;
  id result;
  void *v9;
  id v10;
  id v11;
  id v12;

  v1 = *(void **)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(void **)(v0 + 32);
  v6 = *(_BYTE *)(v0 + 40);
  if ((v6 & 1) != 0)
  {
    v7 = v5;
    result = objc_msgSend(v7, sel_document);
    if (result)
    {
      v9 = result;
      v10 = objc_msgSend(result, sel_indexForPage_, v7);
LABEL_6:

      outlined consume of PaperDocumentFindResult.Content(v1, v2, v3, v4, v5, v6);
      return v10;
    }
    __break(1u);
  }
  else
  {
    v11 = v1;
    v12 = objc_msgSend(v11, sel_document);
    result = objc_msgSend(v11, sel_firstPage);
    if (result)
    {
      v9 = result;
      v10 = objc_msgSend(v12, sel_indexForPage_, result);

      goto LABEL_6;
    }
  }
  __break(1u);
  return result;
}

void one-time initialization function for verticalComparisonLineTolerance()
{
  static PaperDocumentFindResult.Content.verticalComparisonLineTolerance = 0x4024000000000000;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance PaperDocumentFindResult.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[2];
  uint64_t v10;
  char v11;
  _OWORD v12[2];
  uint64_t v13;
  char v14;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_BYTE *)(a1 + 40);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_BYTE *)(a2 + 40);
  v6 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v6;
  v13 = v2;
  v14 = v3;
  v7 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v7;
  v10 = v4;
  v11 = v5;
  return (specialized static PaperDocumentFindResult.Content.< infix(_:_:)((uint64_t)v9, (uint64_t)v12) & 1) == 0;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance PaperDocumentFindResult.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[2];
  uint64_t v10;
  char v11;
  _OWORD v12[2];
  uint64_t v13;
  char v14;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_BYTE *)(a1 + 40);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_BYTE *)(a2 + 40);
  v6 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v6;
  v13 = v2;
  v14 = v3;
  v7 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v7;
  v10 = v4;
  v11 = v5;
  return (specialized static PaperDocumentFindResult.Content.< infix(_:_:)((uint64_t)v12, (uint64_t)v9) & 1) == 0;
}

unint64_t protocol witness for static Comparable.> infix(_:_:) in conformance PaperDocumentFindResult.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[2];
  uint64_t v10;
  char v11;
  _OWORD v12[2];
  uint64_t v13;
  char v14;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_BYTE *)(a1 + 40);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_BYTE *)(a2 + 40);
  v6 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v6;
  v13 = v2;
  v14 = v3;
  v7 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v7;
  v10 = v4;
  v11 = v5;
  return (unint64_t)specialized static PaperDocumentFindResult.Content.< infix(_:_:)((uint64_t)v9, (uint64_t)v12) & 1;
}

void closure #1 in PaperDocumentFindResult.draw(for:)(void *a1, id a2, double a3, double a4, double a5, CGFloat a6, CGFloat a7)
{
  double v13;
  double v14;
  CGFloat tx;
  CGFloat ty;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  CGFloat v20;
  CGFloat v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  CGFloat v25;
  CGFloat v26;
  CGContext *v27;
  id v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  CGAffineTransform v35;
  CGAffineTransform t2;
  CGAffineTransform t1;

  objc_msgSend(a2, sel_boundsForBox_, 0);
  CGAffineTransformMakeTranslation(&t1, v13 - a3, v14 - a4);
  v29 = *(_OWORD *)&t1.c;
  v32 = *(_OWORD *)&t1.a;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMake(&t1, 1.0, 0.0, 0.0, -1.0, 0.0, a6);
  v17 = *(_OWORD *)&t1.a;
  v18 = *(_OWORD *)&t1.c;
  v19 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v32;
  *(_OWORD *)&t1.c = v29;
  t1.tx = tx;
  t1.ty = ty;
  *(_OWORD *)&t2.a = v17;
  *(_OWORD *)&t2.c = v18;
  *(_OWORD *)&t2.tx = v19;
  CGAffineTransformConcat(&v35, &t1, &t2);
  v30 = *(_OWORD *)&v35.c;
  v33 = *(_OWORD *)&v35.a;
  v20 = v35.tx;
  v21 = v35.ty;
  CGAffineTransformMakeScale(&t1, a7, a7);
  v22 = *(_OWORD *)&t1.a;
  v23 = *(_OWORD *)&t1.c;
  v24 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v33;
  *(_OWORD *)&t1.c = v30;
  t1.tx = v20;
  t1.ty = v21;
  *(_OWORD *)&t2.a = v22;
  *(_OWORD *)&t2.c = v23;
  *(_OWORD *)&t2.tx = v24;
  CGAffineTransformConcat(&v35, &t1, &t2);
  v31 = *(_OWORD *)&v35.c;
  v34 = *(_OWORD *)&v35.a;
  v25 = v35.tx;
  v26 = v35.ty;
  v27 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  *(_OWORD *)&t1.a = v34;
  *(_OWORD *)&t1.c = v31;
  t1.tx = v25;
  t1.ty = v26;
  CGContextConcatCTM(v27, &t1);

  v28 = objc_msgSend(a1, sel_CGContext);
  objc_msgSend(a2, sel_drawWithBox_toContext_, 0, v28);

}

uint64_t static PaperDocumentFindResult.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return static PaperDocumentFindResult.< infix(_:_:)(a1, a2, (uint64_t (*)(_OWORD *, _OWORD *))specialized static PaperDocumentFindResult.Content.< infix(_:_:));
}

uint64_t static PaperDocumentFindResult.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return static PaperDocumentFindResult.< infix(_:_:)(a1, a2, (uint64_t (*)(_OWORD *, _OWORD *))specialized static PaperDocumentFindResult.Content.== infix(_:_:));
}

uint64_t static PaperDocumentFindResult.< infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_OWORD *, _OWORD *))
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[2];
  uint64_t v11;
  char v12;
  _OWORD v13[2];
  uint64_t v14;
  char v15;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 40);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_BYTE *)(a2 + 40);
  v7 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v7;
  v14 = v3;
  v15 = v4;
  v8 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v8;
  v11 = v5;
  v12 = v6;
  return a3(v13, v10) & 1;
}

uint64_t PaperDocumentFindResult.debugDescription.getter()
{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(23);
  v0._object = (void *)0x80000001DDF5BF50;
  v0._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 62;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

void *protocol witness for FindResult.frames(in:) in conformance PaperDocumentFindResult(char **a1)
{
  return PaperDocumentFindResult.frames(in:)(*a1);
}

void protocol witness for FindResult.scrollToVisible(in:) in conformance PaperDocumentFindResult(uint64_t *a1)
{
  PaperDocumentFindResult.scrollToVisible(in:)(*a1);
}

void protocol witness for FindResult.draw(for:) in conformance PaperDocumentFindResult(uint64_t *a1)
{
  PaperDocumentFindResult.draw(for:)(*a1);
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance PaperDocumentFindResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.< infix(_:_:) in conformance PaperDocumentFindResult(a1, a2, a3, a4, (uint64_t (*)(_OWORD *, _OWORD *))specialized static PaperDocumentFindResult.Content.< infix(_:_:));
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance PaperDocumentFindResult(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[2];
  uint64_t v10;
  char v11;
  _OWORD v12[2];
  uint64_t v13;
  char v14;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_BYTE *)(a1 + 40);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_BYTE *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 16);
  v12[0] = *(_OWORD *)a2;
  v12[1] = v6;
  v13 = v4;
  v14 = v5;
  v7 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v7;
  v10 = v2;
  v11 = v3;
  return (specialized static PaperDocumentFindResult.Content.< infix(_:_:)((uint64_t)v12, (uint64_t)v9) & 1) == 0;
}

unint64_t protocol witness for static Comparable.> infix(_:_:) in conformance PaperDocumentFindResult(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  __int128 v6;
  __int128 v7;
  _OWORD v9[2];
  uint64_t v10;
  char v11;
  _OWORD v12[2];
  uint64_t v13;
  char v14;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_BYTE *)(a1 + 40);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_BYTE *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 16);
  v12[0] = *(_OWORD *)a2;
  v12[1] = v6;
  v13 = v4;
  v14 = v5;
  v7 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v7;
  v10 = v2;
  v11 = v3;
  return (unint64_t)specialized static PaperDocumentFindResult.Content.< infix(_:_:)((uint64_t)v12, (uint64_t)v9) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PaperDocumentFindResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Comparable.< infix(_:_:) in conformance PaperDocumentFindResult(a1, a2, a3, a4, (uint64_t (*)(_OWORD *, _OWORD *))specialized static PaperDocumentFindResult.Content.== infix(_:_:));
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance PaperDocumentFindResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_OWORD *, _OWORD *))
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[2];
  uint64_t v13;
  char v14;
  _OWORD v15[2];
  uint64_t v16;
  char v17;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_BYTE *)(a1 + 40);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  v9 = *(_OWORD *)(a1 + 16);
  v15[0] = *(_OWORD *)a1;
  v15[1] = v9;
  v16 = v5;
  v17 = v6;
  v10 = *(_OWORD *)(a2 + 16);
  v12[0] = *(_OWORD *)a2;
  v12[1] = v10;
  v13 = v7;
  v14 = v8;
  return a5(v15, v12) & 1;
}

BOOL specialized static PaperDocumentFindResult.Content.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  CGFloat v4;
  void *v5;
  CGFloat v6;
  CGFloat v7;
  void *v8;
  char v9;
  id v10;
  _BOOL8 v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char v20;
  id v21;
  void *v23;
  CGFloat v24;
  void *v25;
  CGFloat v26;
  char v27;
  void *v28;
  CGFloat v29;
  void *v30;
  CGRect v31;
  CGRect v32;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(void **)(a1 + 32);
  v5 = *(void **)a2;
  v4 = *(double *)(a2 + 8);
  v7 = *(double *)(a2 + 16);
  v6 = *(double *)(a2 + 24);
  v8 = *(void **)(a2 + 32);
  v9 = *(_BYTE *)(a2 + 40);
  v30 = *(void **)a1;
  v26 = *(double *)(a1 + 8);
  v29 = *(double *)(a1 + 16);
  v27 = *(_BYTE *)(a1 + 40);
  v10 = PaperDocumentFindResult.Content.pageIndex.getter();
  if (v10 != PaperDocumentFindResult.Content.pageIndex.getter())
  {
    v24 = *(double *)&v2;
    v25 = v3;
    if ((v27 & 1) != 0)
    {
      if ((v9 & 1) != 0)
      {
        outlined copy of PaperDocumentFindResult.Content(v5, *(uint64_t *)&v4, *(uint64_t *)&v7, *(uint64_t *)&v6, v8, 1);
        outlined copy of PaperDocumentFindResult.Content(v30, *(uint64_t *)&v26, *(uint64_t *)&v29, v2, v3, 1);
        outlined copy of PaperDocumentFindResult.Content(v5, *(uint64_t *)&v4, *(uint64_t *)&v7, *(uint64_t *)&v6, v8, 1);
        outlined copy of PaperDocumentFindResult.Content(v30, *(uint64_t *)&v26, *(uint64_t *)&v29, v2, v3, 1);
        v12 = objc_msgSend(v3, sel_document);
        if (v12)
        {
          v28 = v12;
          v13 = objc_msgSend(v8, sel_document);
          if (v13)
          {
            v14 = v13;
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
            v23 = v14;
            if ((static NSObject.== infix(_:_:)() & 1) != 0)
            {
              *(_QWORD *)&v31.origin.x = v30;
              v31.origin.y = v26;
              v31.size.width = v29;
              v31.size.height = v24;
              *(_QWORD *)&v32.origin.x = v5;
              v32.origin.y = v4;
              v32.size.width = v7;
              v32.size.height = v6;
              v11 = CGRectEqualToRect(v31, v32);

              outlined consume of PaperDocumentFindResult.Content(v5, *(uint64_t *)&v4, *(uint64_t *)&v7, *(uint64_t *)&v6, v8, 1);
              outlined consume of PaperDocumentFindResult.Content(v30, *(uint64_t *)&v26, *(uint64_t *)&v29, *(uint64_t *)&v24, v3, 1);
              outlined consume of PaperDocumentFindResult.Content(v30, *(uint64_t *)&v26, *(uint64_t *)&v29, *(uint64_t *)&v24, v3, 1);
              outlined consume of PaperDocumentFindResult.Content(v5, *(uint64_t *)&v4, *(uint64_t *)&v7, *(uint64_t *)&v6, v8, 1);
              return v11;
            }
            outlined consume of PaperDocumentFindResult.Content(v5, *(uint64_t *)&v4, *(uint64_t *)&v7, *(uint64_t *)&v6, v8, 1);
            outlined consume of PaperDocumentFindResult.Content(v30, *(uint64_t *)&v26, *(uint64_t *)&v29, *(uint64_t *)&v24, v3, 1);
            outlined consume of PaperDocumentFindResult.Content(v30, *(uint64_t *)&v26, *(uint64_t *)&v29, *(uint64_t *)&v24, v3, 1);
            outlined consume of PaperDocumentFindResult.Content(v5, *(uint64_t *)&v4, *(uint64_t *)&v7, *(uint64_t *)&v6, v8, 1);

          }
          else
          {
            outlined consume of PaperDocumentFindResult.Content(v5, *(uint64_t *)&v4, *(uint64_t *)&v7, *(uint64_t *)&v6, v8, 1);
            outlined consume of PaperDocumentFindResult.Content(v30, *(uint64_t *)&v26, *(uint64_t *)&v29, v2, v3, 1);
            outlined consume of PaperDocumentFindResult.Content(v30, *(uint64_t *)&v26, *(uint64_t *)&v29, v2, v3, 1);
            outlined consume of PaperDocumentFindResult.Content(v5, *(uint64_t *)&v4, *(uint64_t *)&v7, *(uint64_t *)&v6, v8, 1);

          }
          return 0;
        }
        outlined consume of PaperDocumentFindResult.Content(v5, *(uint64_t *)&v4, *(uint64_t *)&v7, *(uint64_t *)&v6, v8, 1);
        outlined consume of PaperDocumentFindResult.Content(v30, *(uint64_t *)&v26, *(uint64_t *)&v29, v2, v3, 1);
        outlined consume of PaperDocumentFindResult.Content(v30, *(uint64_t *)&v26, *(uint64_t *)&v29, v2, v3, 1);
        v15 = v5;
        v16 = *(_QWORD *)&v4;
        v17 = *(_QWORD *)&v7;
        v18 = *(_QWORD *)&v6;
        v19 = v8;
        v20 = 1;
LABEL_11:
        outlined consume of PaperDocumentFindResult.Content(v15, v16, v17, v18, v19, v20);
        return 0;
      }
    }
    else if ((v9 & 1) == 0)
    {
      outlined copy of PaperDocumentFindResult.Content(v5, *(uint64_t *)&v4, *(uint64_t *)&v7, *(uint64_t *)&v6, v8, 0);
      outlined copy of PaperDocumentFindResult.Content(v30, *(uint64_t *)&v26, *(uint64_t *)&v29, v2, v3, 0);
      v21 = objc_msgSend(v30, sel_compare_, v5);
      outlined consume of PaperDocumentFindResult.Content(v30, *(uint64_t *)&v26, *(uint64_t *)&v29, v2, v25, 0);
      outlined consume of PaperDocumentFindResult.Content(v5, *(uint64_t *)&v4, *(uint64_t *)&v7, *(uint64_t *)&v6, v8, 0);
      return v21 == 0;
    }
    outlined copy of PaperDocumentFindResult.Content(v5, *(uint64_t *)&v4, *(uint64_t *)&v7, *(uint64_t *)&v6, v8, v9);
    outlined copy of PaperDocumentFindResult.Content(v30, *(uint64_t *)&v26, *(uint64_t *)&v29, v2, v3, v27);
    outlined consume of PaperDocumentFindResult.Content(v30, *(uint64_t *)&v26, *(uint64_t *)&v29, v2, v3, v27);
    v15 = v5;
    v16 = *(_QWORD *)&v4;
    v17 = *(_QWORD *)&v7;
    v18 = *(_QWORD *)&v6;
    v19 = v8;
    v20 = v9;
    goto LABEL_11;
  }
  return 1;
}

id specialized static PaperDocumentFindResult.Content.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char v9;
  id result;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  id v22;
  void *v23;
  void *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  uint64_t v32;
  id v33;
  id v34;
  void *v35;
  double v36;
  double v37;
  double v38;
  char v39;
  uint64_t v40;
  id v41;
  void *v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v49;
  double v50;
  id v51;
  id v52;
  void *v53;
  double v54;
  id v55;
  uint64_t v56;
  void *v57;
  void *v58;
  double v59;
  double v60;
  id v61;
  void *v62;
  double v63;
  id v64;
  uint64_t v65;
  void *v66;
  void *v67;
  double v68;
  char v69;
  void *v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v2 = *(void **)a1;
  v3 = *(uint64_t *)(a1 + 24);
  v76 = *(uint64_t *)(a1 + 8);
  v77 = *(_QWORD *)(a1 + 16);
  v4 = *(void **)(a1 + 32);
  v5 = *(void **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 24);
  v78 = *(_QWORD *)(a2 + 16);
  v8 = *(void **)(a2 + 32);
  v9 = *(_BYTE *)(a2 + 40);
  v75 = v4;
  v74 = *(_BYTE *)(a1 + 40);
  if ((v74 & 1) != 0)
  {
    result = objc_msgSend(v4, sel_document);
    if (!result)
    {
      __break(1u);
      goto LABEL_44;
    }
    v11 = result;
    outlined consume of PaperDocumentFindResult.Content(v2, v76, v77, v3, v4, 1);
    if ((v9 & 1) == 0)
    {
LABEL_4:
      v12 = v5;
      v13 = v6;
      v14 = v7;
      v15 = v8;
      v16 = v12;
      v17 = objc_msgSend(v12, sel_document);
      goto LABEL_8;
    }
  }
  else
  {
    v11 = objc_msgSend(v2, sel_document);
    if ((v9 & 1) == 0)
      goto LABEL_4;
  }
  result = objc_msgSend(v8, sel_document);
  if (!result)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v17 = result;
  v16 = v5;
  v18 = v5;
  v13 = v6;
  v19 = v6;
  v14 = v7;
  v20 = v7;
  v15 = v8;
  outlined consume of PaperDocumentFindResult.Content(v18, v19, v78, v20, v8, v9);
LABEL_8:
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v21 = static NSObject.== infix(_:_:)();

  if ((v21 & 1) == 0)
    return 0;
  v73 = v3;
  v22 = PaperDocumentFindResult.Content.pageIndex.getter();
  if (v22 != PaperDocumentFindResult.Content.pageIndex.getter())
  {
    v33 = PaperDocumentFindResult.Content.pageIndex.getter();
    return (id)((uint64_t)v33 < (uint64_t)PaperDocumentFindResult.Content.pageIndex.getter());
  }
  v70 = v15;
  v71 = v16;
  v72 = v14;
  v69 = v9;
  if ((v74 & 1) == 0)
  {
    if ((v9 & 1) == 0)
    {
      outlined copy of PaperDocumentFindResult.Content(v2, v76, v77, v3, v75, 0);
      outlined copy of PaperDocumentFindResult.Content(v16, v13, v78, v14, v15, 0);
      v51 = objc_msgSend(v2, sel_compare_, v16);
      outlined consume of PaperDocumentFindResult.Content(v2, v76, v77, v73, v75, 0);
      outlined consume of PaperDocumentFindResult.Content(v16, v13, v78, v14, v15, 0);
      return (id)(v51 == (id)-1);
    }
    outlined copy of PaperDocumentFindResult.Content(v2, v76, v77, v3, v75, 0);
    v32 = v76;
    outlined copy of PaperDocumentFindResult.Content(v16, v13, v78, v14, v15, 1);
    outlined consume of PaperDocumentFindResult.Content(v2, v76, v77, v73, v75, 0);
    outlined consume of PaperDocumentFindResult.Content(v16, v13, v78, v14, v15, 1);
    outlined copy of PaperDocumentFindResult.Content(v2, v76, v77, v73, v75, 0);
    v34 = v2;
    result = objc_msgSend(v34, sel_firstPage);
    if (result)
    {
      v35 = result;
      v29 = v73;
      objc_msgSend(v34, sel_boundsForPage_, result);
      v31 = v36;

      outlined consume of PaperDocumentFindResult.Content(v2, v76, v77, v73, v75, 0);
      v27 = v77;
      outlined consume of PaperDocumentFindResult.Content(v2, v76, v77, v73, v75, 0);
      v23 = v15;
      v26 = v13;
      goto LABEL_18;
    }
    goto LABEL_45;
  }
  outlined copy of PaperDocumentFindResult.Content(v2, v76, v77, v3, v75, 1);
  v23 = v15;
  outlined copy of PaperDocumentFindResult.Content(v16, v13, v78, v14, v15, v9);
  v24 = v16;
  v25 = v9;
  v26 = v13;
  v27 = v77;
  outlined consume of PaperDocumentFindResult.Content(v2, v76, v77, v3, v75, 1);
  v28 = v14;
  v29 = v3;
  outlined consume of PaperDocumentFindResult.Content(v24, v13, v78, v28, v70, v25);
  objc_msgSend(v75, sel_boundsForBox_, 0);
  v31 = v30 - *(double *)&v3 - *(double *)&v76;
  if ((v25 & 1) != 0)
  {
    v32 = v76;
LABEL_18:
    objc_msgSend(v23, sel_boundsForBox_, 0);
    v38 = v37 - *(double *)&v72 - *(double *)&v26;
    v39 = v74;
    v40 = v27;
    goto LABEL_21;
  }
  outlined copy of PaperDocumentFindResult.Content(v71, v13, v78, v72, v70, 0);
  v41 = v71;
  result = objc_msgSend(v41, sel_firstPage);
  if (!result)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  v42 = result;
  objc_msgSend(v41, sel_boundsForPage_, result);
  v38 = v43;

  outlined consume of PaperDocumentFindResult.Content(v71, v13, v78, v72, v70, 0);
  outlined consume of PaperDocumentFindResult.Content(v71, v13, v78, v72, v70, 0);
  v23 = v70;
  v32 = v76;
  v40 = v77;
  v39 = v74;
LABEL_21:
  v44 = vabdd_f64(v31, v38);
  if (one-time initialization token for verticalComparisonLineTolerance != -1)
    swift_once();
  if (*(double *)&static PaperDocumentFindResult.Content.verticalComparisonLineTolerance < v44)
  {
    if ((v39 & 1) != 0)
    {
      objc_msgSend(v75, sel_boundsForBox_, 0, *(double *)&static PaperDocumentFindResult.Content.verticalComparisonLineTolerance);
      v46 = v45 - *(double *)&v29 - *(double *)&v32;
      if ((v69 & 1) != 0)
      {
LABEL_26:
        objc_msgSend(v23, sel_boundsForBox_, 0);
        return (id)(v47 - *(double *)&v72 - *(double *)&v26 < v46);
      }
LABEL_33:
      outlined copy of PaperDocumentFindResult.Content(v71, v26, v78, v72, v23, v69);
      v55 = v71;
      result = objc_msgSend(v55, sel_firstPage);
      if (result)
      {
        v56 = v26;
        v57 = v23;
        v58 = result;
        objc_msgSend(v55, sel_boundsForPage_, result);
        v60 = v59;

        outlined consume of PaperDocumentFindResult.Content(v71, v56, v78, v72, v57, v69);
        outlined consume of PaperDocumentFindResult.Content(v71, v56, v78, v72, v57, v69);
        return (id)(v60 < v46);
      }
      goto LABEL_48;
    }
    outlined copy of PaperDocumentFindResult.Content(v2, v32, v40, v29, v75, 0);
    v52 = v2;
    result = objc_msgSend(v52, sel_firstPage);
    if (result)
    {
      v53 = result;
      objc_msgSend(v52, sel_boundsForPage_, result);
      v46 = v54;

      outlined consume of PaperDocumentFindResult.Content(v2, v32, v40, v29, v75, 0);
      outlined consume of PaperDocumentFindResult.Content(v2, v32, v40, v29, v75, 0);
      v23 = v70;
      if ((v69 & 1) != 0)
        goto LABEL_26;
      goto LABEL_33;
    }
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if ((v39 & 1) != 0)
  {
    v49 = *(double *)&v2;
    objc_msgSend(v75, sel_boundsForBox_, 0, *(double *)&static PaperDocumentFindResult.Content.verticalComparisonLineTolerance);
    if ((v69 & 1) != 0)
    {
LABEL_29:
      v50 = *(double *)&v71;
      objc_msgSend(v23, sel_boundsForBox_, 0);
      return (id)(v49 < v50);
    }
  }
  else
  {
    outlined copy of PaperDocumentFindResult.Content(v2, v32, v40, v29, v75, 0);
    v61 = v2;
    result = objc_msgSend(v61, sel_firstPage);
    if (!result)
    {
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    v62 = result;
    objc_msgSend(v61, sel_boundsForPage_, result);
    v49 = v63;

    outlined consume of PaperDocumentFindResult.Content(v2, v32, v40, v29, v75, 0);
    outlined consume of PaperDocumentFindResult.Content(v2, v32, v40, v29, v75, 0);
    v23 = v70;
    if ((v69 & 1) != 0)
      goto LABEL_29;
  }
  outlined copy of PaperDocumentFindResult.Content(v71, v26, v78, v72, v23, v69);
  v64 = v71;
  result = objc_msgSend(v64, sel_firstPage);
  if (!result)
  {
LABEL_50:
    __break(1u);
    return result;
  }
  v65 = v26;
  v66 = v23;
  v67 = result;
  objc_msgSend(v64, sel_boundsForPage_, result);
  v50 = v68;

  outlined consume of PaperDocumentFindResult.Content(v71, v65, v78, v72, v66, v69);
  outlined consume of PaperDocumentFindResult.Content(v71, v65, v78, v72, v66, v69);
  return (id)(v49 < v50);
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo7PDFPageCG_So6CGRectVs5NeverOTg5050_s8PaperKit0A18DocumentFindResultV6frames2inSaySo6e21VGAA0aC4ViewC_tFAGSo7D6CXEfU_So12PDFSelectionC0H3Kit0hkS0CTf1cn_nTf4ngg_n(unint64_t a1, void *a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *result;
  char *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v24;

  if (a1 >> 62)
    goto LABEL_16;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v6 = MEMORY[0x1E0DEE9D8];
    if (!v5)
      return (void *)v6;
    v24 = MEMORY[0x1E0DEE9D8];
    result = (void *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
    if (v5 < 0)
      break;
    v6 = v24;
    v8 = &a3[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
    swift_beginAccess();
    v9 = 0;
    while (v5 != v9)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v10 = (id)MEMORY[0x1DF0E4D64](v9, a1);
      else
        v10 = *(id *)(a1 + 8 * v9 + 32);
      v11 = v10;
      objc_msgSend(a2, sel_boundsForPage_, v10);
      result = *(void **)v8;
      if (!*(_QWORD *)v8)
        goto LABEL_18;
      objc_msgSend(result, sel_convertRect_fromPage_, v11);
      objc_msgSend(a3, sel_convertRect_fromView_, *(_QWORD *)v8);
      v13 = v12;
      v15 = v14;
      v17 = v16;
      v19 = v18;

      v21 = *(_QWORD *)(v24 + 16);
      v20 = *(_QWORD *)(v24 + 24);
      if (v21 >= v20 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
      ++v9;
      *(_QWORD *)(v24 + 16) = v21 + 1;
      v22 = (_QWORD *)(v24 + 32 * v21);
      v22[4] = v13;
      v22[5] = v15;
      v22[6] = v17;
      v22[7] = v19;
      if (v5 == v9)
        return (void *)v6;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1DDEE2740()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in PaperDocumentFindResult.draw(for:)(void *a1)
{
  uint64_t v1;

  closure #1 in PaperDocumentFindResult.draw(for:)(a1, *(id *)(v1 + 16), *(double *)(v1 + 24), *(double *)(v1 + 32), *(double *)(v1 + 40), *(CGFloat *)(v1 + 48), *(CGFloat *)(v1 + 56));
}

uint64_t sub_1DDEE2778()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_68()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type PaperDocumentView and conformance PaperDocumentView()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PaperDocumentView and conformance PaperDocumentView;
  if (!lazy protocol witness table cache variable for type PaperDocumentView and conformance PaperDocumentView)
  {
    v1 = type metadata accessor for PaperDocumentView();
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PaperDocumentView, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentView and conformance PaperDocumentView);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for PaperDocumentFindResult(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type PaperDocumentFindResult and conformance PaperDocumentFindResult();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PaperDocumentFindResult()
{
  return &type metadata for PaperDocumentFindResult;
}

void destroy for PaperDocumentFindResult(uint64_t a1)
{
  outlined consume of PaperDocumentFindResult.Content(*(void **)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(void **)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t initializeWithCopy for PaperDocumentFindResult(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char v8;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(void **)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  outlined copy of PaperDocumentFindResult.Content(*(void **)a2, v4, v5, v6, v7, v8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  return a1;
}

uint64_t assignWithCopy for PaperDocumentFindResult(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char v14;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(void **)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  outlined copy of PaperDocumentFindResult.Content(*(void **)a2, v4, v5, v6, v7, v8);
  v9 = *(void **)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(void **)(a1 + 32);
  v14 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  outlined consume of PaperDocumentFindResult.Content(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for PaperDocumentFindResult(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v10;
  __int128 v11;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_BYTE *)(a2 + 40);
  v5 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(void **)(a1 + 32);
  v10 = *(_BYTE *)(a1 + 40);
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 40) = v4;
  outlined consume of PaperDocumentFindResult.Content(v5, v7, v6, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PaperDocumentFindResult(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PaperDocumentFindResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for PaperDocumentFindResult.Content(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t destructiveInjectEnumTag for PaperDocumentFindResult.Content(uint64_t result, char a2)
{
  *(_BYTE *)(result + 40) = a2 & 1;
  return result;
}

void *type metadata accessor for PaperDocumentFindResult.Content()
{
  return &unk_1EA855920;
}

unint64_t lazy protocol witness table accessor for type PaperDocumentFindResult.Content and conformance PaperDocumentFindResult.Content()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PaperDocumentFindResult.Content and conformance PaperDocumentFindResult.Content;
  if (!lazy protocol witness table cache variable for type PaperDocumentFindResult.Content and conformance PaperDocumentFindResult.Content)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for PaperDocumentFindResult.Content, &unk_1EA855920);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PaperDocumentFindResult.Content and conformance PaperDocumentFindResult.Content);
  }
  return result;
}

uint64_t PaperKitPDFPage.encodePaperPage<A, B>(_:_:id:capsule:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  char *v51;
  void (*v52)(uint64_t, uint64_t);
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  int v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  Class isa;
  void *v72;
  uint64_t v73;
  id v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  Class v89;
  void *v90;
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t);
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v121 = a8;
  v116 = a6;
  v102 = a4;
  v110 = a1;
  v111 = a3;
  v114 = a10;
  v105 = a9;
  v11 = *(_QWORD *)(a5 - 8);
  v120 = a5;
  v101 = v11;
  MEMORY[0x1E0C80A78](a1, a5);
  v100 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = v13;
  v99 = type metadata accessor for Ref();
  v98 = *(_QWORD *)(v99 - 8);
  MEMORY[0x1E0C80A78](v99, v14);
  v97 = (char *)&v91 - v15;
  v16 = type metadata accessor for CRCodableVersion();
  v108 = *(_QWORD *)(v16 - 8);
  v109 = v16;
  MEMORY[0x1E0C80A78](v16, v17);
  v107 = (char *)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for CRKeyPath();
  v95 = *(_QWORD *)(v96 - 8);
  MEMORY[0x1E0C80A78](v96, v19);
  v94 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v104 = (char *)&v91 - v23;
  v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_3<TaggedPaperPage>>>);
  v113 = *(_QWORD *)(v119 - 8);
  MEMORY[0x1E0C80A78](v119, v24);
  v115 = (char *)&v91 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Signature>?);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v91 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v32);
  v34 = (char *)&v91 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v35, v36);
  v38 = (char *)&v91 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  v118 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39, v40);
  v42 = (char *)&v91 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v122 = *(_QWORD *)(v43 - 8);
  v123 = v43;
  MEMORY[0x1E0C80A78](v43, v44);
  v46 = (char *)&v91 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = MEMORY[0x1E0C80A78](v47, v48);
  v51 = (char *)&v91 - v50;
  v52 = *(void (**)(uint64_t, uint64_t))(v121 + 72);
  v106 = a2;
  v92 = v52;
  ((void (*)(uint64_t, double))v52)(v120, v49);
  v53 = *(void (**)(char *, char *, uint64_t))(v122 + 16);
  v117 = v51;
  v53(v46, v51, v123);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>, MEMORY[0x1E0D11DC0]);
  v93 = v46;
  dispatch thunk of Sequence.makeIterator()();
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator and conformance CROrderedSet<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator, MEMORY[0x1E0D11D70]);
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v38, 1, v30) == 1)
      break;
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v34, v38, v30);
    SharedTagged_9.tagged7.getter();
    v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Signature>);
    v55 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 48))(v29, 1, v54);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v29, &demangling cache variable for type metadata for Ref<Signature>?);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v30);
    if (v55 != 1)
    {
      (*(void (**)(char *, uint64_t))(v118 + 8))(v42, v39);
      return (*(uint64_t (**)(char *, uint64_t))(v122 + 8))(v117, v123);
    }
  }
  (*(void (**)(char *, uint64_t))(v118 + 8))(v42, v39);
  v122 = *(_QWORD *)(v122 + 8);
  ((void (*)(char *, uint64_t))v122)(v117, v123);
  v57 = static CRKeyPath.unique.getter();
  MEMORY[0x1E0C80A78](v57, v58);
  v59 = v120;
  v60 = v116;
  *(&v91 - 8) = v120;
  *(&v91 - 7) = v60;
  v61 = v111;
  v62 = v121;
  *(&v91 - 6) = v112;
  *(&v91 - 5) = v62;
  v63 = v114;
  *(&v91 - 4) = v105;
  *(&v91 - 3) = v63;
  *(&v91 - 2) = v106;
  *(&v91 - 1) = v61;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_3<TaggedPaperPage>>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_3<TaggedPaperPage>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_3<TaggedPaperPage>>, MEMORY[0x1E0D117A8]);
  Capsule<>.init(id:initClosure:)();
  v65 = v107;
  v64 = v108;
  v66 = v109;
  (*(void (**)(char *, _QWORD, uint64_t))(v108 + 104))(v107, *MEMORY[0x1E0D12378], v109);
  v67 = Capsule<>.serializedData(_:version:allowedAppFormats:)();
  v68 = v65;
  v70 = v69;
  (*(void (**)(char *, uint64_t))(v64 + 8))(v68, v66);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v72 = (void *)MEMORY[0x1DF0E41AC](4935760, 0xE300000000000000);
  v73 = v59;
  v74 = v103;
  objc_msgSend(v103, sel_setApplicationData_withName_, isa, v72);

  (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v94, v61, v96);
  v75 = v97;
  Ref.init(id:)();
  v76 = v100;
  v77 = v102;
  v78 = v99;
  Ref.subscript.getter();
  (*(void (**)(char *, uint64_t))(v98 + 8))(v75, v78);
  v79 = (uint64_t)v93;
  v92(v73, v121);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v76, v73);
  v80 = type metadata accessor for Capsule();
  v81 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>, MEMORY[0x1E0D11DC8]);
  v82 = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12B28], v80);
  v83 = v77;
  v84 = v123;
  PaperKitPDFPage.paperKitHash<A, B>(version:elements:in:)(3u, v79, v83, v123, v80, v81, v82);
  v86 = v85;
  v88 = v87;
  ((void (*)(uint64_t, uint64_t))v122)(v79, v84);
  v89 = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v86, v88);
  v90 = (void *)MEMORY[0x1DF0E41AC](0x687361484B5050, 0xE700000000000000);
  objc_msgSend(v74, sel_setApplicationData_withName_, v89, v90);
  outlined consume of Data._Representation(v67, v70);

  return (*(uint64_t (**)(char *, uint64_t))(v113 + 8))(v115, v119);
}

uint64_t PaperKitPDFPage.decodePaperPage<A>(pageID:in:assetManager:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  char *v46;
  double v47;
  double v48;
  double v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void (*v66)(char *, unint64_t, uint64_t);
  char *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  void *v71;
  char *v72;
  id v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  __int16 v85;
  unsigned __int8 v86;
  uint64_t v87;
  char **v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  os_log_type_t v107;
  uint8_t *v108;
  char *v110;
  char *v111;
  uint64_t v112;
  void (*v113)(_QWORD *, _QWORD);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(uint64_t, uint64_t, char *, char *, uint64_t, uint64_t);
  uint64_t v118;
  char *v119;
  void (*v120)(_QWORD *, _QWORD);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  unint64_t v154;
  char *v155;
  char *v156;
  unint64_t v157;
  unint64_t v158;
  _QWORD v159[5];
  uint64_t v160;

  v145 = a4;
  v146 = a1;
  v144 = *a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v7, v8);
  v134 = (uint64_t)&v132 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_3<TaggedPaperPage>>);
  v138 = *(_QWORD *)(v142 - 8);
  MEMORY[0x1E0C80A78](v142, v10);
  v137 = (char *)&v132 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v136 = *(_QWORD *)(v140 - 8);
  MEMORY[0x1E0C80A78](v140, v12);
  v133 = (char *)&v132 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v139 = (char *)&v132 - v16;
  v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_3<TaggedPaperPage>>>);
  v135 = *(_QWORD *)(v141 - 8);
  MEMORY[0x1E0C80A78](v141, v17);
  v143 = (char *)&v132 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<UnknownCanvasElement>?);
  MEMORY[0x1E0C80A78](v19, v20);
  v154 = (unint64_t)&v132 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v22, v23);
  v155 = (char *)&v132 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v132 - v27;
  v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29, v31);
  v153 = (char *)&v132 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v156 = (char *)&v132 - v35;
  MEMORY[0x1E0C80A78](v36, v37);
  v152 = (char *)&v132 - v38;
  v158 = type metadata accessor for AnnotationImporter.ImportedElement();
  v39 = *(_QWORD *)(v158 - 8);
  MEMORY[0x1E0C80A78](v158, v40);
  v157 = (unint64_t)&v132 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = MEMORY[0x1E0C80A78](v42, v43);
  v46 = (char *)&v132 - v45;
  objc_msgSend(v4, sel_boundsForBox_, 0, v44);
  v147 = (char *)v4;
  v148 = a3;
  v149 = a2;
  static AnnotationImporter._importAnnotations<A>(from:in:assetManager:scale:mediaBox:)(v4, (uint64_t)a2, a3, 1.0, v47, v48, v49, v50);
  v52 = *(_QWORD *)(v51 + 16);
  v150 = v51;
  if (v52)
  {
    v53 = v51 + ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80));
    v54 = *(_QWORD *)(v39 + 72);
    v55 = MEMORY[0x1E0DEE9D8];
    v56 = (uint64_t)v155;
    v151 = v54;
    do
    {
      outlined init with copy of PKStrokeProperties(v53, (uint64_t)v46, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
      v57 = v157;
      outlined init with copy of PKStrokeProperties((uint64_t)v46, v157, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v56, 1, 1, v29);
        outlined destroy of AnnotationImporter.ImportedElement(v57);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v56, v57, v29);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56))(v56, 0, 1, v29);
      }
      outlined init with take of SharedTagged_9<TaggedCanvasElement>?(v56, (uint64_t)v28);
      outlined destroy of AnnotationImporter.ImportedElement((uint64_t)v46);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
      }
      else
      {
        v58 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
        v59 = v152;
        v58(v152, v28, v29);
        v58(v156, v59, v29);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v55 + 16) + 1, 1, v55);
        v61 = *(_QWORD *)(v55 + 16);
        v60 = *(_QWORD *)(v55 + 24);
        v62 = v55;
        if (v61 >= v60 >> 1)
          v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v60 > 1, v61 + 1, 1, v55);
        *(_QWORD *)(v62 + 16) = v61 + 1;
        v55 = v62;
        v58((char *)(v62+ ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(_QWORD *)(v30 + 72) * v61), v156, v29);
        v56 = (uint64_t)v155;
        v54 = v151;
      }
      v53 += v54;
      --v52;
    }
    while (v52);
  }
  else
  {
    v55 = MEMORY[0x1E0DEE9D8];
  }
  v63 = *(_QWORD *)(v55 + 16);
  if (v63)
  {
    v64 = v55 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
    v65 = *(_QWORD *)(v30 + 72);
    v66 = *(void (**)(char *, unint64_t, uint64_t))(v30 + 16);
    v158 = v55;
    swift_bridgeObjectRetain();
    v67 = v153;
    v68 = v154;
    while (1)
    {
      v66(v67, v64, v29);
      SharedTagged_9.unknown.getter();
      v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<UnknownCanvasElement>);
      v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 48))(v68, 1, v69);
      outlined destroy of StocksKitCurrencyCache.Provider?(v68, &demangling cache variable for type metadata for Ref<UnknownCanvasElement>?);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v67, v29);
      if (v70 != 1)
        break;
      v64 += v65;
      if (!--v63)
      {
        v55 = v158;
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
    swift_bridgeObjectRelease_n();
    v104 = v145;
    v72 = v147;
    goto LABEL_27;
  }
LABEL_20:
  v71 = (void *)MEMORY[0x1DF0E41AC](4935760, 0xE300000000000000);
  v72 = v147;
  v73 = objc_msgSend(v147, sel_applicationDataWithName_, v71);

  if (!v73)
  {
    swift_bridgeObjectRelease();
    v104 = v145;
LABEL_27:
    v80 = v146;
    v81 = (uint64_t)v149;
LABEL_37:
    static PaperDocumentPage.create<A>(pdfPage:pageID:in:assetManager:importedElements:)(v72, v80, v81, v150, v104);
    return swift_bridgeObjectRelease();
  }
  v74 = v55;
  v75 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v77 = v76;

  v78 = (void *)MEMORY[0x1DF0E41AC](0x687361484B5050, 0xE700000000000000);
  v79 = objc_msgSend(v72, sel_applicationDataWithName_, v78);

  v80 = v146;
  v81 = (uint64_t)v149;
  if (!v79)
  {
    swift_bridgeObjectRelease();
LABEL_31:
    if (one-time initialization token for logger != -1)
      swift_once();
    v105 = type metadata accessor for Logger();
    __swift_project_value_buffer(v105, (uint64_t)logger);
    v106 = Logger.logObject.getter();
    v107 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v106, v107))
    {
      v108 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v108 = 0;
      _os_log_impl(&dword_1DDB0F000, v106, v107, "Importing PaperKit page skipped due to hash difference.", v108, 2u);
      MEMORY[0x1DF0E6558](v108, -1, -1);

      outlined consume of Data._Representation(v75, v77);
    }
    else
    {
      outlined consume of Data._Representation(v75, v77);

    }
    goto LABEL_36;
  }
  v82 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v84 = v83;

  Data.paperKitHashVersion.getter(v82, v84);
  if ((v85 & 0x100) != 0)
  {
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v82, v84);
    goto LABEL_31;
  }
  v86 = v85;
  v156 = (char *)v75;
  v157 = v77;
  v159[0] = v74;
  v160 = v81;
  v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SharedTagged_9<TaggedCanvasElement>]);
  v88 = (char **)(v144 + *MEMORY[0x1E0D12A70]);
  v89 = v88[1];
  v155 = *v88;
  v90 = type metadata accessor for Capsule.Ref();
  v158 = v82;
  v91 = v90;
  v92 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [SharedTagged_9<TaggedCanvasElement>] and conformance [A], &demangling cache variable for type metadata for [SharedTagged_9<TaggedCanvasElement>], MEMORY[0x1E0DEAF50]);
  v93 = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12A88], v91);
  v94 = v91;
  v95 = v158;
  PaperKitPDFPage.paperKitHash<A, B>(version:elements:in:)(v86, (uint64_t)v159, (uint64_t)&v160, v87, v94, v92, v93);
  v97 = v96;
  v99 = v98;
  swift_bridgeObjectRelease();
  specialized static Data.== infix(_:_:)(v95, v84);
  v100 = v84;
  v102 = v101;
  outlined consume of Data._Representation(v97, v99);
  if ((v102 & 1) == 0)
  {
    outlined consume of Data._Representation(v95, v100);
    v75 = (uint64_t)v156;
    v77 = v157;
    goto LABEL_31;
  }
  v154 = v100;
  outlined copy of Data._Representation((uint64_t)v156, v157);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_3<TaggedPaperPage>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_3<TaggedPaperPage>>, MEMORY[0x1E0D117A8]);
  v103 = v142;
  Capsule<>.init(serializedData:allowedAppFormats:)();
  Capsule.Ref.import<A>(_:)();
  v110 = v137;
  Capsule<>.root.getter();
  v111 = v139;
  CRRegister.value.getter();
  (*(void (**)(char *, uint64_t))(v138 + 8))(v110, v103);
  v112 = v140;
  v113 = (void (*)(_QWORD *, _QWORD))SharedTagged_3.subscript.modify();
  v115 = *(_QWORD *)(v114 + 24);
  v116 = *(_QWORD *)(v114 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v114, v115);
  v117 = *(void (**)(uint64_t, uint64_t, char *, char *, uint64_t, uint64_t))(v116 + 104);
  v118 = v116;
  v119 = v111;
  v117(v150, v81, v155, v89, v115, v118);
  v113(v159, 0);
  v120 = (void (*)(_QWORD *, _QWORD))SharedTagged_3.subscript.modify();
  v122 = *(_QWORD *)(v121 + 24);
  v123 = *(_QWORD *)(v121 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v121, v122);
  v124 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v123 + 168))(v72, v80, v148, v122, v123);
  v120(v159, 0);
  if ((v124 & 1) == 0)
  {
    outlined consume of Data._Representation(v158, v154);
    outlined consume of Data._Representation((uint64_t)v156, v157);
    (*(void (**)(char *, uint64_t))(v136 + 8))(v119, v112);
    (*(void (**)(char *, uint64_t))(v135 + 8))(v143, v141);
LABEL_36:
    v104 = v145;
    goto LABEL_37;
  }
  swift_bridgeObjectRelease();
  v125 = v134;
  outlined init with copy of PKStrokeProperties(v80, v134, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
  v126 = type metadata accessor for PDFPageID();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v126 - 8) + 56))(v125, 0, 1, v126);
  v127 = type metadata accessor for PageId(0);
  v128 = v125 + *(int *)(v127 + 20);
  v129 = v136;
  (*(void (**)(char *, char *, uint64_t))(v136 + 16))(v133, v119, v112);
  lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
  WeakTagged_3.init(_:)();
  v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v130 - 8) + 56))(v128, 0, 1, v130);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v127 - 8) + 56))(v125, 0, 1, v127);
  v131 = (uint64_t)&v72[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId];
  swift_beginAccess();
  outlined assign with take of PageId?(v125, v131);
  swift_endAccess();
  outlined consume of Data._Representation(v158, v154);
  outlined consume of Data._Representation((uint64_t)v156, v157);
  (*(void (**)(char *, uint64_t))(v135 + 8))(v143, v141);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v129 + 32))(v145, v119, v112);
}

void PaperKitPDFPage.paperKitHash<A, B>(version:elements:in:)(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  void *v8;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  double v46;
  double v47;
  double v48;
  double v49;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[9];
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t AssociatedTypeWitness;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD aBlock[7];

  v8 = v7;
  v74 = a7;
  v73 = a5;
  v72 = a3;
  v85 = a2;
  v66 = 0;
  v11 = a1;
  aBlock[6] = *MEMORY[0x1E0C80C00];
  v62 = type metadata accessor for SHA256Digest();
  v61[8] = *(_QWORD *)(v62 - 8);
  MEMORY[0x1E0C80A78](v62, v12);
  v61[7] = (char *)v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
  MEMORY[0x1E0C80A78](v83, v14);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v15, v16);
  v81 = (char *)v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  MEMORY[0x1E0C80A78](v20, v21);
  v82 = (char *)v61 - v22;
  v23 = type metadata accessor for CRKeyPath();
  v24 = *(_QWORD *)(v23 - 8);
  v87 = v23;
  v88 = v24;
  MEMORY[0x1E0C80A78](v23, v25);
  v79 = (char *)v61 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v80 = (char *)v61 - v29;
  v68 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v76 = *(_QWORD *)(v68 - 8);
  MEMORY[0x1E0C80A78](v68, v30);
  v67 = (char *)v61 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v32, v33);
  v75 = (char *)v61 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v35, v36);
  v71 = (char *)v61 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = *(_QWORD *)(a6 + 8);
  v86 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v61[4] = *(_QWORD *)(AssociatedTypeWitness - 8);
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v38);
  v77 = (char *)v61 - v39;
  v65 = type metadata accessor for SHA256();
  v61[6] = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65, v40);
  v63 = (char *)v61 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v42, v43);
  v45 = (char *)v61 - v44;
  SHA256.init()();
  v69 = v8;
  objc_msgSend(v8, sel_boundsForBox_, 0);
  v64 = v45;
  if (v11 == 1)
  {
    CGRect.rawValue.getter(v46, v47, v48, v49);
    __asm { BR              X10 }
  }
  CGRect.roundedHash(into:)(v46, v47, v48, v49);
  v89 = MEMORY[0x1E0DEE9D8];
  v51 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D80]), sel_init);
  CGDisplayListCreateWithRect();
  v52 = (void *)CGDisplayListContextCreate();
  objc_msgSend(v69, sel_drawWithBox_inContext_withOptions_, 0, v52, 0);

  v53 = swift_allocObject();
  *(_QWORD *)(v53 + 16) = &v89;
  v54 = swift_allocObject();
  *(_QWORD *)(v54 + 16) = partial apply for closure #1 in PaperKitPDFPage.paperKitHash<A, B>(version:elements:in:);
  *(_QWORD *)(v54 + 24) = v53;
  aBlock[4] = partial apply for thunk for @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<Bool>) -> ();
  aBlock[5] = v54;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<Bool>) -> ();
  aBlock[3] = &block_descriptor_69;
  v55 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  CGDisplayListEnumerateEntriesWithOptions();
  _Block_release(v55);
  LOBYTE(v55) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((v55 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v56 = v89;
    v57 = *(_QWORD *)(v89 + 16);
    if (!(v57 >> 61))
    {
      v61[5] = v53;
      v58 = v89 + 32 + 4 * v57;
      swift_bridgeObjectRetain();
      specialized Data.init<A>(_:)(v56 + 32, v58);
      v60 = v59;
      swift_bridgeObjectRelease();
      __asm { BR              X10 }
    }
  }
  __break(1u);
  JUMPOUT(0x1DDEE5B0CLL);
}

uint64_t closure #2 in PaperKitPDFPage.encodePaperPage<A, B>(_:_:id:capsule:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(_BYTE *, _QWORD);
  uint64_t v37;
  char *v38;
  void (*v39)(_BYTE *, _QWORD);
  _QWORD v41[3];
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[32];

  v46 = a6;
  v44 = a5;
  v41[0] = a3;
  v41[1] = a1;
  v41[2] = a2;
  v48 = a7;
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  MEMORY[0x1E0C80A78](v47, v10);
  v45 = (char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  MEMORY[0x1E0C80A78](v12, v13);
  v43 = (char *)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)v41 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for Ref();
  v42 = *(_QWORD *)(v28 - 8);
  v30 = MEMORY[0x1E0C80A78](v28, v29);
  v32 = (char *)v41 - v31;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))(v27, a2, a4, v30);
  v33 = type metadata accessor for CRKeyPath();
  v34 = *(_QWORD *)(v33 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v22, a3, v33);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v22, 0, 1, v33);
  swift_retain();
  Ref.init<A>(_:_:identity:)();
  v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v18, 1, 1, v35);
  v36 = (void (*)(_BYTE *, _QWORD))Ref.subscript.modify();
  v37 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 56))(v18, a4, v44);
  v36(v49, 0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12350]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12358]);
  v38 = v43;
  CROrderedSet.init()();
  v39 = (void (*)(_BYTE *, _QWORD))Ref.subscript.modify();
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 80))(v38, a4, v37);
  v39(v49, 0);
  (*(void (**)(_QWORD, uint64_t))(v46 + 160))(v41[0], a4);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, MEMORY[0x1E0D12270]);
  CRRegister.init(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v32, v28);
}

uint64_t closure #1 in PaperKitPDFPage.paperKitHash<A, B>(version:elements:in:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int Type;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;

  Type = CGDisplayListEntryGetType();
  v5 = *a3;
  result = swift_isUniquelyReferenced_nonNull_native();
  *a3 = v5;
  if ((result & 1) == 0)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v5 + 16) + 1, 1, (char *)v5);
    v5 = result;
    *a3 = result;
  }
  v8 = *(_QWORD *)(v5 + 16);
  v7 = *(_QWORD *)(v5 + 24);
  if (v8 >= v7 >> 1)
  {
    result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1, (char *)v5);
    v5 = result;
  }
  *(_QWORD *)(v5 + 16) = v8 + 1;
  *(_DWORD *)(v5 + 4 * v8 + 32) = Type;
  *a3 = v5;
  return result;
}

uint64_t sub_1DDEE5FAC()
{
  return swift_deallocObject();
}

uint64_t sub_1DDEE5FBC()
{
  return swift_deallocObject();
}

uint64_t block_copy_helper_69(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_69()
{
  return swift_release();
}

uint64_t outlined destroy of AnnotationImporter.ImportedElement(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AnnotationImporter.ImportedElement();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of SharedTagged_9<TaggedCanvasElement>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #2 in PaperKitPDFPage.encodePaperPage<A, B>(_:_:id:capsule:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return closure #2 in PaperKitPDFPage.encodePaperPage<A, B>(_:_:id:capsule:)(a1, v2[8], v2[9], v2[2], v2[5], v2[6], a2);
}

void OpacitySliderView.Coordinator.didChange(_:)(void *a1)
{
  uint64_t v1;
  float v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  objc_msgSend(a1, sel_value);
  v4 = v3;
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtCV8PaperKit17OpacitySliderView11Coordinator__opacity);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtCV8PaperKit17OpacitySliderView11Coordinator__opacity + 8);
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtCV8PaperKit17OpacitySliderView11Coordinator__opacity + 16);
  v8 = *(_BYTE *)(v1 + OBJC_IVAR____TtCV8PaperKit17OpacitySliderView11Coordinator__opacity + 24);
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<CGFloat>>);
  MEMORY[0x1DF0E24B4](&v12);
  LOBYTE(v11) = v8;
  LOBYTE(v10) = 0;
  Binding.wrappedValue.setter();
  swift_release();
  swift_release();
  v9 = (void *)ShapeOpacitySliderView.thumbImage(multiSelect:)(0);
  objc_msgSend(a1, sel_setThumbImage_forState_, v9, 0, *(_QWORD *)&v4, v10, v5, v6, v7, v11);

}

id OpacitySliderView.Coordinator.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for OpacitySliderView.Coordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for OpacitySliderView.Coordinator()
{
  return objc_opt_self();
}

uint64_t initializeWithCopy for MiniObjectPropertiesButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MiniObjectPropertiesButton(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  return a1;
}

__n128 __swift_memcpy42_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for MiniObjectPropertiesButton(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  return a1;
}

uint64_t getEnumTagSinglePayload for MiniObjectPropertiesButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 42))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MiniObjectPropertiesButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 42) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 42) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MiniObjectPropertiesButton()
{
  return &type metadata for MiniObjectPropertiesButton;
}

uint64_t associated type witness table accessor for View.Body : View in MiniObjectPropertiesButton()
{
  return swift_getOpaqueTypeConformance2();
}

id OpacitySliderView.makeUIView(context:)(uint64_t a1, void *a2, uint64_t a3, unsigned int a4)
{
  _BOOL4 v5;
  id v6;
  id v7;
  uint64_t v8;
  double v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  double v15;

  v5 = (a4 >> 8) & 1;
  v6 = objc_allocWithZone((Class)type metadata accessor for ShapeOpacitySliderView());
  v7 = ShapeOpacitySliderView.init(axis:)(0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<CGFloat>>);
  MEMORY[0x1DF0E24B4](&v15, v8);
  HIDWORD(v9) = HIDWORD(v15);
  *(float *)&v9 = v15;
  objc_msgSend(v7, sel_setValue_, v9);
  v10 = (void *)objc_opt_self();
  v11 = v7;
  v12 = objc_msgSend(v10, sel_systemGray4Color);
  objc_msgSend(v11, sel_setTintColor_, v12);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIViewRepresentableContext<OpacitySliderView>);
  UIViewRepresentableContext.coordinator.getter();
  objc_msgSend(v11, sel_addTarget_action_forControlEvents_, a2, sel_didChange_, 4096);

  v13 = (void *)ShapeOpacitySliderView.thumbImage(multiSelect:)(v5);
  objc_msgSend(v11, sel_setThumbImage_forState_, v13, 0);

  return v11;
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance OpacitySliderView(uint64_t a1)
{
  uint64_t v1;
  int v2;

  if (*(_BYTE *)(v1 + 25))
    v2 = 256;
  else
    v2 = 0;
  return OpacitySliderView.makeUIView(context:)(a1, *(void **)v1, *(_QWORD *)(v1 + 8), v2 | *(unsigned __int8 *)(v1 + 24));
}

id protocol witness for UIViewRepresentable.makeCoordinator() in conformance OpacitySliderView@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  objc_class *v9;
  char *v10;
  char *v11;
  id result;
  objc_super v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v3 = v1[1];
  v4 = v1[2];
  v5 = *((_BYTE *)v1 + 24);
  v14 = *v1;
  v15 = v3;
  v16 = v4;
  v17 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<CGFloat>>);
  Binding.projectedValue.getter();
  v6 = v19;
  v7 = v20;
  v8 = v21;
  v9 = (objc_class *)type metadata accessor for OpacitySliderView.Coordinator();
  v10 = (char *)objc_allocWithZone(v9);
  v11 = &v10[OBJC_IVAR____TtCV8PaperKit17OpacitySliderView11Coordinator__opacity];
  *(_QWORD *)v11 = v18;
  *((_QWORD *)v11 + 1) = v6;
  *((_QWORD *)v11 + 2) = v7;
  v11[24] = v8;
  v13.receiver = v10;
  v13.super_class = v9;
  result = objc_msgSendSuper2(&v13, sel_init);
  *a1 = result;
  return result;
}

uint64_t protocol witness for UIViewRepresentable.sizeThatFits(_:uiView:context:) in conformance OpacitySliderView()
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance OpacitySliderView()
{
  lazy protocol witness table accessor for type OpacitySliderView and conformance OpacitySliderView();
  return static UIViewRepresentable._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance OpacitySliderView()
{
  lazy protocol witness table accessor for type OpacitySliderView and conformance OpacitySliderView();
  return static UIViewRepresentable._makeViewList(view:inputs:)();
}

void protocol witness for View.body.getter in conformance OpacitySliderView()
{
  lazy protocol witness table accessor for type OpacitySliderView and conformance OpacitySliderView();
  UIViewRepresentable.body.getter();
  __break(1u);
}

uint64_t MiniObjectPropertiesButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  _OWORD *v1;
  _OWORD *v2;
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for State<Bool>);
  State.projectedValue.getter();
  v4 = (_OWORD *)swift_allocObject();
  v5 = v2[1];
  v4[1] = *v2;
  v4[2] = v5;
  *(_OWORD *)((char *)v4 + 42) = *(_OWORD *)((char *)v2 + 26);
  outlined retain of MiniLineEndsButton((uint64_t)v2);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CGSize?);
  State.init(wrappedValue:)();
  type metadata accessor for MiniPopoverState();
  lazy protocol witness table accessor for type MiniPopoverState and conformance MiniPopoverState();
  v6 = EnvironmentObject.init()();
  v8 = v7;
  result = static VerticalAlignment.firstTextBaseline.getter();
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v12;
  *(_DWORD *)(a1 + 17) = v10;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)((char *)&v10 + 3);
  *(_QWORD *)(a1 + 24) = v13;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v11;
  *(_BYTE *)(a1 + 48) = v12;
  *(_DWORD *)(a1 + 49) = 0;
  *(_DWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = closure #1 in MiniObjectPropertiesButton.body.getter;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = partial apply for closure #2 in MiniObjectPropertiesButton.body.getter;
  *(_QWORD *)(a1 + 96) = v4;
  *(_QWORD *)(a1 + 104) = result;
  *(_QWORD *)(a1 + 112) = closure #1 in MiniDivider.body.getter;
  *(_QWORD *)(a1 + 120) = 0;
  return result;
}

uint64_t closure #1 in MiniObjectPropertiesButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[6];

  v13[0] = a1;
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Font.Design?);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = Image.init(systemName:)();
  v6 = objc_msgSend((id)objc_opt_self(), sel_labelColor, v13[0]);
  v7 = MEMORY[0x1DF0E22F8](v6);
  KeyPath = swift_getKeyPath();
  if (one-time initialization token for buttonFontSize != -1)
    swift_once();
  v9 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 1, 1, v9);
  v10 = static Font.system(size:weight:design:)();
  outlined destroy of Font.Design?((uint64_t)v4);
  v11 = swift_getKeyPath();
  v13[1] = v5;
  v13[2] = KeyPath;
  v13[3] = v7;
  v13[4] = v11;
  v13[5] = v10;
  LocalizedStringKey.init(stringLiteral:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
  View.accessibilityLabel(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in MiniObjectPropertiesButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  char v46;
  char v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char v57;

  v28 = a2;
  v3 = type metadata accessor for PresentationAdaptation();
  v26 = *(_QWORD *)(v3 - 8);
  v27 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = static HorizontalAlignment.center.getter();
  v29[0] = *(_OWORD *)(a1 + 16);
  *(_OWORD *)((char *)v29 + 9) = *(_OWORD *)(a1 + 25);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding<Inspected<CGFloat>>);
  Binding.projectedValue.getter();
  v23 = *((_QWORD *)&v48 + 1);
  v24 = v48;
  v7 = v49;
  v21 = *(unsigned __int8 *)(a1 + 41);
  v22 = BYTE8(v49);
  if (one-time initialization token for shortSliderLength != -1)
    swift_once();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  v8 = v38;
  v9 = v39;
  v10 = v40;
  v11 = v41;
  v12 = v42;
  v13 = v43;
  v14 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  v47 = 1;
  v46 = v9;
  v45 = v11;
  v44 = 0;
  v29[0] = (unint64_t)v25;
  LOBYTE(v29[1]) = 1;
  *((_QWORD *)&v29[1] + 1) = v24;
  *(_QWORD *)&v30 = v23;
  *((_QWORD *)&v30 + 1) = v7;
  LOBYTE(v31) = v22;
  BYTE1(v31) = v21;
  *((_QWORD *)&v31 + 1) = v8;
  LOBYTE(v32) = v9;
  *((_QWORD *)&v32 + 1) = v10;
  LOBYTE(v33) = v11;
  *((_QWORD *)&v33 + 1) = v12;
  *(_QWORD *)&v34 = v13;
  BYTE8(v34) = v14;
  *(_QWORD *)&v35 = v15;
  *((_QWORD *)&v35 + 1) = v16;
  *(_QWORD *)&v36 = v17;
  *((_QWORD *)&v36 + 1) = v18;
  v37 = 0;
  static PresentationAdaptation.popover.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ModifiedContent<VStack<ModifiedContent<OpacitySliderView, _FrameLayout>>, _PaddingLayout>);
  lazy protocol witness table accessor for type ModifiedContent<VStack<ModifiedContent<OpacitySliderView, _FrameLayout>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
  View.presentationCompactAdaptation(_:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v27);
  v54 = v34;
  v55 = v35;
  v56 = v36;
  v57 = v37;
  v50 = v30;
  v51 = v31;
  v52 = v32;
  v53 = v33;
  v48 = v29[0];
  v49 = v29[1];
  return outlined release of ModifiedContent<VStack<ModifiedContent<OpacitySliderView, _FrameLayout>>, _PaddingLayout>((uint64_t)&v48);
}

uint64_t protocol witness for View.body.getter in conformance MiniObjectPropertiesButton@<X0>(uint64_t a1@<X8>)
{
  return MiniObjectPropertiesButton.body.getter(a1);
}

uint64_t sub_1DDEE6DF4()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in MiniObjectPropertiesButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #2 in MiniObjectPropertiesButton.body.getter(v1 + 16, a1);
}

unint64_t lazy protocol witness table accessor for type MiniPopoverState and conformance MiniPopoverState()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MiniPopoverState and conformance MiniPopoverState;
  if (!lazy protocol witness table cache variable for type MiniPopoverState and conformance MiniPopoverState)
  {
    v1 = type metadata accessor for MiniPopoverState();
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for MiniPopoverState, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MiniPopoverState and conformance MiniPopoverState);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<ModifiedContent<OpacitySliderView, _FrameLayout>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<VStack<ModifiedContent<OpacitySliderView, _FrameLayout>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<ModifiedContent<OpacitySliderView, _FrameLayout>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<VStack<ModifiedContent<OpacitySliderView, _FrameLayout>>, _PaddingLayout>);
    v2[0] = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type VStack<ModifiedContent<OpacitySliderView, _FrameLayout>> and conformance VStack<A>, &demangling cache variable for type metadata for VStack<ModifiedContent<OpacitySliderView, _FrameLayout>>, MEMORY[0x1E0CDFCC0]);
    v2[1] = MEMORY[0x1E0CD9758];
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<ModifiedContent<OpacitySliderView, _FrameLayout>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined release of ModifiedContent<VStack<ModifiedContent<OpacitySliderView, _FrameLayout>>, _PaddingLayout>(uint64_t a1)
{
  swift_release();
  swift_release();
  return a1;
}

uint64_t initializeWithCopy for OpacitySliderView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OpacitySliderView(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  return a1;
}

__n128 __swift_memcpy26_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for OpacitySliderView(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  return a1;
}

uint64_t getEnumTagSinglePayload for OpacitySliderView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 26))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OpacitySliderView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 26) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OpacitySliderView()
{
  return &type metadata for OpacitySliderView;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, <<opaque return type of View.presentationCompactAdaptation(_:)>>.0>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = lazy protocol witness table cache variable for type ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, <<opaque return type of View.presentationCompactAdaptation(_:)>>.0>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, <<opaque return type of View.presentationCompactAdaptation(_:)>>.0>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, <<opaque return type of View.presentationCompactAdaptation(_:)>>.0>, _AlignmentWritingModifier>);
    v2[0] = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, <<opaque return type of View.presentationCompactAdaptation(_:)>>.0> and conformance MiniPopoverButton<A, B>, &demangling cache variable for type metadata for MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, <<opaque return type of View.presentationCompactAdaptation(_:)>>.0>, (uint64_t)&protocol conformance descriptor for MiniPopoverButton<A, B>);
    v2[1] = lazy protocol witness table accessor for type _AlignmentWritingModifier and conformance _AlignmentWritingModifier();
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<MiniPopoverButton<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Font?>>, AccessibilityAttachmentModifier>, <<opaque return type of View.presentationCompactAdaptation(_:)>>.0>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OpacitySliderView and conformance OpacitySliderView()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OpacitySliderView and conformance OpacitySliderView;
  if (!lazy protocol witness table cache variable for type OpacitySliderView and conformance OpacitySliderView)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for OpacitySliderView, &type metadata for OpacitySliderView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpacitySliderView and conformance OpacitySliderView);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OpacitySliderView and conformance OpacitySliderView;
  if (!lazy protocol witness table cache variable for type OpacitySliderView and conformance OpacitySliderView)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for OpacitySliderView, &type metadata for OpacitySliderView);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpacitySliderView and conformance OpacitySliderView);
  }
  return result;
}

id TextBoxTextView.init(textBoxView:frame:textContainer:)(_QWORD *a1, void *a2, double a3, double a4, double a5, double a6)
{
  char *v6;
  char *v13;
  id v14;
  uint64_t (*v15)(void);
  id v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  Class isa;
  id v34;
  id v35;
  uint64_t v36;
  id v37;
  Class v38;
  id v40;
  void *v41;
  objc_super v42;

  swift_unknownObjectWeakInit();
  v13 = &v6[OBJC_IVAR____TtC8PaperKit15TextBoxTextView_formAutofillDelegate];
  *(_OWORD *)v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  *((_QWORD *)v13 + 4) = 0;
  swift_unknownObjectWeakAssign();
  v42.receiver = v6;
  v42.super_class = (Class)type metadata accessor for TextBoxTextView();
  v14 = objc_msgSendSuper2(&v42, sel_initWithFrame_textContainer_, a2, a3, a4, a5, a6);
  v15 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x108);
  v16 = v14;
  if ((v15() & 1) != 0)
  {
    v17 = (void *)objc_opt_self();
    v41 = a2;
    v18 = (void *)MEMORY[0x1DF0E41AC](0x2E6E6F7276656863, 0xEA00000000007075);
    v19 = objc_msgSend(v17, sel___systemImageNamedSwift_, v18);

    v20 = objc_allocWithZone(MEMORY[0x1E0DC34F0]);
    v21 = v16;
    v22 = objc_msgSend(v20, sel_initWithImage_style_target_action_, v19, 0, v21, sel_handleBackTabWithSender_);

    v23 = (void *)MEMORY[0x1DF0E41AC](0x2E6E6F7276656863, 0xEC0000006E776F64);
    v24 = objc_msgSend(v17, sel___systemImageNamedSwift_, v23);

    v25 = objc_allocWithZone(MEMORY[0x1E0DC34F0]);
    v26 = v21;
    v27 = objc_msgSend(v25, sel_initWithImage_style_target_action_, v24, 0, v26, sel_handleTabWithSender_);

    v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC34F0]), sel_initWithBarButtonSystemItem_target_action_, 5, 0, 0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_1DDF354A0;
    *(_QWORD *)(v29 + 32) = v22;
    *(_QWORD *)(v29 + 40) = v27;
    *(_QWORD *)(v29 + 48) = v28;
    specialized Array._endMutation()();
    v30 = objc_allocWithZone(MEMORY[0x1E0DC3500]);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
    v40 = v22;
    v31 = v27;
    v32 = v28;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v34 = objc_msgSend(v30, sel_initWithBarButtonItems_representativeItem_, isa, 0);

    v35 = objc_msgSend(v26, sel_inputAssistantItem);
    v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_1DDF35440;
    *(_QWORD *)(v36 + 32) = v34;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBarButtonItemGroup);
    v37 = v34;
    v38 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v35, sel_setLeadingBarButtonGroups_, v38);

    a2 = v41;
  }

  return v16;
}

id TextBoxTextView.undoManager.getter()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  char v6;
  id v7;
  id v8;

  v1 = v0;
  v2 = objc_msgSend(v0, sel_nextResponder);
  if (!v2)
    goto LABEL_3;
  v3 = v2;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIResponder);
  v4 = v1;
  v5 = v3;
  v6 = static NSObject.== infix(_:_:)();

  v7 = 0;
  if ((v6 & 1) == 0)
  {
LABEL_3:
    v8 = objc_msgSend(v1, sel_nextResponder);
    v7 = objc_msgSend(v8, sel_undoManager);

  }
  return v7;
}

Swift::Void __swiftcall TextBoxTextView.insertText(_:)(Swift::String a1)
{
  char *v1;
  void *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  objc_super v10;

  v2 = (void *)MEMORY[0x1DF0E41AC](a1._countAndFlagsBits, a1._object);
  v10.receiver = v1;
  v10.super_class = (Class)type metadata accessor for TextBoxTextView();
  objc_msgSendSuper2(&v10, sel_insertText_, v2);

  v3 = &v1[OBJC_IVAR____TtC8PaperKit15TextBoxTextView_textBoxView];
  v4 = MEMORY[0x1DF0E666C](&v1[OBJC_IVAR____TtC8PaperKit15TextBoxTextView_textBoxView]);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics);
    swift_retain();

    *(_BYTE *)(v6 + 18) = 15;
    swift_release();
  }
  v7 = MEMORY[0x1DF0E666C](v3);
  if (v7)
  {
    v8 = (void *)v7;
    v9 = *(_QWORD *)(v7 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics);
    swift_retain();

    *(_BYTE *)(v9 + 64) = 1;
    swift_release();
  }
}

void TextBoxTextView.insert(_:)(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  void *v9;
  char v10;
  char v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  char *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  id v41;
  void *v42;
  char *v43;
  uint64_t v44;
  _QWORD v45[5];
  _BYTE v46[24];
  uint64_t v47;

  if (!a1)
    return;
  v2 = v1;
  objc_opt_self();
  v4 = swift_dynamicCastObjCClass();
  if (!v4)
    return;
  v5 = (void *)v4;
  v6 = (uint64_t)&v1[OBJC_IVAR____TtC8PaperKit15TextBoxTextView_formAutofillDelegate];
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v6, (uint64_t)v46, &demangling cache variable for type metadata for FormAutofillDelegate?);
  if (v47)
  {
    outlined init with copy of FindResult((uint64_t)v46, (uint64_t)v45);
    v7 = a1;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v46, &demangling cache variable for type metadata for FormAutofillDelegate?);
    __swift_project_boxed_opaque_existential_1(v45, v45[3]);
    v8 = objc_msgSend(v5, sel_contents);
    type metadata accessor for UITextContentType(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type UITextContentType and conformance UITextContentType, (uint64_t (*)(uint64_t))type metadata accessor for UITextContentType, (uint64_t)&protocol conformance descriptor for UITextContentType);
    v9 = (void *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    FormFillingView.populateTextFields(with:currentField:)(v9, (unint64_t)v2);
    v11 = v10;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
    if ((v11 & 1) == 0)
    {
      v12 = objc_msgSend(v5, sel_contents);
      v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      if (*(_QWORD *)(v13 + 16))
      {
        v14 = (id)*MEMORY[0x1E0DC5458];
        v15 = specialized __RawDictionaryStorage.find<A>(_:)(v14);
        if ((v16 & 1) != 0)
        {
          v17 = (uint64_t *)(*(_QWORD *)(v13 + 56) + 16 * v15);
          v18 = *v17;
          v19 = v17[1];

          swift_bridgeObjectRelease();
          v20 = HIBYTE(v19) & 0xF;
          if ((v19 & 0x2000000000000000) == 0)
            v20 = v18 & 0xFFFFFFFFFFFFLL;
          if (!v20)
            goto LABEL_19;
          v21 = objc_msgSend(v5, sel_contents);
          v22 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

          if (*(_QWORD *)(v22 + 16))
          {
            v23 = v14;
            v24 = specialized __RawDictionaryStorage.find<A>(_:)(v23);
            if ((v25 & 1) != 0)
            {
              v26 = (uint64_t *)(*(_QWORD *)(v22 + 56) + 16 * v24);
              v27 = *v26;
              v28 = v26[1];
              swift_bridgeObjectRetain();

              swift_bridgeObjectRelease();
              v29 = (void *)MEMORY[0x1DF0E41AC](v27, v28);
              swift_bridgeObjectRelease();
LABEL_18:
              objc_msgSend(v2, sel_setText_, v29);

              goto LABEL_19;
            }

          }
          swift_bridgeObjectRelease();
          v29 = 0;
          goto LABEL_18;
        }

      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v30 = a1;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v46, &demangling cache variable for type metadata for FormAutofillDelegate?);
  }
LABEL_19:
  v31 = &v2[OBJC_IVAR____TtC8PaperKit15TextBoxTextView_textBoxView];
  v32 = MEMORY[0x1DF0E666C](&v2[OBJC_IVAR____TtC8PaperKit15TextBoxTextView_textBoxView]);
  if (v32)
  {
    v33 = (void *)v32;
    v34 = *(_QWORD *)(v32 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics);
    swift_retain();

    *(_BYTE *)(v34 + 18) = 14;
    swift_release();
  }
  v35 = MEMORY[0x1DF0E666C](v31);
  if (v35)
  {
    v36 = (void *)v35;
    v37 = *(_QWORD *)(v35 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics);
    swift_retain();

    *(_BYTE *)(v37 + 19) = 1;
    swift_release();
  }
  v38 = MEMORY[0x1DF0E666C](v31);
  if (v38)
  {
    v39 = (void *)v38;
    v40 = *(_QWORD *)(v38 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics);
    swift_retain();

    v41 = objc_msgSend(v2, sel_textContentType);
    if (!v41)
    {
      __break(1u);
      return;
    }
    v42 = *(void **)(v40 + 32);
    *(_QWORD *)(v40 + 32) = v41;
    swift_release();

  }
  v43 = (char *)MEMORY[0x1DF0E666C](v31);

  if (v43)
  {
    v44 = *(_QWORD *)&v43[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics];
    swift_retain();

    *(_BYTE *)(v44 + 64) = 3;
    swift_release();
  }
}

Swift::Void __swiftcall TextBoxTextView.autoFillDidInsert(withExplicitInvocationMode:)(Swift::Bool withExplicitInvocationMode)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char v6;

  v3 = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit15TextBoxTextView_textBoxView);
  if (v3)
  {
    v4 = (void *)v3;
    v5 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics);
    swift_retain();

    if (withExplicitInvocationMode)
      v6 = 2;
    else
      v6 = 3;
    *(_BYTE *)(v5 + 64) = v6;
    swift_release();
  }
}

uint64_t TextBoxTextView.keyCommands.getter()
{
  char *v0;
  void *v1;
  _QWORD *v2;
  void *v3;
  char v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  void *v13;
  objc_super v15;

  v1 = v0;
  v2 = (_QWORD *)MEMORY[0x1DF0E666C](&v0[OBJC_IVAR____TtC8PaperKit15TextBoxTextView_textBoxView]);
  if (v2
    && (v3 = v2, v4 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x108))(), v3, (v4 & 1) != 0))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1DDF329E0;
    v6 = (void *)MEMORY[0x1DF0E41AC](9, 0xE100000000000000);
    v7 = (void *)objc_opt_self();
    v8 = objc_msgSend(v7, sel_keyCommandWithInput_modifierFlags_action_, v6, 0, sel_handleTabWithSender_);

    *(_QWORD *)(v5 + 32) = v8;
    v9 = (void *)MEMORY[0x1DF0E41AC](9, 0xE100000000000000);
    v10 = objc_msgSend(v7, sel_keyCommandWithInput_modifierFlags_action_, v9, 0x20000, sel_handleBackTabWithSender_);

    *(_QWORD *)(v5 + 40) = v10;
    specialized Array._endMutation()();
    return v5;
  }
  else
  {
    v15.receiver = v1;
    v15.super_class = (Class)type metadata accessor for TextBoxTextView();
    v12 = objc_msgSendSuper2(&v15, sel_keyCommands);
    if (v12)
    {
      v13 = v12;
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIKeyCommand);
      v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    }
    else
    {
      return 0;
    }
  }
  return v11;
}

void @objc TextBoxTextView.handleTab(sender:)(char *a1, uint64_t a2, void *a3, uint64_t a4)
{
  _QWORD *v7;
  void (*v8)(uint64_t);
  id v9;
  char *v10;
  id v11;

  v7 = (_QWORD *)MEMORY[0x1DF0E666C](&a1[OBJC_IVAR____TtC8PaperKit15TextBoxTextView_textBoxView]);
  if (v7)
  {
    v8 = *(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v7) + 0x158);
    v11 = v7;
    v9 = a3;
    v10 = a1;
    v8(a4);

  }
}

id TextBoxTextView.__deallocating_deinit()
{
  return ControlHandleView.__deallocating_deinit(type metadata accessor for TextBoxTextView);
}

uint64_t type metadata accessor for TextBoxTextView()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for TextBoxUndoSnapshot()
{
  uint64_t result;
  unint64_t v1;

  type metadata accessor for Capsule();
  result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t TextBoxUndoSnapshot.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 104);
  type metadata accessor for Capsule();
  v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TextBoxUndoSnapshot.__deallocating_deinit()
{
  TextBoxUndoSnapshot.deinit();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TextBoxUndoSnapshot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TextBoxUndoSnapshot);
}

uint64_t TextBoxUndoSnapshot.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  TextBoxUndoSnapshot.init()();
  return v0;
}

uint64_t TextBoxUndoSnapshot.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 104);
  v2 = type metadata accessor for Capsule();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 112)) = MEMORY[0x1E0DEE9D8];
  return v0;
}

id protocol witness for TextBoxViewDelegate.textBoxViewActiveTextBoxFrame(_:) in conformance AnyCanvasElementView(uint64_t a1)
{
  void *v1;

  return objc_msgSend(v1, sel_textBoxViewActiveTextBoxFrame_, a1);
}

id protocol witness for TextBoxViewDelegate.textBoxViewUpdateViewFrame(_:viewFrame:) in conformance AnyCanvasElementView(uint64_t a1)
{
  void *v1;

  return objc_msgSend(v1, sel_textBoxViewUpdateViewFrame_viewFrame_, a1);
}

id protocol witness for TextBoxViewDelegate.textBoxViewUpdateModelFrame(_:modelFrame:) in conformance AnyCanvasElementView(uint64_t a1)
{
  void *v1;

  return objc_msgSend(v1, sel_textBoxViewUpdateModelFrame_modelFrame_, a1);
}

void AnyTextBoxView.liveAttributedString.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTextBoxView.modificationRange.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTextBoxView.isElementFirstResponder.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTextBoxView.isCursorWeak.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyTextBoxView.selectionCoordinateSpace.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t AnyTextBoxView.isScribbling.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_isScribbling) = result;
  return result;
}

void AnyTextBoxView.string.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

double AnyTextBoxView.canvasElementViewFrameInModelSpace.getter()
{
  return 0.0;
}

id AnyTextBoxView.__deallocating_deinit()
{
  return ControlHandleView.__deallocating_deinit(type metadata accessor for AnyTextBoxView);
}

uint64_t type metadata accessor for AnyTextBoxView()
{
  return objc_opt_self();
}

uint64_t type metadata completion function for TextBoxView()
{
  return swift_initClassMetadata2();
}

void TextBoxView.canvasElement.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  id v4;

  v3 = MEMORY[0x1DF0E666C](v1 + direct field offset for TextBoxView.canvasElementView);
  if (v3)
  {
    v4 = (id)v3;
    CanvasElementView.canvasElement.getter(a1);

  }
  else
  {
    __break(1u);
  }
}

void TextBoxView.canvasElementView.getter()
{
  JUMPOUT(0x1DF0E666CLL);
}

uint64_t TextBoxView.delegate.getter()
{
  uint64_t v0;

  return MEMORY[0x1DF0E666C](v0 + direct field offset for TextBoxView.delegate);
}

uint64_t TextBoxView.currentUndoAction.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + direct field offset for TextBoxView.currentUndoAction) = a1;
  return swift_release();
}

void TextBoxView.isScribbling.willset(char a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_isScribbling) == 1 && (a1 & 1) == 0)
  {
    TextBoxView._updateFrames()();
    TextBoxView.updateFrameAfterScribbling()();
  }
}

uint64_t TextBoxView.isScribbling.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_isScribbling);
}

void TextBoxView.isScribbling.setter(char a1)
{
  uint64_t v1;

  TextBoxView.isScribbling.willset(a1);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_isScribbling) = a1;
}

uint64_t TextBoxView.isFormField.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v1 = *MEMORY[0x1E0DEEDD8] & *v0;
  v2 = *(_QWORD *)(v1 + 0x1C0);
  v3 = type metadata accessor for Capsule();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v9 - v6;
  TextBoxView.canvasElement.getter((uint64_t)&v9 - v6);
  LOBYTE(v2) = Capsule<>.isFormField.getter(v3, v2, *(_QWORD *)(*(_QWORD *)(v1 + 456) + 8));
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return v2 & 1;
}

_QWORD *key path getter for ShapeTextBox.textResizeBehavior : <A>A@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v5;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD))(*(_QWORD *)(a2 + a1 - 8) + 40))(&v5, *(_QWORD *)(a2 + a1 - 24));
  *a3 = v5;
  return result;
}

uint64_t key path setter for ShapeTextBox.textResizeBehavior : <A>A(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *(_QWORD *)(a4 + a3 - 24);
  v5 = *(_QWORD *)(a4 + a3 - 8);
  v7 = *a1;
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 48))(&v7, v4);
}

uint64_t TextBoxView.shouldAddTextboxView.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + direct field offset for TextBoxView.shouldAddTextboxView);
}

_QWORD *key path getter for ShapeTextBox.textContentType : <A>A@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  _QWORD *result;
  uint64_t v5;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD))(*(_QWORD *)(a2 + a1 - 8) + 88))(&v5, *(_QWORD *)(a2 + a1 - 24));
  *a3 = v5;
  return result;
}

uint64_t key path setter for ShapeTextBox.textContentType : <A>A(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v7;

  v4 = *(_QWORD *)(a4 + a3 - 24);
  v5 = *(_QWORD *)(a4 + a3 - 8);
  v7 = *a1;
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 96))(&v7, v4);
}

void @objc TextBoxView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  specialized TextBoxView.init(coder:)();
}

_QWORD *TextBoxView.canvas.getter()
{
  uint64_t v0;
  _QWORD *result;
  void *v2;
  uint64_t v3;

  result = (_QWORD *)MEMORY[0x1DF0E666C](v0 + direct field offset for TextBoxView.canvasElementView);
  if (result)
  {
    v2 = result;
    v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *result) + 0x88))();

    return (_QWORD *)v3;
  }
  return result;
}

uint64_t TextBoxView.liveAttributedString.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + direct field offset for TextBoxView.textStorage)
     + OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString;
  swift_beginAccess();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

Swift::Void __swiftcall TextBoxView.didMoveToWindow()()
{
  _QWORD *v0;
  objc_class *v1;
  objc_super v2;

  v1 = (objc_class *)type metadata accessor for TextBoxView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B8), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C0), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C8));
  v2.receiver = v0;
  v2.super_class = v1;
  objc_msgSendSuper2(&v2, sel_didMoveToWindow);
  TextBoxView.updateTextStorageDarkMode()();
}

void @objc TextBoxView.didMoveToWindow()(void *a1)
{
  id v1;

  v1 = a1;
  TextBoxView.didMoveToWindow()();

}

Swift::Bool __swiftcall TextBoxView.becomeFirstResponder()()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  id v3;
  Swift::Bool result;

  TextBoxView.addTextViewIfNeeded(shouldBecomeFirstResponder:)(1);
  v0 = TextBoxView.canvas.getter();
  if (!v0)
    return 1;
  v1 = v0;
  v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  v3 = v2;

  if (v2)
  {
    objc_msgSend(v3, sel_setNeedsLayout);

    return 1;
  }
  __break(1u);
  return result;
}

uint64_t @objc TextBoxView.becomeFirstResponder()(void *a1)
{
  id v1;

  v1 = a1;
  TextBoxView.becomeFirstResponder()();

  return 1;
}

Swift::Bool __swiftcall TextBoxView.resignFirstResponder()()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  unsigned __int8 v3;
  objc_class *v4;
  Swift::Bool v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  id v11;
  Swift::Bool result;
  objc_super v13;

  v1 = OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView;
  v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
  if (v2)
  {
    v3 = objc_msgSend(v2, sel_resignFirstResponder);
  }
  else
  {
    v4 = (objc_class *)type metadata accessor for TextBoxView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B8), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C0), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C8));
    v13.receiver = v0;
    v13.super_class = v4;
    v3 = objc_msgSendSuper2(&v13, sel_resignFirstResponder);
  }
  v5 = v3;
  TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:)(1);
  TextBoxView.unregisterForFirstResponderNotifications()();
  v6 = *(void **)((char *)v0 + v1);
  if (v6)
  {
    objc_msgSend(v6, sel_removeFromSuperview);
    v7 = *(void **)((char *)v0 + v1);
  }
  else
  {
    v7 = 0;
  }
  *(_QWORD *)((char *)v0 + v1) = 0;

  *((_BYTE *)v0 + direct field offset for TextBoxView.hideText) = 0;
  objc_msgSend(v0, sel_setNeedsDisplay);
  v8 = TextBoxView.canvas.getter();
  if (!v8)
    return v5;
  v9 = v8;
  v10 = *(void **)((char *)v8 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  v11 = v10;

  if (v10)
  {
    objc_msgSend(v11, sel_setNeedsLayout);

    return v5;
  }
  __break(1u);
  return result;
}

BOOL @objc TextBoxView.resignFirstResponder()(void *a1)
{
  id v1;
  Swift::Bool v2;

  v1 = a1;
  v2 = TextBoxView.resignFirstResponder()();

  return v2;
}

id TextBoxView.isElementFirstResponder.getter()
{
  uint64_t v0;
  id result;

  result = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
  if (result)
    return objc_msgSend(result, sel_isFirstResponder);
  return result;
}

void __swiftcall TextBoxView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  char *v3;
  char *v4;
  Class isa;
  CGFloat y;
  CGFloat x;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  void *v19;
  id v20;
  BOOL v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  id v25;
  Class v26;
  objc_class *v27;
  char v28;
  _QWORD *v29;
  void *v30;
  objc_class *v31;
  void *v32;
  id v33;
  _BYTE v34[15];
  uint64_t v35;
  CGPoint v36;
  CGRect v37;

  v4 = v3;
  isa = with.value.super.isa;
  y = _.y;
  x = _.x;
  v8 = type metadata accessor for PKInk();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = &v34[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKInk?);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = &v34[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  objc_msgSend(v3, sel_bounds, v15);
  v36.x = x;
  v36.y = y;
  if (CGRectContainsPoint(v37, v36))
  {
    v18 = OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView;
    v19 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
    if (v19)
    {
      v20 = v19;
      if ((objc_msgSend(v20, sel_isFirstResponder) & 1) != 0)
        return;

    }
    if (isa)
      v21 = -[objc_class type](isa, sel_type) == (id)11;
    else
      v21 = 0;
    v22 = TextBoxView.canvas.getter();
    if (v22
      && (v23 = v22,
          v24 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v22) + 0x320))(),
          v23,
          v24))
    {
      v25 = objc_msgSend(v24, "ink");

      static PKInk._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v17, v12, v8);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v17, 0, 1, v8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v17, 1, v8) == 1)
      {
        v26 = 0;
      }
      else
      {
        v26 = PKInk._bridgeToObjectiveC()().super.isa;
        (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v17, v8);
      }
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v17, 1, 1, v8);
      v26 = 0;
    }
    v27 = v26;
    v28 = -[objc_class _isHandwritingInk](v27, "_isHandwritingInk");

    if ((v28 & 1) != 0)
    {
      if (!isa)
        return;
    }
    else
    {
      v29 = TextBoxView.canvas.getter();
      v30 = v29;
      if (!v29)
        return;
      (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v29) + 0x2C8))(&v35);

      if (!isa || v35 != 1)
        return;
    }
    v31 = isa;
    if (-[objc_class PK_isEventFromPencil](v31, sel_PK_isEventFromPencil) && !v21)
    {
      TextBoxView.addTextViewIfNeeded(shouldBecomeFirstResponder:)(1);

      v32 = *(void **)&v4[v18];
      if (v32)
        v33 = v32;
    }
    else
    {

    }
  }
}

id @objc TextBoxView.hitTest(_:with:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  UIView_optional *v11;
  void *v12;
  void *v13;
  UIEvent_optional v15;

  v9 = a5;
  v10 = a1;
  v15.value.super.isa = (Class)a5;
  TextBoxView.hitTest(_:with:)(v11, (CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), v15);
  v13 = v12;

  return v13;
}

uint64_t TextBoxView.hideText.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + direct field offset for TextBoxView.hideText);
}

id TextBoxView.hideText.setter(char a1)
{
  _BYTE *v1;

  v1[direct field offset for TextBoxView.hideText] = a1;
  return objc_msgSend(v1, sel_setNeedsDisplay);
}

uint64_t TextBoxView.string.getter()
{
  uint64_t v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*(id *)(v0 + direct field offset for TextBoxView.textStorage), sel_string);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

Swift::Void __swiftcall TextBoxView.setString(_:)(Swift::String a1)
{
  char *v1;
  void *object;
  uint64_t countAndFlagsBits;
  void *v4;
  id v5;
  void *v6;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  TextBoxView.addTextViewIfNeeded(shouldBecomeFirstResponder:)(0);
  v4 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
  if (v4)
  {
    v5 = v4;
    v6 = (void *)MEMORY[0x1DF0E41AC](countAndFlagsBits, object);
    objc_msgSend(v5, sel_setText_, v6);

  }
  objc_msgSend(v1, sel_resignFirstResponder);
}

id TextBoxView.isCursorWeak.getter()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  void *v5;

  v1 = objc_msgSend(v0, sel_window);
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, sel_windowScene);

    if (v3)
    {
      v4 = objc_msgSend((id)objc_opt_self(), sel_interactionForScene_, v3);
      if (v4)
      {
        v5 = v4;
        v2 = objc_msgSend(v4, sel_isCursorWeak);

      }
      else
      {
        v2 = 0;
      }

    }
    else
    {
      return 0;
    }
  }
  return v2;
}

id TextBoxView.modificationRange.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
  if (v1)
  {
    v2 = v1;
    if (objc_msgSend(v2, sel_isFirstResponder)
      && (TextBoxView.isCursorWeak.getter() & 1) == 0)
    {
      v3 = objc_msgSend(v2, sel_selectedRange);

      return v3;
    }

  }
  TextBoxView.string.getter();
  String.UTF16View.count.getter();
  swift_bridgeObjectRelease();
  return 0;
}

Swift::Void __swiftcall TextBoxView.layoutSubviews()()
{
  char *v0;
  char *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  objc_class *v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  uint64_t (*v19)(char *, uint64_t);
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  double v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  objc_super v31;

  v1 = v0;
  v2 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v0);
  v4 = v2[55];
  v3 = v2[56];
  v5 = type metadata accessor for Capsule();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v29 - v12;
  v14 = v2[57];
  v15 = (objc_class *)type metadata accessor for TextBoxView(0, v4, v3, v14);
  v31.receiver = v1;
  v31.super_class = v15;
  objc_msgSendSuper2(&v31, sel_layoutSubviews);
  TextBoxView._updateFrames()();
  TextBoxView._updateScaleFactor()();
  v16 = TextBoxView.canvas.getter();
  if (v16)
  {
    v17 = v16;
    TextBoxView.canvasElement.getter((uint64_t)v13);
    v18 = Capsule<>.isFormField.getter(v5, v3, *(_QWORD *)(v14 + 8));
    v19 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
    v20 = v19(v13, v5);
    if ((v18 & 1) != 0
      && ((*(void (**)(double *__return_ptr, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v17) + 0x2C8))(&v30, v20),
          LOBYTE(v30) == 1)
      && !*(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView])
    {
      if (one-time initialization token for formFieldBackgroundColor != -1)
        swift_once();
      v21 = (id)static UIConstants.formFieldBackgroundColor;
    }
    else
    {
      v21 = objc_msgSend((id)objc_opt_self(), sel_clearColor);
    }
    v22 = v21;
    objc_msgSend(v1, sel_setBackgroundColor_, v21);

    v23 = objc_msgSend(v1, sel_layer);
    v24 = MEMORY[0x1DF0E666C](&v1[direct field offset for TextBoxView.canvasElementView]);
    if (v24)
    {
      v26 = (void *)v24;
      CanvasElementView.canvasElement.getter((uint64_t)v9);

      MEMORY[0x1E0C80A78](v27, v28);
      *(&v29 - 4) = v4;
      *(&v29 - 3) = v3;
      *(&v29 - 2) = v14;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      v19(v9, v5);
      HIDWORD(v25) = HIDWORD(v30);
      *(float *)&v25 = v30;
    }
    else
    {
      LODWORD(v25) = 1.0;
    }
    objc_msgSend(v23, sel_setOpacity_, v25);

  }
}

void @objc TextBoxView.layoutSubviews()(void *a1)
{
  id v1;

  v1 = a1;
  TextBoxView.layoutSubviews()();

}

void TextBoxView.updateTextStorageDarkMode()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  _BOOL4 v13;
  uint64_t v14;
  int v15;
  char *v16;
  void (*v17)(unsigned int (*)(_BYTE *, uint64_t, uint64_t), char *, uint64_t);
  void *v18;
  id v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  id v22;
  _BYTE *v23;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v23 - v9;
  v23 = *(id *)&v1[direct field offset for TextBoxView.textStorage];
  v11 = objc_msgSend(v1, sel_traitCollection);
  v12 = objc_msgSend(v11, sel_userInterfaceStyle);

  v13 = v12 == (id)2;
  v14 = OBJC_IVAR____TtC8PaperKit13CRTextStorage_darkMode;
  v15 = v23[OBJC_IVAR____TtC8PaperKit13CRTextStorage_darkMode];
  v23[OBJC_IVAR____TtC8PaperKit13CRTextStorage_darkMode] = v13;
  if (((v13 ^ v15) & 1) != 0)
  {
    v16 = &v23[OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString];
    swift_beginAccess();
    v17 = *(void (**)(unsigned int (*)(_BYTE *, uint64_t, uint64_t), char *, uint64_t))(v3 + 16);
    v17((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v10, v16, v2);
    v18 = *(void **)&v23[OBJC_IVAR____TtC8PaperKit13CRTextStorage_viewAttributedString];
    v17((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v6, v16, v2);
    v19 = v18;
    v20 = CRAttributedString.count.getter();
    v21 = *(void (**)(char *, uint64_t))(v3 + 8);
    v21(v6, v2);
    if (v20 < 0)
    {
      __break(1u);
    }
    else
    {
      specialized static CRTextStorage.setAttributes(from:into:range:darkMode:)((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v10, v19, 0, v20, v23[v14]);

      v21(v10, v2);
      v22 = objc_msgSend(v23, sel_length);
      objc_msgSend(v23, sel_edited_range_changeInLength_, 1, 0, v22, 0);

    }
  }
  else
  {

  }
}

Swift::Void __swiftcall TextBoxView.updateCanvasElement(shouldRegisterUndo:)(Swift::Bool shouldRegisterUndo)
{
  _QWORD *v1;
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  _QWORD *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  _QWORD *v29;

  v2 = v1;
  v27 = shouldRegisterUndo;
  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v1);
  v5 = v4[56];
  v26 = v4[55];
  v6 = type metadata accessor for Capsule();
  v28 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6, v7);
  v10 = (char *)&v25 - v9;
  v29 = v1;
  v11 = MEMORY[0x1DF0E666C]((char *)v1 + direct field offset for TextBoxView.canvasElementView, v8);
  if (v11)
  {
    v12 = (void *)v11;
    swift_beginAccess();
    Capsule.callAsFunction<A>(_:)();
    swift_endAccess();

    v13 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v1 + direct field offset for TextBoxView.canvasElementView);
    if (v13)
    {
      v14 = v13;
      if (((*(uint64_t (**)(void))((*v3 & *v13) + 0x1E0))() & 1) != 0 || (v15 = TextBoxView.canvas.getter()) == 0)
      {

      }
      else
      {
        v16 = v15;
        v17 = (void *)(*(uint64_t (**)(void))((*v3 & *v15) + 0x2F8))();
        v19 = v18;

        ObjectType = swift_getObjectType();
        TextBoxView.canvasElement.getter((uint64_t)v10);
        (*(void (**)(char *, _BOOL4, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 192))(v10, v27, v26, v5, *(_QWORD *)(v4[57] + 8), ObjectType, v19);

        (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v6);
      }
    }
    objc_msgSend(v2, sel_setNeedsLayout);
    v21 = TextBoxView.canvas.getter();
    if (!v21)
      goto LABEL_10;
    v22 = v21;
    v23 = *(void **)((char *)v21 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    v24 = v23;

    if (v23)
    {
      objc_msgSend(v24, sel_setNeedsLayout);

LABEL_10:
      objc_msgSend(v2, sel_setNeedsDisplay);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t closure #1 in TextBoxView.updateCanvasElement(shouldRegisterUndo:)(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, _QWORD);
  void (*v12)(_BYTE *, _QWORD);
  _BYTE v15[32];
  _BYTE v16[32];

  v3 = *a1;
  v4 = *MEMORY[0x1E0DEEDD8] & *a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = *(_QWORD *)((char *)a2 + direct field offset for TextBoxView.textStorage)
      + OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString;
  swift_beginAccess();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(v9, v10, v5);
  v11 = (uint64_t (*)(_BYTE *, _QWORD))Capsule.Ref<>.root.modify();
  v12 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, _QWORD))(*(_QWORD *)(v4 + 456) + 32))(v15, *(_QWORD *)(v3 + *MEMORY[0x1E0D12A70]));
  CRAttributedString.merge(_:)();
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
  v12(v15, 0);
  return v11(v16, 0);
}

Swift::Void __swiftcall TextBoxView.addTextViewIfNeeded(shouldBecomeFirstResponder:)(Swift::Bool shouldBecomeFirstResponder)
{
  _QWORD *v1;
  _BYTE *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  void (*v45)(char *, unint64_t, uint64_t);
  char *v46;
  char v47;
  _QWORD *v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  void *v57;
  id v58;
  _QWORD *v59;
  void *v60;
  void *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char v70;
  char *v71;
  char v72;
  _QWORD *v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  id v79;
  _QWORD *v80;
  void *v81;
  void *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  char *v87;
  id v88;
  void *v89;
  char *v90;
  id v91;
  uint64_t v92;
  void *v93;
  char *v94;
  id v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t);
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  id v113;
  char *v114;
  char *v115;
  char *v116;
  id v117;
  id v118;
  id v119;
  Class isa;
  void *v121;
  id v122;
  id v123;
  void *v124;
  id v125;
  id v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  id v131;
  Class v132;
  id v133;
  Class v134;
  void *v135;
  double v136;
  id v137;
  _QWORD *v138;
  char *v139;
  id v140;
  id v141;
  id v142;
  void *v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  _QWORD *v149;
  _BYTE *v150;
  uint64_t v151;
  id v152;
  char *v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  _QWORD *v162;
  uint64_t v163;
  char *v164;
  void (*v165)(uint64_t, uint64_t);
  char v166;
  __int128 v167;
  __int128 v168;
  _UNKNOWN **v169;

  v2 = v1;
  LODWORD(v165) = shouldBecomeFirstResponder;
  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v1);
  v5 = type metadata accessor for CRKeyPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v164 = (char *)&v145 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v145 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v145 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  v157 = *(_QWORD *)(v158 - 8);
  MEMORY[0x1E0C80A78](v158, v17);
  v156 = (char *)&v145 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = v4[56];
  *(_QWORD *)&v161 = v4[55];
  v20 = type metadata accessor for Capsule();
  v162 = *(_QWORD **)(v20 - 8);
  v163 = v20;
  MEMORY[0x1E0C80A78](v20, v21);
  v160 = (uint64_t)&v145 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v145 - v25;
  v29.n128_f64[0] = MEMORY[0x1E0C80A78](v27, v28);
  v159 = (uint64_t)&v145 - v30;
  v31 = &unk_1F0417000;
  if (*(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView]
    || (v151 = OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView,
        (v152 = (id)MEMORY[0x1DF0E666C](&v2[direct field offset for TextBoxView.canvasElementView], v29.n128_f64[0])) == 0))
  {
LABEL_2:
    if ((v165 & 1) != 0)
      goto LABEL_3;
    return;
  }
  if (v2[direct field offset for TextBoxView.shouldAddTextboxView] != 1)
  {

    goto LABEL_2;
  }
  v154 = v19;
  v155 = v12;
  objc_msgSend(v2, sel_bounds);
  v50 = v49;
  v52 = v51;
  v54 = v53;
  v56 = v55;
  v57 = *(void **)&v2[direct field offset for TextBoxView.textContainer];
  objc_allocWithZone((Class)type metadata accessor for TextBoxTextView());
  v58 = v57;
  v48 = v2;
  v148 = (char *)TextBoxTextView.init(textBoxView:frame:textContainer:)(v48, v57, v50, v52, v54, v56);
  objc_msgSend(v148, sel_setDelegate_, v48);
  v59 = TextBoxView.canvas.getter();
  v149 = v48;
  if (v59)
  {
    v60 = v59;
    v61 = (void *)(*(uint64_t (**)(void))((*v3 & *v59) + 0x2F8))();

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContainerCanvasElementView<PaperDocumentPage>);
    v62 = (_QWORD *)swift_dynamicCastClass();
    if (v62)
    {
      v63 = v5;
      v64 = v6;
      v65 = *(void **)((char *)v62 + *(_QWORD *)((*v3 & *v62) + 0x4D0));
      if (v65)
      {
        *((_QWORD *)&v168 + 1) = type metadata accessor for FormFillingView();
        v169 = &protocol witness table for FormFillingView;
        *(_QWORD *)&v167 = v65;
      }
      else
      {
        v169 = 0;
        v167 = 0u;
        v168 = 0u;
      }
      v78 = &v148[OBJC_IVAR____TtC8PaperKit15TextBoxTextView_formAutofillDelegate];
      swift_beginAccess();
      v79 = v65;
      outlined assign with take of FormAutofillDelegate?((uint64_t)&v167, (uint64_t)v78);
      swift_endAccess();

      v6 = v64;
      v5 = v63;
      v48 = v149;
    }
    else
    {

    }
  }
  v80 = TextBoxView.canvas.getter();
  if (v80)
  {
    v81 = v80;
    v82 = (void *)(*(uint64_t (**)(void))((*v3 & *v80) + 0x2F8))();

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContainerCanvasElementView<Image>);
    v83 = (_QWORD *)swift_dynamicCastClass();
    if (v83)
    {
      v84 = v5;
      v85 = v6;
      v86 = *(void **)((char *)v83 + *(_QWORD *)((*v3 & *v83) + 0x4D0));
      if (v86)
      {
        *((_QWORD *)&v168 + 1) = type metadata accessor for FormFillingView();
        v169 = &protocol witness table for FormFillingView;
        *(_QWORD *)&v167 = v86;
      }
      else
      {
        v169 = 0;
        v167 = 0u;
        v168 = 0u;
      }
      v87 = &v148[OBJC_IVAR____TtC8PaperKit15TextBoxTextView_formAutofillDelegate];
      swift_beginAccess();
      v88 = v86;
      outlined assign with take of FormAutofillDelegate?((uint64_t)&v167, (uint64_t)v87);
      swift_endAccess();

      v6 = v85;
      v5 = v84;
      v48 = v149;
    }
    else
    {

    }
  }
  v147 = v16;
  v153 = (char *)v5;
  v146 = v6;
  v150 = v2;
  v89 = (void *)objc_opt_self();
  v90 = v148;
  v91 = objc_msgSend(v89, sel_clearColor);
  objc_msgSend(v90, sel_setBackgroundColor_, v91);

  v92 = one-time initialization token for textBoxTextContainerInset;
  v68 = v90;
  if (v92 != -1)
    goto LABEL_59;
  while (1)
  {
    objc_msgSend(v68, sel_setTextContainerInset_, static UIConstants.textBoxTextContainerInset, *(double *)&qword_1EDB806D8, unk_1EDB806E0);

    objc_msgSend(v68, sel_setAllowsEditingTextAttributes_, 1);
    objc_msgSend(v68, sel_setScrollEnabled_, 0);
    v93 = *(void **)((char *)v48 + direct field offset for TextBoxView.textStorage);
    v94 = v68;
    v95 = objc_msgSend(v93, sel_string);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v96 = String.count.getter();
    swift_bridgeObjectRelease();
    objc_msgSend(v94, sel_setSelectedRange_, v96, 0);

    objc_msgSend(v94, sel_setClipsToBounds_, 0);
    v97 = v94;
    v98 = v159;
    TextBoxView.canvasElement.getter(v159);
    MEMORY[0x1E0C80A78](v99, v100);
    v101 = v161;
    v102 = v154;
    *(&v145 - 4) = v161;
    *(&v145 - 3) = v102;
    v103 = v4[57];
    *(&v145 - 2) = v103;
    swift_getKeyPath();
    v104 = v163;
    Capsule<>.subscript.getter();
    swift_release();
    v105 = (void (*)(uint64_t, uint64_t))v162[1];
    v105(v98, v104);
    v166 = v167;
    v106 = (id)specialized FormContentType.uiTextContentType.getter();
    objc_msgSend(v97, sel_setTextContentType_, v106);

    v148 = v97;
    v107 = CanvasElementView.canvasElement.getter((uint64_t)v26);
    MEMORY[0x1E0C80A78](v107, v108);
    *(&v145 - 4) = v101;
    *(&v145 - 3) = v102;
    *(&v145 - 2) = v103;
    swift_getKeyPath();
    v109 = (uint64_t)v147;
    Capsule<>.subscript.getter();
    swift_release();
    v105((uint64_t)v26, v104);
    v110 = v157;
    v111 = v158;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v157 + 48))(v109, 1, v158) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v109, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
      v2 = v150;
      v112 = v149;
      v113 = v148;
    }
    else
    {
      v114 = v156;
      (*(void (**)(char *, uint64_t, uint64_t))(v110 + 32))(v156, v109, v111);
      v115 = v148;
      v116 = v148;
      v117 = v149;
      v118 = objc_msgSend(v149, sel_traitCollection);
      v119 = objc_msgSend(v118, sel_userInterfaceStyle);

      CRAttributedString.Attributes<>.nsAttributes(darkMode:)(v119 == (id)2);
      type metadata accessor for NSAttributedStringKey(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v116, sel_setTypingAttributes_, isa);

      (*(void (**)(char *, uint64_t))(v110 + 8))(v114, v111);
      v2 = v150;
      v112 = v117;
      v113 = v115;
    }
    objc_msgSend(v112, sel_addSubview_, v113);
    *((_BYTE *)v112 + direct field offset for TextBoxView.hideText) = 1;
    objc_msgSend(v112, sel_setNeedsDisplay);
    v121 = *(void **)&v2[v151];
    *(_QWORD *)&v2[v151] = v113;
    v122 = v113;
    v158 = (uint64_t)v122;

    v123 = objc_msgSend(v122, sel_inputAssistantItem);
    v124 = (void *)MEMORY[0x1DF0E41AC](0x6D726F6674786574, 0xEA00000000007461);
    v125 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v124);

    *(_QWORD *)&v167 = v112;
    v126 = objc_allocWithZone(MEMORY[0x1E0DC34F0]);
    type metadata accessor for TextBoxView(0, v161, v154, v103);
    v127 = objc_msgSend(v126, sel_initWithImage_style_target_action_, v125, 0, _bridgeAnythingToObjectiveC<A>(_:)(), sel_textFormat_);
    swift_unknownObjectRelease();

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v128 = swift_allocObject();
    v161 = xmmword_1DDF35440;
    *(_OWORD *)(v128 + 16) = xmmword_1DDF35440;
    v129 = swift_allocObject();
    *(_OWORD *)(v129 + 16) = v161;
    *(_QWORD *)(v129 + 32) = v127;
    *(_QWORD *)&v167 = v129;
    specialized Array._endMutation()();
    v130 = objc_allocWithZone(MEMORY[0x1E0DC3500]);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
    v131 = v127;
    v132 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v133 = objc_msgSend(v130, sel_initWithBarButtonItems_representativeItem_, v132, 0);

    *(_QWORD *)(v128 + 32) = v133;
    *(_QWORD *)&v167 = v128;
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBarButtonItemGroup);
    v134 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v123, sel_setTrailingBarButtonGroups_, v134);

    v135 = (void *)v158;
    objc_msgSend(v112, sel_contentScaleFactor);
    specialized TextBoxView._applyScaleToView(scale:view:)(v135, v136);
    v5 = (uint64_t)v153;
    if ((v165 & 1) == 0)
    {

      v137 = v152;
      goto LABEL_55;
    }
    TextBoxView.registerForFirstResponderNotifications()();

    v31 = (_QWORD *)&unk_1F0417000;
    v6 = v146;
    v12 = v155;
    v19 = v154;
LABEL_3:
    v32 = MEMORY[0x1DF0E666C](&v2[direct field offset for TextBoxView.canvasElementView], v29);
    if (!v32)
      return;
    v33 = (_QWORD *)v32;
    v154 = v19;
    v34 = TextBoxView.canvas.getter();
    if (!v34)
      goto LABEL_45;
    v35 = v34;
    AnyCanvas.selectedCanvasElementIds.getter();
    v37 = v36;

    v38 = v160;
    CanvasElementView.canvasElement.getter(v160);
    v39 = v163;
    Capsule<>.rootID.getter();
    v40 = v39;
    v41 = v37;
    v165 = (void (*)(uint64_t, uint64_t))v162[1];
    v165(v38, v40);
    v42 = v12;
    v43 = *(_QWORD *)(v37 + 16);
    v155 = v42;
    if (!v43)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v155, v5);
LABEL_24:
      swift_bridgeObjectRelease();
      v73 = TextBoxView.canvas.getter();
      v31 = (_QWORD *)&unk_1F0417000;
      if (v73)
      {
        v74 = v73;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<CRKeyPath>);
        v75 = swift_allocObject();
        *(_OWORD *)(v75 + 16) = xmmword_1DDF32CF0;
        v76 = v159;
        CanvasElementView.canvasElement.getter(v159);
        v77 = v163;
        Capsule<>.rootID.getter();
        v165(v76, v77);
        AnyCanvas.selectedCanvasElementIds.setter(v75);

      }
      goto LABEL_45;
    }
    v162 = v33;
    v150 = v2;
    v44 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v45 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    v46 = v164;
    v45(v164, v37 + v44, v5);
    v26 = (char *)lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], MEMORY[0x1E0D12C90]);
    swift_bridgeObjectRetain();
    v47 = dispatch thunk of static Equatable.== infix(_:_:)();
    v48 = *(_QWORD **)(v6 + 8);
    ((void (*)(char *, uint64_t))v48)(v46, v5);
    if ((v47 & 1) != 0)
      break;
    if (v43 == 1)
    {
      swift_bridgeObjectRelease();
      v2 = v150;
LABEL_23:
      v33 = v162;
      ((void (*)(char *, uint64_t))v48)(v155, v5);
      goto LABEL_24;
    }
    v153 = (char *)v5;
    v146 = v6;
    v66 = *(_QWORD *)(v6 + 72);
    *(_QWORD *)&v161 = v41;
    v4 = (_QWORD *)(v41 + v66 + v44);
    v67 = 1;
    v68 = v153;
    while (1)
    {
      v45(v46, (unint64_t)v4, (uint64_t)v68);
      v69 = v67 + 1;
      if (__OFADD__(v67, 1))
        break;
      v70 = dispatch thunk of static Equatable.== infix(_:_:)();
      v71 = v46;
      v72 = v70;
      ((void (*)(char *, char *))v48)(v71, v68);
      if ((v72 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v2 = v150;
        v5 = (uint64_t)v153;
        goto LABEL_44;
      }
      ++v67;
      v4 = (_QWORD *)((char *)v4 + v66);
      v46 = v164;
      if (v69 == v43)
      {
        swift_bridgeObjectRelease();
        v2 = v150;
        v5 = (uint64_t)v153;
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_59:
    swift_once();
  }
  swift_bridgeObjectRelease();
  v2 = v150;
LABEL_44:
  ((void (*)(char *, uint64_t))v48)(v155, v5);
  swift_bridgeObjectRelease();
  v31 = &unk_1F0417000;
  v33 = v162;
LABEL_45:
  v138 = TextBoxView.canvas.getter();
  if (!v138)
    goto LABEL_56;
  v137 = v138;
  v139 = v2;
  v140 = objc_msgSend(v137, sel_window);
  if (v140)
  {
    v123 = v140;
    v141 = objc_msgSend((id)objc_opt_self(), sel_activeToolPickerForWindow_, v140);
    if (v141)
    {
      v131 = v141;
      v142 = objc_msgSend(v141, sel__visibilityUpdatesEnabled);
      objc_msgSend(v131, sel__setVisibilityUpdatesEnabled_, 0);
      v143 = *(void **)&v139[v31[51]];
      if (v143)
        objc_msgSend(v143, sel_becomeFirstResponder);
      objc_msgSend(v131, sel__setVisibilityUpdatesEnabled_, v142);

      v137 = v33;
      goto LABEL_55;
    }

  }
  v144 = *(void **)&v139[v31[51]];
  if (v144)
    objc_msgSend(v144, sel_becomeFirstResponder);
  v123 = v139;
  v131 = v33;
LABEL_55:

  v33 = v131;
LABEL_56:

}

uint64_t key path getter for ShapeTextBox.emptyStringAttributes : <A>A(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a3 + a2 - 8) + 112))(*(_QWORD *)(a3 + a2 - 24));
}

uint64_t key path setter for ShapeTextBox.emptyStringAttributes : <A>A(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v5 = *(_QWORD *)(a4 + a3 - 24);
  v6 = *(_QWORD *)(a4 + a3 - 8);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v10, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 120))(v10, v5, v6);
}

void TextBoxView.maxCanvasModelWidth.getter()
{
  _QWORD *v0;
  void *v1;
  _QWORD *v2;
  _QWORD *v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  CGRect v11;

  v0 = TextBoxView.canvas.getter();
  if (v0)
  {
    v1 = v0;
    v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v3 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2F8))();
    v4 = (*(double (**)(void))((*v2 & *v3) + 0x138))();
    v6 = v5;
    v8 = v7;
    v10 = v9;

    v11.origin.x = v4;
    v11.origin.y = v6;
    v11.size.width = v8;
    v11.size.height = v10;
    CGRectGetWidth(v11);

  }
}

double TextBoxView.canvasElementViewFrameInModelSpace.getter()
{
  uint64_t v0;
  char *v1;
  char *v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double v16;
  CGAffineTransform v18;
  CGAffineTransform v19;
  CGAffineTransform v20;
  CGRect v21;

  v1 = (char *)MEMORY[0x1DF0E666C](v0 + direct field offset for TextBoxView.canvasElementView);
  if (!v1)
    return 0.0;
  v2 = v1;
  objc_msgSend(v1, sel_frame);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = MEMORY[0x1DF0E666C](&v2[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement]);
  if (v11)
  {
    v12 = (void *)v11;
    AnyCanvasElementView.paperBoundsTransform()(&v20);

    v14 = *(_OWORD *)&v20.a;
    v13 = *(_OWORD *)&v20.c;
    v15 = *(_OWORD *)&v20.tx;
  }
  else
  {
    v13 = xmmword_1DDF33A30;
    v14 = xmmword_1DDF33970;
    v15 = 0uLL;
  }
  *(_OWORD *)&v19.a = v14;
  *(_OWORD *)&v19.c = v13;
  *(_OWORD *)&v19.tx = v15;
  CGAffineTransformInvert(&v18, &v19);
  v19 = v18;
  v21.origin.x = v4;
  v21.origin.y = v6;
  v21.size.width = v8;
  v21.size.height = v10;
  *(_QWORD *)&v16 = (unint64_t)CGRectApplyAffineTransform(v21, &v19);

  return v16;
}

void TextBoxView.selectionCoordinateSpace.getter(__int128 *a1@<X8>)
{
  _QWORD *v1;
  void *v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  id v24;
  id v25;
  double (*v26)(void);
  uint64_t v27;
  double v28;
  double v29;
  id v30;
  double v31;
  double Height;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double MinY;
  CGFloat v47;
  CGFloat v48;
  uint64_t inited;
  unint64_t v50;
  id v51;
  _QWORD *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  id v59;
  double v60;
  double v61;
  double v62;
  id v63;
  id v64;
  id v65;
  id v66;
  double Width;
  double v68;
  double v69;
  double v70;
  _BOOL4 v71;
  CGFloat v72;
  int v73;
  CGFloat v74;
  char v75;
  double v76;
  double v77;
  CGFloat v78;
  CGFloat v79;
  double v80;
  CGFloat v81;
  uint64_t v82;
  uint64_t v83;
  CGFloat v84;
  double MidX;
  double MidY;
  CGFloat v87;
  CGFloat tx;
  CGFloat ty;
  CGFloat a;
  CGFloat b;
  CGFloat d;
  CGFloat c;
  CGFloat v94;
  CGFloat v95;
  CGFloat v96;
  CGFloat v97;
  uint64_t v98;
  id v99;
  CGFloat v100;
  int v101;
  CGFloat v102;
  _QWORD *v103;
  __int128 v104;
  __int128 v105;
  CGFloat v106;
  __int128 v107;
  __int128 *v108;
  __int128 v109;
  __int128 v110;
  CGAffineTransform v111;
  CGAffineTransform t2;
  double v113;
  CGAffineTransform t1;
  unsigned __int8 v115;
  void *v116;
  CGRect v117;
  CGRect v118;
  CGRect v119;
  CGRect v120;
  CGRect v121;
  CGRect v122;
  CGRect v123;
  CGRect v124;
  CGRect v125;

  v2 = v1;
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v1);
  v6 = v5[56];
  *(_QWORD *)&v109 = v5[55];
  v7 = type metadata accessor for Capsule();
  *(_QWORD *)&v110 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v98 - v10;
  v12 = MEMORY[0x1DF0E666C]((char *)v1 + direct field offset for TextBoxView.canvasElementView, v9);
  if (!v12)
  {
    v16 = xmmword_1DDF33A30;
    v17 = xmmword_1DDF33970;
    v18 = 0uLL;
LABEL_49:
    *a1 = v17;
    a1[1] = v16;
    a1[2] = v18;
    return;
  }
  v13 = (_QWORD *)v12;
  v14 = *(void **)((char *)v1 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
  v108 = a1;
  if (v14)
  {
    v15 = v14;
  }
  else
  {
    objc_msgSend(v1, sel_bounds);
    v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3E50]), sel_initWithFrame_textContainer_, *(_QWORD *)((char *)v1 + direct field offset for TextBoxView.textContainer), v19, v20, v21, v22);
    v14 = 0;
  }
  v23 = one-time initialization token for textBoxTextContainerInset;
  v24 = v14;
  if (v23 != -1)
    swift_once();
  v25 = objc_msgSend(v15, sel_setTextContainerInset_, static UIConstants.textBoxTextContainerInset, *(double *)&qword_1EDB806D8, unk_1EDB806E0);
  v26 = *(double (**)(void))((*v4 & *v13) + 0x138);
  v27 = ((uint64_t (*)(id))v26)(v25);
  v29 = v28;
  if (((*(uint64_t (**)(uint64_t))((*v4 & *v13) + 0x110))(v27) & 1) == 0)
  {
    TextBoxView.maxCanvasModelWidth.getter();
    objc_msgSend(v15, sel_sizeThatFits_);
    v29 = v40;
    Height = v41;
    goto LABEL_17;
  }
  v30 = objc_msgSend(v15, sel_sizeThatFits_, v29, 1.79769313e308);
  Height = v31;
  if (((*(uint64_t (**)(id))((*v4 & *v13) + 0x120))(v30) & 1) == 0)
    goto LABEL_17;
  v117.origin.x = v26();
  if (Height < CGRectGetHeight(v117))
  {
LABEL_15:
    v118.origin.x = ((double (*)(uint64_t))v26)(v33);
    Height = CGRectGetHeight(v118);
    goto LABEL_17;
  }
  *(_QWORD *)&v107 = v15;
  v34 = objc_msgSend(v15, sel_text);
  if (v34)
  {
    v35 = v34;
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v38 = v37;

    v33 = swift_bridgeObjectRelease();
    v39 = HIBYTE(v38) & 0xF;
    if ((v38 & 0x2000000000000000) == 0)
      v39 = v36 & 0xFFFFFFFFFFFFLL;
    v15 = (id)v107;
    if (!v39)
      goto LABEL_15;
LABEL_17:
    v44 = CanvasElementView.modelFrame.getter();
    MinY = v45;
    v47 = v42;
    v48 = v43;
    if (vabdd_f64(v42, v29) < 0.1 && vabdd_f64(v43, Height) < 0.1)
    {
      v29 = v42;
      Height = v43;
LABEL_48:
      v106 = v29;
      *(double *)&v107 = Height;
      TextBoxView.canvasElement.getter((uint64_t)v11);
      MEMORY[0x1E0C80A78](v82, v83);
      *(&v98 - 4) = v109;
      *(&v98 - 3) = v6;
      *(&v98 - 2) = v5[57];
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v110 + 8))(v11, v7);
      v84 = v113;
      *(double *)&v110 = v44 - v29 * 0.0;
      *(double *)&v109 = MinY - Height * 0.0;
      v124.origin.x = v44;
      v124.origin.y = MinY;
      v124.size.width = v29;
      v124.size.height = Height;
      MidX = CGRectGetMidX(v124);
      v125.origin.x = v44;
      v125.origin.y = MinY;
      v125.size.width = v29;
      v125.size.height = Height;
      MidY = CGRectGetMidY(v125);
      CGAffineTransformMakeRotation(&t1, v84);
      v105 = *(_OWORD *)&t1.a;
      v104 = *(_OWORD *)&t1.c;
      v87 = -MidY;
      tx = t1.tx;
      ty = t1.ty;
      CGAffineTransformMakeTranslation(&t1, -MidX, v87);
      a = t1.a;
      b = t1.b;
      c = t1.c;
      d = t1.d;
      v94 = t1.tx;
      v95 = t1.ty;
      *(_OWORD *)&t2.a = v105;
      *(_OWORD *)&t2.c = v104;
      t2.tx = tx;
      t2.ty = ty;
      CGAffineTransformConcat(&v111, &t1, &t2);
      v105 = *(_OWORD *)&v111.a;
      v104 = *(_OWORD *)&v111.c;
      v96 = v111.tx;
      v97 = v111.ty;
      t1.a = a;
      t1.b = b;
      t1.c = c;
      t1.d = d;
      t1.tx = v94;
      t1.ty = v95;
      CGAffineTransformInvert(&t2, &t1);
      *(_OWORD *)&t1.a = v105;
      *(_OWORD *)&t1.c = v104;
      t1.tx = v96;
      t1.ty = v97;
      CGAffineTransformConcat(&v111, &t1, &t2);
      t1.a = v106;
      t1.c = 0.0;
      t1.b = 0.0;
      *(_QWORD *)&t1.d = v107;
      *(_QWORD *)&t1.tx = v110;
      *(_QWORD *)&t1.ty = v109;
      t2 = v111;
      CGAffineTransformConcat(&v111, &t1, &t2);
      v110 = *(_OWORD *)&v111.a;
      v109 = *(_OWORD *)&v111.c;
      v107 = *(_OWORD *)&v111.tx;

      v18 = v107;
      v17 = v110;
      v16 = v109;
      a1 = v108;
      goto LABEL_49;
    }
    *(_QWORD *)&v107 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1DDF35440;
    *(_QWORD *)(inited + 32) = v2;
    *(_QWORD *)&t1.a = inited;
    specialized Array._endMutation()();
    v50 = *(_QWORD *)&t1.a;
    v51 = v2;
    Array<A>.displayAttributes.getter(v50, (uint64_t *)&t1);
    swift_bridgeObjectRelease();
    v52 = v5;
    v53 = v7;
    v102 = t1.b;
    v106 = t1.tx;
    v100 = t1.ty;
    v101 = v115;
    v54 = v116;
    v55 = CanvasElementView.canvasElement.getter((uint64_t)v11);
    MEMORY[0x1E0C80A78](v55, v56);
    *(&v98 - 4) = v109;
    *(&v98 - 3) = v6;
    v103 = v52;
    *(&v98 - 2) = v52[57];
    swift_getKeyPath();
    *(_QWORD *)&v105 = v6;
    Capsule<>.subscript.getter();
    swift_release();
    v57 = *(void (**)(char *, uint64_t))(v110 + 8);
    *(_QWORD *)&v104 = v11;
    v58 = v53;
    v57(v11, v53);
    if (!*(_QWORD *)&t1.a)
    {
      v119.origin.x = v44;
      v119.origin.y = MinY;
      v119.size.width = v47;
      v119.size.height = v48;
      Width = CGRectGetWidth(v119);
      if (v29 >= Width)
        v29 = Width;
      v120.origin.x = v44;
      v120.origin.y = MinY;
      v120.size.width = v47;
      v120.size.height = v48;
      v68 = CGRectGetHeight(v120);
      if (Height >= v68)
        Height = v68;
      v121.origin.x = v44;
      v121.origin.y = MinY;
      v121.size.width = v47;
      v121.size.height = v48;
      v69 = CGRectGetMidX(v121);
      v122.origin.x = v44;
      v122.origin.y = MinY;
      v122.size.width = v47;
      v122.size.height = v48;
      v70 = CGRectGetMidY(v122);

      swift_bridgeObjectRelease();
      v44 = v69 - v29 * 0.5;
      MinY = v70 - Height * 0.5;
      v15 = (id)v107;
      v5 = v103;
      v7 = v58;
      v6 = v105;
      v11 = (char *)v104;
      goto LABEL_48;
    }
    v59 = v54;
    if (*((_BYTE *)v51 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_isScribbling) == 1)
    {
      v44 = TextBoxView.canvasElementViewFrameInModelSpace.getter();
      MinY = v60;
      v47 = v61;
      v48 = v62;
      v5 = v103;
      if (*((_BYTE *)v51 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_isScribbling) == 1)
      {
        v99 = v54;
        v63 = objc_msgSend(v51, sel_traitCollection);
        v64 = objc_msgSend(v63, sel_layoutDirection);

        v7 = v58;
        if (*((_BYTE *)v51 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_isScribbling) == 1)
        {
          v65 = objc_msgSend(v51, sel_traitCollection);
          v66 = objc_msgSend(v65, sel_layoutDirection);

          v71 = v66 == (id)1;
          if (v64)
          {
            v15 = (id)v107;
            v72 = v106;
            v11 = (char *)v104;
            v59 = v99;
            v6 = v105;
LABEL_34:
            v73 = v101;
            v74 = v100;
LABEL_35:
            if (v74 == 0.0)
              v75 = v73;
            else
              v75 = 1;
            if ((v75 & 1) != 0)
            {
              v76 = v44;
              v77 = MinY;
              v78 = v47;
              v79 = v48;
              if ((v71 | (*(_QWORD *)&v74 == 2) & ~v73) == 1)
              {
                v80 = CGRectGetWidth(*(CGRect *)&v76);

                swift_bridgeObjectRelease();
                v44 = v44 - (v29 - v80);
              }
              else
              {
                v81 = CGRectGetMidX(*(CGRect *)&v76) + v29 * -0.5;
                v123.origin.x = v44;
                v123.origin.y = MinY;
                v123.size.width = v47;
                v123.size.height = v48;
                MinY = CGRectGetMinY(v123);

                swift_bridgeObjectRelease();
                v44 = v81;
              }
            }
            else
            {

              swift_bridgeObjectRelease();
            }
            goto LABEL_48;
          }

          swift_bridgeObjectRelease();
          v15 = (id)v107;
        }
        else
        {
          v15 = (id)v107;
          v59 = v99;
          v73 = v101;
          v74 = v100;
          if (v64)
          {
            v71 = 0;
            v72 = v106;
            v11 = (char *)v104;
            v6 = v105;
            goto LABEL_35;
          }

          swift_bridgeObjectRelease();
        }
        v11 = (char *)v104;
        v6 = v105;
        goto LABEL_48;
      }
      v71 = 0;
      v15 = (id)v107;
      v72 = v106;
    }
    else
    {
      v71 = 0;
      v15 = (id)v107;
      v72 = v106;
      v5 = v103;
    }
    v7 = v58;
    v6 = v105;
    v11 = (char *)v104;
    goto LABEL_34;
  }
  __break(1u);
}

Swift::Void __swiftcall TextBoxView.setFixedWidth()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t (*v13)(void);
  void *v14;
  id v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  id v21;
  double v22;
  double v23;
  double v24;
  double v25;
  CGFloat v26;
  double MinY;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  CGFloat v31;
  double MidX;
  double MidY;
  CGFloat v34;
  CGFloat tx;
  CGFloat ty;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  CGAffineTransform *v45;
  __int128 v46;
  __int128 v47;
  char *v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  void *v52;
  __int128 v53;
  __int128 v54;
  CGFloat v55;
  CGFloat v56;
  CGFloat v57;
  CGFloat v58;
  id v59;
  CGAffineTransform v60;
  CGAffineTransform t2;
  CGAffineTransform t1;
  double v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;

  v1 = v0;
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v0);
  v5 = v3[55];
  v4 = v3[56];
  v6 = type metadata accessor for Capsule();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v53 - v10;
  v12 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v0 + direct field offset for TextBoxView.canvasElementView, v9);
  if (v12)
  {
    v13 = *(uint64_t (**)(void))((*v2 & *v12) + 0x110);
    v59 = v12;
    if ((v13() & 1) != 0)
    {

    }
    else
    {
      v14 = *(void **)((char *)v0 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
      if (v14)
      {
        v15 = *(id *)((char *)v0 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
      }
      else
      {
        objc_msgSend(v0, sel_bounds);
        v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3E50]), sel_initWithFrame_textContainer_, *(_QWORD *)((char *)v0 + direct field offset for TextBoxView.textContainer), v16, v17, v18, v19);
        v14 = 0;
      }
      v20 = one-time initialization token for textBoxTextContainerInset;
      v21 = v14;
      if (v20 != -1)
        swift_once();
      objc_msgSend(v15, sel_setTextContainerInset_, static UIConstants.textBoxTextContainerInset, *(double *)&qword_1EDB806D8, unk_1EDB806E0);
      TextBoxView.maxCanvasModelWidth.getter();
      objc_msgSend(v15, sel_sizeThatFits_);
      v23 = v22;
      v25 = v24;
      v64.origin.x = CanvasElementView.modelFrame.getter();
      v26 = CGRectGetMidX(v64) + v23 * -0.5;
      v65.origin.x = CanvasElementView.modelFrame.getter();
      MinY = CGRectGetMinY(v65);
      v28 = CanvasElementView.canvasElement.getter((uint64_t)v11);
      MEMORY[0x1E0C80A78](v28, v29);
      *((_QWORD *)&v53 - 4) = v5;
      *((_QWORD *)&v53 - 3) = v4;
      v30 = v3[57];
      *((_QWORD *)&v53 - 2) = v30;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
      v31 = v63;
      v58 = v26 - v23 * 0.0;
      v57 = MinY - v25 * 0.0;
      v66.origin.x = v26;
      v66.origin.y = MinY;
      v66.size.width = v23;
      v55 = v23;
      v66.size.height = v25;
      v56 = v25;
      MidX = CGRectGetMidX(v66);
      v67.origin.x = v26;
      v67.origin.y = MinY;
      v67.size.width = v23;
      v67.size.height = v25;
      MidY = CGRectGetMidY(v67);
      CGAffineTransformMakeRotation(&t1, v31);
      v54 = *(_OWORD *)&t1.a;
      v53 = *(_OWORD *)&t1.c;
      v34 = -MidY;
      tx = t1.tx;
      ty = t1.ty;
      CGAffineTransformMakeTranslation(&t1, -MidX, v34);
      a = t1.a;
      b = t1.b;
      c = t1.c;
      d = t1.d;
      v41 = t1.tx;
      v42 = t1.ty;
      *(_OWORD *)&t2.a = v54;
      *(_OWORD *)&t2.c = v53;
      t2.tx = tx;
      t2.ty = ty;
      CGAffineTransformConcat(&v60, &t1, &t2);
      v54 = *(_OWORD *)&v60.a;
      v53 = *(_OWORD *)&v60.c;
      v43 = v60.tx;
      v44 = v60.ty;
      t1.a = a;
      t1.b = b;
      t1.c = c;
      t1.d = d;
      t1.tx = v41;
      t1.ty = v42;
      CGAffineTransformInvert(&t2, &t1);
      *(_OWORD *)&t1.a = v54;
      *(_OWORD *)&t1.c = v53;
      t1.tx = v43;
      t1.ty = v44;
      CGAffineTransformConcat(&v60, &t1, &t2);
      t1.a = v55;
      t1.b = 0.0;
      t1.c = 0.0;
      t1.d = v56;
      t1.tx = v58;
      t1.ty = v57;
      t2 = v60;
      v45 = CGAffineTransformConcat(&v60, &t1, &t2);
      v46 = *(_OWORD *)&v60.c;
      v47 = *(_OWORD *)&v60.tx;
      v48 = (char *)v1 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_liveUneditedModelCoordinateSpace;
      *(_OWORD *)v48 = *(_OWORD *)&v60.a;
      *((_OWORD *)v48 + 1) = v46;
      *((_OWORD *)v48 + 2) = v47;
      v48[48] = 0;
      v50 = MEMORY[0x1E0C80A78](v45, v49);
      *((_QWORD *)&v53 - 2) = v4;
      *((_QWORD *)&v53 - 1) = v30;
      v51 = MEMORY[0x1DF0E666C]((char *)v1 + direct field offset for TextBoxView.canvasElementView, v50);
      if (v51)
      {
        v52 = (void *)v51;
        swift_beginAccess();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CanvasElementAutoresizeBehavior?);
        Capsule.callAsFunction<A>(_:)();
        swift_endAccess();

      }
      else
      {
        __break(1u);
      }
    }
  }
}

uint64_t closure #1 in TextBoxView.setFixedWidth()@<X0>(uint64_t a1@<X8>)
{
  unint64_t *v2;
  void (*v3)(char *, _QWORD);
  unint64_t v4;
  uint64_t v5;
  char v7[32];

  swift_getKeyPath();
  v3 = (void (*)(char *, _QWORD))Capsule.Ref<>.subscript.modify();
  v4 = *v2;
  if ((*v2 & 1) != 0)
  {
    *v2 = v4 & 0xFFFFFFFFFFFFFFFELL;
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = (v4 & 1) == 0;
  v3(v7, 0);
  return swift_release();
}

Swift::Void __swiftcall TextBoxView._updateFrames()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  CGFloat ty;
  CGFloat a;
  CGFloat b;
  CGFloat d;
  double c;
  uint64_t v9;
  void *v10;
  double v11;
  CGFloat v12;
  CGFloat v13;
  double v14;
  CGFloat tx;
  CGFloat v16;
  CGFloat v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  double MidX;
  double MidY;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  char *v48;
  uint64_t v49;
  uint64_t ObjectType;
  id v51;
  double v52;
  double v53;
  void *v54;
  id v55;
  double height;
  double width;
  double y;
  double x;
  double v60;
  CGFloat v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  CGFloat angle;
  CGFloat anglea[2];
  CGFloat angleb[2];
  CGFloat anglec[2];
  double v69;
  double v70;
  CGAffineTransform v71;
  CGAffineTransform t2;
  CGAffineTransform t1;
  __int128 v74[3];
  CGAffineTransform v75;
  CGRect v76;
  CGRect v77;
  CGRect v78;
  CGRect v79;
  CGRect v80;

  v1 = v0;
  v2 = MEMORY[0x1DF0E666C](&v0[direct field offset for TextBoxView.canvasElementView]);
  if (v2)
  {
    v3 = (char *)v2;
    TextBoxView.selectionCoordinateSpace.getter(v74);
    ty = 0.0;
    CGAffineTransform.decompose(initialRotation:)((uint64_t)&v75, 0.0);
    a = v75.a;
    b = v75.b;
    c = v75.c;
    d = v75.d;
    angle = v75.tx;
    v9 = MEMORY[0x1DF0E666C](&v3[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement]);
    if (v9)
    {
      v10 = (void *)v9;
      AnyCanvasElementView.paperBoundsTransform()(&v75);

      v11 = v75.a;
      v12 = v75.b;
      v13 = v75.c;
      v14 = v75.d;
      tx = v75.tx;
      ty = v75.ty;
    }
    else
    {
      v14 = 1.0;
      tx = 0.0;
      v13 = 0.0;
      v12 = 0.0;
      v11 = 1.0;
    }
    t1.a = v11;
    t1.b = v12;
    t1.c = v13;
    t1.d = v14;
    t1.tx = tx;
    t1.ty = ty;
    v69 = v11;
    v70 = v12;
    v76.origin.x = a;
    v60 = d;
    v61 = a;
    v16 = v11;
    v76.origin.y = b;
    v76.size.width = c;
    v76.size.height = d;
    v17 = v13;
    v77 = CGRectApplyAffineTransform(v76, &t1);
    y = v77.origin.y;
    x = v77.origin.x;
    height = v77.size.height;
    width = v77.size.width;
    t1.a = v16;
    t1.b = v12;
    t1.c = v17;
    t1.d = v14;
    t1.tx = tx;
    t1.ty = ty;
    v77.origin.x = v61;
    v77.origin.y = b;
    v77.size.width = c;
    v77.size.height = v60;
    v78 = CGRectApplyAffineTransform(v77, &t1);
    v18 = v78.origin.x;
    v19 = v78.origin.y;
    objc_msgSend(v3, sel_frame);
    v21 = v18 - v20;
    t1.a = 1.0;
    t1.b = 0.0;
    v23 = v19 - v22;
    t1.c = 0.0;
    t1.d = 1.0;
    t1.tx = 0.0;
    t1.ty = 0.0;
    objc_msgSend(v1, sel_setTransform_, &t1);
    objc_msgSend(v1, sel_setFrame_, v21, v23, fabs(c), fabs(v60));
    objc_msgSend(v1, sel_bounds);
    v24 = v79.origin.x;
    v25 = v79.origin.y;
    v26 = v79.size.width;
    v27 = v79.size.height;
    MidX = CGRectGetMidX(v79);
    v80.origin.x = v24;
    v80.origin.y = v25;
    v80.size.width = v26;
    v80.size.height = v27;
    MidY = CGRectGetMidY(v80);
    CGAffineTransformMakeRotation(&t1, angle);
    v62 = *(_OWORD *)&t1.c;
    *(_OWORD *)anglea = *(_OWORD *)&t1.a;
    v30 = -MidX;
    v31 = -MidY;
    v32 = t1.tx;
    v33 = t1.ty;
    CGAffineTransformMakeTranslation(&t1, v30, v31);
    v34 = t1.a;
    v35 = t1.b;
    v36 = t1.c;
    v37 = t1.d;
    v38 = t1.tx;
    v39 = t1.ty;
    *(_OWORD *)&t2.a = *(_OWORD *)anglea;
    *(_OWORD *)&t2.c = v62;
    t2.tx = v32;
    t2.ty = v33;
    CGAffineTransformConcat(&v71, &t1, &t2);
    v63 = *(_OWORD *)&v71.c;
    *(_OWORD *)angleb = *(_OWORD *)&v71.a;
    v40 = v71.tx;
    v41 = v71.ty;
    t1.a = v34;
    t1.b = v35;
    t1.c = v36;
    t1.d = v37;
    t1.tx = v38;
    t1.ty = v39;
    CGAffineTransformInvert(&t2, &t1);
    *(_OWORD *)&t1.a = *(_OWORD *)angleb;
    *(_OWORD *)&t1.c = v63;
    t1.tx = v40;
    t1.ty = v41;
    CGAffineTransformConcat(&v71, &t1, &t2);
    v64 = *(_OWORD *)&v71.c;
    *(_OWORD *)anglec = *(_OWORD *)&v71.a;
    v42 = v71.tx;
    v43 = v71.ty;
    v44 = sqrt(v70 * v70 + v69 * v69);
    CGAffineTransformMakeScale(&t1, v44, v44);
    v45 = *(_OWORD *)&t1.a;
    v46 = *(_OWORD *)&t1.c;
    v47 = *(_OWORD *)&t1.tx;
    *(_OWORD *)&t1.a = *(_OWORD *)anglec;
    *(_OWORD *)&t1.c = v64;
    t1.tx = v42;
    t1.ty = v43;
    *(_OWORD *)&t2.a = v45;
    *(_OWORD *)&t2.c = v46;
    *(_OWORD *)&t2.tx = v47;
    CGAffineTransformConcat(&v71, &t1, &t2);
    t1 = v71;
    objc_msgSend(v1, sel_setTransform_, &t1);
    v48 = &v1[direct field offset for TextBoxView.delegate];
    if (MEMORY[0x1DF0E666C](&v1[direct field offset for TextBoxView.delegate]))
    {
      v49 = *((_QWORD *)v48 + 1);
      ObjectType = swift_getObjectType();
      (*(void (**)(char *, uint64_t, uint64_t, double, double, double, double))(v49 + 16))(v1, ObjectType, v49, x, y, width, height);
      swift_unknownObjectRelease();
    }
    v51 = *(id *)&v1[direct field offset for TextBoxView.textContainer];
    objc_msgSend(v1, sel_bounds);
    objc_msgSend(v51, sel_setSize_, v52, v53);

    v54 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
    if (v54)
    {
      v55 = v54;
      objc_msgSend(v1, sel_bounds);
      objc_msgSend(v55, sel_setFrame_);

    }
  }
}

Swift::Void __swiftcall TextBoxView._updateScaleFactor()()
{
  void *v0;
  void *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  double v10;
  id v11;
  double v12;
  double v13;
  _QWORD v14[7];
  double v15;
  double v16;
  char v17;

  v1 = v0;
  v2 = TextBoxView.canvas.getter();
  if (v2)
  {
    v3 = v2;
    v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v5 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x308))();
    v6 = 1.0;
    v7 = 1.0;
    if (v5)
    {
      v8 = v5;
      objc_msgSend(v5, sel_zoomScale);
      v7 = v9;

    }
    (*(void (**)(_QWORD *__return_ptr))((*v4 & *v3) + 0x5B8))(v14);
    outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v14, (uint64_t)&v15, (uint64_t *)&demangling cache variable for type metadata for CGAffineTransform?);
    if ((v17 & 1) == 0)
      v6 = sqrt(v15 * v15 + v16 * v16);
    v10 = v7 * v6;
    v11 = objc_msgSend((id)objc_opt_self(), sel_mainScreen);
    objc_msgSend(v11, sel_scale);
    v13 = v12;

    specialized TextBoxView._applyScaleToView(scale:view:)(v1, v10 * v13);
  }
}

void @objc TextBoxView.textViewDidBeginEditing(_:)()
{
  specialized TextBoxView.textViewDidBeginEditing(_:)();
}

Swift::Void __swiftcall TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:)(Swift::Bool closeUndoGroup)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL4 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  void (*v44)(_QWORD, _QWORD, _QWORD);
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t *v60;
  unint64_t v61;
  char isUniquelyReferenced_nonNull_native;
  BOOL v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  void (*v76)(uint64_t, char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  _BOOL4 v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;

  v2 = v1;
  v3 = closeUndoGroup;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CapsuleUndoAction();
  v87 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v86 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v75 - v13;
  v15 = type metadata accessor for Capsule();
  v16 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v16, v17);
  MEMORY[0x1E0C80A78](v18, v19);
  MEMORY[0x1E0C80A78]((char *)&v75 - v20, v21);
  v23 = (char *)&v75 - v22;
  MEMORY[0x1E0C80A78](v24, *(_QWORD *)(v15 - 8));
  v26 = (char *)&v75 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v35 = (char *)&v75 - v34;
  v36 = *(_QWORD *)(v2 + direct field offset for TextBoxView.currentUndoAction);
  if (v36)
  {
    v80 = v33;
    v81 = v14;
    v85 = v8;
    v83 = v29;
    v84 = v3;
    v37 = *(_QWORD *)(*(_QWORD *)v36 + 104);
    v88 = v30;
    v38 = v36 + v37;
    v39 = v31;
    v40 = v32;
    swift_beginAccess();
    v41 = *(void (**)(_QWORD, _QWORD, _QWORD))(v40 + 16);
    v82 = v38;
    v42 = v38;
    v43 = v88;
    v41(v23, v42, v39);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v23, 1, v15) == 1)
    {
      (*(void (**)(char *, uint64_t))(v40 + 8))(v23, v39);
      return;
    }
    v77 = v40;
    v78 = v39;
    v44 = *(void (**)(_QWORD, _QWORD, _QWORD))(v43 + 32);
    v45 = v43;
    v46 = v35;
    v76 = v44;
    v44(v35, v23, v15);
    v47 = (*(uint64_t (**)(char *, char *, uint64_t))(v45 + 16))(v26, v35, v15);
    MEMORY[0x1E0C80A78](v47, v48);
    v79 = v49;
    *(&v75 - 2) = (void (*)(_QWORD, _QWORD, _QWORD))v49;
    swift_retain();
    Capsule.callAsFunction<A>(_:)();
    Capsule.actionUndoingDifference(from:)();
    v50 = v87;
    v51 = v85;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v7, 1, v85) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
      v52 = v79;
      v53 = v83;
      if (!v84)
      {
LABEL_6:
        v54 = v88;
        (*(void (**)(char *, uint64_t))(v88 + 8))(v46, v15);
        v76(v53, v26, v15);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v54 + 56))(v53, 0, 1, v15);
        v56 = v77;
        v55 = v78;
        v57 = v80;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 32))(v80, v53, v78);
        v58 = v82;
        swift_beginAccess();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 40))(v58, v57, v55);
        swift_endAccess();
        swift_release();
        return;
      }
    }
    else
    {
      v59 = v81;
      v75 = *(void (**)(_QWORD, _QWORD, _QWORD))(v50 + 32);
      v75(v81, v7, v51);
      (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v86, v59, v51);
      v60 = (unint64_t *)(v36 + *(_QWORD *)(*(_QWORD *)v36 + 112));
      swift_beginAccess();
      v61 = *v60;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v60 = v61;
      v63 = v84;
      v53 = v83;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v61 + 16) + 1, 1, v61);
        *v60 = v61;
      }
      v52 = v79;
      v65 = *(_QWORD *)(v61 + 16);
      v64 = *(_QWORD *)(v61 + 24);
      v66 = v65 + 1;
      if (v65 >= v64 >> 1)
      {
        v79 = (char *)(v65 + 1);
        v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v64 > 1, v65 + 1, 1, v61);
        v66 = (unint64_t)v79;
        v61 = v74;
        *v60 = v74;
      }
      *(_QWORD *)(v61 + 16) = v66;
      v67 = v87;
      v68 = v61
          + ((*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80))
          + *(_QWORD *)(v87 + 72) * v65;
      v69 = v85;
      v75(v68, v86, v85);
      swift_endAccess();
      (*(void (**)(char *, uint64_t))(v67 + 8))(v81, v69);
      if (!v63)
        goto LABEL_6;
    }
    v70 = v52;
    v71 = v88;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v88 + 56))(v53, 1, 1, v15);
    v72 = v82;
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 40))(v72, v53, v78);
    swift_endAccess();
    *(_QWORD *)&v70[direct field offset for TextBoxView.currentUndoAction] = 0;
    swift_release();
    swift_release();
    v73 = *(void (**)(_QWORD, _QWORD))(v71 + 8);
    v73(v26, v15);
    v73(v46, v15);
  }
}

uint64_t closure #1 in TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:)(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, _QWORD);
  _BYTE v14[32];

  v3 = *a1;
  v4 = *MEMORY[0x1E0DEEDD8] & *a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = *(_QWORD *)((char *)a2 + direct field offset for TextBoxView.textStorage)
      + OBJC_IVAR____TtC8PaperKit13CRTextStorage_mergeableString;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v10, v5);
  v11 = (uint64_t (*)(_BYTE *, _QWORD))Capsule.Ref<>.root.modify();
  (*(void (**)(char *, _QWORD))(*(_QWORD *)(v4 + 456) + 24))(v9, *(_QWORD *)(v3 + *MEMORY[0x1E0D12A70]));
  return v11(v14, 0);
}

Swift::Void __swiftcall TextBoxView.breakUndoCoalescing()()
{
  TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:)(1);
}

Swift::Void __swiftcall TextBoxView.breakUndoCoalescing(_:)(NSNotification a1)
{
  void *v1;
  int v2;
  void *v3;
  id v4;
  void *v5;
  __int128 v6;
  _OWORD v7[2];

  if (-[objc_class object](a1.super.isa, sel_object))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v6, v7);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  v2 = swift_dynamicCast();
  v3 = (void *)v6;
  v4 = objc_msgSend(v1, sel_undoManager);
  v5 = v4;
  if (!v2 || !v3)
  {
    if (v4)
    {

      return;
    }
    goto LABEL_11;
  }
  swift_unknownObjectRelease();
  if (v5)
  {

    if (v3 == v5)
LABEL_11:
      TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:)(1);
  }
}

void @objc TextBoxView.breakUndoCoalescing(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  TextBoxView.breakUndoCoalescing(_:)((NSNotification)v4);

}

Swift::Void __swiftcall TextBoxView.beginUndoGroupIfNecessary()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  void (*v23)(uint64_t (*)(_QWORD *), uint64_t);
  uint64_t v24;

  v1 = v0;
  v2 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v0);
  v3 = v2[55];
  v4 = v2[56];
  v5 = type metadata accessor for Capsule();
  v6 = type metadata accessor for Optional();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v24 - v13;
  if (!*(_QWORD *)((char *)v0 + direct field offset for TextBoxView.currentUndoAction))
  {
    v15 = TextBoxView.canvas.getter();
    v16 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    if (v15)
    {
      v17 = v2[57];
      v18 = v15;
      type metadata accessor for TextBoxUndoSnapshot(0, v3, v4, v17);
      v19 = swift_allocObject();
      v20 = v16;
      TextBoxUndoSnapshot.init()();
      TextBoxView.canvasElement.getter((uint64_t)v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v14, 0, 1, v5);
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v14, v6);
      v21 = v19 + *(_QWORD *)(*(_QWORD *)v19 + 104);
      swift_beginAccess();
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(v21, v10, v6);
      swift_endAccess();
      v22 = v18;
      v23 = *(void (**)(uint64_t (*)(_QWORD *), uint64_t))((*v20 & *v18) + 0x460);
      swift_retain();
      v23(partial apply for closure #1 in TextBoxView.beginUndoGroupIfNecessary(), v19);
      swift_release();
      *(_QWORD *)((char *)v1 + direct field offset for TextBoxView.currentUndoAction) = v19;

      swift_release();
    }
  }
}

uint64_t closure #1 in TextBoxView.beginUndoGroupIfNecessary()(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for CapsuleUndoAction();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t *)(a2 + *(_QWORD *)(*(_QWORD *)a2 + 112));
  result = swift_beginAccess();
  v11 = *v9;
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v13 = *(void (**)(char *, _QWORD, _QWORD, _QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x450);
    v14 = v11 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    result = swift_bridgeObjectRetain();
    while (v12 <= *(_QWORD *)(v11 + 16))
    {
      --v12;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v14 + *(_QWORD *)(v5 + 72) * v12, v4);
      v13(v8, 0, 0, 0, 0);
      result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      if (!v12)
        return swift_bridgeObjectRelease();
    }
    __break(1u);
  }
  return result;
}

void TextBoxView.styleController.getter()
{
  JUMPOUT(0x1DF0E666CLL);
}

Swift::Void __swiftcall TextBoxView.textFormat(_:)(UIBarButtonItem_optional a1)
{
  _QWORD *v1;
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t inited;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  void *v78;
  id v79;
  id v80;
  void *v81;
  id v82;
  _QWORD *v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  id v100;
  uint64_t v101;
  Class isa;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  __int128 v110;
  __int128 v111;
  void *v112;

  v2 = v1;
  isa = a1.value.super.super.isa;
  v3 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v1);
  v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Inspected<NSTextAlignment>>.Publisher);
  v98 = *(_QWORD *)(v97 - 8);
  MEMORY[0x1E0C80A78](v97, v4);
  v95 = (char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Inspected<Color>>.Publisher);
  v93 = *(_QWORD *)(v92 - 8);
  MEMORY[0x1E0C80A78](v92, v6);
  v91 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Inspected<Bool>>.Publisher);
  v103 = *(_QWORD *)(v108 - 8);
  MEMORY[0x1E0C80A78](v108, v8);
  v88 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Inspected<Int>>.Publisher);
  v104 = *(_QWORD *)(v90 - 8);
  MEMORY[0x1E0C80A78](v90, v10);
  v89 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Inspected<String>>.Publisher);
  v109 = *(char **)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextStyleSelector<TextStyleSelectorModel>);
  MEMORY[0x1E0C80A78](v16, v17);
  v96 = (uint64_t)&v86 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v94 = (uint64_t)&v86 - v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v86 - v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF35440;
  *(_QWORD *)(inited + 32) = v1;
  *(_QWORD *)&v110 = inited;
  specialized Array._endMutation()();
  v27 = v110;
  v28 = v2;
  Array<A>.displayAttributes.getter(v27, (uint64_t *)&v110);
  swift_bridgeObjectRelease();
  v29 = *((_QWORD *)&v110 + 1);
  v30 = v112;
  v100 = (id)v111;
  v99 = v30;
  v101 = v29;
  swift_bridgeObjectRetain();
  TextStyleSelector.init<>(attributes:fontTapHandler:colorTapHandler:)(&v110, 0, 0, 0, 0, (uint64_t)v25);
  *(_QWORD *)&v25[*(int *)(v16 + 48) + 8] = &protocol witness table for TextBoxView<A>;
  swift_unknownObjectWeakAssign();
  swift_beginAccess();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Inspected<String>>);
  Published.projectedValue.getter();
  swift_endAccess();
  swift_release();
  v31 = swift_allocObject();
  v32 = v28;
  swift_unknownObjectWeakInit();
  v33 = (_QWORD *)swift_allocObject();
  v34 = v3[55];
  v33[2] = v34;
  v35 = v3[56];
  v33[3] = v35;
  v36 = v3[57];
  v33[4] = v36;
  v33[5] = v31;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Published<Inspected<String>>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Inspected<String>>.Publisher, MEMORY[0x1E0C96190]);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*((void (**)(char *, uint64_t))v109 + 1))(v15, v12);
  v37 = &v32[direct field offset for TextBoxView.cancellables];
  v106 = v32;
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  v105 = v25;
  swift_beginAccess();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Inspected<Int>>);
  v38 = v89;
  Published.projectedValue.getter();
  swift_endAccess();
  swift_release();
  v39 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v40 = (_QWORD *)swift_allocObject();
  v40[2] = v34;
  v40[3] = v35;
  v87 = v35;
  v41 = v36;
  v40[4] = v36;
  v40[5] = v39;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Published<Inspected<Int>>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Inspected<Int>>.Publisher, MEMORY[0x1E0C96190]);
  v42 = v90;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v104 + 8))(v38, v42);
  v43 = v37;
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  swift_retain();
  v104 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Inspected<Bool>>);
  v44 = v88;
  Published.projectedValue.getter();
  swift_endAccess();
  swift_release();
  v45 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v46 = (_QWORD *)swift_allocObject();
  v46[2] = v34;
  v46[3] = v35;
  v107 = v34;
  v46[4] = v41;
  v46[5] = v45;
  v86 = v41;
  v47 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Published<Inspected<Bool>>.Publisher and conformance Published<A>.Publisher, (uint64_t *)&demangling cache variable for type metadata for Published<Inspected<Bool>>.Publisher, MEMORY[0x1E0C96190]);
  v48 = v108;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  v103 = *(_QWORD *)(v103 + 8);
  ((void (*)(char *, uint64_t))v103)(v44, v48);
  v109 = v43;
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  swift_retain();
  Published.projectedValue.getter();
  swift_endAccess();
  swift_release();
  v49 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v50 = (_QWORD *)swift_allocObject();
  v51 = v87;
  v50[2] = v34;
  v50[3] = v51;
  v50[4] = v41;
  v50[5] = v49;
  v90 = v47;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  v52 = v48;
  v53 = (void (*)(char *, uint64_t))v103;
  ((void (*)(char *, uint64_t))v103)(v44, v52);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  swift_retain();
  Published.projectedValue.getter();
  swift_endAccess();
  swift_release();
  v54 = swift_allocObject();
  v55 = v106;
  swift_unknownObjectWeakInit();
  v56 = (_QWORD *)swift_allocObject();
  v58 = v107;
  v57 = v108;
  v56[2] = v107;
  v56[3] = v51;
  v59 = v51;
  v60 = v86;
  v56[4] = v86;
  v56[5] = v54;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  v61 = v57;
  v53(v44, v57);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  v62 = (uint64_t)v105;
  swift_beginAccess();
  swift_retain();
  Published.projectedValue.getter();
  swift_endAccess();
  swift_release();
  v63 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v64 = (_QWORD *)swift_allocObject();
  v64[2] = v58;
  v64[3] = v59;
  v65 = v59;
  v64[4] = v60;
  v64[5] = v63;
  v66 = v60;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  ((void (*)(char *, uint64_t))v103)(v44, v61);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Inspected<Color>>);
  v67 = v91;
  Published.projectedValue.getter();
  swift_endAccess();
  swift_release();
  v68 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v69 = (_QWORD *)swift_allocObject();
  v69[2] = v58;
  v69[3] = v65;
  v70 = v65;
  v69[4] = v66;
  v69[5] = v68;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Published<Inspected<Color>>.Publisher and conformance Published<A>.Publisher, (uint64_t *)&demangling cache variable for type metadata for Published<Inspected<Color>>.Publisher, MEMORY[0x1E0C96190]);
  v71 = v92;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v93 + 8))(v67, v71);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Inspected<NSTextAlignment>>);
  v72 = v95;
  Published.projectedValue.getter();
  swift_endAccess();
  swift_release();
  v73 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v74 = (_QWORD *)swift_allocObject();
  v74[2] = v107;
  v74[3] = v70;
  v74[4] = v66;
  v74[5] = v73;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Published<Inspected<NSTextAlignment>>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Inspected<NSTextAlignment>>.Publisher, MEMORY[0x1E0C96190]);
  v75 = v97;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v98 + 8))(v72, v75);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  v76 = v94;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v62, v94, &demangling cache variable for type metadata for TextStyleSelector<TextStyleSelectorModel>);
  v77 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SecureHostingController<TextStyleSelector<TextStyleSelectorModel>>));
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v76, v96, &demangling cache variable for type metadata for TextStyleSelector<TextStyleSelectorModel>);
  v78 = (void *)UIHostingController.init(rootView:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v76, &demangling cache variable for type metadata for TextStyleSelector<TextStyleSelectorModel>);
  objc_msgSend(v78, sel_setModalPresentationStyle_, 7);
  v79 = objc_msgSend(v78, sel_popoverPresentationController);
  objc_msgSend(v79, sel_setBarButtonItem_, isa);

  v80 = objc_msgSend(v78, sel_popoverPresentationController);
  if (v80)
  {
    v81 = v80;
    objc_msgSend(v80, sel_setDelegate_, v55);

  }
  v82 = v78;
  dispatch thunk of UIHostingController.sizeThatFits(in:)();
  objc_msgSend(v82, sel_setPreferredContentSize_);

  v83 = TextBoxView.canvas.getter();
  if (v83)
  {
    v84 = v83;
    v85 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v83) + 0x608))();

    if (v85)
    {
      objc_msgSend(v85, sel_presentViewController_animated_completion_, v82, 1, 0);

    }
  }
  swift_unknownObjectWeakAssign();

  swift_bridgeObjectRelease();
  outlined destroy of StocksKitCurrencyCache.Provider?(v62, &demangling cache variable for type metadata for TextStyleSelector<TextStyleSelectorModel>);
}

void closure #1 in TextBoxView.textFormat(_:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;

  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    v3 = *(_QWORD *)a1;
    v2 = *(void **)(a1 + 8);
    v4 = a2 + 16;
    swift_beginAccess();
    v5 = MEMORY[0x1DF0E666C](v4);
    if (v5)
    {
      v6 = (void *)v5;
      swift_bridgeObjectRetain();
      v7._countAndFlagsBits = v3;
      v7._object = v2;
      TextBoxView.setFont(_:)(v7);
      swift_bridgeObjectRelease();

    }
  }
}

void closure #3 in TextBoxView.textFormat(_:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  if ((a1[1] & 1) == 0)
  {
    v7 = *a1;
    v8 = a2 + 16;
    swift_beginAccess();
    v9 = MEMORY[0x1DF0E666C](v8);
    if (v9)
    {
      v10 = (void *)v9;
      a6(v7);

    }
  }
}

void closure #7 in TextBoxView.textFormat(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  if ((a1[1] & 1) == 0)
  {
    v2 = *a1;
    v3 = a2 + 16;
    swift_beginAccess();
    v4 = MEMORY[0x1DF0E666C](v3);
    if (v4)
    {
      v5 = (void *)v4;
      v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v2);
      TextBoxView.setColor(_:)((UIColor)v6);

    }
  }
}

void closure #2 in TextBoxView.textFormat(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  if ((a1[1] & 1) == 0)
  {
    v7 = *a1;
    v8 = a2 + 16;
    swift_beginAccess();
    v9 = MEMORY[0x1DF0E666C](v8);
    if (v9)
    {
      v10 = (void *)v9;
      a6(v7);

    }
  }
}

void @objc TextBoxView.textFormat(_:)(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  UIBarButtonItem_optional v8;

  v5 = a3;
  v6 = a1;
  v8.is_nil = (char)v6;
  v7 = v6;
  v8.value.super.super.isa = (Class)a3;
  TextBoxView.textFormat(_:)(v8);

}

Swift::Void __swiftcall TextBoxView.textStyleSelectorDidTapFontButton()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[6];

  v1 = *v0;
  v2 = *MEMORY[0x1E0DEEDD8];
  v3 = MEMORY[0x1DF0E666C]((char *)v0 + direct field offset for TextBoxView.styleController);
  if (v3)
  {
    v4 = (void *)v3;
    v5 = v2 & v1;
    v6 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = *(_OWORD *)(v5 + 440);
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(v5 + 456);
    *(_QWORD *)(v7 + 40) = v6;
    v9[4] = partial apply for closure #1 in TextBoxView.textStyleSelectorDidTapFontButton();
    v9[5] = v7;
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 1107296256;
    v9[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v9[3] = &block_descriptor_40_0;
    v8 = _Block_copy(v9);
    swift_release();
    objc_msgSend(v4, sel_dismissViewControllerAnimated_completion_, 1, v8);
    _Block_release(v8);

  }
}

void closure #1 in TextBoxView.textStyleSelectorDidTapFontButton()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  _QWORD *v6;
  void *v7;
  void *v8;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1DF0E666C](v1);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
    if (v4)
      objc_msgSend(v4, sel_resignFirstResponder);
    v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3800]), sel_init);
    objc_msgSend(v5, sel_setDelegate_, v3);
    v6 = TextBoxView.canvas.getter();
    if (v6)
    {
      v7 = v6;
      v8 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v6) + 0x608))();

      if (v8)
      {
        objc_msgSend(v8, sel_presentViewController_animated_completion_, v5, 1, 0);

      }
    }

  }
}

Swift::Void __swiftcall TextBoxView.fontPickerViewControllerDidPickFont(_:)(UIFontPickerViewController *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  UIFontDescriptor *v5;
  UIFontDescriptor *v6;
  NSDictionary *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  char v11;
  Swift::String v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v2 = v1;
  -[UIFontPickerViewController dismissViewControllerAnimated:completion:](a1, sel_dismissViewControllerAnimated_completion_, 1, 0);
  v4 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
  if (v4)
    objc_msgSend(v4, sel_becomeFirstResponder);
  v5 = -[UIFontPickerViewController selectedFontDescriptor](a1, sel_selectedFontDescriptor);
  if (!v5)
  {
    __break(1u);
    goto LABEL_9;
  }
  v6 = v5;
  v7 = -[UIFontDescriptor fontAttributes](v5, sel_fontAttributes);

  type metadata accessor for UIFontDescriptorAttributeName(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName, (uint64_t (*)(uint64_t))type metadata accessor for UIFontDescriptorAttributeName, (uint64_t)&protocol conformance descriptor for UIFontDescriptorAttributeName);
  v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_9:
    v13 = 0u;
    v14 = 0u;
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  v9 = (id)*MEMORY[0x1E0DC1378];
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
  if ((v11 & 1) == 0)
  {
    v13 = 0u;
    v14 = 0u;

    goto LABEL_11;
  }
  outlined init with copy of Any(*(_QWORD *)(v8 + 56) + 32 * v10, (uint64_t)&v13);

  swift_bridgeObjectRelease();
  if (*((_QWORD *)&v14 + 1))
  {
    outlined init with take of Any(&v13, &v15);
    swift_dynamicCast();
    TextBoxView.setFont(_:)(v12);
    swift_bridgeObjectRelease();
    return;
  }
LABEL_12:
  __break(1u);
}

void @objc TextBoxView.fontPickerViewControllerDidPickFont(_:)(void *a1, uint64_t a2, void *a3)
{
  UIFontPickerViewController *v4;
  id v5;

  v4 = a3;
  v5 = a1;
  TextBoxView.fontPickerViewControllerDidPickFont(_:)(v4);

}

Swift::Void __swiftcall TextBoxView.fontPickerViewControllerDidCancel(_:)(UIFontPickerViewController *a1)
{
  uint64_t v1;
  void *v2;

  -[UIFontPickerViewController dismissViewControllerAnimated:completion:](a1, sel_dismissViewControllerAnimated_completion_, 1, 0);
  v2 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
  if (v2)
    objc_msgSend(v2, sel_becomeFirstResponder);
}

void @objc TextBoxView.fontPickerViewControllerDidCancel(_:)(void *a1, uint64_t a2, void *a3)
{
  UIFontPickerViewController *v4;
  id v5;

  v4 = a3;
  v5 = a1;
  TextBoxView.fontPickerViewControllerDidCancel(_:)(v4);

}

Swift::Void __swiftcall TextBoxView.setColor(_:)(UIColor a1)
{
  TextBoxView.setColor(_:)((uint64_t)a1.super.isa, (uint64_t)&unk_1DDF47CA8, (uint64_t (*)(void))lazy protocol witness table accessor for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute, (void (*)(char *))partial apply for closure #1 in TextBoxView.setColor(_:));
}

void closure #1 in TextBoxView.setColor(_:)(void *a1@<X1>, _QWORD *a2@<X8>)
{
  id v3;
  CGColor *v4;

  v3 = a1;
  Color.init(cgColor:)((CGColor *)objc_msgSend(v3, sel_CGColor), &v4);

  if (v4)
    *a2 = v4;
  else
    __break(1u);
}

Swift::Void __swiftcall TextBoxView.setFontSize(_:)(Swift::Int a1)
{
  TextBoxView.setColor(_:)(a1, (uint64_t)&unk_1DDF47C68, (uint64_t (*)(void))lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute, (void (*)(char *))partial apply for closure #1 in TextBoxView.setFontSize(_:));
}

Swift::Void __swiftcall TextBoxView.setFont(_:)(Swift::String a1)
{
  void *object;
  uint64_t countAndFlagsBits;
  id v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *KeyPath;
  unint64_t v7;
  _QWORD v8[4];

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v3 = TextBoxView.modificationRange.getter();
  v5 = v4;
  v8[2] = countAndFlagsBits;
  v8[3] = object;
  KeyPath = (_QWORD *)swift_getKeyPath();
  v7 = lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
  TextBoxView.updateAttributes<A>(in:newValue:keypath:)((uint64_t)v3, v5, (void (*)(char *))partial apply for closure #1 in TextBoxView.setFont(_:), (uint64_t)v8, KeyPath, v7);
  swift_release();
}

uint64_t TextBoxView.setTextAlignment(_:)(uint64_t a1)
{
  return TextBoxView.setColor(_:)(a1, (uint64_t)&unk_1DDF47C88, (uint64_t (*)(void))lazy protocol witness table accessor for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute, (void (*)(char *))partial apply for closure #1 in TextBoxView.setTextAlignment(_:));
}

uint64_t TextBoxView.setColor(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), void (*a4)(char *))
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *KeyPath;
  uint64_t v11;
  _QWORD v13[4];

  v7 = TextBoxView.modificationRange.getter();
  v9 = v8;
  v13[2] = a1;
  KeyPath = (_QWORD *)swift_getKeyPath();
  v11 = a3();
  TextBoxView.updateAttributes<A>(in:newValue:keypath:)((uint64_t)v7, v9, a4, (uint64_t)v13, KeyPath, v11);
  return swift_release();
}

Swift::Void __swiftcall TextBoxView.setBold(_:)(Swift::Bool a1)
{
  TextBoxView.setBold(_:)(a1, (uint64_t)&unk_1DDF47C68, (uint64_t (*)(void))lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute, (void (*)(char *))partial apply for closure #1 in TextBoxView.setBold(_:));
}

Swift::Void __swiftcall TextBoxView.setItalic(_:)(Swift::Bool a1)
{
  TextBoxView.setBold(_:)(a1, (uint64_t)&unk_1DDF47C68, (uint64_t (*)(void))lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute, (void (*)(char *))partial apply for closure #1 in TextBoxView.setItalic(_:));
}

Swift::Float closure #1 in TextBoxView.setBold(_:)@<S0>(char a1@<W1>, void (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  Swift::Float result;
  Swift::Int rawValue;
  Swift::String_optional familyName;
  uint64_t v9;
  void *v10;
  Swift::String_optional v11;
  Swift::Float v12;
  Swift::Int v13;
  PaperKit::Font v14;

  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  if (v10 == (void *)1)
  {
    if (one-time initialization token for textBoxDefaultFont != -1)
      swift_once();
    Font.init(_:)(&v14, (UIFont)(id)static UIConstants.textBoxDefaultFont);
  }
  else
  {
    v14._name.value._countAndFlagsBits = v9;
    v14._name.value._object = v10;
    v14._familyName = v11;
    v14.pointSize = v12;
    v14.traits.rawValue = v13;
  }
  a2(a1 & 1);
  result = v14.pointSize;
  rawValue = v14.traits.rawValue;
  familyName = v14._familyName;
  *(Swift::String_optional *)a3 = v14._name;
  *(Swift::String_optional *)(a3 + 16) = familyName;
  *(Swift::Float *)(a3 + 32) = result;
  *(_QWORD *)(a3 + 40) = rawValue;
  return result;
}

Swift::Void __swiftcall TextBoxView.setUnderline(_:)(Swift::Bool a1)
{
  TextBoxView.setBold(_:)(a1, (uint64_t)&unk_1DDF47C48, (uint64_t (*)(void))lazy protocol witness table accessor for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute, (void (*)(char *))partial apply for closure #1 in TextBoxView.setUnderline(_:));
}

Swift::Void __swiftcall TextBoxView.setStrikethrough(_:)(Swift::Bool a1)
{
  TextBoxView.setBold(_:)(a1, (uint64_t)&unk_1DDF47C28, (uint64_t (*)(void))lazy protocol witness table accessor for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute, (void (*)(char *))partial apply for closure #1 in TextBoxView.setStrikethrough(_:));
}

uint64_t TextBoxView.setBold(_:)(char a1, uint64_t a2, uint64_t (*a3)(void), void (*a4)(char *))
{
  id v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *KeyPath;
  uint64_t v11;
  _BYTE v13[32];

  v7 = TextBoxView.modificationRange.getter();
  v9 = v8;
  v13[16] = a1;
  KeyPath = (_QWORD *)swift_getKeyPath();
  v11 = a3();
  TextBoxView.updateAttributes<A>(in:newValue:keypath:)((uint64_t)v7, v9, a4, (uint64_t)v13, KeyPath, v11);
  return swift_release();
}

Swift::Void __swiftcall TextBoxView.traitCollectionDidChange(_:)(UITraitCollection_optional a1)
{
  _QWORD *v1;
  Class isa;
  objc_class *v3;
  objc_super v4;

  isa = a1.value.super.isa;
  v3 = (objc_class *)type metadata accessor for TextBoxView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x1B8), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x1C0), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x1C8));
  v4.receiver = v1;
  v4.super_class = v3;
  objc_msgSendSuper2(&v4, sel_traitCollectionDidChange_, isa);
  TextBoxView.updateTextStorageDarkMode()();
  objc_msgSend(v1, sel_setNeedsLayout);
  objc_msgSend(v1, sel_setNeedsDisplay);
}

void @objc TextBoxView.traitCollectionDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  UITraitCollection_optional v8;

  v5 = a3;
  v6 = a1;
  v8.is_nil = (char)v6;
  v7 = v6;
  v8.value.super.isa = (Class)a3;
  TextBoxView.traitCollectionDidChange(_:)(v8);

}

void TextBoxView.updateAttributes<A>(in:newValue:keypath:)(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4, _QWORD *a5, uint64_t a6)
{
  char *v6;
  char *v7;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  id v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  char v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  Class isa;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *);

  v7 = v6;
  v40 = a4;
  v41 = a3;
  v12 = *(_QWORD *)(*MEMORY[0x1E0DEC880] + *a5 + 8);
  v38 = *(_QWORD *)(a6 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v14 = type metadata accessor for Optional();
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v36 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  v39 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 > 0 || ((*(uint64_t (**)(uint64_t, uint64_t, double))(a6 + 24))(v12, a6, v20) & 1) != 0)
  {
    v23 = *(id *)&v7[direct field offset for TextBoxView.textStorage];
    CRTextStorage.updateAttribute<A>(in:newValue:keypath:)(a1, a2, v41, v40, a5, a6);

    TextBoxView.updateCanvasElement(shouldRegisterUndo:)(1);
  }
  if (!a2 || (TextBoxView.string.getter(), v24 = String.count.getter(), swift_bridgeObjectRelease(), v24 == a2))
  {
    v25 = *(void **)&v7[OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView];
    if (v25)
    {
      v26 = v25;
      v37 = v26;
      v27 = objc_msgSend(v7, sel_traitCollection);
      v28 = objc_msgSend(v27, sel_userInterfaceStyle);

      v29 = v28 == (id)2;
      v30 = objc_msgSend(v26, sel_typingAttributes);
      type metadata accessor for NSAttributedStringKey(0);
      v36 = v31;
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
      v32 = v18;
      v33 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      CRAttributedString.Attributes<>.init(nsAttributes:darkMode:)(v33, v29);
      swift_retain();
      v41(v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v17, 0, 1, AssociatedTypeWitness);
      CRAttributedString.Attributes.subscript.setter();
      v34 = v37;
      CRAttributedString.Attributes<>.nsAttributes(darkMode:)(v29);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v34, sel_setTypingAttributes_, isa);

      (*(void (**)(char *, uint64_t))(v39 + 8))(v22, v32);
    }
  }
}

void @objc TextBoxView.presentationControllerDidDismiss(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  specialized TextBoxView.presentationControllerDidDismiss(_:)();

}

uint64_t @objc TextBoxView.textView(_:shouldChangeTextIn:replacementText:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;
  v8 = a3;
  v9 = a1;
  LOBYTE(v5) = specialized TextBoxView.textView(_:shouldChangeTextIn:replacementText:)(v5, v7);

  swift_bridgeObjectRelease();
  return v5 & 1;
}

void @objc TextBoxView.textViewDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  specialized TextBoxView.textViewDidChange(_:)();

}

void @objc TextBoxView.textViewDidChangeSelection(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  specialized TextBoxView.textViewDidChangeSelection(_:)();

}

Swift::Void __swiftcall TextBoxView.updateFrameAfterScribbling()()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  double v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  BOOL v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  void *v21;

  v1 = MEMORY[0x1DF0E666C](v0 + direct field offset for TextBoxView.canvasElementView);
  if (v1)
  {
    v21 = (void *)v1;
    v2 = CanvasElementView.modelFrame.getter();
    v4 = v3;
    v6 = v5;
    v8 = v7;
    v9 = TextBoxView.canvasElementViewFrameInModelSpace.getter();
    v11 = v10;
    v13 = v12;
    v15 = v14;
    v16 = CGRect.almostEqual(_:threshold:)(v9, v10, v12, v14, 0.1, v2, v4, v6, v8);
    v17 = v21;
    if (!v16)
    {
      v18 = v0 + direct field offset for TextBoxView.delegate;
      if (MEMORY[0x1DF0E666C](v0 + direct field offset for TextBoxView.delegate, v21))
      {
        v19 = *(_QWORD *)(v18 + 8);
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t, uint64_t, double, double, double, double))(v19 + 24))(v0, ObjectType, v19, v9, v11, v13, v15);
        swift_unknownObjectRelease();
      }
      TextBoxView.updateCanvasElement(shouldRegisterUndo:)(0);
      v17 = v21;
    }

  }
}

Swift::Void __swiftcall TextBoxView.textViewDidEndEditing(_:)(UITextView *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  NSString *v7;
  NSString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String_optional v16;
  Swift::String v17;
  uint64_t countAndFlagsBits;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  UITextView *v24;
  id v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  char v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  NSString *v41;
  NSString *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void *v47;
  Swift::String v48;

  v2 = v1;
  v4 = (_QWORD *)MEMORY[0x1DF0E666C](v1 + direct field offset for TextBoxView.canvasElementView);
  if (v4)
  {
    v5 = v4;
    v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    if (((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x120))() & 1) != 0)
      goto LABEL_15;
    v7 = -[UITextView text](a1, sel_text);
    if (!v7)
      goto LABEL_15;
    v8 = v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v10;

    if (v9)
      v12 = 0;
    else
      v12 = v11 == 0xE000000000000000;
    if (v12)
    {
      v14 = swift_bridgeObjectRelease();
    }
    else
    {
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v14 = swift_bridgeObjectRelease();
      if ((v13 & 1) == 0)
      {
LABEL_15:

        goto LABEL_16;
      }
    }
    if (((*(uint64_t (**)(uint64_t))((*v6 & *v5) + 0x118))(v14) & 1) != 0)
    {
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      v48._object = (void *)0x80000001DDF59D10;
      v15._countAndFlagsBits = 1954047316;
      v15._object = (void *)0xE400000000000000;
      v16.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v16.value._object = (void *)0xEB00000000656C62;
      v17._countAndFlagsBits = 0;
      v17._object = (void *)0xE000000000000000;
      v48._countAndFlagsBits = 0xD000000000000024;
      countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, paperKitBundle, v17, v48)._countAndFlagsBits;
      v19 = (void *)MEMORY[0x1DF0E41AC](countAndFlagsBits);
      swift_bridgeObjectRelease();
      -[UITextView setText:](a1, sel_setText_, v19);

      TextBoxView.updateCanvasElement(shouldRegisterUndo:)(1);
    }
    goto LABEL_15;
  }
LABEL_16:
  v20 = MEMORY[0x1DF0E666C](v2 + direct field offset for TextBoxView.canvasElementView);
  if (v20)
  {
    v21 = (void *)v20;
    TextBoxView.canvasElementViewFrameInModelSpace.getter();
    CanvasElementView.modelFrame.setter();

  }
  TextBoxView.updateCanvasElement(shouldRegisterUndo:)(0);
  if ((TextBoxView.isFormField.getter() & 1) != 0)
  {
    type metadata accessor for TextBoxTextView();
    v22 = swift_dynamicCastClass();
    if (!v22)
      return;
    v23 = (void *)v22;
    v24 = a1;
    v25 = objc_msgSend(v23, sel_text);
    if (!v25)
      goto LABEL_43;
    v26 = v25;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v29 = v28;

    swift_bridgeObjectRelease();
    v30 = HIBYTE(v29) & 0xF;
    if ((v29 & 0x2000000000000000) == 0)
      v30 = v27 & 0xFFFFFFFFFFFFLL;
    v31 = OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics;
    if (!v30)
    {
      v32 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics);
      *(_BYTE *)(v32 + 18) = 17;
      *(_BYTE *)(v32 + 64) = 0;
    }
    v33 = *(unsigned __int8 **)(v2 + v31);
    if (v33[19] == 1)
    {
      if (FormAnalyticsKeys.rawValue.getter(v33[18]) == 0x6C6C69666F747561 && v34 == 0xE800000000000000)
        v36 = 0;
      else
        v36 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
      swift_retain();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_retain();
      v36 = 0;
    }
    v33[49] = v36 & 1;
    swift_release();
    v37 = *(_QWORD *)(v2 + v31);
    swift_retain();
    v38 = objc_msgSend(v23, sel_text);
    if (!v38)
      goto LABEL_44;
    v39 = v38;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v40 = String.count.getter();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v37 + 56) = v40;
    swift_release();
    swift_retain();
    FormTextFieldAnalytics.recordEvent()();

    swift_release();
  }
  v41 = -[UITextView text](a1, sel_text);
  if (!v41)
  {
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    return;
  }
  v42 = v41;
  v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v45 = v44;

  swift_bridgeObjectRelease();
  v46 = HIBYTE(v45) & 0xF;
  if ((v45 & 0x2000000000000000) == 0)
    v46 = v43 & 0xFFFFFFFFFFFFLL;
  if (!v46)
  {
    -[UITextView removeFromSuperview](a1, sel_removeFromSuperview);
    v47 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView) = 0;

  }
}

void @objc TextBoxView.textViewDidEndEditing(_:)(void *a1, uint64_t a2, void *a3)
{
  UITextView *v4;
  id v5;

  v4 = a3;
  v5 = a1;
  TextBoxView.textViewDidEndEditing(_:)(v4);

}

void @objc TextBoxView.keyboardWillHideNotification(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  TextBoxView.keyboardWillHideNotification(_:)(v4);

}

void TextBoxView.adjustScrollViewForKeyboardNotification(_:)(void *a1)
{
  uint64_t v1;
  void *v2;
  id v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  double v9;
  unint64_t v10;
  char v11;
  CGFloat v12;
  unint64_t v13;
  char v14;
  double v15;
  unint64_t v16;
  char v17;
  double v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  _BYTE v29[40];
  __int128 v30;
  __int128 v31;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
  if (!v2)
    return;
  v22 = v2;
  v4 = objc_msgSend(a1, sel_userInfo);
  if (!v4)
  {

    return;
  }
  v5 = v4;
  v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v6 + 16) && (v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v29), (v8 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v6 + 56) + 32 * v7, (uint64_t)&v30);
  }
  else
  {
    v30 = 0u;
    v31 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v29);
  if (!*((_QWORD *)&v31 + 1))
    goto LABEL_25;
  type metadata accessor for CGRect(0);
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_27;
  *(double *)&v23 = COERCE_DOUBLE(static String._unconditionallyBridgeFromObjectiveC(_:)());
  v26 = v9;
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v6 + 16) && (v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v29), (v11 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v6 + 56) + 32 * v10, (uint64_t)&v30);
  }
  else
  {
    v30 = 0u;
    v31 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v29);
  if (!*((_QWORD *)&v31 + 1))
    goto LABEL_25;
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_27:

    swift_bridgeObjectRelease();
    return;
  }
  v12 = *(double *)&v23;
  *(double *)&v24 = COERCE_DOUBLE(static String._unconditionallyBridgeFromObjectiveC(_:)());
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v6 + 16) && (v13 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v29), (v14 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v6 + 56) + 32 * v13, (uint64_t)&v30);
  }
  else
  {
    v30 = 0u;
    v31 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v29);
  if (!*((_QWORD *)&v31 + 1))
  {
LABEL_25:

    swift_bridgeObjectRelease();
LABEL_26:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v30, &demangling cache variable for type metadata for Any?);
    return;
  }
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_27;
  v15 = *(double *)&v24;
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v6 + 16) && (v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v29), (v17 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v6 + 56) + 32 * v16, (uint64_t)&v30);
  }
  else
  {
    v30 = 0u;
    v31 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v29);
  if (!*((_QWORD *)&v31 + 1))
  {

    goto LABEL_26;
  }
  if ((swift_dynamicCast() & 1) != 0)
  {
    objc_msgSend(v22, sel_bounds);
    objc_msgSend(v22, sel_convertRect_toView_, 0);
    specialized TextBoxView.adjustScrollViewToAccomodateKeyboard(startingFrame:endingFrame:textBoxFrameInWindow:animationDuration:animationCurve:)(v25, v12, v26, v27, v28, v18, v19, v20, v21, v15);
  }

}

void TextBoxView.registerForFirstResponderNotifications()()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  objc_msgSend(v1, sel_addObserver_selector_name_object_, v0, sel_firstResponderDidChange_, *MEMORY[0x1E0DC5AF8], 0);

}

void TextBoxView.unregisterForFirstResponderNotifications()()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  objc_msgSend(v1, sel_removeObserver_name_object_, v0, *MEMORY[0x1E0DC5AF8], 0);

}

void @objc TextBoxView.firstResponderDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  specialized TextBoxView.firstResponderDidChange(_:)();

}

void TextBoxView.handleTab(direction:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _OWORD v17[2];
  uint64_t v18;

  v2 = v1;
  v4 = *v1;
  v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v6 = *MEMORY[0x1E0DEEDD8];
  v7 = TextBoxView.canvas.getter();
  if (v7)
  {
    v8 = v7;
    v9 = (void *)(*(uint64_t (**)(void))((*v5 & *v7) + 0x2F8))();
    v11 = v10;

    ObjectType = swift_getObjectType();
    v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 144))(ObjectType, v11);

    if (v13)
    {
      v14 = MEMORY[0x1DF0E666C]((char *)v2 + direct field offset for TextBoxView.canvasElementView);
      if (v14)
      {
        v15 = (void *)v14;
        v16 = type metadata accessor for CanvasElementView(0, *(_QWORD *)((v6 & v4) + 0x1B8), *(_QWORD *)((v6 & v4) + 0x1C0), *(_QWORD *)(*(_QWORD *)((v6 & v4) + 0x1C8) + 8));
        MEMORY[0x1DF0E6450](MEMORY[0x1E0DEFCF8], v16);
        _convertToAnyHashable<A>(_:)();

      }
      else
      {
        memset(v17, 0, sizeof(v17));
        v18 = 0;
      }
      FormFillingView.focusNextField(from:direction:)((uint64_t)v17, a1);

      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for AnyHashable?);
    }
  }
}

uint64_t thunk for @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2() & 1;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool)(uint64_t a1, void *a2)
{
  uint64_t (*v2)(void);
  id v3;
  char v4;

  v2 = *(uint64_t (**)(void))(a1 + 32);
  v3 = a2;
  v4 = v2();

  return v4 & 1;
}

void @objc TextBoxView.draw(_:)(void *a1)
{
  id v1;

  v1 = a1;
  specialized TextBoxView.draw(_:)();

}

void @objc TextBoxView.init(frame:)()
{
  specialized TextBoxView.init(frame:)();
}

uint64_t TextBoxView.__ivar_destroyer()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy();
  outlined destroy of weak AnyContainerCanvasElementView?(v0 + direct field offset for TextBoxView.delegate);

  swift_release();
  swift_unknownObjectWeakDestroy();
  return swift_bridgeObjectRelease();
}

id TextBoxView.__deallocating_deinit()
{
  _QWORD *v0;
  objc_class *v1;
  objc_super v3;

  v1 = (objc_class *)type metadata accessor for TextBoxView(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B8), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C0), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C8));
  v3.receiver = v0;
  v3.super_class = v1;
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t @objc TextBoxView.__ivar_destroyer(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  outlined destroy of weak AnyContainerCanvasElementView?(a1 + direct field offset for TextBoxView.delegate);

  swift_release();
  swift_unknownObjectWeakDestroy();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for TextBoxView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TextBoxView);
}

void partial apply for closure #1 in TextBoxView.setUnderline(_:)(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

Swift::Float partial apply for closure #1 in TextBoxView.setItalic(_:)@<S0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in TextBoxView.setBold(_:)(*(_BYTE *)(v1 + 16), (void (*)(_QWORD))Font.isItalic.setter, a1);
}

Swift::Float partial apply for closure #1 in TextBoxView.setBold(_:)@<S0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in TextBoxView.setBold(_:)(*(_BYTE *)(v1 + 16), (void (*)(_QWORD))Font.isBold.setter, a1);
}

void partial apply for closure #1 in TextBoxView.setTextAlignment(_:)(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
}

Swift::Float partial apply for closure #1 in TextBoxView.setFont(_:)@<S0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return CRAttributedString.Attributes<>.fontWithFamily(_:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void partial apply for closure #1 in TextBoxView.setFontSize(_:)(uint64_t a1@<X8>)
{
  uint64_t v1;

  CRAttributedString.Attributes<>.fontWithSize(_:)(a1, (float)*(uint64_t *)(v1 + 16));
}

void partial apply for closure #1 in TextBoxView.setColor(_:)(_QWORD *a1@<X8>)
{
  uint64_t v1;

  closure #1 in TextBoxView.setColor(_:)(*(void **)(v1 + 16), a1);
}

void sub_1DDEEFFAC(uint64_t a1@<X1>, uint64_t a2@<X2>, double *a3@<X8>)
{
  *a3 = (*(double (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + a1 - 8) + 8) + 32))(*(_QWORD *)(a2 + a1 - 24));
}

uint64_t sub_1DDEEFFEC(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, double))(*(_QWORD *)(*(_QWORD *)(a4 + a3 - 8) + 8) + 40))(*(_QWORD *)(a4 + a3 - 24), *(_QWORD *)(*(_QWORD *)(a4 + a3 - 8) + 8), *a1);
}

uint64_t sub_1DDEF002C()
{
  return 24;
}

__n128 sub_1DDEF0038(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #1 in TextBoxView.setFixedWidth()@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in TextBoxView.setFixedWidth()(a1);
}

_QWORD *sub_1DDEF0064@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v5;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD))(*(_QWORD *)(a2 + a1 - 8) + 40))(&v5, *(_QWORD *)(a2 + a1 - 24));
  *a3 = v5;
  return result;
}

uint64_t sub_1DDEF00B0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *(_QWORD *)(a4 + a3 - 24);
  v5 = *(_QWORD *)(a4 + a3 - 8);
  v7 = *a1;
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 48))(&v7, v4);
}

uint64_t sub_1DDEF00F8()
{
  return 24;
}

__n128 sub_1DDEF0104(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

_QWORD *sub_1DDEF0118@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  _QWORD *result;
  uint64_t v5;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD))(*(_QWORD *)(a2 + a1 - 8) + 88))(&v5, *(_QWORD *)(a2 + a1 - 24));
  *a3 = v5;
  return result;
}

uint64_t sub_1DDEF0164(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v7;

  v4 = *(_QWORD *)(a4 + a3 - 24);
  v5 = *(_QWORD *)(a4 + a3 - 8);
  v7 = *a1;
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 96))(&v7, v4);
}

uint64_t sub_1DDEF01AC()
{
  return 24;
}

__n128 sub_1DDEF01B8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDEF01CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a3 + a2 - 8) + 112))(*(_QWORD *)(a3 + a2 - 24));
}

uint64_t sub_1DDEF0204()
{
  return 24;
}

__n128 sub_1DDEF0210(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #1 in TextBoxView.updateCanvasElement(shouldRegisterUndo:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in TextBoxView.updateCanvasElement(shouldRegisterUndo:)(a1, *(_QWORD **)(v1 + 16));
}

void specialized TextBoxView.init(coder:)()
{
  _BYTE *v0;

  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[direct field offset for TextBoxView.delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[direct field offset for TextBoxView.currentUndoAction] = 0;
  *(_QWORD *)&v0[direct field offset for TextBoxView.scribbleDebugView] = 0;
  v0[direct field offset for TextBoxView.shouldAddTextboxView] = 0;
  v0[direct field offset for TextBoxView.hideText] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[direct field offset for TextBoxView.cancellables] = MEMORY[0x1E0DEE9E8];

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized TextBoxView.textViewDidBeginEditing(_:)()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_analytics) + 18) = 16;
}

uint64_t specialized TextBoxView.presentationControllerDidDismiss(_:)()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)(v0 + direct field offset for TextBoxView.cancellables);
  swift_beginAccess();
  *v1 = MEMORY[0x1E0DEE9E8];
  swift_bridgeObjectRelease();
  return swift_unknownObjectWeakAssign();
}

uint64_t specialized TextBoxView.textView(_:shouldChangeTextIn:replacementText:)(uint64_t a1, uint64_t a2)
{
  if ((a1 != 9 || a2 != 0xE100000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    return 1;
  TextBoxView.handleTab(direction:)(0);
  return 0;
}

void specialized TextBoxView.textViewDidChange(_:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;

  TextBoxView.beginUndoGroupIfNecessary()();
  TextBoxView.updateCanvasElement(shouldRegisterUndo:)(0);
  v1 = MEMORY[0x1DF0E666C](v0 + direct field offset for TextBoxView.canvasElementView);
  if (v1)
  {
    v2 = (void *)v1;
    v3 = TextBoxView.string.getter();
    v4 = (id)MEMORY[0x1DF0E41AC](v3);
    swift_bridgeObjectRelease();
    objc_msgSend(v2, sel_setAccessibilityValue_, v4);

  }
}

void specialized TextBoxView.textViewDidChangeSelection(_:)()
{
  char *v0;
  char *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  char *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t inited;
  unint64_t v28;
  char *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t ObjectType;
  id v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  void *v41;

  v1 = v0;
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextStyleSelector<TextStyleSelectorModel>);
  MEMORY[0x1E0C80A78](v3, v4);
  *(_QWORD *)&v37 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v38 = (uint64_t)&v31 - v8;
  v9 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v9, v10);
  v11 = type metadata accessor for Capsule();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v31 - v14;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<TextBox>);
  v35 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36, v16);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = TextBoxView.canvas.getter();
  if (v19)
  {
    v20 = v19;
    v21 = (void *)MEMORY[0x1DF0E666C](&v0[direct field offset for TextBoxView.canvasElementView]);
    if (v21)
    {
      v34 = v21;
      (*(void (**)(void))((*v2 & *v20) + 0x668))();
      v22 = (char *)v20 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate;
      swift_beginAccess();
      if (MEMORY[0x1DF0E666C](v22))
      {
        v32 = *((_QWORD *)v22 + 1);
        ObjectType = swift_getObjectType();
        CanvasElementView.canvasElement.getter((uint64_t)v15);
        Capsule<>.rootID.getter();
        (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
        type metadata accessor for TextBox();
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
        WeakRef.init(id:)();
        (*(void (**)(_QWORD *, char *, uint64_t))(v32 + 24))(v20, v18, ObjectType);

        swift_unknownObjectRelease();
        (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v36);
      }
      else
      {

      }
    }
    else
    {

    }
  }
  v23 = MEMORY[0x1DF0E666C](&v1[direct field offset for TextBoxView.styleController]);
  if (v23)
  {
    v24 = (void *)v23;
    v25 = v37;
    dispatch thunk of UIHostingController.rootView.getter();

    v26 = v38;
    outlined init with take of (key: Int, value: AnyCRValue)?(v25, v38, &demangling cache variable for type metadata for TextStyleSelector<TextStyleSelectorModel>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1DDF35440;
    *(_QWORD *)(inited + 32) = v1;
    v39 = inited;
    specialized Array._endMutation()();
    v28 = v39;
    v29 = v1;
    Array<A>.displayAttributes.getter(v28, (uint64_t *)&v39);
    swift_bridgeObjectRelease();
    v30 = v41;
    v37 = v40;
    swift_retain();
    TextStyleSelectorModel.inspect(_:)((uint64_t *)&v39);
    swift_release();
    outlined destroy of StocksKitCurrencyCache.Provider?(v26, &demangling cache variable for type metadata for TextStyleSelector<TextStyleSelectorModel>);

    swift_bridgeObjectRelease();
  }
}

void specialized TextBoxView.adjustScrollViewToAccomodateKeyboard(startingFrame:endingFrame:textBoxFrameInWindow:animationDuration:animationCurve:)(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, double a6, CGFloat a7, CGFloat a8, CGFloat a9, double a10)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  void *v43;
  id v44;
  void *v45;
  double v46;
  CGFloat v47;
  double v48;
  CGFloat v49;
  double v50;
  CGFloat v51;
  double v52;
  CGFloat v53;
  double v54;
  double x;
  double y;
  double width;
  double height;
  double v59;
  double v60;
  double v61;
  CGFloat v62;
  CGFloat v63;
  CGFloat v64;
  CGFloat v65;
  double v66;
  CGFloat v67;
  double v68;
  CGFloat v69;
  double v70;
  CGFloat v71;
  double v72;
  CGFloat v73;
  id v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  uint64_t v84;
  void *v85;
  void *v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  void *v90;
  id v91;
  double v92;
  CGFloat v93;
  CGFloat v94;
  CGFloat v95;
  CGFloat v96;
  CGFloat v97;
  CGFloat v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  uint64_t v105;
  double v106;
  uint64_t v107;
  id v108;
  uint64_t aBlock;
  uint64_t v110;
  uint64_t (*v111)(uint64_t);
  void *v112;
  id (*v113)();
  uint64_t v114;
  CGRect v115;
  CGRect v116;
  CGRect v117;
  CGRect v118;
  CGRect v119;
  CGRect v120;
  CGRect v121;
  CGRect v122;
  CGRect v123;

  v107 = a1;
  v106 = a6;
  v24 = type metadata accessor for DispatchWorkItemFlags();
  v105 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v92 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for DispatchQoS();
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v30);
  v32 = (char *)&v92 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for DispatchTime();
  v34 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33, v35);
  v37 = (char *)&v92 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v38, v39);
  v41 = (char *)&v92 - v40;
  v42 = TextBoxView.canvas.getter();
  if (v42)
  {
    v43 = v42;
    v108 = (id)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v42) + 0x310))();

    if (v108)
    {
      if (!objc_msgSend(v108, sel_isScrollEnabled)
        || (v44 = objc_msgSend(v108, sel_superview)) == 0)
      {
LABEL_22:

        return;
      }
      v45 = v44;
      v96 = a7;
      v97 = a8;
      v98 = a9;
      v99 = a10;
      objc_msgSend(v108, sel_frame);
      objc_msgSend(v45, sel_convertRect_toView_, 0);
      v47 = v46;
      v49 = v48;
      v51 = v50;
      v53 = v52;

      v115.origin.x = v47;
      v115.origin.y = v49;
      v115.size.width = v51;
      v115.size.height = v53;
      v104 = -(a3 - CGRectGetMaxY(v115));
      v54 = *MEMORY[0x1E0C9D628];
      v102 = *(double *)(MEMORY[0x1E0C9D628] + 8);
      v103 = v54;
      v101 = *(double *)(MEMORY[0x1E0C9D628] + 16);
      v100 = *(double *)(MEMORY[0x1E0C9D628] + 24);
      objc_msgSend(v108, sel_bounds);
      objc_msgSend(v108, sel_convertRect_toView_, 0);
      x = v116.origin.x;
      y = v116.origin.y;
      width = v116.size.width;
      height = v116.size.height;
      v121.origin.x = a2;
      v121.origin.y = a3;
      v121.size.width = a4;
      v121.size.height = a5;
      if (CGRectIntersectsRect(v116, v121))
      {
        v117.origin.x = x;
        v117.origin.y = y;
        v117.size.width = width;
        v117.size.height = height;
        v122.origin.x = a2;
        v122.origin.y = a3;
        v122.size.width = a4;
        v122.size.height = a5;
        v118 = CGRectIntersection(v117, v122);
        CGRectGetHeight(v118);
        v92 = UIEdgeInsetsInsetRect(x, y, width, height, 0.0, 0.0);
        v93 = v59;
        v95 = v60;
        v94 = v61;
        v62 = v106;
        v63 = v96;
        v64 = v97;
        v65 = v98;
        objc_msgSend(v108, sel_convertRect_fromView_, 0, v106, v96, v97, v98);
        v67 = v66;
        v69 = v68;
        v71 = v70;
        v73 = v72;
        v119.origin.x = v92;
        v119.origin.y = v93;
        v119.size.width = v95;
        v119.size.height = v94;
        v123.origin.x = v62;
        v123.origin.y = v63;
        v123.size.width = v64;
        v123.size.height = v65;
        if (CGRectContainsRect(v119, v123))
        {
          v67 = v103;
          v69 = v102;
          v71 = v101;
          v73 = v100;
        }
        v74 = v108;
      }
      else
      {
        v74 = v108;
        v69 = v102;
        v67 = v103;
        v71 = v101;
        v73 = v100;
      }
      objc_msgSend(v74, sel_contentInset);
      v76 = v75;
      objc_msgSend(v108, sel__contentScrollInset);
      v78 = v77;
      v80 = v79;
      v82 = v81;
      if (v76 >= v104)
        v83 = 0.0;
      else
        v83 = v104 - v76;
      v120.origin.x = v67;
      v120.origin.y = v69;
      v120.size.width = v71;
      v120.size.height = v73;
      if (CGRectIsNull(v120))
      {
        if (v83 > 0.0)
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
          v107 = static OS_dispatch_queue.main.getter();
          static DispatchTime.now()();
          MEMORY[0x1DF0E26A0](v37, v99);
          v106 = *(double *)(v34 + 8);
          (*(void (**)(char *, uint64_t))&v106)(v37, v33);
          v84 = swift_allocObject();
          *(_QWORD *)(v84 + 16) = v108;
          *(double *)(v84 + 24) = v78;
          *(double *)(v84 + 32) = v80;
          *(double *)(v84 + 40) = v83;
          *(double *)(v84 + 48) = v82;
          v113 = partial apply for specialized closure #1 in UIScrollView.scrollTo(_:keyboardFrame:animationDuration:animationCurve:);
          v114 = v84;
          aBlock = MEMORY[0x1E0C809B0];
          v110 = 1107296256;
          v111 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
          v112 = &block_descriptor_31_0;
          v85 = _Block_copy(&aBlock);
          v108 = v108;
          swift_release();
          static DispatchQoS.unspecified.getter();
          aBlock = MEMORY[0x1E0DEE9D8];
          v104 = COERCE_DOUBLE(lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]));
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
          lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
          dispatch thunk of SetAlgebra.init<A>(_:)();
          v86 = (void *)v107;
          MEMORY[0x1DF0E4884](v41, v32, v27, v85);
          _Block_release(v85);

          (*(void (**)(char *, uint64_t))(v105 + 8))(v27, v24);
          (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v28);
          (*(void (**)(char *, uint64_t))&v106)(v41, v33);
          return;
        }
        objc_msgSend(v108, sel__setContentScrollInset_, v78, v80, v83, v82);
        goto LABEL_22;
      }
      if ((unint64_t)(v107 - 1) >= 3)
        v87 = 4;
      else
        v87 = ((v107 - 1) << 16) + 65540;
      v88 = (void *)objc_opt_self();
      v89 = swift_allocObject();
      *(_QWORD *)(v89 + 16) = v108;
      *(double *)(v89 + 24) = v78;
      *(double *)(v89 + 32) = v80;
      *(double *)(v89 + 40) = v83;
      *(double *)(v89 + 48) = v82;
      *(CGFloat *)(v89 + 56) = v67;
      *(CGFloat *)(v89 + 64) = v69;
      *(CGFloat *)(v89 + 72) = v71;
      *(CGFloat *)(v89 + 80) = v73;
      v113 = partial apply for closure #1 in UIScrollView.animateScroll(to:insets:animationDuration:animationCurve:);
      v114 = v89;
      aBlock = MEMORY[0x1E0C809B0];
      v110 = 1107296256;
      v111 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      v112 = &block_descriptor_70;
      v90 = _Block_copy(&aBlock);
      v91 = v108;
      swift_release();
      objc_msgSend(v88, sel_animateWithDuration_delay_options_animations_completion_, v87, v90, 0, v99, 0.0);

      _Block_release(v90);
    }
  }
}

uint64_t sub_1DDEF0F94()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t block_copy_helper_70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_70()
{
  return swift_release();
}

uint64_t sub_1DDEF0FD0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1DDEF0FF4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1DDEF1018()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in TextBoxView.textStyleSelectorDidTapFontButton()()
{
  uint64_t v0;

  closure #1 in TextBoxView.textStyleSelectorDidTapFontButton()(*(_QWORD *)(v0 + 40));
}

void partial apply for closure #1 in TextBoxView.textFormat(_:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in TextBoxView.textFormat(_:)(a1, *(_QWORD *)(v1 + 40));
}

void partial apply for closure #2 in TextBoxView.textFormat(_:)(uint64_t *a1)
{
  uint64_t *v1;

  closure #2 in TextBoxView.textFormat(_:)(a1, v1[5], v1[2], v1[3], v1[4], (void (*)(uint64_t))TextBoxView.setFontSize(_:));
}

void partial apply for closure #3 in TextBoxView.textFormat(_:)(unsigned __int8 *a1)
{
  uint64_t *v1;

  closure #3 in TextBoxView.textFormat(_:)(a1, v1[5], v1[2], v1[3], v1[4], (void (*)(uint64_t))TextBoxView.setBold(_:));
}

void partial apply for closure #4 in TextBoxView.textFormat(_:)(unsigned __int8 *a1)
{
  uint64_t *v1;

  closure #3 in TextBoxView.textFormat(_:)(a1, v1[5], v1[2], v1[3], v1[4], (void (*)(uint64_t))TextBoxView.setItalic(_:));
}

void partial apply for closure #5 in TextBoxView.textFormat(_:)(unsigned __int8 *a1)
{
  uint64_t *v1;

  closure #3 in TextBoxView.textFormat(_:)(a1, v1[5], v1[2], v1[3], v1[4], (void (*)(uint64_t))TextBoxView.setUnderline(_:));
}

void partial apply for closure #6 in TextBoxView.textFormat(_:)(unsigned __int8 *a1)
{
  uint64_t *v1;

  closure #3 in TextBoxView.textFormat(_:)(a1, v1[5], v1[2], v1[3], v1[4], (void (*)(uint64_t))TextBoxView.setStrikethrough(_:));
}

void partial apply for closure #7 in TextBoxView.textFormat(_:)(uint64_t *a1)
{
  uint64_t v1;

  closure #7 in TextBoxView.textFormat(_:)(a1, *(_QWORD *)(v1 + 40));
}

void partial apply for closure #8 in TextBoxView.textFormat(_:)(uint64_t *a1)
{
  uint64_t *v1;

  closure #2 in TextBoxView.textFormat(_:)(a1, v1[5], v1[2], v1[3], v1[4], (void (*)(uint64_t))TextBoxView.setTextAlignment(_:));
}

uint64_t partial apply for closure #1 in TextBoxView.beginUndoGroupIfNecessary()(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in TextBoxView.beginUndoGroupIfNecessary()(a1, v1);
}

uint64_t partial apply for closure #1 in TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in TextBoxView.finalizeLastUndoActionIfPossible(closeUndoGroup:)(a1, *(_QWORD **)(v1 + 16));
}

void specialized TextBoxView.firstResponderDidChange(_:)()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  id v3;

  v0 = TextBoxView.canvas.getter();
  if (v0)
  {
    v1 = v0;
    v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    v3 = v2;

    if (v2)
    {
      objc_msgSend(v3, sel_setNeedsLayout);

    }
    else
    {
      __break(1u);
    }
  }
}

void specialized TextBoxView.draw(_:)()
{
  uint64_t v0;
  CGContext *v1;
  CGContext *v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  CGContext *v10;
  id v11;
  char isEscapingClosureAtFileLocation;
  _QWORD v13[6];

  if ((*(_BYTE *)(v0 + direct field offset for TextBoxView.hideText) & 1) == 0)
  {
    v1 = UIGraphicsGetCurrentContext();
    if (v1)
    {
      v2 = v1;
      v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                                 + direct field offset for TextBoxView.textLayoutManager), sel_documentRange));
      v4 = objc_msgSend(v3, sel_location);

      v5 = *(void **)(v0 + direct field offset for TextBoxView.textLayoutManager);
      v6 = swift_allocObject();
      *(_QWORD *)(v6 + 16) = v2;
      v7 = swift_allocObject();
      *(_QWORD *)(v7 + 16) = partial apply for closure #1 in TextBoxView.draw(_:);
      *(_QWORD *)(v7 + 24) = v6;
      v13[4] = _sSo20NSTextLayoutFragmentCSbIggd_ABSbIeggd_TRTA_0;
      v13[5] = v7;
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 1107296256;
      v13[2] = thunk for @escaping @callee_guaranteed (@guaranteed NSTextLayoutFragment) -> (@unowned Bool);
      v13[3] = &block_descriptor_81;
      v8 = _Block_copy(v13);
      v9 = v5;
      swift_unknownObjectRetain();
      v10 = v2;
      swift_retain();
      swift_release();
      v11 = objc_msgSend(v9, sel_enumerateTextLayoutFragmentsFromLocation_options_usingBlock_, v4, 4, v8);
      swift_unknownObjectRelease();

      swift_unknownObjectRelease_n();
      _Block_release(v8);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if ((isEscapingClosureAtFileLocation & 1) != 0)
        __break(1u);
    }
  }
}

void specialized TextBoxView.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1DDEF13CC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TextBoxView.draw(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  objc_msgSend(a1, sel_layoutFragmentFrame);
  objc_msgSend(a1, sel_drawAtPoint_inContext_, v3);
  return 1;
}

uint64_t sub_1DDEF1434()
{
  return swift_deallocObject();
}

uint64_t _sSo20NSTextLayoutFragmentCSbIggd_ABSbIeggd_TRTA_0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

void sub_1DDEF1468(uint64_t a1@<X1>, uint64_t a2@<X2>, double *a3@<X8>)
{
  *a3 = (*(double (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 136))(*(_QWORD *)(a2 + a1 - 24));
}

uint64_t sub_1DDEF14A4(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, double))(*(_QWORD *)(a4 + a3 - 8) + 144))(*(_QWORD *)(a4 + a3 - 24), *(_QWORD *)(a4 + a3 - 8), *a1);
}

uint64_t sub_1DDEF14E0()
{
  return 24;
}

__n128 sub_1DDEF14EC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

id FormatTooNewSynapseLinkView.imageView.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = OBJC_IVAR____TtC8PaperKit27FormatTooNewSynapseLinkView____lazy_storage___imageView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit27FormatTooNewSynapseLinkView____lazy_storage___imageView);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit27FormatTooNewSynapseLinkView____lazy_storage___imageView);
  }
  else
  {
    v4 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000014, 0x80000001DDF5C260);
    v5 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v4);

    v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_initWithImage_, v5);
    v7 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v6;
    v3 = v6;

    v2 = 0;
  }
  v8 = v2;
  return v3;
}

id FormatTooNewSynapseLinkView.init()()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  objc_super v9;

  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit27FormatTooNewSynapseLinkView____lazy_storage___imageView] = 0;
  v9.receiver = v0;
  v9.super_class = (Class)type metadata accessor for FormatTooNewSynapseLinkView();
  v1 = objc_msgSendSuper2(&v9, sel_init);
  v2 = (void *)objc_opt_self();
  v3 = v1;
  v4 = objc_msgSend(v2, sel_systemFillColor);
  objc_msgSend(v3, sel_setBackgroundColor_, v4);

  v5 = v3;
  v6 = FormatTooNewSynapseLinkView.imageView.getter();
  objc_msgSend(v5, sel_addSubview_, v6);

  v7 = objc_msgSend(v5, sel_layer);
  if (one-time initialization token for resizeCornerRadius != -1)
    swift_once();
  objc_msgSend(v7, sel_setCornerRadius_, *(double *)&static UIConstants.resizeCornerRadius);

  return v5;
}

void FormatTooNewSynapseLinkView.__ivar_destroyer()
{
  uint64_t v0;

}

id FormatTooNewSynapseLinkView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FormatTooNewSynapseLinkView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FormatTooNewSynapseLinkView()
{
  return objc_opt_self();
}

uint64_t specialized Canvas.undoable(newChange:persistSelection:action:)(char a1, int a2, uint64_t (*a3)(double))
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  char *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t (*v48)(double);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char v54[24];

  v4 = v3;
  LODWORD(v53) = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v7, v8);
  v51 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CapsuleUndoAction();
  v52 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)&v44 - v22;
  if (*((_BYTE *)v3 + direct field offset for Canvas.isInUndoableGroup) == 1)
  {
    *((_BYTE *)v3 + direct field offset for Canvas.isUndoableGroupNewChange) = (*((_BYTE *)v3
                                                                                + direct field offset for Canvas.isUndoableGroupNewChange) | a1) & 1;
    return a3(v21);
  }
  v48 = a3;
  v49 = direct field offset for Canvas.isInUndoableGroup;
  v45 = v13;
  v50 = v10;
  *((_BYTE *)v3 + direct field offset for Canvas.isInUndoableGroup) = 1;
  v25 = direct field offset for Canvas.isUndoableGroupNewChange;
  *((_BYTE *)v3 + direct field offset for Canvas.isUndoableGroupNewChange) = a1 & 1;
  v26 = direct field offset for Canvas.paperView;
  v27 = *(_QWORD *)((char *)v3 + direct field offset for Canvas.paperView)
      + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)((char *)v3 + direct field offset for Canvas.paperView))
                  + 0x380);
  swift_beginAccess();
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 16);
  result = v28(v23, v27, v14);
  if ((v53 & 1) != 0)
  {
    v44 = v28;
    v29 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
    if (!v29)
    {
      __break(1u);
      return result;
    }
    v30 = v29 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
    v31 = *(_QWORD *)v30;
    v32 = *(_QWORD *)(v30 + 8);
    v47 = *(_QWORD *)(v30 + 16);
    v46 = *(unsigned __int8 *)(v30 + 24);
    swift_bridgeObjectRetain();
    v53 = v32;
    v33 = v31;
    result = swift_bridgeObjectRetain();
    v28 = v44;
  }
  else
  {
    v33 = 0;
    v53 = 0;
    v47 = 0;
    v46 = 0;
  }
  ((void (*)(uint64_t))v48)(result);
  v34 = *((unsigned __int8 *)v3 + v25);
  v35 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v34 == 1)
  {
    v54[0] = 3;
    (*(void (**)(char *))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x518))(v54);
  }
  v36 = *(_QWORD *)((char *)v3 + v26) + *(_QWORD *)((*v35 & **(_QWORD **)((char *)v3 + v26)) + 0x380);
  swift_beginAccess();
  v28(v18, v36, v14);
  v37 = (uint64_t)v51;
  Capsule.actionUndoingDifference(from:)();
  v38 = v35;
  v39 = *(void (**)(char *, uint64_t))(v15 + 8);
  v39(v18, v14);
  v40 = v52;
  v41 = v50;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v37, 1, v50) == 1)
  {
    v39(v23, v14);
    outlined consume of CanvasMembers?(v33);
    result = outlined destroy of StocksKitCurrencyCache.Provider?(v37, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  }
  else
  {
    v42 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v45, v37, v41);
    v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, _QWORD))((*v38 & *v4) + 0x458);
    v51 = v23;
    v48 = (uint64_t (*)(double))v39;
    v43(v42, v33, v53, v47, v46);
    outlined consume of CanvasMembers?(v33);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v41);
    result = ((uint64_t (*)(char *, uint64_t))v48)(v51, v14);
  }
  *((_BYTE *)v4 + v49) = 0;
  return result;
}

uint64_t Capsule<>.init(drawingData:encryptionDelegate:encryptionContextURL:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v9;

  type metadata accessor for PKDrawingCoherence(0);
  v9 = specialized PKDrawingCoherence.__allocating_init(data:)();
  if (!v4)
    Capsule<>.init(drawing:)((uint64_t)v9);
  outlined consume of Data._Representation(a1, a2);
  outlined destroy of StocksKitCurrencyCache.Provider?(a4, &demangling cache variable for type metadata for URL?);
  return outlined destroy of StocksKitCurrencyCache.Provider?(a3, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  void (*v5)(void *, unint64_t, void *);
  id v6;
  unint64_t v7;
  unint64_t v8;
  id v9;

  v4 = a2;
  v5 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    v6 = v4;
    v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

  }
  else
  {
    swift_retain();
    v8 = 0xF000000000000000;
  }
  v9 = a3;
  v5(v4, v8, a3);

  outlined consume of Data?((uint64_t)v4, v8);
  return swift_release();
}

double key path getter for Paper.frame : Paper@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;

  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for Paper.frame : Paper()
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.wrappedValue.setter();
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(uint64_t, void *);
  id v6;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  v6 = a3;
  v5(a2, a3);
  swift_release();

  return swift_unknownObjectRelease();
}

void Capsule<>.init(drawing:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  _BOOL8 IsNull;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];
  __int128 v26;
  __int128 v27;
  CGRect v28;

  v25[0] = a1;
  v1 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v1, v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v25 - v9;
  v11 = type metadata accessor for Paper();
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  v26 = 0u;
  v27 = 0u;
  CRRegister.init(wrappedValue:)();
  v26 = 0u;
  v27 = 0u;
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v26 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v10, 1, 1, v15);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v10, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  *(_QWORD *)&v26 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  lazy protocol witness table accessor for type Color? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v26 = 0;
  *((_QWORD *)&v26 + 1) = 0xE000000000000000;
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v26 = 0;
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12350]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12358]);
  CROrderedSet.init()();
  *(_QWORD *)&v14[*(int *)(v11 + 48)] = MEMORY[0x1E0DEE9E0];
  CRKeyPath.init(_:)();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v16 = (void *)v25[0];
  Capsule<>.init(_:id:)();
  v17 = (void *)PKDrawingCoherence.drawingWithNormalizedCanvasBounds()();
  objc_msgSend(v17, sel__canvasBounds);
  x = v28.origin.x;
  y = v28.origin.y;
  width = v28.size.width;
  height = v28.size.height;
  IsNull = CGRectIsNull(v28);
  if (IsNull)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    MEMORY[0x1E0C80A78](IsNull, v23);
    *(CGFloat *)&v25[-6] = x;
    *(CGFloat *)&v25[-5] = y;
    *(CGFloat *)&v25[-4] = width;
    *(CGFloat *)&v25[-3] = height;
    v24 = v17;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
    Capsule.mutate<A>(_:)();

  }
}

void Capsule<>.init(drawing:context:)(uint64_t a1, void *a2)
{
  Capsule<>.init(drawing:)(a1);

}

uint64_t PKDrawingCoherence.drawingWithNormalizedCanvasBounds()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  double x;
  double y;
  double width;
  double height;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  objc_class *v23;
  char *v24;
  CGFloat a;
  CGFloat v26;
  id v27;
  objc_super v29;
  CGAffineTransform v30;
  CGRect v31;
  CGRect v32;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PKDrawing();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v29 - v15;
  objc_msgSend(v1, sel__canvasBounds, v14);
  x = v31.origin.x;
  y = v31.origin.y;
  width = v31.size.width;
  height = v31.size.height;
  if (CGRectIsNull(v31)
    && (width = *MEMORY[0x1E0CD1338],
        objc_msgSend(v1, sel_bounds),
        y = v32.origin.y,
        height = v32.size.height,
        x = 0.0,
        CGRectIsNull(v32)))
  {
    height = 32.0;
    y = 0.0;
  }
  else if (y != 0.0)
  {
    v26 = -y;
    y = 0.0;
    CGAffineTransformMakeTranslation(&v30, 0.0, v26);
    v27 = objc_msgSend(v1, sel_drawingByApplyingTransform_, &v30);
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v16, v11, v7);
    type metadata accessor for PKDrawingCoherence(0);
    swift_dynamicCast();
    a = v30.a;
    goto LABEL_7;
  }
  v21 = &v1[OBJC_IVAR___PKDrawingCoherence_model];
  swift_beginAccess();
  v22 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v22(v6, v21, v2);
  v23 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
  v24 = (char *)objc_allocWithZone(v23);
  v22(&v24[OBJC_IVAR___PKDrawingCoherence_model], v6, v2);
  v29.receiver = v24;
  v29.super_class = v23;
  a = COERCE_DOUBLE(objc_msgSendSuper2(&v29, sel_init));
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
LABEL_7:
  objc_msgSend(*(id *)&a, sel_set_canvasBounds_, x, y, width, height);
  return *(_QWORD *)&a;
}

uint64_t closure #1 in Capsule<>.init(drawing:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(_BYTE *, _QWORD);
  void (*v23)(_BYTE *, _QWORD);
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(_BYTE *, _QWORD);
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  _BYTE v35[32];

  v29 = a6;
  v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v10 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v11);
  v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)v28 - v20;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v22 = (void (*)(_BYTE *, _QWORD))Capsule.Ref<>.root.modify();
  v31 = a1;
  v32 = a2;
  v33 = a3;
  v34 = a4;
  v28[1] = type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  v22(v35, 0);
  v23 = (void (*)(_BYTE *, _QWORD))Capsule.Ref<>.root.modify();
  v31 = a1;
  v32 = a2;
  v33 = a3;
  v34 = a4;
  CRRegister.wrappedValue.setter();
  v23(v35, 0);
  v24 = v29 + OBJC_IVAR___PKDrawingCoherence_model;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v24, v30);
  type metadata accessor for PKDrawingStruct();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
  swift_retain();
  Ref.init<A>(_:_:)();
  v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v21, 0, 1, v25);
  v26 = (uint64_t (*)(_BYTE *, _QWORD))Capsule.Ref<>.root.modify();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v21, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  return v26(v35, 0);
}

uint64_t specialized Capsule<>.addCanvasElement<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];
  double v14;
  double v15;
  double v16;
  double v17;
  CGRect v18;

  v2 = type metadata accessor for Paper();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  Capsule<>.root.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  v6 = v14;
  v7 = v15;
  v8 = v16;
  v9 = v17;
  outlined destroy of PKStrokeProperties((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
  v14 = v6;
  v15 = v7;
  v16 = v8;
  v17 = v9;
  v18.origin.x = v6;
  v18.origin.y = v7;
  v18.size.width = v8;
  v18.size.height = v9;
  if (CGRectGetWidth(v18) < 1.0)
    v16 = *MEMORY[0x1E0CD1338];
  MEMORY[0x1E0C80A78](v10, v11);
  *(_QWORD *)&v13[-16] = a1;
  *(_QWORD *)&v13[-8] = &v14;
  return Capsule.mutate<A>(_:)();
}

uint64_t specialized closure #1 in Capsule<>.addCanvasElement<A>(_:)(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(CGRect *, _QWORD);
  double MaxY;
  double v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t (*v40)(CGRect *, _QWORD);
  _QWORD v42[2];
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _UNKNOWN **v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  double v58;
  CGRect v59;
  uint64_t v60;

  v51 = a1;
  v5 = type metadata accessor for CRKeyPath();
  v47 = *(_QWORD *)(v5 - 8);
  v48 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v46 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v42 - v10;
  v60 = type metadata accessor for Image();
  MEMORY[0x1E0C80A78](v60, v12);
  v43 = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v49 = *(_QWORD *)(v14 - 8);
  v50 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v44 = (char *)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>);
  v23 = *(_QWORD *)(v22 - 8);
  v25 = MEMORY[0x1E0C80A78](v22, v24);
  v27 = (char *)v42 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v21, a2, v17, v25);
  v28 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  swift_retain();
  Ref.init<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v27, v22);
  v42[1] = swift_getKeyPath();
  v29 = (uint64_t)v43;
  v45 = a2;
  Capsule<>.root.getter();
  Capsule<>.rootID.getter();
  LOBYTE(v59.origin.x) = 1;
  v31 = v47;
  v30 = v48;
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v46, v11, v48);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  v32 = v44;
  SharedTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v30);
  outlined destroy of PKStrokeProperties(v29, (uint64_t (*)(_QWORD))type metadata accessor for Image);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v33 = (void (*)(CGRect *, _QWORD))Capsule.Ref<>.subscript.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  CROrderedSet.append(_:)();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v32, v50);
  v33(&v59, 0);
  swift_release();
  MaxY = CGRectGetMaxY(*(CGRect *)a3);
  v52 = v60;
  v53 = v28;
  v54 = &protocol witness table for Image;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v35 = CGRectGetMaxY(v59) + 64.0;
  if (MaxY > v35)
    v35 = MaxY;
  v37 = *(_QWORD *)a3;
  v36 = a3[1];
  v38 = v35 - v36;
  a3[3] = v35 - v36;
  v39 = *((_QWORD *)a3 + 2);
  v40 = (uint64_t (*)(CGRect *, _QWORD))Capsule.Ref<>.root.modify();
  v55 = v37;
  v56 = v36;
  v57 = v39;
  v58 = v38;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  return v40(&v59, 0);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(CGRect *, _QWORD);
  double MaxY;
  double v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t (*v40)(CGRect *, _QWORD);
  _QWORD v42[2];
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _UNKNOWN **v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  double v58;
  CGRect v59;
  uint64_t v60;

  v51 = a1;
  v5 = type metadata accessor for CRKeyPath();
  v47 = *(_QWORD *)(v5 - 8);
  v48 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v46 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v42 - v10;
  v60 = type metadata accessor for Link();
  MEMORY[0x1E0C80A78](v60, v12);
  v43 = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v49 = *(_QWORD *)(v14 - 8);
  v50 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v44 = (char *)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Link>);
  v23 = *(_QWORD *)(v22 - 8);
  v25 = MEMORY[0x1E0C80A78](v22, v24);
  v27 = (char *)v42 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v21, a2, v17, v25);
  v28 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  swift_retain();
  Ref.init<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v27, v22);
  v42[1] = swift_getKeyPath();
  v29 = (uint64_t)v43;
  v45 = a2;
  Capsule<>.root.getter();
  Capsule<>.rootID.getter();
  LOBYTE(v59.origin.x) = 4;
  v31 = v47;
  v30 = v48;
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v46, v11, v48);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  v32 = v44;
  SharedTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v30);
  outlined destroy of PKStrokeProperties(v29, (uint64_t (*)(_QWORD))type metadata accessor for Link);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v33 = (void (*)(CGRect *, _QWORD))Capsule.Ref<>.subscript.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  CROrderedSet.append(_:)();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v32, v50);
  v33(&v59, 0);
  swift_release();
  MaxY = CGRectGetMaxY(*(CGRect *)a3);
  v52 = v60;
  v53 = v28;
  v54 = &protocol witness table for Link;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v35 = CGRectGetMaxY(v59) + 64.0;
  if (MaxY > v35)
    v35 = MaxY;
  v37 = *(_QWORD *)a3;
  v36 = a3[1];
  v38 = v35 - v36;
  a3[3] = v35 - v36;
  v39 = *((_QWORD *)a3 + 2);
  v40 = (uint64_t (*)(CGRect *, _QWORD))Capsule.Ref<>.root.modify();
  v55 = v37;
  v56 = v36;
  v57 = v39;
  v58 = v38;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  return v40(&v59, 0);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(CGRect *, _QWORD);
  double MaxY;
  double v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t (*v40)(CGRect *, _QWORD);
  _QWORD v42[2];
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _UNKNOWN **v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  double v58;
  CGRect v59;
  uint64_t v60;

  v51 = a1;
  v5 = type metadata accessor for CRKeyPath();
  v47 = *(_QWORD *)(v5 - 8);
  v48 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v46 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v42 - v10;
  v60 = type metadata accessor for Shape();
  MEMORY[0x1E0C80A78](v60, v12);
  v43 = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v49 = *(_QWORD *)(v14 - 8);
  v50 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v44 = (char *)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Shape>);
  v23 = *(_QWORD *)(v22 - 8);
  v25 = MEMORY[0x1E0C80A78](v22, v24);
  v27 = (char *)v42 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v21, a2, v17, v25);
  v28 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  swift_retain();
  Ref.init<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v27, v22);
  v42[1] = swift_getKeyPath();
  v29 = (uint64_t)v43;
  v45 = a2;
  Capsule<>.root.getter();
  Capsule<>.rootID.getter();
  LOBYTE(v59.origin.x) = 5;
  v31 = v47;
  v30 = v48;
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v46, v11, v48);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  v32 = v44;
  SharedTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v30);
  outlined destroy of PKStrokeProperties(v29, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v33 = (void (*)(CGRect *, _QWORD))Capsule.Ref<>.subscript.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  CROrderedSet.append(_:)();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v32, v50);
  v33(&v59, 0);
  swift_release();
  MaxY = CGRectGetMaxY(*(CGRect *)a3);
  v52 = v60;
  v53 = v28;
  v54 = &protocol witness table for Shape;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v35 = CGRectGetMaxY(v59) + 64.0;
  if (MaxY > v35)
    v35 = MaxY;
  v37 = *(_QWORD *)a3;
  v36 = a3[1];
  v38 = v35 - v36;
  a3[3] = v35 - v36;
  v39 = *((_QWORD *)a3 + 2);
  v40 = (uint64_t (*)(CGRect *, _QWORD))Capsule.Ref<>.root.modify();
  v55 = v37;
  v56 = v36;
  v57 = v39;
  v58 = v38;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  return v40(&v59, 0);
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(CGRect *, _QWORD);
  double MaxY;
  double v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t (*v40)(CGRect *, _QWORD);
  _QWORD v42[2];
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _UNKNOWN **v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  double v58;
  CGRect v59;
  uint64_t v60;

  v51 = a1;
  v5 = type metadata accessor for CRKeyPath();
  v47 = *(_QWORD *)(v5 - 8);
  v48 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v46 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v42 - v10;
  v60 = type metadata accessor for GraphElement();
  MEMORY[0x1E0C80A78](v60, v12);
  v43 = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v49 = *(_QWORD *)(v14 - 8);
  v50 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v44 = (char *)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphElement>);
  v23 = *(_QWORD *)(v22 - 8);
  v25 = MEMORY[0x1E0C80A78](v22, v24);
  v27 = (char *)v42 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v21, a2, v17, v25);
  v28 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  swift_retain();
  Ref.init<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v27, v22);
  v42[1] = swift_getKeyPath();
  v29 = (uint64_t)v43;
  v45 = a2;
  Capsule<>.root.getter();
  Capsule<>.rootID.getter();
  LOBYTE(v59.origin.x) = 2;
  v31 = v47;
  v30 = v48;
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v46, v11, v48);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  v32 = v44;
  SharedTagged_9.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v30);
  outlined destroy of PKStrokeProperties(v29, (uint64_t (*)(_QWORD))type metadata accessor for GraphElement);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v33 = (void (*)(CGRect *, _QWORD))Capsule.Ref<>.subscript.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  CROrderedSet.append(_:)();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v32, v50);
  v33(&v59, 0);
  swift_release();
  MaxY = CGRectGetMaxY(*(CGRect *)a3);
  v52 = v60;
  v53 = v28;
  v54 = &protocol witness table for GraphElement;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v35 = CGRectGetMaxY(v59) + 64.0;
  if (MaxY > v35)
    v35 = MaxY;
  v37 = *(_QWORD *)a3;
  v36 = a3[1];
  v38 = v35 - v36;
  a3[3] = v35 - v36;
  v39 = *((_QWORD *)a3 + 2);
  v40 = (uint64_t (*)(CGRect *, _QWORD))Capsule.Ref<>.root.modify();
  v55 = v37;
  v56 = v36;
  v57 = v39;
  v58 = v38;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  return v40(&v59, 0);
}

uint64_t Capsule<>.addElements(fromItemProviders:location:completion:)(unint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  void *v10;
  uint64_t v11;
  _OWORD v13[2];
  uint64_t v14;

  type metadata accessor for CRContext();
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v10 = (void *)MEMORY[0x1DF0E3C90](0, v13);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  v11 = CRContext.assetManager.getter();

  LOBYTE(v13[0]) = 9;
  Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(v11, a1, *(uint64_t *)&a4, *(uint64_t *)&a5, 0, (unsigned __int8 *)v13, a2, a3);
  return swift_release();
}

uint64_t Capsule<>.addElements(assetManager:fromItemProviders:location:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  unsigned __int8 v7;

  v7 = 9;
  return Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(a1, a2, *(uint64_t *)&a5, *(uint64_t *)&a6, 0, &v7, a3, a4);
}

uint64_t Capsule<>.addElements(fromItemProviders:location:anchor:completion:)(unint64_t a1, uint64_t a2, uint64_t a3, char a4, char *a5, uint64_t a6, uint64_t a7)
{
  char v12;
  int v13;
  void *v14;
  uint64_t v15;
  _OWORD v17[2];
  uint64_t v18;

  v12 = *a5;
  v13 = a4 & 1;
  type metadata accessor for CRContext();
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  v14 = (void *)MEMORY[0x1DF0E3C90](0, v17);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  v15 = CRContext.assetManager.getter();

  LOBYTE(v17[0]) = v12;
  Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(v15, a1, a2, a3, v13, (unsigned __int8 *)v17, a6, a7);
  return swift_release();
}

uint64_t Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  char *v44;
  uint64_t v45;
  float64_t v46;
  uint64_t v47;
  uint64_t result;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  __int128 v67;
  char *v68;
  uint64_t v69;
  float64x2_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  void *v74;
  uint64_t v75;
  id v76;
  NSObject *v77;
  unsigned __int8 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  unsigned __int8 v83;
  uint64_t ObjCClassFromMetadata;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  void *v88;
  id v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t (*v108)();
  void *v109;
  _QWORD *v110;
  void *v111;
  uint64_t v112;
  id v113;
  NSObject *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  void *v120;
  double v121;
  double v122;
  char *v123;
  uint64_t v124;
  float64x2_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  void *v129;
  uint64_t v130;
  id v131;
  NSObject *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  void *v142;
  id v143;
  id v144;
  void *v145;
  int v146;
  void *v147;
  unsigned int v148;
  char *v149;
  uint64_t v150;
  _QWORD *v151;
  void *v152;
  uint64_t v153;
  id v154;
  NSObject *v155;
  void *v156;
  unsigned int v157;
  void *v158;
  NSDictionary v159;
  uint64_t v160;
  void *v161;
  void *v162;
  int v163;
  uint64_t v164;
  void *v165;
  void *v166;
  unsigned int v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  void *v173;
  uint64_t v174;
  id v175;
  NSObject *v176;
  void *v177;
  uint64_t v178;
  void *v179;
  id v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  _QWORD *v184;
  void *v185;
  uint64_t v186;
  NSObject *v187;
  uint64_t v188;
  void *v189;
  id v190;
  NSObject *v191;
  char *v192;
  char *v193;
  uint64_t v194;
  float64_t v195;
  char *v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  char *v200;
  unint64_t v201;
  __int128 v202;
  char *v203;
  char *v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  int v220;
  char *v221;
  unint64_t v222;
  float64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  void (*v227)(char *, uint64_t, uint64_t);
  uint64_t v228;
  char *v229;
  dispatch_group_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  float64x2_t v236;
  uint64_t v237;
  uint64_t v238;
  float64x2_t v239;
  float64x2_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t aBlock;
  uint64_t v244;
  uint64_t (*v245)();
  void *v246;
  uint64_t (*v247)();
  _QWORD *v248;
  _QWORD v249[2];
  __int128 v250;
  char v251;
  _QWORD v252[2];
  __int128 v253;
  char v254;
  _QWORD v255[4];
  char v256;

  v213 = a8;
  v212 = a7;
  LODWORD(v236.f64[0]) = a5;
  v237 = a4;
  *(_QWORD *)&v239.f64[0] = a3;
  v217 = a1;
  v216 = type metadata accessor for DispatchWorkItemFlags();
  v215 = *(_QWORD *)(v216 - 8);
  MEMORY[0x1E0C80A78](v216, v10);
  v214 = (char *)&v196 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v208 = type metadata accessor for DispatchQoS.QoSClass();
  v207 = *(_QWORD *)(v208 - 8);
  MEMORY[0x1E0C80A78](v208, v12);
  v206 = (char *)&v196 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v235 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v234 = *(_QWORD *)(v235 - 8);
  MEMORY[0x1E0C80A78](v235, v14);
  v200 = (char *)&v196 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v203 = (char *)&v196 - v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v204 = (char *)&v196 - v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v221 = (char *)&v196 - v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v218 = (char *)&v196 - v27;
  v238 = type metadata accessor for UTType();
  v228 = *(_QWORD *)(v238 - 8);
  MEMORY[0x1E0C80A78](v238, v28);
  v30 = (char *)&v196 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v233 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v231 = *(_QWORD *)(v233 - 8);
  MEMORY[0x1E0C80A78](v233, v31);
  v33 = (char *)&v196 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for OS_dispatch_queue.Attributes();
  v35 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v34, v36);
  v211 = type metadata accessor for DispatchQoS();
  v210 = *(_QWORD *)(v211 - 8);
  MEMORY[0x1E0C80A78](v211, v37);
  v39 = (char *)&v196 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v220 = *a6;
  v40 = a2;
  v230 = dispatch_group_create();
  v41 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.unspecified.getter();
  aBlock = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v35, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v231 + 104))(v33, *MEMORY[0x1E0DEF8D0], v233);
  v209 = v39;
  v205 = v41;
  v231 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v42 = v235;
  v233 = swift_allocBox();
  v43 = *(void (**)(char *, uint64_t, uint64_t))(v234 + 16);
  v229 = v44;
  v227 = v43;
  v43(v44, v232, v42);
  v232 = swift_allocObject();
  *(_QWORD *)(v232 + 16) = 0;
  v45 = v237;
  if ((LOBYTE(v236.f64[0]) & 1) != 0)
    v45 = 0;
  v224 = v45;
  v46 = v239.f64[0];
  if ((LOBYTE(v236.f64[0]) & 1) != 0)
    v46 = 0.0;
  v223 = v46;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v47 = result;
  }
  else
  {
    v47 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
  }
  v49 = v230;
  v50 = v238;
  if (v47)
  {
    if (v47 >= 1)
    {
      v226 = a2 & 0xC000000000000001;
      swift_beginAccess();
      v51 = 0;
      v219 = *MEMORY[0x1E0CD12D8];
      v237 = *MEMORY[0x1E0DB0770];
      v239 = 0u;
      __asm { FMOV            V0.2D, #1.0 }
      v202 = _Q0;
      v199 = MEMORY[0x1E0DEE9B8] + 8;
      v201 = (unint64_t)"generationFailed";
      v198 = 0x80000001DDF4B920;
      v196 = "reStyleEditingView.swift";
      v197 = 0x80000001DDF4E930;
      v222 = a2;
      v225 = v47;
      while (1)
      {
        if (v226)
          v56 = (id)MEMORY[0x1DF0E4D64](v51, v40);
        else
          v56 = *(id *)(v40 + 8 * v51 + 32);
        v57 = v56;
        static UTType.image.getter();
        v58 = UTType.identifier.getter();
        v60 = v59;
        v61 = *(void (**)(char *, uint64_t))(v228 + 8);
        v61(v30, v50);
        v62 = (void *)MEMORY[0x1DF0E41AC](v58, v60);
        swift_bridgeObjectRelease();
        LODWORD(v60) = objc_msgSend(v57, sel_hasItemConformingToTypeIdentifier_, v62);

        if ((_DWORD)v60 && (objc_msgSend(v57, sel_hasItemConformingToTypeIdentifier_, v219) & 1) == 0)
        {
          dispatch_group_enter(v49);
          objc_msgSend(v57, sel_preferredPresentationSize);
          if (v91 != 0.0 || (v92 = 0.0, v93 = 0.0, v90 != 0.0))
          {
            objc_msgSend(v57, sel_preferredPresentationSize, v196);
            v96 = v95;
            if (v95 >= 64.0)
            {
              v97 = v94;
            }
            else
            {
              if (one-time initialization token for canvasElementDefaultSize != -1)
                swift_once();
              v96 = *(double *)&static UIConstants.canvasElementDefaultSize;
              v97 = unk_1F042ED20;
            }
            if (v96 > v97)
              v121 = v96;
            else
              v121 = v97;
            if (one-time initialization token for maximumDropCanvasElementDimension != -1)
              swift_once();
            v122 = fmin(*(double *)&static UIConstants.maximumDropCanvasElementDimension / v121, 1.0);
            v92 = v96 * v122;
            v93 = v97 * v122;
          }
          v123 = v218;
          v124 = v235;
          v227(v218, (uint64_t)v229, v235);
          swift_getKeyPath();
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
          Capsule<>.subscript.getter();
          swift_release();
          (*(void (**)(char *, uint64_t))(v234 + 8))(v123, v124);
          v125 = v240;
          v126 = v241;
          v127 = v242;
          *(float64_t *)v255 = v223;
          v255[1] = v224;
          *(double *)&v255[2] = v92;
          *(double *)&v255[3] = v93;
          v256 = 0;
          v128 = (_QWORD *)swift_allocObject();
          v129 = (void *)v231;
          v130 = v232;
          v128[2] = v231;
          v128[3] = v130;
          v128[4] = v233;
          v128[5] = v49;
          v131 = v129;
          swift_retain();
          swift_retain();
          v132 = v49;
          static UTType.image.getter();
          v133 = UTType.identifier.getter();
          v135 = v134;
          v50 = v238;
          v61(v30, v238);
          v136 = (void *)MEMORY[0x1DF0E41AC](v133, v135);
          swift_bridgeObjectRelease();
          LOBYTE(v135) = objc_msgSend(v57, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v136, 0);

          if ((v135 & 1) != 0)
          {
            static UTType.image.getter();
            v137 = UTType.identifier.getter();
            v139 = v138;
            v61(v30, v50);
            v140 = (void *)MEMORY[0x1DF0E41AC](v137, v139);
            swift_bridgeObjectRelease();
            v141 = swift_allocObject();
            *(_QWORD *)(v141 + 16) = v217;
            *(float64x2_t *)(v141 + 24) = v125;
            *(_QWORD *)(v141 + 40) = v126;
            *(_QWORD *)(v141 + 48) = v127;
            outlined init with take of CGRect?((uint64_t)v255, v141 + 56);
            *(_QWORD *)(v141 + 96) = 0;
            *(_BYTE *)(v141 + 104) = v220;
            *(float64x2_t *)(v141 + 112) = v239;
            *(_BYTE *)(v141 + 128) = 0;
            *(_QWORD *)(v141 + 136) = v57;
            *(_QWORD *)(v141 + 144) = partial apply for closure #1 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
            *(_QWORD *)(v141 + 152) = v128;
            v247 = (uint64_t (*)())partial apply for closure #1 in static ImageLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:);
            v248 = (_QWORD *)v141;
            aBlock = MEMORY[0x1E0C809B0];
            v244 = 1107296256;
            v245 = (uint64_t (*)())thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed Error?) -> ();
            v246 = &block_descriptor_58;
            v142 = _Block_copy(&aBlock);
            swift_retain();
            v143 = v57;
            swift_retain();
            swift_release();
            v144 = objc_msgSend(v143, sel_loadDataRepresentationForTypeIdentifier_completionHandler_, v140, v142);
            _Block_release(v142);
            swift_release();

            v50 = v238;
          }
          else
          {
            swift_release();
            dispatch_group_leave(v132);
          }
          goto LABEL_55;
        }
        if ((objc_msgSend(v57, sel_hasItemConformingToTypeIdentifier_, v237, v196) & 1) != 0)
          goto LABEL_18;
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for SYContentItem);
        if ((objc_msgSend(v57, sel_canLoadObjectOfClass_, swift_getObjCClassFromMetadata()) & 1) != 0)
          goto LABEL_18;
        static UTType.url.getter();
        v63 = UTType.identifier.getter();
        v65 = v64;
        v61(v30, v238);
        v66 = (void *)MEMORY[0x1DF0E41AC](v63, v65);
        swift_bridgeObjectRelease();
        LODWORD(v65) = objc_msgSend(v57, sel_hasItemConformingToTypeIdentifier_, v66);

        if ((_DWORD)v65)
        {
LABEL_18:
          dispatch_group_enter(v49);
          if (one-time initialization token for linkSize != -1)
            swift_once();
          v67 = static UIConstants.linkSize;
          v68 = v221;
          v69 = v235;
          v227(v221, (uint64_t)v229, v235);
          swift_getKeyPath();
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
          Capsule<>.subscript.getter();
          swift_release();
          (*(void (**)(char *, uint64_t))(v234 + 8))(v68, v69);
          v70 = v240;
          v71 = v241;
          v72 = v242;
          *(float64_t *)v249 = v223;
          v249[1] = v224;
          v250 = v67;
          v251 = 0;
          v73 = (_QWORD *)swift_allocObject();
          v74 = (void *)v231;
          v75 = v232;
          v73[2] = v231;
          v73[3] = v75;
          v73[4] = v233;
          v73[5] = v49;
          v76 = v74;
          swift_retain();
          swift_retain();
          v77 = v49;
          if ((objc_msgSend(v57, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v237, 0) & 1) != 0)
          {
            v78 = 1;
          }
          else
          {
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for SYContentItem);
            v78 = objc_msgSend(v57, sel_canLoadObjectOfClass_, swift_getObjCClassFromMetadata());
          }
          static UTType.url.getter();
          v79 = UTType.identifier.getter();
          v81 = v80;
          v61(v30, v238);
          v82 = (void *)MEMORY[0x1DF0E41AC](v79, v81);
          swift_bridgeObjectRelease();
          v83 = objc_msgSend(v57, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v82, 0);

          if ((v78 & 1) != 0)
          {
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for SYContentItem);
            ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
            v85 = swift_allocObject();
            *(_QWORD *)(v85 + 16) = partial apply for closure #2 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
            *(_QWORD *)(v85 + 24) = v73;
            *(float64x2_t *)(v85 + 32) = v70;
            *(_QWORD *)(v85 + 48) = v71;
            *(_QWORD *)(v85 + 56) = v72;
            outlined init with take of CGRect?((uint64_t)v249, v85 + 64);
            *(_QWORD *)(v85 + 104) = 0;
            *(_BYTE *)(v85 + 112) = v220;
            *(float64x2_t *)(v85 + 120) = v239;
            *(_BYTE *)(v85 + 136) = 0;
            v247 = (uint64_t (*)())partial apply for closure #1 in static LinkLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:);
            v248 = (_QWORD *)v85;
            aBlock = MEMORY[0x1E0C809B0];
            v244 = 1107296256;
            v245 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
            v86 = &block_descriptor_49_2;
            goto LABEL_27;
          }
          if ((v83 & 1) != 0)
          {
            type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSURL);
            ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
            v87 = swift_allocObject();
            *(_QWORD *)(v87 + 16) = partial apply for closure #2 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
            *(_QWORD *)(v87 + 24) = v73;
            *(float64x2_t *)(v87 + 32) = v70;
            *(_QWORD *)(v87 + 48) = v71;
            *(_QWORD *)(v87 + 56) = v72;
            outlined init with take of CGRect?((uint64_t)v249, v87 + 64);
            *(_QWORD *)(v87 + 104) = 0;
            *(_BYTE *)(v87 + 112) = v220;
            *(float64x2_t *)(v87 + 120) = v239;
            *(_BYTE *)(v87 + 136) = 0;
            v247 = (uint64_t (*)())partial apply for closure #2 in static LinkLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:);
            v248 = (_QWORD *)v87;
            aBlock = MEMORY[0x1E0C809B0];
            v244 = 1107296256;
            v245 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
            v86 = &block_descriptor_43_0;
LABEL_27:
            v246 = v86;
            v88 = _Block_copy(&aBlock);
            swift_retain();
            swift_release();
            v89 = objc_msgSend(v57, sel_loadObjectOfClass_completionHandler_, ObjCClassFromMetadata, v88);
            _Block_release(v88);
            swift_release();

          }
          else
          {
            swift_release();
            dispatch_group_leave(v77);
          }
          v49 = v230;
          v50 = v238;
          _ZF = one-time initialization token for dropItemSpacing == -1;
          v40 = v222;
LABEL_56:
          v47 = v225;
          if (!_ZF)
            swift_once();
          v236 = (float64x2_t)static UIConstants.dropItemSpacing;

          v239 = vaddq_f64(v239, v236);
          goto LABEL_59;
        }
        static UTType.utf8PlainText.getter();
        v99 = UTType.identifier.getter();
        v101 = v100;
        v50 = v238;
        v61(v30, v238);
        v102 = (void *)MEMORY[0x1DF0E41AC](v99, v101);
        swift_bridgeObjectRelease();
        LODWORD(v101) = objc_msgSend(v57, sel_hasItemConformingToTypeIdentifier_, v102);

        if ((_DWORD)v101)
        {
          dispatch_group_enter(v49);
          v103 = v204;
          v104 = v235;
          v227(v204, (uint64_t)v229, v235);
          swift_getKeyPath();
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
          Capsule<>.subscript.getter();
          swift_release();
          v105 = v104;
          v50 = v238;
          (*(void (**)(char *, uint64_t))(v234 + 8))(v103, v105);
          v106 = aBlock;
          v107 = v244;
          v108 = v245;
          v109 = v246;
          *(float64_t *)v252 = v223;
          v252[1] = v224;
          v253 = v202;
          v254 = 0;
          v110 = (_QWORD *)swift_allocObject();
          v111 = (void *)v231;
          v112 = v232;
          v110[2] = v231;
          v110[3] = v112;
          v110[4] = v233;
          v110[5] = v49;
          v113 = v111;
          swift_retain();
          swift_retain();
          v114 = v49;
          static UTType.utf8PlainText.getter();
          v115 = UTType.identifier.getter();
          v117 = v116;
          v61(v30, v50);
          v118 = (void *)MEMORY[0x1DF0E41AC](v115, v117);
          swift_bridgeObjectRelease();
          LODWORD(v117) = objc_msgSend(v57, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v118, 0);

          if ((_DWORD)v117)
          {
            v119 = swift_allocObject();
            *(_QWORD *)(v119 + 16) = v106;
            *(_QWORD *)(v119 + 24) = v107;
            *(_QWORD *)(v119 + 32) = v108;
            *(_QWORD *)(v119 + 40) = v109;
            outlined init with take of CGRect?((uint64_t)v252, v119 + 48);
            *(_QWORD *)(v119 + 88) = 0;
            *(_BYTE *)(v119 + 96) = v220;
            *(float64x2_t *)(v119 + 104) = v239;
            *(_BYTE *)(v119 + 120) = 0;
            *(_QWORD *)(v119 + 128) = partial apply for closure #3 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
            *(_QWORD *)(v119 + 136) = v110;
            lazy protocol witness table accessor for type String and conformance String();
            swift_retain();
            v120 = (void *)NSItemProvider.loadObject<A>(ofClass:completionHandler:)();
            swift_release();

            swift_release();
          }
          else
          {
            swift_release();
            dispatch_group_leave(v114);
          }
          v40 = v222;
LABEL_55:
          _ZF = one-time initialization token for dropItemSpacing == -1;
          v49 = v230;
          goto LABEL_56;
        }
        v145 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
        v146 = objc_msgSend(v57, sel_hasItemConformingToTypeIdentifier_, v145);

        if ((v146 & 1) != 0
          || (v147 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, v201 | 0x8000000000000000),
              v148 = objc_msgSend(v57, sel_hasItemConformingToTypeIdentifier_, v147),
              v147,
              v148))
        {
          dispatch_group_enter(v49);
          v149 = v203;
          v150 = v235;
          v227(v203, (uint64_t)v229, v235);
          swift_getKeyPath();
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
          Capsule<>.subscript.getter();
          swift_release();
          (*(void (**)(char *, uint64_t))(v234 + 8))(v149, v150);
          v151 = (_QWORD *)swift_allocObject();
          v152 = (void *)v231;
          v153 = v232;
          v151[2] = v231;
          v151[3] = v153;
          v151[4] = v233;
          v151[5] = v49;
          v154 = v152;
          swift_retain();
          swift_retain();
          v155 = v49;
          v156 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
          v157 = objc_msgSend(v57, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v156, 0);

          if (v157)
          {
            v158 = (void *)MEMORY[0x1DF0E41AC](0x6C7070612E6D6F63, 0xEF72657061702E65);
            specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
            v159.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            v160 = swift_allocObject();
            *(_QWORD *)(v160 + 16) = partial apply for closure #4 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
            *(_QWORD *)(v160 + 24) = v151;
            v247 = closure #1 in static PaperLayout.loadItemProvider(_:canvasFrame:frame:anchor:offset:assetManager:dragItem:typeIdentifier:completion:)partial apply;
            v248 = (_QWORD *)v160;
            aBlock = MEMORY[0x1E0C809B0];
            v244 = 1107296256;
            v245 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
            v161 = &block_descriptor_28_0;
          }
          else
          {
            v162 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, v198);
            v163 = objc_msgSend(v57, sel_hasRepresentationConformingToTypeIdentifier_fileOptions_, v162, 0);

            if ((v163 & 1) == 0)
            {
              swift_release();
              dispatch_group_leave(v155);

              goto LABEL_71;
            }
            v158 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000017, v201 | 0x8000000000000000);
            specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
            v159.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            v164 = swift_allocObject();
            *(_QWORD *)(v164 + 16) = partial apply for closure #4 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
            *(_QWORD *)(v164 + 24) = v151;
            v247 = (uint64_t (*)())partial apply for closure #1 in static PaperLayout.loadItemProvider(_:canvasFrame:frame:anchor:offset:assetManager:dragItem:typeIdentifier:completion:);
            v248 = (_QWORD *)v164;
            aBlock = MEMORY[0x1E0C809B0];
            v244 = 1107296256;
            v245 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSSecureCoding?, @guaranteed Error?) -> ();
            v161 = &block_descriptor_21_0;
          }
          v246 = v161;
          v165 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          objc_msgSend(v57, sel_loadItemForTypeIdentifier_options_completionHandler_, v158, v159.super.isa, v165);
          _Block_release(v165);

          swift_release();
          v49 = v230;
        }
        else
        {
          v166 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000018, v197);
          v167 = objc_msgSend(v57, sel_hasItemConformingToTypeIdentifier_, v166);

          if (!v167)
          {

            v40 = v222;
            goto LABEL_59;
          }
          dispatch_group_enter(v49);
          if (one-time initialization token for defaultGraphSize != -1)
            swift_once();
          v168 = v200;
          v169 = v235;
          v227(v200, (uint64_t)v229, v235);
          swift_getKeyPath();
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
          Capsule<>.subscript.getter();
          swift_release();
          (*(void (**)(char *, uint64_t))(v234 + 8))(v168, v169);
          v236 = v240;
          v170 = v241;
          v171 = v242;
          v172 = (_QWORD *)swift_allocObject();
          v173 = (void *)v231;
          v174 = v232;
          v172[2] = v231;
          v172[3] = v174;
          v172[4] = v233;
          v172[5] = v49;
          v175 = v173;
          swift_retain();
          swift_retain();
          v176 = v49;
          v177 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000018, (unint64_t)v196 | 0x8000000000000000);
          v178 = swift_allocObject();
          *(float64x2_t *)(v178 + 16) = v236;
          *(_QWORD *)(v178 + 32) = v170;
          *(_QWORD *)(v178 + 40) = v171;
          *(_QWORD *)(v178 + 48) = partial apply for closure #5 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
          *(_QWORD *)(v178 + 56) = v172;
          v247 = (uint64_t (*)())partial apply for closure #1 in static GraphLayout.loadItemProvider(_:canvasFrame:frame:rotation:anchor:offset:assetManager:dragItem:completion:);
          v248 = (_QWORD *)v178;
          aBlock = MEMORY[0x1E0C809B0];
          v244 = 1107296256;
          v245 = (uint64_t (*)())thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Data?, @guaranteed Error?) -> ();
          v246 = &block_descriptor_12_2;
          v179 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          v180 = objc_msgSend(v57, sel_loadDataRepresentationForTypeIdentifier_completionHandler_, v177, v179);
          _Block_release(v179);
          swift_release();

          if (one-time initialization token for dropItemSpacing != -1)
            swift_once();
          v236 = (float64x2_t)static UIConstants.dropItemSpacing;

          v239 = vaddq_f64(v239, v236);
        }
LABEL_71:
        v40 = v222;
        v50 = v238;
        v47 = v225;
LABEL_59:
        if (v47 == ++v51)
          goto LABEL_73;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_73:
    swift_bridgeObjectRelease();
    v181 = v207;
    v182 = v206;
    v183 = v208;
    (*(void (**)(char *, _QWORD, uint64_t))(v207 + 104))(v206, *MEMORY[0x1E0DEF540], v208);
    *(_QWORD *)&v239.f64[0] = static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v181 + 8))(v182, v183);
    v184 = (_QWORD *)swift_allocObject();
    v185 = (void *)v231;
    v184[2] = v231;
    v184[3] = v49;
    v186 = v213;
    v184[4] = v212;
    v184[5] = v186;
    v187 = v49;
    v188 = v233;
    v184[6] = v232;
    v184[7] = v188;
    v247 = partial apply for closure #6 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
    v248 = v184;
    aBlock = MEMORY[0x1E0C809B0];
    v244 = 1107296256;
    v245 = (uint64_t (*)())thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v246 = &block_descriptor_71;
    v189 = _Block_copy(&aBlock);
    v190 = v185;
    swift_retain();
    swift_retain();
    v191 = v187;
    swift_retain();
    v192 = v209;
    static DispatchQoS.unspecified.getter();
    *(_QWORD *)&v240.f64[0] = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
    v193 = v214;
    v194 = v216;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    v195 = v239.f64[0];
    OS_dispatch_group.notify(qos:flags:queue:execute:)();
    _Block_release(v189);

    (*(void (**)(char *, uint64_t))(v215 + 8))(v193, v194);
    (*(void (**)(char *, uint64_t))(v210 + 8))(v192, v211);
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, NSObject *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t (*v21)();
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t result;
  dispatch_queue_t v29;
  dispatch_group_t v30;
  _QWORD aBlock[6];

  v29 = a2;
  v30 = a5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11, v14);
  v15 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v29 - v18;
  v20 = swift_projectBox();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v10, &demangling cache variable for type metadata for Capsule<Image>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for Capsule<Image>?);
    v21 = 0;
LABEL_4:
    dispatch_group_leave(v30);
    return outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v21);
  }
  v22 = a3 + 16;
  v23 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v23(v19, v10, v11);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v19, v11);
  v24 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = v22;
  *(_QWORD *)(v25 + 24) = v20;
  v23((char *)(v25 + v24), v15, v11);
  v26 = swift_allocObject();
  v21 = partial apply for closure #1 in closure #1 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
  *(_QWORD *)(v26 + 16) = partial apply for closure #1 in closure #1 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
  *(_QWORD *)(v26 + 24) = v25;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v26;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_67;
  v27 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v29, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v11);
  LOBYTE(v27) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v27 & 1) == 0)
    goto LABEL_4;
  __break(1u);
  return result;
}

uint64_t closure #2 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, NSObject *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t (*v21)();
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t result;
  dispatch_queue_t v29;
  dispatch_group_t v30;
  _QWORD aBlock[6];

  v29 = a2;
  v30 = a5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11, v14);
  v15 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v29 - v18;
  v20 = swift_projectBox();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v10, &demangling cache variable for type metadata for Capsule<Link>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for Capsule<Link>?);
    v21 = 0;
LABEL_4:
    dispatch_group_leave(v30);
    return outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v21);
  }
  v22 = a3 + 16;
  v23 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v23(v19, v10, v11);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v19, v11);
  v24 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = v22;
  *(_QWORD *)(v25 + 24) = v20;
  v23((char *)(v25 + v24), v15, v11);
  v26 = swift_allocObject();
  v21 = partial apply for closure #1 in closure #2 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
  *(_QWORD *)(v26 + 16) = partial apply for closure #1 in closure #2 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
  *(_QWORD *)(v26 + 24) = v25;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v26;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_82;
  v27 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v29, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v11);
  LOBYTE(v27) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v27 & 1) == 0)
    goto LABEL_4;
  __break(1u);
  return result;
}

uint64_t closure #3 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, NSObject *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t (*v21)();
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t result;
  dispatch_queue_t v29;
  dispatch_group_t v30;
  _QWORD aBlock[6];

  v29 = a2;
  v30 = a5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Shape>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11, v14);
  v15 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v29 - v18;
  v20 = swift_projectBox();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v10, &demangling cache variable for type metadata for Capsule<Shape>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for Capsule<Shape>?);
    v21 = 0;
LABEL_4:
    dispatch_group_leave(v30);
    return outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v21);
  }
  v22 = a3 + 16;
  v23 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v23(v19, v10, v11);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v19, v11);
  v24 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = v22;
  *(_QWORD *)(v25 + 24) = v20;
  v23((char *)(v25 + v24), v15, v11);
  v26 = swift_allocObject();
  v21 = partial apply for closure #1 in closure #3 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
  *(_QWORD *)(v26 + 16) = partial apply for closure #1 in closure #3 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
  *(_QWORD *)(v26 + 24) = v25;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v26;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_92_0;
  v27 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v29, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v11);
  LOBYTE(v27) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v27 & 1) == 0)
    goto LABEL_4;
  __break(1u);
  return result;
}

uint64_t closure #4 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, NSObject *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t (*v24)();
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void (*v31)(char *, uint64_t);
  uint64_t result;
  char *v33;
  uint64_t v34;
  dispatch_queue_t v35;
  dispatch_group_t v36;
  _QWORD aBlock[6];

  v35 = a2;
  v36 = a5;
  v34 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x1E0C80A78](v10, v13);
  v14 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v33 - v17;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v33 - v21;
  v23 = swift_projectBox();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
    v24 = 0;
LABEL_4:
    dispatch_group_leave(v36);
    return outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v24);
  }
  v25 = v34 + 16;
  v26 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v26(v22, v9, v10);
  v33 = v18;
  Capsule.copy()();
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v18, v10);
  v27 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = v25;
  *(_QWORD *)(v28 + 24) = v23;
  v26((char *)(v28 + v27), v14, v10);
  v29 = swift_allocObject();
  v24 = partial apply for closure #1 in closure #4 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
  *(_QWORD *)(v29 + 16) = partial apply for closure #1 in closure #4 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
  *(_QWORD *)(v29 + 24) = v28;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v29;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_102_1;
  v30 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v35, v30);
  _Block_release(v30);
  v31 = *(void (**)(char *, uint64_t))(v11 + 8);
  v31(v33, v10);
  v31(v22, v10);
  LOBYTE(v31) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v31 & 1) == 0)
    goto LABEL_4;
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #4 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(_QWORD *a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_beginAccess();
  if (__OFADD__(*a1, 1))
  {
    __break(1u);
  }
  else
  {
    ++*a1;
    MEMORY[0x1E0C80A78](result, v3);
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
    Capsule.callAsFunction<A>(_:)();
    return swift_endAccess();
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #4 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  void (*v22)(char *, _QWORD);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31[32];
  uint64_t v32;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v32 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v27 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  v14 = *(_QWORD *)(v13 - 8);
  v25 = v13;
  v26 = v14;
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Paper();
  v18 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  v29 = a1;
  Capsule.Ref.import<A>(_:)();
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v28 = v18;
  Capsule<>.subscript.getter();
  v19 = v25;
  swift_release();
  v20 = v30;
  CROrderedSet.makeIterator()();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v20);
  CROrderedSet.Iterator.next()();
  v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
  if (v21(v9, 1, v2) != 1)
  {
    v27 = *(_QWORD *)(v32 + 32);
    do
    {
      ((void (*)(char *, char *, uint64_t))v27)(v5, v9, v2);
      swift_getKeyPath();
      v22 = (void (*)(char *, _QWORD))Capsule.Ref<>.subscript.modify();
      CROrderedSet.append(_:)();
      v22(v31, 0);
      swift_release();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v2);
      CROrderedSet.Iterator.next()();
    }
    while (v21(v9, 1, v2) != 1);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v17, v19);
}

uint64_t closure #5 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, NSObject *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t (*v21)();
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t result;
  dispatch_queue_t v29;
  dispatch_group_t v30;
  _QWORD aBlock[6];

  v29 = a2;
  v30 = a5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<GraphElement>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11, v14);
  v15 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v29 - v18;
  v20 = swift_projectBox();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v10, &demangling cache variable for type metadata for Capsule<GraphElement>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for Capsule<GraphElement>?);
    v21 = 0;
LABEL_4:
    dispatch_group_leave(v30);
    return outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v21);
  }
  v22 = a3 + 16;
  v23 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v23(v19, v10, v11);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v19, v11);
  v24 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = v22;
  *(_QWORD *)(v25 + 24) = v20;
  v23((char *)(v25 + v24), v15, v11);
  v26 = swift_allocObject();
  v21 = partial apply for closure #1 in closure #5 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
  *(_QWORD *)(v26 + 16) = partial apply for closure #1 in closure #5 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:);
  *(_QWORD *)(v26 + 24) = v25;
  aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
  aBlock[5] = v26;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_112;
  v27 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v29, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v11);
  LOBYTE(v27) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v27 & 1) == 0)
    goto LABEL_4;
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = swift_beginAccess();
  if (__OFADD__(*a1, 1))
  {
    __break(1u);
  }
  else
  {
    ++*a1;
    swift_beginAccess();
    specialized Capsule<>.addCanvasElement<A>(_:)(a3);
    return swift_endAccess();
  }
  return result;
}

uint64_t closure #6 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *), uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[24];

  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v12 = swift_projectBox();
  OS_dispatch_group.wait()();
  swift_beginAccess();
  if (*(uint64_t *)(a5 + 16) < 1)
  {
    v13 = *(_QWORD *)(v11 - 8);
    v14 = 1;
  }
  else
  {
    swift_beginAccess();
    v13 = *(_QWORD *)(v11 - 8);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v10, v12, v11);
    v14 = 0;
  }
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v10, v14, 1, v11);
  a3(v10);
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>?);
}

uint64_t Capsule<>.write(_:at:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void (*v8)(unint64_t, _QWORD, uint64_t);

  v0 = type metadata accessor for URL();
  MEMORY[0x1E0C80A78](v0, v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDataStoreBundle<Paper>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
  v2 = type metadata accessor for CRCodableVersion();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1DDF33AB0;
  v7 = v6 + v5;
  v8 = *(void (**)(unint64_t, _QWORD, uint64_t))(v3 + 104);
  v8(v7, *MEMORY[0x1E0D12370], v2);
  v8(v7 + v4, *MEMORY[0x1E0D12378], v2);
  if (one-time initialization token for allFileFormatVersions != -1)
    swift_once();
  static CRDataStoreBundle.write(_:model:url:allowedEncodings:allowedAppFormats:)();
  return swift_bridgeObjectRelease();
}

void Capsule<>.write(at:)()
{
  void *v0;
  _OWORD v1[2];
  uint64_t v2;

  type metadata accessor for CRContext();
  v2 = 0;
  memset(v1, 0, sizeof(v1));
  v0 = (void *)MEMORY[0x1DF0E3C90](0, v1);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v1, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  Capsule<>.write(_:at:)();

}

void UITextView.mergeWithUpdatedPaper(_:intoAttachment:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v4 = objc_msgSend(v3, sel__pk_viewProviderForAttachment_atCharacterIndex_createIfNeeded_, a2, a3, 1);
  if (v4)
  {
    v9 = v4;
    v5 = objc_msgSend(v4, sel_view);
    if (v5)
    {
      v6 = v5;
      type metadata accessor for PaperTextAttachmentView();
      v7 = swift_dynamicCastClass();
      if (v7)
      {
        MEMORY[0x1E0C80A78](v7, v8);
        specialized Canvas.undoable(newChange:persistSelection:action:)(0, 0, (uint64_t (*)(double))partial apply for closure #1 in UITextView.mergeWithUpdatedPaper(_:intoAttachment:at:));

        return;
      }

    }
  }
}

void closure #1 in UITextView.mergeWithUpdatedPaper(_:intoAttachment:at:)(uint64_t a1)
{
  void *v1;
  id v2;
  char v3;

  v1 = *(void **)(a1 + direct field offset for Canvas.paperView);
  swift_beginAccess();
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  type metadata accessor for Paper();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  Capsule.merge<A>(_:)();
  swift_endAccess();

  v3 = 3;
  PaperTextAttachmentView.forwardChanges(from:)((PaperKit::AnyCanvas::MergeSource)&v3);
}

uint64_t partial apply for closure #1 in Capsule<>.init(drawing:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Capsule<>.init(drawing:)(*(double *)(v1 + 16), *(double *)(v1 + 24), *(double *)(v1 + 32), *(double *)(v1 + 40), a1, *(_QWORD *)(v1 + 48));
}

uint64_t sub_1DDEF70A0()
{
  return swift_deallocObject();
}

uint64_t sub_1DDEF70B0()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #6 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)()
{
  uint64_t v0;

  return closure #6 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(_BYTE *))(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t block_copy_helper_71(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_71()
{
  return swift_release();
}

uint64_t partial apply for closure #5 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t a1)
{
  uint64_t v1;

  return closure #5 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(NSObject **)(v1 + 40));
}

uint64_t sub_1DDEF7134()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t a1)
{
  uint64_t v1;

  return closure #4 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(NSObject **)(v1 + 40));
}

uint64_t sub_1DDEF7168()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t a1)
{
  uint64_t v1;

  return closure #3 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(NSObject **)(v1 + 40));
}

uint64_t sub_1DDEF719C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(NSObject **)(v1 + 40));
}

uint64_t sub_1DDEF71D0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_5Tm_0()
{
  uint64_t v0;

  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(NSObject **)(v1 + 40));
}

uint64_t sub_1DDEF7240()
{
  uint64_t v0;

  swift_release();

  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in UITextView.mergeWithUpdatedPaper(_:intoAttachment:at:)()
{
  uint64_t v0;

  closure #1 in UITextView.mergeWithUpdatedPaper(_:intoAttachment:at:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1DDEF727C()
{
  return objectdestroy_60Tm(&demangling cache variable for type metadata for Capsule<Image>);
}

uint64_t partial apply for closure #1 in closure #1 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)()
{
  return partial apply for closure #1 in closure #1 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(&demangling cache variable for type metadata for Capsule<Image>);
}

uint64_t sub_1DDEF729C()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in Capsule<>.addCanvasElement<A>(_:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in Capsule<>.addCanvasElement<A>(_:)(a1, *(_QWORD *)(v1 + 16), *(double **)(v1 + 24));
}

{
  uint64_t v1;

  return specialized closure #1 in Capsule<>.addCanvasElement<A>(_:)(a1, *(_QWORD *)(v1 + 16), *(double **)(v1 + 24));
}

{
  uint64_t v1;

  return specialized closure #1 in Capsule<>.addCanvasElement<A>(_:)(a1, *(_QWORD *)(v1 + 16), *(double **)(v1 + 24));
}

{
  uint64_t v1;

  return specialized closure #1 in Capsule<>.addCanvasElement<A>(_:)(a1, *(_QWORD *)(v1 + 16), *(double **)(v1 + 24));
}

void sub_1DDEF72C4(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(double *)a3 = (*(double (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + a1 - 8) + 8) + 8))(*(_QWORD *)(a2 + a1 - 24));
  *(_QWORD *)(a3 + 8) = v4;
  *(_QWORD *)(a3 + 16) = v5;
  *(_QWORD *)(a3 + 24) = v6;
}

uint64_t sub_1DDEF7308(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, double, double, double, double))(*(_QWORD *)(a4 + a3 - 8) + 16))(*(_QWORD *)(a4 + a3 - 24), *(_QWORD *)(a4 + a3 - 8), *a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1DDEF7348()
{
  return 24;
}

__n128 sub_1DDEF7354(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDEF7368()
{
  return objectdestroy_60Tm(&demangling cache variable for type metadata for Capsule<Link>);
}

uint64_t partial apply for closure #1 in closure #2 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)()
{
  return partial apply for closure #1 in closure #1 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(&demangling cache variable for type metadata for Capsule<Link>);
}

uint64_t partial apply for closure #1 in closure #1 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a1) - 8) + 80);
  return closure #1 in closure #1 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(*(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v2 + 32) & ~v2));
}

uint64_t sub_1DDEF73C8()
{
  return swift_deallocObject();
}

uint64_t sub_1DDEF73F0()
{
  return objectdestroy_60Tm((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
}

uint64_t partial apply for closure #1 in closure #3 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)()
{
  return partial apply for closure #1 in closure #1 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
}

uint64_t sub_1DDEF7410()
{
  return swift_deallocObject();
}

uint64_t sub_1DDEF7438()
{
  return objectdestroy_60Tm((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
}

uint64_t partial apply for closure #1 in closure #4 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)()
{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  return closure #1 in closure #4 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(*(_QWORD **)(v0 + 16));
}

uint64_t sub_1DDEF7478()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #4 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(uint64_t a1)
{
  return closure #1 in closure #1 in closure #4 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)(a1);
}

uint64_t sub_1DDEF74A0()
{
  return objectdestroy_60Tm((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
}

uint64_t objectdestroy_60Tm(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80)), v2);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #5 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)()
{
  return partial apply for closure #1 in closure #1 in Capsule<>.addElements(assetManager:fromItemProviders:location:anchor:completion:)((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
}

uint64_t sub_1DDEF751C()
{
  return swift_deallocObject();
}

uint64_t AnyCanvas.formFieldElements.getter()
{
  _QWORD *v0;
  uint64_t (*v1)(void);
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;

  v1 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2F8);
  v2 = (void *)v1();
  v4 = v3;
  ObjectType = swift_getObjectType();
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 32))(ObjectType, v4);

  specialized Sequence.filter(_:)(v6);
  v8 = v7;
  v9 = (void *)v1();
  v10 = objc_msgSend(v9, sel_effectiveUserInterfaceLayoutDirection);

  if (v8 < 0 || (v8 & 0x4000000000000000) != 0)
  {
    v13 = swift_bridgeObjectRetain();
    v11 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v13);
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  v14 = v11;
  specialized MutableCollection<>.sort(by:)(&v14, v10 == 0);
  swift_bridgeObjectRelease();
  return v14;
}

void AnyCanvas.selectedSignatureElements.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v2 = *(_QWORD *)(v1 - 8);
  v4 = MEMORY[0x1E0C80A78](v1, v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v8 = (void *)(*(uint64_t (**)(double))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2F8))(v4);
  v10 = v9;
  ObjectType = swift_getObjectType();
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 72))(ObjectType, v10);

  v20 = MEMORY[0x1E0DEE9D8];
  if (!(v12 >> 62))
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v13)
      goto LABEL_3;
LABEL_15:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v13 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v13)
    goto LABEL_15;
LABEL_3:
  if (v13 < 1)
  {
    __break(1u);
  }
  else
  {
    v14 = 0;
    v17 = v1;
    do
    {
      if ((v12 & 0xC000000000000001) != 0)
        v15 = (_QWORD *)MEMORY[0x1DF0E4D64](v14, v12);
      else
        v15 = *(id *)(v12 + 8 * v14 + 32);
      v16 = v15;
      (*(void (**)(void))((*v7 & *v15) + 0xE8))();
      SharedTagged_9.tag.getter();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v6, v1);
      if ((v19 & 1) != 0 || v18 != 6)
      {

      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        v1 = v17;
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      ++v14;
    }
    while (v13 != v14);
    swift_bridgeObjectRelease();
  }
}

uint64_t AnyCanvas.isEditingTextBox.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  char v15;
  uint64_t v16;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2F8))();
  v4 = v3;
  ObjectType = swift_getObjectType();
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 72))(ObjectType, v4);

  if (v6 >> 62)
    goto LABEL_16;
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v7; v7 = _CocoaArrayWrapper.endIndex.getter())
  {
    v8 = 4;
    v9 = 0;
    if ((v6 & 0xC000000000000001) != 0)
    {
LABEL_4:
      v10 = (_QWORD *)MEMORY[0x1DF0E4D64](v9, v6);
      goto LABEL_6;
    }
    while (1)
    {
      v10 = *(id *)(v6 + 8 * v8);
LABEL_6:
      v11 = v10;
      v12 = v9 + 1;
      if (__OFADD__(v9, 1))
        break;
      v13 = (_QWORD *)(*(uint64_t (**)(void))((*v1 & *v10) + 0x2D0))();
      if (v13)
      {
        v14 = v13;
        v15 = (*(uint64_t (**)(void))((*v1 & *v13) + 0x98))();

        if ((v15 & 1) != 0)
        {
          v16 = 1;
          goto LABEL_18;
        }
        if (v12 == v7)
          goto LABEL_17;
      }
      else
      {

        if (v12 == v7)
          goto LABEL_17;
      }
      v9 = ++v8 - 4;
      if ((v6 & 0xC000000000000001) != 0)
        goto LABEL_4;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_17:
  v16 = 0;
LABEL_18:
  swift_bridgeObjectRelease_n();
  return v16;
}

void specialized Sequence.filter(_:)(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  _QWORD *v14;
  uint64_t (*v15)(void);
  _QWORD *v16;

  v2 = 0;
  v3 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  v8 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v6)
    goto LABEL_6;
LABEL_7:
  v11 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    if (v11 < v7)
    {
      v12 = *(_QWORD *)(v3 + 8 * v11);
      ++v2;
      if (v12)
        goto LABEL_22;
      v2 = v11 + 1;
      if (v11 + 1 >= v7)
        goto LABEL_26;
      v12 = *(_QWORD *)(v3 + 8 * v2);
      if (v12)
        goto LABEL_22;
      v2 = v11 + 2;
      if (v11 + 2 >= v7)
        goto LABEL_26;
      v12 = *(_QWORD *)(v3 + 8 * v2);
      if (v12)
        goto LABEL_22;
      v2 = v11 + 3;
      if (v11 + 3 >= v7)
        goto LABEL_26;
      v12 = *(_QWORD *)(v3 + 8 * v2);
      if (v12)
      {
LABEL_22:
        v6 = (v12 - 1) & v12;
        for (i = __clz(__rbit64(v12)) + (v2 << 6); ; i = v9 | (v2 << 6))
        {
          v14 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 8 * i);
          v15 = *(uint64_t (**)(void))((*v8 & *v14) + 0x120);
          v16 = v14;
          if ((v15() & 1) != 0)
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            if (!v6)
              goto LABEL_7;
          }
          else
          {

            if (!v6)
              goto LABEL_7;
          }
LABEL_6:
          v9 = __clz(__rbit64(v6));
          v6 &= v6 - 1;
        }
      }
      v13 = v11 + 4;
      if (v13 < v7)
      {
        v12 = *(_QWORD *)(v3 + 8 * v13);
        if (v12)
        {
          v2 = v13;
          goto LABEL_22;
        }
        while (1)
        {
          v2 = v13 + 1;
          if (__OFADD__(v13, 1))
            goto LABEL_28;
          if (v2 >= v7)
            break;
          v12 = *(_QWORD *)(v3 + 8 * v2);
          ++v13;
          if (v12)
            goto LABEL_22;
        }
      }
    }
LABEL_26:
    swift_release();
    return;
  }
  __break(1u);
LABEL_28:
  __break(1u);
}

id TextStyleView.updateUI()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  objc_class *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  objc_super v19;
  objc_super v20;
  objc_super v21;
  objc_super v22;

  v1 = v0;
  v2 = OBJC_IVAR____TtC8PaperKit13TextStyleView_boldStyleButton;
  v3 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit13TextStyleView_boldStyleButton);
  v4 = OBJC_IVAR____TtC8PaperKit13TextStyleView_selectedTextStyles;
  v5 = *(_DWORD *)(v0 + OBJC_IVAR____TtC8PaperKit13TextStyleView_selectedTextStyles) & 1;
  v6 = (objc_class *)type metadata accessor for AttributeStylingButton();
  v22.receiver = v3;
  v22.super_class = v6;
  v7 = v3;
  objc_msgSendSuper2(&v22, sel_setSelected_, v5);
  AttributeStylingButton.isSelected.didset();

  v8 = OBJC_IVAR____TtC8PaperKit13TextStyleView_italicStyleButton;
  v9 = (*(_QWORD *)(v1 + v4) >> 1) & 1;
  v21.receiver = *(id *)(v1 + OBJC_IVAR____TtC8PaperKit13TextStyleView_italicStyleButton);
  v21.super_class = v6;
  v10 = v21.receiver;
  objc_msgSendSuper2(&v21, sel_setSelected_, v9);
  AttributeStylingButton.isSelected.didset();

  v11 = OBJC_IVAR____TtC8PaperKit13TextStyleView_underlineStyleButton;
  v12 = (*(_QWORD *)(v1 + v4) >> 2) & 1;
  v20.receiver = *(id *)(v1 + OBJC_IVAR____TtC8PaperKit13TextStyleView_underlineStyleButton);
  v20.super_class = v6;
  v13 = v20.receiver;
  objc_msgSendSuper2(&v20, sel_setSelected_, v12);
  AttributeStylingButton.isSelected.didset();

  v14 = OBJC_IVAR____TtC8PaperKit13TextStyleView_strikethroughStyleButton;
  v15 = (*(_QWORD *)(v1 + v4) >> 3) & 1;
  v19.receiver = *(id *)(v1 + OBJC_IVAR____TtC8PaperKit13TextStyleView_strikethroughStyleButton);
  v19.super_class = v6;
  v16 = v19.receiver;
  objc_msgSendSuper2(&v19, sel_setSelected_, v15);
  AttributeStylingButton.isSelected.didset();

  v17 = OBJC_IVAR____TtC8PaperKit13TextStyleView_allowedTextStyles;
  objc_msgSend(*(id *)(v1 + v2), sel_setEnabled_, *(_DWORD *)(v1 + OBJC_IVAR____TtC8PaperKit13TextStyleView_allowedTextStyles) & 1);
  objc_msgSend(*(id *)(v1 + v8), sel_setEnabled_, (*(_QWORD *)(v1 + v17) >> 1) & 1);
  objc_msgSend(*(id *)(v1 + v11), sel_setEnabled_, (*(_QWORD *)(v1 + v17) >> 2) & 1);
  return objc_msgSend(*(id *)(v1 + v14), sel_setEnabled_, (*(_QWORD *)(v1 + v17) >> 3) & 1);
}

Swift::Void __swiftcall TextStyleView.layoutSubviews()()
{
  char *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  double Width;
  double v8;
  objc_super v9;

  v9.receiver = v0;
  v9.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v9, sel_layoutSubviews);
  v1 = objc_msgSend(v0, sel_layer);
  if (v0[OBJC_IVAR____TtC8PaperKit13TextStyleView_useCapsuleStyle] == 1)
  {
    v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit13TextStyleView_axis];
    objc_msgSend(v0, sel_bounds);
    if (v2)
      Width = CGRectGetWidth(*(CGRect *)&v3);
    else
      Width = CGRectGetHeight(*(CGRect *)&v3);
    v8 = Width * 0.5;
  }
  else
  {
    v8 = *(double *)&v0[OBJC_IVAR____TtC8PaperKit13TextStyleView_regularCornerRadius];
  }
  objc_msgSend(v1, sel_setCornerRadius_, v8);

}

uint64_t type metadata accessor for TextStyleView()
{
  return objc_opt_self();
}

uint64_t protocol witness for TextStyleWidget.selectedTextStyles.getter in conformance TextStyleView()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit13TextStyleView_selectedTextStyles);
}

id protocol witness for TextStyleWidget.selectedTextStyles.setter in conformance TextStyleView(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit13TextStyleView_selectedTextStyles) = a1;
  return TextStyleView.updateUI()();
}

id protocol witness for TextStyleWidget.allowedTextStyles.setter in conformance TextStyleView(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit13TextStyleView_allowedTextStyles) = a1;
  return TextStyleView.updateUI()();
}

void specialized TextStyleView.init(coder:)()
{
  char *v0;
  uint64_t v1;

  v1 = OBJC_IVAR____TtC8PaperKit13TextStyleView_contentStackView;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3CA8]), sel_init);
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit13TextStyleView_regularCornerRadius] = 0x4020000000000000;
  *(_OWORD *)&v0[OBJC_IVAR____TtC8PaperKit13TextStyleView_maximumButtonSize] = xmmword_1DDF37DF0;
  *(_OWORD *)&v0[OBJC_IVAR____TtC8PaperKit13TextStyleView_minimumButtonSize] = xmmword_1DDF37E00;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit13TextStyleView_selectedTextStyles] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit13TextStyleView_allowedTextStyles] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t type metadata accessor for TextStyleEditingView()
{
  return objc_opt_self();
}

uint64_t HorizontalTextStyleEditingViewLayout.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HorizontalTextStyleEditingViewLayout()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for VerticalTextStyleEditingViewLayout()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for CompactTextStyleEditingViewLayout()
{
  return objc_opt_self();
}

void specialized TextStyleEditingView.init(coder:)()
{
  char *v0;

  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_colorSwatch] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_minFontNameControlWidth] = 0x4066800000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_maxFontNameControlWidth] = 0x4072000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_fontSizeControlWidth] = 0x4052000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_textAlignmentWidgetWidth] = 0x4066800000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit20TextStyleEditingView_textStyleWidgetWidth] = 0x4066800000000000;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void ColorSwatch.updateUI()()
{
  char *v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v1 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit11ColorSwatch_selectedColor];
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v0, sel_window);

    if (!v3)
      goto LABEL_7;
    v4 = objc_msgSend(v0, sel_window);
    if (v4)
    {
      v5 = v4;
      v8 = objc_msgSend((id)objc_opt_self(), sel_activeToolPickerForWindow_, v4);

      if (v8)
      {
        if (objc_msgSend(v8, sel_colorUserInterfaceStyle))
        {
LABEL_9:
          v7 = (void *)static PKInkingTool.convertColor(_:from:to:)();
          objc_msgSend(v0, sel_setBackgroundColor_, v7);

          return;
        }
LABEL_8:
        v6 = objc_msgSend(v0, sel_traitCollection);
        objc_msgSend(v6, sel_userInterfaceStyle);

        goto LABEL_9;
      }
LABEL_7:
      v8 = 0;
      goto LABEL_8;
    }
    __break(1u);
  }
  else
  {
    objc_msgSend(v0, sel_setBackgroundColor_, 0);
  }
}

uint64_t type metadata accessor for ColorSwatch()
{
  return objc_opt_self();
}

id Shadow.init(scaleFactor:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  void *v3;
  double v5;
  double v6;

  if (one-time initialization token for defaultShadowOffset != -1)
  {
    v5 = a2;
    swift_once();
    a2 = v5;
  }
  if (one-time initialization token for defaultShadowColor != -1)
  {
    v6 = a2;
    swift_once();
    a2 = v6;
  }
  v3 = (void *)static UIConstants.defaultShadowColor;
  *(float64x2_t *)a1 = vmulq_n_f64((float64x2_t)static UIConstants.defaultShadowOffset, a2);
  *(double *)(a1 + 16) = a2 * 3.0;
  *(_QWORD *)(a1 + 24) = v3;
  return v3;
}

uint64_t ShapeSecondaryProperties.shadow.setter()
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t ShapeSecondaryProperties.appearanceStreamOffset.setter(double a1, double a2)
{
  uint64_t v4;
  uint64_t (*v5)();
  _OWORD v7[2];
  uint64_t v8;
  unint64_t v9;

  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  CRRegister.wrappedValue.getter();
  swift_bridgeObjectRelease();
  if (!v9)
  {
    memset(v7, 0, sizeof(v7));
    v8 = 0;
    v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    CRRegister.wrappedValue.setter();
  }
  v5 = ShapeSecondaryProperties.auxiliaryInfo.modify(v7);
  if (*(_QWORD *)(v4 + 40))
  {
    *(double *)(v4 + 16) = a1;
    *(double *)(v4 + 24) = a2;
  }
  return ((uint64_t (*)(_OWORD *, _QWORD))v5)(v7, 0);
}

void (*Shape.text.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v3 = malloc(0x50uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?)
                             - 8)
                 + 64);
  v3[1] = malloc(v4);
  v3[2] = malloc(v4);
  v3[3] = malloc(v4);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v3[4] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[5] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[6] = malloc(v7);
  v3[7] = malloc(v7);
  v3[8] = malloc(v7);
  *((_DWORD *)v3 + 18) = *(_DWORD *)(type metadata accessor for Shape() + 52);
  return Shape.text.modify;
}

void Shape.text.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  v2 = *a1;
  if ((a2 & 1) != 0)
    goto LABEL_10;
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 + 40) + 16);
  v3(*(_QWORD *)(v2 + 64), *(_QWORD *)v2 + *(int *)(v2 + 72), *(_QWORD *)(v2 + 32));
  v4 = (void *)CRAttributedString.attributedString.getter();
  v5 = objc_msgSend(v4, sel_string);

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

  v9 = *(_QWORD *)(v2 + 64);
  v10 = *(_QWORD *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 40);
  if (v6)
    v12 = 0;
  else
    v12 = v8 == 0xE000000000000000;
  if (v12)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    goto LABEL_10;
  }
  v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  v14 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v14(v9, v10);
  if ((v13 & 1) != 0)
  {
LABEL_10:
    v26 = *(void **)(v2 + 56);
    v27 = *(void **)(v2 + 48);
    v29 = *(void **)(v2 + 16);
    v28 = *(void **)(v2 + 24);
    v30 = *(void **)(v2 + 8);
    free(*(void **)(v2 + 64));
    free(v26);
    free(v27);
    free(v28);
    free(v29);
    free(v30);
    free((void *)v2);
    return;
  }
  v15 = *(_QWORD *)(v2 + 48);
  v16 = *(_QWORD *)(v2 + 32);
  v17 = *(_QWORD *)v2 + *(int *)(v2 + 72);
  v3(*(_QWORD *)(v2 + 56), v17, v16);
  v3(v15, v17, v16);
  v18 = (void *)CRAttributedString.attributedString.getter();
  v14(v15, v16);
  v19 = objc_msgSend(v18, sel_length);

  if (!__OFSUB__(v19, 1))
  {
    v20 = *(_QWORD *)(v2 + 56);
    v21 = *(_QWORD *)(v2 + 24);
    v22 = *(_QWORD *)(v2 + 32);
    v24 = *(_QWORD *)(v2 + 8);
    v23 = *(_QWORD *)(v2 + 16);
    CRAttributedString.attributes(at:effectiveRange:)();
    v14(v20, v22);
    v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v21, 0, 1, v25);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v21, v23, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v23, v24, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
    CRRegister.wrappedValue.setter();
    outlined destroy of StocksKitCurrencyCache.Provider?(v23, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    outlined destroy of StocksKitCurrencyCache.Provider?(v21, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    goto LABEL_10;
  }
  __break(1u);
}

uint64_t ShapeSecondaryProperties.maximumNumberOfCharacters.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)();
  _OWORD v5[2];
  uint64_t v6;
  unint64_t v7;

  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  CRRegister.wrappedValue.getter();
  swift_bridgeObjectRelease();
  if (!v7)
  {
    memset(v5, 0, sizeof(v5));
    v6 = 0;
    v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    CRRegister.wrappedValue.setter();
  }
  v3 = ShapeSecondaryProperties.auxiliaryInfo.modify(v5);
  if (*(_QWORD *)(v2 + 40))
    *(_QWORD *)(v2 + 32) = a1;
  return ((uint64_t (*)(_OWORD *, _QWORD))v3)(v5, 0);
}

id Shadow.init()@<X0>(uint64_t a1@<X8>)
{
  __int128 v2;
  void *v3;
  __int128 v5;

  if (one-time initialization token for defaultShadowOffset != -1)
    swift_once();
  v2 = static UIConstants.defaultShadowOffset;
  if (one-time initialization token for defaultShadowColor != -1)
  {
    v5 = static UIConstants.defaultShadowOffset;
    swift_once();
    v2 = v5;
  }
  v3 = (void *)static UIConstants.defaultShadowColor;
  *(_OWORD *)a1 = v2;
  *(_QWORD *)(a1 + 16) = 0x4008000000000000;
  *(_QWORD *)(a1 + 24) = v3;
  return v3;
}

uint64_t Shape.strokeStyle.getter()
{
  type metadata accessor for Shape();
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  return CRRegister.wrappedValue.getter();
}

uint64_t ShapeSecondaryProperties.shadow.getter()
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  return CRRegister.wrappedValue.getter();
}

uint64_t Shape.text.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Shape() + 52);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

PaperKit::FormContentType_optional Shape.textContentType.getter@<W0>(_BYTE *a1@<X8>)
{
  char v2;
  PaperKit::FormContentType_optional result;
  char v4;
  Swift::Int rawValue;
  char v6;
  uint64_t v7;

  type metadata accessor for Shape();
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  CRRegister.wrappedValue.getter();
  if (v7)
  {
    v2 = v6;
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRExtensible<FormContentType>);
  CRExtensible.rawValue.getter();
  result.value = FormContentType.init(rawValue:)(rawValue).value;
  v4 = v2;
  if (v2 == 66)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t ShapeSecondaryProperties.resizeBehavior.getter()
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  return CRRegister.wrappedValue.getter();
}

BOOL Shape.isFormField.getter()
{
  uint64_t v1;

  type metadata accessor for Shape();
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  CRRegister.wrappedValue.getter();
  if (v1)
    swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type FormContentType and conformance FormContentType();
  return (static CRExtensible.== infix(_:_:)() & 1) == 0;
}

uint64_t ShapeSecondaryProperties.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v22 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v22 - v16;
  lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope();
  CRAttributedString.init(_:)();
  v18 = type metadata accessor for ShapeSecondaryProperties();
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v17, 1, 1, v19);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v17, (uint64_t)v13, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Attributes? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  *(_QWORD *)&v22 = 0;
  lazy protocol witness table accessor for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior();
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v22 = 0;
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  CRRegister.init(wrappedValue:)();
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v9, 1, 1, v20);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, (uint64_t)v5, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  lazy protocol witness table accessor for type TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  v22 = 0u;
  v23 = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shadow?);
  _s8PaperKit5ColorVSgxSg9Coherence7CRValueA2fGRzlWlTm_0(&lazy protocol witness table cache variable for type Shadow? and conformance <A> A?, &demangling cache variable for type metadata for Shadow?, (uint64_t (*)(void))lazy protocol witness table accessor for type Shadow and conformance Shadow);
  CRRegister.init(wrappedValue:)();
  v23 = 0u;
  v24 = 0u;
  v22 = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShapeAuxiliaryInfo?);
  _s8PaperKit5ColorVSgxSg9Coherence7CRValueA2fGRzlWlTm_0(&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo? and conformance <A> A?, &demangling cache variable for type metadata for ShapeAuxiliaryInfo?, (uint64_t (*)(void))lazy protocol witness table accessor for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo);
  result = CRRegister.init(wrappedValue:)();
  *(_QWORD *)(a1 + *(int *)(v18 + 44)) = MEMORY[0x1E0DEE9E0];
  return result;
}

uint64_t ShapeSecondaryProperties.flags.getter()
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  return CRRegister.wrappedValue.getter();
}

uint64_t ShapeSecondaryProperties.flags.setter()
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  return CRRegister.wrappedValue.setter();
}

uint64_t ShapeSecondaryProperties.emptyStringAttributes.getter()
{
  return ShapeSecondaryProperties.emptyStringAttributes.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t ShapeSecondaryProperties.emptyStringAttributes.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v2, v3);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
}

uint64_t ShapeSecondaryProperties.resizeBehavior.setter()
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  return CRRegister.wrappedValue.setter();
}

uint64_t type metadata accessor for ShapeSecondaryProperties()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ShapeSecondaryProperties;
  if (!type metadata singleton initialization cache for ShapeSecondaryProperties)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t CanvasElementAutoresizeBehavior.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

PaperKit::CanvasElementAutoresizeBehavior __swiftcall CanvasElementAutoresizeBehavior.init(rawValue:)(PaperKit::CanvasElementAutoresizeBehavior rawValue)
{
  PaperKit::CanvasElementAutoresizeBehavior *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

uint64_t protocol witness for Decodable.init(from:) in conformance CanvasElementAutoresizeBehavior()
{
  lazy protocol witness table accessor for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CanvasElementAutoresizeBehavior()
{
  lazy protocol witness table accessor for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior();
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance CanvasElementAutoresizeBehavior()
{
  lazy protocol witness table accessor for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior();
  lazy protocol witness table accessor for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior();
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance CanvasElementAutoresizeBehavior()
{
  lazy protocol witness table accessor for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior();
  lazy protocol witness table accessor for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior();
  return CRValue<>.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance CanvasElementAutoresizeBehavior()
{
  lazy protocol witness table accessor for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior();
  lazy protocol witness table accessor for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior();
  return CRValue<>.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance CanvasElementAutoresizeBehavior()
{
  lazy protocol witness table accessor for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior();
  lazy protocol witness table accessor for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior();
  return CRValue<>.minEncodingVersion.getter();
}

uint64_t *Shadow.init(offset:blur:color:)@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  uint64_t v9;

  v9 = *result;
  if (one-time initialization token for defaultShadowOffset != -1)
    result = (uint64_t *)swift_once();
  if (one-time initialization token for defaultShadowColor != -1)
    result = (uint64_t *)swift_once();
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = a5;
  *(_QWORD *)(a2 + 24) = v9;
  return result;
}

PaperKit::Shadow::CodingKeys_optional __swiftcall Shadow.CodingKeys.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)rawValue < 3)
    v2 = rawValue;
  *v1 = v2;
  return (PaperKit::Shadow::CodingKeys_optional)rawValue;
}

PaperKit::Shadow::CodingKeys_optional __swiftcall Shadow.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  char *v1;
  char *v2;
  BOOL v3;
  void *object;
  uint64_t countAndFlagsBits;
  PaperKit::Shadow::CodingKeys_optional result;
  char v7;
  char v8;

  v2 = v1;
  v3 = stringValue._countAndFlagsBits == 0x74657366666FLL && stringValue._object == (void *)0xE600000000000000;
  if (v3
    || (object = stringValue._object,
        countAndFlagsBits = stringValue._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else if (countAndFlagsBits == 1920298082 && object == (void *)0xE400000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 1;
  }
  else if (countAndFlagsBits == 0x726F6C6F63 && object == (void *)0xE500000000000000)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result.value = swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      v7 = 2;
    else
      v7 = 3;
  }
  *v2 = v7;
  return result;
}

PaperKit::Shadow::CodingKeys_optional __swiftcall Shadow.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)intValue < 3)
    v2 = intValue;
  *v1 = v2;
  return (PaperKit::Shadow::CodingKeys_optional)intValue;
}

void *static Shadow.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static Shadow.CodingKeys.allCases.getter;
}

uint64_t Shadow.CodingKeys.intValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t Shadow.CodingKeys.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t Shadow.CodingKeys.stringValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1920298082;
  if (*v0 != 1)
    v1 = 0x726F6C6F63;
  if (*v0)
    return v1;
  else
    return 0x74657366666FLL;
}

PaperKit::Shadow::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Shadow.CodingKeys(Swift::Int *a1)
{
  return Shadow.CodingKeys.init(rawValue:)(*a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Shadow.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1920298082;
  if (*v0 != 1)
    v1 = 0x726F6C6F63;
  if (*v0)
    return v1;
  else
    return 0x74657366666FLL;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Shadow.CodingKeys(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance Shadow.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance Shadow.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for static IntCaseIterable.intCases.getter in conformance Rectangle.CodingKeys(a1, a2, (void (*)(void))lazy protocol witness table accessor for type Shadow.CodingKeys and conformance Shadow.CodingKeys, (void (*)(void))lazy protocol witness table accessor for type Shadow.CodingKeys and conformance Shadow.CodingKeys);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Shadow.CodingKeys()
{
  lazy protocol witness table accessor for type Shadow.CodingKeys and conformance Shadow.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Shadow.CodingKeys()
{
  lazy protocol witness table accessor for type Shadow.CodingKeys and conformance Shadow.CodingKeys();
  return CodingKey.debugDescription.getter();
}

void Shadow.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  void *v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  id v7;

  v1 = v0[1];
  v2 = v0[2];
  v3 = (void *)v0[3];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *v0;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v1;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = v2;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
  v7 = v3;
  _CFObject.hash(into:)();

}

uint64_t Shadow.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Shadow.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v10 = v1[1];
  v11 = v1[2];
  v12 = v1[3];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Shadow.CodingKeys and conformance Shadow.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v16 = v9;
  v17 = v10;
  v15 = 0;
  type metadata accessor for CGSize(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x1E0C9B9F0]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v16 = v11;
    v15 = 1;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v16 = v12;
    v15 = 2;
    lazy protocol witness table accessor for type Color and conformance Color();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

Swift::Int Shadow.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)();
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v1;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v2;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = v3;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

void Shadow.init(from:)(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  id v19;
  uint64_t v20;

  v16 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Shadow.CodingKeys>);
  v17 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for defaultShadowOffset != -1)
    swift_once();
  if (one-time initialization token for defaultShadowColor != -1)
    swift_once();
  v8 = (void *)static UIConstants.defaultShadowColor;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Shadow.CodingKeys and conformance Shadow.CodingKeys();
  v9 = v8;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

  }
  else
  {
    type metadata accessor for CGSize(0);
    v18 = 0;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGSize and conformance CGSize, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x1E0C9BA08]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v10 = v19;
    v11 = v20;
    v18 = 1;
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v12 = v19;
    v18 = 2;
    lazy protocol witness table accessor for type Color and conformance Color();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v4);
    v13 = v19;

    v14 = v16;
    *v16 = v10;
    v14[1] = v11;
    v14[2] = v12;
    v14[3] = v13;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);

  }
}

uint64_t protocol witness for Hashable.hash(into:) in conformance Shadow()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;

  v1 = *(_QWORD *)(v0 + 16);
  CGPoint.hash(into:)(*(double *)v0, *(double *)(v0 + 8));
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v1;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
  return _CFObject.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Shadow()
{
  double *v0;
  double v1;
  double v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = *((_QWORD *)v0 + 2);
  Hasher.init(_seed:)();
  CGPoint.hash(into:)(v1, v2);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v3;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
  _CFObject.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for Decodable.init(from:) in conformance Shadow(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  Shadow.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Shadow(_QWORD *a1)
{
  return Shadow.encode(to:)(a1);
}

id protocol witness for CRType.copy(renamingReferences:) in conformance Shadow@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(void **)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = v3;
  return v3;
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Shadow()
{
  lazy protocol witness table accessor for type Shadow and conformance Shadow();
  lazy protocol witness table accessor for type Shadow and conformance Shadow();
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance Shadow()
{
  lazy protocol witness table accessor for type Shadow and conformance Shadow();
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance Shadow()
{
  lazy protocol witness table accessor for type Shadow and conformance Shadow();
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance Shadow()
{
  lazy protocol witness table accessor for type Shadow and conformance Shadow();
  return CRValueStruct.minEncodingVersion.getter();
}

uint64_t ShapeAuxiliaryInfo.additionalFields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ShapeAuxiliaryInfo.additionalFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*ShapeAuxiliaryInfo.additionalFields.modify())(_QWORD, _QWORD)
{
  return UnknownCanvasElementView.flags.modify;
}

PaperKit::ShapeAuxiliaryInfo::CodingKeys_optional __swiftcall ShapeAuxiliaryInfo.CodingKeys.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  if ((unint64_t)(rawValue + 1) >= 4)
    v2 = 4;
  else
    v2 = 0x2010003u >> (8 * (rawValue + 1));
  *v1 = v2;
  return (PaperKit::ShapeAuxiliaryInfo::CodingKeys_optional)rawValue;
}

PaperKit::ShapeAuxiliaryInfo::CodingKeys_optional __swiftcall ShapeAuxiliaryInfo.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  char *v1;
  char *v2;
  BOOL v3;
  void *object;
  uint64_t countAndFlagsBits;
  PaperKit::ShapeAuxiliaryInfo::CodingKeys_optional result;
  char v7;
  char v8;

  v2 = v1;
  v3 = stringValue._countAndFlagsBits == 0x746E6F4374786574 && stringValue._object == (void *)0xEF65707954746E65;
  if (v3
    || (object = stringValue._object,
        countAndFlagsBits = stringValue._countAndFlagsBits,
        (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else if (countAndFlagsBits == 0xD000000000000016 && object == (void *)0x80000001DDF5C740
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 1;
  }
  else if (countAndFlagsBits == 0xD000000000000019 && object == (void *)0x80000001DDF5C760
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 2;
  }
  else if (countAndFlagsBits == 0xD000000000000010 && object == (void *)0x80000001DDF4C510)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    result.value = swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      v7 = 3;
    else
      v7 = 4;
  }
  *v2 = v7;
  return result;
}

PaperKit::ShapeAuxiliaryInfo::CodingKeys_optional __swiftcall ShapeAuxiliaryInfo.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  char *v1;
  char v2;

  if ((unint64_t)(intValue + 1) >= 4)
    v2 = 4;
  else
    v2 = 0x2010003u >> (8 * (intValue + 1));
  *v1 = v2;
  return (PaperKit::ShapeAuxiliaryInfo::CodingKeys_optional)intValue;
}

void *static ShapeAuxiliaryInfo.CodingKeys.allCases.getter()
{
  return &outlined read-only object #0 of static ShapeAuxiliaryInfo.CodingKeys.allCases.getter;
}

uint64_t ShapeAuxiliaryInfo.CodingKeys.intValue.getter()
{
  char *v0;

  return qword_1DDF48E80[*v0];
}

uint64_t ShapeAuxiliaryInfo.CodingKeys.rawValue.getter()
{
  char *v0;

  return qword_1DDF48E80[*v0];
}

uint64_t ShapeAuxiliaryInfo.CodingKeys.stringValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1DDEFB478 + 4 * byte_1DDF48010[*v0]))(0x746E6F4374786574, 0xEF65707954746E65);
}

unint64_t sub_1DDEFB478()
{
  return 0xD000000000000016;
}

unint64_t sub_1DDEFB4B4()
{
  return 0xD000000000000010;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ShapeAuxiliaryInfo.CodingKeys(char *a1, char *a2)
{
  return qword_1DDF48E80[*a1] == qword_1DDF48E80[*a2];
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ShapeAuxiliaryInfo.CodingKeys()
{
  char *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1DDF48E80[v1]);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ShapeAuxiliaryInfo.CodingKeys()
{
  char *v0;

  Hasher._combine(_:)(qword_1DDF48E80[*v0]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ShapeAuxiliaryInfo.CodingKeys()
{
  char *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1DDF48E80[v1]);
  return Hasher._finalize()();
}

PaperKit::ShapeAuxiliaryInfo::CodingKeys_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ShapeAuxiliaryInfo.CodingKeys(Swift::Int *a1)
{
  return ShapeAuxiliaryInfo.CodingKeys.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ShapeAuxiliaryInfo.CodingKeys(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_1DDF48E80[*v1];
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance ShapeAuxiliaryInfo.CodingKeys()
{
  char *v0;

  return qword_1DDF48E80[*v0];
}

void protocol witness for static CaseIterable.allCases.getter in conformance ShapeAuxiliaryInfo.CodingKeys(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance ShapeAuxiliaryInfo.CodingKeys;
}

uint64_t protocol witness for static IntCaseIterable.intCases.getter in conformance ShapeAuxiliaryInfo.CodingKeys(uint64_t a1, uint64_t a2)
{
  return protocol witness for static IntCaseIterable.intCases.getter in conformance Rectangle.CodingKeys(a1, a2, (void (*)(void))lazy protocol witness table accessor for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys, (void (*)(void))lazy protocol witness table accessor for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ShapeAuxiliaryInfo.CodingKeys()
{
  lazy protocol witness table accessor for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ShapeAuxiliaryInfo.CodingKeys()
{
  lazy protocol witness table accessor for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ShapeAuxiliaryInfo.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ShapeAuxiliaryInfo.CodingKeys>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = *((_BYTE *)v1 + 8);
  v10 = v1[2];
  v11 = v1[3];
  v12 = v1[4];
  v17 = v1[5];
  v18 = v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v20 = v8;
  LOBYTE(v21) = v9;
  v22 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRExtensible<FormContentType>);
  lazy protocol witness table accessor for type CRExtensible<FormContentType> and conformance <> CRExtensible<A>(&lazy protocol witness table cache variable for type CRExtensible<FormContentType> and conformance <> CRExtensible<A>, MEMORY[0x1E0D11CC0]);
  v13 = v19;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v13)
  {
    v14 = v17;
    v20 = v10;
    v21 = v11;
    v22 = 1;
    type metadata accessor for CGPoint(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x1E0C9BA20]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v20) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v20 = v14;
    v22 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int : AnyCRValue]);
    lazy protocol witness table accessor for type [Int : AnyCRValue] and conformance <> [A : B]();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t ShapeAuxiliaryInfo.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;

  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ShapeAuxiliaryInfo.CodingKeys>);
  v5 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    v9 = v5;
    v21 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRExtensible<FormContentType>);
    v26 = 0;
    lazy protocol witness table accessor for type CRExtensible<FormContentType> and conformance <> CRExtensible<A>(&lazy protocol witness table cache variable for type CRExtensible<FormContentType> and conformance <> CRExtensible<A>, MEMORY[0x1E0D11CD0]);
    v10 = v22;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v11 = v23;
    v12 = v24;
    type metadata accessor for CGPoint(0);
    v26 = 1;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGPoint and conformance CGPoint, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x1E0C9BA30]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v25 = v12;
    v20 = v11;
    v13 = v23;
    v14 = v24;
    LOBYTE(v23) = 2;
    v16 = KeyedDecodingContainer.decode(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int : AnyCRValue]);
    v26 = 3;
    lazy protocol witness table accessor for type [Int : AnyCRValue] and conformance <> [A : B]();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v10);
    v17 = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v18 = v21;
    *v21 = v20;
    *((_BYTE *)v18 + 8) = v25;
    v18[2] = v13;
    v18[3] = v14;
    v18[4] = v16;
    v18[5] = v17;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ShapeAuxiliaryInfo@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return ShapeAuxiliaryInfo.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ShapeAuxiliaryInfo(_QWORD *a1)
{
  return ShapeAuxiliaryInfo.encode(to:)(a1);
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance ShapeAuxiliaryInfo@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance ShapeAuxiliaryInfo()
{
  lazy protocol witness table accessor for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo();
  lazy protocol witness table accessor for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo();
  return CRValue<>.observableDifference(from:with:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance ShapeAuxiliaryInfo()
{
  lazy protocol witness table accessor for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo();
  return CRValueStruct.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance ShapeAuxiliaryInfo()
{
  lazy protocol witness table accessor for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo();
  return CRValueStruct.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance ShapeAuxiliaryInfo()
{
  lazy protocol witness table accessor for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo();
  return CRValueStruct.minEncodingVersion.getter();
}

uint64_t ShapeSecondaryProperties.text.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ShapeSecondaryProperties.text.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*ShapeSecondaryProperties.text.modify())(_QWORD, _QWORD)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t key path setter for ShapeSecondaryProperties.emptyStringAttributes : ShapeSecondaryProperties(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v11 - v8;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v11 - v8, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, (uint64_t)v5, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
}

uint64_t (*ShapeSecondaryProperties.emptyStringAttributes.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t ShapeSecondaryProperties.$emptyStringAttributes.getter()
{
  return ShapeSecondaryProperties.emptyStringAttributes.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t ShapeSecondaryProperties.emptyStringAttributes.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;

  type metadata accessor for ShapeSecondaryProperties();
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  return a1(v2);
}

uint64_t key path setter for ShapeSecondaryProperties.$emptyStringAttributes : ShapeSecondaryProperties(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for ShapeSecondaryProperties();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t ShapeSecondaryProperties.$emptyStringAttributes.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for ShapeSecondaryProperties();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*ShapeSecondaryProperties.$emptyStringAttributes.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for ShapeSecondaryProperties() + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t key path getter for ShapeSecondaryProperties.resizeBehavior : ShapeSecondaryProperties@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for ShapeSecondaryProperties.resizeBehavior : ShapeSecondaryProperties()
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*ShapeSecondaryProperties.resizeBehavior.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t ShapeSecondaryProperties.$resizeBehavior.getter()
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for ShapeSecondaryProperties.$resizeBehavior : ShapeSecondaryProperties(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for ShapeSecondaryProperties();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t ShapeSecondaryProperties.$resizeBehavior.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for ShapeSecondaryProperties();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*ShapeSecondaryProperties.$resizeBehavior.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for ShapeSecondaryProperties() + 24);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t key path getter for ShapeSecondaryProperties.flags : ShapeSecondaryProperties@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for ShapeSecondaryProperties.flags : ShapeSecondaryProperties()
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*ShapeSecondaryProperties.flags.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t ShapeSecondaryProperties.$flags.getter()
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for ShapeSecondaryProperties.$flags : ShapeSecondaryProperties(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for ShapeSecondaryProperties();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t ShapeSecondaryProperties.$flags.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for ShapeSecondaryProperties();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*ShapeSecondaryProperties.$flags.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for ShapeSecondaryProperties() + 28);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t ShapeSecondaryProperties.strokeStyle.getter()
{
  return ShapeSecondaryProperties.strokeStyle.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t key path setter for ShapeSecondaryProperties.strokeStyle : ShapeSecondaryProperties(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v11 - v8;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v11 - v8, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v9, (uint64_t)v5, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
}

uint64_t ShapeSecondaryProperties.strokeStyle.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  MEMORY[0x1E0C80A78](v2, v3);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of StocksKitCurrencyCache.Provider?(a1, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?);
}

uint64_t (*ShapeSecondaryProperties.strokeStyle.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t ShapeSecondaryProperties.$strokeStyle.getter()
{
  return ShapeSecondaryProperties.strokeStyle.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t ShapeSecondaryProperties.strokeStyle.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;

  type metadata accessor for ShapeSecondaryProperties();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  return a1(v2);
}

uint64_t key path setter for ShapeSecondaryProperties.$strokeStyle : ShapeSecondaryProperties(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for ShapeSecondaryProperties();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t ShapeSecondaryProperties.$strokeStyle.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for ShapeSecondaryProperties();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*ShapeSecondaryProperties.$strokeStyle.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for ShapeSecondaryProperties() + 32);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

double key path getter for ShapeSecondaryProperties.shadow : ShapeSecondaryProperties@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;

  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  CRRegister.wrappedValue.getter();
  result = *(double *)&v3;
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for ShapeSecondaryProperties.shadow : ShapeSecondaryProperties(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 24);
  type metadata accessor for ShapeSecondaryProperties();
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*ShapeSecondaryProperties.shadow.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t ShapeSecondaryProperties.$shadow.getter()
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for ShapeSecondaryProperties.$shadow : ShapeSecondaryProperties(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for ShapeSecondaryProperties();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t ShapeSecondaryProperties.$shadow.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for ShapeSecondaryProperties();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*ShapeSecondaryProperties.$shadow.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for ShapeSecondaryProperties() + 36);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t ShapeSecondaryProperties.auxiliaryInfo.getter()
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  return CRRegister.wrappedValue.getter();
}

double key path getter for ShapeSecondaryProperties.auxiliaryInfo : ShapeSecondaryProperties@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  CRRegister.wrappedValue.getter();
  *a1 = v3;
  a1[1] = v4;
  result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

uint64_t key path setter for ShapeSecondaryProperties.auxiliaryInfo : ShapeSecondaryProperties()
{
  type metadata accessor for ShapeSecondaryProperties();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t ShapeSecondaryProperties.auxiliaryInfo.setter()
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*ShapeSecondaryProperties.auxiliaryInfo.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t ShapeSecondaryProperties.$auxiliaryInfo.getter()
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for ShapeSecondaryProperties.$auxiliaryInfo : ShapeSecondaryProperties(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for ShapeSecondaryProperties();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t ShapeSecondaryProperties.$auxiliaryInfo.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for ShapeSecondaryProperties();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*ShapeSecondaryProperties.$auxiliaryInfo.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for ShapeSecondaryProperties() + 40);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t ShapeSecondaryProperties.additionalFields.getter()
{
  type metadata accessor for ShapeSecondaryProperties();
  return swift_bridgeObjectRetain();
}

uint64_t ShapeSecondaryProperties.additionalFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for ShapeSecondaryProperties() + 44);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

double (*ShapeSecondaryProperties.additionalFields.modify())(_QWORD, _QWORD)
{
  type metadata accessor for ShapeSecondaryProperties();
  return UnknownCanvasElementView.flags.modify;
}

double static ShapeSecondaryProperties.fields.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[32];
  __int128 v18;
  _BYTE v19[32];
  __int128 v20;
  _BYTE v21[32];
  __int128 v22;
  _BYTE v23[24];

  if (one-time initialization token for fields != -1)
    swift_once();
  v22 = xmmword_1EDB6F9A0;
  *(_OWORD *)v23 = *(_OWORD *)&qword_1EDB6F9B0;
  *(_QWORD *)&v23[16] = qword_1EDB6F9C0;
  *(_OWORD *)&v19[16] = xmmword_1EDB6F960;
  v20 = *(_OWORD *)&qword_1EDB6F970;
  *(_OWORD *)v21 = *(_OWORD *)&qword_1EDB6F980;
  *(_OWORD *)&v21[16] = *(_OWORD *)&qword_1EDB6F990;
  *(_OWORD *)v17 = static ShapeSecondaryProperties.fields;
  *(_OWORD *)&v17[16] = *(_OWORD *)&qword_1EDB6F930;
  v18 = xmmword_1EDB6F940;
  *(_OWORD *)v19 = *(_OWORD *)byte_1EDB6F950;
  v2 = static ShapeSecondaryProperties.fields;
  v3 = unk_1EDB6F938;
  v4 = *(_QWORD *)byte_1EDB6F950;
  v5 = *((_QWORD *)&xmmword_1EDB6F960 + 1);
  v6 = qword_1EDB6F980;
  v7 = unk_1EDB6F998;
  v8 = qword_1EDB6F9B0;
  v10 = *(_OWORD *)&v17[8];
  v11 = xmmword_1EDB6F940;
  v12 = *(_OWORD *)&v19[8];
  v13 = *(_OWORD *)&qword_1EDB6F970;
  v14 = *(_OWORD *)&v21[8];
  v15 = xmmword_1EDB6F9A0;
  v16 = *(_OWORD *)&v23[8];
  outlined retain of ((String, WritableKeyPath<ShapeSecondaryProperties, CRAttributedString<TextAttributeScope>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<CanvasElementAutoresizeBehavior>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<ShapeAuxiliaryInfo?>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<CanvasElementFlags>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<Shadow?>>))((uint64_t)v17);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = v13;
  *(_QWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = v14;
  *(_QWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 128) = v15;
  *(_QWORD *)(a1 + 144) = v8;
  result = *(double *)&v16;
  *(_OWORD *)(a1 + 152) = v16;
  return result;
}

uint64_t ShapeSecondaryProperties.textContentType.setter(uint64_t *a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t (*v4)();
  _OWORD v6[2];
  uint64_t v7;
  unint64_t v8;

  v1 = *a1;
  v2 = *((_BYTE *)a1 + 8);
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  CRRegister.wrappedValue.getter();
  swift_bridgeObjectRelease();
  if (!v8)
  {
    memset(v6, 0, sizeof(v6));
    v7 = 0;
    v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    CRRegister.wrappedValue.setter();
  }
  v4 = ShapeSecondaryProperties.auxiliaryInfo.modify(v6);
  if (*(_QWORD *)(v3 + 40))
  {
    *(_QWORD *)v3 = v1;
    *(_BYTE *)(v3 + 8) = v2;
  }
  return ((uint64_t (*)(_OWORD *, _QWORD))v4)(v6, 0);
}

double protocol witness for static CRStruct_Base_7.fields.getter in conformance ShapeSecondaryProperties@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[32];
  __int128 v18;
  _BYTE v19[32];
  __int128 v20;
  _BYTE v21[32];
  __int128 v22;
  _BYTE v23[24];

  if (one-time initialization token for fields != -1)
    swift_once();
  v22 = xmmword_1EDB6F9A0;
  *(_OWORD *)v23 = *(_OWORD *)&qword_1EDB6F9B0;
  *(_QWORD *)&v23[16] = qword_1EDB6F9C0;
  *(_OWORD *)&v19[16] = xmmword_1EDB6F960;
  v20 = *(_OWORD *)&qword_1EDB6F970;
  *(_OWORD *)v21 = *(_OWORD *)&qword_1EDB6F980;
  *(_OWORD *)&v21[16] = *(_OWORD *)&qword_1EDB6F990;
  *(_OWORD *)v17 = static ShapeSecondaryProperties.fields;
  *(_OWORD *)&v17[16] = *(_OWORD *)&qword_1EDB6F930;
  v18 = xmmword_1EDB6F940;
  *(_OWORD *)v19 = *(_OWORD *)byte_1EDB6F950;
  v2 = static ShapeSecondaryProperties.fields;
  v3 = unk_1EDB6F938;
  v4 = *(_QWORD *)byte_1EDB6F950;
  v5 = *((_QWORD *)&xmmword_1EDB6F960 + 1);
  v6 = qword_1EDB6F980;
  v7 = unk_1EDB6F998;
  v8 = qword_1EDB6F9B0;
  v10 = *(_OWORD *)&v17[8];
  v11 = xmmword_1EDB6F940;
  v12 = *(_OWORD *)&v19[8];
  v13 = *(_OWORD *)&qword_1EDB6F970;
  v14 = *(_OWORD *)&v21[8];
  v15 = xmmword_1EDB6F9A0;
  v16 = *(_OWORD *)&v23[8];
  outlined retain of ((String, WritableKeyPath<ShapeSecondaryProperties, CRAttributedString<TextAttributeScope>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<CanvasElementAutoresizeBehavior>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<ShapeAuxiliaryInfo?>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<CanvasElementFlags>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<Shadow?>>))((uint64_t)v17);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = v13;
  *(_QWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = v14;
  *(_QWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 128) = v15;
  *(_QWORD *)(a1 + 144) = v8;
  result = *(double *)&v16;
  *(_OWORD *)(a1 + 152) = v16;
  return result;
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance ShapeSecondaryProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (uint64_t (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties, (uint64_t)&protocol conformance descriptor for ShapeSecondaryProperties);
  return static CRStruct_7.fieldKeys.getter();
}

uint64_t protocol witness for CRStruct_Base.additionalFields.getter in conformance ShapeSecondaryProperties()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CRStruct_Base.additionalFields.setter in conformance ShapeSecondaryProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2 + 44);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

uint64_t protocol witness for CRDT.context.getter in conformance ShapeSecondaryProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (uint64_t (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties, (uint64_t)&protocol conformance descriptor for ShapeSecondaryProperties);
  return CRType.context.getter();
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance ShapeSecondaryProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (uint64_t (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties, (uint64_t)&protocol conformance descriptor for ShapeSecondaryProperties);
  return CRStruct_7.actionUndoingDifference(from:)();
}

uint64_t protocol witness for CRDT.apply(_:) in conformance ShapeSecondaryProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (uint64_t (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties, (uint64_t)&protocol conformance descriptor for ShapeSecondaryProperties);
  return CRStruct_7.apply(_:)();
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance ShapeSecondaryProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (uint64_t (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties, (uint64_t)&protocol conformance descriptor for ShapeSecondaryProperties);
  return CRStruct_7.hasDelta(from:)();
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance ShapeSecondaryProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (uint64_t (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties, (uint64_t)&protocol conformance descriptor for ShapeSecondaryProperties);
  return CRStruct_7.delta(_:from:)();
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance ShapeSecondaryProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (uint64_t (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties, (uint64_t)&protocol conformance descriptor for ShapeSecondaryProperties);
  return CRStruct_7.canMerge(delta:)();
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance ShapeSecondaryProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (uint64_t (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties, (uint64_t)&protocol conformance descriptor for ShapeSecondaryProperties);
  return CRStruct_7.merge(delta:)();
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance ShapeSecondaryProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (uint64_t (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties, (uint64_t)&protocol conformance descriptor for ShapeSecondaryProperties);
  return CRStruct_7.copy(renamingReferences:)();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance ShapeSecondaryProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (uint64_t (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties, (uint64_t)&protocol conformance descriptor for ShapeSecondaryProperties);
  return CRStruct_7.observableDifference(from:with:)();
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance ShapeSecondaryProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (uint64_t (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties, (uint64_t)&protocol conformance descriptor for ShapeSecondaryProperties);
  return CRStruct_7.visitReferences(_:)();
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance ShapeSecondaryProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (uint64_t (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties, (uint64_t)&protocol conformance descriptor for ShapeSecondaryProperties);
  return CRStruct_7.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance ShapeSecondaryProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (uint64_t (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties, (uint64_t)&protocol conformance descriptor for ShapeSecondaryProperties);
  return CRStruct_7.finalizeTimestamps(_:)();
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance ShapeSecondaryProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (uint64_t (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties, (uint64_t)&protocol conformance descriptor for ShapeSecondaryProperties);
  return CRStruct_7.merge(_:)();
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance ShapeSecondaryProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (uint64_t (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties, (uint64_t)&protocol conformance descriptor for ShapeSecondaryProperties);
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance ShapeSecondaryProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (uint64_t (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties, (uint64_t)&protocol conformance descriptor for ShapeSecondaryProperties);
  return CRDT.init(serializedData:)();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance ShapeSecondaryProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (uint64_t (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties, (uint64_t)&protocol conformance descriptor for ShapeSecondaryProperties);
  return CRStruct_7.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance ShapeSecondaryProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (uint64_t (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties, (uint64_t)&protocol conformance descriptor for ShapeSecondaryProperties);
  return CRStruct_7.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance ShapeSecondaryProperties()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (uint64_t (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties, (uint64_t)&protocol conformance descriptor for ShapeSecondaryProperties);
  return CRStruct_7.minEncodingVersion.getter();
}

uint64_t protocol witness for ShapeTextBox.text.getter in conformance Shape@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 52);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t protocol witness for ShapeTextBox.text.setter in conformance Shape(uint64_t a1)
{
  void (*v2)(uint64_t *, char);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];

  v2 = Shape.text.modify(v8);
  v4 = v3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(v4, a1, v5);
  v2(v8, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
}

void (*protocol witness for ShapeTextBox.text.modify in conformance Shape(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Shape.text.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t protocol witness for ShapeTextBox.textResizeBehavior.getter in conformance Shape()
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  return CRRegister.wrappedValue.getter();
}

uint64_t protocol witness for ShapeTextBox.textResizeBehavior.setter in conformance Shape(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *, _QWORD);
  _QWORD *v3;
  uint64_t v5;

  v1 = *a1;
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  v2 = (uint64_t (*)(uint64_t *, _QWORD))CRRegister.wrappedValue.modify();
  *v3 = v1;
  return v2(&v5, 0);
}

BOOL protocol witness for ShapeTextBox.isFixedWidth.getter in conformance Shape()
{
  char v1;

  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  CRRegister.wrappedValue.getter();
  return (v1 & 1) == 0;
}

BOOL protocol witness for ShapeTextBox.isTextBox.getter in conformance Shape()
{
  uint64_t v1;

  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  CRRegister.wrappedValue.getter();
  return v1 != 0;
}

uint64_t protocol witness for ShapeTextBox.textContentType.setter in conformance Shape(unsigned __int8 *a1)
{
  uint64_t v2;
  char v3;

  v2 = *a1;
  v3 = 0;
  return ShapeSecondaryProperties.textContentType.setter(&v2);
}

uint64_t closure #1 in draw #1 <A>() in static ShapeTextBoxRendering.render<A>(_:in:renderFrame:)(void *a1, double *a2, uint64_t a3)
{
  CGFloat v5;
  CGFloat v6;
  CGPoint v7;
  __int128 v9;
  __int128 v10;
  CGAffineTransform v11;
  CGPoint v12;

  v9 = *((_OWORD *)a2 + 1);
  v10 = *(_OWORD *)a2;
  v5 = a2[4];
  v6 = a2[5];
  objc_msgSend(a1, sel_layoutFragmentFrame);
  *(_OWORD *)&v11.a = v10;
  *(_OWORD *)&v11.c = v9;
  v11.tx = v5;
  v11.ty = v6;
  v7 = CGPointApplyAffineTransform(v12, &v11);
  objc_msgSend(a1, sel_drawAtPoint_inContext_, a3, v7.x, v7.y);
  return 1;
}

uint64_t specialized static Shadow.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  void *v5;
  void *v6;
  id v7;
  id v8;
  char v9;

  if (*(double *)a1 != *(double *)a2
    || *(double *)(a1 + 8) != *(double *)(a2 + 8)
    || *(double *)(a1 + 16) != *(double *)(a2 + 16))
  {
    return 0;
  }
  v5 = *(void **)(a2 + 24);
  v6 = *(void **)(a1 + 24);
  type metadata accessor for CGColorRef(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
  v7 = v6;
  v8 = v5;
  v9 = static _CFObject.== infix(_:_:)();

  return v9 & 1;
}

unint64_t lazy protocol witness table accessor for type Shadow.CodingKeys and conformance Shadow.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys;
  if (!lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Shadow.CodingKeys, &type metadata for Shadow.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys;
  if (!lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Shadow.CodingKeys, &type metadata for Shadow.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys;
  if (!lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Shadow.CodingKeys, &type metadata for Shadow.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys;
  if (!lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Shadow.CodingKeys, &type metadata for Shadow.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys;
  if (!lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Shadow.CodingKeys, &type metadata for Shadow.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys;
  if (!lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Shadow.CodingKeys, &type metadata for Shadow.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys;
  if (!lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for Shadow.CodingKeys, &type metadata for Shadow.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Shadow.CodingKeys and conformance Shadow.CodingKeys);
  }
  return result;
}

uint64_t specialized static ShapeAuxiliaryInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;

  v3 = *(double *)(a1 + 16);
  v2 = *(double *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v7 = *(double *)(a2 + 16);
  v6 = *(double *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  lazy protocol witness table accessor for type FormContentType and conformance FormContentType();
  v10 = static CRExtensible.== infix(_:_:)();
  v11 = 0;
  if ((v10 & 1) != 0 && v3 == v7 && v2 == v6 && v5 == v9)
    v11 = specialized static Dictionary<>.== infix(_:_:)(v4, v8);
  return v11 & 1;
}

unint64_t lazy protocol witness table accessor for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ShapeAuxiliaryInfo.CodingKeys, &type metadata for ShapeAuxiliaryInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ShapeAuxiliaryInfo.CodingKeys, &type metadata for ShapeAuxiliaryInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ShapeAuxiliaryInfo.CodingKeys, &type metadata for ShapeAuxiliaryInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ShapeAuxiliaryInfo.CodingKeys, &type metadata for ShapeAuxiliaryInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ShapeAuxiliaryInfo.CodingKeys, &type metadata for ShapeAuxiliaryInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ShapeAuxiliaryInfo.CodingKeys, &type metadata for ShapeAuxiliaryInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys;
  if (!lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ShapeAuxiliaryInfo.CodingKeys, &type metadata for ShapeAuxiliaryInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShapeAuxiliaryInfo.CodingKeys and conformance ShapeAuxiliaryInfo.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CRExtensible<FormContentType> and conformance <> CRExtensible<A>(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD v6[2];

  result = *a1;
  if (!result)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CRExtensible<FormContentType>);
    v6[0] = MEMORY[0x1E0DEB448];
    v6[1] = MEMORY[0x1E0DEB420];
    result = MEMORY[0x1DF0E6450](a2, v5, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined retain of ((String, WritableKeyPath<ShapeSecondaryProperties, CRAttributedString<TextAttributeScope>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<CanvasElementAutoresizeBehavior>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<ShapeAuxiliaryInfo?>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<CanvasElementFlags>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>>), (String, WritableKeyPath<ShapeSecondaryProperties, CRRegister<Shadow?>>))(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Shadow.CodingKeys()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [Shadow.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [Shadow.CodingKeys], MEMORY[0x1E0DEAF50]);
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in ShapeAuxiliaryInfo.CodingKeys()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [ShapeAuxiliaryInfo.CodingKeys] and conformance [A], &demangling cache variable for type metadata for [ShapeAuxiliaryInfo.CodingKeys], MEMORY[0x1E0DEAF50]);
}

uint64_t base witness table accessor for CRStruct_Base_7 in ShapeSecondaryProperties()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (uint64_t (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties, (uint64_t)&protocol conformance descriptor for ShapeSecondaryProperties);
}

uint64_t base witness table accessor for CRStruct_Base in ShapeSecondaryProperties()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (uint64_t (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties, (uint64_t)&protocol conformance descriptor for ShapeSecondaryProperties);
}

uint64_t associated type witness table accessor for CRStruct_Base_7.Type_2 : CRDT in ShapeSecondaryProperties()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<CRAttributedString<TextAttributeScope>.Attributes?> and conformance CRRegister<A>, (uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>, MEMORY[0x1E0D117A8]);
}

uint64_t associated type witness table accessor for CRStruct_Base_7.Type_3 : CRDT in ShapeSecondaryProperties()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<CanvasElementAutoresizeBehavior> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>, MEMORY[0x1E0D117A8]);
}

uint64_t associated type witness table accessor for CRStruct_Base_7.Type_4 : CRDT in ShapeSecondaryProperties()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<ShapeAuxiliaryInfo?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>, MEMORY[0x1E0D117A8]);
}

uint64_t associated type witness table accessor for CRStruct_Base_7.Type_5 : CRDT in ShapeSecondaryProperties()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<CanvasElementFlags> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<CanvasElementFlags>, MEMORY[0x1E0D117A8]);
}

uint64_t associated type witness table accessor for CRStruct_Base_7.Type_6 : CRDT in ShapeSecondaryProperties()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>, MEMORY[0x1E0D117A8]);
}

uint64_t associated type witness table accessor for CRStruct_Base_7.Type_7 : CRDT in ShapeSecondaryProperties()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<Shadow?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<Shadow?>, MEMORY[0x1E0D117A8]);
}

uint64_t base witness table accessor for CRDT in ShapeSecondaryProperties()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (uint64_t (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties, (uint64_t)&protocol conformance descriptor for ShapeSecondaryProperties);
}

uint64_t base witness table accessor for CRMergeable in ShapeSecondaryProperties()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (uint64_t (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties, (uint64_t)&protocol conformance descriptor for ShapeSecondaryProperties);
}

uint64_t base witness table accessor for CRType in ShapeSecondaryProperties()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (uint64_t (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties, (uint64_t)&protocol conformance descriptor for ShapeSecondaryProperties);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in ShapeSecondaryProperties()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRStructMergeableDelta_7<ShapeSecondaryProperties> and conformance CRStructMergeableDelta_7<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_7<ShapeSecondaryProperties>, MEMORY[0x1E0D12778]);
}

uint64_t base witness table accessor for CRCodable in ShapeSecondaryProperties()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ShapeSecondaryProperties and conformance ShapeSecondaryProperties, (uint64_t (*)(uint64_t))type metadata accessor for ShapeSecondaryProperties, (uint64_t)&protocol conformance descriptor for ShapeSecondaryProperties);
}

uint64_t sub_1DDEFF114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_4(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t sub_1DDEFF124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_4(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t keypath_getTm_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;

  type metadata accessor for ShapeSecondaryProperties();
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  return a4(v5);
}

uint64_t sub_1DDEFF18C()
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDEFF1E4()
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDEFF234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_11Tm(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t sub_1DDEFF244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_get_11Tm(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t keypath_get_11Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;

  type metadata accessor for ShapeSecondaryProperties();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  return a4(v5);
}

uint64_t sub_1DDEFF2AC()
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDEFF304()
{
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  return CRRegister.projectedValue.getter();
}

ValueMetadata *type metadata accessor for CanvasElementAutoresizeBehavior()
{
  return &type metadata for CanvasElementAutoresizeBehavior;
}

void destroy for Shadow(uint64_t a1)
{

}

uint64_t initializeWithCopy for Shadow(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = v3;
  return a1;
}

_QWORD *assignWithCopy for Shadow(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  id v5;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v3 = (void *)a2[3];
  v4 = (void *)a1[3];
  a1[3] = v3;
  v5 = v3;

  return a1;
}

uint64_t assignWithTake for Shadow(uint64_t a1, uint64_t a2)
{
  void *v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v3 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for Shadow(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Shadow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Shadow()
{
  return &type metadata for Shadow;
}

uint64_t storeEnumTagSinglePayload for Shadow.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1DDEFF510 + 4 * byte_1DDF48019[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1DDEFF544 + 4 * byte_1DDF48014[v4]))();
}

uint64_t sub_1DDEFF544(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDEFF54C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDEFF554);
  return result;
}

uint64_t sub_1DDEFF560(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDEFF568);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1DDEFF56C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDEFF574(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Shadow.CodingKeys()
{
  return &type metadata for Shadow.CodingKeys;
}

uint64_t destroy for ShapeAuxiliaryInfo()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ShapeAuxiliaryInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ShapeAuxiliaryInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ShapeAuxiliaryInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ShapeAuxiliaryInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShapeAuxiliaryInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShapeAuxiliaryInfo()
{
  return &type metadata for ShapeAuxiliaryInfo;
}

uint64_t storeEnumTagSinglePayload for ShapeAuxiliaryInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1DDEFF774 + 4 * byte_1DDF48023[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1DDEFF7A8 + 4 * byte_1DDF4801E[v4]))();
}

uint64_t sub_1DDEFF7A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDEFF7B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDEFF7B8);
  return result;
}

uint64_t sub_1DDEFF7C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDEFF7CCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1DDEFF7D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDEFF7D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShapeAuxiliaryInfo.CodingKeys()
{
  return &type metadata for ShapeAuxiliaryInfo.CodingKeys;
}

uint64_t *initializeBufferWithCopyOfBuffer for ShapeSecondaryProperties(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v32 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v32 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
    v20 = a3[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
    v24 = a3[9];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    v28 = a3[10];
    v29 = (char *)a1 + v28;
    v30 = (char *)a2 + v28;
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
    *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ShapeSecondaryProperties(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + a2[6];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = a1 + a2[7];
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = a1 + a2[8];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = a1 + a2[9];
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = a1 + a2[10];
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ShapeSecondaryProperties(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ShapeSecondaryProperties(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 24))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 24))(v28, v29, v30);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ShapeSecondaryProperties(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t assignWithTake for ShapeSecondaryProperties(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v20, v21, v22);
  v23 = a3[9];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 40))(v24, v25, v26);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 40))(v28, v29, v30);
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ShapeSecondaryProperties()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDF00134(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_15:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_15;
  }
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[7];
    goto LABEL_15;
  }
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  v12 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v16;
    v13 = a3[8];
    goto LABEL_15;
  }
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  v12 = *(_QWORD *)(v17 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v17;
    v13 = a3[9];
    goto LABEL_15;
  }
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  v12 = *(_QWORD *)(v18 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v18;
    v13 = a3[10];
    goto LABEL_15;
  }
  v20 = *(_QWORD *)(a1 + a3[11]);
  if (v20 >= 0xFFFFFFFF)
    LODWORD(v20) = -1;
  return (v20 + 1);
}

uint64_t storeEnumTagSinglePayload for ShapeSecondaryProperties()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDF002B8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_15:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[6];
    goto LABEL_15;
  }
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  v14 = *(_QWORD *)(v17 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v17;
    v15 = a4[7];
    goto LABEL_15;
  }
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>);
  v14 = *(_QWORD *)(v18 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v18;
    v15 = a4[8];
    goto LABEL_15;
  }
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Shadow?>);
  v14 = *(_QWORD *)(v19 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v19;
    v15 = a4[9];
    goto LABEL_15;
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[10];
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + a4[11]) = (a2 - 1);
  return result;
}

void type metadata completion function for ShapeSecondaryProperties()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  _s9Coherence10CRRegisterVy12CoreGraphics7CGFloatVAfA7CRValue8PaperKityHCg_GMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for CRAttributedString<TextAttributeScope>, (uint64_t (*)(void))lazy protocol witness table accessor for type TextAttributeScope and conformance TextAttributeScope, (uint64_t)&type metadata for TextAttributeScope, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0D12568]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRRegister<Ref<PKStrokeInheritedProperties>?>(319, &lazy cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?, (void (*)(void))lazy protocol witness table accessor for type CRAttributedString<TextAttributeScope>.Attributes? and conformance <A> A?);
    if (v1 <= 0x3F)
    {
      _s9Coherence10CRRegisterVy12CoreGraphics7CGFloatVAfA7CRValue8PaperKityHCg_GMaTm_0(319, &lazy cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>, (uint64_t (*)(void))lazy protocol witness table accessor for type CanvasElementAutoresizeBehavior and conformance CanvasElementAutoresizeBehavior, (uint64_t)&type metadata for CanvasElementAutoresizeBehavior, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0D11780]);
      if (v2 <= 0x3F)
      {
        _s9Coherence10CRRegisterVy12CoreGraphics7CGFloatVAfA7CRValue8PaperKityHCg_GMaTm_0(319, &lazy cache variable for type metadata for CRRegister<CanvasElementFlags>, (uint64_t (*)(void))lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags, (uint64_t)&type metadata for CanvasElementFlags, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0D11780]);
        if (v3 <= 0x3F)
        {
          type metadata accessor for CRRegister<Ref<PKStrokeInheritedProperties>?>(319, &lazy cache variable for type metadata for CRRegister<TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?>, &demangling cache variable for type metadata for TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>?, (void (*)(void))lazy protocol witness table accessor for type TaggedValue_2<PlainStrokeStyle, CRExtensible<BrushStyle>>? and conformance <A> A?);
          if (v4 <= 0x3F)
          {
            type metadata accessor for CRRegister<Shadow?>(319, &lazy cache variable for type metadata for CRRegister<Shadow?>, &demangling cache variable for type metadata for Shadow?, &lazy protocol witness table cache variable for type Shadow? and conformance <A> A?, (uint64_t (*)(void))lazy protocol witness table accessor for type Shadow and conformance Shadow);
            if (v5 <= 0x3F)
            {
              type metadata accessor for CRRegister<Shadow?>(319, &lazy cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>, &demangling cache variable for type metadata for ShapeAuxiliaryInfo?, &lazy protocol witness table cache variable for type ShapeAuxiliaryInfo? and conformance <A> A?, (uint64_t (*)(void))lazy protocol witness table accessor for type ShapeAuxiliaryInfo and conformance ShapeAuxiliaryInfo);
              if (v6 <= 0x3F)
                swift_initStructMetadata();
            }
          }
        }
      }
    }
  }
}

void type metadata accessor for CRRegister<Shadow?>(uint64_t a1, unint64_t *a2, uint64_t *a3, unint64_t *a4, uint64_t (*a5)(void))
{
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    _s8PaperKit5ColorVSgxSg9Coherence7CRValueA2fGRzlWlTm_0(a4, a3, a5);
    v9 = type metadata accessor for CRRegister();
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t type metadata accessor for ShapeTextBoxRendering()
{
  return objc_opt_self();
}

void specialized Sequence.min(by:)(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  double v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  double v35;
  char v36;
  double v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  unint64_t v44;
  char v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unint64_t v64;
  char v65;
  char v66;

  v5 = type metadata accessor for Date();
  v56 = *(_QWORD *)(v5 - 8);
  v57 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 64);
  v53 = a1 + 64;
  v10 = *(_BYTE *)(a1 + 32);
  v11 = 1 << v10;
  v12 = -1;
  if (1 << v10 < 64)
    v12 = ~(-1 << (1 << v10));
  v13 = v12 & v9;
  if (v13)
  {
    v51 = (_QWORD *)a2;
    v52 = v2;
    v14 = 0;
    v15 = __clz(__rbit64(v13));
    v16 = (v13 - 1) & v13;
    v54 = (unint64_t)(v11 + 63) >> 6;
    while (2)
    {
      v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v15);
      v18 = *v17;
      a2 = v17[1];
      v19 = *(_QWORD *)(a1 + 56) + 24 * v15;
      v21 = *(uint64_t *)v19;
      v20 = *(void **)(v19 + 8);
      v22 = *(unsigned __int8 *)(v19 + 16);
      swift_bridgeObjectRetain();
      v58 = v18;
      outlined copy of Data._Representation(v18, a2);
      v59 = v22;
      outlined copy of AsyncCache<Data, CGImageRef>.CacheState(v21, v20, v22);
      v55 = a1;
LABEL_7:
      v60 = v21;
      v24 = *(double *)&v21;
      if (v16)
      {
LABEL_8:
        v61 = (v16 - 1) & v16;
        v62 = v14;
        v25 = __clz(__rbit64(v16)) | (v14 << 6);
        goto LABEL_25;
      }
      while (1)
      {
        v26 = v14 + 1;
        if (__OFADD__(v14, 1))
          break;
        if (v26 >= v54)
          goto LABEL_34;
        v27 = *(_QWORD *)(v53 + 8 * v26);
        v28 = v14 + 1;
        if (!v27)
        {
          v28 = v14 + 2;
          if (v14 + 2 >= v54)
            goto LABEL_34;
          v27 = *(_QWORD *)(v53 + 8 * v28);
          if (!v27)
          {
            v28 = v14 + 3;
            if (v14 + 3 >= v54)
              goto LABEL_34;
            v27 = *(_QWORD *)(v53 + 8 * v28);
            if (!v27)
            {
              v28 = v14 + 4;
              if (v14 + 4 >= v54)
                goto LABEL_34;
              v27 = *(_QWORD *)(v53 + 8 * v28);
              if (!v27)
              {
                v29 = v14 + 5;
                if (v14 + 5 >= v54)
                {
LABEL_34:
                  swift_release();
                  v45 = v59 & 1;
                  v46 = v51;
                  *v51 = v58;
                  v46[1] = a2;
                  v46[2] = v60;
                  v46[3] = v20;
                  *((_BYTE *)v46 + 32) = v45;
                  return;
                }
                v27 = *(_QWORD *)(v53 + 8 * v29);
                if (!v27)
                {
                  while (1)
                  {
                    v28 = v29 + 1;
                    if (__OFADD__(v29, 1))
                      break;
                    if (v28 >= v54)
                      goto LABEL_34;
                    v27 = *(_QWORD *)(v53 + 8 * v28);
                    ++v29;
                    if (v27)
                      goto LABEL_24;
                  }
                  __break(1u);
LABEL_51:
                  v48 = 0;
                  v49 = 6;
                  if (v54 > 6)
                    v49 = v54;
                  v50 = v49 - 6;
                  while (v50 != v48)
                  {
                    v47 = *(_QWORD *)(a1 + 112 + 8 * v48++);
                    if (v47)
                    {
                      v14 = v48 + 5;
                      goto LABEL_38;
                    }
                  }
                  goto LABEL_57;
                }
                v28 = v14 + 5;
              }
            }
          }
        }
LABEL_24:
        v61 = (v27 - 1) & v27;
        v62 = v28;
        v25 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_25:
        v30 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v25);
        v32 = *v30;
        v31 = v30[1];
        v33 = *(_QWORD *)(a1 + 56) + 24 * v25;
        v21 = *(uint64_t *)v33;
        v34 = *(void **)(v33 + 8);
        LODWORD(v33) = *(unsigned __int8 *)(v33 + 16);
        v66 = v33;
        v63 = v33;
        v64 = v31;
        if ((v33 & 1) != 0)
        {
          v35 = *(double *)&v21;
          v36 = 1;
          outlined copy of AsyncCache<Data, CGImageRef>.CacheState(v21, v34, 1);
          outlined copy of Data._Representation(v32, v31);
          outlined copy of AsyncCache<Data, CGImageRef>.CacheState(v21, v34, 1);
          outlined copy of Data._Representation(v32, v31);
          outlined copy of AsyncCache<Data, CGImageRef>.CacheState(v21, v34, 1);

        }
        else
        {
          outlined copy of Data._Representation(v32, v31);
          outlined copy of AsyncCache<Data, CGImageRef>.CacheState(v21, v34, 0);
          outlined copy of Data._Representation(v32, v31);
          outlined copy of AsyncCache<Data, CGImageRef>.CacheState(v21, v34, 0);
          static Date.distantFuture.getter();
          Date.timeIntervalSinceReferenceDate.getter();
          v35 = v37;
          (*(void (**)(char *, uint64_t))(v56 + 8))(v8, v57);
          v36 = v66;
        }
        outlined consume of AsyncCache<Data, CGImageRef>.CacheState(v21, v34, v36);
        v65 = v59 & 1;
        if ((v59 & 1) != 0)
        {
          v38 = 1;
          v39 = a2;
          v40 = v60;
          outlined copy of AsyncCache<Data, CGImageRef>.CacheState(v60, v20, 1);
          v41 = v58;
          outlined copy of Data._Representation(v58, v39);
          outlined copy of AsyncCache<Data, CGImageRef>.CacheState(v40, v20, 1);

          v42 = v24;
        }
        else
        {
          v41 = v58;
          outlined copy of Data._Representation(v58, a2);
          v39 = a2;
          v40 = v60;
          outlined copy of AsyncCache<Data, CGImageRef>.CacheState(v60, v20, 0);
          static Date.distantFuture.getter();
          Date.timeIntervalSinceReferenceDate.getter();
          v42 = v43;
          (*(void (**)(char *, uint64_t))(v56 + 8))(v8, v57);
          v38 = v65;
        }
        outlined consume of AsyncCache<Data, CGImageRef>.CacheState(v40, v20, v38);
        outlined consume of Data._Representation(v41, v39);
        v44 = v64;
        outlined consume of Data._Representation(v32, v64);
        a2 = v39;
        if (v35 < v42)
        {
          outlined consume of Data._Representation(v41, v39);
          outlined consume of AsyncCache<Data, CGImageRef>.CacheState(v60, v20, v59 & 1);
          v58 = v32;
          a2 = v44;
          v20 = v34;
          v59 = v63;
          a1 = v55;
          v16 = v61;
          v14 = v62;
          goto LABEL_7;
        }
        outlined consume of Data._Representation(v32, v44);
        outlined consume of AsyncCache<Data, CGImageRef>.CacheState(v21, v34, v63);
        a1 = v55;
        v16 = v61;
        v14 = v62;
        if (v61)
          goto LABEL_8;
      }
      __break(1u);
LABEL_45:
      if (v23 >= 9)
      {
        v47 = *(_QWORD *)(a1 + 96);
        if (v47)
        {
          v14 = 4;
        }
        else
        {
          v47 = *(_QWORD *)(a1 + 104);
          if (!v47)
            goto LABEL_51;
          v14 = 5;
        }
LABEL_38:
        v16 = (v47 - 1) & v47;
        v15 = __clz(__rbit64(v47)) + (v14 << 6);
        continue;
      }
      break;
    }
  }
  else
  {
    v23 = v10 & 0x3F;
    if (v23 > 6)
    {
      v54 = (unint64_t)(v11 + 63) >> 6;
      v47 = *(_QWORD *)(a1 + 72);
      if (v47)
      {
        v51 = (_QWORD *)a2;
        v52 = v2;
        v14 = 1;
        goto LABEL_38;
      }
      if (v23 >= 8)
      {
        v47 = *(_QWORD *)(a1 + 80);
        v51 = (_QWORD *)a2;
        v52 = v2;
        if (v47)
        {
          v14 = 2;
        }
        else
        {
          v47 = *(_QWORD *)(a1 + 88);
          if (!v47)
            goto LABEL_45;
          v14 = 3;
        }
        goto LABEL_38;
      }
    }
  }
LABEL_57:
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_BYTE *)(a2 + 32) = -1;
}

uint64_t CGImageRef.imageData(compressionQuality:asPng:)(char a1, double a2)
{
  CGImage *v2;
  CGImage *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t inited;
  void *v12;
  id v13;
  CFMutableDataRef v14;
  __CFData *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __CFString *v19;
  CGImageDestination *v20;
  __CFData *v21;
  uint64_t v22;
  CFMutableDataRef Mutable;
  __CFData *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __CFString *v28;
  CGImageDestination *v29;
  const __CFDictionary *isa;
  __CFData *v31;
  uint64_t v33;

  v3 = v2;
  v6 = type metadata accessor for UTType();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
  v12 = (void *)*MEMORY[0x1E0CBC780];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0CBC780];
  *(_QWORD *)(inited + 64) = MEMORY[0x1E0DEF040];
  *(double *)(inited + 40) = a2;
  v13 = v12;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  if ((a1 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_3;
  }
  Mutable = CFDataCreateMutable(0, 0);
  if (!Mutable)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  v24 = Mutable;
  static UTType.heic.getter();
  v25 = UTType.identifier.getter();
  v27 = v26;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v28 = (__CFString *)MEMORY[0x1DF0E41AC](v25, v27);
  swift_bridgeObjectRelease();
  v29 = CGImageDestinationCreateWithData(v24, v28, 1uLL, 0);

  if (!v29)
  {

    goto LABEL_12;
  }
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  CGImageDestinationAddImage(v29, v3, isa);

  if (CGImageDestinationFinalize(v29))
  {
    v31 = v24;
    v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

    return v22;
  }

LABEL_3:
  v14 = CFDataCreateMutable(0, 0);
  if (!v14)
    return 0;
  v15 = v14;
  static UTType.png.getter();
  v16 = UTType.identifier.getter();
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v19 = (__CFString *)MEMORY[0x1DF0E41AC](v16, v18);
  swift_bridgeObjectRelease();
  v20 = CGImageDestinationCreateWithData(v15, v19, 1uLL, 0);

  if (!v20)
  {

    return 0;
  }
  CGImageDestinationAddImage(v20, v3, 0);
  CGImageDestinationFinalize(v20);
  v21 = v15;
  v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v22;
}

uint64_t specialized AsyncCache.addCached(_:for:)(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char v19;
  uint64_t result;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  id v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  id v36;
  char isUniquelyReferenced_nonNull_native;
  id v38;
  uint64_t v39;
  void *v40;
  void *v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  _QWORD v56[4];
  unsigned __int8 v57;
  unsigned __int8 v58;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CGImageRef?, Never>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (uint64_t *)(v3 + 112);
  swift_beginAccess();
  v13 = *(_QWORD *)(v3 + 112);
  if (!*(_QWORD *)(v13 + 16))
  {
LABEL_29:
    outlined copy of Data._Representation(a2, a3);
    static Date.timeIntervalSinceReferenceDate.getter();
    v34 = v33;
    v58 = 1;
    swift_beginAccess();
    if (v58 == 255)
    {
      v38 = a1;
      v39 = specialized Dictionary._Variant.removeValue(forKey:)(a2, a3);
      v41 = v40;
      v43 = v42;
      outlined consume of Data._Representation(a2, a3);
      outlined consume of AsyncCache<Data, CGImageRef>.CacheState?(v39, v41, v43);
    }
    else
    {
      v35 = v58 & 1;
      v36 = a1;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v55 = *v12;
      *v12 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v34, (uint64_t)a1, v35, a2, a3, isUniquelyReferenced_nonNull_native);
      *v12 = v55;
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(a2, a3);
    }
    result = swift_endAccess();
    if (*(_QWORD *)(*v12 + 16) >= 0xBuLL)
    {
      v44 = swift_bridgeObjectRetain();
      specialized Sequence.min(by:)(v44, (unint64_t)v56);
      result = swift_bridgeObjectRelease();
      if (v57 != 255)
      {
        v45 = v56[0];
        v46 = v56[1];
        outlined consume of AsyncCache<Data, CGImageRef>.CacheState(v56[2], (void *)v56[3], v57 & 1);
        swift_beginAccess();
        outlined copy of Data._Representation(v45, v46);
        v47 = specialized Dictionary._Variant.removeValue(forKey:)(v45, v46);
        v49 = v48;
        v51 = v50;
        swift_endAccess();
        outlined consume of Data._Representation(v45, v46);
        outlined consume of AsyncCache<Data, CGImageRef>.CacheState?(v47, v49, v51);
        return outlined consume of Data._Representation(v45, v46);
      }
    }
    return result;
  }
  swift_bridgeObjectRetain();
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v15 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  v53 = a2;
  v54 = v12;
  v16 = *(_QWORD *)(v13 + 56) + 24 * v14;
  v17 = *(_QWORD *)v16;
  v18 = *(void **)(v16 + 8);
  v19 = *(_BYTE *)(v16 + 16);
  outlined copy of AsyncCache<Data, CGImageRef>.CacheState(*(_QWORD *)v16, v18, v19);
  result = swift_bridgeObjectRelease();
  if ((v19 & 1) != 0)
  {
    outlined consume of AsyncCache<Data, CGImageRef>.CacheState(v17, v18, 1);
    a2 = v53;
    v12 = v54;
    goto LABEL_29;
  }
  v52 = a3;
  v21 = 0;
  v22 = v17 + 64;
  v23 = 1 << *(_BYTE *)(v17 + 32);
  v24 = -1;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v25 = v24 & *(_QWORD *)(v17 + 64);
  v26 = (unint64_t)(v23 + 63) >> 6;
  while (1)
  {
    if (v25)
    {
      v27 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      v28 = v27 | (v21 << 6);
      goto LABEL_10;
    }
    v30 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v30 >= v26)
      goto LABEL_28;
    v31 = *(_QWORD *)(v22 + 8 * v30);
    ++v21;
    if (!v31)
    {
      v21 = v30 + 1;
      if (v30 + 1 >= v26)
        goto LABEL_28;
      v31 = *(_QWORD *)(v22 + 8 * v21);
      if (!v31)
      {
        v21 = v30 + 2;
        if (v30 + 2 >= v26)
          goto LABEL_28;
        v31 = *(_QWORD *)(v22 + 8 * v21);
        if (!v31)
        {
          v21 = v30 + 3;
          if (v30 + 3 >= v26)
            goto LABEL_28;
          v31 = *(_QWORD *)(v22 + 8 * v21);
          if (!v31)
            break;
        }
      }
    }
LABEL_27:
    v25 = (v31 - 1) & v31;
    v28 = __clz(__rbit64(v31)) + (v21 << 6);
LABEL_10:
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v11, *(_QWORD *)(v17 + 56) + *(_QWORD *)(v8 + 72) * v28, v7);
    v56[0] = a1;
    v29 = a1;
    CheckedContinuation.resume(returning:)();
    result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
  v32 = v30 + 4;
  if (v32 >= v26)
  {
LABEL_28:
    swift_release();
    a2 = v53;
    v12 = v54;
    a3 = v52;
    goto LABEL_29;
  }
  v31 = *(_QWORD *)(v22 + 8 * v32);
  if (v31)
  {
    v21 = v32;
    goto LABEL_27;
  }
  while (1)
  {
    v21 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v21 >= v26)
      goto LABEL_28;
    v31 = *(_QWORD *)(v22 + 8 * v21);
    ++v32;
    if (v31)
      goto LABEL_27;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t ImageThumbnailManager.receiveThumbnailMessage(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  return swift_task_switch();
}

void ImageThumbnailManager.receiveThumbnailMessage(_:)()
{
  __asm { BR              X10 }
}

void sub_1DDF0150C()
{
  if (one-time initialization token for magicNumber != -1)
    swift_once();
  __asm { BR              X11 }
}

uint64_t ImageThumbnailManager.receiveThumbnailMessage(_:)()
{
  uint64_t v0;

  specialized AsyncCache.addCached(_:for:)(*(void **)(v0 + 160), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;

  v2 = *(void **)(v0 + 152);
  v1 = *(void **)(v0 + 160);
  v3 = *(void **)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 112);
  outlined consume of Data._Representation(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));

  outlined consume of Data._Representation(v5, v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ImageThumbnailManager.__deallocating_deinit()
{
  swift_release();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t type metadata accessor for ImageThumbnailManager()
{
  return objc_opt_self();
}

uint64_t CGImageRef.jpegData(compressionQuality:)(double a1)
{
  CGImage *v1;
  CGImage *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  __CFString *v16;
  __CFString *v17;
  void (*v18)(char *, uint64_t);
  char v20;
  CFMutableDataRef Mutable;
  __CFData *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __CFString *v26;
  CGImageDestination *v27;
  uint64_t inited;
  void *v29;
  id v30;
  const __CFDictionary *isa;
  __CFData *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  __CFString *v37;

  v2 = v1;
  v4 = type metadata accessor for UTType();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v35 - v11;
  v13 = (id)CGImageGetUTType(v2);
  if (v13)
  {
    v36 = 0;
    v37 = 0;
    static String._conditionallyBridgeFromObjectiveC(_:result:)();

    v14 = v36;
    v13 = v37;
  }
  else
  {
    v14 = 0;
  }
  static UTType.jpeg.getter();
  v15 = UTType.identifier.getter();
  v17 = v16;
  v18 = *(void (**)(char *, uint64_t))(v5 + 8);
  v18(v12, v4);
  if (v13)
  {
    if (v14 == v15 && v13 == v17)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v20 & 1) != 0)
      return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if ((CGImageHasAlpha() & 1) != 0)
    return 0;
  if (CGImageGetMask())
    return 0;
  Mutable = CFDataCreateMutable(0, 0);
  if (!Mutable)
    return 0;
  v22 = Mutable;
  static UTType.jpeg.getter();
  v23 = UTType.identifier.getter();
  v25 = v24;
  v18(v8, v4);
  v26 = (__CFString *)MEMORY[0x1DF0E41AC](v23, v25);
  swift_bridgeObjectRelease();
  v27 = CGImageDestinationCreateWithData(v22, v26, 1uLL, 0);

  if (!v27)
  {

    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
  v29 = (void *)*MEMORY[0x1E0CBC780];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0CBC780];
  *(_QWORD *)(inited + 64) = MEMORY[0x1E0DEB070];
  *(double *)(inited + 40) = a1;
  v30 = v29;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  CGImageDestinationAddImage(v27, v2, isa);

  CGImageDestinationFinalize(v27);
  v32 = v22;
  v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v33;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      v2 = String.UTF8View._foreignCount()();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size_0(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

unint64_t lazy protocol witness table accessor for type CFStringRef and conformance CFStringRef()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef;
  if (!lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef)
  {
    type metadata accessor for CFStringRef(255);
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CFStringRef, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef);
  }
  return result;
}

uint64_t specialized Data.init(capacity:)(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result < 15)
    {
      return 0;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(capacity:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t specialized static ImageThumbnailManager.generateThumbnailMessage(from:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;

  v1[5] = a1;
  v2 = type metadata accessor for CRAsset();
  v1[6] = v2;
  v1[7] = *(_QWORD *)(v2 - 8);
  v1[8] = swift_task_alloc();
  v3 = (_QWORD *)swift_task_alloc();
  v1[9] = v3;
  *v3 = v1;
  v3[1] = specialized static ImageThumbnailManager.generateThumbnailMessage(from:);
  return CRAsset.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(1024, 0, 0);
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t specialized static ImageThumbnailManager.generateThumbnailMessage(from:)()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;

  v1 = *(void **)(v0 + 80);
  if (v1)
  {
    CGImageRef.imageData(compressionQuality:asPng:)(0, 0.2);
    if (v2 >> 60 != 15)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 16))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
      CRAsset.digest.getter();
      __asm { BR              X10 }
    }

  }
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xF000000000000000);
}

void sub_1DDF02748()
{
  unint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = v1[7];
  v3 = v1[8];
  v5 = v1[6];
  outlined consume of Data._Representation(v2, v0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  JUMPOUT(0x1DDF0276CLL);
}

ValueMetadata *type metadata accessor for RoundedCorner()
{
  return &type metadata for RoundedCorner;
}

unint64_t lazy protocol witness table accessor for type _ShapeView<RoundedCorner, ForegroundStyle> and conformance _ShapeView<A, B>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type _ShapeView<RoundedCorner, ForegroundStyle> and conformance _ShapeView<A, B>;
  if (!lazy protocol witness table cache variable for type _ShapeView<RoundedCorner, ForegroundStyle> and conformance _ShapeView<A, B>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for _ShapeView<RoundedCorner, ForegroundStyle>);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CD8668], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeView<RoundedCorner, ForegroundStyle> and conformance _ShapeView<A, B>);
  }
  return result;
}

double protocol witness for Shape.path(in:) in conformance RoundedCorner@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  double *v5;
  id v7;
  id v8;
  double result;
  __int128 v10;
  __int128 v11;
  char v12;

  v7 = objc_msgSend((id)objc_opt_self(), sel_bezierPathWithRoundedRect_byRoundingCorners_cornerRadii_, *((_QWORD *)v5 + 1), a2, a3, a4, a5, *v5, *v5);
  v8 = objc_msgSend(v7, sel_CGPath);
  Path.init(_:)();

  result = *(double *)&v10;
  *(_OWORD *)a1 = v10;
  *(_OWORD *)(a1 + 16) = v11;
  *(_BYTE *)(a1 + 32) = v12;
  return result;
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance RoundedCorner()
{
  return Shape.sizeThatFits(_:)();
}

void (*protocol witness for Animatable.animatableData.modify in conformance RoundedCorner(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance RoundedCorner()
{
  lazy protocol witness table accessor for type RoundedCorner and conformance RoundedCorner();
  return static Shape._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance RoundedCorner()
{
  lazy protocol witness table accessor for type RoundedCorner and conformance RoundedCorner();
  return static Shape._makeViewList(view:inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance RoundedCorner()
{
  lazy protocol witness table accessor for type RoundedCorner and conformance RoundedCorner();
  return Shape.body.getter();
}

unint64_t lazy protocol witness table accessor for type EmptyAnimatableData and conformance EmptyAnimatableData()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData;
  if (!lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData)
  {
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CDB3D0], MEMORY[0x1E0CDB3F0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyAnimatableData and conformance EmptyAnimatableData);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RoundedCorner and conformance RoundedCorner()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RoundedCorner and conformance RoundedCorner;
  if (!lazy protocol witness table cache variable for type RoundedCorner and conformance RoundedCorner)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RoundedCorner, &type metadata for RoundedCorner);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedCorner and conformance RoundedCorner);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RoundedCorner and conformance RoundedCorner;
  if (!lazy protocol witness table cache variable for type RoundedCorner and conformance RoundedCorner)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RoundedCorner, &type metadata for RoundedCorner);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedCorner and conformance RoundedCorner);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type RoundedCorner and conformance RoundedCorner;
  if (!lazy protocol witness table cache variable for type RoundedCorner and conformance RoundedCorner)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for RoundedCorner, &type metadata for RoundedCorner);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedCorner and conformance RoundedCorner);
  }
  return result;
}

uint64_t dispatch thunk of MagicGenerativePlaygroundContainer.initiateMagicGenerativePlayground(context:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of MagicGenerativePlaygroundContainer.magicGenerativePlaygroundTokenProvider.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of MagicGenerativePlaygroundContainer.magicGenerativePlaygroundTokenProvider.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of MagicGenerativePlaygroundContainer.magicGenerativePlaygroundTokenProvider.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t *initializeBufferWithCopyOfBuffer for MiniStyleButtons(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    swift_weakCopyInit();
  }
  return a1;
}

uint64_t destroy for MiniStyleButtons(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_weakDestroy();
}

uint64_t initializeWithCopy for MiniStyleButtons(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  swift_weakCopyInit();
  return a1;
}

uint64_t assignWithCopy for MiniStyleButtons(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  swift_weakCopyAssign();
  return a1;
}

uint64_t initializeWithTake for MiniStyleButtons(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  swift_weakTakeInit();
  return a1;
}

uint64_t assignWithTake for MiniStyleButtons(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  swift_weakTakeAssign();
  return a1;
}

uint64_t getEnumTagSinglePayload for MiniStyleButtons()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDF02DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for MiniStyleButtons()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDF02E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for MiniStyleButtons()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MiniStyleButtons;
  if (!type metadata singleton initialization cache for MiniStyleButtons)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for MiniStyleButtons()
{
  unint64_t v0;

  type metadata accessor for Bindable<MiniMenuState>();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t associated type witness table accessor for View.Body : View in MiniStyleButtons()
{
  return swift_getOpaqueTypeConformance2();
}

_QWORD *MiniStyleButtons.body.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  void (*v26)(char *, uint64_t);
  char *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  __int128 v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  __int128 v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  void *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t KeyPath;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _BYTE v86[136];
  _BYTE v87[128];
  _QWORD v88[16];
  _QWORD v89[17];
  _BYTE v90[434];
  _OWORD v91[8];
  char v92;
  _QWORD v93[16];
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  char v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  __int16 v101;
  char v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  _QWORD v106[2];
  unsigned __int8 v107;
  uint64_t v108;
  unsigned __int8 v109;
  uint64_t v110;
  unsigned __int8 v111;
  uint64_t v112;
  _BYTE v113[144];

  v67 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bindable<MiniMenuState>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  *(_QWORD *)&v84 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v63 - v8;
  v85 = v1;
  Bindable.wrappedValue.getter();
  v10 = *(_QWORD *)v90;
  swift_getKeyPath();
  *(_QWORD *)v90 = v10;
  v11 = lazy protocol witness table accessor for type MiniMenuState and conformance MiniMenuState();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v12 = *(_QWORD *)(v10 + 40);
  swift_release();
  if ((v12 & 1) != 0)
  {
    Bindable.projectedValue.getter();
    swift_getKeyPath();
    v13 = v9;
    Bindable<A>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
    v83 = *(_OWORD *)v90;
    v82 = *(_QWORD *)&v90[16];
    LODWORD(v81) = v90[24];
    KeyPath = swift_getKeyPath();
    *(_QWORD *)&v91[0] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGColorRef?);
    State.init(wrappedValue:)();
    v14 = v94;
    v15 = v11;
    v16 = *((_QWORD *)&v94 + 1);
    LOBYTE(v91[0]) = 0;
    State.init(wrappedValue:)();
    v17 = v3;
    v18 = v94;
    v19 = *((_QWORD *)&v94 + 1);
    LOBYTE(v91[0]) = 0;
    State.init(wrappedValue:)();
    v20 = v94;
    LOBYTE(v94) = 0;
    *(_QWORD *)v90 = KeyPath;
    v90[8] = 0;
    *(_OWORD *)&v90[16] = v83;
    *(_QWORD *)&v90[32] = v82;
    v90[40] = v81;
    *(_QWORD *)&v90[48] = v14;
    v9 = v13;
    *(_QWORD *)&v90[56] = v16;
    v11 = v15;
    memset(&v90[64], 0, 26);
    v90[96] = v18;
    v3 = v17;
    *(_QWORD *)&v90[104] = v19;
    v90[112] = v20;
    *(_QWORD *)&v90[120] = *((_QWORD *)&v94 + 1);
    UnknownCanvasElementView.flags.modify(v90, v21);
  }
  else
  {
    _s8PaperKit15MiniColorButtonVSgWOi0_(v90);
  }
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v90, (uint64_t)v113, &demangling cache variable for type metadata for MiniColorButton?);
  Bindable.wrappedValue.getter();
  v22 = *(_QWORD *)v90;
  swift_getKeyPath();
  *(_QWORD *)v90 = v22;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v23 = *(_QWORD *)(v22 + 40);
  swift_release();
  if ((v23 & 2) != 0)
  {
    Bindable.wrappedValue.getter();
    v24 = *(_QWORD *)v90;
    swift_getKeyPath();
    *(_QWORD *)v90 = v24;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v25 = *(unsigned __int8 *)(v24 + 73);
    swift_release();
    v68 = v11;
    v69 = v3;
    v65 = v9;
    Bindable.projectedValue.getter();
    swift_getKeyPath();
    Bindable<A>.subscript.getter();
    swift_release();
    if (v25 == 1)
    {
      v26 = *(void (**)(char *, uint64_t))(v3 + 8);
      v26(v9, v2);
      v83 = *(_OWORD *)v90;
      v82 = *(_QWORD *)&v90[16];
      LODWORD(v81) = v90[24];
      v27 = (char *)v84;
      Bindable.projectedValue.getter();
      swift_getKeyPath();
      Bindable<A>.subscript.getter();
      swift_release();
      v26(v27, v2);
      v84 = v94;
      KeyPath = v95;
      LODWORD(v79) = BYTE8(v95);
      Bindable.wrappedValue.getter();
      v28 = *(_QWORD *)&v91[0];
      swift_getKeyPath();
      *(_QWORD *)&v91[0] = v28;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      v29 = *(_BYTE *)(v28 + 89);
      swift_release();
      v30 = swift_getKeyPath();
      v89[0] = 0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGColorRef?);
      State.init(wrappedValue:)();
      v31 = v91[0];
      LOBYTE(v89[0]) = 0;
      State.init(wrappedValue:)();
      v32 = v91[0];
      v33 = *((_QWORD *)&v91[0] + 1);
      LOBYTE(v89[0]) = 0;
      State.init(wrappedValue:)();
      LOBYTE(v89[0]) = 0;
      *(_QWORD *)&v94 = v30;
      BYTE8(v94) = 0;
      v95 = v83;
      v96 = v82;
      v97 = v81;
      v98 = v31;
      v99 = v84;
      v100 = KeyPath;
      LOBYTE(v101) = v79;
      HIBYTE(v101) = v29;
      v102 = v32;
      v103 = v33;
      v104 = v91[0];
      v105 = *((_QWORD *)&v91[0] + 1);
      _s7SwiftUI19_ConditionalContentV7StorageOy8PaperKit15MiniColorButtonVAH_GWOi_((uint64_t)&v94);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
      v84 = *(_OWORD *)v90;
      *(_QWORD *)&v83 = *(_QWORD *)&v90[16];
      v34 = v90[24];
      v35 = swift_getKeyPath();
      *(_QWORD *)&v91[0] = 0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGColorRef?);
      State.init(wrappedValue:)();
      v36 = v94;
      LOBYTE(v91[0]) = 0;
      State.init(wrappedValue:)();
      v37 = v94;
      v38 = *((_QWORD *)&v94 + 1);
      LOBYTE(v91[0]) = 0;
      State.init(wrappedValue:)();
      v39 = v94;
      v40 = *((_QWORD *)&v94 + 1);
      LOBYTE(v89[0]) = 0;
      *(_QWORD *)&v94 = v35;
      BYTE8(v94) = 0;
      v95 = v84;
      v96 = v83;
      v97 = v34;
      v98 = v36;
      v100 = 0;
      v99 = 0uLL;
      v101 = 0;
      v102 = v37;
      v103 = v38;
      v104 = v39;
      v105 = v40;
      _s7SwiftUI19_ConditionalContentV7StorageOy8PaperKit15MiniColorButtonVAH_GWOi0_((uint64_t)&v94);
    }
    outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v94, (uint64_t)v91, &demangling cache variable for type metadata for _ConditionalContent<MiniColorButton, MiniColorButton>.Storage);
    lazy protocol witness table accessor for type MiniColorButton and conformance MiniColorButton();
    _ConditionalContent<>.init(storage:)();
    v91[6] = *(_OWORD *)&v90[96];
    v91[7] = *(_OWORD *)&v90[112];
    v92 = v90[128];
    v91[2] = *(_OWORD *)&v90[32];
    v91[3] = *(_OWORD *)&v90[48];
    v91[4] = *(_OWORD *)&v90[64];
    v91[5] = *(_OWORD *)&v90[80];
    v91[0] = *(_OWORD *)v90;
    v91[1] = *(_OWORD *)&v90[16];
    UnknownCanvasElementView.flags.modify(v91, v41);
    outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v91, (uint64_t)&v94, &demangling cache variable for type metadata for _ConditionalContent<MiniColorButton, MiniColorButton>?);
    v3 = v69;
    v9 = v65;
  }
  else
  {
    _s7SwiftUI19_ConditionalContentVy8PaperKit15MiniColorButtonVAFGSgWOi0_((uint64_t)v90);
    outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v90, (uint64_t)&v94, &demangling cache variable for type metadata for _ConditionalContent<MiniColorButton, MiniColorButton>?);
  }
  Bindable.wrappedValue.getter();
  v42 = *(_QWORD *)v90;
  swift_getKeyPath();
  *(_QWORD *)v90 = v42;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v43 = *(_QWORD *)(v42 + 40);
  swift_release();
  if ((v43 & 4) != 0)
  {
    Bindable.wrappedValue.getter();
    specialized MiniTextButton.init(state:isShowingTextStyleSelector:isShowingFontPopover:isShowingColorPopover:)((uint64_t)v106);
    *(_QWORD *)&v84 = v106[1];
    v75 = v107;
    v76 = v106[0];
    v74 = v109;
    v82 = v110;
    *(_QWORD *)&v83 = v108;
    v73 = v111;
    v81 = v112;
  }
  else
  {
    v75 = 0;
    v76 = 0;
    *(_QWORD *)&v84 = 0;
    v82 = 0;
    *(_QWORD *)&v83 = 0;
    v73 = 0;
    v74 = 0;
    v81 = 0;
  }
  Bindable.wrappedValue.getter();
  v44 = *(_QWORD *)v90;
  swift_getKeyPath();
  *(_QWORD *)v90 = v44;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v45 = *(_QWORD *)(v44 + 40);
  swift_release();
  if ((v45 & 8) != 0)
  {
    Bindable.projectedValue.getter();
    swift_getKeyPath();
    Bindable<A>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
    v79 = *(_QWORD *)&v90[8];
    KeyPath = *(_QWORD *)v90;
    v70 = v90[24];
    v71 = *(_QWORD *)&v90[16];
    v78 = *(_QWORD *)&v90[32];
    v46 = v90[40];
    v47 = v90[41];
    LOBYTE(v89[0]) = 0;
    State.init(wrappedValue:)();
    v72 = LOBYTE(v91[0]);
    v66 = *((_QWORD *)&v91[0] + 1);
    if (v47)
      v48 = 256;
    else
      v48 = 0;
    v77 = v48 | v46;
  }
  else
  {
    v71 = 0;
    v72 = 0;
    v66 = 0;
    v79 = 0;
    KeyPath = 0;
    v70 = 0;
    v78 = 0;
    v77 = 0;
  }
  Bindable.wrappedValue.getter();
  v49 = *(_QWORD *)v90;
  swift_getKeyPath();
  *(_QWORD *)v90 = v49;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v50 = *(_QWORD *)(v49 + 40);
  swift_release();
  if ((v50 & 0x10) != 0)
  {
    Bindable.projectedValue.getter();
    swift_getKeyPath();
    Bindable<A>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
    v69 = *(_QWORD *)v90;
    v64 = *(_QWORD *)&v90[16];
    v65 = *(char **)&v90[8];
    v52 = v90[24];
    Bindable.wrappedValue.getter();
    v53 = *(_QWORD *)&v91[0];
    swift_getKeyPath();
    *(_QWORD *)&v91[0] = v53;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v54 = *(unsigned __int8 *)(v53 + 201);
    swift_release();
    LOBYTE(v89[0]) = 0;
    State.init(wrappedValue:)();
    v51 = LOBYTE(v91[0]);
    v85 = *((_QWORD *)&v91[0] + 1);
    if (v54)
      v55 = 256;
    else
      v55 = 0;
    LODWORD(v68) = v55 | v52;
  }
  else
  {
    v51 = 0;
    v85 = 0;
    v69 = 0;
    v64 = 0;
    v65 = 0;
    LODWORD(v68) = 0;
  }
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v113, (uint64_t)v87, &demangling cache variable for type metadata for MiniColorButton?);
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v94, (uint64_t)v86, &demangling cache variable for type metadata for _ConditionalContent<MiniColorButton, MiniColorButton>?);
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v87, (uint64_t)v88, &demangling cache variable for type metadata for MiniColorButton?);
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v86, (uint64_t)v89, &demangling cache variable for type metadata for _ConditionalContent<MiniColorButton, MiniColorButton>?);
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v88, (uint64_t)v90, &demangling cache variable for type metadata for MiniColorButton?);
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v89, (uint64_t)&v90[128], &demangling cache variable for type metadata for _ConditionalContent<MiniColorButton, MiniColorButton>?);
  v56 = v76;
  *(_QWORD *)&v90[264] = v76;
  *(_QWORD *)&v90[272] = v84;
  *(_QWORD *)&v90[280] = v75;
  *(_QWORD *)&v90[288] = v83;
  *(_QWORD *)&v90[296] = v74;
  *(_QWORD *)&v90[304] = v82;
  *(_QWORD *)&v90[312] = v73;
  *(_QWORD *)&v90[320] = v81;
  v57 = v72;
  *(_QWORD *)&v90[328] = v72;
  v59 = (uint64_t)v65;
  v58 = v66;
  *(_QWORD *)&v90[336] = v66;
  *(_QWORD *)&v90[344] = KeyPath;
  *(_QWORD *)&v90[352] = v79;
  *(_QWORD *)&v90[360] = v71;
  *(_QWORD *)&v90[368] = v70;
  *(_QWORD *)&v90[376] = v78;
  *(_WORD *)&v90[384] = v77;
  *(_QWORD *)&v90[392] = v51;
  *(_QWORD *)&v90[400] = v85;
  *(_QWORD *)&v90[408] = v69;
  *(_QWORD *)&v90[416] = v65;
  *(_QWORD *)&v90[424] = v64;
  *(_WORD *)&v90[432] = v68;
  memcpy(v67, v90, 0x1B2uLL);
  outlined retain of MiniColorButton?(v88, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of MiniColorButton?);
  outlined retain of _ConditionalContent<MiniColorButton, MiniColorButton>?((uint64_t)v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of _ConditionalContent<MiniColorButton, MiniColorButton>?);
  outlined copy of MiniTextButton?(v56, v84);
  outlined copy of MiniLineEndsButton?(v57, v58, KeyPath, v79);
  v60 = v85;
  v61 = v69;
  outlined copy of MiniLineEndsButton?(v51, v85, v69, v59);
  outlined consume of MiniObjectPropertiesButton?(v51, v60, v61, v59);
  outlined consume of MiniObjectPropertiesButton?(v72, v58, KeyPath, v79);
  outlined consume of MiniTextButton?(v76, v84);
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v86, (uint64_t)v91, &demangling cache variable for type metadata for _ConditionalContent<MiniColorButton, MiniColorButton>?);
  outlined retain of _ConditionalContent<MiniColorButton, MiniColorButton>?((uint64_t)v91, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of _ConditionalContent<MiniColorButton, MiniColorButton>?);
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v87, (uint64_t)v93, &demangling cache variable for type metadata for MiniColorButton?);
  return outlined retain of MiniColorButton?(v93, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of MiniColorButton?);
}

unint64_t lazy protocol witness table accessor for type MiniMenuState and conformance MiniMenuState()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState;
  if (!lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState)
  {
    v1 = type metadata accessor for MiniMenuState();
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for MiniMenuState, v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MiniMenuState and conformance MiniMenuState);
  }
  return result;
}

double _s8PaperKit15MiniColorButtonVSgWOi0_(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double _s7SwiftUI19_ConditionalContentVy8PaperKit15MiniColorButtonVAFGSgWOi0_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 128) = -1;
  return result;
}

uint64_t outlined copy of MiniColorButton?(uint64_t result, char a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  id v12;
  id v13;

  if (a4)
  {
    outlined copy of Environment<MiniMenuController?>.Content(result, a2 & 1);
    swift_retain();
    swift_retain();
    swift_retain();
    v12 = a5;
    v13 = a7;
    outlined copy of Binding<Inspected<CGFloat>>?(a9, a10);
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined copy of Binding<Inspected<CGFloat>>?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined copy of _ConditionalContent<MiniColorButton, MiniColorButton>?(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17)
{
  if (a17 != 255)
    return outlined copy of _ConditionalContent<MiniColorButton, MiniColorButton>.Storage(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return a1;
}

uint64_t outlined copy of _ConditionalContent<MiniColorButton, MiniColorButton>.Storage(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  id v12;
  id v13;

  outlined copy of Environment<MiniMenuController?>.Content(a1, a2 & 1);
  swift_retain();
  swift_retain();
  swift_retain();
  v12 = a5;
  v13 = a7;
  outlined copy of Binding<Inspected<CGFloat>>?(a9, a10);
  swift_retain();
  return swift_retain();
}

uint64_t outlined copy of MiniTextButton?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined copy of MiniLineEndsButton?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of MiniObjectPropertiesButton?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined consume of MiniTextButton?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined retain of _ConditionalContent<MiniColorButton, MiniColorButton>?(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 128);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), v4);
  return a1;
}

uint64_t outlined consume of _ConditionalContent<MiniColorButton, MiniColorButton>?(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17)
{
  if (a17 != 255)
    return outlined consume of _ConditionalContent<MiniColorButton, MiniColorButton>.Storage(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return a1;
}

uint64_t outlined consume of _ConditionalContent<MiniColorButton, MiniColorButton>.Storage(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  outlined consume of Environment<MiniMenuController?>.Content(a1, a2 & 1);
  swift_release();
  swift_release();

  swift_release();
  outlined consume of Binding<Inspected<CGFloat>>?(a9, a10);
  swift_release();
  return swift_release();
}

uint64_t outlined consume of Binding<Inspected<CGFloat>>?(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

_QWORD *outlined retain of MiniColorButton?(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15]);
  return a1;
}

uint64_t outlined consume of MiniColorButton?(uint64_t result, char a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a4)
  {
    outlined consume of Environment<MiniMenuController?>.Content(result, a2 & 1);
    swift_release();
    swift_release();

    swift_release();
    outlined consume of Binding<Inspected<CGFloat>>?(a9, a10);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t _s7SwiftUI19_ConditionalContentV7StorageOy8PaperKit15MiniColorButtonVAH_GWOi0_(uint64_t result)
{
  *(_BYTE *)(result + 128) = 1;
  return result;
}

unint64_t lazy protocol witness table accessor for type MiniColorButton and conformance MiniColorButton()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type MiniColorButton and conformance MiniColorButton;
  if (!lazy protocol witness table cache variable for type MiniColorButton and conformance MiniColorButton)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for MiniColorButton, &type metadata for MiniColorButton);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MiniColorButton and conformance MiniColorButton);
  }
  return result;
}

uint64_t _s7SwiftUI19_ConditionalContentV7StorageOy8PaperKit15MiniColorButtonVAH_GWOi_(uint64_t result)
{
  *(_BYTE *)(result + 128) = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type TupleView<(MiniColorButton?, _ConditionalContent<MiniColorButton, MiniColorButton>?, MiniTextButton?, MiniLineEndsButton?, MiniObjectPropertiesButton?, MiniDivider)> and conformance TupleView<A>()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type TupleView<(MiniColorButton?, _ConditionalContent<MiniColorButton, MiniColorButton>?, MiniTextButton?, MiniLineEndsButton?, MiniObjectPropertiesButton?, MiniDivider)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(MiniColorButton?, _ConditionalContent<MiniColorButton, MiniColorButton>?, MiniTextButton?, MiniLineEndsButton?, MiniObjectPropertiesButton?, MiniDivider)> and conformance TupleView<A>)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for TupleView<(MiniColorButton?, _ConditionalContent<MiniColorButton, MiniColorButton>?, MiniTextButton?, MiniLineEndsButton?, MiniObjectPropertiesButton?, MiniDivider)>);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0CE0680], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(MiniColorButton?, _ConditionalContent<MiniColorButton, MiniColorButton>?, MiniTextButton?, MiniLineEndsButton?, MiniObjectPropertiesButton?, MiniDivider)> and conformance TupleView<A>);
  }
  return result;
}

uint64_t type metadata accessor for CalculateScrubberViewController()
{
  uint64_t result;

  result = type metadata singleton initialization cache for CalculateScrubberViewController;
  if (!type metadata singleton initialization cache for CalculateScrubberViewController)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for CalculateScrubberViewController()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for CalculateScrubberView();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void @objc CalculateScrubberViewController.init(coder:)(char *a1, uint64_t a2, void *a3)
{
  id v4;

  *(_QWORD *)&a1[direct field offset for CalculateScrubberViewController.hostingView] = 0;
  v4 = a3;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void @objc CalculateScrubberViewController.viewDidLayoutSubviews()(void *a1)
{
  id v1;
  id v2;
  void *v3;
  double v4;
  double v5;
  double v6;
  double v7;
  objc_super v8;

  v8.receiver = a1;
  v8.super_class = (Class)swift_getObjectType();
  v1 = v8.receiver;
  objc_msgSendSuper2(&v8, sel_viewDidLayoutSubviews);
  v2 = objc_msgSend(v1, sel_view, v8.receiver, v8.super_class);
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, sel_systemLayoutSizeFittingSize_, *MEMORY[0x1E0DC4FF8], *(double *)(MEMORY[0x1E0DC4FF8] + 8));
    v5 = v4;
    v7 = v6;

    objc_msgSend(v1, sel_setPreferredContentSize_, v5, v7);
  }
  else
  {
    __break(1u);
  }
}

uint64_t @objc CalculateScrubberViewController._canShowWhileLocked()()
{
  return 1;
}

void CalculateScrubberViewController.__allocating_init(rootView:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void CalculateScrubberViewController.__allocating_init(coder:rootView:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t CalculateScrubberViewController.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  v1 = v0 + direct field offset for CalculateScrubberViewController.scrubberView;
  v2 = type metadata accessor for CalculateScrubberView();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

uint64_t @objc CalculateScrubberViewController.__ivar_destroyer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_release();
  v2 = a1 + direct field offset for CalculateScrubberViewController.scrubberView;
  v3 = type metadata accessor for CalculateScrubberView();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t ObjC metadata update function for CalculateScrubberViewController()
{
  return type metadata accessor for CalculateScrubberViewController();
}

Swift::Void __swiftcall CalculateScrubberController.showScrubber(for:frame:compact:)(Swift::String a1, __C::CGRect frame, Swift::Bool compact)
{
  uint64_t v3;
  uint64_t v4;
  double height;
  double width;
  double y;
  double x;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  id v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  id v41;
  void *v42;
  uint64_t v43;

  v4 = v3;
  height = frame.size.height;
  width = frame.size.width;
  y = frame.origin.y;
  x = frame.origin.x;
  v9 = type metadata accessor for CalculateScrubberView();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CalculateScrubber();
  swift_allocObject();
  swift_bridgeObjectRetain();
  v14 = CalculateScrubber.init(formattedValue:)();
  v15 = OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_scrubber;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_scrubber) = v14;
  swift_release();
  v16 = *(_QWORD *)(v3 + v15);
  if (!v16)
  {
    __break(1u);
    return;
  }
  v17 = (char *)objc_allocWithZone((Class)type metadata accessor for CalculateScrubberViewController());
  *(_QWORD *)&v17[direct field offset for CalculateScrubberViewController.hostingView] = 0;
  *(_QWORD *)&v17[direct field offset for CalculateScrubberViewController.scrubber] = v16;
  swift_retain_n();
  v18 = v17;
  CalculateScrubberView.init(scrubber:isCompact:isUsingPopoverPresentationController:)();
  v19 = &v18[direct field offset for CalculateScrubberViewController.scrubberView];
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v18[direct field offset for CalculateScrubberViewController.scrubberView], v13, v9);

  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v19, v9);
  v20 = (id)UIHostingController.init(rootView:)();
  objc_msgSend(v20, sel_setModalPresentationStyle_, 7);

  swift_release();
  v21 = OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_viewController;
  v22 = *(void **)(v4 + OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_viewController);
  *(_QWORD *)(v4 + OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_viewController) = v20;

  v23 = (_QWORD *)(v4 + OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_latestValue);
  *v23 = 0;
  v23[1] = 0;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v4 + OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_latestUpdateTimestamp) = 0;
  if (*(_QWORD *)(v4 + v15))
  {
    swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    swift_retain();
    CalculateScrubber.didScrub.setter();
    swift_release();
    v24 = (void *)MEMORY[0x1DF0E666C](v4 + OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_view);
    if (v24)
    {
      v25 = v24;
      v26 = objc_msgSend(v24, sel_window);
      if (v26)
      {
        v27 = v26;
        v28 = objc_msgSend(v26, sel_rootViewController);
        if (v28)
        {
          v29 = v28;
          v30 = *(void **)(v4 + v21);
          if (v30)
          {
            v31 = v30;
            v32 = objc_msgSend(v31, sel_popoverPresentationController);
            if (v32)
            {
              v33 = v32;
              objc_msgSend(v32, sel_setSourceView_, v25);

            }
            v34 = objc_msgSend(v31, sel_popoverPresentationController);
            if (v34)
            {
              v35 = v34;
              objc_msgSend(v34, sel_setPermittedArrowDirections_, 3);

            }
            v36 = objc_msgSend(v31, sel_popoverPresentationController);
            objc_msgSend(v36, sel_setSourceRect_, x, y, width, height);

            v37 = objc_msgSend(v31, sel_popoverPresentationController);
            if (v37)
            {
              v38 = v37;
              objc_msgSend(v37, sel_setCanOverlapSourceViewRect_, 0);

            }
            v39 = objc_msgSend(v31, sel_popoverPresentationController);
            if (v39)
            {
              v40 = v39;
              objc_msgSend(v39, sel__setShouldDimPresentingViewTint_, 0);

            }
            v41 = objc_msgSend(v31, sel_popoverPresentationController);
            if (v41)
            {
              v42 = v41;
              objc_msgSend(v41, sel_setDelegate_, v4);

            }
            objc_msgSend(v29, sel_presentViewController_animated_completion_, v31, 1, 0);
            swift_release();

          }
          else
          {
            swift_release();

          }
          return;
        }

      }
      else
      {

      }
    }
    swift_release();
  }
}

void closure #1 in CalculateScrubberController.showScrubber(for:frame:compact:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;

  v5 = a3 + 16;
  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5);
  if (v6)
  {
    v7 = (char *)v6;
    v8 = (_QWORD *)(v6 + OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_latestValue);
    v9 = *(_QWORD *)(v6 + OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_latestValue + 8);
    if (!v9
      || (*v8 == a1 ? (v10 = v9 == a2) : (v10 = 0), !v10 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
    {
      *v8 = a1;
      v8[1] = a2;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      if (CACurrentMediaTime()
         - *(double *)&v7[OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_latestUpdateTimestamp] >= 0.05)
      {
        CalculateScrubberController.sendValueChanged()();
      }
      else
      {
        objc_msgSend((id)objc_opt_self(), sel_cancelPreviousPerformRequestsWithTarget_selector_object_, v7, sel_sendValueChanged, 0);
        objc_msgSend(v7, sel_performSelector_withObject_afterDelay_, sel_sendValueChanged, 0, 0.05);
      }
    }

  }
}

Swift::Void __swiftcall CalculateScrubberController.hideScrubber()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  objc_msgSend((id)objc_opt_self(), sel_cancelPreviousPerformRequestsWithTarget_selector_object_, v0, sel_sendValueChanged, 0);
  v1 = OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_viewController;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_viewController);
  if (v2)
  {
    objc_msgSend(v2, sel_dismissViewControllerAnimated_completion_, 1, 0);
    v2 = *(void **)(v0 + v1);
  }
  *(_QWORD *)(v0 + v1) = 0;

}

Swift::Void __swiftcall CalculateScrubberController.sendValueChanged()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_delegate);
  if (v1)
  {
    v2 = (void *)v1;
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_latestValue + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_latestValue);
      swift_bridgeObjectRetain();
      v5 = (void *)MEMORY[0x1DF0E41AC](v4, v3);
      swift_bridgeObjectRelease();
      objc_msgSend(v2, sel_scrubberController_valueDidChange_, v0, v5);

      *(CFTimeInterval *)(v0 + OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_latestUpdateTimestamp) = CACurrentMediaTime();
      objc_msgSend((id)objc_opt_self(), sel_cancelPreviousPerformRequestsWithTarget_selector_object_, v0, sel_sendValueChanged, 0);
    }
    swift_unknownObjectRelease();
  }
}

uint64_t type metadata accessor for CalculateScrubberController()
{
  return objc_opt_self();
}

uint64_t sub_1DDF04F28()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in CalculateScrubberController.showScrubber(for:frame:compact:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in CalculateScrubberController.showScrubber(for:frame:compact:)(a1, a2, v2);
}

id specialized CalculateScrubberController.init(view:delegate:)()
{
  char *v0;
  objc_class *ObjectType;
  char *v2;
  objc_super v4;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_viewController] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_scrubber] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_kSendValueTimeInterval] = 0x3FA999999999999ALL;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_latestUpdateTimestamp] = 0;
  v2 = &v0[OBJC_IVAR____TtC8PaperKit27CalculateScrubberController_latestValue];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakAssign();
  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, sel_init);
}

id specialized CanvasElementView.updateUI()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  char *v17;
  id result;
  uint64_t v19;

  v1 = v0;
  v2 = type metadata accessor for Shape();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v13 = (*(uint64_t (**)(double))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x480))(v9);
  v14 = (*(uint64_t (**)(uint64_t))((*v12 & *v0) + 0x288))(v13);
  v15 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*v12 & *v0) + 0x88))(v14);
  if (v15)
  {
    v16 = v15;
    (*(void (**)(void))((*v12 & *v15) + 0x668))();

  }
  v17 = (char *)v1 + *(_QWORD *)((*v12 & *v1) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v17, v6);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  Capsule<>.root.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  CRRegister.wrappedValue.getter();
  result = (id)outlined destroy of PKStrokeProperties((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  if ((v19 & 2) != 0)
    return objc_msgSend(v1, sel_setUserInteractionEnabled_, 0);
  return result;
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  char *v17;
  id result;
  uint64_t v19;

  v1 = v0;
  v2 = type metadata accessor for Paper();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v13 = (*(uint64_t (**)(double))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x480))(v9);
  v14 = (*(uint64_t (**)(uint64_t))((*v12 & *v0) + 0x288))(v13);
  v15 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*v12 & *v0) + 0x88))(v14);
  if (v15)
  {
    v16 = v15;
    (*(void (**)(void))((*v12 & *v15) + 0x668))();

  }
  v17 = (char *)v1 + *(_QWORD *)((*v12 & *v1) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v17, v6);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  Capsule<>.root.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  CRRegister.wrappedValue.getter();
  result = (id)outlined destroy of PKStrokeProperties((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for Paper);
  if ((v19 & 2) != 0)
    return objc_msgSend(v1, sel_setUserInteractionEnabled_, 0);
  return result;
}

void key path getter for ContainerCanvasElement.bounds : <A>A(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(double *)a3 = (*(double (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 16))(*(_QWORD *)(a2 + a1 - 24));
  *(_QWORD *)(a3 + 8) = v4;
  *(_QWORD *)(a3 + 16) = v5;
  *(_QWORD *)(a3 + 24) = v6;
}

uint64_t key path setter for ContainerCanvasElement.bounds : <A>A(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, double, double, double, double))(*(_QWORD *)(a4 + a3 - 8) + 24))(*(_QWORD *)(a4 + a3 - 24), *(_QWORD *)(a4 + a3 - 8), *a1, a1[1], a1[2], a1[3]);
}

uint64_t specialized CanvasElementDrawingView.merge<A>(_:)(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  char *v20;
  id v21;
  void *v22;
  char v23;
  objc_class *v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  PKDrawing *v29;
  void *v30;
  void *v31;
  void *v33;
  uint64_t v34;
  objc_super v35;
  void *v36;

  v34 = a4;
  v7 = type metadata accessor for PKDrawing();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v33 - v14;
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = (char *)&v33 - v19;
  v33 = v4;
  v21 = objc_msgSend(v4, sel_drawing, v18);
  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v20, v15, v7);
  type metadata accessor for PKDrawingCoherence(0);
  swift_dynamicCast();
  v22 = v36;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  a2(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a3, a2, v34);
  v23 = Capsule.merge<A>(_:)();
  swift_endAccess();
  if ((v23 & 1) != 0)
  {
    objc_msgSend(v22, sel_invalidateVisibleStrokes);

    v24 = (objc_class *)type metadata accessor for CanvasElementDrawingView();
    v25 = v33;
    v35.receiver = v33;
    v35.super_class = v24;
    objc_msgSendSuper2(&v35, sel_drawingDidChange);
    v26 = objc_msgSend(v25, sel_tiledView);
    if (v26)
    {
      v27 = v26;
      v28 = objc_msgSend(v25, sel_drawing);
      static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

      PKDrawing._bridgeToObjectiveC()(v29);
      v31 = v30;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      objc_msgSend(v27, sel_updateCurrentSelectionWithNewDrawingIfNecessary_, v31);

    }
  }
  else
  {

  }
  return v23 & 1;
}

uint64_t specialized CanvasElement.isHidden.setter(char a1)
{
  unint64_t *v2;
  uint64_t (*v3)(uint64_t *, _QWORD);
  unint64_t v4;
  uint64_t v6;

  type metadata accessor for Paper();
  if ((a1 & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    v3 = (uint64_t (*)(uint64_t *, _QWORD))CRRegister.wrappedValue.modify();
    if ((*v2 & 1) == 0)
    {
      v4 = *v2 | 1;
LABEL_6:
      *v2 = v4;
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    v3 = (uint64_t (*)(uint64_t *, _QWORD))CRRegister.wrappedValue.modify();
    if ((*v2 & 1) != 0)
    {
      v4 = *v2 & 0xFFFFFFFFFFFFFFFELL;
      goto LABEL_6;
    }
  }
  return v3(&v6, 0);
}

void specialized ContainerCanvasElementView.updateSubelements()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  void *v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  void *v50;
  char *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  id v79;
  uint64_t v80;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v82;
  char v83;
  char v84;
  uint64_t v85;
  void *v86;
  id v87;
  uint64_t v88;
  id v89;
  char v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  _QWORD *v94;
  char *v95;
  uint64_t v96;
  void (*v97)(char *, uint64_t, uint64_t);
  uint64_t v98;
  char *v99;
  void (*v100)(char *, uint64_t);
  void *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t (*v106)(char *, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  void *v111;
  uint64_t v112;
  uint64_t *v113;
  _QWORD *v114;
  char v115;
  void (*v116)(uint64_t, uint64_t);
  uint64_t v117;
  void *v118;
  uint64_t v119;
  void *v120;
  void *v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  void *v135;
  id v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  unint64_t v140;
  char v141;
  id v142;
  id v143;
  id v144;
  id v145;
  void (*v146)(_QWORD, _QWORD, _QWORD);
  void *v147;
  void *v148;
  id v149;
  uint64_t v150;
  uint64_t i;
  id v152;
  void *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(char *, uint64_t);
  char *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void (*v176)(uint64_t *, _QWORD);
  uint64_t *v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  id v186;
  uint64_t (*v187)(void);
  _QWORD *v188;
  void *v189;
  void *v190;
  id v191;
  id v192;
  uint64_t (*v193)(void);
  _QWORD *v194;
  uint64_t v195;
  void *v196;
  id v197;
  _QWORD *v198;
  void (*v199)(char *, uint64_t);
  uint64_t v200;
  char *v201;
  uint64_t v202;
  id v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  void (*v218)(char *, char *, uint64_t);
  unsigned int (*v219)(char *, uint64_t, uint64_t);
  uint64_t v220;
  void (*v221)(char *, uint64_t);
  uint64_t v222;
  void (*v223)(char *, char *, uint64_t);
  char *v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  char *v229;
  char *v230;
  char *v231;
  uint64_t v232;
  char *v233;
  int64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t *v238;
  void (**v239)(char *, uint64_t);
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<AnyCanvasElementView>>);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v199 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v212 = (char *)&v199 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CollectionDifference<AnyCanvasElementView>);
  v213 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v210 = (char *)&v199 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v205 = (char *)&v199 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v14, v15);
  v220 = (uint64_t)&v199 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for CRKeyPath();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v239 = (void (**)(char *, uint64_t))((char *)&v199 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v21, v22);
  v209 = (char *)&v199 - v23;
  MEMORY[0x1E0C80A78](v24, v25);
  v236 = (char *)&v199 - v26;
  MEMORY[0x1E0C80A78](v27, v28);
  v229 = (char *)&v199 - v29;
  v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v32);
  v228 = (char *)&v199 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v34, v35);
  v230 = (char *)&v199 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v207 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v235 = *(_QWORD *)(v207 - 8);
  MEMORY[0x1E0C80A78](v207, v37);
  v206 = (char *)&v199 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v232 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v39 = *(_QWORD *)(v232 - 8);
  MEMORY[0x1E0C80A78](v232, v40);
  v231 = (char *)&v199 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v234 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  v42 = *(_QWORD *)(v234 - 8);
  v44 = MEMORY[0x1E0C80A78](v234, v43);
  v233 = (char *)&v199 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v217 = (char *)MEMORY[0x1DF0E666C](&v0[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas], v44);
  if (!v217)
    return;
  v227 = v30;
  v201 = v4;
  v202 = v1;
  v211 = v8;
  v46 = (void *)objc_opt_self();
  objc_msgSend(v46, sel_begin);
  v203 = v46;
  objc_msgSend(v46, sel_setAnimationDuration_, 0.0);
  v47 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v48 = (uint64_t *)&v0[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v0) + 0x4D8)];
  swift_beginAccess();
  v238 = v48;
  v49 = *v48;
  v237 = *(_QWORD *)((*v47 & *(_QWORD *)v0) + 0x4D0);
  v50 = *(void **)&v0[v237];
  v51 = v0;
  v215 = v17;
  v214 = v18;
  v226 = v31;
  v204 = v42;
  swift_bridgeObjectRetain();
  if (v50)
  {
    v52 = v50;
    v53 = FormFillingView.unorderedFormFields.getter();

  }
  else
  {
    v53 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  }
  v54 = specialized Dictionary.merging(_:uniquingKeysWith:)(v53, v49);
  v55 = specialized Set.init<A>(_:)(v54);
  v244 = v55;
  v56 = &v51[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v51) + 0x380)];
  swift_beginAccess();
  v57 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
  v58 = v231;
  v224 = v56;
  v59 = v56;
  v60 = v232;
  v223 = v57;
  v61 = ((uint64_t (*)(char *, char *, uint64_t))v57)(v231, v59, v232);
  MEMORY[0x1E0C80A78](v61, v62);
  v222 = type metadata accessor for Image();
  *(&v199 - 4) = (void (*)(char *, uint64_t))v222;
  v63 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  *(&v199 - 3) = (void (*)(char *, uint64_t))v63;
  *(&v199 - 2) = (void (*)(char *, uint64_t))&protocol witness table for Image;
  swift_getKeyPath();
  v64 = v206;
  v200 = v63;
  Capsule<>.subscript.getter();
  swift_release();
  v221 = *(void (**)(char *, uint64_t))(v39 + 8);
  v221(v58, v60);
  v65 = v207;
  CROrderedSet.makeIterator()();
  v199 = *(void (**)(char *, uint64_t))(v235 + 8);
  v199(v64, v65);
  v216 = v51;
  v66 = *MEMORY[0x1E0DEEDD8] & *(_QWORD *)v51;
  v235 = *(_QWORD *)(v66 + 0x4C8);
  v208 = *(_QWORD *)(v66 + 1216);
  v225 = &v217[OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasViewController];
  v67 = v230;
  CROrderedSet.Iterator.next()();
  v68 = v226;
  v69 = v227;
  v219 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v226 + 48);
  if (v219(v67, 1, v227) == 1)
  {
    v70 = v216;
    v71 = v215;
    v72 = v214;
    goto LABEL_41;
  }
  v218 = *(void (**)(char *, char *, uint64_t))(v68 + 32);
  v70 = v216;
  v71 = v215;
  v72 = v214;
  v73 = (uint64_t)v229;
  v218(v228, v67, v69);
  while (1)
  {
    MEMORY[0x1DF0E34A4](v69);
    v76 = v220;
    specialized Set._Variant.remove(_:)(v73, v220);
    outlined destroy of StocksKitCurrencyCache.Provider?(v76, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    v77 = *v238;
    v78 = *(void **)&v70[v237];
    swift_bridgeObjectRetain();
    if (v78)
    {
      v79 = v78;
      v80 = FormFillingView.unorderedFormFields.getter();

    }
    else
    {
      v80 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v240 = v77;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v80, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v240);
    v82 = v240;
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v82 + 16))
    {
      specialized __RawDictionaryStorage.find<A>(_:)(v73);
      v84 = v83;
      swift_bridgeObjectRelease();
      if ((v84 & 1) != 0)
      {
        v85 = *v238;
        v86 = *(void **)&v70[v237];
        swift_bridgeObjectRetain();
        if (v86)
        {
          v87 = v86;
          v88 = FormFillingView.unorderedFormFields.getter();

        }
        else
        {
          v88 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
        }
        v90 = swift_isUniquelyReferenced_nonNull_native();
        v240 = v85;
        specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v88, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v90, (uint64_t)&v240);
        v91 = v240;
        swift_bridgeObjectRelease();
        if (!*(_QWORD *)(v91 + 16))
          goto LABEL_119;
        v92 = specialized __RawDictionaryStorage.find<A>(_:)(v73);
        if ((v93 & 1) == 0)
          goto LABEL_119;
        v94 = *(id *)(*(_QWORD *)(v91 + 56) + 8 * v92);
        swift_bridgeObjectRelease();
        v95 = v231;
        v96 = v232;
        v223(v231, v224, v232);
        v97 = *(void (**)(char *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v94) + 0x130);
        v98 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
        v97(v95, v222, v98);

        v99 = v95;
        v73 = (uint64_t)v229;
        v221(v99, v96);
        (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v73, v71);
        v100 = *(void (**)(char *, uint64_t))(v226 + 8);
        v74 = v228;
        goto LABEL_35;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    if (!*(_QWORD *)&v70[v235])
    {
      v89 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_init);
      objc_msgSend(v70, sel_bounds);
      objc_msgSend(v89, sel_setFrame_);
      objc_msgSend(v89, sel_setClipsToBounds_, 1);
      objc_msgSend(v89, sel_setUserInteractionEnabled_, 0);
      if (*(_QWORD *)&v70[v208])
        objc_msgSend(v70, sel_insertSubview_belowSubview_, v89);
      else
        objc_msgSend(v70, sel_addSubview_, v89);
      v101 = *(void **)&v70[v235];
      *(_QWORD *)&v70[v235] = v89;

    }
    SharedTagged_9<>.layout()(&v240);
    v102 = v241;
    v103 = v242;
    __swift_project_boxed_opaque_existential_1(&v240, v241);
    v104 = v231;
    v105 = v232;
    v223(v231, v224, v232);
    v106 = *(uint64_t (**)(char *, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v103 + 8);
    v107 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
    v108 = v217;
    v109 = v217;
    v110 = v108;
    v70 = v216;
    v111 = (void *)v106(v104, v110, v216, v222, v107, v102, v103);

    v221(v104, v105);
    if (!v111)
    {
      v72 = v214;
      v73 = (uint64_t)v229;
      v71 = v215;
      (*(void (**)(char *, uint64_t))(v214 + 8))(v229, v215);
      v74 = v228;
      v69 = v227;
      (*(void (**)(char *, uint64_t))(v226 + 8))(v228, v227);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v240);
LABEL_9:
      v75 = v230;
      goto LABEL_10;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v240);
    swift_unknownObjectWeakAssign();
    v72 = v214;
    v112 = (uint64_t)v209;
    v73 = (uint64_t)v229;
    v71 = v215;
    (*(void (**)(char *, char *, uint64_t))(v214 + 16))(v209, v229, v215);
    v113 = v238;
    swift_beginAccess();
    v114 = v111;
    v115 = swift_isUniquelyReferenced_nonNull_native();
    v243 = *v113;
    *v113 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v114, v112, v115);
    *v113 = v243;
    swift_bridgeObjectRelease();
    v116 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
    v116(v112, v71);
    swift_endAccess();
    v117 = MEMORY[0x1DF0E666C](v225);
    v74 = v228;
    if (v117)
    {
      v118 = (void *)v117;
      v119 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v114) + 0x360))();
      if (v119)
      {
        v120 = (void *)v119;
        objc_msgSend(v118, sel_addChildViewController_, v119);
        v121 = *(void **)&v70[v235];
        if (v121)
          objc_msgSend(v121, sel_addSubview_, v114);
        objc_msgSend(v120, sel_didMoveToParentViewController_, v118);

        v116(v73, v71);
        v100 = *(void (**)(char *, uint64_t))(v226 + 8);
LABEL_35:
        v69 = v227;
        v100(v74, v227);
        goto LABEL_9;
      }

    }
    v122 = *(void **)&v70[v235];
    v75 = v230;
    if (v122)
      objc_msgSend(v122, sel_addSubview_, v114);

    v116(v73, v71);
    v69 = v227;
    (*(void (**)(char *, uint64_t))(v226 + 8))(v74, v227);
LABEL_10:
    CROrderedSet.Iterator.next()();
    if (v219(v75, 1, v69) == 1)
      break;
    v218(v74, v75, v69);
  }
  v55 = v244;
LABEL_41:
  (*(void (**)(char *, int64_t))(v204 + 8))(v233, v234);
  v123 = *(_QWORD *)(v55 + 56);
  v233 = (char *)(v55 + 56);
  v124 = 1 << *(_BYTE *)(v55 + 32);
  v125 = -1;
  if (v124 < 64)
    v125 = ~(-1 << v124);
  v126 = v125 & v123;
  v234 = (unint64_t)(v124 + 63) >> 6;
  swift_bridgeObjectRetain();
  v127 = 0;
  if (!v126)
    goto LABEL_47;
  while (2)
  {
    while (2)
    {
      v128 = __clz(__rbit64(v126));
      v126 &= v126 - 1;
      v129 = v128 | (v127 << 6);
LABEL_58:
      v133 = v236;
      (*(void (**)(char *, unint64_t, uint64_t))(v72 + 16))(v236, *(_QWORD *)(v55 + 48) + *(_QWORD *)(v72 + 72) * v129, v71);
      (*(void (**)(void (**)(char *, uint64_t), char *, uint64_t))(v72 + 32))(v239, v133, v71);
      v134 = *v238;
      v135 = *(void **)&v70[v237];
      swift_bridgeObjectRetain();
      if (v135)
      {
        v136 = v135;
        v137 = FormFillingView.unorderedFormFields.getter();

      }
      else
      {
        v137 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      }
      v138 = swift_isUniquelyReferenced_nonNull_native();
      v240 = v134;
      specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v137, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v138, (uint64_t)&v240);
      v139 = v240;
      swift_bridgeObjectRelease();
      if (!*(_QWORD *)(v139 + 16)
        || (v140 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v239), (v141 & 1) == 0))
      {
        swift_bridgeObjectRelease();
        (*(void (**)(void (*)(_QWORD, _QWORD, _QWORD), uint64_t))(v72 + 8))((void (*)(_QWORD, _QWORD, _QWORD))v239, v71);
        goto LABEL_68;
      }
      v142 = *(id *)(*(_QWORD *)(v139 + 56) + 8 * v140);
      swift_bridgeObjectRelease();
      v143 = objc_msgSend(v142, sel_superview);
      v144 = *(id *)&v70[v235];
      if (!v143)
      {
        if (!v144)
          break;
        goto LABEL_46;
      }
      v145 = v143;

      if (!v144 || v145 != v144)
      {
LABEL_46:
        (*(void (**)(void (*)(_QWORD, _QWORD, _QWORD), uint64_t))(v72 + 8))((void (*)(_QWORD, _QWORD, _QWORD))v239, v71);

        if (v126)
          continue;
        goto LABEL_47;
      }
      break;
    }
    swift_beginAccess();
    v146 = (void (*)(_QWORD, _QWORD, _QWORD))v239;
    v147 = (void *)specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v239);
    swift_endAccess();

    (*(void (**)(void (*)(_QWORD, _QWORD, _QWORD), uint64_t))(v72 + 8))(v146, v71);
LABEL_68:
    if (v126)
      continue;
    break;
  }
LABEL_47:
  if (__OFADD__(v127++, 1))
  {
    __break(1u);
    goto LABEL_91;
  }
  if (v127 >= v234)
    goto LABEL_74;
  v131 = *(_QWORD *)&v233[8 * v127];
  if (v131)
  {
LABEL_57:
    v126 = (v131 - 1) & v131;
    v129 = __clz(__rbit64(v131)) + (v127 << 6);
    goto LABEL_58;
  }
  v132 = v127 + 1;
  if (v127 + 1 >= v234)
    goto LABEL_74;
  v131 = *(_QWORD *)&v233[8 * v132];
  if (v131)
    goto LABEL_56;
  v132 = v127 + 2;
  if (v127 + 2 >= v234)
    goto LABEL_74;
  v131 = *(_QWORD *)&v233[8 * v132];
  if (v131)
  {
LABEL_56:
    v127 = v132;
    goto LABEL_57;
  }
  v132 = v127 + 3;
  if (v127 + 3 >= v234)
  {
LABEL_74:
    swift_release();
    v148 = *(void **)&v70[v235];
    v72 = (uint64_t)v212;
    if (!v148)
    {
      swift_bridgeObjectRelease();
LABEL_96:
      objc_msgSend(v203, sel_commit);

      return;
    }
    v238 = v148;
    v149 = objc_msgSend(v238, sel_subviews);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    v127 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v240 = MEMORY[0x1E0DEE9D8];
    if ((unint64_t)v127 >> 62)
      goto LABEL_92;
    v150 = *(_QWORD *)((v127 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v150)
      goto LABEL_77;
LABEL_93:
    swift_bridgeObjectRelease();
    v154 = MEMORY[0x1E0DEE9D8];
LABEL_94:
    swift_bridgeObjectRelease();
    v155 = v231;
    v156 = v232;
    v157 = ((uint64_t (*)(char *, char *, uint64_t))v223)(v231, v224, v232);
    MEMORY[0x1E0C80A78](v157, v158);
    v159 = (void (*)(char *, uint64_t))v200;
    *(&v199 - 4) = (void (*)(char *, uint64_t))v222;
    *(&v199 - 3) = v159;
    *(&v199 - 2) = (void (*)(char *, uint64_t))&protocol witness table for Image;
    swift_getKeyPath();
    v160 = v206;
    Capsule<>.subscript.getter();
    swift_release();
    v221(v155, v156);
    v161 = v216;
    v162 = specialized Sequence.compactMap<A>(_:)(v160, v161);

    v199(v160, v207);
    swift_bridgeObjectRelease();
    v240 = v162;
    v243 = v154;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyCanvasElementView]);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [AnyCanvasElementView] and conformance [A], &demangling cache variable for type metadata for [AnyCanvasElementView], MEMORY[0x1E0DEAF20]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AnyCanvasElementView and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for AnyCanvasElementView, MEMORY[0x1E0DEFD00]);
    v163 = v205;
    BidirectionalCollection<>.difference<A>(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v164 = (uint64_t)v201;
    v165 = v211;
    v239 = *(void (***)(char *, uint64_t))(v213 + 16);
    ((void (*)(char *, char *, uint64_t))v239)(v201, v163, v211);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CollectionDifference<AnyCanvasElementView> and conformance CollectionDifference<A>, (uint64_t *)&demangling cache variable for type metadata for CollectionDifference<AnyCanvasElementView>, MEMORY[0x1E0DECE10]);
    dispatch thunk of Collection.startIndex.getter();
    v166 = v202;
    *(_QWORD *)(v164 + *(int *)(v202 + 36)) = v240;
    outlined init with take of IndexingIterator<CollectionDifference<AnyCanvasElementView>>(v164, v72);
    v167 = (uint64_t *)(v72 + *(int *)(v166 + 36));
    v168 = *v167;
    dispatch thunk of Collection.endIndex.getter();
    if (v168 == v240)
    {
LABEL_95:

      outlined destroy of StocksKitCurrencyCache.Provider?(v72, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<AnyCanvasElementView>>);
      (*(void (**)(char *, uint64_t))(v213 + 8))(v205, v165);
      goto LABEL_96;
    }
    while (1)
    {
      v176 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
      v179 = *v177;
      v178 = (_QWORD *)v177[1];
      v180 = v165;
      v181 = v177[2];
      v182 = *((unsigned __int8 *)v177 + 24);
      v183 = *((unsigned __int8 *)v177 + 25);
      outlined copy of CollectionDifference<PDFPage>.Change(*v177, v178, v181, v182, v183);
      v176(&v240, 0);
      v184 = v210;
      ((void (*)(char *, uint64_t, uint64_t))v239)(v210, v72, v180);
      dispatch thunk of Collection.formIndex(after:)();
      (*(void (**)(char *, uint64_t))(v213 + 8))(v184, v180);
      v185 = MEMORY[0x1DF0E666C](v225);
      v186 = (id)v185;
      if ((_DWORD)v183 == 1)
        break;
      if (v185)
      {
        v193 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v178) + 0x360);
        v194 = v178;
        v195 = v193();
        if (v195)
        {
          v196 = (void *)v195;
          objc_msgSend(v186, sel_addChildViewController_, v195);
          objc_msgSend(v238, sel_insertSubview_atIndex_, v194, v179);
          v197 = v186;
          objc_msgSend(v196, sel_didMoveToParentViewController_, v197);
          outlined consume of CollectionDifference<PDFPage>.Change(v179, v178, v181, v182, 0);
          outlined consume of CollectionDifference<PDFPage>.Change(v179, v178, v181, v182, 0);

          goto LABEL_102;
        }

      }
      else
      {
        v198 = v178;
      }
      objc_msgSend(v238, sel_insertSubview_atIndex_, v178, v179);
      outlined consume of CollectionDifference<PDFPage>.Change(v179, v178, v181, v182, 0);
      v170 = v179;
      v171 = v178;
      v172 = v181;
      v173 = v182;
      v174 = 0;
LABEL_101:
      outlined consume of CollectionDifference<PDFPage>.Change(v170, v171, v172, v173, v174);
LABEL_102:
      v72 = (uint64_t)v212;
      v175 = *v167;
      v165 = v211;
      dispatch thunk of Collection.endIndex.getter();
      if (v175 == v240)
        goto LABEL_95;
    }
    if (v185)
    {
      v187 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v178) + 0x360);
      v188 = v178;
      v189 = (void *)v187();
      if (v189)
      {
        v190 = v189;
        objc_msgSend(v189, sel_willMoveToParentViewController_, 0);
        objc_msgSend(v188, sel_removeFromSuperview);
        v191 = objc_msgSend(v190, sel_parentViewController);
        if (v191 && (v192 = v191, v191, v192 == v186))
          objc_msgSend(v186, sel_removeChildViewController_, v190);
        else
          objc_msgSend(v190, sel_removeFromParentViewController);

        goto LABEL_100;
      }

    }
    else
    {
      v169 = v178;
    }
    objc_msgSend(v178, sel_removeFromSuperview);
LABEL_100:
    outlined consume of CollectionDifference<PDFPage>.Change(v179, v178, v181, v182, 1);
    v170 = v179;
    v171 = v178;
    v172 = v181;
    v173 = v182;
    v174 = 1;
    goto LABEL_101;
  }
  v131 = *(_QWORD *)&v233[8 * v132];
  if (v131)
    goto LABEL_56;
  while (1)
  {
    v127 = v132 + 1;
    if (__OFADD__(v132, 1))
      break;
    if (v127 >= v234)
      goto LABEL_74;
    v131 = *(_QWORD *)&v233[8 * v127];
    ++v132;
    if (v131)
      goto LABEL_57;
  }
LABEL_91:
  __break(1u);
LABEL_92:
  swift_bridgeObjectRetain();
  v150 = _CocoaArrayWrapper.endIndex.getter();
  if (!v150)
    goto LABEL_93;
LABEL_77:
  if (v150 >= 1)
  {
    for (i = 0; i != v150; ++i)
    {
      if ((v127 & 0xC000000000000001) != 0)
        v152 = (id)MEMORY[0x1DF0E4D64](i, v127);
      else
        v152 = *(id *)(v127 + 8 * i + 32);
      v153 = v152;
      type metadata accessor for AnyCanvasElementView();
      if (swift_dynamicCastClass())
      {
        MEMORY[0x1DF0E4398]();
        if (*(_QWORD *)((v240 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v240 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {

      }
    }
    swift_bridgeObjectRelease();
    v154 = v240;
    goto LABEL_94;
  }
  __break(1u);
LABEL_119:
  swift_bridgeObjectRelease();
  __break(1u);
  swift_bridgeObjectRelease();
  __break(1u);
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  uint64_t v45;
  void *v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  char *v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  id v79;
  uint64_t v80;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v82;
  char v83;
  char v84;
  uint64_t v85;
  void *v86;
  id v87;
  uint64_t v88;
  id v89;
  char v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  _QWORD *v94;
  char *v95;
  uint64_t v96;
  void (*v97)(char *, uint64_t, uint64_t);
  uint64_t v98;
  char *v99;
  void *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t (*v105)(char *, char *, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v106;
  char *v107;
  char *v108;
  void *v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  _QWORD *v113;
  char v114;
  void (*v115)(uint64_t, id);
  uint64_t v116;
  void *v117;
  uint64_t v118;
  void *v119;
  void *v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  void *v138;
  id v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  unint64_t v143;
  char v144;
  id v145;
  id v146;
  id v147;
  id v148;
  id v149;
  unint64_t v150;
  char v151;
  char v152;
  uint64_t *v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  void *v158;
  id v159;
  uint64_t v160;
  uint64_t i;
  id v162;
  void *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  _QWORD *v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void (*v186)(uint64_t *, _QWORD);
  uint64_t *v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  id v196;
  uint64_t (*v197)(void);
  _QWORD *v198;
  void *v199;
  void *v200;
  id v201;
  id v202;
  uint64_t (*v203)(void);
  _QWORD *v204;
  uint64_t v205;
  void *v206;
  id v207;
  _QWORD *v208;
  uint64_t v209;
  void (*v210)(char *, uint64_t);
  uint64_t v211;
  char *v212;
  uint64_t v213;
  id v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  char *v225;
  _QWORD *v226;
  uint64_t v227;
  unsigned int (*v228)(char *, uint64_t, uint64_t);
  uint64_t v229;
  void (*v230)(uint64_t, uint64_t);
  uint64_t v231;
  void (*v232)(char *, char *, uint64_t);
  char *v233;
  char *v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  char *v243;
  char *v244;
  _QWORD *v245;
  uint64_t v246;
  char *v247;
  uint64_t *v248;
  uint64_t v249;
  id v250;
  void (*v251)(char *, char *, uint64_t);
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  _QWORD *v256;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<AnyCanvasElementView>>);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v209 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v223 = (char *)&v209 - v8;
  v222 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CollectionDifference<AnyCanvasElementView>);
  v224 = *(_QWORD *)(v222 - 8);
  MEMORY[0x1E0C80A78](v222, v9);
  v221 = (char *)&v209 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v216 = (char *)&v209 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v14, v15);
  v229 = (uint64_t)&v209 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (_QWORD *)type metadata accessor for CRKeyPath();
  v18 = *(v17 - 1);
  MEMORY[0x1E0C80A78](v17, v19);
  v251 = (void (*)(char *, char *, uint64_t))((char *)&v209 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v21, v22);
  v247 = (char *)&v209 - v23;
  MEMORY[0x1E0C80A78](v24, v25);
  v220 = (char *)&v209 - v26;
  MEMORY[0x1E0C80A78](v27, v28);
  v236 = (char *)&v209 - v29;
  v238 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v30 = *(_QWORD *)(v238 - 8);
  MEMORY[0x1E0C80A78](v238, v31);
  v244 = (char *)&v209 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v33, v34);
  v237 = (char *)&v209 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v218 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v36 = *(_QWORD *)(v218 - 8);
  MEMORY[0x1E0C80A78](v218, v37);
  v217 = (char *)&v209 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v240 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
  v39 = *(_QWORD *)(v240 - 8);
  MEMORY[0x1E0C80A78](v240, v40);
  v239 = (char *)&v209 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v242 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  v42 = *(_QWORD *)(v242 - 8);
  v44 = MEMORY[0x1E0C80A78](v242, v43);
  v241 = (char *)&v209 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v225 = (char *)MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas, v44);
  if (!v225)
    return;
  v212 = v5;
  v213 = v2;
  v46 = (void *)objc_opt_self();
  objc_msgSend(v46, sel_begin);
  v214 = v46;
  objc_msgSend(v46, sel_setAnimationDuration_, 0.0);
  v47 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v48 = (_QWORD *)((char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x4D8));
  swift_beginAccess();
  v248 = v48;
  v49 = *v48;
  v227 = *(_QWORD *)((*v47 & *v1) + 0x4D0);
  v50 = *(void **)((char *)v1 + v227);
  v249 = v18;
  v250 = v17;
  v235 = v30;
  v215 = v42;
  swift_bridgeObjectRetain();
  if (v50)
  {
    v51 = v50;
    v52 = FormFillingView.unorderedFormFields.getter();

  }
  else
  {
    v52 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  }
  v53 = specialized Dictionary.merging(_:uniquingKeysWith:)(v52, v49);
  v243 = 0;
  v226 = (_QWORD *)specialized Set.init<A>(_:)(v53);
  v256 = v226;
  v54 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v55 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
  swift_beginAccess();
  v56 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
  v57 = (uint64_t)v239;
  v233 = v55;
  v58 = v240;
  v232 = v56;
  v59 = ((uint64_t (*)(char *, char *, uint64_t))v56)(v239, v55, v240);
  MEMORY[0x1E0C80A78](v59, v60);
  v231 = type metadata accessor for Paper();
  *(&v209 - 4) = v231;
  v61 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  *(&v209 - 3) = v61;
  *(&v209 - 2) = (uint64_t)&protocol witness table for Paper;
  swift_getKeyPath();
  v245 = v1;
  v62 = v217;
  v211 = v61;
  Capsule<>.subscript.getter();
  v63 = v245;
  swift_release();
  v230 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
  v230(v57, v58);
  v64 = v218;
  CROrderedSet.makeIterator()();
  v210 = *(void (**)(char *, uint64_t))(v36 + 8);
  v210(v62, v64);
  v234 = &v225[OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasViewController];
  v65 = *v54 & *v63;
  v246 = *(_QWORD *)(v65 + 0x4C8);
  v219 = *(_QWORD *)(v65 + 1216);
  v66 = v237;
  CROrderedSet.Iterator.next()();
  v67 = v235;
  v68 = v238;
  v228 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v235 + 48);
  if (v228(v66, 1, v238) == 1)
  {
    v69 = v243;
    v70 = v227;
    v71 = v226;
    goto LABEL_40;
  }
  v226 = *(_QWORD **)(v67 + 32);
  v69 = v243;
  v72 = v248;
  v70 = v227;
  v73 = (uint64_t)v236;
  v57 = v240;
  ((void (*)(char *, char *, uint64_t))v226)(v244, v66, v68);
  while (1)
  {
    MEMORY[0x1DF0E34A4](v68);
    v76 = v229;
    specialized Set._Variant.remove(_:)(v73, v229);
    outlined destroy of StocksKitCurrencyCache.Provider?(v76, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    v77 = *v72;
    v78 = *(void **)((char *)v63 + v70);
    swift_bridgeObjectRetain();
    if (v78)
    {
      v79 = v78;
      v80 = FormFillingView.unorderedFormFields.getter();

    }
    else
    {
      v80 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v252 = v77;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v80, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v252);
    v82 = v252;
    swift_bridgeObjectRelease();
    if (v69)
      goto LABEL_127;
    v63 = v245;
    if (*(_QWORD *)(v82 + 16))
    {
      specialized __RawDictionaryStorage.find<A>(_:)(v73);
      v84 = v83;
      swift_bridgeObjectRelease();
      if ((v84 & 1) != 0)
      {
        v85 = *v72;
        v86 = *(void **)((char *)v63 + v70);
        swift_bridgeObjectRetain();
        if (v86)
        {
          v87 = v86;
          v88 = FormFillingView.unorderedFormFields.getter();

        }
        else
        {
          v88 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
        }
        v90 = swift_isUniquelyReferenced_nonNull_native();
        v252 = v85;
        specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v88, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v90, (uint64_t)&v252);
        v91 = v252;
        swift_bridgeObjectRelease();
        if (!*(_QWORD *)(v91 + 16))
          goto LABEL_126;
        v92 = specialized __RawDictionaryStorage.find<A>(_:)(v73);
        if ((v93 & 1) == 0)
          goto LABEL_126;
        v94 = *(id *)(*(_QWORD *)(v91 + 56) + 8 * v92);
        swift_bridgeObjectRelease();
        v95 = v239;
        v96 = v240;
        v232(v239, v233, v240);
        v97 = *(void (**)(char *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v94) + 0x130);
        v98 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
        v97(v95, v231, v98);

        v99 = v95;
        v73 = (uint64_t)v236;
        v230((uint64_t)v99, v96);
        (*(void (**)(uint64_t, id))(v249 + 8))(v73, v250);
        v74 = v244;
        v68 = v238;
        (*(void (**)(char *, uint64_t))(v235 + 8))(v244, v238);
        goto LABEL_9;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    if (!*(_QWORD *)((char *)v63 + v246))
    {
      v89 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_init);
      objc_msgSend(v63, sel_bounds);
      objc_msgSend(v89, sel_setFrame_);
      objc_msgSend(v89, sel_setClipsToBounds_, 1);
      objc_msgSend(v89, sel_setUserInteractionEnabled_, 0);
      if (*(_QWORD *)((char *)v63 + v219))
        objc_msgSend(v63, sel_insertSubview_belowSubview_, v89);
      else
        objc_msgSend(v63, sel_addSubview_, v89);
      v100 = *(void **)((char *)v63 + v246);
      *(_QWORD *)((char *)v63 + v246) = v89;

    }
    v243 = 0;
    SharedTagged_9<>.layout()(&v252);
    v101 = v63;
    v102 = v253;
    v103 = v254;
    __swift_project_boxed_opaque_existential_1(&v252, v253);
    v104 = v239;
    v232(v239, v233, v57);
    v105 = *(uint64_t (**)(char *, char *, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v103 + 8);
    v106 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
    v107 = v225;
    v108 = v225;
    v109 = (void *)v105(v104, v107, v101, v231, v106, v102, v103);

    v230((uint64_t)v104, v57);
    if (!v109)
    {
      v73 = (uint64_t)v236;
      (*(void (**)(char *, id))(v249 + 8))(v236, v250);
      v74 = v244;
      v68 = v238;
      (*(void (**)(char *, uint64_t))(v235 + 8))(v244, v238);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v252);
      v63 = v101;
      v69 = v243;
      v72 = v248;
      v70 = v227;
      goto LABEL_9;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v252);
    swift_unknownObjectWeakAssign();
    v110 = v249;
    v111 = v250;
    v112 = (uint64_t)v220;
    v73 = (uint64_t)v236;
    (*(void (**)(char *, char *, id))(v249 + 16))(v220, v236, v250);
    v72 = v248;
    swift_beginAccess();
    v113 = v109;
    v114 = swift_isUniquelyReferenced_nonNull_native();
    v255 = *v72;
    *v72 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v113, v112, v114);
    *v72 = v255;
    swift_bridgeObjectRelease();
    v115 = *(void (**)(uint64_t, id))(v110 + 8);
    v115(v112, v111);
    swift_endAccess();
    v116 = MEMORY[0x1DF0E666C](v234);
    v70 = v227;
    v68 = v238;
    if (v116)
    {
      v117 = (void *)v116;
      v118 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v113) + 0x360))();
      if (v118)
      {
        v119 = (void *)v118;
        objc_msgSend(v117, sel_addChildViewController_, v118);
        v120 = *(void **)((char *)v245 + v246);
        if (v120)
          objc_msgSend(v120, sel_addSubview_, v113);
        objc_msgSend(v119, sel_didMoveToParentViewController_, v117);

        v115(v73, v250);
        v74 = v244;
        (*(void (**)(char *, uint64_t))(v235 + 8))(v244, v68);
        v63 = v245;
        v69 = v243;
        goto LABEL_9;
      }

    }
    v63 = v245;
    v121 = *(void **)((char *)v245 + v246);
    v69 = v243;
    if (v121)
      objc_msgSend(v121, sel_addSubview_, v113);

    v115(v73, v250);
    v74 = v244;
    (*(void (**)(char *, uint64_t))(v235 + 8))(v244, v68);
LABEL_9:
    v75 = v237;
    CROrderedSet.Iterator.next()();
    if (v228(v75, 1, v68) == 1)
      break;
    ((void (*)(char *, char *, uint64_t))v226)(v74, v75, v68);
  }
  v71 = v256;
LABEL_40:
  (*(void (**)(char *, uint64_t))(v215 + 8))(v241, v242);
  v122 = v71[7];
  v243 = (char *)(v71 + 7);
  v123 = 1 << *((_BYTE *)v71 + 32);
  v124 = -1;
  if (v123 < 64)
    v124 = ~(-1 << v123);
  v125 = v124 & v122;
  v244 = (char *)((unint64_t)(v123 + 63) >> 6);
  swift_bridgeObjectRetain();
  v126 = 0;
  while (1)
  {
    if (v125)
    {
      v127 = __clz(__rbit64(v125));
      v125 &= v125 - 1;
      v128 = v127 | (v126 << 6);
      goto LABEL_59;
    }
    if (__OFADD__(v126++, 1))
    {
      __break(1u);
      goto LABEL_98;
    }
    if (v126 >= (uint64_t)v244)
      goto LABEL_81;
    v130 = *(_QWORD *)&v243[8 * v126];
    if (!v130)
      break;
LABEL_58:
    v125 = (v130 - 1) & v130;
    v128 = __clz(__rbit64(v130)) + (v126 << 6);
LABEL_59:
    v57 = (uint64_t)v71;
    v132 = v71[6];
    v134 = v249;
    v133 = v250;
    v135 = *(_QWORD *)(v249 + 72);
    v136 = v247;
    (*(void (**)(char *, unint64_t, id))(v249 + 16))(v247, v132 + v135 * v128, v250);
    (*(void (**)(_QWORD *, char *, id))(v134 + 32))(v251, v136, v133);
    v137 = *v248;
    v138 = *(void **)((char *)v63 + v70);
    swift_bridgeObjectRetain();
    if (v138)
    {
      v139 = v138;
      v140 = FormFillingView.unorderedFormFields.getter();

    }
    else
    {
      v140 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    }
    v141 = swift_isUniquelyReferenced_nonNull_native();
    v252 = v137;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v140, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v141, (uint64_t)&v252);
    v142 = v252;
    swift_bridgeObjectRelease();
    if (v69)
      goto LABEL_127;
    if (!*(_QWORD *)(v142 + 16)
      || (v143 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v251), (v144 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      (*(void (**)(void (*)(char *, char *, uint64_t), id))(v249 + 8))(v251, v250);
      v71 = (_QWORD *)v57;
      continue;
    }
    v145 = *(id *)(*(_QWORD *)(v142 + 56) + 8 * v143);
    swift_bridgeObjectRelease();
    v146 = objc_msgSend(v145, sel_superview);
    v147 = *(id *)((char *)v63 + v246);
    if (v146)
    {
      v148 = v146;

      if (!v147 || v148 != v147)
      {
LABEL_70:
        (*(void (**)(void (*)(char *, char *, uint64_t), id))(v249 + 8))(v251, v250);

        v71 = (_QWORD *)v57;
        continue;
      }
    }
    else
    {
      if (v147)
        goto LABEL_70;
      v149 = 0;
    }
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v150 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v251);
    v152 = v151;
    swift_bridgeObjectRelease();
    if ((v152 & 1) != 0)
    {
      v153 = v248;
      v154 = swift_isUniquelyReferenced_nonNull_native();
      v155 = *v153;
      v255 = *v153;
      *v153 = 0x8000000000000000;
      if ((v154 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        v155 = v255;
      }
      (*(void (**)(unint64_t, id))(v249 + 8))(*(_QWORD *)(v155 + 48) + v150 * v135, v250);
      v156 = v255;
      v157 = *(void **)(*(_QWORD *)(v255 + 56) + 8 * v150);
      specialized _NativeDictionary._delete(at:)(v150, v255);
      *v153 = v156;

      swift_bridgeObjectRelease();
      v70 = v227;
    }
    swift_endAccess();

    (*(void (**)(void (*)(char *, char *, uint64_t), id))(v249 + 8))(v251, v250);
    v63 = v245;
    v71 = (_QWORD *)v57;
  }
  v131 = v126 + 1;
  if (v126 + 1 >= (uint64_t)v244)
    goto LABEL_81;
  v130 = *(_QWORD *)&v243[8 * v131];
  if (v130)
    goto LABEL_57;
  v131 = v126 + 2;
  if (v126 + 2 >= (uint64_t)v244)
    goto LABEL_81;
  v130 = *(_QWORD *)&v243[8 * v131];
  if (v130)
    goto LABEL_57;
  v131 = v126 + 3;
  if (v126 + 3 >= (uint64_t)v244)
    goto LABEL_81;
  v130 = *(_QWORD *)&v243[8 * v131];
  if (v130)
  {
LABEL_57:
    v126 = v131;
    goto LABEL_58;
  }
  v131 = v126 + 4;
  if (v126 + 4 >= (uint64_t)v244)
  {
LABEL_81:
    swift_release();
    v158 = *(void **)((char *)v63 + v246);
    v57 = (uint64_t)v223;
    if (!v158)
    {
      swift_bridgeObjectRelease();
LABEL_103:
      objc_msgSend(v214, sel_commit);

      return;
    }
    v250 = v158;
    v159 = objc_msgSend(v250, sel_subviews);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    v126 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v252 = MEMORY[0x1E0DEE9D8];
    if ((unint64_t)v126 >> 62)
      goto LABEL_99;
    v160 = *(_QWORD *)((v126 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v160)
      goto LABEL_84;
LABEL_100:
    swift_bridgeObjectRelease();
    v164 = MEMORY[0x1E0DEE9D8];
LABEL_101:
    swift_bridgeObjectRelease();
    v165 = v239;
    v166 = v240;
    v167 = ((uint64_t (*)(char *, char *, uint64_t))v232)(v239, v233, v240);
    MEMORY[0x1E0C80A78](v167, v168);
    v169 = v211;
    *(&v209 - 4) = v231;
    *(&v209 - 3) = v169;
    *(&v209 - 2) = (uint64_t)&protocol witness table for Paper;
    swift_getKeyPath();
    v170 = v217;
    Capsule<>.subscript.getter();
    swift_release();
    v230((uint64_t)v165, v166);
    v171 = v63;
    v172 = specialized Sequence.compactMap<A>(_:)(v170, v171);

    v210(v170, v218);
    swift_bridgeObjectRelease();
    v252 = v172;
    v255 = v164;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyCanvasElementView]);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [AnyCanvasElementView] and conformance [A], &demangling cache variable for type metadata for [AnyCanvasElementView], MEMORY[0x1E0DEAF20]);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AnyCanvasElementView and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for AnyCanvasElementView, MEMORY[0x1E0DEFD00]);
    v173 = v216;
    BidirectionalCollection<>.difference<A>(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v174 = (uint64_t)v212;
    v175 = v222;
    v251 = *(void (**)(char *, char *, uint64_t))(v224 + 16);
    v251(v212, v173, v222);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CollectionDifference<AnyCanvasElementView> and conformance CollectionDifference<A>, (uint64_t *)&demangling cache variable for type metadata for CollectionDifference<AnyCanvasElementView>, MEMORY[0x1E0DECE10]);
    dispatch thunk of Collection.startIndex.getter();
    v176 = v213;
    *(_QWORD *)(v174 + *(int *)(v213 + 36)) = v252;
    outlined init with take of IndexingIterator<CollectionDifference<AnyCanvasElementView>>(v174, v57);
    v177 = (uint64_t *)(v57 + *(int *)(v176 + 36));
    v178 = *v177;
    dispatch thunk of Collection.endIndex.getter();
    if (v178 == v252)
    {
LABEL_102:

      outlined destroy of StocksKitCurrencyCache.Provider?(v57, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<AnyCanvasElementView>>);
      (*(void (**)(char *, uint64_t))(v224 + 8))(v216, v175);
      goto LABEL_103;
    }
    while (1)
    {
      v186 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
      v189 = *v187;
      v188 = (_QWORD *)v187[1];
      v190 = v175;
      v191 = v187[2];
      v192 = *((unsigned __int8 *)v187 + 24);
      v193 = *((unsigned __int8 *)v187 + 25);
      outlined copy of CollectionDifference<PDFPage>.Change(*v187, v188, v191, v192, v193);
      v186(&v252, 0);
      v194 = v221;
      v251(v221, (char *)v57, v190);
      dispatch thunk of Collection.formIndex(after:)();
      (*(void (**)(char *, uint64_t))(v224 + 8))(v194, v190);
      v195 = MEMORY[0x1DF0E666C](v234);
      v196 = (id)v195;
      if ((_DWORD)v193 == 1)
        break;
      if (v195)
      {
        v203 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v188) + 0x360);
        v204 = v188;
        v205 = v203();
        if (v205)
        {
          v206 = (void *)v205;
          objc_msgSend(v196, sel_addChildViewController_, v205);
          objc_msgSend(v250, sel_insertSubview_atIndex_, v204, v189);
          v207 = v196;
          objc_msgSend(v206, sel_didMoveToParentViewController_, v207);
          outlined consume of CollectionDifference<PDFPage>.Change(v189, v188, v191, v192, 0);
          outlined consume of CollectionDifference<PDFPage>.Change(v189, v188, v191, v192, 0);

          goto LABEL_109;
        }

      }
      else
      {
        v208 = v188;
      }
      objc_msgSend(v250, sel_insertSubview_atIndex_, v188, v189);
      outlined consume of CollectionDifference<PDFPage>.Change(v189, v188, v191, v192, 0);
      v180 = v189;
      v181 = v188;
      v182 = v191;
      v183 = v192;
      v184 = 0;
LABEL_108:
      outlined consume of CollectionDifference<PDFPage>.Change(v180, v181, v182, v183, v184);
LABEL_109:
      v57 = (uint64_t)v223;
      v185 = *v177;
      v175 = v222;
      dispatch thunk of Collection.endIndex.getter();
      if (v185 == v252)
        goto LABEL_102;
    }
    if (v195)
    {
      v197 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v188) + 0x360);
      v198 = v188;
      v199 = (void *)v197();
      if (v199)
      {
        v200 = v199;
        objc_msgSend(v199, sel_willMoveToParentViewController_, 0);
        objc_msgSend(v198, sel_removeFromSuperview);
        v201 = objc_msgSend(v200, sel_parentViewController);
        if (v201 && (v202 = v201, v201, v202 == v196))
          objc_msgSend(v196, sel_removeChildViewController_, v200);
        else
          objc_msgSend(v200, sel_removeFromParentViewController);

        goto LABEL_107;
      }

    }
    else
    {
      v179 = v188;
    }
    objc_msgSend(v188, sel_removeFromSuperview);
LABEL_107:
    outlined consume of CollectionDifference<PDFPage>.Change(v189, v188, v191, v192, 1);
    v180 = v189;
    v181 = v188;
    v182 = v191;
    v183 = v192;
    v184 = 1;
    goto LABEL_108;
  }
  v130 = *(_QWORD *)&v243[8 * v131];
  if (v130)
    goto LABEL_57;
  while (1)
  {
    v126 = v131 + 1;
    if (__OFADD__(v131, 1))
      break;
    if (v126 >= (uint64_t)v244)
      goto LABEL_81;
    v130 = *(_QWORD *)&v243[8 * v126];
    ++v131;
    if (v130)
      goto LABEL_58;
  }
LABEL_98:
  __break(1u);
LABEL_99:
  swift_bridgeObjectRetain();
  v160 = _CocoaArrayWrapper.endIndex.getter();
  if (!v160)
    goto LABEL_100;
LABEL_84:
  if (v160 >= 1)
  {
    for (i = 0; i != v160; ++i)
    {
      if ((v126 & 0xC000000000000001) != 0)
        v162 = (id)MEMORY[0x1DF0E4D64](i, v126);
      else
        v162 = *(id *)(v126 + 8 * i + 32);
      v163 = v162;
      type metadata accessor for AnyCanvasElementView();
      if (swift_dynamicCastClass())
      {
        MEMORY[0x1DF0E4398]();
        if (*(_QWORD *)((v252 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v252 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {

      }
    }
    swift_bridgeObjectRelease();
    v164 = v252;
    goto LABEL_101;
  }
  __break(1u);
LABEL_126:
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_127:
  swift_bridgeObjectRelease();
  __break(1u);
}

