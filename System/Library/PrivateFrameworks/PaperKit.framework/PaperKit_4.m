uint64_t specialized EncodedFont_Incorrect.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656D616E5FLL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4E796C696D61665FLL && a2 == 0xEB00000000656D61
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7A6953746E696F70 && a2 == 0xE900000000000065
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x737469617274 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

ValueMetadata *type metadata accessor for EncodedFont.CodingKeys()
{
  return &type metadata for EncodedFont.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for Font.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1DDD58610 + 4 * byte_1DDF40A91[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1DDD58644 + 4 * byte_1DDF40A8C[v4]))();
}

uint64_t sub_1DDD58644(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDD5864C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDD58654);
  return result;
}

uint64_t sub_1DDD58660(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDD58668);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1DDD5866C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDD58674(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EncodedFont_Incorrect.CodingKeys()
{
  return &type metadata for EncodedFont_Incorrect.CodingKeys;
}

void specialized CanvasElementView.updateFrame()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double v8;
  void *v9;
  CGFloat b;
  double a;
  double d;
  CGFloat c;
  CGFloat ty;
  CGFloat tx;
  id v16;
  void *v17;
  id v18;
  double v19;
  _QWORD *v20;
  _QWORD *v21;
  double v22;
  void *v23;
  void *v24;
  double v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinX;
  double MinY;
  double v35;
  double v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  CGAffineTransform v42;
  CGAffineTransform v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Signature>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
  v8 = 1.0;
  if (v7)
  {
    v9 = (void *)v7;
    AnyCanvasElementView.paperBoundsTransform()(&v43);

    a = v43.a;
    b = v43.b;
    c = v43.c;
    d = v43.d;
    tx = v43.tx;
    ty = v43.ty;
  }
  else
  {
    ty = 0.0;
    tx = 0.0;
    d = 1.0;
    c = 0.0;
    b = 0.0;
    a = 1.0;
  }
  v16 = objc_msgSend(v1, sel_window);
  if (v16)
  {
    v17 = v16;
    v18 = objc_msgSend(v16, sel_screen);

    objc_msgSend(v18, sel_scale);
    v8 = v19;

  }
  v20 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v21 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x88))();
  v22 = 1.0;
  if (v21)
  {
    v23 = v21;
    v24 = (void *)(*(uint64_t (**)(void))((*v20 & *v21) + 0x308))();

    if (v24)
    {
      objc_msgSend(v24, sel_zoomScale);
      v22 = v25;

    }
  }
  v26 = (char *)v1 + *(_QWORD *)((*v20 & *v1) + 0x380);
  swift_beginAccess();
  v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 16))(v6, v26, v2);
  MEMORY[0x1E0C80A78](v27, v28);
  *(&v41 - 4) = type metadata accessor for Signature();
  *(&v41 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  *(&v41 - 2) = (uint64_t)&protocol witness table for Signature;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v44.origin.x = v42.a;
  v44.origin.y = v42.b;
  v44.size.width = v42.c;
  v44.size.height = v42.d;
  v42.a = a;
  v42.b = b;
  v42.c = c;
  v42.d = d;
  v42.tx = tx;
  v42.ty = ty;
  v45 = CGRectApplyAffineTransform(v44, &v42);
  v46.origin.x = CGRect.rounded(scale:)(v8 * v22, v45.origin.x, v45.origin.y, v45.size.width, v45.size.height);
  x = v46.origin.x;
  y = v46.origin.y;
  width = v46.size.width;
  height = v46.size.height;
  MinX = CGRectGetMinX(v46);
  v47.origin.x = x;
  v47.origin.y = y;
  v47.size.width = width;
  v47.size.height = height;
  MinY = CGRectGetMinY(v47);
  v48.origin.x = x;
  v48.origin.y = y;
  v48.size.width = width;
  v48.size.height = height;
  v35 = CGRectGetWidth(v48);
  v49.origin.x = x;
  v49.origin.y = y;
  v49.size.width = width;
  v49.size.height = height;
  v36 = CGRectGetHeight(v49);
  if (CGRect.isFinite.getter(MinX, MinY, v35, v36))
  {
    objc_msgSend(v1, sel_setFrame_, MinX, MinY, v35, v36);
    objc_msgSend(v1, sel_setNeedsLayout);
  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)logger);
    v38 = Logger.logObject.getter();
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v40 = 0;
      _os_log_impl(&dword_1DDB0F000, v38, v39, "Shape has non finite frame.", v40, 2u);
      MEMORY[0x1DF0E6558](v40, -1, -1);
    }

  }
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  void *v10;
  CGFloat b;
  double a;
  double d;
  CGFloat c;
  CGFloat ty;
  CGFloat tx;
  id v17;
  void *v18;
  id v19;
  double v20;
  _QWORD *v21;
  _QWORD *v22;
  double v23;
  void *v24;
  void *v25;
  double v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinX;
  double MinY;
  double v36;
  double v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  CGAffineTransform v43;
  CGAffineTransform v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement, v5);
  v9 = 1.0;
  if (v8)
  {
    v10 = (void *)v8;
    AnyCanvasElementView.paperBoundsTransform()(&v44);

    a = v44.a;
    b = v44.b;
    c = v44.c;
    d = v44.d;
    tx = v44.tx;
    ty = v44.ty;
  }
  else
  {
    ty = 0.0;
    tx = 0.0;
    d = 1.0;
    c = 0.0;
    b = 0.0;
    a = 1.0;
  }
  v17 = objc_msgSend(v1, sel_window);
  if (v17)
  {
    v18 = v17;
    v19 = objc_msgSend(v17, sel_screen);

    objc_msgSend(v19, sel_scale);
    v9 = v20;

  }
  v21 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v22 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x88))();
  v23 = 1.0;
  if (v22)
  {
    v24 = v22;
    v25 = (void *)(*(uint64_t (**)(void))((*v21 & *v22) + 0x308))();

    if (v25)
    {
      objc_msgSend(v25, sel_zoomScale);
      v23 = v26;

    }
  }
  v27 = (char *)v1 + *(_QWORD *)((*v21 & *v1) + 0x380);
  swift_beginAccess();
  v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 16))(v7, v27, v2);
  MEMORY[0x1E0C80A78](v28, v29);
  *(&v42 - 4) = type metadata accessor for GraphElement();
  *(&v42 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  *(&v42 - 2) = (uint64_t)&protocol witness table for GraphElement;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
  v45.origin.x = v43.a;
  v45.origin.y = v43.b;
  v45.size.width = v43.c;
  v45.size.height = v43.d;
  v43.a = a;
  v43.b = b;
  v43.c = c;
  v43.d = d;
  v43.tx = tx;
  v43.ty = ty;
  v46 = CGRectApplyAffineTransform(v45, &v43);
  v47.origin.x = CGRect.rounded(scale:)(v9 * v23, v46.origin.x, v46.origin.y, v46.size.width, v46.size.height);
  x = v47.origin.x;
  y = v47.origin.y;
  width = v47.size.width;
  height = v47.size.height;
  MinX = CGRectGetMinX(v47);
  v48.origin.x = x;
  v48.origin.y = y;
  v48.size.width = width;
  v48.size.height = height;
  MinY = CGRectGetMinY(v48);
  v49.origin.x = x;
  v49.origin.y = y;
  v49.size.width = width;
  v49.size.height = height;
  v36 = CGRectGetWidth(v49);
  v50.origin.x = x;
  v50.origin.y = y;
  v50.size.width = width;
  v50.size.height = height;
  v37 = CGRectGetHeight(v50);
  if (CGRect.isFinite.getter(MinX, MinY, v36, v37))
  {
    objc_msgSend(v1, sel_setFrame_, MinX, MinY, v36, v37);
    objc_msgSend(v1, sel_setNeedsLayout);
  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)logger);
    v39 = Logger.logObject.getter();
    v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v41 = 0;
      _os_log_impl(&dword_1DDB0F000, v39, v40, "Shape has non finite frame.", v41, 2u);
      MEMORY[0x1DF0E6558](v41, -1, -1);
    }

  }
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double v8;
  void *v9;
  CGFloat b;
  double a;
  double d;
  CGFloat c;
  CGFloat ty;
  CGFloat tx;
  id v16;
  void *v17;
  id v18;
  double v19;
  _QWORD *v20;
  _QWORD *v21;
  double v22;
  void *v23;
  void *v24;
  double v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinX;
  double MinY;
  double v35;
  double v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  CGAffineTransform v42;
  CGAffineTransform v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<UnknownCanvasElement>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
  v8 = 1.0;
  if (v7)
  {
    v9 = (void *)v7;
    AnyCanvasElementView.paperBoundsTransform()(&v43);

    a = v43.a;
    b = v43.b;
    c = v43.c;
    d = v43.d;
    tx = v43.tx;
    ty = v43.ty;
  }
  else
  {
    ty = 0.0;
    tx = 0.0;
    d = 1.0;
    c = 0.0;
    b = 0.0;
    a = 1.0;
  }
  v16 = objc_msgSend(v1, sel_window);
  if (v16)
  {
    v17 = v16;
    v18 = objc_msgSend(v16, sel_screen);

    objc_msgSend(v18, sel_scale);
    v8 = v19;

  }
  v20 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v21 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x88))();
  v22 = 1.0;
  if (v21)
  {
    v23 = v21;
    v24 = (void *)(*(uint64_t (**)(void))((*v20 & *v21) + 0x308))();

    if (v24)
    {
      objc_msgSend(v24, sel_zoomScale);
      v22 = v25;

    }
  }
  v26 = (char *)v1 + *(_QWORD *)((*v20 & *v1) + 0x380);
  swift_beginAccess();
  v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 16))(v6, v26, v2);
  MEMORY[0x1E0C80A78](v27, v28);
  *(&v41 - 4) = type metadata accessor for UnknownCanvasElement();
  *(&v41 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UnknownCanvasElement and conformance UnknownCanvasElement, (uint64_t (*)(uint64_t))type metadata accessor for UnknownCanvasElement, (uint64_t)&protocol conformance descriptor for UnknownCanvasElement);
  *(&v41 - 2) = (uint64_t)&protocol witness table for UnknownCanvasElement;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v44.origin.x = v42.a;
  v44.origin.y = v42.b;
  v44.size.width = v42.c;
  v44.size.height = v42.d;
  v42.a = a;
  v42.b = b;
  v42.c = c;
  v42.d = d;
  v42.tx = tx;
  v42.ty = ty;
  v45 = CGRectApplyAffineTransform(v44, &v42);
  v46.origin.x = CGRect.rounded(scale:)(v8 * v22, v45.origin.x, v45.origin.y, v45.size.width, v45.size.height);
  x = v46.origin.x;
  y = v46.origin.y;
  width = v46.size.width;
  height = v46.size.height;
  MinX = CGRectGetMinX(v46);
  v47.origin.x = x;
  v47.origin.y = y;
  v47.size.width = width;
  v47.size.height = height;
  MinY = CGRectGetMinY(v47);
  v48.origin.x = x;
  v48.origin.y = y;
  v48.size.width = width;
  v48.size.height = height;
  v35 = CGRectGetWidth(v48);
  v49.origin.x = x;
  v49.origin.y = y;
  v49.size.width = width;
  v49.size.height = height;
  v36 = CGRectGetHeight(v49);
  if (CGRect.isFinite.getter(MinX, MinY, v35, v36))
  {
    objc_msgSend(v1, sel_setFrame_, MinX, MinY, v35, v36);
    objc_msgSend(v1, sel_setNeedsLayout);
  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)logger);
    v38 = Logger.logObject.getter();
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v40 = 0;
      _os_log_impl(&dword_1DDB0F000, v38, v39, "Shape has non finite frame.", v40, 2u);
      MEMORY[0x1DF0E6558](v40, -1, -1);
    }

  }
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  void *v10;
  CGFloat b;
  double a;
  double d;
  CGFloat c;
  CGFloat ty;
  CGFloat tx;
  id v17;
  void *v18;
  id v19;
  double v20;
  _QWORD *v21;
  _QWORD *v22;
  double v23;
  void *v24;
  void *v25;
  double v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinX;
  double MinY;
  double v36;
  double v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  CGAffineTransform v43;
  CGAffineTransform v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement, v5);
  v9 = 1.0;
  if (v8)
  {
    v10 = (void *)v8;
    AnyCanvasElementView.paperBoundsTransform()(&v44);

    a = v44.a;
    b = v44.b;
    c = v44.c;
    d = v44.d;
    tx = v44.tx;
    ty = v44.ty;
  }
  else
  {
    ty = 0.0;
    tx = 0.0;
    d = 1.0;
    c = 0.0;
    b = 0.0;
    a = 1.0;
  }
  v17 = objc_msgSend(v1, sel_window);
  if (v17)
  {
    v18 = v17;
    v19 = objc_msgSend(v17, sel_screen);

    objc_msgSend(v19, sel_scale);
    v9 = v20;

  }
  v21 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v22 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x88))();
  v23 = 1.0;
  if (v22)
  {
    v24 = v22;
    v25 = (void *)(*(uint64_t (**)(void))((*v21 & *v22) + 0x308))();

    if (v25)
    {
      objc_msgSend(v25, sel_zoomScale);
      v23 = v26;

    }
  }
  v27 = (char *)v1 + *(_QWORD *)((*v21 & *v1) + 0x380);
  swift_beginAccess();
  v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 16))(v7, v27, v2);
  MEMORY[0x1E0C80A78](v28, v29);
  *(&v42 - 4) = type metadata accessor for Image();
  *(&v42 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
  *(&v42 - 2) = (uint64_t)&protocol witness table for Image;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
  v45.origin.x = v43.a;
  v45.origin.y = v43.b;
  v45.size.width = v43.c;
  v45.size.height = v43.d;
  v43.a = a;
  v43.b = b;
  v43.c = c;
  v43.d = d;
  v43.tx = tx;
  v43.ty = ty;
  v46 = CGRectApplyAffineTransform(v45, &v43);
  v47.origin.x = CGRect.rounded(scale:)(v9 * v23, v46.origin.x, v46.origin.y, v46.size.width, v46.size.height);
  x = v47.origin.x;
  y = v47.origin.y;
  width = v47.size.width;
  height = v47.size.height;
  MinX = CGRectGetMinX(v47);
  v48.origin.x = x;
  v48.origin.y = y;
  v48.size.width = width;
  v48.size.height = height;
  MinY = CGRectGetMinY(v48);
  v49.origin.x = x;
  v49.origin.y = y;
  v49.size.width = width;
  v49.size.height = height;
  v36 = CGRectGetWidth(v49);
  v50.origin.x = x;
  v50.origin.y = y;
  v50.size.width = width;
  v50.size.height = height;
  v37 = CGRectGetHeight(v50);
  if (CGRect.isFinite.getter(MinX, MinY, v36, v37))
  {
    objc_msgSend(v1, sel_setFrame_, MinX, MinY, v36, v37);
    objc_msgSend(v1, sel_setNeedsLayout);
  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)logger);
    v39 = Logger.logObject.getter();
    v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v41 = 0;
      _os_log_impl(&dword_1DDB0F000, v39, v40, "Shape has non finite frame.", v41, 2u);
      MEMORY[0x1DF0E6558](v41, -1, -1);
    }

  }
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  void *v10;
  CGFloat b;
  double a;
  double d;
  CGFloat c;
  CGFloat ty;
  CGFloat tx;
  id v17;
  void *v18;
  id v19;
  double v20;
  _QWORD *v21;
  _QWORD *v22;
  double v23;
  void *v24;
  void *v25;
  double v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MinX;
  double MinY;
  double v36;
  double v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  CGAffineTransform v43;
  CGAffineTransform v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement, v5);
  v9 = 1.0;
  if (v8)
  {
    v10 = (void *)v8;
    AnyCanvasElementView.paperBoundsTransform()(&v44);

    a = v44.a;
    b = v44.b;
    c = v44.c;
    d = v44.d;
    tx = v44.tx;
    ty = v44.ty;
  }
  else
  {
    ty = 0.0;
    tx = 0.0;
    d = 1.0;
    c = 0.0;
    b = 0.0;
    a = 1.0;
  }
  v17 = objc_msgSend(v1, sel_window);
  if (v17)
  {
    v18 = v17;
    v19 = objc_msgSend(v17, sel_screen);

    objc_msgSend(v19, sel_scale);
    v9 = v20;

  }
  v21 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v22 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x88))();
  v23 = 1.0;
  if (v22)
  {
    v24 = v22;
    v25 = (void *)(*(uint64_t (**)(void))((*v21 & *v22) + 0x308))();

    if (v25)
    {
      objc_msgSend(v25, sel_zoomScale);
      v23 = v26;

    }
  }
  v27 = (char *)v1 + *(_QWORD *)((*v21 & *v1) + 0x380);
  swift_beginAccess();
  v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v3 + 16))(v7, v27, v2);
  MEMORY[0x1E0C80A78](v28, v29);
  *(&v42 - 4) = type metadata accessor for Shape();
  *(&v42 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  *(&v42 - 2) = (uint64_t)&protocol witness table for Shape;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
  v45.origin.x = v43.a;
  v45.origin.y = v43.b;
  v45.size.width = v43.c;
  v45.size.height = v43.d;
  v43.a = a;
  v43.b = b;
  v43.c = c;
  v43.d = d;
  v43.tx = tx;
  v43.ty = ty;
  v46 = CGRectApplyAffineTransform(v45, &v43);
  v47.origin.x = CGRect.rounded(scale:)(v9 * v23, v46.origin.x, v46.origin.y, v46.size.width, v46.size.height);
  x = v47.origin.x;
  y = v47.origin.y;
  width = v47.size.width;
  height = v47.size.height;
  MinX = CGRectGetMinX(v47);
  v48.origin.x = x;
  v48.origin.y = y;
  v48.size.width = width;
  v48.size.height = height;
  MinY = CGRectGetMinY(v48);
  v49.origin.x = x;
  v49.origin.y = y;
  v49.size.width = width;
  v49.size.height = height;
  v36 = CGRectGetWidth(v49);
  v50.origin.x = x;
  v50.origin.y = y;
  v50.size.width = width;
  v50.size.height = height;
  v37 = CGRectGetHeight(v50);
  if (CGRect.isFinite.getter(MinX, MinY, v36, v37))
  {
    objc_msgSend(v1, sel_setFrame_, MinX, MinY, v36, v37);
    objc_msgSend(v1, sel_setNeedsLayout);
  }
  else
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)logger);
    v39 = Logger.logObject.getter();
    v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v41 = 0;
      _os_log_impl(&dword_1DDB0F000, v39, v40, "Shape has non finite frame.", v41, 2u);
      MEMORY[0x1DF0E6558](v41, -1, -1);
    }

  }
}

uint64_t specialized CanvasElementView.commit()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t);
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  void (*v14)(char *, _QWORD *, uint64_t, uint64_t);
  uint64_t v15;
  _QWORD v16[4];
  _QWORD v17[3];

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v7 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380);
  swift_beginAccess();
  v8 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  v8(v5, v7, v1);
  v9 = type metadata accessor for Shape();
  v16[0] = v9;
  v16[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  v16[2] = &protocol witness table for Shape;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v10 = *(uint64_t (**)(char *, uint64_t))(v2 + 8);
  v11 = v10(v5, v1);
  if ((v17[0] & 0x20) != 0)
  {
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElementFlags?);
    Capsule.callAsFunction<A>(_:)();
    v11 = swift_endAccess();
  }
  result = (*(uint64_t (**)(uint64_t))((*v6 & *v0) + 0x88))(v11);
  if (result)
  {
    v13 = (_QWORD *)result;
    v8(v5, v7, v1);
    LOBYTE(v17[0]) = 4;
    v14 = *(void (**)(char *, _QWORD *, uint64_t, uint64_t))((*v6 & *v13) + 0x538);
    v15 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
    v14(v5, v17, v9, v15);
    LOBYTE(v17[0]) = 4;
    (*(void (**)(_QWORD *))((*v6 & *v13) + 0x518))(v17);

    return v10(v5, v1);
  }
  return result;
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t (*v10)(char *, uint64_t);
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  void (*v14)(char *, _QWORD *, uint64_t, uint64_t);
  uint64_t v15;
  _QWORD v16[4];
  _QWORD v17[3];

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Signature>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v7 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380);
  swift_beginAccess();
  v8 = *(void (**)(char *, char *, uint64_t))(v2 + 16);
  v8(v5, v7, v1);
  v9 = type metadata accessor for Signature();
  v16[0] = v9;
  v16[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  v16[2] = &protocol witness table for Signature;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v10 = *(uint64_t (**)(char *, uint64_t))(v2 + 8);
  v11 = v10(v5, v1);
  if ((v17[0] & 0x20) != 0)
  {
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElementFlags?);
    Capsule.callAsFunction<A>(_:)();
    v11 = swift_endAccess();
  }
  result = (*(uint64_t (**)(uint64_t))((*v6 & *v0) + 0x88))(v11);
  if (result)
  {
    v13 = (_QWORD *)result;
    v8(v5, v7, v1);
    LOBYTE(v17[0]) = 4;
    v14 = *(void (**)(char *, _QWORD *, uint64_t, uint64_t))((*v6 & *v13) + 0x538);
    v15 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
    v14(v5, v17, v9, v15);
    LOBYTE(v17[0]) = 4;
    (*(void (**)(_QWORD *))((*v6 & *v13) + 0x518))(v17);

    return v10(v5, v1);
  }
  return result;
}

void specialized CanvasElementView.updateGestures()()
{
  specialized CanvasElementView.updateGestures()(&demangling cache variable for type metadata for Capsule<Signature>, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t)&protocol conformance descriptor for Signature, (uint64_t (*)(char *, char *, uint64_t))&protocol witness table for Signature);
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  char v26;
  uint64_t v27;
  void *v28;
  char v29;
  objc_class *v30;
  _BYTE *v31;
  _QWORD *v32;
  _BYTE *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  _QWORD *v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  id v43;
  id v44;
  void *v45;
  objc_super v46;
  _BYTE v47[24];
  ValueMetadata *v48;
  unint64_t v49;

  v1 = v0;
  if ((AnyCanvasElementView.isEditingCanvasElement.getter() & 1) != 0
    || (v2 = MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement)) != 0
    && (v3 = (void *)v2, v4 = AnyCanvasElementView.isEditingCanvasElement.getter(), v3, (v4 & 1) != 0))
  {
    v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v6 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x390);
    if (!*(_QWORD *)((char *)v1 + v6))
    {
      v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D80]), sel_initWithTarget_action_, v1, sel_tapped_);
      v24 = *(void **)((char *)v1 + v6);
      *(_QWORD *)((char *)v1 + v6) = v23;

      v25 = *(void **)((char *)v1 + v6);
      if (v25)
        objc_msgSend(v25, sel_setDelegate_, v1);
      v48 = &type metadata for PencilAndPaperFeatureFlags;
      v49 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
      v47[0] = 0;
      v26 = isFeatureEnabled(_:)();
      v27 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
      if ((v26 & 1) != 0)
      {
        if (!*(_QWORD *)((char *)v1 + v6))
        {
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
        objc_msgSend(v1, sel_addGestureRecognizer_);
        v28 = (void *)MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
        if (v28)
        {

          if ((AnyCanvasElementView.isEditingCanvasElement.getter() & 1) == 0)
          {
            v29 = (*(uint64_t (**)(void))((*v5 & *v1) + 0x308))();
            v30 = (objc_class *)type metadata accessor for PrecisePanGestureRecognizer();
            v31 = objc_allocWithZone(v30);
            *(_QWORD *)&v31[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_initialModifierFlags] = 0;
            v31[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
            swift_unknownObjectWeakInit();
            *(_QWORD *)&v31[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_touchesBeganTimestamp] = 0;
            *(_QWORD *)&v31[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_tapAndHoldTimeout] = 0x3FB999999999999ALL;
            v46.receiver = v31;
            v46.super_class = v30;
            v32 = v1;
            v33 = objc_msgSendSuper2(&v46, sel_initWithTarget_action_, 0, 0);
            v33[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = v29 & 1;
            swift_unknownObjectWeakAssign();

            v34 = *(_QWORD *)((*v5 & *v32) + 0x398);
            v35 = *(void **)((char *)v32 + v34);
            *(_QWORD *)((char *)v32 + v34) = v33;

            v36 = *(void **)((char *)v32 + v34);
            if (!v36)
              goto LABEL_36;
            objc_msgSend(v36, sel_setDelegate_, v32);
            v37 = *(void **)((char *)v32 + v34);
            if (!v37)
              goto LABEL_36;
            objc_msgSend(v37, sel_addTarget_action_, v32, sel_dragMoved_);
            if (!*(_QWORD *)((char *)v32 + v34))
              goto LABEL_36;
            objc_msgSend(v32, sel_addGestureRecognizer_);
          }
        }
      }
      else
      {
        v38 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*v5 & *v1) + 0x88))(v27);
        if (v38)
        {
          v39 = v38;
          v40 = (void *)(*(uint64_t (**)(void))((*v5 & *v38) + 0x320))();

          if (v40)
          {
            v41 = objc_msgSend(v40, sel_canvasView);

            if (v41)
            {
              v42 = objc_msgSend(v41, sel_drawingGestureRecognizer);

              v43 = objc_msgSend(v42, sel_view);
              if (v43)
              {
                if (!*(_QWORD *)((char *)v1 + v6))
                {
LABEL_37:
                  __break(1u);
                  return;
                }
                objc_msgSend(v43, sel_addGestureRecognizer_);

              }
            }
          }
        }
      }
    }
    v7 = *(uint64_t (**)(void))((*v5 & *v1) + 0x3E8);
    if ((v7() & 1) == 0 || (v8 = *(_QWORD *)((*v5 & *v1) + 0x3A0), *(_QWORD *)((char *)v1 + v8)))
    {
      if ((v7() & 1) != 0)
        return;
      goto LABEL_13;
    }
    v44 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC36C0]), sel_initWithDelegate_, v1);
    v45 = *(void **)((char *)v1 + v8);
    *(_QWORD *)((char *)v1 + v8) = v44;

    if (*(_QWORD *)((char *)v1 + v8))
    {
      objc_msgSend(v1, sel_addInteraction_);
      return;
    }
    goto LABEL_35;
  }
  v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v10 = *MEMORY[0x1E0DEEDD8] & *v1;
  v11 = *(_QWORD *)(v10 + 0x390);
  v12 = *(void **)((char *)v1 + v11);
  if (v12)
  {
    v13 = v12;
    objc_msgSend(v1, sel_removeGestureRecognizer_, v13);
    v14 = *(void **)((char *)v1 + v11);
    *(_QWORD *)((char *)v1 + v11) = 0;

    v10 = *v9 & *v1;
  }
  v15 = *(_QWORD *)(v10 + 920);
  v16 = *(void **)((char *)v1 + v15);
  if (v16)
  {
    v17 = v16;
    objc_msgSend(v1, sel_removeGestureRecognizer_, v17);
    v18 = *(void **)((char *)v1 + v15);
    *(_QWORD *)((char *)v1 + v15) = 0;

  }
LABEL_13:
  v19 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x3A0);
  v20 = *(void **)((char *)v1 + v19);
  if (v20)
  {
    v21 = v20;
    objc_msgSend(v1, sel_removeInteraction_, v21);
    v22 = *(void **)((char *)v1 + v19);
    *(_QWORD *)((char *)v1 + v19) = 0;

  }
}

{
  specialized CanvasElementView.updateGestures()(&demangling cache variable for type metadata for Capsule<TextBox>, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, &lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t)&protocol conformance descriptor for TextBox, (uint64_t (*)(char *, char *, uint64_t))&protocol witness table for TextBox);
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *(*v7)(_QWORD *__return_ptr);
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  char v27;
  uint64_t v28;
  void *v29;
  objc_class *v30;
  _BYTE *v31;
  _QWORD *v32;
  _BYTE *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  _QWORD *v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  id v43;
  id v44;
  void *v45;
  objc_super v46;
  _QWORD v47[5];

  v1 = v0;
  if ((AnyCanvasElementView.isEditingCanvasElement.getter() & 1) != 0
    || (v2 = MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement)) != 0
    && (v3 = (void *)v2, v4 = AnyCanvasElementView.isEditingCanvasElement.getter(), v3, (v4 & 1) != 0))
  {
    v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v6 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x390);
    if (!*(_QWORD *)((char *)v1 + v6))
    {
      v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D80]), sel_initWithTarget_action_, v1, sel_tapped_);
      v25 = *(void **)((char *)v1 + v6);
      *(_QWORD *)((char *)v1 + v6) = v24;

      v26 = *(void **)((char *)v1 + v6);
      if (v26)
        objc_msgSend(v26, sel_setDelegate_, v1);
      v47[3] = &type metadata for PencilAndPaperFeatureFlags;
      v47[4] = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
      LOBYTE(v47[0]) = 0;
      v27 = isFeatureEnabled(_:)();
      v28 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
      if ((v27 & 1) != 0)
      {
        if (!*(_QWORD *)((char *)v1 + v6))
        {
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
        objc_msgSend(v1, sel_addGestureRecognizer_);
        v29 = (void *)MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
        if (v29)
        {

          if ((AnyCanvasElementView.isEditingCanvasElement.getter() & 1) == 0)
          {
            v30 = (objc_class *)type metadata accessor for PrecisePanGestureRecognizer();
            v31 = objc_allocWithZone(v30);
            *(_QWORD *)&v31[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_initialModifierFlags] = 0;
            v31[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
            swift_unknownObjectWeakInit();
            *(_QWORD *)&v31[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_touchesBeganTimestamp] = 0;
            *(_QWORD *)&v31[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_tapAndHoldTimeout] = 0x3FB999999999999ALL;
            v46.receiver = v31;
            v46.super_class = v30;
            v32 = v1;
            v33 = objc_msgSendSuper2(&v46, sel_initWithTarget_action_, 0, 0);
            v33[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
            swift_unknownObjectWeakAssign();

            v34 = *(_QWORD *)((*v5 & *v32) + 0x398);
            v35 = *(void **)((char *)v32 + v34);
            *(_QWORD *)((char *)v32 + v34) = v33;

            v36 = *(void **)((char *)v32 + v34);
            if (!v36)
              goto LABEL_36;
            objc_msgSend(v36, sel_setDelegate_, v32);
            v37 = *(void **)((char *)v32 + v34);
            if (!v37)
              goto LABEL_36;
            objc_msgSend(v37, sel_addTarget_action_, v32, sel_dragMoved_);
            if (!*(_QWORD *)((char *)v32 + v34))
              goto LABEL_36;
            objc_msgSend(v32, sel_addGestureRecognizer_);
          }
        }
      }
      else
      {
        v38 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*v5 & *v1) + 0x88))(v28);
        if (v38)
        {
          v39 = v38;
          v40 = (void *)(*(uint64_t (**)(void))((*v5 & *v38) + 0x320))();

          if (v40)
          {
            v41 = objc_msgSend(v40, sel_canvasView);

            if (v41)
            {
              v42 = objc_msgSend(v41, sel_drawingGestureRecognizer);

              v43 = objc_msgSend(v42, sel_view);
              if (v43)
              {
                if (!*(_QWORD *)((char *)v1 + v6))
                {
LABEL_37:
                  __break(1u);
                  return;
                }
                objc_msgSend(v43, sel_addGestureRecognizer_);

              }
            }
          }
        }
      }
    }
    v7 = *(_QWORD *(**)(_QWORD *__return_ptr))((*v5 & *v1) + 0x200);
    v8 = v7(v47);
    if ((v47[0] & 2) != 0 || (v9 = *(_QWORD *)((*v5 & *v1) + 0x3A0), *(_QWORD *)((char *)v1 + v9)))
    {
      ((void (*)(_QWORD *__return_ptr, _QWORD *))v7)(v47, v8);
      if ((v47[0] & 2) == 0)
        return;
      goto LABEL_13;
    }
    v44 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC36C0]), sel_initWithDelegate_, v1);
    v45 = *(void **)((char *)v1 + v9);
    *(_QWORD *)((char *)v1 + v9) = v44;

    if (*(_QWORD *)((char *)v1 + v9))
    {
      objc_msgSend(v1, sel_addInteraction_);
      return;
    }
    goto LABEL_35;
  }
  v10 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v11 = *MEMORY[0x1E0DEEDD8] & *v1;
  v12 = *(_QWORD *)(v11 + 0x390);
  v13 = *(void **)((char *)v1 + v12);
  if (v13)
  {
    v14 = v13;
    objc_msgSend(v1, sel_removeGestureRecognizer_, v14);
    v15 = *(void **)((char *)v1 + v12);
    *(_QWORD *)((char *)v1 + v12) = 0;

    v11 = *v10 & *v1;
  }
  v16 = *(_QWORD *)(v11 + 920);
  v17 = *(void **)((char *)v1 + v16);
  if (v17)
  {
    v18 = v17;
    objc_msgSend(v1, sel_removeGestureRecognizer_, v18);
    v19 = *(void **)((char *)v1 + v16);
    *(_QWORD *)((char *)v1 + v16) = 0;

  }
LABEL_13:
  v20 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x3A0);
  v21 = *(void **)((char *)v1 + v20);
  if (v21)
  {
    v22 = v21;
    objc_msgSend(v1, sel_removeInteraction_, v22);
    v23 = *(void **)((char *)v1 + v20);
    *(_QWORD *)((char *)v1 + v20) = 0;

  }
}

{
  specialized CanvasElementView.updateGestures()(&demangling cache variable for type metadata for Capsule<Image>, (uint64_t (*)(uint64_t))type metadata accessor for Image, &lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t)&protocol conformance descriptor for Image, (uint64_t (*)(char *, char *, uint64_t))&protocol witness table for Image);
}

void specialized CanvasElementView.updateGestures()(uint64_t *a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4, uint64_t (*a5)(char *, char *, uint64_t))
{
  _QWORD *v5;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, char *, uint64_t);
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  void *v35;
  uint64_t v36;
  void *v37;
  id v38;
  void *v39;
  uint64_t v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  char v47;
  uint64_t v48;
  void *v49;
  objc_class *v50;
  _BYTE *v51;
  _QWORD *v52;
  _BYTE *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  _QWORD *v58;
  void *v59;
  void *v60;
  id v61;
  id v62;
  id v63;
  id v64;
  void *v65;
  uint64_t (*v66)(char *, char *, uint64_t);
  unint64_t *v67;
  uint64_t v68;
  uint64_t (*v69)(char *, char *, uint64_t);
  objc_super v70;
  char v71[24];
  ValueMetadata *v72;
  unint64_t v73;
  uint64_t v74;

  v69 = a5;
  v9 = v5;
  v10 = __swift_instantiateConcreteTypeFromMangledName(a1);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((AnyCanvasElementView.isEditingCanvasElement.getter() & 1) != 0
    || (v15 = MEMORY[0x1DF0E666C]((char *)v5 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement)) != 0
    && (v16 = (void *)v15, v17 = AnyCanvasElementView.isEditingCanvasElement.getter(), v16, (v17 & 1) != 0))
  {
    v67 = a3;
    v68 = a4;
    v18 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v19 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v9) + 0x390);
    if (!*(_QWORD *)((char *)v9 + v19))
    {
      v44 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D80]), sel_initWithTarget_action_, v9, sel_tapped_);
      v45 = *(void **)((char *)v9 + v19);
      *(_QWORD *)((char *)v9 + v19) = v44;

      v46 = *(void **)((char *)v9 + v19);
      if (v46)
        objc_msgSend(v46, sel_setDelegate_, v9);
      v72 = &type metadata for PencilAndPaperFeatureFlags;
      v73 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
      v71[0] = 0;
      v47 = isFeatureEnabled(_:)();
      v48 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
      if ((v47 & 1) != 0)
      {
        if (!*(_QWORD *)((char *)v9 + v19))
        {
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
        objc_msgSend(v9, sel_addGestureRecognizer_);
        v49 = (void *)MEMORY[0x1DF0E666C]((char *)v9 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
        if (v49)
        {

          if ((AnyCanvasElementView.isEditingCanvasElement.getter() & 1) == 0)
          {
            v50 = (objc_class *)type metadata accessor for PrecisePanGestureRecognizer();
            v51 = objc_allocWithZone(v50);
            *(_QWORD *)&v51[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_initialModifierFlags] = 0;
            v51[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
            swift_unknownObjectWeakInit();
            *(_QWORD *)&v51[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_touchesBeganTimestamp] = 0;
            *(_QWORD *)&v51[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_tapAndHoldTimeout] = 0x3FB999999999999ALL;
            v70.receiver = v51;
            v70.super_class = v50;
            v52 = v9;
            v53 = objc_msgSendSuper2(&v70, sel_initWithTarget_action_, 0, 0);
            v53[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
            swift_unknownObjectWeakAssign();

            v54 = *(_QWORD *)((*v18 & *v52) + 0x398);
            v55 = *(void **)((char *)v52 + v54);
            *(_QWORD *)((char *)v52 + v54) = v53;

            v56 = *(void **)((char *)v52 + v54);
            if (!v56)
              goto LABEL_36;
            objc_msgSend(v56, sel_setDelegate_, v52);
            v57 = *(void **)((char *)v52 + v54);
            if (!v57)
              goto LABEL_36;
            objc_msgSend(v57, sel_addTarget_action_, v52, sel_dragMoved_);
            if (!*(_QWORD *)((char *)v52 + v54))
              goto LABEL_36;
            objc_msgSend(v52, sel_addGestureRecognizer_);
          }
        }
      }
      else
      {
        v58 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*v18 & *v9) + 0x88))(v48);
        if (v58)
        {
          v59 = v58;
          v60 = (void *)(*(uint64_t (**)(void))((*v18 & *v58) + 0x320))();

          if (v60)
          {
            v61 = objc_msgSend(v60, sel_canvasView);

            if (v61)
            {
              v62 = objc_msgSend(v61, sel_drawingGestureRecognizer);

              v63 = objc_msgSend(v62, sel_view);
              if (v63)
              {
                if (!*(_QWORD *)((char *)v9 + v19))
                {
LABEL_37:
                  __break(1u);
                  return;
                }
                objc_msgSend(v63, sel_addGestureRecognizer_);

              }
            }
          }
        }
      }
    }
    v20 = (char *)v9 + *(_QWORD *)((*v18 & *v9) + 0x380);
    swift_beginAccess();
    v66 = *(uint64_t (**)(char *, char *, uint64_t))(v11 + 16);
    v21 = v66(v14, v20, v10);
    MEMORY[0x1E0C80A78](v21, v22);
    v23 = a2(0);
    *(&v66 - 4) = (uint64_t (*)(char *, char *, uint64_t))v23;
    v24 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(v67, a2, v68);
    v25 = v69;
    *(&v66 - 3) = (uint64_t (*)(char *, char *, uint64_t))v24;
    *(&v66 - 2) = v25;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v26 = *(void (**)(char *, uint64_t))(v11 + 8);
    v26(v14, v10);
    if ((v74 & 2) != 0 || (v27 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v9) + 0x3A0), *(_QWORD *)((char *)v9 + v27)))
    {
      v28 = v66(v14, v20, v10);
      MEMORY[0x1E0C80A78](v28, v29);
      *(&v66 - 4) = (uint64_t (*)(char *, char *, uint64_t))v23;
      *(&v66 - 3) = (uint64_t (*)(char *, char *, uint64_t))v24;
      *(&v66 - 2) = v69;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      v26(v14, v10);
      if ((v74 & 2) == 0)
        return;
      goto LABEL_13;
    }
    v64 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC36C0]), sel_initWithDelegate_, v9);
    v65 = *(void **)((char *)v9 + v27);
    *(_QWORD *)((char *)v9 + v27) = v64;

    if (*(_QWORD *)((char *)v9 + v27))
    {
      objc_msgSend(v9, sel_addInteraction_);
      return;
    }
    goto LABEL_35;
  }
  v30 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v31 = *MEMORY[0x1E0DEEDD8] & *v9;
  v32 = *(_QWORD *)(v31 + 0x390);
  v33 = *(void **)((char *)v9 + v32);
  if (v33)
  {
    v34 = v33;
    objc_msgSend(v9, sel_removeGestureRecognizer_, v34);
    v35 = *(void **)((char *)v9 + v32);
    *(_QWORD *)((char *)v9 + v32) = 0;

    v31 = *v30 & *v9;
  }
  v36 = *(_QWORD *)(v31 + 920);
  v37 = *(void **)((char *)v9 + v36);
  if (v37)
  {
    v38 = v37;
    objc_msgSend(v9, sel_removeGestureRecognizer_, v38);
    v39 = *(void **)((char *)v9 + v36);
    *(_QWORD *)((char *)v9 + v36) = 0;

  }
LABEL_13:
  v40 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v9) + 0x3A0);
  v41 = *(void **)((char *)v9 + v40);
  if (v41)
  {
    v42 = v41;
    objc_msgSend(v9, sel_removeInteraction_, v42);
    v43 = *(void **)((char *)v9 + v40);
    *(_QWORD *)((char *)v9 + v40) = 0;

  }
}

void CanvasElementController.changeSelectedStrokeWidth(_:)(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t i;
  _QWORD *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t j;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  v3 = v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (!MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
    return;
  v4 = *(_QWORD *)(v3 + 8);
  ObjectType = swift_getObjectType();
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(ObjectType, v4);
  swift_unknownObjectRelease();
  if (!v6)
    return;
  v7 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  v8 = *(void **)((char *)v6 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v8)
  {
LABEL_43:
    __break(1u);
    return;
  }
  v9 = v8;
  v10 = swift_bridgeObjectRetain();
  v11 = 0;
  v12 = specialized Sequence.compactMap<A>(_:)(v10, (uint64_t)v9);

  swift_bridgeObjectRelease();
  v13 = MEMORY[0x1E0DEE9D8];
  v33 = MEMORY[0x1E0DEE9D8];
  if (v12 >> 62)
    goto LABEL_31;
  v14 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v15 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    if (!v14)
    {
      swift_bridgeObjectRelease();
      v12 = MEMORY[0x1E0DEE9D8];
      v20 = *(void **)((char *)v6 + v7);
      if (v20)
        break;
      goto LABEL_30;
    }
    v32 = v11;
    if (v14 < 1)
    {
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v16 = v7;
    for (i = 0; i != v14; ++i)
    {
      if ((v12 & 0xC000000000000001) != 0)
        v18 = (_QWORD *)MEMORY[0x1DF0E4D64](i, v12);
      else
        v18 = *(id *)(v12 + 8 * i + 32);
      v19 = v18;
      if (((*(uint64_t (**)(void))((*v15 & *v18) + 0x1E0))() & 1) != 0)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {

      }
    }
    swift_bridgeObjectRelease();
    v7 = v16;
    v13 = MEMORY[0x1E0DEE9D8];
    v11 = v32;
    v12 = v33;
    v20 = *(void **)((char *)v6 + v7);
    if (v20)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  v21 = v20;
  v22 = swift_bridgeObjectRetain();
  v23 = specialized Sequence.compactMap<A>(_:)(v22, (uint64_t)v21);

  swift_bridgeObjectRelease();
  if (v23 >> 62)
  {
    swift_bridgeObjectRetain();
    v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v24)
      goto LABEL_33;
LABEL_19:
    if (v24 >= 1)
    {
      for (j = 0; j != v24; ++j)
      {
        if ((v23 & 0xC000000000000001) != 0)
          v26 = (_QWORD *)MEMORY[0x1DF0E4D64](j, v23);
        else
          v26 = *(id *)(v23 + 8 * j + 32);
        v27 = v26;
        if (((*(uint64_t (**)(void))((*v15 & *v26) + 0x1E0))() & 1) != 0)
        {

        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      v28 = v13;
      goto LABEL_34;
    }
    goto LABEL_42;
  }
  v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v24)
    goto LABEL_19;
LABEL_33:
  swift_bridgeObjectRelease();
  v28 = MEMORY[0x1E0DEE9D8];
LABEL_34:
  updateElements #1 (elements:) in CanvasElementController.changeSelectedStrokeWidth(_:)(v12, a1);
  v29 = swift_release();
  if (v28 < 0 || (v28 & 0x4000000000000000) != 0)
  {
    swift_retain();
    v31 = _CocoaArrayWrapper.endIndex.getter();
    v29 = swift_release();
    if (v31)
      goto LABEL_37;
  }
  else if (*(_QWORD *)(v28 + 16))
  {
LABEL_37:
    MEMORY[0x1E0C80A78](v29, v30);
    (*(void (**)(_QWORD, _QWORD, uint64_t (*)()))((*v15 & *v6) + 0x468))(0, 0, partial apply for closure #3 in CanvasElementController.changeSelectedStrokeWidth(_:));
    swift_release();

    return;
  }

  swift_release();
}

Swift::Void __swiftcall CanvasElementController.startLiveEditingSelectedElements()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  char *v4;
  void *v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
  {
    v2 = *(_QWORD *)(v1 + 8);
    ObjectType = swift_getObjectType();
    v4 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(ObjectType, v2);
    swift_unknownObjectRelease();
    if (v4)
    {
      v5 = *(void **)&v4[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
      if (!v5)
      {
LABEL_16:
        __break(1u);
        return;
      }
      v6 = v5;
      v7 = swift_bridgeObjectRetain();
      v8 = specialized Sequence.compactMap<A>(_:)(v7, (uint64_t)v6);

      swift_bridgeObjectRelease();
      if (v8 >> 62)
      {
        swift_bridgeObjectRetain();
        v9 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v9)
          goto LABEL_6;
      }
      else
      {
        v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v9)
        {
LABEL_6:
          if (v9 >= 1)
          {
            v10 = 0;
            v11 = (_QWORD *)MEMORY[0x1E0DEEDD8];
            do
            {
              if ((v8 & 0xC000000000000001) != 0)
                v12 = (_QWORD *)MEMORY[0x1DF0E4D64](v10, v8);
              else
                v12 = *(id *)(v8 + 8 * v10 + 32);
              v13 = v12;
              ++v10;
              (*(void (**)(void))((*v11 & *v12) + 0x1E8))();

            }
            while (v9 != v10);
            goto LABEL_14;
          }
          __break(1u);
          goto LABEL_16;
        }
      }
LABEL_14:

      swift_bridgeObjectRelease();
    }
  }
}

Swift::Void __swiftcall CanvasElementController.commitLiveEditingSelectedElements()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
  {
    v2 = *(_QWORD *)(v1 + 8);
    ObjectType = swift_getObjectType();
    v9 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(ObjectType, v2);
    swift_unknownObjectRelease();
    if (v9)
    {
      v4 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle;
      *(_BYTE *)(v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle) = 1;
      v5 = *(void **)&v9[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
      if (v5)
      {
        v6 = v5;
        v7 = swift_bridgeObjectRetain();
        v8 = specialized Sequence.compactMap<A>(_:)(v7, (uint64_t)v6);

        swift_bridgeObjectRelease();
        specialized AnyCanvas.undoableEndLiveEdits<A>(for:)(v8);
        swift_bridgeObjectRelease();
        *(_BYTE *)(v0 + v4) = 0;

      }
      else
      {
        __break(1u);
      }
    }
  }
}

uint64_t CanvasElementController.changeSelectedShapesOpacity(_:)(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t ObjectType;
  char *v10;
  void *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  _QWORD *v33;
  void (*v34)(char *, _QWORD *, void *, uint64_t);
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t (*v42)(char *, char *, uint64_t);
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  void *v46;
  _QWORD v47[5];

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v40 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v44 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  result = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate);
  if (!result)
    return result;
  v8 = *(_QWORD *)(v6 + 8);
  ObjectType = swift_getObjectType();
  v10 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(ObjectType, v8);
  result = swift_unknownObjectRelease();
  if (!v10)
    return result;
  v11 = *(void **)&v10[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (!v11)
  {
LABEL_23:
    __break(1u);
    return result;
  }
  v12 = v11;
  v13 = swift_bridgeObjectRetain();
  v14 = specialized Sequence.compactMap<A>(_:)(v13, (uint64_t)v12);

  result = swift_bridgeObjectRelease();
  if (!(v14 >> 62))
  {
    v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v15)
      goto LABEL_6;
LABEL_21:

    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  v15 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (!v15)
    goto LABEL_21;
LABEL_6:
  v36 = v10;
  if (v15 < 1)
  {
    __break(1u);
    goto LABEL_23;
  }
  v16 = 0;
  v43 = v14 & 0xC000000000000001;
  v37 = MEMORY[0x1E0DEE9C0] + 8;
  v38 = v15;
  v39 = v14;
  do
  {
    if (v43)
      v18 = (id)MEMORY[0x1DF0E4D64](v16, v14);
    else
      v18 = *(id *)(v14 + 8 * v16 + 32);
    v17 = v18;
    type metadata accessor for ShapeView();
    v19 = swift_dynamicCastClass();
    if (v19)
    {
      v46 = v17;
      v21 = (_QWORD *)MEMORY[0x1E0C80A78](v19, v20);
      *((double *)&v36 - 2) = a1;
      v22 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v21) + 0x380);
      v45 = v21;
      v23 = (char *)v21 + v22;
      swift_beginAccess();
      Capsule.callAsFunction<A>(_:)();
      swift_endAccess();
      v24 = v40;
      v25 = v44;
      v42 = *(uint64_t (**)(char *, char *, uint64_t))(v40 + 16);
      v26 = v42(v44, v23, v3);
      MEMORY[0x1E0C80A78](v26, v27);
      v41 = (void *)type metadata accessor for Shape();
      *(&v36 - 4) = v41;
      *(&v36 - 3) = (id)lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
      *(&v36 - 2) = &protocol witness table for Shape;
      swift_getKeyPath();
      Capsule<>.subscript.getter();
      swift_release();
      v28 = *(void (**)(char *, uint64_t))(v24 + 8);
      v28(v25, v3);
      if ((v47[0] & 0x20) != 0)
      {
        swift_beginAccess();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElementFlags?);
        Capsule.callAsFunction<A>(_:)();
        swift_endAccess();
      }
      v29 = v45;
      v30 = MEMORY[0x1DF0E666C]((char *)v45 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
      if (v30)
      {
        v31 = (_QWORD *)v30;
        v32 = v44;
        v42(v44, v23, v3);
        LOBYTE(v47[0]) = 4;
        v33 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        v34 = *(void (**)(char *, _QWORD *, void *, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v31) + 0x538);
        v35 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
        v34(v32, v47, v41, v35);
        LOBYTE(v47[0]) = 4;
        (*(void (**)(_QWORD *))((*v33 & *v31) + 0x518))(v47);

        v28(v32, v3);
      }
      objc_msgSend(v29, sel_setNeedsLayout, v36, v37);
      v15 = v38;
      v14 = v39;
      v17 = v46;
    }
    ++v16;

  }
  while (v15 != v16);

  return swift_bridgeObjectRelease();
}

uint64_t CanvasElementController.textBoxes.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  char *v4;
  uint64_t result;
  void *v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (!MEMORY[0x1DF0E666C](v1))
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  v4 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(ObjectType, v2);
  result = swift_unknownObjectRelease();
  if (!v4)
    return (uint64_t)v4;
  v6 = *(void **)&v4[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (!v6)
    goto LABEL_23;
  v7 = v6;
  v8 = swift_bridgeObjectRetain();
  v9 = specialized Sequence.compactMap<A>(_:)(v8, (uint64_t)v7);

  swift_bridgeObjectRelease();
  v16 = MEMORY[0x1E0DEE9D8];
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v10 = result;
    if (result)
      goto LABEL_6;
LABEL_19:
    swift_bridgeObjectRelease();
    v4 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_20:
    swift_bridgeObjectRelease();
    return (uint64_t)v4;
  }
  v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v10)
    goto LABEL_19;
LABEL_6:
  if (v10 >= 1)
  {
    v11 = 0;
    v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    do
    {
      if ((v9 & 0xC000000000000001) != 0)
        v13 = (_QWORD *)MEMORY[0x1DF0E4D64](v11, v9);
      else
        v13 = *(id *)(v9 + 8 * v11 + 32);
      v14 = v13;
      v15 = (*(uint64_t (**)(void))((*v12 & *v13) + 0x2D0))();

      if (v15)
      {
        MEMORY[0x1DF0E4398]();
        if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      ++v11;
    }
    while (v10 != v11);
    swift_bridgeObjectRelease();
    v4 = (char *)v16;
    goto LABEL_20;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

void CanvasElementController.selectedTextBoxColors()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  id (**v56)@<X0>(uint64_t *@<X8>);
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  id v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  void *v70;
  id v71;
  id v72;
  id v73;
  void *v74;
  id v75;
  void *v76;
  void *v77;
  id v78;
  char *v79;
  char *v80;
  void *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
  v86 = *(_QWORD *)(v0 - 8);
  v87 = v0;
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)&v79 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v84 = *(_QWORD *)(v4 - 8);
  v85 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>, Color>);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  v16 = *(unsigned __int8 **)(v89 - 8);
  MEMORY[0x1E0C80A78](v89, v17);
  v19 = (char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v79 - v22;
  v24 = CanvasElementController.textBoxes.getter();
  if (!v24)
    return;
  v25 = v24;
  v88 = v24;
  v79 = v23;
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter())
    {
      specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
      goto LABEL_60;
    }
    goto LABEL_59;
  }
  v26 = MEMORY[0x1E0DEE9E8];
  while (1)
  {
    v93 = v26;
    v27 = v25 >> 62;
    if (v25 >> 62)
    {
      swift_bridgeObjectRetain();
      v28 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v25 = v88;
    }
    else
    {
      v28 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v83 = v12;
    v80 = v11;
    if (!v28)
    {
      swift_bridgeObjectRelease();
      v34 = MEMORY[0x1E0DEE9D8];
LABEL_31:
      v49 = MEMORY[0x1E0DEE9D8];
      *(_QWORD *)&v91 = MEMORY[0x1E0DEE9D8];
      v50 = *(_QWORD *)(v34 + 16);
      if (v50)
      {
        v51 = v34 + ((v16[80] + 32) & ~(unint64_t)v16[80]);
        v88 = *((_QWORD *)v16 + 9);
        v52 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v16 + 2);
        swift_bridgeObjectRetain();
        v54 = v79;
        v53 = (uint64_t)v80;
        v55 = v89;
        v87 = (uint64_t)v16;
        do
        {
          v52(v54, v51, v55);
          v52((char *)v53, (uint64_t)v54, v55);
          v52(v15, v53, v55);
          v56 = (id (**)@<X0>(uint64_t *@<X8>))&v15[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>)
                                                                     + 44)];
          *v56 = closure #1 in CRAttributedString.Runs<>.fontColors.getter;
          v56[1] = 0;
          v57 = &v15[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>)
                            + 36)];
          *(_QWORD *)v57 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
          *((_QWORD *)v57 + 1) = 0;
          v58 = &v15[*(int *)(v83 + 44)];
          *(_QWORD *)v58 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
          *((_QWORD *)v58 + 1) = 0;
          outlined destroy of StocksKitCurrencyCache.Provider?(v53, &demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
          v59 = specialized Sequence<>.uniqueElements()();
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>, Color>);
          (*(void (**)(char *, uint64_t))(v87 + 8))(v54, v55);
          specialized Array.append<A>(contentsOf:)(v59);
          v51 += v88;
          --v50;
        }
        while (v50);
        swift_bridgeObjectRelease();
        v49 = v91;
      }
      v60 = specialized Set.init<A>(_:)(v49);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v61 = specialized Sequence.compactMap<A>(_:)(v60);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v62 = specialized Set.init<A>(_:)(v61);
      swift_bridgeObjectRelease();
      v93 = v62;
      return;
    }
    if (v28 == 1)
    {
      if (!v27)
      {
        v29 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v29)
          goto LABEL_10;
        goto LABEL_17;
      }
      swift_bridgeObjectRetain();
      if (!_CocoaArrayWrapper.endIndex.getter())
      {
LABEL_17:
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
LABEL_10:
      if ((v88 & 0xC000000000000001) != 0)
      {
        v30 = (_QWORD *)MEMORY[0x1DF0E4D64](0, v88);
      }
      else
      {
        if (!*(_QWORD *)((v88 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_63;
        }
        v30 = *(id *)(v88 + 32);
      }
      v31 = v30;
      v32 = swift_bridgeObjectRelease();
      (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v31) + 0x90))(v32);
      if (v33)
      {

        v28 = 1;
        goto LABEL_18;
      }
      swift_bridgeObjectRelease();
      v63 = *(void **)((char *)v31 + OBJC_IVAR____TtC8PaperKit14AnyTextBoxView_textView);
      if (!v63)
      {

        return;
      }
      v36 = v31;
      v64 = (void *)*MEMORY[0x1E0DC1140];
      v35 = v63;
      v65 = v64;
      v66 = objc_msgSend(v35, sel_typingAttributes);
      type metadata accessor for NSAttributedStringKey(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, (uint64_t (*)(uint64_t))type metadata accessor for NSAttributedStringKey, (uint64_t)&protocol conformance descriptor for NSAttributedStringKey);
      v67 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      if (*(_QWORD *)(v67 + 16) && (v68 = specialized __RawDictionaryStorage.find<A>(_:)(v65), (v69 & 1) != 0))
      {
        outlined init with copy of Any(*(_QWORD *)(v67 + 56) + 32 * v68, (uint64_t)&v91);

        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v92 + 1))
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
          if ((swift_dynamicCast() & 1) == 0)
            goto LABEL_52;
          v70 = v90;
          v71 = objc_msgSend(v35, sel_traitCollection);
          v72 = objc_msgSend(v71, sel_userInterfaceStyle);

          v73 = v70;
          Color.init(cgColor:)((CGColor *)objc_msgSend(v73, sel_CGColor), (CGColor **)&v91);

          v74 = (void *)v91;
          if (!(_QWORD)v91)
          {
            v78 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
            goto LABEL_54;
          }
          if (v72 != (id)2)
          {
LABEL_46:
            v78 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v74);
LABEL_54:
            specialized Set._Variant.insert(_:)(&v91, v78);

            return;
          }
          v75 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, (_QWORD)v91);
          v76 = (void *)static PKInkingTool.convertColor(_:from:to:)();

          Color.init(cgColor:)((CGColor *)objc_msgSend(v76, sel_CGColor), (CGColor **)&v91);
          v77 = (void *)v91;
          if ((_QWORD)v91)
          {

            v74 = v77;
            goto LABEL_46;
          }
LABEL_63:
          __break(1u);
          return;
        }
      }
      else
      {
        v91 = 0u;
        v92 = 0u;

        swift_bridgeObjectRelease();
      }

      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v91, &demangling cache variable for type metadata for Any?);
      return;
    }
LABEL_18:
    *(_QWORD *)&v91 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28 & ~(v28 >> 63), 0);
    if ((v28 & 0x8000000000000000) == 0)
      break;
    __break(1u);
LABEL_59:
    v26 = MEMORY[0x1E0DEE9E8];
LABEL_60:
    v25 = v88;
  }
  v81 = (void *)v28;
  v35 = v16;
  v36 = 0;
  v37 = v88;
  v82 = v88 & 0xC000000000000001;
  while (1)
  {
    v38 = v82 ? (_QWORD *)MEMORY[0x1DF0E4D64](v36, v37) : *(id *)(v37 + 8 * (_QWORD)v36 + 32);
    v39 = v38;
    v40 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v41 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v38) + 0x88))();
    v42 = (*(uint64_t (**)(uint64_t))((*v40 & *v39) + 0x90))(v41);
    v44 = v43;
    if (v42 == NSNotFound.getter())
      break;
    if (__OFADD__(v42, v44))
      goto LABEL_51;
    v45 = v85;
    CRAttributedString.subscript.getter();
    (*(void (**)(char *, uint64_t))(v84 + 8))(v7, v45);
    v46 = v87;
    CRAttributedString.Substring.runs.getter();
    (*(void (**)(char *, uint64_t))(v86 + 8))(v3, v46);

    v34 = v91;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v34 + 16) + 1, 1);
      v34 = v91;
    }
    v48 = *(_QWORD *)(v34 + 16);
    v47 = *(_QWORD *)(v34 + 24);
    if (v48 >= v47 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1);
      v34 = v91;
    }
    v36 = (char *)v36 + 1;
    *(_QWORD *)(v34 + 16) = v48 + 1;
    (*((void (**)(unint64_t, char *, uint64_t))v35 + 4))(v34 + ((v35[80] + 32) & ~(unint64_t)v35[80]) + *((_QWORD *)v35 + 9) * v48, v19, v89);
    v37 = v88;
    if (v81 == v36)
    {
      swift_bridgeObjectRelease();
      v16 = v35;
      goto LABEL_31;
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:

}

unint64_t CanvasElementController.setSelectionTextAlignment(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;

  v2 = v1;
  v4 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle) = 1;
  result = CanvasElementController.textBoxes.getter();
  if (!result)
    goto LABEL_12;
  v6 = result;
  if (!(result >> 62))
  {
    v7 = *(_QWORD *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v7)
      goto LABEL_4;
LABEL_11:
    result = swift_bridgeObjectRelease_n();
LABEL_12:
    *(_BYTE *)(v2 + v4) = 0;
    return result;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v7 = result;
  if (!result)
    goto LABEL_11;
LABEL_4:
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    do
    {
      if ((v6 & 0xC000000000000001) != 0)
        v10 = (_QWORD *)MEMORY[0x1DF0E4D64](v8, v6);
      else
        v10 = *(id *)(v6 + 8 * v8 + 32);
      v11 = v10;
      ++v8;
      (*(void (**)(uint64_t))((*v9 & *v10) + 0x178))(a1);

    }
    while (v7 != v8);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall CanvasElementController.setSelectionBold(_:)(Swift::Bool a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _BOOL8 v10;
  _QWORD *v11;
  void *v12;

  v2 = v1;
  v4 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle) = 1;
  v5 = CanvasElementController.textBoxes.getter();
  if (!v5)
    goto LABEL_12;
  v6 = v5;
  if (!(v5 >> 62))
  {
    v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
      goto LABEL_4;
LABEL_11:
    swift_bridgeObjectRelease_n();
LABEL_12:
    *(_BYTE *)(v2 + v4) = 0;
    return;
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  if (!v7)
    goto LABEL_11;
LABEL_4:
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v10 = a1;
    do
    {
      if ((v6 & 0xC000000000000001) != 0)
        v11 = (_QWORD *)MEMORY[0x1DF0E4D64](v8, v6);
      else
        v11 = *(id *)(v6 + 8 * v8 + 32);
      v12 = v11;
      ++v8;
      (*(void (**)(_BOOL8))((*v9 & *v11) + 0x180))(v10);

    }
    while (v7 != v8);
    goto LABEL_11;
  }
  __break(1u);
}

Swift::Void __swiftcall CanvasElementController.setSelectionItalic(_:)(Swift::Bool a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _BOOL8 v10;
  _QWORD *v11;
  void *v12;

  v2 = v1;
  v4 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle) = 1;
  v5 = CanvasElementController.textBoxes.getter();
  if (!v5)
    goto LABEL_12;
  v6 = v5;
  if (!(v5 >> 62))
  {
    v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
      goto LABEL_4;
LABEL_11:
    swift_bridgeObjectRelease_n();
LABEL_12:
    *(_BYTE *)(v2 + v4) = 0;
    return;
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  if (!v7)
    goto LABEL_11;
LABEL_4:
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v10 = a1;
    do
    {
      if ((v6 & 0xC000000000000001) != 0)
        v11 = (_QWORD *)MEMORY[0x1DF0E4D64](v8, v6);
      else
        v11 = *(id *)(v6 + 8 * v8 + 32);
      v12 = v11;
      ++v8;
      (*(void (**)(_BOOL8))((*v9 & *v11) + 0x188))(v10);

    }
    while (v7 != v8);
    goto LABEL_11;
  }
  __break(1u);
}

Swift::Void __swiftcall CanvasElementController.setSelectionUnderline(_:)(Swift::Bool a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _BOOL8 v10;
  _QWORD *v11;
  void *v12;

  v2 = v1;
  v4 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle) = 1;
  v5 = CanvasElementController.textBoxes.getter();
  if (!v5)
    goto LABEL_12;
  v6 = v5;
  if (!(v5 >> 62))
  {
    v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
      goto LABEL_4;
LABEL_11:
    swift_bridgeObjectRelease_n();
LABEL_12:
    *(_BYTE *)(v2 + v4) = 0;
    return;
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  if (!v7)
    goto LABEL_11;
LABEL_4:
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v10 = a1;
    do
    {
      if ((v6 & 0xC000000000000001) != 0)
        v11 = (_QWORD *)MEMORY[0x1DF0E4D64](v8, v6);
      else
        v11 = *(id *)(v6 + 8 * v8 + 32);
      v12 = v11;
      ++v8;
      (*(void (**)(_BOOL8))((*v9 & *v11) + 0x190))(v10);

    }
    while (v7 != v8);
    goto LABEL_11;
  }
  __break(1u);
}

Swift::Void __swiftcall CanvasElementController.setSelectionStrikethrough(_:)(Swift::Bool a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _BOOL8 v10;
  _QWORD *v11;
  void *v12;

  v2 = v1;
  v4 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle) = 1;
  v5 = CanvasElementController.textBoxes.getter();
  if (!v5)
    goto LABEL_12;
  v6 = v5;
  if (!(v5 >> 62))
  {
    v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
      goto LABEL_4;
LABEL_11:
    swift_bridgeObjectRelease_n();
LABEL_12:
    *(_BYTE *)(v2 + v4) = 0;
    return;
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  if (!v7)
    goto LABEL_11;
LABEL_4:
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v10 = a1;
    do
    {
      if ((v6 & 0xC000000000000001) != 0)
        v11 = (_QWORD *)MEMORY[0x1DF0E4D64](v8, v6);
      else
        v11 = *(id *)(v6 + 8 * v8 + 32);
      v12 = v11;
      ++v8;
      (*(void (**)(_BOOL8))((*v9 & *v11) + 0x198))(v10);

    }
    while (v7 != v8);
    goto LABEL_11;
  }
  __break(1u);
}

Swift::Void __swiftcall CanvasElementController.setSelectionFontSize(_:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;

  v2 = v1;
  v4 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle) = 1;
  v5 = CanvasElementController.textBoxes.getter();
  if (!v5)
    goto LABEL_12;
  v6 = v5;
  if (!(v5 >> 62))
  {
    v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
      goto LABEL_4;
LABEL_11:
    swift_bridgeObjectRelease_n();
LABEL_12:
    *(_BYTE *)(v2 + v4) = 0;
    return;
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  if (!v7)
    goto LABEL_11;
LABEL_4:
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    do
    {
      if ((v6 & 0xC000000000000001) != 0)
        v10 = (_QWORD *)MEMORY[0x1DF0E4D64](v8, v6);
      else
        v10 = *(id *)(v6 + 8 * v8 + 32);
      v11 = v10;
      ++v8;
      (*(void (**)(Swift::Int))((*v9 & *v10) + 0x168))(a1);

    }
    while (v7 != v8);
    goto LABEL_11;
  }
  __break(1u);
}

Swift::Void __swiftcall CanvasElementController.setSelectionFontName(_:)(Swift::String a1)
{
  uint64_t v1;
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;

  v2 = v1;
  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v5 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle) = 1;
  v6 = CanvasElementController.textBoxes.getter();
  if (!v6)
    goto LABEL_12;
  v7 = v6;
  if (!(v6 >> 62))
  {
    v8 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_4;
LABEL_11:
    swift_bridgeObjectRelease_n();
LABEL_12:
    *(_BYTE *)(v2 + v5) = 0;
    return;
  }
  swift_bridgeObjectRetain();
  v8 = _CocoaArrayWrapper.endIndex.getter();
  if (!v8)
    goto LABEL_11;
LABEL_4:
  if (v8 >= 1)
  {
    v9 = 0;
    v10 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    do
    {
      if ((v7 & 0xC000000000000001) != 0)
        v11 = (_QWORD *)MEMORY[0x1DF0E4D64](v9, v7);
      else
        v11 = *(id *)(v7 + 8 * v9 + 32);
      v12 = v11;
      ++v9;
      (*(void (**)(uint64_t, void *))((*v10 & *v11) + 0x170))(countAndFlagsBits, object);

    }
    while (v8 != v9);
    goto LABEL_11;
  }
  __break(1u);
}

Swift::Void __swiftcall CanvasElementController.setTextSelectionColor(_:)(UIColor a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;

  v2 = v1;
  v4 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle) = 1;
  v5 = CanvasElementController.textBoxes.getter();
  if (!v5)
    goto LABEL_12;
  v6 = v5;
  if (!(v5 >> 62))
  {
    v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
      goto LABEL_4;
LABEL_11:
    swift_bridgeObjectRelease_n();
LABEL_12:
    *(_BYTE *)(v2 + v4) = 0;
    return;
  }
  swift_bridgeObjectRetain();
  v7 = _CocoaArrayWrapper.endIndex.getter();
  if (!v7)
    goto LABEL_11;
LABEL_4:
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    do
    {
      if ((v6 & 0xC000000000000001) != 0)
        v10 = (_QWORD *)MEMORY[0x1DF0E4D64](v8, v6);
      else
        v10 = *(id *)(v6 + 8 * v8 + 32);
      v11 = v10;
      ++v8;
      (*(void (**)(Class))((*v9 & *v10) + 0x160))(a1.super.isa);

    }
    while (v7 != v8);
    goto LABEL_11;
  }
  __break(1u);
}

void CanvasElementController.delegate.didset()
{
  char *v0;
  uint64_t v1;
  char *v2;
  char *v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  char v8;
  id v9;
  char *v10;
  char v11;
  char *v12;
  char *v13;
  char v14;
  char v15;
  char *v16;
  void *v17;
  char v18[24];
  ValueMetadata *v19;
  unint64_t v20;

  v1 = MEMORY[0x1DF0E666C](&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate]);
  swift_unknownObjectRelease();
  if (v1)
  {
    v2 = (char *)objc_allocWithZone((Class)type metadata accessor for ToolPickerController());
    v3 = v0;
    v4 = specialized ToolPickerController.init(delegate:)(v3, v2);
    v5 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController;
    v6 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController];
    *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController] = v4;

    v7 = *(void **)&v3[v5];
    if (v7)
    {
      v8 = v3[OBJC_IVAR____TtC8PaperKit23CanvasElementController_canEditDescription];
      v9 = v7;
      v10 = ToolPickerController.textToolListViewController.getter();
      v10[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_descriptionItemVisible] = v8;
      TextToolListViewController.updateUI()();

      v11 = v3[OBJC_IVAR____TtC8PaperKit23CanvasElementController_canEditVellumOpacity];
      v12 = ToolPickerController.textToolListViewController.getter();
      v12[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_opacityItemVisible] = v11;
      TextToolListViewController.updateUI()();

      v13 = ToolPickerController.textToolListViewController.getter();
      v14 = v13[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_addStickerListItemVisible];
      v13[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_addStickerListItemVisible] = 1;
      TextToolListViewController.addStickerListItemVisible.didset(v14);

      v19 = &type metadata for PencilAndPaperFeatureFlags;
      v20 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
      v18[0] = 5;
      v15 = isFeatureEnabled(_:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
      v16 = ToolPickerController.textToolListViewController.getter();
      v16[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_graphItemVisible] = v15 & 1;
      TextToolListViewController.updateUI()();

    }
  }
  else
  {
    v17 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController];
    *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController] = 0;

  }
}

id CanvasElementController.elementControllerToolPicker.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
  {
    v2 = *(_QWORD *)(v1 + 8);
    ObjectType = swift_getObjectType();
    v4 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(ObjectType, v2);
    swift_unknownObjectRelease();
    if (v4)
    {
      if ((objc_msgSend(v4, sel__isEnabled) & 1) != 0)
        return v4;

    }
  }
  if (!MEMORY[0x1DF0E666C](v1))
    return 0;
  v5 = *(_QWORD *)(v1 + 8);
  v6 = swift_getObjectType();
  v4 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v6, v5);
  swift_unknownObjectRelease();
  if (v4)
  {
    v7 = objc_msgSend(v4, sel_window);

    if (v7)
    {
      v4 = objc_msgSend((id)objc_opt_self(), sel_activeToolPickerForWindow_, v7);

      return v4;
    }
    return 0;
  }
  return v4;
}

Swift::Void __swiftcall CanvasElementController.updateToolPickerContextualEditingView()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  char v17;
  id v18;

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
  {
    v3 = *(_QWORD *)(v2 + 8);
    ObjectType = swift_getObjectType();
    v18 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
    swift_unknownObjectRelease();
    if (v18)
    {
      v5 = CanvasElementController.elementControllerToolPicker.getter();
      if (!v5)
      {
LABEL_19:

        return;
      }
      v6 = v5;
      v7 = objc_msgSend(v5, sel__contextualEditingView);
      if (!v7)
      {
        v12 = v6;
LABEL_18:

        goto LABEL_19;
      }
      v8 = v7;
      if (objc_msgSend(v6, sel_isVisible) && MEMORY[0x1DF0E666C](v2))
      {
        v9 = *(_QWORD *)(v2 + 8);
        v10 = swift_getObjectType();
        v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
        v12 = v6;
        v13 = (void *)v11(v10, v9);
        swift_unknownObjectRelease();
        if (!v13
          || (v14 = objc_msgSend(v13, sel_window), v13, !v14)
          || (v15 = objc_msgSend((id)objc_opt_self(), sel_activeToolPickerForWindow_, v14),
              v14,
              !v15))
        {

          goto LABEL_17;
        }
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PKToolPicker);
        v16 = v12;
        v17 = static NSObject.== infix(_:_:)();

        if ((v17 & 1) != 0
          && (*(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle) & 1) == 0)
        {
          CanvasElementController.configureToolPicker(_:)((PKToolPicker)v16);
        }
      }
      v12 = v8;
LABEL_17:

      goto LABEL_18;
    }
  }
}

Swift::Void __swiftcall CanvasElementController.configureToolPicker(_:)(PKToolPicker a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t (*v8)(uint64_t, uint64_t);
  void *v9;
  BOOL IsNull;
  unsigned int v11;
  uint64_t v12;
  char v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void *v17;
  id v18;
  char *v19;
  unsigned int v20;
  int v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  _QWORD aBlock[6];
  CGRect v31;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController);
  if (!v2)
    return;
  v3 = v1;
  v5 = v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (!MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
    return;
  v6 = *(_QWORD *)(v5 + 8);
  ObjectType = swift_getObjectType();
  v8 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
  v29 = v2;
  v9 = (void *)v8(ObjectType, v6);
  swift_unknownObjectRelease();
  if (!v9)
  {

    return;
  }
  -[objc_class frameObscuredInView:](a1.super.isa, sel_frameObscuredInView_, v9);
  IsNull = CGRectIsNull(v31);
  v11 = -[objc_class _wantsUndoRedoButtonsVisibleInCompactSize](a1.super.isa, sel__wantsUndoRedoButtonsVisibleInCompactSize);
  v12 = v11 ^ 1;
  if (IsNull)
  {
    -[objc_class _setWantsEllipsisButtonVisibleInCompactSize:](a1.super.isa, sel__setWantsEllipsisButtonVisibleInCompactSize_, v12);
    -[objc_class _setShowsPlusButton:](a1.super.isa, sel__setShowsPlusButton_, 1);
LABEL_9:
    v14 = ToolPickerController.textToolListViewController.getter();
    goto LABEL_10;
  }
  v13 = v11;
  -[objc_class _setWantsEllipsisButtonVisibleInCompactSize:](a1.super.isa, sel__setWantsEllipsisButtonVisibleInCompactSize_, -[objc_class _wantsUndoRedoButtonsVisibleInCompactSize](a1.super.isa, sel__wantsUndoRedoButtonsVisibleInCompactSize) ^ 1);
  -[objc_class _setShowsPlusButton:](a1.super.isa, sel__setShowsPlusButton_, v12);
  if ((v13 & 1) == 0)
    goto LABEL_9;
  v14 = 0;
LABEL_10:
  -[objc_class _setPlusButtonViewController:](a1.super.isa, sel__setPlusButtonViewController_, v14);

  v15 = ToolPickerController.shapeButtonListViewController.getter();
  -[objc_class _setShapeButtonViewController:](a1.super.isa, sel__setShapeButtonViewController_, v15);

  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v29;
  aBlock[4] = partial apply for closure #1 in CanvasElementController.configureToolPicker(_:);
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewController) -> (@owned UIViewController);
  aBlock[3] = &block_descriptor_59_0;
  v17 = _Block_copy(aBlock);
  v18 = v29;
  swift_release();
  -[objc_class _setSignaturesViewControllerProvider:](a1.super.isa, sel__setSignaturesViewControllerProvider_, v17);
  _Block_release(v17);
  v19 = ToolPickerController.textToolListViewController.getter();
  v20 = -[objc_class _showsShapeButton](a1.super.isa, sel__showsShapeButton);
  v21 = v19[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_addShapeListItemVisible];
  v19[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_addShapeListItemVisible] = v20 ^ 1;
  if (v20 == v21)
    TextToolListViewController.updateUI()();

  v22 = -[objc_class _selectionContext](a1.super.isa, sel__selectionContext);
  objc_msgSend(v22, sel_setSelectionMask_, (unint64_t)objc_msgSend(v22, sel_selectionMask) & 0xFFFFFFFFFFFFFFFBLL);
  swift_unknownObjectRelease();
  objc_msgSend(-[objc_class _selectionContext](a1.super.isa, sel__selectionContext), sel_setPrefersLargeContextualEditingUI_, 0);
  swift_unknownObjectRelease();
  v23 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_editingContainerView;
  v24 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_editingContainerView);
  if (v24)
  {
    objc_msgSend(v24, sel_removeFromSuperview);
    v25 = *(void **)(v3 + v23);
  }
  else
  {
    v25 = 0;
  }
  *(_QWORD *)(v3 + v23) = 0;

  v26 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_textStyleController);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_textStyleController) = 0;

  v27 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_shapeStyleController);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_shapeStyleController) = 0;

  v28 = *(void **)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_signatureStyleController);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_signatureStyleController) = 0;

  -[objc_class set_temporarySelectionDelegate:](a1.super.isa, sel_set_temporarySelectionDelegate_, 0);
}

char *closure #1 in CanvasElementController.configureToolPicker(_:)(void *a1)
{
  uint64_t v2;
  char *v3;

  if (one-time initialization token for shared != -1)
    swift_once();
  v2 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  v3 = specialized SignatureManager.signatureViewController(_:_:_:_:)(a1, 0, (uint64_t)partial apply for closure #1 in ToolPickerController.makeSignaturesViewController(rootViewController:), v2, 0.0, 0.0, 0.0, 0.0);
  swift_release_n();
  return v3;
}

id thunk for @escaping @callee_guaranteed (@guaranteed UIViewController) -> (@owned UIViewController)(uint64_t a1, void *a2)
{
  uint64_t (*v3)(void);
  id v4;
  void *v5;

  v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v5 = (void *)v3();
  swift_release();

  return v5;
}

void CanvasElementController.addCanvasElement(from:completionHandler:)(void *a1, uint64_t (*a2)(_QWORD), uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  double v18;
  double v19;
  void *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  __int128 *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(_QWORD);
  id v44;

  v4 = v3;
  v44 = a1;
  ObjectType = swift_getObjectType();
  v8 = type metadata accessor for UTType();
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = &v3[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate];
  if (MEMORY[0x1DF0E666C](&v3[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate], v11))
  {
    v15 = *((_QWORD *)v14 + 1);
    v16 = swift_getObjectType();
    v17 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v16, v15);
    swift_unknownObjectRelease();
    if (v17)
    {
      v42 = ObjectType;
      v43 = a2;
      AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);
      if (one-time initialization token for canvasElementDefaultSize != -1)
        swift_once();
      v18 = *(double *)&static UIConstants.canvasElementDefaultSize;
      v19 = unk_1F042ED20;
      v20 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000011, 0x80000001DDF50250);
      v21 = objc_msgSend(v44, sel_hasItemConformingToTypeIdentifier_, v20);

      if (v21)
      {
        static UTType.plainText.getter();
        v22 = UTType.identifier.getter();
        v24 = v23;
        (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
        v25 = (void *)MEMORY[0x1DF0E41AC](v22, v24);
        swift_bridgeObjectRelease();
        LODWORD(v24) = objc_msgSend(v44, sel_hasItemConformingToTypeIdentifier_, v25);

        if ((_DWORD)v24)
        {
          if (one-time initialization token for emojiTapToInsertSize != -1)
            swift_once();
          v26 = &static UIConstants.emojiTapToInsertSize;
        }
        else
        {
          if (one-time initialization token for stickerTapToInsertSize != -1)
            swift_once();
          v26 = &static UIConstants.stickerTapToInsertSize;
        }
        v18 = *(double *)v26;
        v19 = *((double *)v26 + 1);
      }
      v27 = MEMORY[0x1DF0E666C](v14);
      v28 = 0.0;
      v29 = v42;
      if (v27)
      {
        v30 = *((_QWORD *)v14 + 1);
        v31 = swift_getObjectType();
        v32 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v30 + 16))(v31, v30);
        v33 = swift_unknownObjectRelease();
        v34 = 0.0;
        v35 = 0.0;
        if (v32)
        {
          v28 = (*(double (**)(uint64_t, double, double))((*MEMORY[0x1E0DEEDD8] & *v32) + 0x6B8))(v33, v18, v19);
          v34 = v36;
          v35 = v37;

        }
      }
      else
      {
        v34 = 0.0;
        v35 = 0.0;
      }
      v38 = swift_allocObject();
      *(_BYTE *)(v38 + 16) = 0;
      swift_retain_n();
      v39 = v44;
      swift_retain_n();
      v40 = v39;
      specialized CanvasElementController.visibleCanvasInsertIfNeeded(completion:)(v4, v38, v40, v43, a3, v29, v28, v34, v18, v19, v35);
      swift_release();

      swift_release_n();
    }
  }
}

double CanvasElementController.suggestedPositionForNewCanvasElement(withSize:)(double a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t ObjectType;
  _QWORD *v9;
  uint64_t v10;

  v5 = v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  v6 = 0.0;
  if (MEMORY[0x1DF0E666C](v5))
  {
    v7 = *(_QWORD *)(v5 + 8);
    ObjectType = swift_getObjectType();
    v9 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(ObjectType, v7);
    v10 = swift_unknownObjectRelease();
    if (v9)
    {
      v6 = (*(double (**)(uint64_t, double, double))((*MEMORY[0x1E0DEEDD8] & *v9) + 0x6B8))(v10, a1, a2);

    }
  }
  return v6;
}

uint64_t specialized CanvasElementController.visibleCanvasInsertIfNeeded(completion:)(char *a1, uint64_t a2, void *a3, uint64_t (*a4)(_QWORD), uint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10, double a11)
{
  specialized CanvasElementController.visibleCanvasInsertIfNeeded(completion:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  swift_release();

  return swift_release();
}

void CanvasElementController.visibleCanvasInsertIfNeeded(completion:)(uint64_t (*a1)(void *), uint64_t a2)
{
  char *v2;
  void *v3;
  char *v6;
  uint64_t v7;
  uint64_t ObjectType;
  void *v9;
  id v10;
  void *v11;
  double x;
  double y;
  double width;
  double Height;
  _QWORD *v16;
  char v17;
  char v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  void *v31;
  CGFloat *v32;
  uint64_t v33;
  void *v34;
  id v35;
  CGFloat *v36;
  void *v37;
  _QWORD *v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  _QWORD *v44;
  uint64_t aBlock;
  uint64_t v46;
  void *v47;
  void *v48;
  uint64_t (*v49)();
  CGFloat *v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;

  v3 = v2;
  v6 = &v2[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate];
  if (MEMORY[0x1DF0E666C](&v2[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate]))
  {
    v7 = *((_QWORD *)v6 + 1);
    ObjectType = swift_getObjectType();
    v44 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(ObjectType, v7);
    swift_unknownObjectRelease();
    if (v44)
    {
      v9 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v44) + 0x320))();
      if (v9)
      {
        v43 = v9;
        v10 = objc_msgSend(v9, sel_scrollView);
        if (v10)
        {
          v11 = v10;
          objc_msgSend(v44, sel_bounds);
          x = v51.origin.x;
          y = v51.origin.y;
          width = v51.size.width;
          Height = CGRectGetHeight(v51);
          if (one-time initialization token for defaultTextAttachmentHeight != -1)
            swift_once();
          if (Height <= *(double *)&static UIConstants.defaultTextAttachmentHeight)
            Height = *(double *)&static UIConstants.defaultTextAttachmentHeight;
          type metadata accessor for PaperTextAttachmentView();
          if (swift_dynamicCastClass())
          {
            v16 = v44;
            PaperTextAttachmentView.isAtEndOfDocument.getter();
            v18 = v17;

            if ((v18 & 1) != 0)
            {
              objc_msgSend(v43, sel_bounds);
              Height = Height + CGRectGetHeight(v52);
            }
          }
          objc_msgSend(v44, sel_convertRect_toCoordinateSpace_, v43, x, y, width, Height);
          v20 = v19;
          v22 = v21;
          v24 = v23;
          v26 = v25;
          objc_msgSend(v43, sel_bounds);
          v55.origin.x = v27;
          v55.origin.y = v28;
          v55.size.width = v29;
          v55.size.height = v30;
          v53.origin.x = v20;
          v53.origin.y = v22;
          v53.size.width = v24;
          v53.size.height = v26;
          v54 = CGRectIntersection(v53, v55);
          if (CGRectGetHeight(v54) < *(double *)&static UIConstants.defaultTextAttachmentHeight)
          {
            v31 = (void *)objc_opt_self();
            v32 = (CGFloat *)swift_allocObject();
            *((_QWORD *)v32 + 2) = v11;
            v32[3] = v20;
            v32[4] = v22;
            v32[5] = v24;
            v32[6] = v26;
            v49 = partial apply for closure #1 in CanvasElementController.visibleCanvasInsertIfNeeded(completion:);
            v50 = v32;
            v33 = MEMORY[0x1E0C809B0];
            aBlock = MEMORY[0x1E0C809B0];
            v46 = 1107296256;
            v47 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
            v48 = &block_descriptor_26_1;
            v34 = _Block_copy(&aBlock);
            v35 = v11;
            swift_release();
            v36 = (CGFloat *)swift_allocObject();
            *((_QWORD *)v36 + 2) = v44;
            *((_QWORD *)v36 + 3) = v35;
            *((_QWORD *)v36 + 4) = v43;
            *((_QWORD *)v36 + 5) = a1;
            *((_QWORD *)v36 + 6) = a2;
            *((_QWORD *)v36 + 7) = v3;
            v49 = partial apply for closure #2 in CanvasElementController.visibleCanvasInsertIfNeeded(completion:);
            v50 = v36;
            aBlock = v33;
            v46 = 1107296256;
            v47 = thunk for @escaping @callee_guaranteed (@unowned PDFRequirePasswordsResult) -> ();
            v48 = &block_descriptor_33_0;
            v37 = _Block_copy(&aBlock);
            v38 = v44;
            v39 = v35;
            v40 = v43;
            swift_retain();
            v41 = v3;
            swift_release();
            objc_msgSend(v31, sel_animateWithDuration_animations_completion_, v34, v37, 0.3);

            _Block_release(v37);
            _Block_release(v34);
            return;
          }
          getCanvas #1 () in CanvasElementController.visibleCanvasInsertIfNeeded(completion:)(v44, (uint64_t)v11, v43, a1, a2, v3);

        }
        else
        {

        }
        v42 = v43;
      }
      else
      {
        v42 = v44;
      }

    }
  }
}

void CanvasElementController.addCanvasElement<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t ObjectType;

  v22 = a4;
  ObjectType = swift_getObjectType();
  v8 = type metadata accessor for Capsule();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v12 = MEMORY[0x1E0C80A78](v8, v11);
  v14 = (char *)&v22 - v13;
  v15 = v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x1DF0E666C](v4 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate, v12))
  {
    v16 = *(_QWORD *)(v15 + 8);
    v17 = swift_getObjectType();
    v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v16 + 16))(v17, v16);
    swift_unknownObjectRelease();
    if (v18)
    {
      AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, a1, v8);
      v19 = (*(unsigned __int8 *)(v9 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      v20 = (v10 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
      v21 = (char *)swift_allocObject();
      *((_QWORD *)v21 + 2) = a2;
      *((_QWORD *)v21 + 3) = a3;
      *((_QWORD *)v21 + 4) = v22;
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v21[v19], v14, v8);
      *(_QWORD *)&v21[v20] = ObjectType;
      CanvasElementController.visibleCanvasInsertIfNeeded(completion:)((uint64_t (*)(void *))partial apply for closure #1 in CanvasElementController.addCanvasElement<A>(_:), (uint64_t)v21);
      swift_release();

    }
  }
}

void closure #1 in CanvasElementController.addCanvasElement<A>(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v10;

  if (a1)
  {
    v10 = a1;
    specialized static CanvasElementController.makeCanvasFirstResponder(_:)(v10);
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v10)
                                                                                        + 0x480))(a2, 1, 0, 0, a4, a5, a6);

  }
}

unint64_t CanvasElementController.recentlyAddedCanvasElement.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t result;
  _QWORD *v12;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (!MEMORY[0x1DF0E666C](v1))
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  v4 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(ObjectType, v2);
  v5 = swift_unknownObjectRelease();
  if (!v4)
    return (unint64_t)v4;
  v6 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x2F8))(v5);
  v8 = v7;

  v9 = swift_getObjectType();
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 56))(v9, v8);

  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = (_QWORD *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4)
      goto LABEL_11;
  }
  else
  {
    v4 = *(_QWORD **)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
    {
LABEL_11:
      swift_bridgeObjectRelease();
      return (unint64_t)v4;
    }
  }
  result = (unint64_t)v4 - 1;
  if (__OFSUB__(v4, 1))
  {
    __break(1u);
    goto LABEL_17;
  }
  if ((v10 & 0xC000000000000001) != 0)
  {
LABEL_17:
    v12 = (_QWORD *)MEMORY[0x1DF0E4D64](result, v10);
    goto LABEL_10;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v12 = *(id *)(v10 + 8 * result + 32);
LABEL_10:
    v4 = v12;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

CGSize __swiftcall CanvasElementController.adjustedSizeForNewCanvasElement(withSize:)(CGSize withSize)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float64x2_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  void *v7;
  id v8;
  void *v9;
  id v10;
  double v11;
  float64x2_t v12;
  float64x2_t v13;
  double v14;
  CGSize result;
  double v16;
  CGFloat height;
  double v18;
  CGFloat width;
  float64x2_t v20;

  height = withSize.height;
  width = withSize.width;
  v2 = v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  v3 = MEMORY[0x1DF0E666C](v2);
  v4.f64[0] = width;
  v4.f64[1] = height;
  if (v3)
  {
    v20 = v4;
    v5 = *(_QWORD *)(v2 + 8);
    ObjectType = swift_getObjectType();
    v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(ObjectType, v5);
    swift_unknownObjectRelease();
    if (v7)
    {
      v8 = objc_msgSend(v7, sel_window);
      if (v8)
      {
        v9 = v8;
        v10 = objc_msgSend(v8, sel_screen);

        objc_msgSend(v10, sel_scale);
        v18 = v11;

      }
      else
      {
        v18 = 1.0;
      }
      v16 = AnyCanvas.scaleFactorForNewElements.getter();

      v12 = vmulq_n_f64(vmulq_n_f64(v20, v16), v18);
      v13 = vrndmq_f64(v12);
      v4 = vdivq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(vsubq_f64(v12, v13), (float64x2_t)vdupq_n_s64(0x3FDF5C28F5C28F5CuLL)), (int8x16_t)vrndpq_f64(v12), (int8x16_t)v13), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v18, 0));
    }
    else
    {
      v4 = v20;
    }
  }
  v14 = v4.f64[1];
  result.width = v4.f64[0];
  result.height = v14;
  return result;
}

uint64_t specialized getCanvas #1 () in CanvasElementController.visibleCanvasInsertIfNeeded(completion:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, uint64_t (*a7)(_QWORD), uint64_t a8, double a9, double a10, double a11, double a12, double a13, uint64_t a14)
{
  specialized getCanvas #1 () in CanvasElementController.visibleCanvasInsertIfNeeded(completion:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  swift_release();

  return swift_release();
}

{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t (*v42)(uint64_t);
  id v43;
  uint64_t v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  unint64_t v49;
  id v50;
  void *v51;
  char v52;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MidX;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  _QWORD *v64;
  void *v65;
  void *v66;
  id v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t (*v71)(_QWORD);
  id v72;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  id v94;
  uint64_t (*v95)(_QWORD);
  _QWORD aBlock[7];
  CGRect v97;
  CGRect v98;

  v86 = a4;
  v93 = a2;
  v94 = a3;
  v24 = type metadata accessor for DispatchWorkItemFlags();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v26);
  v92 = (char *)&v79 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for DispatchQoS();
  v90 = *(_QWORD *)(v28 - 8);
  v91 = v28;
  MEMORY[0x1E0C80A78](v28, v29);
  v89 = (char *)&v79 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for DispatchTimeInterval();
  v84 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85, v31);
  v83 = (uint64_t *)((char *)&v79 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  v88 = type metadata accessor for DispatchTime();
  v82 = *(_QWORD *)(v88 - 8);
  MEMORY[0x1E0C80A78](v88, v33);
  v35 = (char *)&v79 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v36, v37);
  v87 = (char *)&v79 - v38;
  v39 = swift_allocObject();
  *(_QWORD *)(v39 + 16) = a5;
  *(_QWORD *)(v39 + 24) = a6;
  *(double *)(v39 + 32) = a9;
  *(double *)(v39 + 40) = a10;
  *(double *)(v39 + 48) = a11;
  *(double *)(v39 + 56) = a12;
  *(double *)(v39 + 64) = a13;
  v95 = a7;
  *(_QWORD *)(v39 + 72) = a7;
  *(_QWORD *)(v39 + 80) = a8;
  *(_QWORD *)(v39 + 88) = a14;
  type metadata accessor for PaperTextAttachmentView();
  v40 = (_QWORD *)swift_dynamicCastClass();
  if (!v40)
  {
    swift_retain();
    v72 = a6;
    swift_retain();
    goto LABEL_13;
  }
  v41 = v40;
  v80 = v25;
  v81 = v24;
  v42 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v40) + 0x320);
  swift_retain();
  v43 = a6;
  v44 = swift_retain();
  v45 = (void *)v42(v44);
  if (!v45)
    goto LABEL_13;
  v46 = v45;
  v47 = objc_msgSend(v45, sel_standInAttachmentView);

  if (!v47)
    goto LABEL_13;
  v48 = *(id *)((char *)v41 + direct field offset for Canvas.paperView);
  v49 = specialized ContainerCanvasElementView.pencilKitAttachmentViews()();

  if (!(v49 >> 62))
  {
    if (*(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_6;
LABEL_20:
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    __break(1u);
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  v78 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v78)
    goto LABEL_20;
LABEL_6:
  if ((v49 & 0xC000000000000001) != 0)
  {
LABEL_21:
    v50 = (id)MEMORY[0x1DF0E4D64](0, v49);
    goto LABEL_9;
  }
  if (!*(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_23;
  }
  v50 = *(id *)(v49 + 32);
LABEL_9:
  v51 = v50;
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v52 = static NSObject.== infix(_:_:)();

  if ((v52 & 1) == 0)
  {
LABEL_13:
    specialized closure #1 in CanvasElementController.addCanvasElement(from:completionHandler:)(a1, a5, (uint64_t)a6, v95, a9, a10, a11, a12, a13);
    return swift_release();
  }
  objc_msgSend(a1, sel_bounds);
  objc_msgSend(a1, sel_convertRect_toCoordinateSpace_, v93);
  x = v97.origin.x;
  y = v97.origin.y;
  width = v97.size.width;
  height = v97.size.height;
  MidX = CGRectGetMidX(v97);
  v98.origin.x = x;
  v98.origin.y = y;
  v98.size.width = width;
  v98.size.height = height;
  if (!objc_msgSend(v94, sel_insertAttachmentIfInBlankSpace_, MidX, CGRectGetMidY(v98)))
  {
    if (one-time initialization token for logger == -1)
    {
LABEL_15:
      v74 = type metadata accessor for Logger();
      __swift_project_value_buffer(v74, (uint64_t)logger);
      v75 = Logger.logObject.getter();
      v76 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v75, v76))
      {
        v77 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v77 = 0;
        _os_log_impl(&dword_1DDB0F000, v75, v76, "Failed to insert a new attachment", v77, 2u);
        MEMORY[0x1DF0E6558](v77, -1, -1);
      }

      swift_beginAccess();
      v95(*(unsigned __int8 *)(a5 + 16));
      return swift_release();
    }
LABEL_23:
    swift_once();
    goto LABEL_15;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v95 = (uint64_t (*)(_QWORD))static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  v58 = v83;
  *v83 = 100;
  v59 = v84;
  v60 = v85;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v84 + 104))(v58, *MEMORY[0x1E0DEF490], v85);
  v61 = v87;
  MEMORY[0x1DF0E2694](v35, v58);
  (*(void (**)(_QWORD *, uint64_t))(v59 + 8))(v58, v60);
  v62 = *(void (**)(char *, uint64_t))(v82 + 8);
  v63 = v88;
  v62(v35, v88);
  v64 = (_QWORD *)swift_allocObject();
  v65 = v86;
  v64[2] = v86;
  v64[3] = partial apply for closure #1 in CanvasElementController.addCanvasElement(from:completionHandler:);
  v64[4] = v39;
  aBlock[4] = closure #1 in getCanvas #1 () in CanvasElementController.visibleCanvasInsertIfNeeded(completion:)partial apply;
  aBlock[5] = v64;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_44_0;
  v66 = _Block_copy(aBlock);
  v67 = v65;
  swift_retain();
  swift_release();
  v68 = v89;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  v69 = v92;
  v70 = v81;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v71 = v95;
  MEMORY[0x1DF0E4884](v61, v68, v69, v66);
  _Block_release(v66);

  (*(void (**)(char *, uint64_t))(v80 + 8))(v69, v70);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v68, v91);
  v62(v61, v63);
  return swift_release();
}

uint64_t getCanvas #1 () in CanvasElementController.visibleCanvasInsertIfNeeded(completion:)(void *a1, uint64_t a2, void *a3, uint64_t (*a4)(void *), uint64_t a5, void *a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  unint64_t v32;
  id v33;
  void *v34;
  char v35;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MidX;
  void *v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t (*v46)(void *);
  uint64_t v47;
  void *v48;
  id v49;
  char *v50;
  char *v51;
  uint64_t v52;
  void *v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t (*v71)(void *);
  uint64_t v72;
  _QWORD aBlock[7];
  CGRect v74;
  CGRect v75;

  v61 = a6;
  v71 = a4;
  v72 = a5;
  v69 = a2;
  v70 = a3;
  v7 = type metadata accessor for DispatchWorkItemFlags();
  v67 = *(_QWORD *)(v7 - 8);
  v68 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v66 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS();
  v64 = *(_QWORD *)(v10 - 8);
  v65 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v63 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchTimeInterval();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (uint64_t *)((char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v62 = type metadata accessor for DispatchTime();
  v18 = *(_QWORD *)(v62 - 8);
  MEMORY[0x1E0C80A78](v62, v19);
  v21 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v60 - v24;
  type metadata accessor for PaperTextAttachmentView();
  v26 = (_QWORD *)swift_dynamicCastClass();
  if (!v26)
    goto LABEL_12;
  v27 = v26;
  v28 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v26) + 0x320))();
  if (!v28)
    goto LABEL_12;
  v29 = v28;
  v30 = objc_msgSend(v28, sel_standInAttachmentView);

  if (!v30)
    goto LABEL_12;
  v31 = *(id *)((char *)v27 + direct field offset for Canvas.paperView);
  v32 = specialized ContainerCanvasElementView.pencilKitAttachmentViews()();

  if (!(v32 >> 62))
  {
    if (*(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_6;
LABEL_19:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_20;
  }
  swift_bridgeObjectRetain();
  v59 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v59)
    goto LABEL_19;
LABEL_6:
  if ((v32 & 0xC000000000000001) == 0)
  {
    if (!*(_QWORD *)((v32 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_22:
      swift_once();
LABEL_15:
      v55 = type metadata accessor for Logger();
      __swift_project_value_buffer(v55, (uint64_t)logger);
      v56 = Logger.logObject.getter();
      v57 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v56, v57))
      {
        v58 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v58 = 0;
        _os_log_impl(&dword_1DDB0F000, v56, v57, "Failed to insert a new attachment", v58, 2u);
        MEMORY[0x1DF0E6558](v58, -1, -1);
      }

      v54 = 0;
      return v71(v54);
    }
    v33 = *(id *)(v32 + 32);
    goto LABEL_9;
  }
LABEL_20:
  v33 = (id)MEMORY[0x1DF0E4D64](0, v32);
LABEL_9:
  v34 = v33;
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  v35 = static NSObject.== infix(_:_:)();

  if ((v35 & 1) != 0)
  {
    objc_msgSend(a1, sel_bounds);
    objc_msgSend(a1, sel_convertRect_toCoordinateSpace_, v69);
    x = v74.origin.x;
    y = v74.origin.y;
    width = v74.size.width;
    height = v74.size.height;
    MidX = CGRectGetMidX(v74);
    v75.origin.x = x;
    v75.origin.y = y;
    v75.size.width = width;
    v75.size.height = height;
    if ((objc_msgSend(v70, sel_insertAttachmentIfInBlankSpace_, MidX, CGRectGetMidY(v75)) & 1) != 0)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      v41 = (void *)static OS_dispatch_queue.main.getter();
      static DispatchTime.now()();
      *v17 = 100;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v17, *MEMORY[0x1E0DEF490], v13);
      MEMORY[0x1DF0E2694](v21, v17);
      (*(void (**)(_QWORD *, uint64_t))(v14 + 8))(v17, v13);
      v42 = *(void (**)(char *, uint64_t))(v18 + 8);
      v43 = v62;
      v42(v21, v62);
      v44 = (_QWORD *)swift_allocObject();
      v45 = v61;
      v46 = v71;
      v47 = v72;
      v44[2] = v61;
      v44[3] = v46;
      v44[4] = v47;
      aBlock[4] = partial apply for closure #1 in getCanvas #1 () in CanvasElementController.visibleCanvasInsertIfNeeded(completion:);
      aBlock[5] = v44;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      aBlock[3] = &block_descriptor_19_2;
      v48 = _Block_copy(aBlock);
      v49 = v45;
      swift_retain();
      swift_release();
      v50 = v63;
      static DispatchQoS.unspecified.getter();
      aBlock[0] = MEMORY[0x1E0DEE9D8];
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
      v51 = v66;
      v52 = v68;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x1DF0E4884](v25, v50, v51, v48);
      _Block_release(v48);

      (*(void (**)(char *, uint64_t))(v67 + 8))(v51, v52);
      (*(void (**)(char *, uint64_t))(v64 + 8))(v50, v65);
      return ((uint64_t (*)(char *, uint64_t))v42)(v25, v43);
    }
    if (one-time initialization token for logger == -1)
      goto LABEL_15;
    goto LABEL_22;
  }
LABEL_12:
  v54 = a1;
  return v71(v54);
}

void closure #1 in getCanvas #1 () in CanvasElementController.visibleCanvasInsertIfNeeded(completion:)(uint64_t a1, void (*a2)(id))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (*v8)(void);
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  unint64_t v14;
  id v15;
  void *v16;
  char v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  id v22;
  uint64_t v23;
  id v24;

  v3 = a1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x1DF0E666C](a1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
  {
    v4 = *(_QWORD *)(v3 + 8);
    ObjectType = swift_getObjectType();
    v24 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(ObjectType, v4);
    swift_unknownObjectRelease();
    if (v24)
    {
      type metadata accessor for PaperTextAttachmentView();
      v6 = (_QWORD *)swift_dynamicCastClass();
      if (!v6)
        goto LABEL_18;
      v7 = v6;
      v8 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v6) + 0x320);
      v9 = v24;
      v10 = (void *)v8();
      if (!v10
        || (v11 = v10,
            v12 = objc_msgSend(v10, sel_standInAttachmentView),
            v11,
            !v12))
      {

        goto LABEL_18;
      }
      v13 = *(id *)((char *)v7 + direct field offset for Canvas.paperView);
      v14 = specialized ContainerCanvasElementView.pencilKitAttachmentViews()();

      if (v14 >> 62)
      {
        swift_bridgeObjectRetain();
        v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v23)
        {
LABEL_8:
          if ((v14 & 0xC000000000000001) == 0)
          {
            if (!*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              goto LABEL_24;
            }
            v15 = *(id *)(v14 + 32);
            goto LABEL_11;
          }
LABEL_22:
          v15 = (id)MEMORY[0x1DF0E4D64](0, v14);
LABEL_11:
          v16 = v15;
          swift_bridgeObjectRelease();
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
          v17 = static NSObject.== infix(_:_:)();

          if ((v17 & 1) != 0)
          {
            if (one-time initialization token for logger == -1)
            {
LABEL_13:
              v18 = type metadata accessor for Logger();
              __swift_project_value_buffer(v18, (uint64_t)logger);
              v19 = Logger.logObject.getter();
              v20 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v19, v20))
              {
                v21 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)v21 = 0;
                _os_log_impl(&dword_1DDB0F000, v19, v20, "Current canvas is still the stand in attachment after inserting.", v21, 2u);
                MEMORY[0x1DF0E6558](v21, -1, -1);
              }

              a2(0);
              goto LABEL_19;
            }
LABEL_24:
            swift_once();
            goto LABEL_13;
          }
LABEL_18:
          v22 = v24;
          a2(v24);

LABEL_19:
          return;
        }
      }
      else if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_8;
      }
      swift_bridgeObjectRelease();
      __break(1u);
      goto LABEL_22;
    }
  }
}

uint64_t updateElements #1 (elements:) in CanvasElementController.changeSelectedStrokeWidth(_:)(unint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  double v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  void (*v39)(char *, _QWORD *, _QWORD *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  char *v45;
  _QWORD *v46;
  _QWORD *v47;
  void *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  id v54;
  uint64_t v55;
  void *v56;
  id v57;
  void *v58;
  _QWORD *v59;
  void *v60;
  _QWORD v61[2];
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _QWORD *v73;
  void (*v74)(char *, uint64_t);
  void (*v75)(char *, char *, uint64_t);
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  id v81;
  _QWORD aBlock[7];

  v4 = type metadata accessor for Signature();
  MEMORY[0x1E0C80A78](v4, v5);
  v68 = (char *)v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Signature>);
  v67 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v66 = (char *)v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (_QWORD *)type metadata accessor for Shape();
  MEMORY[0x1E0C80A78](v10, v11);
  v72 = (char *)v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v70 = *(_QWORD *)(v71 - 8);
  MEMORY[0x1E0C80A78](v71, v13);
  v69 = (char *)v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
    goto LABEL_34;
  v15 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v15)
    return swift_bridgeObjectRelease();
LABEL_3:
  if (v15 >= 1)
  {
    v73 = v10;
    v17 = 0;
    v77 = a1 & 0xC000000000000001;
    v18 = round(a2);
    v63 = *(_QWORD *)&v18 & 0x7FF0000000000000;
    v19 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v62 = llround(a2);
    v61[1] = MEMORY[0x1E0DEE9C0] + 8;
    v76 = a1;
    v65 = v7;
    v64 = v15;
    while (1)
    {
      if (v77)
        v20 = (_QWORD *)MEMORY[0x1DF0E4D64](v17, a1);
      else
        v20 = *(id *)(a1 + 8 * v17 + 32);
      v10 = v20;
      type metadata accessor for ShapeView();
      v21 = (_QWORD *)swift_dynamicCastClass();
      if (v21)
      {
        a1 = (unint64_t)v21;
        v78 = v17;
        v22 = (char *)v21 + *(_QWORD *)((*v19 & *v21) + 0x380);
        swift_beginAccess();
        v23 = v70;
        v24 = v69;
        v25 = v71;
        v75 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
        v75(v69, v22, v71);
        v26 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
        v80 = v10;
        v79 = v10;
        v27 = (uint64_t)v72;
        Capsule<>.root.getter();
        v74 = *(void (**)(char *, uint64_t))(v23 + 8);
        v74(v24, v25);
        v28 = v73;
        type metadata accessor for ShapeSecondaryProperties();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
        CRRegister.wrappedValue.getter();
        v29 = aBlock[0];
        v30 = outlined destroy of PKStrokeProperties(v27, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        if (v29)
        {
          v17 = v78;
        }
        else
        {
          MEMORY[0x1E0C80A78](v30, v31);
          *(double *)&v61[-2] = a2;
          swift_beginAccess();
          Capsule.callAsFunction<A>(_:)();
          swift_endAccess();
          v32 = v75;
          v33 = ((uint64_t (*)(char *, char *, uint64_t))v75)(v24, v22, v25);
          MEMORY[0x1E0C80A78](v33, v34);
          v61[-4] = v28;
          v61[-3] = v26;
          v61[-2] = &protocol witness table for Shape;
          swift_getKeyPath();
          Capsule<>.subscript.getter();
          swift_release();
          v35 = v74;
          v74(v24, v25);
          if ((aBlock[0] & 0x20) != 0)
          {
            swift_beginAccess();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElementFlags?);
            Capsule.callAsFunction<A>(_:)();
            swift_endAccess();
          }
          v17 = v78;
          v36 = MEMORY[0x1DF0E666C](a1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
          if (v36)
          {
            v37 = (_QWORD *)v36;
            v32(v24, v22, v25);
            LOBYTE(aBlock[0]) = 4;
            v38 = (_QWORD *)MEMORY[0x1E0DEEDD8];
            v39 = *(void (**)(char *, _QWORD *, _QWORD *, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v37) + 0x538);
            v40 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
            v39(v24, aBlock, v73, v40);
            LOBYTE(aBlock[0]) = 4;
            (*(void (**)(_QWORD *))((*v38 & *v37) + 0x518))(aBlock);

            v35(v24, v25);
          }
          objc_msgSend((id)a1, sel_setNeedsLayout);
        }

        v7 = v65;
        v15 = v64;
        v19 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        v10 = v80;
      }
      type metadata accessor for SignatureView();
      v41 = swift_dynamicCastClass();
      if (v41)
      {
        if (v63 == 0x7FF0000000000000)
        {
          __break(1u);
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          swift_bridgeObjectRetain();
          result = _CocoaArrayWrapper.endIndex.getter();
          v15 = result;
          if (!result)
            return swift_bridgeObjectRelease();
          goto LABEL_3;
        }
        if (v18 <= -9.22337204e18)
          goto LABEL_31;
        if (v18 >= 9.22337204e18)
          goto LABEL_32;
        v43 = (char *)v41;
        v44 = (_QWORD *)MEMORY[0x1E0C80A78](v41, v42);
        v61[-2] = v62;
        LOBYTE(v61[-1]) = 0;
        v45 = (char *)v44 + *(_QWORD *)((*v19 & *v44) + 0x380);
        swift_beginAccess();
        v46 = v10;
        Capsule.callAsFunction<A>(_:)();
        swift_endAccess();
        specialized CanvasElementView.commit()();
        specialized CanvasElementView.updateGestures()(&demangling cache variable for type metadata for Capsule<Signature>, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t)&protocol conformance descriptor for Signature, (uint64_t (*)(char *, char *, uint64_t))&protocol witness table for Signature);
        specialized CanvasElementView.updateFrame()();
        v47 = (_QWORD *)MEMORY[0x1DF0E666C](&v43[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas]);
        if (v47)
        {
          v48 = v47;
          (*(void (**)(void))((*v19 & *v47) + 0x668))();

        }
        v49 = v67;
        v50 = v66;
        (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v66, v45, v7);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
        v51 = (uint64_t)v68;
        Capsule<>.root.getter();
        (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v7);
        outlined destroy of PKStrokeProperties(v51, (uint64_t (*)(_QWORD))type metadata accessor for Signature);
        v81 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
        v52 = SignatureView.color.getter();
        if (v52)
        {
          v53 = (void *)v52;
          v54 = objc_msgSend(v43, sel_traitCollection);
          objc_msgSend(v54, sel_userInterfaceStyle);

          v55 = static PKInkingTool.convertColor(_:from:to:)();
          v56 = v81;
          v81 = (id)v55;

        }
        v57 = objc_msgSend(v43, sel_traitCollection);
        v10 = (_QWORD *)swift_allocObject();
        v10[2] = v43;
        v10[3] = &v81;
        a1 = swift_allocObject();
        *(_QWORD *)(a1 + 16) = partial apply for closure #1 in SignatureView.updateUI();
        *(_QWORD *)(a1 + 24) = v10;
        aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
        aBlock[5] = a1;
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
        aBlock[3] = &block_descriptor_71;
        v58 = _Block_copy(aBlock);
        v59 = v46;
        swift_retain();
        swift_release();
        objc_msgSend(v57, sel_performAsCurrentTraitCollection_, v58);

        _Block_release(v58);
        LOBYTE(v57) = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v57 & 1) != 0)
          goto LABEL_33;
        v60 = v81;

        swift_release();
        v19 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      }
      else
      {

      }
      ++v17;
      a1 = v76;
      if (v15 == v17)
        return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in CanvasElementController.changeSelectedLineType(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  void (*v35)(char *, _QWORD *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, char *, uint64_t);
  unint64_t v47;
  char *v48;
  void *v49;
  _QWORD *v50;
  _QWORD v51[5];

  v43 = a2;
  v44 = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v42 = *(_QWORD *)(v8 - 8);
  result = MEMORY[0x1E0C80A78](v8, v9);
  v48 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void **)(a1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v12)
    goto LABEL_20;
  v13 = v12;
  v14 = swift_bridgeObjectRetain();
  v15 = specialized Sequence.compactMap<A>(_:)(v14, (uint64_t)v13);

  result = swift_bridgeObjectRelease();
  if (v15 >> 62)
  {
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v16)
      goto LABEL_4;
    return swift_bridgeObjectRelease();
  }
  v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v16)
    return swift_bridgeObjectRelease();
LABEL_4:
  if (v16 >= 1)
  {
    v17 = 0;
    v47 = v15 & 0xC000000000000001;
    v38 = a5 & 1;
    v39 = a3 & 1;
    v37 = MEMORY[0x1E0DEE9C0] + 8;
    v40 = v16;
    v41 = v15;
    do
    {
      if (v47)
        v19 = (id)MEMORY[0x1DF0E4D64](v17, v15);
      else
        v19 = *(id *)(v15 + 8 * v17 + 32);
      v18 = v19;
      type metadata accessor for ShapeView();
      v20 = swift_dynamicCastClass();
      if (v20)
      {
        v49 = v18;
        v22 = (_QWORD *)MEMORY[0x1E0C80A78](v20, v21);
        *(&v37 - 4) = v43;
        *((_BYTE *)&v37 - 24) = v39;
        *(&v37 - 2) = v44;
        *((_BYTE *)&v37 - 8) = v38;
        v23 = *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v22) + 0x380);
        v50 = v22;
        v24 = (char *)v22 + v23;
        swift_beginAccess();
        Capsule.callAsFunction<A>(_:)();
        swift_endAccess();
        v25 = v42;
        v26 = v48;
        v46 = *(uint64_t (**)(char *, char *, uint64_t))(v42 + 16);
        v27 = v46(v48, v24, v8);
        MEMORY[0x1E0C80A78](v27, v28);
        v45 = type metadata accessor for Shape();
        *(&v37 - 4) = v45;
        *(&v37 - 3) = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
        *(&v37 - 2) = (uint64_t)&protocol witness table for Shape;
        swift_getKeyPath();
        Capsule<>.subscript.getter();
        swift_release();
        v29 = *(void (**)(char *, uint64_t))(v25 + 8);
        v29(v26, v8);
        if ((v51[0] & 0x20) != 0)
        {
          swift_beginAccess();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasElementFlags?);
          Capsule.callAsFunction<A>(_:)();
          swift_endAccess();
        }
        v30 = v50;
        v31 = MEMORY[0x1DF0E666C]((char *)v50 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
        v15 = v41;
        if (v31)
        {
          v32 = (_QWORD *)v31;
          v33 = v48;
          v46(v48, v24, v8);
          LOBYTE(v51[0]) = 4;
          v34 = (_QWORD *)MEMORY[0x1E0DEEDD8];
          v35 = *(void (**)(char *, _QWORD *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v32) + 0x538);
          v36 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
          v35(v33, v51, v45, v36);
          LOBYTE(v51[0]) = 4;
          v30 = v50;
          (*(void (**)(_QWORD *))((*v34 & *v32) + 0x518))(v51);

          v29(v33, v8);
        }
        objc_msgSend(v30, sel_setNeedsLayout, v37);
        v16 = v40;
        v18 = v49;
      }
      ++v17;

    }
    while (v16 != v17);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

Swift::Void __swiftcall CanvasElementController.toolPickerSelectedToolItemDidChange(_:)(PKToolPicker a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  char v14;
  id v15;
  void *v16;

  v2 = v1;
  v4 = v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
  {
    v5 = *(_QWORD *)(v4 + 8);
    ObjectType = swift_getObjectType();
    v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(ObjectType, v5);
    swift_unknownObjectRelease();
    if (v7)
    {
      v8 = -[objc_class selectedToolItem](a1.super.isa, sel_selectedToolItem);
      v9 = OBJC_IVAR____TtC8PaperKit23CanvasElementController_activeToolPickerItem;
      v10 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_activeToolPickerItem);
      if (v8)
      {
        v11 = v8;
        if (v10)
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKToolPickerItem);
          v12 = v10;
          v13 = v11;
          v14 = static NSObject.== infix(_:_:)();

          if ((v14 & 1) != 0)
            goto LABEL_12;
        }
        else
        {

        }
      }
      else if (!v10)
      {
        goto LABEL_12;
      }
      AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);
LABEL_12:
      v15 = -[objc_class selectedToolItem](a1.super.isa, sel_selectedToolItem);

      v16 = *(void **)(v2 + v9);
      *(_QWORD *)(v2 + v9) = v15;

    }
  }
}

void specialized Set.formUnion<A>(_:)(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  id v17[6];

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    lazy protocol witness table accessor for type UIColor and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    v1 = (unint64_t)v17[1];
    v16 = v17[2];
    v2 = (uint64_t)v17[3];
    v3 = v17[4];
    v4 = (unint64_t)v17[5];
  }
  else
  {
    v3 = 0;
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v16 = (_QWORD *)(a1 + 56);
    v2 = ~v5;
    v6 = -v5;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v4 = v7 & *(_QWORD *)(a1 + 56);
  }
  v8 = (unint64_t)(v2 + 64) >> 6;
  if ((v1 & 0x8000000000000000) != 0)
    goto LABEL_10;
  while (1)
  {
    if (v4)
    {
      v9 = (v4 - 1) & v4;
      v10 = __clz(__rbit64(v4)) | ((_QWORD)v3 << 6);
      v11 = (char *)v3;
      goto LABEL_29;
    }
    v13 = (uint64_t)v3 + 1;
    if (__OFADD__(v3, 1))
      break;
    if (v13 >= v8)
      goto LABEL_32;
    v14 = v16[v13];
    v11 = (char *)v3 + 1;
    if (!v14)
    {
      v11 = (char *)v3 + 2;
      if ((uint64_t)v3 + 2 >= v8)
        goto LABEL_32;
      v14 = v16[(_QWORD)v11];
      if (!v14)
      {
        v11 = (char *)v3 + 3;
        if ((uint64_t)v3 + 3 >= v8)
          goto LABEL_32;
        v14 = v16[(_QWORD)v11];
        if (!v14)
        {
          v11 = (char *)v3 + 4;
          if ((uint64_t)v3 + 4 >= v8)
            goto LABEL_32;
          v14 = v16[(_QWORD)v11];
          if (!v14)
          {
            v11 = (char *)v3 + 5;
            if ((uint64_t)v3 + 5 >= v8)
              goto LABEL_32;
            v14 = v16[(_QWORD)v11];
            if (!v14)
            {
              v15 = (char *)v3 + 6;
              while ((char *)v8 != v15)
              {
                v14 = v16[(_QWORD)v15++];
                if (v14)
                {
                  v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              outlined consume of [AnyHashable : Any].Iterator._Variant();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    v9 = (v14 - 1) & v14;
    v10 = __clz(__rbit64(v14)) + ((_QWORD)v11 << 6);
LABEL_29:
    v12 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v10);
    if (!v12)
      goto LABEL_32;
    while (1)
    {
      specialized Set._Variant.insert(_:)(v17, v12);

      v3 = v11;
      v4 = v9;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v12 = v17[0];
        swift_unknownObjectRelease();
        v11 = (char *)v3;
        v9 = v4;
        if (v12)
          continue;
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void **v5;
  void *v6;
  id v7;

  if (a1 >> 62)
  {
    v2 = _CocoaArrayWrapper.endIndex.getter();
    if (!v2)
      return;
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v2)
      return;
  }
  if (v2 < 1)
  {
    __break(1u);
  }
  else if ((a1 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = (void *)MEMORY[0x1DF0E4D64](i, a1);
      specialized Set._Variant.insert(_:)(&v7, v4);

    }
  }
  else
  {
    v5 = (void **)(a1 + 32);
    do
    {
      v6 = *v5++;
      specialized Set._Variant.insert(_:)(&v7, v6);

      --v2;
    }
    while (v2);
  }
}

uint64_t CanvasElementController.selectedSignatureColors()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  char *v11;
  uint64_t result;
  void *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, _QWORD *);
  _QWORD *v26;
  void (*v27)(char *, _QWORD *);
  char *v28;
  id v29;
  id v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  id v39;
  id v40;
  unint64_t v41;

  v1 = (_QWORD *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Signature>);
  v37 = *(v1 - 1);
  MEMORY[0x1E0C80A78](v1, v2);
  v32 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v4, v5);
  v36 = (char *)&v32 - v7;
  v8 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (!MEMORY[0x1DF0E666C](v8, v6))
    return 0;
  v9 = *(_QWORD *)(v8 + 8);
  ObjectType = swift_getObjectType();
  v11 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(ObjectType, v9);
  result = swift_unknownObjectRelease();
  if (!v11)
    return (uint64_t)v11;
  v13 = *(void **)&v11[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (!v13)
    goto LABEL_29;
  v14 = v13;
  v15 = swift_bridgeObjectRetain();
  v16 = specialized Sequence.compactMap<A>(_:)(v15, (uint64_t)v14);

  swift_bridgeObjectRelease();
  v41 = MEMORY[0x1E0DEE9D8];
  if (v16 >> 62)
  {
LABEL_24:
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    if (v17)
      goto LABEL_6;
    goto LABEL_25;
  }
  v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v17)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    v31 = MEMORY[0x1E0DEE9D8];
LABEL_26:
    swift_bridgeObjectRelease();
    v11 = (char *)specialized Set.init<A>(_:)(v31);
    swift_bridgeObjectRelease();
    return (uint64_t)v11;
  }
LABEL_6:
  v34 = v16;
  v35 = v1;
  v38 = v16 & 0xC000000000000001;
  v18 = 4;
  v33 = v17;
  while (1)
  {
    if (v38)
      v19 = (_QWORD *)MEMORY[0x1DF0E4D64](v18 - 4, v16);
    else
      v19 = *(id *)(v16 + 8 * v18);
    v1 = v19;
    v20 = v18 - 3;
    if (__OFADD__(v18 - 4, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    type metadata accessor for SignatureView();
    v21 = (_QWORD *)swift_dynamicCastClass();
    if (v21)
      break;

LABEL_8:
    ++v18;
    if (v20 == v17)
    {
      swift_bridgeObjectRelease();
      v31 = v41;
      goto LABEL_26;
    }
  }
  v39 = v1;
  v22 = (char *)v21 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v21) + 0x380);
  swift_beginAccess();
  v23 = v36;
  v24 = v37;
  v25 = *(void (**)(char *, char *, _QWORD *))(v37 + 16);
  v26 = v35;
  v25(v36, v22, v35);
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
  Capsule<>.subscript.getter();
  swift_release();
  v27 = *(void (**)(char *, _QWORD *))(v24 + 8);
  v27(v23, v26);
  if (!v40)
  {

    v17 = v33;
    v16 = v34;
    goto LABEL_8;
  }

  v28 = v32;
  v25(v32, v22, v26);
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  result = ((uint64_t (*)(char *, _QWORD *))v27)(v28, v26);
  v29 = v40;
  if (v40)
  {
    v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v40);

    v17 = v33;
    v16 = v34;
    if (v30)
    {
      MEMORY[0x1DF0E4398]();
      if (*(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    goto LABEL_8;
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t CanvasElementController.imageDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  _QWORD *v5;
  uint64_t v6;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  v2 = MEMORY[0x1DF0E666C](v1);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 8);
    ObjectType = swift_getObjectType();
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
    v6 = swift_unknownObjectRelease();
    if (v5)
    {
      v2 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x410))(v6);

    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void CanvasElementController.imageDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  _QWORD *v8;

  v5 = v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
    && (v6 = *(_QWORD *)(v5 + 8),
        ObjectType = swift_getObjectType(),
        v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(ObjectType, v6),
        swift_unknownObjectRelease(),
        v8))
  {
    (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v8) + 0x418))(a1, a2);

  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

id CanvasElementController.init()()
{
  _BYTE *v0;
  objc_class *ObjectType;
  objc_super v3;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementController_shapeStyleController] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementController_textStyleController] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementController_signatureStyleController] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController] = 0;
  v0[OBJC_IVAR____TtC8PaperKit23CanvasElementController_isApplyingStyle] = 0;
  v0[OBJC_IVAR____TtC8PaperKit23CanvasElementController_canEditVellumOpacity] = 0;
  v0[OBJC_IVAR____TtC8PaperKit23CanvasElementController_canEditDescription] = 0;
  v0[OBJC_IVAR____TtC8PaperKit23CanvasElementController_shouldDeselectElementsWhenToolPickerIsHidden] = 1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementController_activeToolPickerItem] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit23CanvasElementController_editingContainerView] = 0;
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t type metadata accessor for CanvasElementController()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for CanvasElementController.EditingContainerView()
{
  return objc_opt_self();
}

uint64_t protocol witness for ToolPickerControllerDelegate.toolPickerController(_:wantsToEnterFullscreen:) in conformance CanvasElementController(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t ObjectType;

  v4 = v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  result = MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate);
  if (result)
  {
    v6 = *(_QWORD *)(v4 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 32))(v2, a2 & 1, ObjectType, v6);
    return swift_unknownObjectRelease();
  }
  return result;
}

void protocol witness for ToolPickerControllerDelegate.toolPickerController(_:willShowToolPicker:) in conformance CanvasElementController(uint64_t a1, void *a2)
{
  specialized CanvasElementController.toolPickerController(_:willShowToolPicker:)(a2);
}

unint64_t specialized ContainerCanvasElementView.pencilKitAttachmentViews()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  void *v25;
  _QWORD *v26;
  void *v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  id v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  char *v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;

  v1 = (_QWORD *)v0;
  v2 = type metadata accessor for IndexSet();
  v49 = *(_QWORD *)(v2 - 8);
  v50 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v48 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CRKeyPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v51 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v52 = (uint64_t)&v48 - v11;
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v13 = *(void **)(v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v0) + 0x4C0));
  if (v13)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_1DDF35440;
    *(_QWORD *)(v14 + 32) = v13;
    v53 = v14;
    specialized Array._endMutation()();
    v15 = v53;
  }
  else
  {
    v15 = MEMORY[0x1E0DEE9D8];
  }
  v54 = v15;
  v16 = v13;
  v17 = specialized ContainerCanvasElementView.subelementViews.getter();
  v18 = v17;
  v53 = MEMORY[0x1E0DEE9D8];
  if ((unint64_t)v17 >> 62)
  {
    if (v17 < 0)
      v0 = v17;
    else
      v0 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    if (v19)
      goto LABEL_6;
LABEL_17:
    swift_bridgeObjectRelease_n();
    v24 = MEMORY[0x1E0DEE9D8];
    goto LABEL_18;
  }
  v19 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v19)
    goto LABEL_17;
LABEL_6:
  if (v19 < 1)
    goto LABEL_44;
  v20 = 0;
  do
  {
    if ((v18 & 0xC000000000000001) != 0)
      v21 = (_QWORD *)MEMORY[0x1DF0E4D64](v20, v18);
    else
      v21 = *(id *)(v18 + 8 * v20 + 32);
    v22 = v21;
    ++v20;
    v23 = (*(uint64_t (**)(void))((*v12 & *v21) + 0x298))();

    specialized Array.append<A>(contentsOf:)(v23);
  }
  while (v19 != v20);
  swift_bridgeObjectRelease_n();
  v24 = v53;
LABEL_18:
  specialized Array.append<A>(contentsOf:)(v24);
  v25 = (void *)MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_parentCanvasElement);
  if (v25)
  {

  }
  else
  {
    v26 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
    if (v26)
    {
      v27 = v26;
      v28 = v51;
      (*(void (**)(void))((*v12 & *v26) + 0x300))();

      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v52, v28, v5);
      v29 = (_QWORD *)((char *)v1 + *(_QWORD *)((*v12 & *v1) + 0x4D8));
      swift_beginAccess();
      v30 = *v29;
      v31 = *(void **)((char *)v1 + *(_QWORD *)((*v12 & *v1) + 0x4D0));
      swift_bridgeObjectRetain();
      if (v31)
      {
        v32 = v31;
        v33 = FormFillingView.unorderedFormFields.getter();

      }
      else
      {
        v33 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      }
      v34 = specialized Dictionary.merging(_:uniquingKeysWith:)(v33, v30);
      if (*(_QWORD *)(v34 + 16) && (v35 = specialized __RawDictionaryStorage.find<A>(_:)(v52), (v36 & 1) != 0))
      {
        v1 = *(id *)(*(_QWORD *)(v34 + 56) + 8 * v35);
        swift_bridgeObjectRelease();
        v0 = v54;
        if (v54 >> 62)
          goto LABEL_45;
        v37 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFF8) + 0x10);
        v38 = v1;
        swift_bridgeObjectRetain();
        for (; v37; v37 = _CocoaArrayWrapper.endIndex.getter())
        {
          v39 = 0;
          while (1)
          {
            v40 = (v0 & 0xC000000000000001) != 0
                ? (id)MEMORY[0x1DF0E4D64](v39, v0)
                : *(id *)(v0 + 8 * v39 + 32);
            v41 = v40;
            type metadata accessor for CanvasElementDrawingView();
            v42 = swift_dynamicCastClass();
            if (v42)
            {
              v43 = (_QWORD *)MEMORY[0x1DF0E666C](v42 + OBJC_IVAR____TtC8PaperKit24CanvasElementDrawingView_canvasElementView);

              if (v43)
              {

                if (v43 == v1)
                {
                  swift_bridgeObjectRelease();

                  v46 = v48;
                  IndexSet.init(integer:)();
                  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [PKAttachmentView]);
                  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [PKAttachmentView] and conformance [A], &demangling cache variable for type metadata for [PKAttachmentView], MEMORY[0x1E0DEAF28]);
                  MutableCollection.move(fromOffsets:toOffset:)();

                  (*(void (**)(char *, uint64_t))(v49 + 8))(v46, v50);
                  goto LABEL_41;
                }
              }
            }
            else
            {

            }
            v44 = v39 + 1;
            if (__OFADD__(v39, 1))
              break;
            ++v39;
            if (v44 == v37)
              goto LABEL_39;
          }
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          v47 = v1;
          swift_bridgeObjectRetain();
        }
LABEL_39:
        swift_bridgeObjectRelease();

        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v52, v5);
      }
      else
      {
        swift_bridgeObjectRelease();
LABEL_41:
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v52, v5);
      }
    }
  }
  return v54;
}

uint64_t specialized ContainerCanvasElementView.subelementViews.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  id v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t i;
  id v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  void *v14;
  id v15;
  unint64_t v16;
  uint64_t v17;

  v1 = v0;
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = *(void **)((char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x4C8));
  v4 = MEMORY[0x1E0DEE9D8];
  if (!v3)
    goto LABEL_19;
  v5 = objc_msgSend(v3, sel_subviews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v17 = v4;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v7 = result;
    if (result)
      goto LABEL_4;
  }
  else
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v7)
    {
LABEL_4:
      if (v7 < 1)
      {
        __break(1u);
        return result;
      }
      for (i = 0; i != v7; ++i)
      {
        if ((v6 & 0xC000000000000001) != 0)
          v10 = (id)MEMORY[0x1DF0E4D64](i, v6);
        else
          v10 = *(id *)(v6 + 8 * i + 32);
        v11 = v10;
        type metadata accessor for AnyCanvasElementView();
        if (swift_dynamicCastClass())
        {
          MEMORY[0x1DF0E4398]();
          if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {

        }
      }
      swift_bridgeObjectRelease();
      v4 = v17;
      goto LABEL_18;
    }
  }
  swift_bridgeObjectRelease();
  v4 = MEMORY[0x1E0DEE9D8];
LABEL_18:
  swift_bridgeObjectRelease();
LABEL_19:
  v12 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v12
    && (v13 = v12,
        (*(void (**)(uint64_t *__return_ptr))((*v2 & *v12) + 0x2C8))(&v17),
        v13,
        v17 == 1)
    && (v14 = *(void **)((char *)v1 + *(_QWORD *)((*v2 & *v1) + 0x4D0))) != 0)
  {
    v15 = v14;
    v16 = FormFillingView.formFields.getter();

  }
  else
  {
    v16 = MEMORY[0x1E0DEE9D8];
  }
  v17 = v4;
  specialized Array.append<A>(contentsOf:)(v16);
  return v17;
}

uint64_t specialized Dictionary.merging(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8 = a2;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v8);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

uint64_t specialized closure #1 in CanvasElementView.commit()@<X0>(uint64_t a1@<X8>)
{
  return specialized closure #1 in CanvasElementView.commit()((uint64_t (*)(uint64_t))type metadata accessor for Shape, (unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t)&protocol conformance descriptor for Shape, a1);
}

{
  return specialized closure #1 in CanvasElementView.commit()((uint64_t (*)(uint64_t))type metadata accessor for Signature, (unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t)&protocol conformance descriptor for Signature, a1);
}

uint64_t specialized closure #1 in CanvasElementView.commit()@<X0>(uint64_t (*a1)(uint64_t)@<X1>, unint64_t *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  void (*v9)(_BYTE *, _QWORD);
  uint64_t v10;
  _BYTE v12[32];

  a1(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a2, a1, a3);
  swift_getKeyPath();
  v9 = (void (*)(_BYTE *, _QWORD))Capsule.Ref<>.subscript.modify();
  v10 = *v8 & 0x20;
  if ((*v8 & 0x20) != 0)
    *v8 &= ~0x20uLL;
  *(_QWORD *)a4 = v10;
  *(_BYTE *)(a4 + 8) = v10 == 0;
  v9(v12, 0);
  return swift_release();
}

_QWORD *key path getter for CanvasElement.flags : <A>A@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v5;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD))(*(_QWORD *)(a2 + a1 - 8) + 64))(&v5, *(_QWORD *)(a2 + a1 - 24));
  *a3 = v5;
  return result;
}

uint64_t key path setter for CanvasElement.flags : <A>A(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *(_QWORD *)(a4 + a3 - 24);
  v5 = *(_QWORD *)(a4 + a3 - 8);
  v7 = *a1;
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 72))(&v7, v4);
}

id specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v8;

  v4 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView))
              + 48);
  v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath, AnyCanvasElementView))
              + 48);
  v8 = *(id *)(a1 + v4);
  v6 = type metadata accessor for CRKeyPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  *(_QWORD *)(a2 + v5) = v8;
  return v8;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  void (*v24)(char *, char *, uint64_t);
  id v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = type metadata accessor for CRKeyPath();
  v43 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51, v10);
  v12 = (char *)v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath, AnyCanvasElementView)?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = -1 << *(_BYTE *)(a1 + 32);
  v18 = ~v17;
  v19 = *(_QWORD *)(a1 + 64);
  v20 = -v17;
  v44 = a1;
  v45 = a1 + 64;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  else
    v21 = -1;
  v46 = v18;
  v47 = 0;
  v48 = v21 & v19;
  v49 = a2;
  v50 = a3;
  v42[2] = a1;
  swift_bridgeObjectRetain();
  v42[1] = a3;
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)v16);
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath, AnyCanvasElementView));
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v16, 1, v22) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [AnyHashable : Any].Iterator._Variant();
    return swift_release();
  }
  v24 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
  while (1)
  {
    v27 = *(int *)(v22 + 48);
    v24(v12, v16, v51);
    v28 = *(void **)&v16[v27];
    v29 = *(_QWORD **)a5;
    v31 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12);
    v32 = v29[2];
    v33 = (v30 & 1) == 0;
    v34 = v32 + v33;
    if (__OFADD__(v32, v33))
      break;
    v35 = v30;
    if (v29[3] >= v34)
    {
      if ((a4 & 1) != 0)
      {
        v38 = *(_QWORD **)a5;
        if ((v30 & 1) != 0)
          goto LABEL_7;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        v38 = *(_QWORD **)a5;
        if ((v35 & 1) != 0)
          goto LABEL_7;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v34, a4 & 1);
      v36 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12);
      if ((v35 & 1) != (v37 & 1))
        goto LABEL_22;
      v31 = v36;
      v38 = *(_QWORD **)a5;
      if ((v35 & 1) != 0)
      {
LABEL_7:
        v25 = *(id *)(v38[7] + 8 * v31);

        (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v51);
        v26 = *(_QWORD *)(*(_QWORD *)a5 + 56);

        *(_QWORD *)(v26 + 8 * v31) = v25;
        goto LABEL_8;
      }
    }
    v38[(v31 >> 6) + 8] |= 1 << v31;
    v24((char *)(v38[6] + *(_QWORD *)(v43 + 72) * v31), v12, v51);
    *(_QWORD *)(v38[7] + 8 * v31) = v28;
    v39 = v38[2];
    v40 = __OFADD__(v39, 1);
    v41 = v39 + 1;
    if (v40)
      goto LABEL_21;
    v38[2] = v41;
LABEL_8:
    specialized LazyMapSequence.Iterator.next()((uint64_t)v16);
    v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath, AnyCanvasElementView));
    a4 = 1;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v16, 1, v22) == 1)
      goto LABEL_5;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  _OWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t i;
  _OWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  _OWORD v46[2];
  _OWORD v47[2];
  __int128 v48;
  _OWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v50 = a1;
  v51 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v52 = v8;
  v53 = 0;
  v54 = v11 & v9;
  v55 = a2;
  v56 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()(&v48);
  v12 = *((_QWORD *)&v48 + 1);
  if (!*((_QWORD *)&v48 + 1))
    goto LABEL_27;
  v13 = v48;
  outlined init with take of Any(v49, v47);
  v14 = *(_QWORD **)a5;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v20 = v15;
  if (v14[3] >= v19)
  {
    if ((a4 & 1) != 0)
    {
      if ((v15 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v20 & 1) != 0)
        goto LABEL_12;
    }
LABEL_14:
    v24 = *(_QWORD **)a5;
    *(_QWORD *)(*(_QWORD *)a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    v25 = (uint64_t *)(v24[6] + 16 * v16);
    *v25 = v13;
    v25[1] = v12;
    outlined init with take of Any(v47, (_OWORD *)(v24[7] + 32 * v16));
    v26 = v24[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v24[2] = v28;
LABEL_16:
    specialized LazyMapSequence.Iterator.next()(&v48);
    for (i = *((_QWORD *)&v48 + 1); *((_QWORD *)&v48 + 1); i = *((_QWORD *)&v48 + 1))
    {
      v31 = v48;
      outlined init with take of Any(v49, v47);
      v32 = *(_QWORD **)a5;
      v34 = specialized __RawDictionaryStorage.find<A>(_:)(v31, i);
      v35 = v32[2];
      v36 = (v33 & 1) == 0;
      v37 = v35 + v36;
      if (__OFADD__(v35, v36))
        goto LABEL_28;
      v38 = v33;
      if (v32[3] < v37)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v37, 1);
        v39 = specialized __RawDictionaryStorage.find<A>(_:)(v31, i);
        if ((v38 & 1) != (v40 & 1))
          goto LABEL_30;
        v34 = v39;
      }
      if ((v38 & 1) != 0)
      {
        outlined init with copy of Any((uint64_t)v47, (uint64_t)v46);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
        swift_bridgeObjectRelease();
        v30 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v34);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
        outlined init with take of Any(v46, v30);
      }
      else
      {
        v41 = *(_QWORD **)a5;
        *(_QWORD *)(*(_QWORD *)a5 + 8 * (v34 >> 6) + 64) |= 1 << v34;
        v42 = (uint64_t *)(v41[6] + 16 * v34);
        *v42 = v31;
        v42[1] = i;
        outlined init with take of Any(v47, (_OWORD *)(v41[7] + 32 * v34));
        v43 = v41[2];
        v27 = __OFADD__(v43, 1);
        v44 = v43 + 1;
        if (v27)
          goto LABEL_29;
        v41[2] = v44;
      }
      specialized LazyMapSequence.Iterator.next()(&v48);
    }
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of [AnyHashable : Any].Iterator._Variant();
    return swift_release();
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a4 & 1);
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
  if ((v20 & 1) == (v22 & 1))
  {
    v16 = v21;
    if ((v20 & 1) == 0)
      goto LABEL_14;
LABEL_12:
    outlined init with copy of Any((uint64_t)v47, (uint64_t)v46);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
    swift_bridgeObjectRelease();
    v23 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v16);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    outlined init with take of Any(v46, v23);
    goto LABEL_16;
  }
LABEL_30:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id specialized ToolPickerController.init(delegate:)(void *a1, char *a2)
{
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  objc_super v14;

  *(_QWORD *)&a2[OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate + 8] = 0;
  v4 = swift_unknownObjectWeakInit();
  *(_QWORD *)&a2[OBJC_IVAR____TtC8PaperKit20ToolPickerController_stickerPickerVC] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC8PaperKit20ToolPickerController_imageDescriptionVC] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC8PaperKit20ToolPickerController____lazy_storage___textToolListViewController] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC8PaperKit20ToolPickerController____lazy_storage___shapeButtonListViewController] = 0;
  *(_QWORD *)(v4 + 8) = &protocol witness table for CanvasElementController;
  swift_unknownObjectWeakAssign();
  v14.receiver = a2;
  v14.super_class = (Class)type metadata accessor for ToolPickerController();
  v5 = objc_msgSendSuper2(&v14, sel_init);
  v6 = (void *)objc_opt_self();
  v7 = v5;
  v8 = objc_msgSend(v6, sel_defaultCenter);
  objc_msgSend(v8, sel_addObserver_selector_name_object_, v7, sel_toolPickerWillShowNotification_, *MEMORY[0x1E0CD1348], 0);

  v9 = objc_msgSend(v6, sel_defaultCenter);
  objc_msgSend(v9, sel_addObserver_selector_name_object_, v7, sel_toolPickerDidHideNotification_, *MEMORY[0x1E0CD1340], 0);

  v10 = objc_msgSend(v6, sel_defaultCenter);
  v11 = *MEMORY[0x1E0CD1328];
  v12 = v7;
  objc_msgSend(v10, sel_addObserver_selector_name_object_, v12, sel_handleSqueezeInteractionDidChangePaletteViewVisibilityNotification_, v11, 0);

  return v12;
}

{
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  objc_super v14;

  *(_QWORD *)&a2[OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate + 8] = 0;
  v4 = swift_unknownObjectWeakInit();
  *(_QWORD *)&a2[OBJC_IVAR____TtC8PaperKit20ToolPickerController_stickerPickerVC] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC8PaperKit20ToolPickerController_imageDescriptionVC] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC8PaperKit20ToolPickerController____lazy_storage___textToolListViewController] = 0;
  *(_QWORD *)&a2[OBJC_IVAR____TtC8PaperKit20ToolPickerController____lazy_storage___shapeButtonListViewController] = 0;
  *(_QWORD *)(v4 + 8) = &protocol witness table for InlineDrawingCanvasElementController;
  swift_unknownObjectWeakAssign();
  v14.receiver = a2;
  v14.super_class = (Class)type metadata accessor for ToolPickerController();
  v5 = objc_msgSendSuper2(&v14, sel_init);
  v6 = (void *)objc_opt_self();
  v7 = v5;
  v8 = objc_msgSend(v6, sel_defaultCenter);
  objc_msgSend(v8, sel_addObserver_selector_name_object_, v7, sel_toolPickerWillShowNotification_, *MEMORY[0x1E0CD1348], 0);

  v9 = objc_msgSend(v6, sel_defaultCenter);
  objc_msgSend(v9, sel_addObserver_selector_name_object_, v7, sel_toolPickerDidHideNotification_, *MEMORY[0x1E0CD1340], 0);

  v10 = objc_msgSend(v6, sel_defaultCenter);
  v11 = *MEMORY[0x1E0CD1328];
  v12 = v7;
  objc_msgSend(v10, sel_addObserver_selector_name_object_, v12, sel_handleSqueezeInteractionDidChangePaletteViewVisibilityNotification_, v11, 0);

  return v12;
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  int64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  void (*v37)(uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView));
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView)?);
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0C80A78](v10, v13);
  v16 = (char *)&v41 - v15;
  v17 = *v1;
  v18 = v1[1];
  v20 = v1[2];
  v19 = v1[3];
  v21 = v19;
  v22 = v1[4];
  v41 = v7;
  v44 = v20;
  if (v22)
  {
    v42 = v18;
    v43 = v12;
    v23 = v4;
    v24 = a1;
    v25 = (v22 - 1) & v22;
    v26 = __clz(__rbit64(v22)) | (v19 << 6);
LABEL_3:
    v27 = *(_QWORD *)(v17 + 48);
    v28 = v17;
    v29 = type metadata accessor for CRKeyPath();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v16, v27 + *(_QWORD *)(*(_QWORD *)(v29 - 8) + 72) * v26, v29);
    v30 = *(void **)(*(_QWORD *)(v28 + 56) + 8 * v26);
    *(_QWORD *)&v16[*(int *)(v3 + 48)] = v30;
    v4 = v23;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v16, 0, 1, v3);
    v31 = v30;
    a1 = v24;
    v18 = v42;
    v12 = v43;
    goto LABEL_23;
  }
  v32 = v19 + 1;
  if (__OFADD__(v19, 1))
  {
    __break(1u);
    return result;
  }
  v33 = (unint64_t)(v20 + 64) >> 6;
  if (v32 < v33)
  {
    v34 = *(_QWORD *)(v18 + 8 * v32);
    if (v34)
    {
LABEL_7:
      v42 = v18;
      v43 = v12;
      v23 = v4;
      v24 = a1;
      v25 = (v34 - 1) & v34;
      v26 = __clz(__rbit64(v34)) + (v32 << 6);
      v21 = v32;
      goto LABEL_3;
    }
    v35 = v19 + 2;
    v21 = v19 + 1;
    if (v19 + 2 < v33)
    {
      v34 = *(_QWORD *)(v18 + 8 * v35);
      if (v34)
      {
LABEL_10:
        v32 = v35;
        goto LABEL_7;
      }
      v21 = v19 + 2;
      if (v19 + 3 < v33)
      {
        v34 = *(_QWORD *)(v18 + 8 * (v19 + 3));
        if (v34)
        {
          v32 = v19 + 3;
          goto LABEL_7;
        }
        v35 = v19 + 4;
        v21 = v19 + 3;
        if (v19 + 4 < v33)
        {
          v34 = *(_QWORD *)(v18 + 8 * v35);
          if (v34)
            goto LABEL_10;
          v32 = v19 + 5;
          v21 = v19 + 4;
          if (v19 + 5 < v33)
          {
            v34 = *(_QWORD *)(v18 + 8 * v32);
            if (v34)
              goto LABEL_7;
            v21 = v33 - 1;
            v36 = v19 + 6;
            while (v33 != v36)
            {
              v34 = *(_QWORD *)(v18 + 8 * v36++);
              if (v34)
              {
                v32 = v36 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v28 = v17;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v16, 1, 1, v3);
  v25 = 0;
LABEL_23:
  *v1 = v28;
  v1[1] = v18;
  v1[2] = v44;
  v1[3] = v21;
  v1[4] = v25;
  v37 = (void (*)(uint64_t))v1[5];
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v16, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView)?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v3) == 1)
  {
    v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath, AnyCanvasElementView));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(a1, 1, 1, v38);
  }
  else
  {
    v39 = (uint64_t)v41;
    outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v12, (uint64_t)v41, (uint64_t *)&demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView));
    v37(v39);
    outlined destroy of StocksKitCurrencyCache.Provider?(v39, (uint64_t *)&demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView));
    v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath, AnyCanvasElementView));
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(a1, 0, 1, v40);
  }
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  void (*v19)(_OWORD *);
  uint64_t result;
  _OWORD v21[3];
  _OWORD v22[3];
  __int128 v23;
  _OWORD v24[2];

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v10);
    v13 = *v11;
    v12 = v11[1];
    outlined init with copy of Any(*(_QWORD *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    v16 = *(_QWORD *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      v9 = (v16 - 1) & v16;
      v10 = __clz(__rbit64(v16)) + (v14 << 6);
      v7 = v14;
      goto LABEL_3;
    }
    v17 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      v16 = *(_QWORD *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        v14 = v17;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        v16 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          v14 = v5 + 3;
          goto LABEL_7;
        }
        v17 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          v16 = *(_QWORD *)(v4 + 8 * v17);
          if (v16)
            goto LABEL_10;
          v14 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            v16 = *(_QWORD *)(v4 + 8 * v14);
            if (v16)
              goto LABEL_7;
            v7 = v15 - 1;
            v18 = v5 + 6;
            while (v15 != v18)
            {
              v16 = *(_QWORD *)(v4 + 8 * v18++);
              if (v16)
              {
                v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  memset(v24, 0, sizeof(v24));
  v23 = 0u;
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v19 = (void (*)(_OWORD *))v1[5];
  result = outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v23, (uint64_t)v22, &demangling cache variable for type metadata for (key: String, value: Any)?);
  if (*((_QWORD *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: Any));
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

id specialized CanvasElementController.toolPickerControllerWindowScene(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  id v4;
  id v5;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (!MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  v4 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(ObjectType, v2);
  swift_unknownObjectRelease();
  if (v4)
  {
    v5 = objc_msgSend(v4, sel_window);

    v4 = objc_msgSend(v5, sel_windowScene);
  }
  return v4;
}

void specialized CanvasElementController.toolPickerControllerConfigureToolPicker(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  void *v5;
  objc_class *v6;
  PKToolPicker v7;
  Class isa;
  id v9;

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (MEMORY[0x1DF0E666C](v2))
  {
    v3 = *(_QWORD *)(v2 + 8);
    ObjectType = swift_getObjectType();
    v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(ObjectType, v3);
    swift_unknownObjectRelease();
    if (v5)
    {
      v9 = objc_msgSend(v5, sel_window);

      if (v9)
      {
        v6 = (objc_class *)objc_msgSend((id)objc_opt_self(), sel__existingToolPickerForWindow_, v9);
        if (v6)
        {
          v7.super.isa = v6;
          -[objc_class addObserver:](v6, sel_addObserver_, v1);
          CanvasElementController.configureToolPicker(_:)(v7);

          isa = v7.super.isa;
        }
        else
        {
          isa = (Class)v9;
        }

      }
    }
  }
}

void specialized CanvasElementController.toolPickerController(_:willShowToolPicker:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  void *v5;
  id v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  id v17;

  v2 = v1;
  v4 = CanvasElementController.elementControllerToolPicker.getter();
  if (v4)
  {
    v5 = v4;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PKToolPicker);
    v6 = a1;
    v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) != 0)
    {
      objc_msgSend(v6, sel_addObserver_, v2);
      v8 = v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
      if (MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
      {
        v9 = *(_QWORD *)(v8 + 8);
        ObjectType = swift_getObjectType();
        v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(ObjectType, v9);
        swift_unknownObjectRelease();
        if (v11)
        {
          type metadata accessor for PaperTextAttachmentView();
          v12 = swift_dynamicCastClass();
          if (v12)
            objc_msgSend(v6, sel_addObserver_, v12);

        }
      }
      CanvasElementController.updateToolPickerContextualEditingView()();
      if (MEMORY[0x1DF0E666C](v8))
      {
        v13 = *(_QWORD *)(v8 + 8);
        v14 = swift_getObjectType();
        v15 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v14, v13);
        swift_unknownObjectRelease();
        if (v15)
        {
          v16 = *(void **)&v15[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
          v17 = v16;

          if (v16)
          {
            objc_msgSend(v17, sel_layoutSubviews);

          }
          else
          {
            __break(1u);
          }
        }
      }
    }
  }
}

uint64_t specialized CanvasElementController.toolPickerControllerViewController(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (!MEMORY[0x1DF0E666C](v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate))
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  ObjectType = swift_getObjectType();
  v4 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(ObjectType, v2);
  v5 = swift_unknownObjectRelease();
  if (!v4)
    return 0;
  v6 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x608))(v5);

  return v6;
}

id specialized CanvasElementController.toolPickerControllerViewControllerForPresentingUI(_:)()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t ObjectType;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  void *v8;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  v2 = (id)MEMORY[0x1DF0E666C](v1);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 8);
    ObjectType = swift_getObjectType();
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
    v6 = swift_unknownObjectRelease();
    if (v5)
    {
      v7 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x608);
      v8 = (void *)((uint64_t (*)(uint64_t))v7)(v6);
      v2 = objc_msgSend(v8, sel_presentedViewController);

      if (!v2)
        v2 = (id)v7();

    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void specialized CanvasElementController.toolPickerControllerAdjustOpacity(_:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t ObjectType;
  void *v5;
  id v6;
  id v7;
  id v8;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  v2 = (void *)MEMORY[0x1DF0E666C](v1);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 8);
    ObjectType = swift_getObjectType();
    v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
    swift_unknownObjectRelease();
    if (v5 && (v6 = objc_msgSend(v5, sel_window), v5, v6))
    {
      v7 = objc_msgSend((id)objc_opt_self(), sel_activeToolPickerForWindow_, v6);

      v2 = v7;
    }
    else
    {
      v2 = 0;
    }
  }
  v8 = v2;
  objc_msgSend(v2, sel__startOpacityEditing);

}

uint64_t sub_1DDD62A68()
{
  return swift_deallocObject();
}

void specialized static CanvasElementController.makeCanvasFirstResponder(_:)(void *a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v9[6];

  v2 = objc_msgSend(a1, sel_window);
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend((id)objc_opt_self(), sel_activeToolPickerForWindow_, v2);
    if (v4)
    {
      v5 = v4;
      v6 = swift_allocObject();
      *(_QWORD *)(v6 + 16) = a1;
      v9[4] = partial apply for closure #1 in static CanvasElementController.makeCanvasFirstResponder(_:);
      v9[5] = v6;
      v9[0] = MEMORY[0x1E0C809B0];
      v9[1] = 1107296256;
      v9[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      v9[3] = &block_descriptor_50;
      v7 = _Block_copy(v9);
      v8 = a1;
      swift_release();
      objc_msgSend(v5, sel__performWithVisibilityUpdatesEnabled_block_, 0, v7);
      _Block_release(v7);

      return;
    }

  }
  objc_msgSend(a1, sel_becomeFirstResponder);
}

uint64_t specialized closure #1 in CanvasElementController.addCanvasElement(from:completionHandler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), double a5, double a6, double a7, double a8, double a9)
{
  _BYTE *v10;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v10 = (_BYTE *)(a2 + 16);
  if (a1)
  {
    v17 = a1;
    specialized static CanvasElementController.makeCanvasFirstResponder(_:)(v17);
    v18 = AnyCanvas.acceptedDropLayouts.getter();
    v19 = *(_QWORD *)(v18 + 16);
    if (v19)
    {
      swift_beginAccess();
      v20 = v18 + 40;
      do
      {
        v21 = (*(uint64_t (**)(uint64_t, id, _QWORD, double, double, double, double, double))(*(_QWORD *)v20 + 16))(a3, v17, 0, a5, a6, a7, a8, a9);
        *v10 = v21 & 1;
        if ((v21 & 1) != 0)
          break;
        v20 += 16;
        --v19;
      }
      while (v19);
    }

    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  return a4(*v10);
}

void specialized CanvasElementController.visibleCanvasInsertIfNeeded(completion:)(char *a1, uint64_t a2, void *a3, uint64_t (*a4)(_QWORD), uint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t ObjectType;
  uint64_t (*v26)(uint64_t, uint64_t);
  void *v27;
  id v28;
  void *v29;
  double y;
  double width;
  double Height;
  _QWORD *v33;
  char v34;
  char v35;
  double v36;
  CGFloat v37;
  double v38;
  CGFloat v39;
  double v40;
  CGFloat v41;
  double v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat v45;
  CGFloat v46;
  CGFloat v47;
  void *v48;
  CGFloat *v49;
  uint64_t v50;
  void *v51;
  id v52;
  CGFloat *v53;
  void *v54;
  _QWORD *v55;
  id v56;
  id v57;
  id v58;
  id v59;
  void *v60;
  id v61;
  double v62;
  double x;
  id v64;
  void *v65;
  id v66;
  _QWORD *v67;
  uint64_t aBlock;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t (*v72)();
  CGFloat *v73;
  CGRect v74;
  CGRect v75;
  CGRect v76;
  CGRect v77;
  CGRect v78;

  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = a2;
  *(_QWORD *)(v22 + 24) = a3;
  *(double *)(v22 + 32) = a7;
  *(double *)(v22 + 40) = a8;
  *(double *)(v22 + 48) = a9;
  *(double *)(v22 + 56) = a10;
  *(double *)(v22 + 64) = a11;
  *(_QWORD *)(v22 + 72) = a4;
  *(_QWORD *)(v22 + 80) = a5;
  *(_QWORD *)(v22 + 88) = a6;
  v23 = &a1[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate];
  if (!MEMORY[0x1DF0E666C](&a1[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate]))
  {
    swift_retain();
    v59 = a3;
    swift_retain();
    goto LABEL_15;
  }
  v65 = a1;
  v24 = *((_QWORD *)v23 + 1);
  ObjectType = swift_getObjectType();
  v26 = *(uint64_t (**)(uint64_t, uint64_t))(v24 + 16);
  swift_retain();
  v64 = a3;
  swift_retain();
  v67 = (_QWORD *)v26(ObjectType, v24);
  swift_unknownObjectRelease();
  if (!v67)
  {
LABEL_15:
    swift_release();
    return;
  }
  v27 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v67) + 0x320))();
  if (v27)
  {
    v66 = v27;
    v28 = objc_msgSend(v27, sel_scrollView);
    if (v28)
    {
      v29 = v28;
      objc_msgSend(v67, sel_bounds);
      y = v74.origin.y;
      width = v74.size.width;
      x = v74.origin.x;
      Height = CGRectGetHeight(v74);
      if (one-time initialization token for defaultTextAttachmentHeight != -1)
        swift_once();
      if (Height <= *(double *)&static UIConstants.defaultTextAttachmentHeight)
        Height = *(double *)&static UIConstants.defaultTextAttachmentHeight;
      type metadata accessor for PaperTextAttachmentView();
      v62 = a11;
      if (swift_dynamicCastClass())
      {
        v33 = v67;
        PaperTextAttachmentView.isAtEndOfDocument.getter();
        v35 = v34;

        if ((v35 & 1) != 0)
        {
          objc_msgSend(v66, sel_bounds);
          Height = Height + CGRectGetHeight(v75);
        }
      }
      objc_msgSend(v67, sel_convertRect_toCoordinateSpace_, v66, x, y, width, Height);
      v37 = v36;
      v39 = v38;
      v41 = v40;
      v43 = v42;
      objc_msgSend(v66, sel_bounds);
      v78.origin.x = v44;
      v78.origin.y = v45;
      v78.size.width = v46;
      v78.size.height = v47;
      v76.origin.x = v37;
      v76.origin.y = v39;
      v76.size.width = v41;
      v76.size.height = v43;
      v77 = CGRectIntersection(v76, v78);
      if (CGRectGetHeight(v77) < *(double *)&static UIConstants.defaultTextAttachmentHeight)
      {
        v48 = (void *)objc_opt_self();
        v49 = (CGFloat *)swift_allocObject();
        *((_QWORD *)v49 + 2) = v29;
        v49[3] = v37;
        v49[4] = v39;
        v49[5] = v41;
        v49[6] = v43;
        v72 = partial apply for closure #1 in CanvasElementController.visibleCanvasInsertIfNeeded(completion:);
        v73 = v49;
        v50 = MEMORY[0x1E0C809B0];
        aBlock = MEMORY[0x1E0C809B0];
        v69 = 1107296256;
        v70 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
        v71 = &block_descriptor_43;
        v51 = _Block_copy(&aBlock);
        v52 = v29;
        swift_release();
        v53 = (CGFloat *)swift_allocObject();
        *((_QWORD *)v53 + 2) = v67;
        *((_QWORD *)v53 + 3) = v52;
        *((_QWORD *)v53 + 4) = v66;
        *((_QWORD *)v53 + 5) = partial apply for closure #1 in CanvasElementController.addCanvasElement(from:completionHandler:);
        *((_QWORD *)v53 + 6) = v22;
        *((_QWORD *)v53 + 7) = v65;
        v72 = partial apply for closure #2 in CanvasElementController.visibleCanvasInsertIfNeeded(completion:);
        v73 = v53;
        aBlock = v50;
        v69 = 1107296256;
        v70 = thunk for @escaping @callee_guaranteed (@unowned PDFRequirePasswordsResult) -> ();
        v71 = &block_descriptor_13_2;
        v54 = _Block_copy(&aBlock);
        v55 = v67;
        v56 = v52;
        v57 = v66;
        swift_retain();
        v58 = v65;
        swift_release();
        objc_msgSend(v48, sel_animateWithDuration_animations_completion_, v51, v54, 0.3);

        _Block_release(v54);
        _Block_release(v51);
        swift_release();
        return;
      }
      swift_retain();
      v61 = v64;
      swift_retain();
      specialized getCanvas #1 () in CanvasElementController.visibleCanvasInsertIfNeeded(completion:)(v67, (uint64_t)v29, v66, v65, a2, v61, a4, a5, a7, a8, a9, a10, v62, a6);
      swift_release();

    }
    else
    {
      swift_release();

    }
    v60 = v66;
  }
  else
  {
    swift_release();
    v60 = v67;
  }

}

uint64_t block_copy_helper_43(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_43()
{
  return swift_release();
}

void partial apply for closure #1 in getCanvas #1 () in CanvasElementController.visibleCanvasInsertIfNeeded(completion:)()
{
  uint64_t v0;

  closure #1 in getCanvas #1 () in CanvasElementController.visibleCanvasInsertIfNeeded(completion:)(*(_QWORD *)(v0 + 16), *(void (**)(id))(v0 + 24));
}

uint64_t sub_1DDD6395C()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in CanvasElementController.visibleCanvasInsertIfNeeded(completion:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_scrollRectToVisible_animated_, 0, *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
}

uint64_t objectdestroy_9Tm_0()
{
  id *v0;

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in CanvasElementController.visibleCanvasInsertIfNeeded(completion:)()
{
  uint64_t v0;

  return getCanvas #1 () in CanvasElementController.visibleCanvasInsertIfNeeded(completion:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(uint64_t (**)(void *))(v0 + 40), *(_QWORD *)(v0 + 48), *(void **)(v0 + 56));
}

uint64_t objectdestroy_3Tm()
{
  uint64_t v0;

  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CanvasElementController.addCanvasElement(from:completionHandler:)(void *a1)
{
  uint64_t v1;

  return specialized closure #1 in CanvasElementController.addCanvasElement(from:completionHandler:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(_QWORD))(v1 + 72), *(double *)(v1 + 32), *(double *)(v1 + 40), *(double *)(v1 + 48), *(double *)(v1 + 56), *(double *)(v1 + 64));
}

uint64_t sub_1DDD63A48()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in static CanvasElementController.makeCanvasFirstResponder(_:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_becomeFirstResponder);
}

uint64_t sub_1DDD63A7C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for Capsule();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

void partial apply for closure #1 in CanvasElementController.addCanvasElement<A>(_:)(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  v6 = *(_QWORD *)(type metadata accessor for Capsule() - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  closure #1 in CanvasElementController.addCanvasElement<A>(_:)(a1, (uint64_t)v1 + v7, *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFF8)), v3, v4, v5);
}

char *partial apply for closure #1 in CanvasElementController.configureToolPicker(_:)(void *a1)
{
  return closure #1 in CanvasElementController.configureToolPicker(_:)(a1);
}

uint64_t sub_1DDD63B74()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in ToolPickerController.makeSignaturesViewController(rootViewController:)(void *a1)
{
  uint64_t v1;

  closure #1 in ToolPickerController.makeSignaturesViewController(rootViewController:)(a1, v1);
}

uint64_t partial apply for closure #3 in CanvasElementController.changeSelectedStrokeWidth(_:)()
{
  uint64_t v0;

  return updateElements #1 (elements:) in CanvasElementController.changeSelectedStrokeWidth(_:)(*(_QWORD *)(v0 + 24), *(double *)(v0 + 16));
}

uint64_t partial apply for closure #1 in SignatureView.width.setter()
{
  return closure #1 in SignatureView.width.setter();
}

uint64_t sub_1DDD63BD0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1DDD63BF4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ShapeView.shapeStrokeWidth.setter()
{
  return closure #1 in ShapeView.shapeStrokeWidth.setter();
}

_QWORD *sub_1DDD63C1C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v5;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD))(*(_QWORD *)(a2 + a1 - 8) + 64))(&v5, *(_QWORD *)(a2 + a1 - 24));
  *a3 = v5;
  return result;
}

uint64_t sub_1DDD63C68(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *(_QWORD *)(a4 + a3 - 24);
  v5 = *(_QWORD *)(a4 + a3 - 8);
  v7 = *a1;
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 72))(&v7, v4);
}

uint64_t sub_1DDD63CB0()
{
  return 24;
}

__n128 sub_1DDD63CBC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDD63CD8()
{
  return 24;
}

__n128 sub_1DDD63CE4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

void specialized CanvasElementController._toolPicker(_:didChange:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t (*v5)(uint64_t, uint64_t);
  id v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  void *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;

  if (a1)
  {
    v2 = v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
    if (MEMORY[0x1DF0E666C](v2))
    {
      v3 = *(_QWORD *)(v2 + 8);
      ObjectType = swift_getObjectType();
      v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
      v6 = a1;
      v7 = (_QWORD *)v5(ObjectType, v3);
      v8 = swift_unknownObjectRelease();
      if (v7)
      {
        v9 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v7) + 0x320);
        v10 = (void *)((uint64_t (*)(uint64_t))v9)(v8);
        if (v10)
        {
          v11 = v10;
          v12 = objc_msgSend(v10, sel_selectionInteraction);

          LOBYTE(v11) = objc_msgSend(v12, sel_currentSelectionHasStrokes);
          if ((v11 & 1) != 0)
          {
            v13 = (void *)v9();
            objc_msgSend(v13, sel_setSelectedStrokesColor_, v6);

          }
        }

      }
    }
    else
    {
      v14 = a1;
    }
    CanvasElementController.updateToolPickerContextualEditingView()();

  }
}

uint64_t specialized CanvasElementController._toolPickerCurrentSelectionColor(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  char *v15;
  uint64_t result;
  void *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t i;
  _QWORD *v23;
  void *v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t j;
  id v29;
  void *v30;
  _QWORD *v31;
  char *v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0DEE9D8];
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
  else
    v8 = MEMORY[0x1E0DEE9E8];
  v43 = v8;
  CanvasElementController.selectedTextBoxColors()();
  if (v9)
    specialized Set.formUnion<A>(_:)(v9);
  v10 = CanvasElementController.selectedSignatureColors()();
  if (v10)
  {
    v11 = v10;
    if ((v10 & 0xC000000000000001) != 0)
    {
      if (__CocoaSet.count.getter())
      {
LABEL_8:
        specialized Set.formUnion<A>(_:)(v11);
        goto LABEL_11;
      }
    }
    else if (*(_QWORD *)(v10 + 16))
    {
      goto LABEL_8;
    }
    swift_bridgeObjectRelease();
  }
LABEL_11:
  v12 = v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate;
  if (!MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate)
    || (v13 = *(_QWORD *)(v12 + 8),
        ObjectType = swift_getObjectType(),
        v15 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(ObjectType, v13),
        result = swift_unknownObjectRelease(),
        !v15))
  {
LABEL_52:
    v35 = v43;
    if ((v43 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      v36 = __CocoaSet.count.getter();
      swift_bridgeObjectRelease();
      if (v36 == 1)
      {
LABEL_54:
        v37 = specialized Collection.first.getter(v35);
LABEL_57:
        swift_bridgeObjectRelease();
        return v37;
      }
    }
    else if (*(_QWORD *)(v43 + 16) == 1)
    {
      goto LABEL_54;
    }
    v37 = 0;
    goto LABEL_57;
  }
  v17 = *(void **)&v15[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (v17)
  {
    v18 = v17;
    v19 = swift_bridgeObjectRetain();
    v20 = specialized Sequence.compactMap<A>(_:)(v19, (uint64_t)v18);

    result = swift_bridgeObjectRelease();
    v41 = v7;
    if (v20 >> 62)
    {
      swift_bridgeObjectRetain();
      v21 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v21)
      {
LABEL_16:
        if (v21 < 1)
        {
          __break(1u);
LABEL_61:
          __break(1u);
          goto LABEL_62;
        }
        for (i = 0; i != v21; ++i)
        {
          if ((v20 & 0xC000000000000001) != 0)
            v23 = (_QWORD *)MEMORY[0x1DF0E4D64](i, v20);
          else
            v23 = *(id *)(v20 + 8 * i + 32);
          v24 = v23;
          v25 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v23) + 0x2D0))();

          if (v25)
          {

          }
          else
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
          }
        }
        swift_bridgeObjectRelease();
        v26 = v41;
        v42 = MEMORY[0x1E0DEE9D8];
        if ((v41 & 0x8000000000000000) != 0)
          goto LABEL_46;
LABEL_31:
        if ((v26 & 0x4000000000000000) == 0)
        {
          v27 = *(_QWORD *)(v26 + 16);
          result = swift_retain();
          if (!v27)
          {
LABEL_47:
            swift_release();
            v34 = MEMORY[0x1E0DEE9D8];
            goto LABEL_48;
          }
          goto LABEL_33;
        }
LABEL_46:
        swift_retain();
        result = _CocoaArrayWrapper.endIndex.getter();
        v27 = result;
        if (!result)
          goto LABEL_47;
LABEL_33:
        if (v27 >= 1)
        {
          for (j = 0; j != v27; ++j)
          {
            if ((v26 & 0xC000000000000001) != 0)
              v29 = (id)MEMORY[0x1DF0E4D64](j, v26);
            else
              v29 = *(id *)(v26 + 8 * j + 32);
            v30 = v29;
            type metadata accessor for ShapeView();
            v31 = (_QWORD *)swift_dynamicCastClass();
            if (!v31)
              goto LABEL_35;
            v32 = (char *)v31 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v31) + 0x380);
            swift_beginAccess();
            (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v32, v2);
            swift_getKeyPath();
            lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
            Capsule<>.subscript.getter();
            swift_release();
            (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
            v33 = v40;
            if (v40)
            {
              objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v40);

              MEMORY[0x1DF0E4398]();
              if (*(_QWORD *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
            }
            else
            {
LABEL_35:

            }
          }
          swift_release();
          v34 = v42;
LABEL_48:
          swift_release();
          if (v34 >> 62)
          {
            swift_bridgeObjectRetain();
            v38 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!v38)
              goto LABEL_51;
          }
          else if (!*(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
LABEL_51:
            swift_bridgeObjectRelease();
            goto LABEL_52;
          }
          specialized Set.formUnion<A>(_:)(v34);
          goto LABEL_51;
        }
        goto LABEL_61;
      }
    }
    else
    {
      v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v21)
        goto LABEL_16;
    }
    swift_bridgeObjectRelease();
    v26 = MEMORY[0x1E0DEE9D8];
    v42 = v7;
    if ((MEMORY[0x1E0DEE9D8] & 0x8000000000000000) != 0)
      goto LABEL_46;
    goto LABEL_31;
  }
LABEL_62:
  __break(1u);
  return result;
}

void specialized CanvasElementController._toolPickerDidInvokeAddTextBox(_:)()
{
  uint64_t v0;
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t ObjectType;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  char *v6;

  v1 = *(char **)(v0 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController);
  if (v1)
  {
    v2 = &v1[OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate];
    if (MEMORY[0x1DF0E666C](&v1[OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate]))
    {
      v3 = *((_QWORD *)v2 + 1);
      ObjectType = swift_getObjectType();
      v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 56);
      v6 = v1;
      v5(10, ObjectType, v3);

      swift_unknownObjectRelease();
    }
  }
}

uint64_t specialized CanvasElementController._toolPickerDidInvokeInsertSticker(_:from:)(uint64_t result)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t ObjectType;
  void (*v7)(uint64_t, double (*)(_QWORD, _QWORD), _QWORD, uint64_t, uint64_t);
  char *v8;

  v2 = *(char **)(v1 + OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController);
  if (v2)
  {
    v3 = result;
    v4 = &v2[OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate];
    result = MEMORY[0x1DF0E666C](&v2[OBJC_IVAR____TtC8PaperKit20ToolPickerController_delegate]);
    if (result)
    {
      v5 = *((_QWORD *)v4 + 1);
      ObjectType = swift_getObjectType();
      v7 = *(void (**)(uint64_t, double (*)(_QWORD, _QWORD), _QWORD, uint64_t, uint64_t))(v5 + 72);
      v8 = v2;
      v7(v3, UnknownCanvasElementView.flags.modify, 0, ObjectType, v5);

      return swift_unknownObjectRelease();
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UIColor and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UIColor and conformance NSObject;
  if (!lazy protocol witness table cache variable for type UIColor and conformance NSObject)
  {
    v1 = type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance NSObject);
  }
  return result;
}

uint64_t partial apply for closure #1 in ShapeView.lineEnds.setter()
{
  return closure #1 in ShapeView.lineEnds.setter();
}

uint64_t partial apply for closure #1 in ShapeView.shapeOpacity.setter()
{
  return closure #1 in ShapeView.shapeOpacity.setter();
}

uint64_t CRAsset.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(uint64_t a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v4 + 89) = a3;
  *(_BYTE *)(v4 + 88) = a2;
  *(_QWORD *)(v4 + 56) = a1;
  *(_QWORD *)(v4 + 64) = v3;
  return swift_task_switch();
}

uint64_t CRAsset.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  objc_class *v5;
  char *v6;
  uint64_t *v7;
  id v8;
  id v9;
  CGImage *v10;
  int64_t v11;
  int64_t Width;
  int64_t Height;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  id v22;
  id v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  if (one-time initialization token for imageCache != -1)
    swift_once();
  v1 = static CRAsset.imageCache;
  swift_retain();
  v2 = CRAsset.digest.getter();
  v4 = v3;
  v5 = (objc_class *)type metadata accessor for AssetInfo();
  v6 = (char *)objc_allocWithZone(v5);
  v7 = (uint64_t *)&v6[OBJC_IVAR____TtC8PaperKit9AssetInfo_digest];
  *v7 = v2;
  v7[1] = v4;
  *(_QWORD *)&v6[OBJC_IVAR____TtC8PaperKit9AssetInfo_maxDimensionInPixels] = 0;
  *(_QWORD *)(v0 + 16) = v6;
  *(_QWORD *)(v0 + 24) = v5;
  v8 = objc_msgSendSuper2((objc_super *)(v0 + 16), sel_init);
  v9 = objc_msgSend(*(id *)(v1 + 16), sel_objectForKey_, v8);
  type metadata accessor for CGImageRef(0);
  v10 = (CGImage *)swift_dynamicCastUnknownClass();

  swift_release();
  if (v10)
  {
    v11 = *(_QWORD *)(v0 + 56);
    Width = CGImageGetWidth(v10);
    Height = CGImageGetHeight(v10);
    if (Height <= Width)
      v14 = Width;
    else
      v14 = Height;
    if (v14 <= v11)
      return (*(uint64_t (**)(CGImage *))(v0 + 8))(v10);

  }
  else
  {
    swift_unknownObjectRelease();
  }
  v15 = *(_QWORD *)(v0 + 56);
  v16 = static CRAsset.imageCache;
  swift_retain();
  v17 = CRAsset.digest.getter();
  v19 = v18;
  v20 = (char *)objc_allocWithZone(v5);
  v21 = (uint64_t *)&v20[OBJC_IVAR____TtC8PaperKit9AssetInfo_digest];
  *v21 = v17;
  v21[1] = v19;
  *(_QWORD *)&v20[OBJC_IVAR____TtC8PaperKit9AssetInfo_maxDimensionInPixels] = v15;
  *(_QWORD *)(v0 + 32) = v20;
  *(_QWORD *)(v0 + 40) = v5;
  v22 = objc_msgSendSuper2((objc_super *)(v0 + 32), sel_init);
  v23 = objc_msgSend(*(id *)(v16 + 16), sel_objectForKey_, v22);
  v10 = (CGImage *)swift_dynamicCastUnknownClass();

  swift_release();
  if (v10)
    return (*(uint64_t (**)(CGImage *))(v0 + 8))(v10);
  v25 = *(unsigned __int8 *)(v0 + 89);
  v27 = *(_QWORD *)(v0 + 56);
  v26 = *(_QWORD *)(v0 + 64);
  swift_unknownObjectRelease();
  v28 = swift_task_alloc();
  *(_QWORD *)(v0 + 72) = v28;
  *(_QWORD *)(v28 + 16) = v26;
  *(_QWORD *)(v28 + 24) = v27;
  *(_BYTE *)(v28 + 32) = v25;
  v29 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v29;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CGImageRef?);
  *v29 = v0;
  v29[1] = CRAsset.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:);
  return CRAsset.read<A>(waitIfUnavailable:withAsyncAccessor:)();
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 48) == 1)
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  else
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 48));
}

uint64_t CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(uint64_t a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v4 + 137) = a3;
  *(_BYTE *)(v4 + 136) = a2;
  *(_QWORD *)(v4 + 64) = a1;
  *(_QWORD *)(v4 + 72) = v3;
  v5 = type metadata accessor for CRAsset();
  *(_QWORD *)(v4 + 80) = v5;
  *(_QWORD *)(v4 + 88) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 96) = swift_task_alloc();
  *(_QWORD *)(v4 + 104) = type metadata accessor for CRAssetOrData();
  *(_QWORD *)(v4 + 112) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)()
{
  uint64_t v0;
  uint64_t *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t inited;
  void *v9;
  id v10;
  const __CFDictionary *isa;
  const __CFData *v12;
  CGImageSourceRef v13;
  CGImageRef v14;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  outlined init with copy of CRAssetOrData(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 112));
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v1 = *(uint64_t **)(v0 + 112);
    v2 = *(_BYTE *)(v0 + 137);
    v3 = *(_QWORD *)(v0 + 64);
    v4 = *v1;
    v5 = v1[1];
    v7 = v1[2];
    v6 = v1[3];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Bool)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
    v9 = (void *)*MEMORY[0x1E0CBD240];
    *(_QWORD *)(inited + 32) = *MEMORY[0x1E0CBD240];
    *(_BYTE *)(inited + 40) = 0;
    v10 = v9;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    type metadata accessor for CFStringRef(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v12 = Data._bridgeToObjectiveC()().super.isa;
    v13 = CGImageSourceCreateWithData(v12, isa);

    outlined copy of Data._Representation(v4, v5);
    v14 = specialized static CRAsset.loadImageSrc(_:digest:maxDimensionInPixels:isHDRAllowed:)(v13, v4, v5, v3, v2);
    outlined consume of Data._Representation(v4, v5);

    outlined consume of Data._Representation(v4, v5);
    outlined consume of Data._Representation(v7, v6);
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(CGImageRef))(v0 + 8))(v14);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 32))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 80));
    v16 = swift_task_alloc();
    *(_QWORD *)(v0 + 120) = v16;
    *(_QWORD *)v16 = v0;
    *(_QWORD *)(v16 + 8) = CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:);
    v17 = *(_QWORD *)(v0 + 96);
    v18 = *(_BYTE *)(v0 + 136);
    v19 = *(_QWORD *)(v0 + 64);
    *(_BYTE *)(v16 + 89) = *(_BYTE *)(v0 + 137);
    *(_BYTE *)(v16 + 88) = v18;
    *(_QWORD *)(v16 + 56) = v19;
    *(_QWORD *)(v16 + 64) = v17;
    return swift_task_switch();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
  v1 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

BOOL AssetInfo.isEqual(_:)(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  _BYTE v11[24];
  uint64_t v12;

  outlined init with copy of Any?(a1, (uint64_t)v11);
  if (v12)
  {
    type metadata accessor for AssetInfo();
    if ((swift_dynamicCast() & 1) != 0)
    {
      if (v10 == v1)
      {

        return 1;
      }
      v2 = *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit9AssetInfo_digest];
      v3 = *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit9AssetInfo_digest + 8];
      v4 = *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit9AssetInfo_digest];
      v5 = *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit9AssetInfo_digest + 8];
      outlined copy of Data._Representation(v4, v5);
      specialized static Data.== infix(_:_:)(v2, v3);
      LOBYTE(v2) = v6;
      outlined consume of Data._Representation(v4, v5);
      if ((v2 & 1) != 0)
      {
        v7 = *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit9AssetInfo_maxDimensionInPixels];
        v8 = *(_QWORD *)&v10[OBJC_IVAR____TtC8PaperKit9AssetInfo_maxDimensionInPixels];

        return v7 == v8;
      }

    }
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for Any?);
  }
  return 0;
}

id AssetInfo.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AssetInfo();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for AssetInfo()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for AssetCache()
{
  return objc_opt_self();
}

id one-time initialization function for imageCache()
{
  uint64_t v0;
  id result;

  type metadata accessor for AssetCache();
  v0 = swift_allocObject();
  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D38]), sel_init);
  *(_QWORD *)(v0 + 16) = result;
  static CRAsset.imageCache = v0;
  return result;
}

uint64_t closure #1 in CRAsset.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;

  *(_BYTE *)(v5 + 176) = a5;
  *(_QWORD *)(v5 + 160) = a3;
  *(_QWORD *)(v5 + 168) = a4;
  *(_QWORD *)(v5 + 144) = a1;
  *(_QWORD *)(v5 + 152) = a2;
  return swift_task_switch();
}

uint64_t closure #1 in CRAsset.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)()
{
  uint64_t v0;
  uint64_t inited;
  void *v2;
  id v3;
  NSDictionary v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  CGImageRef *v8;
  NSURL *v9;
  const __CFURL *v10;
  const __CFURL *v11;
  CGImageSourceRef v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  CGImageRef v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  const __CFData *isa;
  CGImageSourceRef v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  CGImageRef v31;
  CGImageRef *v32;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Bool)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
  v2 = (void *)*MEMORY[0x1E0CBD240];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0CBD240];
  *(_BYTE *)(inited + 40) = 0;
  v3 = v2;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  v4.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    v5 = *(_QWORD **)(v0 + 144);

    *v5 = 0;
  }
  else
  {
    CRAsset.assetManager.getter();
    CRAssetManager.encryptionDelegate.getter();
    swift_release();
    if (*(_QWORD *)(v0 + 128))
    {
      outlined init with take of FindResult((__int128 *)(v0 + 104), v0 + 64);
      v17 = Data.init(contentsOf:options:)();
      v19 = v18;
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 88));
      v21 = dispatch thunk of EncryptionDelegate.decrypt(_:)();
      v23 = v22;
      v30 = *(_BYTE *)(v0 + 176);
      v29 = *(_QWORD *)(v0 + 168);
      v32 = *(CGImageRef **)(v0 + 144);
      isa = Data._bridgeToObjectiveC()().super.isa;
      v25 = CGImageSourceCreateWithData(isa, v4.super.isa);

      v26 = CRAsset.digest.getter();
      v28 = v27;
      v31 = specialized static CRAsset.loadImageSrc(_:digest:maxDimensionInPixels:isHDRAllowed:)(v25, v26, v27, v29, v30);

      outlined consume of Data._Representation(v17, v19);
      outlined consume of Data._Representation(v21, v23);

      outlined consume of Data._Representation(v26, v28);
      *v32 = v31;
      __swift_destroy_boxed_opaque_existential_1(v0 + 64);
    }
    else
    {
      v6 = *(_BYTE *)(v0 + 176);
      v7 = *(_QWORD *)(v0 + 168);
      v8 = *(CGImageRef **)(v0 + 144);
      outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 104, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
      URL._bridgeToObjectiveC()(v9);
      v11 = v10;
      v12 = CGImageSourceCreateWithURL(v10, v4.super.isa);

      v13 = CRAsset.digest.getter();
      v15 = v14;
      v16 = specialized static CRAsset.loadImageSrc(_:digest:maxDimensionInPixels:isHDRAllowed:)(v12, v13, v14, v7, v6);

      outlined consume of Data._Representation(v13, v15);
      *v8 = v16;
    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

CGImageRef specialized static CRAsset.loadImageSrc(_:digest:maxDimensionInPixels:isHDRAllowed:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  uint64_t inited;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  CGImageSource *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  char v21;
  void *v22;
  void *v23;
  ValueMetadata *v24;
  id v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  void *v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  unint64_t v33;
  char v34;
  CFDictionaryRef v35;
  CFDictionaryRef v36;
  uint64_t v37;
  void *v38;
  id v39;
  uint64_t v40;
  CGImageRef ThumbnailAtIndex;
  id v42;
  unint64_t v43;
  char v44;
  id receiver;
  void *v46;
  id v47;
  uint64_t v48;
  id v49;
  unint64_t v50;
  char v51;
  id v52;
  const __CFDictionary *isa;
  CGImage *v54;
  uint64_t v55;
  uint64_t v56;
  objc_class *v57;
  char *v58;
  uint64_t *v59;
  CGImage *v60;
  id v61;
  objc_super v65[2];
  objc_super v66;
  __int128 v67;
  ValueMetadata *v68;
  unint64_t v69;

  if (!a1)
    return 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF368C0;
  v9 = (void *)*MEMORY[0x1E0CBD178];
  v10 = MEMORY[0x1E0DEAFA0];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0CBD178];
  *(_BYTE *)(inited + 40) = 1;
  v11 = (void *)*MEMORY[0x1E0CBD240];
  *(_QWORD *)(inited + 64) = v10;
  *(_QWORD *)(inited + 72) = v11;
  *(_BYTE *)(inited + 80) = 1;
  v12 = (void *)*MEMORY[0x1E0CBD250];
  *(_QWORD *)(inited + 104) = v10;
  *(_QWORD *)(inited + 112) = v12;
  *(_BYTE *)(inited + 120) = 1;
  v13 = (void *)*MEMORY[0x1E0CBD190];
  *(_QWORD *)(inited + 144) = v10;
  *(_QWORD *)(inited + 152) = v13;
  *(_BYTE *)(inited + 160) = 1;
  v14 = (void *)*MEMORY[0x1E0CBD2A0];
  *(_QWORD *)(inited + 184) = v10;
  *(_QWORD *)(inited + 192) = v14;
  *(_QWORD *)(inited + 224) = MEMORY[0x1E0DEB418];
  *(_QWORD *)(inited + 200) = a4;
  v15 = a1;
  v16 = v9;
  v17 = v11;
  v18 = v12;
  v19 = v13;
  v20 = v14;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  v68 = &type metadata for MobileQuickLookFeatureFlags;
  v69 = lazy protocol witness table accessor for type MobileQuickLookFeatureFlags and conformance MobileQuickLookFeatureFlags();
  LOBYTE(v67) = 1;
  v21 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v67);
  if ((v21 & 1) != 0 && (a5 & 1) != 0)
  {
    v22 = (void *)*MEMORY[0x1E0CBD1A0];
    v23 = (void *)*MEMORY[0x1E0CBD1B0];
    type metadata accessor for CFStringRef(0);
    v68 = v24;
    *(_QWORD *)&v67 = v23;
    outlined init with take of Any(&v67, v65);
    v25 = v22;
    v26 = v23;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v65, v25, isUniquelyReferenced_nonNull_native);

    swift_bridgeObjectRelease();
    v28 = (void *)*MEMORY[0x1E0CBD1A8];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Bool)>);
    v29 = swift_initStackObject();
    *(_OWORD *)(v29 + 16) = xmmword_1DDF32CF0;
    v30 = (void *)*MEMORY[0x1E0CBC6B0];
    *(_QWORD *)(v29 + 32) = *MEMORY[0x1E0CBC6B0];
    *(_BYTE *)(v29 + 40) = 1;
    v31 = v28;
    v32 = v30;
    v33 = specialized Dictionary.init(dictionaryLiteral:)(v29);
    v68 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CFStringRef : Bool]);
    *(_QWORD *)&v67 = v33;
    outlined init with take of Any(&v67, v65);
    v34 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v65, v31, v34);

    swift_bridgeObjectRelease();
  }
  v35 = CGImageSourceCopyPropertiesAtIndex(v15, 0, 0);
  if (!v35)
    goto LABEL_27;
  v36 = v35;
  type metadata accessor for NSObject();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSObject and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for NSObject, MEMORY[0x1E0DEFCF8]);
  v37 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v38 = (void *)*MEMORY[0x1E0CBD048];
  if ((v37 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v39 = v38;
    v40 = __CocoaDictionary.lookup(_:)();

    swift_bridgeObjectRelease();
    if (!v40)
      goto LABEL_26;
  }
  else
  {
    if (!*(_QWORD *)(v37 + 16))
      goto LABEL_26;
    swift_bridgeObjectRetain();
    v42 = v38;
    v43 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v42);
    if ((v44 & 1) == 0)
    {

      swift_bridgeObjectRelease_n();
LABEL_27:
      v52 = 0;
      goto LABEL_28;
    }
    v40 = *(_QWORD *)(*(_QWORD *)(v37 + 56) + 8 * v43);
    swift_unknownObjectRetain();

    swift_bridgeObjectRelease();
  }
  *(_QWORD *)&v67 = v40;
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_26;
  receiver = v65[0].receiver;
  v46 = (void *)*MEMORY[0x1E0CBD040];
  if ((v37 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(v37 + 16))
    {
      v49 = v46;
      v50 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v49);
      if ((v51 & 1) != 0)
      {
        v48 = *(_QWORD *)(*(_QWORD *)(v37 + 56) + 8 * v50);
        swift_unknownObjectRetain();

        swift_bridgeObjectRelease();
        goto LABEL_21;
      }

    }
LABEL_26:
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  v47 = v46;
  v48 = __CocoaDictionary.lookup(_:)();

  swift_bridgeObjectRelease();
  if (!v48)
    goto LABEL_27;
LABEL_21:
  *(_QWORD *)&v67 = v48;
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_27;
  if ((uint64_t)v65[0].receiver <= (uint64_t)receiver)
    v52 = receiver;
  else
    v52 = v65[0].receiver;
LABEL_28:
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  ThumbnailAtIndex = CGImageSourceCreateThumbnailAtIndex(v15, 0, isa);

  if (ThumbnailAtIndex && a3 >> 60 != 15)
  {
    v54 = ThumbnailAtIndex;
    outlined copy of Data?(a2, a3);
    if (one-time initialization token for imageCache != -1)
      swift_once();
    v55 = static CRAsset.imageCache;
    if ((uint64_t)v52 <= a4)
      v56 = 0;
    else
      v56 = a4;
    v57 = (objc_class *)type metadata accessor for AssetInfo();
    v58 = (char *)objc_allocWithZone(v57);
    v59 = (uint64_t *)&v58[OBJC_IVAR____TtC8PaperKit9AssetInfo_digest];
    *v59 = a2;
    v59[1] = a3;
    *(_QWORD *)&v58[OBJC_IVAR____TtC8PaperKit9AssetInfo_maxDimensionInPixels] = v56;
    v60 = v54;
    outlined copy of Data?(a2, a3);
    v66.receiver = v58;
    v66.super_class = v57;
    swift_retain();
    v61 = objc_msgSendSuper2(&v66, sel_init);
    objc_msgSend(*(id *)(v55 + 16), sel_setObject_forKey_, v60, v61);

    outlined consume of Data?(a2, a3);
    swift_release();
  }
  else
  {

  }
  return ThumbnailAtIndex;
}

uint64_t partial apply for closure #1 in CRAsset.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  v8 = *(_BYTE *)(v2 + 32);
  v9 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v9;
  *(_QWORD *)v9 = v3;
  *(_QWORD *)(v9 + 8) = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  *(_BYTE *)(v9 + 176) = v8;
  *(_QWORD *)(v9 + 160) = v6;
  *(_QWORD *)(v9 + 168) = v7;
  *(_QWORD *)(v9 + 144) = a1;
  *(_QWORD *)(v9 + 152) = a2;
  return swift_task_switch();
}

void ResizeView.init(frame:canvas:resizeHandles:)(void *a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  _BYTE *v6;
  _BYTE *v7;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  _BYTE *v19;
  uint64_t v20;
  objc_class *v21;
  id v22;
  _BYTE *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  Swift::String v35;
  Swift::String_optional v36;
  Swift::String v37;
  uint64_t countAndFlagsBits;
  void *v39;
  id v40;
  void *v41;
  char *v42;
  uint64_t v43;
  void *v44;
  char *v45;
  id v46;
  id v47;
  id v48;
  id v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void *v54;
  id v55;
  uint64_t v56;
  void *v57;
  void *v58;
  objc_class *v59;
  _BYTE *v60;
  _BYTE *v61;
  uint64_t v62;
  char *v63;
  void *v64;
  void *v65;
  objc_super v66;
  objc_super v67;
  uint64_t v68;
  Swift::String v69;

  v7 = v6;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit10ResizeView_controlHandles] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle] = 0;
  v14 = &v7[OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace];
  *v14 = 0x3FF0000000000000;
  v14[1] = 0;
  v14[2] = 0;
  v14[3] = 0x3FF0000000000000;
  v14[4] = 0;
  v14[5] = 0;
  v15 = &v7[OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpaceScaled];
  *v15 = 0x3FF0000000000000;
  v15[1] = 0;
  v15[2] = 0;
  v15[3] = 0x3FF0000000000000;
  v15[4] = 0;
  v15[5] = 0;
  v16 = &v7[OBJC_IVAR____TtC8PaperKit10ResizeView_originalControlPointLocation];
  *v16 = 0;
  v16[1] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit10ResizeView_dragGestureRecognizer] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit10ResizeView_rotationGestureRecognizer] = 0;
  v17 = &v7[OBJC_IVAR____TtC8PaperKit10ResizeView_transientResizeTransform];
  *(_OWORD *)v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *((_OWORD *)v17 + 2) = 0u;
  v17[48] = 1;
  v7[OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing] = 0;
  v7[OBJC_IVAR____TtC8PaperKit10ResizeView_dragConstainedAxis] = 0;
  v18 = &v7[OBJC_IVAR____TtC8PaperKit10ResizeView_nudgeDelta];
  *v18 = 0;
  v18[1] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit10ResizeView_nudgeTimer] = 0;
  v65 = a1;
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    v19 = v7;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_1DDF31350;
    v21 = (objc_class *)type metadata accessor for CanvasElementResizeHandle();
    v22 = objc_allocWithZone(v21);
    v23 = v7;
    *(_QWORD *)(v20 + 32) = CanvasElementResizeHandle.init(_:category:enabled:)(0, 0, 1);
    v24 = objc_allocWithZone(v21);
    *(_QWORD *)(v20 + 40) = CanvasElementResizeHandle.init(_:category:enabled:)(1, 0, 1);
    v25 = objc_allocWithZone(v21);
    *(_QWORD *)(v20 + 48) = CanvasElementResizeHandle.init(_:category:enabled:)(2, 0, 1);
    v26 = objc_allocWithZone(v21);
    *(_QWORD *)(v20 + 56) = CanvasElementResizeHandle.init(_:category:enabled:)(3, 0, 1);
    v27 = objc_allocWithZone(v21);
    *(_QWORD *)(v20 + 64) = CanvasElementResizeHandle.init(_:category:enabled:)(4, 0, 1);
    v28 = objc_allocWithZone(v21);
    *(_QWORD *)(v20 + 72) = CanvasElementResizeHandle.init(_:category:enabled:)(5, 0, 1);
    v29 = objc_allocWithZone(v21);
    *(_QWORD *)(v20 + 80) = CanvasElementResizeHandle.init(_:category:enabled:)(6, 0, 1);
    v30 = objc_allocWithZone(v21);
    *(_QWORD *)(v20 + 88) = CanvasElementResizeHandle.init(_:category:enabled:)(7, 0, 1);
    v68 = v20;
    specialized Array._endMutation()();
    a2 = v20;
  }
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit10ResizeView_resizeHandles] = a2;
  v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_initWithFrame_, a3, a4, a5, a6);
  v32 = OBJC_IVAR____TtC8PaperKit10ResizeView_borderView;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit10ResizeView_borderView] = v31;
  v33 = one-time initialization token for paperKitBundle;
  v34 = v31;
  if (v33 != -1)
    swift_once();
  v69._object = (void *)0x80000001DDF56F20;
  v35._countAndFlagsBits = 0x4220657A69736552;
  v35._object = (void *)0xED0000726564726FLL;
  v36.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v36.value._object = (void *)0xEB00000000656C62;
  v37._countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  v69._countAndFlagsBits = 0xD000000000000028;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, v36, paperKitBundle, v37, v69)._countAndFlagsBits;
  v39 = (void *)MEMORY[0x1DF0E41AC](countAndFlagsBits);
  swift_bridgeObjectRelease();
  objc_msgSend(v34, sel_setAccessibilityLabel_, v39);

  v40 = *(id *)&v7[v32];
  v41 = (void *)MEMORY[0x1DF0E41AC](0x4220657A69736552, 0xED0000726564726FLL);
  objc_msgSend(v40, sel_setAccessibilityIdentifier_, v41);

  v67.receiver = v7;
  v67.super_class = (Class)type metadata accessor for ResizeView();
  v42 = (char *)objc_msgSendSuper2(&v67, sel_initWithFrame_, a3, a4, a5, a6);
  v43 = OBJC_IVAR____TtC8PaperKit10ResizeView_borderView;
  v44 = *(void **)&v42[OBJC_IVAR____TtC8PaperKit10ResizeView_borderView];
  v45 = v42;
  v46 = objc_msgSend(v44, sel_layer);
  objc_msgSend(v46, sel_setBorderWidth_, 1.0);

  v47 = objc_msgSend(*(id *)&v42[v43], sel_layer);
  v48 = objc_msgSend((id)objc_opt_self(), sel_systemBlueColor);
  v49 = objc_msgSend(v48, sel_CGColor);

  objc_msgSend(v47, sel_setBorderColor_, v49);
  objc_msgSend(v45, sel_addSubview_, *(_QWORD *)&v42[v43]);
  v50 = *(_QWORD *)&v45[OBJC_IVAR____TtC8PaperKit10ResizeView_resizeHandles];
  if (v50 >> 62)
  {
    swift_bridgeObjectRetain();
    v51 = _CocoaArrayWrapper.endIndex.getter();
    if (!v51)
      goto LABEL_15;
  }
  else
  {
    v51 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v51)
      goto LABEL_15;
  }
  if (v51 < 1)
  {
    __break(1u);
    goto LABEL_20;
  }
  v52 = 0;
  do
  {
    if ((v50 & 0xC000000000000001) != 0)
      v53 = (char *)MEMORY[0x1DF0E4D64](v52, v50);
    else
      v53 = (char *)*(id *)(v50 + 8 * v52 + 32);
    v54 = v53;
    ++v52;
    objc_msgSend(*(id *)&v53[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_dragGestureRecognizer], sel_addTarget_action_, v45, sel_resizeHandleMoved_);
    objc_msgSend(v45, sel_addSubview_, v54);

  }
  while (v51 != v52);
LABEL_15:
  swift_bridgeObjectRelease();
  v55 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3BB8]), sel_initWithTarget_action_, v45, sel_rotate_);
  v56 = OBJC_IVAR____TtC8PaperKit10ResizeView_rotationGestureRecognizer;
  v57 = *(void **)&v45[OBJC_IVAR____TtC8PaperKit10ResizeView_rotationGestureRecognizer];
  *(_QWORD *)&v45[OBJC_IVAR____TtC8PaperKit10ResizeView_rotationGestureRecognizer] = v55;

  if (!*(_QWORD *)&v45[v56])
  {
LABEL_20:
    __break(1u);
    return;
  }
  objc_msgSend(v45, sel_addGestureRecognizer_);
  v58 = *(void **)&v45[v56];
  if (v58)
    objc_msgSend(v58, sel_setDelegate_, v45);
  v59 = (objc_class *)type metadata accessor for PrecisePanGestureRecognizer();
  v60 = objc_allocWithZone(v59);
  *(_QWORD *)&v60[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_initialModifierFlags] = 0;
  v60[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] = 1;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v60[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_touchesBeganTimestamp] = 0;
  *(_QWORD *)&v60[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_tapAndHoldTimeout] = 0x3FB999999999999ALL;
  v66.receiver = v60;
  v66.super_class = v59;
  v61 = objc_msgSendSuper2(&v66, sel_initWithTarget_action_, 0, 0);
  v62 = OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise;
  swift_unknownObjectWeakAssign();
  v61[v62] = 0;
  objc_msgSend(v61, sel_addTarget_action_, v45, sel_dragMoved_);
  objc_msgSend(v61, sel_setDelegate_, v45);
  v63 = v45;
  objc_msgSend(v63, sel_addGestureRecognizer_, v61);

  v64 = *(void **)&v63[OBJC_IVAR____TtC8PaperKit10ResizeView_dragGestureRecognizer];
  *(_QWORD *)&v63[OBJC_IVAR____TtC8PaperKit10ResizeView_dragGestureRecognizer] = v61;

}

void __swiftcall ResizeView.hitTestChrome(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  char *v3;
  char *v4;
  Class isa;
  double y;
  double x;
  char **v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  double v18;
  id v19;
  void *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  BOOL v25;
  objc_class *v26;
  BOOL v27;
  double v28;
  unint64_t v29;
  uint64_t v30;
  char **v31;
  char *v32;
  objc_class *v33;
  id v34;
  BOOL v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat width;
  CGFloat height;
  double MidX;
  double MidY;
  void *v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  void *v48;
  id v49;
  double v50;
  CGFloat v51;
  double v52;
  CGFloat v53;
  double v54;
  CGFloat v55;
  double v56;
  CGFloat v57;
  CGFloat v58;
  CGFloat v59;
  CGFloat v60;
  CGFloat v61;
  CGFloat v62;
  _BOOL4 v63;
  void *v64;
  uint64_t v65;
  unint64_t v66;
  double v67;
  double v68;
  CGPoint v69;
  CGPoint v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;
  CGRect v74;
  CGRect v75;
  CGRect v76;
  CGRect v77;
  CGRect v78;
  CGRect v79;
  CGRect v80;
  CGRect v81;
  CGRect v82;

  v4 = v3;
  isa = with.value.super.isa;
  y = _.y;
  x = _.x;
  v8 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
  if ((objc_msgSend(v3, sel_isHidden) & 1) != 0)
    return;
  v9 = *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit10ResizeView_resizeHandles];
  v10 = (unint64_t *)&v3[OBJC_IVAR____TtC8PaperKit10ResizeView_controlHandles];
  swift_beginAccess();
  v11 = *v10;
  if (*v10 >> 62)
  {
    type metadata accessor for CanvasElementResizeHandle();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12 = _bridgeCocoaArray<A>(_:)();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for CanvasElementResizeHandle();
    v12 = v11;
  }
  swift_bridgeObjectRelease();
  specialized Array.append<A>(contentsOf:)(v12);
  v13 = v9;
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v14)
      goto LABEL_6;
LABEL_50:
    swift_bridgeObjectRelease();
    return;
  }
  v14 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v14)
    goto LABEL_50;
LABEL_6:
  if (v14 >= 1)
  {
    v15 = 0;
    v16 = 0;
    v17 = v13 & 0xC000000000000001;
    v18 = 1.79769313e308;
    v67 = x;
    v68 = y;
    v66 = v13 & 0xC000000000000001;
    while (1)
    {
      if (v17)
        v19 = (id)MEMORY[0x1DF0E4D64](v16, v13);
      else
        v19 = *(id *)(v13 + 8 * v16 + 32);
      v20 = v19;
      if ((objc_msgSend(v19, v8[147]) & 1) != 0
        || (objc_msgSend(v20, sel_convertPoint_fromCoordinateSpace_, v4, x, y),
            *((_BYTE *)v20 + OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_enabled) != 1))
      {
        v28 = v18;
LABEL_45:

        goto LABEL_46;
      }
      v23 = v21;
      v24 = v22;
      v65 = OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_enabled;
      objc_msgSend(v20, sel_bounds);
      v69.x = v23;
      v69.y = v24;
      v25 = CGRectContainsPoint(v71, v69);
      if (isa)
      {
        v26 = isa;
        if (-[objc_class PK_isEventFromPencil](v26, sel_PK_isEventFromPencil))
        {

          v27 = 1;
        }
        else
        {
          v64 = v15;
          v29 = v13;
          v30 = v14;
          v31 = v8;
          v32 = v4;
          v33 = isa;
          v34 = -[objc_class buttonMask](v26, sel_buttonMask);

          v35 = v34 == 0;
          isa = v33;
          v4 = v32;
          v8 = v31;
          v14 = v30;
          v13 = v29;
          v15 = v64;
          v27 = !v35;
        }
      }
      else
      {
        v27 = 0;
      }
      objc_msgSend(v20, sel_bounds);
      v36 = v72.origin.x;
      v37 = v72.origin.y;
      width = v72.size.width;
      height = v72.size.height;
      MidX = CGRectGetMidX(v72);
      v73.origin.x = v36;
      v73.origin.y = v37;
      v73.size.width = width;
      v73.size.height = height;
      MidY = CGRectGetMidY(v73);
      y = v68;
      if (!v25)
      {
        if (v27)
          break;
        if (one-time initialization token for resizeHandleFingerHitTestSize != -1)
          swift_once();
        v43 = *(double *)&static UIConstants.resizeHandleFingerHitTestSize;
        objc_msgSend(v20, sel_bounds);
        v44 = v43 - CGRectGetWidth(v74);
        v45 = v44 > 0.0 ? v44 * 0.5 : 0.0;
        objc_msgSend(v20, sel_bounds);
        v46 = v43 - CGRectGetHeight(v75);
        v47 = v46 > 0.0 ? v46 * 0.5 : 0.0;
        objc_msgSend(v20, sel_bounds);
        v77 = CGRectInset(v76, -v45, -v47);
        v70.x = v23;
        v70.y = v24;
        y = v68;
        if (!CGRectContainsPoint(v77, v70))
          break;
      }
      v28 = sqrt((MidX - v23) * (MidX - v23) + (MidY - v24) * (MidY - v24));
      if (v28 < v18)
      {
        v42 = v20;
        v20 = v15;
        v15 = v42;
        goto LABEL_44;
      }
      x = v67;
      v17 = v66;
      if (v15)
      {
        if ((*((_BYTE *)v20 + v65) & 1) != 0)
        {
          v48 = v20;
          v20 = v15;
          v15 = v48;
          goto LABEL_45;
        }
        v49 = v15;
        objc_msgSend(v20, sel_frame);
        v51 = v50;
        v53 = v52;
        v55 = v54;
        v57 = v56;
        if (one-time initialization token for resizeHandleObscureInset != -1)
          swift_once();
        v58 = *(double *)&static UIConstants.resizeHandleObscureInset;
        v78.origin.x = v51;
        v78.origin.y = v53;
        v78.size.width = v55;
        v78.size.height = v57;
        v79 = CGRectInset(v78, *(CGFloat *)&static UIConstants.resizeHandleObscureInset, *(CGFloat *)&static UIConstants.resizeHandleObscureInset);
        v59 = v79.origin.x;
        v60 = v79.origin.y;
        v61 = v79.size.width;
        v62 = v79.size.height;
        objc_msgSend(v49, sel_frame);
        v82 = CGRectInset(v80, v58, v58);
        v81.origin.x = v59;
        v81.origin.y = v60;
        v81.size.width = v61;
        v81.size.height = v62;
        v63 = CGRectIntersectsRect(v81, v82);

        if (v63)
        {
          v15 = v20;
          v20 = v49;
        }
        else
        {
          v28 = v18;
        }
LABEL_44:
        x = v67;
        v17 = v66;
        goto LABEL_45;
      }
      v15 = v20;
LABEL_46:
      ++v16;
      v18 = v28;
      if (v14 == v16)
        goto LABEL_50;
    }
    v28 = v18;
    goto LABEL_44;
  }
  __break(1u);
}

Swift::Void __swiftcall ResizeView.beginTransform()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  _QWORD *(*v4)(_OWORD *__return_ptr);
  _QWORD *v5;
  _OWORD *v6;
  __int128 v7;
  CGFloat v8;
  CGFloat v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  CGAffineTransform v15;
  CGAffineTransform t2;
  CGAffineTransform t1;
  _OWORD v18[3];
  _OWORD v19[2];
  double v20;
  double v21;
  CGAffineTransform v22;

  v1 = v0;
  *((_BYTE *)v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing) = 1;
  v2 = MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (v2)
  {
    v3 = (void *)v2;
    AnyCanvas.isResizingChanged()();

  }
  v4 = *(_QWORD *(**)(_OWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x218);
  v5 = v4(v18);
  v6 = (_OWORD *)((char *)v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace);
  v7 = v18[1];
  *v6 = v18[0];
  v6[1] = v7;
  v6[2] = v18[2];
  ((void (*)(_OWORD *__return_ptr, _QWORD *))v4)(v19, v5);
  v13 = v19[1];
  v14 = v19[0];
  v8 = v20;
  v9 = v21;
  ResizeView.modelToViewTransform.getter((__int128 *)&v22);
  *(_OWORD *)&t1.a = v14;
  *(_OWORD *)&t1.c = v13;
  t1.tx = v8;
  t1.ty = v9;
  t2 = v22;
  CGAffineTransformConcat(&v15, &t1, &t2);
  v10 = *(_OWORD *)&v15.c;
  v11 = *(_OWORD *)&v15.tx;
  v12 = (_OWORD *)((char *)v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpaceScaled);
  *v12 = *(_OWORD *)&v15.a;
  v12[1] = v10;
  v12[2] = v11;
}

Swift::Void __swiftcall ResizeView.updateTransform(with:)(CGAffineTransform *with)
{
  void *v1;

  objc_msgSend(v1, sel_setNeedsLayout);
}

uint64_t ResizeView.handlePressesBegan(_:with:)(int a1, UIPressesEvent_optional a2)
{
  void *v2;
  Class isa;
  Class v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  _BOOL8 v16;
  double v17;
  double v18;

  isa = a2.value.super.super.isa;
  v4 = a2.value.super.super.isa;
  if (ResizeView.updateGestureModifiersState(_:)(a2))
    return 1;
  v6 = objc_msgSend(v2, sel_window);
  if (!v6)
    return 0;
  v7 = v6;
  if (isa)
  {
    v8 = -[objc_class touchesForWindow:](isa, sel_touchesForWindow_, v6);
    if (v8)
    {
      v9 = v8;
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
      lazy protocol witness table accessor for type UITouch and conformance NSObject();
      v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      v11 = (v10 & 0xC000000000000001) != 0 ? __CocoaSet.count.getter() : *(_QWORD *)(v10 + 16);
      swift_bridgeObjectRelease();
      if (v11)
        goto LABEL_16;
    }
  }
  v12 = swift_bridgeObjectRetain();
  v13 = (void *)specialized Collection.first.getter(v12);
  swift_bridgeObjectRelease();
  if (!v13 || (v14 = objc_msgSend(v13, sel_key), v13, !v14))
  {
LABEL_16:
    v5 = 0;
  }
  else
  {
    v15 = objc_msgSend(v14, sel_keyCode);

    switch((unint64_t)v15)
    {
      case 'O':
        if (isa)
          v16 = ((unint64_t)-[objc_class modifierFlags](isa, sel_modifierFlags) >> 17) & 1;
        else
          LOBYTE(v16) = 0;
        v17 = 1.0;
        v18 = 0.0;
        break;
      case 'P':
        if (isa)
          v16 = ((unint64_t)-[objc_class modifierFlags](isa, sel_modifierFlags) >> 17) & 1;
        else
          LOBYTE(v16) = 0;
        v17 = -1.0;
        v18 = 0.0;
        break;
      case 'Q':
        if (isa)
          v16 = ((unint64_t)-[objc_class modifierFlags](isa, sel_modifierFlags) >> 17) & 1;
        else
          LOBYTE(v16) = 0;
        v17 = 0.0;
        v18 = 1.0;
        break;
      case 'R':
        if (isa)
          v16 = ((unint64_t)-[objc_class modifierFlags](isa, sel_modifierFlags) >> 17) & 1;
        else
          LOBYTE(v16) = 0;
        v17 = 0.0;
        v18 = -1.0;
        break;
      default:
        goto LABEL_16;
    }
    ResizeView.startNudging(by:largerJump:)((CGPoint)__PAIR128__(*(unint64_t *)&v18, *(unint64_t *)&v17), v16);
    v5 = 1;
  }

  return v5;
}

void ResizeView.canvasTransform.getter(__int128 *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  double (*v7)(void);
  _QWORD *v8;
  CGFloat v9;
  double (*v10)(void);
  _QWORD *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  CGAffineTransform v38;
  CGAffineTransform t2;
  CGAffineTransform t1;
  _OWORD v41[2];
  double v42;
  double v43;
  CGRect v44;
  CGRect v45;

  v3 = (_QWORD *)MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
  if (v3)
  {
    v4 = v3;
    v5 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v6 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x2F8))();
    (*(void (**)(_OWORD *__return_ptr))((*v5 & *v6) + 0x2A8))(v41);
    v34 = v41[1];
    v36 = v41[0];
    v31 = v43;
    v32 = v42;
    v7 = *(double (**)(void))((*v5 & *v6) + 0x140);
    v8 = v6;
    v9 = v7();

    v10 = *(double (**)(void))((*v5 & *v8) + 0x138);
    v11 = v8;
    v12 = v10();
    v14 = v13;
    v29 = v16;
    v30 = v15;

    CGAffineTransformMakeRotation(&t1, v9);
    a = t1.a;
    b = t1.b;
    c = t1.c;
    d = t1.d;
    tx = t1.tx;
    ty = t1.ty;
    v44.origin.x = v12;
    v44.origin.y = v14;
    v44.size.height = v29;
    v44.size.width = v30;
    v45 = CGRectApplyAffineTransform(v44, &t1);
    CGAffineTransformMakeTranslation(&t1, v12 - v45.origin.x, v14 - v45.origin.y);
    v23 = *(_OWORD *)&t1.a;
    v24 = *(_OWORD *)&t1.c;
    v25 = *(_OWORD *)&t1.tx;
    t1.a = a;
    t1.b = b;
    t1.c = c;
    t1.d = d;
    t1.tx = tx;
    t1.ty = ty;
    *(_OWORD *)&t2.a = v23;
    *(_OWORD *)&t2.c = v24;
    *(_OWORD *)&t2.tx = v25;
    CGAffineTransformConcat(&v38, &t1, &t2);
    *(_OWORD *)&t1.a = v36;
    *(_OWORD *)&t1.c = v34;
    t1.tx = v32;
    t1.ty = v31;
    t2 = v38;
    CGAffineTransformConcat(&v38, &t1, &t2);
    v35 = *(_OWORD *)&v38.c;
    v37 = *(_OWORD *)&v38.a;
    v33 = *(_OWORD *)&v38.tx;

    v27 = v33;
    v26 = v35;
    v28 = v37;
  }
  else
  {
    v26 = xmmword_1DDF33A30;
    v28 = xmmword_1DDF33970;
    v27 = 0uLL;
  }
  *a1 = v28;
  a1[1] = v26;
  a1[2] = v27;
}

void ResizeView.modelToViewTransform.getter(__int128 *a1@<X8>)
{
  char *v1;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v6;
  double v7;
  double v8;
  double v9;
  UIView *v10;
  CGFloat v11;
  _QWORD *v12;
  UIView *v13;
  CGFloat b;
  double a;
  _QWORD *v16;
  void *v17;
  UIView *v18;
  double d;
  CGFloat tx;
  CGFloat ty;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  CGAffineTransform *v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat c;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  void *v32;
  void *v33;
  double v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  __int128 v41;
  CGFloat v42;
  __int128 v43;
  __int128 v44;
  CGAffineTransform v45;
  CGAffineTransform t2;
  CGAffineTransform t1;
  __int128 v48;
  double v49;
  double v50;
  double v51;
  double v52;
  CGAffineTransform v53;

  v3 = &v1[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas];
  v4 = MEMORY[0x1DF0E666C](&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (v4)
  {
    v5 = (_QWORD *)v4;
    ResizeView.canvasTransform.getter(&v48);
    v6 = v48;
    v7 = v49;
    v8 = v50;
    v9 = v51;
    v38 = v52;
    v10 = (UIView *)objc_msgSend(v1, sel_superview);
    v11 = 1.0;
    v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v42 = v7;
    v39 = v9;
    v40 = v8;
    if (v10)
    {
      v13 = v10;
      objc_opt_self();
      b = 0.0;
      a = 1.0;
      if (swift_dynamicCastObjCClass()
        && (v16 = (_QWORD *)MEMORY[0x1DF0E666C](v3)) != 0
        && (v17 = v16, v18 = (UIView *)(*(uint64_t (**)(void))((*v12 & *v16) + 0x308))(), v17, v18))
      {
        UIView.transformForConvertingFromView(_:)(&v53, v18);
        a = v53.a;
        b = v53.b;
        d = v53.d;
        tx = v53.tx;
        ty = v53.ty;

        v13 = v18;
      }
      else
      {
        d = 1.0;
        tx = 0.0;
        ty = 0.0;
      }

    }
    else
    {
      b = 0.0;
      a = 1.0;
      d = 1.0;
      tx = 0.0;
      ty = 0.0;
    }
    *(_OWORD *)&t1.a = v6;
    t1.c = v42;
    t1.d = v40;
    t1.tx = v39;
    t1.ty = v38;
    t2.a = a;
    t2.b = b;
    t2.c = *((CGFloat *)&v6 + 1);
    t2.d = d;
    t2.tx = tx;
    t2.ty = ty;
    v25 = CGAffineTransformConcat(&v45, &t1, &t2);
    v26 = v45.a;
    v27 = v45.b;
    c = v45.c;
    v29 = v45.d;
    v30 = v45.tx;
    v31 = v45.ty;
    v32 = (void *)(*(uint64_t (**)(CGAffineTransform *))((*v12 & *v5) + 0x308))(v25);
    if (v32)
    {
      v33 = v32;
      objc_msgSend(v32, sel_zoomScale);
      v11 = v34;

    }
    CGAffineTransformMakeScale(&t1, v11, v11);
    v35 = *(_OWORD *)&t1.a;
    v36 = *(_OWORD *)&t1.c;
    v37 = *(_OWORD *)&t1.tx;
    t1.a = v26;
    t1.b = v27;
    t1.c = c;
    t1.d = v29;
    t1.tx = v30;
    t1.ty = v31;
    *(_OWORD *)&t2.a = v35;
    *(_OWORD *)&t2.c = v36;
    *(_OWORD *)&t2.tx = v37;
    CGAffineTransformConcat(&v45, &t1, &t2);
    v43 = *(_OWORD *)&v45.c;
    v44 = *(_OWORD *)&v45.a;
    v41 = *(_OWORD *)&v45.tx;

    v24 = v41;
    v22 = v43;
    v23 = v44;
  }
  else
  {
    v22 = xmmword_1DDF33A30;
    v23 = xmmword_1DDF33970;
    v24 = 0uLL;
  }
  *a1 = v23;
  a1[1] = v22;
  a1[2] = v24;
}

Swift::Void __swiftcall ResizeView.updateHandlePositionAndVisibility()()
{
  char *v0;
  _QWORD *v1;
  uint64_t v2;
  CGFloat v3;
  CGFloat v4;
  char *v5;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  CGAffineTransform *Rotation;
  CGPoint v13;
  CGPoint v14;
  CGPoint v15;
  double v16;
  CGFloat v17;
  CGPoint v18;
  double v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  _BOOL8 v27;
  id v28;
  void *v29;
  char v30;
  uint64_t v31;
  char v32;
  id v33;
  char v34;
  char *v35;
  uint64_t v36;
  CGPoint v37;
  char *v38;
  id v39;
  void *v40;
  id v41;
  double v42;
  double v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  int v57;
  BOOL v58;
  _QWORD *v59;
  uint64_t v60;
  _BOOL8 v61;
  double (*v62)(CGAffineTransform *, CGAffineTransform *, _QWORD, uint64_t);
  _QWORD *v63;
  float64_t v64;
  double v65;
  id v66;
  void *v67;
  id v68;
  double v69;
  double v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  unint64_t v75;
  uint64_t v76;
  CGFloat v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  CGFloat v84;
  CGFloat v85;
  CGFloat v86;
  CGFloat v87;
  CGFloat v88;
  float64x2_t v89;
  unint64_t v90;
  uint64_t v91;
  CGFloat v92;
  float64x2_t v93;
  uint64_t v94;
  double v95;
  double v96;
  unint64_t v97;
  __int128 v98;
  float64_t v99;
  __int128 v100;
  float64_t v101;
  CGAffineTransform v102;
  _OWORD v103[2];
  double v104;
  double v105;
  CGAffineTransform v106;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGPoint v109;
  CGPoint v110;
  CGPoint v111;
  CGPoint v112;
  CGPoint v113;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v0) + 0x200))();
  (*(void (**)(_OWORD *__return_ptr))((*v1 & *(_QWORD *)v0) + 0x218))(v103);
  v98 = v103[1];
  v100 = v103[0];
  v3 = v104;
  v4 = v105;
  ResizeView.modelToViewTransform.getter((__int128 *)&v106);
  t1.tx = v3;
  t1.ty = v4;
  t2 = v106;
  *(_OWORD *)&t1.a = v100;
  *(_OWORD *)&t1.c = v98;
  v5 = v0;
  CGAffineTransformConcat(&v102, &t1, &t2);
  a = v102.a;
  b = v102.b;
  c = v102.c;
  d = v102.d;
  tx = v102.tx;
  ty = v102.ty;
  t1 = v102;
  CGAffineTransform.decompose(initialRotation:)((uint64_t)&t2, 0.0);
  Rotation = CGAffineTransformMakeRotation(&t2, t2.tx);
  v77 = t2.a;
  v87 = t2.c;
  v88 = t2.b;
  v85 = t2.tx;
  v86 = t2.d;
  v84 = t2.ty;
  (*(void (**)(CGAffineTransform *__return_ptr, CGAffineTransform *))((*v1 & *(_QWORD *)v0) + 0x1E0))(&t2, Rotation);
  v102.a = a;
  v102.b = b;
  v102.c = c;
  v102.d = d;
  v102.tx = tx;
  v102.ty = ty;
  v109.x = 1.0;
  v109.y = 0.0;
  v13 = CGPointApplyAffineTransform(v109, &v102);
  v102.a = a;
  v102.b = b;
  v102.c = c;
  v102.d = d;
  v102.tx = tx;
  v102.ty = ty;
  v110.x = 0.0;
  v110.y = 0.0;
  v14 = CGPointApplyAffineTransform(v110, &v102);
  v102.a = a;
  v102.b = b;
  v102.c = c;
  v102.d = d;
  v102.tx = tx;
  v102.ty = ty;
  v111.x = 0.0;
  v111.y = 1.0;
  v15 = CGPointApplyAffineTransform(v111, &v102);
  v92 = a;
  v102.a = a;
  v102.b = b;
  v16 = sqrt((v13.x - v14.x) * (v13.x - v14.x) + (v13.y - v14.y) * (v13.y - v14.y));
  v17 = b;
  v102.c = c;
  v102.d = d;
  v102.tx = tx;
  v102.ty = ty;
  v112.x = 0.0;
  v112.y = 0.0;
  v18 = CGPointApplyAffineTransform(v112, &v102);
  v19 = sqrt((v15.x - v18.x) * (v15.x - v18.x) + (v15.y - v18.y) * (v15.y - v18.y));
  v20 = (*(uint64_t (**)(double, double))((*v1 & *(_QWORD *)v0) + 0x228))(v16, v19);
  v21 = *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit10ResizeView_resizeHandles];
  if (v21 >> 62)
    goto LABEL_92;
  v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_3:
  v82 = v5;
  v83 = v20 >> 62;
  v97 = v20;
  if (v22)
  {
    if (v22 >= 1)
    {
      v23 = 0;
      v94 = OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle;
      v80 = v21;
      v81 = v20 & 0xFFFFFFFFFFFFFF8;
      v78 = v21 + 32;
      v79 = v20 & 0xC000000000000001;
      v90 = v21 & 0xC000000000000001;
      v89 = (float64x2_t)vdupq_n_s64(0x3FDF5C28F5C28F5CuLL);
      while (1)
      {
        if (v90)
          v24 = (char *)MEMORY[0x1DF0E4D64](v23, v21);
        else
          v24 = (char *)*(id *)(v78 + 8 * v23);
        v25 = v24;
        v26 = *(_QWORD *)&v5[v94];
        if (v26 >= 2)
        {
          v27 = v24 != (char *)v26;
          if (((v24 != (char *)v26) & v2) != 0)
          {
LABEL_14:
            v21 = v2;
            if (v83)
            {
              swift_bridgeObjectRetain();
              v2 = _CocoaArrayWrapper.endIndex.getter();
              if (!v2)
                goto LABEL_21;
LABEL_16:
              if (v79)
                v28 = (id)MEMORY[0x1DF0E4D64](0, v20);
              else
                v28 = *(id *)(v20 + 32);
              v29 = v28;
              type metadata accessor for CanvasElementResizeHandle();
              v30 = static NSObject.== infix(_:_:)();

              if ((v30 & 1) != 0)
              {
                swift_bridgeObjectRelease();
LABEL_35:
                v35 = *(char **)&v5[v94];
                v2 = v21;
                if (v35)
                  v27 = v35 == (char *)1 || v25 != v35;
                else
                  v27 = 0;
              }
              else
              {
                if (v2 == 1)
                  goto LABEL_21;
                if (v79)
                {
                  v31 = 1;
                  while (1)
                  {
                    MEMORY[0x1DF0E4D64](v31, v20);
                    v5 = (char *)(v31 + 1);
                    if (__OFADD__(v31, 1))
                      break;
                    v32 = static NSObject.== infix(_:_:)();
                    swift_unknownObjectRelease();
                    if ((v32 & 1) != 0)
                      goto LABEL_34;
                    ++v31;
                    v20 = v97;
                    if (v5 == (char *)v2)
                      goto LABEL_33;
                  }
                  __break(1u);
LABEL_91:
                  __break(1u);
LABEL_92:
                  swift_bridgeObjectRetain();
                  v22 = _CocoaArrayWrapper.endIndex.getter();
                  goto LABEL_3;
                }
                v20 = 5;
                do
                {
                  v5 = (char *)(v20 - 3);
                  if (__OFADD__(v20 - 4, 1))
                    goto LABEL_91;
                  v33 = *(id *)(v97 + 8 * v20);
                  v34 = static NSObject.== infix(_:_:)();

                  if ((v34 & 1) != 0)
                  {
LABEL_34:
                    v20 = v97;
                    swift_bridgeObjectRelease();
                    v5 = v82;
                    goto LABEL_35;
                  }
                  ++v20;
                }
                while (v5 != (char *)v2);
                v20 = v97;
LABEL_33:
                swift_bridgeObjectRelease();
                v27 = 1;
                v5 = v82;
                v2 = v21;
              }
            }
            else
            {
              v2 = *(_QWORD *)(v81 + 16);
              swift_bridgeObjectRetain();
              if (v2)
                goto LABEL_16;
LABEL_21:
              swift_bridgeObjectRelease();
              v27 = 1;
              v2 = v21;
            }
            v21 = v80;
          }
        }
        else
        {
          if ((v2 & 1) != 0)
            goto LABEL_14;
          v27 = 1;
        }
        objc_msgSend(v25, sel_setHidden_, v27);
        v102.b = 0.0;
        v102.c = 0.0;
        v102.a = 1.0;
        v102.d = 1.0;
        v102.tx = 0.0;
        v102.ty = 0.0;
        objc_msgSend(v25, sel_setTransform_, &v102);
        v36 = v25[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_type];
        v113.x = dbl_1DDF41BB0[v36];
        v113.y = dbl_1DDF41BF0[v36];
        v102.a = v92;
        v102.b = v17;
        v102.c = c;
        v102.d = d;
        v102.tx = tx;
        v102.ty = ty;
        v37 = CGPointApplyAffineTransform(v113, &v102);
        v38 = v25;
        v39 = objc_msgSend(v5, sel_window);
        if (v39)
        {
          v40 = v39;
          v41 = objc_msgSend(v39, sel_screen);

          objc_msgSend(v41, sel_scale);
          v96 = v42;

          v43 = v96;
        }
        else
        {
          v43 = 1.0;
        }
        v44 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v43, 0);
        v45 = vmulq_n_f64((float64x2_t)v37, v43);
        v46 = vrndmq_f64(v45);
        objc_msgSend(v38, sel_setCenter_, vdivq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(vsubq_f64(v45, v46), v89), (int8x16_t)vrndpq_f64(v45), (int8x16_t)v46), v44));

        if (((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v38) + 0x90))() & 1) != 0)
        {
          v102.a = v77;
          v102.b = v88;
          v102.c = v87;
          v102.d = v86;
          v102.tx = v85;
          v102.ty = v84;
          objc_msgSend(v38, sel_setTransform_, &v102);
        }
        ++v23;

        if (v23 == v22)
          goto LABEL_49;
      }
    }
    __break(1u);
    goto LABEL_96;
  }
LABEL_49:
  swift_bridgeObjectRelease();
  v47 = &v5[OBJC_IVAR____TtC8PaperKit10ResizeView_controlHandles];
  swift_beginAccess();
  v48 = *(_QWORD *)v47;
  if (!(*(_QWORD *)v47 >> 62))
  {
    v49 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v49)
      goto LABEL_51;
LABEL_94:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  v49 = _CocoaArrayWrapper.endIndex.getter();
  if (!v49)
    goto LABEL_94;
LABEL_51:
  if (v49 >= 1)
  {
    v50 = 0;
    v91 = OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle;
    v93 = (float64x2_t)vdupq_n_s64(0x3FDF5C28F5C28F5CuLL);
    while (1)
    {
      v52 = (v48 & 0xC000000000000001) != 0
          ? (char *)MEMORY[0x1DF0E4D64](v50, v48)
          : (char *)*(id *)(v48 + 8 * v50 + 32);
      v53 = v52;
      v54 = MEMORY[0x1DF0E666C](&v52[OBJC_IVAR____TtC8PaperKit17ControlHandleView_elementView]);
      if (v54)
        break;
      v51 = v53;
LABEL_54:
      ++v50;

      if (v49 == v50)
        goto LABEL_94;
    }
    v51 = (_QWORD *)v54;
    v56 = OBJC_IVAR____TtC8PaperKit17ControlHandleView_controlPoint;
    v57 = *((unsigned __int8 *)v53 + OBJC_IVAR____TtC8PaperKit17ControlHandleView_controlPoint);
    if (*((_BYTE *)v53 + OBJC_IVAR____TtC8PaperKit17ControlHandleView_controlPoint))
      v58 = v57 == 2;
    else
      v58 = 1;
    if (!v58)
    {
      if (v57 != 1)
      {
        if (one-time initialization token for resizeMiddleHandlesMinSelectionSize != -1)
          swift_once();
        v55 = *(double *)&static UIConstants.resizeMiddleHandlesMinSelectionSize;
        if (*(double *)&static UIConstants.resizeMiddleHandlesMinSelectionSize >= v16)
          goto LABEL_79;
LABEL_78:
        if (v55 >= v19)
          goto LABEL_79;
        goto LABEL_64;
      }
      if (one-time initialization token for resizeMiddleHandlesMinSelectionSize != -1)
        swift_once();
      v55 = *(double *)&static UIConstants.resizeMiddleHandlesMinSelectionSize;
      if (*(double *)&static UIConstants.resizeMiddleHandlesMinSelectionSize >= v16)
        goto LABEL_78;
    }
LABEL_64:
    v59 = *(_QWORD **)&v5[v91];
    if (!v59 || v59 != (_QWORD *)1 && v53 == v59)
    {
      if (v83)
      {
        swift_bridgeObjectRetain();
        v60 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        v60 = *(_QWORD *)((v97 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      v61 = v60 == 0;
      goto LABEL_80;
    }
LABEL_79:
    v61 = 1;
LABEL_80:
    objc_msgSend(v53, sel_setHidden_, v61, v55);
    v102.b = 0.0;
    v102.c = 0.0;
    v102.a = 1.0;
    v102.d = 1.0;
    v102.tx = 0.0;
    v102.ty = 0.0;
    objc_msgSend(v53, sel_setTransform_, &v102);
    LOBYTE(v102.a) = *((_BYTE *)v53 + v56);
    v62 = *(double (**)(CGAffineTransform *, CGAffineTransform *, _QWORD, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v51)
                                                                                             + 0x158);
    v63 = v53;
    v64 = v62(&v102, &t2, 0, 1);
    v99 = v65;
    v101 = v64;
    v5 = v82;
    v66 = objc_msgSend(v82, sel_window);
    if (v66)
    {
      v67 = v66;
      v68 = objc_msgSend(v66, sel_screen);

      objc_msgSend(v68, sel_scale);
      v95 = v69;

      v70 = v95;
    }
    else
    {
      v70 = 1.0;
    }
    v71.f64[0] = v101;
    v71.f64[1] = v99;
    v72 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v70, 0);
    v73 = vmulq_n_f64(v71, v70);
    v74 = vrndmq_f64(v73);
    objc_msgSend(v63, sel_setCenter_, vdivq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(vsubq_f64(v73, v74), v93), (int8x16_t)vrndpq_f64(v73), (int8x16_t)v74), v72));

    v75 = ControlHandleView.pointerAccessories()();
    if (v75 >> 62)
      v76 = _CocoaArrayWrapper.endIndex.getter();
    else
      v76 = *(_QWORD *)((v75 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRelease();
    if (v76 <= 3)
    {
      v63 = v63;
      v102.a = v77;
      v102.b = v88;
      v102.c = v87;
      v102.d = v86;
      v102.tx = v85;
      v102.ty = v84;
      objc_msgSend(v63, sel_setTransform_, &v102);

    }
    goto LABEL_54;
  }
LABEL_96:
  __break(1u);
}

void ResizeView.resizeHandleMoved(_:)(void *a1)
{
  _QWORD *v1;
  id v3;
  uint64_t v4;
  char *v5;
  unsigned int v6;
  id v7;
  _QWORD *v8;
  id v9;
  id v10;

  v3 = objc_msgSend(a1, sel_view);
  if (v3)
  {
    v10 = v3;
    type metadata accessor for CanvasElementResizeHandle();
    v4 = swift_dynamicCastClass();
    if (v4)
    {
      v5 = (char *)v4;
      v6 = objc_msgSend(a1, sel_modifierFlags);
      if ((*((_BYTE *)a1 + OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_initialModifierFlags + 2) & 0x10) != 0
        && ((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x238))() & 1) != 0)
      {
        ResizeView.rotateFromResizeHandleMoved(_:handle:modifierFlags:)(a1, v5, (int)objc_msgSend(a1, sel_modifierFlags));
      }
      else
      {
        v7 = a1;
        v8 = v1;
        v9 = v10;
        specialized ResizeView.transformWithGesture(_:activeHandle:transform:)(v7, v5, v8, v7, v8, (*(_QWORD *)&v6 & 0x80000) != 0, v5, (*(_QWORD *)&v6 & 0x20000) != 0);

        if (objc_msgSend(v7, sel_state) == (id)3)
          (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v8) + 0x2F0))();
      }
    }

  }
}

Swift::Void __swiftcall ResizeView.dragMoved(_:)(UIPanGestureRecognizer *a1)
{
  void *v1;
  unint64_t v3;
  UIPanGestureRecognizer *v4;
  _QWORD *v5;

  v3 = ((unint64_t)-[UIPanGestureRecognizer modifierFlags](a1, sel_modifierFlags) >> 17) & 1;
  v4 = a1;
  v5 = v1;
  specialized ResizeView.transformWithGesture(_:activeHandle:transform:)(v4, (void *)1, v5, v4, v5, v3);

  if (-[UIPanGestureRecognizer state](v4, sel_state) == (id)3)
  {
    (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x300))();
  }
  else if (-[UIPanGestureRecognizer state](v4, sel_state) != (id)4)
  {
    return;
  }
  *((_BYTE *)v5 + OBJC_IVAR____TtC8PaperKit10ResizeView_dragConstainedAxis) = 0;
}

Swift::Void __swiftcall ResizeView.rotate(_:)(UIRotationGestureRecognizer *a1)
{
  _QWORD *v1;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  id v10;
  double v11;
  CGFloat v12;
  double v13;
  _QWORD *v14;

  if (one-time initialization token for resizeRotateTwoFingerDefaultSnapRadius != -1)
    swift_once();
  v3 = *(double *)&static UIConstants.resizeRotateTwoFingerDefaultSnapRadius;
  if (-[UIRotationGestureRecognizer numberOfTouches](a1, sel_numberOfTouches) == (id)2)
  {
    -[UIRotationGestureRecognizer locationOfTouch:inView:](a1, sel_locationOfTouch_inView_, 0, 0);
    v5 = v4;
    v7 = v6;
    -[UIRotationGestureRecognizer locationOfTouch:inView:](a1, sel_locationOfTouch_inView_, 1, 0);
    v3 = sqrt((v5 - v8) * (v5 - v8) + (v7 - v9) * (v7 - v9)) * 0.5;
  }
  v10 = -[UIRotationGestureRecognizer rotation](a1, sel_rotation);
  v12 = v11;
  v13 = (*(double (**)(id))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x2D8))(v10);
  v14 = v1;
  specialized ResizeView.transformWithGesture(_:activeHandle:transform:)(a1, (void *)1, v14, v14, 1, v12, v13, v3);

}

void ResizeView.rotateFromResizeHandleMoved(_:handle:modifierFlags:)(void *a1, char *a2, int a3)
{
  _QWORD *v3;
  CGFloat a;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGPoint v13;
  uint64_t v14;
  CGPoint v15;
  id v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  long double v22;
  double v23;
  double v24;
  CGFloat v25;
  _QWORD *v26;
  CGAffineTransform v27;
  CGPoint v28;
  CGPoint v29;

  v8 = *(double *)((char *)v3 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace + 8);
  v9 = *(double *)((char *)v3 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace + 16);
  v10 = *(double *)((char *)v3 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace + 24);
  v11 = *(double *)((char *)v3 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace + 32);
  v12 = *(double *)((char *)v3 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace + 40);
  v27.a = *(CGFloat *)((char *)v3 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace);
  a = v27.a;
  v27.b = v8;
  v27.c = v9;
  v27.d = v10;
  v27.tx = v11;
  v27.ty = v12;
  v28.x = 0.5;
  v28.y = 0.5;
  v13 = CGPointApplyAffineTransform(v28, &v27);
  v14 = 8 * a2[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_type];
  v29.x = *(CGFloat *)((char *)&unk_1DDF41BB0 + v14);
  v29.y = *(CGFloat *)((char *)&unk_1DDF41BF0 + v14);
  v27.a = a;
  v27.b = v8;
  v27.c = v9;
  v27.d = v10;
  v27.tx = v11;
  v27.ty = v12;
  v15 = CGPointApplyAffineTransform(v29, &v27);
  v16 = objc_msgSend(a1, sel_locationInView_, v3);
  v18 = v17;
  v20 = v19;
  v21 = 0.0;
  if ((a3 & 0x20000) != 0)
    v21 = (*(double (**)(id))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x2D8))(v16);
  v22 = v20 - v13.y;
  v23 = sqrt((v18 - v13.x) * (v18 - v13.x) + v22 * v22);
  v24 = atan2(v22, v18 - v13.x);
  v25 = v24 - atan2(v15.y - v13.y, v15.x - v13.x);
  v26 = v3;
  specialized ResizeView.transformWithGesture(_:activeHandle:transform:)(a1, a2, v26, v26, (*(_QWORD *)&a3 & 0x20000) != 0, v25, v21, v23);

}

Swift::Bool __swiftcall ResizeView.updateGestureModifiersState(_:)(UIPressesEvent_optional a1)
{
  _QWORD *v1;
  Class isa;
  void *v3;
  id v4;
  unint64_t v5;
  char *v6;
  void *v7;
  char *v8;
  id v10;
  _QWORD *v11;
  _QWORD *v12;
  id v13;

  isa = a1.value.super.super.isa;
  v3 = *(void **)((char *)v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_dragGestureRecognizer);
  if (!v3)
  {
LABEL_6:
    v6 = *(char **)((char *)v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle);
    if ((unint64_t)v6 >= 2)
    {
      v7 = *(void **)&v6[OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_dragGestureRecognizer];
      v8 = v6;
      if (objc_msgSend(v7, sel_state) == (id)2)
      {
        type metadata accessor for ControlHandleView();
        if (!swift_dynamicCastClass())
        {
          if (isa)
            LODWORD(isa) = -[objc_class modifierFlags](isa, sel_modifierFlags);
          if ((*((_BYTE *)v7 + OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_initialModifierFlags + 2) & 0x10) != 0
            && ((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x238))() & 1) != 0)
          {
            ResizeView.rotateFromResizeHandleMoved(_:handle:modifierFlags:)(v7, v8, (int)objc_msgSend(v7, sel_modifierFlags));
          }
          else
          {
            v12 = v1;
            outlined copy of ResizeView.ActiveHandle(v6);
            v13 = v7;
            specialized ResizeView.transformWithGesture(_:activeHandle:transform:)(v13, v6, v12, v13, v12, ((unint64_t)isa & 0x80000) != 0, v8, ((unint64_t)isa & 0x20000) != 0);
            outlined consume of ResizeView.ActiveHandle(v6);

            if (objc_msgSend(v13, sel_state) == (id)3)
              (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v12) + 0x2F0))();
          }
          outlined consume of ResizeView.ActiveHandle(v6);
          return 1;
        }
      }
      outlined consume of ResizeView.ActiveHandle(v6);
    }
    return 0;
  }
  v4 = v3;
  if (objc_msgSend(v4, sel_state) != (id)2)
  {

    goto LABEL_6;
  }
  if (isa)
    v5 = ((unint64_t)-[objc_class modifierFlags](isa, sel_modifierFlags) >> 17) & 1;
  else
    LOBYTE(v5) = 0;
  v10 = v4;
  v11 = v1;
  specialized ResizeView.transformWithGesture(_:activeHandle:transform:)(v10, (void *)1, v11, v10, v11, v5);

  if (objc_msgSend(v10, sel_state) == (id)3)
  {
    (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v11) + 0x300))();
LABEL_15:
    *((_BYTE *)v11 + OBJC_IVAR____TtC8PaperKit10ResizeView_dragConstainedAxis) = 0;
    goto LABEL_16;
  }
  if (objc_msgSend(v10, sel_state) == (id)4)
    goto LABEL_15;
LABEL_16:

  return 1;
}

Swift::Void __swiftcall ResizeView.startNudging(by:largerJump:)(CGPoint by, Swift::Bool largerJump)
{
  _QWORD *v2;
  _QWORD *v3;
  double y;
  double x;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t *v20;
  double v21;
  double v22;
  double *v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  id v26;
  Class isa;
  void *v28;
  id v29;
  id v30;
  void *v31;
  _QWORD aBlock[6];

  v3 = v2;
  y = by.y;
  x = by.x;
  v7 = type metadata accessor for Date();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)aBlock - v15;
  v17 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(_QWORD, double))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x280))(0, v14);
  v18 = OBJC_IVAR____TtC8PaperKit10ResizeView_nudgeTimer;
  objc_msgSend(*(id *)((char *)v2 + OBJC_IVAR____TtC8PaperKit10ResizeView_nudgeTimer), sel_invalidate);
  v19 = *(void **)((char *)v2 + v18);
  *(_QWORD *)((char *)v2 + v18) = 0;

  (*(void (**)(void))((*v17 & *v2) + 0x270))();
  if (largerJump)
  {
    if (one-time initialization token for resizeNudgeLargeJumpDistance != -1)
      swift_once();
    v20 = &static UIConstants.resizeNudgeLargeJumpDistance;
  }
  else
  {
    if (one-time initialization token for resizeNudgeSmallJumpDistance != -1)
      swift_once();
    v20 = &static UIConstants.resizeNudgeSmallJumpDistance;
  }
  v21 = *(double *)v20 * x;
  v22 = *(double *)v20 * y;
  (*(void (**)(double, double))((*v17 & *v2) + 0x308))(v21, v22);
  v23 = (double *)((char *)v2 + OBJC_IVAR____TtC8PaperKit10ResizeView_nudgeDelta);
  *v23 = v21;
  v23[1] = v22;
  Date.init()();
  Date.addingTimeInterval(_:)();
  v24 = *(void (**)(char *, uint64_t))(v8 + 8);
  v24(v11, v7);
  v25 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v26 = objc_allocWithZone(MEMORY[0x1E0C99E88]);
  swift_retain();
  isa = Date._bridgeToObjectiveC()().super.isa;
  aBlock[4] = partial apply for closure #1 in ResizeView.startNudging(by:largerJump:);
  aBlock[5] = v25;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  aBlock[3] = &block_descriptor_44;
  v28 = _Block_copy(aBlock);
  v29 = objc_msgSend(v26, sel_initWithFireDate_interval_repeats_block_, isa, 1, v28, 0.1);
  _Block_release(v28);

  v24(v16, v7);
  swift_release();
  swift_release();
  v30 = objc_msgSend((id)objc_opt_self(), sel_mainRunLoop);
  objc_msgSend(v30, sel_addTimer_forMode_, v29, *MEMORY[0x1E0C99748]);

  v31 = *(void **)((char *)v3 + v18);
  *(_QWORD *)((char *)v3 + v18) = v29;

}

uint64_t ResizeView.handlePressesEnded(_:with:)(int a1, UIPressesEvent_optional a2)
{
  _QWORD *v2;
  Class isa;
  Class v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  char *v15;
  uint64_t v16;
  void *v17;

  isa = a2.value.super.super.isa;
  v4 = a2.value.super.super.isa;
  if (ResizeView.updateGestureModifiersState(_:)(a2))
    return 1;
  v6 = objc_msgSend(v2, sel_window);
  if (!v6)
    return 0;
  v7 = v6;
  if (isa)
  {
    v8 = -[objc_class touchesForWindow:](isa, sel_touchesForWindow_, v6);
    if (v8)
    {
      v9 = v8;
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
      lazy protocol witness table accessor for type UITouch and conformance NSObject();
      v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      v11 = (v10 & 0xC000000000000001) != 0 ? __CocoaSet.count.getter() : *(_QWORD *)(v10 + 16);
      swift_bridgeObjectRelease();
      if (v11)
        goto LABEL_15;
    }
  }
  v12 = swift_bridgeObjectRetain();
  v13 = (void *)specialized Collection.first.getter(v12);
  swift_bridgeObjectRelease();
  if (!v13
    || (v14 = objc_msgSend(v13, sel_key), v13, !v14)
    || (v15 = (char *)objc_msgSend(v14, sel_keyCode), v14, (unint64_t)(v15 - 79) > 3))
  {
LABEL_15:
    v5 = 0;
  }
  else
  {
    (*(void (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x280))(0);
    v16 = OBJC_IVAR____TtC8PaperKit10ResizeView_nudgeTimer;
    objc_msgSend(*(id *)((char *)v2 + OBJC_IVAR____TtC8PaperKit10ResizeView_nudgeTimer), sel_invalidate);
    v17 = *(void **)((char *)v2 + v16);
    *(_QWORD *)((char *)v2 + v16) = 0;

    v5 = 1;
    v7 = v17;
  }

  return v5;
}

Swift::Bool __swiftcall ResizeView.gestureRecognizer(_:shouldBeRequiredToFailBy:)(UIGestureRecognizer *_, UIGestureRecognizer *shouldBeRequiredToFailBy)
{
  uint64_t v2;
  void *v3;
  id v6;
  UIGestureRecognizer *v7;
  char v8;
  Swift::Bool result;

  v3 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit10ResizeView_rotationGestureRecognizer);
  result = 0;
  if (v3)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
    v6 = v3;
    v7 = _;
    v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) != 0)
    {
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIPinchGestureRecognizer);
      if ((-[UIGestureRecognizer isKindOfClass:](shouldBeRequiredToFailBy, sel_isKindOfClass_, swift_getObjCClassFromMetadata()) & 1) != 0)return 1;
    }
  }
  return result;
}

void protocol witness for MiniMenuControllerDelegate.canvas.getter in conformance CanvasElementResizeView()
{
  JUMPOUT(0x1DF0E666CLL);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ResizeView.ActiveHandle(void **a1, void **a2)
{
  void *v2;
  void *v3;
  char v5;

  v2 = *a1;
  v3 = *a2;
  if (!*a1)
    return !v3;
  if (v2 == (void *)1)
    return v3 == (void *)1;
  if ((unint64_t)v3 < 2)
    return 0;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  outlined copy of ResizeView.ActiveHandle(v2);
  outlined copy of ResizeView.ActiveHandle(v3);
  v5 = static NSObject.== infix(_:_:)();
  outlined consume of ResizeView.ActiveHandle(v3);
  outlined consume of ResizeView.ActiveHandle(v2);
  return v5 & 1;
}

Swift::Void __swiftcall ResizeView.layoutSubviews()()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  _QWORD *v3;
  CGFloat v4;
  CGFloat v5;
  double v6;
  __int128 v7;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  id v11;
  void *v12;
  id v13;
  double v14;
  double v15;
  id v16;
  __int128 v17;
  __int128 v18;
  CGAffineTransform v19;
  CGAffineTransform t2;
  objc_super v21;
  _OWORD v22[2];
  double v23;
  double v24;
  CGAffineTransform v25;
  CGAffineTransform t1;

  v1 = v0;
  v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC8PaperKit10ResizeView_borderView);
  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  objc_msgSend(v2, sel_setHidden_, ((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F8))() & 1) == 0);
  v21.receiver = v0;
  v21.super_class = (Class)type metadata accessor for ResizeView();
  objc_msgSendSuper2(&v21, sel_layoutSubviews);
  t1.a = 1.0;
  t1.b = 0.0;
  t1.c = 0.0;
  t1.d = 1.0;
  t1.tx = 0.0;
  t1.ty = 0.0;
  (*(void (**)(_OWORD *__return_ptr, id))((*v3 & *v0) + 0x218))(v22, objc_msgSend(v2, sel_setTransform_, &t1));
  v17 = v22[1];
  v18 = v22[0];
  v4 = v23;
  v5 = v24;
  ResizeView.modelToViewTransform.getter((__int128 *)&v25);
  *(_OWORD *)&t1.a = v18;
  *(_OWORD *)&t1.c = v17;
  t1.tx = v4;
  t1.ty = v5;
  t2 = v25;
  CGAffineTransformConcat(&v19, &t1, &t2);
  t1 = v19;
  v6 = CGAffineTransform.decompose(initialRotation:)((uint64_t)&t2, 0.0);
  v7 = *(_OWORD *)&t2.a;
  c = t2.c;
  d = t2.d;
  tx = t2.tx;
  v11 = objc_msgSend(v0, sel_window, v6);
  if (v11)
  {
    v12 = v11;
    v13 = objc_msgSend(v11, sel_screen);

    objc_msgSend(v13, sel_scale);
    v15 = v14;

  }
  else
  {
    v15 = 1.0;
  }
  objc_msgSend(v2, sel_setFrame_, CGRect.rounded(scale:)(v15, *(CGFloat *)&v7, *((CGFloat *)&v7 + 1), c, d));
  CGAffineTransformMakeRotation(&t2, tx);
  objc_msgSend(v2, sel_setTransform_, &t2);
  v16 = objc_msgSend(v2, sel_layer);
  (*(void (**)(void))((*v3 & *v1) + 0x208))();
  objc_msgSend(v16, sel_setCornerRadius_);

  ResizeView.updateHandlePositionAndVisibility()();
}

void __swiftcall ResizeView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  _QWORD *v3;
  Class isa;
  double y;
  double x;
  _QWORD *v7;
  CGPoint v8;
  CGRect v9;

  isa = with.value.super.isa;
  y = _.y;
  x = _.x;
  if ((objc_msgSend(v3, sel_isHidden) & 1) == 0
    && !(*(uint64_t (**)(Class, double, double))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x250))(isa, x, y))
  {
    objc_msgSend(*(id *)((char *)v3 + OBJC_IVAR____TtC8PaperKit10ResizeView_borderView), sel_frame);
    v8.x = x;
    v8.y = y;
    if (CGRectContainsPoint(v9, v8))
      v7 = v3;
  }
}

Swift::Void __swiftcall ResizeView.endTransform(cancel:)(Swift::Bool cancel)
{
  char *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v2 = v1;
  v3 = *(void **)&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle];
  *(_QWORD *)&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle] = 0;
  outlined consume of ResizeView.ActiveHandle(v3);
  v1[OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing] = 0;
  v4 = MEMORY[0x1DF0E666C](&v1[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (v4)
  {
    v5 = (void *)v4;
    AnyCanvas.isResizingChanged()();

  }
  objc_msgSend(v2, sel_setNeedsLayout);
}

CGFloat closure #1 in ResizeView.resizeHandleMoved(_:handle:fromCenter:aspectLocked:)@<D0>(void *a1@<X0>, _QWORD *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, _OWORD *a6@<X8>)
{
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  CGFloat *v19;
  __int128 v20;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  CGPoint v27;
  CGPoint v28;
  double v29;
  double v30;
  CGFloat v31;
  CGFloat v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat v45;
  CGPoint v46;
  CGPoint v47;
  CGPoint v48;
  CGPoint v49;
  CGFloat v50;
  CGFloat v51;
  CGFloat v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  CGFloat v59;
  CGFloat v60;
  CGFloat v61;
  CGFloat v62;
  CGFloat v63;
  CGFloat v64;
  CGFloat v65;
  CGFloat v66;
  CGFloat result;
  __int128 v68;
  __int128 v69;
  __int128 pointa;
  __int128 point;
  CGFloat pointb;
  __int128 pointc;
  CGPoint v74;
  CGPoint v75;
  CGFloat v76;
  CGPoint v77;
  double v78;
  __int128 v79;
  double v80;
  __int128 v81;
  CGAffineTransform v82;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGPoint v85;
  CGPoint v86;
  CGPoint v87;
  CGPoint v88;
  CGPoint v89;
  CGPoint v90;

  objc_msgSend(a1, sel_translationInView_, a2);
  v12 = v11;
  v14 = v13;
  v15 = *(char *)(a4 + OBJC_IVAR____TtC8PaperKit25CanvasElementResizeHandle_type);
  v16 = 0.5;
  v17 = v15;
  v18 = 0.5;
  if ((a3 & 1) == 0)
  {
    v16 = 1.0 - dbl_1DDF41BB0[v15];
    v18 = 1.0 - dbl_1DDF41BF0[v15];
  }
  v78 = v18;
  v80 = v16;
  v19 = (CGFloat *)((char *)a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpaceScaled);
  v20 = *(_OWORD *)((char *)a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpaceScaled + 16);
  *(_OWORD *)&t1.a = *(_OWORD *)((char *)a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpaceScaled);
  *(_OWORD *)&t1.c = v20;
  *(_OWORD *)&t1.tx = *(_OWORD *)((char *)a2
                                + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpaceScaled
                                + 32);
  CGAffineTransformInvert(&t2, &t1);
  a = t2.a;
  b = t2.b;
  c = t2.c;
  d = t2.d;
  tx = t2.tx;
  ty = t2.ty;
  t1 = t2;
  v85.x = v12;
  v85.y = v14;
  v27 = CGPointApplyAffineTransform(v85, &t1);
  t1.a = a;
  t1.b = b;
  t1.c = c;
  t1.d = d;
  t1.tx = tx;
  t1.ty = ty;
  v86.x = 0.0;
  v86.y = 0.0;
  v28 = CGPointApplyAffineTransform(v86, &t1);
  if ((~COERCE__INT64((v27.x - v28.x) / (dbl_1DDF41BB0[v17] - v80) + 1.0) & 0x7FF0000000000000) != 0)
    v29 = (v27.x - v28.x) / (dbl_1DDF41BB0[v17] - v80) + 1.0;
  else
    v29 = 1.0;
  if ((~COERCE__INT64((v27.y - v28.y) / (dbl_1DDF41BF0[v17] - v78) + 1.0) & 0x7FF0000000000000) != 0)
    v30 = (v27.y - v28.y) / (dbl_1DDF41BF0[v17] - v78) + 1.0;
  else
    v30 = 1.0;
  if (((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x240))() & 1) == 0 || (a5 & 1) != 0)
  {
    v76 = dbl_1DDF41BB0[v17] - v80;
    pointb = dbl_1DDF41BF0[v17] - v78;
    v87.x = v29 * v76;
    v87.y = v30 * pointb;
    v41 = v19[1];
    v42 = v19[2];
    v43 = v19[3];
    v44 = v19[4];
    v45 = v19[5];
    t1.a = *v19;
    v40 = t1.a;
    t1.b = v41;
    t1.c = v42;
    t1.d = v43;
    t1.tx = v44;
    t1.ty = v45;
    v46 = CGPointApplyAffineTransform(v87, &t1);
    t1.a = v40;
    t1.b = v41;
    t1.c = v42;
    t1.d = v43;
    t1.tx = v44;
    t1.ty = v45;
    v88.x = 0.0;
    v88.y = 0.0;
    v47 = CGPointApplyAffineTransform(v88, &t1);
    t1.a = v40;
    t1.b = v41;
    t1.c = v42;
    t1.d = v43;
    t1.tx = v44;
    t1.ty = v45;
    v89.x = v76;
    v89.y = pointb;
    v48 = CGPointApplyAffineTransform(v89, &t1);
    t1.a = v40;
    t1.b = v41;
    t1.c = v42;
    t1.d = v43;
    t1.tx = v44;
    t1.ty = v45;
    v90.x = 0.0;
    v90.y = 0.0;
    v49 = CGPointApplyAffineTransform(v90, &t1);
    v50 = ((v46.x - v47.x) * (v48.x - v49.x) + (v46.y - v47.y) * (v48.y - v49.y))
        / ((v48.x - v49.x) * (v48.x - v49.x) + (v48.y - v49.y) * (v48.y - v49.y));
    CGAffineTransformMakeTranslation(&t1, -v80, -v78);
    pointc = *(_OWORD *)&t1.c;
    v77 = *(CGPoint *)&t1.a;
    v51 = t1.tx;
    v52 = t1.ty;
    CGAffineTransformMakeScale(&t1, v50, v50);
    v53 = *(_OWORD *)&t1.a;
    v54 = *(_OWORD *)&t1.c;
    v55 = *(_OWORD *)&t1.tx;
    *(CGPoint *)&t1.a = v77;
    *(_OWORD *)&t1.c = pointc;
    t1.tx = v51;
    t1.ty = v52;
    *(_OWORD *)&t2.a = v53;
    *(_OWORD *)&t2.c = v54;
    *(_OWORD *)&t2.tx = v55;
    CGAffineTransformConcat(&v82, &t1, &t2);
    point = *(_OWORD *)&v82.c;
    v75 = *(CGPoint *)&v82.a;
    v36 = v82.tx;
    v37 = v82.ty;
    v38 = v80;
    v39 = v78;
  }
  else
  {
    CGAffineTransformMakeTranslation(&t1, -v80, -v78);
    pointa = *(_OWORD *)&t1.c;
    v74 = *(CGPoint *)&t1.a;
    v31 = t1.tx;
    v32 = t1.ty;
    CGAffineTransformMakeScale(&t1, v29, v30);
    v33 = *(_OWORD *)&t1.a;
    v34 = *(_OWORD *)&t1.c;
    v35 = *(_OWORD *)&t1.tx;
    *(CGPoint *)&t1.a = v74;
    *(_OWORD *)&t1.c = pointa;
    t1.tx = v31;
    t1.ty = v32;
    *(_OWORD *)&t2.a = v33;
    *(_OWORD *)&t2.c = v34;
    *(_OWORD *)&t2.tx = v35;
    CGAffineTransformConcat(&v82, &t1, &t2);
    point = *(_OWORD *)&v82.c;
    v75 = *(CGPoint *)&v82.a;
    v36 = v82.tx;
    v37 = v82.ty;
    v38 = v80;
    v39 = v78;
  }
  CGAffineTransformMakeTranslation(&t1, v38, v39);
  v56 = *(_OWORD *)&t1.a;
  v57 = *(_OWORD *)&t1.c;
  v58 = *(_OWORD *)&t1.tx;
  *(CGPoint *)&t1.a = v75;
  *(_OWORD *)&t1.c = point;
  t1.tx = v36;
  t1.ty = v37;
  *(_OWORD *)&t2.a = v56;
  *(_OWORD *)&t2.c = v57;
  *(_OWORD *)&t2.tx = v58;
  CGAffineTransformConcat(&v82, &t1, &t2);
  v79 = *(_OWORD *)&v82.c;
  v81 = *(_OWORD *)&v82.a;
  v59 = v82.tx;
  v60 = v82.ty;
  v62 = *(double *)((char *)a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace + 8);
  v63 = *(double *)((char *)a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace + 16);
  v64 = *(double *)((char *)a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace + 24);
  v65 = *(double *)((char *)a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace + 32);
  v66 = *(double *)((char *)a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace + 40);
  t1.a = *(CGFloat *)((char *)a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace);
  v61 = t1.a;
  t1.b = v62;
  t1.c = v63;
  t1.d = v64;
  t1.tx = v65;
  t1.ty = v66;
  CGAffineTransformInvert(&t2, &t1);
  t1 = t2;
  *(_OWORD *)&t2.a = v81;
  *(_OWORD *)&t2.c = v79;
  t2.tx = v59;
  t2.ty = v60;
  CGAffineTransformConcat(&v82, &t1, &t2);
  t1 = v82;
  t2.a = v61;
  t2.b = v62;
  t2.c = v63;
  t2.d = v64;
  t2.tx = v65;
  t2.ty = v66;
  CGAffineTransformConcat(&v82, &t1, &t2);
  result = v82.a;
  v68 = *(_OWORD *)&v82.c;
  v69 = *(_OWORD *)&v82.tx;
  *a6 = *(_OWORD *)&v82.a;
  a6[1] = v68;
  a6[2] = v69;
  return result;
}

CGFloat closure #1 in ResizeView.dragMoved(_:axisConstrained:)@<D0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _OWORD *a4@<X8>)
{
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  CGPoint v17;
  CGPoint v18;
  double v19;
  double v20;
  char v21;
  uint64_t v22;
  double v23;
  double v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  int v36;
  double v37;
  double v38;
  CGFloat result;
  __int128 v40;
  __int128 v41;
  CGAffineTransform v42;
  CGAffineTransform v43;
  CGAffineTransform v44;
  CGAffineTransform v45;
  char v46;
  CGPoint v47;
  CGPoint v48;

  objc_msgSend(a1, sel_translationInView_, a2);
  v8 = v7;
  v10 = v9;
  ResizeView.modelToViewTransform.getter((__int128 *)&v43);
  v45 = v43;
  CGAffineTransformInvert(&v44, &v45);
  a = v44.a;
  b = v44.b;
  c = v44.c;
  d = v44.d;
  tx = v44.tx;
  ty = v44.ty;
  v45 = v44;
  v47.x = v8;
  v47.y = v10;
  v17 = CGPointApplyAffineTransform(v47, &v45);
  v45.a = a;
  v45.b = b;
  v45.c = c;
  v45.d = d;
  v45.tx = tx;
  v45.ty = ty;
  v48.x = 0.0;
  v48.y = 0.0;
  v18 = CGPointApplyAffineTransform(v48, &v45);
  v19 = v17.x - v18.x;
  v20 = v17.y - v18.y;
  if ((a3 & 1) != 0)
  {
    if (fabs(v20) < fabs(v19))
      v21 = 1;
    else
      v21 = 2;
    v22 = OBJC_IVAR____TtC8PaperKit10ResizeView_dragConstainedAxis;
    if (!*(_BYTE *)(a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_dragConstainedAxis))
      goto LABEL_19;
    if (one-time initialization token for resizeDragConstraintLimit != -1)
      swift_once();
    v23 = *(double *)&static UIConstants.resizeDragConstraintLimit;
    v24 = sqrt(v19 * v19 + v20 * v20);
    v25 = (_QWORD *)MEMORY[0x1DF0E666C](a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_canvas);
    if (v25)
    {
      v26 = v25;
      v27 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v28 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v25) + 0x308))();
      if (v28)
      {
        v29 = v28;
        objc_msgSend(v28, sel_zoomScale);
        v31 = v30;

      }
      else
      {
        v31 = 1.0;
      }
      (*(void (**)(CGAffineTransform *__return_ptr))((*v27 & *v26) + 0x5B8))(&v44);
      outlined init with take of CGAffineTransform?((uint64_t)&v44, (uint64_t)&v45);
      if ((v46 & 1) != 0)
      {

        v33 = 1.0;
      }
      else
      {
        v34 = v45.a;
        v35 = v45.b;

        v33 = sqrt(v34 * v34 + v35 * v35);
      }
      v32 = v31 * v33;
    }
    else
    {
      v32 = 1.0;
    }
    if (v23 / v32 < v24)
LABEL_19:
      *(_BYTE *)(a2 + v22) = v21;
  }
  else
  {
    *(_BYTE *)(a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_dragConstainedAxis) = 0;
  }
  v36 = *(unsigned __int8 *)(a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_dragConstainedAxis);
  v37 = 0.0;
  if (v36 == 1)
    v38 = 0.0;
  else
    v38 = v17.y - v18.y;
  if (v36 == 1)
    v37 = v17.x - v18.x;
  if (!*(_BYTE *)(a2 + OBJC_IVAR____TtC8PaperKit10ResizeView_dragConstainedAxis))
  {
    v38 = v17.y - v18.y;
    v37 = v17.x - v18.x;
  }
  CGAffineTransformMakeTranslation(&v42, v37, v38);
  result = v42.a;
  v40 = *(_OWORD *)&v42.c;
  v41 = *(_OWORD *)&v42.tx;
  *a4 = *(_OWORD *)&v42.a;
  a4[1] = v40;
  a4[2] = v41;
  return result;
}

CGFloat closure #1 in ResizeView.rotate(_:activeHandle:rotation:snapDistance:snapping:)@<D0>(uint64_t a1@<X0>, char a2@<W1>, _OWORD *a3@<X8>, CGFloat a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  __int128 v11;
  double v12;
  CGPoint v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  CGFloat tx;
  CGFloat ty;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat result;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  CGAffineTransform v39;
  CGAffineTransform t2;
  CGAffineTransform t1;

  v11 = *(_OWORD *)(a1 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace + 16);
  *(_OWORD *)&t1.a = *(_OWORD *)(a1 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace);
  *(_OWORD *)&t1.c = v11;
  *(_OWORD *)&t1.tx = *(_OWORD *)(a1 + OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace + 32);
  v12 = 0.5;
  *(_QWORD *)&v11 = 0.5;
  v13 = CGPointApplyAffineTransform(*(CGPoint *)((char *)&v11 - 8), &t1);
  if ((a2 & 1) != 0)
  {
    if (one-time initialization token for resizeRotateSnapToAngleStep != -1)
      swift_once();
    v14 = (a4 + a5) * (1.0 / *(double *)&static UIConstants.resizeRotateSnapToAngleStep);
    v15 = floor(v14);
    v16 = v14 - v15;
    v17 = ceil(v14);
    if (v16 < 0.49)
      v17 = v15;
    v18 = v17 / (1.0 / *(double *)&static UIConstants.resizeRotateSnapToAngleStep) - a5;
    if (one-time initialization token for resizeRotateSnapToAngleThreshold != -1)
      swift_once();
    v19 = *(double *)&static UIConstants.resizeRotateSnapToAngleThreshold;
    if (one-time initialization token for resizeRotateMinimumSnapAngle != -1)
      swift_once();
    v20 = *(double *)&static UIConstants.resizeRotateMinimumSnapAngle * a6;
    if (one-time initialization token for resizeRotateMaximumSnapAngle != -1)
      swift_once();
    v21 = *(double *)&static UIConstants.resizeRotateMaximumSnapAngle * a6;
    if (*(double *)&static UIConstants.resizeRotateMaximumSnapAngle * a6 >= v19)
      v21 = v19;
    if (v19 < v20)
      v21 = v20;
    if (fabs((v18 - a4) * a6) < v21)
      a4 = v18;
  }
  CGAffineTransformMakeRotation(&t1, a4);
  v35 = *(_OWORD *)&t1.c;
  v37 = *(_OWORD *)&t1.a;
  tx = t1.tx;
  ty = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -v13.x, -v13.y);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  v28 = t1.tx;
  v29 = t1.ty;
  *(_OWORD *)&t2.a = v37;
  *(_OWORD *)&t2.c = v35;
  t2.tx = tx;
  t2.ty = ty;
  CGAffineTransformConcat(&v39, &t1, &t2);
  v36 = *(_OWORD *)&v39.c;
  v38 = *(_OWORD *)&v39.a;
  v30 = v39.tx;
  v31 = v39.ty;
  t1.a = a;
  t1.b = b;
  t1.c = c;
  t1.d = d;
  t1.tx = v28;
  t1.ty = v29;
  CGAffineTransformInvert(&t2, &t1);
  *(_OWORD *)&t1.a = v38;
  *(_OWORD *)&t1.c = v36;
  t1.tx = v30;
  t1.ty = v31;
  CGAffineTransformConcat(&v39, &t1, &t2);
  result = v39.a;
  v33 = *(_OWORD *)&v39.c;
  v34 = *(_OWORD *)&v39.tx;
  *a3 = *(_OWORD *)&v39.a;
  a3[1] = v33;
  a3[2] = v34;
  return result;
}

void closure #1 in ResizeView.startNudging(by:largerJump:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  void *v4;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = (_QWORD *)MEMORY[0x1DF0E666C](v2);
  if (v3)
  {
    v4 = v3;
    (*(void (**)(double, double))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x308))(*(double *)((char *)v3 + OBJC_IVAR____TtC8PaperKit10ResizeView_nudgeDelta), *(double *)((char *)v3 + OBJC_IVAR____TtC8PaperKit10ResizeView_nudgeDelta + 8));

  }
}

Swift::Bool __swiftcall ResizeView.gestureRecognizerShouldBegin(_:)(UIGestureRecognizer *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v4;
  id v5;
  UIGestureRecognizer *v6;
  char v7;
  void *v8;
  UIGestureRecognizer *v9;
  id v10;
  char v11;
  objc_super v13;

  v2 = v1;
  v4 = *(void **)((char *)v1 + OBJC_IVAR____TtC8PaperKit10ResizeView_rotationGestureRecognizer);
  if (v4)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
    v5 = v4;
    v6 = a1;
    v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) != 0 && ((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x238))() & 1) == 0)
      return 0;
  }
  v8 = *(void **)((char *)v2 + OBJC_IVAR____TtC8PaperKit10ResizeView_dragGestureRecognizer);
  if (v8)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
    v9 = a1;
    v10 = v8;
    v11 = static NSObject.== infix(_:_:)();

    if ((v11 & 1) != 0 && ((*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x230))() & 1) == 0)
      return 0;
  }
  v13.receiver = v2;
  v13.super_class = (Class)type metadata accessor for ResizeView();
  return -[UIGestureRecognizer gestureRecognizerShouldBegin:](&v13, sel_gestureRecognizerShouldBegin_, a1);
}

id ResizeView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ResizeView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ResizeView()
{
  return objc_opt_self();
}

uint64_t storeEnumTagSinglePayload for ResizeView.ConstrainedAxis(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1DDD698C0 + 4 * byte_1DDF41ADD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1DDD698F4 + 4 * asc_1DDF41AD8[v4]))();
}

uint64_t sub_1DDD698F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDD698FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDD69904);
  return result;
}

uint64_t sub_1DDD69910(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDD69918);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1DDD6991C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDD69924(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for ResizeView.ConstrainedAxis()
{
  return &unk_1EA84C550;
}

_QWORD *initializeBufferWithCopyOfBuffer for ResizeView.ActiveHandle(_QWORD *a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v4 = v3;
  *a1 = v3;
  return a1;
}

void destroy for ResizeView.ActiveHandle(void **a1)
{
  void *v1;

  v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF)

}

void **assignWithCopy for ResizeView.ActiveHandle(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
    {
      *a1 = v4;
      v6 = v4;
      return a1;
    }
LABEL_7:
    *a1 = v4;
    return a1;
  }
  if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    v4 = *a2;
    goto LABEL_7;
  }
  *a1 = v4;
  v5 = v4;

  return a1;
}

void **assignWithTake for ResizeView.ActiveHandle(void **a1, unint64_t *a2)
{
  void *v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
    goto LABEL_6;
  if (v4 < 0xFFFFFFFF)
  {

LABEL_6:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

ValueMetadata *type metadata accessor for ResizeView.ActiveHandle()
{
  return &type metadata for ResizeView.ActiveHandle;
}

unint64_t lazy protocol witness table accessor for type ResizeView.ConstrainedAxis and conformance ResizeView.ConstrainedAxis()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResizeView.ConstrainedAxis and conformance ResizeView.ConstrainedAxis;
  if (!lazy protocol witness table cache variable for type ResizeView.ConstrainedAxis and conformance ResizeView.ConstrainedAxis)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for ResizeView.ConstrainedAxis, &unk_1EA84C550);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResizeView.ConstrainedAxis and conformance ResizeView.ConstrainedAxis);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UITouch and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UITouch and conformance NSObject;
  if (!lazy protocol witness table cache variable for type UITouch and conformance NSObject)
  {
    v1 = type metadata accessor for NSObject(255, &lazy cache variable for type metadata for UITouch);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject);
  }
  return result;
}

id specialized ResizeView.transformWithGesture(_:activeHandle:transform:)(void *a1, void *a2, _QWORD *a3, void *a4, void *a5, char a6)
{
  id result;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  void *v16;
  _OWORD v17[3];

  result = objc_msgSend(a1, sel_state);
  switch((unint64_t)result)
  {
    case 0uLL:
      return result;
    case 1uLL:
      v16 = *(void **)((char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle);
      *(_QWORD *)((char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle) = a2;
      outlined copy of ResizeView.ActiveHandle(a2);
      outlined consume of ResizeView.ActiveHandle(v16);
      result = (id)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a3) + 0x270))();
      break;
    case 2uLL:
      closure #1 in ResizeView.dragMoved(_:axisConstrained:)(a4, (uint64_t)a5, a6 & 1, v17);
      v13 = (char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_transientResizeTransform;
      v14 = v17[1];
      *(_OWORD *)v13 = v17[0];
      *((_OWORD *)v13 + 1) = v14;
      *((_OWORD *)v13 + 2) = v17[2];
      v13[48] = 0;
      result = (id)(*(uint64_t (**)(_OWORD *))((*MEMORY[0x1E0DEEDD8] & *a3) + 0x278))(v17);
      break;
    case 3uLL:
      v15 = (char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_transientResizeTransform;
      *(_OWORD *)v15 = 0u;
      *((_OWORD *)v15 + 1) = 0u;
      *((_OWORD *)v15 + 2) = 0u;
      v15[48] = 1;
      result = (id)(*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & *a3) + 0x280))(0);
      break;
    case 4uLL:
    case 5uLL:
      v12 = (char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_transientResizeTransform;
      *(_OWORD *)v12 = 0u;
      *((_OWORD *)v12 + 1) = 0u;
      *((_OWORD *)v12 + 2) = 0u;
      v12[48] = 1;
      result = (id)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a3) + 0x280))(1);
      break;
    default:

      result = (id)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
  }
  return result;
}

id specialized ResizeView.transformWithGesture(_:activeHandle:transform:)(void *a1, void *a2, _QWORD *a3, void *a4, char a5, CGFloat a6, double a7, double a8)
{
  id result;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  void *v20;
  _OWORD v21[3];

  result = objc_msgSend(a1, sel_state);
  switch((unint64_t)result)
  {
    case 0uLL:
      return result;
    case 1uLL:
      v20 = *(void **)((char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle);
      *(_QWORD *)((char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle) = a2;
      outlined copy of ResizeView.ActiveHandle(a2);
      outlined consume of ResizeView.ActiveHandle(v20);
      result = (id)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a3) + 0x270))();
      break;
    case 2uLL:
      closure #1 in ResizeView.rotate(_:activeHandle:rotation:snapDistance:snapping:)((uint64_t)a4, a5 & 1, v21, a6, a7, a8);
      v17 = (char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_transientResizeTransform;
      v18 = v21[1];
      *(_OWORD *)v17 = v21[0];
      *((_OWORD *)v17 + 1) = v18;
      *((_OWORD *)v17 + 2) = v21[2];
      v17[48] = 0;
      result = (id)(*(uint64_t (**)(_OWORD *))((*MEMORY[0x1E0DEEDD8] & *a3) + 0x278))(v21);
      break;
    case 3uLL:
      v19 = (char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_transientResizeTransform;
      *(_OWORD *)v19 = 0u;
      *((_OWORD *)v19 + 1) = 0u;
      *((_OWORD *)v19 + 2) = 0u;
      v19[48] = 1;
      result = (id)(*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & *a3) + 0x280))(0);
      break;
    case 4uLL:
    case 5uLL:
      v16 = (char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_transientResizeTransform;
      *(_OWORD *)v16 = 0u;
      *((_OWORD *)v16 + 1) = 0u;
      *((_OWORD *)v16 + 2) = 0u;
      v16[48] = 1;
      result = (id)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a3) + 0x280))(1);
      break;
    default:

      result = (id)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
  }
  return result;
}

id specialized ResizeView.transformWithGesture(_:activeHandle:transform:)(void *a1, void *a2, _QWORD *a3, void *a4, _QWORD *a5, char a6, void *a7, char a8)
{
  id result;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  void *v20;
  _OWORD v21[3];

  result = objc_msgSend(a1, sel_state);
  switch((unint64_t)result)
  {
    case 0uLL:
      return result;
    case 1uLL:
      v20 = *(void **)((char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle);
      *(_QWORD *)((char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle) = a2;
      outlined copy of ResizeView.ActiveHandle(a2);
      outlined consume of ResizeView.ActiveHandle(v20);
      result = (id)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *a3) + 0x270))();
      break;
    case 2uLL:
      closure #1 in ResizeView.resizeHandleMoved(_:handle:fromCenter:aspectLocked:)(a4, a5, a6 & 1, (uint64_t)a7, a8 & 1, v21);
      v17 = (char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_transientResizeTransform;
      v18 = v21[1];
      *(_OWORD *)v17 = v21[0];
      *((_OWORD *)v17 + 1) = v18;
      *((_OWORD *)v17 + 2) = v21[2];
      v17[48] = 0;
      result = (id)(*(uint64_t (**)(_OWORD *))((*MEMORY[0x1E0DEEDD8] & *a3) + 0x278))(v21);
      break;
    case 3uLL:
      v19 = (char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_transientResizeTransform;
      *(_OWORD *)v19 = 0u;
      *((_OWORD *)v19 + 1) = 0u;
      *((_OWORD *)v19 + 2) = 0u;
      v19[48] = 1;
      result = (id)(*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & *a3) + 0x280))(0);
      break;
    case 4uLL:
    case 5uLL:
      v16 = (char *)a3 + OBJC_IVAR____TtC8PaperKit10ResizeView_transientResizeTransform;
      *(_OWORD *)v16 = 0u;
      *((_OWORD *)v16 + 1) = 0u;
      *((_OWORD *)v16 + 2) = 0u;
      v16[48] = 1;
      result = (id)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a3) + 0x280))(1);
      break;
    default:

      result = (id)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
  }
  return result;
}

void specialized ResizeView.init(coder:)()
{
  _BYTE *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  char *v4;
  _QWORD *v5;

  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit10ResizeView_controlHandles] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit10ResizeView_currentActiveHandle] = 0;
  v1 = &v0[OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpace];
  *v1 = 0x3FF0000000000000;
  v1[1] = 0;
  v1[2] = 0;
  v1[3] = 0x3FF0000000000000;
  v1[4] = 0;
  v1[5] = 0;
  v2 = &v0[OBJC_IVAR____TtC8PaperKit10ResizeView_resizeOriginalCoordinateSpaceScaled];
  *v2 = 0x3FF0000000000000;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0x3FF0000000000000;
  v2[4] = 0;
  v2[5] = 0;
  v3 = &v0[OBJC_IVAR____TtC8PaperKit10ResizeView_originalControlPointLocation];
  *v3 = 0;
  v3[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit10ResizeView_dragGestureRecognizer] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit10ResizeView_rotationGestureRecognizer] = 0;
  v4 = &v0[OBJC_IVAR____TtC8PaperKit10ResizeView_transientResizeTransform];
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  v4[48] = 1;
  v0[OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing] = 0;
  v0[OBJC_IVAR____TtC8PaperKit10ResizeView_dragConstainedAxis] = 0;
  v5 = &v0[OBJC_IVAR____TtC8PaperKit10ResizeView_nudgeDelta];
  *v5 = 0;
  v5[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit10ResizeView_nudgeTimer] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1DDD6A204()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in ResizeView.startNudging(by:largerJump:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in ResizeView.startNudging(by:largerJump:)(a1, v1);
}

uint64_t block_copy_helper_44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_44()
{
  return swift_release();
}

uint64_t WeakPaperPageWrapper.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  void (*v23)(char *, uint64_t, uint64_t, double);
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t);
  int v29;
  uint64_t *v30;
  char v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  _BYTE v40[24];
  uint64_t v41;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v37 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (WeakTagged_3<TaggedPaperPage>?, WeakTagged_3<TaggedPaperPage>?));
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v11, v12);
  v38 = (uint64_t)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v36 - v16;
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v22 = (char *)&v36 - v21;
  v23 = *(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16);
  v23((char *)&v36 - v21, v1 + OBJC_IVAR____TtC8PaperKitP33_F9BA2F3895C2005D59C823F72F32582820WeakPaperPageWrapper_ref, v3, v20);
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v24(v22, 0, 1, v3);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v40, &demangling cache variable for type metadata for Any?);
  if (v41)
  {
    type metadata accessor for WeakPaperPageWrapper();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v25 = v39;
      ((void (*)(char *, char *, uint64_t))v23)(v17, &v39[OBJC_IVAR____TtC8PaperKitP33_F9BA2F3895C2005D59C823F72F32582820WeakPaperPageWrapper_ref], v3);

      v26 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v40, &demangling cache variable for type metadata for Any?);
  }
  v26 = 1;
LABEL_6:
  v24(v17, v26, 1, v3);
  v27 = (uint64_t)&v10[*(int *)(v7 + 48)];
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v22, (uint64_t)v10, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v17, v27, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v28((uint64_t)v10, 1, v3) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    v29 = v28(v27, 1, v3);
    if (v29 == 1)
      v30 = &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?;
    else
      v30 = &demangling cache variable for type metadata for (WeakTagged_3<TaggedPaperPage>?, WeakTagged_3<TaggedPaperPage>?);
    if (v29 == 1)
      v31 = -1;
    else
      v31 = 0;
  }
  else
  {
    v32 = v38;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v10, v38, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    if (v28(v27, 1, v3) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v32, v3);
      v31 = 0;
      v30 = &demangling cache variable for type metadata for (WeakTagged_3<TaggedPaperPage>?, WeakTagged_3<TaggedPaperPage>?);
    }
    else
    {
      v33 = v37;
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v37, v27, v3);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakTagged_3<TaggedPaperPage> and conformance WeakTagged_3<A>, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>, MEMORY[0x1E0D11E48]);
      v31 = dispatch thunk of static Equatable.== infix(_:_:)();
      v34 = *(void (**)(char *, uint64_t))(v4 + 8);
      v34(v33, v3);
      v30 = &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      v34((char *)v32, v3);
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, v30);
  return v31 & 1;
}

id WeakPaperPageWrapper.__deallocating_deinit()
{
  return PaperDocumentPasswordViewController.__deallocating_deinit(0, type metadata accessor for WeakPaperPageWrapper);
}

uint64_t ObjC metadata update function for WeakPaperPageWrapper()
{
  return type metadata accessor for WeakPaperPageWrapper();
}

uint64_t type metadata accessor for WeakPaperPageWrapper()
{
  uint64_t result;

  result = type metadata singleton initialization cache for WeakPaperPageWrapper;
  if (!type metadata singleton initialization cache for WeakPaperPageWrapper)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for WeakPaperPageWrapper()
{
  unint64_t v0;

  type metadata accessor for WeakTagged_3<TaggedPaperPage>();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t type metadata accessor for SendableImage()
{
  return objc_opt_self();
}

void closure #1 in ThumbnailRenderer.renderThumbnail(ref:model:vertical:iconScale:thumbnailSize:completion:)(_QWORD *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void *), uint64_t a7, double a8, double a9, double a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  CGFloat v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  CGFloat b;
  CGFloat a;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  dispatch_semaphore_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  CGFloat *v59;
  NSObject *v60;
  void *v61;
  void *v62;
  id v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(void *);
  CGFloat v69;
  CGFloat v70;
  CGFloat v71;
  CGFloat v72;
  CGFloat v73;
  CGFloat v74;
  double v75;
  double v76;
  double v77;
  uint64_t v78;
  CGAffineTransform v79;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v82;
  CGRect v83;
  CGRect v84;
  CGRect v85;

  v67 = a7;
  v68 = a6;
  v66 = a5;
  v65 = a4;
  v78 = a3;
  v75 = a10;
  v76 = a9;
  v77 = a8;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  MEMORY[0x1E0C80A78](v12, v15);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a1[3];
  v21 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v20);
  v74 = (*(double (**)(uint64_t, uint64_t))(v21 + 56))(v20, v21);
  v73 = v22;
  v72 = v23;
  v71 = v24;
  v25 = a1[3];
  v26 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v25);
  v27 = (*(double (**)(uint64_t, uint64_t))(v26 + 64))(v25, v26);
  v28 = a1[3];
  v29 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v28);
  v30 = (*(double (**)(uint64_t, uint64_t))(v29 + 56))(v28, v29);
  v32 = v31;
  v70 = v33;
  v69 = v34;
  CGAffineTransformMakeRotation(&t1, v27);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  tx = t1.tx;
  ty = t1.ty;
  v82.origin.x = v30;
  v82.origin.y = v32;
  v82.size.width = v70;
  v82.size.height = v69;
  v83 = CGRectApplyAffineTransform(v82, &t1);
  CGAffineTransformMakeTranslation(&t1, v30 - v83.origin.x, v32 - v83.origin.y);
  v41 = *(_OWORD *)&t1.a;
  v42 = *(_OWORD *)&t1.c;
  v43 = *(_OWORD *)&t1.tx;
  t1.a = a;
  t1.b = b;
  t1.c = c;
  t1.d = d;
  t1.tx = tx;
  t1.ty = ty;
  *(_OWORD *)&t2.a = v41;
  *(_OWORD *)&t2.c = v42;
  *(_OWORD *)&t2.tx = v43;
  CGAffineTransformConcat(&v79, &t1, &t2);
  t1 = v79;
  v84.origin.x = v74;
  v84.origin.y = v73;
  v84.size.width = v72;
  v84.size.height = v71;
  v85 = CGRectApplyAffineTransform(v84, &t1);
  x = v85.origin.x;
  y = v85.origin.y;
  width = v85.size.width;
  height = v85.size.height;
  v85.origin.x = v85.size.height / v85.size.width;
  v48 = (v75 + -6.0) / (v85.size.height / v85.size.width);
  v49 = v76 + -6.0;
  v50 = (v76 + -6.0) * v85.origin.x;
  if ((a2 & 1) == 0)
  {
    v49 = v48;
    v50 = v75 + -6.0;
  }
  v51 = v50 * v77;
  v52 = v49 * v77;
  v53 = dispatch_semaphore_create(0);
  type metadata accessor for SendableImage();
  v54 = swift_allocObject();
  *(_QWORD *)(v54 + 16) = 0;
  v55 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v19, 1, 1, v55);
  outlined init with copy of FindResult((uint64_t)a1, (uint64_t)&t1);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v78, v12);
  v56 = (*(unsigned __int8 *)(v13 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v57 = (v14 + v56 + 7) & 0xFFFFFFFFFFFFFFF8;
  v58 = swift_allocObject();
  *(_QWORD *)(v58 + 16) = 0;
  *(_QWORD *)(v58 + 24) = 0;
  *(double *)(v58 + 32) = v52;
  *(double *)(v58 + 40) = v51;
  *(_QWORD *)(v58 + 48) = v54;
  outlined init with take of FindResult((__int128 *)&t1, v58 + 56);
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v58 + v56, (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  v59 = (CGFloat *)(v58 + v57);
  *v59 = x;
  v59[1] = y;
  v59[2] = width;
  v59[3] = height;
  *(_QWORD *)(v58 + ((v57 + 39) & 0xFFFFFFFFFFFFFFF8)) = v53;
  swift_retain();
  v60 = v53;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v19, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in ThumbnailRenderer.renderThumbnail(ref:model:vertical:iconScale:thumbnailSize:completion:), v58);
  swift_release();
  OS_dispatch_semaphore.wait()();
  v61 = *(void **)(v54 + 16);
  if (v61)
  {
    v62 = *(void **)(v65 + 16);
    v63 = v61;
    objc_msgSend(v62, sel_setObject_forKey_, v63, v66);
    v64 = v63;
    v68(v61);

  }
  swift_release();

}

uint64_t closure #1 in closure #1 in ThumbnailRenderer.renderThumbnail(ref:model:vertical:iconScale:thumbnailSize:completion:)(double a1, double a2, double a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  *(_QWORD *)(v13 + 128) = a13;
  *(double *)(v13 + 112) = a5;
  *(double *)(v13 + 120) = a6;
  *(double *)(v13 + 96) = a3;
  *(double *)(v13 + 104) = a4;
  *(_QWORD *)(v13 + 80) = a11;
  *(_QWORD *)(v13 + 88) = a12;
  *(_QWORD *)(v13 + 72) = a10;
  *(double *)(v13 + 56) = a1;
  *(double *)(v13 + 64) = a2;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in ThumbnailRenderer.renderThumbnail(ref:model:vertical:iconScale:thumbnailSize:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;

  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  v14 = *(_OWORD *)(v0 + 96);
  v3 = *(_QWORD **)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  type metadata accessor for ImageRenderer();
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = v5;
  v6[3] = v4;
  v6[4] = 0x4000000000000000;
  *(_QWORD *)(v0 + 136) = specialized CanvasElementImageRenderer.__allocating_init(renderer:)((uint64_t)v6);
  v7 = v3[3];
  v8 = v3[4];
  v9 = __swift_project_boxed_opaque_existential_1(v3, v7);
  *(_OWORD *)(v0 + 16) = v14;
  *(_QWORD *)(v0 + 32) = v2;
  *(_QWORD *)(v0 + 40) = v1;
  *(_BYTE *)(v0 + 48) = 0;
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v10;
  v11 = type metadata accessor for PaperDocument(0);
  v12 = *(_QWORD *)(v8 + 8);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  *v10 = v0;
  v10[1] = closure #1 in closure #1 in ThumbnailRenderer.renderThumbnail(ref:model:vertical:iconScale:thumbnailSize:completion:);
  return CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:)((uint64_t)v9, *(_QWORD *)(v0 + 88), v0 + 16, 0, 0, v7, v11, v12);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(v0 + 152);

  OS_dispatch_semaphore.signal()();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in ThumbnailRenderer.renderThumbnail(ref:model:vertical:iconScale:thumbnailSize:completion:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 152) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t ThumbnailRenderer.reload(ref:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags();
  v23 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v21 = *(_QWORD *)(v7 - 8);
  v22 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v15 = MEMORY[0x1E0C80A78](v11, v14);
  v20[1] = *(_QWORD *)(v1 + 24);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11, v15);
  v16 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v1;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v17 + v16, (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  aBlock[4] = partial apply for closure #1 in ThumbnailRenderer.reload(ref:);
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_45;
  v18 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v24 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1DF0E48C0](0, v10, v6, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v22);
  return swift_release();
}

void closure #1 in ThumbnailRenderer.reload(ref:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void (*v11)(char *, uint64_t, uint64_t, double);
  objc_class *v12;
  char *v13;
  id v14;
  objc_super v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = MEMORY[0x1E0C80A78](v4, v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)(a1 + 16);
  v11 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v11(v9, a2, v4, v7);
  v12 = (objc_class *)type metadata accessor for WeakPaperPageWrapper();
  v13 = (char *)objc_allocWithZone(v12);
  ((void (*)(char *, char *, uint64_t))v11)(&v13[OBJC_IVAR____TtC8PaperKitP33_F9BA2F3895C2005D59C823F72F32582820WeakPaperPageWrapper_ref], v9, v4);
  v15.receiver = v13;
  v15.super_class = v12;
  v14 = objc_msgSendSuper2(&v15, sel_init);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  objc_msgSend(v10, sel_removeObjectForKey_, v14);

}

uint64_t ThumbnailRenderer.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ThumbnailRenderer()
{
  return objc_opt_self();
}

uint64_t ThumbnailRenderer.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v1, v3);
  v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v9, v10);
  *(_QWORD *)(v0 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D38]), sel_init);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.userInitiated.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, *MEMORY[0x1E0DEF8D8], v4);
  v12[1] = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v2, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(_QWORD *)(v0 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  return v0;
}

uint64_t specialized PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  id v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  id v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;

  v64 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v65 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v19 = *(_QWORD *)(v18 - 8);
  v21 = MEMORY[0x1E0C80A78](v18, v20);
  v23 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = objc_msgSend(a4, sel_thumbnailView, v21);
  if (!v24)
    return 0;
  v25 = v24;
  v63 = v14;
  type metadata accessor for PPKPDFThumbnailView();
  v26 = swift_dynamicCastClass();
  if (!v26
    || (v27 = (void *)v26,
        (v28 = MEMORY[0x1DF0E666C](v26 + OBJC_IVAR____TtC8PaperKit19PPKPDFThumbnailView_documentView)) == 0))
  {

    return 0;
  }
  v29 = (char *)v28;
  v62 = v15;
  type metadata accessor for PaperKitPDFPage(0);
  v30 = swift_dynamicCastClass();
  if (!v30)
  {

    return 0;
  }
  v31 = (void *)v30;
  v61 = a3;
  v60 = objc_msgSend(v27, sel_layoutMode);
  v32 = objc_msgSend((id)objc_opt_self(), sel_mainScreen);
  objc_msgSend(v32, sel_scale);
  v34 = v33;

  objc_msgSend(v27, sel_thumbnailSize);
  v36 = v35;
  v38 = v37;
  PaperDocumentView.loadPaperKitPageIfNeeded(for:)(v31);
  v39 = &v29[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v23, v39, v18);
  v40 = (uint64_t)v31 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v40, (uint64_t)v9, &demangling cache variable for type metadata for PageId?);
  v41 = type metadata accessor for PageId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 48))(v9, 1, v41))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for PageId?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v62 + 56))(v13, 1, 1, v63);
LABEL_10:
    (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v18);

    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    return 0;
  }
  v42 = v60;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v9[*(int *)(v41 + 20)], (uint64_t)v13, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for PageId?);
  v44 = v62;
  v43 = v63;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v13, 1, v63) == 1)
    goto LABEL_10;
  v59 = v31;
  v47 = v34 + v34;
  v48 = *(void (**)(char *, char *, uint64_t))(v44 + 32);
  v49 = (uint64_t)v65;
  v48(v65, v13, v43);
  if (one-time initialization token for shared != -1)
    swift_once();
  v50 = v42 == 0;
  v60 = (id)static ThumbnailRenderer.shared;
  v51 = swift_allocObject();
  v52 = v64;
  swift_unknownObjectWeakInit();
  v53 = v61;
  v45 = specialized ThumbnailRenderer.renderThumbnail(ref:model:vertical:iconScale:thumbnailSize:completion:)(v49, (uint64_t)v23, v50, (uint64_t)v60, v51, v59, v47, v36, v38);
  v54 = v53;
  swift_release();

  if (v52)
  {
    type metadata accessor for PPKPDFIconCollectionViewCell_iOS_Swift();
    v55 = swift_dynamicCastClass();
    v56 = v62;
    if (v55)
    {
      *(_QWORD *)(v55 + OBJC_IVAR___PPKPDFIconCollectionViewCell_iOS_Swift_imageFetch) = v45;
      swift_retain();

      swift_release();
    }
    else
    {

    }
    v57 = v63;
  }
  else
  {

    v56 = v62;
    v57 = v63;
  }
  (*(void (**)(char *, uint64_t))(v56 + 8))(v65, v57);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v18);
  return v45;
}

uint64_t closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:)(void *a1, uint64_t a2, void *a3, uint64_t (*a4)(void *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  type metadata accessor for MainActor();
  v13 = a1;
  swift_retain();
  v14 = a3;
  v15 = static MainActor.shared.getter();
  v16 = (_QWORD *)swift_allocObject();
  v17 = MEMORY[0x1E0DF06E8];
  v16[2] = v15;
  v16[3] = v17;
  v16[4] = a1;
  v16[5] = a2;
  v16[6] = v14;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&closure #1 in closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:)partial apply, (uint64_t)v16);
  swift_release();
  return a4(a1);
}

uint64_t closure #1 in closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[12] = a5;
  v6[13] = a6;
  v6[11] = a4;
  type metadata accessor for MainActor();
  v6[14] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;

  v1 = v0[11];
  swift_release();
  if (v1)
  {
    v2 = (void *)v0[11];
    v3 = v0[12] + 16;
    swift_beginAccess();
    v4 = MEMORY[0x1DF0E666C](v3);
    if (v4)
    {
      v5 = (void *)v4;
      v6 = (id)v0[13];
      v7 = v2;
      v8 = objc_msgSend(v5, sel_page);

      if (v8 == v6)
      {
        v9 = (void *)objc_opt_self();
        v10 = objc_msgSend(v5, sel_imageView);
        v11 = swift_allocObject();
        *(_QWORD *)(v11 + 16) = v5;
        *(_QWORD *)(v11 + 24) = v7;
        v0[6] = partial apply for closure #1 in closure #1 in closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:);
        v0[7] = v11;
        v0[2] = MEMORY[0x1E0C809B0];
        v0[3] = 1107296256;
        v0[4] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
        v0[5] = &block_descriptor_22_1;
        v12 = _Block_copy(v0 + 2);
        v13 = v7;
        v14 = v5;
        swift_release();
        objc_msgSend(v9, sel_transitionWithView_duration_options_animations_completion_, v10, 5242880, v12, 0, 0.2);

        _Block_release(v12);
        v5 = v10;
      }
      else
      {

      }
    }
  }
  return ((uint64_t (*)(void))v0[1])();
}

void closure #1 in closure #1 in closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:)(void *a1, uint64_t a2)
{
  id v3;

  v3 = objc_msgSend(a1, sel_imageView);
  objc_msgSend(v3, sel_setImage_, a2);

}

Swift::Void __swiftcall PPKPDFThumbnailsCollectionView.reload(_:)(PDFPage *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  objc_class *v20;
  uint64_t v21;
  objc_super v22;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PaperKitPDFPage(0);
  v17 = swift_dynamicCastClass();
  if (!v17)
    goto LABEL_4;
  v18 = v17 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v18, (uint64_t)v7, &demangling cache variable for type metadata for PageId?);
  v19 = type metadata accessor for PageId(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v7, 1, v19))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for PageId?);
LABEL_4:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
LABEL_5:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    goto LABEL_6;
  }
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v7[*(int *)(v19 + 20)], (uint64_t)v11, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for PageId?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    goto LABEL_5;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v11, v12);
  if (one-time initialization token for shared != -1)
    swift_once();
  ThumbnailRenderer.reload(ref:)((uint64_t)v16);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
LABEL_6:
  v20 = (objc_class *)type metadata accessor for PPKPDFThumbnailsCollectionView();
  v22.receiver = v2;
  v22.super_class = v20;
  -[PDFPage reloadPage:](&v22, sel_reloadPage_, a1);
}

id PPKPDFThumbnailsCollectionView.__deallocating_deinit(uint64_t a1)
{
  return PaperDocumentPasswordViewController.__deallocating_deinit(a1, type metadata accessor for PPKPDFThumbnailsCollectionView);
}

uint64_t type metadata accessor for PPKPDFThumbnailsCollectionView()
{
  return objc_opt_self();
}

uint64_t sub_1DDD6C1A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void partial apply for closure #1 in ThumbnailRenderer.reload(ref:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>)
                                      - 8)
                          + 80);
  closure #1 in ThumbnailRenderer.reload(ref:)(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t block_copy_helper_45(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_45()
{
  return swift_release();
}

uint64_t sub_1DDD6C268()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t specialized ThumbnailRenderer.renderThumbnail(ref:model:vertical:iconScale:thumbnailSize:completion:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void *a6, double a7, double a8, double a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t (*v28)(void *);
  id v29;
  void *v30;
  void (*v31)(char *, uint64_t, uint64_t);
  objc_class *v32;
  char *v33;
  id v34;
  void *v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t (**v55)(void *);
  id v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 aBlock;
  uint64_t (*v72)(uint64_t);
  void *v73;
  void (*v74)();
  uint64_t v75;
  __int128 v76[2];
  objc_super v77;
  _BYTE v78[48];

  v69 = a4;
  v64 = a3;
  v65 = type metadata accessor for DispatchWorkItemFlags();
  MEMORY[0x1E0C80A78](v65, v16);
  v66 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v62 = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63, v18);
  v59 = v19;
  v61 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v20, v21);
  v67 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v25);
  v27 = (char *)&v58 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = (uint64_t (*)(void *))swift_allocObject();
  *((_QWORD *)v28 + 2) = a5;
  *((_QWORD *)v28 + 3) = a6;
  *((_QWORD *)v28 + 4) = UnknownCanvasElementView.flags.modify;
  *((_QWORD *)v28 + 5) = 0;
  type metadata accessor for PaperDocument(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  v68 = a5;
  swift_retain();
  v29 = a6;
  v60 = a2;
  WeakTagged_3.subscript.getter();
  if (v73)
  {
    v30 = v29;
    outlined init with take of FindResult(&aBlock, (uint64_t)v78);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
    v31(v27, a1, v23);
    v32 = (objc_class *)type metadata accessor for WeakPaperPageWrapper();
    v33 = (char *)objc_allocWithZone(v32);
    v31(&v33[OBJC_IVAR____TtC8PaperKitP33_F9BA2F3895C2005D59C823F72F32582820WeakPaperPageWrapper_ref], (uint64_t)v27, v23);
    v77.receiver = v33;
    v77.super_class = v32;
    v34 = objc_msgSendSuper2(&v77, sel_init);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v23);
    v35 = *(void **)(v69 + 16);
    v36 = objc_msgSend(v35, sel_objectForKey_, v34);
    if (!v36)
    {
      objc_msgSend(v35, sel_removeObjectForKey_, v34);
      outlined init with copy of FindResult((uint64_t)v78, (uint64_t)v76);
      v48 = v62;
      v49 = v61;
      v50 = v63;
      (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v61, v60, v63);
      v51 = (*(unsigned __int8 *)(v48 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
      v52 = (v59 + v51 + 7) & 0xFFFFFFFFFFFFFFF8;
      v53 = (v52 + 15) & 0xFFFFFFFFFFFFFFF8;
      v54 = swift_allocObject();
      outlined init with take of FindResult(v76, v54 + 16);
      *(_BYTE *)(v54 + 56) = v64 & 1;
      *(double *)(v54 + 64) = a7;
      *(double *)(v54 + 72) = a8;
      *(double *)(v54 + 80) = a9;
      (*(void (**)(unint64_t, char *, uint64_t))(v48 + 32))(v54 + v51, v49, v50);
      *(_QWORD *)(v54 + v52) = v69;
      *(_QWORD *)(v54 + v53) = v34;
      v55 = (uint64_t (**)(void *))(v54 + ((v53 + 15) & 0xFFFFFFFFFFFFFFF8));
      *v55 = partial apply for closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:);
      v55[1] = v28;
      v74 = partial apply for closure #1 in ThumbnailRenderer.renderThumbnail(ref:model:vertical:iconScale:thumbnailSize:completion:);
      v75 = v54;
      *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
      *((_QWORD *)&aBlock + 1) = 1107296256;
      v72 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      v73 = &block_descriptor_12_0;
      _Block_copy(&aBlock);
      v70 = MEMORY[0x1E0DEE9D8];
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      swift_retain();
      v56 = v34;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      type metadata accessor for DispatchWorkItem();
      swift_allocObject();
      v47 = DispatchWorkItem.init(flags:block:)();
      swift_release();
      OS_dispatch_queue.async(execute:)();

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v78);
      swift_release();
      return v47;
    }
    v37 = v36;
    v38 = type metadata accessor for TaskPriority();
    v39 = (uint64_t)v67;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v67, 1, 1, v38);
    type metadata accessor for MainActor();
    v40 = v37;
    v41 = v68;
    swift_retain();
    v42 = v30;
    v43 = v40;
    v44 = static MainActor.shared.getter();
    v45 = (_QWORD *)swift_allocObject();
    v46 = MEMORY[0x1E0DF06E8];
    v45[2] = v44;
    v45[3] = v46;
    v45[4] = v37;
    v45[5] = v41;
    v45[6] = v42;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v39, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:), (uint64_t)v45);

    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v78);
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&aBlock, &demangling cache variable for type metadata for PaperPage?);
  }
  swift_release();
  return 0;
}

uint64_t sub_1DDD6C870()
{
  uint64_t v0;

  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:)(void *a1)
{
  uint64_t v1;

  return closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(uint64_t (**)(void *))(v1 + 32));
}

uint64_t sub_1DDD6C8B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();

  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in ThumbnailRenderer.renderThumbnail(ref:model:vertical:iconScale:thumbnailSize:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  closure #1 in ThumbnailRenderer.renderThumbnail(ref:model:vertical:iconScale:thumbnailSize:completion:)((_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 56), v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(void *))(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(double *)(v0 + 64), *(double *)(v0 + 72), *(double *)(v0 + 80));
}

uint64_t partial apply for closure #1 in closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1DDD6CA64()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:)()
{
  uint64_t v0;

  closure #1 in closure #1 in closure #1 in PPKPDFThumbnailsCollectionView.getImage(forCell:indexPath:page:completion:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1DDD6CA98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ThumbnailRenderer.renderThumbnail(ref:model:vertical:iconScale:thumbnailSize:completion:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v17;

  v2 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>)
                 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 39) & 0xFFFFFFFFFFFFF8;
  v6 = v0[4];
  v7 = v0[5];
  v8 = v0[6];
  v9 = v0 + 7;
  v10 = (char *)v0 + v3;
  v11 = (char *)v0 + v4;
  v17 = *(_OWORD *)v11;
  v12 = *((_QWORD *)v11 + 2);
  v13 = *((_QWORD *)v11 + 3);
  v14 = *(_QWORD *)((char *)v0 + v5);
  v15 = swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v15;
  *(_QWORD *)v15 = v1;
  *(_QWORD *)(v15 + 8) = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  *(_QWORD *)(v15 + 128) = v14;
  *(_QWORD *)(v15 + 112) = v12;
  *(_QWORD *)(v15 + 120) = v13;
  *(_OWORD *)(v15 + 96) = v17;
  *(_QWORD *)(v15 + 80) = v9;
  *(_QWORD *)(v15 + 88) = v10;
  *(_QWORD *)(v15 + 72) = v8;
  *(_QWORD *)(v15 + 56) = v6;
  *(_QWORD *)(v15 + 64) = v7;
  return swift_task_switch();
}

uint64_t objectdestroy_14Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t type metadata accessor for PKGraphHostingViewController(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for PKGraphHostingViewController);
}

uint64_t type metadata completion function for PKGraphHostingViewController()
{
  return swift_initClassMetadata2();
}

uint64_t key path getter for GraphableExpressionState.expression : GraphableExpressionState@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(_QWORD *)(v3 + 16);
  return swift_retain();
}

uint64_t key path setter for GraphableExpressionState.expression : GraphableExpressionState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
  swift_retain();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return swift_release();
}

uint64_t key path getter for GraphableExpressionState.enabled : GraphableExpressionState@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  result = swift_release();
  *a2 = *(_BYTE *)(v3 + 24);
  return result;
}

uint64_t key path setter for GraphableExpressionState.enabled : GraphableExpressionState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

uint64_t key path getter for GraphableExpressionState.color : GraphableExpressionState@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(_QWORD *)(v3 + 32);
  return swift_retain();
}

uint64_t key path setter for GraphableExpressionState.color : GraphableExpressionState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
  swift_retain();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return swift_release();
}

uint64_t key path getter for GraphableExpressionState.shouldBeObserved : GraphableExpressionState@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  result = swift_release();
  *a2 = *(_BYTE *)(v3 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__shouldBeObserved);
  return result;
}

uint64_t key path setter for GraphableExpressionState.shouldBeObserved : GraphableExpressionState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  return swift_release();
}

uint64_t key path getter for GraphableExpressionsState.expressionStates : GraphableExpressionsState@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphableExpressionsState and conformance GraphableExpressionsState, type metadata accessor for GraphableExpressionsState, (uint64_t)&protocol conformance descriptor for GraphableExpressionsState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(_QWORD *)(v3 + 24);
  return swift_bridgeObjectRetain();
}

uint64_t key path setter for GraphableExpressionsState.expressionStates : GraphableExpressionsState()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphableExpressionsState and conformance GraphableExpressionsState, type metadata accessor for GraphableExpressionsState, (uint64_t)&protocol conformance descriptor for GraphableExpressionsState);
  swift_bridgeObjectRetain();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t specialized closure #1 in GraphElement.graphables<A>(in:)()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
  type metadata accessor for GraphElement();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  return Ref.subscript.getter();
}

uint64_t @objc PKGraphHostingViewController._canShowWhileLocked()()
{
  return 1;
}

uint64_t PKGraphHostingViewController.__allocating_init(rootView:)(uint64_t a1)
{
  objc_class *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v11;

  v3 = type metadata accessor for CalculateGraphView();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_allocWithZone(v1);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, a1, v3);
  v9 = UIHostingController.init(rootView:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return v9;
}

void *PKGraphHostingViewController.__allocating_init(coder:rootView:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  void (*v11)(uint64_t, uint64_t);
  id v12;
  uint64_t v14;

  v4 = type metadata accessor for CalculateGraphView();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_allocWithZone(v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  v10 = (void *)UIHostingController.init(coder:rootView:)();
  v11 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v12 = v10;
  v11(a2, v4);
  if (v10)

  return v10;
}

id @objc PKGraphHostingViewController.init(coder:)(void *a1, uint64_t a2, uint64_t a3)
{
  objc_super v5;

  v5.receiver = a1;
  v5.super_class = (Class)type metadata accessor for PKGraphHostingViewController(0);
  return objc_msgSendSuper2(&v5, sel_initWithCoder_, a3);
}

id PKGraphHostingViewController.__deallocating_deinit()
{
  return FontPicker.Coordinator.__deallocating_deinit(type metadata accessor for PKGraphHostingViewController);
}

uint64_t ObjC metadata update function for PKGraphHostingViewController()
{
  return type metadata accessor for PKGraphHostingViewController(0);
}

void GraphCanvasElementViewController.setupGraphView(canvasElement:frame:expressions:)(double a1, double a2, double a3, double a4)
{
  char *v4;
  char *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  BOOL IsEmpty;
  double MinX;
  double v28;
  double MinY;
  id v30;
  uint64_t v31;
  void *v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  void *v38;
  void *v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  double v47;
  CGRect v48;
  CGRect v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;

  v5 = v4;
  v43 = type metadata accessor for CalculateGraphView();
  v10 = *(_QWORD *)(v43 - 8);
  v12 = MEMORY[0x1E0C80A78](v43, v11);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v15);
  v17 = (char *)&v40 - v16;
  v18 = type metadata accessor for GraphElement();
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  Capsule<>.root.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  v22 = v44;
  v23 = v45;
  v24 = v46;
  v25 = v47;
  outlined destroy of PKStrokeProperties((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for GraphElement);
  v48.origin.x = v22;
  v48.origin.y = v23;
  v48.size.width = v24;
  v48.size.height = v25;
  IsEmpty = CGRectIsEmpty(v48);
  swift_bridgeObjectRetain();
  if (IsEmpty)
  {
    static Animation.easeIn(duration:)();
    type metadata accessor for CalculateGraph();
    swift_allocObject();
    *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_calculateGraph] = CalculateGraph.init(graphExpressions:xAxisBounds:yAxisBounds:animation:)();
    goto LABEL_6;
  }
  v41 = a1;
  v42 = a2;
  v49.origin.x = v22;
  v49.origin.y = v23;
  v49.size.width = v24;
  v49.size.height = v25;
  MinX = CGRectGetMinX(v49);
  v50.origin.x = v22;
  v50.origin.y = v23;
  v50.size.width = v24;
  v50.size.height = v25;
  if (MinX > CGRectGetMaxX(v50))
  {
    __break(1u);
    goto LABEL_13;
  }
  v40 = a3;
  v28 = a4;
  v51.origin.x = v22;
  v51.origin.y = v23;
  v51.size.width = v24;
  v51.size.height = v25;
  MinY = CGRectGetMinY(v51);
  v52.origin.x = v22;
  v52.origin.y = v23;
  v52.size.width = v24;
  v52.size.height = v25;
  if (MinY > CGRectGetMaxY(v52))
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    return;
  }
  static Animation.easeIn(duration:)();
  type metadata accessor for CalculateGraph();
  swift_allocObject();
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_calculateGraph] = CalculateGraph.init(graphExpressions:xAxisBounds:yAxisBounds:animation:)();
  a4 = v28;
  a3 = v40;
  a1 = v41;
  a2 = v42;
LABEL_6:
  swift_release();
  if (*(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_calculateGraph])
  {
    swift_retain_n();
    CalculateGraphView.init(graph:)();
    v30 = objc_allocWithZone((Class)type metadata accessor for PKGraphHostingViewController(0));
    v31 = v43;
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v17, v43);
    v32 = (void *)UIHostingController.init(rootView:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v31);
    v33 = objc_msgSend(v32, sel_view);
    if (v33)
    {
      v34 = v33;
      objc_msgSend(v33, sel_setFrame_, a1, a2, a3, a4);
      v35 = *(void **)&v5[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_hostingController];
      *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_hostingController] = v32;
      v36 = v32;

      objc_msgSend(v34, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
      objc_msgSend(v5, sel_addChildViewController_, v36);
      v37 = objc_msgSend(v5, sel_view);
      if (v37)
      {
        v38 = v37;
        objc_msgSend(v37, sel_addSubview_, v34);

        objc_msgSend(v36, sel_didMoveToParentViewController_, v5);
        v39 = *(void **)&v5[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_graphView];
        *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_graphView] = v34;

        swift_release();
        return;
      }
      goto LABEL_14;
    }

    swift_release();
  }
}

id GraphCanvasElementViewController.__deallocating_deinit()
{
  return FontPicker.Coordinator.__deallocating_deinit((uint64_t (*)(_QWORD))type metadata accessor for GraphCanvasElementViewController);
}

uint64_t type metadata accessor for GraphCanvasElementViewController()
{
  return objc_opt_self();
}

uint64_t GraphCanvasElementView.cachedGraphableExpressionsState.getter()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t KeyPath;
  uint64_t v5;
  char *v6;

  v1 = direct field offset for GraphCanvasElementView.$__lazy_storage_$_cachedGraphableExpressionsState;
  if (*(_QWORD *)&v0[direct field offset for GraphCanvasElementView.$__lazy_storage_$_cachedGraphableExpressionsState])
  {
    v2 = *(_QWORD *)&v0[direct field offset for GraphCanvasElementView.$__lazy_storage_$_cachedGraphableExpressionsState];
  }
  else
  {
    type metadata accessor for GraphableExpressionsState(0);
    v2 = swift_allocObject();
    swift_unknownObjectWeakInit();
    *(_QWORD *)(v2 + 24) = MEMORY[0x1E0DEE9D8];
    v3 = v0;
    ObservationRegistrar.init()();
    KeyPath = swift_getKeyPath();
    MEMORY[0x1E0C80A78](KeyPath, v5);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphableExpressionsState and conformance GraphableExpressionsState, type metadata accessor for GraphableExpressionsState, (uint64_t)&protocol conformance descriptor for GraphableExpressionsState);
    v6 = v3;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();

    GraphableExpressionsState.update()();
    *(_QWORD *)&v0[v1] = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

void @objc GraphCanvasElementView.init(coder:)(char *a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  id v5;

  *(_QWORD *)&a1[direct field offset for GraphCanvasElementView.$__lazy_storage_$_cachedGraphableExpressionsState] = 0;
  *(_QWORD *)&a1[direct field offset for GraphCanvasElementView.graphViewController] = 0;
  v4 = direct field offset for GraphCanvasElementView.expressionIdentifierToId;
  v5 = a3;
  *(_QWORD *)&a1[v4] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void *GraphCanvasElementView.elementViewController.getter()
{
  char *v0;
  uint64_t v1;
  void *v2;
  objc_class *v3;
  char *v4;
  char *v5;
  id v6;
  void *v7;
  id v8;
  objc_super v10;

  v1 = direct field offset for GraphCanvasElementView.graphViewController;
  v2 = *(void **)&v0[direct field offset for GraphCanvasElementView.graphViewController];
  if (!v2)
  {
    v3 = (objc_class *)type metadata accessor for GraphCanvasElementViewController();
    v4 = (char *)objc_allocWithZone(v3);
    *(_QWORD *)&v4[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_calculateGraph] = 0;
    *(_QWORD *)&v4[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_hostingController] = 0;
    *(_QWORD *)&v4[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_graphView] = 0;
    v10.receiver = v4;
    v10.super_class = v3;
    v5 = v0;
    v6 = objc_msgSendSuper2(&v10, sel_initWithNibName_bundle_, 0, 0);
    objc_msgSend(v6, sel_setView_, v5, v10.receiver, v10.super_class);

    v7 = *(void **)&v0[v1];
    *(_QWORD *)&v0[v1] = v6;

    v2 = *(void **)&v0[v1];
  }
  v8 = v2;
  return v2;
}

Swift::Void __swiftcall GraphCanvasElementView.didMoveToSuperview()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  objc_class *v11;
  id v12;
  uint64_t v13;
  char *v14;
  objc_class *v15;
  char *v16;
  _QWORD *v17;
  id v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  char *v23;
  void *v24;
  char *v25;
  id v26;
  void *v27;
  uint64_t v28;
  objc_super v29;
  objc_super v30;

  v1 = v0;
  v2 = type metadata accessor for GraphElement();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (objc_class *)type metadata accessor for GraphCanvasElementView(0);
  v30.receiver = v0;
  v30.super_class = v11;
  objc_msgSendSuper2(&v30, sel_didMoveToSuperview);
  v12 = objc_msgSend(v0, sel_superview);

  v13 = direct field offset for GraphCanvasElementView.graphViewController;
  v14 = *(char **)((char *)v1 + direct field offset for GraphCanvasElementView.graphViewController);
  if (v12)
  {
    if (!v14)
    {
      v15 = (objc_class *)type metadata accessor for GraphCanvasElementViewController();
      v16 = (char *)objc_allocWithZone(v15);
      *(_QWORD *)&v16[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_calculateGraph] = 0;
      *(_QWORD *)&v16[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_hostingController] = 0;
      *(_QWORD *)&v16[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_graphView] = 0;
      v29.receiver = v16;
      v29.super_class = v15;
      v17 = v1;
      v18 = objc_msgSendSuper2(&v29, sel_initWithNibName_bundle_, 0, 0);
      objc_msgSend(v18, sel_setView_, v17);

      v19 = *(void **)((char *)v1 + v13);
      *(_QWORD *)((char *)v1 + v13) = v18;

    }
    specialized CanvasElementView.updateGestures()();
    specialized CanvasElementView.updateFrame()();
    v20 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
    v21 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    if (v20)
    {
      v22 = v20;
      (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v20) + 0x668))();

    }
    v23 = (char *)v1 + *(_QWORD *)((*v21 & *v1) + 0x380);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v23, v6);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
    Capsule<>.root.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    outlined destroy of PKStrokeProperties((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for GraphElement);
    GraphCanvasElementView.cachedGraphableExpressionsState.getter();
    GraphableExpressionsState.update()();
    swift_release();
    GraphCanvasElementView.updateGraphView()();
  }
  else
  {
    if (!v14)
      goto LABEL_11;
    v24 = *(void **)&v14[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_hostingController];
    if (!v24)
      goto LABEL_10;
    v25 = v14;
    v26 = v24;
    objc_msgSend(v26, sel_willMoveToParentViewController_, 0);
    objc_msgSend(*(id *)&v25[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_graphView], sel_removeFromSuperview);
    objc_msgSend(v26, sel_didMoveToParentViewController_, 0);
    objc_msgSend(v26, sel_removeFromParentViewController);

    v14 = *(char **)((char *)v1 + v13);
    if (v14)
    {
LABEL_10:
      objc_msgSend(v14, sel_removeFromParentViewController);
      v27 = *(void **)((char *)v1 + v13);
    }
    else
    {
LABEL_11:
      v27 = 0;
    }
    *(_QWORD *)((char *)v1 + v13) = 0;

  }
}

void @objc GraphCanvasElementView.didMoveToSuperview()(void *a1)
{
  id v1;

  v1 = a1;
  GraphCanvasElementView.didMoveToSuperview()();

}

Swift::Void __swiftcall GraphCanvasElementView.didUpdateExpression(_:identifier:)(Swift::String _, Swift::String identifier)
{
  _QWORD *v2;
  _QWORD *v3;
  void *object;
  uint64_t countAndFlagsBits;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  void (*v17)(_BYTE *, _BYTE *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[16];
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  char *v25;
  _BYTE v26[31];
  char v27;

  v3 = v2;
  object = identifier._object;
  countAndFlagsBits = identifier._countAndFlagsBits;
  v6 = _._object;
  v7 = _._countAndFlagsBits;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v27 = 0;
  v21 = countAndFlagsBits;
  v22 = object;
  v23 = v7;
  v24 = v6;
  v25 = &v27;
  v13 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v14 = (char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  if (v27 == 1)
  {
    v15 = MEMORY[0x1DF0E666C]((char *)v3 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
    if (v15)
    {
      v16 = (_QWORD *)v15;
      (*(void (**)(_BYTE *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
      v26[0] = 4;
      v17 = *(void (**)(_BYTE *, _BYTE *, uint64_t, uint64_t))((*v13 & *v16) + 0x538);
      v18 = type metadata accessor for GraphElement();
      v19 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
      v17(v12, v26, v18, v19);
      v26[0] = 4;
      (*(void (**)(_BYTE *))((*v13 & *v16) + 0x518))(v26);

      (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v12, v8);
    }
  }
}

uint64_t closure #1 in GraphCanvasElementView.didUpdateExpression(_:identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v32;
  void (*v33)(uint64_t *, _QWORD);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  char v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  unsigned int (*v60)(char *, uint64_t, uint64_t);
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v53 = a6;
  v56 = a4;
  v57 = a5;
  v62 = a3;
  v63 = a2;
  v68 = type metadata accessor for GraphableExpression();
  v8 = MEMORY[0x1E0C80A78](v68, v7);
  v55 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v10);
  v61 = (char *)&v51 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
  v73 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v67 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v16);
  v66 = (char *)&v51 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<GraphableExpression>?);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  v65 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v51 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>.Iterator);
  v52 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v51 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  Capsule.Ref<>.subscript.getter();
  v30 = v66;
  swift_release();
  CROrderedSet.makeIterator()();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v25, v22);
  v64 = v29;
  v65 = v26;
  CROrderedSet.Iterator.next()();
  v60 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48);
  if (v60(v21, 1, v12) != 1)
  {
    v58 = *(void (**)(char *, char *, uint64_t))(v73 + 32);
    v59 = v21;
    v54 = a1;
    v58(v30, v21, v12);
    while (1)
    {
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
      v35 = v12;
      v36 = (uint64_t)v61;
      v37 = a1;
      Capsule.Ref.subscript.getter();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
      CRRegister.wrappedValue.getter();
      v38 = v30;
      v40 = v71;
      v39 = v72;
      outlined destroy of PKStrokeProperties(v36, (uint64_t (*)(_QWORD))type metadata accessor for GraphableExpression);
      if (v40 == v63 && v39 == v62)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v67, v38, v35);
        v12 = v35;
      }
      else
      {
        v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v43 = v67;
        (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v67, v38, v35);
        v12 = v35;
        a1 = v37;
        if ((v42 & 1) == 0)
          goto LABEL_17;
      }
      v44 = (uint64_t)v55;
      Capsule.Ref.subscript.getter();
      CRRegister.wrappedValue.getter();
      v46 = v71;
      v45 = v72;
      outlined destroy of PKStrokeProperties(v44, (uint64_t (*)(_QWORD))type metadata accessor for GraphableExpression);
      v48 = v56;
      v47 = v57;
      if (v46 == v56 && v45 == v57)
      {
        swift_bridgeObjectRelease();
        a1 = v54;
        v43 = v67;
LABEL_17:
        v49 = *(void (**)(char *, uint64_t))(v73 + 8);
        v49(v43, v12);
        goto LABEL_20;
      }
      v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v49 = *(void (**)(char *, uint64_t))(v73 + 8);
      v49(v67, v12);
      if ((v50 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        v30 = v66;
        v32 = v54;
        v33 = (void (*)(uint64_t *, _QWORD))Capsule.Ref.subscript.modify();
        v69 = v48;
        v70 = v47;
        a1 = v32;
        CRRegister.wrappedValue.setter();
        v33(&v71, 0);
        v49(v30, v12);
        *v53 = 1;
        goto LABEL_5;
      }
      a1 = v54;
LABEL_20:
      v30 = v66;
      v49(v66, v12);
LABEL_5:
      v34 = v59;
      CROrderedSet.Iterator.next()();
      if (v60(v34, 1, v12) == 1)
        return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v64, v65);
      v58(v30, v34, v12);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v64, v65);
}

double GraphCanvasElementView.graphViewFrame.getter()
{
  void *v0;
  double result;
  double v2;
  uint64_t v3;

  objc_msgSend(v0, sel_bounds);
  v2 = result;
  if ((v3 & 0x7FF0000000000000) == 0x7FF0000000000000)
    result = 0.0;
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
    return 0.0;
  return result;
}

unint64_t GraphCanvasElementView.orphanedGraphables.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  char *v52;
  uint64_t ObjectType;
  uint64_t (*v54)(char *, uint64_t);
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  void (*v68)(char *, uint64_t);
  id v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v77 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for GraphableExpression();
  v9 = *(_QWORD *)(v82 - 8);
  v11 = MEMORY[0x1E0C80A78](v82, v10);
  v78 = (uint64_t)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v68 - v14;
  v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  v79 = *(_QWORD *)(v75 - 8);
  MEMORY[0x1E0C80A78](v75, v16);
  v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for GraphElement();
  MEMORY[0x1E0C80A78](v72, v19);
  v80 = (unint64_t)&v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  v21 = *(_QWORD *)(v74 - 8);
  v23 = MEMORY[0x1E0C80A78](v74, v22);
  v73 = (void (*)(char *, uint64_t))((char *)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v23, v25);
  v27 = (char *)&v68 - v26;
  v28 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (!v28)
    return MEMORY[0x1E0DEE9D8];
  v70 = v9;
  v71 = v18;
  v81 = v6;
  v29 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v30 = v28;
  v31 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v28) + 0x720))();
  v83 = v32;
  v84 = v31;
  if (!v31)
  {

    return MEMORY[0x1E0DEE9D8];
  }
  v69 = v30;
  v76 = v5;
  v33 = (char *)v0 + *(_QWORD *)((*v29 & *v0) + 0x380);
  swift_beginAccess();
  v34 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
  v35 = v74;
  v34(v27, v33, v74);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  v36 = v80;
  Capsule<>.root.getter();
  v68 = *(void (**)(char *, uint64_t))(v21 + 8);
  v68(v27, v35);
  v37 = v73;
  v34((char *)v73, v33, v35);
  v38 = v36 + *(int *)(v72 + 28);
  v39 = v79;
  v40 = v71;
  v41 = v75;
  v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v79 + 16))(v71, v38, v75);
  MEMORY[0x1E0C80A78](v42, v43);
  *(&v68 - 2) = v37;
  v44 = CROrderedSet.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
  v68((char *)v37, v35);
  outlined destroy of PKStrokeProperties(v80, (uint64_t (*)(_QWORD))type metadata accessor for GraphElement);
  v45 = *(_QWORD *)(v44 + 16);
  if (v45)
  {
    v46 = *(unsigned __int8 *)(v70 + 80);
    v74 = v44;
    v75 = (v46 + 32) & ~v46;
    v47 = v44 + v75;
    v48 = *(_QWORD *)(v70 + 72);
    v49 = MEMORY[0x1E0DEE9D8];
    v50 = v76;
    while (1)
    {
      outlined init with copy of GraphableExpression(v47, (uint64_t)v15);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
      CRRegister.wrappedValue.getter();
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      v62 = v81;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v4, 1, v50) == 1)
        break;
      v51 = *(void (**)(char *, char *, uint64_t))(v62 + 32);
      v80 = v49;
      v52 = v77;
      v51(v77, v4, v50);
      ObjectType = swift_getObjectType();
      v54 = *(uint64_t (**)(char *, uint64_t))(v83 + 48);
      v79 = v45;
      v55 = v50;
      v56 = v15;
      v57 = v48;
      v58 = v62;
      v59 = v54(v52, ObjectType);
      v60 = *(void (**)(char *, uint64_t))(v58 + 8);
      v48 = v57;
      v15 = v56;
      v50 = v55;
      v61 = v52;
      v45 = v79;
      v49 = v80;
      v60(v61, v50);
      swift_release();
      if (!v59)
        goto LABEL_9;
LABEL_6:
      outlined destroy of PKStrokeProperties((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for GraphableExpression);
      v47 += v48;
      if (!--v45)
      {

        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
    }
    outlined destroy of UUID?((uint64_t)v4);
LABEL_9:
    v63 = swift_getObjectType();
    v64 = (*(uint64_t (**)(char *, uint64_t))(v83 + 56))(v15, v63);
    swift_release();
    if (!v64)
    {
      outlined init with copy of GraphableExpression((uint64_t)v15, v78);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v49 + 16) + 1, 1, v49);
      v66 = *(_QWORD *)(v49 + 16);
      v65 = *(_QWORD *)(v49 + 24);
      if (v66 >= v65 >> 1)
        v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v65 > 1, v66 + 1, 1, v49);
      *(_QWORD *)(v49 + 16) = v66 + 1;
      outlined init with take of GraphableExpression(v78, v49 + v75 + v66 * v48);
      v50 = v76;
    }
    goto LABEL_6;
  }

  swift_bridgeObjectRelease();
  v49 = MEMORY[0x1E0DEE9D8];
LABEL_19:
  swift_unknownObjectRelease();
  return v49;
}

Swift::Void __swiftcall GraphCanvasElementView.updateGraphView()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  id v67;
  _QWORD *v68;
  uint64_t (*v69)(void);
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t ObjectType;
  void *v74;
  id v75;
  PKDrawing *v76;
  void *v77;
  void *v78;
  id v79;
  uint64_t v80;
  void *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  void (*v87)(char *, char *, uint64_t);
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t *v94;
  int v95;
  char *v96;
  uint64_t *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  void (*v101)(char *, char *, uint64_t);
  uint64_t v102;
  void (*v103)(char *, uint64_t);
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  _QWORD *v111;
  unint64_t v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  id v142;
  char *v143;
  uint64_t inited;
  void *v145;
  id v146;
  id v147;
  void *v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v156;
  unint64_t v157;
  char v158;
  char v159;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v161;
  unint64_t v162;
  void (*v163)(char *, unint64_t, uint64_t);
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  NSObject *v169;
  os_log_type_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  char *v179;
  char *v180;
  uint64_t v181;
  const void *v182;
  void *v183;
  uint64_t *v184;
  char *v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  void (*v190)(char *, uint64_t);
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  char v201;
  unint64_t v202;
  uint64_t v203;
  _BOOL8 v204;
  uint64_t v205;
  char v206;
  uint64_t v207;
  char v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t *v211;
  uint64_t *v212;
  uint64_t v213;
  BOOL v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  _BOOL4 v219;
  void *v220;
  uint64_t v221;
  void *v222;
  char *v223;
  char *v224;
  char *v225;
  char *v226;
  double v227;
  double v228;
  double v229;
  double v230;
  double v231;
  double v232;
  double v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  void *v241;
  char *v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  void *v247;
  char *v248;
  char *v249;
  uint64_t v250;
  void (*v251)(uint64_t, uint64_t);
  uint64_t v252;
  uint64_t v253;
  id v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  void (*v260)(char *, char *, uint64_t);
  uint64_t (*v261)(char *, uint64_t, uint64_t);
  char *v262;
  char *v263;
  uint64_t v264;
  char *v265;
  __int128 v266;
  uint64_t *p_aBlock;
  char *v268;
  char *v269;
  uint64_t v270;
  char *v271;
  void (*v272)(char *, uint64_t);
  char *v273;
  uint64_t v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  __int128 v278;
  uint64_t v279;
  char *v280;
  char *v281;
  char *v282;
  char *v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  uint64_t v288;
  char *v289;
  char *v290;
  uint64_t *v291;
  void (*v292)(char *, char *, uint64_t);
  char *v293;
  uint64_t v294;
  char *v295;
  char *v296;
  char *v297;
  uint64_t v298;
  char *v299;
  uint64_t v300;
  unint64_t v301;
  unsigned int (*v302)(uint64_t, uint64_t, uint64_t);
  char *v303;
  uint64_t v304;
  void (*v305)(char *, uint64_t);
  uint64_t v306;
  _QWORD *aBlock;
  uint64_t v308;
  uint64_t (*v309)(uint64_t);
  void *v310;
  void *v311;
  _QWORD *v312;
  uint64_t v313;
  void *v314;

  v1 = v0;
  v270 = type metadata accessor for DispatchTime();
  v264 = *(_QWORD *)(v270 - 8);
  v3 = MEMORY[0x1E0C80A78](v270, v2);
  v263 = (char *)&v250 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3, v5);
  v265 = (char *)&v250 - v6;
  v286 = type metadata accessor for CalculateExpression.Base();
  v285 = *(_QWORD *)(v286 - 8);
  MEMORY[0x1E0C80A78](v286, v7);
  v284 = (char *)&v250 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchWorkItemFlags();
  v276 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v275 = (char *)&v250 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS();
  v274 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v273 = (char *)&v250 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v17 = MEMORY[0x1E0C80A78](v15, v16);
  v282 = (char *)&v250 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v17, v19);
  v295 = (char *)&v250 - v21;
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v283 = (char *)&v250 - v24;
  MEMORY[0x1E0C80A78](v23, v25);
  v287 = (char *)&v250 - v26;
  v304 = type metadata accessor for UUID();
  v300 = *(_QWORD *)(v304 - 8);
  v28 = MEMORY[0x1E0C80A78](v304, v27);
  v296 = (char *)&v250 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v28, v30);
  v297 = (char *)&v250 - v32;
  MEMORY[0x1E0C80A78](v31, v33);
  v280 = (char *)&v250 - v34;
  v35 = type metadata accessor for GraphElement();
  MEMORY[0x1E0C80A78](v35, v36);
  v269 = (char *)&v250 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v305 = (void (*)(char *, uint64_t))type metadata accessor for GraphableExpression();
  *(_QWORD *)&v266 = *((_QWORD *)v305 - 1);
  v39 = MEMORY[0x1E0C80A78](v305, v38);
  v303 = (char *)&v250 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v39, v41);
  v289 = (char *)&v250 - v42;
  v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
  v291 = *(uint64_t **)(v43 - 8);
  MEMORY[0x1E0C80A78](v43, v44);
  v302 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)&v250 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0));
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<GraphableExpression>?);
  MEMORY[0x1E0C80A78](v46, v47);
  v290 = (char *)&v250 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v279 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  v277 = *(_QWORD *)(v279 - 8);
  MEMORY[0x1E0C80A78](v279, v49);
  *(_QWORD *)&v278 = (char *)&v250 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v294 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  v51 = *(_QWORD *)(v294 - 8);
  v53 = MEMORY[0x1E0C80A78](v294, v52);
  v262 = (char *)&v250 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = MEMORY[0x1E0C80A78](v53, v55);
  v268 = (char *)&v250 - v57;
  MEMORY[0x1E0C80A78](v56, v58);
  v299 = (char *)&v250 - v59;
  v298 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>.Iterator);
  p_aBlock = *(uint64_t **)(v298 - 8);
  MEMORY[0x1E0C80A78](v298, v60);
  v293 = (char *)&v250 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for PKDrawing();
  v63 = *(_QWORD *)(v62 - 8);
  MEMORY[0x1E0C80A78](v62, v64);
  v66 = (char *)&v250 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = objc_msgSend(v1, sel_superview);

  if (v67)
  {
    v68 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
    if (v68)
    {
      v257 = v12;
      v69 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v68) + 0x2F8);
      v258 = v68;
      v70 = (void *)v69();
      v72 = v71;
      ObjectType = swift_getObjectType();
      v74 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v72 + 16))(ObjectType, v72);

      if (!v74)
      {

        return;
      }
      v75 = objc_msgSend(v74, sel_drawing);

      static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
      PKDrawing._bridgeToObjectiveC()(v76);
      v78 = v77;
      v79 = objc_msgSend(v77, sel_uuid);

      (*(void (**)(char *, uint64_t))(v63 + 8))(v66, v62);
      v314 = &unk_1F046F2B8;
      v80 = swift_dynamicCastObjCProtocolConditional();
      if (!v80)
        goto LABEL_89;
      v81 = (void *)v80;
      swift_getObjectType();
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      if (!swift_dynamicCastMetatype())
        v81 = 0;
      if (!v81)
        goto LABEL_89;
      v82 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v83 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v258) + 0x720))();
      if (!v83)
      {

        swift_unknownObjectRelease();
        return;
      }
      v254 = v79;
      v256 = v9;
      v253 = v83;
      v255 = specialized static CalculateDocumentController.controllerForDrawingUUID(_:document:observer:)(v81, v83, v84, (uint64_t)v1);
      v313 = MEMORY[0x1E0DEE9D8];
      v301 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      v85 = *(_QWORD *)((*v82 & *v1) + 0x380);
      v281 = (char *)v1;
      v86 = (char *)v1 + v85;
      swift_beginAccess();
      v87 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
      v88 = v299;
      v271 = v86;
      v89 = v294;
      v292 = v87;
      v87(v299, v86, v294);
      swift_getKeyPath();
      v90 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
      v91 = v278;
      v250 = v90;
      Capsule<>.subscript.getter();
      swift_release();
      v272 = *(void (**)(char *, uint64_t))(v51 + 8);
      v272(v88, v89);
      v92 = v279;
      CROrderedSet.makeIterator()();
      v251 = *(void (**)(uint64_t, uint64_t))(v277 + 8);
      v251(v91, v92);
      v93 = v290;
      CROrderedSet.Iterator.next()();
      v94 = v291;
      v261 = (uint64_t (*)(char *, uint64_t, uint64_t))v291[6];
      v95 = v261(v93, 1, v43);
      v252 = v35;
      if (v95 == 1)
      {
LABEL_10:
        ((void (*)(char *, uint64_t))p_aBlock[1])(v293, v298);
        v96 = v281;
        v97 = (uint64_t *)&v281[direct field offset for GraphCanvasElementView.expressionIdentifierToId];
        swift_beginAccess();
        v291 = v97;
        *v97 = MEMORY[0x1E0DEE9E0];
        swift_bridgeObjectRelease();
        v98 = v299;
        v99 = v271;
        v100 = v294;
        v101 = v292;
        v292(v299, v271, v294);
        v102 = (uint64_t)v269;
        Capsule<>.root.getter();
        v103 = v272;
        v272(v98, v100);
        v104 = v268;
        v101(v268, v99, v100);
        v105 = v278;
        v106 = v279;
        v107 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v277 + 16))(v278, v102 + *(int *)(v252 + 28), v279);
        MEMORY[0x1E0C80A78](v107, v108);
        *(&v250 - 2) = (uint64_t)v104;
        v109 = CROrderedSet.map<A>(_:)();
        v251(v105, v106);
        v103(v104, v100);
        outlined destroy of PKStrokeProperties(v102, (uint64_t (*)(_QWORD))type metadata accessor for GraphElement);
        v110 = *(char **)(v109 + 16);
        v111 = &unk_1DDF31000;
        if (v110)
        {
          v293 = &v255[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document];
          v112 = (*(unsigned __int8 *)(v266 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v266 + 80);
          v268 = (char *)v109;
          v113 = v109 + v112;
          p_aBlock = (uint64_t *)&aBlock;
          v290 = *(char **)(v266 + 72);
          v288 = *MEMORY[0x1E0D09E80];
          LODWORD(v279) = *MEMORY[0x1E0D09CA0];
          *((_QWORD *)&v114 + 1) = 2;
          v278 = xmmword_1DDF32CF0;
          v289 = (char *)(MEMORY[0x1E0DEE9C0] + 8);
          *(_QWORD *)&v114 = 136380931;
          v266 = v114;
          v261 = (uint64_t (*)(char *, uint64_t, uint64_t))(MEMORY[0x1E0DEE9B8] + 8);
          v115 = v300;
          v116 = (uint64_t)v303;
          while (1)
          {
            v299 = v110;
            v298 = v113;
            outlined init with copy of GraphableExpression(v113, v116);
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
            CRRegister.wrappedValue.getter();
            v122 = (uint64_t)aBlock;
            v123 = v308;
            if (!MEMORY[0x1DF0E666C](v293))
            {
LABEL_25:
              CRRegister.wrappedValue.getter();
              v140 = (uint64_t)v283;
              UUID.init(uuidString:)();
              swift_bridgeObjectRelease();
              v141 = v304;
              v302 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v115 + 48);
              if (v302(v140, 1, v304) == 1)
              {
                outlined destroy of UUID?(v140);
                v142 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedInteger_, 0);
                v143 = v297;
                UUID.init()();
              }
              else
              {
                v143 = v297;
                (*(void (**)(char *, uint64_t, uint64_t))(v115 + 32))(v297, v140, v141);
                v142 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedInteger_, 1);
              }
              CRRegister.wrappedValue.getter();
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(CalculateKey, Any)>);
              inited = swift_initStackObject();
              *(_OWORD *)(inited + 16) = v278;
              v145 = (void *)v288;
              *(_QWORD *)(inited + 32) = v288;
              *(_QWORD *)(inited + 64) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
              *(_QWORD *)(inited + 40) = v142;
              v146 = v145;
              v147 = v142;
              specialized Dictionary.init(dictionaryLiteral:)(inited);
              (*(void (**)(char *, char *, uint64_t))(v115 + 16))(v296, v143, v141);
              (*(void (**)(char *, _QWORD, uint64_t))(v285 + 104))(v284, v279, v286);
              type metadata accessor for CalculateExpression();
              swift_allocObject();
              CalculateExpression.init(_:options:base:id:)();

              (*(void (**)(char *, uint64_t))(v115 + 8))(v297, v141);
              goto LABEL_29;
            }
            v124 = *((_QWORD *)v293 + 1);
            CRRegister.wrappedValue.getter();
            v125 = (uint64_t)v287;
            UUID.init(uuidString:)();
            swift_bridgeObjectRelease();
            v126 = v304;
            v302 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v115 + 48);
            if (v302(v125, 1, v304) == 1)
            {
              outlined destroy of UUID?(v125);
            }
            else
            {
              v127 = v280;
              (*(void (**)(char *, uint64_t, uint64_t))(v115 + 32))(v280, v125, v126);
              v128 = swift_getObjectType();
              v129 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v124 + 48))(v127, v128, v124);
              v130 = v127;
              v116 = (uint64_t)v303;
              v115 = v300;
              (*(void (**)(char *, uint64_t))(v300 + 8))(v130, v126);
              if (v129)
              {
                swift_unknownObjectRelease();
                goto LABEL_20;
              }
            }
            v131 = swift_getObjectType();
            v132 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v124 + 56))(v116, v131, v124);
            swift_unknownObjectRelease();
            if (!v132)
              goto LABEL_25;
LABEL_20:
            swift_retain_n();
            v133 = v301;
            if (!*(_QWORD *)(v301 + 16))
            {
              swift_release();
              goto LABEL_32;
            }
            swift_bridgeObjectRetain();
            v134 = specialized __RawDictionaryStorage.find<A>(_:)(v122, v123);
            if ((v135 & 1) == 0)
            {
              swift_release();
              swift_bridgeObjectRelease();
              goto LABEL_32;
            }
            v136 = (uint64_t *)(*(_QWORD *)(v133 + 56) + 16 * v134);
            v138 = *v136;
            v137 = v136[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_release();
            if (v138 == CalculateExpression.expression.getter() && v137 == v139)
            {
              swift_release();
              swift_bridgeObjectRelease_n();
            }
            else
            {
              v167 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v167 & 1) != 0)
              {
                swift_bridgeObjectRelease();
                swift_release();
              }
              else
              {
                if (one-time initialization token for mathLogger != -1)
                  swift_once();
                v168 = type metadata accessor for Logger();
                __swift_project_value_buffer(v168, (uint64_t)mathLogger);
                swift_retain_n();
                swift_bridgeObjectRetain();
                v169 = Logger.logObject.getter();
                v170 = static os_log_type_t.default.getter();
                v171 = v170;
                if (os_log_type_enabled(v169, v170))
                {
                  v172 = swift_slowAlloc();
                  v277 = swift_slowAlloc();
                  aBlock = (_QWORD *)v277;
                  *(_DWORD *)v172 = v266;
                  LODWORD(v269) = v171;
                  swift_bridgeObjectRetain();
                  v306 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v138, v137, (uint64_t *)&aBlock);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease_n();
                  *(_WORD *)(v172 + 12) = 2081;
                  v173 = CalculateExpression.expression.getter();
                  v306 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v173, v174, (uint64_t *)&aBlock);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  _os_log_impl(&dword_1DDB0F000, v169, (os_log_type_t)v269, "Detected graphable expression change from: %{private}s, to: %{private}s", (uint8_t *)v172, 0x16u);
                  v175 = v277;
                  swift_arrayDestroy();
                  MEMORY[0x1DF0E6558](v175, -1, -1);
                  MEMORY[0x1DF0E6558](v172, -1, -1);

                }
                else
                {

                  swift_release_n();
                  swift_bridgeObjectRelease_n();
                }
                type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
                v277 = static OS_dispatch_queue.main.getter();
                v176 = swift_allocObject();
                swift_unknownObjectWeakInit();
                v177 = swift_allocObject();
                swift_weakInit();
                v178 = (_QWORD *)swift_allocObject();
                v178[2] = v176;
                v178[3] = v177;
                v178[4] = v122;
                v178[5] = v123;
                v311 = partial apply for closure #1 in GraphCanvasElementView.updateGraphView();
                v312 = v178;
                aBlock = (_QWORD *)MEMORY[0x1E0C809B0];
                v308 = 1107296256;
                v309 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
                v310 = &block_descriptor_93;
                v269 = (char *)_Block_copy(&aBlock);
                swift_bridgeObjectRetain();
                swift_release();
                v179 = v273;
                static DispatchQoS.unspecified.getter();
                aBlock = (_QWORD *)MEMORY[0x1E0DEE9D8];
                lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
                lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
                v180 = v275;
                v181 = v256;
                dispatch thunk of SetAlgebra.init<A>(_:)();
                v182 = v269;
                v183 = (void *)v277;
                MEMORY[0x1DF0E48C0](0, v179, v180, v269);
                _Block_release(v182);
                swift_release();

                (*(void (**)(char *, uint64_t))(v276 + 8))(v180, v181);
                (*(void (**)(char *, uint64_t))(v274 + 8))(v179, v257);
              }
            }
LABEL_29:
            swift_retain();
LABEL_32:
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
            CRRegister.wrappedValue.getter();
            v148 = aBlock;
            if (aBlock)
            {
              MEMORY[0x1DF0E22F8](objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, aBlock));

            }
            v149 = v291;
            type metadata accessor for CalculateGraphExpression();
            swift_allocObject();
            swift_retain();
            swift_retain();
            v150 = CalculateGraphExpression.init(_:color:)();
            v152 = MEMORY[0x1E0C80A78](v150, v151);
            *(&v250 - 4) = (uint64_t)v281;
            *(&v250 - 3) = v152;
            *(&v250 - 2) = v122;
            *(&v250 - 1) = v123;
            withObservationTracking<A>(_:onChange:)();
            v153 = swift_retain();
            MEMORY[0x1DF0E4398](v153);
            if (*(_QWORD *)((v313 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v313 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            v154 = (uint64_t)v295;
            CalculateExpression.id.getter();
            v155 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v115 + 56);
            v156 = v304;
            v155(v154, 0, 1, v304);
            swift_beginAccess();
            if (v302(v154, 1, v156) == 1)
            {
              outlined destroy of UUID?(v154);
              swift_bridgeObjectRetain();
              v157 = specialized __RawDictionaryStorage.find<A>(_:)(v122, v123);
              v159 = v158;
              swift_bridgeObjectRelease();
              if ((v159 & 1) != 0)
              {
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v161 = *v149;
                v306 = *v149;
                *v149 = 0x8000000000000000;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  specialized _NativeDictionary.copy()();
                  v161 = v306;
                }
                swift_bridgeObjectRelease();
                v162 = *(_QWORD *)(v161 + 56) + *(_QWORD *)(v115 + 72) * v157;
                v163 = *(void (**)(char *, unint64_t, uint64_t))(v115 + 32);
                v164 = (uint64_t)v282;
                v165 = v304;
                v163(v282, v162, v304);
                specialized _NativeDictionary._delete(at:)(v157, v161);
                *v149 = v161;
                swift_bridgeObjectRelease();
                v166 = 0;
              }
              else
              {
                v166 = 1;
                v164 = (uint64_t)v282;
                v165 = v304;
              }
              v155(v164, v166, 1, v165);
              swift_bridgeObjectRelease();
              outlined destroy of UUID?(v164);
              v115 = v300;
            }
            else
            {
              v117 = v122;
              v118 = v123;
              v119 = v149;
              v120 = (uint64_t)v296;
              (*(void (**)(char *, uint64_t, uint64_t))(v115 + 32))(v296, v154, v156);
              v121 = swift_isUniquelyReferenced_nonNull_native();
              v306 = *v119;
              *v119 = 0x8000000000000000;
              specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v120, v117, v118, v121);
              *v119 = v306;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            v116 = (uint64_t)v303;
            swift_endAccess();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            outlined destroy of PKStrokeProperties(v116, (uint64_t (*)(_QWORD))type metadata accessor for GraphableExpression);
            v113 = (uint64_t)&v290[v298];
            v110 = v299 - 1;
            if (v299 == (char *)1)
            {
              swift_bridgeObjectRelease();
              v96 = v281;
              v111 = (_QWORD *)&unk_1DDF31000;
              goto LABEL_69;
            }
          }
        }
        swift_bridgeObjectRelease();
LABEL_69:
        v216 = direct field offset for GraphCanvasElementView.graphViewController;
        v217 = *(char **)&v96[direct field offset for GraphCanvasElementView.graphViewController];
        v218 = v256;
        if (static GraphCanvasElementView.isInsertingGraph == 1)
        {
          if (!v217)
          {
            v219 = 1;
            goto LABEL_82;
          }
          v219 = *(_QWORD *)&v217[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_graphView] == 0;
        }
        else
        {
          v219 = 0;
          if (!v217)
            goto LABEL_82;
        }
        if (*(_QWORD *)&v217[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_graphView])
        {
          if (*(_QWORD *)&v217[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_calculateGraph])
          {
            swift_retain();
            swift_bridgeObjectRetain();
            dispatch thunk of CalculateGraph.graphExpressions.setter();
            swift_release();
            if (!v219)
            {
LABEL_76:
              swift_bridgeObjectRelease();
              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
              v220 = (void *)static OS_dispatch_queue.main.getter();
              v221 = swift_allocObject();
              *(_QWORD *)(v221 + 16) = v96;
              v311 = partial apply for closure #3 in GraphCanvasElementView.updateGraphView();
              v312 = (_QWORD *)v221;
              aBlock = (_QWORD *)MEMORY[0x1E0C809B0];
              v308 = v111[109];
              v309 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
              v310 = &block_descriptor_74_0;
              v222 = _Block_copy(&aBlock);
              v223 = v96;
              swift_release();
              v224 = v273;
              static DispatchQoS.unspecified.getter();
              aBlock = (_QWORD *)MEMORY[0x1E0DEE9D8];
              lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
              lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
              v225 = v275;
              dispatch thunk of SetAlgebra.init<A>(_:)();
              MEMORY[0x1DF0E48C0](0, v224, v225, v222);
              _Block_release(v222);

              (*(void (**)(char *, uint64_t))(v276 + 8))(v225, v218);
              (*(void (**)(char *, uint64_t))(v274 + 8))(v224, v257);
LABEL_88:
              objc_msgSend((id)objc_opt_self(), sel_cancelPreviousPerformRequestsWithTarget_selector_object_, v96, sel_updateCachedImage, 0);
              objc_msgSend(v96, sel_performSelector_withObject_afterDelay_, sel_updateCachedImage, 0, 2.0);
              swift_bridgeObjectRelease();

              swift_unknownObjectRelease();
LABEL_89:
              swift_unknownObjectRelease();

              return;
            }
LABEL_87:
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
            v241 = (void *)static OS_dispatch_queue.main.getter();
            v242 = v263;
            static DispatchTime.now()();
            v243 = v265;
            MEMORY[0x1DF0E26A0](v242, 0.1);
            v305 = *(void (**)(char *, uint64_t))(v264 + 8);
            v305(v242, v270);
            v244 = swift_allocObject();
            swift_unknownObjectWeakInit();
            v245 = v313;
            v246 = swift_allocObject();
            *(_QWORD *)(v246 + 16) = v244;
            *(_QWORD *)(v246 + 24) = v245;
            v311 = partial apply for specialized closure #2 in GraphCanvasElementView.updateGraphView();
            v312 = (_QWORD *)v246;
            aBlock = (_QWORD *)MEMORY[0x1E0C809B0];
            v308 = v111[109];
            v309 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
            v310 = &block_descriptor_83;
            v247 = _Block_copy(&aBlock);
            swift_release();
            v248 = v273;
            static DispatchQoS.unspecified.getter();
            aBlock = (_QWORD *)MEMORY[0x1E0DEE9D8];
            lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
            lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
            v249 = v275;
            dispatch thunk of SetAlgebra.init<A>(_:)();
            MEMORY[0x1DF0E4884](v243, v248, v249, v247);
            _Block_release(v247);

            (*(void (**)(char *, uint64_t))(v276 + 8))(v249, v218);
            (*(void (**)(char *, uint64_t))(v274 + 8))(v248, v257);
            v305(v243, v270);
            goto LABEL_88;
          }
          goto LABEL_86;
        }
        v292(v262, v271, v294);
        v226 = v217;
        v227 = GraphCanvasElementView.graphViewFrame.getter();
        v229 = v228;
        v231 = v230;
        v233 = v232;
        if (!v219)
          swift_bridgeObjectRetain();
        v234 = v262;
        GraphCanvasElementViewController.setupGraphView(canvasElement:frame:expressions:)(v227, v229, v231, v233);

        swift_bridgeObjectRelease();
        v272(v234, v294);
LABEL_82:
        GraphCanvasElementView.layoutGraphView()();
        v237 = *(_QWORD *)&v96[v216];
        if (v237)
        {
          v238 = *(_QWORD *)(v237
                           + OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_calculateGraph);
          if (v238)
          {
            MEMORY[0x1E0C80A78](v235, v236);
            *(&v250 - 2) = (uint64_t)v96;
            *(&v250 - 1) = v238;
            swift_retain();
            v239 = withObservationTracking<A>(_:onChange:)();
            MEMORY[0x1E0C80A78](v239, v240);
            *(&v250 - 2) = (uint64_t)v96;
            *(&v250 - 1) = v238;
            withObservationTracking<A>(_:onChange:)();
            swift_release();
            if (!v219)
              goto LABEL_76;
            goto LABEL_87;
          }
        }
LABEL_86:
        if (!v219)
          goto LABEL_76;
        goto LABEL_87;
      }
      v260 = (void (*)(char *, char *, uint64_t))v94[4];
      v259 = v43;
      v260((char *)v302, v93, v43);
      while (1)
      {
        v186 = v299;
        v187 = v271;
        v188 = v294;
        v292(v299, v271, v294);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
        v189 = (uint64_t)v289;
        Capsule.subscript.getter();
        v190 = v272;
        v272(v186, v188);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
        CRRegister.wrappedValue.getter();
        v288 = (uint64_t)aBlock;
        v191 = v308;
        outlined destroy of PKStrokeProperties(v189, (uint64_t (*)(_QWORD))type metadata accessor for GraphableExpression);
        v292(v186, v187, v188);
        v192 = (char *)v302;
        Capsule.subscript.getter();
        v193 = v186;
        v194 = v191;
        v190(v193, v188);
        CRRegister.wrappedValue.getter();
        v195 = (uint64_t)aBlock;
        v196 = v308;
        v197 = v189;
        v198 = v288;
        outlined destroy of PKStrokeProperties(v197, (uint64_t (*)(_QWORD))type metadata accessor for GraphableExpression);
        v199 = v301;
        v200 = swift_isUniquelyReferenced_nonNull_native();
        aBlock = (_QWORD *)v199;
        v202 = specialized __RawDictionaryStorage.find<A>(_:)(v198, v191);
        v203 = *(_QWORD *)(v199 + 16);
        v204 = (v201 & 1) == 0;
        v205 = v203 + v204;
        if (__OFADD__(v203, v204))
          break;
        v206 = v201;
        if (*(_QWORD *)(v199 + 24) >= v205)
        {
          v209 = v259;
          if ((v200 & 1) == 0)
            specialized _NativeDictionary.copy()();
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v205, v200);
          v207 = specialized __RawDictionaryStorage.find<A>(_:)(v198, v191);
          v209 = v259;
          if ((v206 & 1) != (v208 & 1))
            goto LABEL_93;
          v202 = v207;
        }
        v210 = aBlock;
        v301 = (unint64_t)aBlock;
        if ((v206 & 1) != 0)
        {
          v184 = (uint64_t *)(aBlock[7] + 16 * v202);
          swift_bridgeObjectRelease();
          *v184 = v195;
          v184[1] = v196;
        }
        else
        {
          aBlock[(v202 >> 6) + 8] |= 1 << v202;
          v211 = (uint64_t *)(v210[6] + 16 * v202);
          *v211 = v198;
          v211[1] = v194;
          v212 = (uint64_t *)(v210[7] + 16 * v202);
          *v212 = v195;
          v212[1] = v196;
          v213 = v210[2];
          v214 = __OFADD__(v213, 1);
          v215 = v213 + 1;
          if (v214)
            goto LABEL_92;
          v210[2] = v215;
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t))v291[1])(v192, v209);
        v185 = v290;
        CROrderedSet.Iterator.next()();
        if (v261(v185, 1, v209) == 1)
          goto LABEL_10;
        v260(v192, v185, v209);
      }
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
  }
}

void closure #1 in GraphCanvasElementView.updateGraphView()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;

  v6 = a1 + 16;
  swift_beginAccess();
  v7 = MEMORY[0x1DF0E666C](v6);
  if (v7)
  {
    v8 = (void *)v7;
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      v9._countAndFlagsBits = CalculateExpression.expression.getter();
      v10._countAndFlagsBits = a3;
      v10._object = a4;
      GraphCanvasElementView.didUpdateExpression(_:identifier:)(v9, v10);

      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {

    }
  }
}

uint64_t specialized closure #2 in GraphCanvasElementView.updateGraphView()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  void *v8;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1DF0E666C](v1);
  if (v2)
  {
    v3 = (void *)v2;
    v4 = *(void **)(v2 + direct field offset for GraphCanvasElementView.graphViewController);
    v5 = v4;

    if (v4)
    {
      v6 = *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_calculateGraph];
      swift_retain();

      if (v6)
      {
        swift_bridgeObjectRetain();
        dispatch thunk of CalculateGraph.graphExpressions.setter();
        swift_release();
      }
    }
  }
  swift_beginAccess();
  result = MEMORY[0x1DF0E666C](v1);
  if (result)
  {
    v8 = (void *)result;
    GraphCanvasElementView.cachedGraphableExpressionsState.getter();

    GraphableExpressionsState.updateColors()();
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall GraphCanvasElementView.updateCachedImage()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  id v17;
  id v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t inited;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, _OWORD *);
  _QWORD *v26;
  void *v27;
  id v28;
  void *v29;
  void (*v30)(char *, char *, uint64_t);
  objc_class *v31;
  char *v32;
  id v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  id v36;
  objc_super v37;
  _OWORD v38[2];
  char v39;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CRKeyPath();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12, v13);
  v16 = (char *)&v35 - v15;
  v17 = objc_msgSend(v1, sel_window, v14);

  if (v17)
  {
    v18 = objc_msgSend(v1, sel_superview);

    if (v18)
    {
      v19 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v20 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v20, v2);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
      Capsule<>.rootID.getter();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      v21 = MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
      if (v21)
      {
        v22 = (_QWORD *)v21;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1DDF35440;
        *(_QWORD *)(inited + 32) = v1;
        *(_QWORD *)&v38[0] = inited;
        specialized Array._endMutation()();
        v24 = *(_QWORD *)&v38[0];
        memset(v38, 0, sizeof(v38));
        v39 = 1;
        v25 = *(uint64_t (**)(uint64_t, _OWORD *))((*v19 & *v22) + 0x660);
        v26 = v1;
        v27 = (void *)v25(v24, v38);
        swift_bridgeObjectRelease();
        if (v27)
        {
          v28 = objc_msgSend(v27, sel_CGImage);
          if (v28)
          {
            v29 = v28;
            if (one-time initialization token for shared != -1)
              swift_once();
            v36 = *(id *)(static GraphCanvasElementRenderedImageCache.shared + 16);
            v30 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
            v30(v11, v16, v7);
            v31 = (objc_class *)type metadata accessor for KeyPathWrapper();
            v32 = (char *)objc_allocWithZone(v31);
            v30(&v32[OBJC_IVAR____TtC8PaperKitP33_F808299E7C487FAE28308AED5F0A446914KeyPathWrapper_path], v11, v7);
            v37.receiver = v32;
            v37.super_class = v31;
            v33 = objc_msgSendSuper2(&v37, sel_init);
            v34 = *(void (**)(char *, uint64_t))(v8 + 8);
            v34(v11, v7);
            objc_msgSend(v36, sel_setObject_forKey_, v29, v33);

            v34(v16, v7);
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v8 + 8))(v16, v7);

          }
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v8 + 8))(v16, v7);

        }
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v16, v7);
      }
    }
  }
}

void @objc GraphCanvasElementView.updateCachedImage()(void *a1)
{
  id v1;

  v1 = a1;
  GraphCanvasElementView.updateCachedImage()();

}

Swift::Void __swiftcall GraphCanvasElementView.updateUI()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  v1 = v0;
  v2 = type metadata accessor for GraphElement();
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized CanvasElementView.updateGestures()();
  specialized CanvasElementView.updateFrame()();
  v11 = (_QWORD *)MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  v12 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v11)
  {
    v13 = v11;
    (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v11) + 0x668))();

  }
  v14 = (char *)v1 + *(_QWORD *)((*v12 & *v1) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v14, v6);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  Capsule<>.root.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  outlined destroy of PKStrokeProperties((uint64_t)v5, (uint64_t (*)(_QWORD))type metadata accessor for GraphElement);
  GraphCanvasElementView.cachedGraphableExpressionsState.getter();
  GraphableExpressionsState.update()();
  swift_release();
  GraphCanvasElementView.updateGraphView()();
}

uint64_t GraphCanvasElementView.isSelected.setter(char a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v3 = OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isSelected;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isSelected) = a1;
  result = specialized CanvasElementView.isSelected.didset(a2);
  if (*(_BYTE *)(v2 + v3) == 1)
  {
    GraphCanvasElementView.cachedGraphableExpressionsState.getter();
    GraphableExpressionsState.update()();
    return swift_release();
  }
  return result;
}

void @objc GraphCanvasElementView.layoutSubviews()(void *a1)
{
  id v1;
  objc_super v2;

  v2.receiver = a1;
  v2.super_class = (Class)type metadata accessor for GraphCanvasElementView(0);
  v1 = v2.receiver;
  objc_msgSendSuper2(&v2, sel_layoutSubviews);
  GraphCanvasElementView.layoutGraphView()();

}

Swift::Void __swiftcall GraphCanvasElementView.layoutGraphView()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  char *v12;
  id v13;
  CGAffineTransform v14;
  CGFloat v15;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = direct field offset for GraphCanvasElementView.graphViewController;
  v7 = *(_QWORD *)((char *)v0 + direct field offset for GraphCanvasElementView.graphViewController);
  if (v7)
  {
    v8 = *(void **)(v7
                  + OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_graphView);
    if (!v8)
      goto LABEL_4;
    v14.a = 1.0;
    v14.b = 0.0;
    v14.c = 0.0;
    v14.d = 1.0;
    v14.tx = 0.0;
    v14.ty = 0.0;
    objc_msgSend(v8, sel_setTransform_, &v14);
    v7 = *(_QWORD *)((char *)v0 + v6);
    if (v7)
    {
LABEL_4:
      v9 = *(void **)(v7
                    + OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_graphView);
      if (!v9
        || (v10 = v9,
            objc_msgSend(v10, sel_setFrame_, GraphCanvasElementView.graphViewFrame.getter()),
            v10,
            (v7 = *(_QWORD *)((char *)v0 + v6)) != 0))
      {
        v11 = *(void **)(v7
                       + OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_graphView);
        if (v11)
        {
          v12 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380);
          swift_beginAccess();
          (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v12, v1);
          swift_getKeyPath();
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
          v13 = v11;
          Capsule<>.subscript.getter();
          swift_release();
          (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
          CGAffineTransformMakeRotation(&v14, v15);
          objc_msgSend(v13, sel_setTransform_, &v14);

        }
      }
    }
  }
}

uint64_t GraphCanvasElementView.modifiableProperties.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[4];
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v6, v1);
  v9[0] = type metadata accessor for GraphElement();
  v9[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  v9[2] = &protocol witness table for GraphElement;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  v7 = 5;
  if ((v10 & 0x80) == 0)
    v7 = 7;
  if ((v10 & 4) != 0)
    return 0;
  else
    return v7;
}

Swift::OpaquePointer_optional __swiftcall GraphCanvasElementView.pasteboardRepresentation()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  Swift::Bool v8;
  _QWORD *v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, _OWORD *);
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  _OWORD v22[2];
  char v23;
  Swift::OpaquePointer_optional result;

  v1 = type metadata accessor for UTType();
  v2 = *(_QWORD *)(v1 - 8);
  v4 = MEMORY[0x1E0C80A78](v1, v3);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0) + 112;
  v7 = MEMORY[0x1DF0E666C](&v0[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas], v4);
  if (!v7)
    goto LABEL_5;
  v9 = (_QWORD *)v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF35440;
  *(_QWORD *)(inited + 32) = v0;
  *(_QWORD *)&v22[0] = inited;
  specialized Array._endMutation()();
  v11 = *(_QWORD *)&v22[0];
  memset(v22, 0, sizeof(v22));
  v23 = 1;
  v12 = *(uint64_t (**)(uint64_t, _OWORD *))((*MEMORY[0x1E0DEEDD8] & *v9) + 0x660);
  v13 = v0;
  v14 = v12(v11, v22);
  swift_bridgeObjectRelease();
  if (!v14)
  {

LABEL_5:
    v19 = 0;
    goto LABEL_6;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1DDF32CF0;
  static UTType.png.getter();
  v16 = UTType.identifier.getter();
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v6, v1);
  *(_QWORD *)(v15 + 32) = v16;
  *(_QWORD *)(v15 + 40) = v18;
  *(_QWORD *)(v15 + 72) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIImage);
  *(_QWORD *)(v15 + 48) = v14;
  v19 = specialized Dictionary.init(dictionaryLiteral:)(v15);

LABEL_6:
  v20 = (void *)v19;
  result.value._rawValue = v20;
  result.is_nil = v8;
  return result;
}

uint64_t GraphCanvasElementView.updateVisibleRange(from:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t result;
  double v15;
  double v16;
  CGFloat v17;
  double v18;
  double v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  void (*v22)(char *, uint64_t);
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void (*v30)(char *, _QWORD *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[4];
  CGRect v34;
  CGRect v35;

  v1 = type metadata accessor for GraphElement();
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v33[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v33[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of CalculateGraph.xAxisBounds.getter();
  v11 = v10;
  v13 = v12;
  result = dispatch thunk of CalculateGraph.yAxisBounds.getter();
  if (*((_BYTE *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isSelected) == 1)
  {
    v17 = v15;
    v18 = v13 - v11;
    v19 = v16 - v15;
    v20 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380);
    swift_beginAccess();
    v21 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
    v21(v9, v20, v5);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
    Capsule<>.root.getter();
    v22 = *(void (**)(char *, uint64_t))(v6 + 8);
    v22(v9, v5);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    v23 = *(double *)v33;
    v24 = *(double *)&v33[1];
    v25 = *(double *)&v33[2];
    v26 = *(double *)&v33[3];
    outlined destroy of PKStrokeProperties((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for GraphElement);
    v34.origin.x = v23;
    v34.origin.y = v24;
    v34.size.width = v25;
    v34.size.height = v26;
    v35.origin.x = v11;
    v35.origin.y = v17;
    v35.size.width = v18;
    v35.size.height = v19;
    result = CGRectEqualToRect(v34, v35);
    if ((result & 1) == 0)
    {
      MEMORY[0x1E0C80A78](result, v27);
      *((double *)&v32 - 4) = v11;
      *((CGFloat *)&v32 - 3) = v17;
      *((double *)&v32 - 2) = v18;
      *((double *)&v32 - 1) = v19;
      swift_beginAccess();
      Capsule.callAsFunction<A>(_:)();
      swift_endAccess();
      result = MEMORY[0x1DF0E666C]((char *)v0 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
      if (result)
      {
        v28 = (_QWORD *)result;
        v21(v9, v20, v5);
        LOBYTE(v33[0]) = 4;
        v29 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        v30 = *(void (**)(char *, _QWORD *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v28) + 0x538);
        v31 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
        v30(v9, v33, v1, v31);
        LOBYTE(v33[0]) = 4;
        (*(void (**)(_QWORD *))((*v29 & *v28) + 0x518))(v33);

        return ((uint64_t (*)(char *, uint64_t))v22)(v9, v5);
      }
    }
  }
  return result;
}

uint64_t closure #1 in GraphCanvasElementView.updateVisibleRange(from:)()
{
  uint64_t (*v0)(_BYTE *, _QWORD);
  _BYTE v2[32];

  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  v0 = (uint64_t (*)(_BYTE *, _QWORD))Capsule.Ref<>.root.modify();
  type metadata accessor for GraphElement();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  return v0(v2, 0);
}

void (*implicit closure #1 in GraphCanvasElementView.trackVisibleRange(for:)())()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v1 = swift_allocObject();
  swift_weakInit();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = v1;
  return partial apply for closure #2 in implicit closure #1 in GraphCanvasElementView.trackVisibleRange(for:);
}

void closure #1 in closure #2 in implicit closure #1 in GraphCanvasElementView.trackVisibleRange(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1DF0E666C](v1);
  if (v2)
  {
    v3 = (void *)v2;
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      v4 = GraphCanvasElementView.updateVisibleRange(from:)();
      MEMORY[0x1E0C80A78](v4, v5);
      withObservationTracking<A>(_:onChange:)();

      swift_release();
    }
    else
    {

    }
  }
}

Swift::Void __swiftcall GraphCanvasElementView.updateModelAfterCalculateGraphDeletion()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t KeyPath;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;

  v24 = type metadata accessor for UUID();
  v2 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v3);
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(v0 + direct field offset for GraphCanvasElementView.graphViewController);
  if (!v6)
    return;
  v7 = *(_QWORD *)(v6
                 + OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_calculateGraph);
  if (!v7)
    return;
  swift_retain();
  v8 = dispatch thunk of CalculateGraph.graphExpressions.getter();
  if (!(v8 >> 62))
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v9)
      goto LABEL_5;
LABEL_15:
    v14 = swift_bridgeObjectRelease();
    v11 = MEMORY[0x1E0DEE9D8];
    goto LABEL_16;
  }
  v9 = _CocoaArrayWrapper.endIndex.getter();
  if (!v9)
    goto LABEL_15;
LABEL_5:
  v25 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9 & ~(v9 >> 63), 0);
  if ((v9 & 0x8000000000000000) == 0)
  {
    v23[1] = v0;
    v23[2] = v7;
    v10 = 0;
    v11 = v25;
    do
    {
      if ((v8 & 0xC000000000000001) != 0)
        MEMORY[0x1DF0E4D64](v10, v8);
      else
        swift_retain();
      dispatch thunk of CalculateGraphExpression.id.getter();
      swift_release();
      v25 = v11;
      v13 = *(_QWORD *)(v11 + 16);
      v12 = *(_QWORD *)(v11 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v11 = v25;
      }
      ++v10;
      *(_QWORD *)(v11 + 16) = v13 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(v11+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(_QWORD *)(v2 + 72) * v13, v5, v24);
    }
    while (v9 != v10);
    v14 = swift_bridgeObjectRelease();
LABEL_16:
    v15 = GraphCanvasElementView.cachedGraphableExpressionsState.getter(v14);
    swift_getKeyPath();
    v25 = v15;
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphableExpressionsState and conformance GraphableExpressionsState, type metadata accessor for GraphableExpressionsState, (uint64_t)&protocol conformance descriptor for GraphableExpressionsState);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v16 = *(_QWORD *)(v15 + 24);
    swift_bridgeObjectRetain();
    swift_release();
    swift_bridgeObjectRetain();
    v1 = specialized Sequence.first(where:)(v16, v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    if (!v1)
    {
      swift_release();
      return;
    }
    if (one-time initialization token for mathLogger == -1)
      goto LABEL_18;
    goto LABEL_24;
  }
  __break(1u);
LABEL_24:
  swift_once();
LABEL_18:
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)mathLogger);
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v20 = 0;
    _os_log_impl(&dword_1DDB0F000, v18, v19, "Deleted expression that was deleted externally", v20, 2u);
    MEMORY[0x1DF0E6558](v20, -1, -1);
  }

  KeyPath = swift_getKeyPath();
  MEMORY[0x1E0C80A78](KeyPath, v22);
  v23[-2] = v1;
  LOBYTE(v23[-1]) = 0;
  v25 = v1;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_release();
  swift_release();
}

void (*implicit closure #1 in GraphCanvasElementView.trackDeletedExpressions(for:)())()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v1 = swift_allocObject();
  swift_weakInit();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = v1;
  return partial apply for closure #2 in implicit closure #1 in GraphCanvasElementView.trackDeletedExpressions(for:);
}

void closure #2 in implicit closure #1 in GraphCanvasElementView.trackVisibleRange(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t Strong;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD aBlock[6];

  v31 = a4;
  v8 = type metadata accessor for DispatchWorkItemFlags();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v18 = MEMORY[0x1DF0E666C](a1 + 16);
  if (v18)
  {
    v19 = (void *)v18;
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v28[0] = a3;
      v28[1] = Strong;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      v29 = static OS_dispatch_queue.main.getter();
      v21 = a5;
      v22 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v23 = swift_allocObject();
      v30 = v14;
      v24 = v23;
      swift_weakInit();
      v25 = swift_allocObject();
      *(_QWORD *)(v25 + 16) = v22;
      *(_QWORD *)(v25 + 24) = v24;
      aBlock[4] = v31;
      aBlock[5] = v25;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      aBlock[3] = v21;
      v26 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      static DispatchQoS.unspecified.getter();
      v32 = MEMORY[0x1E0DEE9D8];
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      v28[0] = v9;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      v31 = v13;
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      v27 = (void *)v29;
      MEMORY[0x1DF0E48C0](0, v17, v12, v26);
      _Block_release(v26);

      swift_release();
      (*(void (**)(char *, uint64_t))(v28[0] + 8))(v12, v8);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v31);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {

    }
  }
}

void closure #1 in closure #2 in implicit closure #1 in GraphCanvasElementView.trackDeletedExpressions(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t Strong;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v12 = MEMORY[0x1DF0E666C](a1 + 16);
  if (v12)
  {
    v13 = (_QWORD *)v12;
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v15 = Strong;
      v16 = dispatch thunk of CalculateGraph.graphExpressions.getter();
      if (v16 >> 62)
        v25 = _CocoaArrayWrapper.endIndex.getter();
      else
        v25 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRelease();
      v17 = (char *)v13 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v13) + 0x380);
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v17, v7);
      swift_getKeyPath();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
      Capsule<>.subscript.getter();
      swift_release();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      v18 = CROrderedSet.count.getter();
      v19 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      if (v25 < v18)
      {
        if (one-time initialization token for mathLogger != -1)
          swift_once();
        v21 = type metadata accessor for Logger();
        __swift_project_value_buffer(v21, (uint64_t)mathLogger);
        v22 = Logger.logObject.getter();
        v23 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v22, v23))
        {
          v24 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v24 = 0;
          _os_log_impl(&dword_1DDB0F000, v22, v23, "Detected externally deleted expression", v24, 2u);
          MEMORY[0x1DF0E6558](v24, -1, -1);
        }

        GraphCanvasElementView.updateModelAfterCalculateGraphDeletion()();
      }
      MEMORY[0x1E0C80A78](v19, v20);
      *(&v25 - 2) = (uint64_t)v13;
      *(&v25 - 1) = v15;
      withObservationTracking<A>(_:onChange:)();

      swift_release();
    }
    else
    {

    }
  }
}

void GraphCanvasElementView.updateGraphableExpressionState(_:)(CGColor *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void *v31;
  CGColor *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  CGColor *v55;
  unint64_t v56;
  char v58;
  int v59;
  CGColor *v60;
  char *v61;
  void *v62;
  CGColor *v63;
  char *v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  CGColor *v74;
  CGColor *v75;
  char *v76;
  unsigned __int8 v77;
  CGColor *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  void (*v89)(char *, char *, uint64_t);
  char *v90;
  uint64_t (*v91)(char *, uint64_t);
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD v99[2];
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t (*v104)(char *, uint64_t, uint64_t);
  uint64_t v105;
  uint64_t v106;
  char *v107;
  void (*v108)(char *, uint64_t);
  uint64_t v109;
  void (*v110)(char *, char *, uint64_t);
  char *v111;
  char *v112;
  uint64_t v113;
  id v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  void (*v122)(char *, uint64_t);
  uint64_t v123;
  uint64_t v124;
  char *v125;
  _QWORD *v126;
  uint64_t v127;
  char *v128;
  CGColor *v129;
  uint64_t v130;
  void *v131[2];
  CGColor *v132;
  CGColor *v133;
  unint64_t v134;
  CGColor *v135;

  v129 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<GraphableExpression>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
  v113 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v112 = (char *)v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = type metadata accessor for GraphableExpression();
  v123 = *(_QWORD *)(v130 - 8);
  v11 = MEMORY[0x1E0C80A78](v130, v10);
  v107 = (char *)v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v13);
  v119 = (uint64_t)v99 - v14;
  v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  v122 = *(void (**)(char *, uint64_t))(v127 - 8);
  MEMORY[0x1E0C80A78](v127, v15);
  v128 = (char *)v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = type metadata accessor for GraphElement();
  MEMORY[0x1E0C80A78](v124, v17);
  v121 = (char *)v99 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  v120 = *(char **)(v19 - 8);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v125 = (char *)v99 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v23);
  v25 = (char *)v99 - v24;
  v26 = type metadata accessor for UUID();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v28);
  v30 = (char *)v99 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = v1;
  v31 = (void *)MEMORY[0x1DF0E666C]((char *)v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v31)
  {
    v106 = v7;
    v100 = v6;
    v101 = v3;
    v102 = v2;
    v114 = v31;
    swift_getKeyPath();
    v32 = v129;
    v33 = (char *)v129 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState___observationRegistrar;
    v135 = v129;
    v117 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
    v118 = v33;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v34 = (char *)v32 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__id;
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v30, v34, v26);
    v116 = UUID.uuidString.getter();
    v115 = v35;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v30, v26);
    v36 = (char *)v126 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v126) + 0x380);
    swift_beginAccess();
    v37 = v120;
    v38 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v120 + 2);
    v38(v25, v36, v19);
    v39 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
    v40 = (uint64_t)v121;
    v109 = v39;
    Capsule<>.root.getter();
    v41 = (void (*)(char *, uint64_t))*((_QWORD *)v37 + 1);
    v120 = v25;
    v41(v25, v19);
    v42 = v125;
    v111 = v36;
    v110 = v38;
    v38(v125, v36, v19);
    v43 = v40 + *(int *)(v124 + 28);
    v44 = v122;
    v46 = v127;
    v45 = v128;
    v104 = (uint64_t (*)(char *, uint64_t, uint64_t))*((_QWORD *)v122 + 2);
    v47 = v104(v128, v43, v127);
    MEMORY[0x1E0C80A78](v47, v48);
    v99[-2] = v42;
    v49 = CROrderedSet.map<A>(_:)();
    v103 = 0;
    v108 = (void (*)(char *, uint64_t))*((_QWORD *)v44 + 1);
    v108(v45, v46);
    v105 = v19;
    v122 = v41;
    v41(v42, v19);
    outlined destroy of PKStrokeProperties(v40, (uint64_t (*)(_QWORD))type metadata accessor for GraphElement);
    v50 = *(_QWORD *)(v49 + 16);
    if (v50)
    {
      v51 = 0;
      v52 = (*(unsigned __int8 *)(v123 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80);
      v99[1] = v49;
      v53 = v49 + v52;
      v54 = *(_QWORD *)(v123 + 72);
      v55 = (CGColor *)v116;
      v56 = v115;
      while (1)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
        CRRegister.wrappedValue.getter();
        if (v133 == v55 && v134 == v56)
          break;
        v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v58 & 1) != 0)
          goto LABEL_13;
        ++v51;
        v53 += v54;
        if (v50 == v51)
        {
          swift_bridgeObjectRelease();
          v51 = 0;
          v59 = 1;
          goto LABEL_14;
        }
      }
      swift_bridgeObjectRelease();
LABEL_13:
      swift_bridgeObjectRelease();
      v59 = 0;
    }
    else
    {
      swift_bridgeObjectRelease();
      v51 = 0;
      v59 = 1;
      v55 = (CGColor *)v116;
      v56 = v115;
    }
LABEL_14:
    swift_getKeyPath();
    v60 = v129;
    v133 = v129;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v61 = v120;
    if ((v59 & 1) != 0 || !*((_BYTE *)v60 + 24))
    {
      swift_getKeyPath();
      v133 = v60;
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if (v59 != *((unsigned __int8 *)v60 + 24))
      {

        swift_bridgeObjectRelease();
        return;
      }
      if ((v59 & 1) != 0)
      {
        swift_getKeyPath();
        v133 = v60;
        ObservationRegistrar.access<A, B>(_:keyPath:)();
        swift_release();
        swift_retain();
        v78 = (CGColor *)CalculateExpression.expression.getter();
        v80 = v79;
        swift_release();
        v133 = 0;
        v134 = 0xE000000000000000;
        v81 = (uint64_t)v107;
        CRRegister.init(wrappedValue:)();
        v82 = v130;
        v133 = 0;
        v134 = 0xE000000000000000;
        CRRegister.init(wrappedValue:)();
        v133 = 0;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
        lazy protocol witness table accessor for type Color? and conformance <A> A?();
        CRRegister.init(wrappedValue:)();
        *(_QWORD *)(v81 + *(int *)(v82 + 28)) = MEMORY[0x1E0DEE9E0];
        v133 = v78;
        v134 = v80;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
        CRRegister.wrappedValue.setter();
        v133 = v55;
        v134 = v56;
        v83 = v126;
        CRRegister.wrappedValue.setter();
        v133 = 0;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
        v84 = CRRegister.wrappedValue.setter();
        MEMORY[0x1E0C80A78](v84, v85);
        v99[-4] = v83;
        v99[-3] = v81;
        v74 = (CGColor *)v114;
        v99[-2] = v114;
        (*(void (**)(_QWORD, _QWORD, uint64_t (*)()))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v74) + 0x468))(0, 0, partial apply for closure #4 in GraphCanvasElementView.updateGraphableExpressionState(_:));
        outlined destroy of PKStrokeProperties(v81, (uint64_t (*)(_QWORD))type metadata accessor for GraphableExpression);
      }
      else
      {
        v86 = swift_bridgeObjectRelease();
        MEMORY[0x1E0C80A78](v86, v87);
        v99[-4] = v126;
        v99[-3] = v51;
        v74 = (CGColor *)v114;
        v99[-2] = v114;
        (*(void (**)(_QWORD, _QWORD, uint64_t (*)()))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v74) + 0x468))(0, 0, partial apply for closure #3 in GraphCanvasElementView.updateGraphableExpressionState(_:));
      }
      GraphCanvasElementView.updateGraphView()();
      goto LABEL_33;
    }
    swift_bridgeObjectRelease();
    v133 = 0;
    swift_getKeyPath();
    v132 = v60;
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if (*((_QWORD *)v60 + 4))
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      swift_retain_n();
      v62 = (void *)UIColor.init(_:)();
      Color.init(cgColor:)((CGColor *)objc_msgSend(v62, sel_CGColor), &v132);

      v63 = v132;
      swift_release();

      v133 = v63;
    }
    v64 = v111;
    v65 = v105;
    v66 = v110;
    v110(v61, v111, v105);
    Capsule<>.root.getter();
    v122(v61, v65);
    v67 = v125;
    v66(v125, v64, v65);
    v69 = v127;
    v68 = v128;
    v70 = v104(v128, v40 + *(int *)(v124 + 28), v127);
    MEMORY[0x1E0C80A78](v70, v71);
    v99[-2] = v67;
    v72 = CROrderedSet.map<A>(_:)();
    v108(v68, v69);
    v122(v67, v65);
    outlined destroy of PKStrokeProperties(v40, (uint64_t (*)(_QWORD))type metadata accessor for GraphElement);
    v73 = v106;
    if (v51 >= *(_QWORD *)(v72 + 16))
    {
      __break(1u);
      return;
    }
    outlined init with copy of GraphableExpression(v72+ ((*(unsigned __int8 *)(v123 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80))+ *(_QWORD *)(v123 + 72) * v51, v119);
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    CRRegister.wrappedValue.getter();
    v75 = v132;
    v74 = v133;
    if (v132)
    {
      v76 = v120;
      if (v133)
      {
        v131[0] = v133;
        v131[1] = v132;
        v77 = Color.almostEqual(_:)(v131);

        if ((v77 & 1) == 0)
          goto LABEL_32;
LABEL_28:
        outlined destroy of PKStrokeProperties(v119, (uint64_t (*)(_QWORD))type metadata accessor for GraphableExpression);

LABEL_33:
        return;
      }

    }
    else
    {
      v76 = v120;
      if (!v133)
        goto LABEL_28;
    }
LABEL_32:
    v88 = v111;
    v89 = v110;
    v110(v76, v111, v65);
    swift_getKeyPath();
    v90 = v128;
    Capsule<>.subscript.getter();
    swift_release();
    v91 = (uint64_t (*)(char *, uint64_t))v122;
    v122(v76, v65);
    v92 = v65;
    v93 = v112;
    v94 = v127;
    CROrderedSet.subscript.getter();
    v108(v90, v94);
    v89(v76, v88, v92);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Ref<GraphableExpression> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>, MEMORY[0x1E0D12878]);
    v95 = v100;
    Capsule.encapsulate<A>(_:)();
    v96 = v91(v76, v92);
    MEMORY[0x1E0C80A78](v96, v97);
    v99[-4] = v95;
    v99[-3] = &v133;
    v98 = v114;
    v99[-2] = v114;
    (*(void (**)(_QWORD, _QWORD, uint64_t (*)()))((*MEMORY[0x1E0DEEDD8] & *v98) + 0x468))(0, 0, partial apply for closure #2 in GraphCanvasElementView.updateGraphableExpressionState(_:));
    GraphCanvasElementView.updateGraphView()();

    (*(void (**)(char *, uint64_t))(v113 + 8))(v93, v73);
    outlined destroy of PKStrokeProperties(v119, (uint64_t (*)(_QWORD))type metadata accessor for GraphableExpression);
    (*(void (**)(char *, uint64_t))(v101 + 8))(v95, v102);
    v74 = v133;
    goto LABEL_33;
  }
}

uint64_t closure #2 in GraphCanvasElementView.updateGraphableExpressionState(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _QWORD *v11;
  void (*v12)(_BYTE *, _BYTE *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  _BYTE v18[9];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<GraphableExpression>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = a2;
  Capsule.callAsFunction<A>(_:)();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  v18[0] = 3;
  v11 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v12 = *(void (**)(_BYTE *, _BYTE *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *a3) + 0x538);
  v13 = type metadata accessor for GraphableExpression();
  v14 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  v12(v10, v18, v13, v14);
  v18[0] = 3;
  (*(void (**)(_BYTE *))((*v11 & *a3) + 0x518))(v18);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t closure #1 in closure #2 in GraphCanvasElementView.updateGraphableExpressionState(_:)(uint64_t a1, void **a2)
{
  void *v3;
  id v4;

  swift_getKeyPath();
  v3 = *a2;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  v4 = v3;
  return Capsule.Ref<>.subscript.setter();
}

uint64_t closure #3 in GraphCanvasElementView.updateGraphableExpressionState(_:)(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _QWORD *v11;
  char *v12;
  void (*v13)(_BYTE *, _BYTE *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[16];
  uint64_t v18;
  _BYTE v19[24];

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = a2;
  v11 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v12 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
  v19[0] = 3;
  v13 = *(void (**)(_BYTE *, _BYTE *, uint64_t, uint64_t))((*v11 & *a3) + 0x538);
  v14 = type metadata accessor for GraphElement();
  v15 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  v13(v10, v19, v14, v15);
  v19[0] = 3;
  (*(void (**)(_BYTE *))((*v11 & *a3) + 0x518))(v19);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t closure #1 in closure #3 in GraphCanvasElementView.updateGraphableExpressionState(_:)(uint64_t a1, Swift::Int a2)
{
  void (*v3)(uint64_t *, _QWORD);
  uint64_t v5;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  v3 = (void (*)(uint64_t *, _QWORD))Capsule.Ref<>.subscript.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  CROrderedSet.remove(at:)(a2);
  v3(&v5, 0);
  return swift_release();
}

uint64_t closure #4 in GraphCanvasElementView.updateGraphableExpressionState(_:)(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _QWORD *v11;
  char *v12;
  void (*v13)(_BYTE *, _BYTE *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[16];
  uint64_t v18;
  _BYTE v19[24];

  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = a2;
  v11 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v12 = (char *)a1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *a1) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  (*(void (**)(_BYTE *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
  v19[0] = 3;
  v13 = *(void (**)(_BYTE *, _BYTE *, uint64_t, uint64_t))((*v11 & *a3) + 0x538);
  v14 = type metadata accessor for GraphElement();
  v15 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  v13(v10, v19, v14, v15);
  v19[0] = 3;
  (*(void (**)(_BYTE *))((*v11 & *a3) + 0x518))(v19);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t closure #1 in closure #4 in GraphCanvasElementView.updateGraphableExpressionState(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  void (*v17)(_BYTE *, _QWORD);
  _BYTE v19[32];

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for GraphableExpression();
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = &v19[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of GraphableExpression(a2, (uint64_t)v10);
  v16 = type metadata accessor for CRKeyPath();
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v6, 1, 1, v16);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  swift_retain();
  Ref.init<A>(_:_:identity:)();
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
  v17 = (void (*)(_BYTE *, _QWORD))Capsule.Ref<>.subscript.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  CROrderedSet.append(_:)();
  v17(v19, 0);
  swift_release();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v15, v11);
}

void GraphCanvasElementView.updateModelColor(for:identifier:)(uint64_t a1, CGColor *a2, CGColor *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void *v29;
  char *v30;
  void (*v31)(void);
  void (*v32)(char *, uint64_t);
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  CGColor *v54;
  void *v55;
  char *v56;
  void (*v57)(void);
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  CGColor *v66;
  CGColor *v67;
  unsigned __int8 v68;
  char *v69;
  char *v70;
  uint64_t v71;
  void (*v72)(void);
  char *v73;
  char **v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  CGColor *v82;
  _QWORD *v83;
  char *v84;
  void (*v85)(char *, uint64_t);
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t (*v90)(char *, char *, uint64_t);
  uint64_t v91;
  uint64_t v92;
  void (*v93)(void);
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  char **v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  CGColor *v109;
  CGColor *v110;
  void *v111[2];
  CGColor *v112[3];

  v109 = a2;
  v110 = a3;
  v103 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<GraphableExpression>);
  v98 = *(_QWORD *)(v4 - 8);
  v99 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v97 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = type metadata accessor for GraphableExpression();
  v104 = *(_QWORD *)(v106 - 8);
  MEMORY[0x1E0C80A78](v106, v12);
  v100 = (uint64_t)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  v105 = *(_QWORD *)(v107 - 8);
  MEMORY[0x1E0C80A78](v107, v14);
  v108 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for GraphElement();
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  v21 = *(_QWORD *)(v20 - 8);
  v23 = MEMORY[0x1E0C80A78](v20, v22);
  v25 = (char *)&v84 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v26);
  v28 = (char *)&v84 - v27;
  v29 = (void *)MEMORY[0x1DF0E666C]((char *)v3 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (v29)
  {
    v101 = v29;
    v86 = v9;
    v87 = v8;
    v88 = v7;
    v30 = (char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x380);
    swift_beginAccess();
    v31 = *(void (**)(void))(v21 + 16);
    ((void (*)(char *, char *, uint64_t))v31)(v28, v30, v20);
    v92 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
    Capsule<>.root.getter();
    v32 = *(void (**)(char *, uint64_t))(v21 + 8);
    v96 = v28;
    v32(v28, v20);
    v94 = v30;
    v93 = v31;
    ((void (*)(char *, char *, uint64_t))v31)(v25, v30, v20);
    v91 = v16;
    v33 = &v19[*(int *)(v16 + 28)];
    v34 = v105;
    v36 = v107;
    v35 = v108;
    v90 = *(uint64_t (**)(char *, char *, uint64_t))(v105 + 16);
    v37 = v90(v108, v33, v107);
    v102 = &v84;
    MEMORY[0x1E0C80A78](v37, v38);
    *(&v84 - 2) = v25;
    v39 = v106;
    v40 = CROrderedSet.map<A>(_:)();
    v89 = 0;
    v41 = *(void (**)(char *, uint64_t))(v34 + 8);
    v41(v35, v36);
    v105 = v20;
    v102 = (char **)v32;
    v32(v25, v20);
    v95 = v19;
    outlined destroy of PKStrokeProperties((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for GraphElement);
    v42 = *(_QWORD *)(v40 + 16);
    if (!v42)
    {
LABEL_10:

      swift_bridgeObjectRelease();
      return;
    }
    v43 = v39;
    v85 = v41;
    v84 = v25;
    v44 = 0;
    v45 = (*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80);
    v46 = *(_QWORD *)(v104 + 72);
    while (1)
    {
      v47 = v43;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
      CRRegister.wrappedValue.getter();
      if (v112[0] == v109 && v112[1] == v110)
        break;
      v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v49 & 1) != 0)
        goto LABEL_12;
      ++v44;
      v45 += v46;
      v43 = v47;
      if (v42 == v44)
        goto LABEL_10;
    }
    swift_bridgeObjectRelease();
LABEL_12:
    swift_bridgeObjectRelease();
    v50 = dispatch thunk of CalculateGraphExpression.color.getter();
    v51 = v105;
    v52 = v108;
    v53 = v96;
    if (v50)
    {
      v54 = (CGColor *)v50;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      swift_retain();
      v55 = (void *)UIColor.init(_:)();
      Color.init(cgColor:)((CGColor *)objc_msgSend(v55, sel_CGColor), v112);

      if (v112[0])
      {
        v109 = v54;
        v110 = v112[0];
        v56 = v52;
        v57 = v93;
        ((void (*)(char *, char *, uint64_t))v93)(v53, v94, v51);
        v58 = (uint64_t)v95;
        Capsule<>.root.getter();
        ((void (*)(char *, uint64_t))v102)(v53, v51);
        v59 = v84;
        v57();
        v60 = v107;
        v61 = v90(v56, (char *)(v58 + *(int *)(v91 + 28)), v107);
        MEMORY[0x1E0C80A78](v61, v62);
        *(&v84 - 2) = v59;
        v63 = v59;
        v64 = CROrderedSet.map<A>(_:)();
        v85(v56, v60);
        ((void (*)(char *, uint64_t))v102)(v63, v51);
        outlined destroy of PKStrokeProperties((uint64_t)v95, (uint64_t (*)(_QWORD))type metadata accessor for GraphElement);
        if (v44 >= *(_QWORD *)(v64 + 16))
        {
          __break(1u);
        }
        else
        {
          v65 = v100;
          outlined init with copy of GraphableExpression(v64 + v45, v100);
          swift_bridgeObjectRelease();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
          CRRegister.wrappedValue.getter();
          v66 = v112[0];
          v67 = v110;
          if (v112[0])
          {
            v111[0] = v110;
            v111[1] = v112[0];
            v68 = Color.almostEqual(_:)(v111);

            v69 = v96;
            if ((v68 & 1) != 0)
            {
              outlined destroy of PKStrokeProperties(v65, (uint64_t (*)(_QWORD))type metadata accessor for GraphableExpression);

              swift_release();
              return;
            }
          }
          else
          {
            v69 = v96;
          }
          v70 = v94;
          v71 = v105;
          v72 = v93;
          ((void (*)(char *, char *, uint64_t))v93)(v69, v94, v105);
          swift_getKeyPath();
          v73 = v108;
          Capsule<>.subscript.getter();
          swift_release();
          v74 = v102;
          ((void (*)(char *, uint64_t))v102)(v69, v71);
          v75 = v107;
          v76 = v73;
          v77 = v97;
          CROrderedSet.subscript.getter();
          v85(v76, v75);
          ((void (*)(char *, char *, uint64_t))v72)(v69, v70, v71);
          lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Ref<GraphableExpression> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<GraphableExpression>, MEMORY[0x1E0D12878]);
          v78 = v88;
          v79 = v87;
          Capsule.encapsulate<A>(_:)();
          v80 = ((uint64_t (*)(char *, uint64_t))v74)(v69, v71);
          MEMORY[0x1E0C80A78](v80, v81);
          v82 = v110;
          *(&v84 - 4) = v78;
          *(&v84 - 3) = (char *)v82;
          v83 = v101;
          *(&v84 - 2) = (char *)v101;
          (*(void (**)(_QWORD, _QWORD, uint64_t (*)()))((*MEMORY[0x1E0DEEDD8] & *v83) + 0x468))(0, 0, partial apply for closure #2 in GraphCanvasElementView.updateModelColor(for:identifier:));
          swift_release();

          (*(void (**)(char *, uint64_t))(v86 + 8))(v77, v79);
          outlined destroy of PKStrokeProperties(v100, (uint64_t (*)(_QWORD))type metadata accessor for GraphableExpression);
          (*(void (**)(char *, uint64_t))(v98 + 8))(v78, v99);
        }
      }
      else
      {

        swift_release();
      }
    }
    else
    {

    }
  }
}

uint64_t closure #2 in GraphCanvasElementView.updateModelColor(for:identifier:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _QWORD *v11;
  void (*v12)(_BYTE *, _BYTE *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[16];
  uint64_t v17;
  _BYTE v18[9];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<GraphableExpression>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = a2;
  Capsule.callAsFunction<A>(_:)();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  v18[0] = 3;
  v11 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v12 = *(void (**)(_BYTE *, _BYTE *, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *a3) + 0x538);
  v13 = type metadata accessor for GraphableExpression();
  v14 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  v12(v10, v18, v13, v14);
  v18[0] = 3;
  (*(void (**)(_BYTE *))((*v11 & *a3) + 0x518))(v18);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t closure #1 in closure #2 in GraphCanvasElementView.updateModelColor(for:identifier:)(uint64_t a1, void *a2)
{
  id v3;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphableExpression and conformance GraphableExpression, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpression, (uint64_t)&protocol conformance descriptor for GraphableExpression);
  v3 = a2;
  return Capsule.Ref<>.subscript.setter();
}

void (*implicit closure #1 in GraphCanvasElementView.observeGraphExpressionColor(_:identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v7 = swift_allocObject();
  swift_weakInit();
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v6;
  v8[3] = v7;
  v8[4] = a3;
  v8[5] = a4;
  swift_bridgeObjectRetain();
  return partial apply for closure #2 in implicit closure #1 in GraphCanvasElementView.observeGraphExpressionColor(_:identifier:);
}

void closure #2 in implicit closure #1 in GraphCanvasElementView.observeGraphExpressionColor(_:identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  uint64_t Strong;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  const void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[6];

  v7 = type metadata accessor for DispatchWorkItemFlags();
  v30 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v16 = MEMORY[0x1DF0E666C](a1 + 16);
  if (v16)
  {
    v17 = (void *)v16;
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v27 = a3;
      v28 = Strong;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      v29 = static OS_dispatch_queue.main.getter();
      v19 = a4;
      v20 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v21 = swift_allocObject();
      swift_weakInit();
      v22 = (_QWORD *)swift_allocObject();
      v22[2] = v20;
      v22[3] = v21;
      v22[4] = v27;
      v22[5] = v19;
      aBlock[4] = partial apply for closure #1 in closure #2 in implicit closure #1 in GraphCanvasElementView.observeGraphExpressionColor(_:identifier:);
      aBlock[5] = v22;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      aBlock[3] = &block_descriptor_140_0;
      v23 = _Block_copy(aBlock);
      v27 = v11;
      v24 = v23;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      static DispatchQoS.unspecified.getter();
      v31 = MEMORY[0x1E0DEE9D8];
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      v26 = v12;
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      v25 = (void *)v29;
      MEMORY[0x1DF0E48C0](0, v15, v10, v24);
      _Block_release(v24);

      swift_release();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v7);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v15, v27);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {

    }
  }
}

void closure #1 in closure #2 in implicit closure #1 in GraphCanvasElementView.observeGraphExpressionColor(_:identifier:)(uint64_t a1, uint64_t a2, CGColor *a3, CGColor *a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t Strong;

  v6 = a1 + 16;
  swift_beginAccess();
  v7 = MEMORY[0x1DF0E666C](v6);
  if (v7)
  {
    v8 = (void *)v7;
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      GraphCanvasElementView.updateModelColor(for:identifier:)(Strong, a3, a4);

      swift_release();
    }
    else
    {

    }
  }
}

uint64_t GraphCanvasElementView.__ivar_destroyer()
{
  uint64_t v0;

  swift_release();

  return swift_bridgeObjectRelease();
}

id GraphCanvasElementView.__deallocating_deinit()
{
  return FontPicker.Coordinator.__deallocating_deinit(type metadata accessor for GraphCanvasElementView);
}

uint64_t @objc GraphCanvasElementView.__ivar_destroyer(uint64_t a1)
{
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for GraphCanvasElementView(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for GraphCanvasElementView);
}

uint64_t type metadata completion function for GraphCanvasElementView()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for GraphCanvasElementView()
{
  return type metadata accessor for GraphCanvasElementView(0);
}

uint64_t GraphableExpressionsState.view.getter()
{
  uint64_t v0;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphableExpressionsState and conformance GraphableExpressionsState, type metadata accessor for GraphableExpressionsState, (uint64_t)&protocol conformance descriptor for GraphableExpressionsState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return MEMORY[0x1DF0E666C](v0 + 16);
}

uint64_t key path getter for GraphableExpressionsState.view : GraphableExpressionsState@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphableExpressionsState and conformance GraphableExpressionsState, type metadata accessor for GraphableExpressionsState, (uint64_t)&protocol conformance descriptor for GraphableExpressionsState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  result = MEMORY[0x1DF0E666C](v3 + 16);
  *a2 = result;
  return result;
}

void key path setter for GraphableExpressionsState.view : GraphableExpressionsState(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphableExpressionsState and conformance GraphableExpressionsState, type metadata accessor for GraphableExpressionsState, (uint64_t)&protocol conformance descriptor for GraphableExpressionsState);
  v2 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();

}

uint64_t closure #1 in GraphableExpressionsState.view.setter()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t GraphableExpressionsState.expressionStates.getter()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphableExpressionsState and conformance GraphableExpressionsState, type metadata accessor for GraphableExpressionsState, (uint64_t)&protocol conformance descriptor for GraphableExpressionsState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  return swift_bridgeObjectRetain();
}

unint64_t GraphableExpressionsState.graphableExpressionsStates.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _QWORD *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t ObjectType;
  void *v55;
  id v56;
  PKDrawing *v57;
  void *v58;
  void *v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  char v67;
  void *v68;
  char *v69;
  unint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  _QWORD *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  char *v107;
  BOOL v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(char *, unint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char v123;
  char *v124;
  uint64_t v125;
  uint64_t KeyPath;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  unint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t (*v135)(uint64_t, uint64_t, unint64_t);
  id v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  void (*v143)(char *, uint64_t, unint64_t);
  _QWORD *v144;
  char *v145;
  _QWORD *v146;
  void (*v147)(char *, id, unint64_t);
  char *v148;
  uint64_t v149;
  void (*v150)(char *, uint64_t, uint64_t, unint64_t);
  int v151;
  char *v152;
  void (*v153)(char *, uint64_t, unint64_t);
  uint64_t inited;
  void *v155;
  id v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char v162;
  void *v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  _QWORD v175[2];
  char *v176;
  char *v177;
  uint64_t v178;
  unint64_t v179;
  id v180;
  unint64_t v181;
  __int128 v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  char *v188;
  char *v189;
  char *v190;
  char *v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  uint64_t v212;
  void *v213;

  v194 = type metadata accessor for CalculateExpression.Base();
  v1 = *(_QWORD *)(v194 - 8);
  MEMORY[0x1E0C80A78](v194, v2);
  v193 = (char *)v175 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v6 = MEMORY[0x1E0C80A78](v4, v5);
  v192 = (char *)v175 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v8);
  v196 = (char *)v175 - v9;
  v204 = type metadata accessor for UUID();
  v203 = *(_QWORD *)(v204 - 8);
  v11 = MEMORY[0x1E0C80A78](v204, v10);
  v191 = (char *)v175 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11, v13);
  v190 = (char *)v175 - v15;
  v17 = MEMORY[0x1E0C80A78](v14, v16);
  v202 = (char *)v175 - v18;
  v20 = MEMORY[0x1E0C80A78](v17, v19);
  v200 = (char *)v175 - v21;
  MEMORY[0x1E0C80A78](v20, v22);
  v205 = (char *)v175 - v23;
  v198 = type metadata accessor for GraphableExpression();
  v195 = *(_QWORD *)(v198 - 8);
  v25 = MEMORY[0x1E0C80A78](v198, v24);
  v199 = (uint64_t)v175 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v27);
  v29 = (unint64_t)v175 - v28;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<Ref<GraphableExpression>>);
  v201 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v31);
  v189 = (char *)v175 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = type metadata accessor for GraphElement();
  MEMORY[0x1E0C80A78](v185, v33);
  v188 = (char *)v175 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<GraphElement>);
  v184 = *(_QWORD *)(v187 - 8);
  v36 = MEMORY[0x1E0C80A78](v187, v35);
  v186 = (char *)v175 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v36, v38);
  v40 = (char *)v175 - v39;
  v41 = type metadata accessor for PKDrawing();
  v42 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41, v43);
  v45 = (char *)v175 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  v212 = v0;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphableExpressionsState and conformance GraphableExpressionsState, type metadata accessor for GraphableExpressionsState, (uint64_t)&protocol conformance descriptor for GraphableExpressionsState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v46 = MEMORY[0x1DF0E666C](v0 + 16);
  v47 = MEMORY[0x1E0DEE9D8];
  if (!v46)
    return v47;
  v48 = (char *)v46;
  v49 = (_QWORD *)MEMORY[0x1DF0E666C](v46 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
  if (!v49)
  {

    return MEMORY[0x1E0DEE9D8];
  }
  *(_QWORD *)&v182 = v30;
  v197 = v48;
  v50 = v49;
  v51 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v49) + 0x2F8))();
  v53 = v52;
  ObjectType = swift_getObjectType();
  v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v53 + 16))(ObjectType, v53);

  if (!v55)
  {

    return MEMORY[0x1E0DEE9D8];
  }
  v180 = v50;
  v56 = objc_msgSend(v55, sel_drawing);

  static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();
  PKDrawing._bridgeToObjectiveC()(v57);
  v59 = v58;
  v60 = objc_msgSend(v58, sel_uuid);

  (*(void (**)(char *, uint64_t))(v42 + 8))(v45, v41);
  v213 = &unk_1F046F2B8;
  v61 = swift_dynamicCastObjCProtocolConditional();
  if (!v61
    || ((v62 = v61,
         swift_getObjectType(),
         type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject), swift_dynamicCastMetatype())? (v63 = v62): (v63 = 0), !v63))
  {
    swift_unknownObjectRelease();

    return MEMORY[0x1E0DEE9D8];
  }
  v183 = v1;
  v64 = one-time initialization token for controllers;
  swift_unknownObjectRetain();
  if (v64 != -1)
    goto LABEL_108;
  while (1)
  {
    swift_beginAccess();
    v65 = static CalculateDocumentController.controllers;
    if (!*((_QWORD *)static CalculateDocumentController.controllers + 2))
      goto LABEL_24;
    swift_unknownObjectRetain();
    v66 = specialized __RawDictionaryStorage.find<A>(_:)((void *)v63);
    if ((v67 & 1) == 0)
    {
      swift_unknownObjectRelease();
LABEL_24:
      swift_endAccess();

      swift_unknownObjectRelease_n();
      return MEMORY[0x1E0DEE9D8];
    }
    v68 = *(void **)(v65[7] + 8 * v66);
    swift_endAccess();
    v176 = v68;
    v175[0] = v60;
    swift_unknownObjectRelease_n();
    v69 = &v197[*(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v197) + 0x380)];
    swift_beginAccess();
    v70 = v184;
    v71 = *(void (**)(char *, char *, uint64_t))(v184 + 16);
    v72 = v187;
    v71(v40, v69, v187);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphElement and conformance GraphElement, (uint64_t (*)(uint64_t))type metadata accessor for GraphElement, (uint64_t)&protocol conformance descriptor for GraphElement);
    v73 = (uint64_t)v188;
    Capsule<>.root.getter();
    v74 = *(void (**)(char *, uint64_t))(v70 + 8);
    v74(v40, v72);
    v75 = v186;
    v71(v186, v69, v72);
    v76 = v201;
    v77 = v189;
    v78 = v182;
    v79 = (*(uint64_t (**)(char *, uint64_t, _QWORD))(v201 + 16))(v189, v73 + *(int *)(v185 + 28), v182);
    MEMORY[0x1E0C80A78](v79, v80);
    v175[-2] = v75;
    v81 = CROrderedSet.map<A>(_:)();
    v185 = 0;
    v82 = v81;
    (*(void (**)(char *, uint64_t))(v76 + 8))(v77, v78);
    v74(v75, v72);
    outlined destroy of PKStrokeProperties(v73, (uint64_t (*)(_QWORD))type metadata accessor for GraphElement);
    v83 = *(_QWORD *)(v82 + 16);
    if (v83)
    {
      v206 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v83, 0);
      v84 = (*(unsigned __int8 *)(v195 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v195 + 80);
      v201 = v82;
      v85 = v82 + v84;
      v86 = *(_QWORD *)(v195 + 72);
      v87 = v206;
      do
      {
        outlined init with copy of GraphableExpression(v85, v29);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
        CRRegister.wrappedValue.getter();
        v88 = v209;
        v89 = v210;
        outlined destroy of PKStrokeProperties(v29, (uint64_t (*)(_QWORD))type metadata accessor for GraphableExpression);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v87 + 16) + 1, 1);
          v87 = v206;
        }
        v91 = *(_QWORD *)(v87 + 16);
        v90 = *(_QWORD *)(v87 + 24);
        if (v91 >= v90 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v90 > 1, v91 + 1, 1);
          v87 = v206;
        }
        *(_QWORD *)(v87 + 16) = v91 + 1;
        v92 = v87 + 16 * v91;
        *(_QWORD *)(v92 + 32) = v88;
        *(_QWORD *)(v92 + 40) = v89;
        v85 += v86;
        --v83;
      }
      while (v83);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v87 = MEMORY[0x1E0DEE9D8];
    }
    v94 = MEMORY[0x1E0DEE9D8];
    v29 = specialized Set.init<A>(_:)(v87);
    swift_bridgeObjectRelease();
    v211 = v94;
    v95 = &v176[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document];
    v96 = MEMORY[0x1DF0E666C](&v176[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document]);
    v60 = v196;
    v63 = v204;
    v97 = (_QWORD *)v203;
    v98 = (char *)v185;
    if (v96)
    {
      v99 = v96;
      v100 = *((_QWORD *)v95 + 1);
      v101 = swift_getObjectType();
      v102 = (*(uint64_t (**)(uint64_t, uint64_t))(v100 + 8))(v101, v100);
      v103 = v202;
      if (v102)
      {
        v94 = dispatch thunk of CalculateDocument.expressions.getter();
        swift_unknownObjectRelease();
        swift_release();
      }
      else
      {
        swift_beginAccess();
        swift_unknownObjectRetain();
        v104 = swift_bridgeObjectRetain();
        v94 = specialized Sequence.compactMap<A>(_:)(v104, v99, v100);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease_n();
      }
    }
    else
    {
      v103 = v202;
    }
    v105 = specialized _ArrayProtocol.filter(_:)(v94);
    v188 = v98;
    swift_bridgeObjectRelease();
    v106 = v105 >> 62 ? _CocoaArrayWrapper.endIndex.getter() : *(_QWORD *)((v105 & 0xFFFFFFFFFFFFF8) + 0x10);
    v40 = (char *)&unk_1EDB74000;
    if (!v106)
      break;
    v107 = 0;
    v185 = direct field offset for GraphCanvasElementView.graphViewController;
    v186 = (char *)(v105 & 0xC000000000000001);
    v178 = v105 & 0xFFFFFFFFFFFFFF8;
    v177 = (char *)(v105 + 32);
    v175[1] = MEMORY[0x1E0DEE9C0] + 8;
    v179 = v29;
    v184 = v105;
    *(_QWORD *)&v182 = v106;
    while (1)
    {
      if (v186)
      {
        v201 = MEMORY[0x1DF0E4D64](v107, v105);
        v108 = __OFADD__(v107, 1);
        v109 = v107 + 1;
        if (v108)
          break;
        goto LABEL_43;
      }
      if ((unint64_t)v107 >= *(_QWORD *)(v178 + 16))
        goto LABEL_107;
      v201 = *(_QWORD *)&v177[8 * (_QWORD)v107];
      swift_retain();
      v108 = __OFADD__(v107, 1);
      v109 = v107 + 1;
      if (v108)
        break;
LABEL_43:
      v189 = v109;
      v110 = v205;
      v111 = v201;
      CalculateExpression.id.getter();
      v112 = UUID.uuidString.getter();
      v114 = v113;
      v115 = (void (*)(char *, unint64_t))v97[1];
      v115(v110, v63);
      LOBYTE(v112) = specialized Set.contains(_:)(v112, v114, v29);
      swift_bridgeObjectRelease();
      type metadata accessor for GraphableExpressionState();
      v116 = swift_allocObject();
      *(_QWORD *)(v116 + 32) = 0;
      v40 = (char *)(v116 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState___observationRegistrar);
      swift_retain();
      v187 = (uint64_t)v40;
      ObservationRegistrar.init()();
      *(_QWORD *)(v116 + 16) = v111;
      *(_BYTE *)(v116 + 24) = v112 & 1;
      swift_retain();
      CalculateExpression.id.getter();
      swift_release();
      *(_BYTE *)(v116 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__shouldBeObserved) = 0;
      v117 = *(_QWORD *)&v197[v185];
      if (v117
        && *(_QWORD *)(v117
                     + OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_calculateGraph))
      {
        swift_retain();
        v63 = dispatch thunk of CalculateGraph.graphExpressions.getter();
        swift_release();
        v181 = v116;
        if (v63 >> 62)
        {
          swift_bridgeObjectRetain();
          v29 = _CocoaArrayWrapper.endIndex.getter();
          if (v29)
            goto LABEL_47;
        }
        else
        {
          v29 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v29)
          {
LABEL_47:
            v60 = (id)(v63 & 0xC000000000000001);
            v118 = 4;
            do
            {
              v119 = v118 - 4;
              if (v60)
              {
                MEMORY[0x1DF0E4D64](v118 - 4, v63);
                v120 = v118 - 3;
                if (__OFADD__(v119, 1))
                  goto LABEL_103;
              }
              else
              {
                swift_retain();
                v120 = v118 - 3;
                if (__OFADD__(v119, 1))
                {
LABEL_103:
                  __break(1u);
LABEL_104:
                  __break(1u);
                  goto LABEL_105;
                }
              }
              v121 = v205;
              dispatch thunk of CalculateGraphExpression.id.getter();
              v122 = v200;
              CalculateExpression.id.getter();
              v123 = static UUID.== infix(_:_:)();
              v124 = v122;
              v40 = (char *)v204;
              v115(v124, v204);
              v115(v121, (unint64_t)v40);
              if ((v123 & 1) != 0)
              {
                swift_bridgeObjectRelease_n();
                v125 = dispatch thunk of CalculateGraphExpression.effectiveColor.getter();
                swift_release();
                KeyPath = swift_getKeyPath();
                MEMORY[0x1E0C80A78](KeyPath, v127);
                v128 = v181;
                v175[-2] = v181;
                v175[-1] = v125;
                v209 = v128;
                lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
                swift_retain();
                v129 = v188;
                ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
                v188 = v129;
                swift_release();
                swift_release_n();
                v60 = v196;
                v63 = v204;
                v97 = (_QWORD *)v203;
                v29 = v179;
                goto LABEL_57;
              }
              swift_release();
              ++v118;
            }
            while (v120 != v29);
          }
        }
        swift_bridgeObjectRelease_n();
        v60 = v196;
        v63 = v204;
        v97 = (_QWORD *)v203;
        v29 = v179;
      }
LABEL_57:
      v130 = swift_retain();
      MEMORY[0x1DF0E4398](v130);
      v40 = (_BYTE *)&unk_1EDB74000;
      v107 = v189;
      if (*(_QWORD *)((v211 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v211 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
      swift_release();
      v103 = v202;
      v105 = v184;
      if (v107 == (char *)v182)
        goto LABEL_63;
    }
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    swift_once();
  }
LABEL_63:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v131 = v197;
  v132 = GraphCanvasElementView.orphanedGraphables.getter();
  v189 = *(char **)(v132 + 16);
  if (v189)
  {
    v187 = *((_QWORD *)v40 + 25);
    v186 = (char *)(v132
                  + ((*(unsigned __int8 *)(v195 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v195 + 80)));
    v177 = &v131[direct field offset for GraphCanvasElementView.expressionIdentifierToId];
    swift_beginAccess();
    v29 = 0;
    v185 = *MEMORY[0x1E0D09E80];
    LODWORD(v184) = *MEMORY[0x1E0D09CA0];
    v182 = xmmword_1DDF32CF0;
    v178 = MEMORY[0x1E0DEE9C0] + 8;
    v181 = v132;
    v133 = v205;
    do
    {
      if (v29 >= *(_QWORD *)(v132 + 16))
        goto LABEL_106;
      v134 = *(_QWORD *)(v195 + 72);
      v201 = v29;
      outlined init with copy of GraphableExpression((uint64_t)&v186[v134 * v29], v199);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
      CRRegister.wrappedValue.getter();
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      v135 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))v97[6];
      if (v135((uint64_t)v60, 1, v63) == 1)
      {
        outlined destroy of UUID?((uint64_t)v60);
        v136 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedInteger_, 0);
        CRRegister.wrappedValue.getter();
        v137 = v208;
        v138 = *(_QWORD *)v177;
        if (*(_QWORD *)(*(_QWORD *)v177 + 16))
        {
          v139 = (uint64_t)v207;
          swift_bridgeObjectRetain();
          v140 = specialized __RawDictionaryStorage.find<A>(_:)(v139, v137);
          if ((v141 & 1) != 0)
          {
            v142 = *(_QWORD *)(v138 + 56) + v97[9] * v140;
            v143 = (void (*)(char *, uint64_t, unint64_t))v97[2];
            v144 = v97;
            v145 = v192;
            v143(v192, v142, v63);
            ((void (*)(char *, _QWORD, uint64_t, unint64_t))v144[7])(v145, 0, 1, v63);
          }
          else
          {
            v150 = (void (*)(char *, uint64_t, uint64_t, unint64_t))v97[7];
            v145 = v192;
            v150(v192, 1, 1, v63);
          }
          swift_bridgeObjectRelease();
          v149 = (uint64_t)v145;
        }
        else
        {
          v149 = (uint64_t)v192;
          ((void (*)(char *, uint64_t, uint64_t, unint64_t))v97[7])(v192, 1, 1, v63);
        }
        swift_bridgeObjectRelease();
        v151 = v135(v149, 1, v63);
        v152 = v191;
        if (v151 == 1)
        {
          UUID.init()();
          outlined destroy of UUID?(v149);
          (*(void (**)(char *, char *, unint64_t))(v203 + 32))(v103, v152, v63);
        }
        else
        {
          v153 = *(void (**)(char *, uint64_t, unint64_t))(v203 + 32);
          v153(v191, v149, v63);
          v153(v103, (uint64_t)v152, v63);
        }
        v146 = (_QWORD *)v203;
      }
      else
      {
        v146 = v97;
        v147 = (void (*)(char *, id, unint64_t))v97[4];
        v148 = v190;
        v147(v190, v60, v63);
        v136 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithUnsignedInteger_, 1);
        v147(v103, v148, v63);
      }
      CRRegister.wrappedValue.getter();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(CalculateKey, Any)>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v182;
      v155 = (void *)v185;
      *(_QWORD *)(inited + 32) = v185;
      *(_QWORD *)(inited + 64) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      *(_QWORD *)(inited + 40) = v136;
      v156 = v155;
      v200 = (char *)v136;
      specialized Dictionary.init(dictionaryLiteral:)(inited);
      ((void (*)(char *, char *, unint64_t))v146[2])(v205, v103, v63);
      (*(void (**)(char *, _QWORD, uint64_t))(v183 + 104))(v193, v184, v194);
      type metadata accessor for CalculateExpression();
      swift_allocObject();
      v40 = (char *)CalculateExpression.init(_:options:base:id:)();
      type metadata accessor for GraphableExpressionState();
      v63 = swift_allocObject();
      *(_QWORD *)(v63 + 32) = 0;
      v157 = v63 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState___observationRegistrar;
      swift_retain();
      ObservationRegistrar.init()();
      *(_QWORD *)(v63 + 16) = v40;
      *(_BYTE *)(v63 + 24) = 1;
      swift_retain();
      CalculateExpression.id.getter();
      swift_release();
      *(_BYTE *)(v63 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__shouldBeObserved) = 0;
      v158 = *(_QWORD *)&v197[v187];
      if (v158
        && *(_QWORD *)(v158
                     + OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_calculateGraph))
      {
        v179 = v157;
        swift_retain();
        v159 = dispatch thunk of CalculateGraph.graphExpressions.getter();
        swift_release();
        if (v159 >> 62)
        {
          swift_bridgeObjectRetain();
          v160 = _CocoaArrayWrapper.endIndex.getter();
          if (v160)
          {
LABEL_82:
            v29 = 4;
            while (1)
            {
              v60 = (id)(v29 - 4);
              if ((v159 & 0xC000000000000001) != 0)
              {
                MEMORY[0x1DF0E4D64](v29 - 4, v159);
                v161 = v29 - 3;
                if (__OFADD__(v60, 1))
                  goto LABEL_104;
              }
              else
              {
                swift_retain();
                v161 = v29 - 3;
                if (__OFADD__(v60, 1))
                  goto LABEL_104;
              }
              dispatch thunk of CalculateGraphExpression.id.getter();
              v162 = static UUID.== infix(_:_:)();
              (*(void (**)(char *, uint64_t))(v203 + 8))(v133, v204);
              if ((v162 & 1) != 0)
                break;
              swift_release();
              ++v29;
              if (v161 == v160)
                goto LABEL_90;
            }
            swift_bridgeObjectRelease_n();
            v171 = dispatch thunk of CalculateGraphExpression.effectiveColor.getter();
            swift_release();
            v172 = swift_getKeyPath();
            MEMORY[0x1E0C80A78](v172, v173);
            v175[-2] = v63;
            v175[-1] = v171;
            v207 = (void *)v63;
            lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
            swift_retain();
            v174 = v188;
            ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
            v188 = v174;
            swift_release();
            swift_release_n();
            v97 = (_QWORD *)v203;
            v163 = v200;
            goto LABEL_95;
          }
        }
        else
        {
          v160 = *(_QWORD *)((v159 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v160)
            goto LABEL_82;
        }
LABEL_90:
        swift_bridgeObjectRelease_n();
        v163 = v200;
      }
      else
      {
        v163 = v200;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
      CRRegister.wrappedValue.getter();
      v164 = v207;
      if (v207)
      {
        v165 = MEMORY[0x1DF0E22F8](objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithCGColor_, v207));
        v166 = swift_getKeyPath();
        MEMORY[0x1E0C80A78](v166, v167);
        v175[-2] = v63;
        v175[-1] = v165;
        v207 = (void *)v63;
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
        v168 = v188;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
        v188 = v168;

        swift_release();
        swift_release();
      }
      v97 = (_QWORD *)v203;
LABEL_95:
      v169 = swift_retain();
      MEMORY[0x1DF0E4398](v169);
      v60 = v196;
      v103 = v202;
      v170 = v201;
      if (*(_QWORD *)((v211 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v211 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      v29 = v170 + 1;
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      swift_release();
      swift_release();
      outlined destroy of PKStrokeProperties(v199, (uint64_t (*)(_QWORD))type metadata accessor for GraphableExpression);
      v63 = v204;
      ((void (*)(char *, uint64_t))v97[1])(v103, v204);
      v132 = v181;
    }
    while ((char *)v29 != v189);
  }

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v211;
}

uint64_t GraphableExpressionsState.update()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphableExpressionsState and conformance GraphableExpressionsState, type metadata accessor for GraphableExpressionsState, (uint64_t)&protocol conformance descriptor for GraphableExpressionsState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v1 = *(_QWORD *)(v0 + 24);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v2 = result;
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
  }
  if (v2)
  {
    if (v2 < 1)
    {
      __break(1u);
      goto LABEL_22;
    }
    v4 = 0;
    v18 = v1 & 0xC000000000000001;
    v5 = v1;
    do
    {
      if (v18)
        MEMORY[0x1DF0E4D64](v4, v1);
      else
        swift_retain();
      ++v4;
      KeyPath = swift_getKeyPath();
      MEMORY[0x1E0C80A78](KeyPath, v7);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      swift_release();
      swift_release();
      v1 = v5;
    }
    while (v2 != v4);
  }
  swift_bridgeObjectRelease();
  GraphableExpressionsState.graphableExpressionsStates.getter();
  v8 = swift_getKeyPath();
  MEMORY[0x1E0C80A78](v8, v9);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v10 = *(_QWORD *)(v0 + 24);
  if (!(v10 >> 62))
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v11)
      goto LABEL_12;
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v11 = result;
  if (!result)
    return swift_bridgeObjectRelease();
LABEL_12:
  if (v11 >= 1)
  {
    v12 = 0;
    v19 = v10 & 0xC000000000000001;
    v13 = v10;
    do
    {
      if (v19)
        MEMORY[0x1DF0E4D64](v12, v10);
      else
        swift_retain();
      ++v12;
      v14 = swift_getKeyPath();
      MEMORY[0x1E0C80A78](v14, v15);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
      v16 = swift_release();
      MEMORY[0x1E0C80A78](v16, v17);
      withObservationTracking<A>(_:onChange:)();
      swift_release();
      v10 = v13;
    }
    while (v11 != v12);
    return swift_bridgeObjectRelease();
  }
LABEL_22:
  __break(1u);
  return result;
}

char *GraphableExpressionsState.updateColors()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  CGColor *v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char v27;
  void (*v28)(char *, unint64_t);
  id v29;
  uint64_t v30;
  CGColor *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  CGColor *v36;
  CGColorSpace *v37;
  int v38;
  CGColor *v39;
  __objc2_prot_list **p_base_prots;
  CGColorRef CopyByMatchingToColorSpace;
  CGColorSpace *v42;
  int v43;
  CGColorRef v44;
  CGColor *v45;
  unsigned __int8 v46;
  uint64_t v47;
  CGColor *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  CGColor *v52;
  void *v53;
  CGColor *v54;
  unsigned __int8 v55;
  uint64_t v56;
  uint64_t v57;
  CGColor *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  char *v76;
  CGColor *v77;
  uint64_t v78;
  void *v79[2];
  CGColor *v80[2];

  v1 = type metadata accessor for UUID();
  v71 = *(_QWORD *)(v1 - 8);
  v72 = v1;
  v3 = MEMORY[0x1E0C80A78](v1, v2);
  v70 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3, v5);
  v69 = (char *)&v59 - v6;
  swift_getKeyPath();
  v78 = v0;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphableExpressionsState and conformance GraphableExpressionsState, type metadata accessor for GraphableExpressionsState, (uint64_t)&protocol conformance descriptor for GraphableExpressionsState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  result = (char *)MEMORY[0x1DF0E666C](v0 + 16);
  v66 = result;
  if (!result)
    return result;
  swift_getKeyPath();
  v78 = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v8 = *(_QWORD *)(v0 + 24);
  if (v8 >> 62)
  {
LABEL_56:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    if (!v9)
      goto LABEL_57;
  }
  else
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v9)
      goto LABEL_57;
  }
  v10 = 0;
  v11 = 0;
  v64 = direct field offset for GraphCanvasElementView.graphViewController;
  v65 = v8 & 0xC000000000000001;
  v60 = v8 & 0xFFFFFFFFFFFFFF8;
  v59 = v8 + 32;
  v62 = MEMORY[0x1E0DEE9C0] + 8;
  v63 = v9;
  v61 = v8;
  while (1)
  {
LABEL_9:
    if (v65)
    {
      v77 = (CGColor *)MEMORY[0x1DF0E4D64](v10, v8);
      v15 = __OFADD__(v10, 1);
      v16 = v10 + 1;
      if (v15)
        goto LABEL_54;
    }
    else
    {
      if (v10 >= *(_QWORD *)(v60 + 16))
        goto LABEL_55;
      v77 = *(CGColor **)(v59 + 8 * v10);
      swift_retain();
      v15 = __OFADD__(v10, 1);
      v16 = v10 + 1;
      if (v15)
      {
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
    }
    v17 = *(_QWORD *)&v66[v64];
    v68 = v16;
    if (v17)
    {
      if (*(_QWORD *)(v17
                     + OBJC_IVAR____TtC8PaperKitP33_34A094740B6BACFE09E8AB9B5463AD5F32GraphCanvasElementViewController_calculateGraph))
        break;
    }
LABEL_28:
    v29 = objc_msgSend((id)objc_opt_self(), sel_clearColor);
    v30 = MEMORY[0x1DF0E22F8](v29);
    swift_getKeyPath();
    v31 = v77;
    v32 = (char *)v77 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState___observationRegistrar;
    v80[0] = v77;
    v33 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    if (!*((_QWORD *)v31 + 4))
      goto LABEL_7;
    v75 = v33;
    v76 = v32;
    v67 = v11;
    v34 = v8;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    swift_retain_n();
    swift_retain_n();
    v35 = (void *)UIColor.init(_:)();
    v36 = (CGColor *)objc_msgSend(v35, sel_CGColor);
    v37 = CGColorGetColorSpace(v36);
    if (one-time initialization token for extendedSRGBColorSpace != -1)
      swift_once();
    v38 = CFEqual(v37, (CFTypeRef)static Color.extendedSRGBColorSpace);

    if (v38)
    {
      v39 = v36;
      p_base_prots = (__objc2_prot_list **)(&MiniMenuController + 40);
    }
    else
    {
      CopyByMatchingToColorSpace = CGColorCreateCopyByMatchingToColorSpace((CGColorSpaceRef)static Color.extendedSRGBColorSpace, kCGRenderingIntentDefault, v36, 0);
      p_base_prots = &MiniMenuController.base_prots;
      if (!CopyByMatchingToColorSpace)
      {
        swift_release_n();
        swift_release_n();
LABEL_6:

        v8 = v34;
        v11 = v67;
        goto LABEL_7;
      }
      v39 = CopyByMatchingToColorSpace;

      v35 = v36;
    }

    swift_retain();
    v35 = (void *)UIColor.init(_:)();
    v36 = (CGColor *)objc_msgSend(v35, (SEL)p_base_prots[66]);
    v42 = CGColorGetColorSpace(v36);
    v43 = CFEqual(v42, (CFTypeRef)static Color.extendedSRGBColorSpace);

    if (v43)
      goto LABEL_38;
    v44 = CGColorCreateCopyByMatchingToColorSpace((CGColorSpaceRef)static Color.extendedSRGBColorSpace, kCGRenderingIntentDefault, v36, 0);
    if (!v44)
    {
      swift_release_n();
      swift_release_n();

      goto LABEL_6;
    }
    v45 = v44;

    v35 = v36;
    v36 = v45;
LABEL_38:

    v80[0] = v39;
    v79[0] = v36;
    v46 = Color.almostEqual(_:)(v79);

    swift_release_n();
    swift_release_n();
    v8 = v34;
    v11 = v67;
    if ((v46 & 1) != 0)
    {
      swift_release();
      swift_release();
      goto LABEL_8;
    }
LABEL_7:
    KeyPath = swift_getKeyPath();
    MEMORY[0x1E0C80A78](KeyPath, v13);
    v14 = v77;
    *(&v59 - 2) = (unint64_t)v77;
    *(&v59 - 1) = v30;
    v80[0] = v14;
    swift_retain();
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    swift_release_n();
LABEL_8:
    v10 = v68;
    if (v68 == v63)
      goto LABEL_57;
  }
  swift_retain();
  v18 = dispatch thunk of CalculateGraph.graphExpressions.getter();
  swift_release();
  if (!(v18 >> 62))
  {
    v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v67 = v11;
    if (v19)
      goto LABEL_19;
    goto LABEL_27;
  }
  swift_bridgeObjectRetain();
  v19 = _CocoaArrayWrapper.endIndex.getter();
  v67 = v11;
  if (!v19)
  {
LABEL_27:
    swift_bridgeObjectRelease_n();
    v8 = v61;
    v11 = v67;
    goto LABEL_28;
  }
LABEL_19:
  v76 = (char *)v77 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState___observationRegistrar;
  v74 = (char *)v77 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__id;
  v75 = v18 & 0xC000000000000001;
  swift_beginAccess();
  v20 = 4;
  while (1)
  {
    v21 = v20 - 4;
    if (v75)
    {
      MEMORY[0x1DF0E4D64](v20 - 4, v18);
      v22 = v20 - 3;
      if (__OFADD__(v21, 1))
        goto LABEL_53;
    }
    else
    {
      swift_retain();
      v22 = v20 - 3;
      if (__OFADD__(v21, 1))
      {
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
    }
    v23 = v18;
    v24 = v69;
    dispatch thunk of CalculateGraphExpression.id.getter();
    swift_getKeyPath();
    v80[0] = v77;
    v73 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
    ObservationRegistrar.access<A, B>(_:keyPath:)();
    swift_release();
    v26 = v70;
    v25 = v71;
    v8 = v72;
    (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v70, v74, v72);
    v27 = static UUID.== infix(_:_:)();
    v28 = *(void (**)(char *, unint64_t))(v25 + 8);
    v28(v26, v8);
    v28(v24, v8);
    if ((v27 & 1) != 0)
      break;
    swift_release();
    ++v20;
    v18 = v23;
    if (v22 == v19)
      goto LABEL_27;
  }
  swift_bridgeObjectRelease_n();
  v47 = dispatch thunk of CalculateGraphExpression.effectiveColor.getter();
  swift_release();
  swift_getKeyPath();
  v48 = v77;
  v80[0] = v77;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  v49 = *((_QWORD *)v48 + 4);
  v50 = v63;
  v11 = v67;
  v10 = v68;
  if (!v49)
    goto LABEL_48;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  swift_retain_n();
  swift_retain_n();
  v51 = (void *)UIColor.init(_:)();
  Color.init(cgColor:)((CGColor *)objc_msgSend(v51, sel_CGColor), v80);

  v52 = v80[0];
  if (!v80[0])
  {
    swift_release_n();
    swift_release_n();
    goto LABEL_48;
  }
  swift_retain();
  v53 = (void *)UIColor.init(_:)();
  Color.init(cgColor:)((CGColor *)objc_msgSend(v53, sel_CGColor), v80);

  v54 = v80[0];
  if (!v80[0])
  {
    swift_release_n();
    swift_release_n();

    v11 = v67;
    goto LABEL_48;
  }
  v80[0] = v52;
  v79[0] = v54;
  v55 = Color.almostEqual(_:)(v79);

  swift_release_n();
  swift_release_n();
  v11 = v67;
  if ((v55 & 1) == 0)
  {
LABEL_48:
    v56 = swift_getKeyPath();
    MEMORY[0x1E0C80A78](v56, v57);
    v58 = v77;
    *(&v59 - 2) = (unint64_t)v77;
    *(&v59 - 1) = v47;
    v80[0] = v58;
    swift_retain();
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    swift_release();
    swift_release_n();
    goto LABEL_49;
  }
  swift_release();
  swift_release();
LABEL_49:
  v8 = v61;
  if (v10 != v50)
    goto LABEL_9;
LABEL_57:

  return (char *)swift_bridgeObjectRelease();
}

uint64_t GraphableExpressionsState.expressionStateDidChange(_:)(CGColor *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags();
  v28 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v26 = *(_QWORD *)(v7 - 8);
  v27 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for DispatchTime();
  v11 = *(_QWORD *)(v29 - 8);
  v13 = MEMORY[0x1E0C80A78](v29, v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v16);
  v18 = (char *)&v24 - v17;
  swift_getKeyPath();
  aBlock[0] = v1;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type GraphableExpressionsState and conformance GraphableExpressionsState, type metadata accessor for GraphableExpressionsState, (uint64_t)&protocol conformance descriptor for GraphableExpressionsState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  result = MEMORY[0x1DF0E666C](v1 + 16);
  if (result)
  {
    v20 = (void *)result;
    GraphCanvasElementView.updateGraphableExpressionState(_:)(a1);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    v21 = (void *)static OS_dispatch_queue.main.getter();
    static DispatchTime.now()();
    MEMORY[0x1DF0E26A0](v15, 0.1);
    v25 = *(void (**)(char *, uint64_t))(v11 + 8);
    v25(v15, v29);
    v22 = swift_allocObject();
    swift_weakInit();
    aBlock[4] = partial apply for closure #1 in GraphableExpressionsState.expressionStateDidChange(_:);
    aBlock[5] = v22;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_46;
    v23 = _Block_copy(aBlock);
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1DF0E4884](v18, v10, v6, v23);
    _Block_release(v23);

    (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v27);
    return ((uint64_t (*)(char *, uint64_t))v25)(v18, v29);
  }
  return result;
}

uint64_t closure #1 in GraphableExpressionsState.expressionStateDidChange(_:)()
{
  uint64_t result;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    GraphableExpressionsState.updateColors()();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in GraphableExpressionsState.observeExpressionState(_:)()
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  swift_getKeyPath();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  return swift_release();
}

uint64_t (*implicit closure #1 in GraphableExpressionsState.observeExpressionState(_:)())()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = swift_allocObject();
  swift_weakInit();
  v1 = swift_allocObject();
  swift_weakInit();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = v1;
  return partial apply for closure #2 in implicit closure #1 in GraphableExpressionsState.observeExpressionState(_:);
}

uint64_t closure #2 in implicit closure #1 in GraphableExpressionsState.observeExpressionState(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t Strong;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[6];

  v0 = type metadata accessor for DispatchWorkItemFlags();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v12 = Strong;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      v23 = static OS_dispatch_queue.main.getter();
      v13 = swift_allocObject();
      v24 = v6;
      v14 = v13;
      swift_weakInit();
      v15 = swift_allocObject();
      swift_weakInit();
      v16 = swift_allocObject();
      *(_QWORD *)(v16 + 16) = v14;
      *(_QWORD *)(v16 + 24) = v15;
      aBlock[4] = partial apply for closure #1 in closure #2 in implicit closure #1 in GraphableExpressionsState.observeExpressionState(_:);
      aBlock[5] = v16;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      aBlock[3] = &block_descriptor_35_0;
      v17 = _Block_copy(aBlock);
      v22 = v12;
      v18 = v17;
      swift_retain();
      swift_retain();
      static DispatchQoS.unspecified.getter();
      v25 = MEMORY[0x1E0DEE9D8];
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      v20 = v1;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      v21 = v5;
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      v19 = (void *)v23;
      MEMORY[0x1DF0E48C0](0, v9, v4, v18);
      _Block_release(v18);
      swift_release();
      swift_release();

      (*(void (**)(char *, uint64_t))(v20 + 8))(v4, v0);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v21);
      swift_release();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #2 in implicit closure #1 in GraphableExpressionsState.observeExpressionState(_:)()
{
  uint64_t result;
  uint64_t Strong;
  CGColor *v2;
  uint64_t v3;
  uint64_t v4;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v2 = (CGColor *)Strong;
      swift_getKeyPath();
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionState and conformance GraphableExpressionState, (uint64_t (*)(uint64_t))type metadata accessor for GraphableExpressionState, (uint64_t)&protocol conformance descriptor for GraphableExpressionState);
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      if ((*((_BYTE *)v2 + OBJC_IVAR____TtC8PaperKit24GraphableExpressionState__shouldBeObserved) & 1) != 0)
      {
        v3 = GraphableExpressionsState.expressionStateDidChange(_:)(v2);
        MEMORY[0x1E0C80A78](v3, v4);
        withObservationTracking<A>(_:onChange:)();
        swift_release();
        return swift_release();
      }
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t GraphableExpressionsState.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC8PaperKit25GraphableExpressionsState___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for GraphableExpressionsState()
{
  return type metadata accessor for GraphableExpressionsState(0);
}

uint64_t type metadata accessor for GraphableExpressionsState(uint64_t a1)
{
  return type metadata accessor for PKStrokeProperties(a1, (uint64_t *)&type metadata singleton initialization cache for GraphableExpressionsState);
}

uint64_t type metadata completion function for GraphableExpressionsState()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for ObservationRegistrar();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance GraphableExpressionsState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for GraphableExpressionsState(0);
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for GraphableExpressionsState(uint64_t a1)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type GraphableExpressionsState and conformance GraphableExpressionsState, type metadata accessor for GraphableExpressionsState, (uint64_t)&protocol conformance descriptor for GraphableExpressionsState);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1DDD78270()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GraphableExpressionsState.expressionStateDidChange(_:)()
{
  return closure #1 in GraphableExpressionsState.expressionStateDidChange(_:)();
}

uint64_t block_copy_helper_46(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_46()
{
  return swift_release();
}

uint64_t _s8PaperKit25GraphableExpressionsStateC4viewAA22GraphCanvasElementViewCSgvsyyXEfU_TA_0()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t partial apply for closure #1 in GraphableExpressionState.color.setter()
{
  uint64_t v0;

  return closure #1 in GraphableExpressionState.color.setter(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t partial apply for closure #1 in GraphableExpressionsState.expressionStates.setter()
{
  return partial apply for closure #1 in GraphableExpressionsState.expressionStates.setter();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24) = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in GraphableExpressionState.shouldBeObserved.setter()
{
  uint64_t v0;

  return closure #1 in GraphableExpressionState.shouldBeObserved.setter(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t partial apply for closure #1 in GraphableExpressionsState.observeExpressionState(_:)()
{
  return closure #1 in GraphableExpressionsState.observeExpressionState(_:)();
}

uint64_t (*partial apply for implicit closure #1 in GraphableExpressionsState.observeExpressionState(_:)())()
{
  return implicit closure #1 in GraphableExpressionsState.observeExpressionState(_:)();
}

uint64_t sub_1DDD78380()
{
  return objectdestroy_26Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t partial apply for closure #2 in implicit closure #1 in GraphableExpressionsState.observeExpressionState(_:)()
{
  return closure #2 in implicit closure #1 in GraphableExpressionsState.observeExpressionState(_:)();
}

uint64_t sub_1DDD78394()
{
  return objectdestroy_26Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t partial apply for closure #1 in closure #2 in implicit closure #1 in GraphableExpressionsState.observeExpressionState(_:)()
{
  return closure #1 in closure #2 in implicit closure #1 in GraphableExpressionsState.observeExpressionState(_:)();
}

uint64_t partial apply for closure #1 in GraphableExpressionState.enabled.setter()
{
  uint64_t v0;

  return closure #1 in GraphableExpressionState.enabled.setter(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t partial apply for specialized closure #1 in GraphElement.graphables<A>(in:)()
{
  return specialized closure #1 in GraphElement.graphables<A>(in:)();
}

uint64_t specialized CalculateDocumentController.addObserverIfNecessary(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  _QWORD *v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  void *v30;
  id v31;
  BOOL v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t ObjectType;
  uint64_t v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;
  id v45;
  _QWORD *v46;
  void *v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  int64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _UNKNOWN **v56;
  _BYTE v57[16];

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a2 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_observers;
  swift_beginAccess();
  v14 = *(_QWORD *)v13;
  v15 = *(_QWORD *)(*(_QWORD *)v13 + 16);
  v52 = v8;
  if (v15)
  {
    v16 = v14 + 32;
    swift_bridgeObjectRetain();
    do
    {
      v17 = MEMORY[0x1DF0E666C](v16);
      if (v17)
      {
        v18 = v17;
        swift_unknownObjectRelease();
        if (v18 == a1)
          return swift_bridgeObjectRelease();
      }
      v16 += 16;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
    v8 = v52;
  }
  v56 = 0;
  swift_unknownObjectWeakInit();
  v56 = &protocol witness table for AnyCanvas;
  v20 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakObserver(v20, (uint64_t)v57);
  swift_beginAccess();
  v21 = *(_QWORD **)v13;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v13 = v21;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_53:
    v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, (unint64_t)v21);
    *(_QWORD *)v13 = v21;
  }
  v24 = v21[2];
  v23 = v21[3];
  if (v24 >= v23 >> 1)
  {
    v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v24 + 1, 1, (unint64_t)v21);
    *(_QWORD *)v13 = v21;
  }
  v21[2] = v24 + 1;
  outlined init with take of WeakObserver((uint64_t)v57, (uint64_t)&v21[2 * v24 + 4]);
  swift_endAccess();
  v21 = (_QWORD *)(a2 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document);
  result = MEMORY[0x1DF0E666C](a2 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document);
  v54 = result;
  if (result)
  {
    v50 = a1;
    v53 = v21[1];
    a2 += OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_expressionUUIDs;
    swift_beginAccess();
    v25 = *(_QWORD *)a2;
    v26 = *(_QWORD *)(*(_QWORD *)a2 + 56);
    v48 = *(_QWORD *)a2 + 56;
    v27 = 1 << *(_BYTE *)(v25 + 32);
    v28 = -1;
    if (v27 < 64)
      v28 = ~(-1 << v27);
    a1 = v28 & v26;
    v51 = (unint64_t)(v27 + 63) >> 6;
    v55 = v25;
    result = swift_bridgeObjectRetain();
    v29 = 0;
    v49 = v12;
    while (1)
    {
      if (a1)
      {
        v34 = __clz(__rbit64(a1));
        a1 &= a1 - 1;
        v35 = v34 | (v29 << 6);
      }
      else
      {
        v36 = v29 + 1;
        if (__OFADD__(v29, 1))
        {
          __break(1u);
          goto LABEL_53;
        }
        if (v36 >= v51)
          goto LABEL_49;
        v37 = *(_QWORD *)(v48 + 8 * v36);
        ++v29;
        if (!v37)
        {
          v29 = v36 + 1;
          if (v36 + 1 >= v51)
            goto LABEL_49;
          v37 = *(_QWORD *)(v48 + 8 * v29);
          if (!v37)
          {
            v29 = v36 + 2;
            if (v36 + 2 >= v51)
              goto LABEL_49;
            v37 = *(_QWORD *)(v48 + 8 * v29);
            if (!v37)
            {
              v29 = v36 + 3;
              if (v36 + 3 >= v51)
                goto LABEL_49;
              v37 = *(_QWORD *)(v48 + 8 * v29);
              if (!v37)
              {
                v29 = v36 + 4;
                if (v36 + 4 >= v51)
                  goto LABEL_49;
                v37 = *(_QWORD *)(v48 + 8 * v29);
                if (!v37)
                {
                  v38 = v36 + 5;
                  if (v38 >= v51)
                  {
LABEL_49:
                    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v12, 1, 1, v4);
LABEL_50:
                    swift_unknownObjectRelease();
                    return swift_release();
                  }
                  v37 = *(_QWORD *)(v48 + 8 * v38);
                  if (!v37)
                  {
                    while (1)
                    {
                      v29 = v38 + 1;
                      if (__OFADD__(v38, 1))
                        break;
                      if (v29 >= v51)
                        goto LABEL_49;
                      v37 = *(_QWORD *)(v48 + 8 * v29);
                      ++v38;
                      if (v37)
                        goto LABEL_39;
                    }
                    __break(1u);
                    return result;
                  }
                  v29 = v38;
                }
              }
            }
          }
        }
LABEL_39:
        a1 = (v37 - 1) & v37;
        v35 = __clz(__rbit64(v37)) + (v29 << 6);
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v12, *(_QWORD *)(v55 + 48) + *(_QWORD *)(v5 + 72) * v35, v4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v12, 0, 1, v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4) == 1)
        goto LABEL_50;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v12, v4);
      a2 = v54;
      ObjectType = swift_getObjectType();
      v40 = (*(uint64_t (**)(char *, uint64_t))(v53 + 48))(v8, ObjectType);
      if (v40)
        break;
LABEL_19:
      result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    v13 = v40;
    v41 = (void *)CalculateExpression.result.getter();
    v42 = v41;
    if (v41)
    {
      v43 = v41;
      if (!objc_msgSend(v43, sel_isTrivial))
      {
        v45 = objc_msgSend(v43, sel_formattedResult);
        v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v21 = v46;

        v8 = v52;
        goto LABEL_47;
      }

    }
    v44 = 0;
    v21 = 0;
LABEL_47:
    v47 = (void *)CalculateExpression.result.getter();
    if (v47)
    {
      v30 = v47;
      v31 = objc_msgSend(v47, sel_unitType);

      v32 = v31 == (id)16;
      v8 = v52;
      v33 = v32;
    }
    else
    {
      v33 = 0;
    }
    a2 = v50;
    AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:)(v44, v21, (uint64_t)v8, v33);
    swift_release();
    swift_bridgeObjectRelease();

    v12 = v49;
    goto LABEL_19;
  }
  return result;
}

uint64_t specialized CalculateDocumentController.addObserverIfNecessary(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  _QWORD *v19;
  char isUniquelyReferenced_nonNull_native;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t ObjectType;
  uint64_t v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  char *v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _UNKNOWN **v46;
  _BYTE v47[16];

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v40 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a2 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_observers;
  swift_beginAccess();
  v13 = *(_QWORD *)(*(_QWORD *)v12 + 16);
  if (v13)
  {
    v14 = *(_QWORD *)v12 + 32;
    swift_bridgeObjectRetain();
    do
    {
      v15 = MEMORY[0x1DF0E666C](v14);
      if (v15)
      {
        v16 = v15;
        swift_unknownObjectRelease();
        if (v16 == a1)
          return swift_bridgeObjectRelease();
      }
      v14 += 16;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
  }
  v46 = 0;
  swift_unknownObjectWeakInit();
  v46 = &protocol witness table for GraphCanvasElementView;
  v18 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakObserver(v18, (uint64_t)v47);
  swift_beginAccess();
  v19 = *(_QWORD **)v12;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v12 = v19;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_48:
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, (unint64_t)v19);
    *(_QWORD *)v12 = v19;
  }
  v21 = v40;
  v23 = v19[2];
  v22 = v19[3];
  if (v23 >= v22 >> 1)
  {
    v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v23 + 1, 1, (unint64_t)v19);
    *(_QWORD *)v12 = v19;
  }
  v19[2] = v23 + 1;
  outlined init with take of WeakObserver((uint64_t)v47, (uint64_t)&v19[2 * v23 + 4]);
  swift_endAccess();
  v19 = (_QWORD *)(a2 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document);
  result = MEMORY[0x1DF0E666C](a2 + OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document);
  v44 = result;
  if (result)
  {
    v43 = v19[1];
    a2 += OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_expressionUUIDs;
    swift_beginAccess();
    v24 = *(_QWORD *)a2;
    v25 = *(_QWORD *)(*(_QWORD *)a2 + 56);
    v41 = *(_QWORD *)a2 + 56;
    v26 = 1 << *(_BYTE *)(v24 + 32);
    v27 = -1;
    if (v26 < 64)
      v27 = ~(-1 << v26);
    v12 = v27 & v25;
    v42 = (unint64_t)(v26 + 63) >> 6;
    v45 = v24;
    result = swift_bridgeObjectRetain();
    v28 = 0;
    while (1)
    {
      if (v12)
      {
        v29 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v30 = v29 | (v28 << 6);
      }
      else
      {
        v31 = v28 + 1;
        if (__OFADD__(v28, 1))
        {
          __break(1u);
          goto LABEL_48;
        }
        if (v31 >= v42)
          goto LABEL_44;
        v32 = *(_QWORD *)(v41 + 8 * v31);
        ++v28;
        if (!v32)
        {
          v28 = v31 + 1;
          if (v31 + 1 >= v42)
            goto LABEL_44;
          v32 = *(_QWORD *)(v41 + 8 * v28);
          if (!v32)
          {
            v28 = v31 + 2;
            if (v31 + 2 >= v42)
              goto LABEL_44;
            v32 = *(_QWORD *)(v41 + 8 * v28);
            if (!v32)
            {
              v28 = v31 + 3;
              if (v31 + 3 >= v42)
                goto LABEL_44;
              v32 = *(_QWORD *)(v41 + 8 * v28);
              if (!v32)
              {
                v28 = v31 + 4;
                if (v31 + 4 >= v42)
                  goto LABEL_44;
                v32 = *(_QWORD *)(v41 + 8 * v28);
                if (!v32)
                {
                  v33 = v31 + 5;
                  if (v33 >= v42)
                  {
LABEL_44:
                    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v11, 1, 1, v4);
LABEL_45:
                    swift_unknownObjectRelease();
                    return swift_release();
                  }
                  v32 = *(_QWORD *)(v41 + 8 * v33);
                  if (!v32)
                  {
                    while (1)
                    {
                      v28 = v33 + 1;
                      if (__OFADD__(v33, 1))
                        break;
                      if (v28 >= v42)
                        goto LABEL_44;
                      v32 = *(_QWORD *)(v41 + 8 * v28);
                      ++v33;
                      if (v32)
                        goto LABEL_36;
                    }
                    __break(1u);
                    return result;
                  }
                  v28 = v33;
                }
              }
            }
          }
        }
LABEL_36:
        v12 = (v32 - 1) & v32;
        v30 = __clz(__rbit64(v32)) + (v28 << 6);
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v11, *(_QWORD *)(v45 + 48) + *(_QWORD *)(v5 + 72) * v30, v4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v11, 0, 1, v4);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4) == 1)
        goto LABEL_45;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v21, v11, v4);
      a2 = v44;
      ObjectType = swift_getObjectType();
      v35 = (*(uint64_t (**)(char *, uint64_t))(v43 + 48))(v21, ObjectType);
      if (v35)
      {
        a2 = v35;
        v36 = (void *)CalculateExpression.result.getter();
        v37 = v36;
        if (v36)
        {
          v38 = v36;
          if (objc_msgSend(v38, sel_isTrivial))
          {

          }
          else
          {
            v39 = objc_msgSend(v38, sel_formattedResult);
            static String._unconditionallyBridgeFromObjectiveC(_:)();

          }
          v21 = v40;
        }
        v19 = (_QWORD *)CalculateExpression.result.getter();
        objc_msgSend(v19, sel_unitType);

        swift_release();
        swift_bridgeObjectRelease();

      }
      result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v21, v4);
    }
  }
  return result;
}

char *specialized static CalculateDocumentController.controllerForDrawingUUID(_:document:observer:)(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  id v7;
  _QWORD *v8;
  id v9;
  unint64_t v10;
  char v11;
  void *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v43;
  unint64_t v44;
  id v45;
  char v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  _QWORD v53[2];
  uint64_t v54;
  _UNKNOWN **v55;

  v6 = one-time initialization token for controllers;
  v7 = a1;
  if (v6 != -1)
    swift_once();
  swift_beginAccess();
  v8 = static CalculateDocumentController.controllers;
  if (*((_QWORD *)static CalculateDocumentController.controllers + 2))
  {
    v9 = v7;
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
    if ((v11 & 1) != 0)
    {
      v12 = *(void **)(v8[7] + 8 * v10);
      swift_endAccess();
      v13 = v12;

      v14 = &v13[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document];
      if (MEMORY[0x1DF0E666C](&v13[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document]))
      {
        v15 = *((_QWORD *)v14 + 1);
        ObjectType = swift_getObjectType();
        v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(ObjectType, v15);
        swift_unknownObjectRelease();
      }
      else
      {
        v17 = 0;
      }
      v48 = swift_getObjectType();
      v49 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(v48, a3);
      v50 = v49;
      if (v17)
      {
        if (v49)
        {
          swift_unknownObjectRelease();
          swift_release();
          if (v17 != v50)
          {

            goto LABEL_9;
          }
LABEL_31:
          specialized CalculateDocumentController.addObserverIfNecessary(_:)(a4, (unint64_t)v13);
          goto LABEL_23;
        }

        swift_unknownObjectRelease();
      }
      else
      {
        if (!v49)
          goto LABEL_31;

      }
      swift_release();
      goto LABEL_9;
    }

  }
  swift_endAccess();
LABEL_9:
  if (one-time initialization token for mathLogger != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)mathLogger);
  v19 = v7;
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v51 = a3;
    v22 = (uint8_t *)swift_slowAlloc();
    v52 = v7;
    v23 = swift_slowAlloc();
    v54 = v23;
    *(_DWORD *)v22 = 136315138;
    v24 = objc_msgSend(v19, sel_uniqueCacheFilePath, v22 + 4);
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v27 = v26;

    v53[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1DDB0F000, v20, v21, "Creating CalculateController for: %s", v22, 0xCu);
    swift_arrayDestroy();
    v28 = v23;
    v7 = v52;
    MEMORY[0x1DF0E6558](v28, -1, -1);
    v29 = v22;
    a3 = v51;
    MEMORY[0x1DF0E6558](v29, -1, -1);

  }
  else
  {

  }
  v30 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CalculateDocumentController()), sel_init);
  v31 = &v30[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document];
  *(_QWORD *)&v30[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document + 8] = a3;
  v32 = swift_unknownObjectWeakAssign();
  if (MEMORY[0x1DF0E666C](v32))
  {
    v33 = *((_QWORD *)v31 + 1);
    v34 = swift_getObjectType();
    v35 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 8);
    swift_unknownObjectRetain();
    v36 = v35(v34, v33);
    v37 = swift_unknownObjectRelease();
    if (v36)
    {
      MEMORY[0x1E0C80A78](v37, v38);
      withObservationTracking<A>(_:onChange:)();
      swift_unknownObjectRelease();
      swift_release();
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  v55 = 0;
  swift_unknownObjectWeakInit();
  v55 = &protocol witness table for AnyCanvas;
  v39 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakObserver(v39, (uint64_t)v53);
  v40 = &v30[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_observers];
  swift_beginAccess();
  v41 = *(_QWORD **)v40;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v40 = v41;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v41[2] + 1, 1, (unint64_t)v41);
    *(_QWORD *)v40 = v41;
  }
  v44 = v41[2];
  v43 = v41[3];
  if (v44 >= v43 >> 1)
  {
    v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v43 > 1), v44 + 1, 1, (unint64_t)v41);
    *(_QWORD *)v40 = v41;
  }
  v41[2] = v44 + 1;
  outlined init with take of WeakObserver((uint64_t)v53, (uint64_t)&v41[2 * v44 + 4]);
  swift_endAccess();
  swift_beginAccess();
  v45 = v19;
  v13 = v30;
  v46 = swift_isUniquelyReferenced_nonNull_native();
  v53[0] = static CalculateDocumentController.controllers;
  static CalculateDocumentController.controllers = (_UNKNOWN *)0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, v45, v46);
  static CalculateDocumentController.controllers = (_UNKNOWN *)v53[0];

  swift_bridgeObjectRelease();
  swift_endAccess();
LABEL_23:
  specialized static CalculateDocumentController.cleanupStaleControllers()();

  return v13;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v22;
  int64_t v23;
  uint64_t ObjectType;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v29 = a2;
  v30 = a3;
  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = MEMORY[0x1E0DEE9D8];
  v13 = *(_QWORD *)(a1 + 56);
  v27 = a1 + 56;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v28 = (unint64_t)(v14 + 63) >> 6;
  v31 = a1;
  result = swift_bridgeObjectRetain();
  v18 = 0;
  while (1)
  {
    if (v16)
    {
      v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v20 = v19 | (v18 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v18++, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v18 >= v28)
      goto LABEL_29;
    v22 = *(_QWORD *)(v27 + 8 * v18);
    if (!v22)
      break;
LABEL_18:
    v16 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v18 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v12, *(_QWORD *)(v31 + 48) + *(_QWORD *)(v5 + 72) * v20, v4);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v12, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4) == 1)
    {
      swift_release();
      return v32;
    }
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v12, v4);
    ObjectType = swift_getObjectType();
    v25 = (*(uint64_t (**)(char *, uint64_t))(v30 + 48))(v8, ObjectType);
    result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    if (v25)
    {
      MEMORY[0x1DF0E4398](result);
      if (*(_QWORD *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      result = specialized Array._endMutation()();
    }
  }
  v23 = v18 + 1;
  if (v18 + 1 >= v28)
    goto LABEL_29;
  v22 = *(_QWORD *)(v27 + 8 * v23);
  if (v22)
    goto LABEL_17;
  v23 = v18 + 2;
  if (v18 + 2 >= v28)
    goto LABEL_29;
  v22 = *(_QWORD *)(v27 + 8 * v23);
  if (v22)
    goto LABEL_17;
  v23 = v18 + 3;
  if (v18 + 3 >= v28)
    goto LABEL_29;
  v22 = *(_QWORD *)(v27 + 8 * v23);
  if (v22)
    goto LABEL_17;
  v23 = v18 + 4;
  if (v18 + 4 >= v28)
  {
LABEL_29:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v12, 1, 1, v4);
    swift_release();
    return v32;
  }
  v22 = *(_QWORD *)(v27 + 8 * v23);
  if (v22)
  {
LABEL_17:
    v18 = v23;
    goto LABEL_18;
  }
  while (1)
  {
    v18 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v18 >= v28)
      goto LABEL_29;
    v22 = *(_QWORD *)(v27 + 8 * v18);
    ++v23;
    if (v22)
      goto LABEL_18;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  unint64_t v4;
  uint64_t v6;

  v6 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
  {
LABEL_16:
    v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2)
      goto LABEL_3;
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v2)
    {
LABEL_3:
      for (i = 0; ; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1DF0E4D64](i, a1);
          v4 = i + 1;
          if (__OFADD__(i, 1))
          {
LABEL_13:
            __break(1u);
            return v6;
          }
        }
        else
        {
          if (i >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_16;
          }
          swift_retain();
          v4 = i + 1;
          if (__OFADD__(i, 1))
            goto LABEL_13;
        }
        if ((CalculateExpression.isGraphable.getter() & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
          swift_release();
        }
        if (v4 == v2)
          return v6;
      }
    }
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1DDD7987C()
{
  return 24;
}

__n128 sub_1DDD79888(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #2 in GraphCanvasElementView.updateModelColor(for:identifier:)()
{
  uint64_t v0;

  return closure #2 in GraphCanvasElementView.updateModelColor(for:identifier:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD **)(v0 + 32));
}

uint64_t partial apply for closure #1 in closure #2 in GraphCanvasElementView.updateModelColor(for:identifier:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #2 in GraphCanvasElementView.updateModelColor(for:identifier:)(a1, *(void **)(v1 + 16));
}

uint64_t partial apply for closure #4 in GraphCanvasElementView.updateGraphableExpressionState(_:)()
{
  uint64_t v0;

  return closure #4 in GraphCanvasElementView.updateGraphableExpressionState(_:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD **)(v0 + 32));
}

uint64_t partial apply for closure #3 in GraphCanvasElementView.updateGraphableExpressionState(_:)()
{
  uint64_t v0;

  return closure #3 in GraphCanvasElementView.updateGraphableExpressionState(_:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD **)(v0 + 32));
}

uint64_t partial apply for closure #2 in GraphCanvasElementView.updateGraphableExpressionState(_:)()
{
  uint64_t v0;

  return closure #2 in GraphCanvasElementView.updateGraphableExpressionState(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD **)(v0 + 32));
}

uint64_t partial apply for closure #1 in closure #2 in GraphCanvasElementView.updateGraphableExpressionState(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #2 in GraphCanvasElementView.updateGraphableExpressionState(_:)(a1, *(void ***)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #3 in GraphCanvasElementView.updateGraphableExpressionState(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #3 in GraphCanvasElementView.updateGraphableExpressionState(_:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #4 in GraphCanvasElementView.updateGraphableExpressionState(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #4 in GraphCanvasElementView.updateGraphableExpressionState(_:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in GraphableExpressionState.expression.setter()
{
  uint64_t v0;

  return closure #1 in GraphableExpressionState.expression.setter(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

char *specialized static CalculateDocumentController.controllerForDrawingUUID(_:document:observer:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  id v7;
  _QWORD *v8;
  id v9;
  unint64_t v10;
  char v11;
  void *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v43;
  unint64_t v44;
  id v45;
  char v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  _QWORD v53[2];
  uint64_t v54;
  _UNKNOWN **v55;

  v6 = one-time initialization token for controllers;
  v7 = a1;
  if (v6 != -1)
    swift_once();
  swift_beginAccess();
  v8 = static CalculateDocumentController.controllers;
  if (*((_QWORD *)static CalculateDocumentController.controllers + 2))
  {
    v9 = v7;
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(v9);
    if ((v11 & 1) != 0)
    {
      v12 = *(void **)(v8[7] + 8 * v10);
      swift_endAccess();
      v13 = v12;

      v14 = &v13[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document];
      if (MEMORY[0x1DF0E666C](&v13[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document]))
      {
        v15 = *((_QWORD *)v14 + 1);
        ObjectType = swift_getObjectType();
        v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(ObjectType, v15);
        swift_unknownObjectRelease();
      }
      else
      {
        v17 = 0;
      }
      v48 = swift_getObjectType();
      v49 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(v48, a3);
      v50 = v49;
      if (v17)
      {
        if (v49)
        {
          swift_unknownObjectRelease();
          swift_release();
          if (v17 != v50)
          {

            goto LABEL_9;
          }
LABEL_31:
          specialized CalculateDocumentController.addObserverIfNecessary(_:)(a4, (uint64_t)v13);
          goto LABEL_23;
        }

        swift_unknownObjectRelease();
      }
      else
      {
        if (!v49)
          goto LABEL_31;

      }
      swift_release();
      goto LABEL_9;
    }

  }
  swift_endAccess();
LABEL_9:
  if (one-time initialization token for mathLogger != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)mathLogger);
  v19 = v7;
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v51 = a3;
    v22 = (uint8_t *)swift_slowAlloc();
    v52 = v7;
    v23 = swift_slowAlloc();
    v54 = v23;
    *(_DWORD *)v22 = 136315138;
    v24 = objc_msgSend(v19, sel_uniqueCacheFilePath, v22 + 4);
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v27 = v26;

    v53[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1DDB0F000, v20, v21, "Creating CalculateController for: %s", v22, 0xCu);
    swift_arrayDestroy();
    v28 = v23;
    v7 = v52;
    MEMORY[0x1DF0E6558](v28, -1, -1);
    v29 = v22;
    a3 = v51;
    MEMORY[0x1DF0E6558](v29, -1, -1);

  }
  else
  {

  }
  v30 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CalculateDocumentController()), sel_init);
  v31 = &v30[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document];
  *(_QWORD *)&v30[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_document + 8] = a3;
  v32 = swift_unknownObjectWeakAssign();
  if (MEMORY[0x1DF0E666C](v32))
  {
    v33 = *((_QWORD *)v31 + 1);
    v34 = swift_getObjectType();
    v35 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 8);
    swift_unknownObjectRetain();
    v36 = v35(v34, v33);
    v37 = swift_unknownObjectRelease();
    if (v36)
    {
      MEMORY[0x1E0C80A78](v37, v38);
      withObservationTracking<A>(_:onChange:)();
      swift_unknownObjectRelease();
      swift_release();
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  v55 = 0;
  swift_unknownObjectWeakInit();
  v55 = &protocol witness table for GraphCanvasElementView;
  v39 = swift_unknownObjectWeakAssign();
  outlined init with take of WeakObserver(v39, (uint64_t)v53);
  v40 = &v30[OBJC_IVAR____TtC8PaperKit27CalculateDocumentController_observers];
  swift_beginAccess();
  v41 = *(_QWORD **)v40;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v40 = v41;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v41[2] + 1, 1, (unint64_t)v41);
    *(_QWORD *)v40 = v41;
  }
  v44 = v41[2];
  v43 = v41[3];
  if (v44 >= v43 >> 1)
  {
    v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v43 > 1), v44 + 1, 1, (unint64_t)v41);
    *(_QWORD *)v40 = v41;
  }
  v41[2] = v44 + 1;
  outlined init with take of WeakObserver((uint64_t)v53, (uint64_t)&v41[2 * v44 + 4]);
  swift_endAccess();
  swift_beginAccess();
  v45 = v19;
  v13 = v30;
  v46 = swift_isUniquelyReferenced_nonNull_native();
  v53[0] = static CalculateDocumentController.controllers;
  static CalculateDocumentController.controllers = (_UNKNOWN *)0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, v45, v46);
  static CalculateDocumentController.controllers = (_UNKNOWN *)v53[0];

  swift_bridgeObjectRelease();
  swift_endAccess();
LABEL_23:
  specialized static CalculateDocumentController.cleanupStaleControllers()();

  return v13;
}

uint64_t partial apply for closure #1 in GraphCanvasElementView.updateVisibleRange(from:)()
{
  return closure #1 in GraphCanvasElementView.updateVisibleRange(from:)();
}

uint64_t partial apply for closure #1 in GraphCanvasElementView.observeGraphExpressionColor(_:identifier:)()
{
  dispatch thunk of CalculateGraphExpression.color.getter();
  return swift_release();
}

void (*partial apply for implicit closure #1 in GraphCanvasElementView.observeGraphExpressionColor(_:identifier:)())()
{
  uint64_t *v0;

  return implicit closure #1 in GraphCanvasElementView.observeGraphExpressionColor(_:identifier:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1DDD7A2F4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in GraphCanvasElementView.updateGraphView()()
{
  GraphCanvasElementView.cachedGraphableExpressionsState.getter();
  GraphableExpressionsState.updateColors()();
  return swift_release();
}

uint64_t sub_1DDD7A344()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1DDD7A368()
{
  return objectdestroy_26Tm((void (*)(_QWORD))MEMORY[0x1E0DEEB08]);
}

uint64_t partial apply for specialized closure #2 in GraphCanvasElementView.updateGraphView()()
{
  uint64_t v0;

  return specialized closure #2 in GraphCanvasElementView.updateGraphView()(*(_QWORD *)(v0 + 16));
}

uint64_t partial apply for closure #1 in GraphCanvasElementView.trackVisibleRange(for:)()
{
  dispatch thunk of CalculateGraph.xAxisBounds.getter();
  return dispatch thunk of CalculateGraph.yAxisBounds.getter();
}

void (*partial apply for implicit closure #1 in GraphCanvasElementView.trackVisibleRange(for:)())()
{
  return implicit closure #1 in GraphCanvasElementView.trackVisibleRange(for:)();
}

uint64_t partial apply for closure #1 in GraphCanvasElementView.trackDeletedExpressions(for:)()
{
  dispatch thunk of CalculateGraph.graphExpressions.getter();
  return swift_bridgeObjectRelease();
}

void (*partial apply for implicit closure #1 in GraphCanvasElementView.trackDeletedExpressions(for:)())()
{
  return implicit closure #1 in GraphCanvasElementView.trackDeletedExpressions(for:)();
}

void partial apply for closure #1 in GraphCanvasElementView.updateGraphView()()
{
  uint64_t v0;

  closure #1 in GraphCanvasElementView.updateGraphView()(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1DDD7A3C4()
{
  return objectdestroy_26Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

void partial apply for closure #2 in implicit closure #1 in GraphCanvasElementView.trackDeletedExpressions(for:)()
{
  uint64_t v0;

  closure #2 in implicit closure #1 in GraphCanvasElementView.trackVisibleRange(for:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (uint64_t)&unk_1EA84CAF8, (uint64_t)partial apply for closure #1 in closure #2 in implicit closure #1 in GraphCanvasElementView.trackDeletedExpressions(for:), (uint64_t)&block_descriptor_108);
}

uint64_t sub_1DDD7A400()
{
  return objectdestroy_26Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

void partial apply for closure #1 in closure #2 in implicit closure #1 in GraphCanvasElementView.trackDeletedExpressions(for:)()
{
  uint64_t v0;

  closure #1 in closure #2 in implicit closure #1 in GraphCanvasElementView.trackDeletedExpressions(for:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1DDD7A414()
{
  return objectdestroy_26Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

void partial apply for closure #2 in implicit closure #1 in GraphCanvasElementView.trackVisibleRange(for:)()
{
  uint64_t v0;

  closure #2 in implicit closure #1 in GraphCanvasElementView.trackVisibleRange(for:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (uint64_t)&unk_1EA84CB70, (uint64_t)partial apply for closure #1 in closure #2 in implicit closure #1 in GraphCanvasElementView.trackVisibleRange(for:), (uint64_t)&block_descriptor_123_0);
}

uint64_t sub_1DDD7A450()
{
  return objectdestroy_26Tm((void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

uint64_t objectdestroy_26Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_release();
  a1(*(_QWORD *)(v1 + 24));
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #2 in implicit closure #1 in GraphCanvasElementView.trackVisibleRange(for:)()
{
  uint64_t v0;

  closure #1 in closure #2 in implicit closure #1 in GraphCanvasElementView.trackVisibleRange(for:)(*(_QWORD *)(v0 + 16));
}

void partial apply for closure #2 in implicit closure #1 in GraphCanvasElementView.observeGraphExpressionColor(_:identifier:)()
{
  uint64_t *v0;

  closure #2 in implicit closure #1 in GraphCanvasElementView.observeGraphExpressionColor(_:identifier:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t objectdestroy_89Tm()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #2 in implicit closure #1 in GraphCanvasElementView.observeGraphExpressionColor(_:identifier:)()
{
  uint64_t v0;

  closure #1 in closure #2 in implicit closure #1 in GraphCanvasElementView.observeGraphExpressionColor(_:identifier:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(CGColor **)(v0 + 32), *(CGColor **)(v0 + 40));
}

uint64_t partial apply for closure #1 in GraphCanvasElementView.didUpdateExpression(_:identifier:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in GraphCanvasElementView.didUpdateExpression(_:identifier:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_BYTE **)(v1 + 48));
}

uint64_t closure #1 in GraphableExpressionsState.view.setterpartial apply()
{
  return _s8PaperKit25GraphableExpressionsStateC4viewAA22GraphCanvasElementViewCSgvsyyXEfU_TA_0();
}

uint64_t closure #1 in GraphableExpressionState.color.setterpartial apply()
{
  return partial apply for closure #1 in GraphableExpressionState.color.setter();
}

uint64_t closure #1 in GraphableExpressionState.shouldBeObserved.setterpartial apply()
{
  return partial apply for closure #1 in GraphableExpressionState.shouldBeObserved.setter();
}

uint64_t closure #1 in GraphableExpressionState.enabled.setterpartial apply()
{
  return partial apply for closure #1 in GraphableExpressionState.enabled.setter();
}

uint64_t closure #1 in GraphElement.graphables<A>(in:)specialized partial apply()
{
  return partial apply for specialized closure #1 in GraphElement.graphables<A>(in:)();
}

uint64_t specialized CanvasElementView.modelFrame.setter(double a1, double a2, double a3, double a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void (*v20)(_BYTE *, _BYTE *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[16];
  double v25;
  double v26;
  double v27;
  double v28;
  _BYTE v29[24];

  v5 = v4;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<TextBox>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = &v24[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25 = a1;
  v26 = a2;
  v27 = a3;
  v28 = a4;
  v15 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v16 = (char *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  v17 = swift_endAccess();
  v18 = (*(uint64_t (**)(uint64_t))((*v15 & *v4) + 0x88))(v17);
  if (v18)
  {
    v19 = (_QWORD *)v18;
    (*(void (**)(_BYTE *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
    v29[0] = 4;
    v20 = *(void (**)(_BYTE *, _BYTE *, uint64_t, uint64_t))((*v15 & *v19) + 0x538);
    v21 = type metadata accessor for TextBox();
    v22 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
    v20(v14, v29, v21, v22);
    v29[0] = 4;
    (*(void (**)(_BYTE *))((*v15 & *v19) + 0x518))(v29);

    v18 = (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v14, v10);
  }
  return (*(uint64_t (**)(uint64_t))((*v15 & *v5) + 0x288))(v18);
}

{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void (*v20)(_BYTE *, _BYTE *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[16];
  double v25;
  double v26;
  double v27;
  double v28;
  _BYTE v29[24];

  v5 = v4;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = &v24[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25 = a1;
  v26 = a2;
  v27 = a3;
  v28 = a4;
  v15 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v16 = (char *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  v17 = swift_endAccess();
  v18 = (*(uint64_t (**)(uint64_t))((*v15 & *v4) + 0x88))(v17);
  if (v18)
  {
    v19 = (_QWORD *)v18;
    (*(void (**)(_BYTE *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
    v29[0] = 4;
    v20 = *(void (**)(_BYTE *, _BYTE *, uint64_t, uint64_t))((*v15 & *v19) + 0x538);
    v21 = type metadata accessor for Shape();
    v22 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
    v20(v14, v29, v21, v22);
    v29[0] = 4;
    (*(void (**)(_BYTE *))((*v15 & *v19) + 0x518))(v29);

    v18 = (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v14, v10);
  }
  return (*(uint64_t (**)(uint64_t))((*v15 & *v5) + 0x288))(v18);
}

{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void (*v20)(_BYTE *, _BYTE *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[16];
  double v25;
  double v26;
  double v27;
  double v28;
  _BYTE v29[24];

  v5 = v4;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = &v24[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25 = a1;
  v26 = a2;
  v27 = a3;
  v28 = a4;
  v15 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v16 = (char *)v4 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x380);
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  v17 = swift_endAccess();
  v18 = (*(uint64_t (**)(uint64_t))((*v15 & *v4) + 0x88))(v17);
  if (v18)
  {
    v19 = (_QWORD *)v18;
    (*(void (**)(_BYTE *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
    v29[0] = 4;
    v20 = *(void (**)(_BYTE *, _BYTE *, uint64_t, uint64_t))((*v15 & *v19) + 0x538);
    v21 = type metadata accessor for Link();
    v22 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
    v20(v14, v29, v21, v22);
    v29[0] = 4;
    (*(void (**)(_BYTE *))((*v15 & *v19) + 0x518))(v29);

    v18 = (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v14, v10);
  }
  return (*(uint64_t (**)(uint64_t))((*v15 & *v5) + 0x288))(v18);
}

char *LinkCanvasElementView.linkView.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void *v14;
  id v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = direct field offset for LinkCanvasElementView.$__lazy_storage_$_linkView;
  v8 = *(void **)((char *)v1 + direct field offset for LinkCanvasElementView.$__lazy_storage_$_linkView);
  if (v8)
  {
    v9 = *(char **)((char *)v1 + direct field offset for LinkCanvasElementView.$__lazy_storage_$_linkView);
  }
  else
  {
    v10 = (char *)v1 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x380);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v10, v2);
    swift_getKeyPath();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v11 = v18;
    v12 = v19;
    v13 = specialized static LinkCanvasElementView.makeLinkView(synapseData:canvas:)(v18, v19, v1);
    outlined consume of Data?(v11, v12);
    v14 = *(void **)((char *)v1 + v7);
    *(_QWORD *)((char *)v1 + v7) = v13;
    v9 = v13;

    v8 = 0;
  }
  v15 = v8;
  return v9;
}

_QWORD *LinkCanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)(uint64_t a1, void *a2, void *a3, double a4, double a5, double a6, double a7)
{
  uint64_t v7;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  char *v23;
  id v24;
  id v25;
  _QWORD *v26;
  char *v27;
  char *v28;
  id v29;
  id v30;
  uint64_t v32;

  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit();
  *(_QWORD *)(v7 + direct field offset for LinkCanvasElementView.$__lazy_storage_$_linkView) = 0;
  *(_BYTE *)(v7 + direct field offset for LinkCanvasElementView.editingEnabled) = 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, a1, v15);
  v20 = specialized CanvasElementView.init(frame:canvasElement:canvas:parentCanvasElement:)((uint64_t)v19, a2, a3, a4, a5, a6, a7);
  v21 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000025, 0x80000001DDF574B0);
  objc_msgSend(v20, sel_setAccessibilityIdentifier_, v21);

  v22 = v20;
  v23 = LinkCanvasElementView.linkView.getter();
  v24 = objc_msgSend(v23, sel_accessibilityLabel);

  objc_msgSend(v22, sel_setAccessibilityLabel_, v24);
  v25 = objc_msgSend(v22, sel_layer);
  if (one-time initialization token for resizeCornerRadius != -1)
    swift_once();
  objc_msgSend(v25, sel_setCornerRadius_, *(double *)&static UIConstants.resizeCornerRadius);

  v26 = v22;
  v27 = LinkCanvasElementView.linkView.getter();
  objc_msgSend(v26, sel_addSubview_, v27);

  v28 = LinkCanvasElementView.linkView.getter();
  *(_QWORD *)&v28[OBJC_IVAR____TtC8PaperKit8LinkView_delegate + 8] = &protocol witness table for LinkCanvasElementView;
  swift_unknownObjectWeakAssign();

  v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D80]), sel_initWithTarget_action_, v26, sel_didTapToOpenLink_);
  swift_unknownObjectWeakAssign();
  objc_msgSend(v26, sel_addGestureRecognizer_, v29);
  v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC39C8]), sel_initWithTarget_action_, v26, sel_didLongPressToSelect_);
  objc_msgSend(v26, sel_addGestureRecognizer_, v30);

  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a1, v15);
  return v26;
}

void @objc LinkCanvasElementView.init(coder:)(_BYTE *a1, uint64_t a2, void *a3)
{
  id v5;

  swift_unknownObjectWeakInit();
  *(_QWORD *)&a1[direct field offset for LinkCanvasElementView.$__lazy_storage_$_linkView] = 0;
  a1[direct field offset for LinkCanvasElementView.editingEnabled] = 1;
  v5 = a3;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall LinkCanvasElementView.layoutSubviews()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  objc_class *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  CGFloat v11;
  CGAffineTransform v12;
  objc_super v13;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (objc_class *)type metadata accessor for LinkCanvasElementView();
  v13.receiver = v0;
  v13.super_class = v6;
  objc_msgSendSuper2(&v13, sel_layoutSubviews);
  v7 = LinkCanvasElementView.linkView.getter();
  v12.a = 1.0;
  v12.b = 0.0;
  v12.c = 0.0;
  v12.d = 1.0;
  v12.tx = 0.0;
  v12.ty = 0.0;
  objc_msgSend(v7, sel_setTransform_, &v12);

  v8 = LinkCanvasElementView.linkView.getter();
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v8, sel_setFrame_);

  v9 = LinkCanvasElementView.linkView.getter();
  v10 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v10, v1);
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  CGAffineTransformMakeRotation(&v12, v11);
  objc_msgSend(v9, sel_setTransform_, &v12);

}

void @objc LinkCanvasElementView.layoutSubviews()(void *a1)
{
  id v1;

  v1 = a1;
  LinkCanvasElementView.layoutSubviews()();

}

id @objc LinkCanvasElementView.gestureRecognizerShouldBegin(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  objc_super v5;

  v5.receiver = a1;
  v5.super_class = (Class)type metadata accessor for LinkCanvasElementView();
  return objc_msgSendSuper2(&v5, sel_gestureRecognizerShouldBegin_, a3);
}

uint64_t LinkCanvasElementView.modifiableProperties.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[4];
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (char *)v0 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x380);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v6, v1);
  v9[0] = type metadata accessor for Link();
  v9[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  v9[2] = &protocol witness table for Link;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  v7 = 9;
  if ((v10 & 0x10) != 0)
    v7 = 1;
  if ((v10 & 4) != 0)
    return 0;
  else
    return v7;
}

void LinkCanvasElementView.isSelected.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;

  v2 = OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isSelected;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isSelected) = a1;
  specialized CanvasElementView.isSelected.didset();
  v3 = LinkCanvasElementView.linkView.getter();
  (*(void (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v3) + 0x98))(*(unsigned __int8 *)(v1 + v2));

}

void LinkCanvasElementView.didTapToOpenLink(_:)(void *a1)
{
  uint64_t v1;
  id v3;
  char *v4;

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_isDragging) & 1) == 0
    && objc_msgSend(a1, sel_state) == (id)3)
  {
    if ((objc_msgSend(a1, sel_modifierFlags) & 0x20000) != 0
      || (objc_msgSend(a1, sel_modifierFlags) & 0x100000) != 0)
    {
      v4 = (char *)MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas);
      if (!v4)
        return;
      v3 = objc_msgSend(a1, sel_modifierFlags);
      (*(void (**)(uint64_t, id, _QWORD))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v4) + 0x4D0))(v1, v3, 0);
    }
    else
    {
      v4 = LinkCanvasElementView.linkView.getter();
      (*(void (**)(void *))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v4) + 0x88))(a1);
    }

  }
}

void @objc LinkCanvasElementView.didTapToOpenLink(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  LinkCanvasElementView.didTapToOpenLink(_:)(v4);

}

void @objc LinkCanvasElementView.didLongPressToSelect(_:)(void *a1, uint64_t a2, void *a3)
{
  char *v4;
  uint64_t v5;
  char *v6;
  id v7;
  char *v8;

  v4 = a3;
  v8 = a1;
  if (objc_msgSend(v4, sel_state) == (id)1)
  {
    v5 = MEMORY[0x1DF0E666C](&v8[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas]);
    if (v5)
    {
      v6 = (char *)v5;
      v7 = objc_msgSend(v4, sel_modifierFlags);
      (*(void (**)(char *, id, _QWORD))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v6) + 0x4D0))(v8, v7, 0);

      v4 = v8;
      v8 = v6;
    }
  }

}

Swift::OpaquePointer_optional __swiftcall LinkCanvasElementView.pasteboardRepresentation()()
{
  char *v0;
  uint64_t v1;
  Swift::Bool v2;
  void *v3;
  Swift::OpaquePointer_optional result;

  v0 = LinkCanvasElementView.linkView.getter();
  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v0) + 0x80))();

  v3 = (void *)v1;
  result.value._rawValue = v3;
  result.is_nil = v2;
  return result;
}

id @objc LinkCanvasElementView.contextMenuInteraction(_:configurationForMenuAtLocation:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v8;
  id v9;
  char *v10;
  id v11;

  v8 = a5;
  v9 = a1;
  v10 = LinkCanvasElementView.linkView.getter();
  v11 = objc_msgSend(v10, sel_contextMenuInteraction_configurationForMenuAtLocation_, v8, a2, a3);

  return v11;
}

void @objc LinkCanvasElementView.contextMenuInteraction(_:willDisplayMenuFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  id v8;
  id v9;
  id v10;
  char *v11;
  objc_super v12;

  v12.receiver = a1;
  v12.super_class = (Class)type metadata accessor for LinkCanvasElementView();
  v8 = a3;
  v9 = a4;
  swift_unknownObjectRetain();
  v10 = v12.receiver;
  objc_msgSendSuper2(&v12, sel_contextMenuInteraction_willDisplayMenuForConfiguration_animator_, v8, v9, a5);
  v11 = LinkCanvasElementView.linkView.getter();
  objc_msgSend(v11, sel_contextMenuInteraction_willDisplayMenuForConfiguration_animator_, v8, v9, a5, v12.receiver, v12.super_class);

  swift_unknownObjectRelease();
}

void LinkCanvasElementView.__ivar_destroyer()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy();

}

id LinkCanvasElementView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LinkCanvasElementView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void @objc LinkCanvasElementView.__ivar_destroyer(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();

}

uint64_t type metadata accessor for LinkCanvasElementView()
{
  uint64_t result;

  result = type metadata singleton initialization cache for LinkCanvasElementView;
  if (!type metadata singleton initialization cache for LinkCanvasElementView)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for LinkCanvasElementView()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for LinkCanvasElementView()
{
  return type metadata accessor for LinkCanvasElementView();
}

uint64_t specialized closure #1 in CanvasElementView.modelFrame.setter(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  a2(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(a3, a2, a4);
  swift_getKeyPath();
  return Capsule.Ref<>.subscript.setter();
}

id specialized CanvasElementView.isSelected.didset()
{
  _QWORD *v0;
  char v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x228))();
  v2 = *MEMORY[0x1E0DC46B0];
  v3 = (unint64_t)objc_msgSend(v0, sel_accessibilityTraits);
  v4 = -1;
  if ((v3 & v2) != 0)
    v4 = ~v2;
  v5 = v4 & v3;
  if ((v3 & v2) == v2)
    v6 = 0;
  else
    v6 = v2;
  v7 = v6 | v3;
  if ((v1 & 1) != 0)
    v8 = v7;
  else
    v8 = v5;
  return objc_msgSend(v0, sel_setAccessibilityTraits_, v8);
}

char *specialized static LinkCanvasElementView.makeLinkView(synapseData:canvas:)(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  id v11;
  id v12;
  char *v13;

  if (a2 >> 60 == 15)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)logger);
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_1DDB0F000, v4, v5, "Synapse data is empty", v6, 2u);
      MEMORY[0x1DF0E6558](v6, -1, -1);
    }

    return (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for EmptyLinkView()), sel_init);
  }
  else
  {
    v11 = objc_allocWithZone(MEMORY[0x1E0DB0700]);
    outlined copy of Data._Representation(a1, a2);
    v12 = specialized @nonobjc PKDrawingConcrete.init(data:)();
    objc_allocWithZone((Class)type metadata accessor for SynapseLinkView());
    v13 = SynapseLinkView.init(canvas:synapseItem:)(a3, v12);
    outlined consume of Data?(a1, a2);
    return v13;
  }
}

uint64_t specialized LinkCanvasElementView.linkViewContextMenuActions(_:)()
{
  char *v0;
  uint64_t v1;
  void *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  Swift::String v14;
  Swift::String_optional v15;
  Swift::String v16;
  void *v17;
  id v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  Class isa;
  Swift::String v30;
  Swift::String_optional v31;
  Swift::String v32;
  void *v33;
  id v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  Class v45;
  Swift::String v46;
  Swift::String_optional v47;
  Swift::String v48;
  void *v49;
  id v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  Class v61;
  id v62;
  Swift::String v63;
  Swift::String_optional v64;
  Swift::String v65;
  void *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  id v71;
  id v72;
  id v73;
  uint64_t v74;
  Swift::String v75;
  Swift::String v76;
  Swift::String v77;
  Swift::String v78;

  v1 = MEMORY[0x1DF0E666C](&v0[OBJC_IVAR____TtC8PaperKit20AnyCanvasElementView_canvas]);
  if (!v1)
    return 0;
  v2 = (void *)v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v74 = swift_allocObject();
  *(_OWORD *)(v74 + 16) = xmmword_1DDF329D0;
  v3 = v0;
  v4 = specialized CanvasMembers.init(_:)(v3);
  v6 = v5;
  v8 = v7;
  v10 = v9;

  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v2;
  *(_QWORD *)(v11 + 24) = v4;
  *(_QWORD *)(v11 + 32) = v6;
  *(_QWORD *)(v11 + 40) = v8;
  *(_BYTE *)(v11 + 48) = v10 & 1;
  v12 = one-time initialization token for paperKitBundle;
  v13 = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12 != -1)
    swift_once();
  v75._countAndFlagsBits = 0xD00000000000001DLL;
  v75._object = (void *)0x80000001DDF57360;
  v14._countAndFlagsBits = 7632195;
  v14._object = (void *)0xE300000000000000;
  v15.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v15.value._object = (void *)0xEB00000000656C62;
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v14, v15, paperKitBundle, v16, v75);
  type metadata accessor for UIAction();
  v17 = (void *)MEMORY[0x1DF0E41AC](0x73726F7373696373, 0xE800000000000000);
  v73 = (id)objc_opt_self();
  v18 = objc_msgSend(v73, sel_systemImageNamed_, v17);

  MEMORY[0x1DF0E41AC](0xD000000000000012, 0x80000001DDF57380);
  v19 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v74 + 32) = v19;
  v20 = v3;
  v21 = specialized CanvasMembers.init(_:)(v20);
  v23 = v22;
  v25 = v24;
  v27 = v26;

  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = v13;
  *(_QWORD *)(v28 + 24) = v21;
  *(_QWORD *)(v28 + 32) = v23;
  *(_QWORD *)(v28 + 40) = v25;
  *(_BYTE *)(v28 + 48) = v27 & 1;
  isa = paperKitBundle.super.isa;
  v71 = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v76._countAndFlagsBits = 0xD00000000000001ELL;
  v76._object = (void *)0x80000001DDF573A0;
  v30._countAndFlagsBits = 2037411651;
  v30._object = (void *)0xE400000000000000;
  v31.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v31.value._object = (void *)0xEB00000000656C62;
  v32._countAndFlagsBits = 0;
  v32._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v30, v31, (NSBundle)isa, v32, v76);
  v33 = (void *)MEMORY[0x1DF0E41AC](0x642E6E6F2E636F64, 0xEA0000000000636FLL);
  v34 = objc_msgSend(v73, sel_systemImageNamed_, v33);

  MEMORY[0x1DF0E41AC](0xD000000000000013, 0x80000001DDF573C0);
  v35 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v74 + 40) = v35;
  v36 = v20;
  v37 = specialized CanvasMembers.init(_:)(v36);
  v39 = v38;
  v41 = v40;
  v43 = v42;

  v44 = swift_allocObject();
  *(_QWORD *)(v44 + 16) = v71;
  *(_QWORD *)(v44 + 24) = v37;
  *(_QWORD *)(v44 + 32) = v39;
  *(_QWORD *)(v44 + 40) = v41;
  *(_BYTE *)(v44 + 48) = v43 & 1;
  v45 = paperKitBundle.super.isa;
  v72 = v71;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v77._countAndFlagsBits = 0xD000000000000023;
  v77._object = (void *)0x80000001DDF573E0;
  v46._countAndFlagsBits = 0x746163696C707544;
  v46._object = (void *)0xE900000000000065;
  v47.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v47.value._object = (void *)0xEB00000000656C62;
  v48._countAndFlagsBits = 0;
  v48._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v46, v47, (NSBundle)v45, v48, v77);
  v49 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000015, 0x80000001DDF4DD80);
  v50 = objc_msgSend(v73, sel_systemImageNamed_, v49);

  MEMORY[0x1DF0E41AC](0xD000000000000018, 0x80000001DDF57410);
  v51 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v74 + 48) = v51;
  v52 = v36;
  v53 = specialized CanvasMembers.init(_:)(v52);
  v55 = v54;
  v57 = v56;
  v59 = v58;

  v60 = swift_allocObject();
  *(_QWORD *)(v60 + 16) = v72;
  *(_QWORD *)(v60 + 24) = v53;
  *(_QWORD *)(v60 + 32) = v55;
  *(_QWORD *)(v60 + 40) = v57;
  *(_BYTE *)(v60 + 48) = v59 & 1;
  v61 = paperKitBundle.super.isa;
  v62 = v72;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v78._countAndFlagsBits = 0xD000000000000020;
  v78._object = (void *)0x80000001DDF57430;
  v63._countAndFlagsBits = 0x6574656C6544;
  v63._object = (void *)0xE600000000000000;
  v64.value._countAndFlagsBits = 0x617A696C61636F4CLL;
  v64.value._object = (void *)0xEB00000000656C62;
  v65._countAndFlagsBits = 0;
  v65._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v63, v64, (NSBundle)v61, v65, v78);
  v66 = (void *)MEMORY[0x1DF0E41AC](0x6873617274, 0xE500000000000000);
  v67 = objc_msgSend(v73, sel_systemImageNamed_, v66);

  MEMORY[0x1DF0E41AC](0xD000000000000015, 0x80000001DDF57460);
  v68 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v74 + 56) = v68;
  specialized Array._endMutation()();
  v69 = v74;

  return v69;
}

uint64_t specialized LinkCanvasElementView.linkView(_:needsResizeToFittingSize:)(double a1, double a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t);
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[7];

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Link>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (char *)v3 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v3) + 0x380);
  swift_beginAccess();
  v12 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v12(v10, v11, v6);
  v13 = type metadata accessor for Link();
  v19[0] = v13;
  v14 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  v19[1] = v14;
  v19[2] = &protocol witness table for Link;
  swift_getKeyPath();
  Capsule<>.subscript.getter();
  swift_release();
  v15 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  result = v15(v10, v6);
  if (vabdd_f64(a1, *(double *)&v19[5]) >= 0.1 || vabdd_f64(a2, *(double *)&v19[6]) >= 0.1)
  {
    v17 = ((uint64_t (*)(char *, char *, uint64_t))v12)(v10, v11, v6);
    MEMORY[0x1E0C80A78](v17, v18);
    v19[-4] = v13;
    v19[-3] = v14;
    v19[-2] = &protocol witness table for Link;
    swift_getKeyPath();
    Capsule<>.subscript.getter();
    swift_release();
    v15(v10, v6);
    return specialized CanvasElementView.modelFrame.setter(*(double *)&v19[3], *(double *)&v19[4], a1, a2);
  }
  return result;
}

void sub_1DDD7C98C(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(double *)a3 = (*(double (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + a1 - 8) + 8) + 8))(*(_QWORD *)(a2 + a1 - 24));
  *(_QWORD *)(a3 + 8) = v4;
  *(_QWORD *)(a3 + 16) = v5;
  *(_QWORD *)(a3 + 24) = v6;
}

uint64_t sub_1DDD7C9D0(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, double, double, double, double))(*(_QWORD *)(a4 + a3 - 8) + 16))(*(_QWORD *)(a4 + a3 - 24), *(_QWORD *)(a4 + a3 - 8), *a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1DDD7CA10()
{
  return 24;
}

__n128 sub_1DDD7CA1C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for specialized closure #1 in CanvasElementView.modelFrame.setter(uint64_t a1)
{
  return specialized closure #1 in CanvasElementView.modelFrame.setter(a1, (uint64_t (*)(uint64_t))type metadata accessor for Link, &lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t)&protocol conformance descriptor for Link);
}

{
  return specialized closure #1 in CanvasElementView.modelFrame.setter(a1, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t)&protocol conformance descriptor for Shape);
}

{
  return specialized closure #1 in CanvasElementView.modelFrame.setter(a1, (uint64_t (*)(uint64_t))type metadata accessor for TextBox, &lazy protocol witness table cache variable for type TextBox and conformance TextBox, (uint64_t)&protocol conformance descriptor for TextBox);
}

uint64_t partial apply for closure #1 in AnyCanvas.cutAction(_:)(uint64_t a1)
{
  return partial apply for closure #1 in AnyCanvas.cutAction(_:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in AnyCanvas.cutAction(_:));
}

unint64_t type metadata accessor for UIAction()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIAction;
  if (!lazy cache variable for type metadata for UIAction)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIAction);
  }
  return result;
}

uint64_t partial apply for closure #1 in AnyCanvas.copyAction(_:)(uint64_t a1)
{
  return partial apply for closure #1 in AnyCanvas.cutAction(_:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in AnyCanvas.copyAction(_:));
}

uint64_t partial apply for closure #1 in AnyCanvas.duplicateAction(_:)(uint64_t a1)
{
  return partial apply for closure #1 in AnyCanvas.cutAction(_:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in AnyCanvas.duplicateAction(_:));
}

uint64_t objectdestroyTm_6()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AnyCanvas.deleteAction(_:)(uint64_t a1)
{
  return partial apply for closure #1 in AnyCanvas.cutAction(_:)(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))closure #1 in AnyCanvas.deleteAction(_:));
}

uint64_t partial apply for closure #1 in AnyCanvas.cutAction(_:)(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(unsigned __int8 *)(v2 + 48));
}

uint64_t sub_1DDD7CB38()
{
  return 24;
}

__n128 sub_1DDD7CB44(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t type metadata completion function for TiledSelectionInteractionDelegate()
{
  return swift_initClassMetadata2();
}

uint64_t thunk for @escaping @callee_unowned @convention(block) () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_9Coherence7WeakRefVyAJ10CRRegisterVyAJ14SharedTagged_2Vy05PaperE00L6StrokeVGGGs5NeverOTg503_s8m79Kit13CanvasMembersV7strokes19strokeSelectionTypeACx_So011PKSelectionH0VtcSTRz06d3B08f2V7b18Rtzlufc9Coherence7hi6VyAM10j6VyAM14kl9_2VyAA0R6N11VGGGAJXEfU_Tf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  uint64_t result;
  Class isa;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;

  v2 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v2, v3);
  v32 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v5 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v6);
  v33 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PKStroke?);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v28[0] = (char *)v28 - v14;
  v15 = type metadata accessor for PKStroke();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(a1 + 16);
  v34 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
  v28[1] = a1;
  if (v17)
  {
    v18 = a1 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    v29 = *(_QWORD *)(v16 + 72);
    v30 = v19;
    swift_bridgeObjectRetain();
    while (1)
    {
      v30(v11, v18, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v11, 0, 1, v15);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v11, 1, v15);
      if ((_DWORD)result == 1)
        break;
      isa = PKStroke._bridgeToObjectiveC()().super.isa;
      v22 = -[objc_class _strokeUUID](isa, sel__strokeUUID);

      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
      lazy protocol witness table accessor for type CRRegister<SharedTagged_2<TaggedStroke>> and conformance CRRegister<A>();
      WeakRef.init(id:)();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v15);
      v23 = v34;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v23 + 16) + 1, 1);
        v23 = v34;
      }
      v25 = *(_QWORD *)(v23 + 16);
      v24 = *(_QWORD *)(v23 + 24);
      if (v25 >= v24 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
        v23 = v34;
      }
      *(_QWORD *)(v23 + 16) = v25 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v23+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v25, v33, v31);
      v18 += v29;
      if (!--v17)
        goto LABEL_11;
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_11:
    v26 = v28[0];
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v16 + 56))(v28[0], 1, 1, v15);
    swift_bridgeObjectRelease();
    v27 = v34;
    outlined destroy of StocksKitCurrencyCache.Provider?(v26, (uint64_t *)&demangling cache variable for type metadata for PKStroke?);
    return v27;
  }
  return result;
}

void thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray?) -> ()(uint64_t a1, uint64_t a2)
{
  NSArray v3;
  Class isa;

  if (a1)
    v3.super.isa = Array._bridgeToObjectiveC()().super.isa;
  else
    v3.super.isa = 0;
  isa = v3.super.isa;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

void TiledSelectionInteractionDelegate.tiledView.getter()
{
  JUMPOUT(0x1DF0E666CLL);
}

id TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(void *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  id v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  char *v14;
  id v15;
  objc_super v17;

  v2 = *v1;
  v3 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v4 = *MEMORY[0x1E0DEEDD8];
  if (a1)
  {
    v5 = objc_msgSend(a1, sel_attachmentContainerView);
    if (v5)
    {
      v6 = v5;
      type metadata accessor for AnyCanvas();
      v7 = (_QWORD *)swift_dynamicCastClass();
      if (v7)
      {
        v8 = v7;
        v9 = (void *)(*(uint64_t (**)(void))((*v3 & *v7) + 0x2F8))();
        v11 = v10;
        goto LABEL_9;
      }

    }
  }
  v8 = (void *)MEMORY[0x1DF0E666C]((char *)v1 + direct field offset for TiledSelectionInteractionDelegate.tiledView);
  if (v8)
  {
    v9 = (void *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)((v4 & v2) + 0x58) + 8))(*(_QWORD *)((v4 & v2) + 0x50));
    v11 = v12;

    v8 = 0;
  }
  else
  {
    v9 = 0;
    v11 = 0;
  }
LABEL_9:
  v13 = (objc_class *)type metadata accessor for CanvasViewSelectionInteractionDelegate();
  v14 = (char *)objc_allocWithZone(v13);
  *(_QWORD *)&v14[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView + 8] = 0;
  *(_QWORD *)(swift_unknownObjectWeakInit() + 8) = v11;
  swift_unknownObjectWeakAssign();
  v17.receiver = v14;
  v17.super_class = v13;
  v15 = objc_msgSendSuper2(&v17, sel_init);

  return v15;
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:handleLassoSelection:strokes:inAttachment:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;

  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = a3;
  v12 = a4;
  v13 = a6;
  v14 = a1;
  LOBYTE(a4) = specialized TiledSelectionInteractionDelegate.selectionInteraction(_:handleLassoSelection:strokes:inAttachment:)(a4, v10, v13);

  swift_bridgeObjectRelease();
  return a4 & 1;
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:handleDeleteForTextStrokes:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  void *v8;
  id v9;
  id v10;
  id v11;
  Swift::OpaquePointer v12;

  type metadata accessor for PKStroke();
  v8 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = a3;
  v10 = a5;
  v11 = a1;
  v12._rawValue = v8;
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:handleDeleteForTextStrokes:inAttachment:)(v12, v10);

  return swift_bridgeObjectRelease();
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:replace:with:in:in:)(void *a1, double a2, double a3, double a4, double a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;

  type metadata accessor for PKStroke();
  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v20 = v19;
  v21 = a7;
  v22 = a10;
  v23 = a1;
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:replace:with:in:in:)(v17, v18, v20, v22, a2, a3, a4, a5);

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:handleGenerationToolForSelectedStrokes:inBounds:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  id v9;
  id v10;
  id v11;

  type metadata accessor for PKStroke();
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = a3;
  v10 = a5;
  v11 = a1;
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:handleGenerationToolForSelectedStrokes:inBounds:inAttachment:)(v8, v10);

  return swift_bridgeObjectRelease();
}

uint64_t TiledSelectionInteractionDelegate.selectionInteractionShouldBegin(_:at:for:orGestureRecognizer:)(void *a1, __objc2_prot_list **p_base_prots, char **a3, double a4, double a5)
{
  uint64_t *v5;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  double v34;
  double v35;
  double v36;
  double v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(void *, uint64_t, _QWORD *, uint64_t);
  id v45;
  double v46;
  double v47;
  double v48;
  double v49;
  char *v50;
  id v51;
  char v52;
  _QWORD *v54;
  uint64_t v55;
  void *v56;
  unint64_t v57;
  unint64_t v58;
  objc_super v59;
  CGPoint v60;
  CGRect v61;

  v10 = (unint64_t)a1;
  v11 = *v5;
  v12 = *MEMORY[0x1E0DEEDD8];
  v13 = objc_msgSend(a1, sel_view);
  if (v13)
  {
    v14 = v13;
    v15 = MEMORY[0x1DF0E666C]((char *)v5 + direct field offset for TiledSelectionInteractionDelegate.tiledView);
    if (v15)
    {
      v16 = (void *)v15;
      v18 = *(_QWORD **)((v12 & v11) + 0x50);
      v17 = *(_QWORD *)((v12 & v11) + 0x58);
      v19 = (*(uint64_t (**)(_QWORD *, uint64_t))(v17 + 32))(v18, v17);
      v20 = v19;
      if (v19 >> 62)
        goto LABEL_19;
      v21 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      for (; v21; v21 = _CocoaArrayWrapper.endIndex.getter())
      {
        v54 = v18;
        v55 = v17;
        v56 = (void *)v10;
        v57 = (unint64_t)p_base_prots;
        v58 = (unint64_t)a3;
        v10 = v20 & 0xC000000000000001;
        v17 = 4;
        p_base_prots = &MiniMenuController.base_prots;
        a3 = &selRef_selectionInteraction_didEndInsertSpaceInAttachment_;
        while (1)
        {
          v22 = v10 ? (_QWORD *)MEMORY[0x1DF0E4D64](v17 - 4, v20) : *(id *)(v20 + 8 * v17);
          v18 = v22;
          v23 = v17 - 3;
          if (__OFADD__(v17 - 4, 1))
            break;
          objc_msgSend(v22, sel_bounds);
          v25 = v24;
          v27 = v26;
          v29 = v28;
          v31 = v30;
          objc_msgSend(v18, sel_convertPoint_fromCoordinateSpace_, v14, a4, a5);
          v60.x = v32;
          v60.y = v33;
          v61.origin.x = v25;
          v61.origin.y = v27;
          v61.size.width = v29;
          v61.size.height = v31;
          if (CGRectContainsPoint(v61, v60))
          {
            v40 = swift_bridgeObjectRelease_n();
            v41 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v18) + 0x2F8))(v40);
            v43 = v42;
            v44 = *(void (**)(void *, uint64_t, _QWORD *, uint64_t))(v55 + 16);
            v45 = v41;
            v44(v41, v43, v54, v55);
            objc_msgSend(v14, sel_convertPoint_toCoordinateSpace_, v45, a4, a5);
            v47 = v46;
            v49 = v48;
            v39 = type metadata accessor for CanvasViewSelectionInteractionDelegate();
            v50 = (char *)objc_allocWithZone((Class)v39);
            *(_QWORD *)&v50[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView + 8] = 0;
            *(_QWORD *)(swift_unknownObjectWeakInit() + 8) = v43;
            swift_unknownObjectWeakAssign();
            v59.receiver = v50;
            v59.super_class = (Class)v39;
            v51 = objc_msgSendSuper2(&v59, sel_init);
            CanvasViewSelectionInteractionDelegate.selectionInteractionShouldBegin(_:at:for:orGestureRecognizer:)(v56, v57, v58, v47, v49);
            LOBYTE(v39) = v52;

            return v39 & 1;
          }

          ++v17;
          if (v23 == v21)
            goto LABEL_12;
        }
        __break(1u);
LABEL_19:
        swift_bridgeObjectRetain();
      }
LABEL_12:
      swift_bridgeObjectRelease_n();
      objc_msgSend(v14, sel_convertPoint_toCoordinateSpace_, v16, a4, a5);
      v35 = v34;
      v37 = v36;
      v38 = v16;
      v39 = (uint64_t)objc_msgSend(v38, sel_hitAttachment_includeStandinAttachment_expandBottomAttachment_, 0, 0, v35, v37);

      if (v39)
      {

        LOBYTE(v39) = 1;
      }
    }
    else
    {

      LOBYTE(v39) = 0;
    }
  }
  else
  {
    LOBYTE(v39) = 0;
  }
  return v39 & 1;
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteractionShouldBegin(_:at:for:orGestureRecognizer:)(void *a1, double a2, double a3, uint64_t a4, void *a5, void *a6, void *a7)
{
  id v12;
  id v13;
  id v14;
  id v15;

  v12 = a5;
  v13 = a6;
  v14 = a7;
  v15 = a1;
  LOBYTE(a7) = TiledSelectionInteractionDelegate.selectionInteractionShouldBegin(_:at:for:orGestureRecognizer:)(v12, (__objc2_prot_list **)a6, (char **)a7, a2, a3);

  return a7 & 1;
}

uint64_t TiledSelectionInteractionDelegate.selectionInteractionShouldForwardToElements(_:at:for:)(void *a1, void *a2, double a3, double a4)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  double v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  char v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(void *, uint64_t, uint64_t, uint64_t);
  id v38;
  double v39;
  double v40;
  double v41;
  double v42;
  objc_class *v43;
  char *v44;
  id v45;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  objc_super v50;
  CGPoint v51;
  CGRect v52;

  v9 = *v4;
  v10 = *MEMORY[0x1E0DEEDD8];
  v11 = objc_msgSend(a1, sel_view);
  if (v11)
  {
    v12 = v11;
    v13 = MEMORY[0x1DF0E666C]((char *)v4 + direct field offset for TiledSelectionInteractionDelegate.tiledView);
    if (!v13)
    {

      v32 = 0;
      return v32 & 1;
    }
    v14 = (void *)v13;
    v47 = *(_QWORD *)((v10 & v9) + 0x50);
    v48 = *(_QWORD *)((v10 & v9) + 0x58);
    v15 = (*(uint64_t (**)(void))(v48 + 32))();
    v16 = v15;
    v49 = a2;
    if (v15 >> 62)
      goto LABEL_18;
    v17 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v17; v17 = _CocoaArrayWrapper.endIndex.getter())
    {
      v18 = 4;
      while (1)
      {
        v19 = (v16 & 0xC000000000000001) != 0
            ? (_QWORD *)MEMORY[0x1DF0E4D64](v18 - 4, v16)
            : *(id *)(v16 + 8 * v18);
        v20 = v19;
        v21 = v18 - 3;
        if (__OFADD__(v18 - 4, 1))
          break;
        objc_msgSend(v19, sel_bounds);
        v23 = v22;
        v25 = v24;
        v27 = v26;
        v29 = v28;
        objc_msgSend(v20, sel_convertPoint_fromCoordinateSpace_, v12, a3, a4);
        v51.x = v30;
        v51.y = v31;
        v52.origin.x = v23;
        v52.origin.y = v25;
        v52.size.width = v27;
        v52.size.height = v29;
        if (CGRectContainsPoint(v52, v51))
        {
          v33 = swift_bridgeObjectRelease_n();
          v34 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v20) + 0x2F8))(v33);
          v36 = v35;
          v37 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(v48 + 16);
          v38 = v34;
          v37(v34, v36, v47, v48);
          objc_msgSend(v12, sel_convertPoint_toCoordinateSpace_, v38, a3, a4);
          v40 = v39;
          v42 = v41;
          v43 = (objc_class *)type metadata accessor for CanvasViewSelectionInteractionDelegate();
          v44 = (char *)objc_allocWithZone(v43);
          *(_QWORD *)&v44[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView + 8] = 0;
          *(_QWORD *)(swift_unknownObjectWeakInit() + 8) = v36;
          swift_unknownObjectWeakAssign();
          v50.receiver = v44;
          v50.super_class = v43;
          v45 = objc_msgSendSuper2(&v50, sel_init);
          v32 = CanvasViewSelectionInteractionDelegate.selectionInteractionShouldForwardToElements(_:at:for:)(a1, v49, v40, v42);

          return v32 & 1;
        }

        ++v18;
        if (v21 == v17)
          goto LABEL_12;
      }
      __break(1u);
LABEL_18:
      swift_bridgeObjectRetain();
    }
LABEL_12:
    swift_bridgeObjectRelease_n();

  }
  v32 = 0;
  return v32 & 1;
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteractionShouldForwardToElements(_:at:for:)(void *a1, double a2, double a3, uint64_t a4, void *a5, void *a6)
{
  id v10;
  id v11;
  id v12;

  v10 = a5;
  v11 = a6;
  v12 = a1;
  LOBYTE(a6) = TiledSelectionInteractionDelegate.selectionInteractionShouldForwardToElements(_:at:for:)(v10, a6, a2, a3);

  return a6 & 1;
}

Class @objc TiledSelectionInteractionDelegate.selectionInteraction(_:requestElementsIn:inAttachment:)(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, uint64_t a6, void *a7, void *a8)
{
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  NSArray v18;

  v14 = a7;
  v15 = a8;
  v16 = a1;
  v17 = specialized TiledSelectionInteractionDelegate.selectionInteraction(_:requestElementsIn:inAttachment:)(v15, a2, a3, a4, a5);

  if (v17)
  {
    v18.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v18.super.isa = 0;
  }
  return v18.super.isa;
}

Class @objc TiledSelectionInteractionDelegate.selectionInteraction(_:requestElementsIn:inAttachment:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  NSArray v13;

  v8 = a3;
  v9 = a4;
  v10 = a5;
  v11 = a1;
  v12 = specialized TiledSelectionInteractionDelegate.selectionInteraction(_:requestElementsIn:inAttachment:)(v9, v10);

  if (v12)
  {
    v13.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v13.super.isa = 0;
  }
  return v13.super.isa;
}

CGPathRef @objc TiledSelectionInteractionDelegate.selectionInteraction(_:pathForElement:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v7;
  id v8;
  id v9;
  CGPathRef v10;
  _BYTE v12[32];

  v7 = a3;
  swift_unknownObjectRetain();
  v8 = a5;
  v9 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  v10 = specialized TiledSelectionInteractionDelegate.selectionInteraction(_:pathForElement:inAttachment:)((uint64_t)v12, v8);

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v10;
}

void TiledSelectionInteractionDelegate.selectionInteraction(_:didSelectElements:inAttachment:)(void *a1, uint64_t a2, void *a3)
{
  char v6;
  id v7;
  _BYTE v8[24];
  ValueMetadata *v9;
  unint64_t v10;

  v9 = &type metadata for PencilAndPaperFeatureFlags;
  v10 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v8[0] = 0;
  v6 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  if ((v6 & 1) == 0)
  {
    v7 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a3);
    specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didSelectElements:inAttachment:)(a1, a2);

  }
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didSelectElements:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  id v9;
  id v10;
  id v11;

  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = a3;
  v10 = a5;
  v11 = a1;
  TiledSelectionInteractionDelegate.selectionInteraction(_:didSelectElements:inAttachment:)(v9, v8, v10);

  return swift_bridgeObjectRelease();
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didDragElements:with:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, _OWORD *a5, void *a6)
{
  __int128 v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  _OWORD v15[3];

  v9 = a5[1];
  v15[0] = *a5;
  v15[1] = v9;
  v15[2] = a5[2];
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = a3;
  v12 = a6;
  v13 = a1;
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didDragElements:with:inAttachment:)(v10, (CGFloat *)v15, v12);

  return swift_bridgeObjectRelease();
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didEndDraggingElements:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  return @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didEndDraggingElements:inAttachment:)(a1, a2, a3, a4, a5, specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didEndDraggingElements:inAttachment:));
}

void @objc TiledSelectionInteractionDelegate.selectionInteraction(_:willBeginInsertSpaceInAttachment:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:willBeginInsertSpaceInAttachment:)(v7);

}

void @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didEndInsertSpaceInAttachment:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  id v8;

  v6 = a3;
  v7 = a4;
  v8 = a1;
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didEndInsertSpaceInAttachment:)(v7);

}

void @objc TiledSelectionInteractionDelegate.selectionInteraction(_:insertSpaceDidMove:inAttachment:)(void *a1, double a2, uint64_t a3, void *a4, void *a5)
{
  id v8;
  id v9;
  id v10;

  v8 = a4;
  v9 = a5;
  v10 = a1;
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:insertSpaceDidMove:inAttachment:)(v9, a2);

}

void @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didClearSelectionForElements:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v7;
  id v8;
  id v9;

  v7 = a3;
  v8 = a5;
  v9 = a1;
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didClearSelectionForElements:inAttachment:)(v8);

}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:canPerformAction:withSender:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v9;
  id v10;
  id v11;
  char v12;
  _BYTE v14[32];

  v9 = a3;
  swift_unknownObjectRetain();
  v10 = a6;
  v11 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  v12 = specialized TiledSelectionInteractionDelegate.selectionInteraction(_:canPerformAction:withSender:inAttachment:)(a4, (uint64_t)v14, v10);

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  return v12 & 1;
}

Class @objc TiledSelectionInteractionDelegate.selectionInteraction(_:pasteboardRepresentationsForElements:strokes:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  NSArray v15;

  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  v10 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = a3;
  v12 = a6;
  v13 = a1;
  v14 = specialized TiledSelectionInteractionDelegate.selectionInteraction(_:pasteboardRepresentationsForElements:strokes:inAttachment:)(v9, v10, v12);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v14)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]);
    v15.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v15.super.isa = 0;
  }
  return v15.super.isa;
}

void @objc TiledSelectionInteractionDelegate.selectionInteractionDidPaste(_:at:in:)(void *a1, double a2, double a3, uint64_t a4, void *a5, void *a6)
{
  id v10;
  id v11;
  id v12;

  v10 = a5;
  v11 = a6;
  v12 = a1;
  specialized TiledSelectionInteractionDelegate.selectionInteractionDidPaste(_:at:in:)(v11, a2, a3);

}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didDeleteElements:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  return @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didEndDraggingElements:inAttachment:)(a1, a2, a3, a4, a5, specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didDeleteElements:inAttachment:));
}

Class @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didDuplicateElements:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  NSArray v13;

  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = a3;
  v10 = a5;
  v11 = a1;
  v12 = specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didDuplicateElements:inAttachment:)(v8, v10);

  swift_bridgeObjectRelease();
  if (v12)
  {
    v13.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v13.super.isa = 0;
  }
  return v13.super.isa;
}

Class @objc TiledSelectionInteractionDelegate.selectionInteraction(_:elementsForSpaceInsertedAt:inAttachment:)(void *a1, CGFloat a2, CGFloat a3, uint64_t a4, void *a5, void *a6)
{
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  NSArray v14;

  v10 = a5;
  v11 = a6;
  v12 = a1;
  v13 = specialized TiledSelectionInteractionDelegate.selectionInteraction(_:elementsForSpaceInsertedAt:inAttachment:)(v11, a2, a3);

  if (v13)
  {
    v14.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v14.super.isa = 0;
  }
  return v14.super.isa;
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:selectionContains:inAttachment:)(void *a1, CGFloat a2, CGFloat a3, uint64_t a4, void *a5, void *a6)
{
  id v10;
  id v11;
  id v12;
  char v13;

  v10 = a5;
  v11 = a6;
  v12 = a1;
  v13 = specialized TiledSelectionInteractionDelegate.selectionInteraction(_:selectionContains:inAttachment:)(v11, a2, a3);

  return v13 & 1;
}

Class @objc TiledSelectionInteractionDelegate.selectionInteraction(_:elementsInAttachment:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  return @objc TiledSelectionInteractionDelegate.selectionInteraction(_:elementsInAttachment:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:elementsInAttachment:));
}

Class @objc TiledSelectionInteractionDelegate.selectionInteraction(_:selectedElementsInAttachment:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  return @objc TiledSelectionInteractionDelegate.selectionInteraction(_:elementsInAttachment:)(a1, a2, a3, a4, (uint64_t (*)(void))specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:selectedElementsInAttachment:));
}

Class @objc TiledSelectionInteractionDelegate.selectionInteraction(_:elementsInAttachment:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t (*a5)(void))
{
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  NSArray v12;

  v8 = a3;
  v9 = a4;
  v10 = a1;
  v11 = specialized TiledSelectionInteractionDelegate.selectionInteraction(_:elementsInAttachment:)(v9, a5);

  if (v11)
  {
    v12.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v12.super.isa = 0;
  }
  return v12.super.isa;
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didSelect:selectionType:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v10;
  id v11;
  id v12;
  id v13;

  type metadata accessor for PKStroke();
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = a3;
  v12 = a6;
  v13 = a1;
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didSelect:selectionType:inAttachment:)(v10, a5, v12);

  return swift_bridgeObjectRelease();
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:renderPreviewForElements:in:with:inAttachment:withCompletion:)(void *a1, int a2, void *a3, int a4, void *a5, void *a6, void *a7, void *aBlock)
{
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;

  v13 = _Block_copy(aBlock);
  v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v13;
  v16 = a3;
  v17 = a5;
  v18 = a6;
  v19 = a7;
  v20 = a1;
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:renderPreviewForElements:in:with:inAttachment:withCompletion:)(v14, v17, v18, a7, (uint64_t)_sIeyB_Ieg_TRTA_0, v15);

  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:dragInteractionWillBeginForElements:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  return @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didEndDraggingElements:inAttachment:)(a1, a2, a3, a4, a5, specialized TiledSelectionInteractionDelegate.selectionInteraction(_:dragInteractionWillBeginForElements:inAttachment:));
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didEndDraggingElements:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void (*a6)(uint64_t, id))
{
  uint64_t v10;
  id v11;
  id v12;
  id v13;

  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = a3;
  v12 = a5;
  v13 = a1;
  a6(v10, v12);

  return swift_bridgeObjectRelease();
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:dragInteractionWillEndForElements:with:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v10;
  id v11;
  id v12;
  id v13;

  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = a3;
  v12 = a6;
  v13 = a1;
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:dragInteractionWillEndForElements:with:inAttachment:)(v10, a5, v12);

  return swift_bridgeObjectRelease();
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didDrop:inAttachment:withCompletion:)(void *a1, int a2, void *a3, void *a4, void *a5, void *aBlock)
{
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;

  v10 = _Block_copy(aBlock);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v10;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a1;
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didDrop:inAttachment:withCompletion:)(a4, v14, partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray?) -> (), v11);

  return swift_release();
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didTapElement:withGesture:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  id v9;
  id v10;
  id v11;
  id v12;
  _BYTE v14[32];

  v9 = a3;
  swift_unknownObjectRetain();
  v10 = a5;
  v11 = a6;
  v12 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didTapElement:withGesture:inAttachment:)((uint64_t)v14, v10, v11);

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:didLongPressElement:withGesture:inAttachment:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  id v9;
  id v10;
  id v11;
  id v12;
  char v13;
  _BYTE v15[32];

  v9 = a3;
  swift_unknownObjectRetain();
  v10 = a5;
  v11 = a6;
  v12 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  v13 = specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didLongPressElement:withGesture:inAttachment:)((uint64_t)v15, v10, v11);

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  return v13 & 1;
}

id @objc TiledSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:configurationForElement:inAttachment:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  _BYTE v15[32];

  v9 = a3;
  v10 = a4;
  swift_unknownObjectRetain();
  v11 = a6;
  v12 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  v13 = specialized TiledSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:configurationForElement:inAttachment:)((uint64_t)v10, (uint64_t)v15, v11);

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  return v13;
}

id @objc TiledSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:previewForHighlightingMenuWith:forElement:inAttachment:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  _BYTE v18[32];

  v11 = a3;
  v12 = a4;
  v13 = a5;
  swift_unknownObjectRetain();
  v14 = a7;
  v15 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  v16 = specialized TiledSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:previewForHighlightingMenuWith:forElement:inAttachment:)((uint64_t)v12, (uint64_t)v13, (uint64_t)v18, v14);

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  return v16;
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willDisplayMenuFor:animator:forElement:inAttachment:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8)
{
  return @objc TiledSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willDisplayMenuFor:animator:forElement:inAttachment:)(a1, a2, a3, a4, a5, a6, a7, a8, specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willDisplayMenuFor:animator:forElement:inAttachment:));
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willEndFor:animator:forElement:inAttachment:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8)
{
  return @objc TiledSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willDisplayMenuFor:animator:forElement:inAttachment:)(a1, a2, a3, a4, a5, a6, a7, a8, specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willEndFor:animator:forElement:inAttachment:));
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willDisplayMenuFor:animator:forElement:inAttachment:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8, void (*a9)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  _BYTE v20[32];

  v14 = a3;
  v15 = a4;
  v16 = a5;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v17 = a8;
  v18 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  specialized TiledSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willDisplayMenuFor:animator:forElement:inAttachment:)((uint64_t)v15, (uint64_t)v16, a6, (uint64_t)v20, v17, a9);

  swift_unknownObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
}

uint64_t @objc TiledSelectionInteractionDelegate.selectionInteraction(_:handleTapOnCanvasAtLocation:inAttachment:)(void *a1, double a2, double a3, uint64_t a4, void *a5, void *a6)
{
  id v10;
  id v11;
  id v12;
  char v13;

  v10 = a5;
  v11 = a6;
  v12 = a1;
  v13 = specialized TiledSelectionInteractionDelegate.selectionInteraction(_:handleTapOnCanvasAtLocation:inAttachment:)(v11, a2, a3);

  return v13 & 1;
}

void @objc TiledSelectionInteractionDelegate.init()()
{
  specialized TiledSelectionInteractionDelegate.init()();
}

id TiledSelectionInteractionDelegate.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for TiledSelectionInteractionDelegate(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x50), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

uint64_t @objc TiledSelectionInteractionDelegate.__ivar_destroyer()
{
  return swift_unknownObjectWeakDestroy();
}

uint64_t type metadata accessor for TiledSelectionInteractionDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TiledSelectionInteractionDelegate);
}

uint64_t specialized TiledSelectionInteractionDelegate.selectionInteraction(_:handleLassoSelection:strokes:inAttachment:)(void *a1, uint64_t a2, void *a3)
{
  id v5;

  v5 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a3);
  LOBYTE(a2) = specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:handleLassoSelection:strokes:inAttachment:)(a1, a2);

  return a2 & 1;
}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:handleDeleteForTextStrokes:inAttachment:)(Swift::OpaquePointer a1, void *a2)
{
  _QWORD *v3;
  void *v4;
  char *v5;
  void *v6;
  id v7;
  void *v8;
  char *v9;

  v9 = (char *)TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a2);
  v3 = (_QWORD *)MEMORY[0x1DF0E666C](&v9[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView]);
  if (v3
    && (v4 = v3, v5 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x88))(), v4, v5)
    && (v6 = *(void **)&v5[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView],
        v7 = v6,
        v5,
        v6))
  {
    HandwritingReflowView.replaceStrokes(_:with:strokeIn:)(a1, MEMORY[0x1E0DEE9D8], 0);

    v8 = v7;
  }
  else
  {
    v8 = v9;
  }

}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:replace:with:in:in:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, double a5, double a6, double a7, double a8)
{
  id v16;

  v16 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a4);
  specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:replace:with:in:in:)(a1, a2, a3, a4, a5, a6, a7, a8);

}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:handleGenerationToolForSelectedStrokes:inBounds:inAttachment:)(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a2);
  v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v7, 1, 1, v9);
  type metadata accessor for MainActor();
  v10 = v8;
  swift_bridgeObjectRetain();
  v11 = static MainActor.shared.getter();
  v12 = (_QWORD *)swift_allocObject();
  v13 = MEMORY[0x1E0DF06E8];
  v12[2] = v11;
  v12[3] = v13;
  v12[4] = v10;
  v12[5] = a1;
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in CanvasViewSelectionInteractionDelegate.selectionInteraction(_:handleGenerationToolForSelectedStrokes:inBounds:inAttachment:), (uint64_t)v12);
  swift_release();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, &demangling cache variable for type metadata for TaskPriority?);

}

uint64_t specialized TiledSelectionInteractionDelegate.selectionInteraction(_:requestElementsIn:inAttachment:)(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  id v9;
  uint64_t v10;

  v9 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a1);
  v10 = specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:requestElementsIn:inAttachment:)(a2, a3, a4, a5);

  return v10;
}

void *specialized TiledSelectionInteractionDelegate.selectionInteraction(_:requestElementsIn:inAttachment:)(void *a1, void *a2)
{
  char *v3;
  id v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t ObjectType;
  unint64_t v9;
  const CGPath *v10;
  unint64_t v11;

  v3 = (char *)TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a2);
  v4 = objc_msgSend(a1, sel_CGPath);
  v5 = &v3[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView];
  v6 = (void *)MEMORY[0x1DF0E666C](&v3[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView]);
  if (v6)
  {
    v7 = *((_QWORD *)v5 + 1);
    ObjectType = swift_getObjectType();
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 64))(ObjectType, v7);

    v10 = (const CGPath *)v4;
    v11 = specialized Sequence.compactMap<A>(_:)(v9, v10);
    swift_bridgeObjectRelease();

    v6 = (void *)specialized _arrayForceCast<A, B>(_:)(v11);
    swift_bridgeObjectRelease();

  }
  else
  {

  }
  return v6;
}

CGPathRef specialized TiledSelectionInteractionDelegate.selectionInteraction(_:pathForElement:inAttachment:)(uint64_t a1, void *a2)
{
  unint64_t v4;
  char v5;
  CGPathRef v6;
  id v7;
  char v8;
  _QWORD *v9;
  void *v10;
  _BYTE v12[24];
  ValueMetadata *v13;
  unint64_t v14;
  CGRect v15;
  CGRect v16;

  v13 = &type metadata for PencilAndPaperFeatureFlags;
  v4 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v14 = v4;
  v12[0] = 0;
  v5 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  if ((v5 & 1) != 0)
  {
    v15.origin.x = 0.0;
    v15.origin.y = 0.0;
    v15.size.width = 0.0;
    v15.size.height = 0.0;
    return CGPathCreateWithRect(v15, 0);
  }
  else
  {
    v7 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a2);
    v13 = &type metadata for PencilAndPaperFeatureFlags;
    v14 = v4;
    v12[0] = 0;
    v8 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    if ((v8 & 1) != 0 || (v9 = CanvasViewSelectionInteractionDelegate.view(for:)(a1)) == 0)
    {
      v16.origin.x = 0.0;
      v16.origin.y = 0.0;
      v16.size.width = 0.0;
      v16.size.height = 0.0;
      v6 = CGPathCreateWithRect(v16, 0);

    }
    else
    {
      v10 = v9;
      v6 = (CGPathRef)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v9) + 0x1D8))();

    }
  }
  return v6;
}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didDragElements:with:inAttachment:)(uint64_t a1, CGFloat *a2, void *a3)
{
  char v6;
  id v7;
  _BYTE v8[24];
  ValueMetadata *v9;
  unint64_t v10;

  v9 = &type metadata for PencilAndPaperFeatureFlags;
  v10 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v8[0] = 0;
  v6 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  if ((v6 & 1) == 0)
  {
    v7 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a3);
    specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didDragElements:with:inAttachment:)(a1, a2);

  }
}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didEndDraggingElements:inAttachment:)(uint64_t a1, void *a2)
{
  char v4;
  id v5;
  _BYTE v6[24];
  ValueMetadata *v7;
  unint64_t v8;

  v7 = &type metadata for PencilAndPaperFeatureFlags;
  v8 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v6[0] = 0;
  v4 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  if ((v4 & 1) == 0)
  {
    v5 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a2);
    specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didEndDraggingElements:inAttachment:)(a1);

  }
}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:willBeginInsertSpaceInAttachment:)(void *a1)
{
  _QWORD *v1;
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  char *v6;

  v6 = (char *)TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a1);
  v1 = (_QWORD *)MEMORY[0x1DF0E666C](&v6[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView]);
  if (v1
    && (v2 = v1,
        v3 = (_QWORD *)MEMORY[0x1E0DEEDD8],
        v4 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x88))(),
        v2,
        v4))
  {
    (*(void (**)(void))((*v3 & *v4) + 0x588))();

    v5 = v4;
  }
  else
  {
    v5 = v6;
  }

}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didEndInsertSpaceInAttachment:)(void *a1)
{
  _QWORD *v1;
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  char *v6;

  v6 = (char *)TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a1);
  v1 = (_QWORD *)MEMORY[0x1DF0E666C](&v6[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView]);
  if (v1
    && (v2 = v1,
        v3 = (_QWORD *)MEMORY[0x1E0DEEDD8],
        v4 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x88))(),
        v2,
        v4))
  {
    (*(void (**)(_QWORD))((*v3 & *v4) + 0x598))(0);

    v5 = v4;
  }
  else
  {
    v5 = v6;
  }

}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:insertSpaceDidMove:inAttachment:)(void *a1, double a2)
{
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  char *v8;

  v8 = (char *)TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a1);
  v3 = (_QWORD *)MEMORY[0x1DF0E666C](&v8[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView]);
  if (v3
    && (v4 = v3,
        v5 = (_QWORD *)MEMORY[0x1E0DEEDD8],
        v6 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x88))(),
        v4,
        v6))
  {
    (*(void (**)(double))((*v5 & *v6) + 0x590))(a2);

    v7 = v6;
  }
  else
  {
    v7 = v8;
  }

}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didClearSelectionForElements:inAttachment:)(void *a1)
{
  char v2;
  id v3;
  _BYTE v4[24];
  ValueMetadata *v5;
  unint64_t v6;

  v5 = &type metadata for PencilAndPaperFeatureFlags;
  v6 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v4[0] = 0;
  v2 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  if ((v2 & 1) == 0)
  {
    v3 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a1);
    specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didClearSelectionForElements:inAttachment:)();

  }
}

uint64_t specialized TiledSelectionInteractionDelegate.selectionInteraction(_:canPerformAction:withSender:inAttachment:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  char v4;

  v3 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a3);
  v4 = specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:canPerformAction:withSender:inAttachment:)();

  return v4 & 1;
}

uint64_t specialized TiledSelectionInteractionDelegate.selectionInteraction(_:pasteboardRepresentationsForElements:strokes:inAttachment:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;

  v5 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a3);
  v6 = specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:pasteboardRepresentationsForElements:strokes:inAttachment:)(a1, a2);

  return v6;
}

void specialized TiledSelectionInteractionDelegate.selectionInteractionDidPaste(_:at:in:)(void *a1, double a2, double a3)
{
  id v5;

  v5 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a1);
  specialized CanvasViewSelectionInteractionDelegate.selectionInteractionDidPaste(_:at:in:)(a2, a3);

}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didDeleteElements:inAttachment:)(uint64_t a1, void *a2)
{
  char *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;

  v12 = (char *)TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a2);
  v3 = &v12[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView];
  v4 = MEMORY[0x1DF0E666C](&v12[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView]);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = *((_QWORD *)v3 + 1);
    ObjectType = swift_getObjectType();
    v8 = specialized _arrayForceCast<A, B>(_:)(a1);
    v9 = specialized Set.init<A>(_:)(v8);
    swift_bridgeObjectRelease();
    v10 = specialized Set.init<A>(_:)(MEMORY[0x1E0DEE9D8]);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 88))(v9, v10, 6, 0, ObjectType, v6);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = v5;
  }
  else
  {
    v11 = v12;
  }

}

uint64_t specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didDuplicateElements:inAttachment:)(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a2);
  v4 = specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didDuplicateElements:inAttachment:)(a1);

  return v4;
}

uint64_t specialized TiledSelectionInteractionDelegate.selectionInteraction(_:elementsForSpaceInsertedAt:inAttachment:)(void *a1, CGFloat a2, CGFloat a3)
{
  id v5;
  uint64_t v6;

  v5 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a1);
  v6 = specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:elementsForSpaceInsertedAt:inAttachment:)(a2, a3);

  return v6;
}

uint64_t specialized TiledSelectionInteractionDelegate.selectionInteraction(_:selectionContains:inAttachment:)(void *a1, CGFloat a2, CGFloat a3)
{
  id v5;
  char v6;

  v5 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a1);
  v6 = specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:selectionContains:inAttachment:)(a2, a3);

  return v6 & 1;
}

uint64_t specialized TiledSelectionInteractionDelegate.selectionInteraction(_:elementsInAttachment:)(void *a1, uint64_t (*a2)(void))
{
  id v3;
  uint64_t v4;

  v3 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a1);
  v4 = a2();

  return v4;
}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didSelect:selectionType:inAttachment:)(uint64_t a1, uint64_t a2, void *a3)
{
  char *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;

  v4 = (char *)TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a3);
  if (a2 != 6 && a2)
  {
    v11 = v4;
    v5 = (_QWORD *)MEMORY[0x1DF0E666C](&v4[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView]);
    if (v5)
    {
      v6 = v5;
      v7 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x88))();

      if (v7)
      {
        v8 = swift_bridgeObjectRetain();
        v9 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay9PencilKit8PKStrokeVG_9Coherence7WeakRefVyAJ10CRRegisterVyAJ14SharedTagged_2Vy05PaperE00L6StrokeVGGGs5NeverOTg503_s8m79Kit13CanvasMembersV7strokes19strokeSelectionTypeACx_So011PKSelectionH0VtcSTRz06d3B08f2V7b18Rtzlufc9Coherence7hi6VyAM10j6VyAM14kl9_2VyAA0R6N11VGGGAJXEfU_Tf1cn_n(v8);
        v10 = specialized Set.init<A>(_:)(v9);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], v10, a2, 0);

        return;
      }
    }
    v4 = v11;
  }

}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:renderPreviewForElements:in:with:inAttachment:withCompletion:)(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v11;

  v11 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a4);
  specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:renderPreviewForElements:in:with:inAttachment:withCompletion:)(a1, a2, a3, a5, a6);

}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:dragInteractionWillBeginForElements:inAttachment:)(uint64_t a1, void *a2)
{
  id v3;

  v3 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a2);
  specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:dragInteractionWillBeginForElements:inAttachment:)(a1);

}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:dragInteractionWillEndForElements:with:inAttachment:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;

  v5 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a3);
  specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:dragInteractionWillEndForElements:with:inAttachment:)(a1, a2);

}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didDrop:inAttachment:withCompletion:)(void *a1, void *a2, void (*a3)(_QWORD), uint64_t a4)
{
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  _QWORD *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  char *v20;

  v20 = (char *)TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a2);
  v7 = &v20[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView];
  v8 = (_QWORD *)MEMORY[0x1DF0E666C](&v20[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView]);
  if (v8)
  {
    v9 = *((_QWORD *)v7 + 1);
    v19 = v8;
    v10 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v8) + 0x88))();
    if (v10)
    {
      v18 = (id)v10;
      if (a1)
      {
        type metadata accessor for URL();
        v11 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8];
        v12 = (_QWORD *)swift_allocObject();
        v12[2] = a3;
        v12[3] = a4;
        v12[4] = v19;
        v12[5] = v9;
        v12[6] = v18;
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, v11, MEMORY[0x1E0CB0040]);
        v13 = a1;
        swift_retain();
        v14 = v19;
        v15 = v18;
        v16 = (void *)NSItemProvider.loadObject<A>(ofClass:completionHandler:)();

        swift_release();
        return;
      }
      a3(0);

      v17 = v18;
    }
    else
    {

      v17 = v19;
    }
  }
  else
  {
    v17 = v20;
  }

}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didTapElement:withGesture:inAttachment:)(uint64_t a1, void *a2, void *a3)
{
  id v5;

  v5 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a3);
  specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didTapElement:withGesture:inAttachment:)(a1, a2);

}

uint64_t specialized TiledSelectionInteractionDelegate.selectionInteraction(_:didLongPressElement:withGesture:inAttachment:)(uint64_t a1, void *a2, void *a3)
{
  id v5;

  v5 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a3);
  LOBYTE(a2) = specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:didLongPressElement:withGesture:inAttachment:)(a1, a2);

  return a2 & 1;
}

id specialized TiledSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:configurationForElement:inAttachment:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;

  v5 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a3);
  v6 = specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:configurationForElement:inAttachment:)(a1, a2);

  return v6;
}

id specialized TiledSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:previewForHighlightingMenuWith:forElement:inAttachment:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;

  v7 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a4);
  v8 = specialized CanvasViewSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:previewForHighlightingMenuWith:forElement:inAttachment:)(a1, a2, a3);

  return v8;
}

void specialized TiledSelectionInteractionDelegate.selectionInteraction(_:contextMenuInteraction:willDisplayMenuFor:animator:forElement:inAttachment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  id v11;

  v11 = TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a5);
  a6(a1, a2, a3, a4);

}

uint64_t specialized TiledSelectionInteractionDelegate.selectionInteraction(_:handleTapOnCanvasAtLocation:inAttachment:)(void *a1, double a2, double a3)
{
  char *v5;
  char v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  char *v10;
  _BYTE v12[24];
  ValueMetadata *v13;
  unint64_t v14;

  v5 = (char *)TiledSelectionInteractionDelegate.getSelectionDelegate(from:)(a1);
  v13 = &type metadata for PencilAndPaperFeatureFlags;
  v14 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v12[0] = 0;
  v6 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  if ((v6 & 1) != 0)
  {
    v7 = (_QWORD *)MEMORY[0x1DF0E666C](&v5[OBJC_IVAR____TtC8PaperKit38CanvasViewSelectionInteractionDelegate_containerView]);
    if (v7)
    {
      v8 = v7;
      v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v10 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v7) + 0x88))();

      if (v10)
      {
        (*(void (**)(uint64_t, uint64_t, double, double))((*v9 & *(_QWORD *)v10) + 0x4C0))(1, 1, a2, a3);

        v5 = v10;
      }
    }
  }

  return v6 & 1;
}

void specialized TiledSelectionInteractionDelegate.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1DDD7FF24()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1DDD7FF48()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t _sIeyB_Ieg_TRTA_0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_1DDD7FF88()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t CanvasElementPDFAnnotation.decodePaperKitID()@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  CGPDFDictionary *v3;
  CGPDFDictionary *v4;
  CFStringRef v5;
  __CFString *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  CFDataRef v11;
  CFDataRef v12;
  uint64_t v13;
  uint64_t v14;
  CGPDFDataFormat format;
  CGPDFStringRef key[3];
  CGPDFStreamRef stream;
  CGPDFDictionaryRef value[2];

  value[1] = *(CGPDFDictionaryRef *)MEMORY[0x1E0C80C00];
  v3 = (CGPDFDictionary *)objc_msgSend(v1, sel_sourceDictionary);
  if (!v3)
  {
    v9 = type metadata accessor for CRKeyPath();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a1, 1, 1, v9);
  }
  value[0] = 0;
  *(_OWORD *)key = xmmword_1DDF3C460;
  CGPDFDictionaryGetDictionary(v3, (const char *)key, value);
  v4 = value[0];
  if (!value[0])
    goto LABEL_13;
  key[0] = 0;
  if (!CGPDFDictionaryGetString(value[0], "PPKID", key) || !key[0] || (v5 = CGPDFStringCopyTextString(key[0])) == 0)
  {
    stream = 0;
    if (CGPDFDictionaryGetStream(v4, "PPKID", &stream))
    {
      if (stream)
      {
        format = CGPDFDataFormatRaw;
        v11 = CGPDFStreamCopyData(stream, &format);
        if (v11)
        {
          v12 = v11;
          *(_OWORD *)key = xmmword_1DDF33630;
          static Data._conditionallyBridgeFromObjectiveC(_:result:)();

          if ((unint64_t)key[1] >> 60 != 15)
            goto LABEL_14;
        }
      }
    }
LABEL_13:
    v13 = type metadata accessor for CRKeyPath();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
  v6 = (__CFString *)v5;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  Data.init(base64Encoded:options:)();
  v8 = v7;
  swift_bridgeObjectRelease();
  if (v8 >> 60 == 15)
    goto LABEL_13;
LABEL_14:
  CRKeyPath.init(rawValue:)();
  v14 = type metadata accessor for CRKeyPath();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a1, 0, 1, v14);
}

uint64_t CanvasElementPDFAnnotation.decodeImportedElement<A>(in:assetManager:from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  Swift::String_optional v50;
  char v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  void (*v63)(char *, char *, uint64_t);
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;

  v72 = a3;
  v85 = a2;
  v90 = a1;
  v88 = a4;
  v79 = type metadata accessor for CRKeyPath();
  v78 = *(_QWORD *)(v79 - 8);
  MEMORY[0x1E0C80A78](v79, v5);
  v83 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v7, v8);
  v75 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v77 = (char *)&v65 - v12;
  v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<UnknownCanvasElement>);
  v81 = *(_QWORD *)(v82 - 8);
  MEMORY[0x1E0C80A78](v82, v13);
  v80 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x1E0C80A78](v71, v15);
  v70 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v69 = (char *)&v65 - v19;
  v74 = type metadata accessor for UnknownCanvasElement();
  MEMORY[0x1E0C80A78](v74, v20);
  v73 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v76 = (char *)&v65 - v24;
  v87 = type metadata accessor for CRCodingError();
  v84 = *(_QWORD *)(v87 - 8);
  MEMORY[0x1E0C80A78](v87, v25);
  v86 = (char *)&v65 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v65 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v32 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v33);
  v35 = (char *)&v65 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v36, v37);
  v68 = (char *)&v65 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v66 = *(_QWORD *)(v67 - 8);
  MEMORY[0x1E0C80A78](v67, v39);
  v65 = (char *)&v65 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>?);
  MEMORY[0x1E0C80A78](v41, v42);
  v44 = (char *)&v65 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v46 = *(_QWORD *)(v45 - 8);
  MEMORY[0x1E0C80A78](v45, v47);
  v49 = (char *)&v65 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = v4;
  v50 = CanvasElementPDFAnnotation.decodePaperKitType()();
  if (v50.value._object)
  {
    if (v50.value._countAndFlagsBits == 2002874980 && v50.value._object == (void *)0xE400000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_6:
      v52 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<Ref<PKDrawingStruct>?> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>, MEMORY[0x1E0D117A8]);
      CanvasElementPDFAnnotation.decodePaperKit<A, B>(type:checkHash:in:)(0, v90, v45, v52, (uint64_t)v44);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45) == 1)
      {
        v53 = &demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>?;
        v54 = (uint64_t)v44;
LABEL_13:
        outlined destroy of StocksKitCurrencyCache.Provider?(v54, v53);
        v60 = type metadata accessor for AnnotationImporter.ImportedElement();
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v88, 1, 1, v60);
      }
      (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v49, v44, v45);
      v57 = v68;
      CRRegister.value.getter();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v49, v45);
      v58 = v66;
      v59 = v67;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v57, 1, v67) == 1)
      {
        v53 = (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?;
        v54 = (uint64_t)v57;
        goto LABEL_13;
      }
      v63 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
      v64 = v65;
      v63(v65, v57, v59);
      v56 = v88;
      v63(v88, v64, v59);
      v62 = type metadata accessor for AnnotationImporter.ImportedElement();
      goto LABEL_14;
    }
    v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v51 & 1) != 0)
      goto LABEL_6;
  }
  CanvasElementPDFAnnotation.decodeCanvasElement<A>(in:assetManager:)(v90, v85, (uint64_t)v30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31) == 1)
  {
    v53 = (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?;
    v54 = (uint64_t)v30;
    goto LABEL_13;
  }
  v55 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
  v55(v35, v30, v31);
  v56 = v88;
  v55(v88, v35, v31);
  v62 = type metadata accessor for AnnotationImporter.ImportedElement();
LABEL_14:
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v56, 0, 1, v62);
}

void one-time initialization function for hashFloatingPointRounding()
{
  static PaperKitPDFHash.hashFloatingPointRounding = 0x40C3880000000000;
}

uint64_t one-time initialization function for magicNumber()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = specialized _copyCollectionToContiguousArray<A>(_:)(26736, 0xE200000000000000);
  v1 = specialized Data.init<A>(_:)(v0);
  v3 = v2;
  result = swift_release();
  static PaperKitPDFHash.magicNumber = v1;
  *(_QWORD *)algn_1F042EBD8 = v3;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = specialized _copyCollectionToContiguousArray<A>(_:)(1836410996, 0xE400000000000000);
  v1 = specialized Data.init<A>(_:)(v0);
  v3 = v2;
  result = swift_release();
  static ImageThumbnailManager.magicNumber = v1;
  *(_QWORD *)algn_1F0417818 = v3;
  return result;
}

Swift::String_optional __swiftcall CanvasElementPDFAnnotation.decodePaperKitType()()
{
  void *v0;
  CGPDFDictionary *v1;
  uint64_t v2;
  void *v3;
  CFStringRef v4;
  __CFString *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  Swift::String_optional result;
  CGPDFStringRef string[2];
  CGPDFDictionaryRef value[2];

  value[1] = *(CGPDFDictionaryRef *)MEMORY[0x1E0C80C00];
  v1 = (CGPDFDictionary *)objc_msgSend(v0, sel_sourceDictionary);
  if (!v1)
    goto LABEL_7;
  value[0] = 0;
  *(_OWORD *)string = xmmword_1DDF3C460;
  CGPDFDictionaryGetDictionary(v1, (const char *)string, value);
  if (!value[0])
    goto LABEL_7;
  string[0] = 0;
  v2 = 0;
  v3 = 0;
  if (CGPDFDictionaryGetString(value[0], "PPKType", string))
  {
    if (string[0])
    {
      v4 = CGPDFStringCopyTextString(string[0]);
      if (v4)
      {
        v5 = (__CFString *)v4;
        v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v3 = v6;

        goto LABEL_8;
      }
    }
LABEL_7:
    v2 = 0;
    v3 = 0;
  }
LABEL_8:
  v7 = v2;
  v8 = v3;
  result.value._object = v8;
  result.value._countAndFlagsBits = v7;
  return result;
}

id CanvasElementPDFAnnotation.decodePaperKit<A, B>(type:checkHash:in:)@<X0>(char a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  void *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  CGPDFDictionary *v22;
  CGPDFDictionary *v23;
  CFStringRef v24;
  __CFString *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  CGPDFDictionaryRef v30;
  CFDataRef v31;
  CFDataRef v32;
  id result;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  CFStringRef v48;
  __CFString *v49;
  CGPDFDictionaryRef v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BOOL4 Stream;
  CFDataRef v57;
  CFDataRef v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  _BOOL4 v64;
  uint8_t *v65;
  uint64_t v66;
  id v67;
  unint64_t v68;
  uint64_t v69;
  CGPDFDictionary *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  CGPDFDataFormat format;
  CGPDFDictionaryRef value[2];
  CGPDFStreamRef v81[2];

  v71 = a2;
  v81[1] = *(CGPDFStreamRef *)MEMORY[0x1E0C80C00];
  v76 = a4;
  v9 = type metadata accessor for Capsule();
  v72 = *(_QWORD *)(v9 - 8);
  v73 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v75 = (char *)&v66 - v11;
  v12 = type metadata accessor for SHA256Digest();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for SHA256();
  v17 = *(_QWORD *)(v74 - 8);
  v19 = MEMORY[0x1E0C80A78](v74, v18);
  v21 = (char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = (CGPDFDictionary *)objc_msgSend(v5, sel_sourceDictionary, v19);
  if (!v22)
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a5, 1, 1, a3);
  v77 = a5;
  value[0] = 0;
  if (!CGPDFDictionaryGetDictionary(v22, "AAPL:AKExtras", value))
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v77, 1, 1, a3);
  v23 = value[0];
  if (!value[0])
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v77, 1, 1, a3);
  if ((a1 & 1) != 0)
  {
    value[0] = 0;
    if (CGPDFDictionaryGetString(v23, "PPKHash", value)
      && value[0]
      && (v24 = CGPDFStringCopyTextString(value[0])) != 0)
    {
      v25 = (__CFString *)v24;
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v69 = v27;
      v70 = (CGPDFDictionary *)v26;

      v70 = (CGPDFDictionary *)Data.init(base64Encoded:options:)();
      v29 = v28;
      swift_bridgeObjectRelease();
      if (v29 >> 60 != 15)
      {
        v30 = v70;
LABEL_16:
        v70 = v30;
        Data.paperKitHashVersion.getter((uint64_t)v30, v29);
        if ((v34 & 0x100) != 0)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v77, 1, 1, a3);
          return (id)outlined consume of Data._Representation((uint64_t)v70, v29);
        }
        LODWORD(v69) = v34;
        v68 = v29;
        result = objc_msgSend(objc_retainAutorelease(v5), sel_dictionaryRef);
        if (!result)
        {
          __break(1u);
          return result;
        }
        v67 = result;
        SHA256.init()();
        value[0] = (CGPDFDictionaryRef)MEMORY[0x1E0DEE9E8];
        NSDictionary.paperKitHashInto(_:version:includeAPPL:visited:)((uint64_t)v21, v69, 0, (uint64_t)value);
        swift_bridgeObjectRelease();
        SHA256.finalize()();
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA92F8], MEMORY[0x1E0CA92F0]);
        v35 = Digest.makeIterator()();
        v37 = v36;
        (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
        v38 = specialized _copySequenceToContiguousArray<A>(_:)(v35, v37);
        swift_bridgeObjectRelease();
        v39 = specialized Data.init<A>(_:)(v38);
        v41 = v40;
        swift_release();
        v42 = specialized Data.init(paperKitHash:version:)(v39, v41, v69);
        v44 = v43;
        (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v74);

        v45 = (uint64_t)v70;
        v46 = v68;
        specialized static Data.== infix(_:_:)((uint64_t)v70, v68);
        if ((v47 & 1) != 0)
        {
          outlined consume of Data._Representation(v42, v44);
          outlined consume of Data._Representation(v45, v46);
          goto LABEL_20;
        }
        if (one-time initialization token for logger != -1)
          swift_once();
        v61 = type metadata accessor for Logger();
        __swift_project_value_buffer(v61, (uint64_t)logger);
        v62 = Logger.logObject.getter();
        v63 = static os_log_type_t.default.getter();
        v64 = os_log_type_enabled(v62, v63);
        a5 = v77;
        if (v64)
        {
          v65 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v65 = 0;
          _os_log_impl(&dword_1DDB0F000, v62, v63, "Importing PaperKit element from annotation skipped due to hash difference.", v65, 2u);
          MEMORY[0x1DF0E6558](v65, -1, -1);
        }
        outlined consume of Data._Representation(v42, v44);
        outlined consume of Data._Representation(v45, v68);

        return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a5, 1, 1, a3);
      }
    }
    else
    {
      v81[0] = 0;
      if (CGPDFDictionaryGetStream(v23, "PPKHash", v81))
      {
        if (v81[0])
        {
          format = CGPDFDataFormatRaw;
          v31 = CGPDFStreamCopyData(v81[0], &format);
          if (v31)
          {
            v32 = v31;
            *(_OWORD *)value = xmmword_1DDF33630;
            static Data._conditionallyBridgeFromObjectiveC(_:result:)();

            v29 = (unint64_t)value[1];
            if ((unint64_t)value[1] >> 60 != 15)
            {
              v30 = value[0];
              goto LABEL_16;
            }
          }
        }
      }
    }
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(v77, 1, 1, a3);
  }
LABEL_20:
  value[0] = 0;
  if (CGPDFDictionaryGetString(v23, "PPK", value))
  {
    if (value[0])
    {
      v48 = CGPDFStringCopyTextString(value[0]);
      if (v48)
      {
        v49 = (__CFString *)v48;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        v50 = (CGPDFDictionaryRef)Data.init(base64Encoded:options:)();
        v52 = v51;
        swift_bridgeObjectRelease();
        v54 = v77;
        v53 = v78;
        v55 = a3;
        if (v52 >> 60 != 15)
          goto LABEL_32;
        return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v54, 1, 1, v55);
      }
    }
  }
  v81[0] = 0;
  Stream = CGPDFDictionaryGetStream(v23, "PPK", v81);
  v54 = v77;
  v53 = v78;
  v55 = a3;
  if (!Stream)
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v54, 1, 1, v55);
  if (!v81[0])
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v54, 1, 1, v55);
  format = CGPDFDataFormatRaw;
  v57 = CGPDFStreamCopyData(v81[0], &format);
  if (!v57)
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v54, 1, 1, v55);
  v58 = v57;
  *(_OWORD *)value = xmmword_1DDF33630;
  static Data._conditionallyBridgeFromObjectiveC(_:result:)();

  v52 = (unint64_t)value[1];
  if ((unint64_t)value[1] >> 60 == 15)
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v54, 1, 1, v55);
  v50 = value[0];
LABEL_32:
  outlined copy of Data._Representation((uint64_t)v50, v52);
  v59 = v75;
  if (one-time initialization token for allReadableFileFormatVersions != -1)
    swift_once();
  swift_bridgeObjectRetain();
  Capsule<>.init(serializedData:allowedAppFormats:)();
  if (v53)
    return (id)outlined consume of Data._Representation((uint64_t)v50, v52);
  Capsule.Ref.import<A>(_:)();
  v60 = v73;
  Capsule<>.root.getter();
  outlined consume of Data._Representation((uint64_t)v50, v52);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v59, v60);
  return (id)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v54, 0, 1, v55);
}

id CanvasElementPDFAnnotation.decodeCanvasElement<A>(in:assetManager:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  id result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34[32];
  uint64_t v35;

  v31 = a2;
  v32 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>);
  v33 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_9<TaggedCanvasElement>> and conformance CRRegister<A>, (uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>, MEMORY[0x1E0D117A8]);
  v19 = v35;
  result = CanvasElementPDFAnnotation.decodePaperKit<A, B>(type:checkHash:in:)(1, a1, v14, v18, (uint64_t)v13);
  if (!v19)
  {
    v29[1] = a1;
    v30 = v3;
    v35 = v6;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v13, 1, v14) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>?);
      v21 = 1;
      v22 = v32;
      v23 = v35;
    }
    else
    {
      v24 = v17;
      (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v17, v13, v14);
      CRRegister.value.getter();
      v25 = (void (*)(char *, _QWORD))SharedTagged_9.subscript.modify();
      v28 = *(_QWORD *)(v26 + 24);
      v27 = *(_QWORD *)(v26 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v26, v28);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 136))(v30, v31, v28, v27);
      v25(v34, 0);
      v23 = v35;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v5);
      v22 = v32;
      CRRegister.value.getter();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v24, v14);
      v21 = 0;
    }
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v22, v21, 1, v5);
  }
  return result;
}

void Data.paperKitHashVersion.getter(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1DDD81980@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v13;

  if (BYTE6(v1) == 32)
  {
    v3 = 0;
    v4 = 1;
    return v4 | (v3 << 8);
  }
  if (!a1)
  {
    v5 = BYTE6(v1);
    goto LABEL_9;
  }
  if (a1 != 1)
  {
    v7 = *(_QWORD *)(v2 + 16);
    v6 = *(_QWORD *)(v2 + 24);
    v8 = __OFSUB__(v6, v7);
    v5 = v6 - v7;
    if (!v8)
      goto LABEL_9;
LABEL_17:
    __break(1u);
    JUMPOUT(0x1DDD81AB8);
  }
  LODWORD(v5) = HIDWORD(v2) - v2;
  if (__OFSUB__(HIDWORD(v2), (_DWORD)v2))
  {
    __break(1u);
    goto LABEL_17;
  }
  v5 = (int)v5;
  if (v5 != 36)
    goto LABEL_14;
LABEL_9:
  v9 = Data._Representation.subscript.getter();
  v11 = v10;
  if (one-time initialization token for magicNumber != -1)
    swift_once();
  specialized static Data.== infix(_:_:)(v9, v11);
  v13 = v12;
  outlined consume of Data._Representation(v9, v11);
  if ((v13 & 1) != 0)
  {
    v4 = Data.subscript.getter();
    v3 = 0;
  }
  else
  {
LABEL_14:
    v4 = 0;
    v3 = 1;
  }
  return v4 | (v3 << 8);
}

uint64_t closure #1 in CanvasElementPDFAnnotation.encodeCanvasElement<A, B>(_:_:ref:writeCanvasElement:capsule:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  _QWORD v10[4];

  v9 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v10[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  SharedTagged_9.any.getter();
  __swift_project_boxed_opaque_existential_1(v10, v10[3]);
  Capsule.Ref.import<A, B>(_:from:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, a1, v3);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12350]);
  return CRRegister.init(_:)();
}

uint64_t NSArray.paperKitHashInto(_:version:visited:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v7 = type metadata accessor for NSFastEnumerationIterator();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = specialized Set._Variant.insert(_:)((uint64_t *)&v18, v3);
  if ((result & 1) != 0)
  {
    v15 = v8;
    v16 = v7;
    NSArray.makeIterator()();
    NSFastEnumerationIterator.next()();
    while (v22)
    {
      outlined init with take of Any(&v21, &v17);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperKitHashable);
      if (swift_dynamicCast())
      {
        v14 = *((_QWORD *)&v19 + 1);
        v13 = v20;
        __swift_project_boxed_opaque_existential_1(&v18, *((uint64_t *)&v19 + 1));
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 8))(a1, a2, a3, v14, v13);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v18);
      }
      else
      {
        v20 = 0;
        v18 = 0u;
        v19 = 0u;
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v18, &demangling cache variable for type metadata for PaperKitHashable?);
      }
      NSFastEnumerationIterator.next()();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v11, v16);
  }
  return result;
}

uint64_t protocol witness for PaperKitHashable.paperKitHashInto(_:version:visited:) in conformance NSArray(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return NSArray.paperKitHashInto(_:version:visited:)(a1, a2, a3);
}

uint64_t CGFloat.roundedHashUInt.getter(double a1)
{
  uint64_t v3;
  char v4;

  if ((~*(_QWORD *)&a1 & 0x7FF0000000000000) == 0)
    return 0;
  if (one-time initialization token for hashFloatingPointRounding != -1)
    swift_once();
  if (specialized static FixedWidthInteger._convert<A>(from:)((uint64_t)&v3, round(*(double *)&static PaperKitPDFHash.hashFloatingPointRounding * a1))&& v4 != 1)
  {
    return v3;
  }
  else
  {
    return 0;
  }
}

void CGFloat.roundedHash(into:)(double a1)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v2 = CGFloat.roundedHashUInt.getter(a1);
  specialized Data.init<A>(_:)((uint64_t)&v2, (uint64_t)&v3);
  __asm { BR              X10 }
}

uint64_t sub_1DDD81E84()
{
  unint64_t v0;
  uint64_t v1;

  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  outlined consume of Data._Representation(v1, v0);
  return outlined consume of Data._Representation(v1, v0);
}

void CGRect.roundedHash(into:)(double a1, double a2, double a3, double a4)
{
  _QWORD v8[4];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8[0] = CGFloat.roundedHashUInt.getter(a1);
  v8[1] = CGFloat.roundedHashUInt.getter(a2);
  v8[2] = CGFloat.roundedHashUInt.getter(a3);
  v8[3] = CGFloat.roundedHashUInt.getter(a4);
  specialized Data.init<A>(_:)((uint64_t)v8, (uint64_t)&v9);
  __asm { BR              X10 }
}

uint64_t sub_1DDD82108()
{
  unint64_t v0;
  uint64_t v1;

  type metadata accessor for SHA256();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SHA256 and conformance SHA256, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA9940], MEMORY[0x1E0CA9930]);
  dispatch thunk of HashFunction.update(bufferPointer:)();
  outlined consume of Data._Representation(v1, v0);
  return outlined consume of Data._Representation(v1, v0);
}

void NSValue.paperKitHashInto(_:version:visited:)(int a1, char a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  id v12;
  uint64_t v13;
  char v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v20;
  void *v21;
  id v22;
  unint64_t v23;
  double v25;
  id v26;
  unint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v12 = objc_retainAutorelease(v10);
  objc_msgSend(v12, sel_objCType);
  if (String.init(cString:)() == 0xD000000000000020 && v13 == 0x80000001DDF57550)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    objc_msgSend(v12, sel_CGRectValue);
    if (a2 == 1)
    {
      CGRect.rawValue.getter(v15, v16, v17, v18);
      __asm { BR              X10 }
    }
    CGRect.roundedHash(into:)(v15, v16, v17, v18);
    return;
  }
  v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v14 & 1) != 0)
    goto LABEL_5;
  objc_opt_self();
  v20 = swift_dynamicCastObjCClass();
  if (v20)
  {
    v21 = (void *)v20;
    if (a2 == 1)
    {
      v22 = v12;
      objc_msgSend(v21, sel_doubleValue);
      v27 = _OSSwapInt64(v23);
      specialized Data.init<A>(_:)((uint64_t)&v27, (uint64_t)&v28);
      __asm { BR              X10 }
    }
    v26 = v12;
    objc_msgSend(v21, sel_doubleValue);
    CGFloat.roundedHash(into:)(v25);

  }
}

void protocol witness for PaperKitHashable.paperKitHashInto(_:version:visited:) in conformance NSValue(int a1, char a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;

  NSValue.paperKitHashInto(_:version:visited:)(a1, a2, a3, a4, a5, a6, a7, a8, v8, v9);
}

uint64_t protocol witness for PaperKitHashable.paperKitHashInto(_:version:visited:) in conformance NSString()
{
  return specialized NSString.paperKitHashInto(_:version:visited:)();
}

uint64_t NSDictionary.paperKitHashInto(_:version:includeAPPL:visited:)(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t result;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  char v29;
  char v30;
  char v31;
  void *v32;
  uint64_t v33;
  void *v34;
  id v35;
  char v36;
  _BYTE *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[16];
  char *v43;
  unsigned int v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  id v52;
  _BYTE v53[24];
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  _BYTE v61[24];
  _QWORD v62[2];
  _BYTE v63[8];
  uint64_t v64;

  v5 = v4;
  LODWORD(v51) = a3;
  v44 = a2;
  v49 = a1;
  v64 = *MEMORY[0x1E0C80C00];
  v48 = type metadata accessor for String.Encoding();
  v47 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48, v7);
  v46 = &v42[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for NSFastEnumerationIterator();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = &v42[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v45 = a4;
  result = specialized Set._Variant.insert(_:)((uint64_t *)&v58, (uint64_t)v5);
  if ((result & 1) != 0)
  {
    v50 = v10;
    v52 = v5;
    v15 = (char *)objc_msgSend(v5, sel_keyEnumerator);
    NSEnumerator.makeIterator()();
    v43 = v15;

    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFB58], MEMORY[0x1E0CAFB80]);
    dispatch thunk of IteratorProtocol.next()();
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (*((_QWORD *)&v59 + 1))
    {
      outlined init with take of Any(&v58, &v55);
      outlined init with copy of Any((uint64_t)&v55, (uint64_t)v63);
      if (swift_dynamicCast())
      {
        v18 = v62[0];
        v17 = v62[1];
        if ((v51 & 1) != 0
          || (v19._countAndFlagsBits = 0x4C5041412FLL,
              v19._object = (void *)0xE500000000000000,
              !String.hasPrefix(_:)(v19)))
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
          v21 = v16[2];
          v20 = v16[3];
          if (v21 >= v20 >> 1)
            v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v16);
          v16[2] = v21 + 1;
          v22 = &v16[2 * v21];
          v22[4] = v18;
          v22[5] = v17;
          goto LABEL_6;
        }
        swift_bridgeObjectRelease();
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
LABEL_6:
      dispatch thunk of IteratorProtocol.next()();
    }
    (*(void (**)(_BYTE *, uint64_t))(v50 + 8))(v13, v9);

    *(_QWORD *)&v58 = v16;
    swift_bridgeObjectRetain();
    specialized MutableCollection<>.sort(by:)((uint64_t *)&v58);
    swift_bridgeObjectRelease();
    v43 = (char *)v58;
    v23 = *(_QWORD *)(v58 + 16);
    if (v23)
    {
      v24 = MEMORY[0x1E0DEA968];
      v25 = (uint64_t *)(v43 + 40);
      v50 = MEMORY[0x1E0DEE9B8] + 8;
      v51 = xmmword_1DDF32CF0;
      while (1)
      {
        v27 = *(v25 - 1);
        v26 = *v25;
        *(_QWORD *)&v58 = v27;
        *((_QWORD *)&v58 + 1) = v26;
        swift_bridgeObjectRetain_n();
        v28 = objc_msgSend(v52, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
        swift_unknownObjectRelease();
        if (v28)
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          v58 = 0u;
          v59 = 0u;
        }
        outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v58, (uint64_t)v63, &demangling cache variable for type metadata for Any?);
        swift_bridgeObjectRelease();
        if (v27 == 0x656D614E2FLL && v26 == 0xE500000000000000)
        {
          outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v63, (uint64_t)v62, &demangling cache variable for type metadata for Any?);
        }
        else
        {
          v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v63, (uint64_t)v62, &demangling cache variable for type metadata for Any?);
          if ((v29 & 1) == 0)
            goto LABEL_33;
        }
        outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v62, (uint64_t)&v58, &demangling cache variable for type metadata for Any?);
        if (!*((_QWORD *)&v59 + 1))
          break;
        if ((swift_dynamicCast() & 1) == 0)
          goto LABEL_33;
        if (v55 == __PAIR128__(0xE600000000000000, 0x74666172442FLL))
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v62, &demangling cache variable for type metadata for Any?);
          swift_bridgeObjectRelease();
LABEL_17:
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v63, &demangling cache variable for type metadata for Any?);
          swift_bridgeObjectRelease();
          goto LABEL_18;
        }
        v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v62, &demangling cache variable for type metadata for Any?);
        swift_bridgeObjectRelease();
        if ((v30 & 1) != 0)
          goto LABEL_17;
LABEL_34:
        if (v27 == 5456431 && v26 == 0xE300000000000000)
        {
          outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v63, (uint64_t)v61, &demangling cache variable for type metadata for Any?);
        }
        else
        {
          v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v63, (uint64_t)v61, &demangling cache variable for type metadata for Any?);
          if ((v31 & 1) == 0)
          {
            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v61, &demangling cache variable for type metadata for Any?);
            goto LABEL_48;
          }
        }
        outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v61, (uint64_t)&v58, &demangling cache variable for type metadata for Any?);
        if (*((_QWORD *)&v59 + 1))
        {
          type metadata accessor for NSMutableDictionary();
          if ((swift_dynamicCast() & 1) != 0)
          {
            v32 = (void *)v55;
            goto LABEL_43;
          }
        }
        else
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v58, &demangling cache variable for type metadata for Any?);
        }
        v32 = 0;
LABEL_43:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>);
        v33 = swift_allocObject();
        *(_OWORD *)(v33 + 16) = v51;
        *(_QWORD *)(v33 + 32) = 22319;
        *(_QWORD *)(v33 + 40) = 0xE200000000000000;
        *(_QWORD *)(v33 + 88) = MEMORY[0x1E0DEB418];
        *(_QWORD *)(v33 + 56) = v24;
        *(_QWORD *)(v33 + 64) = 0;
        type metadata accessor for NSMutableDictionary();
        v34 = (void *)NSDictionary.init(dictionaryLiteral:)();
        if (v32)
        {
          v35 = v32;
          v36 = static NSObject.== infix(_:_:)();
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v61, &demangling cache variable for type metadata for Any?);

          if ((v36 & 1) != 0)
            goto LABEL_17;
        }
        else
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v61, &demangling cache variable for type metadata for Any?);

        }
LABEL_48:
        outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v63, (uint64_t)v53, &demangling cache variable for type metadata for Any?);
        if (v54)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperKitHashable);
          if ((swift_dynamicCast() & 1) != 0)
          {
            if (*((_QWORD *)&v56 + 1))
            {
              outlined init with take of FindResult(&v55, (uint64_t)&v58);
              v37 = v46;
              static String.Encoding.utf8.getter();
              String.data(using:allowLossyConversion:)();
              v39 = v38;
              swift_bridgeObjectRelease();
              (*(void (**)(_BYTE *, uint64_t))(v47 + 8))(v37, v48);
              if (v39 >> 60 != 15)
                __asm { BR              X9 }
              v40 = *((_QWORD *)&v59 + 1);
              v41 = v60;
              __swift_project_boxed_opaque_existential_1(&v58, *((uint64_t *)&v59 + 1));
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(v41 + 8))(v49, v44, v45, v40, v41);
              outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v63, &demangling cache variable for type metadata for Any?);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
              goto LABEL_18;
            }
          }
          else
          {
            v57 = 0;
            v56 = 0u;
            v55 = 0u;
          }
        }
        else
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v53, &demangling cache variable for type metadata for Any?);
          v55 = 0u;
          v56 = 0u;
          v57 = 0;
        }
        swift_bridgeObjectRelease();
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v63, &demangling cache variable for type metadata for Any?);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v55, &demangling cache variable for type metadata for PaperKitHashable?);
LABEL_18:
        v25 += 2;
        if (!--v23)
          return swift_release();
      }
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&v58, &demangling cache variable for type metadata for Any?);
LABEL_33:
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v62, &demangling cache variable for type metadata for Any?);
      goto LABEL_34;
    }
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for PaperKitHashable.paperKitHashInto(_:version:visited:) in conformance NSDictionary(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return NSDictionary.paperKitHashInto(_:version:includeAPPL:visited:)(a1, a2, 0, a3);
}

BOOL specialized static FixedWidthInteger._convert<A>(from:)(uint64_t a1, double a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v4 = (*(_QWORD *)&a2 >> 52) & 0x7FFLL;
  v5 = *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  v6 = v4 | *(_QWORD *)&a2 & 0xFFFFFFFFFFFFFLL;
  if (!v6)
  {
    v12 = 0;
    result = 1;
    goto LABEL_25;
  }
  if (v4 == 2047)
    goto LABEL_28;
  v7 = Double.exponent.getter();
  if (v7 > 63)
    goto LABEL_28;
  v8 = v7;
  v9 = Double.significandWidth.getter();
  result = v8 >= v9;
  v11 = v9 + __clz(__rbit64(v5));
  v12 = v8 - v11;
  if (__OFSUB__(v8, v11))
  {
    __break(1u);
LABEL_27:
    if (a2 < 0.0)
    {
LABEL_36:
      LOBYTE(v6) = 0;
      v12 = 0x8000000000000000;
      goto LABEL_25;
    }
LABEL_28:
    v12 = 0;
    result = 0;
    LOBYTE(v6) = 1;
    goto LABEL_25;
  }
  if (v11 > 63)
  {
    if (v12 < -64 || v12 > 64)
      goto LABEL_11;
  }
  else if (v12 < -64 || v12 > 64)
  {
    goto LABEL_11;
  }
  if (v12 < 0)
    goto LABEL_32;
  if ((unint64_t)v12 < 0x40)
  {
    v14 = v5 << v12;
    if (v8 != 63)
      goto LABEL_17;
LABEL_34:
    if (a2 < 0.0 && !v14)
      goto LABEL_36;
    goto LABEL_28;
  }
LABEL_11:
  if (v8 == 63)
    goto LABEL_27;
  v13 = 0;
  v14 = 0;
  if (v8 < 0)
    goto LABEL_20;
LABEL_19:
  v13 = 1 << v8;
LABEL_20:
  while (1)
  {
    v12 = v14 | v13;
    if (a2 >= 0.0)
      break;
    if ((v12 & 0x8000000000000000) == 0)
    {
      LOBYTE(v6) = 0;
      v12 = -v12;
      goto LABEL_25;
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    if ((unint64_t)v12 <= 0xFFFFFFFFFFFFFFC0)
      goto LABEL_11;
    v14 = v5 >> -(char)v12;
    if (v8 == 63)
      goto LABEL_34;
LABEL_17:
    if ((v8 & 0x8000000000000000) == 0)
      goto LABEL_19;
    v13 = 0;
  }
  if (v12 < 0)
    goto LABEL_31;
  LOBYTE(v6) = 0;
LABEL_25:
  *(_QWORD *)a1 = v12;
  *(_BYTE *)(a1 + 8) = v6;
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v27 = __src;
  v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v17 = &v4[16 * v13];
      v25 = v17;
      v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v18 = (char *)(a3 - 16);
        v19 = v6;
        while (1)
        {
          v20 = v18 + 16;
          v21 = *((_QWORD *)v19 - 2);
          v22 = *((_QWORD *)v19 - 1);
          v19 -= 16;
          v23 = *((_QWORD *)v17 - 2) == v21 && *((_QWORD *)v17 - 1) == v22;
          if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17)
              *(_OWORD *)v18 = *((_OWORD *)v17 - 1);
            v19 = v6;
            v17 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v20 != v6 || v18 >= v6)
              *(_OWORD *)v18 = *(_OWORD *)v19;
            v27 = v19;
            if (v19 <= v7)
              goto LABEL_50;
          }
          v18 -= 16;
          v6 = v19;
          if (v17 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v26 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v27 = v7;
    }
LABEL_50:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  const void *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  char *v23;
  BOOL v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  char *v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t result;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  char *v52;
  const void *v53;
  char *v54;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 48;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 48;
  v54 = __src;
  v53 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -47)
    {
      v27 = 48 * v11;
      if (__dst != a2 || &a2[v27] <= __dst)
        memmove(__dst, a2, 48 * v11);
      v28 = &v4[v27];
      v52 = v28;
      v54 = v6;
      if (v7 < v6 && v10 >= 48)
      {
        v29 = (char *)(a3 - 48);
        v30 = v6;
        do
        {
          v33 = v29 + 48;
          v34 = *((_QWORD *)v28 - 2);
          v35 = *(v28 - 8);
          v36 = *((_OWORD *)v30 - 3);
          v30 -= 48;
          v37 = *((_QWORD *)v30 + 4);
          v38 = v30[40];
          v39 = *((_OWORD *)v28 - 2);
          v40 = *((_OWORD *)v30 + 1);
          v48 = *((_OWORD *)v28 - 3);
          v49 = v39;
          v50 = v34;
          v51 = v35;
          v44 = v36;
          v45 = v40;
          v46 = v37;
          v47 = v38;
          if ((specialized static PaperDocumentFindResult.Content.< infix(_:_:)((uint64_t)&v48, (uint64_t)&v44) & 1) != 0)
          {
            if (v33 != v6 || v29 >= v6)
            {
              v31 = *(_OWORD *)v30;
              v32 = *((_OWORD *)v30 + 2);
              *((_OWORD *)v29 + 1) = *((_OWORD *)v30 + 1);
              *((_OWORD *)v29 + 2) = v32;
              *(_OWORD *)v29 = v31;
            }
            v54 = v30;
            if (v30 <= v7)
              break;
          }
          else
          {
            v52 = v28 - 48;
            if (v33 < v28 || v29 >= v28 || v33 != v28)
            {
              v41 = *((_OWORD *)v28 - 3);
              v42 = *((_OWORD *)v28 - 1);
              *((_OWORD *)v29 + 1) = *((_OWORD *)v28 - 2);
              *((_OWORD *)v29 + 2) = v42;
              *(_OWORD *)v29 = v41;
            }
            v30 = v6;
            v28 -= 48;
            if (v6 <= v7)
              break;
          }
          v29 -= 48;
          v6 = v30;
        }
        while (v28 > v4);
      }
LABEL_41:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v54, &v53, &v52);
      return 1;
    }
  }
  else if (v8 >= -47)
  {
    v12 = 48 * v9;
    if (__dst != __src || &__src[v12] <= __dst)
      memmove(__dst, __src, v12);
    v13 = &v4[v12];
    v52 = v13;
    if ((unint64_t)v6 < a3 && v8 >= 48)
    {
      v14 = v53;
      while (1)
      {
        v15 = *((_QWORD *)v6 + 4);
        v16 = v6[40];
        v17 = *((_QWORD *)v4 + 4);
        v18 = v4[40];
        v19 = *((_OWORD *)v6 + 1);
        v20 = *(_OWORD *)v4;
        v21 = *((_OWORD *)v4 + 1);
        v48 = *(_OWORD *)v6;
        v49 = v19;
        v50 = v15;
        v51 = v16;
        v44 = v20;
        v45 = v21;
        v46 = v17;
        v47 = v18;
        if ((specialized static PaperDocumentFindResult.Content.< infix(_:_:)((uint64_t)&v48, (uint64_t)&v44) & 1) != 0)break;
        v14 = v4 + 48;
        v23 = v4;
        v22 = v6;
        v24 = v7 == v4;
        v4 += 48;
        if (!v24)
          goto LABEL_18;
LABEL_19:
        v7 += 48;
        if (v4 < v13)
        {
          v6 = v22;
          if ((unint64_t)v22 < a3)
            continue;
        }
        v53 = v14;
        v54 = v7;
        goto LABEL_41;
      }
      v22 = v6 + 48;
      if (v7 < v6 || v7 >= v22)
      {
        v23 = v6;
      }
      else
      {
        v23 = v6;
        if (v7 == v6)
          goto LABEL_19;
      }
LABEL_18:
      v25 = *(_OWORD *)v23;
      v26 = *((_OWORD *)v23 + 2);
      *((_OWORD *)v7 + 1) = *((_OWORD *)v23 + 1);
      *((_OWORD *)v7 + 2) = v26;
      *(_OWORD *)v7 = v25;
      goto LABEL_19;
    }
    goto LABEL_41;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized CanvasElementPDFAnnotation.encodeCanvasElement<A, B>(_:_:ref:writeCanvasElement:capsule:)(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char *a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  void (**v46)(void *);
  uint64_t v47;
  id v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v62 = a8;
  v52 = a7;
  v51 = a6;
  v53 = a4;
  LODWORD(v54) = a3;
  v60 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  v58 = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(v58 + 64);
  MEMORY[0x1E0C80A78](v11, v13);
  v55 = (uint64_t)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v50 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>?);
  v56 = *(_QWORD *)(v18 - 8);
  v19 = *(_QWORD *)(v56 + 64);
  MEMORY[0x1E0C80A78](v18, v20);
  v57 = (uint64_t)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v50 - v23;
  v25 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v25, v26);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>);
  v63 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v50 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  static CRKeyPath.unique.getter();
  v64 = a5;
  v65 = v51;
  v66 = v52;
  v67 = v62;
  v68 = a9;
  v69 = a2;
  v31 = a2;
  v70 = v53;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_9<TaggedCanvasElement>> and conformance CRRegister<A>, (uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>, MEMORY[0x1E0D117A8]);
  v62 = v30;
  Capsule<>.init(id:initClosure:)();
  v59 = v27;
  if ((v54 & 1) != 0)
  {
    v32 = v63;
    (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v24, v62, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v24, 0, 1, v27);
    v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v17, 1, 1, v33);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v63 + 56))(v24, 1, 1, v27);
    v34 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
    v35 = *(_QWORD *)(v34 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v17, v31, v34);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v17, 0, 1, v34);
  }
  v36 = v57;
  v54 = (uint64_t)v24;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v24, v57, &demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>?);
  v37 = v55;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v17, v55, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  v38 = (*(unsigned __int8 *)(v56 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
  v39 = (v19 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
  v40 = (*(unsigned __int8 *)(v58 + 80) + v39 + 8) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
  v41 = v40 + v12;
  v42 = swift_allocObject();
  v43 = (v41 & 0xFFFFFFFFFFFFFFF8) + v42;
  outlined init with take of (key: Int, value: AnyCRValue)?(v36, v42 + v38, &demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>?);
  v44 = (uint64_t)v17;
  v45 = v60;
  *(_QWORD *)(v42 + v39) = v60;
  outlined init with take of (key: Int, value: AnyCRValue)?(v37, v42 + v40, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  *(_BYTE *)(v42 + v41) = 1;
  *(_QWORD *)(v43 + 8) = 0;
  *(_QWORD *)(v43 + 16) = 0;
  v46 = (void (**)(void *))(v61
                                     + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation);
  v47 = *(_QWORD *)(v61 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writePaperKitAnnotation);
  *v46 = _s8PaperKit26CanvasElementPDFAnnotationC06encodeaB0_7capsule3ref9writeHash0I4Typey9Coherence9CRContextC_AI7CapsuleVyxGSgAI14SharedTagged_9VyAA0pcD0VGSgSbSSSgtAI4CRDTRzlFySo19NSMutableDictionaryCcfU_AI10CRRegisterVyATG_Tg5TA_0;
  v46[1] = (void (*)(void *))v42;
  v48 = v45;
  outlined consume of (@escaping @callee_guaranteed () -> ())?(v47);
  outlined destroy of StocksKitCurrencyCache.Provider?(v44, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  outlined destroy of StocksKitCurrencyCache.Provider?(v54, &demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>?);
  return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v62, v59);
}

uint64_t specialized NSString.paperKitHashInto(_:version:visited:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  _QWORD v8[4];

  v8[3] = *MEMORY[0x1E0C80C00];
  v0 = type metadata accessor for String.Encoding();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0, v2);
  v4 = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static String.Encoding.utf8.getter();
  String.data(using:allowLossyConversion:)();
  v6 = v5;
  swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  if (v6 >> 60 != 15)
    __asm { BR              X10 }
  return result;
}

unint64_t type metadata accessor for NSMutableDictionary()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSMutableDictionary;
  if (!lazy cache variable for type metadata for NSMutableDictionary)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSMutableDictionary);
  }
  return result;
}

uint64_t specialized Data.init(paperKitHash:version:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 != 1)
  {
    if (one-time initialization token for magicNumber != -1)
      swift_once();
    v6 = static PaperKitPDFHash.magicNumber;
    v7 = *(_QWORD *)algn_1F042EBD8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1DDF33AB0;
    *(_BYTE *)(v8 + 32) = 0;
    *(_BYTE *)(v8 + 33) = a3;
    outlined copy of Data._Representation(v6, v7);
    v9 = specialized Data.init<A>(_:)(v8);
    v11 = v10;
    swift_bridgeObjectRelease();
    outlined copy of Data._Representation(v6, v7);
    specialized Data.append<A>(contentsOf:)(v9, v11);
    outlined consume of Data._Representation(v9, v11);
    outlined consume of Data._Representation(v6, v7);
    outlined copy of Data._Representation(v6, v7);
    outlined copy of Data._Representation(a1, a2);
    specialized Data.append<A>(contentsOf:)(a1, a2);
    outlined consume of Data._Representation(a1, a2);
    outlined consume of Data._Representation(v6, v7);
    specialized Data.init<A>(_:)(v6, v7);
    v13 = v12;
    outlined consume of Data._Representation(a1, a2);
    return v13;
  }
  return a1;
}

uint64_t outlined init with copy of UnknownCanvasElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnknownCanvasElement();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in CanvasElementPDFAnnotation.encodeCanvasElement<A, B>(_:_:ref:writeCanvasElement:capsule:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in CanvasElementPDFAnnotation.encodeCanvasElement<A, B>(_:_:ref:writeCanvasElement:capsule:)(*(_QWORD *)(v1 + 56), a1);
}

uint64_t sub_1DDD84960()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?)
                 - 8);
  v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v0 + v2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);

  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(v0 + v5, 1, v9))
    (*(void (**)(unint64_t, uint64_t))(v10 + 8))(v0 + v5, v9);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void _s8PaperKit26CanvasElementPDFAnnotationC06encodeaB0_7capsule3ref9writeHash0I4Typey9Coherence9CRContextC_AI7CapsuleVyxGSgAI14SharedTagged_9VyAA0pcD0VGSgSbSSSgtAI4CRDTRzlFySo19NSMutableDictionaryCcfU_AI10CRRegisterVyATG_Tg5TA_0(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>?)
                 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?)
                 - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  specialized closure #1 in CanvasElementPDFAnnotation.encodePaperKit<A>(_:capsule:ref:writeHash:writeType:)(a1, (void *)(v1 + v4), *(_QWORD *)(v1 + v5), v1 + v7, *(unsigned __int8 *)(v1 + v7 + *(_QWORD *)(v6 + 64)), *(_QWORD *)(((v7 + *(_QWORD *)(v6 + 64)) & 0xFFFFFFFFFFFFFFF8) + v1 + 8), *(_QWORD *)(((v7 + *(_QWORD *)(v6 + 64)) & 0xFFFFFFFFFFFFFFF8) + v1 + 16));
}

uint64_t PaperRenderable.renderedImage(in:)()
{
  uint64_t v0;

  return protocol witness for PaperRenderable.renderedImage(in:) in conformance Paper(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 0);
}

uint64_t PaperRenderableOptions.useSixChannelBlending.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t PaperRenderableOptions.useSixChannelBlending.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*PaperRenderableOptions.useSixChannelBlending.modify())(_QWORD, _QWORD)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t PaperRenderableOptions.darkMode.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t PaperRenderableOptions.darkMode.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*PaperRenderableOptions.darkMode.modify())(_QWORD, _QWORD)
{
  return UnknownCanvasElementView.flags.modify;
}

uint64_t PaperRenderableOptions.isRTL.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t PaperRenderableOptions.isRTL.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = result;
  return result;
}

uint64_t (*PaperRenderableOptions.isRTL.modify())(_QWORD, _QWORD)
{
  return UnknownCanvasElementView.flags.modify;
}

void *PaperRenderableOptions.tintColor.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 8);
  v2 = v1;
  return v1;
}

void PaperRenderableOptions.tintColor.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = a1;
}

uint64_t (*PaperRenderableOptions.tintColor.modify())(_QWORD, _QWORD)
{
  return UnknownCanvasElementView.flags.modify;
}

double PaperRenderableOptions.init(useSixChannelBlending:darkMode:isRTL:)@<D0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  double result;

  *(_BYTE *)a4 = a1;
  *(_BYTE *)(a4 + 1) = a2;
  *(_BYTE *)(a4 + 2) = a3;
  *(_QWORD *)(a4 + 8) = 0;
  *(_BYTE *)(a4 + 16) = 0;
  result = 0.0;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_BYTE *)(a4 + 56) = 1;
  *(_QWORD *)(a4 + 64) = 0;
  *(_DWORD *)(a4 + 71) = 0;
  return result;
}

uint64_t PaperRenderableOptions.init(useSixChannelBlending:darkMode:isRTL:isTopLevel:containerBounds:pdfPage:renderDebugDrawing:renderDebugUnknownElements:)@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, void *a6@<X5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>)
{
  __int128 v17;
  __int128 v18;
  char v19;
  uint64_t result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  char v25;

  outlined init with take of CGRect?(a5, (uint64_t)&v23);
  v17 = v23;
  v18 = v24;
  v19 = v25;
  if (a6)
  {
    v21 = v24;
    v22 = v23;
    type metadata accessor for PaperKitPDFPage(0);
    result = swift_dynamicCastClass();
    if (!result)
    {

      result = 0;
    }
    v18 = v21;
    v17 = v22;
  }
  else
  {
    result = 0;
  }
  *(_BYTE *)a9 = a1 & 1;
  *(_BYTE *)(a9 + 1) = a2 & 1;
  *(_BYTE *)(a9 + 2) = a3 & 1;
  *(_QWORD *)(a9 + 8) = 0;
  *(_BYTE *)(a9 + 16) = a4 & 1;
  *(_OWORD *)(a9 + 24) = v17;
  *(_OWORD *)(a9 + 40) = v18;
  *(_BYTE *)(a9 + 56) = v19;
  *(_QWORD *)(a9 + 64) = result;
  *(_BYTE *)(a9 + 72) = a7 & 1;
  *(_BYTE *)(a9 + 73) = a8 & 1;
  *(_BYTE *)(a9 + 74) = 0;
  return result;
}

void destroy for PaperRenderableOptions(uint64_t a1)
{

}

uint64_t initializeWithCopy for PaperRenderableOptions(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v3 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v4 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v4;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
  v5 = v3;
  v6 = v4;
  return a1;
}

uint64_t assignWithCopy for PaperRenderableOptions(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  __int128 v7;
  __int128 v8;
  void *v9;
  void *v10;
  id v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(void **)(a1 + 8);
  v5 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  v6 = v5;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_OWORD *)(a2 + 24);
  v8 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v8;
  *(_OWORD *)(a1 + 24) = v7;
  v9 = *(void **)(a1 + 64);
  v10 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  v11 = v10;

  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  return a1;
}

__n128 __swift_memcpy75_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 59) = *(_OWORD *)(a2 + 59);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for PaperRenderableOptions(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v5 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);

  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  return a1;
}

uint64_t getEnumTagSinglePayload for PaperRenderableOptions(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 75))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PaperRenderableOptions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 74) = 0;
    *(_WORD *)(result + 72) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 75) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 75) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PaperRenderableOptions()
{
  return &type metadata for PaperRenderableOptions;
}

uint64_t dispatch thunk of PaperRenderable.frame.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PaperRenderable.render<A>(in:id:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v17;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a8 + 16) + *(_QWORD *)(a8 + 16));
  v17 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 16) = v17;
  *v17 = v8;
  v17[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return v19(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t dispatch thunk of PaperRenderable.renderedImage(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 24) + *(_QWORD *)(a3 + 24));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  return v9(a1, a2, a3);
}

uint64_t protocol witness for PaperRenderable.renderedImage(in:) in conformance Paper()
{
  uint64_t v0;

  return protocol witness for PaperRenderable.renderedImage(in:) in conformance Paper(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 0);
}

uint64_t protocol witness for PaperRenderable.renderedImage(in:) in conformance Paper(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

void *specialized UIView.firstDescendent(where:)(void *a1)
{
  return specialized UIView.firstDescendent(where:)(a1, (void (*)(_QWORD))type metadata accessor for TiledTextView, (uint64_t (*)(id))specialized UIView.firstDescendent(where:));
}

{
  return specialized UIView.firstDescendent(where:)(a1, (void (*)(_QWORD))type metadata accessor for PaperDocumentView, (uint64_t (*)(id))specialized UIView.firstDescendent(where:));
}

void *specialized UIView.firstDescendent(where:)(void *a1, void (*a2)(_QWORD), uint64_t (*a3)(id))
{
  uint64_t v3;
  id v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;

  a2(0);
  if (swift_dynamicCastClass())
  {
    v6 = a1;
  }
  else
  {
    v7 = objc_msgSend(a1, sel_subviews);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v8 >> 62)
      goto LABEL_17;
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v9)
    {
      v10 = 4;
      while (1)
      {
        v11 = (v8 & 0xC000000000000001) != 0
            ? (id)MEMORY[0x1DF0E4D64](v10 - 4, v8)
            : *(id *)(v8 + 8 * v10);
        v12 = v11;
        v13 = v10 - 3;
        if (__OFADD__(v10 - 4, 1))
          break;
        a1 = (void *)a3(v11);

        if (v3 || a1)
        {
          swift_bridgeObjectRelease();
          return a1;
        }
        ++v10;
        if (v13 == v9)
          goto LABEL_13;
      }
      __break(1u);
LABEL_17:
      swift_bridgeObjectRetain();
      v9 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_13:
    swift_bridgeObjectRelease();
    return 0;
  }
  return a1;
}

void specialized Sequence.contains(where:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  id v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
    lazy protocol witness table accessor for type UITouch and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    v1 = v18;
    v17 = v19;
    v2 = v20;
    v3 = v21;
    v4 = v22;
  }
  else
  {
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v17 = a1 + 56;
    v2 = ~v5;
    v6 = -v5;
    if (v6 < 64)
      v7 = ~(-1 << v6);
    else
      v7 = -1;
    v4 = v7 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v3 = 0;
  }
  v16 = (unint64_t)(v2 + 64) >> 6;
  while (1)
  {
    v8 = v3;
    if ((v1 & 0x8000000000000000) == 0)
      break;
    if (!__CocoaSet.Iterator.next()())
      goto LABEL_36;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v11 = v23;
    swift_unknownObjectRelease();
    if (!v23)
      goto LABEL_36;
LABEL_31:
    if (objc_msgSend(v11, sel_type) == (id)3)
    {

LABEL_36:
      outlined consume of [AnyHashable : Any].Iterator._Variant();
      return;
    }
    v15 = objc_msgSend(v11, sel_type);

    if (v15 == (id)2)
      goto LABEL_36;
  }
  if (v4)
  {
    v9 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    v10 = v9 | (v3 << 6);
LABEL_30:
    v11 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v10);
    if (!v11)
      goto LABEL_36;
    goto LABEL_31;
  }
  v12 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v12 >= v16)
      goto LABEL_36;
    v13 = *(_QWORD *)(v17 + 8 * v12);
    ++v3;
    if (!v13)
    {
      v3 = v8 + 2;
      if (v8 + 2 >= v16)
        goto LABEL_36;
      v13 = *(_QWORD *)(v17 + 8 * v3);
      if (!v13)
      {
        v3 = v8 + 3;
        if (v8 + 3 >= v16)
          goto LABEL_36;
        v13 = *(_QWORD *)(v17 + 8 * v3);
        if (!v13)
        {
          v3 = v8 + 4;
          if (v8 + 4 >= v16)
            goto LABEL_36;
          v13 = *(_QWORD *)(v17 + 8 * v3);
          if (!v13)
          {
            v3 = v8 + 5;
            if (v8 + 5 >= v16)
              goto LABEL_36;
            v13 = *(_QWORD *)(v17 + 8 * v3);
            if (!v13)
            {
              v14 = v8 + 6;
              while (v16 != v14)
              {
                v13 = *(_QWORD *)(v17 + 8 * v14++);
                if (v13)
                {
                  v3 = v14 - 1;
                  goto LABEL_29;
                }
              }
              goto LABEL_36;
            }
          }
        }
      }
    }
LABEL_29:
    v4 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v3 << 6);
    goto LABEL_30;
  }
  __break(1u);
}

uint64_t Array<A>.pasteboardPaperKitURL.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  _BYTE v71[32];
  __int128 v72;

  v66 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v3, v4);
  v65 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v68 = (char *)&v62 - v8;
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v62 - v11;
  v13 = type metadata accessor for URL();
  v69 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v62 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v62 - v18;
  v20 = *(_QWORD *)(a1 + 16);
  v67 = v21;
  if (v20)
  {
    v63 = (char *)&v62 - v18;
    v64 = v12;
    swift_bridgeObjectRetain();
    v22 = 0;
    v23 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v70 = xmmword_1DDF33630;
    do
    {
      v25 = *(_QWORD *)(a1 + 8 * v22 + 32);
      v26 = *(_QWORD *)(v25 + 16);
      swift_bridgeObjectRetain();
      if (!v26
        || (v27 = specialized __RawDictionaryStorage.find<A>(_:)(0x6C7070612E6D6F63, 0xEF72657061702E65),
            (v28 & 1) == 0)
        || (outlined init with copy of Any(*(_QWORD *)(v25 + 56) + 32 * v27, (uint64_t)v71),
            (swift_dynamicCast() & 1) == 0))
      {
        v72 = v70;
      }
      swift_bridgeObjectRelease();
      v29 = *((_QWORD *)&v72 + 1);
      if (*((_QWORD *)&v72 + 1) >> 60 != 15)
      {
        v30 = v72;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v23[2] + 1, 1, v23);
        v32 = v23[2];
        v31 = v23[3];
        if (v32 >= v31 >> 1)
          v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v23);
        v23[2] = v32 + 1;
        v24 = &v23[2 * v32];
        v24[4] = v30;
        v24[5] = v29;
      }
      ++v22;
    }
    while (v20 != v22);
    swift_bridgeObjectRelease();
    v13 = v67;
    v19 = v63;
    v12 = v64;
    if (v23[2])
    {
LABEL_15:
      v34 = v23[4];
      v33 = v23[5];
      outlined copy of Data._Representation(v34, v33);
      swift_bridgeObjectRelease();
      v35 = (uint64_t)v68;
      v36 = v69;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v69 + 56))(v68, 1, 1, v13);
      outlined copy of Data._Representation(v34, v33);
      URL.init(dataRepresentation:relativeTo:isAbsolute:)();
      outlined destroy of URL?(v35);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v12, 1, v13) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v19, v12, v13);
        v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, uti: String));
        v53 = v66;
        v54 = (_QWORD *)(v66 + *(int *)(v52 + 48));
        (*(void (**)(uint64_t, char *, uint64_t))(v36 + 16))(v66, v19, v13);
        outlined consume of Data._Representation(v34, v33);
        outlined consume of Data._Representation(v34, v33);
        (*(void (**)(char *, uint64_t))(v36 + 8))(v19, v13);
        *v54 = 0x6C7070612E6D6F63;
        v54[1] = 0xEF72657061702E65;
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v53, 0, 1, v52);
      }
      outlined consume of Data._Representation(v34, v33);
      outlined destroy of URL?((uint64_t)v12);
      if (!v20)
        goto LABEL_17;
      goto LABEL_20;
    }
  }
  else
  {
    v23 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
      goto LABEL_15;
  }
  swift_bridgeObjectRelease();
  v34 = 0;
  v33 = 0xF000000000000000;
  v36 = v69;
  if (!v20)
  {
LABEL_17:
    v37 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_33;
  }
LABEL_20:
  v63 = (char *)v34;
  v64 = (char *)v33;
  swift_bridgeObjectRetain();
  v38 = 0;
  v37 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v70 = xmmword_1DDF33630;
  do
  {
    v40 = *(_QWORD *)(a1 + 8 * v38 + 32);
    v41 = *(_QWORD *)(v40 + 16);
    swift_bridgeObjectRetain();
    if (!v41
      || (v42 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000017, 0x80000001DDF4B920),
          (v43 & 1) == 0)
      || (outlined init with copy of Any(*(_QWORD *)(v40 + 56) + 32 * v42, (uint64_t)v71), (swift_dynamicCast() & 1) == 0))
    {
      v72 = v70;
    }
    swift_bridgeObjectRelease();
    v44 = *((_QWORD *)&v72 + 1);
    if (*((_QWORD *)&v72 + 1) >> 60 != 15)
    {
      v45 = v72;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37[2] + 1, 1, v37);
      v47 = v37[2];
      v46 = v37[3];
      if (v47 >= v46 >> 1)
        v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v46 > 1), v47 + 1, 1, v37);
      v37[2] = v47 + 1;
      v39 = &v37[2 * v47];
      v39[4] = v45;
      v39[5] = v44;
    }
    ++v38;
  }
  while (v20 != v38);
  swift_bridgeObjectRelease();
  v13 = v67;
  v36 = v69;
  v34 = (uint64_t)v63;
  v33 = (unint64_t)v64;
LABEL_33:
  v48 = (uint64_t)v65;
  v49 = (uint64_t)v68;
  if (!v37[2])
  {
    swift_bridgeObjectRelease();
    outlined consume of Data?(v34, v33);
    goto LABEL_38;
  }
  v50 = v37[4];
  v51 = v37[5];
  outlined copy of Data._Representation(v50, v51);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v49, 1, 1, v13);
  outlined copy of Data._Representation(v50, v51);
  URL.init(dataRepresentation:relativeTo:isAbsolute:)();
  outlined destroy of URL?(v49);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v48, 1, v13) == 1)
  {
    outlined consume of Data?(v34, v33);
    outlined consume of Data._Representation(v50, v51);
    outlined consume of Data._Representation(v50, v51);
    outlined destroy of URL?(v48);
LABEL_38:
    v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, uti: String));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v66, 1, 1, v56);
  }
  v57 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v62, v48, v13);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (url: URL, uti: String));
  v59 = v36;
  v60 = v66;
  v61 = (_QWORD *)(v66 + *(int *)(v58 + 48));
  (*(void (**)(uint64_t, char *, uint64_t))(v59 + 16))(v66, v57, v13);
  outlined consume of Data._Representation(v50, v51);
  outlined consume of Data._Representation(v50, v51);
  outlined consume of Data?(v34, v33);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v57, v13);
  *v61 = 0xD000000000000017;
  v61[1] = 0x80000001DDF4B920;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v60, 0, 1, v58);
}

void PrecisePanGestureRecognizer.touchesBegan(_:with:)(uint64_t a1, void *a2)
{
  char *v2;
  char *v3;
  _QWORD *v6;
  void *v7;
  char v8;
  double v9;
  char v10;
  id v11;
  Class isa;
  objc_super v13;

  v3 = v2;
  if (!objc_msgSend(v2, sel_state))
  {
    if (v2[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_isPrecise] != 1
      || (v6 = (_QWORD *)MEMORY[0x1DF0E666C](&v2[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_canvasElement])) != 0
      && (v7 = v6,
          v8 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v6) + 0x228))(),
          v7,
          (v8 & 1) == 0)
      || (specialized Sequence.contains(where:)(a1), v9 = 0.0, (v10 & 1) == 0))
    {
      objc_msgSend((id)objc_opt_self(), sel__defaultHysteresis);
    }
    objc_msgSend(v3, sel__setHysteresis_, v9);
    v11 = objc_msgSend(a2, sel_modifierFlags);
    *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_initialModifierFlags] = v11;
    *(CFTimeInterval *)&v3[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_touchesBeganTimestamp] = CACurrentMediaTime();
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  isa = Set._bridgeToObjectiveC()().super.isa;
  v13.receiver = v3;
  v13.super_class = (Class)type metadata accessor for PrecisePanGestureRecognizer();
  objc_msgSendSuper2(&v13, sel_touchesBegan_withEvent_, isa, a2);

}

void PrecisePanGestureRecognizer.touchesMoved(_:with:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  double v5;
  _QWORD *v6;
  void *v7;
  char v8;
  Class isa;
  objc_super v10;

  v3 = v2;
  v5 = CACurrentMediaTime();
  v6 = (_QWORD *)MEMORY[0x1DF0E666C](&v2[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_canvasElement]);
  if (!v6
    || (v7 = v6, v8 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v6) + 0x228))(), v7, (v8 & 1) != 0)
    || objc_msgSend(v3, sel_state)
    || v5 - *(double *)&v3[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_touchesBeganTimestamp] >= *(double *)&v3[OBJC_IVAR____TtC8PaperKit27PrecisePanGestureRecognizer_tapAndHoldTimeout])
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
    lazy protocol witness table accessor for type UITouch and conformance NSObject();
    isa = Set._bridgeToObjectiveC()().super.isa;
    v10.receiver = v3;
    v10.super_class = (Class)type metadata accessor for PrecisePanGestureRecognizer();
    objc_msgSendSuper2(&v10, sel_touchesMoved_withEvent_, isa, a2);

  }
  else
  {
    objc_msgSend(v3, sel_setState_, 5);
  }
}

uint64_t @objc PrecisePanGestureRecognizer.touchesBegan(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, id))
{
  uint64_t v8;
  id v9;
  id v10;

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = a4;
  v10 = a1;
  a5(v8, v9);

  return swift_bridgeObjectRelease();
}

id PrecisePanGestureRecognizer.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PrecisePanGestureRecognizer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for PrecisePanGestureRecognizer()
{
  return objc_opt_self();
}

UIFont_optional __swiftcall UIFont.applyingWeight(_:)(UIFontWeight a1)
{
  void *v1;
  uint64_t inited;
  void *v4;
  id v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  unint64_t v10;
  id v11;
  Class isa;
  id v13;
  id v14;
  double v15;
  double v16;
  objc_class *v17;
  Swift::Bool v18;
  objc_class *v19;
  UIFont_optional result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UIFontDescriptorTraitKey, UIFontWeight)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
  v4 = (void *)*MEMORY[0x1E0DC1458];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1458];
  *(UIFontWeight *)(inited + 40) = a1;
  v5 = v4;
  v6 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UIFontDescriptorAttributeName, [UIFontDescriptorTraitKey : UIFontWeight])>);
  v7 = swift_initStackObject();
  *(_OWORD *)(v7 + 16) = xmmword_1DDF32CF0;
  v8 = (void *)*MEMORY[0x1E0DC13C0];
  *(_QWORD *)(v7 + 32) = *MEMORY[0x1E0DC13C0];
  *(_QWORD *)(v7 + 40) = v6;
  v9 = v8;
  v10 = specialized Dictionary.init(dictionaryLiteral:)(v7);
  v11 = objc_msgSend(v1, sel_fontDescriptor);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v10);
  swift_bridgeObjectRelease();
  type metadata accessor for UIFontDescriptorAttributeName(0);
  lazy protocol witness table accessor for type UIFontDescriptorAttributeName and conformance UIFontDescriptorAttributeName();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v13 = objc_msgSend(v11, sel_fontDescriptorByAddingAttributes_, isa);

  v14 = objc_msgSend(v1, sel_fontDescriptor);
  objc_msgSend(v14, sel_pointSize);
  v16 = v15;

  v17 = (objc_class *)objc_msgSend((id)objc_opt_self(), sel_fontWithDescriptor_size_, v13, v16);
  v19 = v17;
  result.value.super.isa = v19;
  result.is_nil = v18;
  return result;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void specialized static NSLayoutConstraint.constrain(_:to:)(void *a1, void *a2)
{
  void *v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  Class isa;

  v4 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1DDF329D0;
  v6 = objc_msgSend(a1, sel_leadingAnchor);
  v7 = objc_msgSend(a2, sel_leadingAnchor);
  v8 = objc_msgSend(v6, sel_constraintEqualToAnchor_, v7);

  *(_QWORD *)(v5 + 32) = v8;
  v9 = objc_msgSend(a1, sel_trailingAnchor);
  v10 = objc_msgSend(a2, sel_trailingAnchor);
  v11 = objc_msgSend(v9, sel_constraintEqualToAnchor_, v10);

  *(_QWORD *)(v5 + 40) = v11;
  v12 = objc_msgSend(a1, sel_topAnchor);
  v13 = objc_msgSend(a2, sel_topAnchor);
  v14 = objc_msgSend(v12, sel_constraintEqualToAnchor_, v13);

  *(_QWORD *)(v5 + 48) = v14;
  v15 = objc_msgSend(a1, sel_bottomAnchor);
  v16 = objc_msgSend(a2, sel_bottomAnchor);
  v17 = objc_msgSend(v15, sel_constraintEqualToAnchor_, v16);

  *(_QWORD *)(v5 + 56) = v17;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_activateConstraints_, isa);

}

uint64_t Paper.drawing.getter()
{
  return Paper.drawing.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11730]);
}

uint64_t type metadata accessor for Paper()
{
  uint64_t result;

  result = type metadata singleton initialization cache for Paper;
  if (!type metadata singleton initialization cache for Paper)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t Paper.drawing.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v2, v3);
  outlined init with copy of Ref<PKDrawingStruct>?(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of Ref<PKDrawingStruct>?(a1);
}

uint64_t outlined init with copy of Ref<PKDrawingStruct>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

double Paper.bounds.getter()
{
  double v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t Paper.bounds.setter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.wrappedValue.setter();
}

uint64_t Paper.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  __int128 v13;
  __int128 v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v13 - v8;
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  v13 = 0u;
  v14 = 0u;
  CRRegister.init(wrappedValue:)();
  v10 = type metadata accessor for Paper();
  v13 = 0u;
  v14 = 0u;
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v13 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
  outlined init with copy of Ref<PKDrawingStruct>?((uint64_t)v9, (uint64_t)v5);
  lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of Ref<PKDrawingStruct>?((uint64_t)v9);
  *(_QWORD *)&v13 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  lazy protocol witness table accessor for type Color? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v13 = 0;
  *((_QWORD *)&v13 + 1) = 0xE000000000000000;
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v13 = 0;
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12350]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12358]);
  result = CROrderedSet.init()();
  *(_QWORD *)(a1 + *(int *)(v10 + 48)) = MEMORY[0x1E0DEE9E0];
  return result;
}

uint64_t Paper.frame.setter()
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.wrappedValue.setter();
}

uint64_t Paper.$bounds.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t Paper.$bounds.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

double Paper.frame.getter()
{
  double v1;

  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t Paper.$frame.getter()
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t Paper.$frame.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for Paper();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Paper.bounds.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

void (*Paper.$bounds.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

uint64_t (*Paper.frame.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t key path setter for Paper.$frame : Paper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for Paper();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t (*Paper.$frame.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Paper() + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

double Paper.rotation.getter()
{
  double v1;

  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  return v1;
}

double key path getter for Paper.rotation : Paper@<D0>(double *a1@<X8>)
{
  double result;
  double v3;

  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  result = v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for Paper.rotation : Paper()
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.wrappedValue.setter();
}

uint64_t Paper.rotation.setter()
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*Paper.rotation.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Paper.$rotation.getter()
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Paper.$rotation : Paper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for Paper();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t Paper.$rotation.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for Paper();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Paper.$rotation.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Paper() + 24);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t (*Paper.drawing.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Paper.$drawing.getter()
{
  return Paper.drawing.getter((uint64_t (*)(uint64_t))MEMORY[0x1E0D11748]);
}

uint64_t Paper.drawing.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v2;

  type metadata accessor for Paper();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  return a1(v2);
}

uint64_t key path setter for Paper.$drawing : Paper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for Paper();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t Paper.$drawing.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for Paper();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Paper.$drawing.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Paper() + 28);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t Paper.backgroundColor.getter()
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.wrappedValue.getter();
}

uint64_t key path getter for Paper.backgroundColor : Paper@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for Paper.backgroundColor : Paper(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  type metadata accessor for Paper();
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t Paper.backgroundColor.setter()
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*Paper.backgroundColor.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Paper.$backgroundColor.getter()
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Paper.$backgroundColor : Paper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for Paper();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t Paper.$backgroundColor.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for Paper();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Paper.$backgroundColor.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Paper() + 32);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t Paper.name.getter()
{
  uint64_t v1;

  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t key path getter for Paper.name : Paper@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t key path setter for Paper.name : Paper()
{
  type metadata accessor for Paper();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  return CRRegister.wrappedValue.setter();
}

uint64_t Paper.name.setter()
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*Paper.name.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Paper.$name.getter()
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Paper.$name : Paper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for Paper();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t Paper.$name.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for Paper();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Paper.$name.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Paper() + 36);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t Paper.flags.getter()
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  return CRRegister.wrappedValue.getter();
}

uint64_t key path getter for Paper.flags : Paper@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  result = CRRegister.wrappedValue.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for Paper.flags : Paper()
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  return CRRegister.wrappedValue.setter();
}

uint64_t Paper.flags.setter()
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*Paper.flags.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Paper.$flags.getter()
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Paper.$flags : Paper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for Paper();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t Paper.$flags.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for Paper();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Paper.$flags.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Paper() + 40);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t Paper.subelements.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Paper() + 44);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Paper.subelements.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Paper() + 44);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

double (*Paper.subelements.modify())(_QWORD, _QWORD)
{
  type metadata accessor for Paper();
  return UnknownCanvasElementView.flags.modify;
}

uint64_t Paper.additionalFields.getter()
{
  type metadata accessor for Paper();
  return swift_bridgeObjectRetain();
}

uint64_t Paper.additionalFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for Paper() + 48);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

double (*Paper.additionalFields.modify())(_QWORD, _QWORD)
{
  type metadata accessor for Paper();
  return UnknownCanvasElementView.flags.modify;
}

double static Paper.fields.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[32];
  __int128 v20;
  _BYTE v21[32];
  __int128 v22;
  _BYTE v23[32];
  __int128 v24;
  _BYTE v25[32];
  __int128 v26;

  if (one-time initialization token for fields != -1)
    swift_once();
  v24 = xmmword_1EDB6D028;
  *(_OWORD *)v25 = *(_OWORD *)&qword_1EDB6D038;
  *(_OWORD *)&v25[16] = xmmword_1EDB6D048;
  v26 = *(_OWORD *)&qword_1EDB6D058;
  *(_OWORD *)&v21[16] = xmmword_1EDB6CFE8;
  v22 = *(_OWORD *)&qword_1EDB6CFF8;
  *(_OWORD *)v23 = *(_OWORD *)&qword_1EDB6D008;
  *(_OWORD *)&v23[16] = *(_OWORD *)&qword_1EDB6D018;
  *(_OWORD *)v19 = static Paper.fields;
  *(_OWORD *)&v19[16] = *(_OWORD *)&qword_1EDB6CFB8;
  v20 = xmmword_1EDB6CFC8;
  *(_OWORD *)v21 = *(_OWORD *)&qword_1EDB6CFD8;
  v2 = static Paper.fields;
  v3 = unk_1EDB6CFC0;
  v4 = qword_1EDB6CFD8;
  v5 = *((_QWORD *)&xmmword_1EDB6CFE8 + 1);
  v6 = qword_1EDB6D008;
  v7 = unk_1EDB6D020;
  v8 = qword_1EDB6D038;
  v9 = *((_QWORD *)&xmmword_1EDB6D048 + 1);
  v11 = *(_OWORD *)&v19[8];
  v12 = xmmword_1EDB6CFC8;
  v13 = *(_OWORD *)&v21[8];
  v14 = *(_OWORD *)&qword_1EDB6CFF8;
  v15 = *(_OWORD *)&v23[8];
  v16 = xmmword_1EDB6D028;
  v17 = *(_OWORD *)&v25[8];
  v18 = *(_OWORD *)&qword_1EDB6D058;
  outlined retain of ((String, WritableKeyPath<PDFAnnotationElement, CRRegister<String?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<String?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Color?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Int>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Date?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<PDFAnnotationElement.AnnotationShape>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<String>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<WeakRef<PDFAnnotationElement>?>>))((uint64_t)v19);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = v15;
  *(_QWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 128) = v16;
  *(_QWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 152) = v17;
  *(_QWORD *)(a1 + 168) = v9;
  result = *(double *)&v18;
  *(_OWORD *)(a1 + 176) = v18;
  return result;
}

uint64_t static Paper.paperFileFormatVersion.getter()
{
  return 1;
}

uint64_t Paper.init(frame:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;

  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v21 - v16;
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  v21 = 0u;
  v22 = 0u;
  CRRegister.init(wrappedValue:)();
  v18 = type metadata accessor for Paper();
  v21 = 0u;
  v22 = 0u;
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v21 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v17, 1, 1, v19);
  outlined init with copy of Ref<PKDrawingStruct>?((uint64_t)v17, (uint64_t)v13);
  lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of Ref<PKDrawingStruct>?((uint64_t)v17);
  *(_QWORD *)&v21 = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Color?);
  lazy protocol witness table accessor for type Color? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v21 = 0;
  *((_QWORD *)&v21 + 1) = 0xE000000000000000;
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v21 = 0;
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12350]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12358]);
  CROrderedSet.init()();
  *(_QWORD *)(a1 + *(int *)(v18 + 48)) = MEMORY[0x1E0DEE9E0];
  *(double *)&v21 = a2;
  *((double *)&v21 + 1) = a3;
  *(double *)&v22 = a4;
  *((double *)&v22 + 1) = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.setter();
  v21 = 0uLL;
  *(double *)&v22 = a4;
  *((double *)&v22 + 1) = a5;
  return CRRegister.wrappedValue.setter();
}

uint64_t protocol witness for CRCodable.init(from:) in conformance Paper()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  return CRStruct_8.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance Paper()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  return CRStruct_8.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance Paper()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  return CRStruct_8.minEncodingVersion.getter();
}

double protocol witness for static CRStruct_Base_8.fields.getter in conformance Paper@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[32];
  __int128 v20;
  _BYTE v21[32];
  __int128 v22;
  _BYTE v23[32];
  __int128 v24;
  _BYTE v25[32];
  __int128 v26;

  if (one-time initialization token for fields != -1)
    swift_once();
  v24 = xmmword_1EDB6D028;
  *(_OWORD *)v25 = *(_OWORD *)&qword_1EDB6D038;
  *(_OWORD *)&v25[16] = xmmword_1EDB6D048;
  v26 = *(_OWORD *)&qword_1EDB6D058;
  *(_OWORD *)&v21[16] = xmmword_1EDB6CFE8;
  v22 = *(_OWORD *)&qword_1EDB6CFF8;
  *(_OWORD *)v23 = *(_OWORD *)&qword_1EDB6D008;
  *(_OWORD *)&v23[16] = *(_OWORD *)&qword_1EDB6D018;
  *(_OWORD *)v19 = static Paper.fields;
  *(_OWORD *)&v19[16] = *(_OWORD *)&qword_1EDB6CFB8;
  v20 = xmmword_1EDB6CFC8;
  *(_OWORD *)v21 = *(_OWORD *)&qword_1EDB6CFD8;
  v2 = static Paper.fields;
  v3 = unk_1EDB6CFC0;
  v4 = qword_1EDB6CFD8;
  v5 = *((_QWORD *)&xmmword_1EDB6CFE8 + 1);
  v6 = qword_1EDB6D008;
  v7 = unk_1EDB6D020;
  v8 = qword_1EDB6D038;
  v9 = *((_QWORD *)&xmmword_1EDB6D048 + 1);
  v11 = *(_OWORD *)&v19[8];
  v12 = xmmword_1EDB6CFC8;
  v13 = *(_OWORD *)&v21[8];
  v14 = *(_OWORD *)&qword_1EDB6CFF8;
  v15 = *(_OWORD *)&v23[8];
  v16 = xmmword_1EDB6D028;
  v17 = *(_OWORD *)&v25[8];
  v18 = *(_OWORD *)&qword_1EDB6D058;
  outlined retain of ((String, WritableKeyPath<PDFAnnotationElement, CRRegister<String?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<String?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Color?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Int>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<Date?>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<PDFAnnotationElement.AnnotationShape>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<String>>), (String, WritableKeyPath<PDFAnnotationElement, CRRegister<WeakRef<PDFAnnotationElement>?>>))((uint64_t)v19);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 104) = v15;
  *(_QWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 128) = v16;
  *(_QWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 152) = v17;
  *(_QWORD *)(a1 + 168) = v9;
  result = *(double *)&v18;
  *(_OWORD *)(a1 + 176) = v18;
  return result;
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance Paper()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  return static CRStruct_8.fieldKeys.getter();
}

uint64_t protocol witness for CRDT.context.getter in conformance Paper()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  return CRType.context.getter();
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance Paper()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  return CRStruct_8.actionUndoingDifference(from:)();
}

uint64_t protocol witness for CRDT.apply(_:) in conformance Paper()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  return CRStruct_8.apply(_:)();
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance Paper()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  return CRStruct_8.hasDelta(from:)();
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance Paper()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  return CRStruct_8.delta(_:from:)();
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance Paper()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  return CRStruct_8.canMerge(delta:)();
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance Paper()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  return CRStruct_8.merge(delta:)();
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance Paper()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  return CRStruct_8.copy(renamingReferences:)();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Paper()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  return CRStruct_8.observableDifference(from:with:)();
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance Paper()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  return CRStruct_8.visitReferences(_:)();
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance Paper()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  return CRStruct_8.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance Paper()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  return CRStruct_8.finalizeTimestamps(_:)();
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance Paper()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  return CRStruct_8.merge(_:)();
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance Paper()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance Paper()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
  return CRDT.init(serializedData:)();
}

uint64_t Paper.shared(_:)(uint64_t a1)
{
  return Paper.shared(_:)(a1, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement, (uint64_t)&type metadata for TaggedCanvasElement, (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0D12308]);
}

{
  return Paper.shared(_:)(a1, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage, (uint64_t)&type metadata for TaggedPaperPage, (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0D12240]);
}

uint64_t Paper.thumbnail.getter@<X0>(uint64_t a1@<X8>)
{
  return Paper.thumbnail.getter((uint64_t (*)(_QWORD))MEMORY[0x1E0D12958], a1);
}

uint64_t Paper.render<A>(in:id:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;

  v11 = *(_BYTE *)(a4 + 1);
  v12 = *(_BYTE *)(a4 + 2);
  v13 = *(_QWORD *)(a4 + 8);
  v14 = *(_BYTE *)(a4 + 16);
  v15 = *(_BYTE *)(a4 + 56);
  v16 = *(_QWORD *)(a4 + 64);
  v17 = *(_BYTE *)(a4 + 72);
  v18 = *(_BYTE *)(a4 + 73);
  v19 = *(_BYTE *)(a4 + 74);
  *(_BYTE *)(v6 + 16) = *(_BYTE *)a4;
  *(_BYTE *)(v6 + 17) = v11;
  *(_BYTE *)(v6 + 18) = v12;
  *(_QWORD *)(v6 + 24) = v13;
  *(_BYTE *)(v6 + 32) = v14;
  *(_OWORD *)(v6 + 40) = *(_OWORD *)(a4 + 24);
  *(_OWORD *)(v6 + 56) = *(_OWORD *)(a4 + 40);
  *(_BYTE *)(v6 + 72) = v15;
  *(_QWORD *)(v6 + 80) = v16;
  *(_BYTE *)(v6 + 88) = v17;
  *(_BYTE *)(v6 + 89) = v18;
  *(_BYTE *)(v6 + 90) = v19;
  v20 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 96) = v20;
  v21 = type metadata accessor for Paper();
  *v20 = v6;
  v20[1] = Paper.render<A>(in:id:capsule:options:);
  return ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)(a1, a3, (_OWORD *)(v6 + 16), v21, a5, (uint64_t)&protocol witness table for Paper, a6);
}

uint64_t Paper.render<A>(in:id:capsule:options:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

double Paper.pdfContentsBounds.getter()
{
  double v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t protocol witness for ContainerCanvasElement.drawing.getter in conformance Paper()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  return CRRegister.wrappedValue.getter();
}

uint64_t protocol witness for ContainerCanvasElement.drawing.setter in conformance Paper(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v2, v3);
  outlined init with copy of Ref<PKDrawingStruct>?(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  CRRegister.wrappedValue.setter();
  return outlined destroy of Ref<PKDrawingStruct>?(a1);
}

uint64_t (*protocol witness for ContainerCanvasElement.drawing.modify in conformance Paper(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t protocol witness for CanvasElement.thumbnail.getter in conformance Paper@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for CanvasElement.thumbnail.getter in conformance Paper((uint64_t (*)(_QWORD))MEMORY[0x1E0D12958], a1);
}

uint64_t protocol witness for CanvasElement.shared(_:) in conformance Paper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.shared(_:) in conformance Paper(a1, a2, a3, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement, (uint64_t)&type metadata for TaggedCanvasElement, (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0D12308]);
}

uint64_t protocol witness for PaperRenderable.render<A>(in:id:capsule:options:) in conformance Paper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v12;
  uint64_t v13;

  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return Paper.render<A>(in:id:capsule:options:)(a1, v13, a3, a4, a5, a6);
}

uint64_t Paper.pdfPageID.getter@<X0>(uint64_t a1@<X8>)
{
  return Paper.thumbnail.getter((uint64_t (*)(_QWORD))type metadata accessor for PDFPageID, a1);
}

uint64_t Paper.thumbnail.getter@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = a1(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
}

uint64_t Paper.shared(_:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t (*a4)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;

  v8 = type metadata accessor for CRKeyPath();
  v10 = MEMORY[0x1E0C80A78](v8, v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = 0;
  v14 = (*(uint64_t (**)(char *, uint64_t, double))(v13 + 16))(v12, a1, v10);
  v15 = a2(v14);
  return a4(&v18, v12, a3, v15);
}

void Paper.update<A>(pdfPage:id:use:in:options:)(void *a1, uint64_t a2, unint64_t *a3, uint64_t a4, __int128 *a5, uint64_t a6, char *a7)
{
  uint64_t v7;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int16 v28;
  id v29;
  _OWORD v30[4];
  uint64_t v31;
  __int16 v32;
  char v33;
  unint64_t v34;

  v14 = *a3;
  type metadata accessor for PaperKitPDFPage(0);
  v15 = swift_dynamicCastClass();
  if (v15)
  {
    v16 = (void *)v15;
    v23 = a2;
    v28 = *((_WORD *)a5 + 36);
    v17 = *((_BYTE *)a5 + 74);
    v18 = a4;
    v19 = a6;
    v20 = *((_QWORD *)a5 + 8);
    v26 = a5[2];
    v27 = a5[3];
    v24 = *a5;
    v25 = a5[1];
    v29 = a1;
    specialized PaperPage.updateCropAndRotation(pdfPage:updateMediaBox:)(v16, 1);
    v34 = v14;
    v30[0] = v24;
    v30[1] = v25;
    v30[2] = v26;
    v30[3] = v27;
    v31 = v20;
    v33 = v17;
    v32 = v28;
    v21 = type metadata accessor for Paper();
    v22 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
    PaperPage<>.updateAnnotations<A>(in:use:capsule:options:)((char *)v16, &v34, v18, (uint64_t)v30, v21, v19, v22, (uint64_t)&protocol witness table for Paper, (uint64_t)&protocol witness table for Paper, a7);
    if (v14 >> 62)
    {

    }
    else
    {
      PaperKitPDFPage.encodePaperPage<A, B>(_:_:id:capsule:)((uint64_t)(id)v14, v7, v23, v18, v21, v19, v22, (uint64_t)&protocol witness table for Paper, (uint64_t)&protocol witness table for Paper, (uint64_t)a7);

      outlined consume of PaperDocument.PDFDocumentUse(v14);
    }
  }
}

uint64_t protocol witness for PaperPage.pdfPageID.getter in conformance Paper@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for CanvasElement.thumbnail.getter in conformance Paper((uint64_t (*)(_QWORD))type metadata accessor for PDFPageID, a1);
}

uint64_t protocol witness for CanvasElement.thumbnail.getter in conformance Paper@<X0>(uint64_t (*a1)(_QWORD)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = a1(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
}

uint64_t protocol witness for PaperPage.shared(_:) in conformance Paper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for CanvasElement.shared(_:) in conformance Paper(a1, a2, a3, (uint64_t (*)(uint64_t))lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage, (uint64_t)&type metadata for TaggedPaperPage, (uint64_t (*)(char *, char *, uint64_t, uint64_t))MEMORY[0x1E0D12240]);
}

uint64_t protocol witness for CanvasElement.shared(_:) in conformance Paper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;

  v10 = type metadata accessor for CRKeyPath();
  v12 = MEMORY[0x1E0C80A78](v10, v11);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = 0;
  v16 = (*(uint64_t (**)(char *, uint64_t, double))(v15 + 16))(v14, a1, v12);
  v17 = a4(v16);
  return a6(&v20, v14, a5, v17);
}

uint64_t specialized Paper.finishDecode(from:pageID:assetManager:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  char *v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  double v24;
  double v25;
  double v26;
  double v27;
  CGFloat MinX;
  double v29;
  CGFloat Width;
  CGFloat Height;
  void (*v32)(char *, char *, uint64_t);
  void (*v33)(char *, uint64_t);
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v35 - v9;
  v13 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (char *)&v35 - v14;
  objc_msgSend(a1, sel_boundsForBox_, 1, v13);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v23 = v22;
  objc_msgSend(a1, sel_boundsForBox_, 0);
  v25 = v24;
  v27 = v26;
  v36.origin.x = v17;
  v36.origin.y = v19;
  v36.size.width = v21;
  v36.size.height = v23;
  MinX = CGRectGetMinX(v36);
  v37.origin.x = v17;
  v37.origin.y = v19;
  v37.size.width = v21;
  v37.size.height = v23;
  v29 = v27 + v25 + v25 - CGRectGetMaxY(v37);
  v38.origin.x = v17;
  v38.origin.y = v19;
  v38.size.width = v21;
  v38.size.height = v23;
  Width = CGRectGetWidth(v38);
  v39.origin.x = v17;
  v39.origin.y = v19;
  v39.size.width = v21;
  v39.size.height = v23;
  Height = CGRectGetHeight(v39);
  CRRegister.projectedValue.getter();
  CRRegister.value.getter();
  v40.origin.x = MinX;
  v40.origin.y = v29;
  v40.size.width = Width;
  v40.size.height = Height;
  if (!CGRectEqualToRect(v35, v40))
  {
    v35.origin.x = MinX;
    v35.origin.y = v29;
    v35.size.width = Width;
    v35.size.height = Height;
    CRRegister.value.setter();
  }
  v32 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  v32(v10, v15, v2);
  CRRegister.projectedValue.setter();
  v33 = *(void (**)(char *, uint64_t))(v3 + 8);
  v33(v15, v2);
  type metadata accessor for Paper();
  CRRegister.projectedValue.getter();
  CRRegister.value.getter();
  v41.origin.x = MinX;
  v41.origin.y = v29;
  v41.size.width = Width;
  v41.size.height = Height;
  if (!CGRectEqualToRect(v35, v41))
  {
    v35.origin.x = MinX;
    v35.origin.y = v29;
    v35.size.width = Width;
    v35.size.height = Height;
    CRRegister.value.setter();
  }
  v32(v10, v6, v2);
  CRRegister.projectedValue.setter();
  v33(v6, v2);
  specialized PaperPage.axisAlignedRotationInDegrees.setter((uint64_t)objc_msgSend(a1, sel_rotation));
  return 1;
}

uint64_t base witness table accessor for CRStruct_Base_8 in Paper()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
}

uint64_t base witness table accessor for CRStruct_Base in Paper()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
}

uint64_t associated type witness table accessor for CRStruct_Base_8.Type_7 : CRDT in Paper()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRRegister<CanvasElementFlags> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<CanvasElementFlags>, MEMORY[0x1E0D117A8]);
}

uint64_t base witness table accessor for CRDT in Paper()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
}

uint64_t base witness table accessor for CRMergeable in Paper()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
}

uint64_t base witness table accessor for CRType in Paper()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in Paper()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRStructMergeableDelta_8<Paper> and conformance CRStructMergeableDelta_8<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_8<Paper>, MEMORY[0x1E0D12788]);
}

uint64_t base witness table accessor for CRCodable in Paper()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
}

uint64_t sub_1DDD89CB0()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDD89CF0()
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDD89D48()
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDD89DA0()
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDD89DF8()
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDD89E50()
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDD89EA8()
{
  type metadata accessor for Paper();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  return CRRegister.projectedValue.getter();
}

uint64_t *initializeBufferWithCopyOfBuffer for Paper(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v33 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v33 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[7];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
    v17 = a3[8];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    v21 = a3[9];
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
    v25 = a3[10];
    v26 = (char *)a1 + v25;
    v27 = (char *)a2 + v25;
    v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
    v29 = a3[11];
    v30 = (char *)a1 + v29;
    v31 = (char *)a2 + v29;
    v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
    *(uint64_t *)((char *)a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for Paper(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  v6 = a1 + a2[6];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + a2[7];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = a1 + a2[8];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = a1 + a2[9];
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  v14 = a1 + a2[10];
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  v16 = a1 + a2[11];
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Paper(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  v16 = a3[8];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
  v28 = a3[11];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Paper(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  v16 = a3[8];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 24))(v17, v18, v19);
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 24))(v21, v22, v23);
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 24))(v25, v26, v27);
  v28 = a3[11];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 24))(v29, v30, v31);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Paper(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  v16 = a3[8];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32))(v25, v26, v27);
  v28 = a3[11];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 32))(v29, v30, v31);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  return a1;
}

uint64_t assignWithTake for Paper(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  v16 = a3[8];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  v20 = a3[9];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 40))(v21, v22, v23);
  v24 = a3[10];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 40))(v25, v26, v27);
  v28 = a3[11];
  v29 = a1 + v28;
  v30 = a2 + v28;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 40))(v29, v30, v31);
  *(_QWORD *)(a1 + a3[12]) = *(_QWORD *)(a2 + a3[12]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Paper()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDD8A8C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[6];
LABEL_15:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[7];
    goto LABEL_15;
  }
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v12 = *(_QWORD *)(v15 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v15;
    v13 = a3[8];
    goto LABEL_15;
  }
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v12 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v16;
    v13 = a3[9];
    goto LABEL_15;
  }
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  v12 = *(_QWORD *)(v17 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v17;
    v13 = a3[10];
    goto LABEL_15;
  }
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v12 = *(_QWORD *)(v18 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v18;
    v13 = a3[11];
    goto LABEL_15;
  }
  v20 = *(_QWORD *)(a1 + a3[12]);
  if (v20 >= 0xFFFFFFFF)
    LODWORD(v20) = -1;
  return (v20 + 1);
}

uint64_t storeEnumTagSinglePayload for Paper()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDD8AA48(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[6];
LABEL_15:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v14 = *(_QWORD *)(v16 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v16;
    v15 = a4[7];
    goto LABEL_15;
  }
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
  v14 = *(_QWORD *)(v17 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v17;
    v15 = a4[8];
    goto LABEL_15;
  }
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
  v14 = *(_QWORD *)(v18 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v18;
    v15 = a4[9];
    goto LABEL_15;
  }
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
  v14 = *(_QWORD *)(v19 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v19;
    v15 = a4[10];
    goto LABEL_15;
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[11];
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + a4[12]) = (a2 - 1);
  return result;
}

void type metadata completion function for Paper()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  type metadata accessor for CRRegister<CGRect>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRRegister<CGFloat>(319, (unint64_t *)&lazy cache variable for type metadata for CRRegister<CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    if (v1 <= 0x3F)
    {
      type metadata accessor for CRRegister<Ref<PKStrokeInheritedProperties>?>(319, &lazy cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?, (void (*)(void))lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?);
      if (v2 <= 0x3F)
      {
        type metadata accessor for CRRegister<Ref<PKStrokeInheritedProperties>?>(319, (unint64_t *)&lazy cache variable for type metadata for CRRegister<Color?>, (uint64_t *)&demangling cache variable for type metadata for Color?, (void (*)(void))lazy protocol witness table accessor for type Color? and conformance <A> A?);
        if (v3 <= 0x3F)
        {
          type metadata accessor for CRRegister<String>();
          if (v4 <= 0x3F)
          {
            type metadata accessor for CRRegister<CGFloat>(319, &lazy cache variable for type metadata for CRRegister<CanvasElementFlags>, (void (*)(void))lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags);
            if (v5 <= 0x3F)
            {
              type metadata accessor for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>();
              if (v6 <= 0x3F)
                swift_initStructMetadata();
            }
          }
        }
      }
    }
  }
}

void PKInk.tool.getter(uint64_t *a1@<X8>)
{
  void *v2;
  Class isa;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;

  v2 = (void *)objc_opt_self();
  isa = PKInk._bridgeToObjectiveC()().super.isa;
  v17 = objc_msgSend(v2, sel__toolWithInk_, isa);

  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v4 = type metadata accessor for PKGenerationTool();
    v5 = MEMORY[0x1E0CD1010];
    a1[3] = v4;
    a1[4] = v5;
    __swift_allocate_boxed_opaque_existential_1(a1);
    PKGenerationTool.init()();
LABEL_11:

    return;
  }
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v6 = type metadata accessor for PKInkingTool();
    v7 = MEMORY[0x1E0CD0F70];
    a1[3] = v6;
    a1[4] = v7;
    __swift_allocate_boxed_opaque_existential_1(a1);
    v8 = v17;
    static PKInkingTool._unconditionallyBridgeFromObjectiveC(_:)();

    goto LABEL_11;
  }
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v9 = type metadata accessor for PKEraserTool();
    v10 = MEMORY[0x1E0CD0F30];
    a1[3] = v9;
    a1[4] = v10;
    __swift_allocate_boxed_opaque_existential_1(a1);
    v11 = v17;
    static PKEraserTool._unconditionallyBridgeFromObjectiveC(_:)();

    goto LABEL_11;
  }
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v12 = type metadata accessor for PKLassoTool();
    v13 = MEMORY[0x1E0CD0EF0];
    a1[3] = v12;
    a1[4] = v13;
    __swift_allocate_boxed_opaque_existential_1(a1);
    v14 = v17;
    static PKLassoTool._unconditionallyBridgeFromObjectiveC(_:)();

    goto LABEL_11;
  }
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v15 = type metadata accessor for PKHandwritingTool();
    v16 = MEMORY[0x1E0CD1028];
    a1[3] = v15;
    a1[4] = v16;
    __swift_allocate_boxed_opaque_existential_1(a1);
    PKHandwritingTool.init()();
    goto LABEL_11;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void PKToolPickerItem.ink.getter(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  id v27;
  id v28;
  char *v29;
  _QWORD *v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  void *v40;
  id v41;
  uint64_t v42;
  id v43;
  double v44;
  id v45;
  id v46;
  id v47;
  char *v48;
  _QWORD *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;

  v58 = a1;
  v2 = type metadata accessor for PKLassoTool();
  v52 = *(_QWORD *)(v2 - 8);
  v53 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v54 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PKEraserTool();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PKInkingTool();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for PKInk();
  v16 = *(_QWORD **)(v15 - 8);
  v56 = v15;
  v57 = v16;
  MEMORY[0x1E0C80A78](v15, v17);
  v55 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKInk?);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v51 - v25;
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD1188]), sel_init);
    v28 = objc_msgSend(v27, "ink");

    if (v28)
    {
      v29 = v55;
      static PKInk._unconditionallyBridgeFromObjectiveC(_:)();

      v10 = v56;
      v30 = v57;
      v31 = (void (*)(char *, char *, uint64_t))v57[4];
      v31(v26, v29, v56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v30[7])(v26, 0, 1, v10);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v30[6])(v26, 1, v10) != 1)
      {
        v32 = v58;
        v33 = v26;
LABEL_5:
        v31((char *)v32, v33, v10);
        return;
      }
    }
    else
    {
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v57[7])(v26, 1, 1, v56);
    }
    __break(1u);
    goto LABEL_22;
  }
  v34 = v10;
  v35 = v54;
  v51 = v22;
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v36 = v1;
    PKToolPickerInkingItem.inkingTool.getter();
    PKInkingTool.ink.getter();

    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v34);
    return;
  }
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v37 = v1;
    PKToolPickerEraserItem.eraserTool.getter();
    specialized PKTool.ink.getter((uint64_t (*)(_QWORD, double))MEMORY[0x1E0CD0F38], &lazy cache variable for type metadata for PKEraserTool, v58);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    return;
  }
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v38 = v1;
    PKToolPickerLassoItem.lassoTool.getter();
    specialized PKTool.ink.getter((uint64_t (*)(_QWORD, double))MEMORY[0x1E0CD0EF8], &lazy cache variable for type metadata for PKLassoTool, v58);

    (*(void (**)(char *, uint64_t))(v52 + 8))(v35, v53);
    return;
  }
  objc_opt_self();
  v39 = swift_dynamicCastObjCClass();
  if (!v39)
  {
    objc_opt_self();
    if (!swift_dynamicCastObjCClass())
    {
LABEL_24:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    v46 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD1190]), sel_init);
    v47 = objc_msgSend(v46, "ink");

    v10 = v56;
    if (v47)
    {
      v48 = v55;
      static PKInk._unconditionallyBridgeFromObjectiveC(_:)();

      v49 = v57;
      v31 = (void (*)(char *, char *, uint64_t))v57[4];
      v50 = v51;
      v31(v51, v48, v10);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v49[7])(v50, 0, 1, v10);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v49[6])(v50, 1, v10) != 1)
      {
        v32 = v58;
        v33 = v50;
        goto LABEL_5;
      }
      goto LABEL_23;
    }
LABEL_22:
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v57[7])(v51, 1, 1, v10);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v40 = (void *)v39;
  v57 = v1;
  v41 = objc_msgSend(v40, sel_identifier);
  if (!v41)
  {
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v41 = (id)MEMORY[0x1DF0E41AC](v42);
    swift_bridgeObjectRelease();
  }
  v43 = objc_msgSend(v40, sel_color);
  objc_msgSend(v40, sel_width);
  v45 = objc_msgSend((id)objc_opt_self(), sel_inkWithIdentifier_color_weight_, v41, v43, v44);

  static PKInk._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t specialized PKTool.ink.getter@<X0>(uint64_t (*a1)(_QWORD, double)@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  void *v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t result;
  uint64_t v28;
  id v29;

  v6 = v3;
  v8 = type metadata accessor for PKInk();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKInk?);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1(0, v15);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))((char *)&v28 - v22, v6, v18, v20);
  type metadata accessor for NSObject(0, a2);
  swift_dynamicCast();
  v23 = v29;
  v24 = objc_msgSend(v29, "ink");
  if (v24)
  {
    v25 = v24;
    static PKInk._unconditionallyBridgeFromObjectiveC(_:)();

    v26 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v26(v17, v12, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v17, 0, 1, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v17, 1, v8) != 1)
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v26)(a3, v17, v8);
  }
  else
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v17, 1, 1, v8);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for PKInk?);
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void PKTool.ink.getter(uint64_t a1@<X0>, char *a2@<X8>)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t, double);
  uint64_t v56;
  id v57;
  id v58;
  char *v59;
  void (*v60)(char *, char *, char *);
  char *v61;
  char *v62;
  id v63;
  id v64;
  char *v65;
  id v66;
  id v67;
  void *v68;
  char *v69;
  uint64_t v70;
  id v71;
  id v72;
  void *v73;
  char *v74;
  uint64_t v75;
  id v76;
  char *v77;
  void (*v78)(char *, uint64_t, uint64_t, char *);
  int v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  void *v83;
  void *v84;
  double v85;
  id v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  id v105;

  v3 = v2;
  v104 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKCustomTool?);
  MEMORY[0x1E0C80A78](v5, v6);
  v91 = (char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PKCustomTool();
  v93 = *(_QWORD *)(v8 - 8);
  v94 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v92 = (char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for PKHandwritingTool();
  v89 = *(_QWORD *)(v98 - 8);
  MEMORY[0x1E0C80A78](v98, v11);
  v100 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PKInk();
  v102 = *(char **)(v13 - 8);
  v103 = (char *)v13;
  MEMORY[0x1E0C80A78](v13, v14);
  v101 = (char *)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKInk?);
  MEMORY[0x1E0C80A78](v16, v17);
  v90 = (char *)&v87 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v95 = (char *)&v87 - v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v96 = (char *)&v87 - v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v87 - v27;
  v29 = type metadata accessor for PKGenerationTool();
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29, v31);
  v33 = (char *)&v87 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34, v35);
  v88 = (char *)&v87 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37, v38);
  v97 = (char *)&v87 - v39;
  MEMORY[0x1E0C80A78](v40, v41);
  v99 = (char *)&v87 - v42;
  MEMORY[0x1E0C80A78](v43, v44);
  v46 = (char *)&v87 - v45;
  MEMORY[0x1E0C80A78](v47, v48);
  v50 = (char *)&v87 - v49;
  v53 = MEMORY[0x1E0C80A78](v51, v52);
  v55 = *(void (**)(char *, char *, uint64_t, double))(v54 + 16);
  v55((char *)&v87 - v56, v2, a1, v53);
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v33, v29);
    v57 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD1188]), sel_init);
    v58 = objc_msgSend(v57, "ink");

    if (v58)
    {
      v59 = v101;
      static PKInk._unconditionallyBridgeFromObjectiveC(_:)();

      v3 = v102;
      v60 = (void (*)(char *, char *, char *))*((_QWORD *)v102 + 4);
      v61 = v59;
      v62 = v103;
      v60(v28, v61, v103);
      (*((void (**)(char *, _QWORD, uint64_t, char *))v3 + 7))(v28, 0, 1, v62);
      if ((*((unsigned int (**)(char *, uint64_t, char *))v3 + 6))(v28, 1, v62) != 1)
      {
        v60(v104, v28, v62);
        return;
      }
    }
    else
    {
      (*((void (**)(char *, uint64_t, uint64_t, char *))v102 + 7))(v28, 1, 1, v103);
    }
    __break(1u);
    goto LABEL_30;
  }
  ((void (*)(char *, char *, uint64_t))v55)(v50, v2, a1);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PKInkingTool);
  if (swift_dynamicCast())
  {
    v63 = v105;
    v64 = objc_msgSend(v105, "ink");
    static PKInk._unconditionallyBridgeFromObjectiveC(_:)();

    return;
  }
  v65 = v2;
  ((void (*)(char *, char *, uint64_t))v55)(v46, v2, a1);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PKEraserTool);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v66 = v105;
    v67 = objc_msgSend(v105, "ink");
    v46 = v102;
    v33 = v103;
    if (v67)
    {
      v68 = v67;
      v69 = v101;
      static PKInk._unconditionallyBridgeFromObjectiveC(_:)();

      v28 = (char *)*((_QWORD *)v46 + 4);
      v70 = (uint64_t)v96;
      ((void (*)(char *, char *, char *))v28)(v96, v69, v33);
      (*((void (**)(uint64_t, _QWORD, uint64_t, char *))v46 + 7))(v70, 0, 1, v33);
      if ((*((unsigned int (**)(uint64_t, uint64_t, char *))v46 + 6))(v70, 1, v33) != 1)
        goto LABEL_24;
    }
    else
    {

      v70 = (uint64_t)v96;
      (*((void (**)(char *, uint64_t, uint64_t, char *))v46 + 7))(v96, 1, 1, v33);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v70, &demangling cache variable for type metadata for PKInk?);
  }
  else
  {
    v46 = v102;
    v33 = v103;
  }
  ((void (*)(char *, char *, uint64_t))v55)(v99, v3, a1);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PKLassoTool);
  if ((swift_dynamicCast() & 1) != 0)
  {
    v71 = v105;
    v72 = objc_msgSend(v105, "ink");
    v3 = v100;
    if (v72)
    {
      v73 = v72;
      v74 = v101;
      static PKInk._unconditionallyBridgeFromObjectiveC(_:)();

      v28 = (char *)*((_QWORD *)v46 + 4);
      v70 = (uint64_t)v95;
      ((void (*)(char *, char *, char *))v28)(v95, v74, v33);
      (*((void (**)(uint64_t, _QWORD, uint64_t, char *))v46 + 7))(v70, 0, 1, v33);
      if ((*((unsigned int (**)(uint64_t, uint64_t, char *))v46 + 6))(v70, 1, v33) != 1)
        goto LABEL_24;
    }
    else
    {

      v70 = (uint64_t)v95;
      (*((void (**)(char *, uint64_t, uint64_t, char *))v46 + 7))(v95, 1, 1, v33);
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v70, &demangling cache variable for type metadata for PKInk?);
    v75 = v98;
  }
  else
  {
    v75 = v98;
    v3 = v100;
  }
  ((void (*)(char *, char *, uint64_t))v55)(v97, v65, a1);
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v89 + 8))(v3, v75);
    v76 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD1190]), sel_init);
    v28 = (char *)objc_msgSend(v76, "ink");

    if (!v28)
    {
LABEL_30:
      (*((void (**)(char *, uint64_t, uint64_t, char *))v46 + 7))(v90, 1, 1, v33);
      goto LABEL_31;
    }
    v77 = v101;
    static PKInk._unconditionallyBridgeFromObjectiveC(_:)();

    v28 = (char *)*((_QWORD *)v46 + 4);
    v70 = (uint64_t)v90;
    ((void (*)(char *, char *, char *))v28)(v90, v77, v33);
    (*((void (**)(uint64_t, _QWORD, uint64_t, char *))v46 + 7))(v70, 0, 1, v33);
    if ((*((unsigned int (**)(uint64_t, uint64_t, char *))v46 + 6))(v70, 1, v33) == 1)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
LABEL_24:
    ((void (*)(char *, uint64_t, char *))v28)(v104, v70, v33);
    return;
  }
  ((void (*)(char *, char *, uint64_t))v55)(v88, v65, a1);
  v28 = v91;
  v3 = (char *)v94;
  v79 = swift_dynamicCast();
  v80 = v93;
  v78 = *(void (**)(char *, uint64_t, uint64_t, char *))(v93 + 56);
  if (!v79)
  {
LABEL_32:
    v78(v28, 1, 1, v3);
    goto LABEL_33;
  }
  v78(v28, 0, 1, v3);
  if ((*(unsigned int (**)(char *, uint64_t, char *))(v80 + 48))(v28, 1, v3) != 1)
  {
    v81 = v92;
    (*(void (**)(char *, char *, char *))(v80 + 32))(v92, v28, v3);
    v82 = PKCustomTool.customIdentifier.getter();
    v83 = (void *)MEMORY[0x1DF0E41AC](v82);
    swift_bridgeObjectRelease();
    v84 = (void *)PKCustomTool.color.getter();
    PKCustomTool.weight.getter();
    v86 = objc_msgSend((id)objc_opt_self(), sel_inkWithIdentifier_color_weight_, v83, v84, v85);

    static PKInk._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, char *))(v80 + 8))(v81, v3);
    return;
  }
LABEL_33:
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, &demangling cache variable for type metadata for PKCustomTool?);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t Link.synapseDataRepresentation.getter()
{
  uint64_t v1;

  type metadata accessor for Link();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t type metadata accessor for Link()
{
  uint64_t result;

  result = type metadata singleton initialization cache for Link;
  if (!type metadata singleton initialization cache for Link)
    return swift_getSingletonMetadata();
  return result;
}

double key path getter for Link.synapseDataRepresentation : Link@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  type metadata accessor for Link();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  CRRegister.wrappedValue.getter();
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for Link.synapseDataRepresentation : Link(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;

  v2 = *a1;
  v1 = a1[1];
  type metadata accessor for Link();
  outlined copy of Data?(v2, v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  return CRRegister.wrappedValue.setter();
}

uint64_t Link.synapseDataRepresentation.setter()
{
  type metadata accessor for Link();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  return CRRegister.wrappedValue.setter();
}

double Link.rotation.getter()
{
  double v1;

  type metadata accessor for Link();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  return v1;
}

double key path getter for Link.rotation : Link@<D0>(double *a1@<X8>)
{
  double result;
  double v3;

  type metadata accessor for Link();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  result = v3;
  *a1 = v3;
  return result;
}

uint64_t key path setter for Link.rotation : Link()
{
  type metadata accessor for Link();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.wrappedValue.setter();
}

uint64_t Link.rotation.setter()
{
  type metadata accessor for Link();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.wrappedValue.setter();
}

double Link.frame.getter()
{
  double v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  return v1;
}

uint64_t Link.frame.setter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.wrappedValue.setter();
}

uint64_t (*Link.frame.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Link.$frame.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t Link.$frame.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void (*Link.$frame.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$inherited.modify;
}

uint64_t (*Link.rotation.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Link();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Link.$rotation.getter()
{
  type metadata accessor for Link();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Link.$rotation : Link(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for Link();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t Link.$rotation.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for Link();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Link.$rotation.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Link() + 20);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t (*Link.synapseDataRepresentation.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for Link();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  v2[4] = CRRegister.wrappedValue.modify();
  return PKStrokeInheritedProperties.inherited.modify;
}

uint64_t Link.$synapseDataRepresentation.getter()
{
  type metadata accessor for Link();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  return CRRegister.projectedValue.getter();
}

uint64_t key path setter for Link.$synapseDataRepresentation : Link(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, double);
  uint64_t v14;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16);
  v12((char *)&v14 - v10, a1, v2, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v6, v11, v2);
  type metadata accessor for Link();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

uint64_t Link.$synapseDataRepresentation.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v8;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2, v4);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v5);
  type metadata accessor for Link();
  CRRegister.projectedValue.setter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t (*Link.$synapseDataRepresentation.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  v3[5] = malloc(v6);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(type metadata accessor for Link() + 24);
  CRRegister.projectedValue.getter();
  return PKStrokeInheritedProperties.$ink.modify;
}

uint64_t Link.additionalFields.getter()
{
  type metadata accessor for Link();
  return swift_bridgeObjectRetain();
}

uint64_t Link.additionalFields.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for Link() + 28);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

double (*Link.additionalFields.modify())(_QWORD, _QWORD)
{
  type metadata accessor for Link();
  return UnknownCanvasElementView.flags.modify;
}

uint64_t static Link.fields.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (one-time initialization token for fields != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1F0412C08;
  v4 = qword_1F0412C10;
  v3 = unk_1F0412C18;
  v5 = qword_1F0412C20;
  v6 = qword_1F0412C28;
  v7 = qword_1F0412C30;
  v8 = qword_1F0412C38;
  v9 = qword_1F0412C40;
  *a1 = static Link.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v9;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t Link.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  CRRegister.init(wrappedValue:)();
  v2 = type metadata accessor for Link();
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  lazy protocol witness table accessor for type Data? and conformance <A> A?();
  result = CRRegister.init(wrappedValue:)();
  *(_QWORD *)(a1 + *(int *)(v2 + 28)) = MEMORY[0x1E0DEE9E0];
  return result;
}

unint64_t lazy protocol witness table accessor for type Data? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type Data? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Data? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Data?);
    v2 = MEMORY[0x1E0D116A8];
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12D70], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data? and conformance <A> A?);
  }
  return result;
}

uint64_t protocol witness for CRCodable.init(from:) in conformance Link()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  return CRStruct_3.init(from:)();
}

uint64_t protocol witness for CRCodable.encode(to:) in conformance Link()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  return CRStruct_3.encode(to:)();
}

uint64_t protocol witness for CRCodable.minEncodingVersion.getter in conformance Link()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  return CRStruct_3.minEncodingVersion.getter();
}

uint64_t protocol witness for static CRStruct_Base_3.fields.getter in conformance Link@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (one-time initialization token for fields != -1)
    swift_once();
  v2 = *(_QWORD *)algn_1F0412C08;
  v4 = qword_1F0412C10;
  v3 = unk_1F0412C18;
  v5 = qword_1F0412C20;
  v6 = qword_1F0412C28;
  v7 = qword_1F0412C30;
  v8 = qword_1F0412C38;
  v9 = qword_1F0412C40;
  *a1 = static Link.fields;
  a1[1] = v2;
  a1[2] = v4;
  a1[3] = v3;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v9;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t protocol witness for static CRStruct_Base.fieldKeys.getter in conformance Link()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  return static CRStruct_3.fieldKeys.getter();
}

uint64_t protocol witness for CRStruct_Base.init() in conformance Link@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  CRRegister.init(wrappedValue:)();
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  lazy protocol witness table accessor for type Data? and conformance <A> A?();
  result = CRRegister.init(wrappedValue:)();
  *(_QWORD *)(a2 + *(int *)(a1 + 28)) = MEMORY[0x1E0DEE9E0];
  return result;
}

uint64_t protocol witness for CRDT.context.getter in conformance Link()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  return CRType.context.getter();
}

uint64_t protocol witness for CRDT.actionUndoingDifference(from:) in conformance Link()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  return CRStruct_3.actionUndoingDifference(from:)();
}

uint64_t protocol witness for CRDT.apply(_:) in conformance Link()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  return CRStruct_3.apply(_:)();
}

uint64_t protocol witness for CRDT.hasDelta(from:) in conformance Link()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  return CRStruct_3.hasDelta(from:)();
}

uint64_t protocol witness for CRDT.delta(_:from:) in conformance Link()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  return CRStruct_3.delta(_:from:)();
}

uint64_t protocol witness for CRDT.canMerge(delta:) in conformance Link()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  return CRStruct_3.canMerge(delta:)();
}

uint64_t protocol witness for CRDT.merge(delta:) in conformance Link()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  return CRStruct_3.merge(delta:)();
}

uint64_t protocol witness for CRType.copy(renamingReferences:) in conformance Link()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  return CRStruct_3.copy(renamingReferences:)();
}

uint64_t protocol witness for CRType.observableDifference(from:with:) in conformance Link()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  return CRStruct_3.observableDifference(from:with:)();
}

uint64_t protocol witness for CRType.visitReferences(_:) in conformance Link()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  return CRStruct_3.visitReferences(_:)();
}

BOOL protocol witness for CRType.needToFinalizeTimestamps() in conformance Link()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  return CRStruct_3.needToFinalizeTimestamps()();
}

uint64_t protocol witness for CRType.finalizeTimestamps(_:) in conformance Link()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  return CRStruct_3.finalizeTimestamps(_:)();
}

uint64_t protocol witness for CRMergeable.merge(_:) in conformance Link()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  return CRStruct_3.merge(_:)();
}

uint64_t protocol witness for CRMergeable.serializedData(_:version:) in conformance Link()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  return CRDT.serializedData(_:version:)();
}

uint64_t protocol witness for CRMergeable.init(serializedData:) in conformance Link()
{
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
  return CRDT.init(serializedData:)();
}

uint64_t Link.init(url:frame:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v12 = specialized static Link.synapseDataRepresentation(from:)();
  if (v13 >> 60 == 15)
  {
    v14 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(a1, v14);
    v15 = type metadata accessor for Link();
    v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
    v17 = a2;
    v18 = 1;
  }
  else
  {
    Link.init(synapseDataRepresentation:frame:)(v12, v13, a2, a3, a4, a5, a6);
    v19 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(a1, v19);
    v15 = type metadata accessor for Link();
    v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
    v17 = a2;
    v18 = 0;
  }
  return v16(v17, v18, 1, v15);
}

uint64_t Link.init(synapseDataRepresentation:frame:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;

  v26 = a2;
  v24 = a1;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  v25 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v12);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v15 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v16);
  v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  v28 = 0u;
  v29 = 0u;
  CRRegister.init(wrappedValue:)();
  v19 = type metadata accessor for Link();
  *(_QWORD *)&v28 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  v20 = a3 + *(int *)(v19 + 24);
  v28 = xmmword_1DDF33630;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  lazy protocol witness table accessor for type Data? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)(a3 + *(int *)(v19 + 28)) = MEMORY[0x1E0DEE9E0];
  *(double *)&v28 = a4;
  *((double *)&v28 + 1) = a5;
  *(double *)&v29 = a6;
  *((double *)&v29 + 1) = a7;
  CRRegister.init(_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 40))(a3, v18, v23);
  *(_QWORD *)&v28 = v24;
  *((_QWORD *)&v28 + 1) = v26;
  CRRegister.init(_:)();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v25 + 40))(v20, v14, v27);
}

uint64_t Link.shared(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[16];

  v2 = type metadata accessor for CRKeyPath();
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v8[15] = 4;
  (*(void (**)(_BYTE *, uint64_t, double))(v6 + 16))(&v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v4);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  return SharedTagged_9.init(_:id:)();
}

uint64_t Link.thumbnail.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for CRAsset();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t Link.indexableTextContent<A>(in:)()
{
  return specialized Link.indexableTextContent<A>(in:)();
}

uint64_t Link.render<A>(in:id:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized Link.render<A>(in:id:capsule:options:)
                                                                            + async function pointer to specialized Link.render<A>(in:id:capsule:options:));
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return v14(a1, a2, a4, a5, a6);
}

void Link.update<A>(use:ref:pdfAnnotation:in:capsule:options:)(unint64_t *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  CGFloat x;
  double y;
  CGFloat width;
  CGFloat height;
  id v45;
  void *v46;
  double v47;
  double v48;
  double v49;
  double v50;
  CGFloat MinX;
  double v52;
  CGFloat v53;
  int v54;
  id v55;
  id v56;
  Class isa;
  id v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  id v62;
  id v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  CGFloat v78;
  CGFloat v79;
  CGFloat v80;
  CGFloat v81;
  CGFloat v82;
  CGFloat v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t, uint64_t);
  id v95;
  char *v96;
  id v97;
  id v98;
  uint64_t v99;
  id v100;
  NSURL *v101;
  void *v102;
  void *v103;
  id v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  CGAffineTransform v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int16 v137;
  char v138;
  CGAffineTransform v139;
  CGRect v140;
  CGRect v141;
  CGRect v142;
  CGRect v143;
  CGRect v144;
  CGRect v145;
  CGRect v146;
  CGRect v147;

  v9 = v8;
  v128 = a8;
  v127 = a5;
  v126 = a4;
  v129 = (id)a2;
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v14, v15);
  v130 = (uint64_t)&v106 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v131 = *(_QWORD *)(v132 - 8);
  MEMORY[0x1E0C80A78](v132, v17);
  v125 = (uint64_t)&v106 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v19, v20);
  v110 = (char *)&v106 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v111 = (char *)&v106 - v24;
  v113 = type metadata accessor for URL();
  v112 = *(_QWORD *)(v113 - 8);
  MEMORY[0x1E0C80A78](v113, v25);
  v109 = (char *)&v106 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for Date();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v29);
  v31 = (char *)&v106 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = *a1;
  v124 = *(double *)a6;
  v123 = *(double *)(a6 + 8);
  v122 = *(double *)(a6 + 16);
  v121 = *(double *)(a6 + 24);
  v120 = *(double *)(a6 + 32);
  v119 = *(double *)(a6 + 40);
  v118 = *(_QWORD *)(a6 + 48);
  v117 = *(_QWORD *)(a6 + 56);
  v116 = *(_QWORD *)(a6 + 64);
  v32 = *(unsigned __int8 *)(a6 + 74);
  v33 = *(unsigned __int16 *)(a6 + 72);
  type metadata accessor for CanvasElementPDFAnnotation();
  v34 = swift_dynamicCastClass();
  if (v34)
  {
    v35 = (void *)v34;
    v114 = a7;
    *(_BYTE *)(v34 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_writingAKAnnotation) = 2;
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v38 = v37;
    v39 = a3;
    v40 = (void *)MEMORY[0x1DF0E41AC](v36, v38);
    swift_bridgeObjectRelease();
    objc_msgSend(v35, sel_setType_, v40);

    objc_msgSend(v35, sel_setWidgetFieldType_, *MEMORY[0x1E0CD0E80]);
    objc_msgSend(v35, sel_setWidgetControlType_, 0);
    specialized CanvasElement.coordinateSpace.getter(&v139);
    v133 = v139;
    v140.origin.x = 0.0;
    v140.origin.y = 0.0;
    v140.size.width = 1.0;
    v140.size.height = 1.0;
    v141 = CGRectApplyAffineTransform(v140, &v133);
    x = v141.origin.x;
    y = v141.origin.y;
    width = v141.size.width;
    height = v141.size.height;
    v45 = objc_msgSend(v35, sel_page);
    if (v45)
    {
      v46 = v45;
      objc_msgSend(v45, sel_boundsForBox_, 0);
      v48 = v47;
      v50 = v49;

      v142.origin.x = x;
      v142.origin.y = y;
      v142.size.width = width;
      v142.size.height = height;
      MinX = CGRectGetMinX(v142);
      v143.origin.x = x;
      v143.origin.y = y;
      v143.size.width = width;
      v143.size.height = height;
      v52 = v50 + v48 + v48 - CGRectGetMaxY(v143);
      v144.origin.x = x;
      v144.origin.y = y;
      v144.size.width = width;
      v144.size.height = height;
      v53 = CGRectGetWidth(v144);
      v145.origin.x = x;
      v145.origin.y = y;
      v145.size.width = width;
      v145.size.height = height;
      height = CGRectGetHeight(v145);
      width = v53;
      x = MinX;
      y = v52;
    }
    v54 = v33 | (v32 << 16);
    v55 = v39;
    v146.origin.x = x;
    v146.origin.y = y;
    v146.size.width = width;
    v146.size.height = height;
    v147 = CGRectIntegral(v146);
    objc_msgSend(v35, sel_setBounds_, v147.origin.x, v147.origin.y, v147.size.width, v147.size.height);

    v56 = v55;
    Date.init()();
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v27);
    objc_msgSend(v35, sel_setModificationDate_, isa);

    v58 = objc_msgSend(v35, sel_action);
    v59 = v114;
    if (!v58)
    {
      type metadata accessor for Link();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
      CRRegister.wrappedValue.getter();
      v60 = *(_QWORD *)&v133.b;
      if (*(_QWORD *)&v133.b >> 60 != 15)
      {
        v108 = v9;
        v61 = *(_QWORD *)&v133.a;
        v62 = objc_allocWithZone(MEMORY[0x1E0DB0700]);
        outlined copy of Data?(v61, v60);
        v63 = specialized @nonobjc PKDrawingConcrete.init(data:)();
        v107 = v61;
        outlined consume of Data?(v61, v60);
        v64 = objc_msgSend(v63, sel_itemURL);

        v65 = v113;
        v66 = v112;
        if (v64)
        {
          v67 = (uint64_t)v110;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          v68 = 0;
          v69 = (uint64_t)v111;
        }
        else
        {
          v68 = 1;
          v69 = (uint64_t)v111;
          v67 = (uint64_t)v110;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56))(v67, v68, 1, v65);
        outlined init with take of URL?(v67, v69);
        v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v69, 1, v65);
        v71 = v107;
        if (v70 == 1)
        {
          outlined consume of Data?(v107, v60);
          outlined destroy of StocksKitCurrencyCache.Provider?(v69, &demangling cache variable for type metadata for URL?);
        }
        else
        {
          v94 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 32);
          v95 = v56;
          LODWORD(v111) = v54;
          v96 = v109;
          v94(v109, v69, v65);
          v97 = objc_allocWithZone(MEMORY[0x1E0CD0DA0]);
          v98 = v56;
          v99 = v71;
          v100 = v98;
          URL._bridgeToObjectiveC()(v101);
          v103 = v102;
          v104 = objc_msgSend(v97, sel_initWithURL_, v102);

          objc_msgSend(v35, sel_setAction_, v104);
          outlined consume of Data?(v99, v60);
          v105 = v96;
          v54 = (int)v111;
          v56 = v95;
          v59 = v114;
          (*(void (**)(char *, uint64_t))(v66 + 8))(v105, v65);
        }
        v9 = v108;
      }
    }
    v72 = v130;
    outlined init with copy of SharedTagged_9<TaggedCanvasElement>?((uint64_t)v129, v130);
    v73 = v131;
    v74 = v132;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v131 + 48))(v72, 1, v132) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v72, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
      v75 = v128;
      v76 = v127;
      v77 = v126;
      v78 = v124;
      v79 = v123;
      v80 = v122;
      v81 = v121;
      v82 = v120;
      v83 = v119;
      v84 = v118;
      v85 = v117;
      v86 = v116;
LABEL_20:
      v133.a = v78;
      v133.b = v79;
      v133.c = v80;
      v133.d = v81;
      v133.tx = v82;
      v133.ty = v83;
      v134 = v84;
      v135 = v85;
      v136 = v86;
      v137 = v54;
      v138 = BYTE2(v54);
      v93 = type metadata accessor for Link();
      CanvasElementPDFAnnotation.setRendered<A, B>(in:element:capsule:options:)(v77, v9, v76, (uint64_t)&v133, v59, v93, v75, (uint64_t)&protocol witness table for Link);

      return;
    }
    v108 = v9;
    v129 = v56;
    LODWORD(v111) = v54;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 32))(v125, v72, v74);
    v87 = v115;
    v88 = (void *)v115;
    v75 = v128;
    v76 = v127;
    if (v115 >> 62)
    {
      if (v115 >> 62 != 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v125, v74);
        goto LABEL_19;
      }
      v88 = (void *)(v115 & 0x3FFFFFFFFFFFFFFFLL);
    }
    outlined copy of PaperDocument.PDFDocumentUse(v115);
    v89 = v73;
    v90 = type metadata accessor for Link();
    v91 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
    v92 = v125;
    specialized CanvasElementPDFAnnotation.encodeCanvasElement<A, B>(_:_:ref:writeCanvasElement:capsule:)(v88, v125, 1, v76, v90, v59, v91, (char *)&protocol witness table for Link, v75);
    outlined consume of PaperDocument.PDFDocumentUse(v87);
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v92, v74);
LABEL_19:
    v77 = v126;
    v78 = v124;
    v79 = v123;
    v80 = v122;
    v81 = v121;
    v82 = v120;
    v83 = v119;
    v84 = v118;
    v85 = v117;
    v86 = v116;
    v54 = (int)v111;
    v56 = v129;
    v9 = v108;
    goto LABEL_20;
  }
}

uint64_t protocol witness for CanvasElement.shared(_:) in conformance Link(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[16];

  v2 = type metadata accessor for CRKeyPath();
  v4 = MEMORY[0x1E0C80A78](v2, v3);
  v8[15] = 4;
  (*(void (**)(_BYTE *, uint64_t, double))(v6 + 16))(&v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v4);
  lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
  return SharedTagged_9.init(_:id:)();
}

uint64_t protocol witness for CanvasElement.indexableTextContent<A>(in:) in conformance Link()
{
  return specialized Link.indexableTextContent<A>(in:)();
}

uint64_t protocol witness for PaperRenderable.render<A>(in:id:capsule:options:) in conformance Link(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized Link.render<A>(in:id:capsule:options:)
                                                                            + async function pointer to specialized Link.render<A>(in:id:capsule:options:));
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return v14(a1, a2, a4, a5, a6);
}

uint64_t specialized Link.render<A>(in:id:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 80) = a1;
  *(_QWORD *)(v4 + 88) = v3;
  *(_BYTE *)(v4 + 96) = *(_BYTE *)(a3 + 1);
  *(_BYTE *)(v4 + 97) = *(_BYTE *)(a3 + 2);
  return swift_task_switch();
}

uint64_t specialized Link.render<A>(in:id:capsule:options:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  id v8;
  char v9;
  char v10;
  CGContext *v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;

  type metadata accessor for Link();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  CRRegister.wrappedValue.getter();
  v1 = *(_QWORD *)(v0 + 24);
  if (v1 >> 60 == 15)
  {
    if (one-time initialization token for logger != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)logger);
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1DDB0F000, v3, v4, "There is no synapse data to render the link.", v5, 2u);
      MEMORY[0x1DF0E6558](v5, -1, -1);
    }

  }
  else
  {
    v6 = *(_QWORD *)(v0 + 16);
    v7 = objc_allocWithZone(MEMORY[0x1E0DB0700]);
    outlined copy of Data._Representation(v6, v1);
    v8 = specialized @nonobjc PKDrawingConcrete.init(data:)();
    v9 = *(_BYTE *)(v0 + 97);
    v10 = *(_BYTE *)(v0 + 96);
    v11 = *(CGContext **)(v0 + 80);
    outlined consume of Data?(v6, v1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    v12 = *(double *)(v0 + 16);
    v13 = *(double *)(v0 + 24);
    v14 = *(double *)(v0 + 32);
    v15 = *(double *)(v0 + 40);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    specialized static Link.renderLink(synapseItem:in:frame:rotation:darkMode:isRTL:)(v8, v11, v10, v9, v12, v13, v14, v15, *(CGFloat *)(v0 + 16));
    outlined consume of Data?(v6, v1);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized static Link.synapseDataRepresentation(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  NSURL *v10;
  void *v11;
  void *v12;
  Class isa;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  id v31[2];

  v31[1] = *(id *)MEMORY[0x1E0C80C00];
  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = (char *)v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0) + 32;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v3, 1, 1, v7);
  v9 = (void *)MEMORY[0x1DF0E41AC](v4, v6);
  swift_bridgeObjectRelease();
  URL._bridgeToObjectiveC()(v10);
  v12 = v11;
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v3, 1, v7) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v3, v7);
  }
  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DB0700]), sel_initWithDisplayTitle_sourceIdentifier_sourceName_itemURL_identifier_, 0, v9, 0, v12, isa);

  v31[0] = 0;
  v15 = objc_msgSend(v14, sel_dataRepresentationWithError_, v31);
  v16 = v31[0];
  if (v15)
  {
    v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    v18 = v16;
    v19 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for logger != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)logger);
    v21 = v19;
    v22 = v19;
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = (void *)swift_slowAlloc();
      v31[0] = v26;
      *(_DWORD *)v25 = 136315138;
      swift_getErrorValue();
      v27 = Error.localizedDescription.getter();
      v30 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, (uint64_t *)v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1DDB0F000, v23, v24, "%s", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1DF0E6558](v26, -1, -1);
      MEMORY[0x1DF0E6558](v25, -1, -1);

    }
    else
    {

    }
    return 0;
  }
  return v17;
}

uint64_t specialized Link.indexableTextContent<A>(in:)()
{
  id v0;
  id v1;
  uint64_t v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  type metadata accessor for Link();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  CRRegister.wrappedValue.getter();
  if (v9 >> 60 != 15)
  {
    v0 = objc_allocWithZone(MEMORY[0x1E0DB0700]);
    outlined copy of Data._Representation(v8, v9);
    v1 = specialized @nonobjc PKDrawingConcrete.init(data:)();
    outlined consume of Data?(v8, v9);
    v4 = objc_msgSend(v1, sel_displayTitle);

    if (v4)
    {
      v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v7 = v6;

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<IndexableTextContent>);
      v2 = swift_allocObject();
      *(_OWORD *)(v2 + 16) = xmmword_1DDF32CF0;
      *(_QWORD *)(v2 + 32) = v5;
      *(_QWORD *)(v2 + 40) = v7;
      *(_QWORD *)(v2 + 48) = v5;
      *(_QWORD *)(v2 + 56) = v7;
      swift_bridgeObjectRetain();
      outlined consume of Data?(v8, v9);
      return v2;
    }
    outlined consume of Data?(v8, v9);
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t base witness table accessor for CRStruct_Base_3 in Link()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
}

uint64_t base witness table accessor for CRStruct_Base in Link()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
}

uint64_t base witness table accessor for CRDT in Link()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
}

uint64_t base witness table accessor for CRMergeable in Link()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
}

uint64_t base witness table accessor for CRType in Link()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
}

uint64_t associated type witness table accessor for CRDT.Partial : PartialCRDT in Link()
{
  return lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CRStructMergeableDelta_3<Link> and conformance CRStructMergeableDelta_3<A>, &demangling cache variable for type metadata for CRStructMergeableDelta_3<Link>, MEMORY[0x1E0D12748]);
}

uint64_t base witness table accessor for CRCodable in Link()
{
  return lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Link and conformance Link, (uint64_t (*)(uint64_t))type metadata accessor for Link, (uint64_t)&protocol conformance descriptor for Link);
}

uint64_t sub_1DDD8F054()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDD8F094()
{
  type metadata accessor for Link();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  return CRRegister.projectedValue.getter();
}

uint64_t sub_1DDD8F0EC()
{
  type metadata accessor for Link();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  return CRRegister.projectedValue.getter();
}

uint64_t *initializeBufferWithCopyOfBuffer for Link(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for Link(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = a1 + *(int *)(a2 + 24);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Link(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Link(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Link(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for Link(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Link()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDD8F61C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_7:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[6];
    goto LABEL_7;
  }
  v16 = *(_QWORD *)(a1 + a3[7]);
  if (v16 >= 0xFFFFFFFF)
    LODWORD(v16) = -1;
  return (v16 + 1);
}

uint64_t storeEnumTagSinglePayload for Link()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1DDD8F700(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = v13;
    v15 = a4[5];
LABEL_7:
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v15 = a4[6];
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + a4[7]) = (a2 - 1);
  return result;
}

void type metadata completion function for Link()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for CRRegister<CGRect>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for CRRegister<CGFloat>();
    if (v1 <= 0x3F)
    {
      type metadata accessor for CRRegister<Data?>();
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

void type metadata accessor for CRRegister<Data?>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CRRegister<Data?>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Data?);
    lazy protocol witness table accessor for type Data? and conformance <A> A?();
    v0 = type metadata accessor for CRRegister();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CRRegister<Data?>);
  }
}

uint64_t storeEnumTagSinglePayload for PencilAndPaperFeatureFlags(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1DDD8F930 + 4 * byte_1DDF42985[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1DDD8F964 + 4 * byte_1DDF42980[v4]))();
}

uint64_t sub_1DDD8F964(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDD8F96C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDD8F974);
  return result;
}

uint64_t sub_1DDD8F980(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDD8F988);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1DDD8F98C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDD8F994(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PencilAndPaperFeatureFlags()
{
  return &type metadata for PencilAndPaperFeatureFlags;
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance PencilAndPaperFeatureFlags()
{
  return "PencilAndPaper";
}

uint64_t protocol witness for FeatureFlagsKey.feature.getter in conformance PencilAndPaperFeatureFlags()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_1DDD8FA34 + 4 * byte_1DDF4298A[*v0]))("SelectionRewrite", 16);
}

const char *sub_1DDD8FA34()
{
  return "ReflowOnResize";
}

const char *sub_1DDD8FA54()
{
  return "CatalystDrawing";
}

const char *sub_1DDD8FA68()
{
  return "DoubleTapAnywhereForFormField";
}

const char *sub_1DDD8FA7C()
{
  return "MathPaper";
}

const char *sub_1DDD8FA90()
{
  return "PasteAsHandwriting";
}

ValueMetadata *type metadata accessor for AutofillFeatureFlags()
{
  return &type metadata for AutofillFeatureFlags;
}

uint64_t storeEnumTagSinglePayload for AutofillFeatureFlags(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1DDD8FB10 + 4 * byte_1DDF42997[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1DDD8FB44 + 4 * byte_1DDF42992[v4]))();
}

uint64_t sub_1DDD8FB44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDD8FB4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDD8FB54);
  return result;
}

uint64_t sub_1DDD8FB60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDD8FB68);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1DDD8FB6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDD8FB74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MobileQuickLookFeatureFlags()
{
  return &type metadata for MobileQuickLookFeatureFlags;
}

ValueMetadata *type metadata accessor for VisualIntelligenceFeatureFlags()
{
  return &type metadata for VisualIntelligenceFeatureFlags;
}

unint64_t lazy protocol witness table accessor for type VisualIntelligenceFeatureFlags and conformance VisualIntelligenceFeatureFlags()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VisualIntelligenceFeatureFlags and conformance VisualIntelligenceFeatureFlags;
  if (!lazy protocol witness table cache variable for type VisualIntelligenceFeatureFlags and conformance VisualIntelligenceFeatureFlags)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for VisualIntelligenceFeatureFlags, &type metadata for VisualIntelligenceFeatureFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VisualIntelligenceFeatureFlags and conformance VisualIntelligenceFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type VisualIntelligenceFeatureFlags and conformance VisualIntelligenceFeatureFlags;
  if (!lazy protocol witness table cache variable for type VisualIntelligenceFeatureFlags and conformance VisualIntelligenceFeatureFlags)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for VisualIntelligenceFeatureFlags, &type metadata for VisualIntelligenceFeatureFlags);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VisualIntelligenceFeatureFlags and conformance VisualIntelligenceFeatureFlags);
  }
  return result;
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance VisualIntelligenceFeatureFlags()
{
  return "VisualIntelligence";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance VisualIntelligenceFeatureFlags()
{
  return "Cling";
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance AutofillFeatureFlags()
{
  return "AutoFillUI";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance AutofillFeatureFlags()
{
  _BYTE *v0;

  if (*v0)
    return "afui_panel_ui_ipados";
  else
    return "afui_panel_ui_ios";
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance MobileQuickLookFeatureFlags()
{
  return "MobileQuickLook";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance MobileQuickLookFeatureFlags()
{
  _BYTE *v0;

  if (*v0)
    return "Phoebe";
  else
    return "LightRedesign";
}

uint64_t storeEnumTagSinglePayload for VisualIntelligenceFeatureFlags(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1DDD8FD6C + 4 * byte_1DDF4299C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1DDD8FD8C + 4 * byte_1DDF429A1[v4]))();
}

_BYTE *sub_1DDD8FD6C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1DDD8FD8C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1DDD8FD94(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1DDD8FD9C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1DDD8FDA4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1DDD8FDAC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FeedbackFeatures()
{
  return &type metadata for FeedbackFeatures;
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance FeedbackFeatures()
{
  return "FeedbackFrameworks";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance FeedbackFeatures()
{
  return "CentralizedFeedback";
}

Swift::Void __swiftcall ShapeEditingControl.setButtonMultiSelectBackground()()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  _QWORD v4[6];

  if (one-time initialization token for buttonSize != -1)
    swift_once();
  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3828]), sel_initWithSize_, *(double *)&static ShapeEditingControl.buttonSize, *(double *)&static ShapeEditingControl.buttonSize);
  v4[4] = specialized thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  v4[5] = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1107296256;
  v4[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
  v4[3] = &block_descriptor_47;
  v2 = _Block_copy(v4);
  swift_release();
  v3 = objc_msgSend(v1, sel_imageWithActions_, v2);

  _Block_release(v2);
  if ((swift_isEscapingClosureAtFileLocation() & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_button), sel_setImage_forState_, v3, 0);

  }
}

void ShapeEditingControl.isUserInteractionEnabled.setter(char a1)
{
  char *v1;
  objc_class *ObjectType;
  unsigned int v4;
  void *v5;
  char **v6;
  id v7;
  objc_super v8;
  objc_super v9;

  ObjectType = (objc_class *)swift_getObjectType();
  v9.receiver = v1;
  v9.super_class = ObjectType;
  objc_msgSendSuper2(&v9, sel_setUserInteractionEnabled_, a1 & 1);
  v8.receiver = v1;
  v8.super_class = ObjectType;
  v4 = objc_msgSendSuper2(&v8, sel_isUserInteractionEnabled);
  v5 = (void *)objc_opt_self();
  v6 = &selRef_secondaryLabelColor;
  if (!v4)
    v6 = &selRef_quaternaryLabelColor;
  v7 = objc_msgSend(v5, *v6);
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_button], sel_setTitleColor_forState_, v7, 0);

}

Swift::Void __swiftcall ShapeEditingControl.setButtonValue(_:isPercent:)(Swift::Float _, Swift::Bool isPercent)
{
  uint64_t v2;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;

  v5 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_button);
  v6 = objc_msgSend(v5, sel_imageForState_, 0);

  if (v6)
    objc_msgSend(v5, sel_setImage_forState_, 0, 0);
  if (!isPercent)
    goto LABEL_8;
  _ = _ * 100.0;
  if ((~LODWORD(_) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (_ <= -9.2234e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (_ < 9.2234e18)
  {
LABEL_11:
    lazy protocol witness table accessor for type Int and conformance Int();
    v7 = BinaryInteger.description.getter();
    v8 = (void *)MEMORY[0x1DF0E41AC](v7);
    swift_bridgeObjectRelease();
    objc_msgSend(v5, sel_setTitle_forState_, v8, 0);

    return;
  }
  __break(1u);
LABEL_8:
  if ((~LODWORD(_) & 0x7F800000) == 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (_ <= -9.2234e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (_ < 9.2234e18)
    goto LABEL_11;
LABEL_16:
  __break(1u);
}

Swift::Void __swiftcall ShapeEditingControl.setButtonBackground(dynamicColor:showMultipleShapesUI:)(UIColor_optional dynamicColor, Swift::Bool showMultipleShapesUI)
{
  uint64_t v2;
  Swift::Bool is_nil;
  objc_class *isa;
  void *v5;
  objc_class *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t countAndFlagsBits;
  void *v14;
  void *object;
  uint64_t v16;
  id v17;
  Swift::String v18;
  Swift::String_optional v19;
  Swift::String v20;
  Swift::String v21;
  id v22;
  UIColor_optional v23;
  Swift::String v24;

  is_nil = dynamicColor.is_nil;
  isa = dynamicColor.value.super.isa;
  v5 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_nonDynamicButtonBackgroundColor);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_nonDynamicButtonBackgroundColor) = dynamicColor.value.super.isa;
  v6 = dynamicColor.value.super.isa;

  if (is_nil)
  {
    ShapeEditingControl.setButtonMultiSelectBackground()();
  }
  else
  {
    v7 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_button);
    type metadata accessor for ShapeColorButton();
    v8 = swift_dynamicCastClass();
    if (v8)
    {
      v9 = (void *)v8;
      v10 = v7;
      v23.value.super.isa = isa;
      ShapeColorButton.setColor(_:)(v23);
      if (isa)
      {
        v11 = v10;
        v12 = -[objc_class accessibilityName](v6, sel_accessibilityName);
        countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
        object = v14;

      }
      else
      {
        v16 = one-time initialization token for paperKitBundle;
        v17 = v10;
        if (v16 != -1)
          swift_once();
        v24._object = (void *)0x80000001DDF54EE0;
        v18._countAndFlagsBits = 0x726F6C6F63206F4ELL;
        v18._object = (void *)0xE800000000000000;
        v19.value._countAndFlagsBits = 0x617A696C61636F4CLL;
        v19.value._object = (void *)0xEB00000000656C62;
        v20._countAndFlagsBits = 0;
        v20._object = (void *)0xE000000000000000;
        v24._countAndFlagsBits = 0xD000000000000020;
        v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, paperKitBundle, v20, v24);
        countAndFlagsBits = v21._countAndFlagsBits;
        object = v21._object;
      }
      v22 = (id)MEMORY[0x1DF0E41AC](countAndFlagsBits, object);
      swift_bridgeObjectRelease();
      objc_msgSend(v9, sel_setAccessibilityValue_, v22);

    }
    else
    {
      objc_msgSend(v7, sel_setBackgroundColor_, v6);
    }
  }
}

id ShapeStyleEditingView.__deallocating_deinit()
{
  return ControlHandleView.__deallocating_deinit(type metadata accessor for ShapeStyleEditingView);
}

uint64_t type metadata accessor for ShapeStyleEditingView()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for HorizontalShapeStyleEditingViewLayout()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for VerticalShapeStyleEditingViewLayout()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for CompactShapeStyleEditingViewLayout()
{
  return objc_opt_self();
}

void one-time initialization function for buttonSize()
{
  static ShapeEditingControl.buttonSize = 0x4042000000000000;
}

{
  static MiniMenuConstants.buttonSize = 0x4044000000000000;
}

void one-time initialization function for compactButtonSize()
{
  static ShapeEditingControl.compactButtonSize = 0x4043000000000000;
}

void closure #1 in ShapeEditingControl.setButtonMultiSelectBackground()(id a1)
{
  unint64_t v2;
  CGContext *v3;
  id v4;
  CGColor *v5;
  id v6;
  CGContext *v7;
  CGContext *v8;
  id v9;
  CGContext *v10;

  if (one-time initialization token for buttonSize != -1)
    swift_once();
  *(double *)&v2 = (*(double *)&static ShapeEditingControl.buttonSize + -20.0) * 0.5;
  v3 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  v4 = objc_msgSend((id)objc_opt_self(), sel_quaternaryLabelColor);
  v5 = (CGColor *)objc_msgSend(v4, sel_CGColor);

  CGContextSetStrokeColorWithColor(v3, v5);
  v6 = objc_msgSend(a1, sel_CGContext);
  CGContextRef.move(to:)((CGPoint)__PAIR128__(*(double *)&static ShapeEditingControl.buttonSize * 0.5, v2));

  v7 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  CGContextSetLineWidth(v7, 2.0);

  v8 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  CGContextSetLineCap(v8, kCGLineCapRound);

  v9 = objc_msgSend(a1, sel_CGContext);
  CGContextRef.addLine(to:)((CGPoint)__PAIR128__(*(double *)&static ShapeEditingControl.buttonSize * 0.5, *(double *)&static ShapeEditingControl.buttonSize - *(double *)&v2));

  v10 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  CGContextDrawPath(v10, kCGPathStroke);

}

Swift::Void __swiftcall ShapeColorButton.setColor(_:)(UIColor_optional a1)
{
  _BYTE *v1;
  Class isa;
  uint64_t *v3;
  double v4;
  id v5;
  double *v6;
  uint64_t v7;
  void *v8;
  objc_class *v9;
  _QWORD v10[6];

  isa = a1.value.super.isa;
  if (v1[OBJC_IVAR____TtC8PaperKit16ShapeColorButton_showCompactUI] != 1)
  {
    if (one-time initialization token for buttonSize != -1)
      swift_once();
    v3 = &static ShapeEditingControl.buttonSize;
    goto LABEL_7;
  }
  if (one-time initialization token for compactButtonSize != -1)
    goto LABEL_10;
  while (1)
  {
    v3 = &static ShapeEditingControl.compactButtonSize;
LABEL_7:
    v4 = *(double *)v3;
    v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3828]), sel_initWithSize_, v4, v4);
    v6 = (double *)swift_allocObject();
    *((_QWORD *)v6 + 2) = isa;
    *((_QWORD *)v6 + 3) = v1;
    v6[5] = 0.0;
    v6[6] = 0.0;
    v6[4] = 4.0;
    v6[7] = v4;
    v6[8] = v4;
    v6[9] = v4;
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = partial apply for closure #1 in ShapeColorButton.setColor(_:);
    *(_QWORD *)(v7 + 24) = v6;
    v10[4] = partial apply for thunk for @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
    v10[5] = v7;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 1107296256;
    v10[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIGraphicsImageRendererContext) -> ();
    v10[3] = &block_descriptor_8;
    v8 = _Block_copy(v10);
    v9 = isa;
    isa = v1;
    swift_retain();
    swift_release();
    v1 = objc_msgSend(v5, sel_imageWithActions_, v8);

    _Block_release(v8);
    LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v5 & 1) == 0)
      break;
    __break(1u);
LABEL_10:
    swift_once();
  }
  -[objc_class setImage:forState:](isa, sel_setImage_forState_, v1, 0);
  swift_release();

}

uint64_t type metadata accessor for ShapeEditingControl()
{
  return objc_opt_self();
}

void closure #1 in ShapeColorButton.setColor(_:)(void *a1, void *a2, uint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9)
{
  char v15;
  CGContext *v16;
  CGContext *v17;
  CGContext *v18;
  CGColor *v19;
  CGContext *v20;
  id v21;
  CGColor *v22;
  CGContext *v23;
  CGContext *v24;
  CGContext *v25;
  CGPathDrawingMode v26;
  int v28;
  void *v29;
  double v30;
  char **v31;
  id v32;
  CGContext *v33;
  CGContext *v34;
  CGContext *v35;
  unint64_t v36;
  unint64_t v37;
  CGContext *v38;
  void *v39;
  id v40;
  CGColor *v41;
  id v42;
  CGContext *v43;
  CGContext *v44;
  id v45;
  CGContext *v46;
  CGContext *v47;
  CGContext *v48;
  id v49;
  CGColor *v50;
  CGContext *v51;
  CGColor *v52;
  CGContext *v53;
  id v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;

  if (a2)
  {
    v15 = *(_BYTE *)(a3 + OBJC_IVAR____TtC8PaperKit16ShapeColorButton_showRingUI);
    v54 = a2;
    v16 = (CGContext *)objc_msgSend(a1, sel_CGContext);
    v17 = v16;
    if ((v15 & 1) != 0)
    {
      CGContextSetLineWidth(v16, a4);

      v18 = (CGContext *)objc_msgSend(a1, sel_CGContext);
      v19 = (CGColor *)objc_msgSend(v54, sel_CGColor);
      CGContextSetStrokeColorWithColor(v18, v19);

      v20 = (CGContext *)objc_msgSend(a1, sel_CGContext);
      v21 = objc_msgSend((id)objc_opt_self(), sel_secondarySystemBackgroundColor);
      v22 = (CGColor *)objc_msgSend(v21, sel_CGColor);

      CGContextSetFillColorWithColor(v20, v22);
      v23 = (CGContext *)objc_msgSend(a1, sel_CGContext);
      v55.origin.x = a5;
      v55.origin.y = a6;
      v55.size.width = a7;
      v55.size.height = a8;
      v56 = CGRectInset(v55, a4 * 0.5, a4 * 0.5);
      CGContextAddEllipseInRect(v23, v56);

      v24 = (CGContext *)objc_msgSend(a1, sel_CGContext);
      v25 = v24;
      v26 = kCGPathFillStroke;
    }
    else
    {
      v52 = (CGColor *)objc_msgSend(v54, sel_CGColor);
      CGContextSetFillColorWithColor(v17, v52);

      v53 = (CGContext *)objc_msgSend(a1, sel_CGContext);
      v60.origin.x = a5;
      v60.origin.y = a6;
      v60.size.width = a7;
      v60.size.height = a8;
      CGContextAddEllipseInRect(v53, v60);

      v24 = (CGContext *)objc_msgSend(a1, sel_CGContext);
      v25 = v24;
      v26 = kCGPathFill;
    }
    goto LABEL_12;
  }
  v28 = *(unsigned __int8 *)(a3 + OBJC_IVAR____TtC8PaperKit16ShapeColorButton_showRingUI);
  v29 = (void *)objc_opt_self();
  if (v28)
    v30 = 12.0;
  else
    v30 = 14.0;
  v31 = &selRef_secondarySystemBackgroundColor;
  if (!v28)
    v31 = &selRef_tertiarySystemFillColor;
  v32 = objc_msgSend(v29, *v31);
  v54 = objc_msgSend(v32, sel_CGColor);

  v33 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  CGContextSetFillColorWithColor(v33, (CGColorRef)v54);

  v34 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  v57.origin.x = a5;
  v57.origin.y = a6;
  v57.size.width = a7;
  v57.size.height = a8;
  CGContextAddEllipseInRect(v34, v57);

  v35 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  CGContextDrawPath(v35, kCGPathFill);

  *(double *)&v36 = (a9 - v30) * 0.5;
  *(double *)&v37 = a9 * 0.5 + v30 * 0.5;
  v38 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  v39 = (void *)objc_opt_self();
  v40 = objc_msgSend(v39, sel_redColor);
  v41 = (CGColor *)objc_msgSend(v40, sel_CGColor);

  CGContextSetStrokeColorWithColor(v38, v41);
  v42 = objc_msgSend(a1, sel_CGContext);
  CGContextRef.move(to:)((CGPoint)__PAIR128__(v37, v36));

  v43 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  CGContextSetLineWidth(v43, 4.0);

  v44 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  CGContextSetLineCap(v44, kCGLineCapRound);

  v45 = objc_msgSend(a1, sel_CGContext);
  CGContextRef.addLine(to:)((CGPoint)__PAIR128__(v36, v37));

  v46 = (CGContext *)objc_msgSend(a1, sel_CGContext);
  CGContextDrawPath(v46, kCGPathStroke);

  if ((v28 & 1) != 0)
  {
    v47 = (CGContext *)objc_msgSend(a1, sel_CGContext);
    CGContextSetLineWidth(v47, a4);

    v48 = (CGContext *)objc_msgSend(a1, sel_CGContext);
    v49 = objc_msgSend(v39, sel_quaternarySystemFillColor);
    v50 = (CGColor *)objc_msgSend(v49, sel_CGColor);

    CGContextSetStrokeColorWithColor(v48, v50);
    v51 = (CGContext *)objc_msgSend(a1, sel_CGContext);
    v58.origin.x = a5;
    v58.origin.y = a6;
    v58.size.width = a7;
    v58.size.height = a8;
    v59 = CGRectInset(v58, a4 * 0.5, a4 * 0.5);
    CGContextAddEllipseInRect(v51, v59);

    v24 = (CGContext *)objc_msgSend(a1, sel_CGContext);
    v25 = v24;
    v26 = kCGPathStroke;
LABEL_12:
    CGContextDrawPath(v24, v26);

  }
}

uint64_t type metadata accessor for ShapeColorButton()
{
  return objc_opt_self();
}

void @objc ShapeStyleEditingView.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id VerticalOpacityView.__deallocating_deinit()
{
  return ControlHandleView.__deallocating_deinit(type metadata accessor for VerticalOpacityView);
}

uint64_t type metadata accessor for VerticalOpacityView()
{
  return objc_opt_self();
}

void specialized ShapeEditingControl.init(coder:)()
{
  char *v0;
  uint64_t v1;

  v1 = OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_label;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_init);
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_controlHeight] = 0x4044000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_controlWidth] = 0x405D000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_smallerControlWidth] = 0x405C000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit19ShapeEditingControl_nonDynamicButtonBackgroundColor] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t block_copy_helper_47(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_47()
{
  return swift_release();
}

uint64_t sub_1DDD912FC()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in ShapeColorButton.setColor(_:)(void *a1)
{
  uint64_t v1;

  closure #1 in ShapeColorButton.setColor(_:)(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(CGFloat *)(v1 + 32), *(CGFloat *)(v1 + 40), *(CGFloat *)(v1 + 48), *(CGFloat *)(v1 + 56), *(CGFloat *)(v1 + 64), *(double *)(v1 + 72));
}

uint64_t sub_1DDD9133C()
{
  return swift_deallocObject();
}

uint64_t Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v6 = v5;
  v38 = a1;
  v42 = a5;
  v41 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v36 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v39 = (char *)&v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(a2 + 16);
  v43 = v23;
  v44 = a3;
  v35 = a4;
  v45 = a4;
  swift_getKeyPath();
  v40 = a2;
  v37 = v6;
  Capsule<>.subscript.getter();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
LABEL_6:
    v33 = 1;
    v26 = v41;
    v32 = v42;
    v27 = v40;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v32, v33, 1, v27);
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v39, v18, v19);
  v24 = v37;
  Ref.subscript.getter();
  v25 = PKDrawingStruct.hasAnyEraserStrokes<A>(in:createdBefore:)(v24, v38, v23, a3);
  outlined destroy of PKStrokeProperties((uint64_t)v14, (uint64_t (*)(_QWORD))type metadata accessor for PKDrawingStruct);
  if ((v25 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v39, v19);
    goto LABEL_6;
  }
  v27 = v40;
  v26 = v41;
  v28 = v36;
  v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 16))(v36, v37, v40);
  MEMORY[0x1E0C80A78](v29, v30);
  v31 = v35;
  *(&v35 - 4) = a3;
  *(&v35 - 3) = v31;
  *(&v35 - 2) = v38;
  Capsule.callAsFunction<A>(_:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v39, v19);
  v32 = v42;
  (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v42, v28, v27);
  v33 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v32, v33, 1, v27);
}

id CRRegister<>.isEraserStroke<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void *v43;
  id v44;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;

  v55 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v48, v9);
  v49 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v46 - v13;
  v15 = *(_QWORD *)(a3 + 16);
  v56 = a2;
  v54 = v15;
  v16 = type metadata accessor for Capsule();
  v53 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v47 = (char *)&v46 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v50 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v46 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v46 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v32, v33);
  v51 = (uint64_t)&v46 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35, v36);
  v52 = (uint64_t)&v46 - v37;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  CRRegister.value.getter();
  SharedTagged_2.tagged1.getter();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v27, v24);
  v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  v39 = *(_QWORD *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v31, 1, v38) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v31, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
    return 0;
  }
  v40 = v55;
  v50 = v39;
  Ref.subscript.getter();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v31, v38);
  outlined init with take of PKStrokeStruct(v51, v52);
  v41 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v47, v40, v16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  CRRegister.wrappedValue.getter();
  while (1)
  {
    MEMORY[0x1DF0E6450](MEMORY[0x1E0D12B28], v16);
    Ref.subscript.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
    CRRegister.wrappedValue.getter();
    outlined destroy of PKStrokeProperties((uint64_t)v14, type metadata accessor for PKStrokeInheritedProperties);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v8, 1, v19) == 1)
      break;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v23, v8, v19);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v41, v16);
  v42 = (uint64_t)v49;
  Ref.subscript.getter();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  CRRegister.wrappedValue.getter();
  v43 = v57;
  outlined destroy of PKStrokeProperties(v42, type metadata accessor for PKStrokeInheritedProperties);
  if (!v43)
  {
    outlined destroy of PKStrokeProperties(v52, type metadata accessor for PKStrokeStruct);
    return 0;
  }
  v44 = objc_msgSend(v43, sel__isEraserInk);

  outlined destroy of PKStrokeProperties(v52, type metadata accessor for PKStrokeStruct);
  return v44;
}

uint64_t CRRegister<>.isEraserStroke<A>(in:createdBefore:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t i;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  unsigned __int8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;

  v90 = a3;
  v85 = a2;
  v94 = a1;
  v92 = *a1;
  v3 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x1E0C80A78](v3, v4);
  v84 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x1E0C80A78](v79, v6);
  v80 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  v81 = *(_QWORD *)(v8 - 8);
  v82 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v78 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date();
  v87 = *(_QWORD *)(v11 - 8);
  v88 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v83 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v86 = (char *)&v75 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v91, v21);
  v93 = (char *)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v75 - v25;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v29);
  v31 = (char *)&v75 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v95 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v75 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x1E0C80A78](v36, v37);
  v39 = (char *)&v75 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v77, v40);
  v42 = (char *)&v75 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v43, v44);
  v89 = (char *)&v75 - v45;
  MEMORY[0x1E0C80A78](v46, v47);
  v96 = (uint64_t)&v75 - v48;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  CRRegister.value.getter();
  SharedTagged_2.tagged1.getter();
  (*(void (**)(char *, uint64_t))(v95 + 8))(v35, v32);
  v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  v50 = *(_QWORD *)(v49 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v39, 1, v49) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v39, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
LABEL_12:
    v71 = 0;
    return v71 & 1;
  }
  v76 = v42;
  v51 = (uint64_t)v89;
  v52 = v94;
  v95 = v50;
  Ref.subscript.getter();
  (*(void (**)(char *, uint64_t))(v95 + 8))(v39, v49);
  outlined init with take of PKStrokeStruct(v51, v96);
  v97 = v52;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
  CRRegister.wrappedValue.getter();
  for (i = v92; ; i = v54)
  {
    v54 = i;
    v55 = type metadata accessor for Capsule.Ref();
    MEMORY[0x1DF0E6450](MEMORY[0x1E0D12A88], v55);
    Ref.subscript.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
    CRRegister.wrappedValue.getter();
    outlined destroy of PKStrokeProperties((uint64_t)v26, type metadata accessor for PKStrokeInheritedProperties);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v20, 1, v27) == 1)
      break;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v27);
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v31, v20, v27);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  swift_release();
  v56 = (uint64_t)v93;
  Ref.subscript.getter();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v27);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
  CRRegister.wrappedValue.getter();
  v57 = v97;
  outlined destroy of PKStrokeProperties(v56, type metadata accessor for PKStrokeInheritedProperties);
  if (!v57)
  {
    v73 = v96;
LABEL_11:
    outlined destroy of PKStrokeProperties(v73, type metadata accessor for PKStrokeStruct);
    goto LABEL_12;
  }
  v58 = objc_msgSend(v57, sel__isEraserInk);
  v59 = v96;
  v60 = (uint64_t)v76;
  outlined init with copy of PKStrokeStruct(v96, (uint64_t)v76);
  v62 = v86;
  v61 = v87;
  v63 = v88;
  (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v86, v85, v88);
  if ((v58 & 1) == 0)
  {

    (*(void (**)(char *, uint64_t))(v61 + 8))(v62, v63);
    outlined destroy of PKStrokeProperties(v60, type metadata accessor for PKStrokeStruct);
    v73 = v59;
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
  v64 = (uint64_t)v80;
  CRRegister.wrappedValue.getter();
  v65 = v78;
  v67 = v81;
  v66 = v82;
  (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v78, v64 + *(int *)(v79 + 32), v82);
  outlined destroy of PKStrokeProperties(v64, type metadata accessor for PKStrokeProperties);
  v68 = v84;
  Ref.subscript.getter();
  (*(void (**)(char *, uint64_t))(v67 + 8))(v65, v66);
  v69 = v83;
  PKStrokePath.creationDate.getter();
  v70 = type metadata accessor for PKStrokePath();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v70 - 8) + 8))(v68, v70);
  v71 = static Date.< infix(_:_:)();

  v72 = *(void (**)(char *, uint64_t))(v61 + 8);
  v72(v69, v63);
  v72(v62, v63);
  outlined destroy of PKStrokeProperties(v60, type metadata accessor for PKStrokeStruct);
  outlined destroy of PKStrokeProperties(v96, type metadata accessor for PKStrokeStruct);
  return v71 & 1;
}

uint64_t CRRegister<>.creationDate<A>(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  v39 = a3;
  v44 = a2;
  v46 = a4;
  v5 = type metadata accessor for PKStrokePathStruct(0);
  MEMORY[0x1E0C80A78](v5, v6);
  v45 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for PKStrokeProperties(0);
  MEMORY[0x1E0C80A78](v40, v8);
  v41 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokePathStruct>);
  v42 = *(_QWORD *)(v10 - 8);
  v43 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v39 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v39 - v29;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  CRRegister.value.getter();
  SharedTagged_2.tagged1.getter();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v22, 1, v31) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
    return static Date.distantPast.getter();
  }
  else
  {
    v39 = a1;
    Ref.subscript.getter();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v22, v31);
    outlined init with take of PKStrokeStruct((uint64_t)v26, (uint64_t)v30);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKStrokeProperties>);
    v34 = (uint64_t)v41;
    CRRegister.wrappedValue.getter();
    v36 = v42;
    v35 = v43;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v13, v34 + *(int *)(v40 + 32), v43);
    outlined destroy of PKStrokeProperties(v34, type metadata accessor for PKStrokeProperties);
    v37 = v45;
    Ref.subscript.getter();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v13, v35);
    PKStrokePath.creationDate.getter();
    outlined destroy of PKStrokeProperties((uint64_t)v30, type metadata accessor for PKStrokeStruct);
    v38 = type metadata accessor for PKStrokePath();
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v38 - 8) + 8))(v37, v38);
  }
}

uint64_t PKDrawingStruct.creationDateForFirstEraserStroke<A>(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38[16];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v36 = a1;
  v37 = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v32 = *(_QWORD *)(v6 - 8);
  v33 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v23 = (char *)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for PKDrawingStruct();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v35 + *(int *)(v24 + 20), v10);
  v34 = a2;
  v35 = a3;
  v39 = a2;
  v40 = a3;
  v25 = v36;
  v41 = v36;
  specialized Sequence.first(where:)((uint64_t (*)(char *))partial apply for closure #1 in PKDrawingStruct.creationDateForFirstEraserStroke<A>(in:), (uint64_t)v38, v18);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>?);
    v26 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v37, 1, 1, v26);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v23, v18, v19);
    v29 = v34;
    v28 = v35;
    Ref.subscript.getter();
    v30 = v37;
    CRRegister<>.creationDate<A>(in:)(v25, v29, v28, v37);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v33);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
    v31 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 0, 1, v31);
  }
}

uint64_t closure #1 in PKDrawingStruct.creationDateForFirstEraserStroke<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unsigned __int8 v12;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  Ref.subscript.getter();
  v12 = CRRegister<>.isEraserStroke<A>(in:)(a2, a3, a4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return v12 & 1;
}

uint64_t PKDrawingStruct.hasAnyEraserStrokes<A>(in:createdBefore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v18;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  PKDrawingStruct.creationDateForFirstEraserStroke<A>(in:)(a1, a3, a4, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for Date?);
    v16 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v10, v11);
    v16 = static Date.< infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  return v16 & 1;
}

uint64_t closure #1 in Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, _QWORD);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49[32];
  uint64_t v50;

  v44 = a2;
  v7 = *a1;
  v50 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v50, v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v45 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40, v11);
  v39 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v42 = (char *)&v37 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)&v37 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = *(_QWORD *)(v7 + *MEMORY[0x1E0D12A70]);
  v47 = a3;
  v43 = a4;
  v48 = a4;
  swift_getKeyPath();
  v41 = a3;
  v25 = a1;
  Capsule.Ref<>.subscript.getter();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
    return outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  v38 = v21;
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v24, v19, v20);
  Ref.subscript.getter();
  v27 = v45;
  v28 = v39;
  v29 = v40;
  v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v45 + 16))(v39, &v10[*(int *)(v50 + 20)], v40);
  v37 = (uint64_t)&v37;
  MEMORY[0x1E0C80A78](v30, v31);
  v32 = v42;
  v33 = v43;
  *(&v37 - 4) = v41;
  *(&v37 - 3) = v33;
  v34 = v44;
  *(&v37 - 2) = (uint64_t)v25;
  *(&v37 - 1) = v34;
  CROrderedSet.filter(_:)();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v29);
  outlined destroy of PKStrokeProperties((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for PKDrawingStruct);
  v35 = (void (*)(char *, _QWORD))Ref.subscript.modify();
  (*(void (**)(uint64_t, char *, uint64_t))(v27 + 40))(v36 + *(int *)(v50 + 20), v32, v29);
  v35(v49, 0);
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v24, v20);
}

BOOL closure #1 in closure #1 in Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>);
  Ref.subscript.getter();
  v12 = CRRegister<>.isEraserStroke<A>(in:createdBefore:)(a2, a3, a4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return (v12 & 1) == 0;
}

uint64_t Capsule<>.hasAnyEraserStrokes()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = v3;
  v31 = type metadata accessor for Date();
  v29 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v8);
  v28 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v28 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(a1 + 16);
  v32 = v23;
  v33 = a2;
  v34 = a3;
  swift_getKeyPath();
  v30 = v4;
  Capsule<>.subscript.getter();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
    v24 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v22, v17, v18);
    v25 = v30;
    Ref.subscript.getter();
    v26 = (uint64_t)v28;
    static Date.now.getter();
    v24 = PKDrawingStruct.hasAnyEraserStrokes<A>(in:createdBefore:)(v25, v26, v23, a2);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v26, v31);
    outlined destroy of PKStrokeProperties((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for PKDrawingStruct);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  }
  return v24 & 1;
}

uint64_t sub_1DDD92FB8()
{
  return 24;
}

__n128 sub_1DDD92FC4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #1 in PKDrawingStruct.creationDateForFirstEraserStroke<A>(in:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in PKDrawingStruct.creationDateForFirstEraserStroke<A>(in:)(a1, v1[4], v1[2], v1[3]) & 1;
}

uint64_t partial apply for closure #1 in Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)(_QWORD *a1)
{
  uint64_t *v1;

  return closure #1 in Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)(a1, v1[4], v1[2], v1[3]);
}

BOOL partial apply for closure #1 in closure #1 in Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in Capsule<>.paperWithRemovedEraserStrokes(createdBefore:)(a1, *(_QWORD **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16));
}

id @objc static PKRecognitionController.calculateDocumentProviderFromData(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v8;

  v3 = a3;
  v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v5;

  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  type metadata accessor for CalculateDocumentProvider();
  lazy protocol witness table accessor for type CalculateDocumentProvider and conformance CalculateDocumentProvider(&lazy protocol witness table cache variable for type CalculateDocumentProvider and conformance CalculateDocumentProvider, (uint64_t)&protocol conformance descriptor for CalculateDocumentProvider);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  swift_release();
  outlined consume of Data._Representation(v4, v6);
  return v8;
}

Class @objc static PKRecognitionController.dataRepresentationForCalculateDocumentProvider(_:)()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  Class isa;

  swift_unknownObjectRetain();
  v0 = specialized static PKRecognitionController.dataRepresentationForCalculateDocumentProvider(_:)();
  v2 = v1;
  swift_unknownObjectRelease();
  if (v2 >> 60 == 15)
  {
    isa = 0;
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(v0, v2);
  }
  return isa;
}

uint64_t specialized static PKRecognitionController.dataRepresentationForCalculateDocumentProvider(_:)()
{
  uint64_t v0;

  type metadata accessor for CalculateDocumentProvider();
  v0 = swift_dynamicCastClass();
  if (v0)
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    swift_unknownObjectRetain();
    PropertyListEncoder.init()();
    dispatch thunk of PropertyListEncoder.outputFormat.setter();
    lazy protocol witness table accessor for type CalculateDocumentProvider and conformance CalculateDocumentProvider(&lazy protocol witness table cache variable for type CalculateDocumentProvider and conformance CalculateDocumentProvider, (uint64_t)&protocol conformance descriptor for CalculateDocumentProvider);
    v0 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    swift_unknownObjectRelease();
    swift_release();
  }
  return v0;
}

uint64_t lazy protocol witness table accessor for type CalculateDocumentProvider and conformance CalculateDocumentProvider(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for CalculateDocumentProvider();
    result = MEMORY[0x1DF0E6450](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

Swift::Bool __swiftcall ParticipantDetailsDataSource.participantIsPresent(_:)(Swift::String a1)
{
  return 1;
}

uint64_t dispatch thunk of ParticipantDetailsDataSource.localParticipantID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ParticipantDetailsDataSource.color(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of ParticipantDetailsDataSource.name(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of ParticipantDetailsDataSource.avatarImage(for:size:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  uint64_t v6;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, double, double);

  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, double, double))(**(int **)(a4 + 32)
                                                                                   + *(_QWORD *)(a4 + 32));
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = dispatch thunk of CanvasElementImageRenderer.image<A, B>(_:in:bounds:darkMode:isRTL:);
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of ParticipantDetailsDataSource.participantIsPresent(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

void SignatureDescription.init(tag:customDescription:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v4;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;

  v4 = a3;
  if (a1 == -1)
  {
    if (a3)
      v8 = a2;
    else
      v8 = 0;
    goto LABEL_13;
  }
  swift_bridgeObjectRelease();
  if ((a1 & 0x8000000000000000) == 0 && a1 < 6)
  {
    if ((unint64_t)a1 < 7)
    {
      v7 = (char *)&outlined read-only object #0 of static SignatureDescription.allCases.getter + 16 * a1;
      v8 = *((_QWORD *)v7 + 4);
      v4 = *((_QWORD *)v7 + 5);
      outlined copy of SignatureDescription(v8, v4);
      goto LABEL_13;
    }
    __break(1u);
    goto LABEL_15;
  }
  if (one-time initialization token for SignatureLogger != -1)
LABEL_15:
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)SignatureLogger);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v12 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1DDB0F000, v10, v11, "description with unkonwn tag %ld", v12, 0xCu);
    MEMORY[0x1DF0E6558](v12, -1, -1);
  }

  v8 = 0;
  v4 = 0;
LABEL_13:
  *a4 = v8;
  a4[1] = v4;
}

void SignatureDescription.init(caption:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  Swift::String v14;
  Swift::String_optional v15;
  Swift::String v16;
  Swift::String v17;
  char v19;
  BOOL v20;
  Swift::String v21;
  Swift::String_optional v22;
  Swift::String v23;
  Swift::String v24;
  char v25;
  Swift::String v26;
  Swift::String_optional v27;
  Swift::String v28;
  Swift::String v29;
  char v30;
  Swift::String v31;
  Swift::String_optional v32;
  Swift::String v33;
  Swift::String v34;
  char v35;
  Swift::String v36;
  Swift::String_optional v37;
  Swift::String v38;
  Swift::String v39;
  char v40;
  _QWORD v41[2];
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;

  v6 = type metadata accessor for CharacterSet();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v41[0] = a1;
    v41[1] = a2;
    static CharacterSet.whitespacesAndNewlines.getter();
    lazy protocol witness table accessor for type String and conformance String();
    a2 = StringProtocol.trimmingCharacters(in:)();
    v12 = v11;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    swift_bridgeObjectRelease();
    v13 = a2 == 0x6D614E206C6C7546 && v12 == 0xE900000000000065;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_9;
    if (one-time initialization token for paperKitBundle != -1)
      swift_once();
    v42._countAndFlagsBits = 0xD000000000000029;
    v42._object = (void *)0x80000001DDF57D40;
    v14._countAndFlagsBits = 0x6D614E206C6C7546;
    v14._object = (void *)0xE900000000000065;
    v15.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v15.value._object = (void *)0xEB00000000656C62;
    v16._countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, v15, paperKitBundle, v16, v42);
    if (v17._countAndFlagsBits == a2 && v17._object == (void *)v12)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_10;
    }
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
    {
LABEL_9:
      swift_bridgeObjectRelease();
LABEL_10:
      a2 = 0;
      v12 = 1;
      goto LABEL_11;
    }
    v20 = a2 == 0x614E206E65766947 && v12 == 0xEA0000000000656DLL;
    if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      goto LABEL_26;
    v43._countAndFlagsBits = 0xD00000000000002ALL;
    v43._object = (void *)0x80000001DDF57D10;
    v21._countAndFlagsBits = 0x614E206E65766947;
    v21._object = (void *)0xEA0000000000656DLL;
    v22.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v22.value._object = (void *)0xEB00000000656C62;
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    v24 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, v22, paperKitBundle, v23, v43);
    if (v24._countAndFlagsBits == a2 && v24._object == (void *)v12)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_27;
    }
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v25 & 1) != 0)
    {
LABEL_26:
      swift_bridgeObjectRelease();
LABEL_27:
      a2 = 0;
      v12 = 2;
      goto LABEL_11;
    }
    if (a2 == 0x4E20796C696D6146 && v12 == 0xEB00000000656D61
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      goto LABEL_35;
    }
    v44._countAndFlagsBits = 0xD00000000000002BLL;
    v26._object = (void *)0xEB00000000656D61;
    v44._object = (void *)0x80000001DDF57CE0;
    v26._countAndFlagsBits = 0x4E20796C696D6146;
    v27.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v27.value._object = (void *)0xEB00000000656C62;
    v28._countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, v27, paperKitBundle, v28, v44);
    if (v29._countAndFlagsBits == a2 && v29._object == (void *)v12)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_36;
    }
    v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v30 & 1) != 0)
    {
LABEL_35:
      swift_bridgeObjectRelease();
LABEL_36:
      a2 = 0;
      v12 = 3;
      goto LABEL_11;
    }
    if (a2 == 0x656D616E6B63694ELL && v12 == 0xE800000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      goto LABEL_44;
    }
    v45._object = (void *)0x80000001DDF57CB0;
    v31._countAndFlagsBits = 0x656D616E6B63694ELL;
    v31._object = (void *)0xE800000000000000;
    v32.value._countAndFlagsBits = 0x617A696C61636F4CLL;
    v32.value._object = (void *)0xEB00000000656C62;
    v33._countAndFlagsBits = 0;
    v33._object = (void *)0xE000000000000000;
    v45._countAndFlagsBits = 0xD000000000000028;
    v34 = NSLocalizedString(_:tableName:bundle:value:comment:)(v31, v32, paperKitBundle, v33, v45);
    if (v34._countAndFlagsBits == a2 && v34._object == (void *)v12)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_45;
    }
    v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v35 & 1) != 0)
    {
LABEL_44:
      swift_bridgeObjectRelease();
LABEL_45:
      a2 = 0;
      v12 = 4;
      goto LABEL_11;
    }
    if ((a2 != 0x736C616974696E49 || v12 != 0xE800000000000000)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v46._countAndFlagsBits = 0xD00000000000002DLL;
      v46._object = (void *)0x80000001DDF57C80;
      v36._countAndFlagsBits = 0x736C616974696E49;
      v36._object = (void *)0xE800000000000000;
      v37.value._countAndFlagsBits = 0x617A696C61636F4CLL;
      v37.value._object = (void *)0xEB00000000656C62;
      v38._countAndFlagsBits = 0;
      v38._object = (void *)0xE000000000000000;
      v39 = NSLocalizedString(_:tableName:bundle:value:comment:)(v36, v37, paperKitBundle, v38, v46);
      if (v39._countAndFlagsBits == a2 && v39._object == (void *)v12)
      {
        swift_bridgeObjectRelease_n();
LABEL_58:
        a2 = 0;
        v12 = 5;
        goto LABEL_11;
      }
      v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v40 & 1) == 0)
        goto LABEL_11;
    }
    swift_bridgeObjectRelease();
    goto LABEL_58;
  }
  v12 = 0;
LABEL_11:
  *a3 = a2;
  a3[1] = v12;
}

Swift::String __swiftcall SignatureDescription.localizedTitle()()
{
  uint64_t v0;
  Class isa;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v11;
  Swift::String result;
  unint64_t v13;

  switch(*(_QWORD *)(v0 + 8))
  {
    case 0:
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      isa = paperKitBundle.super.isa;
      v13 = 0x80000001DDF57D70;
      v2 = 0x6E6769532077654ELL;
      v3 = 0xED00006572757461;
      v4 = 0x617A696C61636F4CLL;
      v5 = 0xEB00000000656C62;
      v6 = 0;
      v7 = 0xE000000000000000;
      v8 = 0xD000000000000021;
      goto LABEL_25;
    case 1:
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      isa = paperKitBundle.super.isa;
      v8 = 0xD000000000000029;
      v13 = 0x80000001DDF57D40;
      v2 = 0x6D614E206C6C7546;
      v3 = 0xE900000000000065;
      break;
    case 2:
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      isa = paperKitBundle.super.isa;
      v8 = 0xD00000000000002ALL;
      v13 = 0x80000001DDF57D10;
      v2 = 0x614E206E65766947;
      v3 = 0xEA0000000000656DLL;
      break;
    case 3:
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      isa = paperKitBundle.super.isa;
      v8 = 0xD00000000000002BLL;
      v3 = 0xEB00000000656D61;
      v13 = 0x80000001DDF57CE0;
      v2 = 0x4E20796C696D6146;
      break;
    case 4:
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      isa = paperKitBundle.super.isa;
      v8 = 0xD000000000000028;
      v13 = 0x80000001DDF57CB0;
      v2 = 0x656D616E6B63694ELL;
      goto LABEL_23;
    case 5:
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      isa = paperKitBundle.super.isa;
      v8 = 0xD00000000000002DLL;
      v13 = 0x80000001DDF57C80;
      v2 = 0x736C616974696E49;
LABEL_23:
      v3 = 0xE800000000000000;
      break;
    default:
      if (one-time initialization token for paperKitBundle != -1)
        swift_once();
      isa = paperKitBundle.super.isa;
      v8 = 0xD000000000000026;
      v13 = 0x80000001DDF537D0;
      v2 = 0x4C206D6F74737543;
      v3 = 0xEC0000006C656261;
      break;
  }
  v4 = 0x617A696C61636F4CLL;
  v5 = 0xEB00000000656C62;
  v6 = 0;
  v7 = 0xE000000000000000;
LABEL_25:
  v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v2, *(Swift::String_optional *)&v4, (NSBundle)isa, *(Swift::String *)&v6, *(Swift::String *)&v8);
  object = v11._object;
  countAndFlagsBits = v11._countAndFlagsBits;
  result._object = object;
  result._countAndFlagsBits = countAndFlagsBits;
  return result;
}

void *static SignatureDescription.allCases.getter()
{
  return &outlined read-only object #0 of static SignatureDescription.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance SignatureDescription(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static SignatureDescription.allCases.getter;
}

uint64_t specialized static SignatureDescription.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  switch(v3)
  {
    case 0uLL:
      if (v5)
        goto LABEL_15;
      v3 = 0;
      v6 = 1;
      break;
    case 1uLL:
      if (v5 != 1)
        goto LABEL_15;
      v3 = 1;
      v6 = 1;
      break;
    case 2uLL:
      if (v5 != 2)
        goto LABEL_15;
      v6 = 1;
      v3 = 2;
      break;
    case 3uLL:
      if (v5 != 3)
        goto LABEL_15;
      v6 = 1;
      v3 = 3;
      break;
    case 4uLL:
      if (v5 != 4)
        goto LABEL_15;
      v6 = 1;
      v3 = 4;
      break;
    case 5uLL:
      if (v5 != 5)
        goto LABEL_15;
      v6 = 1;
      v3 = 5;
      break;
    default:
      if (v5 >= 6)
      {
        if (v2 == v4 && v3 == v5)
          v6 = 1;
        else
          v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      else
      {
LABEL_15:
        v6 = 0;
      }
      outlined copy of SignatureDescription(v4, v5);
      outlined copy of SignatureDescription(v2, v3);
      break;
  }
  outlined consume of SignatureDescription(v2, v3);
  outlined consume of SignatureDescription(v4, v5);
  return v6 & 1;
}

unint64_t lazy protocol witness table accessor for type [SignatureDescription] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [SignatureDescription] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SignatureDescription] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [SignatureDescription]);
    result = MEMORY[0x1DF0E6450](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SignatureDescription] and conformance [A]);
  }
  return result;
}

unint64_t destroy for SignatureDescription(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SignatureDescription(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for SignatureDescription(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SignatureDescription(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SignatureDescription(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFF9 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483642);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 5;
  if (v4 >= 7)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SignatureDescription(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFA)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483642;
    if (a3 >= 0x7FFFFFFA)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFA)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 5;
  }
  return result;
}

uint64_t getEnumTag for SignatureDescription(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for SignatureDescription(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for SignatureDescription()
{
  return &type metadata for SignatureDescription;
}

id CanvasElementViewController.__allocating_init(context:editingMode:allowMediaCanvasElements:transparentBackground:)(void *a1, char *a2, char a3, char a4)
{
  id v5;

  v5 = specialized CanvasElementViewController.__allocating_init(context:editingMode:allowMediaCanvasElements:transparentBackground:)(a1, a2, a3, a4);

  return v5;
}

double CanvasElementViewController<>.imageSize.getter()
{
  uint64_t v0;
  id *v1;
  double result;

  v1 = (id *)(v0 + direct field offset for CanvasElementViewController.image);
  swift_beginAccess();
  if (!*v1)
    return 0.0;
  objc_msgSend(*v1, sel_size);
  return result;
}

void CanvasElementViewController<>.updateImageZoomScale(in:animated:zoomable:)(char a1, char a2, double a3, double a4)
{
  uint64_t v4;
  double v6;
  char **v7;
  void *v8;
  char *v9;
  uint64_t v10;
  void *v11;
  char *v12;

  v6 = CanvasElementViewController<>.preferredZoomScale(in:zoomable:)(a2, a3, a4);
  v7 = (char **)(v4 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (!*v7)
  {
    __break(1u);
    goto LABEL_9;
  }
  v8 = *(void **)&(*v7)[direct field offset for CanvasView.canvasScrollView];
  if (!v8)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  objc_msgSend(v8, sel_setMinimumZoomScale_, v6);
  v9 = *v7;
  if (*v7)
  {
    v10 = direct field offset for CanvasView.isZoomScaleAltered;
    if ((v9[direct field offset for CanvasView.isZoomScaleAltered] & 1) == 0)
    {
      v11 = *(void **)&v9[direct field offset for CanvasView.canvasScrollView];
      if (v11)
      {
        v12 = v9;
        objc_msgSend(v11, sel_setZoomScale_animated_, a1 & 1, v6);
        v9[v10] = 0;

        return;
      }
LABEL_10:
      __break(1u);
    }
  }
}

double static CanvasElementViewController<>.zoomToFitZoomScale(_:in:)(double a1, double a2, double a3, double a4)
{
  double v4;
  double v5;

  v4 = a3 / a1;
  v5 = a4 / a2;
  if (v5 < v4)
    v4 = v5;
  return fmax(v4, 0.0001);
}

double CanvasElementViewController<>.preferredZoomScale(in:zoomable:)(char a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _QWORD *v17;
  uint64_t v18;
  double v19;
  double v20;
  id *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v28;
  _BYTE v29[16];
  double v30;
  double v31;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = &v29[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = &v29[-v15];
  v17 = (_QWORD *)(v4 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (*v17)
  {
    v18 = *(_QWORD *)(*v17 + direct field offset for Canvas.paperView)
        + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(*v17 + direct field offset for Canvas.paperView)) + 0x380);
    swift_beginAccess();
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v12, v18, v8);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v16, v12, v8);
    swift_getKeyPath();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
    Capsule<>.subscript.getter();
    swift_release();
    v19 = v30;
    v20 = v31;
    if ((a1 & 1) == 0)
    {
      v21 = (id *)(v4 + direct field offset for CanvasElementViewController.image);
      swift_beginAccess();
      if (*v21)
      {
        objc_msgSend(*v21, sel_size);
        if (v22 >= a2)
          goto LABEL_13;
      }
      else if (a2 <= 0.0)
      {
        goto LABEL_13;
      }
      if (*v21)
      {
        objc_msgSend(*v21, sel_size);
        if (v24 < a3)
          goto LABEL_10;
      }
      else if (a3 > 0.0)
      {
LABEL_10:
        if (*v21)
          objc_msgSend(*v21, sel_size);
        else
          v25 = 0.0;
        v23 = 1.0;
        if (v19 < v25)
        {
          if (*v21)
            objc_msgSend(*v21, sel_size);
          else
            v28 = 0.0;
          v23 = v28 / v19;
        }
        goto LABEL_16;
      }
    }
LABEL_13:
    v26 = a2 / v19;
    if (a3 / v20 < a2 / v19)
      v26 = a3 / v20;
    v23 = fmax(v26, 0.0001);
LABEL_16:
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v16, v8);
    return v23;
  }
  return 0.0;
}

void CanvasElementViewController<>.imageDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void **v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t (*v15)(uint64_t, uint64_t);
  char *v16;
  id v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v5 = (void **)(v2 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  v6 = (char *)*v5;
  if (*v5)
  {
    v7 = *(char **)&v6[direct field offset for Canvas._canvasElementController];
    if (v7)
    {
      v8 = v6;
      v9 = v7;
    }
    else
    {
      v10 = *(void **)&v6[direct field offset for CanvasView.canvasTiledView];
      if (!v10)
        goto LABEL_17;
      swift_getObjectType();
      v11 = swift_conformsToProtocol2();
      v12 = v11 ? v11 : 0;
      if (!(v11 ? v10 : 0))
        goto LABEL_17;
      ObjectType = swift_getObjectType();
      v15 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 48);
      v16 = v6;
      v17 = v10;
      v9 = (char *)v15(ObjectType, v12);

      v7 = 0;
    }
    v18 = v7;

    v19 = &v9[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate];
    if (MEMORY[0x1DF0E666C](&v9[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate]))
    {
      v20 = *((_QWORD *)v19 + 1);
      v21 = swift_getObjectType();
      v22 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v21, v20);
      swift_unknownObjectRelease();
      if (v22)
      {
        (*(void (**)(uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v22) + 0x418))(a1, a2);

        return;
      }
    }

  }
LABEL_17:
  swift_bridgeObjectRelease();
}

void *CanvasElementViewController.canvasView.getter()
{
  void *v0;
  id v1;

  v0 = (void *)specialized CanvasElementViewController.canvasView.getter();
  v1 = v0;
  return v0;
}

uint64_t CanvasElementViewController.liveStreamMessenger.didset()
{
  uint64_t v0;
  void **v1;
  uint64_t result;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v1 = (void **)(v0 + direct field offset for CanvasElementViewController.canvasView);
  result = swift_beginAccess();
  v3 = *v1;
  if (*v1)
  {
    v4 = (uint64_t *)(v0 + direct field offset for CanvasElementViewController.liveStreamMessenger);
    swift_beginAccess();
    v6 = *v4;
    v5 = v4[1];
    swift_unknownObjectRetain();
    v7 = v3;
    specialized Canvas.liveStreamMessenger.setter(v6, v5);

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t CanvasElementViewController.liveStreamMessenger.getter()
{
  specialized CanvasElementViewController.liveStreamMessenger.getter();
  return swift_unknownObjectRetain();
}

uint64_t CanvasElementViewController.liveStreamMessenger.setter(uint64_t a1, uint64_t a2)
{
  specialized CanvasElementViewController.liveStreamMessenger.setter(a1, a2);
  return swift_unknownObjectRelease();
}

uint64_t (*CanvasElementViewController.liveStreamMessenger.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return CanvasElementViewController.liveStreamMessenger.modify;
}

uint64_t CanvasElementViewController.liveStreamMessenger.modify(uint64_t a1, char a2)
{
  return MiniMenuState._fontName.modify(a1, a2, (uint64_t (*)(uint64_t))CanvasElementViewController.liveStreamMessenger.didset);
}

uint64_t CanvasElementViewController.participantDetailsDataSource.didset()
{
  uint64_t v0;
  void **v1;
  uint64_t result;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  char *v8;

  v1 = (void **)(v0 + direct field offset for CanvasElementViewController.canvasView);
  result = swift_beginAccess();
  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = v0 + direct field offset for CanvasElementViewController.participantDetailsDataSource;
    swift_beginAccess();
    MEMORY[0x1DF0E666C](v4);
    v5 = *(_QWORD *)(v4 + 8);
    v6 = &v3[OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource];
    swift_beginAccess();
    *((_QWORD *)v6 + 1) = v5;
    swift_unknownObjectWeakAssign();
    v7 = *(void **)&v3[OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView];
    v8 = v3;
    objc_msgSend(v7, sel_setNeedsLayout);

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t CanvasElementViewController.participantDetailsDataSource.getter()
{
  return PaperDocumentViewController.delegate.getter(&direct field offset for CanvasElementViewController.participantDetailsDataSource);
}

uint64_t CanvasElementViewController.participantDetailsDataSource.setter(uint64_t a1, uint64_t a2)
{
  specialized CanvasElementViewController.participantDetailsDataSource.setter(a1, a2);
  return swift_unknownObjectRelease();
}

void (*CanvasElementViewController.participantDetailsDataSource.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = direct field offset for CanvasElementViewController.participantDetailsDataSource;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return CanvasElementViewController.participantDetailsDataSource.modify;
}

void CanvasElementViewController.participantDetailsDataSource.modify(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + *(_QWORD *)(*(_QWORD *)a1 + 48) + 8) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
    CanvasElementViewController.participantDetailsDataSource.didset();
  }
  free(v3);
}

id CanvasElementViewController.showParticipantCursors.didset()
{
  uint64_t v0;
  uint64_t *v1;
  id result;
  uint64_t v3;
  char *v4;
  char v5;
  _BYTE *v6;

  v1 = (uint64_t *)(v0 + direct field offset for CanvasElementViewController.canvasView);
  result = (id)swift_beginAccess();
  v3 = *v1;
  if (*v1)
  {
    v4 = (char *)(v0 + direct field offset for CanvasElementViewController.showParticipantCursors);
    swift_beginAccess();
    v5 = *v4;
    v6 = (_BYTE *)(v3 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_showParticipantCursors);
    swift_beginAccess();
    *v6 = v5;
    return objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView), sel_setNeedsLayout);
  }
  return result;
}

uint64_t CanvasElementViewController.showParticipantCursors.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + direct field offset for CanvasElementViewController.showParticipantCursors);
  swift_beginAccess();
  return *v1;
}

uint64_t CanvasElementViewController.showParticipantCursors.setter(char a1)
{
  return MarkupContainerViewController.annotationEditingEnabled.setter(a1, &direct field offset for CanvasElementViewController.showParticipantCursors, (uint64_t (*)(uint64_t))CanvasElementViewController.showParticipantCursors.didset);
}

uint64_t (*CanvasElementViewController.showParticipantCursors.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return CanvasElementViewController.showParticipantCursors.modify;
}

uint64_t CanvasElementViewController.showParticipantCursors.modify(uint64_t a1, char a2)
{
  return MiniMenuState._fontName.modify(a1, a2, (uint64_t (*)(uint64_t))CanvasElementViewController.showParticipantCursors.didset);
}

uint64_t CanvasElementViewController.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_delegate;
  swift_beginAccess();
  return MEMORY[0x1DF0E666C](v1);
}

uint64_t CanvasElementViewController.delegate.setter(uint64_t a1, uint64_t a2)
{
  specialized CanvasElementViewController.delegate.setter(a1, a2);
  return swift_unknownObjectRelease();
}

uint64_t (*CanvasElementViewController.delegate.modify(uint64_t *a1))(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  *a1 = CanvasElementViewController.delegate.getter();
  a1[1] = v3;
  return CanvasElementViewController.delegate.modify;
}

uint64_t CanvasElementViewController.delegate.modify(uint64_t *a1)
{
  specialized CanvasElementViewController.delegate.setter(*a1, a1[1]);
  return swift_unknownObjectRelease();
}

uint64_t CanvasElementViewController.mediaAnalysisObserver.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + direct field offset for CanvasElementViewController.mediaAnalysisObserver) = a1;
  return swift_release();
}

Swift::Void __swiftcall CanvasElementViewController.enableToolPickerTapInteraction()()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  id *v4;
  id v5;
  id v6;

  v1 = objc_msgSend(v0, sel_view);
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, sel_window);

    if (v3)
    {
      v4 = (id *)&v0[direct field offset for CanvasElementViewController.canvasView];
      swift_beginAccess();
      if (*v4)
      {
        v5 = *v4;
        v6 = CanvasView.activeToolPicker.getter();

        objc_msgSend(v6, sel__enableTapInteractionForWindow_, v3);
      }

    }
  }
  else
  {
    __break(1u);
  }
}

void CanvasElementViewController.editingMode.didset(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  void **v9;
  void *v10;
  unsigned __int8 *v11;
  id v12;
  _BYTE *v13;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  void *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void (*v35)(char *, uint64_t);
  void *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  id v43;
  id v44;
  uint64_t v45;
  _QWORD *v46;
  char *v47;
  id v48;
  _QWORD v49[2];
  void *v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  unsigned __int8 v58[32];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v5 = *(_QWORD *)(v4 - 8);
  v54 = v4;
  v55 = v5;
  MEMORY[0x1E0C80A78](v4, v6);
  v53 = (char *)v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  CanvasElementViewController.updateToolPickerVisibility()();
  v9 = (void **)(v2 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  v10 = *v9;
  if (*v9)
  {
    v11 = (unsigned __int8 *)(v2 + direct field offset for CanvasElementViewController.editingMode);
    swift_beginAccess();
    v58[0] = *v11;
    v12 = v10;
    CanvasView.editingMode.setter(v58);

  }
  CanvasElementViewController.updatePlusButton()();
  v13 = (_BYTE *)(v2 + direct field offset for CanvasElementViewController.editingMode);
  swift_beginAccess();
  if (*v13 == 1 && v8 != 1)
  {
    v15 = (_QWORD *)(v2 + direct field offset for CanvasElementViewController.canvasView);
    swift_beginAccess();
    if (*v15)
    {
      v16 = Canvas.editingView.getter();
      v18 = v17;
      ObjectType = swift_getObjectType();
      v20 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v18 + 144))(ObjectType, v18);

      if (v20)
      {
        v49[1] = v2;
        v21 = FormFillingView.formFields.getter();
        v22 = v21;
        if (v21 >> 62)
          goto LABEL_40;
        v23 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        while (1)
        {
          v50 = v20;
          if (!v23)
            break;
          v52 = v22 & 0xC000000000000001;
          v24 = 4;
          v51 = v22;
          v25 = v53;
          v26 = v54;
          while (1)
          {
            v20 = (void *)(v24 - 4);
            v27 = v52 ? (id)MEMORY[0x1DF0E4D64](v24 - 4, v22) : *(id *)(v22 + 8 * v24);
            v28 = v27;
            v29 = v24 - 3;
            if (__OFADD__(v20, 1))
              break;
            type metadata accessor for ShapeView();
            v30 = (_QWORD *)swift_dynamicCastClass();
            if (v30)
            {
              v31 = (char *)v30 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v30) + 0x380);
              swift_beginAccess();
              v32 = v23;
              v33 = v55;
              (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v25, v31, v26);
              swift_getKeyPath();
              lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
              v34 = v28;
              Capsule<>.subscript.getter();
              swift_release();
              v35 = *(void (**)(char *, uint64_t))(v33 + 8);
              v23 = v32;
              v22 = v51;
              v35(v25, v26);
              v36 = v34;

              if (v56 != 1 && v56 != 50)
              {
                swift_bridgeObjectRelease_n();
LABEL_23:
                v20 = v50;
                goto LABEL_25;
              }
            }

            ++v24;
            if (v29 == v23)
            {
              swift_bridgeObjectRelease_n();
              v36 = 0;
              goto LABEL_23;
            }
          }
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          swift_bridgeObjectRetain();
          v23 = _CocoaArrayWrapper.endIndex.getter();
        }
        swift_bridgeObjectRelease_n();
        v36 = 0;
LABEL_25:
        v37 = FormFillingView.formFields.getter();
        v22 = v37;
        if (v37 >> 62)
        {
          swift_bridgeObjectRetain();
          v51 = _CocoaArrayWrapper.endIndex.getter();
          if (v51)
            goto LABEL_27;
        }
        else
        {
          v38 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          v51 = v38;
          if (v38)
          {
LABEL_27:
            v49[0] = v36;
            v52 = v22 & 0xC000000000000001;
            v39 = 4;
            v40 = v54;
            v41 = v55;
            v42 = v53;
            while (1)
            {
              v20 = (void *)(v39 - 4);
              if (v52)
                v43 = (id)MEMORY[0x1DF0E4D64](v39 - 4, v22);
              else
                v43 = *(id *)(v22 + 8 * v39);
              v44 = v43;
              v45 = v39 - 3;
              if (__OFADD__(v20, 1))
                goto LABEL_39;
              type metadata accessor for ShapeView();
              v46 = (_QWORD *)swift_dynamicCastClass();
              if (!v46)
                break;
              v47 = (char *)v46 + *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v46) + 0x380);
              swift_beginAccess();
              (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v42, v47, v40);
              swift_getKeyPath();
              lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
              v48 = v44;
              Capsule<>.subscript.getter();
              swift_release();
              (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v40);

              if (v57 != 50)
                break;

              ++v39;
              if (v45 == v51)
              {
                swift_bridgeObjectRelease_n();
                v44 = 0;
LABEL_37:
                v20 = v50;
                v36 = (void *)v49[0];
                goto LABEL_43;
              }
            }
            swift_bridgeObjectRelease_n();
            goto LABEL_37;
          }
        }
        swift_bridgeObjectRelease_n();
        v44 = 0;
LABEL_43:
        if (!v36)
        {
          if (!v44)
          {
            v44 = v20;
            goto LABEL_47;
          }
          v44 = v44;
          v36 = v44;
        }
        objc_msgSend(v36, sel_becomeFirstResponder, v49[0]);

LABEL_47:
      }
    }
  }
  CanvasElementViewController.updateActionInfoViewVisibility()();
}

uint64_t CanvasElementViewController.editingMode.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + direct field offset for CanvasElementViewController.editingMode);
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

void CanvasElementViewController.editingMode.setter(unsigned __int8 *a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  unsigned __int8 *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v2 = *a1;
  v3 = (unsigned __int8 *)(v1 + direct field offset for CanvasElementViewController.editingMode);
  swift_beginAccess();
  v4 = *v3;
  *v3 = v2;
  v5 = v4;
  CanvasElementViewController.editingMode.didset(&v5);
}

void (*CanvasElementViewController.editingMode.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  _BYTE *v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = (_BYTE *)(v1 + direct field offset for CanvasElementViewController.editingMode);
  swift_beginAccess();
  *((_BYTE *)v3 + 32) = *v4;
  return CanvasElementViewController.editingMode.modify;
}

void CanvasElementViewController.editingMode.modify(uint64_t a1, char a2)
{
  void *v2;
  unsigned __int8 *v3;
  char v4;
  char v5;

  v2 = *(void **)a1;
  if ((a2 & 1) != 0)
  {
    v4 = *(_BYTE *)(*(_QWORD *)a1 + 32);
    v3 = (unsigned __int8 *)&v4;
  }
  else
  {
    v5 = *(_BYTE *)(*(_QWORD *)a1 + 32);
    v3 = (unsigned __int8 *)&v5;
  }
  CanvasElementViewController.editingMode.setter(v3);
  free(v2);
}

void CanvasElementViewController.updateActionInfoViewVisibility()()
{
  uint64_t v0;
  char *v1;
  char *v2;
  _BYTE *v3;
  _BOOL8 v4;
  unsigned __int8 *v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  id v10;

  CanvasElementViewController.imageView.getter();
  if (v1)
  {
    v2 = v1;
    v3 = (_BYTE *)(v0 + direct field offset for CanvasElementViewController.editingMode);
    swift_beginAccess();
    if (*v3 == 3)
    {
      v4 = 1;
    }
    else
    {
      v5 = (unsigned __int8 *)(v0 + direct field offset for CanvasElementViewController.editingMode);
      swift_beginAccess();
      v4 = *v5 == 1;
    }
    v6 = direct field offset for ImageElementView.mediaView;
    v7 = *(void **)&v2[direct field offset for ImageElementView.mediaView];
    if (v7)
    {
      v8 = objc_msgSend(v7, sel_imageAnalysisContext);
      if (v8)
      {
        objc_msgSend(v8, sel_setActionInfoViewHidden_animated_, v4, 0);
        swift_unknownObjectRelease();
      }
    }
    if (v4
      && (v9 = *(void **)&v2[v6]) != 0
      && (v10 = objc_msgSend(v9, sel_imageAnalysisContext)) != 0)
    {
      objc_msgSend(v10, sel_setHighlightSelectableItemsEnabled_, 0);

      swift_unknownObjectRelease();
    }
    else
    {

    }
  }
}

id CanvasElementViewController.drawingGestureRecognizer.getter()
{
  uint64_t v0;
  _QWORD *v1;
  id result;

  v1 = (_QWORD *)(v0 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (!*v1)
    return 0;
  result = (id)specialized CanvasView.tiledView.getter();
  if (result)
    return objc_msgSend(result, sel_drawingGestureRecognizer);
  return result;
}

id CanvasElementViewController.drawingPolicy.getter()
{
  uint64_t v0;
  id *v1;
  id v2;
  id v3;

  v1 = (id *)(v0 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (!*v1)
    return 0;
  v2 = *v1;
  v3 = CanvasView.drawingPolicy.getter();

  return v3;
}

void CanvasElementViewController.drawingPolicy.setter(uint64_t a1)
{
  CanvasElementViewController.drawingPolicy.setter(a1, (void (*)(uint64_t))CanvasView.drawingPolicy.setter);
}

void (*CanvasElementViewController.drawingPolicy.modify(id *a1))(uint64_t *a1)
{
  void *v1;

  a1[1] = v1;
  *a1 = CanvasElementViewController.drawingPolicy.getter();
  return CanvasElementViewController.drawingPolicy.modify;
}

void CanvasElementViewController.drawingPolicy.modify(uint64_t *a1)
{
  CanvasElementViewController.drawingPolicy.setter(*a1);
}

uint64_t CanvasElementViewController.canvasSubscribeCancellable.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + direct field offset for CanvasElementViewController.canvasSubscribeCancellable) = a1;
  return swift_release();
}

void *CanvasElementViewController.image.getter()
{
  void *v0;
  id v1;

  v0 = (void *)specialized CanvasElementViewController.image.getter();
  v1 = v0;
  return v0;
}

void CanvasElementViewController.image.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + direct field offset for CanvasElementViewController.image);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*CanvasElementViewController.image.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.backgroundColor.modify;
}

void CanvasElementViewController.__ivar_destroyer()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  outlined destroy of weak AnyContainerCanvasElementView?(v0 + direct field offset for CanvasElementViewController.participantDetailsDataSource);
  swift_release();
  swift_release();
  swift_release();

  outlined destroy of weak AnyContainerCanvasElementView?(v0 + direct field offset for CanvasElementViewController.formDelegate);
}

id CanvasElementViewController.__deallocating_deinit()
{
  _QWORD *v0;
  uint64_t *v1;
  objc_class *v2;
  objc_super v4;
  char v5;

  v1 = (uint64_t *)(*MEMORY[0x1E0DEEDD8] & *v0);
  v5 = 1;
  PassthroughSubject.send(completion:)();
  v2 = (objc_class *)type metadata accessor for CanvasElementViewController(0, v1[15], v1[16], v1[17]);
  v4.receiver = v0;
  v4.super_class = v2;
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

id @objc CanvasElementViewController.__deallocating_deinit(void *a1)
{
  id v1;

  v1 = a1;
  return CanvasElementViewController.__deallocating_deinit();
}

void @objc CanvasElementViewController.__ivar_destroyer(uint64_t a1)
{

  swift_unknownObjectRelease();
  outlined destroy of weak AnyContainerCanvasElementView?(a1 + direct field offset for CanvasElementViewController.participantDetailsDataSource);
  swift_release();
  swift_release();
  swift_release();

  outlined destroy of weak AnyContainerCanvasElementView?(a1 + direct field offset for CanvasElementViewController.formDelegate);
}

id CanvasElementViewController.__allocating_init(context:allowsEditing:allowMediaCanvasElements:transparentBackground:)(void *a1, int a2, char a3, char a4)
{
  char v5;
  id v6;
  char v8;

  if (a2 == 2)
    v5 = 3;
  else
    v5 = (a2 << 31 >> 31) & 3;
  v8 = v5;
  v6 = specialized CanvasElementViewController.__allocating_init(context:editingMode:allowMediaCanvasElements:transparentBackground:isImageAnalysisEnabled:delegate:)(a1, &v8, a3, a4, 1, 0, 0);

  return v6;
}

Swift::Void __swiftcall CanvasElementViewController.updateToolPickerVisibility()()
{
  uint64_t v0;
  uint64_t v1;
  id *v2;
  id v3;
  id v4;
  void *v5;
  unsigned __int8 *v6;
  _BOOL8 v7;

  v1 = v0;
  v2 = (id *)(v0 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (*v2)
  {
    v3 = *v2;
    v4 = CanvasView.activeToolPicker.getter();
    if (v4)
    {
      v5 = v4;
      v6 = (unsigned __int8 *)(v1 + direct field offset for CanvasElementViewController.editingMode);
      swift_beginAccess();
      v7 = *v6 == 3;
      objc_msgSend(v5, sel_setVisible_forFirstResponder_, v7, v3);
      objc_msgSend(v5, sel_setVisible_forFirstResponder_, v7, v1);

      v3 = v5;
    }

  }
}

void @objc CanvasElementViewController.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;

  v3 = a3;
  specialized CanvasElementViewController.init(coder:)();
}

uint64_t CanvasElementViewController.tool.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id *v8;
  id v9;
  id v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14[2];

  v3 = type metadata accessor for PKInkingTool.InkType();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (id *)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (*v8)
  {
    v9 = *v8;
    specialized Canvas.tool.getter((uint64_t *)v14);

    return outlined init with take of FindResult(v14, (uint64_t)a1);
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v7, *MEMORY[0x1E0CD0F60], v3);
    v11 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
    v12 = type metadata accessor for PKInkingTool();
    v13 = MEMORY[0x1E0CD0F70];
    a1[3] = v12;
    a1[4] = v13;
    __swift_allocate_boxed_opaque_existential_1(a1);
    return PKInkingTool.init(_:color:width:)();
  }
}

uint64_t CanvasElementViewController.tool.setter(uint64_t a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  id v5;
  _QWORD v7[5];

  v3 = (void **)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  v4 = *v3;
  if (v4)
  {
    outlined init with copy of FindResult(a1, (uint64_t)v7);
    v5 = v4;
    Canvas.tool.setter(v7);

  }
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

void (*CanvasElementViewController.tool.modify(uint64_t **a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t *v3;

  v3 = (uint64_t *)malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  CanvasElementViewController.tool.getter(v3);
  return CanvasElementViewController.tool.modify;
}

void CanvasElementViewController.tool.modify(uint64_t *a1, char a2)
{
  void *v2;

  v2 = (void *)*a1;
  if ((a2 & 1) != 0)
  {
    outlined init with copy of FindResult(*a1, (uint64_t)v2 + 40);
    CanvasElementViewController.tool.setter((uint64_t)v2 + 40);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  }
  else
  {
    CanvasElementViewController.tool.setter(*a1);
  }
  free(v2);
}

void CanvasElementViewController.liveStreamDrawings.didset()
{
  uint64_t v0;
  uint64_t v1;
  void **v2;
  char *v3;
  unsigned __int8 *v4;
  unsigned __int8 v5;
  unsigned __int8 *v6;
  uint64_t v7;
  void *v8;
  char *v9;
  char *v10;
  char *v11;

  v1 = v0;
  v2 = (void **)(v0 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  v3 = (char *)*v2;
  if (v3)
  {
    v4 = (unsigned __int8 *)(v1 + direct field offset for CanvasElementViewController.liveStreamDrawings);
    swift_beginAccess();
    v5 = *v4;
    v6 = (unsigned __int8 *)&v3[OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings];
    swift_beginAccess();
    *v6 = v5;
    v7 = specialized CanvasView.tiledView.getter();
    if (v7)
    {
      v8 = (void *)v7;
      v9 = v3;
      v10 = (char *)objc_msgSend(v8, sel_canvasView);
      if (v10)
      {
        v11 = v10;
        objc_msgSend(v10, sel_setGenerateLiveDrawing_, *v6);

        v9 = v11;
      }

    }
  }
}

uint64_t CanvasElementViewController.liveStreamDrawings.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + direct field offset for CanvasElementViewController.liveStreamDrawings);
  swift_beginAccess();
  return *v1;
}

uint64_t CanvasElementViewController.liveStreamDrawings.setter(char a1)
{
  return MarkupContainerViewController.annotationEditingEnabled.setter(a1, &direct field offset for CanvasElementViewController.liveStreamDrawings, (uint64_t (*)(uint64_t))CanvasElementViewController.liveStreamDrawings.didset);
}

uint64_t (*CanvasElementViewController.liveStreamDrawings.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return CanvasElementViewController.liveStreamDrawings.modify;
}

uint64_t CanvasElementViewController.liveStreamDrawings.modify(uint64_t a1, char a2)
{
  return MiniMenuState._fontName.modify(a1, a2, (uint64_t (*)(uint64_t))CanvasElementViewController.liveStreamDrawings.didset);
}

uint64_t @objc CanvasElementViewController.canBecomeFirstResponder.getter()
{
  return 1;
}

Swift::Bool __swiftcall CanvasElementViewController.becomeFirstResponder()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  id *v3;
  objc_class *v5;
  objc_super v6;

  v1 = *v0;
  v2 = *MEMORY[0x1E0DEEDD8];
  v3 = (id *)((char *)v0 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (*v3)
    return objc_msgSend(*v3, sel_becomeFirstResponder);
  v5 = (objc_class *)type metadata accessor for CanvasElementViewController(0, *(_QWORD *)((v2 & v1) + 0x78), *(_QWORD *)((v2 & v1) + 0x80), *(_QWORD *)((v2 & v1) + 0x88));
  v6.receiver = v0;
  v6.super_class = v5;
  return objc_msgSendSuper2(&v6, sel_becomeFirstResponder);
}

BOOL @objc CanvasElementViewController.becomeFirstResponder()(void *a1)
{
  id v1;
  Swift::Bool v2;

  v1 = a1;
  v2 = CanvasElementViewController.becomeFirstResponder()();

  return v2;
}

Swift::Bool __swiftcall CanvasElementViewController.resignFirstResponder()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  id *v3;
  id v4;
  unsigned __int8 v5;
  objc_class *v6;
  objc_super v8;

  v1 = *v0;
  v2 = *MEMORY[0x1E0DEEDD8];
  v3 = (id *)((char *)v0 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (!*v3)
    goto LABEL_5;
  v4 = *v3;
  if (!objc_msgSend(v4, sel_isFirstResponder))
  {

LABEL_5:
    v6 = (objc_class *)type metadata accessor for CanvasElementViewController(0, *(_QWORD *)((v2 & v1) + 0x78), *(_QWORD *)((v2 & v1) + 0x80), *(_QWORD *)((v2 & v1) + 0x88));
    v8.receiver = v0;
    v8.super_class = v6;
    return objc_msgSendSuper2(&v8, sel_resignFirstResponder);
  }
  v5 = objc_msgSend(v4, sel_resignFirstResponder);

  return v5;
}

BOOL @objc CanvasElementViewController.resignFirstResponder()(void *a1)
{
  id v1;
  Swift::Bool v2;

  v1 = a1;
  v2 = CanvasElementViewController.resignFirstResponder()();

  return v2;
}

Swift::Void __swiftcall CanvasElementViewController.viewDidLoad()()
{
  _QWORD *v0;
  objc_class *v1;
  objc_super v2;

  v1 = (objc_class *)type metadata accessor for CanvasElementViewController(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88));
  v2.receiver = v0;
  v2.super_class = v1;
  objc_msgSendSuper2(&v2, sel_viewDidLoad);
  objc_msgSend(v0, sel_setDefinesPresentationContext_, 1);
  CanvasElementViewController.setupKeyCommands()();
  CanvasElementViewController.updateToolPickerVisibility()();
}

void @objc CanvasElementViewController.viewDidLoad()(void *a1)
{
  id v1;

  v1 = a1;
  CanvasElementViewController.viewDidLoad()();

}

Swift::Void __swiftcall CanvasElementViewController.viewWillDisappear(_:)(Swift::Bool a1)
{
  _QWORD *v1;
  objc_class *v3;
  objc_super v4;

  v3 = (objc_class *)type metadata accessor for CanvasElementViewController(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x78), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x80), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v1) + 0x88));
  v4.receiver = v1;
  v4.super_class = v3;
  objc_msgSendSuper2(&v4, sel_viewWillDisappear_, a1);
  CanvasElementViewController.clearFormFillingFields()();
}

void @objc CanvasElementViewController.viewWillDisappear(_:)(void *a1, uint64_t a2, Swift::Bool a3)
{
  id v4;

  v4 = a1;
  CanvasElementViewController.viewWillDisappear(_:)(a3);

}

id CanvasElementViewController.scrollView.getter()
{
  return (id)specialized CanvasElementViewController.scrollView.getter();
}

id CanvasElementViewController.isSixChannelBlendingEnabled.didset()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  id result;
  void *v4;
  unsigned __int8 *v5;

  v1 = v0;
  v2 = (_QWORD *)(v0 + direct field offset for CanvasElementViewController.canvasView);
  result = (id)swift_beginAccess();
  if (*v2)
  {
    result = (id)specialized CanvasView.tiledView.getter();
    if (result)
    {
      v4 = result;
      v5 = (unsigned __int8 *)(v1 + direct field offset for CanvasElementViewController.isSixChannelBlendingEnabled);
      swift_beginAccess();
      return objc_msgSend(v4, sel_setSixChannelBlending_, *v5);
    }
  }
  return result;
}

uint64_t CanvasElementViewController.isSixChannelBlendingEnabled.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + direct field offset for CanvasElementViewController.isSixChannelBlendingEnabled);
  swift_beginAccess();
  return *v1;
}

uint64_t CanvasElementViewController.isSixChannelBlendingEnabled.setter(char a1)
{
  return MarkupContainerViewController.annotationEditingEnabled.setter(a1, &direct field offset for CanvasElementViewController.isSixChannelBlendingEnabled, (uint64_t (*)(uint64_t))CanvasElementViewController.isSixChannelBlendingEnabled.didset);
}

uint64_t (*CanvasElementViewController.isSixChannelBlendingEnabled.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return CanvasElementViewController.isSixChannelBlendingEnabled.modify;
}

uint64_t CanvasElementViewController.isSixChannelBlendingEnabled.modify(uint64_t a1, char a2)
{
  return MiniMenuState._fontName.modify(a1, a2, (uint64_t (*)(uint64_t))CanvasElementViewController.isSixChannelBlendingEnabled.didset);
}

uint64_t CanvasElementViewController.canEditVellumOpacity.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + direct field offset for CanvasElementViewController.canEditVellumOpacity);
  swift_beginAccess();
  return *v1;
}

void CanvasElementViewController.canEditVellumOpacity.setter(char a1)
{
  CanvasElementViewController.canEditDescription.setter(a1, &direct field offset for CanvasElementViewController.canEditVellumOpacity, &OBJC_IVAR____TtC8PaperKit23CanvasElementController_canEditVellumOpacity, &OBJC_IVAR____TtC8PaperKit26TextToolListViewController_opacityItemVisible);
}

void CanvasElementViewController.canEditDescription.setter(char a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  _BYTE *v9;

  v9 = (_BYTE *)(v4 + *a2);
  swift_beginAccess();
  *v9 = a1;
  CanvasElementViewController.canEditVellumOpacity.didset(a2, a3, a4);
}

void (*CanvasElementViewController.canEditVellumOpacity.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return CanvasElementViewController.canEditVellumOpacity.modify;
}

void CanvasElementViewController.canEditVellumOpacity.modify(uint64_t a1, char a2)
{
  CanvasElementViewController.canEditDescription.modify(a1, a2, &direct field offset for CanvasElementViewController.canEditVellumOpacity, &OBJC_IVAR____TtC8PaperKit23CanvasElementController_canEditVellumOpacity, &OBJC_IVAR____TtC8PaperKit26TextToolListViewController_opacityItemVisible);
}

void CanvasElementViewController.canEditDescription.modify(uint64_t a1, char a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  swift_endAccess();
  if ((a2 & 1) == 0)
    CanvasElementViewController.canEditVellumOpacity.didset(a3, a4, a5);
}

void CanvasElementViewController.imageView.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  unint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;

  v1 = (void **)(v0 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  v2 = *v1;
  if (!*v1)
    return;
  v3 = specialized CanvasView.zoomView.getter();
  if (!v3)
    return;
  v4 = (void *)v3;
  v5 = v2;
  v6 = v4;
  v7 = objc_msgSend(v6, sel_subviews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v11)
      goto LABEL_5;
LABEL_11:
    swift_bridgeObjectRelease();

    return;
  }
  if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_11;
LABEL_5:
  if ((v8 & 0xC000000000000001) != 0)
  {
    v9 = (id)MEMORY[0x1DF0E4D64](0, v8);
  }
  else
  {
    if (!*(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v9 = *(id *)(v8 + 32);
  }
  v10 = v9;
  swift_bridgeObjectRelease();

  type metadata accessor for ImageElementView(0);
  if (!swift_dynamicCastClass())

}

void CanvasElementViewController.isImageAnalysisEnabled.didset()
{
  uint64_t v0;
  _BYTE *v1;
  _BYTE *v2;
  _BYTE *v3;

  CanvasElementViewController.imageView.getter();
  if (v1)
  {
    v2 = v1;
    v3 = (_BYTE *)(v0 + direct field offset for CanvasElementViewController.isImageAnalysisEnabled);
    swift_beginAccess();
    v2[direct field offset for ImageElementView.isImageAnalysisEnabled] = *v3;
    ImageElementView.updateMediaViewImageAnalysis()();

  }
}

uint64_t CanvasElementViewController.isImageAnalysisEnabled.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + direct field offset for CanvasElementViewController.isImageAnalysisEnabled);
  swift_beginAccess();
  return *v1;
}

uint64_t CanvasElementViewController.isImageAnalysisEnabled.setter(char a1)
{
  return MarkupContainerViewController.annotationEditingEnabled.setter(a1, &direct field offset for CanvasElementViewController.isImageAnalysisEnabled, (uint64_t (*)(uint64_t))CanvasElementViewController.isImageAnalysisEnabled.didset);
}

uint64_t (*CanvasElementViewController.isImageAnalysisEnabled.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return CanvasElementViewController.isImageAnalysisEnabled.modify;
}

uint64_t CanvasElementViewController.isImageAnalysisEnabled.modify(uint64_t a1, char a2)
{
  return MiniMenuState._fontName.modify(a1, a2, (uint64_t (*)(uint64_t))CanvasElementViewController.isImageAnalysisEnabled.didset);
}

void CanvasElementViewController.canEditVellumOpacity.didset(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  id *v8;
  id v9;
  _BYTE *v10;
  char *v11;
  char v12;
  void *v13;
  id v14;
  char *v15;

  v7 = v3;
  v8 = (id *)(v3 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (*v8)
  {
    v9 = *v8;
    v10 = (_BYTE *)Canvas.canvasElementController.getter();

    if (v10)
    {
      v11 = (char *)(v7 + *a1);
      swift_beginAccess();
      v12 = *v11;
      v10[*a2] = *v11;
      v13 = *(void **)&v10[OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController];
      if (v13)
      {
        v14 = v13;
        v15 = ToolPickerController.textToolListViewController.getter();
        v15[*a3] = v12;
        TextToolListViewController.updateUI()();

        v10 = v15;
      }

    }
  }
}

uint64_t CanvasElementViewController.canEditDescription.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + direct field offset for CanvasElementViewController.canEditDescription);
  swift_beginAccess();
  return *v1;
}

void CanvasElementViewController.canEditDescription.setter(char a1)
{
  CanvasElementViewController.canEditDescription.setter(a1, &direct field offset for CanvasElementViewController.canEditDescription, &OBJC_IVAR____TtC8PaperKit23CanvasElementController_canEditDescription, &OBJC_IVAR____TtC8PaperKit26TextToolListViewController_descriptionItemVisible);
}

void (*CanvasElementViewController.canEditDescription.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return CanvasElementViewController.canEditDescription.modify;
}

void CanvasElementViewController.canEditDescription.modify(uint64_t a1, char a2)
{
  CanvasElementViewController.canEditDescription.modify(a1, a2, &direct field offset for CanvasElementViewController.canEditDescription, &OBJC_IVAR____TtC8PaperKit23CanvasElementController_canEditDescription, &OBJC_IVAR____TtC8PaperKit26TextToolListViewController_descriptionItemVisible);
}

uint64_t CanvasElementViewController.shouldDeselectElementsWhenToolPickerIsHidden.getter()
{
  uint64_t v0;
  id *v1;
  id v2;
  unsigned __int8 *v3;
  uint64_t v4;

  v1 = (id *)(v0 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (!*v1)
    return 0;
  v2 = *v1;
  v3 = (unsigned __int8 *)Canvas.canvasElementController.getter();

  if (!v3)
    return 0;
  v4 = v3[OBJC_IVAR____TtC8PaperKit23CanvasElementController_shouldDeselectElementsWhenToolPickerIsHidden];

  return v4;
}

void CanvasElementViewController.shouldDeselectElementsWhenToolPickerIsHidden.setter(char a1)
{
  uint64_t v1;
  id *v3;
  id v4;
  _BYTE *v5;

  v3 = (id *)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (*v3)
  {
    v4 = *v3;
    v5 = (_BYTE *)Canvas.canvasElementController.getter();

    if (v5)
    {
      v5[OBJC_IVAR____TtC8PaperKit23CanvasElementController_shouldDeselectElementsWhenToolPickerIsHidden] = a1 & 1;

    }
  }
}

void (*CanvasElementViewController.shouldDeselectElementsWhenToolPickerIsHidden.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = CanvasElementViewController.shouldDeselectElementsWhenToolPickerIsHidden.getter() & 1;
  return CanvasElementViewController.shouldDeselectElementsWhenToolPickerIsHidden.modify;
}

void CanvasElementViewController.shouldDeselectElementsWhenToolPickerIsHidden.modify(uint64_t a1)
{
  CanvasElementViewController.shouldDeselectElementsWhenToolPickerIsHidden.setter(*(_BYTE *)(a1 + 8));
}

Swift::Void __swiftcall CanvasElementViewController.zoomIn()()
{
  double v0;
  id v1;

  v1 = (id)specialized CanvasElementViewController.scrollView.getter();
  objc_msgSend(v1, sel_zoomScale);
  objc_msgSend(v1, sel_setZoomScale_, v0 * 1.25);

}

void @objc CanvasElementViewController.zoomIn()(void *a1)
{
  id v1;

  v1 = a1;
  CanvasElementViewController.zoomIn()();

}

Swift::Void __swiftcall CanvasElementViewController.zoomOut()()
{
  double v0;
  id v1;

  v1 = (id)specialized CanvasElementViewController.scrollView.getter();
  objc_msgSend(v1, sel_zoomScale);
  objc_msgSend(v1, sel_setZoomScale_, v0 / 1.25);

}

void @objc CanvasElementViewController.zoomOut()(void *a1)
{
  id v1;

  v1 = a1;
  CanvasElementViewController.zoomOut()();

}

Swift::Void __swiftcall CanvasElementViewController.setupKeyCommands()()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v1 = (void *)MEMORY[0x1DF0E41AC](62, 0xE100000000000000);
  v2 = (void *)objc_opt_self();
  v3 = objc_msgSend(v2, sel_keyCommandWithInput_modifierFlags_action_, v1, 0x100000, sel_zoomIn);

  v4 = (void *)MEMORY[0x1DF0E41AC](0x6E49206D6F6F5ALL, 0xE700000000000000);
  objc_msgSend(v3, sel_setTitle_, v4);

  objc_msgSend(v0, sel_addKeyCommand_, v3);
  v5 = (void *)MEMORY[0x1DF0E41AC](60, 0xE100000000000000);
  v7 = objc_msgSend(v2, sel_keyCommandWithInput_modifierFlags_action_, v5, 0x100000, sel_zoomOut);

  v6 = (void *)MEMORY[0x1DF0E41AC](0x6E49206D6F6F5ALL, 0xE700000000000000);
  objc_msgSend(v7, sel_setTitle_, v6);

  objc_msgSend(v0, sel_addKeyCommand_, v7);
}

id CanvasElementViewController.updateViewForPaper(_:)(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t);
  id v53;
  char *v54;
  id result;
  uint64_t v56;
  uint64_t v57;
  uint64_t ObjectType;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  char *v62;
  void **v63;
  void *v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  char *v75;
  id v76;
  void *v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  unsigned __int8 *v86;
  char v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  unsigned __int8 v116[32];

  v3 = *MEMORY[0x1E0DEEDD8] & *(_QWORD *)v1;
  v4 = type metadata accessor for CRAssetOrData();
  v93 = *(_QWORD *)(v4 - 8);
  v94 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v91 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  MEMORY[0x1E0C80A78](v7, v8);
  v103 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for Image();
  MEMORY[0x1E0C80A78](v92, v10);
  v95 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>?);
  MEMORY[0x1E0C80A78](v12, v13);
  v102 = (char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v100 = *(_QWORD *)(v15 - 8);
  v101 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v99 = (char *)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>);
  v19 = *(_QWORD *)(v18 - 8);
  v104 = v18;
  v105 = v19;
  MEMORY[0x1E0C80A78](v18, v20);
  v96 = (char *)&v89 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for CRKeyPath();
  v110 = *(_QWORD *)(v22 - 8);
  v111 = v22;
  MEMORY[0x1E0C80A78](v22, v23);
  v109 = (char *)&v89 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v108 = (char *)&v89 - v27;
  v28 = *(_QWORD *)(v3 + 120);
  v29 = *(_QWORD *)(v3 + 128);
  v97 = v3;
  v114 = v29;
  v30 = *(_QWORD *)(v29 + 16);
  v112 = v28;
  v106 = v30;
  v31 = type metadata accessor for Capsule();
  v32 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v33);
  v98 = (char *)&v89 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35, v36);
  v107 = (uint64_t)&v89 - v37;
  MEMORY[0x1E0C80A78](v38, v39);
  v113 = (char *)&v89 - v40;
  v41 = type metadata accessor for Optional();
  v42 = *(_QWORD *)(v41 - 8);
  MEMORY[0x1E0C80A78](v41, v43);
  v45 = (char *)&v89 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v46, v47);
  v49 = (char *)&v89 - v48;
  v115 = v1;
  v50 = (uint64_t *)&v1[direct field offset for CanvasElementViewController.canvasView];
  swift_beginAccess();
  v51 = *v50;
  v52 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
  v52(v49, a1, v41);
  if (v51 && (*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v49, 1, v31) == 1)
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v49, v41);
    v53 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_init);
    v54 = v115;
    objc_msgSend(v115, sel_setView_, v53);

    specialized CanvasElementViewController.canvasView.setter(0);
    result = (id)CanvasElementViewController.delegate.getter();
    if (result)
    {
      v57 = v56;
      ObjectType = swift_getObjectType();
      (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v54, ObjectType, v57);
      return (id)swift_unknownObjectRelease();
    }
  }
  else
  {
    v59 = *(void (**)(char *, uint64_t))(v42 + 8);
    v59(v49, v41);
    v52(v45, a1, v41);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v45, 1, v31) == 1)
    {
      return (id)((uint64_t (*)(char *, uint64_t))v59)(v45, v41);
    }
    else
    {
      v60 = v32;
      v61 = (uint64_t)v113;
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v113, v45, v31);
      v62 = v115;
      v63 = (void **)&v115[direct field offset for CanvasElementViewController.canvasView];
      swift_beginAccess();
      v64 = *v63;
      if (v64)
      {
        v65 = v107;
        Canvas.updatablePaper2.getter(v107);
        v66 = v64;
        v67 = v60;
        v68 = v61;
        v69 = v108;
        Capsule<>.rootID.getter();
        v90 = v67;
        (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v65, v31);
        v70 = v109;
        v71 = v31;
        Capsule<>.rootID.getter();
        v72 = static CRKeyPath.== infix(_:_:)();
        v73 = v111;
        v74 = *(void (**)(char *, uint64_t))(v110 + 8);
        v74(v70, v111);
        v74(v69, v73);
        if ((v72 & 1) != 0)
        {
          v116[0] = 3;
          AnyCanvas.merge<A>(_:from:)(v68, v116, v112, v106);
        }
        else
        {
          specialized CanvasElementViewController.canvasView.setter(0);
        }

        v31 = v71;
        v61 = v68;
        v60 = v90;
      }
      v75 = &v62[direct field offset for CanvasElementViewController.canvasView];
      swift_beginAccess();
      if (*(_QWORD *)v75)
      {
        return (id)(*(uint64_t (**)(uint64_t, uint64_t))(v60 + 8))(v61, v31);
      }
      else
      {
        v111 = v31;
        v76 = *(id *)&v62[direct field offset for CanvasElementViewController.context];
        result = objc_msgSend(v62, sel_view);
        if (result)
        {
          v77 = result;
          v110 = *(_QWORD *)(v97 + 136);
          type metadata accessor for CanvasView(0, v112, v114, v110);
          objc_msgSend(v77, sel_bounds);
          v79 = v78;
          v81 = v80;
          v83 = v82;
          v85 = v84;

          v86 = (unsigned __int8 *)&v62[direct field offset for CanvasElementViewController.editingMode];
          swift_beginAccess();
          v116[0] = *v86;
          LOBYTE(v86) = v62[direct field offset for CanvasElementViewController.allowMediaCanvasElements];
          v87 = v62[direct field offset for CanvasElementViewController.transparentBackground];
          v88 = v62;
          specialized CanvasView.__allocating_init(context:frame:paper:editingMode:allowMediaCanvasElements:transparentBackground:paperViewController:)(v76, v61, v116, (char)v86, v87, v79, v81, v83, v85);
        }
        __break(1u);
      }
    }
  }
  return result;
}

Swift::Void __swiftcall CanvasElementViewController.createNavigationBack(tintColor:)(UIColor tintColor)
{
  char *v1;
  char *v2;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  id v20;

  v2 = v1;
  v4 = objc_msgSend((id)objc_opt_self(), sel_configurationWithPointSize_weight_scale_, 5, 2, 25.0);
  v5 = (void *)MEMORY[0x1DF0E41AC](0x2E6E6F7276656863, 0xEC0000007466656CLL);
  v6 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_withConfiguration_, v5, v4);

  v7 = objc_msgSend((id)objc_opt_self(), sel_buttonWithType_, 0);
  objc_msgSend(v7, sel_addTarget_action_forControlEvents_, v2, sel_close_, 64);
  objc_msgSend(v7, sel_setImage_forState_, v6, 0);
  v8 = (void *)MEMORY[0x1DF0E41AC](1801675074, 0xE400000000000000);
  objc_msgSend(v7, sel_setTitle_forState_, v8, 0);

  objc_msgSend(v7, sel_setTitleColor_forState_, tintColor.super.isa, 0);
  v9 = (id *)&v2[direct field offset for CanvasElementViewController.canvasView];
  swift_beginAccess();
  if (*v9)
    objc_msgSend(*v9, sel_addSubview_, v7);
  objc_msgSend(v7, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v10 = objc_msgSend(v7, sel_leftAnchor);
  v11 = objc_msgSend(v2, sel_view);
  if (v11)
  {
    v12 = v11;
    v13 = objc_msgSend(v11, sel_leftAnchor);

    v14 = objc_msgSend(v10, sel_constraintEqualToAnchor_constant_, v13, 10.0);
    objc_msgSend(v14, sel_setActive_, 1);

    v15 = objc_msgSend(v7, sel_topAnchor);
    v16 = objc_msgSend(v2, sel_view);
    if (v16)
    {
      v17 = v16;
      v18 = objc_msgSend(v16, sel_safeAreaLayoutGuide);

      v19 = objc_msgSend(v18, sel_topAnchor);
      v20 = objc_msgSend(v15, sel_constraintEqualToAnchor_, v19);

      objc_msgSend(v20, sel_setActive_, 1);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

id CanvasElementViewController.close(_:)()
{
  void *v0;

  return objc_msgSend(v0, sel_dismissViewControllerAnimated_completion_, 1, 0);
}

uint64_t @objc CanvasElementViewController.close(_:)(void *a1)
{
  id v2;
  uint64_t v4;

  swift_unknownObjectRetain();
  v2 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  CanvasElementViewController.close(_:)();

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v4);
}

uint64_t CanvasElementViewController.rootElement.setter(uint64_t a1)
{
  return CanvasElementViewController.rootElement.setter(a1, (void (*)(void))specialized CanvasElementViewController.rootElement.setter);
}

uint64_t (*CanvasElementViewController.rootElement.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  type metadata accessor for Capsule();
  v4 = type metadata accessor for Optional();
  v3[1] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[2] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  CanvasElementViewController.rootElement.getter();
  return CanvasElementViewController.rootElement.modify;
}

uint64_t CanvasElementViewController.rootElement.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;

  v3 = (_QWORD *)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (*v3)
  {
    Canvas.updatablePaper2.getter(a1);
    v4 = type metadata accessor for Capsule();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, 0, 1, v4);
  }
  else
  {
    v6 = type metadata accessor for Capsule();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, 1, 1, v6);
  }
}

uint64_t CanvasElementViewController.paper.setter(uint64_t a1)
{
  return CanvasElementViewController.rootElement.setter(a1, (void (*)(void))specialized CanvasElementViewController.paper.setter);
}

uint64_t CanvasElementViewController.rootElement.setter(uint64_t a1, void (*a2)(void))
{
  uint64_t v3;

  a2();
  type metadata accessor for Capsule();
  v3 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

void CanvasElementViewController.rootElement.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void *, uint64_t);

  v2 = *(void **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 24);
  v4 = *(void **)(*(_QWORD *)a1 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if ((a2 & 1) != 0)
  {
    (*(void (**)(_QWORD, void *, uint64_t))(v6 + 16))(*(_QWORD *)(*(_QWORD *)a1 + 24), v4, v5);
    CanvasElementViewController.updateViewForPaper(_:)((uint64_t)v3);
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
  }
  else
  {
    CanvasElementViewController.updateViewForPaper(_:)(*(_QWORD *)(*(_QWORD *)a1 + 32));
    v7 = *(void (**)(void *, uint64_t))(v6 + 8);
  }
  v7(v4, v5);
  free(v4);
  free(v3);
  free(v2);
}

void CanvasElementViewController.merge<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void **v25;
  void *v26;
  id v27;
  char *v28;
  char v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;

  v38 = a1;
  v6 = type metadata accessor for Capsule();
  v7 = type metadata accessor for Optional();
  v34 = *(_QWORD *)(v7 - 8);
  v35 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v36 = (char *)&v33 - v13;
  v37 = a2;
  v14 = *(_QWORD *)(a3 + 16);
  v15 = type metadata accessor for Capsule();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v33 - v18;
  v20 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v33 - v23;
  v25 = (void **)(v3 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  v26 = *v25;
  if (*v25)
  {
    v39 = 3;
    v27 = v26;
    AnyCanvas.merge<A>(_:from:)(v38, &v39, v37, v14);

  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v38, v15);
    v28 = v36;
    v29 = swift_dynamicCast();
    v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
    v32 = v34;
    v31 = v35;
    if ((v29 & 1) != 0)
    {
      v30(v28, 0, 1, v6);
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v24, v28, v6);
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v10, v24, v6);
      v30(v10, 0, 1, v6);
      CanvasElementViewController.updateViewForPaper(_:)((uint64_t)v10);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v31);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v24, v6);
    }
    else
    {
      v30(v28, 1, 1, v6);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v28, v31);
    }
  }
}

uint64_t CanvasElementViewController.publisher.getter()
{
  uint64_t v0;

  type metadata accessor for Capsule();
  v0 = type metadata accessor for PassthroughSubject();
  swift_retain();
  MEMORY[0x1DF0E6450](MEMORY[0x1E0C95F48], v0);
  return AnyPublisher.init<A>(_:)();
}

Swift::Void __swiftcall CanvasElementViewController.updatePlusButton()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int v5;
  void *v6;
  id v7;
  id *v8;
  UIView *v9;
  UIView *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v1 = v0;
  v2 = *(_QWORD *)v0;
  v3 = *MEMORY[0x1E0DEEDD8];
  v4 = &v0[direct field offset for CanvasElementViewController.editingMode];
  swift_beginAccess();
  v5 = *v4;
  v6 = *(void **)&v1[direct field offset for CanvasElementViewController.plusButton];
  if (v5 == 1)
  {
    v7 = objc_msgSend(*(id *)&v1[direct field offset for CanvasElementViewController.plusButton], sel_superview);

    if (v7)
      objc_msgSend(v6, sel_removeFromSuperview);
    v8 = (id *)&v1[direct field offset for CanvasElementViewController.canvasView];
    swift_beginAccess();
    if (*v8)
      objc_msgSend(*v8, sel_addSubview_, v6);
    v9 = (UIView *)objc_msgSend(v1, sel_view);
    if (v9)
    {
      v10 = v9;
      FormPlusButtonView.setConstraintsBasedOn(_:)(v9);

      v11 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v12 = (_QWORD *)swift_allocObject();
      v13 = *(_QWORD *)((v3 & v2) + 0x78);
      v12[2] = v13;
      v14 = *(_QWORD *)((v3 & v2) + 0x80);
      v12[3] = v14;
      v15 = *(_QWORD *)((v3 & v2) + 0x88);
      v12[4] = v15;
      v12[5] = v11;
      v16 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v17 = (_QWORD *)swift_allocObject();
      v17[2] = v13;
      v17[3] = v14;
      v17[4] = v15;
      v17[5] = v16;
      swift_retain();
      swift_retain();
      FormPlusButtonView.setMenuWithActions(addTextBoxHandler:addSignatureHandler:)();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    objc_msgSend(*(id *)&v1[direct field offset for CanvasElementViewController.plusButton], sel_removeFromSuperview);
  }
}

void closure #1 in CanvasElementViewController.updatePlusButton()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  id v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  __int128 v15;
  double v16;
  double v17;
  uint64_t (*v18)(void);
  void *v19;
  id v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ObjectType;
  uint64_t inited;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  id v38;
  _QWORD *v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x1DF0E666C](v2);
  if (v3)
  {
    v4 = (void *)v3;
    v5 = (_QWORD *)(v3 + direct field offset for CanvasElementViewController.canvasView);
    swift_beginAccess();
    if (*v5
      && (v6 = Canvas.editingView.getter(),
          v7 = (_QWORD *)MEMORY[0x1E0DEEDD8],
          v8 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v6) + 0x88))(),
          v6,
          v8))
    {
      v9 = objc_msgSend(v4, sel_view);
      if (!v9)
      {
LABEL_13:
        __break(1u);
        return;
      }
      v10 = v9;
      objc_msgSend(v9, sel_center);
      v12 = v11;
      v14 = v13;

      if (one-time initialization token for defaultFormFieldSize != -1)
        swift_once();
      v15 = static FormFillingView.defaultFormFieldSize;
      v16 = v12 - *(double *)&static FormFillingView.defaultFormFieldSize * 0.5;
      v17 = v14 - *((double *)&static FormFillingView.defaultFormFieldSize + 1) * 0.5;
      v18 = *(uint64_t (**)(void))((*v7 & *v8) + 0x2F8);
      v19 = (void *)v18();
      v20 = objc_msgSend(v4, sel_view);
      objc_msgSend(v19, sel_convertRect_fromView_, v20, v16, v17, v15);
      v22 = v21;
      v24 = v23;
      v26 = v25;
      v28 = v27;

      LOBYTE(v55) = 1;
      specialized static FormFillingView.createFormFieldView(canvas:frame:text:font:alignment:textContentType:maxCharacterCount:detectedFormField:startsNewAutofillContext:analytics_inputSource:analytics_documentType:)(v8, 0, 0, 0, 0, 1, (unsigned __int8 *)&v55, 0x7FFFFFFFFFFFFFFFLL, v22, v24, v26, v28, 1u, 0, 0xBu, 5u);
      v30 = v29;
      v31 = (void *)v18();
      v33 = v32;
      ObjectType = swift_getObjectType();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1DDF35440;
      *(_QWORD *)(inited + 32) = v30;
      v55 = inited;
      specialized Array._endMutation()();
      v36 = v55;
      v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 168);
      v38 = v30;
      v37(v36, ObjectType, v33);
      swift_bridgeObjectRelease();

      v39 = v38;
      v40 = specialized CanvasMembers.init(_:)(v39);
      v42 = v41;
      v44 = v43;
      LOBYTE(ObjectType) = v45;

      AnyCanvas.selection.setter(v40, v42, v44, ObjectType & 1);
      v46 = (void *)v18();
      v48 = v47;
      v49 = swift_getObjectType();
      v50 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v48 + 144))(v49, v48);

      if (v50)
      {
        v51 = *(_QWORD *)&v50[OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics];
        swift_retain();

        v52 = *(_QWORD *)(v51 + 48);
        v53 = __OFADD__(v52, 1);
        v54 = v52 + 1;
        if (!v53)
        {
          *(_QWORD *)(v51 + 48) = v54;
          swift_release();
          return;
        }
        __break(1u);
        goto LABEL_13;
      }
    }
    else
    {

    }
  }
}

uint64_t closure #2 in CanvasElementViewController.updatePlusButton()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  char *v10;
  void *v11;
  id v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  uint64_t v21;
  _QWORD *v22;

  v8 = a2 + 16;
  swift_beginAccess();
  result = MEMORY[0x1DF0E666C](v8);
  if (result)
  {
    v10 = (char *)result;
    if (one-time initialization token for shared != -1)
      swift_once();
    v11 = *(void **)&v10[direct field offset for CanvasElementViewController.plusButton];
    v12 = v11;
    objc_msgSend(v12, sel_bounds);
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v20 = v19;
    v21 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v22 = (_QWORD *)swift_allocObject();
    v22[2] = a3;
    v22[3] = a4;
    v22[4] = a5;
    v22[5] = v21;
    swift_retain();
    specialized SignatureManager.showSignatures(_:_:_:_:)(v10, v11, (uint64_t)partial apply for closure #1 in closure #2 in CanvasElementViewController.updatePlusButton(), (uint64_t)v22, v14, v16, v18, v20);

    swift_release();
    return swift_release();
  }
  return result;
}

void closure #1 in closure #2 in CanvasElementViewController.updatePlusButton()(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  id v15;
  id v16;
  void *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  void (*v22)(_BYTE *, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _UNKNOWN **);
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[24];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Signature>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v25[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  v9 = MEMORY[0x1DF0E666C](a2 + 16);
  if (v9)
  {
    v10 = (void *)v9;
    if (a1
      && (v11 = (_QWORD *)(v9 + direct field offset for CanvasElementViewController.canvasView),
          swift_beginAccess(),
          *v11))
    {
      v12 = Canvas.editingView.getter();
      v13 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v14 = (_QWORD *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v12) + 0x88))();
      v15 = a1;

      if (v14)
      {
        type metadata accessor for SignatureManager();
        swift_initStaticObject();
        v16 = objc_msgSend(v10, sel_view);
        if (v16)
        {
          v17 = v16;
          objc_msgSend(v16, sel_center);
          v19 = v18;
          v21 = v20;

          SignatureManager.signatureCanvasElementForItem(_:at:baselineY:maxHeight:)((uint64_t)v15, 0, 1, 0, 1, v19, v21);
          v22 = *(void (**)(_BYTE *, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _UNKNOWN **))((*v13 & *v14) + 0x480);
          v23 = type metadata accessor for Signature();
          v24 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Signature and conformance Signature, (uint64_t (*)(uint64_t))type metadata accessor for Signature, (uint64_t)&protocol conformance descriptor for Signature);
          v22(v8, 1, 0, 0, v23, v24, &protocol witness table for Signature);

          (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
        }
        else
        {
          __break(1u);
        }
      }
      else
      {

      }
    }
    else
    {

    }
  }
}

void CanvasElementViewController._rulerHostingDelegate.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + direct field offset for CanvasElementViewController._rulerHostingDelegate);
  *(_QWORD *)(v1 + direct field offset for CanvasElementViewController._rulerHostingDelegate) = a1;

}

void CanvasElementViewController.rulerHostView.didset(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v4;
  void *v5;
  id v6;
  id v7;
  char v8;
  void *v9;
  objc_class *v10;
  _BYTE *v11;
  id v12;
  id v13;
  _QWORD *v14;
  void *v15;
  objc_super v16;

  v2 = v1;
  v4 = (void **)(v1 + direct field offset for CanvasElementViewController.rulerHostView);
  swift_beginAccess();
  v5 = *v4;
  if (a1)
  {
    if (!v5)
      goto LABEL_5;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    v6 = v5;
    v7 = a1;
    v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) != 0)
      return;
    v5 = *v4;
    if (!*v4)
    {
LABEL_5:
      v9 = *(void **)(v2 + direct field offset for CanvasElementViewController._rulerHostingDelegate);
      *(_QWORD *)(v2 + direct field offset for CanvasElementViewController._rulerHostingDelegate) = 0;
      goto LABEL_8;
    }
  }
  else if (!v5)
  {
    return;
  }
  v10 = (objc_class *)type metadata accessor for RulerHostingDelegate();
  v11 = objc_allocWithZone(v10);
  swift_unknownObjectWeakInit();
  v11[OBJC_IVAR____TtC8PaperKit20RulerHostingDelegate_sharedRuler] = 1;
  swift_unknownObjectWeakAssign();
  v16.receiver = v11;
  v16.super_class = v10;
  v12 = v5;
  v13 = objc_msgSendSuper2(&v16, sel_init);
  v9 = *(void **)(v2 + direct field offset for CanvasElementViewController._rulerHostingDelegate);
  *(_QWORD *)(v2 + direct field offset for CanvasElementViewController._rulerHostingDelegate) = v13;

LABEL_8:
  v14 = (_QWORD *)(v2 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (*v14)
  {
    v15 = (void *)specialized CanvasView.tiledView.getter();
    if (v15)
      objc_msgSend(v15, sel_setRulerHostingDelegate_, *(_QWORD *)(v2 + direct field offset for CanvasElementViewController._rulerHostingDelegate));
  }
}

void *CanvasElementViewController.rulerHostView.getter()
{
  void *v0;
  id v1;

  v0 = (void *)specialized CanvasElementViewController.rulerHostView.getter();
  v1 = v0;
  return v0;
}

void CanvasElementViewController.rulerHostView.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  id v5;

  v3 = (void **)(v1 + direct field offset for CanvasElementViewController.rulerHostView);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;
  v5 = a1;
  CanvasElementViewController.rulerHostView.didset(v4);

}

void (*CanvasElementViewController.rulerHostView.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  void **v4;
  void *v5;
  id v6;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = (void **)(v1 + direct field offset for CanvasElementViewController.rulerHostView);
  swift_beginAccess();
  v5 = *v4;
  v3[3] = *v4;
  v6 = v5;
  return CanvasElementViewController.rulerHostView.modify;
}

void CanvasElementViewController.rulerHostView.modify(uint64_t a1, char a2)
{
  void *v2;
  id v3;
  id *v4;
  id v5;

  v2 = *(void **)a1;
  v4 = (id *)(*(_QWORD *)a1 + 24);
  v3 = *v4;
  if ((a2 & 1) != 0)
  {
    v5 = v3;
    CanvasElementViewController.rulerHostView.setter(v3);

  }
  else
  {
    CanvasElementViewController.rulerHostView.setter(*(void **)(*(_QWORD *)a1 + 24));
  }
  free(v2);
}

void CanvasElementViewController.MediaAnalysisObserver.contextAnalysisDidChange(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;

  v3 = MEMORY[0x1DF0E666C](v1 + 16);
  if (v3)
  {
    v4 = (id)v3;
    CanvasElementViewController.analysis.setter(objc_msgSend(a1, sel_analysis));

  }
}

uint64_t @objc CanvasElementViewController.MediaAnalysisObserver.contextAnalysisDidChange(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  swift_unknownObjectRetain();
  swift_retain();
  CanvasElementViewController.MediaAnalysisObserver.contextAnalysisDidChange(_:)(a3);
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t CanvasElementViewController.formDelegate.getter()
{
  return PaperDocumentViewController.delegate.getter(&direct field offset for CanvasElementViewController.formDelegate);
}

uint64_t CanvasElementViewController.formDelegate.setter(uint64_t a1, uint64_t a2)
{
  specialized CanvasElementViewController.formDelegate.setter(a1, a2);
  return swift_unknownObjectRelease();
}

void (*CanvasElementViewController.formDelegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = direct field offset for CanvasElementViewController.formDelegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return SynapseLinkItem.delegate.modify;
}

void CanvasElementViewController.analysis.didset(void *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char **v6;
  id v7;
  id v8;
  unint64_t v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t i;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t ObjectType;
  _QWORD *v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  id v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = *(void **)(v1 + direct field offset for CanvasElementViewController.analysis);
  if (!v2)
    return;
  v3 = v1;
  if (a1)
  {
    if (v2 == a1)
      return;
  }
  v5 = &unk_1EDB6E000;
  v6 = &selRef_setCanvasWidth_;
  if (!CanvasElementViewController.formDelegate.getter())
  {
    v18 = v2;
    goto LABEL_34;
  }
  v35 = v4;
  v7 = v2;
  v8 = objc_msgSend(v7, sel_formRegions);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for VKCFormRegion);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    v34 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v34 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v7, sel_formRegions);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v36 = MEMORY[0x1E0DEE9D8];
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v12)
    {
LABEL_9:
      if (v12 < 1)
      {
        __break(1u);
        return;
      }
      for (i = 0; i != v12; ++i)
      {
        if ((v11 & 0xC000000000000001) != 0)
          v14 = (id)MEMORY[0x1DF0E4D64](i, v11);
        else
          v14 = *(id *)(v11 + 8 * i + 32);
        v15 = v14;
        if (!objc_msgSend(v14, sel_contentType) || objc_msgSend(v15, sel_contentType) == (id)1)
        {

        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      v16 = v36;
      v6 = &selRef_setCanvasWidth_;
      v5 = (_QWORD *)&unk_1EDB6E000;
      v17 = v34;
      if (v36 < 0)
        goto LABEL_39;
      goto LABEL_25;
    }
  }
  else
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v12)
      goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  v16 = MEMORY[0x1E0DEE9D8];
  v17 = v34;
  if ((MEMORY[0x1E0DEE9D8] & 0x8000000000000000) != 0)
  {
LABEL_39:
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    goto LABEL_27;
  }
LABEL_25:
  if ((v16 & 0x4000000000000000) != 0)
    goto LABEL_39;
  v19 = *(_QWORD *)(v16 + 16);
LABEL_27:
  swift_release();
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, BOOL, BOOL, uint64_t))(v35 + 8))(v3, v17 > 0, v19 != 0, ObjectType);
  swift_unknownObjectRelease();
  if (!v19)
  {
    if (v17 < 1)
      goto LABEL_34;
    v24 = (_QWORD *)(v3 + v5[185]);
    swift_beginAccess();
    if (!*v24)
      goto LABEL_34;
    v22 = specialized CanvasView.formAnalytics.getter();
    v23 = 44;
    goto LABEL_33;
  }
  v21 = (_QWORD *)(v3 + v5[185]);
  swift_beginAccess();
  if (*v21)
  {
    v22 = specialized CanvasView.formAnalytics.getter();
    v23 = 45;
LABEL_33:
    *(_BYTE *)(v22 + 18) = v23;
  }
LABEL_34:
  CanvasElementViewController.updateFormFillingIfNeeded()();
  v25 = (_QWORD *)(v3 + v5[185]);
  swift_beginAccess();
  if (*v25)
  {
    v26 = Canvas.editingView.getter();
    v28 = v27;
    v29 = swift_getObjectType();
    v30 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v28 + 144))(v29, v28);

    if (v30)
    {
      v31 = objc_msgSend(v2, v6[223]);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for VKCFormRegion);
      v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      *(_QWORD *)&v30[OBJC_IVAR____TtC8PaperKit15FormFillingView_vkcFormRegions] = v32;
      swift_bridgeObjectRelease();
      v33 = *(void **)&v30[OBJC_IVAR____TtC8PaperKit15FormFillingView_vkcAnalysis];
      *(_QWORD *)&v30[OBJC_IVAR____TtC8PaperKit15FormFillingView_vkcAnalysis] = v2;

      v2 = v33;
    }
  }

}

void CanvasElementViewController.analysis.setter(void *a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + direct field offset for CanvasElementViewController.analysis);
  *(_QWORD *)(v1 + direct field offset for CanvasElementViewController.analysis) = a1;
  v3 = a1;
  CanvasElementViewController.analysis.didset(v2);

}

void CanvasElementViewController.clearFormFillingFields()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t (*v12)(uint64_t, uint64_t);
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  void (*v23)(void);
  _QWORD *v24;
  uint64_t v25;
  id v26;
  __int128 v27;
  unint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t);
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;

  v1 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v1, v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v33 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)(v0 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (*v7)
  {
    v8 = Canvas.editingView.getter();
    v10 = v9;
    ObjectType = swift_getObjectType();
    v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 144);
    v34 = v8;
    v31 = ObjectType;
    v32 = v10;
    v13 = (void *)v12(ObjectType, v10);
    if (!v13)
    {
LABEL_16:

      return;
    }
    v26 = v13;
    v14 = FormFillingView.formFields.getter();
    if (v14 >> 62)
    {
      v15 = _CocoaArrayWrapper.endIndex.getter();
      if (v15)
        goto LABEL_5;
    }
    else
    {
      v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v15)
      {
LABEL_5:
        if (v15 < 1)
        {
          __break(1u);
          return;
        }
        v16 = 0;
        v17 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v32 + 88);
        v28 = v14 & 0xC000000000000001;
        v29 = v17;
        v27 = xmmword_1DDF32CF0;
        v30 = v14;
        do
        {
          if (v28)
            v20 = (_QWORD *)MEMORY[0x1DF0E4D64](v16, v14);
          else
            v20 = *(id *)(v14 + 8 * v16 + 32);
          v21 = v20;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WeakTagged_9<TaggedCanvasElement>>);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
          v22 = swift_allocObject();
          *(_OWORD *)(v22 + 16) = v27;
          v23 = *(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v21) + 0xE8);
          v24 = v21;
          v23();
          SharedTagged_9.tag.getter();
          v35 = v37;
          v36 = v38;
          MEMORY[0x1DF0E3408](v3);
          lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
          WeakTagged_9.init(_:id:)();
          (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v3);
          if (*(_QWORD *)(v22 + 16))
          {
            v18 = specialized Set.init(_nonEmptyArrayLiteral:)(v22);
            v19 = MEMORY[0x1E0DEE9E8];
          }
          else
          {
            v19 = MEMORY[0x1E0DEE9E8];
            v18 = MEMORY[0x1E0DEE9E8];
          }
          ++v16;
          swift_bridgeObjectRelease();

          v29(v18, v19, 6, 0, v31, v32);
          swift_bridgeObjectRelease();
          v14 = v30;
        }
        while (v15 != v16);
      }
    }

    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
}

void CanvasElementViewController.updateFormFillingIfNeeded()()
{
  uint64_t v0;
  void **v1;
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  unint64_t v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  id v13;
  BOOL v14;
  unint64_t v15;
  id v16;
  void *v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  _QWORD *v26;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v31;
  _QWORD *v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  id v38;
  void *v39;
  char a_low;
  double v41;
  double v42;
  id v43;
  double v44;
  CGFloat v45;
  double v46;
  CGFloat v47;
  double v48;
  CGFloat v49;
  double v50;
  CGFloat v51;
  double v52;
  id v53;
  id v54;
  void *v55;
  unint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;
  id v62;
  void *v63;
  id v64;
  void *v65;
  double v66;
  CGFloat v67;
  double v68;
  CGFloat v69;
  double v70;
  CGFloat v71;
  double v72;
  CGFloat v73;
  _QWORD *v74;
  CGFloat v75;
  CGFloat v76;
  CGFloat v77;
  CGFloat v78;
  void *v79;
  _QWORD *v80;
  BOOL v81;
  _QWORD *v82;
  uint64_t v83;
  BOOL v84;
  id v85;
  void *v86;
  char v87;
  id v88;
  void *v89;
  void *v90;
  id v91;
  id v92;
  char *v93;
  id v94;
  void *v95;
  void *v96;
  id v97;
  char *v98;
  unint64_t v99;
  unint64_t v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t ObjectType;
  void (*v105)(uint64_t, uint64_t, uint64_t);
  uint64_t v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(uint64_t, uint64_t, uint64_t);
  uint64_t v112;
  _QWORD *v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  id v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t i;
  id v126;
  void *v127;
  id v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  id v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  _QWORD *v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  id v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  CGFloat v167;
  __int128 v168;
  char *v169;
  unint64_t v170;
  CGAffineTransform v171;
  unint64_t v172;
  _OWORD v173[3];
  _OWORD v174[3];
  CGRect v175;
  CGRect v176;
  CGRect v177;
  CGRect v178;
  CGRect v179;
  CGRect v180;
  CGRect v181;
  CGRect v182;
  CGRect v183;
  CGRect v184;
  CGRect v185;
  CGRect v186;
  CGRect v187;

  v1 = (void **)(v0 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  v2 = *v1;
  if (!*v1)
    return;
  v3 = *(void **)(v0 + direct field offset for CanvasElementViewController.analysis);
  if (!v3)
    return;
  v4 = v2;
  v5 = v3;
  v6 = AnyCanvas.formFieldElements.getter();
  v172 = MEMORY[0x1E0DEE9D8];
  v147 = v5;
  v7 = objc_msgSend(v5, sel_formRegions);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for VKCFormRegion);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62)
    goto LABEL_125;
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_5:
  v157 = v4;
  v150 = v8;
  if (v9)
  {
    v10 = 0;
    v148 = v8 + 32;
    v149 = v8 & 0xFFFFFFFFFFFFFF8;
    v151 = v9;
    v11 = v6 & 0xC000000000000001;
    v152 = v8 & 0xC000000000000001;
    v153 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if (v152)
      {
        v12 = (id)MEMORY[0x1DF0E4D64](v10, v150);
      }
      else
      {
        if (v10 >= *(_QWORD *)(v149 + 16))
          goto LABEL_124;
        v12 = *(id *)(v148 + 8 * v10);
      }
      v13 = v12;
      v14 = __OFADD__(v10, 1);
      v15 = v10 + 1;
      if (v14)
        goto LABEL_123;
      v154 = v15;
      v16 = objc_msgSend(v12, sel_quad);
      if (!v16)
        goto LABEL_145;
      v17 = v16;
      objc_msgSend(v16, sel_boundingBox);
      v19 = v18;
      v21 = v20;
      v23 = v22;
      v25 = v24;

      v26 = Canvas.editingView.getter();
      (*(void (**)(_OWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v26) + 0x1A8))(v173);
      v164 = v173[1];
      v166 = v173[0];
      v162 = v173[2];

      *(_OWORD *)&v171.a = v166;
      *(_OWORD *)&v171.c = v164;
      *(_OWORD *)&v171.tx = v162;
      v175.origin.x = v19;
      v175.origin.y = v21;
      v175.size.width = v23;
      v175.size.height = v25;
      v176 = CGRectApplyAffineTransform(v175, &v171);
      x = v176.origin.x;
      y = v176.origin.y;
      width = v176.size.width;
      height = v176.size.height;
      v158 = v13;
      if (v6 >> 62)
      {
        swift_bridgeObjectRetain();
        v31 = _CocoaArrayWrapper.endIndex.getter();
        if (!v31)
        {
LABEL_28:
          swift_bridgeObjectRelease();
          v38 = objc_msgSend(v158, sel_autoFillContentType);
          v167 = x;
          if (v38)
          {
            v39 = v38;
            if (objc_msgSend(v158, sel_regionType) == (id)4)
            {

              a_low = 50;
              goto LABEL_34;
            }
            FormContentType.init(_:)((__C::AFTextContentType)v39);
          }
          else
          {
            FormContentType.init(_:)((uint64_t)objc_msgSend(v158, sel_contentType), (char *)&v171);
          }
          a_low = LOBYTE(v171.a);
LABEL_34:
          objc_msgSend(v158, sel_suggestedLineHeight);
          v42 = v41;
          v43 = Canvas.editingView.getter();
          objc_msgSend(v43, sel_frame);
          v45 = v44;
          v47 = v46;
          v49 = v48;
          v51 = v50;

          v179.origin.x = v45;
          v179.origin.y = v47;
          v179.size.width = v49;
          v179.size.height = v51;
          v52 = CGRectGetHeight(v179);
          if (one-time initialization token for formFieldFont != -1)
            swift_once();
          v53 = objc_msgSend((id)static UIConstants.formFieldFont, sel_fontWithSize_, v42 * v52 * 0.75);
          v54 = objc_msgSend(v158, sel_children);
          if (!v54)
            goto LABEL_146;
          v55 = v54;
          v56 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v56 >> 62)
          {
            swift_bridgeObjectRetain();
            v57 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            v57 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
          if (!v57)
          {
            LOBYTE(v171.a) = a_low;
            v94 = v53;
            specialized static FormFillingView.createFormFieldView(canvas:frame:text:font:alignment:textContentType:maxCharacterCount:detectedFormField:startsNewAutofillContext:analytics_inputSource:analytics_documentType:)((void *)v4, 0, 0, v53, 0, 1, (unsigned __int8 *)&v171, (uint64_t)objc_msgSend(v158, sel_maxCharacterCount), v167, y, width, height, 1u, objc_msgSend(v158, sel_autofillNewContextStart), 9u, 5u);
            v96 = v95;

            v97 = v96;
            MEMORY[0x1DF0E4398]();
            if (*(_QWORD *)((v172 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v172 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            if (one-time initialization token for manager != -1)
              swift_once();
            v8 = (unint64_t)Canvas.editingView.getter();
            v98 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v8) + 0x88))();

            specialized FormAnalytics.addFielde2eEvent(canvas:)(v98);
            goto LABEL_8;
          }
          v170 = MEMORY[0x1E0DEE9D8];
          v58 = objc_msgSend(v158, sel_children);
          if (!v58)
            goto LABEL_147;
          v59 = v58;
          v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          v160 = v8;
          if (!(v8 >> 62))
          {
            v60 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (v60)
              goto LABEL_43;
            goto LABEL_90;
          }
          swift_bridgeObjectRetain();
          v60 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v60)
          {
LABEL_90:
            swift_bridgeObjectRelease();
            v8 = v170;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v153 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v153[2] + 1, 1, v153);
            v100 = v153[2];
            v99 = v153[3];
            if (v100 >= v99 >> 1)
              v153 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v99 > 1), v100 + 1, 1, v153);
            v153[2] = v100 + 1;
            v153[v100 + 4] = v170;

            goto LABEL_8;
          }
LABEL_43:
          v61 = 0;
          v161 = v8 & 0xC000000000000001;
          v155 = v8 + 32;
          v156 = v8 & 0xFFFFFFFFFFFFFF8;
          v159 = v60;
          while (2)
          {
            if (v161)
            {
              v62 = (id)MEMORY[0x1DF0E4D64](v61, v160);
            }
            else
            {
              if (v61 >= *(_QWORD *)(v156 + 16))
                goto LABEL_121;
              v62 = *(id *)(v155 + 8 * v61);
            }
            v63 = v62;
            v14 = __OFADD__(v61++, 1);
            if (v14)
            {
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              swift_bridgeObjectRetain();
              v9 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              goto LABEL_5;
            }
            v64 = objc_msgSend(v62, sel_quad);
            if (!v64)
              goto LABEL_144;
            v65 = v64;
            objc_msgSend(v64, sel_boundingBox);
            v67 = v66;
            v69 = v68;
            v71 = v70;
            v73 = v72;

            v74 = Canvas.editingView.getter();
            (*(void (**)(_OWORD *__return_ptr))((*MEMORY[0x1E0DEEDD8] & *v74) + 0x1A8))(v174);
            v165 = v174[1];
            v168 = v174[0];
            v163 = v174[2];

            *(_OWORD *)&v171.a = v168;
            *(_OWORD *)&v171.c = v165;
            *(_OWORD *)&v171.tx = v163;
            v180.origin.x = v67;
            v180.origin.y = v69;
            v180.size.width = v71;
            v180.size.height = v73;
            v181 = CGRectApplyAffineTransform(v180, &v171);
            v75 = v181.origin.x;
            v76 = v181.origin.y;
            v77 = v181.size.width;
            v78 = v181.size.height;
            if (v31)
            {
              if (v11)
              {
                swift_bridgeObjectRetain();
                v80 = (_QWORD *)MEMORY[0x1DF0E4D64](0, v6);
              }
              else
              {
                v79 = *(void **)(v6 + 32);
                swift_bridgeObjectRetain();
                v80 = v79;
              }
              v8 = (unint64_t)v80;
              v182.origin.x = (*(double (**)(void))((*MEMORY[0x1E0DEEDD8] & *v80) + 0x178))();
              v186.origin.x = v75;
              v186.origin.y = v76;
              v186.size.width = v77;
              v186.size.height = v78;
              v81 = CGRectIntersectsRect(v182, v186);

              if (v81)
              {

                swift_bridgeObjectRelease();
                goto LABEL_45;
              }
              if (v31 != 1)
              {
                v4 = 5;
                while (1)
                {
                  v82 = v11 ? (_QWORD *)MEMORY[0x1DF0E4D64](v4 - 4, v6) : *(id *)(v6 + 8 * v4);
                  v8 = (unint64_t)v82;
                  v83 = v4 - 3;
                  if (__OFADD__(v4 - 4, 1))
                    break;
                  v183.origin.x = (*(double (**)(void))((*MEMORY[0x1E0DEEDD8] & *v82) + 0x178))();
                  v187.origin.x = v75;
                  v187.origin.y = v76;
                  v187.size.width = v77;
                  v187.size.height = v78;
                  v84 = CGRectIntersectsRect(v183, v187);

                  if (v84)
                  {

                    swift_bridgeObjectRelease();
                    v4 = v157;
                    v60 = v159;
                    goto LABEL_45;
                  }
                  ++v4;
                  if (v83 == v31)
                    goto LABEL_64;
                }
                __break(1u);
                goto LABEL_120;
              }
LABEL_64:
              swift_bridgeObjectRelease();
              v4 = v157;
            }
            v85 = objc_msgSend(v63, sel_autoFillContentType);
            if (v85)
            {
              v86 = v85;
              if (objc_msgSend(v63, sel_regionType) == (id)4)
              {

                v87 = 50;
LABEL_71:
                LOBYTE(v171.a) = v87;
                v88 = v53;
                specialized static FormFillingView.createFormFieldView(canvas:frame:text:font:alignment:textContentType:maxCharacterCount:detectedFormField:startsNewAutofillContext:analytics_inputSource:analytics_documentType:)((void *)v4, 0, 0, v53, 0, 1, (unsigned __int8 *)&v171, 0x7FFFFFFFFFFFFFFFLL, v75, v76, v77, v78, 1u, objc_msgSend(v63, sel_autofillNewContextStart), 9u, 5u);
                v90 = v89;

                v91 = v90;
                MEMORY[0x1DF0E4398]();
                if (*(_QWORD *)((v172 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v172 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                v92 = v91;
                MEMORY[0x1DF0E4398]();
                if (*(_QWORD *)((v170 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v170 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                if (one-time initialization token for manager != -1)
                  swift_once();
                v8 = (unint64_t)Canvas.editingView.getter();
                v93 = (char *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)v8) + 0x88))();

                specialized FormAnalytics.addFielde2eEvent(canvas:)(v93);
                v60 = v159;
LABEL_45:
                if (v61 == v60)
                  goto LABEL_90;
                continue;
              }
              FormContentType.init(_:)((__C::AFTextContentType)v86);
            }
            else
            {
              FormContentType.init(_:)((uint64_t)objc_msgSend(v63, sel_contentType), (char *)&v171);
            }
            break;
          }
          v87 = LOBYTE(v171.a);
          goto LABEL_71;
        }
      }
      else
      {
        v31 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v31)
          goto LABEL_28;
      }
      if (v11)
        v32 = (_QWORD *)MEMORY[0x1DF0E4D64](0, v6);
      else
        v32 = *(id *)(v6 + 32);
      v8 = (unint64_t)v32;
      v177.origin.x = (*(double (**)(void))((*MEMORY[0x1E0DEEDD8] & *v32) + 0x178))();
      v184.origin.x = x;
      v184.origin.y = y;
      v184.size.width = width;
      v184.size.height = height;
      v33 = CGRectIntersectsRect(v177, v184);

      if (!v33)
      {
        if (v31 == 1)
          goto LABEL_28;
        v34 = 5;
        while (1)
        {
          if (v11)
            v35 = (_QWORD *)MEMORY[0x1DF0E4D64](v34 - 4, v6);
          else
            v35 = *(id *)(v6 + 8 * v34);
          v8 = (unint64_t)v35;
          v36 = v34 - 3;
          if (__OFADD__(v34 - 4, 1))
            goto LABEL_122;
          v178.origin.x = (*(double (**)(void))((*MEMORY[0x1E0DEEDD8] & *v35) + 0x178))();
          v185.origin.x = x;
          v185.origin.y = y;
          v185.size.width = width;
          v185.size.height = height;
          v37 = CGRectIntersectsRect(v178, v185);

          if (v37)
            break;
          ++v34;
          if (v36 == v31)
            goto LABEL_28;
        }
      }

      swift_bridgeObjectRelease();
LABEL_8:
      v10 = v154;
    }
    while (v154 != v151);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v101 = Canvas.editingView.getter();
  v103 = v102;
  ObjectType = swift_getObjectType();
  v105 = *(void (**)(uint64_t, uint64_t, uint64_t))(v103 + 168);
  v106 = swift_bridgeObjectRetain();
  v105(v106, ObjectType, v103);

  swift_bridgeObjectRelease();
  v107 = Canvas.editingView.getter();
  v109 = v108;
  v110 = swift_getObjectType();
  v111 = *(void (**)(uint64_t, uint64_t, uint64_t))(v109 + 176);
  v112 = swift_bridgeObjectRetain();
  v111(v112, v110, v109);

  swift_bridgeObjectRelease();
  v113 = Canvas.editingView.getter();
  v114 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v113) + 0x88))();

  v115 = MEMORY[0x1E0DEE9D8];
  if (v114)
  {
    if (one-time initialization token for manager != -1)
      swift_once();
    swift_beginAccess();
    v116 = swift_bridgeObjectRetain();
    specialized FormAnalytics.recordLatencyEvent(timestamps:endToEnd:)(v116, 1);

    swift_bridgeObjectRelease();
  }
  v117 = Canvas.editingView.getter();
  v119 = v118;
  v120 = swift_getObjectType();
  v121 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v119 + 144))(v120, v119);

  if (!v121)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return;
  }
  v122 = objc_msgSend(v147, sel_formRegions);
  v123 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v123 >> 62)
  {
    swift_bridgeObjectRetain();
    v124 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v124)
      goto LABEL_102;
LABEL_127:
    swift_bridgeObjectRelease();
    v136 = MEMORY[0x1E0DEE9D8];
    goto LABEL_128;
  }
  v124 = *(_QWORD *)((v123 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v124)
    goto LABEL_127;
LABEL_102:
  v169 = v121;
  if (v124 < 1)
  {
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
    return;
  }
  for (i = 0; i != v124; ++i)
  {
    if ((v123 & 0xC000000000000001) != 0)
      v126 = (id)MEMORY[0x1DF0E4D64](i, v123);
    else
      v126 = *(id *)(v123 + 8 * i + 32);
    v127 = v126;
    v128 = objc_msgSend(v126, sel_autoFillContentType);
    if (!v128)
      goto LABEL_105;
    v129 = v128;
    v130 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v132 = v131;
    if (v130 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v132 == v133)
    {

      swift_bridgeObjectRelease_n();
LABEL_105:

      goto LABEL_106;
    }
    v135 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v135 & 1) != 0)
      goto LABEL_105;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_106:
    v4 = v157;
  }
  swift_bridgeObjectRelease();
  v136 = v115;
  v121 = v169;
LABEL_128:
  swift_bridgeObjectRelease();
  v137 = OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics;
  v138 = *(_QWORD *)&v121[OBJC_IVAR____TtC8PaperKit15FormFillingView_analytics];
  if (v136 < 0 || (v136 & 0x4000000000000000) != 0)
  {
    swift_retain();
    swift_retain();
    v139 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
  }
  else
  {
    v139 = *(_QWORD *)(v136 + 16);
    swift_retain();
  }
  swift_release();
  *(_QWORD *)(v138 + 32) = v139;
  swift_release();
  v140 = *(_QWORD *)&v121[v137];
  v141 = v172;
  v142 = v172 >> 62;
  if (v172 >> 62)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v143 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v143 = *(_QWORD *)((v172 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
  }
  *(_QWORD *)(v140 + 24) = v143;
  swift_release();
  v144 = specialized CanvasView.formAnalytics.getter();
  if (v142)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    v145 = _CocoaArrayWrapper.endIndex.getter();

    swift_bridgeObjectRelease();
  }
  else
  {
    v145 = *(_QWORD *)((v141 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_retain();

  }
  swift_bridgeObjectRelease();

  if (v145)
    v146 = 41;
  else
    v146 = 39;
  *(_BYTE *)(v144 + 17) = v146;
  swift_release();
}

uint64_t @objc CanvasElementViewController._canShowWhileLocked()()
{
  return 1;
}

void @objc CanvasElementViewController.toolPickerSelectedToolDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  CanvasElementViewController.toolPickerSelectedToolDidChange(_:)((PKToolPicker)v4);

}

Swift::Void __swiftcall CanvasElementViewController.toolPickerSelectedToolItemDidChange(_:)(PKToolPicker a1)
{
  CanvasElementViewController.drawingPolicy.setter((uint64_t)a1.super.isa, (void (*)(uint64_t))CanvasView.toolPickerSelectedToolDidChange(_:));
}

void @objc CanvasElementViewController.toolPickerSelectedToolItemDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  CanvasElementViewController.toolPickerSelectedToolItemDidChange(_:)((PKToolPicker)v4);

}

void CanvasElementViewController.drawingPolicy.setter(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v2;
  id *v5;
  id v6;

  v5 = (id *)(v2 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  if (*v5)
  {
    v6 = *v5;
    a2(a1);

  }
}

void @objc CanvasElementViewController.toolPickerIsRulerActiveDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;

  v4 = a3;
  v5 = a1;
  CanvasElementViewController.toolPickerSelectedToolItemDidChange(_:)((PKToolPicker)v4);

}

id CanvasElementViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  void *v6;
  id v7;

  v4 = v3;
  if (a2)
  {
    v6 = (void *)MEMORY[0x1DF0E41AC]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void CanvasElementViewController.init(nibName:bundle:)()
{
  specialized CanvasElementViewController.init(nibName:bundle:)();
}

void @objc CanvasElementViewController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v4;

  v4 = a4;
  specialized CanvasElementViewController.init(nibName:bundle:)();
}

uint64_t CanvasView<>.alwaysUseMaxResolutionImage.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + direct field offset for Canvas.paperView))
                              + 0x5C8))() & 1;
}

void key path setter for CanvasView<>.alwaysUseMaxResolutionImage : CanvasView<Image>(unsigned __int8 *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  void (*v4)(uint64_t);
  _QWORD *v5;

  v2 = *a1;
  v3 = *(_QWORD **)(*a2 + direct field offset for Canvas.paperView);
  v4 = *(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x5D0);
  v5 = v3;
  v4(v2);

}

void CanvasView<>.alwaysUseMaxResolutionImage.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  void (*v4)(uint64_t);
  _QWORD *v5;

  v3 = *(_QWORD **)(v1 + direct field offset for Canvas.paperView);
  v4 = *(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x5D0);
  v5 = v3;
  v4(a1);

}

void (*CanvasView<>.alwaysUseMaxResolutionImage.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = direct field offset for Canvas.paperView;
  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v1 + v2)) + 0x5C8))() & 1;
  return CanvasView<>.alwaysUseMaxResolutionImage.modify;
}

void CanvasView<>.alwaysUseMaxResolutionImage.modify(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  void (*v3)(uint64_t);
  _QWORD *v4;

  v1 = *(unsigned __int8 *)(a1 + 16);
  v2 = *(_QWORD **)(*(_QWORD *)a1 + *(_QWORD *)(a1 + 8));
  v3 = *(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x5D0);
  v4 = v2;
  v3(v1);

}

uint64_t CanvasElementViewController<>.imageDescription.getter()
{
  uint64_t v0;
  void **v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  char *v12;
  id v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t ObjectType;
  _QWORD *v18;
  uint64_t v19;

  v1 = (void **)(v0 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  v2 = (char *)*v1;
  if (!*v1)
    return 0;
  v3 = *(char **)&v2[direct field offset for Canvas._canvasElementController];
  if (v3)
  {
    v4 = v2;
    v5 = v3;
LABEL_13:
    v14 = v3;

    v15 = &v5[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate];
    v9 = MEMORY[0x1DF0E666C](&v5[OBJC_IVAR____TtC8PaperKit23CanvasElementController_delegate]);
    if (!v9)
    {

      return v9;
    }
    v16 = *((_QWORD *)v15 + 1);
    ObjectType = swift_getObjectType();
    v18 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(ObjectType, v16);
    v19 = swift_unknownObjectRelease();
    if (v18)
    {
      v9 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v18) + 0x410))(v19);

      return v9;
    }

    return 0;
  }
  v6 = *(void **)&v2[direct field offset for CanvasView.canvasTiledView];
  if (!v6)
    return 0;
  swift_getObjectType();
  v7 = swift_conformsToProtocol2();
  if (v7)
    v8 = v7;
  else
    v8 = 0;
  if (v7)
    v9 = (uint64_t)v6;
  else
    v9 = 0;
  if (v9)
  {
    v10 = swift_getObjectType();
    v11 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 48);
    v12 = v2;
    v13 = v6;
    v5 = (char *)v11(v10, v8);

    v3 = 0;
    goto LABEL_13;
  }
  return v9;
}

void (*CanvasElementViewController<>.imageDescription.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[2] = v1;
  *a1 = CanvasElementViewController<>.imageDescription.getter();
  a1[1] = v3;
  return CanvasElementViewController<>.imageDescription.modify;
}

void CanvasElementViewController<>.imageDescription.modify(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  v2 = a1[1];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    CanvasElementViewController<>.imageDescription.setter(v3, v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    CanvasElementViewController<>.imageDescription.setter(*a1, v2);
  }
}

uint64_t CanvasElementViewController<>.alwaysUseMaxResolutionImage.getter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  char v3;

  v1 = (_QWORD *)(v0 + direct field offset for CanvasElementViewController.canvasView);
  v2 = swift_beginAccess();
  if (*v1)
    v3 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(*v1
                                                                                  + direct field offset for Canvas.paperView))
                                            + 0x5C8))(v2);
  else
    v3 = 0;
  return v3 & 1;
}

uint64_t key path getter for CanvasElementViewController<>.alwaysUseMaxResolutionImage : CanvasElementViewController<Image>@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  v3 = (_QWORD *)(*a1 + direct field offset for CanvasElementViewController.canvasView);
  v4 = swift_beginAccess();
  if (*v3)
    result = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(*v3
                                                                                      + direct field offset for Canvas.paperView))
                                                + 0x5C8))(v4);
  else
    result = 0;
  *a2 = result & 1;
  return result;
}

void key path setter for CanvasElementViewController<>.alwaysUseMaxResolutionImage : CanvasElementViewController<Image>(unsigned __int8 *a1, _QWORD *a2)
{
  uint64_t v2;
  void **v3;
  char *v4;
  _QWORD *v5;
  void (*v6)(uint64_t);
  char *v7;
  _QWORD *v8;

  v2 = *a1;
  v3 = (void **)(*a2 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  v4 = (char *)*v3;
  if (*v3)
  {
    v5 = *(_QWORD **)&v4[direct field offset for Canvas.paperView];
    v6 = *(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x5D0);
    v7 = v4;
    v8 = v5;
    v6(v2);

  }
}

void CanvasElementViewController<>.alwaysUseMaxResolutionImage.setter(char a1)
{
  uint64_t v1;
  void **v3;
  char *v4;
  _QWORD *v5;
  void (*v6)(_QWORD);
  char *v7;
  _QWORD *v8;

  v3 = (void **)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  v4 = (char *)*v3;
  if (*v3)
  {
    v5 = *(_QWORD **)&v4[direct field offset for Canvas.paperView];
    v6 = *(void (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x5D0);
    v7 = v4;
    v8 = v5;
    v6(a1 & 1);

  }
}

void (*CanvasElementViewController<>.alwaysUseMaxResolutionImage.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  char *v3;
  _BYTE *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;

  v3 = (char *)malloc(0x30uLL);
  *a1 = v3;
  v4 = v3 + 40;
  v5 = direct field offset for CanvasElementViewController.canvasView;
  *((_QWORD *)v3 + 3) = v1;
  *((_QWORD *)v3 + 4) = v5;
  v6 = (_QWORD *)(v1 + v5);
  v7 = swift_beginAccess();
  if (*v6)
    v8 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(*v6
                                                                                  + direct field offset for Canvas.paperView))
                                            + 0x5C8))(v7);
  else
    v8 = 0;
  *v4 = v8 & 1;
  return CanvasElementViewController<>.alwaysUseMaxResolutionImage.modify;
}

void CanvasElementViewController<>.alwaysUseMaxResolutionImage.modify(uint64_t a1)
{
  void *v1;
  char *v2;
  uint64_t v3;
  _QWORD *v4;
  void (*v5)(uint64_t);
  char *v6;
  _QWORD *v7;

  v1 = *(void **)a1;
  v2 = *(char **)(*(_QWORD *)(*(_QWORD *)a1 + 24) + *(_QWORD *)(*(_QWORD *)a1 + 32));
  if (v2)
  {
    v3 = *(unsigned __int8 *)(*(_QWORD *)a1 + 40);
    v4 = *(_QWORD **)&v2[direct field offset for Canvas.paperView];
    v5 = *(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x5D0);
    v6 = v2;
    v7 = v4;
    v5(v3);

  }
  free(v1);
}

id specialized CanvasElementViewController.init(context:editingMode:allowMediaCanvasElements:transparentBackground:isImageAnalysisEnabled:delegate:)(void *a1, char *a2, char a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  objc_class *v22;
  objc_super v27;

  v10 = (_QWORD *)(*MEMORY[0x1E0DEEDD8] & *v7);
  v11 = *a2;
  *(_QWORD *)((char *)v7 + direct field offset for CanvasElementViewController.canvasView) = 0;
  v12 = (_QWORD *)((char *)v7 + direct field offset for CanvasElementViewController.liveStreamMessenger);
  *v12 = 0;
  v12[1] = 0;
  *(_QWORD *)((char *)v7 + direct field offset for CanvasElementViewController.participantDetailsDataSource + 8) = 0;
  swift_unknownObjectWeakInit();
  *((_BYTE *)v7 + direct field offset for CanvasElementViewController.showParticipantCursors) = 0;
  *(_QWORD *)((char *)v7 + direct field offset for CanvasElementViewController.mediaAnalysisObserver) = 0;
  *(_QWORD *)((char *)v7 + direct field offset for CanvasElementViewController.canvasSubscribeCancellable) = 0;
  v13 = direct field offset for CanvasElementViewController.passThroughSubject;
  v14 = v10[15];
  v15 = v10[16];
  type metadata accessor for Capsule();
  type metadata accessor for PassthroughSubject();
  v16 = v7;
  *(_QWORD *)((char *)v7 + v13) = PassthroughSubject.__allocating_init()();
  *(_QWORD *)((char *)v16 + direct field offset for CanvasElementViewController.image) = 0;
  *((_BYTE *)v16 + direct field offset for CanvasElementViewController.liveStreamDrawings) = 0;
  *((_BYTE *)v16 + direct field offset for CanvasElementViewController.isSixChannelBlendingEnabled) = 0;
  *((_BYTE *)v16 + direct field offset for CanvasElementViewController.canEditVellumOpacity) = 0;
  v17 = (char *)v16 + direct field offset for CanvasElementViewController.isImageAnalysisEnabled;
  *((_BYTE *)v16 + direct field offset for CanvasElementViewController.isImageAnalysisEnabled) = 1;
  *((_BYTE *)v16 + direct field offset for CanvasElementViewController.canEditDescription) = 1;
  v18 = direct field offset for CanvasElementViewController.plusButton;
  type metadata accessor for FormPlusButtonView();
  *(_QWORD *)((char *)v16 + v18) = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  *(_QWORD *)((char *)v16 + direct field offset for CanvasElementViewController.bannerViewConfiguration) = 0;
  v19 = direct field offset for CanvasElementViewController.bannerView;
  *(_QWORD *)((char *)v16 + v19) = objc_msgSend(objc_allocWithZone((Class)PPKQuickLookBannerView), sel_init);
  *(_QWORD *)((char *)v16 + direct field offset for CanvasElementViewController._rulerHostingDelegate) = 0;
  *(_QWORD *)((char *)v16 + direct field offset for CanvasElementViewController.rulerHostView) = 0;
  v20 = (char *)v16 + direct field offset for CanvasElementViewController.formDelegate;
  *(_QWORD *)((char *)v16 + direct field offset for CanvasElementViewController.formDelegate + 8) = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)((char *)v16 + direct field offset for CanvasElementViewController.analysis) = 0;
  *((_BYTE *)v16 + direct field offset for CanvasElementViewController.allowMediaCanvasElements) = a3;
  *(_QWORD *)((char *)v16 + direct field offset for CanvasElementViewController.context) = a1;
  *((_BYTE *)v16 + direct field offset for CanvasElementViewController.transparentBackground) = a4;
  *((_BYTE *)v16 + direct field offset for CanvasElementViewController.editingMode) = v11;
  swift_beginAccess();
  *((_QWORD *)v20 + 1) = a7;
  swift_unknownObjectWeakAssign();
  swift_beginAccess();
  *v17 = a5;
  v21 = a1;

  v22 = (objc_class *)type metadata accessor for CanvasElementViewController(0, v14, v15, v10[17]);
  v27.receiver = v16;
  v27.super_class = v22;
  return objc_msgSendSuper2(&v27, sel_initWithNibName_bundle_, 0, 0);
}

id specialized CanvasElementViewController.__allocating_init(context:editingMode:allowMediaCanvasElements:transparentBackground:isImageAnalysisEnabled:delegate:)(void *a1, char *a2, char a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t *v7;
  id v15;

  v15 = objc_allocWithZone((Class)type metadata accessor for CanvasElementViewController(0, v7[15], v7[16], v7[17]));
  return specialized CanvasElementViewController.init(context:editingMode:allowMediaCanvasElements:transparentBackground:isImageAnalysisEnabled:delegate:)(a1, a2, a3, a4, a5, a6, a7);
}

id specialized CanvasElementViewController.__allocating_init(context:editingMode:allowMediaCanvasElements:transparentBackground:)(void *a1, char *a2, char a3, char a4)
{
  char v5;

  v5 = *a2;
  return specialized CanvasElementViewController.__allocating_init(context:editingMode:allowMediaCanvasElements:transparentBackground:isImageAnalysisEnabled:delegate:)(a1, &v5, a3, a4, 1, 0, 0);
}

uint64_t specialized CanvasElementViewController.canvasView.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + direct field offset for CanvasElementViewController.canvasView;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

void specialized CanvasElementViewController.canvasView.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  id v5;

  v3 = (void **)(v1 + direct field offset for CanvasElementViewController.canvasView);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;
  v5 = a1;

  CanvasElementViewController.updateToolPickerVisibility()();
  CanvasElementViewController.updateActionInfoViewVisibility()();
}

uint64_t specialized CanvasElementViewController.liveStreamMessenger.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + direct field offset for CanvasElementViewController.liveStreamMessenger;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t specialized CanvasElementViewController.MediaAnalysisObserver.__allocating_init(viewController:)()
{
  uint64_t *v0;
  uint64_t v1;

  type metadata accessor for CanvasElementViewController.MediaAnalysisObserver(0, v0[10], v0[11], v0[12]);
  v1 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  return v1;
}

uint64_t specialized CanvasElementViewController.liveStreamMessenger.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + direct field offset for CanvasElementViewController.liveStreamMessenger);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return CanvasElementViewController.liveStreamMessenger.didset();
}

uint64_t specialized CanvasElementViewController.participantDetailsDataSource.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + direct field offset for CanvasElementViewController.participantDetailsDataSource;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return CanvasElementViewController.participantDetailsDataSource.didset();
}

uint64_t specialized CanvasElementViewController.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v5 = v2 + OBJC_IVAR____TtC8PaperKit30AnyCanvasElementViewController_delegate;
  swift_beginAccess();
  *(_QWORD *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign();
  v6 = (_QWORD *)(v2 + direct field offset for CanvasElementViewController.canvasView);
  result = swift_beginAccess();
  if (*v6)
  {
    if (a1)
      v8 = *(_QWORD *)(a2 + 8);
    else
      v8 = 0;
    v9 = *v6 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate;
    swift_beginAccess();
    *(_QWORD *)(v9 + 8) = v8;
    return swift_unknownObjectWeakAssign();
  }
  return result;
}

uint64_t specialized CanvasElementViewController.image.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + direct field offset for CanvasElementViewController.image;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t type metadata accessor for CanvasElementViewController(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CanvasElementViewController);
}

void specialized CanvasElementViewController.init(coder:)()
{
  char *v0;
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  *(_QWORD *)&v0[direct field offset for CanvasElementViewController.canvasView] = 0;
  v2 = &v0[direct field offset for CanvasElementViewController.liveStreamMessenger];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  *(_QWORD *)&v0[direct field offset for CanvasElementViewController.participantDetailsDataSource + 8] = 0;
  swift_unknownObjectWeakInit();
  v0[direct field offset for CanvasElementViewController.showParticipantCursors] = 0;
  *(_QWORD *)&v0[direct field offset for CanvasElementViewController.mediaAnalysisObserver] = 0;
  *(_QWORD *)&v0[direct field offset for CanvasElementViewController.canvasSubscribeCancellable] = 0;
  v3 = direct field offset for CanvasElementViewController.passThroughSubject;
  type metadata accessor for Capsule();
  type metadata accessor for PassthroughSubject();
  *(_QWORD *)&v0[v3] = PassthroughSubject.__allocating_init()();
  *(_QWORD *)&v0[direct field offset for CanvasElementViewController.image] = 0;
  v0[direct field offset for CanvasElementViewController.liveStreamDrawings] = 0;
  v0[direct field offset for CanvasElementViewController.isSixChannelBlendingEnabled] = 0;
  v0[direct field offset for CanvasElementViewController.canEditVellumOpacity] = 0;
  v0[direct field offset for CanvasElementViewController.isImageAnalysisEnabled] = 1;
  v0[direct field offset for CanvasElementViewController.canEditDescription] = 1;
  v4 = direct field offset for CanvasElementViewController.plusButton;
  type metadata accessor for FormPlusButtonView();
  *(_QWORD *)&v1[v4] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  *(_QWORD *)&v1[direct field offset for CanvasElementViewController.bannerViewConfiguration] = 0;
  v5 = direct field offset for CanvasElementViewController.bannerView;
  *(_QWORD *)&v1[v5] = objc_msgSend(objc_allocWithZone((Class)PPKQuickLookBannerView), sel_init);
  *(_QWORD *)&v1[direct field offset for CanvasElementViewController._rulerHostingDelegate] = 0;
  *(_QWORD *)&v1[direct field offset for CanvasElementViewController.rulerHostView] = 0;
  *(_QWORD *)&v1[direct field offset for CanvasElementViewController.formDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v1[direct field offset for CanvasElementViewController.analysis] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized CanvasElementViewController.scrollView.getter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t result;

  v1 = (_QWORD *)(v0 + direct field offset for CanvasElementViewController.canvasView);
  result = swift_beginAccess();
  if (!*v1)
  {
    __break(1u);
    goto LABEL_5;
  }
  result = *(_QWORD *)(*v1 + direct field offset for CanvasView.canvasScrollView);
  if (!result)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t specialized CanvasElementViewController.rulerHostView.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + direct field offset for CanvasElementViewController.rulerHostView;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t specialized CanvasElementViewController.formDelegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + direct field offset for CanvasElementViewController.formDelegate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  return swift_unknownObjectWeakAssign();
}

void specialized CanvasElementViewController.init(nibName:bundle:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id sub_1DDD9C11C@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  v2 = (void *)specialized CanvasElementViewController.canvasView.getter();
  *a1 = v2;
  return v2;
}

void sub_1DDD9C144(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  specialized CanvasElementViewController.canvasView.setter(v1);

}

uint64_t sub_1DDD9C180()
{
  return 24;
}

__n128 sub_1DDD9C18C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDD9C1A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = specialized CanvasElementViewController.liveStreamMessenger.getter();
  a1[1] = v2;
  return swift_unknownObjectRetain();
}

uint64_t sub_1DDD9C1C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PaperDocumentViewController.delegate : PaperDocumentViewController(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))specialized CanvasElementViewController.liveStreamMessenger.setter);
}

uint64_t sub_1DDD9C1E4()
{
  return 24;
}

__n128 sub_1DDD9C1F0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDD9C204@<X0>(uint64_t *a1@<X8>)
{
  return keypath_get_7Tm(CanvasElementViewController.participantDetailsDataSource.getter, a1);
}

uint64_t sub_1DDD9C210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PaperDocumentViewController.delegate : PaperDocumentViewController(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t))specialized CanvasElementViewController.participantDetailsDataSource.setter);
}

uint64_t sub_1DDD9C22C()
{
  return 24;
}

__n128 sub_1DDD9C238(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDD9C24C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CanvasElementViewController.showParticipantCursors.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1DDD9C278(char *a1)
{
  return CanvasElementViewController.showParticipantCursors.setter(*a1);
}

uint64_t sub_1DDD9C29C()
{
  return 24;
}

__n128 sub_1DDD9C2A8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDD9C2BC@<X0>(_BYTE *a1@<X8>)
{
  return CanvasElementViewController.editingMode.getter(a1);
}

void sub_1DDD9C2DC(unsigned __int8 *a1)
{
  unsigned __int8 v1;

  v1 = *a1;
  CanvasElementViewController.editingMode.setter(&v1);
}

uint64_t sub_1DDD9C310()
{
  return 24;
}

__n128 sub_1DDD9C31C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

id sub_1DDD9C330@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = CanvasElementViewController.drawingPolicy.getter();
  *a1 = result;
  return result;
}

void sub_1DDD9C358(uint64_t *a1)
{
  CanvasElementViewController.drawingPolicy.setter(*a1);
}

uint64_t sub_1DDD9C37C()
{
  return 24;
}

__n128 sub_1DDD9C388(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

id sub_1DDD9C39C@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  v2 = (void *)specialized CanvasElementViewController.image.getter();
  *a1 = v2;
  return v2;
}

void sub_1DDD9C3C4(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  CanvasElementViewController.image.setter(v1);
}

uint64_t sub_1DDD9C3F0()
{
  return 24;
}

__n128 sub_1DDD9C3FC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDD9C410@<X0>(uint64_t *a1@<X8>)
{
  return CanvasElementViewController.tool.getter(a1);
}

uint64_t sub_1DDD9C430(uint64_t a1)
{
  _BYTE v2[40];

  outlined init with copy of FindResult(a1, (uint64_t)v2);
  return CanvasElementViewController.tool.setter((uint64_t)v2);
}

uint64_t sub_1DDD9C468()
{
  return 24;
}

__n128 sub_1DDD9C474(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDD9C488@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CanvasElementViewController.liveStreamDrawings.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1DDD9C4B4(char *a1)
{
  return CanvasElementViewController.liveStreamDrawings.setter(*a1);
}

uint64_t sub_1DDD9C4D8()
{
  return 24;
}

__n128 sub_1DDD9C4E4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDD9C4F8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CanvasElementViewController.isSixChannelBlendingEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1DDD9C524(char *a1)
{
  return CanvasElementViewController.isSixChannelBlendingEnabled.setter(*a1);
}

uint64_t sub_1DDD9C548()
{
  return 24;
}

__n128 sub_1DDD9C554(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDD9C568@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CanvasElementViewController.canEditVellumOpacity.getter();
  *a1 = result & 1;
  return result;
}

void sub_1DDD9C594(char *a1)
{
  CanvasElementViewController.canEditVellumOpacity.setter(*a1);
}

uint64_t sub_1DDD9C5B8()
{
  return 24;
}

__n128 sub_1DDD9C5C4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDD9C5D8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CanvasElementViewController.isImageAnalysisEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1DDD9C604(char *a1)
{
  return CanvasElementViewController.isImageAnalysisEnabled.setter(*a1);
}

uint64_t sub_1DDD9C628()
{
  return 24;
}

__n128 sub_1DDD9C634(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDD9C648@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CanvasElementViewController.canEditDescription.getter();
  *a1 = result & 1;
  return result;
}

void sub_1DDD9C674(char *a1)
{
  CanvasElementViewController.canEditDescription.setter(*a1);
}

uint64_t sub_1DDD9C698()
{
  return 24;
}

__n128 sub_1DDD9C6A4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDD9C6B8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = CanvasElementViewController.shouldDeselectElementsWhenToolPickerIsHidden.getter();
  *a1 = result & 1;
  return result;
}

void sub_1DDD9C6E4(char *a1)
{
  CanvasElementViewController.shouldDeselectElementsWhenToolPickerIsHidden.setter(*a1);
}

uint64_t sub_1DDD9C708()
{
  return 24;
}

__n128 sub_1DDD9C714(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDD9C728()
{
  return CanvasElementViewController.rootElement.getter();
}

uint64_t sub_1DDD9C748()
{
  return specialized CanvasElementViewController.rootElement.setter();
}

uint64_t sub_1DDD9C768()
{
  return 24;
}

__n128 sub_1DDD9C774(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDD9C788()
{
  return 24;
}

__n128 sub_1DDD9C794(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

id sub_1DDD9C7A8@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  v2 = (void *)specialized CanvasElementViewController.rulerHostView.getter();
  *a1 = v2;
  return v2;
}

void sub_1DDD9C7D0(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  CanvasElementViewController.rulerHostView.setter(v1);
}

uint64_t sub_1DDD9C7FC()
{
  return 24;
}

__n128 sub_1DDD9C808(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDD9C81C@<X0>(uint64_t *a1@<X8>)
{
  return keypath_get_7Tm(CanvasElementViewController.formDelegate.getter, a1);
}

uint64_t keypath_get_7Tm@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = a1();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1DDD9C850(uint64_t *a1)
{
  return specialized CanvasElementViewController.formDelegate.setter(*a1, a1[1]);
}

uint64_t sub_1DDD9C87C()
{
  return 24;
}

__n128 sub_1DDD9C888(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1DDD9C89C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(*a1 + direct field offset for Canvas.paperView))
                                + 0x5C8))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1DDD9C8F4()
{
  return 0;
}

uint64_t sub_1DDD9C904@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CanvasElementViewController<>.imageDescription.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_1DDD9C92C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  CanvasElementViewController<>.imageDescription.setter(v1, v2);
}

uint64_t sub_1DDD9C968()
{
  return 0;
}

uint64_t sub_1DDD9C980()
{
  return 0;
}

uint64_t type metadata completion function for CanvasElementViewController()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for CanvasElementViewController()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CanvasElementViewController.canvasView.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CanvasElementViewController.liveStreamMessenger.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CanvasElementViewController.liveStreamMessenger.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CanvasElementViewController.liveStreamMessenger.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CanvasElementViewController.participantDetailsDataSource.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CanvasElementViewController.participantDetailsDataSource.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CanvasElementViewController.participantDetailsDataSource.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x190))();
}

uint64_t dispatch thunk of CanvasElementViewController.showParticipantCursors.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x198))();
}

uint64_t dispatch thunk of CanvasElementViewController.showParticipantCursors.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CanvasElementViewController.showParticipantCursors.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CanvasElementViewController.enableToolPickerTapInteraction()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of CanvasElementViewController.editingMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of CanvasElementViewController.editingMode.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of CanvasElementViewController.editingMode.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of CanvasElementViewController.drawingGestureRecognizer.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of CanvasElementViewController.drawingPolicy.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of CanvasElementViewController.drawingPolicy.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x200))();
}

uint64_t dispatch thunk of CanvasElementViewController.drawingPolicy.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x208))();
}

uint64_t dispatch thunk of CanvasElementViewController.image.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x228))();
}

uint64_t dispatch thunk of CanvasElementViewController.image.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x230))();
}

uint64_t dispatch thunk of CanvasElementViewController.image.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x238))();
}

uint64_t dispatch thunk of CanvasElementViewController.tool.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x250))();
}

uint64_t dispatch thunk of CanvasElementViewController.tool.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x258))();
}

uint64_t dispatch thunk of CanvasElementViewController.tool.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x260))();
}

uint64_t dispatch thunk of CanvasElementViewController.liveStreamDrawings.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x268))();
}

uint64_t dispatch thunk of CanvasElementViewController.liveStreamDrawings.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x270))();
}

uint64_t dispatch thunk of CanvasElementViewController.liveStreamDrawings.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x278))();
}

uint64_t dispatch thunk of CanvasElementViewController.scrollView.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x280))();
}

uint64_t dispatch thunk of CanvasElementViewController.isSixChannelBlendingEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x288))();
}

uint64_t dispatch thunk of CanvasElementViewController.isSixChannelBlendingEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x290))();
}

uint64_t dispatch thunk of CanvasElementViewController.isSixChannelBlendingEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x298))();
}

uint64_t dispatch thunk of CanvasElementViewController.canEditVellumOpacity.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A0))();
}

uint64_t dispatch thunk of CanvasElementViewController.canEditVellumOpacity.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of CanvasElementViewController.canEditVellumOpacity.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of CanvasElementViewController.isImageAnalysisEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of CanvasElementViewController.isImageAnalysisEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of CanvasElementViewController.isImageAnalysisEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of CanvasElementViewController.canEditDescription.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of CanvasElementViewController.canEditDescription.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2E0))();
}

uint64_t dispatch thunk of CanvasElementViewController.canEditDescription.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of CanvasElementViewController.shouldDeselectElementsWhenToolPickerIsHidden.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2F0))();
}

uint64_t dispatch thunk of CanvasElementViewController.shouldDeselectElementsWhenToolPickerIsHidden.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2F8))();
}

uint64_t dispatch thunk of CanvasElementViewController.shouldDeselectElementsWhenToolPickerIsHidden.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x300))();
}

uint64_t dispatch thunk of CanvasElementViewController.rootElement.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x340))();
}

uint64_t dispatch thunk of CanvasElementViewController.rootElement.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x348))();
}

uint64_t dispatch thunk of CanvasElementViewController.rootElement.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x350))();
}

uint64_t dispatch thunk of CanvasElementViewController.paper.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x358))();
}

uint64_t dispatch thunk of CanvasElementViewController.paper.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x360))();
}

uint64_t dispatch thunk of CanvasElementViewController.paper.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x368))();
}

uint64_t dispatch thunk of CanvasElementViewController.merge<A>(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x370))();
}

uint64_t dispatch thunk of CanvasElementViewController.publisher.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x378))();
}

uint64_t dispatch thunk of CanvasElementViewController.rulerHostView.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3D0))();
}

uint64_t dispatch thunk of CanvasElementViewController.rulerHostView.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3D8))();
}

uint64_t dispatch thunk of CanvasElementViewController.rulerHostView.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3E0))();
}

uint64_t dispatch thunk of CanvasElementViewController.formDelegate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3E8))();
}

uint64_t dispatch thunk of CanvasElementViewController.formDelegate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3F0))();
}

uint64_t dispatch thunk of CanvasElementViewController.formDelegate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3F8))();
}

uint64_t dispatch thunk of CanvasElementViewController.toolPickerSelectedToolDidChange(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x428))();
}

uint64_t dispatch thunk of CanvasElementViewController.toolPickerSelectedToolItemDidChange(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x430))();
}

uint64_t dispatch thunk of CanvasElementViewController.toolPickerIsRulerActiveDidChange(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x438))();
}

uint64_t type metadata completion function for CanvasElementViewController.MediaAnalysisObserver()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for CanvasElementViewController.MediaAnalysisObserver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CanvasElementViewController.MediaAnalysisObserver);
}

uint64_t dispatch thunk of QLCanvasElementViewControllerDelegate.canvasElement(_:detectedFormInContent:withAutofill:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of QLCanvasElementViewControllerDelegate.canvasElement(_:openFormFilling:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of QLCanvasElementViewControllerDelegate.canvasElement(_:contentFrameDidChange:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t sub_1DDD9D134()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1DDD9D158()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in CanvasElementViewController.updatePlusButton()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in CanvasElementViewController.updatePlusButton()(a1, *(_QWORD *)(v1 + 40));
}

uint64_t partial apply for closure #2 in CanvasElementViewController.updatePlusButton()(uint64_t a1)
{
  uint64_t *v1;

  return closure #2 in CanvasElementViewController.updatePlusButton()(a1, v1[5], v1[2], v1[3], v1[4]);
}

void partial apply for closure #1 in closure #2 in CanvasElementViewController.updatePlusButton()(void *a1)
{
  uint64_t v1;

  closure #1 in closure #2 in CanvasElementViewController.updatePlusButton()(a1, *(_QWORD *)(v1 + 40));
}

void CanvasElementResizeViewMoreButton.init()()
{
  char *v0;
  char *v1;
  void *v2;
  id v3;
  uint64_t v4;
  id v5;
  double v6;
  char *v7;
  uint64_t v8;
  void *v9;
  char *v10;
  id v11;
  id v12;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double MidX;
  id v18;
  char *v19;
  void *v20;
  void *v21;
  id v22;
  objc_super v23;
  CGRect v24;
  CGRect v25;

  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit33CanvasElementResizeViewMoreButton_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v1 = v0;
  v2 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000014, 0x80000001DDF57FA0);
  v3 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v2);

  if (v3)
  {
    v4 = OBJC_IVAR____TtC8PaperKit33CanvasElementResizeViewMoreButton_imageView;
    v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_initWithImage_, v3);

    *(_QWORD *)&v1[v4] = v5;
    if (one-time initialization token for resizeMoreButtonSize != -1)
      swift_once();
    v6 = *(double *)&static UIConstants.resizeMoreButtonSize;
    v23.receiver = v1;
    v23.super_class = (Class)type metadata accessor for CanvasElementResizeViewMoreButton();
    v7 = (char *)objc_msgSendSuper2(&v23, sel_initWithFrame_, 0.0, 0.0, v6, v6);
    v8 = OBJC_IVAR____TtC8PaperKit33CanvasElementResizeViewMoreButton_imageView;
    v9 = *(void **)&v7[OBJC_IVAR____TtC8PaperKit33CanvasElementResizeViewMoreButton_imageView];
    v10 = v7;
    v11 = v9;
    objc_msgSend(v10, sel_bounds);
    objc_msgSend(v11, sel_setFrame_);

    v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_initWithFrame_, 0.0, 0.0, 12.0, 12.0);
    objc_msgSend(v10, sel_frame);
    x = v24.origin.x;
    y = v24.origin.y;
    width = v24.size.width;
    height = v24.size.height;
    MidX = CGRectGetMidX(v24);
    v25.origin.x = x;
    v25.origin.y = y;
    v25.size.width = width;
    v25.size.height = height;
    objc_msgSend(v12, sel_setCenter_, MidX, CGRectGetMidY(v25));
    v18 = objc_msgSend((id)objc_opt_self(), sel_systemBackgroundColor);
    objc_msgSend(v12, sel_setBackgroundColor_, v18);

    objc_msgSend(v10, sel_addSubview_, v12);
    objc_msgSend(v10, sel_addSubview_, *(_QWORD *)&v7[v8]);
    objc_msgSend(v10, sel_setIsAccessibilityElement_, 1);
    objc_msgSend(v10, sel_setAccessibilityTraits_, *MEMORY[0x1E0DC4660]);
    v19 = v10;
    v20 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000031, 0x80000001DDF58000);
    objc_msgSend(v19, sel_setAccessibilityIdentifier_, v20);

    v21 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000011, 0x80000001DDF58040);
    objc_msgSend(v19, sel_setAccessibilityLabel_, v21);

    objc_msgSend(v19, sel_setContextMenuInteractionEnabled_, 1);
    objc_msgSend(v19, sel_setShowsMenuAsPrimaryAction_, 1);
    v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3B18]), sel_initWithDelegate_, v19);
    objc_msgSend(v19, sel_addInteraction_, v22);

  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall CanvasElementResizeViewMoreButton.didMoveToWindow()()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  id v5;

  v1 = objc_msgSend(v0, sel_window);
  if (v1)
  {
    v2 = *(void **)&v0[OBJC_IVAR____TtC8PaperKit33CanvasElementResizeViewMoreButton_imageView];
    v3 = v1;
    v4 = objc_msgSend(v3, sel_tintColor);
    if (!v4)
    {
      if (one-time initialization token for resizeHandleColor != -1)
        swift_once();
      v4 = (id)static UIConstants.resizeHandleColor;
    }
    v5 = v4;

    objc_msgSend(v2, sel_setTintColor_, v5);
  }
}

id CanvasElementResizeViewMoreButton.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CanvasElementResizeViewMoreButton();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CanvasElementResizeViewMoreButton()
{
  return objc_opt_self();
}

void specialized CanvasElementResizeViewMoreButton.init(coder:)()
{
  char *v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;

  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit33CanvasElementResizeViewMoreButton_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v1 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000014, 0x80000001DDF57FA0);
  v2 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v1);

  if (!v2)
    __break(1u);
  v3 = OBJC_IVAR____TtC8PaperKit33CanvasElementResizeViewMoreButton_imageView;
  v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3890]), sel_initWithImage_, v2);

  *(_QWORD *)&v0[v3] = v4;
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized CanvasElementResizeViewMoreButton.pointerInteraction(_:styleFor:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v19;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UIPointerShape?);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UIPointerEffect();
  v7 = *(_QWORD *)(v6 - 8);
  v9 = MEMORY[0x1E0C80A78](v6, v8);
  v11 = (uint64_t *)((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = objc_msgSend(a1, sel_view, v9);
  if (!v12)
    return 0;
  v13 = v12;
  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3D90]), sel_initWithView_, v12);
  type metadata accessor for UIPointerStyle();
  *v11 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v11, *MEMORY[0x1E0DC1E30], v6);
  v15 = type metadata accessor for UIPointerShape();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v5, 1, 1, v15);
  v16 = v14;
  v17 = UIPointerStyle.init(effect:shape:)();

  return v17;
}

unint64_t type metadata accessor for UIPointerStyle()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UIPointerStyle;
  if (!lazy cache variable for type metadata for UIPointerStyle)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIPointerStyle);
  }
  return result;
}

id PPKPDFThumbnailView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PPKPDFThumbnailView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for PPKPDFThumbnailView()
{
  return objc_opt_self();
}

uint64_t specialized Sequence.allSatisfy(_:)(uint64_t (*a1)(char *), char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  int64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t (*v30)(char *);
  uint64_t v31;

  v30 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v27 - v13;
  v15 = *(_QWORD *)(a3 + 56);
  v28 = a3 + 56;
  v16 = 1 << *(_BYTE *)(a3 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v29 = (unint64_t)(v16 + 63) >> 6;
  v31 = a3;
  result = swift_bridgeObjectRetain();
  v20 = 0;
  while (v18)
  {
    v21 = __clz(__rbit64(v18));
    v18 &= v18 - 1;
    v22 = v21 | (v20 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v14, *(_QWORD *)(v31 + 48) + *(_QWORD *)(v7 + 72) * v22, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v14, v6);
    v26 = v30(v10);
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if (v3)
      goto LABEL_28;
    if ((v26 & 1) == 0)
    {
      a2 = 0;
LABEL_28:
      swift_release();
      return a2 & 1;
    }
  }
  if (__OFADD__(v20++, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v20 >= v29)
    goto LABEL_27;
  v24 = *(_QWORD *)(v28 + 8 * v20);
  if (v24)
  {
LABEL_18:
    v18 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v20 << 6);
    goto LABEL_19;
  }
  v25 = v20 + 1;
  if (v20 + 1 >= v29)
    goto LABEL_27;
  v24 = *(_QWORD *)(v28 + 8 * v25);
  if (v24)
    goto LABEL_17;
  v25 = v20 + 2;
  if (v20 + 2 >= v29)
    goto LABEL_27;
  v24 = *(_QWORD *)(v28 + 8 * v25);
  if (v24)
    goto LABEL_17;
  v25 = v20 + 3;
  if (v20 + 3 >= v29)
    goto LABEL_27;
  v24 = *(_QWORD *)(v28 + 8 * v25);
  if (v24)
    goto LABEL_17;
  v25 = v20 + 4;
  if (v20 + 4 >= v29)
  {
LABEL_27:
    a2 = 1;
    goto LABEL_28;
  }
  v24 = *(_QWORD *)(v28 + 8 * v25);
  if (v24)
  {
LABEL_17:
    v20 = v25;
    goto LABEL_18;
  }
  while (1)
  {
    v20 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v20 >= v29)
      goto LABEL_27;
    v24 = *(_QWORD *)(v28 + 8 * v20);
    ++v25;
    if (v24)
      goto LABEL_18;
  }
LABEL_30:
  __break(1u);
  return result;
}

BOOL closure #1 in CanvasFormattingProxy.supportsFillColor.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;

  v44 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v40 = *(_QWORD *)(v6 - 8);
  v41 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v39 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a4 + 16);
  v45 = a3;
  v43 = v9;
  v42 = type metadata accessor for Capsule();
  v10 = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42, v11);
  v13 = (char *)&v37 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Shape();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v24);
  v37 = (uint64_t)&v37 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v38 = (uint64_t)&v37 - v28;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  WeakTagged_9.tagged6.getter();
  v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v17, 1, v29) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for WeakRef<Shape>?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v21, 1, 1, v22);
LABEL_4:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for Shape?);
    return 0;
  }
  Canvas.updatablePaper2.getter((uint64_t)v13);
  WeakRef.subscript.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v42);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
    goto LABEL_4;
  v32 = v38;
  outlined init with take of PKStrokeStruct((uint64_t)v21, v38, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  v33 = v39;
  CRRegister.wrappedValue.getter();
  v34 = v41;
  TaggedValue_9.tagged3.getter();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v33, v34);
  LODWORD(v34) = v47;
  v35 = v37;
  outlined init with copy of PKStrokeProperties(v32, v37, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  if ((_DWORD)v34 == 1)
  {
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
    CRRegister.wrappedValue.getter();
    v31 = v46 == 0;
    outlined destroy of PKStrokeProperties(v35, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  }
  else
  {
    outlined destroy of PKStrokeProperties(v35, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    v31 = 0;
  }
  outlined destroy of PKStrokeProperties(v32, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  return v31;
}

uint64_t CanvasFormattingProxy.supportsStrokeColor.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  char v7;
  char v8;
  _OWORD v10[2];
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 16);
  if (*(_QWORD *)(v3 + 16) | v4)
  {
    v5 = v4 != 0;
    MEMORY[0x1E0C80A78](a1, a2);
    v10[1] = *(_OWORD *)(v6 + 16);
    v11 = *(_QWORD *)(v6 + 32);
    v12 = v2;
    swift_bridgeObjectRetain();
    v7 = specialized Sequence.allSatisfy(_:)((uint64_t (*)(char *))partial apply for closure #1 in CanvasFormattingProxy.supportsStrokeColor.getter, (char)v10, v3);
    swift_bridgeObjectRelease();
    v8 = v5 | v7;
  }
  else
  {
    v8 = 0;
  }
  return v8 & 1;
}

uint64_t closure #1 in CanvasFormattingProxy.supportsStrokeColor.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v37;
  _QWORD v38[4];
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v38[2] = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Signature>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v39 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v40 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a4 + 16);
  v38[3] = a3;
  v38[1] = v14;
  v38[0] = type metadata accessor for Capsule();
  v15 = *(_QWORD *)(v38[0] - 8);
  MEMORY[0x1E0C80A78](v38[0], v16);
  v18 = (char *)v38 - v17;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)v38 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = a1;
  WeakTagged_9.tagged6.getter();
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v22, 1, v27) == 1)
  {
    v29 = &demangling cache variable for type metadata for WeakRef<Shape>?;
    v30 = (uint64_t)v22;
LABEL_5:
    outlined destroy of StocksKitCurrencyCache.Provider?(v30, v29);
    v32 = v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v13, v41, v10);
    goto LABEL_6;
  }
  Canvas.updatablePaper2.getter((uint64_t)v18);
  WeakRef.subscript.getter();
  (*(void (**)(char *, _QWORD))(v15 + 8))(v18, v38[0]);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v22, v27);
  v31 = type metadata accessor for Shape();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v26, 1, v31) == 1)
  {
    v29 = &demangling cache variable for type metadata for Shape?;
    v30 = (uint64_t)v26;
    goto LABEL_5;
  }
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  CRRegister.wrappedValue.getter();
  v37 = v42;
  outlined destroy of PKStrokeProperties((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  v32 = v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v13, v41, v10);
  if (!v37)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v10);
    return 1;
  }
LABEL_6:
  v33 = (uint64_t)v39;
  WeakTagged_9.tagged7.getter();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v13, v10);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Signature>);
  v35 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v33, 1, v34) != 1;
  outlined destroy of StocksKitCurrencyCache.Provider?(v33, &demangling cache variable for type metadata for WeakRef<Signature>?);
  return v35;
}

uint64_t closure #1 in CanvasFormattingProxy.supportsTextStyle.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;

  v40 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v35 = *(_QWORD *)(v6 - 8);
  v36 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v34 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a4 + 16);
  v41 = a3;
  v39 = v9;
  v10 = type metadata accessor for Capsule();
  v37 = *(_QWORD *)(v10 - 8);
  v38 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v33 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Shape();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v24);
  v26 = (char *)&v33 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  WeakTagged_9.tagged6.getter();
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v17, 1, v27) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for WeakRef<Shape>?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v21, 1, 1, v22);
  }
  else
  {
    Canvas.updatablePaper2.getter((uint64_t)v13);
    WeakRef.subscript.getter();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v38);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v17, v27);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) != 1)
    {
      outlined init with take of PKStrokeStruct((uint64_t)v21, (uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
      v30 = v34;
      CRRegister.wrappedValue.getter();
      v31 = v36;
      TaggedValue_9.tagged3.getter();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v30, v31);
      v29 = v42;
      outlined destroy of PKStrokeProperties((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      return v29;
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for Shape?);
  return 0;
}

uint64_t closure #1 in CanvasFormattingProxy.supportsOpacity.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  _BOOL8 v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  _BOOL4 v48;
  uint64_t v49;

  v44 = a2;
  v40 = type metadata accessor for ShapeSecondaryProperties();
  MEMORY[0x1E0C80A78](v40, v6);
  v39 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a4 + 16);
  v45 = a3;
  v43 = v8;
  v9 = type metadata accessor for Capsule();
  v41 = *(_QWORD *)(v9 - 8);
  v42 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v39 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v39 - v23;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>?);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v39 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  WeakTagged_9.tagged2.getter();
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
  v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v28, 1, v29);
  v48 = v47 != 1;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, &demangling cache variable for type metadata for WeakRef<Image>?);
  WeakTagged_9.tagged6.getter();
  v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  v46 = v32(v24, 1, v30);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, &demangling cache variable for type metadata for WeakRef<Shape>?);
  WeakTagged_9.tagged6.getter();
  if (v32(v20, 1, v30) == 1)
  {
    v33 = &demangling cache variable for type metadata for WeakRef<Shape>?;
    v34 = (uint64_t)v20;
  }
  else
  {
    v35 = (uint64_t)v39;
    Canvas.updatablePaper2.getter((uint64_t)v12);
    WeakRef.subscript.getter();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v12, v42);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v20, v30);
    v36 = type metadata accessor for Shape();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v16, 1, v36) != 1)
    {
      outlined init with copy of PKStrokeProperties((uint64_t)&v16[*(int *)(v36 + 52)], v35, (uint64_t (*)(_QWORD))type metadata accessor for ShapeSecondaryProperties);
      outlined destroy of PKStrokeProperties((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
      CRRegister.wrappedValue.getter();
      outlined destroy of PKStrokeProperties(v35, (uint64_t (*)(_QWORD))type metadata accessor for ShapeSecondaryProperties);
      v38 = v49 == 0;
      if (v47 != 1)
        return v48;
      result = v48;
      if (v46 != 1)
        return v38;
      return result;
    }
    v33 = &demangling cache variable for type metadata for Shape?;
    v34 = (uint64_t)v16;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(v34, v33);
  result = v48;
  if (v47 == 1 && v46 != 1)
    return 1;
  return result;
}

uint64_t CanvasFormattingProxy.supportsFillColor.getter(uint64_t a1, uint64_t (*a2)(char *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  _OWORD v8[2];
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(v2 + 8);
  if (*(_QWORD *)(v3 + 16))
  {
    MEMORY[0x1E0C80A78](a1, a2);
    v8[1] = *(_OWORD *)(v5 + 16);
    v9 = *(_QWORD *)(v5 + 32);
    v10 = v2;
    swift_bridgeObjectRetain();
    v6 = specialized Sequence.allSatisfy(_:)(a2, (char)v8, v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

uint64_t closure #1 in CanvasFormattingProxy.supportsLineEnds.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char *v30;
  uint64_t v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;

  v40 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v35 = *(_QWORD *)(v6 - 8);
  v36 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v34 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a4 + 16);
  v41 = a3;
  v39 = v9;
  v10 = type metadata accessor for Capsule();
  v37 = *(_QWORD *)(v10 - 8);
  v38 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v33 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Shape();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v24);
  v26 = (char *)&v33 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  WeakTagged_9.tagged6.getter();
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v17, 1, v27) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for WeakRef<Shape>?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v21, 1, 1, v22);
  }
  else
  {
    Canvas.updatablePaper2.getter((uint64_t)v13);
    WeakRef.subscript.getter();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v38);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v17, v27);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) != 1)
    {
      outlined init with take of PKStrokeStruct((uint64_t)v21, (uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
      v30 = v34;
      CRRegister.wrappedValue.getter();
      v31 = v36;
      TaggedValue_9.tagged3.getter();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v30, v31);
      v29 = v42 ^ 1;
      outlined destroy of PKStrokeProperties((uint64_t)v26, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      return v29 & 1;
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for Shape?);
  v29 = 0;
  return v29 & 1;
}

uint64_t CanvasFormattingProxy.supportsImages.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v0 + 8);
  if (*(_QWORD *)(v9 + 16) == 1)
  {
    specialized Collection.first.getter(v9, (uint64_t)v4);
    v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v4, 1, v10) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v8, 1, 1, v12);
    }
    else
    {
      WeakTagged_9.tagged2.getter();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v4, v10);
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
      v13 = 1;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v8, 1, v14) != 1)
      {
LABEL_7:
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for WeakRef<Image>?);
        return v13;
      }
    }
    v13 = 0;
    goto LABEL_7;
  }
  return 0;
}

uint64_t CanvasFormattingProxy.supportsImageRegeneration.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  unint64_t v32;
  _QWORD v33[4];

  v2 = v1;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  v6 = type metadata accessor for Capsule();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v33 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>?);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image?);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!CanvasFormattingProxy.supportsImageGeneration.getter(a1))
    return 0;
  v33[0] = v5;
  v33[1] = v4;
  specialized Collection.first.getter(*(_QWORD *)(v2 + 8), (uint64_t)v14);
  v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v14, 1, v23) == 1)
  {
    v25 = (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?;
    v26 = (uint64_t)v14;
LABEL_8:
    outlined destroy of StocksKitCurrencyCache.Provider?(v26, v25);
    return 0;
  }
  WeakTagged_9.tagged2.getter();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v23);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v18, 1, v27) == 1)
  {
    v25 = &demangling cache variable for type metadata for WeakRef<Image>?;
    v26 = (uint64_t)v18;
    goto LABEL_8;
  }
  Canvas.updatablePaper2.getter((uint64_t)v10);
  WeakRef.subscript.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v27);
  v29 = type metadata accessor for Image();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v22, 1, v29) == 1)
  {
    v25 = &demangling cache variable for type metadata for Image?;
    v26 = (uint64_t)v22;
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Data?>);
  CRRegister.wrappedValue.getter();
  v31 = v33[2];
  v32 = v33[3];
  outlined destroy of PKStrokeProperties((uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for Image);
  if (v32 >> 60 != 15)
  {
    outlined consume of Data?(v31, v32);
    return 1;
  }
  return 0;
}

BOOL CanvasFormattingProxy.supportsImageGeneration.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((CanvasFormattingProxy.supportsMagicGenerativePlaygroundForSelection.getter(a1) & 1) == 0)
    return 0;
  CanvasMembers.singleImageSelected()(*(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), (uint64_t)v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Image>);
  v8 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) != 1;
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for WeakRef<Image>?);
  return v8;
}

uint64_t CanvasFormattingProxy.supportsMagicGenerativePlaygroundForSelection.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  char v5;
  char v6;
  uint64_t v7;
  void *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  _OWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  char v19[24];
  ValueMetadata *v20;
  unint64_t v21;

  v2 = v1;
  v4 = (id)MGCopyAnswer();
  v5 = objc_msgSend(v4, "BOOLValue");

  if ((v5 & 1) != 0)
    goto LABEL_8;
  v20 = &type metadata for PencilAndPaperFeatureFlags;
  v21 = lazy protocol witness table accessor for type PencilAndPaperFeatureFlags and conformance PencilAndPaperFeatureFlags();
  v19[0] = 2;
  v6 = isFeatureEnabled(_:)();
  v7 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  if ((v6 & 1) == 0)
    goto LABEL_8;
  v8 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)v2) + 0x320))(v7);
  if (v8
    && (v9 = v8, v10 = objc_msgSend(v8, sel_isGenerationModelAvailable), v9, v10)
    && ((v13 = *(_QWORD *)(v2 + 8), *(_QWORD *)(v13 + 16)) || *(_QWORD *)(*(_QWORD *)(v2 + 16) + 16)))
  {
    MEMORY[0x1E0C80A78](v11, v12);
    v16[1] = *(_OWORD *)(a1 + 16);
    v17 = *(_QWORD *)(a1 + 32);
    v18 = v2;
    swift_bridgeObjectRetain();
    v14 = specialized Sequence.allSatisfy(_:)((uint64_t (*)(char *))partial apply for closure #1 in implicit closure #5 in CanvasFormattingProxy.supportsMagicGenerativePlaygroundForSelection.getter, (char)v16, v13);
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_8:
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t closure #1 in implicit closure #5 in CanvasFormattingProxy.supportsMagicGenerativePlaygroundForSelection.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  __int128 *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68[3];
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  _BYTE v72[24];
  uint64_t v73;
  __int128 v74[2];
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v62 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v66 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v10, v11);
  v60 = (uint64_t)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v59 = (uint64_t)&v55 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v67 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(a4 + 16);
  v63 = a3;
  v61 = type metadata accessor for Capsule();
  v21 = *(_QWORD *)(v61 - 8);
  MEMORY[0x1E0C80A78](v61, v22);
  v24 = (char *)&v55 - v23;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<TextBox>?);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v55 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TextBox?);
  MEMORY[0x1E0C80A78](v29, v30);
  v32 = (char *)&v55 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = v16;
  v65 = a1;
  WeakTagged_9.tagged4.getter();
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<TextBox>);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48))(v28, 1, v33);
  v58 = v20;
  v64 = v17;
  v57 = v21;
  v56 = v24;
  if (v35 == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v28, &demangling cache variable for type metadata for WeakRef<TextBox>?);
    v36 = type metadata accessor for TextBox();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v32, 1, 1, v36);
LABEL_4:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v32, &demangling cache variable for type metadata for TextBox?);
    memset(v68, 0, sizeof(v68));
    v69 = 2;
    goto LABEL_6;
  }
  Canvas.updatablePaper2.getter((uint64_t)v24);
  WeakRef.subscript.getter();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v61);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v28, v33);
  v37 = type metadata accessor for TextBox();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v32, 1, v37) == 1)
    goto LABEL_4;
  v69 = v37;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v68);
  outlined init with take of PKStrokeStruct((uint64_t)v32, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(_QWORD))type metadata accessor for TextBox);
LABEL_6:
  v39 = v64;
  v40 = v79;
  v41 = v67;
  v42 = (uint64_t)v66;
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v67, v65, v79);
  if (v69 == 2)
  {
    WeakTagged_9.tagged6.getter();
    v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
    v44 = *(_QWORD *)(v43 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v42, &demangling cache variable for type metadata for WeakRef<Shape>?);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v40);
      v70 = 0uLL;
      *(_QWORD *)&v71 = 0;
      *((_QWORD *)&v71 + 1) = 1;
    }
    else
    {
      v45 = (uint64_t)v56;
      Canvas.updatablePaper2.getter((uint64_t)v56);
      WeakRef.subscript.getter();
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v45, v61);
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v43);
      v46 = v59;
      outlined init with take of (key: Int, value: AnyCRValue)?(v60, v59, &demangling cache variable for type metadata for Shape?);
      v47 = type metadata accessor for Shape();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 48))(v46, 1, v47) == 1)
      {
        (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v40);
        outlined destroy of StocksKitCurrencyCache.Provider?(v46, &demangling cache variable for type metadata for Shape?);
        v70 = 0u;
        v71 = 0u;
      }
      else
      {
        *((_QWORD *)&v71 + 1) = v47;
        v48 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v70);
        outlined init with take of PKStrokeStruct(v46, (uint64_t)v48, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v40);
      }
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v68, &demangling cache variable for type metadata for Any???);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v40);
    outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v68, (uint64_t)&v70, &demangling cache variable for type metadata for Any??);
  }
  if (*((_QWORD *)&v71 + 1) == 1)
  {
    v49 = &demangling cache variable for type metadata for Any??;
    v50 = &v70;
LABEL_20:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v50, v49);
    goto LABEL_21;
  }
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v70, (uint64_t)v72, &demangling cache variable for type metadata for Any?);
  if (!v73)
  {
    v49 = &demangling cache variable for type metadata for Any?;
    v50 = (__int128 *)v72;
    goto LABEL_20;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShapeTextBox);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_21:
    v75 = 0;
    memset(v74, 0, sizeof(v74));
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v74, &demangling cache variable for type metadata for ShapeTextBox?);
    v53 = 1;
    return v53 & 1;
  }
  outlined init with take of FindResult(v74, (uint64_t)&v76);
  v51 = v77;
  v52 = v78;
  __swift_project_boxed_opaque_existential_1(&v76, v77);
  v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 72))(v51, v52) ^ 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v76);
  return v53 & 1;
}

uint64_t CanvasFormattingProxy.fillColor.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t result;
  int64_t v43;
  unint64_t v44;
  unint64_t i;
  int64_t v46;
  unint64_t v47;
  int64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  unsigned int (*v54)(uint64_t, uint64_t, uint64_t);
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  unsigned int (*v70)(uint64_t, uint64_t, uint64_t);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int64_t v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 v93;

  v69 = a2;
  v85 = type metadata accessor for Shape();
  v80 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85, v4);
  v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v72 = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v73, v7);
  v71 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v82 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  v83 = v9;
  v81 = type metadata accessor for Capsule();
  v79 = *(_QWORD *)(v81 - 8);
  MEMORY[0x1E0C80A78](v81, v10);
  v67 = (uint64_t)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v78 = (uint64_t)&v66 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v15, v16);
  v68 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v88 = (char *)&v66 - v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v66 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v27);
  v89 = (char *)&v66 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29, v31);
  MEMORY[0x1E0C80A78](v32, v33);
  v90 = (char *)&v66 - v34;
  v84 = v2;
  v35 = *(_QWORD *)(v2 + 8);
  v37 = v36;
  v38 = *(_QWORD *)(v35 + 56);
  v86 = v35 + 56;
  v39 = 1 << *(_BYTE *)(v35 + 32);
  v40 = -1;
  if (v39 < 64)
    v40 = ~(-1 << v39);
  v41 = v40 & v38;
  v87 = (unint64_t)(v39 + 63) >> 6;
  v91 = v35;
  result = swift_bridgeObjectRetain();
  v43 = 0;
  v77 = v25;
  v76 = v26;
  v75 = v37;
  v74 = v24;
  if (v41)
    goto LABEL_6;
LABEL_7:
  v46 = v43 + 1;
  if (__OFADD__(v43, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v46 >= v87)
  {
LABEL_31:
    result = swift_release();
    goto LABEL_32;
  }
  v47 = *(_QWORD *)(v86 + 8 * v46);
  ++v43;
  if (!v47)
  {
    v43 = v46 + 1;
    if (v46 + 1 >= v87)
      goto LABEL_31;
    v47 = *(_QWORD *)(v86 + 8 * v43);
    if (!v47)
    {
      v43 = v46 + 2;
      if (v46 + 2 >= v87)
        goto LABEL_31;
      v47 = *(_QWORD *)(v86 + 8 * v43);
      if (!v47)
      {
        v48 = v46 + 3;
        if (v48 < v87)
        {
          v47 = *(_QWORD *)(v86 + 8 * v48);
          if (v47)
          {
            v43 = v48;
            goto LABEL_20;
          }
          while (1)
          {
            v43 = v48 + 1;
            if (__OFADD__(v48, 1))
              break;
            if (v43 >= v87)
              goto LABEL_31;
            v47 = *(_QWORD *)(v86 + 8 * v43);
            ++v48;
            if (v47)
              goto LABEL_20;
          }
LABEL_37:
          __break(1u);
          return result;
        }
        goto LABEL_31;
      }
    }
  }
LABEL_20:
  v41 = (v47 - 1) & v47;
  for (i = __clz(__rbit64(v47)) + (v43 << 6); ; i = v44 | (v43 << 6))
  {
    v49 = v90;
    (*(void (**)(char *, unint64_t, uint64_t))(v30 + 16))(v90, *(_QWORD *)(v91 + 48) + *(_QWORD *)(v30 + 72) * i, v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v37, v49, v29);
    WeakTagged_9.tagged6.getter();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v37, v29);
      result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, &demangling cache variable for type metadata for WeakRef<Shape>?);
      if (!v41)
        goto LABEL_7;
      goto LABEL_6;
    }
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v89, v24, v25);
    v50 = v78;
    Canvas.updatablePaper2.getter(v78);
    v51 = v88;
    WeakRef.subscript.getter();
    v52 = *(void (**)(uint64_t, uint64_t))(v79 + 8);
    v53 = (uint64_t)v51;
    v52(v50, v81);
    v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48);
    if (v54(v53, 1, v85) != 1)
      break;
    outlined destroy of StocksKitCurrencyCache.Provider?(v53, &demangling cache variable for type metadata for Shape?);
LABEL_28:
    v61 = v89;
LABEL_29:
    v26 = v76;
    v25 = v77;
    (*(void (**)(char *, uint64_t))(v76 + 8))(v61, v77);
    v37 = v75;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v75, v29);
    v24 = v74;
    if (!v41)
      goto LABEL_7;
LABEL_6:
    v44 = __clz(__rbit64(v41));
    v41 &= v41 - 1;
  }
  v70 = v54;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
  v55 = v71;
  CRRegister.wrappedValue.getter();
  v56 = v73;
  TaggedValue_9.tagged3.getter();
  v57 = v55;
  v58 = (uint64_t)v88;
  (*(void (**)(char *, uint64_t))(v72 + 8))(v57, v56);
  v59 = v93;
  outlined init with copy of PKStrokeProperties(v58, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  if (v59 != 1)
  {
    outlined destroy of PKStrokeProperties((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    outlined destroy of PKStrokeProperties(v58, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    goto LABEL_28;
  }
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
  CRRegister.wrappedValue.getter();
  v60 = v92;
  outlined destroy of PKStrokeProperties((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  outlined destroy of PKStrokeProperties(v58, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  v61 = v89;
  if (v60)
    goto LABEL_29;
  v62 = v89;
  v63 = v67;
  Canvas.updatablePaper2.getter(v67);
  v64 = (uint64_t)v68;
  v65 = v77;
  WeakRef.subscript.getter();
  v52(v63, v81);
  if (v70(v64, 1, v85) == 1)
  {
    (*(void (**)(char *, uint64_t))(v76 + 8))(v62, v65);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v75, v29);
    swift_release();
    result = outlined destroy of StocksKitCurrencyCache.Provider?(v64, &demangling cache variable for type metadata for Shape?);
LABEL_32:
    *v69 = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
    CRRegister.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v76 + 8))(v62, v65);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v75, v29);
    swift_release();
    return outlined destroy of PKStrokeProperties(v64, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  }
  return result;
}

uint64_t closure #1 in closure #1 in CanvasFormattingProxy.fillColor.setter(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t result;
  int64_t v37;
  unint64_t v38;
  unint64_t v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t *, _QWORD);
  uint64_t v56;
  id v57;
  id v58[2];
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77[6];
  unsigned __int8 v78;
  id v79;

  v58[0] = a3;
  v68 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v63 = *(_QWORD *)(v4 - 8);
  v64 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v62 = (char *)v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for Shape();
  v67 = *(_QWORD *)(v71 - 8);
  MEMORY[0x1E0C80A78](v71, v7);
  v61 = (uint64_t)v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v60 = (uint64_t)v58 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
  v75 = *(_QWORD *)(v20 - 8);
  v76 = v20;
  MEMORY[0x1E0C80A78](v20, v21);
  v74 = (char *)v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v25);
  v27 = (char *)v58 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28, v29);
  v72 = (char *)v58 - v30;
  v31 = *(_QWORD *)(a2 + 8);
  v32 = *(_QWORD *)(v31 + 56);
  v69 = v31 + 56;
  v33 = 1 << *(_BYTE *)(v31 + 32);
  v34 = -1;
  if (v33 < 64)
    v34 = ~(-1 << v33);
  v35 = v34 & v32;
  v70 = (unint64_t)(v33 + 63) >> 6;
  v73 = v31;
  result = swift_bridgeObjectRetain();
  v37 = 0;
  v59 = v15;
  v65 = v27;
  v66 = v19;
  while (v35)
  {
    v38 = __clz(__rbit64(v35));
    v35 &= v35 - 1;
    v39 = v38 | (v37 << 6);
LABEL_21:
    v43 = v72;
    (*(void (**)(char *, unint64_t, uint64_t))(v24 + 16))(v72, *(_QWORD *)(v73 + 48) + *(_QWORD *)(v24 + 72) * v39, v23);
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v27, v43, v23);
    WeakTagged_9.tagged6.getter();
    v44 = v27;
    v46 = v75;
    v45 = v76;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v19, 1, v76) == 1)
    {
      (*(void (**)(char *, uint64_t))(v24 + 8))(v44, v23);
      result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for WeakRef<Shape>?);
      v27 = v44;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v74, v19, v45);
      WeakRef.subscript.getter();
      v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
      if (v47((uint64_t)v15, 1, v71))
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for Shape?);
LABEL_30:
        v27 = v65;
LABEL_31:
        (*(void (**)(char *, uint64_t))(v75 + 8))(v74, v76);
        result = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v27, v23);
        v19 = v66;
      }
      else
      {
        v48 = (uint64_t)v15;
        v49 = (uint64_t)v15;
        v50 = v60;
        outlined init with copy of PKStrokeProperties(v48, v60, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        outlined destroy of StocksKitCurrencyCache.Provider?(v49, &demangling cache variable for type metadata for Shape?);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
        v51 = v62;
        CRRegister.wrappedValue.getter();
        v52 = v64;
        TaggedValue_9.tagged3.getter();
        (*(void (**)(char *, uint64_t))(v63 + 8))(v51, v52);
        LODWORD(v49) = v78;
        v53 = v61;
        outlined init with copy of PKStrokeProperties(v50, v61, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        if ((_DWORD)v49 != 1)
        {
          outlined destroy of PKStrokeProperties(v53, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
          outlined destroy of PKStrokeProperties(v50, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
          v15 = v59;
          goto LABEL_30;
        }
        type metadata accessor for ShapeSecondaryProperties();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
        CRRegister.wrappedValue.getter();
        v54 = v77[0];
        outlined destroy of PKStrokeProperties(v53, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        outlined destroy of PKStrokeProperties(v50, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        v15 = v59;
        v27 = v65;
        if (v54)
          goto LABEL_31;
        v55 = (void (*)(uint64_t *, _QWORD))WeakRef.subscript.modify();
        if (!v47(v56, 1, v71))
        {
          v79 = v58[0];
          v57 = v58[0];
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
          CRRegister.wrappedValue.setter();
        }
        v55(v77, 0);
        v19 = v66;
        (*(void (**)(char *, uint64_t))(v75 + 8))(v74, v76);
        result = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v27, v23);
      }
    }
  }
  v40 = v37 + 1;
  if (__OFADD__(v37, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v40 >= v70)
    return swift_release();
  v41 = *(_QWORD *)(v69 + 8 * v40);
  ++v37;
  if (v41)
    goto LABEL_20;
  v37 = v40 + 1;
  if (v40 + 1 >= v70)
    return swift_release();
  v41 = *(_QWORD *)(v69 + 8 * v37);
  if (v41)
    goto LABEL_20;
  v37 = v40 + 2;
  if (v40 + 2 >= v70)
    return swift_release();
  v41 = *(_QWORD *)(v69 + 8 * v37);
  if (v41)
  {
LABEL_20:
    v35 = (v41 - 1) & v41;
    v39 = __clz(__rbit64(v41)) + (v37 << 6);
    goto LABEL_21;
  }
  v42 = v40 + 3;
  if (v42 >= v70)
    return swift_release();
  v41 = *(_QWORD *)(v69 + 8 * v42);
  if (v41)
  {
    v37 = v42;
    goto LABEL_20;
  }
  while (1)
  {
    v37 = v42 + 1;
    if (__OFADD__(v42, 1))
      break;
    if (v37 >= v70)
      return swift_release();
    v41 = *(_QWORD *)(v69 + 8 * v37);
    ++v42;
    if (v41)
      goto LABEL_20;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t CanvasFormattingProxy.strokeColor.getter@<X0>(uint64_t a1@<X0>, CGColor **a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t result;
  void (*v91)(uint64_t, uint64_t);
  uint64_t v92;
  unint64_t i;
  int64_t v94;
  unint64_t v95;
  int64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t, uint64_t);
  uint64_t v109;
  unsigned int (*v110)(uint64_t, uint64_t, uint64_t);
  void *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  int64_t v128;
  unint64_t v129;
  int64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(uint64_t, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(uint64_t, uint64_t);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  id v158;
  CGColor *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  char *v166;
  CGColor **v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  int64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  char *v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int64_t v206;
  void (*v207)(uint64_t, uint64_t);
  uint64_t v208;
  char *v209;
  void *v210;

  v167 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
  MEMORY[0x1E0C80A78](v4, v5);
  v172 = (char *)&v162 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v174, v7);
  v173 = (char *)&v162 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v171 = (char *)&v162 - v11;
  v12 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v175 = (uint64_t)&v162 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v177 = *(_QWORD *)(v178 - 8);
  MEMORY[0x1E0C80A78](v178, v15);
  v176 = (char *)&v162 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  MEMORY[0x1E0C80A78](v17, v18);
  v201 = (uint64_t)&v162 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x1E0C80A78](v20, v21);
  v189 = (uint64_t)&v162 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v25);
  v27 = (char *)&v162 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v179 = *(_QWORD *)(v180 - 8);
  MEMORY[0x1E0C80A78](v180, v28);
  v202 = (char *)&v162 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v31);
  v191 = (char *)&v162 - v32;
  v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Signature?);
  MEMORY[0x1E0C80A78](v33, v34);
  v166 = (char *)&v162 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Signature>?);
  MEMORY[0x1E0C80A78](v36, v37);
  v39 = (char *)&v162 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Signature>);
  v41 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40, v42);
  v165 = (char *)&v162 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = *(_QWORD *)(a1 + 16);
  v203 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  v204 = v44;
  v200 = type metadata accessor for Capsule();
  v198 = *(_QWORD *)(v200 - 8);
  MEMORY[0x1E0C80A78](v200, v45);
  v170 = (uint64_t)&v162 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v47, v48);
  v169 = (uint64_t)&v162 - v49;
  MEMORY[0x1E0C80A78](v50, v51);
  v168 = (uint64_t)&v162 - v52;
  MEMORY[0x1E0C80A78](v53, v54);
  v190 = (uint64_t)&v162 - v55;
  MEMORY[0x1E0C80A78](v56, v57);
  v164 = (uint64_t)&v162 - v58;
  MEMORY[0x1E0C80A78](v59, v60);
  v162 = (uint64_t)&v162 - v61;
  MEMORY[0x1E0C80A78](v62, v63);
  v186 = (uint64_t)&v162 - v64;
  v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v65, v66);
  v163 = (char *)&v162 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v68, v69);
  v184 = (char *)&v162 - v70;
  v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v71, v72);
  v193 = (char *)&v162 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  v195 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
  v199 = *(_QWORD *)(v195 - 8);
  MEMORY[0x1E0C80A78](v195, v74);
  v185 = (char *)&v162 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v208 = *(_QWORD *)(v76 - 8);
  MEMORY[0x1E0C80A78](v76, v77);
  v209 = (char *)&v162 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v79, v80);
  v194 = (char *)&v162 - v81;
  v83 = *(_QWORD *)(v2 + 8);
  v82 = *(_QWORD *)(v2 + 16);
  v205 = v2;
  v85 = v84;
  v192 = v82;
  v86 = *(_QWORD *)(v83 + 56);
  v187 = v83 + 56;
  v87 = 1 << *(_BYTE *)(v83 + 32);
  v88 = -1;
  if (v87 < 64)
    v88 = ~(-1 << v87);
  v89 = v88 & v86;
  v188 = (unint64_t)(v87 + 63) >> 6;
  v197 = v83;
  result = swift_bridgeObjectRetain();
  v91 = 0;
  v183 = v39;
  v196 = v85;
  v182 = v41;
  v181 = v40;
  if (!v89)
    goto LABEL_5;
LABEL_4:
  v92 = v41;
  v206 = (v89 - 1) & v89;
  v207 = v91;
  for (i = __clz(__rbit64(v89)) | ((_QWORD)v91 << 6); ; i = __clz(__rbit64(v95)) + (v96 << 6))
  {
    v98 = v193;
    v99 = v194;
    v100 = v208;
    (*(void (**)(char *, unint64_t, uint64_t))(v208 + 16))(v194, *(_QWORD *)(v197 + 48) + *(_QWORD *)(v208 + 72) * i, v85);
    (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v209, v99, v85);
    WeakTagged_9.tagged6.getter();
    v101 = v199;
    v102 = v98;
    v103 = (uint64_t)v98;
    v104 = v195;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v199 + 48))(v102, 1, v195) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v103, &demangling cache variable for type metadata for WeakRef<Shape>?);
      v41 = v92;
    }
    else
    {
      v105 = v185;
      (*(void (**)(char *, uint64_t, uint64_t))(v101 + 32))(v185, v103, v104);
      v106 = v186;
      Canvas.updatablePaper2.getter(v186);
      v107 = (uint64_t)v184;
      WeakRef.subscript.getter();
      v108 = *(void (**)(uint64_t, uint64_t))(v198 + 8);
      v108(v106, v200);
      v109 = type metadata accessor for Shape();
      v110 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v109 - 8) + 48);
      if (v110(v107, 1, v109) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v107, &demangling cache variable for type metadata for Shape?);
      }
      else
      {
        type metadata accessor for ShapeSecondaryProperties();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
        CRRegister.wrappedValue.getter();
        v111 = v210;
        outlined destroy of PKStrokeProperties(v107, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        if (!v111)
        {
          v160 = v162;
          Canvas.updatablePaper2.getter(v162);
          v161 = (uint64_t)v163;
          WeakRef.subscript.getter();
          v108(v160, v200);
          if (v110(v161, 1, v109) != 1)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
            CRRegister.wrappedValue.getter();
            (*(void (**)(char *, uint64_t))(v199 + 8))(v105, v104);
            (*(void (**)(char *, uint64_t))(v208 + 8))(v209, v196);
            swift_release();
            return outlined destroy of PKStrokeProperties(v161, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
          }
          (*(void (**)(char *, uint64_t))(v199 + 8))(v105, v104);
          (*(void (**)(char *, uint64_t))(v208 + 8))(v209, v196);
          swift_release();
          v118 = &demangling cache variable for type metadata for Shape?;
          v119 = v161;
          goto LABEL_65;
        }
      }
      (*(void (**)(char *, uint64_t))(v199 + 8))(v105, v104);
      v40 = v181;
      v41 = v182;
      v39 = v183;
    }
    v112 = v196;
    v113 = v209;
    WeakTagged_9.tagged7.getter();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40) != 1)
    {
      v114 = v165;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v165, v39, v40);
      v115 = v164;
      Canvas.updatablePaper2.getter(v164);
      v116 = (uint64_t)v166;
      WeakRef.subscript.getter();
      (*(void (**)(uint64_t, uint64_t))(v198 + 8))(v115, v200);
      v117 = type metadata accessor for Signature();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 48))(v116, 1, v117) != 1)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
        CRRegister.wrappedValue.getter();
        (*(void (**)(char *, uint64_t))(v41 + 8))(v114, v40);
        (*(void (**)(char *, uint64_t))(v208 + 8))(v209, v196);
        swift_release();
        return outlined destroy of PKStrokeProperties(v116, (uint64_t (*)(_QWORD))type metadata accessor for Signature);
      }
      (*(void (**)(char *, uint64_t))(v41 + 8))(v114, v40);
      (*(void (**)(char *, uint64_t))(v208 + 8))(v209, v196);
      swift_release();
      v118 = (uint64_t *)&demangling cache variable for type metadata for Signature?;
      v119 = v116;
LABEL_65:
      result = outlined destroy of StocksKitCurrencyCache.Provider?(v119, v118);
LABEL_66:
      *v167 = 0;
      return result;
    }
    (*(void (**)(char *, uint64_t))(v208 + 8))(v113, v112);
    result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v39, &demangling cache variable for type metadata for WeakRef<Signature>?);
    v85 = v112;
    v89 = v206;
    v91 = v207;
    if (v206)
      goto LABEL_4;
LABEL_5:
    v94 = (int64_t)v91 + 1;
    if (__OFADD__(v91, 1))
    {
      __break(1u);
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
    if (v94 >= v188)
      goto LABEL_30;
    v95 = *(_QWORD *)(v187 + 8 * v94);
    v96 = (int64_t)v91 + 1;
    if (!v95)
    {
      v96 = (int64_t)v91 + 2;
      if ((uint64_t)v91 + 2 >= v188)
        goto LABEL_30;
      v95 = *(_QWORD *)(v187 + 8 * v96);
      if (!v95)
      {
        v96 = (int64_t)v91 + 3;
        if ((uint64_t)v91 + 3 >= v188)
          goto LABEL_30;
        v95 = *(_QWORD *)(v187 + 8 * v96);
        if (!v95)
          break;
      }
    }
LABEL_18:
    v92 = v41;
    v206 = (v95 - 1) & v95;
    v207 = (void (*)(uint64_t, uint64_t))v96;
  }
  v97 = (char *)v91 + 4;
  if ((uint64_t)v91 + 4 < v188)
  {
    v95 = *(_QWORD *)(v187 + 8 * (_QWORD)v97);
    if (!v95)
    {
      while (1)
      {
        v96 = (int64_t)(v97 + 1);
        if (__OFADD__(v97, 1))
          break;
        if (v96 >= v188)
          goto LABEL_30;
        v95 = *(_QWORD *)(v187 + 8 * v96);
        ++v97;
        if (v95)
          goto LABEL_18;
      }
LABEL_71:
      __break(1u);
      goto LABEL_72;
    }
    v96 = (int64_t)v91 + 4;
    goto LABEL_18;
  }
LABEL_30:
  swift_release();
  v120 = *(_QWORD *)(v192 + 56);
  v199 = v192 + 56;
  v121 = 1 << *(_BYTE *)(v192 + 32);
  v122 = -1;
  if (v121 < 64)
    v122 = ~(-1 << v121);
  v123 = v122 & v120;
  v206 = (unint64_t)(v121 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v124 = 0;
  v125 = v179;
  v126 = v180;
  while (1)
  {
    if (v123)
    {
      v208 = (v123 - 1) & v123;
      v209 = v124;
      v127 = __clz(__rbit64(v123)) | ((_QWORD)v124 << 6);
      goto LABEL_51;
    }
    v128 = (int64_t)(v124 + 1);
    if (__OFADD__(v124, 1))
      goto LABEL_70;
    if (v128 >= v206)
    {
LABEL_61:
      result = swift_release();
      goto LABEL_66;
    }
    v129 = *(_QWORD *)(v199 + 8 * v128);
    v130 = (int64_t)(v124 + 1);
    if (!v129)
    {
      v130 = (int64_t)(v124 + 2);
      if ((uint64_t)(v124 + 2) >= v206)
        goto LABEL_61;
      v129 = *(_QWORD *)(v199 + 8 * v130);
      if (!v129)
      {
        v130 = (int64_t)(v124 + 3);
        if ((uint64_t)(v124 + 3) >= v206)
          goto LABEL_61;
        v129 = *(_QWORD *)(v199 + 8 * v130);
        if (!v129)
          break;
      }
    }
LABEL_50:
    v208 = (v129 - 1) & v129;
    v209 = (char *)v130;
    v127 = __clz(__rbit64(v129)) + (v130 << 6);
LABEL_51:
    v132 = v191;
    (*(void (**)(char *, unint64_t, uint64_t))(v125 + 16))(v191, *(_QWORD *)(v192 + 48) + *(_QWORD *)(v125 + 72) * v127, v126);
    (*(void (**)(char *, char *, uint64_t))(v125 + 32))(v202, v132, v126);
    v133 = v190;
    Canvas.updatablePaper2.getter(v190);
    v134 = v201;
    WeakRef.subscript.getter();
    v135 = *(void (**)(uint64_t, uint64_t))(v198 + 8);
    v135(v133, v200);
    v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
    v137 = *(_QWORD *)(v136 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v137 + 48))(v134, 1, v136) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v201, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
    }
    else
    {
      v207 = v135;
      v138 = v189;
      v139 = v201;
      v140 = v176;
      CRRegister.value.getter();
      v141 = v178;
      SharedTagged_2.tagged1.getter();
      (*(void (**)(char *, uint64_t))(v177 + 8))(v140, v141);
      (*(void (**)(uint64_t, uint64_t))(v137 + 8))(v139, v136);
      v142 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
      v143 = *(_QWORD *)(v142 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v143 + 48))(v138, 1, v142) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v189, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
        v126 = v180;
        v125 = v179;
      }
      else
      {
        v144 = v168;
        Canvas.updatablePaper2.getter(v168);
        v145 = v189;
        Ref.subscript.getter();
        v146 = v144;
        v147 = v200;
        v207(v146, v200);
        (*(void (**)(uint64_t, uint64_t))(v143 + 8))(v145, v142);
        v148 = v147;
        v149 = v169;
        Canvas.updatablePaper2.getter(v169);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
        CRRegister.wrappedValue.getter();
        v150 = (uint64_t)v172;
        v151 = (uint64_t)v171;
        v152 = MEMORY[0x1E0D12B28];
        while (1)
        {
          MEMORY[0x1DF0E6450](v152, v148);
          Ref.subscript.getter();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>?>);
          CRRegister.wrappedValue.getter();
          outlined destroy of PKStrokeProperties(v151, type metadata accessor for PKStrokeInheritedProperties);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v150, 1, v23) == 1)
            break;
          (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v23);
          (*(void (**)(char *, uint64_t, uint64_t))(v24 + 32))(v27, v150, v23);
        }
        outlined destroy of StocksKitCurrencyCache.Provider?(v150, &demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>?);
        outlined destroy of PKStrokeProperties(v175, type metadata accessor for PKStrokeStruct);
        v153 = v207;
        v207(v149, v148);
        v154 = v170;
        Canvas.updatablePaper2.getter(v170);
        v155 = v148;
        v156 = (uint64_t)v173;
        Ref.subscript.getter();
        v153(v154, v155);
        (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v23);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
        CRRegister.wrappedValue.getter();
        v157 = v210;
        outlined destroy of PKStrokeProperties(v156, type metadata accessor for PKStrokeInheritedProperties);
        v126 = v180;
        v125 = v179;
        if (v157)
        {
          v158 = objc_msgSend(v157, sel_color);

          if (v158)
          {
            v159 = (CGColor *)objc_msgSend(v158, sel_CGColor);
            if (v159)
            {
              Color.init(cgColor:)(v159, v167);

              (*(void (**)(char *, uint64_t))(v125 + 8))(v202, v126);
              return swift_release();
            }

          }
        }
      }
    }
    result = (*(uint64_t (**)(char *, uint64_t))(v125 + 8))(v202, v126);
    v123 = v208;
    v124 = v209;
  }
  v131 = v124 + 4;
  if ((uint64_t)(v124 + 4) >= v206)
    goto LABEL_61;
  v129 = *(_QWORD *)(v199 + 8 * (_QWORD)v131);
  if (v129)
  {
    v130 = (int64_t)(v124 + 4);
    goto LABEL_50;
  }
  while (1)
  {
    v130 = (int64_t)(v131 + 1);
    if (__OFADD__(v131, 1))
      break;
    if (v130 >= v206)
      goto LABEL_61;
    v129 = *(_QWORD *)(v199 + 8 * v130);
    ++v131;
    if (v129)
      goto LABEL_50;
  }
LABEL_72:
  __break(1u);
  return result;
}

void CanvasFormattingProxy.fillColor.setter(void **a1, uint64_t a2, uint64_t (*a3)(double))
{
  void *v3;

  v3 = *a1;
  Canvas.undoable(newChange:persistSelection:action:)(1, 0, a3);

}

uint64_t closure #1 in closure #1 in CanvasFormattingProxy.strokeColor.setter(_QWORD *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t result;
  int64_t v78;
  unint64_t v79;
  unint64_t v80;
  int64_t v81;
  _BYTE *v82;
  unint64_t v83;
  int64_t v84;
  uint64_t v85;
  _BYTE *v86;
  uint64_t v87;
  int64_t v88;
  uint64_t v89;
  unsigned int (*v90)(_BYTE *, uint64_t, uint64_t);
  int64_t v91;
  uint64_t v92;
  _BYTE *v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(void **, _QWORD);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  void (*v102)(void **, _QWORD);
  _BYTE *v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  int64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t i;
  int64_t v117;
  unint64_t v118;
  int64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE *v123;
  _BYTE *v124;
  _BYTE *v125;
  uint64_t v126;
  _BYTE *v127;
  uint64_t v128;
  _BYTE *v129;
  _QWORD *v130;
  void (*v131)(void **, _QWORD);
  uint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  uint64_t v135;
  uint64_t v136;
  void (*v137)(_BYTE *, uint64_t);
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  void (*v142)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v143;
  _BYTE *v144;
  uint64_t v145;
  unsigned int (*v146)(_BYTE *, uint64_t, uint64_t);
  uint64_t v147;
  unsigned int v148;
  _BYTE *v149;
  id v150;
  uint64_t v151;
  _BYTE *v152;
  Class isa;
  uint64_t v154;
  void (*v155)(void **, _QWORD);
  _BYTE *v156;
  _BYTE *v157;
  _BYTE v158[16];
  _BYTE *v159;
  _BYTE *v160;
  _BYTE *v161;
  _BYTE *v162;
  _BYTE *v163;
  _BYTE *v164;
  _BYTE *v165;
  uint64_t v166;
  _BYTE *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _BYTE *v172;
  id v173;
  uint64_t v174;
  _BYTE *v175;
  _BYTE *v176;
  uint64_t v177;
  uint64_t v178;
  _BYTE *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _BYTE *v185;
  _BYTE *v186;
  uint64_t v187;
  uint64_t v188;
  int64_t v189;
  uint64_t v190;
  _BYTE *v191;
  _BYTE *v192;
  _BYTE *v193;
  uint64_t v194;
  _BYTE *v195;
  _BYTE *v196;
  _BYTE *v197;
  _BYTE *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int64_t v204;
  _QWORD *v205;
  int64_t v206;
  Class v207;
  void *v208;
  id v209;

  v168 = a4;
  v173 = a3;
  v205 = a1;
  v171 = type metadata accessor for PKStrokeInheritedProperties(0);
  MEMORY[0x1E0C80A78](v171, v5);
  v167 = &v158[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v170 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeInheritedProperties>);
  v166 = *(_QWORD *)(v170 - 8);
  MEMORY[0x1E0C80A78](v170, v7);
  v161 = &v158[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v9, v10);
  v165 = &v158[-v11];
  v12 = type metadata accessor for PKStrokeStruct(0);
  MEMORY[0x1E0C80A78](v12, v13);
  v160 = &v158[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15, v16);
  v164 = &v158[-v17];
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKInk?);
  MEMORY[0x1E0C80A78](v18, v19);
  v162 = &v158[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v21, v22);
  v163 = &v158[-v23];
  v169 = type metadata accessor for PKInk();
  v174 = *(_QWORD *)(v169 - 8);
  MEMORY[0x1E0C80A78](v169, v24);
  v159 = &v158[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v178 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_2<TaggedStroke>);
  v177 = *(_QWORD *)(v178 - 8);
  MEMORY[0x1E0C80A78](v178, v26);
  v176 = &v158[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v184 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v181 = *(_QWORD *)(v184 - 8);
  MEMORY[0x1E0C80A78](v184, v28);
  v175 = &v158[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  MEMORY[0x1E0C80A78](v30, v31);
  v197 = &v158[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
  MEMORY[0x1E0C80A78](v33, v34);
  v186 = &v158[-((v35 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v180 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKStrokeStruct>);
  v190 = *(_QWORD *)(v180 - 8);
  MEMORY[0x1E0C80A78](v180, v36);
  v179 = &v158[-((v37 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v199 = *(_QWORD *)(v38 - 8);
  v200 = v38;
  MEMORY[0x1E0C80A78](v38, v39);
  v198 = &v158[-((v40 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v41, v42);
  v185 = &v158[-v43];
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Signature>?);
  MEMORY[0x1E0C80A78](v44, v45);
  v47 = &v158[-((v46 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Signature>);
  v201 = *(_QWORD *)(v48 - 8);
  v202 = v48;
  MEMORY[0x1E0C80A78](v48, v49);
  v191 = &v158[-((v50 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v183 = type metadata accessor for Shape();
  v182 = *(_QWORD *)(v183 - 8);
  MEMORY[0x1E0C80A78](v183, v51);
  v172 = &v158[-((v52 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v53, v54);
  v56 = &v158[-((v55 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v57, v58);
  v60 = &v158[-((v59 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v61 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
  v203 = *(_QWORD *)(v61 - 8);
  v204 = v61;
  MEMORY[0x1E0C80A78](v61, v62);
  v195 = &v158[-((v63 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v64 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v65 = *(_QWORD *)(v64 - 8);
  MEMORY[0x1E0C80A78](v64, v66);
  v68 = &v158[-((v67 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v69, v70);
  v193 = &v158[-v71];
  v72 = *(_QWORD *)(a2 + 8);
  v187 = *(_QWORD *)(a2 + 16);
  v73 = *(_QWORD *)(v72 + 56);
  v188 = v72 + 56;
  v74 = 1 << *(_BYTE *)(v72 + 32);
  v75 = -1;
  if (v74 < 64)
    v75 = ~(-1 << v74);
  v76 = v75 & v73;
  v189 = (unint64_t)(v74 + 63) >> 6;
  v194 = v72;
  result = swift_bridgeObjectRetain();
  v78 = 0;
  v192 = v47;
  v196 = v56;
  while (v76)
  {
    v79 = __clz(__rbit64(v76));
    v76 &= v76 - 1;
    v206 = v78;
    v80 = v79 | (v78 << 6);
LABEL_21:
    v86 = v193;
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v65 + 16))(v193, *(_QWORD *)(v194 + 48) + *(_QWORD *)(v65 + 72) * v80, v64);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v65 + 32))(v68, v86, v64);
    WeakTagged_9.tagged6.getter();
    v87 = (uint64_t)v60;
    v89 = v203;
    v88 = v204;
    if ((*(unsigned int (**)(uint64_t, uint64_t, int64_t))(v203 + 48))(v87, 1, v204) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v87, &demangling cache variable for type metadata for WeakRef<Shape>?);
      v60 = (_BYTE *)v87;
LABEL_27:
      WeakTagged_9.tagged7.getter();
      v96 = v201;
      v95 = v202;
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v201 + 48))(v47, 1, v202) == 1)
      {
        (*(void (**)(_BYTE *, uint64_t))(v65 + 8))(v68, v64);
        result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v47, &demangling cache variable for type metadata for WeakRef<Signature>?);
        v56 = v196;
        v78 = v206;
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v96 + 32))(v191, v47, v95);
        v97 = (void (*)(void **, _QWORD))WeakRef.subscript.modify();
        v99 = v98;
        v100 = type metadata accessor for Signature();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 48))(v99, 1, v100))
        {
          v209 = v173;
          v101 = v173;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
          CRRegister.wrappedValue.setter();
        }
        v97(&v208, 0);
        v47 = v192;
        v56 = v196;
        v78 = v206;
        (*(void (**)(_BYTE *, uint64_t))(v201 + 8))(v191, v202);
        result = (*(uint64_t (**)(_BYTE *, uint64_t))(v65 + 8))(v68, v64);
      }
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t, int64_t))(v89 + 32))(v195, v87, v88);
      WeakRef.subscript.getter();
      v90 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v182 + 48);
      v60 = (_BYTE *)v87;
      if (v90(v56, 1, v183))
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v56, &demangling cache variable for type metadata for Shape?);
        v91 = v204;
LABEL_26:
        (*(void (**)(_BYTE *, int64_t))(v203 + 8))(v195, v91);
        v47 = v192;
        goto LABEL_27;
      }
      v92 = (uint64_t)v56;
      v93 = v172;
      outlined init with copy of PKStrokeProperties(v92, (uint64_t)v172, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v196, &demangling cache variable for type metadata for Shape?);
      type metadata accessor for ShapeSecondaryProperties();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
      CRRegister.wrappedValue.getter();
      v94 = v208;
      outlined destroy of PKStrokeProperties((uint64_t)v93, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      v91 = v204;
      if (v94)
        goto LABEL_26;
      v102 = (void (*)(void **, _QWORD))WeakRef.subscript.modify();
      if (!v90(v103, 1, v183))
      {
        v209 = v173;
        v104 = v173;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
        CRRegister.wrappedValue.setter();
      }
      v102(&v208, 0);
      v47 = v192;
      v78 = v206;
      (*(void (**)(_BYTE *, int64_t))(v203 + 8))(v195, v204);
      result = (*(uint64_t (**)(_BYTE *, uint64_t))(v65 + 8))(v68, v64);
      v56 = v196;
    }
  }
  v81 = v78 + 1;
  if (__OFADD__(v78, 1))
  {
    __break(1u);
    goto LABEL_70;
  }
  v82 = v197;
  if (v81 >= v189)
    goto LABEL_34;
  v83 = *(_QWORD *)(v188 + 8 * v81);
  v84 = v78 + 1;
  if (v83)
    goto LABEL_20;
  v84 = v78 + 2;
  if (v78 + 2 >= v189)
    goto LABEL_34;
  v83 = *(_QWORD *)(v188 + 8 * v84);
  if (v83)
    goto LABEL_20;
  v84 = v78 + 3;
  if (v78 + 3 >= v189)
    goto LABEL_34;
  v83 = *(_QWORD *)(v188 + 8 * v84);
  if (v83)
    goto LABEL_20;
  v85 = v78 + 4;
  if (v78 + 4 >= v189)
  {
LABEL_34:
    result = swift_release();
    if (!v173)
      return result;
    v209 = (id)v187;
    v105 = *(_QWORD *)(v187 + 56);
    v203 = v187 + 56;
    v106 = 1 << *(_BYTE *)(v187 + 32);
    v107 = -1;
    if (v106 < 64)
      v107 = ~(-1 << v106);
    v108 = v107 & v105;
    v196 = v173;
    result = outlined retain of [ReflowElement]((uint64_t)&v209);
    v109 = 0;
    v204 = (unint64_t)(v106 + 63) >> 6;
    v110 = v184;
    v111 = v181;
    v112 = v180;
    if (v108)
      goto LABEL_41;
LABEL_42:
    v117 = v109 + 1;
    if (!__OFADD__(v109, 1))
    {
      if (v117 < v204)
      {
        v118 = *(_QWORD *)(v203 + 8 * v117);
        v119 = v109 + 1;
        if (v118)
          goto LABEL_55;
        v119 = v109 + 2;
        if (v109 + 2 >= v204)
          goto LABEL_67;
        v118 = *(_QWORD *)(v203 + 8 * v119);
        if (v118)
          goto LABEL_55;
        v119 = v109 + 3;
        if (v109 + 3 >= v204)
          goto LABEL_67;
        v118 = *(_QWORD *)(v203 + 8 * v119);
        if (v118)
        {
LABEL_55:
          v114 = v112;
          v108 = (v118 - 1) & v118;
          v206 = v119;
          for (i = __clz(__rbit64(v118)) + (v119 << 6); ; i = v115 | (v109 << 6))
          {
            v122 = v199;
            v121 = v200;
            v123 = v185;
            (*(void (**)(_BYTE *, unint64_t, uint64_t))(v199 + 16))(v185, *(_QWORD *)(v187 + 48) + *(_QWORD *)(v199 + 72) * i, v200);
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v122 + 32))(v198, v123, v121);
            WeakRef.subscript.getter();
            if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v111 + 48))(v82, 1, v110))
            {
              outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v82, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
              v113 = (uint64_t)v186;
              v112 = v114;
              (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v190 + 56))(v186, 1, 1, v114);
LABEL_40:
              (*(void (**)(_BYTE *, uint64_t))(v199 + 8))(v198, v200);
              result = outlined destroy of StocksKitCurrencyCache.Provider?(v113, &demangling cache variable for type metadata for Ref<PKStrokeStruct>?);
              v109 = v206;
              if (!v108)
                goto LABEL_42;
              goto LABEL_41;
            }
            v124 = v175;
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v111 + 16))(v175, v197, v110);
            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v197, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
            v125 = v176;
            CRRegister.value.getter();
            v113 = (uint64_t)v186;
            v126 = v178;
            SharedTagged_2.tagged1.getter();
            v112 = v180;
            v127 = v125;
            v110 = v184;
            v128 = v126;
            v111 = v181;
            (*(void (**)(_BYTE *, uint64_t))(v177 + 8))(v127, v128);
            v129 = v124;
            v82 = v197;
            (*(void (**)(_BYTE *, uint64_t))(v111 + 8))(v129, v110);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v190 + 48))(v113, 1, v112) == 1)
              goto LABEL_40;
            (*(void (**)(_BYTE *, uint64_t, uint64_t))(v190 + 32))(v179, v113, v112);
            v130 = v205;
            v131 = (void (*)(void **, _QWORD))Ref.subscript.modify();
            PKStrokeStruct.uniqueInheritedPropertiesIfNeeded<A>(in:)(v130, v168);
            v131(&v208, 0);
            v132 = (uint64_t)v164;
            Ref.subscript.getter();
            v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKStrokeInheritedProperties>>);
            v134 = v165;
            CRRegister.wrappedValue.getter();
            outlined destroy of PKStrokeProperties(v132, type metadata accessor for PKStrokeStruct);
            v135 = (uint64_t)v167;
            v136 = v170;
            Ref.subscript.getter();
            v137 = *(void (**)(_BYTE *, uint64_t))(v166 + 8);
            v137(v134, v136);
            v138 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PKInk?>);
            CRRegister.wrappedValue.getter();
            v139 = v208;
            outlined destroy of PKStrokeProperties(v135, type metadata accessor for PKStrokeInheritedProperties);
            if (v139)
            {
              v201 = v138;
              v202 = v133;
              v140 = v169;
              v141 = v174;
              v142 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v174 + 56);
              v143 = 1;
              v144 = v162;
              v142(v162, 1, 1, v169);
              v145 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PKInk and conformance PKInk, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD1058], MEMORY[0x1E0CD1070]);
              MEMORY[0x1DF0E4F38](v139, v144, v140, v145);

              v146 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v141 + 48);
              v147 = (uint64_t)v163;
              if (v146(v144, 1, v140) != 1)
              {
                (*(void (**)(uint64_t, _BYTE *, uint64_t))(v174 + 32))(v147, v162, v140);
                v143 = 0;
              }
              v142((_BYTE *)v147, v143, 1, v140);
              v148 = v146((_BYTE *)v147, 1, v140);
              v111 = v181;
              v112 = v180;
              if (v148 != 1)
              {
                v149 = v159;
                (*(void (**)(_BYTE *, uint64_t, uint64_t))(v174 + 32))(v159, v147, v140);
                v150 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
                objc_msgSend(v150, sel_initWithCGColor_, v196);
                PKInk.color.setter();
                v151 = (uint64_t)v160;
                Ref.subscript.getter();
                v152 = v161;
                CRRegister.wrappedValue.getter();
                outlined destroy of PKStrokeProperties(v151, type metadata accessor for PKStrokeStruct);
                isa = PKInk._bridgeToObjectiveC()().super.isa;
                v154 = v170;
                v155 = (void (*)(void **, _QWORD))Ref.subscript.modify();
                v207 = isa;
                CRRegister.wrappedValue.setter();
                v155(&v208, 0);
                v156 = v152;
                v112 = v180;
                v137(v156, v154);
                v157 = v149;
                v111 = v181;
                (*(void (**)(_BYTE *, uint64_t))(v174 + 8))(v157, v169);
                (*(void (**)(_BYTE *, uint64_t))(v190 + 8))(v179, v112);
                result = (*(uint64_t (**)(_BYTE *, uint64_t))(v199 + 8))(v198, v200);
                goto LABEL_65;
              }
            }
            else
            {
              v147 = (uint64_t)v163;
              (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v174 + 56))(v163, 1, 1, v169);
              v111 = v181;
            }
            (*(void (**)(_BYTE *, uint64_t))(v190 + 8))(v179, v112);
            (*(void (**)(_BYTE *, uint64_t))(v199 + 8))(v198, v200);
            result = outlined destroy of StocksKitCurrencyCache.Provider?(v147, &demangling cache variable for type metadata for PKInk?);
LABEL_65:
            v110 = v184;
            v82 = v197;
            v109 = v206;
            if (!v108)
              goto LABEL_42;
LABEL_41:
            v114 = v112;
            v115 = __clz(__rbit64(v108));
            v108 &= v108 - 1;
            v206 = v109;
          }
        }
        v120 = v109 + 4;
        if (v109 + 4 < v204)
        {
          v118 = *(_QWORD *)(v203 + 8 * v120);
          if (!v118)
          {
            while (1)
            {
              v119 = v120 + 1;
              if (__OFADD__(v120, 1))
                goto LABEL_72;
              if (v119 >= v204)
                goto LABEL_67;
              v118 = *(_QWORD *)(v203 + 8 * v119);
              ++v120;
              if (v118)
                goto LABEL_55;
            }
          }
          v119 = v109 + 4;
          goto LABEL_55;
        }
      }
LABEL_67:

      return swift_release();
    }
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  v83 = *(_QWORD *)(v188 + 8 * v85);
  if (v83)
  {
    v84 = v78 + 4;
LABEL_20:
    v76 = (v83 - 1) & v83;
    v206 = v84;
    v80 = __clz(__rbit64(v83)) + (v84 << 6);
    goto LABEL_21;
  }
  while (1)
  {
    v84 = v85 + 1;
    if (__OFADD__(v85, 1))
      break;
    if (v84 >= v189)
      goto LABEL_34;
    v83 = *(_QWORD *)(v188 + 8 * v84);
    ++v85;
    if (v83)
      goto LABEL_20;
  }
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
  return result;
}

uint64_t CanvasFormattingProxy.strokeWidth.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t result;
  int64_t v40;
  unint64_t v41;
  unint64_t v42;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  id v83;
  char v84;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Signature>?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Signature?);
  MEMORY[0x1E0C80A78](v7, v8);
  v67 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  v71 = *(_QWORD *)(a1 + 16);
  v75 = v10;
  v11 = type metadata accessor for Capsule();
  v73 = *(_QWORD *)(v11 - 8);
  v74 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v66 = (uint64_t)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v68 = (uint64_t)&v64 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v17, v18);
  v79 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Shape();
  v77 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v25);
  v65 = (uint64_t)&v64 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v29);
  v82 = (char *)&v64 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v78 = (char *)&v64 - v33;
  v76 = v1;
  v34 = *(_QWORD *)(v1 + 8);
  v35 = *(_QWORD *)(v34 + 56);
  v69 = v34 + 56;
  v36 = 1 << *(_BYTE *)(v34 + 32);
  v37 = -1;
  if (v36 < 64)
    v37 = ~(-1 << v36);
  v38 = v37 & v35;
  v70 = (unint64_t)(v36 + 63) >> 6;
  v80 = v34;
  result = swift_bridgeObjectRetain();
  v40 = 0;
  v72 = v28;
  v81 = v23;
  while (1)
  {
    if (v38)
    {
      v41 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      v42 = v41 | (v40 << 6);
      goto LABEL_22;
    }
    v43 = v40 + 1;
    if (__OFADD__(v40, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v43 >= v70)
      goto LABEL_33;
    v44 = *(_QWORD *)(v69 + 8 * v43);
    ++v40;
    if (!v44)
    {
      v40 = v43 + 1;
      if (v43 + 1 >= v70)
        goto LABEL_33;
      v44 = *(_QWORD *)(v69 + 8 * v40);
      if (!v44)
      {
        v40 = v43 + 2;
        if (v43 + 2 >= v70)
          goto LABEL_33;
        v44 = *(_QWORD *)(v69 + 8 * v40);
        if (!v44)
          break;
      }
    }
LABEL_21:
    v38 = (v44 - 1) & v44;
    v42 = __clz(__rbit64(v44)) + (v40 << 6);
LABEL_22:
    v46 = v78;
    (*(void (**)(char *, unint64_t, uint64_t))(v28 + 16))(v78, *(_QWORD *)(v80 + 48) + *(_QWORD *)(v28 + 72) * v42, v27);
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v82, v46, v27);
    v47 = v79;
    WeakTagged_9.tagged6.getter();
    v48 = (uint64_t)v47;
    v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
    v50 = *(_QWORD *)(v49 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v48, &demangling cache variable for type metadata for WeakRef<Shape>?);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v77 + 56))(v23, 1, 1, v24);
LABEL_25:
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v23, &demangling cache variable for type metadata for Shape?);
      goto LABEL_28;
    }
    v51 = v68;
    Canvas.updatablePaper2.getter(v68);
    WeakRef.subscript.getter();
    v52 = v51;
    v28 = v72;
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v52, v74);
    v23 = v81;
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v48, v49);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v23, 1, v24) == 1)
      goto LABEL_25;
    v53 = v65;
    outlined init with take of PKStrokeStruct((uint64_t)v23, v65, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
    CRRegister.wrappedValue.getter();
    if (!v83)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Color?>);
      CRRegister.wrappedValue.getter();
      v63 = *(double *)&v83;

      if (v63 != 0.0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
        CRRegister.wrappedValue.getter();
        v63 = *(double *)&v83;
      }
      outlined destroy of PKStrokeProperties(v53, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v82, v27);
      swift_release();
      return *(_QWORD *)&v63;
    }
    outlined destroy of PKStrokeProperties(v53, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
LABEL_28:
    WeakTagged_9.tagged7.getter();
    v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Signature>);
    v55 = *(_QWORD *)(v54 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v6, 1, v54) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for WeakRef<Signature>?);
    }
    else
    {
      v56 = v66;
      Canvas.updatablePaper2.getter(v66);
      v57 = v6;
      v58 = (uint64_t)v67;
      WeakRef.subscript.getter();
      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v56, v74);
      v59 = v57;
      (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v54);
      v60 = type metadata accessor for Signature();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 48))(v58, 1, v60) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v58, (uint64_t *)&demangling cache variable for type metadata for Signature?);
        v6 = v57;
        v28 = v72;
        v23 = v81;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
        CRRegister.wrappedValue.getter();
        v61 = (uint64_t)v83;
        v62 = v84;
        outlined destroy of PKStrokeProperties(v58, (uint64_t (*)(_QWORD))type metadata accessor for Signature);
        v6 = v59;
        v28 = v72;
        v23 = v81;
        if ((v62 & 1) == 0)
        {
          (*(void (**)(char *, uint64_t))(v72 + 8))(v82, v27);
          swift_release();
          v63 = (double)v61;
          return *(_QWORD *)&v63;
        }
      }
    }
    result = (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v82, v27);
  }
  v45 = v43 + 3;
  if (v45 >= v70)
  {
LABEL_33:
    swift_release();
    v63 = 0.0;
    return *(_QWORD *)&v63;
  }
  v44 = *(_QWORD *)(v69 + 8 * v45);
  if (v44)
  {
    v40 = v45;
    goto LABEL_21;
  }
  while (1)
  {
    v40 = v45 + 1;
    if (__OFADD__(v45, 1))
      break;
    if (v40 >= v70)
      goto LABEL_33;
    v44 = *(_QWORD *)(v69 + 8 * v40);
    ++v45;
    if (v44)
      goto LABEL_21;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t CanvasFormattingProxy.strokeWidth.setter()
{
  return Canvas.undoable(newChange:persistSelection:action:)(1, 0, (uint64_t (*)(double))partial apply for closure #1 in CanvasFormattingProxy.strokeWidth.setter);
}

void closure #1 in CanvasFormattingProxy.strokeWidth.setter()
{
  void *v0;
  id v1;

  v0 = (void *)specialized Canvas.paperView.getter();
  swift_beginAccess();
  type metadata accessor for Capsule();
  v1 = v0;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();

}

uint64_t closure #1 in closure #1 in CanvasFormattingProxy.strokeWidth.setter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  double v38;
  uint64_t result;
  double v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  int64_t v44;
  unint64_t v45;
  int64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(_QWORD *, _QWORD);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(_QWORD *, _QWORD);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  double v84;
  char v85;
  _QWORD v86[5];

  v83 = *(double *)&a3;
  v78 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Signature>?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Signature>);
  v80 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v11);
  v73 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for Shape();
  v67 = *(_QWORD *)(v69 - 8);
  MEMORY[0x1E0C80A78](v69, v13);
  v66 = (uint64_t)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v15, v16);
  v75 = (uint64_t)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
  v81 = *(_QWORD *)(v22 - 8);
  v82 = v22;
  MEMORY[0x1E0C80A78](v22, v23);
  v79 = (char *)&v63 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v27);
  v29 = (char *)&v63 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v31);
  v76 = (char *)&v63 - v32;
  v33 = *(_QWORD *)(a2 + 8);
  v34 = *(_QWORD *)(v33 + 56);
  v70 = v33 + 56;
  v35 = 1 << *(_BYTE *)(v33 + 32);
  v36 = -1;
  if (v35 < 64)
    v36 = ~(-1 << v35);
  v37 = v36 & v34;
  v71 = (unint64_t)(v35 + 63) >> 6;
  if ((a4 & 1) != 0)
    v38 = 0.0;
  else
    v38 = v83;
  v65 = *(_QWORD *)&v38 & 0x7FF0000000000000;
  v64 = (uint64_t)v38;
  v77 = v33;
  result = swift_bridgeObjectRetain();
  v40 = 0.0;
  v68 = v9;
  v74 = v10;
  v72 = v21;
  while (v37)
  {
    v41 = v9;
    v42 = __clz(__rbit64(v37));
    v37 &= v37 - 1;
    v83 = v40;
    v43 = v42 | (*(_QWORD *)&v40 << 6);
LABEL_24:
    v48 = v76;
    (*(void (**)(char *, unint64_t, uint64_t))(v26 + 16))(v76, *(_QWORD *)(v77 + 48) + *(_QWORD *)(v26 + 72) * v43, v25);
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v29, v48, v25);
    WeakTagged_9.tagged6.getter();
    v49 = v81;
    v50 = v82;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v21, 1, v82) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for WeakRef<Shape>?);
      v9 = v41;
LABEL_30:
      WeakTagged_9.tagged7.getter();
      v56 = v80;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v9, 1, v10) == 1)
      {
        (*(void (**)(char *, uint64_t))(v26 + 8))(v29, v25);
        result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for WeakRef<Signature>?);
        v40 = v83;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v73, v9, v10);
        v57 = (void (*)(_QWORD *, _QWORD))WeakRef.subscript.modify();
        v59 = v58;
        v60 = type metadata accessor for Signature();
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 48))(v59, 1, v60);
        if (!(_DWORD)result)
        {
          if (v65 == 0x7FF0000000000000)
            goto LABEL_42;
          if (v38 <= -9.22337204e18)
            goto LABEL_43;
          if (v38 >= 9.22337204e18)
            goto LABEL_44;
          v84 = *(double *)&v64;
          v85 = 0;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Int?>);
          CRRegister.wrappedValue.setter();
        }
        v57(v86, 0);
        v9 = v68;
        v10 = v74;
        v21 = v72;
        v40 = v83;
        (*(void (**)(char *, uint64_t))(v80 + 8))(v73, v74);
        result = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v29, v25);
      }
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v79, v21, v50);
      v51 = v75;
      WeakRef.subscript.getter();
      v52 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
      if (v52(v51, 1, v69))
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v75, &demangling cache variable for type metadata for Shape?);
        v9 = v41;
LABEL_29:
        (*(void (**)(char *, uint64_t))(v81 + 8))(v79, v82);
        v10 = v74;
        goto LABEL_30;
      }
      v53 = v75;
      v54 = v66;
      outlined init with copy of PKStrokeProperties(v75, v66, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      outlined destroy of StocksKitCurrencyCache.Provider?(v53, &demangling cache variable for type metadata for Shape?);
      type metadata accessor for ShapeSecondaryProperties();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementAutoresizeBehavior>);
      CRRegister.wrappedValue.getter();
      v55 = v86[0];
      v21 = v72;
      outlined destroy of PKStrokeProperties(v54, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      v9 = v41;
      if (v55)
        goto LABEL_29;
      v61 = (void (*)(_QWORD *, _QWORD))WeakRef.subscript.modify();
      if (!v52(v62, 1, v69))
      {
        v84 = v38;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
        CRRegister.wrappedValue.setter();
      }
      v61(v86, 0);
      v10 = v74;
      v21 = v72;
      v40 = v83;
      (*(void (**)(char *, uint64_t))(v81 + 8))(v79, v82);
      result = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v29, v25);
      v9 = v68;
    }
  }
  v44 = *(_QWORD *)&v40 + 1;
  if (__OFADD__(*(_QWORD *)&v40, 1))
  {
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v44 >= v71)
    return swift_release();
  v45 = *(_QWORD *)(v70 + 8 * v44);
  v46 = *(_QWORD *)&v40 + 1;
  if (v45)
    goto LABEL_23;
  v46 = *(_QWORD *)&v40 + 2;
  if (*(_QWORD *)&v40 + 2 >= v71)
    return swift_release();
  v45 = *(_QWORD *)(v70 + 8 * v46);
  if (v45)
    goto LABEL_23;
  v46 = *(_QWORD *)&v40 + 3;
  if (*(_QWORD *)&v40 + 3 >= v71)
    return swift_release();
  v45 = *(_QWORD *)(v70 + 8 * v46);
  if (v45)
  {
LABEL_23:
    v41 = v9;
    v37 = (v45 - 1) & v45;
    v83 = *(double *)&v46;
    v43 = __clz(__rbit64(v45)) + (v46 << 6);
    goto LABEL_24;
  }
  v47 = *(_QWORD *)&v40 + 4;
  if (*(_QWORD *)&v40 + 4 >= v71)
    return swift_release();
  v45 = *(_QWORD *)(v70 + 8 * v47);
  if (v45)
  {
    v46 = *(_QWORD *)&v40 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v46 = v47 + 1;
    if (__OFADD__(v47, 1))
      break;
    if (v46 >= v71)
      return swift_release();
    v45 = *(_QWORD *)(v70 + 8 * v46);
    ++v47;
    if (v45)
      goto LABEL_23;
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t closure #1 in CanvasFormattingProxy.strokeIsRequired.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;

  v49 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v8 = *(_QWORD *)(v7 - 8);
  v42 = v7;
  v43 = v8;
  MEMORY[0x1E0C80A78](v7, v9);
  v41 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = *(_QWORD *)(a4 + 16);
  v48 = a3;
  v11 = type metadata accessor for Capsule();
  v45 = *(_QWORD *)(v11 - 8);
  v46 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v44 = (uint64_t)&v41 - v13;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v24);
  v26 = (char *)&v41 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Signature>?);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v41 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  WeakTagged_9.tagged7.getter();
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Signature>);
  v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v30, 1, v31);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v30, &demangling cache variable for type metadata for WeakRef<Signature>?);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v26, a1, v22);
  if (v32 == 1)
  {
    WeakTagged_9.tagged6.getter();
    v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
    v34 = *(_QWORD *)(v33 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v17, 1, v33) == 1)
    {
      (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v22);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, &demangling cache variable for type metadata for WeakRef<Shape>?);
      v35 = 0;
    }
    else
    {
      v36 = v44;
      Canvas.updatablePaper2.getter(v44);
      WeakRef.subscript.getter();
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v36, v46);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v17, v33);
      v37 = type metadata accessor for Shape();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v21, 1, v37) == 1)
      {
        (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v22);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for Shape?);
        v35 = 0;
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
        v38 = v41;
        CRRegister.wrappedValue.getter();
        v39 = v42;
        TaggedValue_9.tagged3.getter();
        (*(void (**)(char *, uint64_t))(v43 + 8))(v38, v39);
        v35 = v50 ^ 1;
        (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v22);
        outlined destroy of PKStrokeProperties((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      }
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v22);
    v35 = 1;
  }
  return v35 & 1;
}

void CanvasFormattingProxy.defaultEmptyTextBoxAttribues(for:)()
{
  double v0;
  char v1;
  uint64_t v2;
  uint64_t v3;

  type metadata accessor for Shape();
  type metadata accessor for ShapeSecondaryProperties();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<ShapeAuxiliaryInfo?>);
  CRRegister.wrappedValue.getter();
  if (v3)
    swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type FormContentType and conformance FormContentType();
  v0 = 1.0;
  if ((static CRExtensible.== infix(_:_:)() & 1) != 0)
  {
    Canvas.screenScaleOverride.getter();
    if ((v1 & 1) != 0)
      v0 = AnyCanvas.scaleFactorForNewElements.getter();
  }
  if (one-time initialization token for defaultTextBoxAttributes != -1)
    swift_once();
  v2 = static UIConstants.defaultTextBoxAttributes;
  swift_bridgeObjectRetain();
  Dictionary<>.scaleBy(_:)(v0);
  CRAttributedString.Attributes<>.init(nsAttributes:darkMode:)(v2, 0);
}

uint64_t CanvasFormattingProxy.fontName.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t result;
  int64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v74 = *(_QWORD *)(v82 - 8);
  MEMORY[0x1E0C80A78](v82, v7);
  v73 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v79 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  v80 = v9;
  v10 = type metadata accessor for Capsule();
  v77 = *(_QWORD *)(v10 - 8);
  v78 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v76 = (uint64_t)&v71 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Shape();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v23);
  v72 = (uint64_t)&v71 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v27);
  v29 = (char *)&v71 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30, v31);
  v86 = (char *)&v71 - v32;
  v81 = v1;
  v33 = *(_QWORD *)(v1 + 8);
  v34 = *(_QWORD *)(v33 + 56);
  v83 = v33 + 56;
  v35 = 1 << *(_BYTE *)(v33 + 32);
  v36 = -1;
  if (v35 < 64)
    v36 = ~(-1 << v35);
  v37 = v36 & v34;
  v84 = (unint64_t)(v35 + 63) >> 6;
  v87 = v33;
  result = swift_bridgeObjectRetain();
  v39 = 0;
  v71 = v6;
  v85 = v29;
  v75 = v22;
  while (1)
  {
    if (v37)
    {
      v88 = (v37 - 1) & v37;
      v89 = v39;
      v42 = __clz(__rbit64(v37)) | (v39 << 6);
      goto LABEL_23;
    }
    v43 = v39 + 1;
    if (__OFADD__(v39, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v43 >= v84)
      goto LABEL_31;
    v44 = *(_QWORD *)(v83 + 8 * v43);
    v45 = v39 + 1;
    if (!v44)
    {
      v45 = v39 + 2;
      if (v39 + 2 >= v84)
        goto LABEL_31;
      v44 = *(_QWORD *)(v83 + 8 * v45);
      if (!v44)
      {
        v45 = v39 + 3;
        if (v39 + 3 >= v84)
          goto LABEL_31;
        v44 = *(_QWORD *)(v83 + 8 * v45);
        if (!v44)
          break;
      }
    }
LABEL_22:
    v88 = (v44 - 1) & v44;
    v89 = v45;
    v42 = __clz(__rbit64(v44)) + (v45 << 6);
LABEL_23:
    v47 = v86;
    (*(void (**)(char *, unint64_t, uint64_t))(v26 + 16))(v86, *(_QWORD *)(v87 + 48) + *(_QWORD *)(v26 + 72) * v42, v25);
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v29, v47, v25);
    WeakTagged_9.tagged6.getter();
    v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
    v49 = *(_QWORD *)(v48 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v16, 1, v48) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for WeakRef<Shape>?);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v20, 1, 1, v21);
LABEL_5:
      v29 = v85;
      (*(void (**)(char *, uint64_t))(v26 + 8))(v85, v25);
      v40 = (uint64_t)v20;
      v41 = &demangling cache variable for type metadata for Shape?;
      goto LABEL_6;
    }
    v50 = v21;
    v51 = v26;
    v52 = v25;
    v53 = v6;
    v54 = v76;
    Canvas.updatablePaper2.getter(v76);
    WeakRef.subscript.getter();
    v55 = v54;
    v6 = v53;
    v25 = v52;
    v26 = v51;
    v21 = v50;
    v22 = v75;
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v55, v78);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v16, v48);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
      goto LABEL_5;
    v56 = v72;
    outlined init with take of PKStrokeStruct((uint64_t)v20, v72, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v73, v56 + *(int *)(v21 + 52), v82);
    v57 = (void *)CRAttributedString.attributedString.getter();
    v58 = objc_msgSend(v57, sel_string);

    v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v61 = v60;

    if (v59 || v61 != 0xE000000000000000)
    {
      v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v74 + 8))(v73, v82);
      v6 = v71;
      if ((v62 & 1) == 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRAttributedString<TextAttributeScope>.Runs>);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
        v67 = swift_allocObject();
        *(_OWORD *)(v67 + 16) = xmmword_1DDF32CF0;
        CRAttributedString.runs.getter();
        v65 = Array<A>.fontName.getter(v67);
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
        outlined destroy of PKStrokeProperties(v72, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        (*(void (**)(char *, uint64_t))(v26 + 8))(v85, v25);
        goto LABEL_40;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v74 + 8))(v73, v82);
      v6 = v71;
    }
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
    CRRegister.wrappedValue.getter();
    v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    v64 = *(_QWORD *)(v63 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v6, 1, v63) != 1)
    {
      swift_getKeyPath();
      lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
      CRAttributedString.Attributes.subscript.getter();
      swift_release();
      v66 = v91;
      if (v91 == 1)
      {
        v65 = 0x63697465766C6548;
      }
      else
      {
        v69 = v92;
        v68 = v93;
        v70 = v90;
        swift_bridgeObjectRetain();
        outlined consume of Font?(v70, v66);
        if (v68)
          v65 = v69;
        else
          v65 = 0x63697465766C6548;
        v6 = v71;
      }
      outlined destroy of PKStrokeProperties(v72, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v85, v25);
      (*(void (**)(char *, uint64_t))(v64 + 8))(v6, v63);
      goto LABEL_40;
    }
    outlined destroy of PKStrokeProperties(v72, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    v29 = v85;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v85, v25);
    v40 = (uint64_t)v6;
    v41 = &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?;
LABEL_6:
    result = outlined destroy of StocksKitCurrencyCache.Provider?(v40, v41);
    v37 = v88;
    v39 = v89;
  }
  v46 = v39 + 4;
  if (v39 + 4 >= v84)
  {
LABEL_31:
    v65 = 0;
LABEL_40:
    swift_release();
    return v65;
  }
  v44 = *(_QWORD *)(v83 + 8 * v46);
  if (v44)
  {
    v45 = v39 + 4;
    goto LABEL_22;
  }
  while (1)
  {
    v45 = v46 + 1;
    if (__OFADD__(v46, 1))
      break;
    if (v45 >= v84)
      goto LABEL_31;
    v44 = *(_QWORD *)(v83 + 8 * v45);
    ++v46;
    if (v44)
      goto LABEL_22;
  }
LABEL_42:
  __break(1u);
  return result;
}

void closure #1 in CanvasFormattingProxy.fontName.setter()
{
  void *v0;
  id v1;

  v0 = (void *)specialized Canvas.paperView.getter();
  swift_beginAccess();
  type metadata accessor for Capsule();
  v1 = v0;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();

}

uint64_t closure #1 in closure #1 in CanvasFormattingProxy.fontName.setter(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int64_t v64;
  unint64_t v65;
  unint64_t v66;
  int64_t v67;
  unint64_t v68;
  int64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *);
  uint64_t v81;
  void *v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  void (*v89)(char *, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t KeyPath;
  void *v94;
  void (*v95)(__int128 *, _QWORD);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  id v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  void (*v106)(char *, uint64_t);
  char *v107;
  char *v108;
  void (*v109)(char *, uint64_t);
  void *v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  id v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  id v125;
  uint64_t v126;
  void *v127;
  void *v128;
  double v129;
  double v130;
  id v131;
  unsigned __int8 v132;
  uint64_t v133;
  float v134;
  void *v135;
  uint64_t v136;
  Swift::String v137;
  Swift::Bool v138;
  Swift::String v139;
  Swift::Bool v140;
  Swift::String v141;
  uint64_t v142;
  void *v143;
  id v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  Swift::String v149;
  Swift::Bool v150;
  id v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  void (*v158)(__int128 *, _QWORD);
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t result;
  char *v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  unint64_t v186;
  void (*v187)(char *, uint64_t);
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int (*v196)(uint64_t, uint64_t, uint64_t);
  uint64_t v197;
  char *v198;
  uint64_t v199;
  int64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  int64_t v208;
  __int128 v209;
  __int128 v210;
  float v211;
  uint64_t v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  uint64_t v216;

  v174 = a6;
  v173 = a5;
  v181 = a4;
  v185 = a3;
  v204 = a1;
  v171 = *a1;
  v197 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  v194 = *(_QWORD *)(v197 - 8);
  MEMORY[0x1E0C80A78](v197, v7);
  v188 = (char *)&v166 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v9, v10);
  v179 = (char *)&v166 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v170 = (uint64_t)&v166 - v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v169 = (uint64_t)&v166 - v17;
  MEMORY[0x1E0C80A78](v18, v19);
  v168 = (char *)&v166 - v20;
  v180 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v193 = *(_QWORD *)(v180 - 8);
  MEMORY[0x1E0C80A78](v180, v21);
  v167 = (char *)&v166 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v166 = (char *)&v166 - v25;
  MEMORY[0x1E0C80A78](v26, v27);
  v175 = (char *)&v166 - v28;
  MEMORY[0x1E0C80A78](v29, v30);
  v192 = (char *)&v166 - v31;
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v166 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for Shape();
  v191 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36, v37);
  v177 = (uint64_t)&v166 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v39, v40);
  v201 = (uint64_t)&v166 - v41;
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v42, v43);
  v45 = (char *)&v166 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v207 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
  v46 = *(_QWORD *)(v207 - 8);
  MEMORY[0x1E0C80A78](v207, v47);
  v49 = (char *)&v166 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v51 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50, v52);
  MEMORY[0x1E0C80A78](v53, v54);
  v205 = (char *)&v166 - v55;
  v172 = a2;
  v56 = *(_QWORD *)(a2 + 8);
  v57 = (uint64_t)v35;
  v59 = v58;
  v60 = *(_QWORD *)(v56 + 56);
  v199 = v56 + 56;
  v61 = 1 << *(_BYTE *)(v56 + 32);
  v62 = -1;
  if (v61 < 64)
    v62 = ~(-1 << v61);
  v63 = v62 & v60;
  v200 = (unint64_t)(v61 + 63) >> 6;
  v206 = v56;
  swift_bridgeObjectRetain();
  v64 = 0;
  v202 = v36;
  v178 = v57;
  v198 = v45;
  v176 = v46;
  v184 = v49;
  v203 = v51;
  v190 = v50;
  v189 = v59;
  while (v63)
  {
    v65 = __clz(__rbit64(v63));
    v63 &= v63 - 1;
    v208 = v64;
    v66 = v65 | (v64 << 6);
LABEL_21:
    v71 = v205;
    (*(void (**)(char *, unint64_t, uint64_t))(v51 + 16))(v205, *(_QWORD *)(v206 + 48) + *(_QWORD *)(v51 + 72) * v66, v50);
    (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v59, v71, v50);
    v72 = v50;
    v73 = v59;
    WeakTagged_9.tagged6.getter();
    v74 = v207;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v45, 1, v207) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v73, v72);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v45, &demangling cache variable for type metadata for WeakRef<Shape>?);
      v59 = v73;
      v50 = v72;
      v64 = v208;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v49, v45, v74);
      v75 = v74;
      WeakRef.subscript.getter();
      v76 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v191 + 48);
      v77 = v202;
      if (v76(v57, 1, v202) == 1)
      {
        (*(void (**)(char *, uint64_t))(v46 + 8))(v49, v75);
        v51 = v203;
        v59 = v189;
        v50 = v190;
        (*(void (**)(uint64_t, uint64_t))(v203 + 8))(v189, v190);
        outlined destroy of StocksKitCurrencyCache.Provider?(v57, &demangling cache variable for type metadata for Shape?);
        v64 = v208;
      }
      else
      {
        v196 = v76;
        v78 = v57;
        v79 = v201;
        outlined init with take of PKStrokeStruct(v78, v201, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        v80 = *(void (**)(char *))(v193 + 16);
        v195 = v79 + *(int *)(v77 + 52);
        v81 = v180;
        v80(v192);
        v82 = (void *)CRAttributedString.attributedString.getter();
        v83 = objc_msgSend(v82, sel_string);

        v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v86 = v85;

        if (v84 || v86 != 0xE000000000000000)
        {
          v88 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          v89 = *(void (**)(char *, uint64_t))(v193 + 8);
          v89(v192, v81);
          v87 = v197;
          if ((v88 & 1) == 0)
          {
            v187 = v89;
            v90 = v77;
            v91 = v81;
            v92 = CRAttributedString.count.getter();
            KeyPath = swift_getKeyPath();
            v94 = v181;
            swift_bridgeObjectRetain();
            v95 = (void (*)(__int128 *, _QWORD))WeakRef.subscript.modify();
            v97 = v96;
            if (v196(v96, 1, v90) == 1)
              goto LABEL_78;
            v98 = v97 + *(int *)(v90 + 52);
            swift_bridgeObjectRetain();
            specialized CRAttributedString<>.updateAttribute<A>(in:newValue:keypath:)(0, v92, KeyPath, v98, v185, v94);
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease_n();
            v99 = v98;
            ((void (*)(char *, uint64_t, uint64_t))v80)(v175, v98, v91);
            v100 = (void *)CRAttributedString.attributedString.getter();
            v101 = objc_msgSend(v100, sel_string);

            v102 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v104 = v103;

            if (v102 || v104 != 0xE000000000000000)
            {
              v105 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              v106 = v187;
              v187(v175, v91);
              v87 = v197;
              if ((v105 & 1) == 0)
              {
                v107 = v166;
                ((void (*)(char *, uint64_t, uint64_t))v80)(v166, v99, v91);
                v108 = v167;
                ((void (*)(char *, uint64_t, uint64_t))v80)(v167, v99, v91);
                v109 = v106;
                v110 = (void *)CRAttributedString.attributedString.getter();
                v109(v108, v91);
                v111 = objc_msgSend(v110, sel_length);

                if (__OFSUB__(v111, 1))
                  goto LABEL_77;
                v112 = (uint64_t)v168;
                CRAttributedString.attributes(at:effectiveRange:)();
                v109(v107, v91);
                v87 = v197;
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v194 + 56))(v112, 0, 1, v197);
                v113 = v169;
                outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v112, v169);
                outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v113, v170);
                type metadata accessor for ShapeSecondaryProperties();
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
                CRRegister.wrappedValue.setter();
                outlined destroy of StocksKitCurrencyCache.Provider?(v113, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
                outlined destroy of StocksKitCurrencyCache.Provider?(v112, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              v187(v175, v91);
              v87 = v197;
            }
            v95(&v213, 0);
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v193 + 8))(v192, v81);
          v87 = v197;
        }
        v114 = type metadata accessor for ShapeSecondaryProperties();
        v115 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
        v116 = (uint64_t)v179;
        CRRegister.wrappedValue.getter();
        v117 = v177;
        outlined init with copy of PKStrokeProperties(v201, v177, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        v118 = v194;
        v119 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v194 + 48))(v116, 1, v87);
        v182 = v115;
        if (v119 == 1)
        {
          type metadata accessor for CanvasFormattingProxy(0, *(_QWORD *)(v171 + *MEMORY[0x1E0D12A70]), v173, v174);
          CanvasFormattingProxy.defaultEmptyTextBoxAttribues(for:)();
          outlined destroy of PKStrokeProperties(v117, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
          outlined destroy of StocksKitCurrencyCache.Provider?(v116, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
        }
        else
        {
          outlined destroy of PKStrokeProperties(v117, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
          (*(void (**)(char *, uint64_t, uint64_t))(v118 + 32))(v188, v116, v87);
        }
        v51 = v203;
        v187 = (void (*)(char *, uint64_t))swift_getKeyPath();
        swift_getKeyPath();
        v186 = lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
        CRAttributedString.Attributes.subscript.getter();
        swift_release();
        v120 = *((_QWORD *)&v209 + 1);
        v45 = v198;
        v183 = v114;
        if (*((_QWORD *)&v209 + 1) == 1)
        {
          if (one-time initialization token for textBoxDefaultFont != -1)
            swift_once();
          v121 = (id)static UIConstants.textBoxDefaultFont;
          v122 = objc_msgSend(v121, sel_fontName);
          v123 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v120 = v124;

          v125 = objc_msgSend(v121, sel_familyName);
          v126 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v128 = v127;

          objc_msgSend(v121, sel_pointSize);
          v130 = v129;
          v131 = objc_msgSend(v121, sel_fontDescriptor);
          v132 = objc_msgSend(v131, sel_symbolicTraits);

          if ((v132 & 1) != 0)
          {
            swift_beginAccess();
            v133 = static Font.Traits.italic;
          }
          else
          {
            v133 = 0;
          }
          v51 = v203;
          if ((v132 & 2) != 0)
          {
            swift_beginAccess();
            v136 = static Font.Traits.bold;
            if ((static Font.Traits.bold & ~v133) == 0)
              v136 = 0;
            v133 |= v136;
          }
          swift_bridgeObjectRetain();
          v137._countAndFlagsBits = 46;
          v137._object = (void *)0xE100000000000000;
          v138 = String.hasPrefix(_:)(v137);
          swift_bridgeObjectRelease();
          if (v138)
          {
            swift_bridgeObjectRelease();
            v123 = 0;
            v120 = 0;
          }
          v134 = v130;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v139._countAndFlagsBits = 46;
          v139._object = (void *)0xE100000000000000;
          v140 = String.hasPrefix(_:)(v139);
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          if (!v140)
          {
            *(_QWORD *)&v213 = v123;
            *((_QWORD *)&v213 + 1) = v120;
            *(_QWORD *)&v214 = v126;
            *((_QWORD *)&v214 + 1) = v128;
            *(float *)&v215 = v134;
            v216 = v133;
            v135 = v181;
            v45 = v198;
LABEL_56:
            if (v126 == v185 && v128 == v135 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              goto LABEL_70;
            goto LABEL_59;
          }
          swift_bridgeObjectRelease();
          *(_QWORD *)&v213 = v123;
          *((_QWORD *)&v213 + 1) = v120;
          *(float *)&v215 = v134;
          v216 = v133;
          v135 = v181;
        }
        else
        {
          v128 = (void *)*((_QWORD *)&v210 + 1);
          v126 = v210;
          v123 = v209;
          *(float *)&v215 = v211;
          v134 = v211;
          v213 = v209;
          v214 = v210;
          v133 = v212;
          v216 = v212;
          v135 = v181;
          if (*((_QWORD *)&v210 + 1))
            goto LABEL_56;
        }
LABEL_59:
        swift_bridgeObjectRetain();
        v141._countAndFlagsBits = 46;
        v141._object = (void *)0xE100000000000000;
        v142 = v185;
        v143 = v135;
        if (String.hasPrefix(_:)(v141))
        {
          swift_bridgeObjectRelease();
          v142 = 0;
          v143 = 0;
        }
        swift_bridgeObjectRelease();
        *(_QWORD *)&v214 = v142;
        *((_QWORD *)&v214 + 1) = v143;
        *(_QWORD *)&v209 = v123;
        *((_QWORD *)&v209 + 1) = v120;
        *(_QWORD *)&v210 = v142;
        *((_QWORD *)&v210 + 1) = v143;
        v211 = v134;
        v212 = v133;
        v144 = Font.platformFont.getter();
        v145 = objc_msgSend(v144, sel_fontName);

        v146 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v148 = v147;

        v45 = v198;
        if (v120 && (v146 == v123 && v120 == v148 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRetain();
          v149._countAndFlagsBits = 46;
          v149._object = (void *)0xE100000000000000;
          v150 = String.hasPrefix(_:)(v149);
          swift_bridgeObjectRelease();
          if (v150)
          {
            swift_bridgeObjectRelease();
            v146 = 0;
            v148 = 0;
          }
          swift_bridgeObjectRelease();
          *(_QWORD *)&v213 = v146;
          *((_QWORD *)&v213 + 1) = v148;
          *(_QWORD *)&v209 = v146;
          *((_QWORD *)&v209 + 1) = v148;
          *(_QWORD *)&v210 = v142;
          *((_QWORD *)&v210 + 1) = v143;
          v211 = v134;
          v212 = v133;
          v151 = Font.platformFont.getter();
          v152 = objc_msgSend(v151, sel_familyName);

          v153 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v155 = v154;

          Font.familyName.setter(v153, v155);
          v45 = v198;
        }
        v51 = v203;
LABEL_70:
        v195 = v63;
        v215 = v215;
        v156 = v197;
        v157 = v188;
        CRAttributedString.Attributes.subscript.setter();
        v49 = v184;
        v158 = (void (*)(__int128 *, _QWORD))WeakRef.subscript.modify();
        if (v196(v159, 1, v202))
        {
          v158(&v213, 0);
          v160 = v194;
        }
        else
        {
          v160 = v194;
          v161 = (uint64_t)v168;
          (*(void (**)(char *, char *, uint64_t))(v194 + 16))(v168, v157, v156);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v160 + 56))(v161, 0, 1, v156);
          v162 = v169;
          outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v161, v169);
          outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v162, v170);
          CRRegister.wrappedValue.setter();
          v163 = v162;
          v49 = v184;
          outlined destroy of StocksKitCurrencyCache.Provider?(v163, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
          v164 = v161;
          v45 = v198;
          outlined destroy of StocksKitCurrencyCache.Provider?(v164, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
          v158(&v213, 0);
        }
        (*(void (**)(char *, uint64_t))(v160 + 8))(v157, v156);
        outlined destroy of PKStrokeProperties(v201, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        v46 = v176;
        (*(void (**)(char *, uint64_t))(v176 + 8))(v49, v207);
        v59 = v189;
        v50 = v190;
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v189, v190);
        v57 = v178;
        v64 = v208;
        v63 = v195;
      }
    }
  }
  v67 = v64 + 1;
  if (__OFADD__(v64, 1))
  {
    __break(1u);
    goto LABEL_76;
  }
  if (v67 >= v200)
    return swift_release();
  v68 = *(_QWORD *)(v199 + 8 * v67);
  v69 = v64 + 1;
  if (v68)
    goto LABEL_20;
  v69 = v64 + 2;
  if (v64 + 2 >= v200)
    return swift_release();
  v68 = *(_QWORD *)(v199 + 8 * v69);
  if (v68)
    goto LABEL_20;
  v69 = v64 + 3;
  if (v64 + 3 >= v200)
    return swift_release();
  v68 = *(_QWORD *)(v199 + 8 * v69);
  if (v68)
  {
LABEL_20:
    v63 = (v68 - 1) & v68;
    v208 = v69;
    v66 = __clz(__rbit64(v68)) + (v69 << 6);
    goto LABEL_21;
  }
  v70 = v64 + 4;
  if (v64 + 4 >= v200)
    return swift_release();
  v68 = *(_QWORD *)(v199 + 8 * v70);
  if (v68)
  {
    v69 = v64 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v69 = v70 + 1;
    if (__OFADD__(v70, 1))
      break;
    if (v69 >= v200)
      return swift_release();
    v68 = *(_QWORD *)(v199 + 8 * v69);
    ++v70;
    if (v68)
      goto LABEL_20;
  }
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

id CanvasFormattingProxy.fontSize.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  unint64_t i;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id result;
  double v58;
  id v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v3, v4);
  v61 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v63 = *(_QWORD *)(v71 - 8);
  MEMORY[0x1E0C80A78](v71, v6);
  v62 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  v68 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  v69 = v8;
  v9 = type metadata accessor for Capsule();
  v66 = *(_QWORD *)(v9 - 8);
  v67 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v65 = (uint64_t)&v61 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for Shape();
  v76 = *(_QWORD *)(v78 - 8);
  MEMORY[0x1E0C80A78](v78, v20);
  v64 = (uint64_t)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22, v24);
  v26 = (char *)&v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v75 = (char *)&v61 - v29;
  v70 = v1;
  v30 = *(_QWORD *)(v1 + 8);
  v31 = *(_QWORD *)(v30 + 56);
  v72 = v30 + 56;
  v32 = 1 << *(_BYTE *)(v30 + 32);
  v33 = -1;
  if (v32 < 64)
    v33 = ~(-1 << v32);
  v34 = v33 & v31;
  v73 = (unint64_t)(v32 + 63) >> 6;
  v77 = v30;
  swift_bridgeObjectRetain();
  v35 = 0;
  v74 = v26;
  if (v34)
    goto LABEL_7;
LABEL_8:
  v38 = v35 + 1;
  if (__OFADD__(v35, 1))
  {
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    swift_once();
LABEL_32:
    result = objc_msgSend((id)static UIConstants.textBoxDefaultFont, sel_pointSize);
    if ((~*(_QWORD *)&v58 & 0x7FF0000000000000) != 0)
    {
      if (v58 > -9.22337204e18)
      {
        if (v58 < 9.22337204e18)
          return (id)(uint64_t)v58;
        goto LABEL_45;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_45:
    __break(1u);
    return result;
  }
  if (v38 >= v73)
  {
LABEL_31:
    swift_release();
    if (one-time initialization token for textBoxDefaultFont == -1)
      goto LABEL_32;
    goto LABEL_42;
  }
  v39 = *(_QWORD *)(v72 + 8 * v38);
  ++v35;
  if (!v39)
  {
    v35 = v38 + 1;
    if (v38 + 1 >= v73)
      goto LABEL_31;
    v39 = *(_QWORD *)(v72 + 8 * v35);
    if (!v39)
    {
      v35 = v38 + 2;
      if (v38 + 2 >= v73)
        goto LABEL_31;
      v39 = *(_QWORD *)(v72 + 8 * v35);
      if (!v39)
      {
        v40 = v38 + 3;
        if (v40 < v73)
        {
          v39 = *(_QWORD *)(v72 + 8 * v40);
          if (v39)
          {
            v35 = v40;
            goto LABEL_21;
          }
          while (1)
          {
            v35 = v40 + 1;
            if (__OFADD__(v40, 1))
              goto LABEL_41;
            if (v35 >= v73)
              goto LABEL_31;
            v39 = *(_QWORD *)(v72 + 8 * v35);
            ++v40;
            if (v39)
              goto LABEL_21;
          }
        }
        goto LABEL_31;
      }
    }
  }
LABEL_21:
  v34 = (v39 - 1) & v39;
  for (i = __clz(__rbit64(v39)) + (v35 << 6); ; i = v36 | (v35 << 6))
  {
    v41 = v75;
    (*(void (**)(char *, unint64_t, uint64_t))(v23 + 16))(v75, *(_QWORD *)(v77 + 48) + *(_QWORD *)(v23 + 72) * i, v22);
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v26, v41, v22);
    WeakTagged_9.tagged6.getter();
    v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
    v43 = *(_QWORD *)(v42 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v15, 1, v42) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v15, &demangling cache variable for type metadata for WeakRef<Shape>?);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v76 + 56))(v19, 1, 1, v78);
LABEL_6:
      v26 = v74;
      (*(void (**)(char *, uint64_t))(v23 + 8))(v74, v22);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v19, &demangling cache variable for type metadata for Shape?);
      if (!v34)
        goto LABEL_8;
      goto LABEL_7;
    }
    v44 = (uint64_t)v19;
    v45 = v65;
    Canvas.updatablePaper2.getter(v65);
    WeakRef.subscript.getter();
    v46 = v45;
    v19 = (char *)v44;
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v46, v67);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v15, v42);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(v44, 1, v78) == 1)
      goto LABEL_6;
    v47 = v64;
    outlined init with take of PKStrokeStruct(v44, v64, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v62, v47 + *(int *)(v78 + 52), v71);
    v48 = (void *)CRAttributedString.attributedString.getter();
    v49 = objc_msgSend(v48, sel_string);

    v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v52 = v51;

    if (v50 || v52 != 0xE000000000000000)
      break;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v71);
LABEL_28:
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
    v54 = (uint64_t)v61;
    CRRegister.wrappedValue.getter();
    v55 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    v56 = *(_QWORD *)(v55 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55) != 1)
    {
      v59 = CRAttributedString.Attributes<>.fontSize.getter();
      outlined destroy of PKStrokeProperties(v64, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v74, v22);
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v54, v55);
      goto LABEL_38;
    }
    outlined destroy of PKStrokeProperties(v64, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    v26 = v74;
    (*(void (**)(char *, uint64_t))(v23 + 8))(v74, v22);
    outlined destroy of StocksKitCurrencyCache.Provider?(v54, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    v19 = (char *)v44;
    if (!v34)
      goto LABEL_8;
LABEL_7:
    v36 = __clz(__rbit64(v34));
    v34 &= v34 - 1;
  }
  v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v71);
  if ((v53 & 1) != 0)
    goto LABEL_28;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRAttributedString<TextAttributeScope>.Runs>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  v60 = swift_allocObject();
  *(_OWORD *)(v60 + 16) = xmmword_1DDF32CF0;
  CRAttributedString.runs.getter();
  v59 = Array<A>.fontSize.getter(v60);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  outlined destroy of PKStrokeProperties(v64, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v74, v22);
LABEL_38:
  swift_release();
  return v59;
}

uint64_t closure #1 in closure #1 in CanvasFormattingProxy.fontSize.setter(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  float v81;
  uint64_t result;
  int64_t v83;
  unint64_t i;
  int64_t v85;
  unint64_t v86;
  int64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  unsigned int (*v94)(char *, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, uint64_t, uint64_t);
  uint64_t v100;
  void *v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  void (*v108)(char *, uint64_t);
  uint64_t v109;
  uint64_t (*v110)(uint64_t, uint64_t, uint64_t);
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  int v126;
  _QWORD *v127;
  char *v128;
  void *v129;
  id v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  id v136;
  id v137;
  uint64_t v138;
  uint64_t v139;
  id v140;
  uint64_t v141;
  uint64_t v142;
  id v143;
  unsigned __int8 v144;
  uint64_t v145;
  uint64_t v146;
  Swift::String v147;
  Swift::Bool v148;
  Swift::String v149;
  Swift::Bool v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  float v156;
  uint64_t v157;
  uint64_t *v158;
  void (*v159)(char *, _QWORD);
  void (*v160)(char *, _QWORD);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v162;
  unint64_t v163;
  _QWORD *v164;
  int v165;
  char v166;
  void (*v167)(char *, uint64_t);
  char *v168;
  uint64_t v169;
  void (*v170)(char *, uint64_t, uint64_t);
  char *v171;
  void *v172;
  id v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  id v180;
  id v181;
  uint64_t v182;
  uint64_t v183;
  id v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  id v188;
  unsigned __int8 v189;
  uint64_t v190;
  uint64_t v191;
  Swift::String v192;
  Swift::Bool v193;
  Swift::String v194;
  Swift::Bool v195;
  char *v196;
  void (*v197)(__int128 *, _QWORD);
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  char *v206;
  uint64_t v207;
  char *v208;
  char *v209;
  void (*v210)(char *, _QWORD);
  char *v211;
  uint64_t v212;
  uint64_t v213;
  __int128 v214;
  uint64_t *v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void (*v223)(char *, uint64_t);
  void (*v224)(char *, uint64_t, uint64_t);
  uint64_t v225;
  char *v226;
  uint64_t v227;
  char *v228;
  char *v229;
  unsigned int (*v230)(uint64_t, uint64_t, uint64_t);
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  int64_t v239;
  _QWORD *v240;
  uint64_t v241;
  uint64_t v242;
  void (*v243)(char *, char *, uint64_t);
  uint64_t (*v244)(char *, uint64_t, uint64_t);
  char *v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t KeyPath;
  char *v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  _QWORD *v261;
  unint64_t v262;
  char *v263;
  char *v264;
  uint64_t v265;
  int64_t v266;
  char v267[8];
  __int128 v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char v273[8];
  uint64_t v274;

  v222 = a5;
  v221 = a4;
  v274 = a3;
  v240 = a1;
  v219 = *a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v231 = (char *)&v203 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v263 = (char *)&v203 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  v249 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v264 = (char *)&v203 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v16, v17);
  v229 = (char *)&v203 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v213 = (uint64_t)&v203 - v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v212 = (uint64_t)&v203 - v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v211 = (char *)&v203 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x1E0C80A78](v28, v29);
  v246 = (char *)&v203 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v247 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
  v207 = *(_QWORD *)(v247 - 8);
  MEMORY[0x1E0C80A78](v247, v31);
  v206 = (char *)&v203 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v253 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  v218 = *(_QWORD *)(v253 - 8);
  MEMORY[0x1E0C80A78](v253, v33);
  v205 = (char *)&v203 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35, v36);
  v252 = (char *)&v203 - v37;
  v257 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v237 = *(_QWORD *)(v257 - 8);
  MEMORY[0x1E0C80A78](v257, v38);
  v217 = (char *)&v203 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40, v41);
  v204 = (char *)&v203 - v42;
  MEMORY[0x1E0C80A78](v43, v44);
  v209 = (char *)&v203 - v45;
  MEMORY[0x1E0C80A78](v46, v47);
  v236 = (char *)&v203 - v48;
  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v49, v50);
  v208 = (char *)&v203 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v52, v53);
  v55 = (char *)&v203 - v54;
  v242 = type metadata accessor for Shape();
  v235 = *(_QWORD *)(v242 - 8);
  MEMORY[0x1E0C80A78](v242, v56);
  v227 = (uint64_t)&v203 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v58, v59);
  v241 = (uint64_t)&v203 - v60;
  v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v61, v62);
  v64 = (char *)&v203 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  v260 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
  v65 = *(_QWORD *)(v260 - 8);
  MEMORY[0x1E0C80A78](v260, v66);
  v251 = (char *)&v203 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v69 = *(_QWORD *)(v68 - 8);
  MEMORY[0x1E0C80A78](v68, v70);
  MEMORY[0x1E0C80A78](v71, v72);
  v245 = (char *)&v203 - v73;
  v220 = a2;
  v74 = *(_QWORD *)(a2 + 8);
  v76 = v75;
  v77 = *(_QWORD *)(v74 + 56);
  v238 = v74 + 56;
  v78 = 1 << *(_BYTE *)(v74 + 32);
  v79 = -1;
  if (v78 < 64)
    v79 = ~(-1 << v78);
  v80 = v79 & v77;
  v239 = (unint64_t)(v78 + 63) >> 6;
  v81 = (float)v274;
  v256 = COERCE_UNSIGNED_INT((float)v274);
  v215 = &v269;
  v248 = v74;
  result = swift_bridgeObjectRetain();
  v83 = 0;
  v214 = xmmword_1DDF32D00;
  v254 = v6;
  v259 = v7;
  v258 = v13;
  v226 = v64;
  v228 = v55;
  v225 = v65;
  v234 = v68;
  v233 = v69;
  v232 = v76;
  if (v80)
    goto LABEL_7;
LABEL_8:
  v85 = v83 + 1;
  if (__OFADD__(v83, 1))
    goto LABEL_115;
  if (v85 >= v239)
    return swift_release();
  v86 = *(_QWORD *)(v238 + 8 * v85);
  v87 = v83 + 1;
  if (!v86)
  {
    v87 = v83 + 2;
    if (v83 + 2 >= v239)
      return swift_release();
    v86 = *(_QWORD *)(v238 + 8 * v87);
    if (!v86)
    {
      v87 = v83 + 3;
      if (v83 + 3 >= v239)
        return swift_release();
      v86 = *(_QWORD *)(v238 + 8 * v87);
      if (!v86)
      {
        v88 = v83 + 4;
        if (v83 + 4 < v239)
        {
          v86 = *(_QWORD *)(v238 + 8 * v88);
          if (v86)
          {
            v87 = v83 + 4;
            goto LABEL_21;
          }
          while (1)
          {
            v87 = v88 + 1;
            if (__OFADD__(v88, 1))
              goto LABEL_118;
            if (v87 >= v239)
              break;
            v86 = *(_QWORD *)(v238 + 8 * v87);
            ++v88;
            if (v86)
              goto LABEL_21;
          }
        }
        return swift_release();
      }
    }
  }
LABEL_21:
  v265 = (v86 - 1) & v86;
  v266 = v87;
  for (i = __clz(__rbit64(v86)) + (v87 << 6); ; i = __clz(__rbit64(v80)) | (v83 << 6))
  {
    v89 = v245;
    (*(void (**)(char *, unint64_t, uint64_t))(v69 + 16))(v245, *(_QWORD *)(v248 + 48) + *(_QWORD *)(v69 + 72) * i, v68);
    (*(void (**)(uint64_t, char *, uint64_t))(v69 + 32))(v76, v89, v68);
    v90 = v76;
    WeakTagged_9.tagged6.getter();
    v91 = v260;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v64, 1, v260) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v90, v68);
      result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v64, &demangling cache variable for type metadata for WeakRef<Shape>?);
      v76 = v90;
      goto LABEL_6;
    }
    v92 = v251;
    (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v251, v64, v91);
    v93 = v91;
    WeakRef.subscript.getter();
    v94 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v235 + 48);
    v95 = v242;
    if (v94(v55, 1, v242) == 1)
    {
      (*(void (**)(char *, uint64_t))(v65 + 8))(v92, v93);
      v69 = v233;
      v76 = v232;
      v68 = v234;
      (*(void (**)(uint64_t, uint64_t))(v233 + 8))(v232, v234);
      result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v55, &demangling cache variable for type metadata for Shape?);
LABEL_6:
      v83 = v266;
      v80 = v265;
      if (!v265)
        goto LABEL_8;
      goto LABEL_7;
    }
    v96 = (uint64_t)v55;
    v97 = v241;
    outlined init with take of PKStrokeStruct(v96, v241, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    v98 = v97 + *(int *)(v95 + 52);
    v99 = *(void (**)(char *, uint64_t, uint64_t))(v237 + 16);
    v100 = v257;
    v99(v236, v98, v257);
    v101 = (void *)CRAttributedString.attributedString.getter();
    v102 = objc_msgSend(v101, sel_string);

    v103 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v105 = v104;

    v230 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v94;
    if (!v103 && v105 == 0xE000000000000000)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v237 + 8))(v236, v100);
      v106 = v259;
      goto LABEL_87;
    }
    v224 = v99;
    v107 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v108 = *(void (**)(char *, uint64_t))(v237 + 8);
    v108(v236, v100);
    v106 = v259;
    if ((v107 & 1) == 0)
      break;
LABEL_87:
    v274 = type metadata accessor for ShapeSecondaryProperties();
    v176 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
    v177 = (uint64_t)v229;
    v262 = v176;
    CRRegister.wrappedValue.getter();
    v178 = v227;
    outlined init with copy of PKStrokeProperties(v241, v227, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v177, 1, v6) == 1)
    {
      type metadata accessor for CanvasFormattingProxy(0, *(_QWORD *)(v219 + *MEMORY[0x1E0D12A70]), v221, v222);
      CanvasFormattingProxy.defaultEmptyTextBoxAttribues(for:)();
      outlined destroy of PKStrokeProperties(v178, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      outlined destroy of StocksKitCurrencyCache.Provider?(v177, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    }
    else
    {
      outlined destroy of PKStrokeProperties(v178, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      (*(void (**)(char *, uint64_t, uint64_t))(v106 + 32))(v231, v177, v6);
    }
    swift_getKeyPath();
    swift_getKeyPath();
    lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
    CRAttributedString.Attributes.subscript.getter();
    swift_release();
    v179 = *((_QWORD *)&v268 + 1);
    if (*((_QWORD *)&v268 + 1) != 1)
    {
      v190 = v272;
      v185 = v269;
      v187 = v270;
      v182 = v268;
      goto LABEL_106;
    }
    if (one-time initialization token for textBoxDefaultFont != -1)
      swift_once();
    v180 = (id)static UIConstants.textBoxDefaultFont;
    v181 = objc_msgSend(v180, sel_fontName);
    v182 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v179 = v183;

    v184 = objc_msgSend(v180, sel_familyName);
    v185 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v187 = v186;

    objc_msgSend(v180, sel_pointSize);
    v188 = objc_msgSend(v180, sel_fontDescriptor);
    v189 = objc_msgSend(v188, sel_symbolicTraits);

    if ((v189 & 1) != 0)
    {
      swift_beginAccess();
      v190 = static Font.Traits.italic;
      if ((v189 & 2) != 0)
      {
LABEL_98:
        swift_beginAccess();
        v191 = static Font.Traits.bold;
        if ((static Font.Traits.bold & ~v190) == 0)
          v191 = 0;
        v190 |= v191;
      }
    }
    else
    {
      v190 = 0;
      if ((v189 & 2) != 0)
        goto LABEL_98;
    }
    swift_bridgeObjectRetain();
    v192._countAndFlagsBits = 46;
    v192._object = (void *)0xE100000000000000;
    v193 = String.hasPrefix(_:)(v192);
    swift_bridgeObjectRelease();
    if (v193)
    {
      swift_bridgeObjectRelease();
      v182 = 0;
      v179 = 0;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v194._countAndFlagsBits = 46;
    v194._object = (void *)0xE100000000000000;
    v195 = String.hasPrefix(_:)(v194);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    if (v195)
    {
      swift_bridgeObjectRelease();
      v185 = 0;
      v187 = 0;
    }
    v6 = v254;
LABEL_106:
    *(_QWORD *)&v268 = v182;
    *((_QWORD *)&v268 + 1) = v179;
    v269 = v185;
    v270 = v187;
    v271 = v256;
    v272 = v190;
    v196 = v231;
    CRAttributedString.Attributes.subscript.setter();
    v197 = (void (*)(__int128 *, _QWORD))WeakRef.subscript.modify();
    v199 = v6;
    if (v230(v198, 1, v242))
    {
      v197(&v268, 0);
      v200 = v259;
    }
    else
    {
      v200 = v259;
      v201 = (uint64_t)v211;
      (*(void (**)(char *, char *, uint64_t))(v259 + 16))(v211, v196, v199);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v200 + 56))(v201, 0, 1, v199);
      v202 = v212;
      outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v201, v212);
      outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v202, v213);
      CRRegister.wrappedValue.setter();
      outlined destroy of StocksKitCurrencyCache.Provider?(v202, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
      outlined destroy of StocksKitCurrencyCache.Provider?(v201, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
      v197(&v268, 0);
    }
    v65 = v225;
    v68 = v234;
    (*(void (**)(char *, uint64_t))(v200 + 8))(v196, v199);
    outlined destroy of PKStrokeProperties(v241, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v251, v260);
    v69 = v233;
    v76 = v232;
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v233 + 8))(v232, v68);
    v55 = v228;
    v64 = v226;
    v83 = v266;
    v80 = v265;
    v6 = v199;
    if (!v265)
      goto LABEL_8;
LABEL_7:
    v265 = (v80 - 1) & v80;
    v266 = v83;
  }
  v223 = v108;
  v216 = v98;
  v109 = (uint64_t)v208;
  WeakRef.subscript.getter();
  v110 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v94;
  v111 = v242;
  result = v110(v109, 1, v242);
  if ((_DWORD)result == 1)
    goto LABEL_121;
  v112 = v209;
  v113 = v257;
  v224(v209, v109 + *(int *)(v111 + 52), v257);
  outlined destroy of PKStrokeProperties(v109, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  CRAttributedString.count.getter();
  v223(v112, v113);
  KeyPath = swift_getKeyPath();
  v114 = WeakRef.subscript.modify();
  v116 = v115;
  result = v110(v115, 1, v111);
  if ((_DWORD)result != 1)
  {
    v117 = *(int *)(v111 + 52);
    result = NSNotFound.getter();
    v106 = v259;
    v118 = v258;
    if (!result)
      goto LABEL_119;
    v210 = (void (*)(char *, _QWORD))v114;
    v119 = v116 + v117;
    v120 = v206;
    v255 = v119;
    CRAttributedString.subscript.getter();
    v121 = v205;
    v122 = v247;
    CRAttributedString.Substring.runs.getter();
    (*(void (**)(char *, uint64_t))(v207 + 8))(v120, v122);
    v123 = v121;
    v124 = v257;
    (*(void (**)(char *, char *, uint64_t))(v218 + 32))(v252, v123, v253);
    v125 = v246;
    CRAttributedString.Runs.next()();
    v244 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v249 + 48);
    v126 = v244(v125, 1, v118);
    v127 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v128 = v264;
    if (v126 == 1)
    {
LABEL_33:
      (*(void (**)(char *, uint64_t))(v218 + 8))(v252, v253);
      swift_bridgeObjectRelease();
      swift_release();
      v224(v217, v255, v124);
      v129 = (void *)CRAttributedString.attributedString.getter();
      v130 = objc_msgSend(v129, sel_string);

      v131 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v133 = v132;

      if (v131 || v133 != 0xE000000000000000)
      {
        v166 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v167 = v223;
        v223(v217, v124);
        if ((v166 & 1) == 0)
        {
          v168 = v209;
          v169 = v255;
          v170 = v224;
          v224(v209, v255, v124);
          v171 = v204;
          v170(v204, v169, v124);
          v172 = (void *)CRAttributedString.attributedString.getter();
          v167(v171, v124);
          v173 = objc_msgSend(v172, sel_length);

          result = (uint64_t)v173 - 1;
          if (__OFSUB__(v173, 1))
            goto LABEL_120;
          v174 = (uint64_t)v211;
          CRAttributedString.attributes(at:effectiveRange:)();
          v167(v168, v124);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v106 + 56))(v174, 0, 1, v6);
          v175 = v212;
          outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v174, v212);
          outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v175, v213);
          type metadata accessor for ShapeSecondaryProperties();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
          CRRegister.wrappedValue.setter();
          outlined destroy of StocksKitCurrencyCache.Provider?(v175, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
          outlined destroy of StocksKitCurrencyCache.Provider?(v174, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v223(v217, v124);
      }
      v210(v273, 0);
      goto LABEL_87;
    }
    v243 = *(void (**)(char *, char *, uint64_t))(v249 + 32);
    while (1)
    {
      v243(v128, v125, v118);
      CRAttributedString.Runs.Run.attributes.getter();
      swift_getKeyPath();
      v134 = lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
      CRAttributedString.Attributes.subscript.getter();
      swift_release();
      v135 = *((_QWORD *)&v268 + 1);
      v261 = v127;
      v262 = v134;
      if (*((_QWORD *)&v268 + 1) == 1)
      {
        if (one-time initialization token for textBoxDefaultFont != -1)
          swift_once();
        v136 = (id)static UIConstants.textBoxDefaultFont;
        v137 = objc_msgSend(v136, sel_fontName);
        v138 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v135 = v139;

        v140 = objc_msgSend(v136, sel_familyName);
        v274 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v142 = v141;

        objc_msgSend(v136, sel_pointSize);
        v143 = objc_msgSend(v136, sel_fontDescriptor);
        v144 = objc_msgSend(v143, sel_symbolicTraits);

        if ((v144 & 1) != 0)
        {
          swift_beginAccess();
          v145 = static Font.Traits.italic;
        }
        else
        {
          v145 = 0;
        }
        if ((v144 & 2) != 0)
        {
          swift_beginAccess();
          v146 = static Font.Traits.bold;
          if ((static Font.Traits.bold & ~v145) == 0)
            v146 = 0;
          v145 |= v146;
        }
        swift_bridgeObjectRetain();
        v147._countAndFlagsBits = 46;
        v147._object = (void *)0xE100000000000000;
        v148 = String.hasPrefix(_:)(v147);
        swift_bridgeObjectRelease();
        if (v148)
        {
          swift_bridgeObjectRelease();
          v138 = 0;
          v135 = 0;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v149._countAndFlagsBits = 46;
        v149._object = (void *)0xE100000000000000;
        v150 = String.hasPrefix(_:)(v149);
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        if (v150)
        {
          swift_bridgeObjectRelease();
          v274 = 0;
          v142 = 0;
        }
      }
      else
      {
        v145 = v272;
        v142 = v270;
        v274 = v269;
        v138 = v268;
      }
      (*(void (**)(char *, uint64_t))(v106 + 8))(v263, v6);
      result = CRAttributedString.Runs.Run.range.getter();
      v152 = v151 - result;
      if (__OFSUB__(v151, result))
      {
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
        break;
      }
      v153 = result;
      if (one-time initialization token for defaultValue != -1)
        result = swift_once();
      v154 = qword_1F0411B68;
      v155 = qword_1F0411B70;
      v156 = *(float *)&dword_1F0411B78;
      v157 = qword_1F0411B80;
      if (v135)
      {
        if (!qword_1F0411B60)
          goto LABEL_74;
        if (v138 != static TextAttributeScope.FontAttribute.defaultValue || v135 != qword_1F0411B60)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            goto LABEL_74;
        }
      }
      else if (qword_1F0411B60)
      {
        goto LABEL_74;
      }
      if (v142)
      {
        if (!v155)
          goto LABEL_74;
        if (v274 != v154 || v142 != v155)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            goto LABEL_74;
        }
      }
      else if (v155)
      {
        goto LABEL_74;
      }
      if (v156 == v81 && v145 == v157)
      {
        if (__OFADD__(v153, v152))
          goto LABEL_116;
        if (v153 + v152 < v153)
          goto LABEL_117;
        v268 = v214;
        v158 = v215;
        *(_OWORD *)v215 = 0u;
        *((_OWORD *)v158 + 1) = 0u;
        swift_retain();
        v124 = v257;
        v159 = (void (*)(char *, _QWORD))CRAttributedString.subscript.modify();
        CRAttributedString.Substring.subscript.setter();
        v159(v267, 0);
        swift_bridgeObjectRelease();
        goto LABEL_77;
      }
LABEL_74:
      if (__OFADD__(v153, v152))
        goto LABEL_113;
      if (v153 + v152 < v153)
        goto LABEL_114;
      *(_QWORD *)&v268 = v138;
      *((_QWORD *)&v268 + 1) = v135;
      v269 = v274;
      v270 = v142;
      v271 = v256;
      v272 = v145;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      v124 = v257;
      v160 = (void (*)(char *, _QWORD))CRAttributedString.subscript.modify();
      CRAttributedString.Substring.subscript.setter();
      v160(v267, 0);
      swift_bridgeObjectRelease();
LABEL_77:
      swift_bridgeObjectRelease();
      v127 = v261;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v106 = v259;
      v118 = v258;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v127 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v127[2] + 1, 1, v127);
      v163 = v127[2];
      v162 = v127[3];
      if (v163 >= v162 >> 1)
        v127 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v162 > 1), v163 + 1, 1, v127);
      v127[2] = v163 + 1;
      v164 = &v127[2 * v163];
      v164[4] = v153;
      v164[5] = v152;
      v128 = v264;
      (*(void (**)(char *, uint64_t))(v249 + 8))(v264, v118);
      v125 = v246;
      CRAttributedString.Runs.next()();
      v165 = v244(v125, 1, v118);
      v6 = v254;
      if (v165 == 1)
        goto LABEL_33;
    }
  }
  __break(1u);
  return result;
}

uint64_t CanvasFormattingProxy.textAlignment.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t result;
  int64_t v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  int64_t v87;
  uint64_t v88;
  char v89;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v72 = *(_QWORD *)(v80 - 8);
  MEMORY[0x1E0C80A78](v80, v7);
  v71 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v77 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  v78 = v9;
  v10 = type metadata accessor for Capsule();
  v75 = *(_QWORD *)(v10 - 8);
  v76 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v74 = (uint64_t)&v69 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Shape();
  v83 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v22);
  v70 = (uint64_t)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24, v26);
  v28 = (char *)&v69 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v84 = (char *)&v69 - v31;
  v79 = v1;
  v32 = *(_QWORD *)(v1 + 8);
  v33 = *(_QWORD *)(v32 + 56);
  v81 = v32 + 56;
  v34 = 1 << *(_BYTE *)(v32 + 32);
  v35 = -1;
  if (v34 < 64)
    v35 = ~(-1 << v34);
  v36 = v35 & v33;
  v82 = (unint64_t)(v34 + 63) >> 6;
  v85 = v32;
  result = swift_bridgeObjectRetain();
  v38 = 0;
  v69 = v6;
  v73 = v21;
  while (1)
  {
    if (v36)
    {
      v86 = (v36 - 1) & v36;
      v87 = v38;
      v41 = __clz(__rbit64(v36)) | (v38 << 6);
      goto LABEL_23;
    }
    v42 = v38 + 1;
    if (__OFADD__(v38, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v42 >= v82)
      goto LABEL_31;
    v43 = *(_QWORD *)(v81 + 8 * v42);
    v44 = v38 + 1;
    if (!v43)
    {
      v44 = v38 + 2;
      if (v38 + 2 >= v82)
        goto LABEL_31;
      v43 = *(_QWORD *)(v81 + 8 * v44);
      if (!v43)
      {
        v44 = v38 + 3;
        if (v38 + 3 >= v82)
          goto LABEL_31;
        v43 = *(_QWORD *)(v81 + 8 * v44);
        if (!v43)
          break;
      }
    }
LABEL_22:
    v86 = (v43 - 1) & v43;
    v87 = v44;
    v41 = __clz(__rbit64(v43)) + (v44 << 6);
LABEL_23:
    v46 = v84;
    (*(void (**)(char *, unint64_t, uint64_t))(v25 + 16))(v84, *(_QWORD *)(v85 + 48) + *(_QWORD *)(v25 + 72) * v41, v24);
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v28, v46, v24);
    WeakTagged_9.tagged6.getter();
    v47 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
    v48 = *(_QWORD *)(v47 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v16, 1, v47) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for WeakRef<Shape>?);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v83 + 56))(v20, 1, 1, v21);
LABEL_5:
      (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v24);
      v39 = (uint64_t)v20;
      v40 = &demangling cache variable for type metadata for Shape?;
      goto LABEL_6;
    }
    v49 = v25;
    v50 = v24;
    v51 = v28;
    v52 = v6;
    v53 = v74;
    Canvas.updatablePaper2.getter(v74);
    WeakRef.subscript.getter();
    v54 = v53;
    v6 = v52;
    v28 = v51;
    v24 = v50;
    v25 = v49;
    v21 = v73;
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v54, v76);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v16, v47);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v20, 1, v21) == 1)
      goto LABEL_5;
    v55 = v70;
    outlined init with take of PKStrokeStruct((uint64_t)v20, v70, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v71, v55 + *(int *)(v21 + 52), v80);
    v56 = (void *)CRAttributedString.attributedString.getter();
    v57 = objc_msgSend(v56, sel_string);

    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v60 = v59;

    if (v58 || v60 != 0xE000000000000000)
    {
      v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v72 + 8))(v71, v80);
      if ((v61 & 1) == 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRAttributedString<TextAttributeScope>.Runs>);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
        v65 = swift_allocObject();
        *(_OWORD *)(v65 + 16) = xmmword_1DDF32CF0;
        CRAttributedString.runs.getter();
        v66 = Array<A>.textAlignment.getter(v65);
        v68 = v67;
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
        outlined destroy of PKStrokeProperties(v70, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v24);
        swift_release();
        if ((v68 & 1) != 0)
          return 4;
        else
          return v66;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v72 + 8))(v71, v80);
    }
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
    v6 = v69;
    CRRegister.wrappedValue.getter();
    v62 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    v63 = *(_QWORD *)(v62 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v6, 1, v62) != 1)
    {
      swift_getKeyPath();
      lazy protocol witness table accessor for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute();
      CRAttributedString.Attributes.subscript.getter();
      swift_release();
      if (v89)
        v64 = 0;
      else
        v64 = v88;
      outlined destroy of PKStrokeProperties(v70, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v24);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v6, v62);
      swift_release();
      return v64;
    }
    outlined destroy of PKStrokeProperties(v70, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v24);
    v39 = (uint64_t)v6;
    v40 = &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?;
LABEL_6:
    result = outlined destroy of StocksKitCurrencyCache.Provider?(v39, v40);
    v36 = v86;
    v38 = v87;
  }
  v45 = v38 + 4;
  if (v38 + 4 >= v82)
  {
LABEL_31:
    swift_release();
    return 4;
  }
  v43 = *(_QWORD *)(v81 + 8 * v45);
  if (v43)
  {
    v44 = v38 + 4;
    goto LABEL_22;
  }
  while (1)
  {
    v44 = v45 + 1;
    if (__OFADD__(v45, 1))
      break;
    if (v44 >= v82)
      goto LABEL_31;
    v43 = *(_QWORD *)(v81 + 8 * v44);
    ++v45;
    if (v43)
      goto LABEL_22;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t CanvasFormattingProxy.fontSize.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(double))
{
  return Canvas.undoable(newChange:persistSelection:action:)(1, 0, a3);
}

uint64_t closure #1 in closure #1 in CanvasFormattingProxy.textAlignment.setter(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t result;
  int64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  int64_t v71;
  unint64_t v72;
  int64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int (*v79)(char *, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  unsigned int (*v84)(char *, uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *);
  void *v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  void (*v95)(char *, uint64_t);
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(char *, _QWORD);
  void *v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  char *v110;
  uint64_t v111;
  void (*v112)(char *, uint64_t, uint64_t);
  char *v113;
  void *v114;
  id v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t (*v123)(uint64_t, uint64_t, uint64_t);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD v129[2];
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  void (*v134)(uint64_t *, _QWORD);
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(char *, uint64_t, uint64_t);
  uint64_t v144;
  char *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t (*v158)(uint64_t, uint64_t, uint64_t);
  uint64_t v159;
  int64_t v160;
  uint64_t v161;
  _QWORD *v162;
  char *v163;
  uint64_t v164;
  char *v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171[8];
  uint64_t v172;
  char v173;
  uint64_t v174;
  char v175;
  int64_t v176;

  v142 = a5;
  v141 = a4;
  v149 = a3;
  v162 = a1;
  v139 = *a1;
  v148 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  v157 = *(_QWORD *)(v148 - 8);
  MEMORY[0x1E0C80A78](v148, v6);
  v147 = (char *)v129 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v8, v9);
  v146 = (char *)v129 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v137 = (uint64_t)v129 - v13;
  MEMORY[0x1E0C80A78](v14, v15);
  v136 = (uint64_t)v129 - v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v135 = (char *)v129 - v19;
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v155 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v21);
  v129[0] = (char *)v129 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v138 = (char *)v129 - v25;
  MEMORY[0x1E0C80A78](v26, v27);
  v132 = (char *)v129 - v28;
  MEMORY[0x1E0C80A78](v29, v30);
  v154 = (char *)v129 - v31;
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v32, v33);
  v131 = (char *)v129 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35, v36);
  v38 = (char *)v129 - v37;
  v39 = type metadata accessor for Shape();
  v40 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39, v41);
  v144 = (uint64_t)v129 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v43, v44);
  v161 = (uint64_t)v129 - v45;
  v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v46, v47);
  v49 = (char *)v129 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
  v50 = *(_QWORD *)(v169 - 8);
  MEMORY[0x1E0C80A78](v169, v51);
  v165 = (char *)v129 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v168 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53, v54);
  v167 = (char *)v129 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v56, v57);
  v163 = (char *)v129 - v58;
  v140 = a2;
  v59 = *(_QWORD *)(a2 + 8);
  v61 = v60;
  v62 = *(_QWORD *)(v59 + 56);
  v159 = v59 + 56;
  v63 = 1 << *(_BYTE *)(v59 + 32);
  v64 = -1;
  if (v63 < 64)
    v64 = ~(-1 << v63);
  v65 = v64 & v62;
  v160 = (unint64_t)(v63 + 63) >> 6;
  v164 = v59;
  result = swift_bridgeObjectRetain();
  v67 = 0;
  v152 = v39;
  v156 = v40;
  v133 = v20;
  v145 = v38;
  v166 = v49;
  v153 = v61;
  v150 = v50;
  if (v65)
    goto LABEL_7;
LABEL_8:
  v71 = v67 + 1;
  v70 = v167;
  v69 = v168;
  if (!__OFADD__(v67, 1))
  {
    if (v71 < v160)
    {
      v72 = *(_QWORD *)(v159 + 8 * v71);
      v73 = v67 + 1;
      if (v72)
        goto LABEL_21;
      v73 = v67 + 2;
      if (v67 + 2 >= v160)
        return swift_release();
      v72 = *(_QWORD *)(v159 + 8 * v73);
      if (v72)
        goto LABEL_21;
      v73 = v67 + 3;
      if (v67 + 3 >= v160)
        return swift_release();
      v72 = *(_QWORD *)(v159 + 8 * v73);
      if (v72)
      {
LABEL_21:
        v170 = (v72 - 1) & v72;
        v176 = v73;
        v68 = __clz(__rbit64(v72)) + (v73 << 6);
        while (1)
        {
          v75 = v163;
          (*(void (**)(char *, unint64_t, uint64_t))(v69 + 16))(v163, *(_QWORD *)(v164 + 48) + *(_QWORD *)(v69 + 72) * v68, v61);
          (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v70, v75, v61);
          v76 = v70;
          v77 = v61;
          WeakTagged_9.tagged6.getter();
          v78 = (uint64_t)v166;
          v79 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
          v80 = v69;
          v81 = v50;
          v82 = v169;
          if (v79(v166, 1, v169) == 1)
            break;
          v83 = v165;
          (*(void (**)(char *, uint64_t, uint64_t))(v81 + 32))(v165, v78, v82);
          WeakRef.subscript.getter();
          v84 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v156 + 48);
          if (v84(v38, 1, v39) == 1)
          {
            (*(void (**)(char *, uint64_t))(v81 + 8))(v83, v82);
            v61 = v153;
            (*(void (**)(char *, uint64_t))(v168 + 8))(v167, v153);
            result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v38, &demangling cache variable for type metadata for Shape?);
            v50 = v81;
LABEL_6:
            v67 = v176;
            v65 = v170;
            if (!v170)
              goto LABEL_8;
            goto LABEL_7;
          }
          v158 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v84;
          v85 = v148;
          v86 = v161;
          outlined init with take of PKStrokeStruct((uint64_t)v38, v161, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
          v87 = *(void (**)(char *))(v155 + 16);
          v151 = v86 + *(int *)(v39 + 52);
          v87(v154);
          v88 = (void *)CRAttributedString.attributedString.getter();
          v89 = objc_msgSend(v88, sel_string);

          v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v92 = v91;

          if (v90 || v92 != 0xE000000000000000)
          {
            v143 = (void (*)(char *, uint64_t, uint64_t))v87;
            v94 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            v95 = *(void (**)(char *, uint64_t))(v155 + 8);
            v95(v154, v20);
            v93 = v85;
            v50 = v150;
            if ((v94 & 1) == 0)
            {
              v96 = v39;
              v97 = (uint64_t)v131;
              WeakRef.subscript.getter();
              result = v158(v97, 1, v96);
              if ((_DWORD)result == 1)
                goto LABEL_52;
              v98 = v132;
              v143(v132, v97 + *(int *)(v96 + 52), v20);
              outlined destroy of PKStrokeProperties(v97, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
              v99 = CRAttributedString.count.getter();
              result = ((uint64_t (*)(char *, uint64_t))v95)(v98, v20);
              if (v99 < 0)
                goto LABEL_50;
              swift_getKeyPath();
              v174 = v149;
              v175 = 0;
              v134 = (void (*)(uint64_t *, _QWORD))WeakRef.subscript.modify();
              v101 = v100;
              result = v158(v100, 1, v96);
              if ((_DWORD)result == 1)
                goto LABEL_53;
              v102 = v101 + *(int *)(v96 + 52);
              v103 = (void (*)(char *, _QWORD))CRAttributedString.subscript.modify();
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
              lazy protocol witness table accessor for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute();
              CRAttributedString.Substring.subscript.setter();
              v103(v171, 0);
              v143(v138, v102, v20);
              v104 = (void *)CRAttributedString.attributedString.getter();
              v105 = objc_msgSend(v104, sel_string);

              v106 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v108 = v107;

              if (v106 || v108 != 0xE000000000000000)
              {
                v130 = v102;
                v109 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                v95(v138, v20);
                v93 = v85;
                if ((v109 & 1) == 0)
                {
                  v110 = v132;
                  v111 = v130;
                  v112 = v143;
                  v143(v132, v130, v20);
                  v113 = (char *)v129[0];
                  v112((char *)v129[0], v111, v20);
                  v114 = (void *)CRAttributedString.attributedString.getter();
                  v95(v113, v20);
                  v115 = objc_msgSend(v114, sel_length);

                  result = (uint64_t)v115 - 1;
                  if (__OFSUB__(v115, 1))
                    goto LABEL_51;
                  v116 = (uint64_t)v135;
                  CRAttributedString.attributes(at:effectiveRange:)();
                  v95(v110, v20);
                  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v157 + 56))(v116, 0, 1, v93);
                  v117 = v136;
                  outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v116, v136);
                  outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v117, v137);
                  type metadata accessor for ShapeSecondaryProperties();
                  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
                  CRRegister.wrappedValue.setter();
                  outlined destroy of StocksKitCurrencyCache.Provider?(v117, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
                  outlined destroy of StocksKitCurrencyCache.Provider?(v116, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
                }
              }
              else
              {
                swift_bridgeObjectRelease();
                v95(v138, v20);
                v93 = v85;
              }
              v134(&v172, 0);
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v155 + 8))(v154, v20);
            v93 = v85;
            v50 = v150;
          }
          type metadata accessor for ShapeSecondaryProperties();
          v118 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
          v119 = (uint64_t)v146;
          v151 = v118;
          CRRegister.wrappedValue.getter();
          v120 = v144;
          outlined init with copy of PKStrokeProperties(v161, v144, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
          v121 = v157;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v157 + 48))(v119, 1, v93) == 1)
          {
            type metadata accessor for CanvasFormattingProxy(0, *(_QWORD *)(v139 + *MEMORY[0x1E0D12A70]), v141, v142);
            v122 = v147;
            CanvasFormattingProxy.defaultEmptyTextBoxAttribues(for:)();
            outlined destroy of PKStrokeProperties(v120, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
            outlined destroy of StocksKitCurrencyCache.Provider?(v119, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
          }
          else
          {
            outlined destroy of PKStrokeProperties(v120, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
            v122 = v147;
            (*(void (**)(char *, uint64_t, uint64_t))(v121 + 32))(v147, v119, v93);
          }
          swift_getKeyPath();
          v172 = v149;
          v173 = 0;
          lazy protocol witness table accessor for type TextAttributeScope.AlignmentAttribute and conformance TextAttributeScope.AlignmentAttribute();
          CRAttributedString.Attributes.subscript.setter();
          v123 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))WeakRef.subscript.modify();
          if (v158(v124, 1, v152))
          {
            ((void (*)(uint64_t *, _QWORD))v123)(&v172, 0);
            v125 = v157;
          }
          else
          {
            v158 = v123;
            v125 = v157;
            v126 = (uint64_t)v135;
            (*(void (**)(char *, char *, uint64_t))(v157 + 16))(v135, v122, v93);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v125 + 56))(v126, 0, 1, v93);
            v127 = v136;
            outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v126, v136);
            outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v127, v137);
            v50 = v150;
            CRRegister.wrappedValue.setter();
            outlined destroy of StocksKitCurrencyCache.Provider?(v127, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
            v128 = v126;
            v20 = v133;
            outlined destroy of StocksKitCurrencyCache.Provider?(v128, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
            ((void (*)(uint64_t *, _QWORD))v158)(&v172, 0);
          }
          v67 = v176;
          v65 = v170;
          (*(void (**)(char *, uint64_t))(v125 + 8))(v122, v93);
          outlined destroy of PKStrokeProperties(v161, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
          (*(void (**)(char *, uint64_t))(v50 + 8))(v165, v169);
          v61 = v153;
          result = (*(uint64_t (**)(char *, uint64_t))(v168 + 8))(v167, v153);
          v38 = v145;
          v39 = v152;
          if (!v65)
            goto LABEL_8;
LABEL_7:
          v170 = (v65 - 1) & v65;
          v176 = v67;
          v68 = __clz(__rbit64(v65)) | (v67 << 6);
          v70 = v167;
          v69 = v168;
        }
        (*(void (**)(char *, uint64_t))(v80 + 8))(v76, v77);
        result = outlined destroy of StocksKitCurrencyCache.Provider?(v78, &demangling cache variable for type metadata for WeakRef<Shape>?);
        v50 = v81;
        v61 = v77;
        goto LABEL_6;
      }
      v74 = v67 + 4;
      if (v67 + 4 < v160)
      {
        v72 = *(_QWORD *)(v159 + 8 * v74);
        if (v72)
        {
          v73 = v67 + 4;
          goto LABEL_21;
        }
        while (1)
        {
          v73 = v74 + 1;
          if (__OFADD__(v74, 1))
            goto LABEL_49;
          if (v73 >= v160)
            return swift_release();
          v72 = *(_QWORD *)(v159 + 8 * v73);
          ++v74;
          if (v72)
            goto LABEL_21;
        }
      }
    }
    return swift_release();
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

uint64_t CanvasFormattingProxy.bold.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t result;
  int64_t v35;
  unint64_t v36;
  unint64_t v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v3, v4);
  v64 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v66 = *(_QWORD *)(v6 - 8);
  v67 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v65 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v72 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  v73 = v9;
  v10 = type metadata accessor for Capsule();
  v70 = *(_QWORD *)(v10 - 8);
  v71 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v69 = (uint64_t)&v64 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v17, v18);
  v76 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v64 - v27;
  v74 = v1;
  v29 = *(_QWORD *)(v1 + 8);
  v30 = *(_QWORD *)(v29 + 56);
  v77 = v29 + 56;
  v31 = 1 << *(_BYTE *)(v29 + 32);
  v32 = -1;
  if (v31 < 64)
    v32 = ~(-1 << v31);
  v33 = v32 & v30;
  v78 = (unint64_t)(v31 + 63) >> 6;
  v79 = v29;
  result = swift_bridgeObjectRetain();
  v35 = 0;
  v75 = v24;
  v68 = v21;
  while (1)
  {
    if (v33)
    {
      v36 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      v37 = v36 | (v35 << 6);
      goto LABEL_22;
    }
    v38 = v35 + 1;
    if (__OFADD__(v35, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v38 >= v78)
      goto LABEL_25;
    v39 = *(_QWORD *)(v77 + 8 * v38);
    ++v35;
    if (!v39)
    {
      v35 = v38 + 1;
      if (v38 + 1 >= v78)
        goto LABEL_25;
      v39 = *(_QWORD *)(v77 + 8 * v35);
      if (!v39)
      {
        v35 = v38 + 2;
        if (v38 + 2 >= v78)
          goto LABEL_25;
        v39 = *(_QWORD *)(v77 + 8 * v35);
        if (!v39)
          break;
      }
    }
LABEL_21:
    v33 = (v39 - 1) & v39;
    v37 = __clz(__rbit64(v39)) + (v35 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))(v28, *(_QWORD *)(v79 + 48) + *(_QWORD *)(v21 + 72) * v37, v20);
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v24, v28, v20);
    WeakTagged_9.tagged6.getter();
    v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
    v42 = *(_QWORD *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v16, 1, v41) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for WeakRef<Shape>?);
    }
    else
    {
      v43 = v28;
      v44 = v69;
      Canvas.updatablePaper2.getter(v69);
      v45 = (uint64_t)v76;
      WeakRef.subscript.getter();
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v44, v71);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v16, v41);
      v46 = type metadata accessor for Shape();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v45, 1, v46) != 1)
      {
        v49 = v65;
        v48 = v66;
        v50 = v67;
        (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v65, v45 + *(int *)(v46 + 52), v67);
        v51 = (void *)CRAttributedString.attributedString.getter();
        v52 = objc_msgSend(v51, sel_string);

        v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v55 = v54;

        if (v53 || v55 != 0xE000000000000000)
        {
          v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
          if ((v56 & 1) != 0)
            goto LABEL_30;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRAttributedString<TextAttributeScope>.Runs>);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
          v63 = swift_allocObject();
          *(_OWORD *)(v63 + 16) = xmmword_1DDF32CF0;
          CRAttributedString.runs.getter();
          v62 = Array<A>.textStyles.getter(v63);
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          v61 = v68;
        }
        else
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
LABEL_30:
          type metadata accessor for ShapeSecondaryProperties();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
          v57 = (uint64_t)v64;
          CRRegister.wrappedValue.getter();
          v58 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
          v59 = *(_QWORD *)(v58 - 8);
          v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58);
          v61 = v68;
          if (v60 == 1)
          {
            outlined destroy of StocksKitCurrencyCache.Provider?(v57, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
            v62 = 0;
          }
          else
          {
            v62 = CRAttributedString.Attributes<>.textStyles.getter();
            (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v57, v58);
          }
        }
        outlined destroy of PKStrokeProperties(v45, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        v47 = v62 & 1;
        (*(void (**)(char *, uint64_t))(v61 + 8))(v75, v20);
LABEL_35:
        swift_release();
        return v47;
      }
      outlined destroy of StocksKitCurrencyCache.Provider?(v45, &demangling cache variable for type metadata for Shape?);
      v24 = v75;
      v28 = v43;
      v21 = v68;
    }
    result = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v24, v20);
  }
  v40 = v38 + 3;
  if (v40 >= v78)
  {
LABEL_25:
    v47 = 0;
    goto LABEL_35;
  }
  v39 = *(_QWORD *)(v77 + 8 * v40);
  if (v39)
  {
    v35 = v40;
    goto LABEL_21;
  }
  while (1)
  {
    v35 = v40 + 1;
    if (__OFADD__(v40, 1))
      break;
    if (v35 >= v78)
      goto LABEL_25;
    v39 = *(_QWORD *)(v77 + 8 * v35);
    ++v40;
    if (v39)
      goto LABEL_21;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t CanvasFormattingProxy.italic.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t result;
  int64_t v35;
  unint64_t v36;
  unint64_t v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v3, v4);
  v64 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v66 = *(_QWORD *)(v6 - 8);
  v67 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v65 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v72 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  v73 = v9;
  v10 = type metadata accessor for Capsule();
  v70 = *(_QWORD *)(v10 - 8);
  v71 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v69 = (uint64_t)&v64 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v17, v18);
  v76 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v64 - v27;
  v74 = v1;
  v29 = *(_QWORD *)(v1 + 8);
  v30 = *(_QWORD *)(v29 + 56);
  v77 = v29 + 56;
  v31 = 1 << *(_BYTE *)(v29 + 32);
  v32 = -1;
  if (v31 < 64)
    v32 = ~(-1 << v31);
  v33 = v32 & v30;
  v78 = (unint64_t)(v31 + 63) >> 6;
  v79 = v29;
  result = swift_bridgeObjectRetain();
  v35 = 0;
  v75 = v24;
  v68 = v21;
  while (1)
  {
    if (v33)
    {
      v36 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      v37 = v36 | (v35 << 6);
      goto LABEL_22;
    }
    v38 = v35 + 1;
    if (__OFADD__(v35, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v38 >= v78)
      goto LABEL_25;
    v39 = *(_QWORD *)(v77 + 8 * v38);
    ++v35;
    if (!v39)
    {
      v35 = v38 + 1;
      if (v38 + 1 >= v78)
        goto LABEL_25;
      v39 = *(_QWORD *)(v77 + 8 * v35);
      if (!v39)
      {
        v35 = v38 + 2;
        if (v38 + 2 >= v78)
          goto LABEL_25;
        v39 = *(_QWORD *)(v77 + 8 * v35);
        if (!v39)
          break;
      }
    }
LABEL_21:
    v33 = (v39 - 1) & v39;
    v37 = __clz(__rbit64(v39)) + (v35 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))(v28, *(_QWORD *)(v79 + 48) + *(_QWORD *)(v21 + 72) * v37, v20);
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v24, v28, v20);
    WeakTagged_9.tagged6.getter();
    v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
    v42 = *(_QWORD *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v16, 1, v41) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for WeakRef<Shape>?);
    }
    else
    {
      v43 = v28;
      v44 = v69;
      Canvas.updatablePaper2.getter(v69);
      v45 = (uint64_t)v76;
      WeakRef.subscript.getter();
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v44, v71);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v16, v41);
      v46 = type metadata accessor for Shape();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v45, 1, v46) != 1)
      {
        v49 = v65;
        v48 = v66;
        v50 = v67;
        (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v65, v45 + *(int *)(v46 + 52), v67);
        v51 = (void *)CRAttributedString.attributedString.getter();
        v52 = objc_msgSend(v51, sel_string);

        v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v55 = v54;

        if (v53 || v55 != 0xE000000000000000)
        {
          v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
          if ((v56 & 1) != 0)
            goto LABEL_30;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRAttributedString<TextAttributeScope>.Runs>);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
          v63 = swift_allocObject();
          *(_OWORD *)(v63 + 16) = xmmword_1DDF32CF0;
          CRAttributedString.runs.getter();
          v62 = Array<A>.textStyles.getter(v63);
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          v61 = v68;
        }
        else
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
LABEL_30:
          type metadata accessor for ShapeSecondaryProperties();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
          v57 = (uint64_t)v64;
          CRRegister.wrappedValue.getter();
          v58 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
          v59 = *(_QWORD *)(v58 - 8);
          v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58);
          v61 = v68;
          if (v60 == 1)
          {
            outlined destroy of StocksKitCurrencyCache.Provider?(v57, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
            v62 = 0;
          }
          else
          {
            v62 = CRAttributedString.Attributes<>.textStyles.getter();
            (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v57, v58);
          }
        }
        outlined destroy of PKStrokeProperties(v45, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        v47 = (v62 >> 1) & 1;
        (*(void (**)(char *, uint64_t))(v61 + 8))(v75, v20);
LABEL_35:
        swift_release();
        return v47;
      }
      outlined destroy of StocksKitCurrencyCache.Provider?(v45, &demangling cache variable for type metadata for Shape?);
      v24 = v75;
      v28 = v43;
      v21 = v68;
    }
    result = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v24, v20);
  }
  v40 = v38 + 3;
  if (v40 >= v78)
  {
LABEL_25:
    v47 = 0;
    goto LABEL_35;
  }
  v39 = *(_QWORD *)(v77 + 8 * v40);
  if (v39)
  {
    v35 = v40;
    goto LABEL_21;
  }
  while (1)
  {
    v35 = v40 + 1;
    if (__OFADD__(v40, 1))
      break;
    if (v35 >= v78)
      goto LABEL_25;
    v39 = *(_QWORD *)(v77 + 8 * v35);
    ++v40;
    if (v39)
      goto LABEL_21;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in CanvasFormattingProxy.bold.setter(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t result;
  int64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  char *v88;
  int64_t v89;
  unint64_t v90;
  int64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (*v100)(uint64_t, uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(char *, uint64_t, uint64_t);
  uint64_t v106;
  void *v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  void (*v113)(char *, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t (*v116)(uint64_t, uint64_t, uint64_t);
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  int v130;
  _QWORD *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  void (*v135)(char *, uint64_t, uint64_t);
  void *v136;
  id v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  Swift::Int rawValue;
  _QWORD *v143;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v146;
  void *v147;
  Swift::Float pointSize;
  id v149;
  id v150;
  uint64_t v151;
  void *v152;
  void *v153;
  Swift::String v154;
  Swift::Bool v155;
  id v156;
  id v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  void *v164;
  float v165;
  Swift::Int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  float v172;
  uint64_t v173;
  uint64_t v174;
  Swift::String_optional *v175;
  void (*v176)(uint64_t *, _QWORD);
  void (*v177)(uint64_t *, _QWORD);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v179;
  unint64_t v180;
  _QWORD *v181;
  char v182;
  void (*v183)(uint64_t, uint64_t);
  char *v184;
  uint64_t v185;
  void (*v186)(uint64_t, uint64_t);
  void *v187;
  id v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  Swift::Int v197;
  _QWORD *v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  Swift::Float v203;
  id v204;
  id v205;
  uint64_t v206;
  void *v207;
  void *v208;
  Swift::String v209;
  Swift::Bool v210;
  id v211;
  id v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  void (*v219)(PaperKit::Font *, _QWORD);
  uint64_t v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD v227[2];
  char *v228;
  char *v229;
  char *v230;
  uint64_t v231;
  char *v232;
  char *v233;
  void (*v234)(char *, _QWORD);
  void (*v235)(char *, uint64_t, uint64_t);
  uint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  Swift::String_optional v240;
  Swift::String_optional *p_familyName;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  void (*v247)(char *, uint64_t);
  char *v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  char *v257;
  uint64_t v258;
  uint64_t (*v259)(uint64_t, uint64_t, uint64_t);
  char *v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  int64_t v264;
  uint64_t v265;
  uint64_t v266;
  void (*v267)(char *, char *, uint64_t);
  uint64_t (*v268)(char *, uint64_t, uint64_t);
  char *v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t KeyPath;
  char *v275;
  uint64_t v276;
  int v277;
  _QWORD *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  char *v283;
  uint64_t v284;
  unint64_t v285;
  char *v286;
  char *v287;
  uint64_t v288;
  uint64_t v289;
  int64_t v290;
  uint64_t v291;
  void *v292;
  Swift::String_optional familyName;
  uint64_t v294;
  Swift::Int v295;
  PaperKit::Font v296;
  char v297[8];
  uint64_t v298;

  v278 = a6;
  v245 = a5;
  v244 = a4;
  v277 = a3;
  v246 = a2;
  v262 = a1;
  v243 = *a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  v282 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v7);
  v252 = (char *)v227 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v286 = (char *)v227 - v11;
  v288 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  v273 = *(_QWORD *)(v288 - 8);
  MEMORY[0x1E0C80A78](v288, v12);
  v287 = (char *)v227 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v14, v15);
  v250 = (char *)v227 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v239 = (uint64_t)v227 - v19;
  MEMORY[0x1E0C80A78](v20, v21);
  v238 = (uint64_t)v227 - v22;
  MEMORY[0x1E0C80A78](v23, v24);
  v237 = (char *)v227 - v25;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)v227 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v271 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
  v231 = *(_QWORD *)(v271 - 8);
  MEMORY[0x1E0C80A78](v271, v30);
  v230 = (char *)v227 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v276 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  v242 = *(_QWORD *)(v276 - 8);
  MEMORY[0x1E0C80A78](v276, v32);
  v229 = (char *)v227 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34, v35);
  v275 = (char *)v227 - v36;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v258 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37, v38);
  v228 = (char *)v227 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40, v41);
  v227[0] = (char *)v227 - v42;
  MEMORY[0x1E0C80A78](v43, v44);
  v233 = (char *)v227 - v45;
  MEMORY[0x1E0C80A78](v46, v47);
  v257 = (char *)v227 - v48;
  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v49, v50);
  v232 = (char *)v227 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v52, v53);
  v256 = (char *)v227 - v54;
  v55 = type metadata accessor for Shape();
  v255 = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55, v56);
  v249 = (uint64_t)v227 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v58, v59);
  v265 = (uint64_t)v227 - v60;
  v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v61, v62);
  v64 = (char *)v227 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
  v279 = *(_QWORD *)(v65 - 8);
  MEMORY[0x1E0C80A78](v65, v66);
  v68 = (char *)v227 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  MEMORY[0x1E0C80A78](v69, v70);
  v283 = (char *)v227 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v72, v73);
  v269 = (char *)v227 - v74;
  v75 = *(_QWORD *)(v246 + 8);
  v77 = v76;
  v78 = *(_QWORD *)(v75 + 56);
  v263 = v75 + 56;
  v79 = 1 << *(_BYTE *)(v75 + 32);
  v80 = -1;
  if (v79 < 64)
    v80 = ~(-1 << v79);
  v81 = v80 & v78;
  v264 = (unint64_t)(v79 + 63) >> 6;
  p_familyName = &v296._familyName;
  v272 = v75;
  result = swift_bridgeObjectRetain();
  v83 = 0;
  v240 = (Swift::String_optional)xmmword_1DDF32D00;
  v298 = v6;
  v84 = v262;
  v270 = v29;
  v280 = v37;
  v248 = v64;
  v281 = v65;
  v261 = v55;
  v260 = v68;
  v254 = v69;
  v253 = v77;
  while (v81)
  {
    v85 = v55;
    v86 = v84;
    v289 = (v81 - 1) & v81;
    v290 = v83;
    v87 = __clz(__rbit64(v81)) | (v83 << 6);
    v88 = v283;
LABEL_21:
    v93 = v269;
    (*(void (**)(char *, unint64_t, uint64_t))(v77 + 16))(v269, *(_QWORD *)(v272 + 48) + *(_QWORD *)(v77 + 72) * v87, v69);
    (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v88, v93, v69);
    v94 = v77;
    WeakTagged_9.tagged6.getter();
    v95 = v279;
    v96 = v281;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v279 + 48))(v64, 1, v281) == 1)
    {
      (*(void (**)(char *, uint64_t))(v94 + 8))(v88, v69);
      result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v64, &demangling cache variable for type metadata for WeakRef<Shape>?);
      v77 = v94;
      v83 = v290;
      v81 = v289;
      v84 = v86;
      v55 = v85;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v68, v64, v96);
      v97 = v256;
      v84 = v86;
      v98 = v95;
      WeakRef.subscript.getter();
      v99 = (uint64_t)v97;
      v100 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v255 + 48);
      v55 = v85;
      if (v100(v99, 1, v85) == 1)
      {
        (*(void (**)(char *, uint64_t))(v98 + 8))(v68, v96);
        v101 = v99;
        v77 = v253;
        v69 = v254;
        (*(void (**)(char *, uint64_t))(v253 + 8))(v283, v254);
        result = outlined destroy of StocksKitCurrencyCache.Provider?(v101, &demangling cache variable for type metadata for Shape?);
        v83 = v290;
        v81 = v289;
      }
      else
      {
        v259 = v100;
        v102 = v99;
        v103 = v265;
        outlined init with take of PKStrokeStruct(v102, v265, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        v104 = v103 + *(int *)(v85 + 52);
        v105 = *(void (**)(char *, uint64_t, uint64_t))(v258 + 16);
        v106 = v280;
        v105(v257, v104, v280);
        v107 = (void *)CRAttributedString.attributedString.getter();
        v108 = objc_msgSend(v107, sel_string);

        v109 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v111 = v110;

        if (!v109 && v111 == 0xE000000000000000)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v258 + 8))(v257, v106);
          goto LABEL_92;
        }
        v112 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v113 = *(void (**)(char *, uint64_t))(v258 + 8);
        v113(v257, v106);
        if ((v112 & 1) == 0)
        {
          v247 = v113;
          v236 = v104;
          v114 = (uint64_t)v232;
          WeakRef.subscript.getter();
          v115 = v261;
          v116 = v259;
          result = v259(v114, 1, v261);
          if ((_DWORD)result == 1)
            goto LABEL_128;
          v117 = v233;
          v118 = v280;
          v105(v233, v114 + *(int *)(v115 + 52), v280);
          outlined destroy of PKStrokeProperties(v114, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
          CRAttributedString.count.getter();
          v247(v117, v118);
          KeyPath = swift_getKeyPath();
          v119 = WeakRef.subscript.modify();
          v121 = v120;
          result = v116(v120, 1, v115);
          if ((_DWORD)result == 1)
          {
LABEL_129:
            __break(1u);
            return result;
          }
          v122 = *(int *)(v115 + 52);
          result = NSNotFound.getter();
          v123 = v298;
          if (!result)
            goto LABEL_126;
          v234 = (void (*)(char *, _QWORD))v119;
          v235 = v105;
          v124 = v121 + v122;
          v125 = v230;
          CRAttributedString.subscript.getter();
          v126 = v229;
          v127 = v271;
          CRAttributedString.Substring.runs.getter();
          (*(void (**)(char *, uint64_t))(v231 + 8))(v125, v127);
          (*(void (**)(char *, char *, uint64_t))(v242 + 32))(v275, v126, v276);
          v128 = v270;
          CRAttributedString.Runs.next()();
          v129 = v288;
          v268 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v273 + 48);
          v130 = v268(v128, 1, v288);
          v131 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          v132 = v287;
          if (v130 == 1)
          {
LABEL_32:
            (*(void (**)(char *, uint64_t))(v242 + 8))(v275, v276);
            swift_bridgeObjectRelease();
            swift_release();
            v133 = v228;
            v134 = v280;
            v135 = v235;
            v235(v228, v124, v280);
            v136 = (void *)CRAttributedString.attributedString.getter();
            v137 = objc_msgSend(v136, sel_string);

            v138 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v140 = v139;

            if (v138 || v140 != 0xE000000000000000)
            {
              v182 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              v183 = (void (*)(uint64_t, uint64_t))v247;
              v247(v133, v134);
              if ((v182 & 1) == 0)
              {
                v184 = v233;
                v135(v233, v124, v134);
                v185 = v227[0];
                v135((char *)v227[0], v124, v134);
                v186 = v183;
                v187 = (void *)CRAttributedString.attributedString.getter();
                v186(v185, v134);
                v188 = objc_msgSend(v187, sel_length);

                result = (uint64_t)v188 - 1;
                if (__OFSUB__(v188, 1))
                  goto LABEL_127;
                v189 = (uint64_t)v237;
                CRAttributedString.attributes(at:effectiveRange:)();
                v186((uint64_t)v184, v134);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v282 + 56))(v189, 0, 1, v123);
                v190 = v238;
                outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v189, v238);
                outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v190, v239);
                type metadata accessor for ShapeSecondaryProperties();
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
                CRRegister.wrappedValue.setter();
                outlined destroy of StocksKitCurrencyCache.Provider?(v190, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
                outlined destroy of StocksKitCurrencyCache.Provider?(v189, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              v247(v133, v134);
            }
            v234(v297, 0);
            goto LABEL_92;
          }
          v267 = *(void (**)(char *, char *, uint64_t))(v273 + 32);
          v266 = v124;
          while (2)
          {
            v267(v132, v128, v129);
            CRAttributedString.Runs.Run.attributes.getter();
            swift_getKeyPath();
            v285 = lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
            CRAttributedString.Attributes.subscript.getter();
            swift_release();
            if (v292 == (void *)1)
            {
              if (one-time initialization token for textBoxDefaultFont != -1)
                swift_once();
              Font.init(_:)(&v296, (UIFont)(id)static UIConstants.textBoxDefaultFont);
            }
            else
            {
              v296._name.value._countAndFlagsBits = v291;
              v296._name.value._object = v292;
              v296._familyName = familyName;
              LODWORD(v296.pointSize) = v294;
              v296.traits.rawValue = v295;
            }
            if ((v277 & 1) != 0)
            {
              v141 = v278;
              swift_beginAccess();
              rawValue = v296.traits.rawValue;
              if ((*v141 & ~v296.traits.rawValue) != 0)
              {
                rawValue = v296.traits.rawValue | *v141;
                goto LABEL_46;
              }
            }
            else
            {
              v143 = v278;
              swift_beginAccess();
              rawValue = v296.traits.rawValue;
              if ((v296.traits.rawValue & *v143) != 0)
              {
                rawValue = v296.traits.rawValue & ~*v143;
LABEL_46:
                v296.traits.rawValue = rawValue;
              }
            }
            countAndFlagsBits = v296._name.value._countAndFlagsBits;
            object = v296._name.value._object;
            v146 = v296._familyName.value._countAndFlagsBits;
            v147 = v296._familyName.value._object;
            pointSize = v296.pointSize;
            v291 = v296._name.value._countAndFlagsBits;
            v292 = v296._name.value._object;
            familyName = v296._familyName;
            *(Swift::Float *)&v294 = v296.pointSize;
            v295 = rawValue;
            v149 = Font.platformFont.getter();
            v150 = objc_msgSend(v149, sel_fontName);

            v151 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v153 = v152;

            v284 = (uint64_t)v131;
            if (object
              && (v151 == countAndFlagsBits && object == v153 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRetain();
              v154._countAndFlagsBits = 46;
              v154._object = (void *)0xE100000000000000;
              v155 = String.hasPrefix(_:)(v154);
              swift_bridgeObjectRelease();
              if (v155)
              {
                swift_bridgeObjectRelease();
                v151 = 0;
                v153 = 0;
              }
              swift_bridgeObjectRelease();
              v296._name.value._countAndFlagsBits = v151;
              v296._name.value._object = v153;
              v291 = v151;
              v292 = v153;
              familyName.value._countAndFlagsBits = v146;
              familyName.value._object = v147;
              *(Swift::Float *)&v294 = pointSize;
              v295 = rawValue;
              v156 = Font.platformFont.getter();
              v157 = objc_msgSend(v156, sel_familyName);

              v158 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v160 = v159;

              Font.familyName.setter(v158, v160);
            }
            v161 = v296._name.value._countAndFlagsBits;
            v162 = v296._name.value._object;
            v163 = v296._familyName.value._countAndFlagsBits;
            v164 = v296._familyName.value._object;
            v165 = v296.pointSize;
            v166 = v296.traits.rawValue;
            (*(void (**)(char *, uint64_t))(v282 + 8))(v286, v298);
            result = CRAttributedString.Runs.Run.range.getter();
            v168 = v167 - result;
            if (__OFSUB__(v167, result))
            {
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
              goto LABEL_129;
            }
            v169 = result;
            if (one-time initialization token for defaultValue != -1)
              result = swift_once();
            v170 = qword_1F0411B68;
            v171 = qword_1F0411B70;
            v172 = *(float *)&dword_1F0411B78;
            v173 = qword_1F0411B80;
            if (v162)
            {
              if (!qword_1F0411B60
                || (v161 != static TextAttributeScope.FontAttribute.defaultValue || v162 != (void *)qword_1F0411B60)
                && (v251 = qword_1F0411B80,
                    result = _stringCompareWithSmolCheck(_:_:expecting:)(),
                    v173 = v251,
                    (result & 1) == 0))
              {
LABEL_79:
                if (__OFADD__(v169, v168))
                  goto LABEL_120;
                if (v169 + v168 < v169)
                  goto LABEL_121;
                v296._name.value._countAndFlagsBits = v161;
                v296._name.value._object = v162;
                v296._familyName.value._countAndFlagsBits = v163;
                v296._familyName.value._object = v164;
                *(_QWORD *)&v296.pointSize = LODWORD(v165);
                v296.traits.rawValue = v166;
                swift_bridgeObjectRetain();
                swift_retain();
                swift_bridgeObjectRetain();
                v124 = v266;
                v177 = (void (*)(uint64_t *, _QWORD))CRAttributedString.subscript.modify();
                CRAttributedString.Substring.subscript.setter();
                v177(&v291, 0);
                swift_bridgeObjectRelease();
                goto LABEL_82;
              }
            }
            else if (qword_1F0411B60)
            {
              goto LABEL_79;
            }
            if (v164)
            {
              if (!v171)
                goto LABEL_79;
              if (v163 != v170 || v164 != (void *)v171)
              {
                v174 = v173;
                result = _stringCompareWithSmolCheck(_:_:expecting:)();
                if ((result & 1) == 0 || v165 != v172 || v166 != v174)
                  goto LABEL_79;
LABEL_76:
                if (__OFADD__(v169, v168))
                  goto LABEL_123;
                if (v169 + v168 < v169)
                  goto LABEL_124;
                v296._name = v240;
                v175 = p_familyName;
                *p_familyName = 0u;
                v175[1] = 0u;
                swift_retain();
                v124 = v266;
                v176 = (void (*)(uint64_t *, _QWORD))CRAttributedString.subscript.modify();
                CRAttributedString.Substring.subscript.setter();
                v176(&v291, 0);
                swift_bridgeObjectRelease();
LABEL_82:
                swift_bridgeObjectRelease();
                v131 = (_QWORD *)v284;
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v123 = v298;
                v132 = v287;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  v131 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v131[2] + 1, 1, v131);
                v180 = v131[2];
                v179 = v131[3];
                if (v180 >= v179 >> 1)
                  v131 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v179 > 1), v180 + 1, 1, v131);
                v131[2] = v180 + 1;
                v181 = &v131[2 * v180];
                v181[4] = v169;
                v181[5] = v168;
                v129 = v288;
                (*(void (**)(char *, uint64_t))(v273 + 8))(v132, v288);
                v128 = v270;
                CRAttributedString.Runs.next()();
                if (v268(v128, 1, v129) == 1)
                  goto LABEL_32;
                continue;
              }
            }
            else if (v171)
            {
              goto LABEL_79;
            }
            break;
          }
          if (v165 != v172 || v166 != v173)
            goto LABEL_79;
          goto LABEL_76;
        }
LABEL_92:
        v284 = type metadata accessor for ShapeSecondaryProperties();
        v191 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
        v192 = (uint64_t)v250;
        KeyPath = v191;
        CRRegister.wrappedValue.getter();
        v193 = v249;
        outlined init with copy of PKStrokeProperties(v265, v249, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        v194 = v282;
        v195 = v298;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v282 + 48))(v192, 1, v298) == 1)
        {
          type metadata accessor for CanvasFormattingProxy(0, *(_QWORD *)(v243 + *MEMORY[0x1E0D12A70]), v244, v245);
          CanvasFormattingProxy.defaultEmptyTextBoxAttribues(for:)();
          outlined destroy of PKStrokeProperties(v193, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
          outlined destroy of StocksKitCurrencyCache.Provider?(v192, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
        }
        else
        {
          outlined destroy of PKStrokeProperties(v193, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
          (*(void (**)(char *, uint64_t, uint64_t))(v194 + 32))(v252, v192, v195);
        }
        v285 = swift_getKeyPath();
        swift_getKeyPath();
        lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
        CRAttributedString.Attributes.subscript.getter();
        swift_release();
        if (v292 == (void *)1)
        {
          if (one-time initialization token for textBoxDefaultFont != -1)
            swift_once();
          Font.init(_:)(&v296, (UIFont)(id)static UIConstants.textBoxDefaultFont);
        }
        else
        {
          v296._name.value._countAndFlagsBits = v291;
          v296._name.value._object = v292;
          v296._familyName = familyName;
          LODWORD(v296.pointSize) = v294;
          v296.traits.rawValue = v295;
        }
        if ((v277 & 1) != 0)
        {
          v196 = v278;
          swift_beginAccess();
          v197 = v296.traits.rawValue;
          if ((*v196 & ~v296.traits.rawValue) != 0)
          {
            v197 = v296.traits.rawValue | *v196;
LABEL_105:
            v296.traits.rawValue = v197;
          }
        }
        else
        {
          v198 = v278;
          swift_beginAccess();
          v197 = v296.traits.rawValue;
          if ((v296.traits.rawValue & *v198) != 0)
          {
            v197 = v296.traits.rawValue & ~*v198;
            goto LABEL_105;
          }
        }
        v200 = v296._name.value._countAndFlagsBits;
        v199 = v296._name.value._object;
        v201 = v296._familyName.value._countAndFlagsBits;
        v202 = v296._familyName.value._object;
        v203 = v296.pointSize;
        v291 = v296._name.value._countAndFlagsBits;
        v292 = v296._name.value._object;
        familyName = v296._familyName;
        *(Swift::Float *)&v294 = v296.pointSize;
        v295 = v197;
        v204 = Font.platformFont.getter();
        v205 = objc_msgSend(v204, sel_fontName);

        v206 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v208 = v207;

        if (v199 && (v206 == v200 && v199 == v208 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRetain();
          v209._countAndFlagsBits = 46;
          v209._object = (void *)0xE100000000000000;
          v210 = String.hasPrefix(_:)(v209);
          swift_bridgeObjectRelease();
          if (v210)
          {
            swift_bridgeObjectRelease();
            v206 = 0;
            v208 = 0;
          }
          swift_bridgeObjectRelease();
          v296._name.value._countAndFlagsBits = v206;
          v296._name.value._object = v208;
          v291 = v206;
          v292 = v208;
          familyName.value._countAndFlagsBits = v201;
          familyName.value._object = v202;
          *(Swift::Float *)&v294 = v203;
          v295 = v197;
          v211 = Font.platformFont.getter();
          v212 = objc_msgSend(v211, sel_familyName);

          v213 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v215 = v214;

          Font.familyName.setter(v213, v215);
        }
        *(_QWORD *)&v296.pointSize = LODWORD(v296.pointSize);
        v216 = v298;
        v217 = v252;
        CRAttributedString.Attributes.subscript.setter();
        v218 = v281;
        v219 = (void (*)(PaperKit::Font *, _QWORD))WeakRef.subscript.modify();
        v221 = v259(v220, 1, v261);
        v69 = v254;
        if (v221)
        {
          v219(&v296, 0);
          v222 = v282;
        }
        else
        {
          v222 = v282;
          v223 = (uint64_t)v237;
          (*(void (**)(char *, char *, uint64_t))(v282 + 16))(v237, v217, v216);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v222 + 56))(v223, 0, 1, v216);
          v224 = v238;
          outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v223, v238);
          outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v224, v239);
          CRRegister.wrappedValue.setter();
          v225 = v281;
          outlined destroy of StocksKitCurrencyCache.Provider?(v224, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
          v226 = v223;
          v218 = v225;
          outlined destroy of StocksKitCurrencyCache.Provider?(v226, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
          v219(&v296, 0);
        }
        v64 = v248;
        (*(void (**)(char *, uint64_t))(v222 + 8))(v217, v216);
        outlined destroy of PKStrokeProperties(v265, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        v68 = v260;
        (*(void (**)(char *, uint64_t))(v279 + 8))(v260, v218);
        v77 = v253;
        result = (*(uint64_t (**)(char *, uint64_t))(v253 + 8))(v283, v69);
        v55 = v261;
        v83 = v290;
        v81 = v289;
        v84 = v262;
      }
    }
  }
  v89 = v83 + 1;
  v88 = v283;
  if (__OFADD__(v83, 1))
    goto LABEL_122;
  if (v89 >= v264)
    return swift_release();
  v90 = *(_QWORD *)(v263 + 8 * v89);
  v91 = v83 + 1;
  if (v90)
    goto LABEL_20;
  v91 = v83 + 2;
  if (v83 + 2 >= v264)
    return swift_release();
  v90 = *(_QWORD *)(v263 + 8 * v91);
  if (v90)
    goto LABEL_20;
  v91 = v83 + 3;
  if (v83 + 3 >= v264)
    return swift_release();
  v90 = *(_QWORD *)(v263 + 8 * v91);
  if (v90)
  {
LABEL_20:
    v85 = v55;
    v86 = v84;
    v289 = (v90 - 1) & v90;
    v290 = v91;
    v87 = __clz(__rbit64(v90)) + (v91 << 6);
    goto LABEL_21;
  }
  v92 = v83 + 4;
  if (v83 + 4 >= v264)
    return swift_release();
  v90 = *(_QWORD *)(v263 + 8 * v92);
  if (v90)
  {
    v91 = v83 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v91 = v92 + 1;
    if (__OFADD__(v92, 1))
      goto LABEL_125;
    if (v91 >= v264)
      return swift_release();
    v90 = *(_QWORD *)(v263 + 8 * v91);
    ++v92;
    if (v90)
      goto LABEL_20;
  }
}

uint64_t CanvasFormattingProxy.underline.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t result;
  int64_t v35;
  unint64_t v36;
  unint64_t v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v3, v4);
  v64 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v66 = *(_QWORD *)(v6 - 8);
  v67 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v65 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v72 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  v73 = v9;
  v10 = type metadata accessor for Capsule();
  v70 = *(_QWORD *)(v10 - 8);
  v71 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v69 = (uint64_t)&v64 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v17, v18);
  v76 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v64 - v27;
  v74 = v1;
  v29 = *(_QWORD *)(v1 + 8);
  v30 = *(_QWORD *)(v29 + 56);
  v77 = v29 + 56;
  v31 = 1 << *(_BYTE *)(v29 + 32);
  v32 = -1;
  if (v31 < 64)
    v32 = ~(-1 << v31);
  v33 = v32 & v30;
  v78 = (unint64_t)(v31 + 63) >> 6;
  v79 = v29;
  result = swift_bridgeObjectRetain();
  v35 = 0;
  v75 = v24;
  v68 = v21;
  while (1)
  {
    if (v33)
    {
      v36 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      v37 = v36 | (v35 << 6);
      goto LABEL_22;
    }
    v38 = v35 + 1;
    if (__OFADD__(v35, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v38 >= v78)
      goto LABEL_25;
    v39 = *(_QWORD *)(v77 + 8 * v38);
    ++v35;
    if (!v39)
    {
      v35 = v38 + 1;
      if (v38 + 1 >= v78)
        goto LABEL_25;
      v39 = *(_QWORD *)(v77 + 8 * v35);
      if (!v39)
      {
        v35 = v38 + 2;
        if (v38 + 2 >= v78)
          goto LABEL_25;
        v39 = *(_QWORD *)(v77 + 8 * v35);
        if (!v39)
          break;
      }
    }
LABEL_21:
    v33 = (v39 - 1) & v39;
    v37 = __clz(__rbit64(v39)) + (v35 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))(v28, *(_QWORD *)(v79 + 48) + *(_QWORD *)(v21 + 72) * v37, v20);
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v24, v28, v20);
    WeakTagged_9.tagged6.getter();
    v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
    v42 = *(_QWORD *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v16, 1, v41) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for WeakRef<Shape>?);
    }
    else
    {
      v43 = v28;
      v44 = v69;
      Canvas.updatablePaper2.getter(v69);
      v45 = (uint64_t)v76;
      WeakRef.subscript.getter();
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v44, v71);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v16, v41);
      v46 = type metadata accessor for Shape();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v45, 1, v46) != 1)
      {
        v49 = v65;
        v48 = v66;
        v50 = v67;
        (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v65, v45 + *(int *)(v46 + 52), v67);
        v51 = (void *)CRAttributedString.attributedString.getter();
        v52 = objc_msgSend(v51, sel_string);

        v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v55 = v54;

        if (v53 || v55 != 0xE000000000000000)
        {
          v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
          if ((v56 & 1) != 0)
            goto LABEL_30;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRAttributedString<TextAttributeScope>.Runs>);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
          v63 = swift_allocObject();
          *(_OWORD *)(v63 + 16) = xmmword_1DDF32CF0;
          CRAttributedString.runs.getter();
          v62 = Array<A>.textStyles.getter(v63);
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          v61 = v68;
        }
        else
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
LABEL_30:
          type metadata accessor for ShapeSecondaryProperties();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
          v57 = (uint64_t)v64;
          CRRegister.wrappedValue.getter();
          v58 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
          v59 = *(_QWORD *)(v58 - 8);
          v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58);
          v61 = v68;
          if (v60 == 1)
          {
            outlined destroy of StocksKitCurrencyCache.Provider?(v57, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
            v62 = 0;
          }
          else
          {
            v62 = CRAttributedString.Attributes<>.textStyles.getter();
            (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v57, v58);
          }
        }
        outlined destroy of PKStrokeProperties(v45, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        v47 = (v62 >> 2) & 1;
        (*(void (**)(char *, uint64_t))(v61 + 8))(v75, v20);
LABEL_35:
        swift_release();
        return v47;
      }
      outlined destroy of StocksKitCurrencyCache.Provider?(v45, &demangling cache variable for type metadata for Shape?);
      v24 = v75;
      v28 = v43;
      v21 = v68;
    }
    result = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v24, v20);
  }
  v40 = v38 + 3;
  if (v40 >= v78)
  {
LABEL_25:
    v47 = 0;
    goto LABEL_35;
  }
  v39 = *(_QWORD *)(v77 + 8 * v40);
  if (v39)
  {
    v35 = v40;
    goto LABEL_21;
  }
  while (1)
  {
    v35 = v40 + 1;
    if (__OFADD__(v40, 1))
      break;
    if (v35 >= v78)
      goto LABEL_25;
    v39 = *(_QWORD *)(v77 + 8 * v35);
    ++v40;
    if (v39)
      goto LABEL_21;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t CanvasFormattingProxy.strikethrough.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t result;
  int64_t v35;
  unint64_t v36;
  unint64_t v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v3, v4);
  v64 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v66 = *(_QWORD *)(v6 - 8);
  v67 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v65 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v72 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  v73 = v9;
  v10 = type metadata accessor for Capsule();
  v70 = *(_QWORD *)(v10 - 8);
  v71 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v69 = (uint64_t)&v64 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v17, v18);
  v76 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v64 - v27;
  v74 = v1;
  v29 = *(_QWORD *)(v1 + 8);
  v30 = *(_QWORD *)(v29 + 56);
  v77 = v29 + 56;
  v31 = 1 << *(_BYTE *)(v29 + 32);
  v32 = -1;
  if (v31 < 64)
    v32 = ~(-1 << v31);
  v33 = v32 & v30;
  v78 = (unint64_t)(v31 + 63) >> 6;
  v79 = v29;
  result = swift_bridgeObjectRetain();
  v35 = 0;
  v75 = v24;
  v68 = v21;
  while (1)
  {
    if (v33)
    {
      v36 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      v37 = v36 | (v35 << 6);
      goto LABEL_22;
    }
    v38 = v35 + 1;
    if (__OFADD__(v35, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v38 >= v78)
      goto LABEL_25;
    v39 = *(_QWORD *)(v77 + 8 * v38);
    ++v35;
    if (!v39)
    {
      v35 = v38 + 1;
      if (v38 + 1 >= v78)
        goto LABEL_25;
      v39 = *(_QWORD *)(v77 + 8 * v35);
      if (!v39)
      {
        v35 = v38 + 2;
        if (v38 + 2 >= v78)
          goto LABEL_25;
        v39 = *(_QWORD *)(v77 + 8 * v35);
        if (!v39)
          break;
      }
    }
LABEL_21:
    v33 = (v39 - 1) & v39;
    v37 = __clz(__rbit64(v39)) + (v35 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))(v28, *(_QWORD *)(v79 + 48) + *(_QWORD *)(v21 + 72) * v37, v20);
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v24, v28, v20);
    WeakTagged_9.tagged6.getter();
    v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
    v42 = *(_QWORD *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v16, 1, v41) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for WeakRef<Shape>?);
    }
    else
    {
      v43 = v28;
      v44 = v69;
      Canvas.updatablePaper2.getter(v69);
      v45 = (uint64_t)v76;
      WeakRef.subscript.getter();
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v44, v71);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v16, v41);
      v46 = type metadata accessor for Shape();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v45, 1, v46) != 1)
      {
        v49 = v65;
        v48 = v66;
        v50 = v67;
        (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v65, v45 + *(int *)(v46 + 52), v67);
        v51 = (void *)CRAttributedString.attributedString.getter();
        v52 = objc_msgSend(v51, sel_string);

        v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v55 = v54;

        if (v53 || v55 != 0xE000000000000000)
        {
          v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
          if ((v56 & 1) != 0)
            goto LABEL_30;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRAttributedString<TextAttributeScope>.Runs>);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
          v63 = swift_allocObject();
          *(_OWORD *)(v63 + 16) = xmmword_1DDF32CF0;
          CRAttributedString.runs.getter();
          v62 = Array<A>.textStyles.getter(v63);
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          v61 = v68;
        }
        else
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
LABEL_30:
          type metadata accessor for ShapeSecondaryProperties();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
          v57 = (uint64_t)v64;
          CRRegister.wrappedValue.getter();
          v58 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
          v59 = *(_QWORD *)(v58 - 8);
          v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58);
          v61 = v68;
          if (v60 == 1)
          {
            outlined destroy of StocksKitCurrencyCache.Provider?(v57, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
            v62 = 0;
          }
          else
          {
            v62 = CRAttributedString.Attributes<>.textStyles.getter();
            (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v57, v58);
          }
        }
        outlined destroy of PKStrokeProperties(v45, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        v47 = (v62 >> 3) & 1;
        (*(void (**)(char *, uint64_t))(v61 + 8))(v75, v20);
LABEL_35:
        swift_release();
        return v47;
      }
      outlined destroy of StocksKitCurrencyCache.Provider?(v45, &demangling cache variable for type metadata for Shape?);
      v24 = v75;
      v28 = v43;
      v21 = v68;
    }
    result = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v24, v20);
  }
  v40 = v38 + 3;
  if (v40 >= v78)
  {
LABEL_25:
    v47 = 0;
    goto LABEL_35;
  }
  v39 = *(_QWORD *)(v77 + 8 * v40);
  if (v39)
  {
    v35 = v40;
    goto LABEL_21;
  }
  while (1)
  {
    v35 = v40 + 1;
    if (__OFADD__(v40, 1))
      break;
    if (v35 >= v78)
      goto LABEL_25;
    v39 = *(_QWORD *)(v77 + 8 * v35);
    ++v40;
    if (v39)
      goto LABEL_21;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t CanvasFormattingProxy.bold.setter(uint64_t a1, uint64_t a2, uint64_t (*a3)(double))
{
  return Canvas.undoable(newChange:persistSelection:action:)(1, 0, a3);
}

void closure #1 in CanvasFormattingProxy.bold.setter()
{
  void *v0;
  id v1;

  v0 = (void *)specialized Canvas.paperView.getter();
  swift_beginAccess();
  type metadata accessor for Capsule();
  v1 = v0;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();

}

uint64_t closure #1 in closure #1 in CanvasFormattingProxy.underline.setter(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t result;
  int64_t v86;
  unint64_t v87;
  uint64_t v88;
  int64_t v89;
  unint64_t v90;
  int64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  unsigned int (*v95)(char *, uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  char *v98;
  unsigned int (*v99)(char *, uint64_t, uint64_t);
  uint64_t v100;
  void (*v101)(char *);
  uint64_t v102;
  void *v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  void (*v112)(char *, uint64_t);
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t (*v125)(char *, uint64_t, uint64_t);
  char *v126;
  uint64_t v127;
  int v128;
  _QWORD *v129;
  char *v130;
  uint64_t v131;
  void *v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void (*v137)(char *, char *, uint64_t);
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  BOOL v142;
  void (*v143)(char *, _QWORD);
  unint64_t v144;
  unint64_t v145;
  _QWORD *v146;
  char *v147;
  int v148;
  char v149;
  void (*v150)(uint64_t, uint64_t);
  char *v151;
  uint64_t v152;
  void (*v153)(char *, uint64_t, uint64_t);
  uint64_t v154;
  void *v155;
  id v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void (*v160)(char *, _QWORD);
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD v166[2];
  char *v167;
  char *v168;
  uint64_t v169;
  char *v170;
  char *v171;
  void (*v172)(char *, _QWORD);
  unsigned int (*v173)(char *, uint64_t, uint64_t);
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void (*v183)(char *, uint64_t);
  void (*v184)(char *, uint64_t, uint64_t);
  int v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  char *v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  int64_t v200;
  uint64_t v201;
  _QWORD *v202;
  char *v203;
  char *v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  void (*v215)(void);
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  int64_t v223;
  char v224[8];
  char v225[8];
  int v226;
  char v227;

  v215 = a7;
  v187 = a6;
  v182 = a5;
  v181 = a4;
  v226 = a3;
  v202 = a1;
  v179 = *a1;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  v219 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v9);
  v188 = (char *)v166 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v203 = (char *)v166 - v13;
  v207 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  v211 = *(_QWORD *)(v207 - 8);
  MEMORY[0x1E0C80A78](v207, v14);
  v206 = (char *)v166 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v166 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v176 = (uint64_t)v166 - v22;
  MEMORY[0x1E0C80A78](v23, v24);
  v175 = (uint64_t)v166 - v25;
  MEMORY[0x1E0C80A78](v26, v27);
  v174 = (char *)v166 - v28;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x1E0C80A78](v29, v30);
  v221 = (char *)v166 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v205 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
  v169 = *(_QWORD *)(v205 - 8);
  MEMORY[0x1E0C80A78](v205, v32);
  v168 = (char *)v166 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v214 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  v178 = *(_QWORD *)(v214 - 8);
  MEMORY[0x1E0C80A78](v214, v34);
  v167 = (char *)v166 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v36, v37);
  v213 = (char *)v166 - v38;
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v197 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39, v40);
  v177 = (char *)v166 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v42, v43);
  v166[0] = (char *)v166 - v44;
  MEMORY[0x1E0C80A78](v45, v46);
  v171 = (char *)v166 - v47;
  MEMORY[0x1E0C80A78](v48, v49);
  v196 = (char *)v166 - v50;
  v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v51, v52);
  v170 = (char *)v166 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v54, v55);
  v57 = (char *)v166 - v56;
  v58 = type metadata accessor for Shape();
  v195 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58, v59);
  v186 = (uint64_t)v166 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v61, v62);
  v201 = (uint64_t)v166 - v63;
  v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v64, v65);
  v67 = (char *)v166 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  v220 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
  v216 = *(_QWORD *)(v220 - 8);
  MEMORY[0x1E0C80A78](v220, v68);
  v212 = (char *)v166 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v71 = *(_QWORD *)(v70 - 8);
  MEMORY[0x1E0C80A78](v70, v72);
  v74 = (char *)v166 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v75, v76);
  v204 = (char *)v166 - v77;
  v180 = a2;
  v78 = *(_QWORD *)(a2 + 8);
  v80 = v79;
  v81 = *(_QWORD *)(v78 + 56);
  v199 = v78 + 56;
  v82 = 1 << *(_BYTE *)(v78 + 32);
  v83 = -1;
  if (v82 < 64)
    v83 = ~(-1 << v82);
  v84 = v83 & v81;
  v200 = (unint64_t)(v82 + 63) >> 6;
  v185 = v226 & 1;
  v209 = v78;
  result = swift_bridgeObjectRetain();
  v86 = 0;
  v208 = v8;
  v189 = v19;
  v217 = v39;
  v190 = v57;
  v198 = v58;
  v218 = v67;
  v194 = v80;
  v193 = v71;
  v192 = v74;
  while (1)
  {
    if (v84)
    {
      v222 = (v84 - 1) & v84;
      v223 = v86;
      v87 = __clz(__rbit64(v84)) | (v86 << 6);
      v88 = v216;
    }
    else
    {
      v89 = v86 + 1;
      v88 = v216;
      if (__OFADD__(v86, 1))
        goto LABEL_72;
      if (v89 >= v200)
        return swift_release();
      v90 = *(_QWORD *)(v199 + 8 * v89);
      v91 = v86 + 1;
      if (!v90)
      {
        v91 = v86 + 2;
        if (v86 + 2 >= v200)
          return swift_release();
        v90 = *(_QWORD *)(v199 + 8 * v91);
        if (!v90)
        {
          v91 = v86 + 3;
          if (v86 + 3 >= v200)
            return swift_release();
          v90 = *(_QWORD *)(v199 + 8 * v91);
          if (!v90)
          {
            v92 = v86 + 4;
            if (v86 + 4 >= v200)
              return swift_release();
            v90 = *(_QWORD *)(v199 + 8 * v92);
            if (!v90)
            {
              while (1)
              {
                v91 = v92 + 1;
                if (__OFADD__(v92, 1))
                  goto LABEL_73;
                if (v91 >= v200)
                  return swift_release();
                v90 = *(_QWORD *)(v199 + 8 * v91);
                ++v92;
                if (v90)
                  goto LABEL_21;
              }
            }
            v91 = v86 + 4;
          }
        }
      }
LABEL_21:
      v222 = (v90 - 1) & v90;
      v223 = v91;
      v87 = __clz(__rbit64(v90)) + (v91 << 6);
    }
    v93 = v204;
    (*(void (**)(char *, unint64_t, uint64_t))(v71 + 16))(v204, *(_QWORD *)(v209 + 48) + *(_QWORD *)(v71 + 72) * v87, v80);
    (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v74, v93, v80);
    WeakTagged_9.tagged6.getter();
    v94 = (uint64_t)v218;
    v95 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48);
    v96 = v88;
    v97 = v220;
    if (v95(v218, 1, v220) == 1)
    {
      (*(void (**)(char *, uint64_t))(v71 + 8))(v74, v80);
      result = outlined destroy of StocksKitCurrencyCache.Provider?(v94, &demangling cache variable for type metadata for WeakRef<Shape>?);
      goto LABEL_5;
    }
    v98 = v212;
    (*(void (**)(char *, uint64_t, uint64_t))(v96 + 32))(v212, v94, v97);
    WeakRef.subscript.getter();
    v99 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v195 + 48);
    if (v99(v57, 1, v58) == 1)
    {
      (*(void (**)(char *, uint64_t))(v96 + 8))(v98, v97);
      v71 = v193;
      v74 = v192;
      v80 = v194;
      (*(void (**)(char *, uint64_t))(v193 + 8))(v192, v194);
      result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v57, &demangling cache variable for type metadata for Shape?);
      goto LABEL_5;
    }
    v100 = v201;
    outlined init with take of PKStrokeStruct((uint64_t)v57, v201, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    v101 = *(void (**)(char *))(v197 + 16);
    v191 = v100 + *(int *)(v58 + 52);
    v102 = v217;
    v101(v196);
    v103 = (void *)CRAttributedString.attributedString.getter();
    v104 = objc_msgSend(v103, sel_string);

    v105 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v107 = v106;

    if (v105 || v107 != 0xE000000000000000)
      break;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v197 + 8))(v196, v102);
    v58 = v198;
    v108 = v188;
    v109 = v219;
    v110 = (uint64_t)v189;
LABEL_59:
    v210 = type metadata accessor for ShapeSecondaryProperties();
    v191 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
    CRRegister.wrappedValue.getter();
    v159 = v186;
    outlined init with copy of PKStrokeProperties(v201, v186, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v109 + 48))(v110, 1, v8) == 1)
    {
      type metadata accessor for CanvasFormattingProxy(0, *(_QWORD *)(v179 + *MEMORY[0x1E0D12A70]), v181, v182);
      CanvasFormattingProxy.defaultEmptyTextBoxAttribues(for:)();
      outlined destroy of PKStrokeProperties(v159, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      outlined destroy of StocksKitCurrencyCache.Provider?(v110, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    }
    else
    {
      outlined destroy of PKStrokeProperties(v159, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      (*(void (**)(char *, uint64_t, uint64_t))(v109 + 32))(v108, v110, v8);
    }
    v57 = v190;
    swift_getKeyPath();
    v225[0] = v185;
    v215();
    CRAttributedString.Attributes.subscript.setter();
    v160 = (void (*)(char *, _QWORD))WeakRef.subscript.modify();
    if (v99(v161, 1, v58))
    {
      v160(v225, 0);
      v162 = v219;
    }
    else
    {
      v162 = v219;
      v163 = (uint64_t)v174;
      (*(void (**)(char *, char *, uint64_t))(v219 + 16))(v174, v108, v8);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v162 + 56))(v163, 0, 1, v8);
      v164 = v175;
      outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v163, v175);
      outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v164, v176);
      v57 = v190;
      CRRegister.wrappedValue.setter();
      v165 = v164;
      v58 = v198;
      outlined destroy of StocksKitCurrencyCache.Provider?(v165, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
      outlined destroy of StocksKitCurrencyCache.Provider?(v163, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
      v160(v225, 0);
    }
    (*(void (**)(char *, uint64_t))(v162 + 8))(v108, v8);
    outlined destroy of PKStrokeProperties(v201, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    (*(void (**)(char *, uint64_t))(v216 + 8))(v212, v220);
    v71 = v193;
    v74 = v192;
    v80 = v194;
    result = (*(uint64_t (**)(char *, uint64_t))(v193 + 8))(v192, v194);
LABEL_5:
    v84 = v222;
    v86 = v223;
  }
  v184 = (void (*)(char *, uint64_t, uint64_t))v101;
  v111 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  v112 = *(void (**)(char *, uint64_t))(v197 + 8);
  v112(v196, v102);
  v58 = v198;
  v108 = v188;
  v109 = v219;
  v110 = (uint64_t)v189;
  if ((v111 & 1) != 0)
    goto LABEL_59;
  v183 = v112;
  v113 = (uint64_t)v170;
  WeakRef.subscript.getter();
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v99)(v113, 1, v58);
  if ((_DWORD)result == 1)
    goto LABEL_76;
  v114 = v171;
  v115 = v217;
  v184(v171, v113 + *(int *)(v58 + 52), v217);
  outlined destroy of PKStrokeProperties(v113, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  CRAttributedString.count.getter();
  v183(v114, v115);
  swift_getKeyPath();
  v116 = WeakRef.subscript.modify();
  v118 = v117;
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v99)(v117, 1, v58);
  if ((_DWORD)result == 1)
    goto LABEL_77;
  v119 = *(int *)(v58 + 52);
  result = NSNotFound.getter();
  v8 = v208;
  if (!result)
    goto LABEL_74;
  v172 = (void (*)(char *, _QWORD))v116;
  v173 = v99;
  v120 = v118 + v119;
  v121 = v168;
  CRAttributedString.subscript.getter();
  v122 = v167;
  v123 = v205;
  CRAttributedString.Substring.runs.getter();
  (*(void (**)(char *, uint64_t))(v169 + 8))(v121, v123);
  (*(void (**)(char *, char *, uint64_t))(v178 + 32))(v213, v122, v214);
  v124 = v221;
  CRAttributedString.Runs.next()();
  v125 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v211 + 48);
  v126 = v124;
  v127 = v207;
  v128 = v125(v126, 1, v207);
  v129 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v130 = v206;
  v210 = v120;
  if (v128 == 1)
  {
LABEL_33:
    (*(void (**)(char *, uint64_t))(v178 + 8))(v213, v214);
    swift_bridgeObjectRelease();
    swift_release();
    v131 = v217;
    v184(v177, v120, v217);
    v132 = (void *)CRAttributedString.attributedString.getter();
    v133 = objc_msgSend(v132, sel_string);

    v134 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v136 = v135;

    if (!v134 && v136 == 0xE000000000000000)
    {
      swift_bridgeObjectRelease();
      v183(v177, v131);
      v109 = v219;
      v110 = (uint64_t)v189;
      goto LABEL_57;
    }
    v149 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v150 = (void (*)(uint64_t, uint64_t))v183;
    v183(v177, v131);
    v109 = v219;
    v110 = (uint64_t)v189;
    v58 = v198;
    if ((v149 & 1) == 0)
    {
      v151 = v171;
      v152 = v210;
      v153 = v184;
      v184(v171, v210, v131);
      v154 = v166[0];
      v153((char *)v166[0], v152, v131);
      v155 = (void *)CRAttributedString.attributedString.getter();
      v150(v154, v131);
      v156 = objc_msgSend(v155, sel_length);

      result = (uint64_t)v156 - 1;
      if (__OFSUB__(v156, 1))
        goto LABEL_75;
      v157 = (uint64_t)v174;
      CRAttributedString.attributes(at:effectiveRange:)();
      v150((uint64_t)v151, v217);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v109 + 56))(v157, 0, 1, v8);
      v158 = v175;
      outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v157, v175);
      outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v158, v176);
      type metadata accessor for ShapeSecondaryProperties();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
      CRRegister.wrappedValue.setter();
      outlined destroy of StocksKitCurrencyCache.Provider?(v158, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
      outlined destroy of StocksKitCurrencyCache.Provider?(v157, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
LABEL_57:
      v58 = v198;
    }
    v172(v225, 0);
    v108 = v188;
    v99 = v173;
    goto LABEL_59;
  }
  v137 = *(void (**)(char *, char *, uint64_t))(v211 + 32);
  while (1)
  {
    v137(v130, v221, v127);
    v138 = v203;
    CRAttributedString.Runs.Run.attributes.getter();
    (*(void (**)(char *, uint64_t))(v219 + 8))(v138, v8);
    result = CRAttributedString.Runs.Run.range.getter();
    v140 = v139 - result;
    if (__OFSUB__(v139, result))
      break;
    v141 = result;
    v142 = __OFADD__(result, v140);
    if ((v226 & 1) != 0)
    {
      if (v142)
        goto LABEL_68;
      if (v139 < result)
        goto LABEL_70;
      v227 = 1;
    }
    else
    {
      if (v142)
        goto LABEL_69;
      if (v139 < result)
        goto LABEL_71;
      v227 = 2;
    }
    swift_retain();
    v143 = (void (*)(char *, _QWORD))CRAttributedString.subscript.modify();
    v215();
    CRAttributedString.Substring.subscript.setter();
    v143(v224, 0);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v129 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v129[2] + 1, 1, v129);
    v145 = v129[2];
    v144 = v129[3];
    if (v145 >= v144 >> 1)
      v129 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v144 > 1), v145 + 1, 1, v129);
    v129[2] = v145 + 1;
    v146 = &v129[2 * v145];
    v146[4] = v141;
    v146[5] = v140;
    v130 = v206;
    v127 = v207;
    (*(void (**)(char *, uint64_t))(v211 + 8))(v206, v207);
    v147 = v221;
    CRAttributedString.Runs.next()();
    v148 = v125(v147, 1, v127);
    v8 = v208;
    v120 = v210;
    if (v148 == 1)
      goto LABEL_33;
  }
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
  return result;
}

void CanvasFormattingProxy.fontColor.getter(uint64_t a1@<X0>, CGColorRef *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int64_t v48;
  unint64_t v49;
  unint64_t i;
  int64_t v51;
  unint64_t v52;
  int64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  CGColor *v67;
  id v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void (*v73)(char *, unint64_t, uint64_t);
  char *v74;
  uint64_t v75;
  id (**v76)@<X0>(uint64_t *@<X8>);
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  char v82;
  uint64_t v83;
  CGColor *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  CGColorRef *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  CGColor *v116;
  CGColor *v117;

  v92 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v4, v5);
  v94 = (char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
  MEMORY[0x1E0C80A78](v7, v8);
  v90 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>, Color>);
  MEMORY[0x1E0C80A78](v87, v10);
  v89 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  v88 = *(_QWORD *)(v91 - 8);
  MEMORY[0x1E0C80A78](v91, v12);
  v86 = (char *)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v109 = *(_QWORD *)(v14 - 8);
  v110 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v108 = (char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(a1 + 16);
  v106 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  v107 = v21;
  v22 = type metadata accessor for Capsule();
  v104 = *(_QWORD *)(v22 - 8);
  v105 = v22;
  MEMORY[0x1E0C80A78](v22, v23);
  v102 = (uint64_t)&v85 - v24;
  v25 = type metadata accessor for Shape();
  v100 = *(_QWORD *)(v25 - 8);
  v101 = v25;
  MEMORY[0x1E0C80A78](v25, v26);
  v99 = (uint64_t)&v85 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v85 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
  v115 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32, v33);
  v113 = (char *)&v85 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v36 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35, v37);
  v39 = (char *)&v85 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40, v41);
  v114 = (char *)&v85 - v42;
  v103 = v2;
  v43 = *(_QWORD *)(v2 + 8);
  v44 = *(_QWORD *)(v43 + 56);
  v111 = v43 + 56;
  v45 = 1 << *(_BYTE *)(v43 + 32);
  v46 = -1;
  if (v45 < 64)
    v46 = ~(-1 << v45);
  v47 = v46 & v44;
  v112 = (unint64_t)(v45 + 63) >> 6;
  swift_bridgeObjectRetain();
  v48 = 0;
  v95 = v32;
  v97 = v39;
  v98 = v43;
  v93 = v20;
  v96 = v31;
  if (v47)
    goto LABEL_6;
LABEL_7:
  v51 = v48 + 1;
  if (__OFADD__(v48, 1))
  {
    __break(1u);
    goto LABEL_42;
  }
  if (v51 >= v112)
  {
LABEL_32:
    swift_release();
    Color.init(red:green:blue:alpha:)(v92, 0.0, 0.0, 0.0, 1.0);
    return;
  }
  v52 = *(_QWORD *)(v111 + 8 * v51);
  ++v48;
  if (!v52)
  {
    v48 = v51 + 1;
    if (v51 + 1 >= v112)
      goto LABEL_32;
    v52 = *(_QWORD *)(v111 + 8 * v48);
    if (!v52)
    {
      v48 = v51 + 2;
      if (v51 + 2 >= v112)
        goto LABEL_32;
      v52 = *(_QWORD *)(v111 + 8 * v48);
      if (!v52)
      {
        v53 = v51 + 3;
        if (v53 < v112)
        {
          v52 = *(_QWORD *)(v111 + 8 * v53);
          if (v52)
          {
            v48 = v53;
            goto LABEL_20;
          }
          while (1)
          {
            v48 = v53 + 1;
            if (__OFADD__(v53, 1))
              break;
            if (v48 >= v112)
              goto LABEL_32;
            v52 = *(_QWORD *)(v111 + 8 * v48);
            ++v53;
            if (v52)
              goto LABEL_20;
          }
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          swift_once();
          goto LABEL_35;
        }
        goto LABEL_32;
      }
    }
  }
LABEL_20:
  v47 = (v52 - 1) & v52;
  for (i = __clz(__rbit64(v52)) + (v48 << 6); ; i = v49 | (v48 << 6))
  {
    v54 = v114;
    (*(void (**)(char *, unint64_t, uint64_t))(v36 + 16))(v114, *(_QWORD *)(v43 + 48) + *(_QWORD *)(v36 + 72) * i, v35);
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v39, v54, v35);
    v55 = v39;
    WeakTagged_9.tagged6.getter();
    v56 = v115;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v115 + 48))(v31, 1, v32) == 1)
    {
      (*(void (**)(char *, uint64_t))(v36 + 8))(v55, v35);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v31, &demangling cache variable for type metadata for WeakRef<Shape>?);
      v39 = v55;
      if (!v47)
        goto LABEL_7;
      goto LABEL_6;
    }
    v57 = v113;
    (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v113, v31, v32);
    v58 = v102;
    Canvas.updatablePaper2.getter(v102);
    WeakRef.subscript.getter();
    (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v58, v105);
    v59 = v101;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48))(v20, 1, v101) == 1)
    {
      (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v32);
      v39 = v97;
      (*(void (**)(char *, uint64_t))(v36 + 8))(v97, v35);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for Shape?);
      v43 = v98;
      goto LABEL_30;
    }
    v60 = v99;
    outlined init with take of PKStrokeStruct((uint64_t)v20, v99, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    (*(void (**)(char *, uint64_t, uint64_t))(v109 + 16))(v108, v60 + *(int *)(v59 + 52), v110);
    v61 = (void *)CRAttributedString.attributedString.getter();
    v62 = objc_msgSend(v61, sel_string);

    v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v65 = v64;

    if (v63 || v65 != 0xE000000000000000)
    {
      v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v109 + 8))(v108, v110);
      if ((v66 & 1) == 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRAttributedString<TextAttributeScope>.Runs>);
        v69 = v88;
        v70 = (*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80);
        v71 = swift_allocObject();
        *(_OWORD *)(v71 + 16) = xmmword_1DDF32CF0;
        v72 = v71 + v70;
        CRAttributedString.runs.getter();
        v117 = (CGColor *)MEMORY[0x1E0DEE9D8];
        v73 = *(void (**)(char *, unint64_t, uint64_t))(v69 + 16);
        swift_bridgeObjectRetain();
        v74 = v86;
        v31 = (char *)v91;
        v73(v86, v72, v91);
        v75 = (uint64_t)v90;
        v73(v90, (unint64_t)v74, (uint64_t)v31);
        v20 = v89;
        v73(v89, v75, (uint64_t)v31);
        v76 = (id (**)@<X0>(uint64_t *@<X8>))&v20[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>)
                                                                   + 44)];
        *v76 = closure #1 in CRAttributedString.Runs<>.fontColors.getter;
        v76[1] = 0;
        v77 = &v20[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>)
                          + 36)];
        *(_QWORD *)v77 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
        *((_QWORD *)v77 + 1) = 0;
        v78 = &v20[*(int *)(v87 + 44)];
        *(_QWORD *)v78 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
        *((_QWORD *)v78 + 1) = 0;
        outlined destroy of StocksKitCurrencyCache.Provider?(v75, &demangling cache variable for type metadata for LazySequence<CRAttributedString<TextAttributeScope>.Runs>);
        v79 = specialized Sequence<>.uniqueElements()();
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CRAttributedString<TextAttributeScope>.Runs, Color?>>, Color>);
        (*(void (**)(char *, char *))(v69 + 8))(v74, v31);
        specialized Array.append<A>(contentsOf:)(v79);
        swift_bridgeObjectRelease();
        v43 = specialized Set.init<A>(_:)((uint64_t)v117);
        swift_bridgeObjectRelease();
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
        v80 = specialized Set.startIndex.getter(v43);
        if ((v82 & 1) != 0)
        {
          __break(1u);
        }
        else
        {
          v83 = v95;
          v32 = v115;
          if (*(_DWORD *)(v43 + 36) != v81)
            goto LABEL_43;
          if (v80 != 1 << *(_BYTE *)(v43 + 32))
          {
            specialized Set.subscript.getter(v80, v81, v43, &v117);
            swift_bridgeObjectRelease();
            v84 = v117;
            outlined destroy of PKStrokeProperties(v99, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
            (*(void (**)(char *, uint64_t))(v32 + 8))(v113, v83);
            (*(void (**)(char *, uint64_t))(v36 + 8))(v97, v35);
            swift_release();
            *v92 = v84;
            return;
          }
        }
        swift_bridgeObjectRelease();
        __break(1u);
        goto LABEL_47;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v109 + 8))(v108, v110);
    }
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
    v31 = v94;
    CRRegister.wrappedValue.getter();
    v43 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
    v32 = *(_QWORD *)(v43 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v31, 1, v43) != 1)
      break;
    outlined destroy of PKStrokeProperties(v99, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    v32 = v95;
    (*(void (**)(char *, uint64_t))(v115 + 8))(v113, v95);
    v39 = v97;
    (*(void (**)(char *, uint64_t))(v36 + 8))(v97, v35);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v31, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
    v43 = v98;
    v20 = v93;
LABEL_30:
    v31 = v96;
    if (!v47)
      goto LABEL_7;
LABEL_6:
    v49 = __clz(__rbit64(v47));
    v47 &= v47 - 1;
  }
  swift_getKeyPath();
  lazy protocol witness table accessor for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute();
  CRAttributedString.Attributes.subscript.getter();
  swift_release();
  v67 = v117;
  v20 = v113;
  if (v117)
    goto LABEL_36;
  if (one-time initialization token for textBoxDefaultTextColor != -1)
    goto LABEL_44;
LABEL_35:
  v68 = (id)static UIConstants.textBoxDefaultTextColor;
  Color.init(cgColor:)((CGColor *)objc_msgSend(v68, sel_CGColor), &v116);

  v67 = v116;
  if (v116)
  {
LABEL_36:
    outlined destroy of PKStrokeProperties(v99, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    (*(void (**)(char *, uint64_t))(v115 + 8))(v20, v95);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v97, v35);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v43);
    swift_release();
    *v92 = v67;
  }
  else
  {
LABEL_47:
    __break(1u);
  }
}

void CanvasFormattingProxy.fontColor.setter(void **a1)
{
  void *v1;

  v1 = *a1;
  Canvas.undoable(newChange:persistSelection:action:)(1, 0, (uint64_t (*)(double))partial apply for closure #1 in CanvasFormattingProxy.fontColor.setter);

}

void closure #1 in CanvasFormattingProxy.fillColor.setter()
{
  void *v0;
  id v1;

  v0 = (void *)specialized Canvas.paperView.getter();
  swift_beginAccess();
  type metadata accessor for Capsule();
  v1 = v0;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();

}

void closure #1 in closure #1 in CanvasFormattingProxy.fontColor.setter(_QWORD *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  int64_t v81;
  char *v82;
  _QWORD *v83;
  unint64_t v84;
  void (**v85)(char *, unint64_t, uint64_t);
  int64_t v86;
  unint64_t v87;
  int64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  void (**v92)(char *, uint64_t);
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  unsigned int (*v98)(char *, uint64_t, uint64_t);
  char *v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(char *);
  void *v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  void (*v112)(char *, uint64_t);
  uint64_t v113;
  uint64_t v114;
  unsigned int (*v115)(uint64_t, uint64_t, uint64_t);
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t (*v126)(char *, uint64_t, uint64_t);
  int v127;
  _QWORD *v128;
  char *v129;
  char *v130;
  void *v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  id v142;
  char v143;
  char *v144;
  BOOL v145;
  void (*v146)(char *, _QWORD);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  char v151;
  char *v152;
  void (*v153)(uint64_t, void (**)(char *, unint64_t, uint64_t));
  char *v154;
  uint64_t v155;
  void (*v156)(char *);
  uint64_t v157;
  void *v158;
  id v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  id v164;
  id v165;
  void (*v166)(id *, _QWORD);
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD v175[2];
  char *v176;
  char *v177;
  char *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  void (*v182)(id *, _QWORD);
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void (*v191)(char *, void (**)(char *, unint64_t, uint64_t));
  void (*v192)(char *);
  char *v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  _QWORD *v204;
  unsigned int (*v205)(uint64_t, uint64_t, uint64_t);
  char *v206;
  uint64_t v207;
  int64_t v208;
  uint64_t v209;
  id v210;
  uint64_t v211;
  char *v212;
  void (*v213)(_QWORD, char *, uint64_t);
  char *v214;
  char *v215;
  uint64_t v216;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  void (**v227)(char *, unint64_t, uint64_t);
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int64_t v232;
  char v233[8];
  id v234;
  id v235;

  v190 = a5;
  v189 = a4;
  v210 = a3;
  v204 = a1;
  v187 = *a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v6, v7);
  v194 = (char *)v175 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v185 = (uint64_t)v175 - v11;
  MEMORY[0x1E0C80A78](v12, v13);
  v184 = (uint64_t)v175 - v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v183 = (char *)v175 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
  v229 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)v175 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v212 = (char *)v175 - v24;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run);
  v220 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25, v26);
  v218 = (char *)v175 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs.Run?);
  MEMORY[0x1E0C80A78](v28, v29);
  v217 = (char *)v175 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v216 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Substring);
  v179 = *(_QWORD *)(v216 - 8);
  MEMORY[0x1E0C80A78](v216, v31);
  v178 = (char *)v175 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v224 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  v186 = *(_QWORD *)(v224 - 8);
  MEMORY[0x1E0C80A78](v224, v33);
  v177 = (char *)v175 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35, v36);
  v223 = (char *)v175 - v37;
  v230 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v203 = *(_QWORD *)(v230 - 8);
  MEMORY[0x1E0C80A78](v230, v38);
  v175[0] = (char *)v175 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40, v41);
  v176 = (char *)v175 - v42;
  MEMORY[0x1E0C80A78](v43, v44);
  v181 = (char *)v175 - v45;
  MEMORY[0x1E0C80A78](v46, v47);
  v202 = (char *)v175 - v48;
  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v49, v50);
  v180 = (char *)v175 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v52, v53);
  v201 = (char *)v175 - v54;
  v211 = type metadata accessor for Shape();
  v200 = *(_QWORD *)(v211 - 8);
  MEMORY[0x1E0C80A78](v211, v55);
  v57 = (char *)v175 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v58, v59);
  v209 = (uint64_t)v175 - v60;
  v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v61, v62);
  v64 = (char *)v175 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  v228 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
  v65 = *(_QWORD *)(v228 - 8);
  MEMORY[0x1E0C80A78](v228, v66);
  v214 = (char *)v175 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v227 = *(void (***)(char *, unint64_t, uint64_t))(v68 - 8);
  MEMORY[0x1E0C80A78](v68, v69);
  v71 = (char *)v175 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v72, v73);
  v215 = (char *)v175 - v74;
  v188 = a2;
  v75 = *(_QWORD *)(a2 + 8);
  v76 = *(_QWORD *)(v75 + 56);
  v207 = v75 + 56;
  v77 = 1 << *(_BYTE *)(v75 + 32);
  v78 = -1;
  if (v77 < 64)
    v78 = ~(-1 << v77);
  v79 = v78 & v76;
  v208 = (unint64_t)(v77 + 63) >> 6;
  v219 = v75;
  swift_bridgeObjectRetain();
  v80 = v204;
  v81 = 0;
  v226 = v18;
  v206 = v21;
  v82 = v71;
  v225 = v25;
  v195 = v57;
  v199 = v64;
  v196 = v65;
  v198 = v68;
  v193 = v71;
  if (v79)
    goto LABEL_7;
LABEL_8:
  v86 = v81 + 1;
  v85 = v227;
  if (!__OFADD__(v81, 1))
  {
    if (v86 < v208)
    {
      v87 = *(_QWORD *)(v207 + 8 * v86);
      v88 = v81 + 1;
      if (v87)
        goto LABEL_21;
      v88 = v81 + 2;
      if (v81 + 2 >= v208)
        goto LABEL_68;
      v87 = *(_QWORD *)(v207 + 8 * v88);
      if (v87)
        goto LABEL_21;
      v88 = v81 + 3;
      if (v81 + 3 >= v208)
        goto LABEL_68;
      v87 = *(_QWORD *)(v207 + 8 * v88);
      if (v87)
      {
LABEL_21:
        v83 = v80;
        v231 = (v87 - 1) & v87;
        v232 = v88;
        v84 = __clz(__rbit64(v87)) + (v88 << 6);
        while (1)
        {
          v90 = v215;
          v85[2](v215, *(_QWORD *)(v219 + 48) + (_QWORD)v85[9] * v84, v68);
          v85[4](v82, (unint64_t)v90, v68);
          v91 = v82;
          v92 = (void (**)(char *, uint64_t))v85;
          v93 = v68;
          WeakTagged_9.tagged6.getter();
          v94 = v228;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v64, 1, v228) == 1)
            break;
          v82 = v91;
          v95 = v214;
          (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v214, v64, v94);
          v96 = v201;
          WeakRef.subscript.getter();
          v97 = (uint64_t)v96;
          v98 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v200 + 48);
          v99 = v96;
          v100 = v211;
          if (v98(v99, 1, v211) == 1)
          {
            (*(void (**)(char *, uint64_t))(v65 + 8))(v95, v94);
            v68 = v198;
            ((void (*)(char *, uint64_t))v227[1])(v82, v198);
            outlined destroy of StocksKitCurrencyCache.Provider?(v97, &demangling cache variable for type metadata for Shape?);
            v64 = v199;
LABEL_6:
            v79 = v231;
            v81 = v232;
            v80 = v83;
            if (!v231)
              goto LABEL_8;
            goto LABEL_7;
          }
          v205 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v98;
          v101 = v209;
          outlined init with take of PKStrokeStruct(v97, v209, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
          v102 = *(void (**)(char *))(v203 + 16);
          v197 = v101 + *(int *)(v100 + 52);
          v102(v202);
          v103 = (void *)CRAttributedString.attributedString.getter();
          v104 = objc_msgSend(v103, sel_string);

          v105 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v107 = v106;

          if (v105 || v107 != 0xE000000000000000)
          {
            v192 = v102;
            v111 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            v112 = *(void (**)(char *, uint64_t))(v203 + 8);
            v85 = (void (**)(char *, unint64_t, uint64_t))v230;
            v112(v202, v230);
            v65 = v196;
            v108 = v214;
            v109 = v226;
            v110 = (uint64_t)v195;
            if ((v111 & 1) == 0)
            {
              v191 = (void (*)(char *, void (**)(char *, unint64_t, uint64_t)))v112;
              v113 = (uint64_t)v180;
              WeakRef.subscript.getter();
              v114 = v211;
              v115 = v205;
              if (v205(v113, 1, v211) == 1)
                goto LABEL_78;
              v116 = v181;
              ((void (*)(char *, uint64_t, _QWORD))v192)(v181, v113 + *(int *)(v114 + 52), v85);
              outlined destroy of PKStrokeProperties(v113, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
              CRAttributedString.count.getter();
              v191(v116, v85);
              swift_getKeyPath();
              v85 = (void (**)(char *, unint64_t, uint64_t))v210;
              v182 = (void (*)(id *, _QWORD))WeakRef.subscript.modify();
              v118 = v117;
              if (v115(v117, 1, v114) == 1)
                goto LABEL_79;
              v119 = *(int *)(v114 + 52);
              v221 = v85;
              v120 = NSNotFound.getter();
              v109 = v226;
              if (!v120)
                goto LABEL_76;
              v121 = v118 + v119;
              v122 = v178;
              v222 = v121;
              CRAttributedString.subscript.getter();
              v123 = v177;
              v124 = v216;
              CRAttributedString.Substring.runs.getter();
              (*(void (**)(char *, uint64_t))(v179 + 8))(v122, v124);
              (*(void (**)(char *, char *, uint64_t))(v186 + 32))(v223, v123, v224);
              v125 = v217;
              CRAttributedString.Runs.next()();
              v126 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v220 + 48);
              v127 = v126(v125, 1, v25);
              v128 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              v85 = (void (**)(char *, unint64_t, uint64_t))v218;
              if (v127 != 1)
              {
                v213 = *(void (**)(_QWORD, char *, uint64_t))(v220 + 32);
                while (1)
                {
                  v213(v85, v125, v25);
                  v136 = v212;
                  CRAttributedString.Runs.Run.attributes.getter();
                  v137 = v221;
                  (*(void (**)(char *, uint64_t))(v229 + 8))(v136, v109);
                  v138 = CRAttributedString.Runs.Run.range.getter();
                  v140 = v139 - v138;
                  if (__OFSUB__(v139, v138))
                    break;
                  v85 = (void (**)(char *, unint64_t, uint64_t))v138;
                  if (one-time initialization token for defaultValue != -1)
                    swift_once();
                  v141 = (void *)static TextAttributeScope.ColorAttribute.defaultValue;
                  type metadata accessor for CGColorRef(0);
                  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CGColorRef and conformance CGColorRef, (uint64_t (*)(uint64_t))type metadata accessor for CGColorRef, (uint64_t)&protocol conformance descriptor for CGColorRef);
                  v142 = v141;
                  v143 = static _CFObject.== infix(_:_:)();

                  v144 = (char *)v85 + v140;
                  v145 = __OFADD__(v85, v140);
                  if ((v143 & 1) != 0)
                  {
                    if (v145)
                      goto LABEL_70;
                    if ((uint64_t)v144 < (uint64_t)v85)
                      goto LABEL_72;
                    v235 = 0;
                  }
                  else
                  {
                    if (v145)
                      goto LABEL_71;
                    if ((uint64_t)v144 < (uint64_t)v85)
                      goto LABEL_73;
                    v235 = v210;
                    v137 = v137;
                  }
                  swift_retain();
                  v146 = (void (*)(char *, _QWORD))CRAttributedString.subscript.modify();
                  lazy protocol witness table accessor for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute();
                  CRAttributedString.Substring.subscript.setter();
                  v146(v233, 0);

                  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  v109 = v226;
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                    v128 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v128[2] + 1, 1, v128);
                  v149 = v128[2];
                  v148 = v128[3];
                  if (v149 >= v148 >> 1)
                    v128 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v148 > 1), v149 + 1, 1, v128);
                  v128[2] = v149 + 1;
                  v150 = &v128[2 * v149];
                  v150[4] = v85;
                  v150[5] = v140;
                  v85 = (void (**)(char *, unint64_t, uint64_t))v218;
                  v25 = v225;
                  (*(void (**)(char *, uint64_t))(v220 + 8))(v218, v225);
                  v125 = v217;
                  CRAttributedString.Runs.next()();
                  if (v126(v125, 1, v25) == 1)
                    goto LABEL_33;
                }
                __break(1u);
LABEL_70:
                __break(1u);
LABEL_71:
                __break(1u);
LABEL_72:
                __break(1u);
LABEL_73:
                __break(1u);
                goto LABEL_74;
              }
LABEL_33:
              (*(void (**)(char *, uint64_t))(v186 + 8))(v223, v224);
              swift_bridgeObjectRelease();
              swift_release();
              v129 = v221;

              v130 = v176;
              v85 = (void (**)(char *, unint64_t, uint64_t))v230;
              ((void (*)(char *, uint64_t, uint64_t))v192)(v176, v222, v230);
              v131 = (void *)CRAttributedString.attributedString.getter();
              v132 = objc_msgSend(v131, sel_string);

              v133 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v135 = v134;

              if (v133 || v135 != 0xE000000000000000)
              {
                v151 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                v152 = v130;
                v153 = (void (*)(uint64_t, void (**)(char *, unint64_t, uint64_t)))v191;
                v191(v152, v85);
                v110 = (uint64_t)v195;
                v65 = v196;
                if ((v151 & 1) == 0)
                {
                  v154 = v181;
                  v155 = v222;
                  v156 = v192;
                  ((void (*)(char *, uint64_t, _QWORD))v192)(v181, v222, v85);
                  v157 = v175[0];
                  ((void (*)(_QWORD, uint64_t, _QWORD))v156)(v175[0], v155, v85);
                  v158 = (void *)CRAttributedString.attributedString.getter();
                  v153(v157, v85);
                  v159 = objc_msgSend(v158, sel_length);

                  if (__OFSUB__(v159, 1))
                    goto LABEL_77;
                  v160 = (uint64_t)v183;
                  CRAttributedString.attributes(at:effectiveRange:)();
                  v153((uint64_t)v154, (void (**)(char *, unint64_t, uint64_t))v230);
                  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v229 + 56))(v160, 0, 1, v109);
                  v161 = v184;
                  outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v160, v184);
                  outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v161, v185);
                  type metadata accessor for ShapeSecondaryProperties();
                  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
                  CRRegister.wrappedValue.setter();
                  outlined destroy of StocksKitCurrencyCache.Provider?(v161, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
                  outlined destroy of StocksKitCurrencyCache.Provider?(v160, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
                  v110 = (uint64_t)v195;
                }
              }
              else
              {
                swift_bridgeObjectRelease();
                v191(v130, v85);
                v110 = (uint64_t)v195;
                v65 = v196;
              }
              v182(&v234, 0);
              v108 = v214;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v203 + 8))(v202, v230);
            v65 = v196;
            v108 = v214;
            v109 = v226;
            v110 = (uint64_t)v195;
          }
          v222 = type metadata accessor for ShapeSecondaryProperties();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
          v162 = (uint64_t)v194;
          CRRegister.wrappedValue.getter();
          outlined init with copy of PKStrokeProperties(v209, v110, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
          v163 = v229;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v229 + 48))(v162, 1, v109) == 1)
          {
            type metadata accessor for CanvasFormattingProxy(0, *(_QWORD *)(v187 + *MEMORY[0x1E0D12A70]), v189, v190);
            CanvasFormattingProxy.defaultEmptyTextBoxAttribues(for:)();
            outlined destroy of PKStrokeProperties(v110, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
            outlined destroy of StocksKitCurrencyCache.Provider?(v162, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
          }
          else
          {
            outlined destroy of PKStrokeProperties(v110, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
            (*(void (**)(char *, uint64_t, uint64_t))(v163 + 32))(v206, v162, v109);
          }
          swift_getKeyPath();
          v164 = v210;
          v234 = v210;
          lazy protocol witness table accessor for type TextAttributeScope.ColorAttribute and conformance TextAttributeScope.ColorAttribute();
          v165 = v164;
          CRAttributedString.Attributes.subscript.setter();
          v166 = (void (*)(id *, _QWORD))WeakRef.subscript.modify();
          if (v205(v167, 1, v211))
          {
            v166(&v234, 0);
            v25 = v225;
            v79 = v231;
            v81 = v232;
            v168 = v229;
            v169 = v206;
          }
          else
          {
            v170 = v229;
            v171 = (uint64_t)v183;
            (*(void (**)(char *, char *, uint64_t))(v229 + 16))(v183, v206, v109);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v170 + 56))(v171, 0, 1, v109);
            v172 = v184;
            outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v171, v184);
            outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(v172, v185);
            v109 = v226;
            CRRegister.wrappedValue.setter();
            v173 = v172;
            v108 = v214;
            v168 = v229;
            outlined destroy of StocksKitCurrencyCache.Provider?(v173, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
            v174 = v171;
            v65 = v196;
            v169 = v206;
            outlined destroy of StocksKitCurrencyCache.Provider?(v174, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
            v166(&v234, 0);
            v25 = v225;
            v79 = v231;
            v81 = v232;
          }
          (*(void (**)(char *, uint64_t))(v168 + 8))(v169, v109);
          outlined destroy of PKStrokeProperties(v209, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
          (*(void (**)(char *, uint64_t))(v65 + 8))(v108, v228);
          v82 = v193;
          v68 = v198;
          ((void (*)(char *, uint64_t))v227[1])(v193, v198);
          v64 = v199;
          v80 = v204;
          if (!v79)
            goto LABEL_8;
LABEL_7:
          v83 = v80;
          v231 = (v79 - 1) & v79;
          v232 = v81;
          v84 = __clz(__rbit64(v79)) | (v81 << 6);
          v85 = v227;
        }
        v92[1](v91, v93);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v64, &demangling cache variable for type metadata for WeakRef<Shape>?);
        v68 = v93;
        v82 = v91;
        goto LABEL_6;
      }
      v89 = v81 + 4;
      if (v81 + 4 < v208)
      {
        v87 = *(_QWORD *)(v207 + 8 * v89);
        if (v87)
        {
          v88 = v81 + 4;
          goto LABEL_21;
        }
        while (1)
        {
          v88 = v89 + 1;
          if (__OFADD__(v89, 1))
            goto LABEL_75;
          if (v88 >= v208)
            break;
          v87 = *(_QWORD *)(v207 + 8 * v88);
          ++v89;
          if (v87)
            goto LABEL_21;
        }
      }
    }
LABEL_68:
    swift_release();
    return;
  }
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:

  __break(1u);
}

uint64_t closure #1 in CanvasFormattingProxy.boldAllowed.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char v36;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;

  v75 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v6, v7);
  v65 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v67 = *(_QWORD *)(v68 - 8);
  MEMORY[0x1E0C80A78](v68, v9);
  v66 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v70 = *(_QWORD *)(v11 - 8);
  v71 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v69 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a4 + 16);
  v76 = a3;
  v74 = v14;
  v15 = type metadata accessor for Capsule();
  v72 = *(_QWORD *)(v15 - 8);
  v73 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v63 - v17;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v63 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for Shape();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v29);
  v31 = (char *)&v63 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  WeakTagged_9.tagged6.getter();
  v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v22, 1, v32) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for WeakRef<Shape>?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56))(v26, 1, 1, v27);
  }
  else
  {
    v64 = v31;
    Canvas.updatablePaper2.getter((uint64_t)v18);
    WeakRef.subscript.getter();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v18, v73);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v22, v32);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) != 1)
    {
      v38 = (uint64_t)v64;
      outlined init with take of PKStrokeStruct((uint64_t)v26, (uint64_t)v64, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
      v39 = v69;
      CRRegister.wrappedValue.getter();
      v40 = v71;
      TaggedValue_9.tagged3.getter();
      (*(void (**)(char *, uint64_t))(v70 + 8))(v39, v40);
      if (v89 == 1)
      {
        v41 = v67;
        v42 = v66;
        v43 = v68;
        (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v66, v38 + *(int *)(v27 + 52), v68);
        v44 = (void *)CRAttributedString.attributedString.getter();
        v45 = objc_msgSend(v44, sel_string);

        v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v48 = v47;

        if (v46 || v48 != 0xE000000000000000)
        {
          v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
          v49 = v65;
          if ((v51 & 1) == 0)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRAttributedString<TextAttributeScope>.Runs>);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
            v61 = swift_allocObject();
            *(_OWORD *)(v61 + 16) = xmmword_1DDF32CF0;
            CRAttributedString.runs.getter();
            v62 = Array<A>.allowedTextStyles.getter(v61);
            swift_setDeallocating();
            swift_arrayDestroy();
            swift_deallocClassInstance();
            v36 = v62 & 1;
            outlined destroy of PKStrokeProperties(v38, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
            return v36 & 1;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
          v49 = v65;
        }
        type metadata accessor for ShapeSecondaryProperties();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
        CRRegister.wrappedValue.getter();
        v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
        v53 = *(_QWORD *)(v52 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v49, 1, v52) == 1)
        {
          outlined destroy of PKStrokeProperties(v38, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
          v34 = &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?;
          v35 = (uint64_t)v49;
          goto LABEL_5;
        }
        swift_getKeyPath();
        lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
        CRAttributedString.Attributes.subscript.getter();
        swift_release();
        v55 = v83;
        v54 = v84;
        v56 = v85;
        v57 = v86;
        v58 = v49;
        v59 = v87;
        v60 = v88;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v58, v52);
        if (v54 != 1)
        {
          v77 = v55;
          v78 = v54;
          v79 = v56;
          v80 = v57;
          v81 = v59;
          v82 = v60;
          v36 = Font.supportsBold.getter();
          outlined consume of Font?(v55, v54);
          outlined destroy of PKStrokeProperties((uint64_t)v64, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
          return v36 & 1;
        }
        v50 = (uint64_t)v64;
      }
      else
      {
        v50 = v38;
      }
      outlined destroy of PKStrokeProperties(v50, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      goto LABEL_6;
    }
  }
  v34 = &demangling cache variable for type metadata for Shape?;
  v35 = (uint64_t)v26;
LABEL_5:
  outlined destroy of StocksKitCurrencyCache.Provider?(v35, v34);
LABEL_6:
  v36 = 0;
  return v36 & 1;
}

uint64_t CanvasFormattingProxy.strokeIsRequired.getter(uint64_t a1, uint64_t (*a2)(char *))
{
  uint64_t v2;
  uint64_t v4;
  _OWORD v6[2];
  uint64_t v7;

  v4 = *(_QWORD *)(v2 + 8);
  v6[1] = *(_OWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain();
  LOBYTE(a2) = specialized Sequence.contains(where:)(a2, (char)v6, v4);
  swift_bridgeObjectRelease();
  return a2 & 1;
}

uint64_t closure #1 in CanvasFormattingProxy.italicAllowed.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;

  v75 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  MEMORY[0x1E0C80A78](v6, v7);
  v65 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v67 = *(_QWORD *)(v68 - 8);
  MEMORY[0x1E0C80A78](v68, v9);
  v66 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  v70 = *(_QWORD *)(v11 - 8);
  v71 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v69 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a4 + 16);
  v76 = a3;
  v74 = v14;
  v15 = type metadata accessor for Capsule();
  v72 = *(_QWORD *)(v15 - 8);
  v73 = v15;
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v63 - v17;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v63 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for Shape();
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v29);
  v31 = (char *)&v63 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  WeakTagged_9.tagged6.getter();
  v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v22, 1, v32) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for WeakRef<Shape>?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56))(v26, 1, 1, v27);
  }
  else
  {
    v64 = v31;
    Canvas.updatablePaper2.getter((uint64_t)v18);
    WeakRef.subscript.getter();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v18, v73);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v22, v32);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) != 1)
    {
      v38 = (uint64_t)v64;
      outlined init with take of PKStrokeStruct((uint64_t)v26, (uint64_t)v64, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>>);
      v39 = v69;
      CRRegister.wrappedValue.getter();
      v40 = v71;
      TaggedValue_9.tagged3.getter();
      (*(void (**)(char *, uint64_t))(v70 + 8))(v39, v40);
      if (v89 == 1)
      {
        v41 = v67;
        v42 = v66;
        v43 = v68;
        (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v66, v38 + *(int *)(v27 + 52), v68);
        v44 = (void *)CRAttributedString.attributedString.getter();
        v45 = objc_msgSend(v44, sel_string);

        v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v48 = v47;

        if (v46 || v48 != 0xE000000000000000)
        {
          v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
          v49 = v65;
          if ((v51 & 1) == 0)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRAttributedString<TextAttributeScope>.Runs>);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
            v61 = swift_allocObject();
            *(_OWORD *)(v61 + 16) = xmmword_1DDF32CF0;
            CRAttributedString.runs.getter();
            v62 = Array<A>.allowedTextStyles.getter(v61);
            swift_setDeallocating();
            swift_arrayDestroy();
            swift_deallocClassInstance();
            v36 = (v62 >> 1) & 1;
            outlined destroy of PKStrokeProperties(v38, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
            return v36 & 1;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
          v49 = v65;
        }
        type metadata accessor for ShapeSecondaryProperties();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<CRAttributedString<TextAttributeScope>.Attributes?>);
        CRRegister.wrappedValue.getter();
        v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes);
        v53 = *(_QWORD *)(v52 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v49, 1, v52) == 1)
        {
          outlined destroy of PKStrokeProperties(v38, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
          v34 = &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?;
          v35 = (uint64_t)v49;
          goto LABEL_5;
        }
        swift_getKeyPath();
        lazy protocol witness table accessor for type TextAttributeScope.FontAttribute and conformance TextAttributeScope.FontAttribute();
        CRAttributedString.Attributes.subscript.getter();
        swift_release();
        v55 = v83;
        v54 = v84;
        v56 = v85;
        v57 = v86;
        v58 = v49;
        v59 = v87;
        v60 = v88;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v58, v52);
        if (v54 != 1)
        {
          v77 = v55;
          v78 = v54;
          v79 = v56;
          v80 = v57;
          v81 = v59;
          v82 = v60;
          LOBYTE(v36) = Font.supportsItalic.getter();
          outlined consume of Font?(v55, v54);
          outlined destroy of PKStrokeProperties((uint64_t)v64, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
          return v36 & 1;
        }
        v50 = (uint64_t)v64;
      }
      else
      {
        v50 = v38;
      }
      outlined destroy of PKStrokeProperties(v50, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      goto LABEL_6;
    }
  }
  v34 = &demangling cache variable for type metadata for Shape?;
  v35 = (uint64_t)v26;
LABEL_5:
  outlined destroy of StocksKitCurrencyCache.Provider?(v35, v34);
LABEL_6:
  LOBYTE(v36) = 0;
  return v36 & 1;
}

uint64_t CanvasFormattingProxy.hasMultipleFontSizes.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t result;
  int64_t v48;
  unint64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  int64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  void (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(uint64_t, uint64_t, uint64_t);
  void (*v65)(char *, uint64_t, uint64_t);
  void *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  void (*v89)(char *, uint64_t, uint64_t);
  void (*v90)(char *, uint64_t);
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  int64_t v112;
  char *v113;
  uint64_t v114;
  int64_t v115;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs?);
  MEMORY[0x1E0C80A78](v3, v4);
  v93 = (char *)&v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs);
  v94 = *(_QWORD *)(v95 - 8);
  MEMORY[0x1E0C80A78](v95, v6);
  v88 = (char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v97 = *(_QWORD *)(v105 - 8);
  MEMORY[0x1E0C80A78](v105, v8);
  v87 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v96 = (char *)&v87 - v12;
  v13 = *(_QWORD *)(a1 + 16);
  v107 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  v108 = v13;
  v106 = type metadata accessor for Capsule();
  v100 = *(_QWORD *)(v106 - 8);
  MEMORY[0x1E0C80A78](v106, v14);
  v92 = (uint64_t)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v99 = (uint64_t)&v87 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v19, v20);
  v91 = (char *)&v87 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v98 = (char *)&v87 - v24;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v87 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29, v31);
  v33 = (char *)&v87 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v34 = *(_QWORD *)(v114 - 8);
  MEMORY[0x1E0C80A78](v114, v35);
  v37 = (char *)&v87 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v38, v39);
  v113 = (char *)&v87 - v40;
  v109 = v1;
  v41 = *(_QWORD *)(v1 + 8);
  v42 = (uint64_t)v28;
  v43 = *(_QWORD *)(v41 + 56);
  v111 = v41 + 56;
  v44 = 1 << *(_BYTE *)(v41 + 32);
  v45 = -1;
  if (v44 < 64)
    v45 = ~(-1 << v44);
  v46 = v45 & v43;
  v112 = (unint64_t)(v44 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v48 = 0;
  v103 = v41;
  v104 = v29;
  v101 = v37;
  v102 = v30;
  v110 = v33;
  while (v46)
  {
    v49 = __clz(__rbit64(v46));
    v46 &= v46 - 1;
    v115 = v48;
    v50 = v49 | (v48 << 6);
LABEL_21:
    v55 = v113;
    v56 = v114;
    (*(void (**)(char *, unint64_t, uint64_t))(v34 + 16))(v113, *(_QWORD *)(v41 + 48) + *(_QWORD *)(v34 + 72) * v50, v114);
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v37, v55, v56);
    v57 = v42;
    WeakTagged_9.tagged6.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v42, 1, v29) == 1)
    {
      (*(void (**)(char *, uint64_t))(v34 + 8))(v37, v56);
      result = outlined destroy of StocksKitCurrencyCache.Provider?(v42, &demangling cache variable for type metadata for WeakRef<Shape>?);
      v48 = v115;
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(v33, v42, v29);
      v58 = v99;
      Canvas.updatablePaper2.getter(v99);
      v59 = v98;
      WeakRef.subscript.getter();
      v60 = *(void (**)(uint64_t, uint64_t))(v100 + 8);
      v61 = v58;
      v62 = (uint64_t)v59;
      v60(v61, v106);
      v63 = type metadata accessor for Shape();
      v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 48);
      if (v64(v62, 1, v63) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v62, &demangling cache variable for type metadata for Shape?);
LABEL_27:
        v42 = v57;
        goto LABEL_28;
      }
      v65 = *(void (**)(char *, uint64_t, uint64_t))(v97 + 16);
      v65(v96, v62 + *(int *)(v63 + 52), v105);
      outlined destroy of PKStrokeProperties(v62, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
      v66 = (void *)CRAttributedString.attributedString.getter();
      v67 = objc_msgSend(v66, sel_string);

      v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v70 = v69;

      if (!v68 && v70 == 0xE000000000000000)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v97 + 8))(v96, v105);
        goto LABEL_27;
      }
      v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v72 = *(void (**)(char *, uint64_t))(v97 + 8);
      v72(v96, v105);
      v42 = v57;
      if ((v71 & 1) != 0)
      {
LABEL_28:
        v30 = v102;
        v33 = v110;
        v29 = v104;
        (*(void (**)(char *, uint64_t))(v102 + 8))(v110, v104);
        v37 = v101;
        result = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v101, v114);
        v41 = v103;
        v48 = v115;
      }
      else
      {
        v90 = v72;
        v89 = v65;
        v73 = v92;
        Canvas.updatablePaper2.getter(v92);
        v74 = (uint64_t)v91;
        v29 = v104;
        WeakRef.subscript.getter();
        v60(v73, v106);
        if (v64(v74, 1, v63) != 1)
        {
          v77 = v74 + *(int *)(v63 + 52);
          v78 = v87;
          v79 = v29;
          v80 = v105;
          v89(v87, v77, v105);
          outlined destroy of PKStrokeProperties(v74, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
          v81 = v93;
          CRAttributedString.runs.getter();
          v90(v78, v80);
          v82 = v94;
          v83 = v95;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v81, 0, 1, v95);
          v84 = v88;
          (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v88, v81, v83);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRAttributedString<TextAttributeScope>.Runs>);
          v85 = (*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80);
          v86 = swift_allocObject();
          *(_OWORD *)(v86 + 16) = xmmword_1DDF32CF0;
          (*(void (**)(unint64_t, char *, uint64_t))(v82 + 16))(v86 + v85, v84, v83);
          v76 = Array<A>.hasMultipleFontSizes.getter(v86);
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          (*(void (**)(char *, uint64_t))(v82 + 8))(v84, v83);
          (*(void (**)(char *, uint64_t))(v102 + 8))(v110, v79);
          (*(void (**)(char *, uint64_t))(v34 + 8))(v101, v114);
          goto LABEL_33;
        }
        outlined destroy of StocksKitCurrencyCache.Provider?(v74, &demangling cache variable for type metadata for Shape?);
        v75 = (uint64_t)v93;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v94 + 56))(v93, 1, 1, v95);
        v30 = v102;
        v33 = v110;
        (*(void (**)(char *, uint64_t))(v102 + 8))(v110, v29);
        v37 = v101;
        (*(void (**)(char *, uint64_t))(v34 + 8))(v101, v114);
        result = outlined destroy of StocksKitCurrencyCache.Provider?(v75, &demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Runs?);
        v41 = v103;
        v42 = v57;
        v48 = v115;
      }
    }
  }
  v51 = v48 + 1;
  if (__OFADD__(v48, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v51 >= v112)
    goto LABEL_32;
  v52 = *(_QWORD *)(v111 + 8 * v51);
  v53 = v48 + 1;
  if (v52)
    goto LABEL_20;
  v53 = v48 + 2;
  if (v48 + 2 >= v112)
    goto LABEL_32;
  v52 = *(_QWORD *)(v111 + 8 * v53);
  if (v52)
    goto LABEL_20;
  v53 = v48 + 3;
  if (v48 + 3 >= v112)
    goto LABEL_32;
  v52 = *(_QWORD *)(v111 + 8 * v53);
  if (v52)
  {
LABEL_20:
    v46 = (v52 - 1) & v52;
    v115 = v53;
    v50 = __clz(__rbit64(v52)) + (v53 << 6);
    goto LABEL_21;
  }
  v54 = v48 + 4;
  if (v48 + 4 >= v112)
  {
LABEL_32:
    v76 = 0;
LABEL_33:
    swift_release();
    return v76;
  }
  v52 = *(_QWORD *)(v111 + 8 * v54);
  if (v52)
  {
    v53 = v48 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v53 = v54 + 1;
    if (__OFADD__(v54, 1))
      break;
    if (v53 >= v112)
      goto LABEL_32;
    v52 = *(_QWORD *)(v111 + 8 * v53);
    ++v54;
    if (v52)
      goto LABEL_20;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t CanvasFormattingProxy.lineEnds.getter(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t result;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;

  v55 = a1;
  v56 = a2;
  v4 = *(_QWORD *)(a3 + 16);
  v61 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 16);
  v62 = v4;
  v5 = type metadata accessor for Capsule();
  v59 = *(_QWORD *)(v5 - 8);
  v60 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v58 = (uint64_t)&v53 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = &demangling cache variable for type metadata for Shape?;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Shape();
  v66 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v54 = (uint64_t)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20, v22);
  v24 = (char *)&v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v67 = (char *)&v53 - v27;
  v28 = *(_QWORD *)(v3 + 8);
  v29 = *(_QWORD *)(v28 + 56);
  v63 = v3;
  v64 = v28 + 56;
  v30 = 1 << *(_BYTE *)(v28 + 32);
  v31 = -1;
  if (v30 < 64)
    v31 = ~(-1 << v30);
  v32 = v31 & v29;
  v65 = (unint64_t)(v30 + 63) >> 6;
  v68 = v28;
  result = swift_bridgeObjectRetain();
  v34 = 0;
  v57 = v24;
  while (1)
  {
    if (v32)
    {
      v69 = (v32 - 1) & v32;
      v70 = v34;
      v35 = __clz(__rbit64(v32)) | (v34 << 6);
      goto LABEL_22;
    }
    v36 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v36 >= v65)
      goto LABEL_25;
    v37 = *(_QWORD *)(v64 + 8 * v36);
    v38 = v34 + 1;
    if (!v37)
    {
      v38 = v34 + 2;
      if (v34 + 2 >= v65)
        goto LABEL_25;
      v37 = *(_QWORD *)(v64 + 8 * v38);
      if (!v37)
      {
        v38 = v34 + 3;
        if (v34 + 3 >= v65)
          goto LABEL_25;
        v37 = *(_QWORD *)(v64 + 8 * v38);
        if (!v37)
          break;
      }
    }
LABEL_21:
    v69 = (v37 - 1) & v37;
    v70 = v38;
    v35 = __clz(__rbit64(v37)) + (v38 << 6);
LABEL_22:
    v40 = v67;
    (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))(v67, *(_QWORD *)(v68 + 48) + *(_QWORD *)(v21 + 72) * v35, v20);
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v24, v40, v20);
    WeakTagged_9.tagged6.getter();
    v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
    v42 = *(_QWORD *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v11, 1, v41) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for WeakRef<Shape>?);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v66 + 56))(v16, 1, 1, v17);
    }
    else
    {
      v43 = v21;
      v44 = v20;
      v45 = v12;
      v46 = v17;
      v47 = v58;
      Canvas.updatablePaper2.getter(v58);
      WeakRef.subscript.getter();
      v48 = v47;
      v17 = v46;
      v12 = v45;
      v20 = v44;
      v21 = v43;
      v24 = v57;
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v48, v60);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v41);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v16, 1, v17) != 1)
      {
        v49 = (uint64_t)v16;
        v50 = v54;
        outlined init with take of PKStrokeStruct(v49, v54, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
        CRRegister.wrappedValue.getter();
        CRRegister.wrappedValue.getter();
        outlined destroy of PKStrokeProperties(v50, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
        return swift_release();
      }
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
    result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, v12);
    v32 = v69;
    v34 = v70;
  }
  v39 = v34 + 4;
  if (v34 + 4 >= v65)
  {
LABEL_25:
    result = swift_release();
    v51 = v55;
    *v55 = 0;
    *((_BYTE *)v51 + 8) = 0;
    v52 = v56;
    *v56 = 0;
    *((_BYTE *)v52 + 8) = 0;
    return result;
  }
  v37 = *(_QWORD *)(v64 + 8 * v39);
  if (v37)
  {
    v38 = v34 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v38 = v39 + 1;
    if (__OFADD__(v39, 1))
      break;
    if (v38 >= v65)
      goto LABEL_25;
    v37 = *(_QWORD *)(v64 + 8 * v38);
    ++v39;
    if (v37)
      goto LABEL_21;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t CanvasFormattingProxy.lineEnds.setter()
{
  return Canvas.undoable(newChange:persistSelection:action:)(1, 0, (uint64_t (*)(double))partial apply for closure #1 in CanvasFormattingProxy.lineEnds.setter);
}

void closure #1 in CanvasFormattingProxy.lineEnds.setter()
{
  void *v0;
  id v1;

  v0 = (void *)specialized Canvas.paperView.getter();
  swift_beginAccess();
  type metadata accessor for Capsule();
  v1 = v0;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();

}

uint64_t closure #1 in closure #1 in CanvasFormattingProxy.lineEnds.setter(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, int a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t result;
  int64_t v31;
  unint64_t v32;
  unint64_t i;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(_BYTE *, _QWORD);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  void (*v44)(_BYTE *, _QWORD);
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  _BYTE v61[32];
  char *v62;

  v47 = a6;
  v49 = a3;
  v50 = a5;
  v56 = a1;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v62 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  MEMORY[0x1E0C80A78](v19, v20);
  v57 = (char *)&v46 - v21;
  v22 = *(_QWORD *)(a2 + 8);
  v23 = v13;
  v25 = v24;
  v26 = *(_QWORD *)(v22 + 56);
  v54 = v22 + 56;
  v27 = 1 << *(_BYTE *)(v22 + 32);
  v28 = -1;
  if (v27 < 64)
    v28 = ~(-1 << v27);
  v29 = v28 & v26;
  v55 = (unint64_t)(v27 + 63) >> 6;
  v58 = v22;
  result = swift_bridgeObjectRetain();
  v31 = 0;
  v47 &= 1u;
  v48 = a4 & 1;
  v52 = v23;
  v53 = v11;
  v51 = v25;
  if (v29)
    goto LABEL_6;
LABEL_7:
  v34 = v31 + 1;
  if (!__OFADD__(v31, 1))
  {
    if (v34 < v55)
    {
      v35 = *(_QWORD *)(v54 + 8 * v34);
      ++v31;
      if (v35)
        goto LABEL_20;
      v31 = v34 + 1;
      if (v34 + 1 >= v55)
        return swift_release();
      v35 = *(_QWORD *)(v54 + 8 * v31);
      if (v35)
        goto LABEL_20;
      v31 = v34 + 2;
      if (v34 + 2 >= v55)
        return swift_release();
      v35 = *(_QWORD *)(v54 + 8 * v31);
      if (v35)
      {
LABEL_20:
        v29 = (v35 - 1) & v35;
        for (i = __clz(__rbit64(v35)) + (v31 << 6); ; i = v32 | (v31 << 6))
        {
          v37 = v57;
          (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v57, *(_QWORD *)(v58 + 48) + *(_QWORD *)(v17 + 72) * i, v16);
          (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v25, v37, v16);
          WeakTagged_9.tagged6.getter();
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v11, 1, v12) == 1)
          {
            (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v25, v16);
            result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for WeakRef<Shape>?);
            if (!v29)
              goto LABEL_7;
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v62, v11, v12);
            v38 = v12;
            v39 = (void (*)(_BYTE *, _QWORD))WeakRef.subscript.modify();
            v41 = v40;
            v42 = type metadata accessor for Shape();
            v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 48);
            if (!v43(v41, 1, v42))
            {
              v59 = v49;
              v60 = v48;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
              CRRegister.wrappedValue.setter();
            }
            v39(v61, 0);
            v44 = (void (*)(_BYTE *, _QWORD))WeakRef.subscript.modify();
            if (!v43(v45, 1, v42))
            {
              v59 = v50;
              v60 = v47;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRExtensible<LineEnd>>);
              CRRegister.wrappedValue.setter();
            }
            v44(v61, 0);
            v23 = v52;
            v11 = v53;
            v12 = v38;
            (*(void (**)(char *, uint64_t))(v52 + 8))(v62, v38);
            v25 = v51;
            result = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v51, v16);
            if (!v29)
              goto LABEL_7;
          }
LABEL_6:
          v32 = __clz(__rbit64(v29));
          v29 &= v29 - 1;
        }
      }
      v36 = v34 + 3;
      if (v36 < v55)
      {
        v35 = *(_QWORD *)(v54 + 8 * v36);
        if (v35)
        {
          v31 = v36;
          goto LABEL_20;
        }
        while (1)
        {
          v31 = v36 + 1;
          if (__OFADD__(v36, 1))
            goto LABEL_30;
          if (v31 >= v55)
            return swift_release();
          v35 = *(_QWORD *)(v54 + 8 * v31);
          ++v36;
          if (v35)
            goto LABEL_20;
        }
      }
    }
    return swift_release();
  }
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t CanvasFormattingProxy.opacity.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t result;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  int64_t v62;

  v2 = *(_QWORD *)(a1 + 16);
  v53 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
  v54 = v2;
  v3 = type metadata accessor for Capsule();
  v51 = *(_QWORD *)(v3 - 8);
  v52 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v50 = (uint64_t)&v48 - v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = &demangling cache variable for type metadata for Shape?;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Shape();
  v58 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v16);
  v48 = (uint64_t)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v60 = (char *)&v48 - v25;
  v26 = *(_QWORD *)(v1 + 8);
  v27 = *(_QWORD *)(v26 + 56);
  v55 = v1;
  v56 = v26 + 56;
  v28 = 1 << *(_BYTE *)(v26 + 32);
  v29 = -1;
  if (v28 < 64)
    v29 = ~(-1 << v28);
  v30 = v29 & v27;
  v57 = (unint64_t)(v28 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v32 = 0;
  v49 = v19;
  v59 = v22;
  while (1)
  {
    if (v30)
    {
      v61 = (v30 - 1) & v30;
      v62 = v32;
      v33 = __clz(__rbit64(v30)) | (v32 << 6);
      goto LABEL_22;
    }
    v34 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v34 >= v57)
      return swift_release();
    v35 = *(_QWORD *)(v56 + 8 * v34);
    v36 = v32 + 1;
    if (!v35)
    {
      v36 = v32 + 2;
      if (v32 + 2 >= v57)
        return swift_release();
      v35 = *(_QWORD *)(v56 + 8 * v36);
      if (!v35)
      {
        v36 = v32 + 3;
        if (v32 + 3 >= v57)
          return swift_release();
        v35 = *(_QWORD *)(v56 + 8 * v36);
        if (!v35)
          break;
      }
    }
LABEL_21:
    v61 = (v35 - 1) & v35;
    v62 = v36;
    v33 = __clz(__rbit64(v35)) + (v36 << 6);
LABEL_22:
    v38 = v60;
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v60, *(_QWORD *)(v26 + 48) + *(_QWORD *)(v19 + 72) * v33, v18);
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v22, v38, v18);
    WeakTagged_9.tagged6.getter();
    v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
    v40 = *(_QWORD *)(v39 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v9, 1, v39) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for WeakRef<Shape>?);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56))(v14, 1, 1, v15);
    }
    else
    {
      v41 = v15;
      v42 = v18;
      v43 = v26;
      v44 = v10;
      v45 = v50;
      Canvas.updatablePaper2.getter(v50);
      WeakRef.subscript.getter();
      v46 = v45;
      v10 = v44;
      v26 = v43;
      v18 = v42;
      v15 = v41;
      v19 = v49;
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v46, v52);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v9, v39);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v14, 1, v15) != 1)
      {
        v47 = v48;
        outlined init with take of PKStrokeStruct((uint64_t)v14, v48, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
        CRRegister.wrappedValue.getter();
        outlined destroy of PKStrokeProperties(v47, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        (*(void (**)(char *, uint64_t))(v19 + 8))(v59, v18);
        return swift_release();
      }
    }
    v22 = v59;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v59, v18);
    result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, v10);
    v30 = v61;
    v32 = v62;
  }
  v37 = v32 + 4;
  if (v32 + 4 >= v57)
    return swift_release();
  v35 = *(_QWORD *)(v56 + 8 * v37);
  if (v35)
  {
    v36 = v32 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    v36 = v37 + 1;
    if (__OFADD__(v37, 1))
      break;
    if (v36 >= v57)
      return swift_release();
    v35 = *(_QWORD *)(v56 + 8 * v36);
    ++v37;
    if (v35)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t CanvasFormattingProxy.opacity.setter()
{
  return Canvas.undoable(newChange:persistSelection:action:)(1, 0, (uint64_t (*)(double))partial apply for closure #1 in CanvasFormattingProxy.opacity.setter);
}

void closure #1 in CanvasFormattingProxy.opacity.setter()
{
  void *v0;
  id v1;

  v0 = (void *)specialized Canvas.paperView.getter();
  swift_beginAccess();
  type metadata accessor for Capsule();
  v1 = v0;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();

}

uint64_t closure #1 in closure #1 in CanvasFormattingProxy.opacity.setter(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t result;
  int64_t v27;
  unint64_t v28;
  unint64_t i;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, _QWORD);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  double v49;
  char v50[32];

  v43 = a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v46 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v47 = (char *)&v40 - v20;
  v21 = *(_QWORD *)(a2 + 8);
  v22 = *(_QWORD *)(v21 + 56);
  v44 = v21 + 56;
  v23 = 1 << *(_BYTE *)(v21 + 32);
  v24 = -1;
  if (v23 < 64)
    v24 = ~(-1 << v23);
  v25 = v24 & v22;
  v45 = (unint64_t)(v23 + 63) >> 6;
  v48 = v21;
  result = swift_bridgeObjectRetain();
  v27 = 0;
  v41 = v17;
  v42 = v8;
  if (v25)
    goto LABEL_6;
LABEL_7:
  v30 = v27 + 1;
  if (!__OFADD__(v27, 1))
  {
    if (v30 < v45)
    {
      v31 = *(_QWORD *)(v44 + 8 * v30);
      ++v27;
      if (v31)
        goto LABEL_20;
      v27 = v30 + 1;
      if (v30 + 1 >= v45)
        return swift_release();
      v31 = *(_QWORD *)(v44 + 8 * v27);
      if (v31)
        goto LABEL_20;
      v27 = v30 + 2;
      if (v30 + 2 >= v45)
        return swift_release();
      v31 = *(_QWORD *)(v44 + 8 * v27);
      if (v31)
      {
LABEL_20:
        v25 = (v31 - 1) & v31;
        for (i = __clz(__rbit64(v31)) + (v27 << 6); ; i = v28 | (v27 << 6))
        {
          v33 = v47;
          (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v47, *(_QWORD *)(v48 + 48) + *(_QWORD *)(v14 + 72) * i, v13);
          (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v33, v13);
          WeakTagged_9.tagged6.getter();
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
          {
            (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
            result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v8, &demangling cache variable for type metadata for WeakRef<Shape>?);
            if (!v25)
              goto LABEL_7;
          }
          else
          {
            v34 = v10;
            (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v46, v8, v9);
            v35 = v9;
            v36 = (void (*)(char *, _QWORD))WeakRef.subscript.modify();
            v38 = v37;
            v39 = type metadata accessor for Shape();
            if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 48))(v38, 1, v39))
            {
              v49 = a3;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
              CRRegister.wrappedValue.setter();
            }
            v36(v50, 0);
            v9 = v35;
            v10 = v34;
            (*(void (**)(char *, uint64_t))(v34 + 8))(v46, v9);
            v17 = v41;
            result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v41, v13);
            v8 = v42;
            if (!v25)
              goto LABEL_7;
          }
LABEL_6:
          v28 = __clz(__rbit64(v25));
          v25 &= v25 - 1;
        }
      }
      v32 = v30 + 3;
      if (v32 < v45)
      {
        v31 = *(_QWORD *)(v44 + 8 * v32);
        if (v31)
        {
          v27 = v32;
          goto LABEL_20;
        }
        while (1)
        {
          v27 = v32 + 1;
          if (__OFADD__(v32, 1))
            goto LABEL_28;
          if (v27 >= v45)
            return swift_release();
          v31 = *(_QWORD *)(v44 + 8 * v27);
          ++v32;
          if (v31)
            goto LABEL_20;
        }
      }
    }
    return swift_release();
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t CanvasFormattingProxy.hasMultipleOpacities.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v2 = *(_QWORD *)(a1 + 16);
  v40 = *(_QWORD *)(a1 + 24);
  v41 = a1;
  v44 = *(_QWORD *)(v40 + 16);
  v45 = v2;
  v3 = type metadata accessor for Capsule();
  v42 = *(_QWORD *)(v3 - 8);
  v43 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v38 - v5;
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Shape();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v39 = (uint64_t)&v38 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = v1;
  v23 = *(_QWORD *)(v1 + 8);
  specialized Collection.first.getter(v23, (uint64_t)v10);
  v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v10, 1, v24) == 1)
  {
    v26 = (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>?;
    v27 = (uint64_t)v10;
LABEL_5:
    outlined destroy of StocksKitCurrencyCache.Provider?(v27, v26);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v18, 1, 1, v19);
    goto LABEL_6;
  }
  WeakTagged_9.tagged6.getter();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v24);
  v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v14, 1, v28) == 1)
  {
    v26 = &demangling cache variable for type metadata for WeakRef<Shape>?;
    v27 = (uint64_t)v14;
    goto LABEL_5;
  }
  Canvas.updatablePaper2.getter((uint64_t)v6);
  v32 = v45;
  WeakRef.subscript.getter();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v6, v43);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) != 1)
  {
    v33 = v39;
    v34 = outlined init with take of PKStrokeStruct((uint64_t)v18, v39, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    MEMORY[0x1E0C80A78](v34, v35);
    v36 = v40;
    *(&v38 - 6) = v32;
    *(&v38 - 5) = v36;
    v37 = v46;
    *(&v38 - 4) = *(_QWORD *)(v41 + 32);
    *(&v38 - 3) = v37;
    *(&v38 - 2) = v33;
    swift_bridgeObjectRetain();
    v30 = specialized Sequence.allSatisfy(_:)((uint64_t (*)(char *))partial apply for closure #1 in CanvasFormattingProxy.hasMultipleOpacities.getter, (char)(&v38 - 8), v23);
    swift_bridgeObjectRelease();
    outlined destroy of PKStrokeProperties(v33, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    return v30 & 1;
  }
LABEL_6:
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for Shape?);
  v30 = 0;
  return v30 & 1;
}

BOOL closure #1 in CanvasFormattingProxy.hasMultipleOpacities.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  double v25;
  double v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;

  v31 = a4;
  v27[1] = a3;
  v27[2] = a2;
  v30 = *(_QWORD *)(a5 + 16);
  v5 = type metadata accessor for Capsule();
  v28 = *(_QWORD *)(v5 - 8);
  v29 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)v27 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<Shape>?);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Shape();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  WeakTagged_9.tagged6.getter();
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<Shape>);
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v12, 1, v22) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v12, &demangling cache variable for type metadata for WeakRef<Shape>?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
LABEL_4:
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v16, &demangling cache variable for type metadata for Shape?);
    return 0;
  }
  Canvas.updatablePaper2.getter((uint64_t)v8);
  WeakRef.subscript.getter();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v29);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
    goto LABEL_4;
  outlined init with take of PKStrokeStruct((uint64_t)v16, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  v25 = v32;
  CRRegister.wrappedValue.getter();
  v26 = v32;
  outlined destroy of PKStrokeProperties((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
  return v25 == v26;
}

void CanvasFormattingProxy.hasLink.getter()
{
  id *v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *v0;
  v2 = swift_bridgeObjectRetain();
  v3 = specialized Sequence.compactMap<A>(_:)(v2, v1);
  swift_bridgeObjectRelease();

  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6 == 1)
    {
      swift_bridgeObjectRetain();
      v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v7)
        goto LABEL_3;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    return;
  }
  if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10) != 1)
    goto LABEL_9;
LABEL_3:
  if ((v3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x1DF0E4D64](0, v3);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v4 = *(id *)(v3 + 32);
LABEL_6:
    v5 = v4;
    swift_bridgeObjectRelease();
    type metadata accessor for LinkCanvasElementView();
    swift_dynamicCastClass();

    return;
  }
  __break(1u);
}

uint64_t CanvasFormattingProxy.init(canvas:members:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  *(_QWORD *)a6 = result;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  *(_BYTE *)(a6 + 32) = a5 & 1;
  return result;
}

uint64_t destroy for CanvasFormattingProxy(id *a1)
{

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CanvasFormattingProxy(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CanvasFormattingProxy(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for CanvasFormattingProxy(uint64_t a1, uint64_t a2)
{

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for CanvasFormattingProxy(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CanvasFormattingProxy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for CanvasFormattingProxy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CanvasFormattingProxy);
}

uint64_t protocol witness for CanvasMembersFormattingState.supportsFillColor.getter in conformance CanvasFormattingProxy<A>(uint64_t a1)
{
  return CanvasFormattingProxy.supportsFillColor.getter(a1, (uint64_t (*)(char *))partial apply for closure #1 in CanvasFormattingProxy.supportsFillColor.getter) & 1;
}

uint64_t protocol witness for CanvasMembersFormattingState.supportsStrokeColor.getter in conformance CanvasFormattingProxy<A>(uint64_t a1, uint64_t a2)
{
  return CanvasFormattingProxy.supportsStrokeColor.getter(a1, a2) & 1;
}

uint64_t protocol witness for CanvasMembersFormattingState.supportsTextStyle.getter in conformance CanvasFormattingProxy<A>(uint64_t a1)
{
  return CanvasFormattingProxy.supportsFillColor.getter(a1, (uint64_t (*)(char *))partial apply for closure #1 in CanvasFormattingProxy.supportsTextStyle.getter) & 1;
}

uint64_t protocol witness for CanvasMembersFormattingState.supportsLineEnds.getter in conformance CanvasFormattingProxy<A>(uint64_t a1)
{
  return CanvasFormattingProxy.supportsFillColor.getter(a1, (uint64_t (*)(char *))partial apply for closure #1 in CanvasFormattingProxy.supportsLineEnds.getter) & 1;
}

uint64_t protocol witness for CanvasMembersFormattingState.supportsOpacity.getter in conformance CanvasFormattingProxy<A>(uint64_t a1)
{
  return CanvasFormattingProxy.supportsFillColor.getter(a1, (uint64_t (*)(char *))partial apply for closure #1 in CanvasFormattingProxy.supportsOpacity.getter) & 1;
}

uint64_t protocol witness for CanvasMembersFormattingState.supportsImageRegeneration.getter in conformance CanvasFormattingProxy<A>(uint64_t a1)
{
  return CanvasFormattingProxy.supportsImageRegeneration.getter(a1) & 1;
}

BOOL protocol witness for CanvasMembersFormattingState.supportsImageGeneration.getter in conformance CanvasFormattingProxy<A>(uint64_t a1)
{
  return CanvasFormattingProxy.supportsImageGeneration.getter(a1);
}

uint64_t protocol witness for CanvasMembersFormattingState.supportsMagicGenerativePlaygroundForSelection.getter in conformance CanvasFormattingProxy<A>(uint64_t a1)
{
  return CanvasFormattingProxy.supportsMagicGenerativePlaygroundForSelection.getter(a1) & 1;
}

void protocol witness for CanvasMembersFormattingState.fillColor.setter in conformance CanvasFormattingProxy<A>(void **a1, uint64_t a2)
{
  CanvasFormattingProxy.fillColor.setter(a1, a2, (uint64_t (*)(double))partial apply for closure #1 in CanvasFormattingProxy.fillColor.setter);
}

void protocol witness for CanvasMembersFormattingState.strokeColor.setter in conformance CanvasFormattingProxy<A>(void **a1, uint64_t a2)
{
  CanvasFormattingProxy.fillColor.setter(a1, a2, (uint64_t (*)(double))partial apply for closure #1 in CanvasFormattingProxy.strokeColor.setter);
}

uint64_t protocol witness for CanvasMembersFormattingState.strokeWidth.getter in conformance CanvasFormattingProxy<A>(uint64_t a1)
{
  return CanvasFormattingProxy.strokeWidth.getter(a1);
}

uint64_t protocol witness for CanvasMembersFormattingState.strokeWidth.setter in conformance CanvasFormattingProxy<A>()
{
  return CanvasFormattingProxy.strokeWidth.setter();
}

uint64_t protocol witness for CanvasMembersFormattingState.strokeIsRequired.getter in conformance CanvasFormattingProxy<A>(uint64_t a1)
{
  return CanvasFormattingProxy.strokeIsRequired.getter(a1, (uint64_t (*)(char *))partial apply for closure #1 in CanvasFormattingProxy.strokeIsRequired.getter) & 1;
}

uint64_t protocol witness for CanvasMembersFormattingState.fontName.setter in conformance CanvasFormattingProxy<A>()
{
  specialized CanvasFormattingProxy.fontName.setter();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for CanvasMembersFormattingState.fontSize.setter in conformance CanvasFormattingProxy<A>(uint64_t a1, uint64_t a2)
{
  return CanvasFormattingProxy.fontSize.setter(a1, a2, (uint64_t (*)(double))partial apply for closure #1 in CanvasFormattingProxy.fontSize.setter);
}

uint64_t protocol witness for CanvasMembersFormattingState.textAlignment.setter in conformance CanvasFormattingProxy<A>(uint64_t a1, uint64_t a2)
{
  return CanvasFormattingProxy.fontSize.setter(a1, a2, (uint64_t (*)(double))partial apply for closure #1 in CanvasFormattingProxy.textAlignment.setter);
}

uint64_t protocol witness for CanvasMembersFormattingState.bold.setter in conformance CanvasFormattingProxy<A>(uint64_t a1, uint64_t a2)
{
  return CanvasFormattingProxy.bold.setter(a1, a2, (uint64_t (*)(double))partial apply for closure #1 in CanvasFormattingProxy.bold.setter);
}

uint64_t protocol witness for CanvasMembersFormattingState.italic.setter in conformance CanvasFormattingProxy<A>(uint64_t a1, uint64_t a2)
{
  return CanvasFormattingProxy.bold.setter(a1, a2, (uint64_t (*)(double))partial apply for closure #1 in CanvasFormattingProxy.italic.setter);
}

uint64_t protocol witness for CanvasMembersFormattingState.underline.setter in conformance CanvasFormattingProxy<A>(uint64_t a1, uint64_t a2)
{
  return CanvasFormattingProxy.bold.setter(a1, a2, (uint64_t (*)(double))partial apply for closure #1 in CanvasFormattingProxy.underline.setter);
}

uint64_t protocol witness for CanvasMembersFormattingState.strikethrough.setter in conformance CanvasFormattingProxy<A>(uint64_t a1, uint64_t a2)
{
  return CanvasFormattingProxy.bold.setter(a1, a2, (uint64_t (*)(double))partial apply for closure #1 in CanvasFormattingProxy.strikethrough.setter);
}

void protocol witness for CanvasMembersFormattingState.fontColor.setter in conformance CanvasFormattingProxy<A>(void **a1)
{
  CanvasFormattingProxy.fontColor.setter(a1);
}

uint64_t protocol witness for CanvasMembersFormattingState.boldAllowed.getter in conformance CanvasFormattingProxy<A>(uint64_t a1)
{
  return CanvasFormattingProxy.strokeIsRequired.getter(a1, (uint64_t (*)(char *))partial apply for closure #1 in CanvasFormattingProxy.boldAllowed.getter) & 1;
}

uint64_t protocol witness for CanvasMembersFormattingState.italicAllowed.getter in conformance CanvasFormattingProxy<A>(uint64_t a1)
{
  return CanvasFormattingProxy.strokeIsRequired.getter(a1, (uint64_t (*)(char *))partial apply for closure #1 in CanvasFormattingProxy.italicAllowed.getter) & 1;
}

uint64_t protocol witness for CanvasMembersFormattingState.lineEnds.setter in conformance CanvasFormattingProxy<A>()
{
  return CanvasFormattingProxy.lineEnds.setter();
}

uint64_t protocol witness for CanvasMembersFormattingState.opacity.setter in conformance CanvasFormattingProxy<A>()
{
  return CanvasFormattingProxy.opacity.setter();
}

uint64_t protocol witness for CanvasMembersFormattingState.hasMultipleOpacities.getter in conformance CanvasFormattingProxy<A>(uint64_t a1)
{
  return CanvasFormattingProxy.hasMultipleOpacities.getter(a1) & 1;
}

BOOL partial apply for closure #1 in CanvasFormattingProxy.hasMultipleOpacities.getter(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in CanvasFormattingProxy.hasMultipleOpacities.getter(a1, v1[5], v1[6], v1[2], v1[3]);
}

void partial apply for closure #1 in CanvasFormattingProxy.opacity.setter()
{
  closure #1 in CanvasFormattingProxy.opacity.setter();
}

uint64_t partial apply for closure #1 in closure #1 in CanvasFormattingProxy.opacity.setter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in CanvasFormattingProxy.opacity.setter(a1, *(_QWORD *)(v1 + 32), *(double *)(v1 + 40));
}

void partial apply for closure #1 in CanvasFormattingProxy.lineEnds.setter()
{
  closure #1 in CanvasFormattingProxy.lineEnds.setter();
}

uint64_t partial apply for closure #1 in closure #1 in CanvasFormattingProxy.lineEnds.setter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in CanvasFormattingProxy.lineEnds.setter(a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_BYTE *)(v1 + 48), *(_QWORD *)(v1 + 56), *(unsigned __int8 *)(v1 + 64));
}

uint64_t partial apply for closure #1 in CanvasFormattingProxy.italicAllowed.getter(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in CanvasFormattingProxy.italicAllowed.getter(a1, v1[5], v1[2], v1[3]) & 1;
}

uint64_t partial apply for closure #1 in CanvasFormattingProxy.boldAllowed.getter(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in CanvasFormattingProxy.boldAllowed.getter(a1, v1[5], v1[2], v1[3]) & 1;
}

void partial apply for closure #1 in CanvasFormattingProxy.fontColor.setter()
{
  partial apply for closure #1 in CanvasFormattingProxy.fontColor.setter();
}

{
  closure #1 in CanvasFormattingProxy.fillColor.setter();
}

void partial apply for closure #1 in closure #1 in CanvasFormattingProxy.fontColor.setter(_QWORD *a1)
{
  uint64_t v1;

  closure #1 in closure #1 in CanvasFormattingProxy.fontColor.setter(a1, *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t outlined init with copy of CRAttributedString<TextAttributeScope>.Attributes?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>.Attributes?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in CanvasFormattingProxy.strikethrough.setter()
{
  partial apply for closure #1 in CanvasFormattingProxy.strikethrough.setter();
}

{
  closure #1 in CanvasFormattingProxy.bold.setter();
}

uint64_t partial apply for closure #1 in closure #1 in CanvasFormattingProxy.strikethrough.setter(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in CanvasFormattingProxy.underline.setter(a1, *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&unk_1DDF43280, (void (*)(void))lazy protocol witness table accessor for type TextAttributeScope.StrikethroughAttribute and conformance TextAttributeScope.StrikethroughAttribute);
}

void partial apply for closure #1 in CanvasFormattingProxy.underline.setter()
{
  partial apply for closure #1 in CanvasFormattingProxy.strikethrough.setter();
}

uint64_t partial apply for closure #1 in closure #1 in CanvasFormattingProxy.underline.setter(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in CanvasFormattingProxy.underline.setter(a1, *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&unk_1DDF432A0, (void (*)(void))lazy protocol witness table accessor for type TextAttributeScope.UnderlineAttribute and conformance TextAttributeScope.UnderlineAttribute);
}

void partial apply for closure #1 in CanvasFormattingProxy.italic.setter()
{
  partial apply for closure #1 in CanvasFormattingProxy.strikethrough.setter();
}

uint64_t partial apply for closure #1 in closure #1 in CanvasFormattingProxy.italic.setter(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in CanvasFormattingProxy.bold.setter(a1, *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), &static Font.Traits.italic);
}

void partial apply for closure #1 in CanvasFormattingProxy.bold.setter()
{
  partial apply for closure #1 in CanvasFormattingProxy.strikethrough.setter();
}

uint64_t partial apply for closure #1 in closure #1 in CanvasFormattingProxy.bold.setter(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in CanvasFormattingProxy.bold.setter(a1, *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), &static Font.Traits.bold);
}

void partial apply for closure #1 in CanvasFormattingProxy.textAlignment.setter()
{
  partial apply for closure #1 in CanvasFormattingProxy.fontColor.setter();
}

uint64_t partial apply for closure #1 in closure #1 in CanvasFormattingProxy.textAlignment.setter(_QWORD *a1)
{
  uint64_t *v1;

  return closure #1 in closure #1 in CanvasFormattingProxy.textAlignment.setter(a1, v1[4], v1[5], v1[2], v1[3]);
}

void partial apply for closure #1 in CanvasFormattingProxy.fontSize.setter()
{
  partial apply for closure #1 in CanvasFormattingProxy.fontColor.setter();
}

uint64_t partial apply for closure #1 in closure #1 in CanvasFormattingProxy.fontSize.setter(_QWORD *a1)
{
  uint64_t *v1;

  return closure #1 in closure #1 in CanvasFormattingProxy.fontSize.setter(a1, v1[4], v1[5], v1[2], v1[3]);
}

uint64_t specialized CanvasFormattingProxy.fontName.setter()
{
  return Canvas.undoable(newChange:persistSelection:action:)(1, 0, (uint64_t (*)(double))partial apply for closure #1 in CanvasFormattingProxy.fontName.setter);
}

void partial apply for closure #1 in CanvasFormattingProxy.fontName.setter()
{
  closure #1 in CanvasFormattingProxy.fontName.setter();
}

uint64_t partial apply for closure #1 in closure #1 in CanvasFormattingProxy.fontName.setter(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in CanvasFormattingProxy.fontName.setter(a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(void **)(v1 + 48), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in CanvasFormattingProxy.strokeIsRequired.getter(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in CanvasFormattingProxy.strokeIsRequired.getter(a1, v1[5], v1[2], v1[3]) & 1;
}

void partial apply for closure #1 in CanvasFormattingProxy.strokeWidth.setter()
{
  closure #1 in CanvasFormattingProxy.strokeWidth.setter();
}

uint64_t partial apply for closure #1 in closure #1 in CanvasFormattingProxy.strokeWidth.setter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in CanvasFormattingProxy.strokeWidth.setter(a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_BYTE *)(v1 + 48));
}

void partial apply for closure #1 in CanvasFormattingProxy.strokeColor.setter()
{
  partial apply for closure #1 in CanvasFormattingProxy.fontColor.setter();
}

uint64_t partial apply for closure #1 in closure #1 in CanvasFormattingProxy.strokeColor.setter(_QWORD *a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in CanvasFormattingProxy.strokeColor.setter(a1, *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), *(_QWORD *)(v1 + 16));
}

void partial apply for closure #1 in CanvasFormattingProxy.fillColor.setter()
{
  partial apply for closure #1 in CanvasFormattingProxy.fontColor.setter();
}

uint64_t partial apply for closure #1 in closure #1 in CanvasFormattingProxy.fillColor.setter(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in CanvasFormattingProxy.fillColor.setter(a1, *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t partial apply for closure #1 in implicit closure #5 in CanvasFormattingProxy.supportsMagicGenerativePlaygroundForSelection.getter(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in implicit closure #5 in CanvasFormattingProxy.supportsMagicGenerativePlaygroundForSelection.getter(a1, v1[5], v1[2], v1[3]) & 1;
}

uint64_t partial apply for closure #1 in CanvasFormattingProxy.supportsOpacity.getter(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in CanvasFormattingProxy.supportsOpacity.getter(a1, v1[5], v1[2], v1[3]) & 1;
}

uint64_t partial apply for closure #1 in CanvasFormattingProxy.supportsLineEnds.getter(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in CanvasFormattingProxy.supportsLineEnds.getter(a1, v1[5], v1[2], v1[3]) & 1;
}

uint64_t partial apply for closure #1 in CanvasFormattingProxy.supportsTextStyle.getter(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in CanvasFormattingProxy.supportsTextStyle.getter(a1, v1[5], v1[2], v1[3]) & 1;
}

uint64_t partial apply for closure #1 in CanvasFormattingProxy.supportsStrokeColor.getter(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in CanvasFormattingProxy.supportsStrokeColor.getter(a1, v1[5], v1[2], v1[3]) & 1;
}

BOOL partial apply for closure #1 in CanvasFormattingProxy.supportsFillColor.getter(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in CanvasFormattingProxy.supportsFillColor.getter(a1, v1[5], v1[2], v1[3]);
}

uint64_t AnyCanvas.delegate.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate);
}

uint64_t AnyCanvas.delegate.setter(uint64_t a1, uint64_t a2)
{
  return AnyCanvas.delegate.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate);
}

uint64_t (*AnyCanvas.delegate.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return SynapseLinkItem.delegate.modify;
}

void AnyCanvas.overlays.getter()
{
  uint64_t v0;
  void *v1;
  void *v2;
  _UNKNOWN **v3;
  void *v4;
  void *v5;
  _UNKNOWN **v6;
  id v7;
  id v8;
  id v9;
  id v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  id v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  id v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  void *v27;
  _UNKNOWN **v28;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v1)
  {
    __break(1u);
    return;
  }
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView);
  if (v2)
    v3 = &protocol witness table for HandwritingReflowView;
  else
    v3 = 0;
  v4 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView);
  v5 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasGenerationTool);
  v6 = &protocol witness table for CanvasGenerationTool;
  if (!v5)
    v6 = 0;
  v27 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasGenerationTool);
  v28 = v6;
  v7 = v5;
  v8 = v1;
  v9 = v2;
  v10 = v4;
  v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v13 = v11[2];
  v12 = v11[3];
  if (v13 >= v12 >> 1)
    v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v12 > 1), v13 + 1, 1, v11);
  v11[2] = v13 + 1;
  v14 = &v11[2 * v13];
  v14[4] = v8;
  v14[5] = &protocol witness table for CanvasElementResizeView;
  if (v2)
  {
    v15 = v9;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    v17 = v11[2];
    v16 = v11[3];
    if (v17 >= v16 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v11);
    v11[2] = v17 + 1;
    v18 = &v11[2 * v17];
    v18[4] = v15;
    v18[5] = v3;
    if (!v4)
      goto LABEL_22;
    goto LABEL_17;
  }
  if (v4)
  {
LABEL_17:
    v19 = v4;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    v21 = v11[2];
    v20 = v11[3];
    if (v21 >= v20 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v20 > 1), v21 + 1, 1, v11);
    v11[2] = v21 + 1;
    v22 = &v11[2 * v21];
    v22[4] = v19;
    v22[5] = &protocol witness table for CanvasCollaborationStateView;
  }
LABEL_22:
  if (v27)
  {
    v23 = v27;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    v25 = v11[2];
    v24 = v11[3];
    if (v25 >= v24 >> 1)
      v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v24 > 1), v25 + 1, 1, v11);
    v11[2] = v25 + 1;
    v26 = &v11[2 * v25];
    v26[4] = v23;
    v26[5] = v28;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CanvasUIOverlay?);
  swift_arrayDestroy();
}

void *AnyCanvas.overlayViewControllerForPresentingUI.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_overlayViewControllerForPresentingUI);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void AnyCanvas.overlayViewControllerForPresentingUI.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_overlayViewControllerForPresentingUI);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*AnyCanvas.overlayViewControllerForPresentingUI.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t AnyCanvas.participantDetailsDataSource.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource);
}

uint64_t AnyCanvas.participantDetailsDataSource.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView), sel_setNeedsLayout);
  return swift_unknownObjectRelease();
}

void (*AnyCanvas.participantDetailsDataSource.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return AnyCanvas.participantDetailsDataSource.modify;
}

void AnyCanvas.participantDetailsDataSource.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + *(_QWORD *)(*(_QWORD *)a1 + 48) + 8) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    v4 = v3[5];
    swift_endAccess();
    swift_unknownObjectRelease();
    objc_msgSend(*(id *)(v4 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView), sel_setNeedsLayout);
  }
  free(v3);
}

Swift::Void __swiftcall AnyCanvas.participantDetailsDidChange()()
{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView), sel_setNeedsLayout);
}

uint64_t AnyCanvas.showParticipantCursors.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_showParticipantCursors);
  swift_beginAccess();
  return *v1;
}

id AnyCanvas.showParticipantCursors.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_showParticipantCursors);
  swift_beginAccess();
  *v3 = a1;
  return objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView), sel_setNeedsLayout);
}

id (*AnyCanvas.showParticipantCursors.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return AnyCanvas.showParticipantCursors.modify;
}

id AnyCanvas.showParticipantCursors.modify(uint64_t a1, char a2)
{
  id result;

  result = (id)swift_endAccess();
  if ((a2 & 1) == 0)
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 24) + OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView), sel_setNeedsLayout);
  return result;
}

uint64_t AnyCanvas.wantsDataDetection.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_wantsDataDetection);
  swift_beginAccess();
  return *v1;
}

void AnyCanvas.wantsDataDetection.setter(unsigned __int8 a1)
{
  AnyCanvas.wantsDataDetection.setter(a1, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_wantsDataDetection, (SEL *)&selRef_setWantsDataDetection_);
}

void (*AnyCanvas.wantsDataDetection.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_wantsDataDetection;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess();
  return AnyCanvas.wantsDataDetection.modify;
}

void AnyCanvas.wantsDataDetection.modify(uint64_t *a1, char a2)
{
  AnyCanvas.wantsDataDetection.modify(a1, a2, (SEL *)&selRef_setWantsDataDetection_);
}

uint64_t AnyCanvas.isSharedViaICloud.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_isSharedViaICloud);
  swift_beginAccess();
  return *v1;
}

void AnyCanvas.isSharedViaICloud.setter(unsigned __int8 a1)
{
  AnyCanvas.wantsDataDetection.setter(a1, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_isSharedViaICloud, (SEL *)&selRef_setIsSharedViaICloud_);
}

void AnyCanvas.wantsDataDetection.setter(unsigned __int8 a1, _QWORD *a2, SEL *a3)
{
  _QWORD *v3;
  unsigned __int8 *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  void *v12;

  v6 = (unsigned __int8 *)v3 + *a2;
  v7 = swift_beginAccess();
  *v6 = a1;
  v8 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v3) + 0x2F8))(v7);
  v10 = v9;
  ObjectType = swift_getObjectType();
  v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16))(ObjectType, v10);

  if (v12)
  {
    objc_msgSend(v12, *a3, *v6);

  }
}

void (*AnyCanvas.isSharedViaICloud.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_isSharedViaICloud;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess();
  return AnyCanvas.isSharedViaICloud.modify;
}

void AnyCanvas.isSharedViaICloud.modify(uint64_t *a1, char a2)
{
  AnyCanvas.wantsDataDetection.modify(a1, a2, (SEL *)&selRef_setIsSharedViaICloud_);
}

void AnyCanvas.wantsDataDetection.modify(uint64_t *a1, char a2, SEL *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  void *v11;

  v5 = *a1;
  v6 = swift_endAccess();
  if ((a2 & 1) == 0)
  {
    v7 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v5 + 24)) + 0x2F8))(v6);
    v9 = v8;
    ObjectType = swift_getObjectType();
    v11 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(ObjectType, v9);

    if (v11)
    {
      objc_msgSend(v11, *a3, *(unsigned __int8 *)(*(_QWORD *)(v5 + 24) + *(_QWORD *)(v5 + 32)));

    }
  }
  free((void *)v5);
}

uint64_t AnyCanvas.textualContextProvider.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit9AnyCanvas_textualContextProvider);
}

uint64_t AnyCanvas.textualContextProvider.setter(uint64_t a1, uint64_t a2)
{
  return AnyCanvas.delegate.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_textualContextProvider);
}

uint64_t AnyCanvas.delegate.setter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v5;

  v5 = v3 + *a3;
  swift_beginAccess();
  *(_QWORD *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*AnyCanvas.textualContextProvider.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_textualContextProvider;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return SynapseLinkItem.delegate.modify;
}

uint64_t AnyCanvas.liveStreamDrawings.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings);
  swift_beginAccess();
  return *v1;
}

void AnyCanvas.liveStreamDrawings.setter(unsigned __int8 a1)
{
  _QWORD *v1;
  unsigned __int8 *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;

  v3 = (unsigned __int8 *)v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings;
  v4 = swift_beginAccess();
  *v3 = a1;
  v5 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x320))(v4);
  if (v5)
  {
    v6 = v5;
    v7 = objc_msgSend(v5, sel_canvasView);

    if (v7)
    {
      objc_msgSend(v7, sel_setGenerateLiveDrawing_, *v3);

    }
  }
}

void (*AnyCanvas.liveStreamDrawings.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess();
  return AnyCanvas.liveStreamDrawings.modify;
}

void AnyCanvas.liveStreamDrawings.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;

  v3 = *a1;
  v4 = swift_endAccess();
  if ((a2 & 1) == 0)
  {
    v5 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v3 + 24)) + 0x320))(v4);
    if (v5)
    {
      v6 = v5;
      v7 = objc_msgSend(v5, sel_canvasView);

      if (v7)
      {
        objc_msgSend(v7, sel_setGenerateLiveDrawing_, *(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + *(_QWORD *)(v3 + 32)));

      }
    }
  }
  free((void *)v3);
}

uint64_t AnyCanvas.scrollViewForAvoidingKeyboard.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x308))();
}

Swift::Bool __swiftcall AnyCanvas.isLiveEditing()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v12)(double);
  _QWORD *v13;
  char v14;
  Swift::Bool v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  Swift::Bool result;
  int64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t (*v41)(void);
  id v42;
  _QWORD *v43;
  int64_t v44;
  unint64_t v45;
  int64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;

  v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView));
  MEMORY[0x1E0C80A78](v52, v1);
  v51 = (char *)&v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v47 - v5;
  v9 = MEMORY[0x1E0C80A78](v7, v8);
  v50 = (char *)&v47 - v10;
  v11 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v12 = *(uint64_t (**)(double))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2F8);
  v13 = (_QWORD *)v12(v9);
  v14 = (*(uint64_t (**)(void))((*v11 & *v13) + 0x1E0))();

  if ((v14 & 1) != 0)
    return 1;
  v16 = (void *)((uint64_t (*)(void))v12)();
  v18 = v17;
  ObjectType = swift_getObjectType();
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 32))(ObjectType, v18);

  v21 = *(_QWORD *)(v20 + 64);
  v47 = v20 + 64;
  v22 = 1 << *(_BYTE *)(v20 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & v21;
  v48 = (unint64_t)(v22 + 63) >> 6;
  v49 = v20;
  result = swift_bridgeObjectRetain();
  v26 = 0;
  v27 = v51;
  while (v24)
  {
    v28 = __clz(__rbit64(v24));
    v24 &= v24 - 1;
    v29 = v28 | (v26 << 6);
LABEL_7:
    v30 = v49;
    v31 = *(_QWORD *)(v49 + 48);
    v32 = type metadata accessor for CRKeyPath();
    v33 = *(_QWORD *)(v32 - 8);
    v34 = v31 + *(_QWORD *)(v33 + 72) * v29;
    v35 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
    v36 = (uint64_t)v50;
    v35(v50, v34, v32);
    v37 = *(void **)(*(_QWORD *)(v30 + 56) + 8 * v29);
    v38 = v52;
    *(_QWORD *)(v36 + *(int *)(v52 + 48)) = v37;
    outlined init with take of (key: Int, value: AnyCRValue)?(v36, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView));
    v39 = *(int *)(v38 + 48);
    v35(v27, (uint64_t)v6, v32);
    v40 = *(_QWORD **)&v6[v39];
    *(_QWORD *)&v27[v39] = v40;
    v41 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v40) + 0x1E0);
    v42 = v37;
    v43 = v40;
    LOBYTE(v40) = v41();

    (*(void (**)(char *, uint64_t))(v33 + 8))(v27, v32);
    result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for (key: CRKeyPath, value: AnyCanvasElementView));
    if ((v40 & 1) != 0)
    {
      v15 = 1;
LABEL_29:
      swift_release();
      swift_bridgeObjectRelease();
      return v15;
    }
  }
  v44 = v26 + 1;
  if (__OFADD__(v26, 1))
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v44 >= v48)
    goto LABEL_28;
  v45 = *(_QWORD *)(v47 + 8 * v44);
  ++v26;
  if (v45)
    goto LABEL_26;
  v26 = v44 + 1;
  if (v44 + 1 >= v48)
    goto LABEL_28;
  v45 = *(_QWORD *)(v47 + 8 * v26);
  if (v45)
    goto LABEL_26;
  v26 = v44 + 2;
  if (v44 + 2 >= v48)
    goto LABEL_28;
  v45 = *(_QWORD *)(v47 + 8 * v26);
  if (v45)
    goto LABEL_26;
  v26 = v44 + 3;
  if (v44 + 3 >= v48)
    goto LABEL_28;
  v45 = *(_QWORD *)(v47 + 8 * v26);
  if (v45)
    goto LABEL_26;
  v26 = v44 + 4;
  if (v44 + 4 >= v48)
    goto LABEL_28;
  v45 = *(_QWORD *)(v47 + 8 * v26);
  if (v45)
  {
LABEL_26:
    v24 = (v45 - 1) & v45;
    v29 = __clz(__rbit64(v45)) + (v26 << 6);
    goto LABEL_7;
  }
  v46 = v44 + 5;
  if (v46 >= v48)
  {
LABEL_28:
    v15 = 0;
    goto LABEL_29;
  }
  v45 = *(_QWORD *)(v47 + 8 * v46);
  if (v45)
  {
    v26 = v46;
    goto LABEL_26;
  }
  while (1)
  {
    v26 = v46 + 1;
    if (__OFADD__(v46, 1))
      break;
    if (v26 >= v48)
      goto LABEL_28;
    v45 = *(_QWORD *)(v47 + 8 * v26);
    ++v46;
    if (v45)
      goto LABEL_26;
  }
LABEL_32:
  __break(1u);
  return result;
}

Swift::Void __swiftcall AnyCanvas.isResizingChanged()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD v18[6];

  v1 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  v2 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v2)
  {
    __break(1u);
    goto LABEL_18;
  }
  v3 = 0.0;
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing) & 1) == 0)
  {
    v4 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView);
    if (!v4 || (*(_BYTE *)(v4 + OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing) & 1) == 0)
      v3 = 1.0;
  }
  v5 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView;
  objc_msgSend(*(id *)((char *)v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView), sel_alpha);
  if (v3 != v6)
  {
    v7 = (void *)objc_opt_self();
    v8 = *(void **)((char *)v0 + v5);
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = v8;
    *(double *)(v9 + 24) = v3;
    v18[4] = partial apply for closure #1 in AnyCanvas.isResizingChanged();
    v18[5] = v9;
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 1107296256;
    v18[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v18[3] = &block_descriptor_32_3;
    v10 = _Block_copy(v18);
    v11 = v8;
    swift_release();
    objc_msgSend(v7, sel_animateWithDuration_animations_, v10, 0.2);
    _Block_release(v10);
  }
  v12 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x320))();
  if (v12)
  {
    v13 = v12;
    v14 = objc_msgSend(v12, sel_selectionInteraction);

    v15 = *(_QWORD *)((char *)v0 + v1);
    if (v15)
    {
      if ((*(_BYTE *)(v15 + OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing) & 1) != 0)
      {
        v16 = 0;
      }
      else
      {
        v17 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView);
        if (v17)
          v16 = *(_BYTE *)(v17 + OBJC_IVAR____TtC8PaperKit10ResizeView_isResizing) ^ 1;
        else
          v16 = 1;
      }
      objc_msgSend(v14, sel_setEnabled_, v16 & 1);

      return;
    }
LABEL_18:
    __break(1u);
  }
}

void AnyCanvas.selection.setter(int64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  void *v45;
  id v46;
  char v47;
  void *v48;
  id v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  void *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;

  v5 = v4;
  v58 = type metadata accessor for Logger();
  v60 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58, v10);
  v59 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  v13 = *(char **)&v5[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (!v13)
  {
    __break(1u);
    goto LABEL_40;
  }
  v14 = a4 & 1;
  a4 = *(_QWORD *)&v13[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
  v15 = *(_QWORD *)&v13[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
  v55 = *(_QWORD *)&v13[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
  v56 = v13[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = v13;
  CanvasElementResizeView.selection.setter(a1, a2, a3, v14);

  v57 = v12;
  v17 = *(_QWORD *)&v5[v12];
  if (!v17)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v18 = v17 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
  v19 = *(_QWORD *)v18;
  v20 = *(_QWORD *)(v18 + 8);
  v21 = *(_QWORD *)(v18 + 16);
  v22 = *(_BYTE *)(v18 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized static Set.== infix(_:_:)(a4, v19) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v24 = v58;
    goto LABEL_9;
  }
  v23 = specialized static Set.== infix(_:_:)(v15, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v24 = v58;
  if ((v23 & 1) == 0)
    goto LABEL_9;
  if ((v56 & 1) != 0)
  {
    if ((v22 & 1) != 0)
      return;
LABEL_9:
    if (one-time initialization token for miniMenuLogger != -1)
      swift_once();
    v25 = __swift_project_value_buffer(v24, (uint64_t)miniMenuLogger);
    (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v59, v25, v24);
    v26 = v5;
    a4 = v5;
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.info.getter();
    v29 = os_log_type_enabled(v27, v28);
    v30 = v57;
    if (v29)
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v31 = 134217984;
      v32 = *(_QWORD *)&v5[v30];
      if (!v32)
      {
LABEL_42:

        __break(1u);
        goto LABEL_43;
      }
      v33 = v31;
      v61 = *(_QWORD *)(*(_QWORD *)(v32 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection) + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_1DDB0F000, v27, v28, "Changing selection to have %ld elements", v33, 0xCu);
      MEMORY[0x1DF0E6558](v33, -1, -1);
    }
    else
    {

    }
    v34 = (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v59, v24);
    MEMORY[0x1E0C80A78](v34, v35);
    *(&v55 - 2) = a4;
    AnyCanvas.updateCanvasState(_:)();
    if ((objc_msgSend((id)a4, sel_isFirstResponder) & 1) != 0)
      goto LABEL_31;
    v36 = *(void **)&v5[v30];
    if (!v36)
    {
LABEL_43:
      __break(1u);
      return;
    }
    v37 = v36;
    v38 = swift_bridgeObjectRetain();
    v39 = specialized Sequence.compactMap<A>(_:)(v38, (uint64_t)v37);

    swift_bridgeObjectRelease();
    if (v39 >> 62)
    {
      swift_bridgeObjectRetain();
      v40 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v40 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (!v40)
      goto LABEL_31;
    v41 = (id)a4;
    v42 = objc_msgSend(v41, sel_window);
    if (v42)
    {
      v43 = v42;
      v44 = objc_msgSend((id)objc_opt_self(), sel_activeToolPickerForWindow_, v42);
      if (v44)
      {
        v45 = v44;
        v46 = objc_msgSend(v44, sel__visibilityUpdatesEnabled);
        objc_msgSend(v45, sel__setVisibilityUpdatesEnabled_, 0);
        objc_msgSend(v41, sel_becomeFirstResponder);
        objc_msgSend(v45, sel__setVisibilityUpdatesEnabled_, v46);

        v41 = v45;
LABEL_30:

LABEL_31:
        v48 = *(void **)(a4 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView);
        if (v48)
        {
          v49 = v48;
          HandwritingReflowView.updateForNewSelection()();

        }
        v50 = (_QWORD *)MEMORY[0x1E0DEEDD8];
        v51 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)a4) + 0x3A0))();
        v52 = *(_QWORD *)&v26[v30];
        if (v52)
        {
          v53 = (_QWORD *)(v52 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
          if (!*(_QWORD *)(*v53 + 16) && !*(_QWORD *)(v53[1] + 16))
          {
            v54 = (void *)(*(uint64_t (**)(uint64_t))((*v50 & *(_QWORD *)a4) + 0x320))(v51);
            objc_msgSend(v54, sel__clearSelectionIfNecessary);

          }
          return;
        }
        goto LABEL_41;
      }

    }
    objc_msgSend(v41, sel_becomeFirstResponder);
    goto LABEL_30;
  }
  if (v55 == v21)
    v47 = v22;
  else
    v47 = 1;
  if ((v47 & 1) != 0)
    goto LABEL_9;
}

uint64_t AnyCanvas.updateCanvasState(_:)()
{
  _QWORD *v0;
  char *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (char *)v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource;
  swift_beginAccess();
  result = MEMORY[0x1DF0E666C](v1);
  if (result)
  {
    v3 = *((_QWORD *)v1 + 1);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
    v5 = swift_unknownObjectRelease();
    MEMORY[0x1E0C80A78](v5, v6);
    swift_beginAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CanvasState>);
    Capsule.callAsFunction<A>(_:)();
    swift_endAccess();
    v7 = swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x398))(v7);
  }
  return result;
}

uint64_t AnyCanvas.canvasUUID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas__canvasUUID;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

void AnyCanvas.selectedCanvasElementIds.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  int v16;
  int v17;
  char v18;
  char v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1, v3);
  v34 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v33 = (char *)&v28 - v7;
  v8 = type metadata accessor for CRKeyPath();
  v31 = *(_QWORD *)(v8 - 8);
  v32 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v12)
  {
LABEL_18:
    __break(1u);
    return;
  }
  v13 = *(_QWORD *)(v12 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
  v14 = *(_QWORD *)(v13 + 16);
  if (v14)
  {
    v35 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
    v15 = specialized Set.startIndex.getter(v13);
    v17 = v16;
    v19 = v18 & 1;
    v29 = v11;
    v30 = v13 + 56;
    while ((v15 & 0x8000000000000000) == 0 && v15 < 1 << *(_BYTE *)(v13 + 32))
    {
      if (((*(_QWORD *)(v30 + (((unint64_t)v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
        goto LABEL_16;
      if (*(_DWORD *)(v13 + 36) != v17)
        goto LABEL_17;
      v20 = v33;
      (*(void (**)(char *, int64_t, uint64_t))(v2 + 16))(v33, *(_QWORD *)(v13 + 48) + *(_QWORD *)(v2 + 72) * v15, v1);
      v21 = v34;
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v34, v20, v1);
      MEMORY[0x1DF0E3168](v1);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v21, v1);
      v22 = v35;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v22 + 16) + 1, 1);
        v22 = v35;
      }
      v24 = *(_QWORD *)(v22 + 16);
      v23 = *(_QWORD *)(v22 + 24);
      if (v24 >= v23 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
        v22 = v35;
      }
      *(_QWORD *)(v22 + 16) = v24 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v31 + 32))(v22+ ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))+ *(_QWORD *)(v31 + 72) * v24, v29, v32);
      v35 = v22;
      v25 = specialized _NativeSet.index(after:)(v15, v17, v19 & 1, v13);
      v15 = v25;
      v17 = v26;
      v19 = v27 & 1;
      if (!--v14)
      {
        outlined consume of Set<WeakTagged_9<TaggedCanvasElement>>.Index._Variant(v25, v26, v27 & 1);
        swift_bridgeObjectRelease();
        return;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
}

void AnyCanvas.selectedCanvasElementIds.setter(uint64_t a1)
{
  char *v1;
  NSObject *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  int64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  _QWORD *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  BOOL v35;
  char *v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  NSObject *v48;
  id v49;
  void *v50;
  NSObject *v51;
  NSObject *v52;
  id v53;
  char v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;

  v3 = v1;
  v5 = type metadata accessor for Logger();
  v74 = *(_QWORD *)(v5 - 8);
  v75 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v79 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  v9 = *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView];
  if (!v9)
  {
    __break(1u);
    goto LABEL_52;
  }
  v10 = v9 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
  v12 = *(_QWORD *)v10;
  v11 = *(_QWORD *)(v10 + 8);
  v71 = *(_QWORD *)(v10 + 16);
  v72 = *(unsigned __int8 *)(v10 + 24);
  v13 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = specialized Sequence.compactMap<A>(_:)(a1, v13);
  v73 = 0;
  swift_bridgeObjectRelease();
  v78 = v13;

  v15 = specialized Set.init<A>(_:)(v14, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, &lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, MEMORY[0x1E0D11EE0], (void (*)(char *, char *))specialized Set._Variant.insert(_:));
  swift_bridgeObjectRelease();
  v16 = *(char **)&v3[v8];
  if (!v16)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v77 = v11;
  v2 = *(NSObject **)&v16[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
  v17 = *(_QWORD *)&v16[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
  v18 = *(_QWORD *)&v16[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
  v19 = v16[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  v20 = v16;
  CanvasElementResizeView.selection.setter(v15, v17, v18, v19);

  v80 = v8;
  v81 = v3;
  v21 = *(_QWORD *)&v3[v8];
  if (!v21)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v76 = v12;
  v22 = v21 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
  v24 = *(_QWORD *)v22;
  v23 = *(_QWORD *)(v22 + 8);
  v25 = *(_QWORD *)(v22 + 16);
  v26 = *(unsigned __int8 *)(v22 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27 = specialized static Set.== infix(_:_:)((uint64_t)v2, v24);
  v28 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if ((v27 & 1) != 0)
  {
    v29 = specialized static Set.== infix(_:_:)(v17, v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v29 & 1) != 0)
    {
      if ((v19 & 1) != 0)
      {
        if (v26)
          goto LABEL_38;
      }
      else
      {
        if (v18 == v25)
          v54 = v26;
        else
          v54 = 1;
        if ((v54 & 1) == 0)
          goto LABEL_38;
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for miniMenuLogger != -1)
    swift_once();
  v30 = v75;
  v31 = __swift_project_value_buffer(v75, (uint64_t)miniMenuLogger);
  v32 = v74;
  (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v79, v31, v30);
  v2 = v78;
  v33 = Logger.logObject.getter();
  v34 = static os_log_type_t.info.getter();
  v35 = os_log_type_enabled(v33, v34);
  v37 = v80;
  v36 = v81;
  if (v35)
  {
    v38 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v38 = 134217984;
    v39 = *(_QWORD *)&v36[v37];
    if (!v39)
    {
LABEL_56:

      __break(1u);
      goto LABEL_57;
    }
    v40 = v38;
    v82 = *(_QWORD *)(*(_QWORD *)(v39 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection) + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_1DDB0F000, v33, v34, "Changing selection to have %ld elements", v40, 0xCu);
    MEMORY[0x1DF0E6558](v40, -1, -1);
  }
  else
  {

    v33 = v2;
  }

  v41 = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v79, v30);
  MEMORY[0x1E0C80A78](v41, v42);
  *(&v70 - 2) = (uint64_t)v2;
  AnyCanvas.updateCanvasState(_:)();
  if ((-[NSObject isFirstResponder](v2, sel_isFirstResponder) & 1) == 0)
  {
    v43 = *(void **)&v36[v37];
    if (!v43)
    {
LABEL_57:
      __break(1u);
      return;
    }
    v44 = v43;
    v45 = swift_bridgeObjectRetain();
    v46 = specialized Sequence.compactMap<A>(_:)(v45, (uint64_t)v44);

    swift_bridgeObjectRelease();
    if (v46 >> 62)
    {
      swift_bridgeObjectRetain();
      v47 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v47 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v47)
    {
      v48 = v2;
      v49 = -[NSObject window](v48, sel_window);
      if (v49)
      {
        v50 = v49;
        v51 = objc_msgSend((id)objc_opt_self(), sel_activeToolPickerForWindow_, v49);
        if (v51)
        {
          v52 = v51;
          v53 = -[NSObject _visibilityUpdatesEnabled](v51, sel__visibilityUpdatesEnabled);
          -[NSObject _setVisibilityUpdatesEnabled:](v52, sel__setVisibilityUpdatesEnabled_, 0);
          -[NSObject becomeFirstResponder](v48, sel_becomeFirstResponder);
          -[NSObject _setVisibilityUpdatesEnabled:](v52, sel__setVisibilityUpdatesEnabled_, v53);

          v48 = v52;
LABEL_31:

          goto LABEL_32;
        }

      }
      -[NSObject becomeFirstResponder](v48, sel_becomeFirstResponder);
      goto LABEL_31;
    }
  }
LABEL_32:
  v55 = *(Class *)((char *)&v2->isa + OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView);
  if (v55)
  {
    v56 = v55;
    HandwritingReflowView.updateForNewSelection()();

  }
  v57 = (*(uint64_t (**)(void))((*v28 & (uint64_t)v2->isa) + 0x3A0))();
  v58 = *(_QWORD *)&v36[v37];
  if (!v58)
    goto LABEL_55;
  v59 = (_QWORD *)(v58 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection);
  if (!*(_QWORD *)(*v59 + 16) && !*(_QWORD *)(v59[1] + 16))
  {
    v60 = (void *)(*(uint64_t (**)(uint64_t))((*v28 & (uint64_t)v2->isa) + 0x320))(v57);
    objc_msgSend(v60, sel__clearSelectionIfNecessary);

  }
LABEL_38:
  v61 = *(_QWORD *)&v81[v80];
  if (!v61)
  {
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  v62 = v61 + OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection;
  v64 = *(_QWORD *)v62;
  v63 = *(_QWORD *)(v62 + 8);
  v65 = *(_QWORD *)(v62 + 16);
  v66 = *(_BYTE *)(v62 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((specialized static Set.== infix(_:_:)(v64, v76) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v68 = swift_bridgeObjectRelease();
    goto LABEL_45;
  }
  v67 = specialized static Set.== infix(_:_:)(v63, v77);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v68 = swift_bridgeObjectRelease();
  if ((v67 & 1) == 0)
  {
LABEL_45:
    (*(void (**)(uint64_t))((*v28 & *(_QWORD *)v78) + 0x3A0))(v68);
    return;
  }
  if ((v66 & 1) != 0)
  {
    if ((v72 & 1) != 0)
      return;
    goto LABEL_45;
  }
  v69 = v72;
  if (v65 != v71)
    v69 = 1;
  if ((v69 & 1) != 0)
    goto LABEL_45;
}

void (*AnyCanvas.selectedCanvasElementIds.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  uint64_t v3;

  a1[1] = v1;
  AnyCanvas.selectedCanvasElementIds.getter();
  *a1 = v3;
  return AnyCanvas.selectedCanvasElementIds.modify;
}

void AnyCanvas.selectedCanvasElementIds.modify(uint64_t *a1, char a2)
{
  uint64_t v2;

  if ((a2 & 1) != 0)
  {
    v2 = swift_bridgeObjectRetain();
    AnyCanvas.selectedCanvasElementIds.setter(v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    AnyCanvas.selectedCanvasElementIds.setter(*a1);
  }
}

BOOL AnyCanvas.hasSelectedCanvasElements.getter()
{
  uint64_t v0;
  uint64_t v1;

  AnyCanvas.selectedCanvasElementIds.getter();
  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRelease();
  return v1 != 0;
}

uint64_t AnyCanvas.addCanvasElement<A>(_:setSelected:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))((*MEMORY[0x1E0DEEDD8] & *v5)
                                                                                                + 0x480))(a1, a2, 0, 0, a3, a4, a5);
}

uint64_t AnyCanvas.addTextBox(_:frame:setSelected:)(uint64_t a1, unsigned int a2, double a3, double a4, double a5, double a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v40 = a2;
  v37 = a1;
  v10 = type metadata accessor for CRKeyPath();
  MEMORY[0x1E0C80A78](v10, v11);
  v38 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  MEMORY[0x1E0C80A78](v17, v18);
  v32 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for Shape();
  MEMORY[0x1E0C80A78](v34, v20);
  v33 = (uint64_t)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Shape>);
  v35 = *(_QWORD *)(v22 - 8);
  v36 = v22;
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v32 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
  lazy protocol witness table accessor for type Line and conformance Line();
  lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
  lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
  lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
  lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
  lazy protocol witness table accessor for type Star and conformance Star();
  lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
  v26 = v32;
  TaggedValue_9.init(_:)();
  v42 = 0;
  v43 = 0;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
  v28 = *(_QWORD *)(v27 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v16, v37, v27);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v16, 0, 1, v27);
  v41 = 0;
  Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v26, &v43, &v42, (uint64_t)v16, &v41, v33, a3, a4, a5, a6, 0.0);
  static CRKeyPath.unique.getter();
  v29 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type Shape and conformance Shape, (uint64_t (*)(uint64_t))type metadata accessor for Shape, (uint64_t)&protocol conformance descriptor for Shape);
  v30 = v34;
  Capsule<>.init(_:id:)();
  (*(void (**)(char *, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _UNKNOWN **))((*MEMORY[0x1E0DEEDD8] & *v39)
                                                                                        + 0x480))(v25, v40, 0, 0, v30, v29, &protocol witness table for Shape);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v25, v36);
}

uint64_t AnyCanvas.acceptedDropLayouts.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = OBJC_IVAR____TtC8PaperKit9AnyCanvas____lazy_storage___acceptedDropLayouts;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas____lazy_storage___acceptedDropLayouts))
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas____lazy_storage___acceptedDropLayouts);
  }
  else
  {
    v2 = closure #1 in AnyCanvas.acceptedDropLayouts.getter();
    *(_QWORD *)(v0 + v1) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t AnyCanvas.merge<A>(_:from:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  int v8;
  _QWORD *v9;
  char v11;
  unsigned __int8 v12;

  v12 = *a2;
  v8 = v12;
  v9 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  (*(void (**)(uint64_t, unsigned __int8 *))((*MEMORY[0x1E0DEEDD8] & *v4) + 0x538))(a1, &v12);
  if (!v8)
    (*(void (**)(uint64_t, uint64_t, uint64_t))((*v9 & *v4) + 0x530))(a1, a3, a4);
  v11 = v8;
  return (*(uint64_t (**)(char *))((*v9 & *v4) + 0x518))(&v11);
}

Swift::Void __swiftcall AnyCanvas.forwardChanges(from:)(PaperKit::AnyCanvas::MergeSource from)
{
  __asm { BR              X10 }
}

void sub_1DDDB615C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BYTE *v10;

  v1 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v2 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x540))();
  (*(void (**)(uint64_t))((*v1 & *v0) + 0x528))(v2);
  v3 = *(_BYTE **)((char *)v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (!v3)
  {
    __break(1u);
    JUMPOUT(0x1DDDB6314);
  }
  v4 = MEMORY[0x1DF0E666C](&v3[OBJC_IVAR____TtC8PaperKit10ResizeView_canvas]);
  if (v4)
  {
    v5 = (_QWORD *)v4;
    if (*(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView_miniMenuController])
    {
      v6 = *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection];
      v7 = *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 8];
      v8 = *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 16];
      v9 = v3[OBJC_IVAR____TtC8PaperKit23CanvasElementResizeView__selection + 24];
      v10 = v3;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      MiniMenuState.update(from:in:)(v6, v7, v8, v9, v5);

      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

  }
}

Swift::Bool __swiftcall AnyCanvas.hit(byTouchLocation:canvasBounds:)(CGPoint byTouchLocation, __C::CGRect canvasBounds)
{
  CGFloat y;
  CGFloat x;
  CGPoint v5;

  y = byTouchLocation.y;
  x = byTouchLocation.x;
  v5.x = x;
  v5.y = y;
  return CGRectContainsPoint((CGRect)canvasBounds, v5);
}

void *AnyCanvas.height(from:delta:)(void *result)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD v5[7];
  uint64_t v6;
  CGRect v7;

  if (result)
  {
    objc_msgSend(result, sel_bounds);
    CGRectGetHeight(v7);
    v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v3 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x308))();
    if (v3)
    {
      v4 = v3;
      objc_msgSend(v3, sel_zoomScale);

    }
    (*(void (**)(_QWORD *__return_ptr))((*v2 & *v1) + 0x5B8))(v5);
    return (void *)outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v5, (uint64_t)&v6, (uint64_t *)&demangling cache variable for type metadata for CGAffineTransform?);
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall AnyCanvas.beginLiveResize()()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (v1)
    objc_msgSend(v1, sel_setHidden_, 1);
  else
    __break(1u);
}

Swift::Void __swiftcall AnyCanvas.endLiveResize(discard:)(Swift::Bool discard)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView;
  v3 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView);
  if (v3)
  {
    objc_msgSend(v3, sel_setNeedsLayout);
    v4 = *(void **)(v1 + v2);
    if (v4)
    {
      objc_msgSend(v4, sel_setHidden_, 0);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

double AnyCanvas.drawingTransformOverride.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 48) = 1;
  return result;
}

uint64_t AnyCanvas.viewControllerForPresentingUI.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_viewControllerForPresentingUI;
  swift_beginAccess();
  return MEMORY[0x1DF0E666C](v1);
}

void AnyCanvas.viewControllerForPresentingUI.setter(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;

  swift_beginAccess();
  v3 = swift_unknownObjectWeakAssign();
  v4 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x2F8))(v3);
  v6 = v5;
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(ObjectType, v6);

}

void (*AnyCanvas.viewControllerForPresentingUI.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_viewControllerForPresentingUI;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x1DF0E666C](v5);
  return AnyCanvas.viewControllerForPresentingUI.modify;
}

void AnyCanvas.viewControllerForPresentingUI.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;

  v3 = *a1;
  v4 = *(void **)(*a1 + 24);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {

    swift_endAccess();
  }
  else
  {
    v5 = *(_QWORD **)(v3 + 32);
    swift_endAccess();

    v6 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v5) + 0x2F8))();
    v8 = v7;
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v8 + 24))(ObjectType, v8);

  }
  free((void *)v3);
}

double AnyCanvas.scaleFactorForNewElements.getter()
{
  _QWORD *v0;
  uint64_t v1;
  char v2;
  double v3;
  id v4;
  void *v5;
  double v6;
  id v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;

  v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x278))();
  if ((v2 & 1) != 0
    || (v3 = *(double *)&v1, (v4 = objc_msgSend(v0, sel_window)) == 0))
  {
    objc_msgSend(v0, sel_bounds);
    v12 = v11;
    objc_msgSend(v0, sel_bounds);
    if (v13 < v12)
      v12 = v13;
    if (one-time initialization token for maxCanvasSizeBeforeScalingNewElements != -1)
      swift_once();
    v10 = v12 / *(double *)&static UIConstants.maxCanvasSizeBeforeScalingNewElements;
    if (*(double *)&static UIConstants.maxCanvasSizeBeforeScalingNewElements >= v12)
      v10 = 1.0;
  }
  else
  {
    v5 = v4;
    v6 = v3;
    v7 = objc_msgSend(v4, sel_screen);

    objc_msgSend(v7, sel_scale);
    v9 = v8;

    v10 = v9 / v6;
  }
  v14 = v10 * 10.0;
  v15 = floor(v14);
  v16 = v14 - v15;
  v17 = ceil(v14);
  if (v16 < 0.49)
    v17 = v15;
  return fmax(v17 / 10.0, 0.1);
}

UIContextMenuConfiguration_optional __swiftcall AnyCanvas.customContextMenuInteraction(canvasElementViews:suggestedActions:)(Swift::OpaquePointer canvasElementViews, Swift::OpaquePointer suggestedActions)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  objc_class *v13;
  Swift::Bool v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t ObjectType;
  objc_class *v21;
  Swift::OpaquePointer *v22;
  void *v23;
  void *v24;
  void *rawValue;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[6];
  UIContextMenuConfiguration_optional result;

  v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v5 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29, v6);
  v8 = (char *)&rawValue - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate;
  swift_beginAccess();
  v10 = MEMORY[0x1DF0E666C](v9);
  if (v10)
  {
    v27 = *(_QWORD *)(v9 + 8);
    v28 = v10;
    if ((unint64_t)canvasElementViews._rawValue >> 62)
    {
      swift_bridgeObjectRetain();
      v11 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v11 = *(_QWORD *)(((unint64_t)canvasElementViews._rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v12 = MEMORY[0x1E0DEE9D8];
    if (v11)
    {
      v26 = v2;
      aBlock[0] = MEMORY[0x1E0DEE9D8];
      v13 = (objc_class *)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11 & ~(v11 >> 63), 0);
      if (v11 < 0)
      {
        __break(1u);
        goto LABEL_19;
      }
      rawValue = suggestedActions._rawValue;
      v15 = 0;
      v12 = aBlock[0];
      do
      {
        if (((unint64_t)canvasElementViews._rawValue & 0xC000000000000001) != 0)
          v16 = (_QWORD *)MEMORY[0x1DF0E4D64](v15, canvasElementViews._rawValue);
        else
          v16 = *((id *)canvasElementViews._rawValue + v15 + 4);
        v17 = v16;
        (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *v16) + 0xE8))();

        aBlock[0] = v12;
        v19 = *(_QWORD *)(v12 + 16);
        v18 = *(_QWORD *)(v12 + 24);
        if (v19 >= v18 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
          v12 = aBlock[0];
        }
        ++v15;
        *(_QWORD *)(v12 + 16) = v19 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v12+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v19, v8, v29);
      }
      while (v11 != v15);
      suggestedActions._rawValue = rawValue;
      v2 = v26;
    }
    ObjectType = swift_getObjectType();
    v21 = (objc_class *)(*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(v27 + 32))(v2, v12, suggestedActions._rawValue, ObjectType);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v22 = (Swift::OpaquePointer *)swift_allocObject();
    v22[2]._rawValue = suggestedActions._rawValue;
    v23 = (void *)objc_opt_self();
    aBlock[4] = partial apply for closure #1 in PaperDocumentViewDelegate.documentView(_:contextMenuConfigurationFor:on:suggestedActions:);
    aBlock[5] = v22;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned UIMenu?);
    aBlock[3] = &block_descriptor_48;
    v24 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    v21 = (objc_class *)objc_msgSend(v23, sel_configurationWithIdentifier_previewProvider_actionProvider_, 0, 0, v24);
    swift_release();
    _Block_release(v24);
  }
  v13 = v21;
LABEL_19:
  result.value.super.isa = v13;
  result.is_nil = v14;
  return result;
}

uint64_t AnyCanvas.viewControllerForPresenting.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x608))();
}

uint64_t AnyCanvas.viewControllerForPresenting.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x610))();
}

void (*AnyCanvas.viewControllerForPresenting.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x608))();
  return AnyCanvas.viewControllerForPresenting.modify;
}

void AnyCanvas.viewControllerForPresenting.modify(uint64_t a1, char a2)
{
  void *v2;
  void (*v3)(void *);
  id v4;

  v2 = *(void **)a1;
  v3 = *(void (**)(void *))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(a1 + 8)) + 0x610);
  if ((a2 & 1) != 0)
  {
    v4 = v2;
    v3(v2);

  }
  else
  {
    v3(*(void **)a1);
  }
}

uint64_t AnyCanvas.canvasCalculateDocument.getter()
{
  return 0;
}

uint64_t AnyCanvas.magicGenerativePlaygroundTokenProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_magicGenerativePlaygroundTokenProvider;
  swift_beginAccess();
  return outlined init with copy of MagicGenerativePlaygroundTokenProvider?(v3, a1);
}

uint64_t AnyCanvas.magicGenerativePlaygroundTokenProvider.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_magicGenerativePlaygroundTokenProvider;
  swift_beginAccess();
  outlined assign with take of MagicGenerativePlaygroundTokenProvider?(a1, v3);
  return swift_endAccess();
}

uint64_t (*AnyCanvas.magicGenerativePlaygroundTokenProvider.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.tintColor.modify;
}

void static CanvasEditingMode.default.getter(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

BOOL static CanvasEditingMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(uint64_t);
  uint64_t result;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = type metadata accessor for CRKeyPath();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, MEMORY[0x1E0D12C70]);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v27 - v8;
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v27 - v12;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, v14, MEMORY[0x1E0D12C88]);
  result = Set.init(minimumCapacity:)();
  v16 = 0;
  v17 = *(_QWORD *)(a1 + 64);
  v27 = a1 + 64;
  v28 = result;
  v18 = 1 << *(_BYTE *)(a1 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v21 = (unint64_t)(v18 + 63) >> 6;
  while (1)
  {
    if (v20)
    {
      v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v23 = v22 | (v16 << 6);
      goto LABEL_5;
    }
    v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v24 >= v21)
      goto LABEL_23;
    v25 = *(_QWORD *)(v27 + 8 * v24);
    ++v16;
    if (!v25)
    {
      v16 = v24 + 1;
      if (v24 + 1 >= v21)
        goto LABEL_23;
      v25 = *(_QWORD *)(v27 + 8 * v16);
      if (!v25)
      {
        v16 = v24 + 2;
        if (v24 + 2 >= v21)
          goto LABEL_23;
        v25 = *(_QWORD *)(v27 + 8 * v16);
        if (!v25)
        {
          v16 = v24 + 3;
          if (v24 + 3 >= v21)
            goto LABEL_23;
          v25 = *(_QWORD *)(v27 + 8 * v16);
          if (!v25)
            break;
        }
      }
    }
LABEL_22:
    v20 = (v25 - 1) & v25;
    v23 = __clz(__rbit64(v25)) + (v16 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v13, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v3 + 72) * v23, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v13, v2);
    specialized Set._Variant.insert(_:)((uint64_t)v9, v5);
    result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
  }
  v26 = v24 + 4;
  if (v26 >= v21)
  {
LABEL_23:
    swift_release();
    return v28;
  }
  v25 = *(_QWORD *)(v27 + 8 * v26);
  if (v25)
  {
    v16 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    v16 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v16 >= v21)
      goto LABEL_23;
    v25 = *(_QWORD *)(v27 + 8 * v16);
    ++v26;
    if (v25)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  Swift::Int *v4;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)();
  v8 = result;
  if (v2)
  {
    v4 = (Swift::Int *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

{
  return specialized Set.init<A>(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, &lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, MEMORY[0x1E0D11EE0], (void (*)(char *, char *))specialized Set._Variant.insert(_:));
}

{
  uint64_t v2;
  uint64_t result;
  void **v4;
  void *v5;
  id v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type Color and conformance Color();
  result = Set.init(minimumCapacity:)();
  v7 = result;
  if (v2)
  {
    v4 = (void **)(a1 + 32);
    do
    {
      v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);

      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  unsigned __int8 *v4;
  unsigned int v5;
  char v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type ResizeHandleType and conformance ResizeHandleType();
  result = Set.init(minimumCapacity:)();
  v7 = result;
  if (v2)
  {
    v4 = (unsigned __int8 *)(a1 + 32);
    do
    {
      v5 = *v4++;
      specialized Set._Variant.insert(_:)(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  v2 = type metadata accessor for CRKeyPath();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, MEMORY[0x1E0D12C70]);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v16 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, v11, MEMORY[0x1E0D12C88]);
  result = Set.init(minimumCapacity:)();
  v17 = result;
  if (v10)
  {
    v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v14 = *(_QWORD *)(v3 + 72);
    v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v15(v5, v13, v2);
      specialized Set._Variant.insert(_:)((uint64_t)v9, v5);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
      v13 += v14;
      --v10;
    }
    while (v10);
    return v17;
  }
  return result;
}

{
  return specialized Set.init<A>(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, (unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, MEMORY[0x1E0D12B78], (void (*)(char *, char *))specialized Set._Variant.insert(_:));
}

{
  return specialized Set.init<A>(_:)(a1, &demangling cache variable for type metadata for Ref<CRRegister<SharedTagged_2<TaggedStroke>>>, (unint64_t *)&lazy protocol witness table cache variable for type Ref<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance Ref<A>, MEMORY[0x1E0D12888], (void (*)(char *, char *))specialized Set._Variant.insert(_:));
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t i;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v43 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4, v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v6, v9);
  v12 = (char *)&v36 - v11;
  result = MEMORY[0x1E0C80A78](v10, v13);
  v16 = (char *)&v36 - v15;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v17 = 0;
  v18 = *(_QWORD *)(a1 + 56);
  v37 = a1;
  v38 = a1 + 56;
  v19 = 1 << *(_BYTE *)(a1 + 32);
  if (v19 < 64)
    v20 = ~(-1 << v19);
  else
    v20 = -1;
  v21 = v20 & v18;
  v39 = (unint64_t)(v19 + 63) >> 6;
  v42 = a2 + 56;
  v36 = (char *)&v36 - v15;
  if (!v21)
    goto LABEL_9;
LABEL_7:
  v40 = (v21 - 1) & v21;
  v41 = v17;
  for (i = __clz(__rbit64(v21)) | (v17 << 6); ; i = __clz(__rbit64(v24)) + (v25 << 6))
  {
    v27 = v43;
    v28 = *(_QWORD *)(v43 + 72);
    v29 = *(void (**)(char *, unint64_t, uint64_t))(v43 + 16);
    v29(v16, *(_QWORD *)(a1 + 48) + v28 * i, v4);
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v12, v16, v4);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D11EE0]);
    v30 = dispatch thunk of Hashable._rawHashValue(seed:)();
    v31 = -1 << *(_BYTE *)(a2 + 32);
    v32 = v30 & ~v31;
    if (((*(_QWORD *)(v42 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v4);
      return 0;
    }
    v33 = ~v31;
    while (1)
    {
      v29(v8, *(_QWORD *)(a2 + 48) + v32 * v28, v4);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D11EE8]);
      v34 = dispatch thunk of static Equatable.== infix(_:_:)();
      v35 = *(void (**)(char *, uint64_t))(v43 + 8);
      v35(v8, v4);
      if ((v34 & 1) != 0)
        break;
      v32 = (v32 + 1) & v33;
      if (((*(_QWORD *)(v42 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
      {
        v35(v12, v4);
        return 0;
      }
    }
    result = ((uint64_t (*)(char *, uint64_t))v35)(v12, v4);
    v16 = v36;
    a1 = v37;
    v21 = v40;
    v17 = v41;
    if (v40)
      goto LABEL_7;
LABEL_9:
    v23 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v23 >= v39)
      return 1;
    v24 = *(_QWORD *)(v38 + 8 * v23);
    v25 = v17 + 1;
    if (!v24)
    {
      v25 = v23 + 1;
      if (v23 + 1 >= v39)
        return 1;
      v24 = *(_QWORD *)(v38 + 8 * v25);
      if (!v24)
      {
        v25 = v23 + 2;
        if (v23 + 2 >= v39)
          return 1;
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          v25 = v23 + 3;
          if (v23 + 3 >= v39)
            return 1;
          v24 = *(_QWORD *)(v38 + 8 * v25);
          if (!v24)
            break;
        }
      }
    }
LABEL_24:
    v40 = (v24 - 1) & v24;
    v41 = v25;
  }
  v26 = v23 + 4;
  if (v26 >= v39)
    return 1;
  v24 = *(_QWORD *)(v38 + 8 * v26);
  if (v24)
  {
    v25 = v26;
    goto LABEL_24;
  }
  while (1)
  {
    v25 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v25 >= v39)
      return 1;
    v24 = *(_QWORD *)(v38 + 8 * v25);
    ++v26;
    if (v24)
      goto LABEL_24;
  }
LABEL_35:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t i;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  v43 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4, v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v6, v9);
  v12 = (char *)&v36 - v11;
  result = MEMORY[0x1E0C80A78](v10, v13);
  v16 = (char *)&v36 - v15;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v17 = 0;
  v18 = *(_QWORD *)(a1 + 56);
  v37 = a1;
  v38 = a1 + 56;
  v19 = 1 << *(_BYTE *)(a1 + 32);
  if (v19 < 64)
    v20 = ~(-1 << v19);
  else
    v20 = -1;
  v21 = v20 & v18;
  v39 = (unint64_t)(v19 + 63) >> 6;
  v42 = a2 + 56;
  v36 = (char *)&v36 - v15;
  if (!v21)
    goto LABEL_9;
LABEL_7:
  v40 = (v21 - 1) & v21;
  v41 = v17;
  for (i = __clz(__rbit64(v21)) | (v17 << 6); ; i = __clz(__rbit64(v24)) + (v25 << 6))
  {
    v27 = v43;
    v28 = *(_QWORD *)(v43 + 72);
    v29 = *(void (**)(char *, unint64_t, uint64_t))(v43 + 16);
    v29(v16, *(_QWORD *)(a1 + 48) + v28 * i, v4);
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v12, v16, v4);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12B78]);
    v30 = dispatch thunk of Hashable._rawHashValue(seed:)();
    v31 = -1 << *(_BYTE *)(a2 + 32);
    v32 = v30 & ~v31;
    if (((*(_QWORD *)(v42 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v4);
      return 0;
    }
    v33 = ~v31;
    while (1)
    {
      v29(v8, *(_QWORD *)(a2 + 48) + v32 * v28, v4);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>> and conformance WeakRef<A>, (uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>, MEMORY[0x1E0D12B80]);
      v34 = dispatch thunk of static Equatable.== infix(_:_:)();
      v35 = *(void (**)(char *, uint64_t))(v43 + 8);
      v35(v8, v4);
      if ((v34 & 1) != 0)
        break;
      v32 = (v32 + 1) & v33;
      if (((*(_QWORD *)(v42 + ((v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
      {
        v35(v12, v4);
        return 0;
      }
    }
    result = ((uint64_t (*)(char *, uint64_t))v35)(v12, v4);
    v16 = v36;
    a1 = v37;
    v21 = v40;
    v17 = v41;
    if (v40)
      goto LABEL_7;
LABEL_9:
    v23 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v23 >= v39)
      return 1;
    v24 = *(_QWORD *)(v38 + 8 * v23);
    v25 = v17 + 1;
    if (!v24)
    {
      v25 = v23 + 1;
      if (v23 + 1 >= v39)
        return 1;
      v24 = *(_QWORD *)(v38 + 8 * v25);
      if (!v24)
      {
        v25 = v23 + 2;
        if (v23 + 2 >= v39)
          return 1;
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          v25 = v23 + 3;
          if (v23 + 3 >= v39)
            return 1;
          v24 = *(_QWORD *)(v38 + 8 * v25);
          if (!v24)
            break;
        }
      }
    }
LABEL_24:
    v40 = (v24 - 1) & v24;
    v41 = v25;
  }
  v26 = v23 + 4;
  if (v26 >= v39)
    return 1;
  v24 = *(_QWORD *)(v38 + 8 * v26);
  if (v24)
  {
    v25 = v26;
    goto LABEL_24;
  }
  while (1)
  {
    v25 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v25 >= v39)
      return 1;
    v24 = *(_QWORD *)(v38 + 8 * v25);
    ++v26;
    if (v24)
      goto LABEL_24;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  unint64_t i;
  uint64_t v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v29 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(result + 56);
  v30 = (unint64_t)(v4 + 63) >> 6;
  v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v31 = v3;
      v9 = v8 | (v3 << 6);
      goto LABEL_26;
    }
    v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v10 >= v30)
      return 1;
    v11 = *(_QWORD *)(v29 + 8 * v10);
    v12 = v3 + 1;
    if (!v11)
    {
      v12 = v3 + 2;
      if (v3 + 2 >= v30)
        return 1;
      v11 = *(_QWORD *)(v29 + 8 * v12);
      if (!v11)
      {
        v12 = v3 + 3;
        if (v3 + 3 >= v30)
          return 1;
        v11 = *(_QWORD *)(v29 + 8 * v12);
        if (!v11)
        {
          v12 = v3 + 4;
          if (v3 + 4 >= v30)
            return 1;
          v11 = *(_QWORD *)(v29 + 8 * v12);
          if (!v11)
            break;
        }
      }
    }
LABEL_25:
    v6 = (v11 - 1) & v11;
    v31 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_26:
    v14 = result;
    v15 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v9);
    v17 = *v15;
    v16 = v15[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    v18 = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(a2 + 32);
    v20 = v18 & ~v19;
    if (((*(_QWORD *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      goto LABEL_41;
    v21 = *(_QWORD *)(a2 + 48);
    v22 = (_QWORD *)(v21 + 16 * v20);
    v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v24 = ~v19;
      for (i = v20 + 1; ; i = v26 + 1)
      {
        v26 = i & v24;
        if (((*(_QWORD *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0)
          break;
        v27 = (_QWORD *)(v21 + 16 * v26);
        v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          goto LABEL_7;
      }
LABEL_41:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    result = v14;
    v3 = v31;
  }
  v13 = v3 + 5;
  if (v3 + 5 >= v30)
    return 1;
  v11 = *(_QWORD *)(v29 + 8 * v13);
  if (v11)
  {
    v12 = v3 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v30)
      return 1;
    v11 = *(_QWORD *)(v29 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_25;
  }
LABEL_45:
  __break(1u);
  return result;
}

double static AnyCanvas.strokeBounds<A, B>(_:in:)()
{
  double v1;

  type metadata accessor for CGRect(0);
  Sequence.reduce<A>(_:_:)();
  return v1;
}

uint64_t protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance Canvas<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperDocumentViewController(a1, a2, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_textualContextProvider);
}

uint64_t protocol witness for PaperKitAttachment.textualContextProvider.setter in conformance Canvas<A>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;

  v4 = *v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_textualContextProvider;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for PaperKitAttachment.textualContextProvider.modify in conformance Canvas<A>(_QWORD *a1))()
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = *v1;
  v5 = OBJC_IVAR____TtC8PaperKit9AnyCanvas_textualContextProvider;
  v3[5] = *v1;
  v3[6] = v5;
  v6 = v4 + v5;
  swift_beginAccess();
  v7 = MEMORY[0x1DF0E666C](v6);
  v8 = *(_QWORD *)(v6 + 8);
  v3[3] = v7;
  v3[4] = v8;
  return SynapseLinkItem.delegate.modify;
}

uint64_t protocol witness for PaperKitAttachment.viewControllerForPresentingUI.getter in conformance Canvas<A>()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **v0) + 0x608))();
}

uint64_t protocol witness for PaperKitAttachment.viewControllerForPresentingUI.setter in conformance Canvas<A>()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **v0) + 0x610))();
}

uint64_t (*protocol witness for PaperKitAttachment.viewControllerForPresentingUI.modify in conformance Canvas<A>(_QWORD *a1))()
{
  _QWORD **v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **v1) + 0x618))();
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.getter in conformance Canvas<A>(uint64_t a1, uint64_t a2)
{
  return protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperDocumentViewController(a1, a2, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource);
}

uint64_t protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.setter in conformance Canvas<A>(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource;
  swift_beginAccess();
  *(_QWORD *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign();
  objc_msgSend(*(id *)(v4 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView), sel_setNeedsLayout);
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.modify in conformance Canvas<A>(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AnyCanvas.participantDetailsDataSource.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

id protocol witness for PaperKitStreamableAttachment.participantDetailsDidChange() in conformance Canvas<A>()
{
  _QWORD *v0;

  return objc_msgSend(*(id *)(*v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView), sel_setNeedsLayout);
}

uint64_t protocol witness for PaperKitStreamableAttachment.showParticipantCursors.getter in conformance Canvas<A>()
{
  _QWORD *v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(*v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_showParticipantCursors);
  swift_beginAccess();
  return *v1;
}

id protocol witness for PaperKitStreamableAttachment.showParticipantCursors.setter in conformance Canvas<A>(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  _BYTE *v4;

  v3 = *v1;
  v4 = (_BYTE *)(*v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_showParticipantCursors);
  swift_beginAccess();
  *v4 = a1;
  return objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView), sel_setNeedsLayout);
}

id (*protocol witness for PaperKitStreamableAttachment.showParticipantCursors.modify in conformance Canvas<A>(uint64_t a1))(uint64_t a1, char a2)
{
  _QWORD *v1;

  *(_QWORD *)(a1 + 24) = *v1;
  swift_beginAccess();
  return AnyCanvas.showParticipantCursors.modify;
}

uint64_t protocol witness for LiveEditable.isCurrentlyLiveEditing.getter in conformance AnyCanvas()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_isCurrentlyLiveEditing);
}

uint64_t (*protocol witness for LiveEditable.liveEditingContinuations.modify in conformance AnyCanvas())()
{
  swift_beginAccess();
  return CanvasElementRenderer.tintColor.modify;
}

void CanvasEditingMode.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

double @objc UIViewController.visibleBoundsForOverlay.getter(void *a1)
{
  id v1;
  id v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  id v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v1 = a1;
  v2 = objc_msgSend(v1, sel_viewForOverlay);
  objc_msgSend(v2, sel_bounds);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;

  v11 = objc_msgSend(v1, sel_viewForOverlay);
  objc_msgSend(v11, sel_safeAreaInsets);
  v13 = v12;
  v15 = v14;

  return UIEdgeInsetsInsetRect(v4, v6, v8, v10, v13, v15);
}

double UIViewController.visibleBoundsForOverlay.getter()
{
  void *v0;
  id v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  id v10;
  double v11;
  double v12;
  double v13;
  double v14;

  v1 = objc_msgSend(v0, sel_viewForOverlay);
  objc_msgSend(v1, sel_bounds);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;

  v10 = objc_msgSend(v0, sel_viewForOverlay);
  objc_msgSend(v10, sel_safeAreaInsets);
  v12 = v11;
  v14 = v13;

  return UIEdgeInsetsInsetRect(v3, v5, v7, v9, v12, v14);
}

id @objc UIViewController.viewForOverlay.getter(void *a1)
{
  id v1;
  id result;
  void *v3;

  v1 = a1;
  result = objc_msgSend(v1, sel_view);
  if (result)
  {
    v3 = result;

    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id UIViewController.viewForOverlay.getter()
{
  void *v0;
  id result;

  result = objc_msgSend(v0, sel_view);
  if (!result)
    __break(1u);
  return result;
}

void key path setter for AnyCanvas.overlayViewControllerForPresentingUI : AnyCanvas(void **a1, _QWORD *a2)
{
  void *v2;
  void **v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = (void **)(*a2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_overlayViewControllerForPresentingUI);
  swift_beginAccess();
  v4 = *v3;
  *v3 = v2;
  v5 = v2;

}

id key path setter for AnyCanvas.participantDetailsDataSource : AnyCanvas(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2;
  v4 = *a2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = v2;
  swift_unknownObjectWeakAssign();
  return objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView), sel_setNeedsLayout);
}

void key path setter for AnyCanvas.wantsDataDetection : AnyCanvas(unsigned __int8 *a1, _QWORD **a2, uint64_t a3, uint64_t a4, _QWORD *a5, SEL *a6)
{
  unsigned __int8 v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  void *v15;

  v7 = *a1;
  v8 = *a2;
  v9 = (unsigned __int8 *)*a2 + *a5;
  v10 = swift_beginAccess();
  *v9 = v7;
  v11 = (void *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v8) + 0x2F8))(v10);
  v13 = v12;
  ObjectType = swift_getObjectType();
  v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(ObjectType, v13);

  if (v15)
  {
    objc_msgSend(v15, *a6, *v9);

  }
}

uint64_t AnyCanvas.screenScaleOverride.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_screenScaleOverride;
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t AnyCanvas.screenScaleOverride.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_screenScaleOverride;
  result = swift_beginAccess();
  *(_QWORD *)v5 = a1;
  *(_BYTE *)(v5 + 8) = a2 & 1;
  return result;
}

uint64_t (*AnyCanvas.screenScaleOverride.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t AnyCanvas.editingMode.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_editingMode);
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

uint64_t AnyCanvas.editingMode.setter(char *a1)
{
  uint64_t v1;
  char v2;
  _BYTE *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_editingMode);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t (*AnyCanvas.editingMode.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.backgroundColor.modify;
}

void AnyCanvas.editingView.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyCanvas.editingContainerElementId.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyCanvas.scrollView.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyCanvas.tiledView.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyCanvas.overlayBounds.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyCanvas.visibleBounds.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AnyCanvas.visibleBoundsInModelSpace.getter()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

Swift::Void __swiftcall AnyCanvas.canvasSelectionDidChange()()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  v1 = (char *)v0 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate;
  swift_beginAccess();
  v2 = MEMORY[0x1DF0E666C](v1);
  if (v2)
  {
    v3 = *((_QWORD *)v1 + 1);
    ObjectType = swift_getObjectType();
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v3 + 8))(v0, ObjectType, v3);
    v2 = swift_unknownObjectRelease();
  }
  (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x668))(v2);
}

uint64_t closure #1 in AnyCanvas.selection.modify(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  AnyCanvas.selectedCanvasElementIds.getter();
  v5 = v4;
  static Date.timeIntervalSinceReferenceDate.getter();
  *a1 = v6;
  result = swift_bridgeObjectRelease();
  a1[3] = v5;
  if (*(_QWORD *)(a2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView))
  {
    v8 = swift_bridgeObjectRetain();
    v9 = specialized Sequence.compactMap<A>(_:)(v8);
    swift_bridgeObjectRelease();
    static Date.timeIntervalSinceReferenceDate.getter();
    *a1 = v10;
    result = swift_bridgeObjectRelease();
    a1[4] = v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in AnyCanvas.updateCanvasState(_:)(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(_BYTE *, _QWORD);
  void (*v16)(_BYTE *, _QWORD);
  uint64_t v17;
  uint64_t v19;
  void (*v20)(uint64_t);
  _BYTE v21[32];
  _BYTE v22[32];

  v20 = a5;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  v11 = MEMORY[0x1E0C80A78](v8, v10);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x3D8))(v11);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a3;
  *(_QWORD *)(v14 + 24) = a4;
  swift_bridgeObjectRetain();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
  v15 = (void (*)(_BYTE *, _QWORD))Capsule.Ref<>.root.modify();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDictionary<UUID, TimestampedSelection>);
  v16 = (void (*)(_BYTE *, _QWORD))CRDictionary.subscript.modify();
  v20(v17);
  v16(v21, 0);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  v15(v22, 0);
  return swift_release();
}

double AnyCanvas.strokeBounds<A>(_:)()
{
  return *MEMORY[0x1E0C9D628];
}

void closure #1 in static AnyCanvas.strokeBounds<A, B>(_:in:)(CGFloat *a1@<X0>, uint64_t a2@<X2>, CGFloat *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  objc_class *v9;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  uint64_t v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (objc_class *)((char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  x = *a1;
  y = a1[1];
  width = a1[2];
  height = a1[3];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<CRRegister<SharedTagged_2<TaggedStroke>>>);
  WeakRef.subscript.getter();
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(objc_class *, uint64_t, uint64_t))(v15 + 48))(v9, 1, v14) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for CRRegister<SharedTagged_2<TaggedStroke>>?);
  }
  else
  {
    v16 = type metadata accessor for Capsule();
    v17 = MEMORY[0x1DF0E6450](MEMORY[0x1E0D12B28], v16);
    v18 = specialized CRRegister<>.bounds(in:)(a2, v9, v16, v17);
    v20 = v19;
    v22 = v21;
    v24 = v23;
    (*(void (**)(objc_class *, uint64_t))(v15 + 8))(v9, v14);
    v26.origin.x = x;
    v26.origin.y = y;
    v26.size.width = width;
    v26.size.height = height;
    v28.origin.x = v18;
    v28.origin.y = v20;
    v28.size.width = v22;
    v28.size.height = v24;
    v27 = CGRectUnion(v26, v28);
    x = v27.origin.x;
    y = v27.origin.y;
    width = v27.size.width;
    height = v27.size.height;
  }
  *a3 = x;
  a3[1] = y;
  a3[2] = width;
  a3[3] = height;
}

uint64_t AnyCanvas.canvasDescription.setter()
{
  return swift_bridgeObjectRelease();
}

void AnyCanvas.formattingState(for:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t AnyCanvas.duplicate(members:)()
{
  return MEMORY[0x1E0DEE9E8];
}

uint64_t closure #1 in AnyCanvas.acceptedDropLayouts.getter()
{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Layout.Type>);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1DDF368C0;
  *(_QWORD *)(v0 + 32) = type metadata accessor for PaperLayout();
  *(_QWORD *)(v0 + 40) = &protocol witness table for PaperLayout;
  *(_QWORD *)(v0 + 48) = type metadata accessor for ImageLayout();
  *(_QWORD *)(v0 + 56) = &protocol witness table for ImageLayout;
  *(_QWORD *)(v0 + 64) = type metadata accessor for LinkLayout();
  *(_QWORD *)(v0 + 72) = &protocol witness table for LinkLayout;
  *(_QWORD *)(v0 + 80) = type metadata accessor for TextBoxLayout();
  *(_QWORD *)(v0 + 88) = &protocol witness table for TextBoxLayout;
  *(_QWORD *)(v0 + 96) = type metadata accessor for GraphLayout();
  *(_QWORD *)(v0 + 104) = &protocol witness table for GraphLayout;
  return v0;
}

uint64_t AnyCanvas.createElementAndStrokeImages(elementMembers:strokeMembers:)()
{
  uint64_t v0;

  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 16) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(0, 0);
}

void AnyCanvas.createNewPaper(from:)()
{
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

double AnyCanvas.suggestedPositionForNewCanvasElement(withSize:)()
{
  return 0.0;
}

uint64_t key path setter for AnyCanvas.magicGenerativePlaygroundTokenProvider : AnyCanvas(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _BYTE v5[40];

  outlined init with copy of MagicGenerativePlaygroundTokenProvider?(a1, (uint64_t)v5);
  v3 = *a2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_magicGenerativePlaygroundTokenProvider;
  swift_beginAccess();
  outlined assign with take of MagicGenerativePlaygroundTokenProvider?((uint64_t)v5, v3);
  return swift_endAccess();
}

uint64_t AnyCanvas.imageElementFor(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t AnyCanvas.encodedRecipeFor(_:)()
{
  return 0;
}

id AnyCanvas.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AnyCanvas();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for MagicGenerativePlaygroundContainer.initiateMagicGenerativePlayground(context:in:) in conformance AnyCanvas()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **v0) + 0x788))();
}

uint64_t protocol witness for MagicGenerativePlaygroundContainer.magicGenerativePlaygroundTokenProvider.getter in conformance AnyCanvas@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = *v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_magicGenerativePlaygroundTokenProvider;
  swift_beginAccess();
  return outlined init with copy of MagicGenerativePlaygroundTokenProvider?(v3, a1);
}

uint64_t protocol witness for MagicGenerativePlaygroundContainer.magicGenerativePlaygroundTokenProvider.setter in conformance AnyCanvas(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;

  v3 = *v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_magicGenerativePlaygroundTokenProvider;
  swift_beginAccess();
  outlined assign with take of MagicGenerativePlaygroundTokenProvider?(a1, v3);
  return swift_endAccess();
}

uint64_t (*protocol witness for MagicGenerativePlaygroundContainer.magicGenerativePlaygroundTokenProvider.modify in conformance AnyCanvas())()
{
  swift_beginAccess();
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t protocol witness for PageOverlayView.nonDrawingToolMode.setter in conformance PaperDocumentPageView<A>(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_nonDrawingToolMode) = result;
  return result;
}

uint64_t protocol witness for PageOverlayView.textualContextProvider.setter in conformance PaperDocumentPageView<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_textualContextProvider;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void protocol witness for PageOverlayView.viewControllerForPresentingUI.setter in conformance PaperDocumentPageView<A>(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;

  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  v2 = Canvas.editingView.getter();
  v4 = v3;
  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(ObjectType, v4);

}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t specialized Set.subscript.getter@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if (result < 0 || (v4 = result, 1 << *(_BYTE *)(a3 + 32) <= result))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a3 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    v6 = *(_QWORD *)(a3 + 48);
    v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a4, v6 + *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72) * v4, v7);
  }
LABEL_8:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if (result < 0 || (v4 = result, 1 << *(_BYTE *)(a3 + 32) <= result))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a3 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    v6 = *(_QWORD *)(a3 + 48);
    v7 = type metadata accessor for CRAsset();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a4, v6 + *(_QWORD *)(*(_QWORD *)(v7 - 8) + 72) * v4, v7);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t specialized Set.subscript.getter(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return *(unsigned __int8 *)(*(_QWORD *)(a4 + 48) + result);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t specialized Set.subscript.getter@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  void *v4;

  if (result < 0 || 1 << *(_BYTE *)(a3 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a3 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    v4 = *(void **)(*(_QWORD *)(a3 + 48) + 8 * result);
    *a4 = v4;
    return (uint64_t)v4;
  }
LABEL_8:
  __break(1u);
  return result;
}

void specialized Set.subscript.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  specialized Set.subscript.getter(a1, a2, a3, a4, &lazy cache variable for type metadata for UIPress);
}

{
  specialized Set.subscript.getter(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for UIColor);
}

void specialized Set.subscript.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t *a5)
{
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  id v16;
  unint64_t *v17;

  v7 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter() == *(_DWORD *)(a4 + 36))
      {
        __CocoaSet.Index.element.getter();
        type metadata accessor for NSObject(0, a5);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        a5 = v17;
        swift_unknownObjectRelease();
        v9 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v10 = -1 << *(_BYTE *)(a4 + 32);
        v7 = v9 & ~v10;
        if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        {
          v11 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          v12 = static NSObject.== infix(_:_:)();

          if ((v12 & 1) == 0)
          {
            v13 = ~v10;
            do
            {
              v7 = (v7 + 1) & v13;
              if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
                goto LABEL_24;
              v14 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
              v15 = static NSObject.== infix(_:_:)();

            }
            while ((v15 & 1) == 0);
          }

LABEL_20:
          v16 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v8 = a4;
  else
    v8 = a4 & 0xFFFFFFFFFFFFFF8;
  MEMORY[0x1DF0E4CA4](a1, a2, v8);
  type metadata accessor for NSObject(0, a5);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  swift_unknownObjectRelease();
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t (*v26)(_QWORD);
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ObjectType;
  uint64_t v32;
  unint64_t v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD v51[2];
  uint64_t (*v52)(_QWORD);
  char *v53;
  _QWORD *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;

  v5 = type metadata accessor for CRKeyPath();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v60 = (char *)v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v58 = *(_QWORD *)(v9 - 8);
  v59 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v57 = (char *)v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v56 = (char *)v51 - v19;
  MEMORY[0x1E0C80A78](v20, v21);
  v55 = (char *)v51 - v22;
  v23 = *(_QWORD *)(a1 + 16);
  if (!v23)
    return MEMORY[0x1E0DEE9D8];
  v51[1] = v2;
  v24 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  v25 = a2;
  v26 = *(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & *a2) + 0x2F8);
  v66 = *(_QWORD *)(v6 + 72);
  v51[0] = a1;
  v27 = swift_bridgeObjectRetain();
  v61 = MEMORY[0x1E0DEE9D8];
  v53 = v16;
  v54 = v25;
  v52 = v26;
  do
  {
    v28 = (void *)v26(v27);
    v30 = v29;
    ObjectType = swift_getObjectType();
    v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 32))(ObjectType, v30);

    if (*(_QWORD *)(v32 + 16) && (v33 = specialized __RawDictionaryStorage.find<A>(_:)(v24), (v34 & 1) != 0))
    {
      v35 = *(id *)(*(_QWORD *)(v32 + 56) + 8 * v33);
      v36 = swift_bridgeObjectRelease();
      v37 = v57;
      (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v35) + 0xE8))(v36);
      v38 = v13;
      v39 = v12;
      v40 = v59;
      SharedTagged_9.tag.getter();
      v62 = v64;
      v63 = v65;
      MEMORY[0x1DF0E3408](v40);
      lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
      v41 = v56;
      WeakTagged_9.init(_:id:)();
      v42 = v40;
      v12 = v39;
      v13 = v38;
      v43 = v53;
      (*(void (**)(char *, uint64_t))(v58 + 8))(v37, v42);

      v44 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
      v45 = v55;
      v44(v55, v41, v12);
      v44(v43, v45, v12);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        v46 = v61;
      else
        v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v61 + 16) + 1, 1, v61);
      v48 = *(_QWORD *)(v46 + 16);
      v47 = *(_QWORD *)(v46 + 24);
      v26 = v52;
      if (v48 >= v47 >> 1)
        v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1, v46);
      *(_QWORD *)(v46 + 16) = v48 + 1;
      v49 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      v61 = v46;
      v27 = ((uint64_t (*)(unint64_t, char *, uint64_t))v44)(v46 + v49 + *(_QWORD *)(v13 + 72) * v48, v43, v12);
    }
    else
    {
      v27 = swift_bridgeObjectRelease();
    }
    v24 += v66;
    --v23;
  }
  while (v23);
  swift_bridgeObjectRelease();
  return v61;
}

uint64_t outlined init with copy of MagicGenerativePlaygroundTokenProvider?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of MagicGenerativePlaygroundTokenProvider?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for AnyCanvas()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AnyCanvas;
  if (!type metadata singleton initialization cache for AnyCanvas)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t lazy protocol witness table accessor for type CanvasEditingMode and conformance CanvasEditingMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanvasEditingMode and conformance CanvasEditingMode;
  if (!lazy protocol witness table cache variable for type CanvasEditingMode and conformance CanvasEditingMode)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CanvasEditingMode, &type metadata for CanvasEditingMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasEditingMode and conformance CanvasEditingMode);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyCanvas.MergeSource and conformance AnyCanvas.MergeSource()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AnyCanvas.MergeSource and conformance AnyCanvas.MergeSource;
  if (!lazy protocol witness table cache variable for type AnyCanvas.MergeSource and conformance AnyCanvas.MergeSource)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for AnyCanvas.MergeSource, &type metadata for AnyCanvas.MergeSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyCanvas.MergeSource and conformance AnyCanvas.MergeSource);
  }
  return result;
}

uint64_t sub_1DDDBA4B4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate, a2);
}

uint64_t sub_1DDDBA4C0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_0(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate);
}

id sub_1DDDBA4CC@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  void **v3;
  void *v4;

  v3 = (void **)(*a1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_overlayViewControllerForPresentingUI);
  swift_beginAccess();
  v4 = *v3;
  *a2 = *v3;
  return v4;
}

uint64_t sub_1DDDBA520@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource, a2);
}

uint64_t sub_1DDDBA530@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_showParticipantCursors, a2);
}

id sub_1DDDBA53C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  _BYTE *v4;

  v2 = *a1;
  v3 = *a2;
  v4 = (_BYTE *)(*a2 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_showParticipantCursors);
  swift_beginAccess();
  *v4 = v2;
  return objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView), sel_setNeedsLayout);
}

uint64_t sub_1DDDBA5A8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_wantsDataDetection, a2);
}

void sub_1DDDBA5B4(unsigned __int8 *a1, _QWORD **a2, uint64_t a3, uint64_t a4)
{
  key path setter for AnyCanvas.wantsDataDetection : AnyCanvas(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_wantsDataDetection, (SEL *)&selRef_setWantsDataDetection_);
}

uint64_t sub_1DDDBA5D8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_isSharedViaICloud, a2);
}

void sub_1DDDBA5E4(unsigned __int8 *a1, _QWORD **a2, uint64_t a3, uint64_t a4)
{
  key path setter for AnyCanvas.wantsDataDetection : AnyCanvas(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_isSharedViaICloud, (SEL *)&selRef_setIsSharedViaICloud_);
}

uint64_t sub_1DDDBA608@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_textualContextProvider, a2);
}

uint64_t sub_1DDDBA614(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_0(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_textualContextProvider);
}

uint64_t keypath_setTm_0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *a2 + *a5;
  swift_beginAccess();
  *(_QWORD *)(v6 + 8) = v5;
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1DDDBA67C@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x278))();
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1DDDBA6C4(uint64_t a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x280))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1DDDBA70C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return keypath_get_9Tm(a1, &OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings, a2);
}

void sub_1DDDBA718(unsigned __int8 *a1)
{
  AnyCanvas.liveStreamDrawings.setter(*a1);
}

_QWORD *sub_1DDDBA73C@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x2C8))(&v4);
  *a2 = v4;
  return result;
}

uint64_t sub_1DDDBA78C(char *a1, _QWORD **a2)
{
  _QWORD *v2;
  char v4;

  v2 = *a2;
  v4 = *a1;
  return (*(uint64_t (**)(char *))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x2D0))(&v4);
}

void sub_1DDDBA7D8(_QWORD *a1@<X8>)
{
  uint64_t v2;

  AnyCanvas.selectedCanvasElementIds.getter();
  *a1 = v2;
}

void sub_1DDDBA800()
{
  uint64_t v0;

  v0 = swift_bridgeObjectRetain();
  AnyCanvas.selectedCanvasElementIds.setter(v0);
}

uint64_t sub_1DDDBA828@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x608))();
  *a2 = result;
  return result;
}

uint64_t sub_1DDDBA868(id *a1, _QWORD **a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x610);
  v4 = *a1;
  return v3(v2);
}

uint64_t sub_1DDDBA8B4@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x608))();
  *a2 = result;
  return result;
}

uint64_t sub_1DDDBA8F4(id *a1, _QWORD **a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x610);
  v4 = *a1;
  return v3(v2);
}

uint64_t sub_1DDDBA940@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1 + OBJC_IVAR____TtC8PaperKit9AnyCanvas_magicGenerativePlaygroundTokenProvider;
  swift_beginAccess();
  return outlined init with copy of MagicGenerativePlaygroundTokenProvider?(v3, a2);
}

ValueMetadata *type metadata accessor for CanvasEditingMode()
{
  return &type metadata for CanvasEditingMode;
}

uint64_t ObjC metadata update function for AnyCanvas()
{
  return type metadata accessor for AnyCanvas();
}

void type metadata completion function for AnyCanvas()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for Capsule<CanvasState>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Date?();
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for AnyCanvas()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnyCanvas.delegate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of AnyCanvas.delegate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of AnyCanvas.delegate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of AnyCanvas.movableOverlayViews.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of AnyCanvas.overlayViewControllerForPresentingUI.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of AnyCanvas.overlayViewControllerForPresentingUI.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of AnyCanvas.overlayViewControllerForPresentingUI.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of AnyCanvas.participantDetailsDataSource.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of AnyCanvas.participantDetailsDataSource.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of AnyCanvas.participantDetailsDataSource.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of AnyCanvas.participantDetailsDidChange()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of AnyCanvas.showParticipantCursors.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x218))();
}

uint64_t dispatch thunk of AnyCanvas.showParticipantCursors.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x220))();
}

uint64_t dispatch thunk of AnyCanvas.showParticipantCursors.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x228))();
}

uint64_t dispatch thunk of AnyCanvas.wantsDataDetection.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x230))();
}

uint64_t dispatch thunk of AnyCanvas.wantsDataDetection.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x238))();
}

uint64_t dispatch thunk of AnyCanvas.wantsDataDetection.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x240))();
}

uint64_t dispatch thunk of AnyCanvas.isSharedViaICloud.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x248))();
}

uint64_t dispatch thunk of AnyCanvas.isSharedViaICloud.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x250))();
}

uint64_t dispatch thunk of AnyCanvas.isSharedViaICloud.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x258))();
}

uint64_t dispatch thunk of AnyCanvas.textualContextProvider.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x260))();
}

uint64_t dispatch thunk of AnyCanvas.textualContextProvider.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x268))();
}

uint64_t dispatch thunk of AnyCanvas.textualContextProvider.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x270))();
}

uint64_t dispatch thunk of AnyCanvas.screenScaleOverride.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x278))();
}

uint64_t dispatch thunk of AnyCanvas.screenScaleOverride.setter(uint64_t a1, char a2)
{
  _QWORD *v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x280))(a1, a2 & 1);
}

uint64_t dispatch thunk of AnyCanvas.screenScaleOverride.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x288))();
}

uint64_t dispatch thunk of AnyCanvas.liveStreamDrawings.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of AnyCanvas.liveStreamDrawings.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of AnyCanvas.liveStreamDrawings.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of AnyCanvas.editingMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of AnyCanvas.editingMode.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of AnyCanvas.editingMode.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of AnyCanvas.editingContainerElementId.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x300))();
}

uint64_t dispatch thunk of AnyCanvas.overlayBounds.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x338))();
}

uint64_t dispatch thunk of AnyCanvas.visibleBounds.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x340))();
}

uint64_t dispatch thunk of AnyCanvas.visibleBoundsInModelSpace.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x348))();
}

uint64_t dispatch thunk of AnyCanvas.selectedCanvasElementIds.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3E0))();
}

uint64_t dispatch thunk of AnyCanvas.selectedCanvasElementIds.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3E8))();
}

uint64_t dispatch thunk of AnyCanvas.selectedCanvasElementIds.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3F0))();
}

uint64_t dispatch thunk of AnyCanvas.hasSelectedCanvasElements.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x3F8))();
}

uint64_t dispatch thunk of AnyCanvas.addCanvasElement<A>(_:setSelected:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x478))();
}

uint64_t dispatch thunk of AnyCanvas.addTextBox(_:frame:setSelected:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x488))();
}

uint64_t dispatch thunk of AnyCanvas.merge<A>(_:from:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x510))();
}

uint64_t dispatch thunk of AnyCanvas.viewControllerForPresentingUI.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x608))();
}

uint64_t dispatch thunk of AnyCanvas.viewControllerForPresentingUI.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x610))();
}

uint64_t dispatch thunk of AnyCanvas.viewControllerForPresentingUI.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x618))();
}

uint64_t dispatch thunk of AnyCanvas.viewControllerForPresenting.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x6E0))();
}

uint64_t dispatch thunk of AnyCanvas.viewControllerForPresenting.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x6E8))();
}

uint64_t dispatch thunk of AnyCanvas.viewControllerForPresenting.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x6F0))();
}

uint64_t dispatch thunk of AnyCanvas.magicGenerativePlaygroundTokenProvider.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x770))();
}

uint64_t dispatch thunk of AnyCanvas.magicGenerativePlaygroundTokenProvider.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x778))();
}

uint64_t dispatch thunk of AnyCanvas.magicGenerativePlaygroundTokenProvider.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x780))();
}

uint64_t dispatch thunk of AnyCanvas.initiateMagicGenerativePlayground(context:in:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x788))();
}

uint64_t dispatch thunk of AnyCanvas.imageElementFor(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x790))();
}

uint64_t dispatch thunk of AnyCanvas.encodedRecipeFor(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x798))();
}

void type metadata accessor for Capsule<CanvasState>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Capsule<CanvasState>)
  {
    type metadata accessor for CanvasState();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
    v0 = type metadata accessor for Capsule();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Capsule<CanvasState>);
  }
}

void type metadata accessor for Date?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Date?)
  {
    type metadata accessor for Date();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Date?);
  }
}

uint64_t storeEnumTagSinglePayload for AnyCanvas.MergeSource(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1DDDBB230 + 4 * byte_1DDF432E5[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1DDDBB264 + 4 * byte_1DDF432E0[v4]))();
}

uint64_t sub_1DDDBB264(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDDBB26C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDDBB274);
  return result;
}

uint64_t sub_1DDDBB280(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDDBB288);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1DDDBB28C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDDBB294(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnyCanvas.MergeSource()
{
  return &type metadata for AnyCanvas.MergeSource;
}

uint64_t storeEnumTagSinglePayload for CanvasEditingMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1DDDBB2FC + 4 * byte_1DDF432EF[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1DDDBB330 + 4 * byte_1DDF432EA[v4]))();
}

uint64_t sub_1DDDBB330(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDDBB338(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1DDDBB340);
  return result;
}

uint64_t sub_1DDDBB34C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1DDDBB354);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1DDDBB358(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1DDDBB360(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CanvasNonDrawingToolMode()
{
  return &type metadata for CanvasNonDrawingToolMode;
}

unint64_t lazy protocol witness table accessor for type CanvasNonDrawingToolMode and conformance CanvasNonDrawingToolMode()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CanvasNonDrawingToolMode and conformance CanvasNonDrawingToolMode;
  if (!lazy protocol witness table cache variable for type CanvasNonDrawingToolMode and conformance CanvasNonDrawingToolMode)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for CanvasNonDrawingToolMode, &type metadata for CanvasNonDrawingToolMode);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CanvasNonDrawingToolMode and conformance CanvasNonDrawingToolMode);
  }
  return result;
}

void partial apply for closure #1 in static AnyCanvas.strokeBounds<A, B>(_:in:)(CGFloat *a1@<X0>, CGFloat *a2@<X8>)
{
  uint64_t v2;

  closure #1 in static AnyCanvas.strokeBounds<A, B>(_:in:)(a1, *(_QWORD *)(v2 + 48), a2);
}

id specialized AnyCanvas.init(context:frame:editingMode:transparentBackground:)(void *a1, unsigned __int8 *a2, int a3, double a4, double a5, double a6, double a7)
{
  _BYTE *v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  objc_class *v24;
  id v25;
  id v26;
  objc_class *v27;
  id v28;
  uint64_t v30;
  int v31;
  int v32;
  objc_super v33;

  v32 = a3;
  v14 = type metadata accessor for CanvasState();
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = *a2;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_overlayViewControllerForPresentingUI] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasStateLiveStreamMessenger + 8] = 0;
  swift_unknownObjectWeakInit();
  v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_showParticipantCursors] = 0;
  v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_wantsDataDetection] = 1;
  v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_isSharedViaICloud] = 1;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_textualContextProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  v18 = &v7[OBJC_IVAR____TtC8PaperKit9AnyCanvas_screenScaleOverride];
  *(_QWORD *)v18 = 0;
  v18[8] = 1;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection();
  lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection();
  v19 = v7;
  CRDictionary.init()();
  *(_QWORD *)&v17[*(int *)(v14 + 20)] = MEMORY[0x1E0DEE9E0];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
  Capsule<>.init(_:id:)();
  v19[OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings] = 0;
  v19[OBJC_IVAR____TtC8PaperKit9AnyCanvas_nonDrawingToolMode] = 0;
  v19[OBJC_IVAR____TtC8PaperKit9AnyCanvas_isCurrentlyLiveEditing] = 0;
  v20 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v19[OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveEditingContinuations] = MEMORY[0x1E0DEE9D8];
  UUID.init()();
  *(_QWORD *)&v19[OBJC_IVAR____TtC8PaperKit9AnyCanvas____lazy_storage___acceptedDropLayouts] = 0;
  swift_unknownObjectWeakInit();
  v19[OBJC_IVAR____TtC8PaperKit9AnyCanvas_isScribbling] = 0;
  v21 = &v19[OBJC_IVAR____TtC8PaperKit9AnyCanvas_analytics_timeOfOpeningContainerView];
  v22 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  *(_QWORD *)&v19[OBJC_IVAR____TtC8PaperKit9AnyCanvas_analytics_latencyOfFormFields] = v20;
  *(_QWORD *)&v19[OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasGenerationTool] = 0;
  v23 = &v19[OBJC_IVAR____TtC8PaperKit9AnyCanvas_magicGenerativePlaygroundTokenProvider];
  v24 = (objc_class *)type metadata accessor for CanvasCollaborationStateView();
  *(_OWORD *)v23 = 0u;
  *((_OWORD *)v23 + 1) = 0u;
  *((_QWORD *)v23 + 4) = 0;
  v25 = objc_msgSend(objc_allocWithZone(v24), sel_initWithFrame_, a4, a5, a6, a7);
  *(_QWORD *)&v19[OBJC_IVAR____TtC8PaperKit9AnyCanvas_collaborationStateView] = v25;
  v19[OBJC_IVAR____TtC8PaperKit9AnyCanvas_transparentBackground] = v32;
  *(_QWORD *)&v19[OBJC_IVAR____TtC8PaperKit9AnyCanvas_context] = a1;
  v19[OBJC_IVAR____TtC8PaperKit9AnyCanvas_editingMode] = v31;
  v26 = a1;

  v27 = (objc_class *)type metadata accessor for AnyCanvas();
  v33.receiver = v19;
  v33.super_class = v27;
  v28 = objc_msgSendSuper2(&v33, sel_initWithFrame_, a4, a5, a6, a7);
  swift_unknownObjectWeakAssign();
  return v28;
}

unint64_t lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection;
  if (!lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TimestampedSelection, &type metadata for TimestampedSelection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection;
  if (!lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TimestampedSelection, &type metadata for TimestampedSelection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection;
  if (!lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TimestampedSelection, &type metadata for TimestampedSelection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection;
  if (!lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TimestampedSelection, &type metadata for TimestampedSelection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection;
  if (!lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TimestampedSelection, &type metadata for TimestampedSelection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection;
  if (!lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TimestampedSelection, &type metadata for TimestampedSelection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection;
  if (!lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection)
  {
    result = MEMORY[0x1DF0E6450](&protocol conformance descriptor for TimestampedSelection, &type metadata for TimestampedSelection);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimestampedSelection and conformance TimestampedSelection);
  }
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t a4, void (*a5)(char *, char *))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;

  v10 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = (char *)&v24 - v17;
  v19 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(a3, a2, a4);
  result = Set.init(minimumCapacity:)();
  v25 = result;
  if (v19)
  {
    v21 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v22 = *(_QWORD *)(v11 + 72);
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    do
    {
      v23(v14, v21, v10);
      a5(v18, v14);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
      v21 += v22;
      --v19;
    }
    while (v19);
    return v25;
  }
  return result;
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void **v7;
  void *v8;
  id v9;
  uint64_t v10;

  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for AnyCanvasElementView();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AnyCanvasElementView and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for AnyCanvasElementView, MEMORY[0x1E0DEFCF8]);
  result = Set.init(minimumCapacity:)();
  v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v4)
      return v10;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      return v10;
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = (void *)MEMORY[0x1DF0E4D64](i, a1);
        specialized Set._Variant.insert(_:)(&v9, v6);

      }
    }
    else
    {
      v7 = (void **)(a1 + 32);
      do
      {
        v8 = *v7++;
        specialized Set._Variant.insert(_:)(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void **v7;
  void *v8;
  id v9;
  uint64_t v10;

  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  lazy protocol witness table accessor for type UIColor and conformance NSObject();
  result = Set.init(minimumCapacity:)();
  v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v4)
      return v10;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      return v10;
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = (void *)MEMORY[0x1DF0E4D64](i, a1);
        specialized Set._Variant.insert(_:)(&v9, v6);

      }
    }
    else
    {
      v7 = (void **)(a1 + 32);
      do
      {
        v8 = *v7++;
        specialized Set._Variant.insert(_:)(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in AnyCanvas.forwardChanges(from:)()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD **)(v0 + 16);
  v2 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v3 = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v1) + 0x540))();
  v4 = (*(uint64_t (**)(uint64_t))((*v2 & *v1) + 0x548))(v3);
  return (*(uint64_t (**)(uint64_t))((*v2 & *v1) + 0x550))(v4);
}

void specialized AnyCanvas.init(coder:)()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v1 = type metadata accessor for CanvasState();
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_resizeView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_handwritingReflowView] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_overlayViewControllerForPresentingUI] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_participantDetailsDataSource + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasStateLiveStreamMessenger + 8] = 0;
  swift_unknownObjectWeakInit();
  v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_showParticipantCursors] = 0;
  v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_wantsDataDetection] = 1;
  v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_isSharedViaICloud] = 1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_textualContextProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  v5 = &v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_screenScaleOverride];
  *(_QWORD *)v5 = 0;
  v5[8] = 1;
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]);
  lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection();
  lazy protocol witness table accessor for type TimestampedSelection and conformance TimestampedSelection();
  CRDictionary.init()();
  *(_QWORD *)&v4[*(int *)(v1 + 20)] = MEMORY[0x1E0DEE9E0];
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CanvasState and conformance CanvasState, (uint64_t (*)(uint64_t))type metadata accessor for CanvasState, (uint64_t)&protocol conformance descriptor for CanvasState);
  Capsule<>.init(_:id:)();
  v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveStreamDrawings] = 0;
  v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_nonDrawingToolMode] = 0;
  v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_isCurrentlyLiveEditing] = 0;
  v6 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_liveEditingContinuations] = MEMORY[0x1E0DEE9D8];
  UUID.init()();
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas____lazy_storage___acceptedDropLayouts] = 0;
  swift_unknownObjectWeakInit();
  v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_isScribbling] = 0;
  v7 = &v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_analytics_timeOfOpeningContainerView];
  v8 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_analytics_latencyOfFormFields] = v6;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_canvasGenerationTool] = 0;
  v9 = &v0[OBJC_IVAR____TtC8PaperKit9AnyCanvas_magicGenerativePlaygroundTokenProvider];
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *((_QWORD *)v9 + 4) = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1DDDBC24C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t block_copy_helper_48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_48()
{
  return swift_release();
}

uint64_t sub_1DDDBC288()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in AnyCanvas.isResizingChanged()()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_setAlpha_, *(double *)(v0 + 24));
}

uint64_t partial apply for closure #1 in AnyCanvas.updateCanvasState(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in AnyCanvas.updateCanvasState(_:)(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void (**)(uint64_t))(v1 + 40));
}

uint64_t sub_1DDDBC2E0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in closure #1 in AnyCanvas.updateCanvasState(_:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain();
  result = static Date.timeIntervalSinceReferenceDate.getter();
  *a1 = v6;
  a1[1] = v4;
  a1[2] = v3;
  v7 = MEMORY[0x1E0DEE9D8];
  a1[3] = MEMORY[0x1E0DEE9D8];
  a1[4] = v7;
  return result;
}

void one-time initialization function for paletteHeight()
{
  static MiniMenuConstants.paletteHeight = 0x4045000000000000;
}

void one-time initialization function for paletteHorizontalPadding()
{
  static MiniMenuConstants.paletteHorizontalPadding = 0x4020000000000000;
}

void one-time initialization function for paletteShadowRadius()
{
  static MiniMenuConstants.paletteShadowRadius = 0x4034000000000000;
}

void one-time initialization function for buttonFontSize()
{
  static MiniMenuConstants.buttonFontSize = 0x4030000000000000;
}

void one-time initialization function for colorSwatchPadding()
{
  static MiniMenuConstants.colorSwatchPadding = 0x4020000000000000;
}

void one-time initialization function for colorSwatchSize()
{
  static MiniMenuConstants.colorSwatchSize = 0x4040000000000000;
}

void one-time initialization function for colorSwatchSelectionSize()
{
  static MiniMenuConstants.colorSwatchSelectionSize = 0x4036000000000000;
}

double one-time initialization function for strokeSwatchEndPoint()
{
  double result;

  result = 12.0;
  static MiniMenuConstants.strokeSwatchEndPoint = xmmword_1DDF43590;
  return result;
}

void one-time initialization function for buttonSpacing()
{
  static MiniMenuConstants.buttonSpacing = 0x4010000000000000;
}

double one-time initialization function for popoverMargin()
{
  double result;

  result = 40.0;
  static MiniMenuConstants.popoverMargin = xmmword_1DDF435A0;
  *(_OWORD *)&qword_1F042EC60 = xmmword_1DDF435A0;
  return result;
}

uint64_t PaperDocumentInlineView.paperDocument.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
  swift_beginAccess();
  if (*v3)
  {
    v4 = *v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
    v6 = *(_QWORD *)(v5 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, v4, v5);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

uint64_t PaperDocumentInlineView.delegate.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_delegate);
}

uint64_t PaperDocumentInlineView.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_delegate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*PaperDocumentInlineView.delegate.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return SynapseLinkItem.delegate.modify;
}

id PaperDocumentInlineView.enclosingTextViewTiledViewRulerHostingView.getter()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id result;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;

  v1 = objc_msgSend(v0, sel_superview);
  if (!v1)
    return 0;
  v2 = v1;
  while (1)
  {
    objc_opt_self();
    v4 = swift_dynamicCastObjCClass();
    if (!v4)
      goto LABEL_4;
    v5 = (void *)v4;
    v17 = v2;
    v6 = objc_msgSend(v5, sel_subviews);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v7 >> 62))
    {
      v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v8)
        break;
      goto LABEL_3;
    }
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8)
      break;
LABEL_3:

    swift_bridgeObjectRelease();
LABEL_4:
    v3 = objc_msgSend(v2, sel_superview);

    v2 = v3;
    if (!v3)
      return 0;
  }
  v9 = 4;
  while (1)
  {
    if ((v7 & 0xC000000000000001) != 0)
      result = (id)MEMORY[0x1DF0E4D64](v9 - 4, v7);
    else
      result = *(id *)(v7 + 8 * v9);
    v11 = result;
    v12 = v9 - 3;
    if (__OFADD__(v9 - 4, 1))
    {
      __break(1u);
      return result;
    }
    objc_opt_self();
    if (swift_dynamicCastObjCClass())
    {
      v13 = swift_dynamicCastObjCProtocolConditional();
      if (v13)
        break;
    }

    ++v9;
    if (v12 == v8)
      goto LABEL_3;
  }
  v14 = (void *)v13;
  v15 = v11;
  swift_bridgeObjectRelease();
  if ((objc_msgSend(v14, sel_respondsToSelector_, sel_rulerHostingView) & 1) != 0)
  {
    v16 = objc_msgSend(v14, sel_rulerHostingView);

    return v16;
  }

  return 0;
}

Swift::Void __swiftcall PaperDocumentInlineView.layoutSubviews()()
{
  char *v0;
  id *v1;
  char *v2;
  id v3;
  char *v4;
  void *v5;
  objc_super v6;

  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for PaperDocumentInlineView();
  objc_msgSendSuper2(&v6, sel_layoutSubviews);
  v1 = (id *)&v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView];
  swift_beginAccess();
  if (*v1)
  {
    v2 = (char *)*v1;
    v3 = PaperDocumentInlineView.enclosingTextViewTiledViewRulerHostingView.getter();
    v4 = &v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_rulerHostView];
    swift_beginAccess();
    v5 = (void *)MEMORY[0x1DF0E666C](v4);
    swift_unknownObjectWeakAssign();
    PaperDocumentView.rulerHostView.didset(v5);

  }
}

void *PaperDocumentInlineView.toolPicker.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_toolPicker);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void PaperDocumentInlineView.toolPicker.setter(void *a1)
{
  specialized PaperDocumentInlineView.toolPicker.setter(a1);

}

void (*PaperDocumentInlineView.toolPicker.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x58uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_toolPicker;
  v3[9] = v1;
  v3[10] = v4;
  swift_beginAccess();
  return PaperDocumentInlineView.toolPicker.modify;
}

void PaperDocumentInlineView.toolPicker.modify(_QWORD **a1, char a2)
{
  _QWORD *v3;
  void **v4;
  char *v5;
  void *v6;
  id *v7;
  id v8;
  id v9;
  char *v10;
  id v11;
  char *v12;
  uint64_t v13;
  id v14;
  id v15;

  v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    v4 = (void **)(v3[9] + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
    swift_beginAccess();
    v5 = (char *)*v4;
    if (v5)
    {
      v6 = *(void **)(v3[9] + v3[10]);
      v7 = (id *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker];
      swift_beginAccess();
      v8 = *v7;
      *v7 = v6;
      v9 = v6;
      v10 = v5;
      if (v8)
      {
        objc_msgSend(v8, sel_removeObserver_, v10);
        v11 = PaperDocumentView.paperDocumentViewProxy.getter();
        objc_msgSend(v8, sel_removeObserver_, v11);

      }
      swift_beginAccess();
      v12 = v10;
      v13 = swift_bridgeObjectRetain();
      specialized Sequence.forEach(_:)(v13, (uint64_t)v12);

      swift_bridgeObjectRelease();
      if (*v7)
      {
        v14 = *v7;
        objc_msgSend(v14, sel_addObserver_, v12);
        v15 = PaperDocumentView.paperDocumentViewProxy.getter();
        objc_msgSend(v14, sel_addObserver_, v15);

        PaperDocumentView.updateTiledViewInk(for:)(v14);
        PaperDocumentView.updateToolPicker()();

      }
    }
  }
  free(v3);
}

void key path setter for PaperDocumentInlineView.paperDocumentView : PaperDocumentInlineView(void **a1, _QWORD *a2)
{
  void *v2;
  void **v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = (void **)(*a2 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
  swift_beginAccess();
  v4 = *v3;
  *v3 = v2;
  v5 = v2;

}

void *PaperDocumentInlineView.paperDocumentView.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

uint64_t type metadata accessor for PaperDocumentInlineView()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PaperDocumentInlineView;
  if (!type metadata singleton initialization cache for PaperDocumentInlineView)
    return swift_getSingletonMetadata();
  return result;
}

id PaperDocumentInlineView.__allocating_init(paperURL:coherenceContextURL:encryptionDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return PaperDocumentInlineView.init(paperURL:coherenceContextURL:encryptionDelegate:)(a1, a2, a3);
}

id PaperDocumentInlineView.init(paperURL:coherenceContextURL:encryptionDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unsigned __int8 v28;
  int v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  objc_class *v39;
  id v40;
  uint64_t v41;
  id v42;
  id v43;
  void *v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  objc_super v51;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_toolPicker] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_syncManager] = 0;
  v16 = v3;
  v48 = a3;
  v49 = a2;
  v47 = v12;
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    v17 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
  else
    v17 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v16[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_syncCancellables] = v17;
  *(_QWORD *)&v16[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView] = 0;
  swift_unknownObjectWeakInit();
  v18 = &v16[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_temporaryPaperDocument];
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v20 = &v16[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_liveStreamMessenger];
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  v21 = &v16[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_participantDetailsDataSource];
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  v16[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_showParticipantCursors] = 0;
  *(_QWORD *)&v16[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_textualContextProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  v22 = &v16[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_magicGenerativePlaygroundTokenProvider];
  *(_OWORD *)v22 = 0u;
  *((_OWORD *)v22 + 1) = 0u;
  *((_QWORD *)v22 + 4) = 0;
  v23 = (void *)objc_opt_self();
  v24 = objc_msgSend(v23, sel_defaultManager);
  v25 = URL.path.getter();
  v26 = MEMORY[0x1DF0E41AC](v25);
  v50 = a1;
  v27 = (void *)v26;
  swift_bridgeObjectRelease();
  v28 = objc_msgSend(v24, sel_isWritableFileAtPath_, v27);

  v29 = 0;
  v30 = v47;
  if ((v28 & 1) == 0)
  {
    v31 = objc_msgSend(v23, sel_defaultManager);
    URL.deletingLastPathComponent()();
    v32 = URL.path.getter();
    v34 = v33;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v11);
    v35 = (void *)MEMORY[0x1DF0E41AC](v32, v34);
    swift_bridgeObjectRelease();
    LODWORD(v34) = objc_msgSend(v31, sel_isWritableFileAtPath_, v35);

    v29 = v34 ^ 1;
  }
  v36 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v10, v49, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v10, 0, 1, v11);
  v37 = v48;
  v38 = specialized static PaperDocumentInlineView.createContext(coherenceContextURL:encryptionDelegate:readOnly:)((uint64_t)v10, v48, v29);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for URL?);
  *(_QWORD *)&v16[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_crContext] = v38;

  v39 = (objc_class *)type metadata accessor for PaperDocumentInlineView();
  v51.receiver = v16;
  v51.super_class = v39;
  v40 = objc_msgSendSuper2(&v51, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v41 = v50;
  PaperDocumentInlineView.watchFile(_:readOnly:)(v50, v29);
  v42 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  v43 = v40;
  v44 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000020, 0x80000001DDF58300);
  objc_msgSend(v42, sel_addObserver_selector_name_object_, v43, sel_toolPickerWillShow_, v44, 0);

  outlined destroy of StocksKitCurrencyCache.Provider?(v37, (uint64_t *)&demangling cache variable for type metadata for EncryptionDelegate?);
  v45 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
  v45(v36, v11);
  v45(v41, v11);
  return v43;
}

uint64_t PaperDocumentInlineView.viewControllerForPresentingUI.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_viewControllerForPresentingUI;
  swift_beginAccess();
  return MEMORY[0x1DF0E666C](v1);
}

void PaperDocumentInlineView.viewControllerForPresentingUI.setter(void *a1)
{
  specialized PaperDocumentInlineView.viewControllerForPresentingUI.setter();

}

void (*PaperDocumentInlineView.viewControllerForPresentingUI.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_viewControllerForPresentingUI;
  v3[6] = v1;
  v3[7] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x1DF0E666C](v5);
  return PaperDocumentInlineView.viewControllerForPresentingUI.modify;
}

void PaperDocumentInlineView.viewControllerForPresentingUI.modify(uint64_t *a1, char a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  id v8;
  id v9;
  id v10;

  v3 = *a1;
  v4 = *(void **)(*a1 + 24);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {

    swift_endAccess();
  }
  else
  {
    v5 = *(_QWORD *)(v3 + 48);
    swift_endAccess();

    v6 = (void **)(v5 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
    swift_beginAccess();
    v7 = *v6;
    if (v7)
    {
      v8 = (id)MEMORY[0x1DF0E666C](*(_QWORD *)(v3 + 48) + *(_QWORD *)(v3 + 56));
      v9 = v7;
      if (!v8)
      {
        v10 = objc_msgSend(*(id *)(v3 + 48), sel_window);
        v8 = objc_msgSend(v10, sel_rootViewController);

      }
      swift_beginAccess();
      swift_unknownObjectWeakAssign();
      PaperDocumentView.viewControllerForPresentingUI.didset();

    }
  }
  free((void *)v3);
}

Swift::Void __swiftcall PaperDocumentInlineView.didMoveToWindow()()
{
  char *v0;
  void **v1;
  void *v2;
  char *v3;
  id v4;
  id v5;
  id v6;
  objc_super v7;

  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for PaperDocumentInlineView();
  objc_msgSendSuper2(&v7, sel_didMoveToWindow);
  v1 = (void **)&v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView];
  swift_beginAccess();
  v2 = *v1;
  if (*v1)
  {
    v3 = &v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_viewControllerForPresentingUI];
    swift_beginAccess();
    v4 = (id)MEMORY[0x1DF0E666C](v3);
    v5 = v2;
    if (!v4)
    {
      v6 = objc_msgSend(v0, sel_window);
      v4 = objc_msgSend(v6, sel_rootViewController);

    }
    swift_beginAccess();
    swift_unknownObjectWeakAssign();
    PaperDocumentView.viewControllerForPresentingUI.didset();

  }
}

uint64_t PaperDocumentInlineView.watchFile(_:readOnly:)(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t FileVersionPolicy;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  double v30;
  uint64_t v31;
  char *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void (*v40)(unint64_t, _QWORD, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62;

  v3 = v2;
  LODWORD(v59) = a2;
  v60 = a1;
  v4 = type metadata accessor for URL();
  v57 = *(_QWORD *)(v4 - 8);
  v58 = v4;
  v5 = *(_QWORD *)(v57 + 64);
  MEMORY[0x1E0C80A78](v4, v6);
  v52 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v53 = (char *)&v52 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Capsule<PaperDocument>, Error>, NSRunLoop>);
  v55 = *(_QWORD *)(v14 - 8);
  v56 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v54 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  FileVersionPolicy = type metadata accessor for CRDataStoreBundleReadFileVersionPolicy();
  v22 = *(_QWORD *)(FileVersionPolicy - 8);
  MEMORY[0x1E0C80A78](FileVersionPolicy, v23);
  v25 = (char *)&v52 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v27 = *(_QWORD *)(v26 - 8);
  v30 = MEMORY[0x1E0C80A78](v26, v28);
  v32 = (char *)&v52 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_crContext);
  if ((v59 & 1) != 0)
  {
    v59 = (uint64_t)v33;
    v54 = v29;
    v55 = v3;
    v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRDataStoreBundle<PaperDocument>);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CRCodableVersion>);
    v34 = type metadata accessor for CRCodableVersion();
    v35 = *(_QWORD *)(v34 - 8);
    v36 = *(_QWORD *)(v35 + 72);
    v37 = (*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
    v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_1DDF33AB0;
    v39 = v38 + v37;
    v40 = *(void (**)(unint64_t, _QWORD, uint64_t))(v35 + 104);
    v40(v39, *MEMORY[0x1E0D12370], v34);
    v40(v39 + v36, *MEMORY[0x1E0D12378], v34);
    if (one-time initialization token for allReadableFileFormatVersions != -1)
      swift_once();
    (*(void (**)(char *, _QWORD, uint64_t))(v22 + 104))(v25, *MEMORY[0x1E0D127E0], FileVersionPolicy);
    static CRDataStoreBundle.read(_:url:fileVersionPolicy:allowedEncodings:allowedAppFormats:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v25, FileVersionPolicy);
    swift_bridgeObjectRelease();
    PaperDocumentInlineView.handleMerge(newModel:)((uint64_t)v32);
    return (*(uint64_t (**)(char *, char *))(v27 + 8))(v32, v54);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, double))(v27 + 56))(v20, 1, 1, v30);
    v41 = specialized static CRDataStoreBundle.paperBundle(_:sync:at:)(v33, (uint64_t)v20, v60);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
    *(_QWORD *)(v3 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_syncManager) = v41;
    v59 = v41;
    swift_retain();
    swift_release();
    v61 = CRDataStoreBundle.publisher.getter();
    v62 = objc_msgSend((id)objc_opt_self(), sel_mainRunLoop);
    v42 = type metadata accessor for NSRunLoop.SchedulerOptions();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v13, 1, 1, v42);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Capsule<PaperDocument>, Error>);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type AnyPublisher<Capsule<PaperDocument>, Error> and conformance AnyPublisher<A, B>, (uint64_t *)&demangling cache variable for type metadata for AnyPublisher<Capsule<PaperDocument>, Error>, MEMORY[0x1E0C95D90]);
    lazy protocol witness table accessor for type NSRunLoop and conformance NSRunLoop();
    v43 = v54;
    Publisher.receive<A>(on:options:)();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);

    swift_release();
    v44 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v46 = v57;
    v45 = v58;
    v47 = v53;
    (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v53, v60, v58);
    v48 = (*(unsigned __int8 *)(v46 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
    v49 = swift_allocObject();
    *(_QWORD *)(v49 + 16) = v44;
    (*(void (**)(unint64_t, char *, uint64_t))(v46 + 32))(v49 + v48, v47, v45);
    swift_allocObject();
    swift_unknownObjectWeakInit();
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<Capsule<PaperDocument>, Error>, NSRunLoop> and conformance Publishers.ReceiveOn<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Capsule<PaperDocument>, Error>, NSRunLoop>, MEMORY[0x1E0C95CB8]);
    v50 = v56;
    Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v43, v50);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    return swift_release();
  }
}

void closure #1 in PaperDocumentInlineView.watchFile(_:readOnly:)(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t ObjectType;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[3];

  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  if (v11)
  {
    swift_beginAccess();
    v12 = MEMORY[0x1DF0E666C](a2 + 16);
    if (v12)
    {
      v13 = (char *)v12;
      v14 = v11;
      if (one-time initialization token for logger != -1)
        swift_once();
      v15 = type metadata accessor for Logger();
      __swift_project_value_buffer(v15, (uint64_t)logger);
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a3, v6);
      v16 = v11;
      v17 = v11;
      v18 = Logger.logObject.getter();
      v19 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = swift_slowAlloc();
        v30 = swift_slowAlloc();
        v32[0] = v30;
        *(_DWORD *)v20 = 136315394;
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type URL and conformance URL, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], MEMORY[0x1E0CB0048]);
        v21 = dispatch thunk of CustomStringConvertible.description.getter();
        v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
        *(_WORD *)(v20 + 12) = 2080;
        v31 = (uint64_t)v11;
        v23 = v11;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
        v24 = String.init<A>(describing:)();
        v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1DDB0F000, v18, v19, "Failed to load inline document file: %s. Error: %s", (uint8_t *)v20, 0x16u);
        v26 = v30;
        swift_arrayDestroy();
        MEMORY[0x1DF0E6558](v26, -1, -1);
        MEMORY[0x1DF0E6558](v20, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);

      }
      v27 = &v13[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_delegate];
      swift_beginAccess();
      if (MEMORY[0x1DF0E666C](v27))
      {
        v28 = *((_QWORD *)v27 + 1);
        ObjectType = swift_getObjectType();
        (*(void (**)(void *, uint64_t, uint64_t))(v28 + 24))(v11, ObjectType, v28);

        swift_unknownObjectRelease();
      }
      else
      {

      }
    }
  }
}

void closure #2 in PaperDocumentInlineView.watchFile(_:readOnly:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = a2 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x1DF0E666C](v3);
  if (v4)
  {
    v5 = (void *)v4;
    PaperDocumentInlineView.handleMerge(newModel:)(a1);

  }
}

uint64_t (*PaperDocumentInlineView.temporaryPaperDocument.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.backgroundColor.modify;
}

void PaperDocumentInlineView.handleMerge(newModel:)(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  uint64_t (*v19)();
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  int v22;
  uint64_t v23;
  id *v24;
  id v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD v38[2];
  char *v39;
  char *v40;
  char v41[32];

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  MEMORY[0x1E0C80A78](v3, v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7, v8);
  v39 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v38 - v16;
  v18 = v1;
  v19 = PaperDocumentInlineView.temporaryPaperDocument.modify();
  v38[0] = v4;
  v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  v22 = v20(v21, 1, v3);
  v40 = (char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38[1] = v5;
  if (v22)
  {
    v23 = a1;
  }
  else
  {
    type metadata accessor for PaperDocument(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
    v23 = a1;
    Capsule.merge<A>(_:)();
  }
  ((void (*)(char *, _QWORD))v19)(v41, 0);
  v24 = (id *)&v1[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView];
  swift_beginAccess();
  if (!*v24
    || (v25 = *v24, specialized PaperDocumentView.merge<A>(_:from:)(v23, 0), v25, !*v24))
  {
    v26 = (uint64_t)v18 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_temporaryPaperDocument;
    swift_beginAccess();
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v26, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
    v27 = v20((uint64_t)v17, 1, v3);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
    if (v27 == 1)
    {
      v28 = v38[0];
      v29 = *(void (**)(char *, uint64_t, uint64_t))(v38[0] + 16);
      v29(v13, v23, v3);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v13, 0, 1, v3);
      swift_beginAccess();
      outlined assign with take of Date?((uint64_t)v13, v26, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
      swift_endAccess();
      v30 = type metadata accessor for TaskPriority();
      v31 = (uint64_t)v39;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v39, 1, 1, v30);
      v32 = v40;
      v29(v40, v23, v3);
      type metadata accessor for MainActor();
      v33 = v18;
      v34 = static MainActor.shared.getter();
      v35 = (*(unsigned __int8 *)(v28 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
      v36 = (char *)swift_allocObject();
      v37 = MEMORY[0x1E0DF06E8];
      *((_QWORD *)v36 + 2) = v34;
      *((_QWORD *)v36 + 3) = v37;
      *((_QWORD *)v36 + 4) = v33;
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(&v36[v35], v32, v3);
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v31, (uint64_t)&async function pointer to partial apply for closure #1 in PaperDocumentInlineView.handleMerge(newModel:), (uint64_t)v36);
      swift_release();
    }
  }
}

uint64_t closure #1 in PaperDocumentInlineView.handleMerge(newModel:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[56] = a4;
  v5[57] = a5;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  v5[58] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Capsule<PaperDocument>, Never>, NSRunLoop>);
  v5[59] = v6;
  v5[60] = *(_QWORD *)(v6 - 8);
  v5[61] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  v5[62] = swift_task_alloc();
  v5[63] = swift_task_alloc();
  type metadata accessor for MainActor();
  v5[64] = static MainActor.shared.getter();
  v5[65] = dispatch thunk of Actor.unownedExecutor.getter();
  v5[66] = v7;
  return swift_task_switch();
}

uint64_t closure #1 in PaperDocumentInlineView.handleMerge(newModel:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void **v9;
  void *v10;
  id v11;
  id v12;
  _QWORD *v13;
  uint64_t (*v14)(uint64_t, uint64_t, _BYTE *, uint64_t);

  v1 = *(_QWORD *)(v0 + 448);
  v2 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_crContext);
  v3 = *(_QWORD *)(v0 + 504);
  *(_QWORD *)(v0 + 536) = v2;
  v4 = OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_temporaryPaperDocument;
  *(_QWORD *)(v0 + 544) = OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_temporaryPaperDocument;
  v5 = v1 + v4;
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v5, v3, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  *(_QWORD *)(v0 + 552) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v0 + 560) = v7;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v3, 1, v6);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v9 = (void **)(*(_QWORD *)(v0 + 448) + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_toolPicker);
    swift_beginAccess();
    v10 = *v9;
    *(_QWORD *)(v0 + 568) = v10;
    *(_BYTE *)(v0 + 592) = 3;
    objc_allocWithZone((Class)type metadata accessor for PaperDocumentView());
    v14 = (uint64_t (*)(uint64_t, uint64_t, _BYTE *, uint64_t))((char *)&async function pointer to specialized PaperDocumentView.init(context:document:editingMode:toolPicker:)
                                                                     + async function pointer to specialized PaperDocumentView.init(context:document:editingMode:toolPicker:));
    v11 = v2;
    v12 = v10;
    v13 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 576) = v13;
    *v13 = v0;
    v13[1] = closure #1 in PaperDocumentInlineView.handleMerge(newModel:);
    return v14((uint64_t)v11, *(_QWORD *)(v0 + 504), (_BYTE *)(v0 + 592), (uint64_t)v10);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  Class isa;
  char *v27;
  void **v28;
  void *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  id v39;
  char *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t ObjectType;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v1 = *(_QWORD *)(v0 + 448);
  swift_release();
  v2 = v1 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_viewControllerForPresentingUI;
  swift_beginAccess();
  v3 = (id)MEMORY[0x1DF0E666C](v2);
  if (!v3)
  {
    v4 = objc_msgSend(*(id *)(v0 + 448), sel_window);
    v3 = objc_msgSend(v4, sel_rootViewController);

  }
  v5 = *(char **)(v0 + 584);
  v6 = *(_QWORD *)(v0 + 560);
  v7 = *(_QWORD *)(v0 + 552);
  v8 = *(_QWORD *)(v0 + 496);
  v54 = *(_QWORD *)(v0 + 488);
  v55 = *(_QWORD *)(v0 + 472);
  v56 = *(_QWORD *)(v0 + 480);
  v53 = *(_QWORD *)(v0 + 464);
  v9 = *(char **)(v0 + 448);
  v10 = (uint64_t)&v9[*(_QWORD *)(v0 + 544)];
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  PaperDocumentView.viewControllerForPresentingUI.didset();

  v11 = &v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate];
  swift_beginAccess();
  *((_QWORD *)v11 + 1) = &protocol witness table for PaperDocumentInlineView;
  swift_unknownObjectWeakAssign();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v8, 1, 1, v7);
  swift_beginAccess();
  outlined assign with take of Date?(v8, v10, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  swift_endAccess();
  objc_msgSend(v5, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v9, sel_addSubview_, v5);
  v12 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1DDF329D0;
  v14 = objc_msgSend(v5, sel_leadingAnchor);
  v15 = objc_msgSend(v9, sel_leadingAnchor);
  v16 = objc_msgSend(v14, sel_constraintEqualToAnchor_, v15);

  *(_QWORD *)(v13 + 32) = v16;
  v17 = objc_msgSend(v5, sel_trailingAnchor);
  v18 = objc_msgSend(v9, sel_trailingAnchor);
  v19 = objc_msgSend(v17, sel_constraintEqualToAnchor_, v18);

  *(_QWORD *)(v13 + 40) = v19;
  v20 = objc_msgSend(v5, sel_topAnchor);
  v21 = objc_msgSend(v9, sel_topAnchor);
  v22 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v21);

  *(_QWORD *)(v13 + 48) = v22;
  v23 = objc_msgSend(v5, sel_bottomAnchor);
  v24 = objc_msgSend(v9, sel_bottomAnchor);
  v25 = objc_msgSend(v23, sel_constraintEqualToAnchor_, v24);

  *(_QWORD *)(v13 + 56) = v25;
  specialized Array._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v12, sel_activateConstraints_, isa);

  v27 = &v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyAdjustScaleFactor];
  swift_beginAccess();
  *v27 = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyApplySafeAreaInsetsToAxes] = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  v28 = (void **)&v9[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView];
  swift_beginAccess();
  v29 = *v28;
  *v28 = v5;
  v30 = v5;

  v31 = &v9[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_liveStreamMessenger];
  swift_beginAccess();
  v32 = *((_QWORD *)v31 + 1);
  v33 = &v30[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger];
  swift_beginAccess();
  *((_QWORD *)v33 + 1) = v32;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRetain();
  PaperDocumentView.liveStreamMessenger.didset();
  swift_unknownObjectRelease();
  v34 = &v9[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_participantDetailsDataSource];
  swift_beginAccess();
  v35 = *((_QWORD *)v34 + 1);
  v36 = &v30[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource];
  swift_beginAccess();
  *((_QWORD *)v36 + 1) = v35;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRetain();
  PaperDocumentView.participantDetailsDataSource.didset();
  swift_unknownObjectRelease();
  v37 = &v9[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_showParticipantCursors];
  swift_beginAccess();
  LOBYTE(v29) = *v37;
  v38 = &v30[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors];
  swift_beginAccess();
  *v38 = (char)v29;
  PaperDocumentView.showParticipantCursors.didset();
  v39 = PaperDocumentInlineView.enclosingTextViewTiledViewRulerHostingView.getter();
  v40 = &v30[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_rulerHostView];
  swift_beginAccess();
  v41 = (void *)MEMORY[0x1DF0E666C](v40);
  swift_unknownObjectWeakAssign();
  PaperDocumentView.rulerHostView.didset(v41);

  objc_msgSend(v30, sel_setOverrideUserInterfaceStyle_, 1);
  *(_QWORD *)(v0 + 440) = *(_QWORD *)&v30[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_passThroughSubject];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<Capsule<PaperDocument>, Never>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type PassthroughSubject<Capsule<PaperDocument>, Never> and conformance PassthroughSubject<A, B>, (uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<Capsule<PaperDocument>, Never>, MEMORY[0x1E0C95F48]);
  *(_QWORD *)(v0 + 424) = Publisher.eraseToAnyPublisher()();
  *(_QWORD *)(v0 + 432) = objc_msgSend((id)objc_opt_self(), sel_mainRunLoop);
  v42 = type metadata accessor for NSRunLoop.SchedulerOptions();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v53, 1, 1, v42);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Capsule<PaperDocument>, Never>);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<Capsule<PaperDocument>, Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<Capsule<PaperDocument>, Never>, MEMORY[0x1E0C95D90]);
  lazy protocol witness table accessor for type NSRunLoop and conformance NSRunLoop();
  Publisher.receive<A>(on:options:)();
  outlined destroy of StocksKitCurrencyCache.Provider?(v53, (uint64_t *)&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);

  swift_release();
  v43 = swift_allocObject();
  swift_weakInit();
  v44 = swift_allocObject();
  v45 = &v9[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_delegate];
  swift_beginAccess();
  MEMORY[0x1DF0E666C](v45);
  *(_QWORD *)(v44 + 24) = *((_QWORD *)v45 + 1);
  swift_unknownObjectWeakInit();
  swift_unknownObjectRelease();
  v46 = swift_allocObject();
  *(_QWORD *)(v46 + 16) = v43;
  *(_QWORD *)(v46 + 24) = v44;
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Publishers.ReceiveOn<AnyPublisher<Capsule<PaperDocument>, Never>, NSRunLoop> and conformance Publishers.ReceiveOn<A, B>, &demangling cache variable for type metadata for Publishers.ReceiveOn<AnyPublisher<Capsule<PaperDocument>, Never>, NSRunLoop>, MEMORY[0x1E0C95CB8]);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v54, v55);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  v47 = MEMORY[0x1DF0E666C](v45);
  v48 = *(void **)(v0 + 584);
  if (v47)
  {
    v49 = *(_QWORD *)(v0 + 456);
    v50 = *((_QWORD *)v45 + 1);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(v50 + 8))(v49, v48, ObjectType, v50);
    swift_unknownObjectRelease();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in PaperDocumentInlineView.handleMerge(newModel:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v2 = *(void **)(*(_QWORD *)v1 + 568);
  v3 = *(void **)(*(_QWORD *)v1 + 536);
  *(_QWORD *)(*(_QWORD *)v1 + 584) = a1;
  swift_task_dealloc();

  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in PaperDocumentInlineView.handleMerge(newModel:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v5 = swift_allocObject();
    swift_beginAccess();
    MEMORY[0x1DF0E666C](a3 + 16);
    *(_QWORD *)(v5 + 24) = *(_QWORD *)(a3 + 24);
    swift_unknownObjectWeakInit();
    swift_unknownObjectRelease();
    swift_retain();
    CRDataStoreBundle.sync(_:finished:)();
    swift_release();
    return swift_release_n();
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in PaperDocumentInlineView.handleMerge(newModel:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t ObjectType;

  v2 = a1 + 16;
  swift_beginAccess();
  result = MEMORY[0x1DF0E666C](v2);
  if (result)
  {
    v4 = *(_QWORD *)(a1 + 24);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(ObjectType, v4);
    return swift_unknownObjectRelease();
  }
  return result;
}

void PaperDocumentInlineView.toolPickerWillShow(_:)()
{
  void *v0;
  id v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  char v7;
  id v8;
  void *v9;
  _BYTE v10[24];
  uint64_t v11;

  v1 = objc_msgSend(v0, sel_window);
  if (v1)
  {
    v2 = v1;
    Notification.object.getter();
    if (v11)
    {
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for PKToolPicker);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v3 = (void *)objc_opt_self();
        v4 = v9;
        v5 = objc_msgSend(v3, sel_activeToolPickerForWindow_, v2);
        if (v5)
        {
          v6 = v5;
          v4 = v4;
          v7 = static NSObject.== infix(_:_:)();

          if ((v7 & 1) != 0)
          {
            v8 = v4;
            specialized PaperDocumentInlineView.toolPicker.setter(v4);

            return;
          }

        }
        else
        {

        }
      }
      else
      {

      }
    }
    else
    {

      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for Any?);
    }
  }
}

uint64_t PaperDocumentInlineView.liveStreamMessenger.getter()
{
  return PaperDocumentInlineView.liveStreamMessenger.getter();
}

{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

uint64_t PaperDocumentInlineView.liveStreamMessenger.setter(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentInlineView.liveStreamMessenger.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_liveStreamMessenger, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger, (void (*)(uint64_t))PaperDocumentView.liveStreamMessenger.didset);
  return swift_unknownObjectRelease();
}

void (*PaperDocumentInlineView.liveStreamMessenger.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_liveStreamMessenger;
  v3[6] = v1;
  v3[7] = v4;
  swift_beginAccess();
  return PaperDocumentInlineView.liveStreamMessenger.modify;
}

void PaperDocumentInlineView.liveStreamMessenger.modify(_QWORD **a1, char a2)
{
  PaperDocumentInlineView.liveStreamMessenger.modify(a1, a2, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger, (void (*)(uint64_t))PaperDocumentView.liveStreamMessenger.didset);
}

uint64_t key path setter for PaperDocumentInlineView.liveStreamMessenger : PaperDocumentInlineView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, void (*a7)(uint64_t))
{
  uint64_t v10;
  uint64_t v11;

  v10 = *(_QWORD *)(a1 + 8);
  v11 = swift_unknownObjectRetain();
  specialized PaperDocumentInlineView.liveStreamMessenger.setter(v11, v10, a5, a6, a7);
  return swift_unknownObjectRelease();
}

uint64_t PaperDocumentInlineView.participantDetailsDataSource.getter()
{
  return PaperDocumentInlineView.liveStreamMessenger.getter();
}

uint64_t PaperDocumentInlineView.participantDetailsDataSource.setter(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentInlineView.liveStreamMessenger.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_participantDetailsDataSource, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource, (void (*)(uint64_t))PaperDocumentView.participantDetailsDataSource.didset);
  return swift_unknownObjectRelease();
}

void (*PaperDocumentInlineView.participantDetailsDataSource.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_participantDetailsDataSource;
  v3[6] = v1;
  v3[7] = v4;
  swift_beginAccess();
  return PaperDocumentInlineView.participantDetailsDataSource.modify;
}

void PaperDocumentInlineView.participantDetailsDataSource.modify(_QWORD **a1, char a2)
{
  PaperDocumentInlineView.liveStreamMessenger.modify(a1, a2, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource, (void (*)(uint64_t))PaperDocumentView.participantDetailsDataSource.didset);
}

void PaperDocumentInlineView.liveStreamMessenger.modify(_QWORD **a1, char a2, _QWORD *a3, void (*a4)(uint64_t))
{
  _QWORD *v7;
  void **v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v7 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    v8 = (void **)(v7[6] + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
    swift_beginAccess();
    v9 = (char *)*v8;
    if (*v8)
    {
      v10 = *(_QWORD *)(v7[6] + v7[7] + 8);
      v11 = &v9[*a3];
      swift_beginAccess();
      *((_QWORD *)v11 + 1) = v10;
      swift_unknownObjectWeakAssign();
      v12 = v9;
      v13 = swift_unknownObjectRetain();
      a4(v13);
      swift_unknownObjectRelease();

    }
  }
  free(v7);
}

void key path setter for PaperDocumentInlineView.showParticipantCursors : PaperDocumentInlineView(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  char *v4;
  void **v5;
  char *v6;
  char *v7;
  char *v8;

  v2 = *a1;
  v3 = *a2;
  v4 = (char *)(*a2 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_showParticipantCursors);
  swift_beginAccess();
  *v4 = v2;
  v5 = (void **)(v3 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
  swift_beginAccess();
  v6 = (char *)*v5;
  if (*v5)
  {
    v7 = &v6[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors];
    swift_beginAccess();
    *v7 = v2;
    v8 = v6;
    PaperDocumentView.showParticipantCursors.didset();

  }
}

uint64_t PaperDocumentInlineView.showParticipantCursors.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_showParticipantCursors);
  swift_beginAccess();
  return *v1;
}

void PaperDocumentInlineView.showParticipantCursors.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  void **v4;
  char *v5;
  char v6;
  char *v7;
  char *v8;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_showParticipantCursors);
  swift_beginAccess();
  *v3 = a1;
  v4 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
  swift_beginAccess();
  v5 = (char *)*v4;
  if (v5)
  {
    v6 = a1 & 1;
    v7 = &v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors];
    swift_beginAccess();
    *v7 = v6;
    v8 = v5;
    PaperDocumentView.showParticipantCursors.didset();

  }
}

void (*PaperDocumentInlineView.showParticipantCursors.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_showParticipantCursors;
  v3[6] = v1;
  v3[7] = v4;
  swift_beginAccess();
  return PaperDocumentInlineView.showParticipantCursors.modify;
}

void PaperDocumentInlineView.showParticipantCursors.modify(_QWORD **a1, char a2)
{
  _QWORD *v3;
  void **v4;
  char *v5;
  char v6;
  char *v7;
  char *v8;

  v3 = *a1;
  swift_endAccess();
  if ((a2 & 1) == 0)
  {
    v4 = (void **)(v3[6] + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
    swift_beginAccess();
    v5 = (char *)*v4;
    if (*v4)
    {
      v6 = *(_BYTE *)(v3[6] + v3[7]);
      v7 = &v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors];
      swift_beginAccess();
      *v7 = v6;
      v8 = v5;
      PaperDocumentView.showParticipantCursors.didset();

    }
  }
  free(v3);
}

Swift::Void __swiftcall PaperDocumentInlineView.participantDetailsDidChange()()
{
  uint64_t v0;
  id *v1;
  id v2;

  v1 = (id *)(v0 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
  swift_beginAccess();
  if (*v1)
  {
    v2 = *v1;
    PaperDocumentView.participantDetailsDidChange()();

  }
}

uint64_t key path setter for PaperDocumentInlineView.textualContextProvider : PaperDocumentInlineView(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = swift_unknownObjectRetain();
  specialized PaperDocumentInlineView.textualContextProvider.setter(v2, v1);
  return swift_unknownObjectRelease();
}

uint64_t PaperDocumentInlineView.textualContextProvider.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_textualContextProvider);
}

uint64_t PaperDocumentInlineView.textualContextProvider.setter(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentInlineView.textualContextProvider.setter(a1, a2);
  return swift_unknownObjectRelease();
}

void (*PaperDocumentInlineView.textualContextProvider.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_textualContextProvider;
  v3[6] = v1;
  v3[7] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return PaperDocumentInlineView.textualContextProvider.modify;
}

void PaperDocumentInlineView.textualContextProvider.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 48) + *(_QWORD *)(*(_QWORD *)a1 + 56) + 8) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    v4 = v3[6];
    swift_endAccess();
    swift_unknownObjectRelease();
    v5 = (uint64_t *)(v4 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
    swift_beginAccess();
    v6 = *v5;
    if (*v5)
    {
      v7 = v3[6] + v3[7];
      MEMORY[0x1DF0E666C](v7);
      v8 = *(_QWORD *)(v7 + 8);
      v9 = v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider;
      swift_beginAccess();
      *(_QWORD *)(v9 + 8) = v8;
      swift_unknownObjectWeakAssign();
      swift_unknownObjectRelease();
    }
  }
  free(v3);
}

uint64_t key path setter for PaperDocumentInlineView.magicGenerativePlaygroundTokenProvider : PaperDocumentInlineView(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _BYTE v5[40];

  outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v5, &demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?);
  v3 = *a2 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_magicGenerativePlaygroundTokenProvider;
  swift_beginAccess();
  outlined assign with take of Date?((uint64_t)v5, v3, &demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?);
  return swift_endAccess();
}

uint64_t PaperDocumentInlineView.magicGenerativePlaygroundTokenProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_magicGenerativePlaygroundTokenProvider;
  swift_beginAccess();
  return outlined init with copy of Ref<PKStrokeInheritedProperties>?(v3, a1, &demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?);
}

uint64_t PaperDocumentInlineView.magicGenerativePlaygroundTokenProvider.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_magicGenerativePlaygroundTokenProvider;
  swift_beginAccess();
  outlined assign with take of Date?(a1, v3, &demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?);
  return swift_endAccess();
}

uint64_t (*PaperDocumentInlineView.magicGenerativePlaygroundTokenProvider.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t PaperDocumentInlineView.initiateMagicGenerativePlayground(context:in:)(uint64_t a1, double a2, double a3, double a4, double a5)
{
  void *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(void **)a1;
  v16 = *(void **)(a1 + 8);
  LOBYTE(a1) = *(_BYTE *)(a1 + 16);
  v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v14, 1, 1, v17);
  type metadata accessor for MainActor();
  v18 = v5;
  outlined copy of MagicGenerativePlaygroundContext(v15, v16, a1);
  v19 = static MainActor.shared.getter();
  v20 = swift_allocObject();
  v21 = MEMORY[0x1E0DF06E8];
  *(_QWORD *)(v20 + 16) = v19;
  *(_QWORD *)(v20 + 24) = v21;
  *(_QWORD *)(v20 + 32) = v18;
  *(_QWORD *)(v20 + 40) = v15;
  *(_QWORD *)(v20 + 48) = v16;
  *(_BYTE *)(v20 + 56) = a1;
  *(double *)(v20 + 64) = a2;
  *(double *)(v20 + 72) = a3;
  *(double *)(v20 + 80) = a4;
  *(double *)(v20 + 88) = a5;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in PaperDocumentInlineView.initiateMagicGenerativePlayground(context:in:), v20);
  return swift_release();
}

uint64_t closure #1 in PaperDocumentInlineView.initiateMagicGenerativePlayground(context:in:)(uint64_t a1, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v12;

  *(double *)(v11 + 112) = a4;
  *(double *)(v11 + 120) = a5;
  *(double *)(v11 + 96) = a2;
  *(double *)(v11 + 104) = a3;
  *(_BYTE *)(v11 + 57) = a11;
  *(_QWORD *)(v11 + 80) = a9;
  *(_QWORD *)(v11 + 88) = a10;
  *(_QWORD *)(v11 + 64) = a1;
  *(_QWORD *)(v11 + 72) = a8;
  *(_QWORD *)(v11 + 128) = type metadata accessor for MainActor();
  *(_QWORD *)(v11 + 136) = static MainActor.shared.getter();
  *(_QWORD *)(v11 + 144) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v11 + 152) = v12;
  return swift_task_switch();
}

uint64_t closure #1 in PaperDocumentInlineView.initiateMagicGenerativePlayground(context:in:)()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;
  uint64_t v4;

  v1 = (void **)(*(_QWORD *)(v0 + 72) + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
  swift_beginAccess();
  v2 = *v1;
  *(_QWORD *)(v0 + 160) = *v1;
  if (v2)
  {
    v3 = v2;
    *(_QWORD *)(v0 + 168) = static MainActor.shared.getter();
    *(_QWORD *)(v0 + 176) = dispatch thunk of Actor.unownedExecutor.getter();
    *(_QWORD *)(v0 + 184) = v4;
    return swift_task_switch();
  }
  else
  {
    swift_release();
    **(_BYTE **)(v0 + 64) = *(_QWORD *)(v0 + 160) == 0;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

id PaperDocumentInlineView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), sel_initWithFrame_, a1, a2, a3, a4);
}

void PaperDocumentInlineView.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id PaperDocumentInlineView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PaperDocumentInlineView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for PaperKitAttachment.textualContextProvider.getter in conformance PaperDocumentInlineView()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_textualContextProvider;
  swift_beginAccess();
  return MEMORY[0x1DF0E666C](v1);
}

uint64_t protocol witness for PaperKitAttachment.textualContextProvider.setter in conformance PaperDocumentInlineView(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentInlineView.textualContextProvider.setter(a1, a2);
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for PaperKitAttachment.textualContextProvider.modify in conformance PaperDocumentInlineView(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PaperDocumentInlineView.textualContextProvider.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t protocol witness for PaperKitAttachment.viewControllerForPresentingUI.getter in conformance PaperDocumentInlineView()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = *v0 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_viewControllerForPresentingUI;
  swift_beginAccess();
  return MEMORY[0x1DF0E666C](v1);
}

void protocol witness for PaperKitAttachment.viewControllerForPresentingUI.setter in conformance PaperDocumentInlineView(void *a1)
{
  specialized PaperDocumentInlineView.viewControllerForPresentingUI.setter();

}

uint64_t (*protocol witness for PaperKitAttachment.viewControllerForPresentingUI.modify in conformance PaperDocumentInlineView(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PaperDocumentInlineView.viewControllerForPresentingUI.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.getter in conformance PaperDocumentInlineView()
{
  return protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.getter in conformance PaperDocumentInlineView();
}

{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.setter in conformance PaperDocumentInlineView(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentInlineView.liveStreamMessenger.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_liveStreamMessenger, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger, (void (*)(uint64_t))PaperDocumentView.liveStreamMessenger.didset);
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.modify in conformance PaperDocumentInlineView(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PaperDocumentInlineView.liveStreamMessenger.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.getter in conformance PaperDocumentInlineView()
{
  return protocol witness for PaperKitStreamableAttachment.liveStreamMessenger.getter in conformance PaperDocumentInlineView();
}

uint64_t protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.setter in conformance PaperDocumentInlineView(uint64_t a1, uint64_t a2)
{
  specialized PaperDocumentInlineView.liveStreamMessenger.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_participantDetailsDataSource, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource, (void (*)(uint64_t))PaperDocumentView.participantDetailsDataSource.didset);
  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for PaperKitStreamableAttachment.participantDetailsDataSource.modify in conformance PaperDocumentInlineView(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PaperDocumentInlineView.participantDetailsDataSource.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

void protocol witness for PaperKitStreamableAttachment.participantDetailsDidChange() in conformance PaperDocumentInlineView()
{
  _QWORD *v0;
  id *v1;
  id v2;

  v1 = (id *)(*v0 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
  swift_beginAccess();
  if (*v1)
  {
    v2 = *v1;
    PaperDocumentView.participantDetailsDidChange()();

  }
}

uint64_t protocol witness for PaperKitStreamableAttachment.showParticipantCursors.getter in conformance PaperDocumentInlineView()
{
  _QWORD *v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(*v0 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_showParticipantCursors);
  swift_beginAccess();
  return *v1;
}

void protocol witness for PaperKitStreamableAttachment.showParticipantCursors.setter in conformance PaperDocumentInlineView(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  _BYTE *v4;
  void **v5;
  char *v6;
  char v7;
  char *v8;
  char *v9;

  v3 = *v1;
  v4 = (_BYTE *)(*v1 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_showParticipantCursors);
  swift_beginAccess();
  *v4 = a1;
  v5 = (void **)(v3 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
  swift_beginAccess();
  v6 = (char *)*v5;
  if (v6)
  {
    v7 = a1 & 1;
    v8 = &v6[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_showParticipantCursors];
    swift_beginAccess();
    *v8 = v7;
    v9 = v6;
    PaperDocumentView.showParticipantCursors.didset();

  }
}

uint64_t (*protocol witness for PaperKitStreamableAttachment.showParticipantCursors.modify in conformance PaperDocumentInlineView(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = PaperDocumentInlineView.showParticipantCursors.modify(v2);
  return protocol witness for PaperKitCalculateDocumentAttachment.calculateDocument.modify in conformance PaperTextAttachmentView;
}

uint64_t PaperDocumentInlineView.documentViewDidScroll(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t ObjectType;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_delegate;
  swift_beginAccess();
  result = MEMORY[0x1DF0E666C](v1);
  if (result)
  {
    v3 = *(_QWORD *)(v1 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v3 + 32))(ObjectType, v3);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t protocol witness for PaperDocumentViewDelegate.documentViewDidScroll(_:) in conformance PaperDocumentInlineView()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t ObjectType;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_delegate;
  swift_beginAccess();
  result = MEMORY[0x1DF0E666C](v1);
  if (result)
  {
    v3 = *(_QWORD *)(v1 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v3 + 32))(ObjectType, v3);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v29 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<WeakTagged_9<TaggedCanvasElement>>);
    v12 = static _SetStorage.allocate(capacity:)();
    v13 = 0;
    v14 = *(unsigned __int8 *)(v3 + 80);
    v30 = v11;
    v31 = a1 + ((v14 + 32) & ~v14);
    v15 = *(_QWORD *)(v3 + 72);
    v33 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v34 = v12 + 56;
    while (1)
    {
      v32 = v13;
      v33(v10, v31 + v15 * v13, v2);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D11EE0]);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      v17 = ~(-1 << *(_BYTE *)(v12 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v34 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v33(v6, *(_QWORD *)(v12 + 48) + v18 * v15, v2);
          lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakTagged_9<TaggedCanvasElement> and conformance WeakTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for WeakTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D11EE8]);
          v22 = dispatch thunk of static Equatable.== infix(_:_:)();
          v23 = v3;
          v24 = *(void (**)(char *, uint64_t))(v3 + 8);
          v24(v6, v2);
          if ((v22 & 1) != 0)
          {
            v24(v10, v2);
            v3 = v23;
            v11 = v30;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v34 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v23;
        }
        while ((v20 & (1 << v18)) != 0);
        v11 = v30;
      }
      *(_QWORD *)(v34 + 8 * v19) = v21 | v20;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v12 + 48) + v18 * v15, v10, v2);
      v26 = *(_QWORD *)(v12 + 16);
      v27 = __OFADD__(v26, 1);
      v28 = v26 + 1;
      if (v27)
        break;
      *(_QWORD *)(v12 + 16) = v28;
LABEL_4:
      v13 = v32 + 1;
      if (v32 + 1 == v11)
        return v12;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E8];
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  Swift::Int v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<NSURLResourceKey>);
    v3 = static _SetStorage.allocate(capacity:)();
    v4 = 0;
    v5 = v3 + 56;
    v31 = v1;
    v32 = a1 + 32;
    while (1)
    {
      v6 = *(void **)(v32 + 8 * v4);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      v7 = v6;
      String.hash(into:)();
      v8 = Hasher._finalize()();
      result = swift_bridgeObjectRelease();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = v8 & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v17 = v16;
        if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
        {
LABEL_3:
          swift_bridgeObjectRelease_n();
LABEL_4:

          goto LABEL_5;
        }
        v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if ((v20 & 1) != 0)
          goto LABEL_4;
        v21 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v21;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v24 = v23;
          if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25)
            goto LABEL_3;
          v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          if ((v27 & 1) != 0)
            goto LABEL_4;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11) = v7;
      v28 = *(_QWORD *)(v3 + 16);
      v29 = __OFADD__(v28, 1);
      v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v30;
LABEL_5:
      if (++v4 == v31)
        return v3;
    }
  }
  return MEMORY[0x1E0DEE9E8];
}

unint64_t specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t (*v8)(uint64_t);
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v1 = result;
  v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v5)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AnyCancellable>);
      result = static _SetStorage.allocate(capacity:)();
      v3 = result;
      v19 = v1;
      if (!v2)
        goto LABEL_4;
LABEL_8:
      swift_bridgeObjectRetain();
      v4 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (!v4)
        return v3;
      goto LABEL_9;
    }
  }
  else if (*(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v3 = MEMORY[0x1E0DEE9E8];
  v19 = v1;
  if (v2)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return v3;
LABEL_9:
  v6 = 0;
  v7 = v3 + 56;
  v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00];
  v18 = v4;
  while ((v19 & 0xC000000000000001) != 0)
  {
    result = MEMORY[0x1DF0E4D64](v6, v19);
    v9 = __OFADD__(v6++, 1);
    if (v9)
      goto LABEL_26;
LABEL_18:
    v20 = result;
    type metadata accessor for AnyCancellable();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, v8, MEMORY[0x1E0C95E18]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v10 = -1 << *(_BYTE *)(v3 + 32);
    v11 = result & ~v10;
    v12 = v11 >> 6;
    v13 = *(_QWORD *)(v7 + 8 * (v11 >> 6));
    v14 = 1 << v11;
    if (((1 << v11) & v13) != 0)
    {
      v15 = ~v10;
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable, v8, MEMORY[0x1E0C95E20]);
      do
      {
        result = dispatch thunk of static Equatable.== infix(_:_:)();
        if ((result & 1) != 0)
        {
          result = swift_release();
          v4 = v18;
          goto LABEL_11;
        }
        v11 = (v11 + 1) & v15;
        v12 = v11 >> 6;
        v13 = *(_QWORD *)(v7 + 8 * (v11 >> 6));
        v14 = 1 << v11;
      }
      while ((v13 & (1 << v11)) != 0);
      v4 = v18;
    }
    *(_QWORD *)(v7 + 8 * v12) = v14 | v13;
    *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11) = v20;
    v16 = *(_QWORD *)(v3 + 16);
    v9 = __OFADD__(v16, 1);
    v17 = v16 + 1;
    if (v9)
      goto LABEL_27;
    *(_QWORD *)(v3 + 16) = v17;
LABEL_11:
    v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E0C95E00];
    if (v6 == v4)
      return v3;
  }
  if (v6 >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_28;
  result = swift_retain();
  v9 = __OFADD__(v6++, 1);
  if (!v9)
    goto LABEL_18;
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized static PaperDocumentInlineView.createContext(coherenceContextURL:encryptionDelegate:readOnly:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v21 - v12;
  v14 = type metadata accessor for URL();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) == 0)
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(a1, (uint64_t)v13, &demangling cache variable for type metadata for URL?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v13, v14);
      type metadata accessor for CRContext();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v9, 1, 1, v14);
      v19 = static CRContext.uniqueContextUnchecked(for:encryptionDelegate:temporaryDirectory:)();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v9, &demangling cache variable for type metadata for URL?);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
      return v19;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for URL?);
  }
  type metadata accessor for CRContext();
  return MEMORY[0x1DF0E3C90](0, a2);
}

void specialized PaperDocumentInlineView.viewControllerForPresentingUI.setter()
{
  char *v0;
  char *v1;
  void **v2;
  void *v3;
  id v4;
  id v5;
  id v6;

  v1 = &v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_viewControllerForPresentingUI];
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  v2 = (void **)&v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView];
  swift_beginAccess();
  v3 = *v2;
  if (*v2)
  {
    v4 = (id)MEMORY[0x1DF0E666C](v1);
    v5 = v3;
    if (!v4)
    {
      v6 = objc_msgSend(v0, sel_window);
      v4 = objc_msgSend(v6, sel_rootViewController);

    }
    swift_beginAccess();
    swift_unknownObjectWeakAssign();
    PaperDocumentView.viewControllerForPresentingUI.didset();

  }
}

void specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t a1)
{
  specialized Set.init(_nonEmptyArrayLiteral:)(a1, &demangling cache variable for type metadata for _SetStorage<NSObject>, (unint64_t *)&lazy cache variable for type metadata for NSObject);
}

{
  specialized Set.init(_nonEmptyArrayLiteral:)(a1, &demangling cache variable for type metadata for _SetStorage<UIColor>, (unint64_t *)&lazy cache variable for type metadata for UIColor);
}

Swift::Int specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  Swift::Int result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ResizeHandleType>);
    v3 = static _SetStorage.allocate(capacity:)();
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v7);
      result = Hasher._finalize()();
      v9 = -1 << *(_BYTE *)(v3 + 32);
      v10 = result & ~v9;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
      v13 = 1 << v10;
      v14 = *(_QWORD *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(unsigned __int8 *)(v14 + v10) == (_DWORD)v7)
          goto LABEL_3;
        v15 = ~v9;
        while (1)
        {
          v10 = (v10 + 1) & v15;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            break;
          if (*(unsigned __int8 *)(v14 + v10) == (_DWORD)v7)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_BYTE *)(v14 + v10) = v7;
      v16 = *(_QWORD *)(v3 + 16);
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x1E0DEE9E8];
}

void specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  id v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  id v29;
  Swift::Int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  char v37;
  uint64_t v38;
  id v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v46;

  v4 = a1;
  v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(a2);
      v6 = static _SetStorage.allocate(capacity:)();
      if (!v5)
        goto LABEL_4;
LABEL_8:
      swift_bridgeObjectRetain();
      v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v7)
        return;
      goto LABEL_9;
    }
  }
  else if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v6 = MEMORY[0x1E0DEE9E8];
  if (v5)
    goto LABEL_8;
LABEL_4:
  v7 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v7)
    return;
LABEL_9:
  v9 = v6 + 56;
  v46 = v7;
  if ((v4 & 0xC000000000000001) != 0)
  {
    v10 = 0;
    v43 = v4;
    while (1)
    {
      v11 = MEMORY[0x1DF0E4D64](v10, v4);
      v12 = __OFADD__(v10++, 1);
      if (v12)
      {
        __break(1u);
        goto LABEL_37;
      }
      v13 = v11;
      v14 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
      v15 = -1 << *(_BYTE *)(v6 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      v18 = *(_QWORD *)(v9 + 8 * (v16 >> 6));
      v19 = 1 << v16;
      if (((1 << v16) & v18) != 0)
      {
        type metadata accessor for NSObject(0, a3);
        v20 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v16);
        v21 = static NSObject.== infix(_:_:)();

        if ((v21 & 1) != 0)
        {
LABEL_11:
          swift_unknownObjectRelease();
          v4 = v43;
          goto LABEL_12;
        }
        v22 = ~v15;
        while (1)
        {
          v16 = (v16 + 1) & v22;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v9 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          if ((v18 & (1 << v16)) == 0)
            break;
          v23 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v16);
          v24 = static NSObject.== infix(_:_:)();

          if ((v24 & 1) != 0)
            goto LABEL_11;
        }
        v4 = v43;
      }
      *(_QWORD *)(v9 + 8 * v17) = v19 | v18;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v16) = v13;
      v25 = *(_QWORD *)(v6 + 16);
      v12 = __OFADD__(v25, 1);
      v26 = v25 + 1;
      if (v12)
        goto LABEL_38;
      *(_QWORD *)(v6 + 16) = v26;
LABEL_12:
      if (v10 == v46)
        return;
    }
  }
  v27 = 0;
  v44 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v27 != v44)
  {
    v28 = *(_QWORD *)(v6 + 40);
    v29 = *(id *)(v4 + 32 + 8 * v27);
    v30 = NSObject._rawHashValue(seed:)(v28);
    v31 = -1 << *(_BYTE *)(v6 + 32);
    v32 = v30 & ~v31;
    v33 = v32 >> 6;
    v34 = *(_QWORD *)(v9 + 8 * (v32 >> 6));
    v35 = 1 << v32;
    if (((1 << v32) & v34) != 0)
    {
      type metadata accessor for NSObject(0, a3);
      v36 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v32);
      v37 = static NSObject.== infix(_:_:)();

      if ((v37 & 1) != 0)
        goto LABEL_24;
      v38 = ~v31;
      v32 = (v32 + 1) & v38;
      v33 = v32 >> 6;
      v34 = *(_QWORD *)(v9 + 8 * (v32 >> 6));
      v35 = 1 << v32;
      if ((v34 & (1 << v32)) != 0)
      {
        while (1)
        {
          v39 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v32);
          v40 = static NSObject.== infix(_:_:)();

          if ((v40 & 1) != 0)
            break;
          v32 = (v32 + 1) & v38;
          v33 = v32 >> 6;
          v34 = *(_QWORD *)(v9 + 8 * (v32 >> 6));
          v35 = 1 << v32;
          if ((v34 & (1 << v32)) == 0)
            goto LABEL_32;
        }
LABEL_24:

        v7 = v46;
        goto LABEL_25;
      }
LABEL_32:
      v7 = v46;
    }
    *(_QWORD *)(v9 + 8 * v33) = v35 | v34;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v32) = v29;
    v41 = *(_QWORD *)(v6 + 16);
    v12 = __OFADD__(v41, 1);
    v42 = v41 + 1;
    if (v12)
      goto LABEL_39;
    *(_QWORD *)(v6 + 16) = v42;
LABEL_25:
    if (++v27 == v7)
      return;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
}

void specialized PaperDocumentInlineView.toolPicker.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  id v5;
  void **v6;
  char *v7;
  void *v8;
  id *v9;
  id v10;
  id v11;
  char *v12;
  id v13;
  char *v14;
  uint64_t v15;
  id v16;
  id v17;

  v3 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_toolPicker);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;
  v5 = a1;

  v6 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
  swift_beginAccess();
  v7 = (char *)*v6;
  if (v7)
  {
    v8 = *v3;
    v9 = (id *)&v7[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker];
    swift_beginAccess();
    v10 = *v9;
    *v9 = v8;
    v11 = v8;
    v12 = v7;
    if (v10)
    {
      objc_msgSend(v10, sel_removeObserver_, v12);
      v13 = PaperDocumentView.paperDocumentViewProxy.getter();
      objc_msgSend(v10, sel_removeObserver_, v13);

    }
    swift_beginAccess();
    v14 = v12;
    v15 = swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v15, (uint64_t)v14);
    swift_bridgeObjectRelease();

    if (*v9)
    {
      v16 = *v9;
      objc_msgSend(v16, sel_addObserver_, v14);
      v17 = PaperDocumentView.paperDocumentViewProxy.getter();
      objc_msgSend(v16, sel_addObserver_, v17);

      PaperDocumentView.updateTiledViewInk(for:)(v16);
      PaperDocumentView.updateToolPicker()();

      v14 = (char *)v10;
      v10 = v11;
      v11 = v16;
    }

  }
}

void specialized PaperDocumentInlineView.init(coder:)()
{
  _BYTE *v0;
  unint64_t v1;
  char *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  char *v6;

  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_toolPicker] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_syncManager] = 0;
  if ((MEMORY[0x1E0DEE9D8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    v1 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E0DEE9D8]);
  else
    v1 = MEMORY[0x1E0DEE9E8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_syncCancellables] = v1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView] = 0;
  swift_unknownObjectWeakInit();
  v2 = &v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_temporaryPaperDocument];
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = &v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_liveStreamMessenger];
  *v4 = 0;
  v4[1] = 0;
  v5 = &v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_participantDetailsDataSource];
  *v5 = 0;
  v5[1] = 0;
  v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_showParticipantCursors] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_textualContextProvider + 8] = 0;
  swift_unknownObjectWeakInit();
  v6 = &v0[OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_magicGenerativePlaygroundTokenProvider];
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((_QWORD *)v6 + 4) = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized PaperDocumentInlineView.liveStreamMessenger.setter(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, void (*a5)(uint64_t))
{
  uint64_t v5;
  _QWORD *v10;
  void **v11;
  uint64_t result;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v10 = (_QWORD *)(v5 + *a3);
  swift_beginAccess();
  *v10 = a1;
  v10[1] = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v11 = (void **)(v5 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
  result = swift_beginAccess();
  v13 = (char *)*v11;
  if (*v11)
  {
    v14 = v10[1];
    v15 = &v13[*a4];
    swift_beginAccess();
    *((_QWORD *)v15 + 1) = v14;
    swift_unknownObjectWeakAssign();
    v16 = v13;
    v17 = swift_unknownObjectRetain();
    a5(v17);

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t specialized PaperDocumentInlineView.textualContextProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = v2 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_textualContextProvider;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView);
  result = swift_beginAccess();
  v7 = *v5;
  if (*v5)
  {
    MEMORY[0x1DF0E666C](v4);
    v8 = *(_QWORD *)(v4 + 8);
    v9 = v7 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider;
    swift_beginAccess();
    *(_QWORD *)(v9 + 8) = v8;
    swift_unknownObjectWeakAssign();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1DDDC1C48()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  outlined consume of MagicGenerativePlaygroundContext(*(void **)(v0 + 40), *(id *)(v0 + 48), *(_BYTE *)(v0 + 56));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PaperDocumentInlineView.initiateMagicGenerativePlayground(context:in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  char v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v8 = *(_QWORD *)(v1 + 48);
  v9 = *(double *)(v1 + 64);
  v10 = *(double *)(v1 + 72);
  v11 = *(double *)(v1 + 80);
  v12 = *(double *)(v1 + 88);
  v13 = *(_BYTE *)(v1 + 56);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = partial apply for closure #1 in CanvasGenerationTool.magicPaperViewControllerDidCancel(_:);
  return closure #1 in PaperDocumentInlineView.initiateMagicGenerativePlayground(context:in:)(a1, v9, v10, v11, v12, v4, v5, v6, v7, v8, v13);
}

uint64_t sub_1DDDC1D38@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_delegate, a2);
}

uint64_t sub_1DDDC1D44(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_delegate;
  swift_beginAccess();
  *(_QWORD *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

id sub_1DDDC1DA4@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_toolPicker, a2);
}

void sub_1DDDC1DB0(id *a1)
{
  id v1;
  id v2;

  v1 = *a1;
  v2 = *a1;
  specialized PaperDocumentInlineView.toolPicker.setter(v1);

}

id sub_1DDDC1DEC@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  return keypath_getTm(a1, &OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_paperDocumentView, a2);
}

uint64_t sub_1DDDC1DFC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_viewControllerForPresentingUI;
  swift_beginAccess();
  result = MEMORY[0x1DF0E666C](v3);
  *a2 = result;
  return result;
}

void sub_1DDDC1E50(id *a1)
{
  id v1;

  v1 = *a1;
  specialized PaperDocumentInlineView.viewControllerForPresentingUI.setter();

}

uint64_t sub_1DDDC1E8C@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return keypath_get_8Tm(a1, &OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_liveStreamMessenger, a2);
}

uint64_t sub_1DDDC1E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PaperDocumentInlineView.liveStreamMessenger : PaperDocumentInlineView(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_liveStreamMessenger, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_liveStreamMessenger, (void (*)(uint64_t))PaperDocumentView.liveStreamMessenger.didset);
}

uint64_t sub_1DDDC1EC4@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return keypath_get_8Tm(a1, &OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_participantDetailsDataSource, a2);
}

uint64_t keypath_get_8Tm@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, _OWORD *a3@<X8>)
{
  _OWORD *v4;

  v4 = (_OWORD *)(*a1 + *a2);
  swift_beginAccess();
  *a3 = *v4;
  return swift_unknownObjectRetain();
}

uint64_t sub_1DDDC1F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for PaperDocumentInlineView.liveStreamMessenger : PaperDocumentInlineView(a1, a2, a3, a4, &OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_participantDetailsDataSource, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_participantDetailsDataSource, (void (*)(uint64_t))PaperDocumentView.participantDetailsDataSource.didset);
}

uint64_t sub_1DDDC1F50@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(*a1 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_showParticipantCursors);
  result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_1DDDC1FA4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return keypath_getTm_0(a1, &OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_textualContextProvider, a2);
}

uint64_t sub_1DDDC1FB4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1 + OBJC_IVAR____TtC8PaperKit23PaperDocumentInlineView_magicGenerativePlaygroundTokenProvider;
  swift_beginAccess();
  return outlined init with copy of Ref<PKStrokeInheritedProperties>?(v3, a2, &demangling cache variable for type metadata for MagicGenerativePlaygroundTokenProvider?);
}

uint64_t dispatch thunk of PaperDocumentInlineViewDelegate.paperDocumentDidLoad(dataModel:view:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of PaperDocumentInlineViewDelegate.paperDocumentDidSave()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PaperDocumentInlineViewDelegate.paperDocumentDidFailToLoad(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PaperDocumentInlineViewDelegate.paperDocumentDidScroll()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t ObjC metadata update function for PaperDocumentInlineView()
{
  return type metadata accessor for PaperDocumentInlineView();
}

void type metadata completion function for PaperDocumentInlineView()
{
  unint64_t v0;

  type metadata accessor for Capsule<PaperDocument>?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for PaperDocumentInlineView()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PaperDocumentInlineView.paperDocument.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.delegate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.delegate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.delegate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.toolPicker.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.toolPicker.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.toolPicker.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.paperDocumentView.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.__allocating_init(paperURL:coherenceContextURL:encryptionDelegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 320))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.viewControllerForPresentingUI.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.viewControllerForPresentingUI.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.viewControllerForPresentingUI.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.liveStreamMessenger.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.liveStreamMessenger.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.liveStreamMessenger.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.participantDetailsDataSource.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.participantDetailsDataSource.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.participantDetailsDataSource.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.showParticipantCursors.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.showParticipantCursors.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.showParticipantCursors.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.participantDetailsDidChange()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.textualContextProvider.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.textualContextProvider.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.textualContextProvider.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x200))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.magicGenerativePlaygroundTokenProvider.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x208))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.magicGenerativePlaygroundTokenProvider.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x210))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.magicGenerativePlaygroundTokenProvider.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x218))();
}

uint64_t dispatch thunk of PaperDocumentInlineView.initiateMagicGenerativePlayground(context:in:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x220))();
}

uint64_t sub_1DDDC2428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PaperDocumentInlineView.handleMerge(newModel:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>)
                                      - 8)
                          + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = partial apply for closure #1 in AnyCanvas.calculateDocumentResultChanged(_:itemUUID:needsAttribution:);
  return closure #1 in PaperDocumentInlineView.handleMerge(newModel:)(a1, v5, v6, v7, v8);
}

uint64_t sub_1DDDC2540()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1DDDC2564()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1DDDC2588()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in PaperDocumentInlineView.handleMerge(newModel:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in PaperDocumentInlineView.handleMerge(newModel:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in PaperDocumentInlineView.handleMerge(newModel:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in closure #1 in PaperDocumentInlineView.handleMerge(newModel:)(v0);
}

uint64_t sub_1DDDC25C4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1DDDC25E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void partial apply for closure #1 in PaperDocumentInlineView.watchFile(_:readOnly:)(void **a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL() - 8) + 80);
  closure #1 in PaperDocumentInlineView.watchFile(_:readOnly:)(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

void partial apply for closure #2 in PaperDocumentInlineView.watchFile(_:readOnly:)(uint64_t a1)
{
  uint64_t v1;

  closure #2 in PaperDocumentInlineView.watchFile(_:readOnly:)(a1, v1);
}

void specialized Sequence.first(where:)(char *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (**v44)(uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t *, _QWORD);
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int (*v79)(uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t);
  uint64_t v83;
  void (*v84)(char *, uint64_t, uint64_t, uint64_t);
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *, char *, uint64_t);
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t (**v101)(uint64_t);
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  uint64_t i;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125[5];
  uint64_t v126;

  v109 = a3;
  v105 = a2;
  v118 = a1;
  v99 = a4;
  v108 = type metadata accessor for CRAsset();
  v4 = *(_QWORD *)(v108 - 8);
  MEMORY[0x1E0C80A78](v108, v5);
  v122 = (char *)&v98 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change);
  v120 = *(_QWORD *)(v7 - 8);
  v121 = v7;
  MEMORY[0x1E0C80A78](v7, v8);
  v104 = (uint64_t)&v98 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change?);
  MEMORY[0x1E0C80A78](v10, v11);
  v119 = (uint64_t)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v98 - v15;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAsset??);
  MEMORY[0x1E0C80A78](v17, v18);
  v107 = (uint64_t)&v98 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v126 = (uint64_t)&v98 - v22;
  MEMORY[0x1E0C80A78](v23, v24);
  v117 = (uint64_t)&v98 - v25;
  v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  v116 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v27);
  v100 = (uint64_t)&v98 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29, v30);
  v115 = (char *)&v98 - v31;
  MEMORY[0x1E0C80A78](v32, v33);
  v124 = (char *)&v98 - v34;
  v114 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>);
  v35 = *(_QWORD *)(v114 - 8);
  MEMORY[0x1E0C80A78](v114, v36);
  v38 = (char *)&v98 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = (char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>);
  MEMORY[0x1E0C80A78](v113, v39);
  v41 = (char *)&v98 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  i = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>);
  MEMORY[0x1E0C80A78](i, v42);
  v44 = (uint64_t (**)(uint64_t))((char *)&v98 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  v110 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>, CRAsset>);
  MEMORY[0x1E0C80A78](v110, v45);
  v47 = (char *)&v98 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>, CRAsset>.Iterator);
  MEMORY[0x1E0C80A78](v106, v48);
  v50 = (char *)&v98 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v118, (uint64_t)v47, (uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>, CRAsset>);
  v101 = v44;
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v47, (uint64_t)v44, &demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>);
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v44, (uint64_t)v41, &demangling cache variable for type metadata for LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>);
  v103 = v35;
  v51 = v114;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v38, v41, v114);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CollectionDifference<PaperDocument.PDFPageAndPaperPage> and conformance CollectionDifference<A>, &demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>, MEMORY[0x1E0DECE08]);
  v102 = v38;
  dispatch thunk of Sequence.makeIterator()();
  v52 = *((int *)v113 + 11);
  v53 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>.Iterator);
  v54 = *(_OWORD *)&v41[v52];
  v118 = &v50[*(int *)(v53 + 44)];
  *(_OWORD *)v118 = v54;
  v55 = *(int *)(i + 36);
  v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>.Iterator);
  v57 = *(_OWORD *)((char *)v101 + v55);
  v101 = (uint64_t (**)(uint64_t))&v50[*(int *)(v56 + 36)];
  *(_OWORD *)v101 = v57;
  v58 = *(_OWORD *)&v47[*(int *)(v110 + 44)];
  v59 = v51;
  v106 = (uint64_t)&v50[*(int *)(v106 + 44)];
  *(_OWORD *)v106 = v58;
  v60 = &v50[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<PaperDocument.PDFPageAndPaperPage>>)
                    + 36)];
  v61 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CollectionDifference<PaperDocument.PDFPageAndPaperPage> and conformance CollectionDifference<A>, &demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>, MEMORY[0x1E0DECE10]);
  v112 = v16;
  v113 = v50;
  v110 = v61;
  for (i = (uint64_t)v60; ; v60 = (char *)i)
  {
    v62 = *(_QWORD *)v60;
    dispatch thunk of Collection.endIndex.getter();
    if (v62 == v125[0])
    {
      v63 = 1;
    }
    else
    {
      v64 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v65, (uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change);
      v64(v125, 0);
      v66 = v103;
      v67 = v102;
      (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v102, v50, v59);
      dispatch thunk of Collection.formIndex(after:)();
      (*(void (**)(char *, uint64_t))(v66 + 8))(v67, v59);
      v63 = 0;
    }
    v68 = v120;
    v69 = v121;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v120 + 56))(v16, v63, 1, v121);
    v70 = *(void (**)(uint64_t))v118;
    v71 = (uint64_t)v16;
    v72 = v119;
    outlined init with take of (key: Int, value: AnyCRValue)?(v71, v119, &demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v72, 1, v69) == 1)
    {
      v73 = v116;
      v74 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v116 + 56);
      v74(v126, 1, 1, v26);
    }
    else
    {
      v75 = v72;
      v76 = v104;
      outlined init with take of (key: Int, value: AnyCRValue)?(v75, v104, (uint64_t *)&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change);
      v77 = v126;
      v70(v76);
      outlined destroy of StocksKitCurrencyCache.Provider?(v76, (uint64_t *)&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change);
      v73 = v116;
      v74 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v116 + 56);
      v74(v77, 0, 1, v26);
    }
    v78 = (uint64_t)v115;
    v79 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
    if (v79(v126, 1, v26) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v126, &demangling cache variable for type metadata for CRAsset??);
      v80 = 1;
    }
    else
    {
      outlined init with take of (key: Int, value: AnyCRValue)?(v126, v78, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
      if (((*v101)(v78) & 1) == 0)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v78, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
        v16 = v112;
        goto LABEL_3;
      }
      outlined init with take of (key: Int, value: AnyCRValue)?(v78, v117, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
      v80 = 0;
    }
    v81 = v117;
    v74(v117, v80, 1, v26);
    v82 = *(void (**)(uint64_t))v106;
    v83 = v107;
    outlined init with take of (key: Int, value: AnyCRValue)?(v81, v107, &demangling cache variable for type metadata for CRAsset??);
    if (v79(v83, 1, v26) == 1)
    {
      v84 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      v85 = v124;
      v86 = 1;
    }
    else
    {
      v87 = v83;
      v88 = v100;
      outlined init with take of (key: Int, value: AnyCRValue)?(v87, v100, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
      v89 = v124;
      v82(v88);
      outlined destroy of StocksKitCurrencyCache.Provider?(v88, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
      v84 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
      v85 = v89;
      v86 = 0;
    }
    v90 = v108;
    v84(v85, v86, 1, v108);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v124, 1, v90) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v113, (uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>, CRAsset>.Iterator);
      v96 = 1;
      v97 = v99;
      goto LABEL_24;
    }
    v91 = v4;
    v92 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    v93 = (uint64_t)v122;
    v92(v122, v124, v90);
    v94 = v123;
    v95 = closure #4 in PaperDocument.update<A>(_:in:otherDocuments:use:)(v93, v105, (uint64_t)v109);
    v123 = v94;
    if (v94)
    {
      (*(void (**)(char *, uint64_t))(v91 + 8))(v122, v90);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v113, (uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>, CRAsset>.Iterator);
      goto LABEL_25;
    }
    if (v95)
      break;
    v4 = v91;
    (*(void (**)(char *, uint64_t))(v91 + 8))(v122, v90);
    v16 = v112;
LABEL_3:
    v50 = v113;
    v59 = v114;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v113, (uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>, CRAsset>.Iterator);
  v97 = v99;
  v92(v99, v122, v90);
  v96 = 0;
LABEL_24:
  v84(v97, v96, 1, v90);
LABEL_25:

}

uint64_t PaperDocumentView.performTextSearch(queryString:ignoreCase:wholeWords:)(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v5 + 56) = a2;
  *(_QWORD *)(v5 + 64) = v4;
  *(_BYTE *)(v5 + 177) = a4;
  *(_BYTE *)(v5 + 176) = a3;
  *(_QWORD *)(v5 + 48) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(_QWORD *)(v5 + 72) = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  *(_QWORD *)(v5 + 80) = v6;
  *(_QWORD *)(v5 + 88) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 96) = swift_task_alloc();
  *(_QWORD *)(v5 + 104) = type metadata accessor for MainActor();
  *(_QWORD *)(v5 + 112) = static MainActor.shared.getter();
  *(_QWORD *)(v5 + 120) = dispatch thunk of Actor.unownedExecutor.getter();
  *(_QWORD *)(v5 + 128) = v7;
  return swift_task_switch();
}

uint64_t PaperDocumentView.performTextSearch(queryString:ignoreCase:wholeWords:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_BYTE *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 64) + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v6;
  *v6 = v0;
  v6[1] = PaperDocumentView.performTextSearch(queryString:ignoreCase:wholeWords:);
  return Capsule<>.search(query:fullWordsOnly:caseMatchingOnly:)(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 177), (v4 & 1) == 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  char *v29;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v28 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument;
    v29 = *(char **)(v0 + 64);
    v3 = v29;
    swift_bridgeObjectRetain();
    v4 = (uint64_t *)(v1 + 64);
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v8 = *(v4 - 2);
      v7 = *(v4 - 1);
      v9 = *v4;
      v10 = *(v4 - 3);
      v11 = objc_msgSend(*(id *)&v29[v28], sel_pageAtIndex_, *(v4 - 4));
      if (v11)
      {
        v12 = v11;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
        v14 = v5[2];
        v13 = v5[3];
        if (v14 >= v13 >> 1)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v5);
        v5[2] = v14 + 1;
        v6 = &v5[6 * v14];
        v6[4] = v10;
        v6[5] = v8;
        v6[6] = v7;
        v6[7] = v9;
        v6[8] = v12;
        *((_BYTE *)v6 + 72) = 1;
      }
      v4 += 5;
      --v2;
    }
    while (v2);
    v0 = v27;
    v15 = *(void **)(v27 + 64);
    swift_bridgeObjectRelease();

  }
  else
  {
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  *(_QWORD *)(v0 + 152) = v5;
  v16 = *(_QWORD *)(v0 + 72);
  v17 = *(_BYTE *)(v0 + 176);
  v19 = *(_QWORD *)(v0 + 48);
  v18 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRelease();
  v20 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v16, 1, 1, v20);
  v21 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  swift_bridgeObjectRetain();
  v22 = static MainActor.shared.getter();
  v23 = swift_allocObject();
  v24 = MEMORY[0x1E0DF06E8];
  *(_QWORD *)(v23 + 16) = v22;
  *(_QWORD *)(v23 + 24) = v24;
  *(_QWORD *)(v23 + 32) = v21;
  *(_QWORD *)(v23 + 40) = v19;
  *(_QWORD *)(v23 + 48) = v18;
  *(_BYTE *)(v23 + 56) = v17;
  swift_release();
  *(_QWORD *)(v0 + 160) = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCSay8PaperKit0D18DocumentFindResultVG_Tgm5(v16, (uint64_t)&async function pointer to partial apply for closure #2 in PaperDocumentView.performTextSearch(queryString:ignoreCase:wholeWords:), v23);
  v25 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 168) = v25;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [PaperDocumentFindResult]);
  *v25 = v0;
  v25[1] = PaperDocumentView.performTextSearch(queryString:ignoreCase:wholeWords:);
  return Task<>.value.getter();
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 152);
  swift_release();
  v2 = *(_QWORD *)(v0 + 40);
  v5 = v1;
  specialized Array.append<A>(contentsOf:)(v2);
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(&v5);
  swift_bridgeObjectRelease();
  v3 = v5;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t PaperDocumentView.performTextSearch(queryString:ignoreCase:wholeWords:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = a1;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch();
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  char v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  id v13;
  char v14;

  if (a2 >> 62)
    goto LABEL_20;
  v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    v4 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      v5 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      v5 = (id)MEMORY[0x1DF0E4D64](0, a2);
LABEL_5:
      v6 = v5;
      type metadata accessor for AnyCanvasElementView();
      v7 = static NSObject.== infix(_:_:)();

      if ((v7 & 1) != 0)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v3 == 1)
        goto LABEL_18;
      if (v4)
        break;
      v4 = 5;
      while (1)
      {
        v12 = v4 - 3;
        if (__OFADD__(v4 - 4, 1))
          break;
        v13 = *(id *)(a2 + 8 * v4);
        v14 = static NSObject.== infix(_:_:)();

        if ((v14 & 1) != 0)
          goto LABEL_6;
        ++v4;
        if (v12 == v3)
          goto LABEL_18;
      }
      __break(1u);
    }
    v9 = 1;
    while (1)
    {
      MEMORY[0x1DF0E4D64](v9, a2);
      v10 = v9 + 1;
      if (__OFADD__(v9, 1))
        break;
      v11 = static NSObject.== infix(_:_:)();
      swift_unknownObjectRelease();
      if ((v11 & 1) != 0)
        goto LABEL_6;
      ++v9;
      if (v10 == v3)
        goto LABEL_18;
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return 0;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 >> 62)
    goto LABEL_12;
  v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v4)
  {
    while ((a2 & 0xC000000000000001) == 0)
    {
      if (*(_QWORD *)(a2 + 32) == a1)
        goto LABEL_21;
      if (v4 != 1)
      {
        v5 = 5;
        while (1)
        {
          v6 = v5 - 3;
          if (__OFADD__(v5 - 4, 1))
            break;
          if (*(_QWORD *)(a2 + 8 * v5) == a1)
            goto LABEL_21;
          ++v5;
          if (v6 == v4)
            goto LABEL_10;
        }
        __break(1u);
LABEL_12:
        swift_bridgeObjectRetain();
        v4 = _CocoaArrayWrapper.endIndex.getter();
        if (v4)
          continue;
      }
      goto LABEL_10;
    }
    v8 = MEMORY[0x1DF0E4D64](0, a2);
    swift_unknownObjectRelease();
    if (v8 == a1)
    {
LABEL_21:
      swift_bridgeObjectRelease();
      return 1;
    }
    if (v4 == 1)
      goto LABEL_10;
    v9 = 1;
    while (1)
    {
      result = MEMORY[0x1DF0E4D64](v9, a2);
      v10 = v9 + 1;
      if (__OFADD__(v9, 1))
        break;
      v11 = result;
      swift_unknownObjectRelease();
      if (v11 == a1)
        goto LABEL_21;
      ++v9;
      if (v10 == v4)
        goto LABEL_10;
    }
    __break(1u);
  }
  else
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    goto LABEL_5;
  if (((((result & 1) == 0) ^ *(unsigned __int8 *)(a2 + 32)) & 1) != 0)
    return 1;
  if (v2 != 1)
  {
    v4 = 33;
    while (1)
    {
      v5 = v4 - 31;
      if (__OFADD__(v4 - 32, 1))
        break;
      v3 = ((result & 1) == 0) ^ *(_BYTE *)(a2 + v4);
      if ((v3 & 1) == 0)
      {
        ++v4;
        if (v5 != v2)
          continue;
      }
      return v3 & 1;
    }
    __break(1u);
  }
  else
  {
LABEL_5:
    v3 = 0;
    return v3 & 1;
  }
  return result;
}

uint64_t specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t a6, double a7, double a8, double a9, double a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v11 + 352) = a6;
  *(_QWORD *)(v11 + 360) = v10;
  *(_BYTE *)(v11 + 92) = a5;
  *(_BYTE *)(v11 + 91) = a4;
  *(double *)(v11 + 336) = a9;
  *(double *)(v11 + 344) = a10;
  *(double *)(v11 + 320) = a7;
  *(double *)(v11 + 328) = a8;
  *(_QWORD *)(v11 + 304) = a2;
  *(_QWORD *)(v11 + 312) = a3;
  *(_QWORD *)(v11 + 296) = a1;
  v12 = type metadata accessor for CRKeyPath();
  *(_QWORD *)(v11 + 368) = v12;
  *(_QWORD *)(v11 + 376) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v11 + 384) = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v11 + 560) = v10;
  *(_QWORD *)(v11 + 552) = a6;
  *(_BYTE *)(v11 + 92) = a5;
  *(_BYTE *)(v11 + 91) = a4;
  *(double *)(v11 + 544) = a10;
  *(double *)(v11 + 536) = a9;
  *(double *)(v11 + 528) = a8;
  *(double *)(v11 + 520) = a7;
  *(_QWORD *)(v11 + 504) = a2;
  *(_QWORD *)(v11 + 512) = a3;
  *(_QWORD *)(v11 + 496) = a1;
  v12 = type metadata accessor for CRKeyPath();
  *(_QWORD *)(v11 + 568) = v12;
  *(_QWORD *)(v11 + 576) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v11 + 584) = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v11 + 352) = a6;
  *(_QWORD *)(v11 + 360) = v10;
  *(_BYTE *)(v11 + 92) = a5;
  *(_BYTE *)(v11 + 91) = a4;
  *(double *)(v11 + 336) = a9;
  *(double *)(v11 + 344) = a10;
  *(double *)(v11 + 320) = a7;
  *(double *)(v11 + 328) = a8;
  *(_QWORD *)(v11 + 304) = a2;
  *(_QWORD *)(v11 + 312) = a3;
  *(_QWORD *)(v11 + 296) = a1;
  v12 = type metadata accessor for CRKeyPath();
  *(_QWORD *)(v11 + 368) = v12;
  *(_QWORD *)(v11 + 376) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v11 + 384) = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v11 + 560) = v10;
  *(_QWORD *)(v11 + 552) = a6;
  *(_BYTE *)(v11 + 92) = a5;
  *(_BYTE *)(v11 + 91) = a4;
  *(double *)(v11 + 544) = a10;
  *(double *)(v11 + 536) = a9;
  *(double *)(v11 + 528) = a8;
  *(double *)(v11 + 520) = a7;
  *(_QWORD *)(v11 + 504) = a2;
  *(_QWORD *)(v11 + 512) = a3;
  *(_QWORD *)(v11 + 496) = a1;
  v12 = type metadata accessor for CRKeyPath();
  *(_QWORD *)(v11 + 568) = v12;
  *(_QWORD *)(v11 + 576) = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v11 + 584) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:)()
{
  uint64_t v0;
  int v1;
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  int v10;
  id v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CGContext *v22;
  uint64_t v23;
  uint64_t v24;
  CGColor *v25;
  uint64_t v26;
  char v27;
  char v28;
  double v29;
  double v30;
  double v31;
  void *v32;
  id v33;
  id v34;
  _QWORD *v35;
  uint64_t v37;
  char v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  CGRect ClipBoundingBox;
  CGRect v41;

  v1 = *(unsigned __int8 *)(v0 + 91);
  v2 = (unsigned __int8 *)(*(_QWORD *)(v0 + 360) + 72);
  swift_beginAccess();
  if (v1 == 1)
  {
    v3 = 0;
    v4 = 2;
  }
  else
  {
    v3 = *v2;
    v4 = 1;
  }
  v5 = *(_QWORD *)(v0 + 360);
  v6 = objc_msgSend((id)objc_opt_self(), sel_traitCollectionWithUserInterfaceStyle_, v4);
  *(_QWORD *)(v0 + 392) = v6;
  swift_beginAccess();
  v7 = *(void **)(v5 + 56);
  if (v7)
  {
    v8 = objc_msgSend(v7, sel_resolvedColorWithTraitCollection_, v6);
    v9 = objc_msgSend(v8, sel_CGColor);

  }
  else
  {
    v9 = 0;
  }
  v38 = v3;
  if (v9)
    v10 = 0;
  else
    v10 = v3;
  if (v10 == 1)
  {
    v11 = objc_msgSend((id)objc_opt_self(), sel_systemBackgroundColor);
    v12 = objc_msgSend(v11, sel_resolvedColorWithTraitCollection_, v6);

    v9 = objc_msgSend(v12, sel_CGColor);
  }
  *(_QWORD *)(v0 + 400) = v9;
  v13 = *(_QWORD *)(v0 + 352);
  v14 = *(_QWORD **)(v0 + 360);
  v15 = v14[5];
  v16 = v14[6];
  __swift_project_boxed_opaque_existential_1(v14 + 2, v15);
  v17 = (*(double (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
  v18 = v14[5];
  v19 = v14[6];
  __swift_project_boxed_opaque_existential_1(v14 + 2, v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v13, v18, v19);
  if (*(_QWORD *)(v0 + 208))
  {
    outlined init with take of FindResult((__int128 *)(v0 + 184), v0 + 144);
    v20 = *(_QWORD *)(v0 + 168);
    v21 = *(_QWORD *)(v0 + 176);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 144), v20);
    v22 = (CGContext *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21);
    *(_QWORD *)(v0 + 408) = v22;
    v23 = *(_QWORD *)(v0 + 168);
    v24 = *(_QWORD *)(v0 + 176);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 144), v23);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
    if (v9)
    {
      v25 = (CGColor *)v9;
      CGContextSetFillColorWithColor(v22, v25);
      ClipBoundingBox = CGContextGetClipBoundingBox(v22);
      CGContextFillRect(v22, ClipBoundingBox);

    }
    v26 = *(_QWORD *)(v0 + 360);
    v27 = *(_BYTE *)(v0 + 92);
    v28 = *(_BYTE *)(v0 + 91);
    v41.size.width = *(CGFloat *)(v0 + 336);
    v41.size.height = *(CGFloat *)(v0 + 344);
    v30 = *(double *)(v0 + 320);
    v29 = *(double *)(v0 + 328);
    v41.origin.x = v30;
    v41.origin.y = v29;
    v31 = v17 / CGRectGetWidth(v41);
    *(double *)(v0 + 96) = v31;
    *(_QWORD *)(v0 + 104) = 0;
    *(_QWORD *)(v0 + 112) = 0;
    *(double *)(v0 + 120) = v31;
    *(double *)(v0 + 128) = -(v30 * v31);
    *(double *)(v0 + 136) = -(v29 * v31);
    CGContextConcatCTM(v22, (CGAffineTransform *)(v0 + 96));
    swift_beginAccess();
    v32 = *(void **)(v26 + 64);
    *(_QWORD *)(v0 + 416) = v32;
    LOBYTE(v26) = *(_BYTE *)(v26 + 73);
    v33 = v32;
    static CRKeyPath.unique.getter();
    *(_BYTE *)(v0 + 16) = v38;
    *(_BYTE *)(v0 + 17) = v28;
    *(_BYTE *)(v0 + 18) = v27;
    *(_QWORD *)(v0 + 24) = v32;
    *(_BYTE *)(v0 + 32) = 1;
    *(_OWORD *)(v0 + 40) = 0u;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_BYTE *)(v0 + 72) = 1;
    *(_QWORD *)(v0 + 80) = 0;
    *(_WORD *)(v0 + 88) = 0;
    *(_BYTE *)(v0 + 90) = v26;
    v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)
                                                            + async function pointer to specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:));
    v34 = v33;
    v35 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 424) = v35;
    *v35 = v0;
    v35[1] = specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:);
    return v39((uint64_t)v22, *(_QWORD *)(v0 + 312), v0 + 16);
  }
  else
  {
    v37 = *(_QWORD *)(v0 + 296);

    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 184, &demangling cache variable for type metadata for RendererContext?);
    *(_OWORD *)v37 = 0u;
    *(_OWORD *)(v37 + 16) = 0u;
    *(_QWORD *)(v37 + 32) = 0;
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(*(_QWORD *)v0 + 416);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 376);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 384);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 368);
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(void **)(v0 + 408);
  v1 = *(void **)(v0 + 416);
  v4 = *(void **)(v0 + 392);
  v3 = *(void **)(v0 + 400);
  v5 = *(_QWORD *)(v0 + 296);
  v6 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 176);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 144), v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);

  outlined init with copy of FindResult(v0 + 144, v5);
  __swift_destroy_boxed_opaque_existential_1(v0 + 144);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  int v1;
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  int v10;
  id v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CGContext *v22;
  uint64_t v23;
  uint64_t v24;
  CGColor *v25;
  uint64_t v26;
  char v27;
  char v28;
  double v29;
  double v30;
  double v31;
  void *v32;
  id v33;
  id v34;
  CGFloat v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _QWORD *v53;
  uint64_t v55;
  CGFloat rect;
  char v57;
  CGFloat v58;
  CGAffineTransform v59;
  CGRect ClipBoundingBox;
  CGRect v61;
  CGRect v62;
  CGRect v63;

  v1 = *(unsigned __int8 *)(v0 + 91);
  v2 = (unsigned __int8 *)(*(_QWORD *)(v0 + 560) + 72);
  swift_beginAccess();
  if (v1 == 1)
  {
    v3 = 0;
    v4 = 2;
  }
  else
  {
    v3 = *v2;
    v4 = 1;
  }
  v5 = *(_QWORD *)(v0 + 560);
  v6 = objc_msgSend((id)objc_opt_self(), sel_traitCollectionWithUserInterfaceStyle_, v4);
  *(_QWORD *)(v0 + 592) = v6;
  swift_beginAccess();
  v7 = *(void **)(v5 + 56);
  if (v7)
  {
    v8 = objc_msgSend(v7, sel_resolvedColorWithTraitCollection_, v6);
    v9 = objc_msgSend(v8, sel_CGColor);

  }
  else
  {
    v9 = 0;
  }
  v57 = v3;
  if (v9)
    v10 = 0;
  else
    v10 = v3;
  if (v10 == 1)
  {
    v11 = objc_msgSend((id)objc_opt_self(), sel_systemBackgroundColor);
    v12 = objc_msgSend(v11, sel_resolvedColorWithTraitCollection_, v6);

    v9 = objc_msgSend(v12, sel_CGColor);
  }
  *(_QWORD *)(v0 + 600) = v9;
  v13 = *(_QWORD **)(v0 + 560);
  v14 = *(_QWORD *)(v0 + 552);
  v15 = v13[5];
  v16 = v13[6];
  __swift_project_boxed_opaque_existential_1(v13 + 2, v15);
  v17 = (*(double (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
  v18 = v13[5];
  v19 = v13[6];
  __swift_project_boxed_opaque_existential_1(v13 + 2, v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v14, v18, v19);
  if (*(_QWORD *)(v0 + 400))
  {
    outlined init with take of FindResult((__int128 *)(v0 + 376), v0 + 336);
    v20 = *(_QWORD *)(v0 + 360);
    v21 = *(_QWORD *)(v0 + 368);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 336), v20);
    v22 = (CGContext *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21);
    *(_QWORD *)(v0 + 608) = v22;
    v23 = *(_QWORD *)(v0 + 360);
    v24 = *(_QWORD *)(v0 + 368);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 336), v23);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
    if (v9)
    {
      v25 = (CGColor *)v9;
      CGContextSetFillColorWithColor(v22, v25);
      ClipBoundingBox = CGContextGetClipBoundingBox(v22);
      CGContextFillRect(v22, ClipBoundingBox);

    }
    v26 = *(_QWORD *)(v0 + 560);
    v27 = *(_BYTE *)(v0 + 92);
    v28 = *(_BYTE *)(v0 + 91);
    v61.size.height = *(CGFloat *)(v0 + 544);
    v61.size.width = *(CGFloat *)(v0 + 536);
    v29 = *(double *)(v0 + 528);
    v30 = *(double *)(v0 + 520);
    v61.origin.x = v30;
    v61.origin.y = v29;
    v31 = v17 / CGRectGetWidth(v61);
    *(double *)(v0 + 192) = v31;
    *(_QWORD *)(v0 + 200) = 0;
    *(_QWORD *)(v0 + 208) = 0;
    *(double *)(v0 + 216) = v31;
    *(double *)(v0 + 224) = -(v30 * v31);
    *(double *)(v0 + 232) = -(v29 * v31);
    CGContextConcatCTM(v22, (CGAffineTransform *)(v0 + 192));
    swift_beginAccess();
    v32 = *(void **)(v26 + 64);
    *(_QWORD *)(v0 + 616) = v32;
    LOBYTE(v26) = *(_BYTE *)(v26 + 73);
    v33 = v32;
    static CRKeyPath.unique.getter();
    *(_BYTE *)(v0 + 16) = v57;
    *(_BYTE *)(v0 + 17) = v28;
    *(_BYTE *)(v0 + 18) = v27;
    *(_QWORD *)(v0 + 24) = v32;
    *(_BYTE *)(v0 + 32) = 1;
    *(_OWORD *)(v0 + 40) = 0u;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_BYTE *)(v0 + 72) = 1;
    *(_QWORD *)(v0 + 80) = 0;
    *(_WORD *)(v0 + 88) = 0;
    *(_BYTE *)(v0 + 90) = v26;
    v34 = v33;
    CGContextSaveGState(v22);
    type metadata accessor for Image();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    v35 = *(double *)(v0 + 488);
    Image.pdfContentsBounds.getter();
    v37 = v36;
    v39 = v38;
    v58 = v40;
    rect = v41;
    CGAffineTransformMakeRotation(&v59, v35);
    a = v59.a;
    b = v59.b;
    c = v59.c;
    d = v59.d;
    tx = v59.tx;
    ty = v59.ty;
    *(CGFloat *)(v0 + 288) = v59.a;
    *(CGFloat *)(v0 + 296) = b;
    *(CGFloat *)(v0 + 304) = c;
    *(CGFloat *)(v0 + 312) = d;
    *(CGFloat *)(v0 + 320) = tx;
    *(CGFloat *)(v0 + 328) = ty;
    v62.origin.x = v37;
    v62.origin.y = v39;
    v62.size.width = v58;
    v62.size.height = rect;
    v63 = CGRectApplyAffineTransform(v62, (CGAffineTransform *)(v0 + 288));
    CGAffineTransformMakeTranslation(&v59, v37 - v63.origin.x, v39 - v63.origin.y);
    v48 = *(_OWORD *)&v59.a;
    v49 = *(_OWORD *)&v59.c;
    v50 = *(_OWORD *)&v59.tx;
    *(CGFloat *)(v0 + 240) = a;
    *(CGFloat *)(v0 + 248) = b;
    *(CGFloat *)(v0 + 256) = c;
    *(CGFloat *)(v0 + 264) = d;
    *(CGFloat *)(v0 + 272) = tx;
    *(CGFloat *)(v0 + 280) = ty;
    *(_OWORD *)(v0 + 144) = v48;
    *(_OWORD *)(v0 + 160) = v49;
    *(_OWORD *)(v0 + 176) = v50;
    CGAffineTransformConcat(&v59, (CGAffineTransform *)(v0 + 240), (CGAffineTransform *)(v0 + 144));
    v51 = *(_OWORD *)&v59.c;
    v52 = *(_OWORD *)&v59.tx;
    *(_OWORD *)(v0 + 96) = *(_OWORD *)&v59.a;
    *(_OWORD *)(v0 + 112) = v51;
    *(_OWORD *)(v0 + 128) = v52;
    CGContextConcatCTM(v22, (CGAffineTransform *)(v0 + 96));
    v53 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 624) = v53;
    *v53 = v0;
    v53[1] = specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:);
    return Image.renderImage(in:isTopLevel:)((uint64_t)v22, 1);
  }
  else
  {
    v55 = *(_QWORD *)(v0 + 496);

    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 376, &demangling cache variable for type metadata for RendererContext?);
    *(_OWORD *)v55 = 0u;
    *(_OWORD *)(v55 + 16) = 0u;
    *(_QWORD *)(v55 + 32) = 0;
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  char *v3;

  CGContextRestoreGState(*(CGContextRef *)(v0 + 608));
  v3 = (char *)&async function pointer to specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)
     + async function pointer to specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 632) = v1;
  *v1 = v0;
  v1[1] = specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:);
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))v3)(*(_QWORD *)(v0 + 608), *(_QWORD *)(v0 + 512), v0 + 16);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(*(_QWORD *)v0 + 616);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 584);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 576);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 568);
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch();
}

{
  uint64_t v0;
  int v1;
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  int v10;
  id v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CGContext *v22;
  uint64_t v23;
  uint64_t v24;
  CGColor *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  double v30;
  double v31;
  double v32;
  void *v33;
  char v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  char v46;
  CGRect ClipBoundingBox;
  CGRect v48;

  v1 = *(unsigned __int8 *)(v0 + 91);
  v2 = (unsigned __int8 *)(*(_QWORD *)(v0 + 360) + 72);
  swift_beginAccess();
  if (v1 == 1)
  {
    v3 = 0;
    v4 = 2;
  }
  else
  {
    v3 = *v2;
    v4 = 1;
  }
  v5 = *(_QWORD *)(v0 + 360);
  v6 = objc_msgSend((id)objc_opt_self(), sel_traitCollectionWithUserInterfaceStyle_, v4);
  swift_beginAccess();
  v7 = *(void **)(v5 + 56);
  if (v7)
  {
    v8 = objc_msgSend(v7, sel_resolvedColorWithTraitCollection_, v6);
    v9 = objc_msgSend(v8, sel_CGColor);

  }
  else
  {
    v9 = 0;
  }
  v46 = v3;
  if (v9)
    v10 = 0;
  else
    v10 = v3;
  if (v10 == 1)
  {
    v11 = objc_msgSend((id)objc_opt_self(), sel_systemBackgroundColor);
    v12 = objc_msgSend(v11, sel_resolvedColorWithTraitCollection_, v6);

    v9 = objc_msgSend(v12, sel_CGColor);
  }
  v13 = *(_QWORD *)(v0 + 352);
  v14 = *(_QWORD **)(v0 + 360);
  v15 = v14[5];
  v16 = v14[6];
  __swift_project_boxed_opaque_existential_1(v14 + 2, v15);
  v17 = (*(double (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
  v18 = v14[5];
  v19 = v14[6];
  __swift_project_boxed_opaque_existential_1(v14 + 2, v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v13, v18, v19);
  if (*(_QWORD *)(v0 + 208))
  {
    v45 = v6;
    outlined init with take of FindResult((__int128 *)(v0 + 184), v0 + 144);
    v20 = *(_QWORD *)(v0 + 168);
    v21 = *(_QWORD *)(v0 + 176);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 144), v20);
    v22 = (CGContext *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21);
    v23 = *(_QWORD *)(v0 + 168);
    v24 = *(_QWORD *)(v0 + 176);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 144), v23);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
    if (v9)
    {
      v25 = (CGColor *)v9;
      CGContextSetFillColorWithColor(v22, v25);
      ClipBoundingBox = CGContextGetClipBoundingBox(v22);
      CGContextFillRect(v22, ClipBoundingBox);

    }
    v26 = *(_QWORD *)(v0 + 384);
    v27 = *(_QWORD *)(v0 + 360);
    v42 = *(_QWORD *)(v0 + 376);
    v43 = *(_QWORD *)(v0 + 368);
    v28 = *(_BYTE *)(v0 + 92);
    v29 = *(_BYTE *)(v0 + 91);
    v48.size.width = *(CGFloat *)(v0 + 336);
    v48.size.height = *(CGFloat *)(v0 + 344);
    v31 = *(double *)(v0 + 320);
    v30 = *(double *)(v0 + 328);
    v41 = *(_QWORD *)(v0 + 312);
    v44 = *(_QWORD *)(v0 + 296);
    v48.origin.x = v31;
    v48.origin.y = v30;
    v32 = v17 / CGRectGetWidth(v48);
    *(double *)(v0 + 96) = v32;
    *(_QWORD *)(v0 + 104) = 0;
    *(_QWORD *)(v0 + 112) = 0;
    *(double *)(v0 + 120) = v32;
    *(double *)(v0 + 128) = -(v31 * v32);
    *(double *)(v0 + 136) = -(v30 * v32);
    CGContextConcatCTM(v22, (CGAffineTransform *)(v0 + 96));
    swift_beginAccess();
    v33 = *(void **)(v27 + 64);
    v34 = *(_BYTE *)(v27 + 73);
    v35 = v33;
    static CRKeyPath.unique.getter();
    *(_BYTE *)(v0 + 16) = v46;
    *(_BYTE *)(v0 + 17) = v29;
    *(_BYTE *)(v0 + 18) = v28;
    *(_QWORD *)(v0 + 24) = v33;
    *(_BYTE *)(v0 + 32) = 1;
    *(_OWORD *)(v0 + 40) = 0u;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_BYTE *)(v0 + 72) = 1;
    *(_QWORD *)(v0 + 80) = 0;
    *(_WORD *)(v0 + 88) = 0;
    *(_BYTE *)(v0 + 90) = v34;
    v36 = v35;
    specialized Shape.renderSync<A>(in:id:capsule:options:)(v22, v26, v41, v0 + 16);

    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v26, v43);
    v37 = *(_QWORD *)(v0 + 168);
    v38 = *(_QWORD *)(v0 + 176);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 144), v37);
    (*(void (**)(uint64_t, uint64_t))(v38 + 32))(v37, v38);

    outlined init with copy of FindResult(v0 + 144, v44);
    __swift_destroy_boxed_opaque_existential_1(v0 + 144);
  }
  else
  {
    v39 = *(_QWORD *)(v0 + 296);

    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 184, &demangling cache variable for type metadata for RendererContext?);
    *(_OWORD *)v39 = 0u;
    *(_OWORD *)(v39 + 16) = 0u;
    *(_QWORD *)(v39 + 32) = 0;
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  int v1;
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  int v10;
  id v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CGContext *v22;
  uint64_t v23;
  uint64_t v24;
  CGColor *v25;
  uint64_t v26;
  char v27;
  char v28;
  double v29;
  double v30;
  double v31;
  void *v32;
  id v33;
  id v34;
  CGFloat v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _QWORD *v53;
  uint64_t v55;
  CGFloat rect;
  char v57;
  CGFloat v58;
  CGAffineTransform v59;
  CGRect ClipBoundingBox;
  CGRect v61;
  CGRect v62;
  CGRect v63;

  v1 = *(unsigned __int8 *)(v0 + 91);
  v2 = (unsigned __int8 *)(*(_QWORD *)(v0 + 560) + 72);
  swift_beginAccess();
  if (v1 == 1)
  {
    v3 = 0;
    v4 = 2;
  }
  else
  {
    v3 = *v2;
    v4 = 1;
  }
  v5 = *(_QWORD *)(v0 + 560);
  v6 = objc_msgSend((id)objc_opt_self(), sel_traitCollectionWithUserInterfaceStyle_, v4);
  *(_QWORD *)(v0 + 592) = v6;
  swift_beginAccess();
  v7 = *(void **)(v5 + 56);
  if (v7)
  {
    v8 = objc_msgSend(v7, sel_resolvedColorWithTraitCollection_, v6);
    v9 = objc_msgSend(v8, sel_CGColor);

  }
  else
  {
    v9 = 0;
  }
  v57 = v3;
  if (v9)
    v10 = 0;
  else
    v10 = v3;
  if (v10 == 1)
  {
    v11 = objc_msgSend((id)objc_opt_self(), sel_systemBackgroundColor);
    v12 = objc_msgSend(v11, sel_resolvedColorWithTraitCollection_, v6);

    v9 = objc_msgSend(v12, sel_CGColor);
  }
  *(_QWORD *)(v0 + 600) = v9;
  v13 = *(_QWORD **)(v0 + 560);
  v14 = *(_QWORD *)(v0 + 552);
  v15 = v13[5];
  v16 = v13[6];
  __swift_project_boxed_opaque_existential_1(v13 + 2, v15);
  v17 = (*(double (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
  v18 = v13[5];
  v19 = v13[6];
  __swift_project_boxed_opaque_existential_1(v13 + 2, v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v14, v18, v19);
  if (*(_QWORD *)(v0 + 400))
  {
    outlined init with take of FindResult((__int128 *)(v0 + 376), v0 + 336);
    v20 = *(_QWORD *)(v0 + 360);
    v21 = *(_QWORD *)(v0 + 368);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 336), v20);
    v22 = (CGContext *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21);
    *(_QWORD *)(v0 + 608) = v22;
    v23 = *(_QWORD *)(v0 + 360);
    v24 = *(_QWORD *)(v0 + 368);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 336), v23);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
    if (v9)
    {
      v25 = (CGColor *)v9;
      CGContextSetFillColorWithColor(v22, v25);
      ClipBoundingBox = CGContextGetClipBoundingBox(v22);
      CGContextFillRect(v22, ClipBoundingBox);

    }
    v26 = *(_QWORD *)(v0 + 560);
    v27 = *(_BYTE *)(v0 + 92);
    v28 = *(_BYTE *)(v0 + 91);
    v61.size.height = *(CGFloat *)(v0 + 544);
    v61.size.width = *(CGFloat *)(v0 + 536);
    v29 = *(double *)(v0 + 528);
    v30 = *(double *)(v0 + 520);
    v61.origin.x = v30;
    v61.origin.y = v29;
    v31 = v17 / CGRectGetWidth(v61);
    *(double *)(v0 + 192) = v31;
    *(_QWORD *)(v0 + 200) = 0;
    *(_QWORD *)(v0 + 208) = 0;
    *(double *)(v0 + 216) = v31;
    *(double *)(v0 + 224) = -(v30 * v31);
    *(double *)(v0 + 232) = -(v29 * v31);
    CGContextConcatCTM(v22, (CGAffineTransform *)(v0 + 192));
    swift_beginAccess();
    v32 = *(void **)(v26 + 64);
    *(_QWORD *)(v0 + 616) = v32;
    LOBYTE(v26) = *(_BYTE *)(v26 + 73);
    v33 = v32;
    static CRKeyPath.unique.getter();
    *(_BYTE *)(v0 + 16) = v57;
    *(_BYTE *)(v0 + 17) = v28;
    *(_BYTE *)(v0 + 18) = v27;
    *(_QWORD *)(v0 + 24) = v32;
    *(_BYTE *)(v0 + 32) = 1;
    *(_OWORD *)(v0 + 40) = 0u;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_BYTE *)(v0 + 72) = 1;
    *(_QWORD *)(v0 + 80) = 0;
    *(_WORD *)(v0 + 88) = 0;
    *(_BYTE *)(v0 + 90) = v26;
    v34 = v33;
    CGContextSaveGState(v22);
    type metadata accessor for Image();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    v35 = *(double *)(v0 + 488);
    Image.pdfContentsBounds.getter();
    v37 = v36;
    v39 = v38;
    v58 = v40;
    rect = v41;
    CGAffineTransformMakeRotation(&v59, v35);
    a = v59.a;
    b = v59.b;
    c = v59.c;
    d = v59.d;
    tx = v59.tx;
    ty = v59.ty;
    *(CGFloat *)(v0 + 288) = v59.a;
    *(CGFloat *)(v0 + 296) = b;
    *(CGFloat *)(v0 + 304) = c;
    *(CGFloat *)(v0 + 312) = d;
    *(CGFloat *)(v0 + 320) = tx;
    *(CGFloat *)(v0 + 328) = ty;
    v62.origin.x = v37;
    v62.origin.y = v39;
    v62.size.width = v58;
    v62.size.height = rect;
    v63 = CGRectApplyAffineTransform(v62, (CGAffineTransform *)(v0 + 288));
    CGAffineTransformMakeTranslation(&v59, v37 - v63.origin.x, v39 - v63.origin.y);
    v48 = *(_OWORD *)&v59.a;
    v49 = *(_OWORD *)&v59.c;
    v50 = *(_OWORD *)&v59.tx;
    *(CGFloat *)(v0 + 240) = a;
    *(CGFloat *)(v0 + 248) = b;
    *(CGFloat *)(v0 + 256) = c;
    *(CGFloat *)(v0 + 264) = d;
    *(CGFloat *)(v0 + 272) = tx;
    *(CGFloat *)(v0 + 280) = ty;
    *(_OWORD *)(v0 + 144) = v48;
    *(_OWORD *)(v0 + 160) = v49;
    *(_OWORD *)(v0 + 176) = v50;
    CGAffineTransformConcat(&v59, (CGAffineTransform *)(v0 + 240), (CGAffineTransform *)(v0 + 144));
    v51 = *(_OWORD *)&v59.c;
    v52 = *(_OWORD *)&v59.tx;
    *(_OWORD *)(v0 + 96) = *(_OWORD *)&v59.a;
    *(_OWORD *)(v0 + 112) = v51;
    *(_OWORD *)(v0 + 128) = v52;
    CGContextConcatCTM(v22, (CGAffineTransform *)(v0 + 96));
    v53 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 624) = v53;
    *v53 = v0;
    v53[1] = specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:);
    return Image.renderImage(in:isTopLevel:)((uint64_t)v22, 1);
  }
  else
  {
    v55 = *(_QWORD *)(v0 + 496);

    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 376, &demangling cache variable for type metadata for RendererContext?);
    *(_OWORD *)v55 = 0u;
    *(_OWORD *)(v55 + 16) = 0u;
    *(_QWORD *)(v55 + 32) = 0;
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  char *v3;

  CGContextRestoreGState(*(CGContextRef *)(v0 + 608));
  v3 = (char *)&async function pointer to specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)
     + async function pointer to specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 632) = v1;
  *v1 = v0;
  v1[1] = specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:);
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))v3)(*(_QWORD *)(v0 + 608), *(_QWORD *)(v0 + 512), v0 + 16);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(*(_QWORD *)v0 + 616);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 584);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 576);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 568);
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(void **)(v0 + 616);
  v2 = *(void **)(v0 + 608);
  v3 = *(void **)(v0 + 600);
  v4 = *(void **)(v0 + 592);
  v5 = *(_QWORD *)(v0 + 496);
  v6 = *(_QWORD *)(v0 + 360);
  v7 = *(_QWORD *)(v0 + 368);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 336), v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);

  outlined init with copy of FindResult(v0 + 336, v5);
  __swift_destroy_boxed_opaque_existential_1(v0 + 336);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized PaperDocument.init<A>(url:in:assetManager:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v35 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperDocument?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PaperKitPDFDocument, CRAsset)?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (void **)((char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for CRAsset();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v34 - v22;
  type metadata accessor for PaperKitPDFDocument();
  static PaperKitPDFDocument._load(_:assetManager:)(a1, v14);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PaperKitPDFDocument, CRAsset));
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v14, 1, v24) == 1)
  {
    swift_release();
    swift_release();
    v25 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(a1, v25);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, &demangling cache variable for type metadata for (PaperKitPDFDocument, CRAsset)?);
LABEL_5:
    v30 = type metadata accessor for PaperDocument(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(a4, 1, 1, v30);
  }
  v34 = a4;
  v26 = *v14;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v23, (char *)v14 + *(int *)(v24 + 48), v15);
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v23, v15);
  specialized PaperDocument.init<A>(pdfDocument:asset:in:assetManager:useProxyPages:)(v26, (uint64_t)v19, v35, a3, 0, (uint64_t)v10);
  v27 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 8))(a1, v27);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v23, v15);
  v28 = type metadata accessor for PaperDocument(0);
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v10, 1, v28))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, &demangling cache variable for type metadata for PaperDocument?);
    a4 = v34;
    goto LABEL_5;
  }
  v32 = (uint64_t)v10;
  v33 = v34;
  outlined init with take of PKStrokeStruct(v32, v34, type metadata accessor for PaperDocument);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(v33, 0, 1, v28);
}

char *specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

uint64_t specialized static AnnotationImporter.importElement<A>(_:from:in:id:scale:mediaBox:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, CGFloat a6@<D0>, double a7@<D2>, double a8@<D4>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  double b;
  double a;
  CGFloat d;
  CGFloat c;
  CGFloat ty;
  CGFloat tx;
  char a_low;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  void *v81;
  id v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  id v87;
  void (*v88)(CGAffineTransform *, _QWORD);
  double *v89;
  void (*v90)(CGAffineTransform *, _QWORD);
  CGFloat *v91;
  CGFloat *v92;
  CGFloat v93;
  CGFloat v94;
  CGFloat v95;
  CGFloat v96;
  CGFloat MinX;
  double v98;
  CGFloat Width;
  CGFloat Height;
  double v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t (*v104)();
  uint64_t v105;
  uint64_t v106;
  void *v107;
  id v108;
  id v109;
  void *v110;
  uint64_t v111;
  void (*v112)(CGAffineTransform *, _QWORD);
  double *v113;
  void (*v114)(CGAffineTransform *, _QWORD);
  CGFloat *v115;
  CGFloat *v116;
  CGFloat v117;
  CGFloat v118;
  CGFloat v119;
  CGFloat v120;
  CGFloat v121;
  double v122;
  CGFloat v123;
  CGFloat v124;
  double v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  id v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  id v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  CGFloat v141;
  CGFloat v142;
  CGFloat v143;
  CGFloat v144;
  void (*v145)(CGAffineTransform *, _QWORD);
  CGRect *v146;
  void (*v147)(CGAffineTransform *, _QWORD);
  CGFloat *v148;
  CGFloat *v149;
  CGFloat v150;
  CGFloat v151;
  CGFloat v152;
  CGFloat v153;
  CGFloat v154;
  double v155;
  CGFloat v156;
  CGFloat v157;
  uint64_t v158;
  uint64_t v159;
  void (*v160)(CGAffineTransform *, _QWORD);
  CGFloat *v161;
  CGFloat *v162;
  CGFloat v163;
  CGFloat v164;
  CGFloat v165;
  CGFloat v166;
  CGFloat v167;
  double v168;
  CGFloat v169;
  CGFloat v170;
  void (*v171)(CGAffineTransform *, _QWORD);
  double *v172;
  void *v173;
  id v174;
  double v175;
  CGFloat v176;
  double v177;
  CGFloat v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  id v182;
  char *v183;
  CGFloat v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  CGAffineTransform v211;
  CGAffineTransform v212;
  CGAffineTransform v213;
  CGAffineTransform v214;
  CGAffineTransform t1;
  CGRect v216;
  CGRect v217;
  CGRect v218;
  CGRect v219;
  CGRect v220;
  CGRect v221;
  CGRect v222;
  CGRect v223;
  CGRect v224;
  CGRect v225;
  CGRect v226;
  CGRect v227;
  CGRect v228;
  CGRect v229;
  CGRect v230;
  CGRect v231;
  CGRect v232;
  CGRect v233;
  CGRect v234;
  CGRect v235;
  CGRect v236;

  v207 = a4;
  v208 = a3;
  v210 = a5;
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v196 = (char *)&v187 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  MEMORY[0x1E0C80A78](v16, v17);
  v195 = (char *)&v187 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Signature?);
  MEMORY[0x1E0C80A78](v19, v20);
  v199 = (uint64_t)&v187 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = type metadata accessor for Signature();
  v198 = *(_QWORD *)(v200 - 8);
  MEMORY[0x1E0C80A78](v200, v22);
  v188 = (uint64_t)&v187 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v189 = (uint64_t)&v187 - v26;
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v192 = *(_QWORD *)(v27 - 8);
  v193 = v27;
  MEMORY[0x1E0C80A78](v27, v28);
  v194 = (char *)&v187 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for PKDrawing();
  v201 = *(_QWORD *)(v30 - 8);
  v202 = v30;
  MEMORY[0x1E0C80A78](v30, v31);
  v190 = (char *)&v187 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v191 = (char *)&v187 - v35;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v36, v37);
  v39 = (char *)&v187 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40, v41);
  v43 = (char *)&v187 - v42;
  v44 = type metadata accessor for CRKeyPath();
  v204 = *(_QWORD *)(v44 - 8);
  v205 = v44;
  MEMORY[0x1E0C80A78](v44, v45);
  v206 = (char *)&v187 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v47, v48);
  v50 = (char *)&v187 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v51, v52);
  v54 = (char *)&v187 - v53;
  v209 = type metadata accessor for Shape();
  v55 = *(_QWORD *)(v209 - 8);
  MEMORY[0x1E0C80A78](v209, v56);
  v197 = (uint64_t)&v187 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v58, v59);
  v61 = (char *)&v187 - v60;
  MEMORY[0x1E0C80A78](v62, v63);
  v203 = (uint64_t)&v187 - v64;
  MEMORY[0x1E0C80A78](v65, v66);
  v68 = (char *)&v187 - v67;
  CGAffineTransformMakeScale(&t1, a6, a6);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  tx = t1.tx;
  ty = t1.ty;
  v214 = t1;
  if (!a2)
  {
    memset(&t1, 0, 32);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&t1, &demangling cache variable for type metadata for Any?);
    goto LABEL_23;
  }
  if (objc_msgSend(a2, sel_valueForAnnotationKey_, *MEMORY[0x1E0CD0DF0]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(&v213, 0, 32);
  }
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v213, (uint64_t)&t1, &demangling cache variable for type metadata for Any?);
  if (*(_QWORD *)&t1.d)
  {
    if (swift_dynamicCast())
      a_low = LOBYTE(v213.a);
    else
      a_low = 0;
    if ((a_low & 2) == 0)
    {
      if ((a_low & 0x40) != 0)
      {
        v76 = 2;
        if ((a_low & 0x80) == 0)
          goto LABEL_22;
      }
      else
      {
        v76 = 0;
        if ((a_low & 0x80) == 0)
          goto LABEL_22;
      }
      goto LABEL_21;
    }
    if ((a_low & 0x40) == 0)
    {
      v76 = 1;
      if ((a_low & 0x80) == 0)
        goto LABEL_22;
      goto LABEL_21;
    }
    v76 = 3;
    if (a_low < 0)
LABEL_21:
      v76 |= 4uLL;
  }
  else
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&t1, &demangling cache variable for type metadata for Any?);
    v76 = 0;
  }
LABEL_22:
  a2 = (void *)(v76 | 0x70);
LABEL_23:
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v77 = type metadata accessor for AnnotationImporter.ImportedElement();
    v78 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56);
    v79 = v210;
LABEL_49:
    v127 = 1;
    return v78(v79, v127, 1, v77);
  }
  v187 = (unint64_t)a2;
  objc_opt_self();
  v80 = swift_dynamicCastObjCClass();
  if (v80)
  {
    v81 = (void *)v80;
    v82 = a1;
    static AnnotationImporter.translateDoodleAnnotation(_:)(v81, (uint64_t)v54);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v54, 1, v209) == 1)
    {

      v83 = &demangling cache variable for type metadata for Shape?;
      v84 = (uint64_t)v54;
LABEL_48:
      outlined destroy of StocksKitCurrencyCache.Provider?(v84, v83);
      v134 = v210;
      v77 = type metadata accessor for AnnotationImporter.ImportedElement();
      v78 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56);
      v79 = v134;
      goto LABEL_49;
    }
    outlined init with take of PKStrokeStruct((uint64_t)v54, (uint64_t)v68, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    specialized CanvasElement.coordinateSpace.getter(&v213);
    t1 = v213;
    v212.a = a;
    v212.b = b;
    v212.c = c;
    v212.d = d;
    v212.tx = tx;
    v212.ty = ty;
    CGAffineTransformConcat(&v211, &t1, &v212);
    t1 = v211;
    specialized CanvasElement.coordinateSpace.setter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    v88 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
    *v89 = sqrt(a * a + b * b) * *v89;
    v88(&v212, 0);
    CRAttributedString<>.apply(_:)(&v214.a);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    v90 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
    v92 = v91;
    v93 = *v91;
    v94 = v91[1];
    v95 = v91[2];
    v96 = v91[3];
    v216.origin.x = *v91;
    v216.origin.y = v94;
    v216.size.width = v95;
    v216.size.height = v96;
    MinX = CGRectGetMinX(v216);
    v217.origin.x = v93;
    v217.origin.y = v94;
    v217.size.width = v95;
    v217.size.height = v96;
    v98 = a7 + a7 + a8 - CGRectGetMaxY(v217);
    v218.origin.x = v93;
    v218.origin.y = v94;
    v218.size.width = v95;
    v218.size.height = v96;
    Width = CGRectGetWidth(v218);
    v219.origin.x = v93;
    v219.origin.y = v94;
    v219.size.width = v95;
    v219.size.height = v96;
    Height = CGRectGetHeight(v219);
    *v92 = MinX;
    v92[1] = v98;
    v92[2] = Width;
    v92[3] = Height;
    v90(&v212, 0);
    CRRegister.value.getter();
    v101 = v212.a;
    CRRegister.value.getter();
    if (fabs(v101 + v212.a) > 0.01)
    {
      v212.a = -v101;
      CRRegister.value.setter();
    }
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    CRRegister.wrappedValue.getter();
    *(_QWORD *)&v211.a = *(_QWORD *)&v212.a | v187;
    CRRegister.wrappedValue.setter();
    outlined init with copy of PKStrokeProperties((uint64_t)v68, v203, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    (*(void (**)(char *, uint64_t, uint64_t))(v204 + 16))(v206, v207, v205);
    lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
    swift_retain();
    v102 = v210;
    SharedTagged_9.init<A>(_:_:id:)();

    v103 = (uint64_t)v68;
    v104 = type metadata accessor for Shape;
LABEL_34:
    outlined destroy of PKStrokeProperties(v103, (uint64_t (*)(_QWORD))v104);
    v105 = type metadata accessor for AnnotationImporter.ImportedElement();
    swift_storeEnumTagMultiPayload();
    v78 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 56);
    v79 = v102;
    goto LABEL_41;
  }
  objc_opt_self();
  v85 = swift_dynamicCastObjCClass();
  if (v85)
  {
    v86 = (void *)v85;
    v87 = a1;
    static AnnotationImporter.translateStrokedAnnotation(_:)(v86, (uint64_t)v50);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v50, 1, v209) == 1)
    {

      v83 = &demangling cache variable for type metadata for Shape?;
      v84 = (uint64_t)v50;
      goto LABEL_48;
    }
    outlined init with take of PKStrokeStruct((uint64_t)v50, (uint64_t)v61, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    specialized CanvasElement.coordinateSpace.getter(&v213);
    t1 = v213;
    v212.a = a;
    v212.b = b;
    v212.c = c;
    v212.d = d;
    v212.tx = tx;
    v212.ty = ty;
    CGAffineTransformConcat(&v211, &t1, &v212);
    t1 = v211;
    specialized CanvasElement.coordinateSpace.setter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    v112 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
    *v113 = sqrt(a * a + b * b) * *v113;
    v112(&v212, 0);
    CRAttributedString<>.apply(_:)(&v214.a);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    v114 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
    v116 = v115;
    v117 = *v115;
    v118 = v115[1];
    v119 = v115[2];
    v120 = v115[3];
    v220.origin.x = *v115;
    v220.origin.y = v118;
    v220.size.width = v119;
    v220.size.height = v120;
    v121 = CGRectGetMinX(v220);
    v221.origin.x = v117;
    v221.origin.y = v118;
    v221.size.width = v119;
    v221.size.height = v120;
    v122 = a7 + a7 + a8 - CGRectGetMaxY(v221);
    v222.origin.x = v117;
    v222.origin.y = v118;
    v222.size.width = v119;
    v222.size.height = v120;
    v123 = CGRectGetWidth(v222);
    v223.origin.x = v117;
    v223.origin.y = v118;
    v223.size.width = v119;
    v223.size.height = v120;
    v124 = CGRectGetHeight(v223);
    *v116 = v121;
    v116[1] = v122;
    v116[2] = v123;
    v116[3] = v124;
    v114(&v212, 0);
    CRRegister.value.getter();
    v125 = v212.a;
    CRRegister.value.getter();
    if (fabs(v125 + v212.a) > 0.01)
    {
      v212.a = -v125;
      CRRegister.value.setter();
    }
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    CRRegister.wrappedValue.getter();
    *(_QWORD *)&v211.a = *(_QWORD *)&v212.a | v187;
    CRRegister.wrappedValue.setter();
    outlined init with copy of PKStrokeProperties((uint64_t)v61, v203, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    (*(void (**)(char *, uint64_t, uint64_t))(v204 + 16))(v206, v207, v205);
    lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
    swift_retain();
    v126 = v210;
    SharedTagged_9.init<A>(_:_:id:)();

    outlined destroy of PKStrokeProperties((uint64_t)v61, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    v105 = type metadata accessor for AnnotationImporter.ImportedElement();
    swift_storeEnumTagMultiPayload();
    v78 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 56);
    v79 = v126;
  }
  else
  {
    objc_opt_self();
    v106 = swift_dynamicCastObjCClass();
    if (!v106)
    {
      objc_opt_self();
      v128 = swift_dynamicCastObjCClass();
      if (!v128)
      {
        lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
        lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
        lazy protocol witness table accessor for type Line and conformance Line();
        lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
        lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
        lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
        lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
        lazy protocol witness table accessor for type Star and conformance Star();
        lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
        v137 = v195;
        TaggedValue_9.init(_:)();
        t1.a = 0.0;
        v213.a = 0.0;
        v138 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
        v139 = (uint64_t)v196;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v138 - 8) + 56))(v196, 1, 1, v138);
        v212.a = 0.0;
        v140 = v203;
        Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v137, (uint64_t *)&t1, (uint64_t *)&v213, v139, (uint64_t *)&v212, v203, 0.0, 0.0, 0.0, 0.0, 5.0);
        objc_msgSend(a1, sel_drawingBounds);
        t1.a = v141;
        t1.b = v142;
        t1.c = v143;
        t1.d = v144;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
        CRRegister.wrappedValue.setter();
        v145 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
        v224 = *v146;
        t1.a = a;
        t1.b = b;
        t1.c = c;
        t1.d = d;
        t1.tx = tx;
        t1.ty = ty;
        *v146 = CGRectApplyAffineTransform(v224, &t1);
        v145(&v213, 0);
        v147 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
        v149 = v148;
        v150 = *v148;
        v151 = v148[1];
        v152 = v148[2];
        v153 = v148[3];
        v225.origin.x = *v148;
        v225.origin.y = v151;
        v225.size.width = v152;
        v225.size.height = v153;
        v154 = CGRectGetMinX(v225);
        v226.origin.x = v150;
        v226.origin.y = v151;
        v226.size.width = v152;
        v226.size.height = v153;
        v155 = a7 + a7 + a8 - CGRectGetMaxY(v226);
        v227.origin.x = v150;
        v227.origin.y = v151;
        v227.size.width = v152;
        v227.size.height = v153;
        v156 = CGRectGetWidth(v227);
        v228.origin.x = v150;
        v228.origin.y = v151;
        v228.size.width = v152;
        v228.size.height = v153;
        v157 = CGRectGetHeight(v228);
        *v149 = v154;
        v149[1] = v155;
        v149[2] = v156;
        v149[3] = v157;
        v147(&t1, 0);
        type metadata accessor for ShapeSecondaryProperties();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
        CRRegister.wrappedValue.getter();
        *(_QWORD *)&v213.a = *(_QWORD *)&t1.a | v187;
        CRRegister.wrappedValue.setter();
        outlined init with copy of PKStrokeProperties(v140, v197, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        (*(void (**)(char *, uint64_t, uint64_t))(v204 + 16))(v206, v207, v205);
        lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
        swift_retain();
        v158 = v210;
        SharedTagged_9.init<A>(_:_:id:)();
        outlined destroy of PKStrokeProperties(v140, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        v105 = type metadata accessor for AnnotationImporter.ImportedElement();
        swift_storeEnumTagMultiPayload();
        v78 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 56);
        v79 = v158;
        goto LABEL_41;
      }
      v129 = (void *)v128;
      v130 = a1;
      v131 = v199;
      static AnnotationImporter.translateSignatureAnnotation(_:)(v129, v199);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v198 + 48))(v131, 1, v200) == 1)
      {

        v83 = (uint64_t *)&demangling cache variable for type metadata for Signature?;
        v84 = v131;
        goto LABEL_48;
      }
      v159 = v189;
      outlined init with take of PKStrokeStruct(v131, v189, (uint64_t (*)(_QWORD))type metadata accessor for Signature);
      Signature.apply(_:)(&v214);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
      v160 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
      v162 = v161;
      v163 = *v161;
      v164 = v161[1];
      v165 = v161[2];
      v166 = v161[3];
      v229.origin.x = *v161;
      v229.origin.y = v164;
      v229.size.width = v165;
      v229.size.height = v166;
      v167 = CGRectGetMinX(v229);
      v230.origin.x = v163;
      v230.origin.y = v164;
      v230.size.width = v165;
      v230.size.height = v166;
      v168 = a7 + a7 + a8 - CGRectGetMaxY(v230);
      v231.origin.x = v163;
      v231.origin.y = v164;
      v231.size.width = v165;
      v231.size.height = v166;
      v169 = CGRectGetWidth(v231);
      v232.origin.x = v163;
      v232.origin.y = v164;
      v232.size.width = v165;
      v232.size.height = v166;
      v170 = CGRectGetHeight(v232);
      *v162 = v167;
      v162[1] = v168;
      v162[2] = v169;
      v162[3] = v170;
      v160(&t1, 0);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
      v171 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
      *v172 = -*v172;
      v171(&t1, 0);
      outlined init with copy of PKStrokeProperties(v159, v188, (uint64_t (*)(_QWORD))type metadata accessor for Signature);
      (*(void (**)(char *, uint64_t, uint64_t))(v204 + 16))(v206, v207, v205);
      lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
      swift_retain();
      v102 = v210;
      SharedTagged_9.init<A>(_:_:id:)();

      v103 = v159;
      v104 = type metadata accessor for Signature;
      goto LABEL_34;
    }
    v107 = (void *)v106;
    v108 = a1;
    v109 = objc_msgSend(v107, sel_drawing);
    if (v109)
    {
      v110 = v109;
      static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

      v111 = 0;
    }
    else
    {
      v111 = 1;
    }
    v133 = v201;
    v132 = v202;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v201 + 56))(v39, v111, 1, v202);
    outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v39, (uint64_t)v43, &demangling cache variable for type metadata for PKDrawing?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v133 + 48))(v43, 1, v132) == 1)
    {

      v83 = &demangling cache variable for type metadata for PKDrawing?;
      v84 = (uint64_t)v43;
      goto LABEL_48;
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKDrawing);
    swift_dynamicCast();
    v136 = *(id *)&t1.a;
    v173 = (void *)specialized PKDrawingCoherence.__allocating_init(concreteDrawing:)(v136);

    v174 = v173;
    objc_msgSend(v107, sel_rectangle);
    v175 = CGRectGetWidth(v233);
    objc_msgSend(v174, sel_bounds);
    v176 = v175 / CGRectGetWidth(v234);
    objc_msgSend(v107, sel_rectangle);
    v177 = CGRectGetHeight(v235);
    objc_msgSend(v174, sel_bounds);
    v178 = CGRectGetHeight(v236);
    CGAffineTransformMakeScale(&t1, v176, v177 / v178);
    v179 = *(_OWORD *)&t1.a;
    v180 = *(_OWORD *)&t1.c;
    v181 = *(_OWORD *)&t1.tx;
    t1.a = a;
    t1.b = b;
    t1.c = c;
    t1.d = d;
    t1.tx = tx;
    t1.ty = ty;
    *(_OWORD *)&v213.a = v179;
    *(_OWORD *)&v213.c = v180;
    *(_OWORD *)&v213.tx = v181;
    CGAffineTransformConcat(&v212, &t1, &v213);
    t1 = v212;
    v182 = objc_msgSend(v174, sel_drawingByApplyingTransform_, &t1);

    v183 = v190;
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v133 + 32))(v191, v183, v132);
    type metadata accessor for PKDrawingCoherence(0);
    swift_dynamicCast();
    v184 = t1.a;
    v185 = *(_QWORD *)&t1.a + OBJC_IVAR___PKDrawingCoherence_model;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v192 + 16))(v194, v185, v193);
    type metadata accessor for PKDrawingStruct();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
    swift_retain();
    v186 = v210;
    Ref.init<A>(_:_:)();

    v105 = type metadata accessor for AnnotationImporter.ImportedElement();
    swift_storeEnumTagMultiPayload();
    v78 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v105 - 8) + 56);
    v79 = v186;
  }
LABEL_41:
  v127 = 0;
  v77 = v105;
  return v78(v79, v127, 1, v77);
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  double b;
  double a;
  CGFloat d;
  CGFloat c;
  CGFloat ty;
  CGFloat tx;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  void *v80;
  id v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  id v86;
  void (*v87)(CGAffineTransform *, _QWORD);
  double *v88;
  void (*v89)(CGAffineTransform *, _QWORD);
  CGFloat *v90;
  CGFloat *v91;
  CGFloat v92;
  CGFloat v93;
  CGFloat v94;
  CGFloat v95;
  CGFloat MinX;
  double v97;
  CGFloat Width;
  CGFloat Height;
  double v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t (*v103)();
  uint64_t v104;
  uint64_t v105;
  void *v106;
  id v107;
  id v108;
  void *v109;
  uint64_t v110;
  void (*v111)(CGAffineTransform *, _QWORD);
  double *v112;
  void (*v113)(CGAffineTransform *, _QWORD);
  CGFloat *v114;
  CGFloat *v115;
  CGFloat v116;
  CGFloat v117;
  CGFloat v118;
  CGFloat v119;
  CGFloat v120;
  double v121;
  CGFloat v122;
  CGFloat v123;
  double v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  id v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  CGFloat v140;
  CGFloat v141;
  CGFloat v142;
  CGFloat v143;
  void (*v144)(CGAffineTransform *, _QWORD);
  CGRect *v145;
  void (*v146)(CGAffineTransform *, _QWORD);
  CGFloat *v147;
  CGFloat *v148;
  CGFloat v149;
  CGFloat v150;
  CGFloat v151;
  CGFloat v152;
  CGFloat v153;
  double v154;
  CGFloat v155;
  CGFloat v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(CGAffineTransform *, _QWORD);
  CGFloat *v160;
  CGFloat *v161;
  CGFloat v162;
  CGFloat v163;
  CGFloat v164;
  CGFloat v165;
  CGFloat v166;
  double v167;
  CGFloat v168;
  CGFloat v169;
  void (*v170)(CGAffineTransform *, _QWORD);
  double *v171;
  void *v172;
  id v173;
  double v174;
  CGFloat v175;
  double v176;
  CGFloat v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  id v181;
  char *v182;
  CGFloat v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  CGAffineTransform v210;
  CGAffineTransform v211;
  CGAffineTransform v212;
  CGAffineTransform v213;
  CGAffineTransform t1;
  CGRect v215;
  CGRect v216;
  CGRect v217;
  CGRect v218;
  CGRect v219;
  CGRect v220;
  CGRect v221;
  CGRect v222;
  CGRect v223;
  CGRect v224;
  CGRect v225;
  CGRect v226;
  CGRect v227;
  CGRect v228;
  CGRect v229;
  CGRect v230;
  CGRect v231;
  CGRect v232;
  CGRect v233;
  CGRect v234;
  CGRect v235;

  v206 = a4;
  v207 = a3;
  v209 = a5;
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>?);
  MEMORY[0x1E0C80A78](v13, v14);
  v195 = (char *)&v186 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_9<Rectangle, Ellipse, Line, BezierPath, CalloutBubble, RoundedRect, RegularPolygon, Star, ArrowShape>);
  MEMORY[0x1E0C80A78](v16, v17);
  v194 = (char *)&v186 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Signature?);
  MEMORY[0x1E0C80A78](v19, v20);
  v198 = (uint64_t)&v186 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = type metadata accessor for Signature();
  v197 = *(_QWORD *)(v199 - 8);
  MEMORY[0x1E0C80A78](v199, v22);
  v187 = (uint64_t)&v186 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v188 = (uint64_t)&v186 - v26;
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v191 = *(_QWORD *)(v27 - 8);
  v192 = v27;
  MEMORY[0x1E0C80A78](v27, v28);
  v193 = (char *)&v186 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for PKDrawing();
  v200 = *(_QWORD *)(v30 - 8);
  v201 = v30;
  MEMORY[0x1E0C80A78](v30, v31);
  v189 = (char *)&v186 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v190 = (char *)&v186 - v35;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  MEMORY[0x1E0C80A78](v36, v37);
  v39 = (char *)&v186 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40, v41);
  v43 = (char *)&v186 - v42;
  v44 = type metadata accessor for CRKeyPath();
  v203 = *(_QWORD *)(v44 - 8);
  v204 = v44;
  MEMORY[0x1E0C80A78](v44, v45);
  v205 = (char *)&v186 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Shape?);
  MEMORY[0x1E0C80A78](v47, v48);
  v50 = (char *)&v186 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v51, v52);
  v54 = (char *)&v186 - v53;
  v208 = type metadata accessor for Shape();
  v55 = *(_QWORD *)(v208 - 8);
  MEMORY[0x1E0C80A78](v208, v56);
  v196 = (uint64_t)&v186 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v58, v59);
  v61 = (char *)&v186 - v60;
  MEMORY[0x1E0C80A78](v62, v63);
  v202 = (uint64_t)&v186 - v64;
  MEMORY[0x1E0C80A78](v65, v66);
  v68 = (char *)&v186 - v67;
  CGAffineTransformMakeScale(&t1, a6, a6);
  a = t1.a;
  b = t1.b;
  c = t1.c;
  d = t1.d;
  tx = t1.tx;
  ty = t1.ty;
  v213 = t1;
  if (!a2)
  {
    memset(&t1, 0, 32);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&t1, &demangling cache variable for type metadata for Any?);
    goto LABEL_15;
  }
  if (objc_msgSend(a2, sel_valueForAnnotationKey_, *MEMORY[0x1E0CD0DF0]))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(&v212, 0, 32);
  }
  outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)&v212, (uint64_t)&t1, &demangling cache variable for type metadata for Any?);
  if (!*(_QWORD *)&t1.d)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)&t1, &demangling cache variable for type metadata for Any?);
    goto LABEL_13;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    v75 = 0;
    goto LABEL_14;
  }
  if ((LOBYTE(v212.a) & 2) != 0)
  {
    if ((LOBYTE(v212.a) & 0x40) != 0)
    {
      v75 = 3;
      if ((LOBYTE(v212.a) & 0x80) != 0)
LABEL_36:
        v75 |= 4uLL;
    }
    else
    {
      v75 = 1;
      if ((LOBYTE(v212.a) & 0x80) != 0)
        goto LABEL_36;
    }
  }
  else if ((LOBYTE(v212.a) & 0x40) != 0)
  {
    v75 = 2;
    if ((LOBYTE(v212.a) & 0x80) != 0)
      goto LABEL_36;
  }
  else
  {
    v75 = 0;
    if ((LOBYTE(v212.a) & 0x80) != 0)
      goto LABEL_36;
  }
LABEL_14:
  a2 = (void *)(v75 | 0x70);
LABEL_15:
  objc_opt_self();
  if (swift_dynamicCastObjCClass())
  {
    v76 = type metadata accessor for AnnotationImporter.ImportedElement();
    v77 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56);
    v78 = v209;
LABEL_48:
    v126 = 1;
    return v77(v78, v126, 1, v76);
  }
  v186 = (unint64_t)a2;
  objc_opt_self();
  v79 = swift_dynamicCastObjCClass();
  if (v79)
  {
    v80 = (void *)v79;
    v81 = a1;
    static AnnotationImporter.translateDoodleAnnotation(_:)(v80, (uint64_t)v54);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v54, 1, v208) == 1)
    {

      v82 = &demangling cache variable for type metadata for Shape?;
      v83 = (uint64_t)v54;
LABEL_47:
      outlined destroy of StocksKitCurrencyCache.Provider?(v83, v82);
      v133 = v209;
      v76 = type metadata accessor for AnnotationImporter.ImportedElement();
      v77 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56);
      v78 = v133;
      goto LABEL_48;
    }
    outlined init with take of PKStrokeStruct((uint64_t)v54, (uint64_t)v68, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    specialized CanvasElement.coordinateSpace.getter(&v212);
    t1 = v212;
    v211.a = a;
    v211.b = b;
    v211.c = c;
    v211.d = d;
    v211.tx = tx;
    v211.ty = ty;
    CGAffineTransformConcat(&v210, &t1, &v211);
    t1 = v210;
    specialized CanvasElement.coordinateSpace.setter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    v87 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
    *v88 = sqrt(a * a + b * b) * *v88;
    v87(&v211, 0);
    CRAttributedString<>.apply(_:)(&v213.a);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    v89 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
    v91 = v90;
    v92 = *v90;
    v93 = v90[1];
    v94 = v90[2];
    v95 = v90[3];
    v215.origin.x = *v90;
    v215.origin.y = v93;
    v215.size.width = v94;
    v215.size.height = v95;
    MinX = CGRectGetMinX(v215);
    v216.origin.x = v92;
    v216.origin.y = v93;
    v216.size.width = v94;
    v216.size.height = v95;
    v97 = a7 + a7 + a8 - CGRectGetMaxY(v216);
    v217.origin.x = v92;
    v217.origin.y = v93;
    v217.size.width = v94;
    v217.size.height = v95;
    Width = CGRectGetWidth(v217);
    v218.origin.x = v92;
    v218.origin.y = v93;
    v218.size.width = v94;
    v218.size.height = v95;
    Height = CGRectGetHeight(v218);
    *v91 = MinX;
    v91[1] = v97;
    v91[2] = Width;
    v91[3] = Height;
    v89(&v211, 0);
    CRRegister.value.getter();
    v100 = v211.a;
    CRRegister.value.getter();
    if (fabs(v100 + v211.a) > 0.01)
    {
      v211.a = -v100;
      CRRegister.value.setter();
    }
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    CRRegister.wrappedValue.getter();
    *(_QWORD *)&v210.a = *(_QWORD *)&v211.a | v186;
    CRRegister.wrappedValue.setter();
    outlined init with copy of PKStrokeProperties((uint64_t)v68, v202, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    (*(void (**)(char *, uint64_t, uint64_t))(v203 + 16))(v205, v206, v204);
    lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
    swift_retain();
    v101 = v209;
    SharedTagged_9.init<A>(_:_:id:)();

    v102 = (uint64_t)v68;
    v103 = type metadata accessor for Shape;
LABEL_26:
    outlined destroy of PKStrokeProperties(v102, (uint64_t (*)(_QWORD))v103);
    v104 = type metadata accessor for AnnotationImporter.ImportedElement();
    swift_storeEnumTagMultiPayload();
    v77 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 56);
    v78 = v101;
    goto LABEL_40;
  }
  objc_opt_self();
  v84 = swift_dynamicCastObjCClass();
  if (v84)
  {
    v85 = (void *)v84;
    v86 = a1;
    static AnnotationImporter.translateStrokedAnnotation(_:)(v85, (uint64_t)v50);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v50, 1, v208) == 1)
    {

      v82 = &demangling cache variable for type metadata for Shape?;
      v83 = (uint64_t)v50;
      goto LABEL_47;
    }
    outlined init with take of PKStrokeStruct((uint64_t)v50, (uint64_t)v61, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    specialized CanvasElement.coordinateSpace.getter(&v212);
    t1 = v212;
    v211.a = a;
    v211.b = b;
    v211.c = c;
    v211.d = d;
    v211.tx = tx;
    v211.ty = ty;
    CGAffineTransformConcat(&v210, &t1, &v211);
    t1 = v210;
    specialized CanvasElement.coordinateSpace.setter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    v111 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
    *v112 = sqrt(a * a + b * b) * *v112;
    v111(&v211, 0);
    CRAttributedString<>.apply(_:)(&v213.a);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    v113 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
    v115 = v114;
    v116 = *v114;
    v117 = v114[1];
    v118 = v114[2];
    v119 = v114[3];
    v219.origin.x = *v114;
    v219.origin.y = v117;
    v219.size.width = v118;
    v219.size.height = v119;
    v120 = CGRectGetMinX(v219);
    v220.origin.x = v116;
    v220.origin.y = v117;
    v220.size.width = v118;
    v220.size.height = v119;
    v121 = a7 + a7 + a8 - CGRectGetMaxY(v220);
    v221.origin.x = v116;
    v221.origin.y = v117;
    v221.size.width = v118;
    v221.size.height = v119;
    v122 = CGRectGetWidth(v221);
    v222.origin.x = v116;
    v222.origin.y = v117;
    v222.size.width = v118;
    v222.size.height = v119;
    v123 = CGRectGetHeight(v222);
    *v115 = v120;
    v115[1] = v121;
    v115[2] = v122;
    v115[3] = v123;
    v113(&v211, 0);
    CRRegister.value.getter();
    v124 = v211.a;
    CRRegister.value.getter();
    if (fabs(v124 + v211.a) > 0.01)
    {
      v211.a = -v124;
      CRRegister.value.setter();
    }
    type metadata accessor for ShapeSecondaryProperties();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
    CRRegister.wrappedValue.getter();
    *(_QWORD *)&v210.a = *(_QWORD *)&v211.a | v186;
    CRRegister.wrappedValue.setter();
    outlined init with copy of PKStrokeProperties((uint64_t)v61, v202, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    (*(void (**)(char *, uint64_t, uint64_t))(v203 + 16))(v205, v206, v204);
    lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
    swift_retain();
    v125 = v209;
    SharedTagged_9.init<A>(_:_:id:)();

    outlined destroy of PKStrokeProperties((uint64_t)v61, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
    v104 = type metadata accessor for AnnotationImporter.ImportedElement();
    swift_storeEnumTagMultiPayload();
    v77 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 56);
    v78 = v125;
  }
  else
  {
    objc_opt_self();
    v105 = swift_dynamicCastObjCClass();
    if (!v105)
    {
      objc_opt_self();
      v127 = swift_dynamicCastObjCClass();
      if (!v127)
      {
        lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
        lazy protocol witness table accessor for type Ellipse and conformance Ellipse();
        lazy protocol witness table accessor for type Line and conformance Line();
        lazy protocol witness table accessor for type BezierPath and conformance BezierPath();
        lazy protocol witness table accessor for type CalloutBubble and conformance CalloutBubble();
        lazy protocol witness table accessor for type RoundedRect and conformance RoundedRect();
        lazy protocol witness table accessor for type RegularPolygon and conformance RegularPolygon();
        lazy protocol witness table accessor for type Star and conformance Star();
        lazy protocol witness table accessor for type ArrowShape and conformance ArrowShape();
        v136 = v194;
        TaggedValue_9.init(_:)();
        t1.a = 0.0;
        v212.a = 0.0;
        v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAttributedString<TextAttributeScope>);
        v138 = (uint64_t)v195;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v137 - 8) + 56))(v195, 1, 1, v137);
        v211.a = 0.0;
        v139 = v202;
        Shape.init(frame:type:strokeWidth:strokeColor:fillColor:text:textResizeBehavior:)(v136, (uint64_t *)&t1, (uint64_t *)&v212, v138, (uint64_t *)&v211, v202, 0.0, 0.0, 0.0, 0.0, 5.0);
        objc_msgSend(a1, sel_drawingBounds);
        t1.a = v140;
        t1.b = v141;
        t1.c = v142;
        t1.d = v143;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
        CRRegister.wrappedValue.setter();
        v144 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
        v223 = *v145;
        t1.a = a;
        t1.b = b;
        t1.c = c;
        t1.d = d;
        t1.tx = tx;
        t1.ty = ty;
        *v145 = CGRectApplyAffineTransform(v223, &t1);
        v144(&v212, 0);
        v146 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
        v148 = v147;
        v149 = *v147;
        v150 = v147[1];
        v151 = v147[2];
        v152 = v147[3];
        v224.origin.x = *v147;
        v224.origin.y = v150;
        v224.size.width = v151;
        v224.size.height = v152;
        v153 = CGRectGetMinX(v224);
        v225.origin.x = v149;
        v225.origin.y = v150;
        v225.size.width = v151;
        v225.size.height = v152;
        v154 = a7 + a7 + a8 - CGRectGetMaxY(v225);
        v226.origin.x = v149;
        v226.origin.y = v150;
        v226.size.width = v151;
        v226.size.height = v152;
        v155 = CGRectGetWidth(v226);
        v227.origin.x = v149;
        v227.origin.y = v150;
        v227.size.width = v151;
        v227.size.height = v152;
        v156 = CGRectGetHeight(v227);
        *v148 = v153;
        v148[1] = v154;
        v148[2] = v155;
        v148[3] = v156;
        v146(&t1, 0);
        type metadata accessor for ShapeSecondaryProperties();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
        CRRegister.wrappedValue.getter();
        *(_QWORD *)&v212.a = *(_QWORD *)&t1.a | v186;
        CRRegister.wrappedValue.setter();
        outlined init with copy of PKStrokeProperties(v139, v196, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        (*(void (**)(char *, uint64_t, uint64_t))(v203 + 16))(v205, v206, v204);
        lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
        swift_retain();
        v157 = v209;
        SharedTagged_9.init<A>(_:_:id:)();
        outlined destroy of PKStrokeProperties(v139, (uint64_t (*)(_QWORD))type metadata accessor for Shape);
        v104 = type metadata accessor for AnnotationImporter.ImportedElement();
        swift_storeEnumTagMultiPayload();
        v77 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 56);
        v78 = v157;
        goto LABEL_40;
      }
      v128 = (void *)v127;
      v129 = a1;
      v130 = v198;
      static AnnotationImporter.translateSignatureAnnotation(_:)(v128, v198);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v197 + 48))(v130, 1, v199) == 1)
      {

        v82 = (uint64_t *)&demangling cache variable for type metadata for Signature?;
        v83 = v130;
        goto LABEL_47;
      }
      v158 = v188;
      outlined init with take of PKStrokeStruct(v130, v188, (uint64_t (*)(_QWORD))type metadata accessor for Signature);
      Signature.apply(_:)(&v213);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
      v159 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
      v161 = v160;
      v162 = *v160;
      v163 = v160[1];
      v164 = v160[2];
      v165 = v160[3];
      v228.origin.x = *v160;
      v228.origin.y = v163;
      v228.size.width = v164;
      v228.size.height = v165;
      v166 = CGRectGetMinX(v228);
      v229.origin.x = v162;
      v229.origin.y = v163;
      v229.size.width = v164;
      v229.size.height = v165;
      v167 = a7 + a7 + a8 - CGRectGetMaxY(v229);
      v230.origin.x = v162;
      v230.origin.y = v163;
      v230.size.width = v164;
      v230.size.height = v165;
      v168 = CGRectGetWidth(v230);
      v231.origin.x = v162;
      v231.origin.y = v163;
      v231.size.width = v164;
      v231.size.height = v165;
      v169 = CGRectGetHeight(v231);
      *v161 = v166;
      v161[1] = v167;
      v161[2] = v168;
      v161[3] = v169;
      v159(&t1, 0);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
      v170 = (void (*)(CGAffineTransform *, _QWORD))CRRegister.wrappedValue.modify();
      *v171 = -*v171;
      v170(&t1, 0);
      outlined init with copy of PKStrokeProperties(v158, v187, (uint64_t (*)(_QWORD))type metadata accessor for Signature);
      (*(void (**)(char *, uint64_t, uint64_t))(v203 + 16))(v205, v206, v204);
      lazy protocol witness table accessor for type TaggedCanvasElement and conformance TaggedCanvasElement();
      swift_retain();
      v101 = v209;
      SharedTagged_9.init<A>(_:_:id:)();

      v102 = v158;
      v103 = type metadata accessor for Signature;
      goto LABEL_26;
    }
    v106 = (void *)v105;
    v107 = a1;
    v108 = objc_msgSend(v106, sel_drawing);
    if (v108)
    {
      v109 = v108;
      static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

      v110 = 0;
    }
    else
    {
      v110 = 1;
    }
    v132 = v200;
    v131 = v201;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v200 + 56))(v39, v110, 1, v201);
    outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v39, (uint64_t)v43, &demangling cache variable for type metadata for PKDrawing?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v132 + 48))(v43, 1, v131) == 1)
    {

      v82 = &demangling cache variable for type metadata for PKDrawing?;
      v83 = (uint64_t)v43;
      goto LABEL_47;
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PKDrawing);
    swift_dynamicCast();
    v135 = *(id *)&t1.a;
    v172 = (void *)specialized PKDrawingCoherence.__allocating_init(concreteDrawing:)(v135);

    v173 = v172;
    objc_msgSend(v106, sel_rectangle);
    v174 = CGRectGetWidth(v232);
    objc_msgSend(v173, sel_bounds);
    v175 = v174 / CGRectGetWidth(v233);
    objc_msgSend(v106, sel_rectangle);
    v176 = CGRectGetHeight(v234);
    objc_msgSend(v173, sel_bounds);
    v177 = CGRectGetHeight(v235);
    CGAffineTransformMakeScale(&t1, v175, v176 / v177);
    v178 = *(_OWORD *)&t1.a;
    v179 = *(_OWORD *)&t1.c;
    v180 = *(_OWORD *)&t1.tx;
    t1.a = a;
    t1.b = b;
    t1.c = c;
    t1.d = d;
    t1.tx = tx;
    t1.ty = ty;
    *(_OWORD *)&v212.a = v178;
    *(_OWORD *)&v212.c = v179;
    *(_OWORD *)&v212.tx = v180;
    CGAffineTransformConcat(&v211, &t1, &v212);
    t1 = v211;
    v181 = objc_msgSend(v173, sel_drawingByApplyingTransform_, &t1);

    v182 = v189;
    static PKDrawing._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v132 + 32))(v190, v182, v131);
    type metadata accessor for PKDrawingCoherence(0);
    swift_dynamicCast();
    v183 = t1.a;
    v184 = *(_QWORD *)&t1.a + OBJC_IVAR___PKDrawingCoherence_model;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v191 + 16))(v193, v184, v192);
    type metadata accessor for PKDrawingStruct();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PKDrawingStruct and conformance PKDrawingStruct, (uint64_t (*)(uint64_t))type metadata accessor for PKDrawingStruct, (uint64_t)&protocol conformance descriptor for PKDrawingStruct);
    swift_retain();
    v185 = v209;
    Ref.init<A>(_:_:)();

    v104 = type metadata accessor for AnnotationImporter.ImportedElement();
    swift_storeEnumTagMultiPayload();
    v77 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 56);
    v78 = v185;
  }
LABEL_40:
  v126 = 0;
  v76 = v104;
  return v77(v78, v126, 1, v76);
}

unint64_t specialized static AnnotationImporter._importAnnotations<A>(from:in:assetManager:scale:mediaBox:)(void *a1, uint64_t a2, uint64_t a3, CGFloat a4, double a5, double a6, double a7, double a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  char *v61;
  id v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  uint64_t v69;
  PDFAnnotation *v70;
  id v71;
  CGPDFDictionary *v72;
  CGPDFDictionary *v73;
  CFStringRef v74;
  __CFString *v75;
  unint64_t v76;
  unint64_t v77;
  void (*v78)(char *, uint64_t, uint64_t, uint64_t);
  CFDataRef v79;
  CFDataRef v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unsigned int (*v85)(uint64_t, uint64_t, uint64_t);
  Swift::Bool v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)();
  uint64_t v91;
  unint64_t v92;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  void *v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (*v109)(CGPDFDictionaryRef *, uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  void (*v112)(CGPDFDictionaryRef *, _QWORD);
  _QWORD *v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  unint64_t v122;
  unint64_t v123;
  id v124;
  uint64_t v126;
  void (*v127)(char *, _QWORD);
  __int128 v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  id v139;
  uint64_t v140;
  __int128 v141;
  char *v142;
  unint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  char *v155;
  CGPDFDataFormat format;
  unint64_t v157;
  CGPDFStreamRef v158;
  CGPDFDictionaryRef value;
  char key[16];
  char v161;
  uint64_t v162;
  uint64_t v163;

  v149 = a3;
  v152 = a2;
  v162 = *MEMORY[0x1E0C80C00];
  v132 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v130 = *(_QWORD *)(v132 - 8);
  MEMORY[0x1E0C80A78](v132, v12);
  v131 = (char *)&v126 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PDFAnnotationElement();
  MEMORY[0x1E0C80A78](v14, v15);
  v138 = (uint64_t)&v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v126 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v126 - v23;
  MEMORY[0x1E0C80A78](v25, v26);
  v140 = (uint64_t)&v126 - v27;
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v126 - v30;
  MEMORY[0x1E0C80A78](v32, v33);
  v147 = (char *)&v126 - v34;
  v151 = type metadata accessor for AnnotationImporter.ImportedElement();
  v154 = *(_QWORD *)(v151 - 8);
  MEMORY[0x1E0C80A78](v151, v35);
  v136 = (uint64_t)&v126 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37, v38);
  v135 = (uint64_t)&v126 - v39;
  MEMORY[0x1E0C80A78](v40, v41);
  v146 = (uint64_t)&v126 - v42;
  MEMORY[0x1E0C80A78](v43, v44);
  v145 = (uint64_t)&v126 - v45;
  v46 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v46, v47);
  v142 = (char *)&v126 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v49, v50);
  v144 = (char *)&v126 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v52, v53);
  v55 = (char *)&v126 - v54;
  v56 = type metadata accessor for CRKeyPath();
  v57 = *(_QWORD *)(v56 - 8);
  v59 = MEMORY[0x1E0C80A78](v56, v58);
  v61 = (char *)&v126 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = MEMORY[0x1E0DEE9D8];
  v148 = (uint64_t)a1;
  v62 = objc_msgSend(a1, sel_annotations, v59);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
  v63 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v63 >> 62)
  {
    swift_bridgeObjectRetain();
    v64 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v64)
      goto LABEL_3;
  }
  else
  {
    v64 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v64)
    {
LABEL_3:
      v150 = v64;
      if (v64 < 1)
        __break(1u);
      v133 = v31;
      v137 = v24;
      v129 = v20;
      v65 = 0;
      v153 = v63 & 0xC000000000000001;
      v141 = xmmword_1DDF3C460;
      v128 = xmmword_1DDF33630;
      v155 = v55;
      v143 = v63;
      v66 = v150;
      v134 = v61;
      while (1)
      {
        v67 = v153 ? (id)MEMORY[0x1DF0E4D64](v65, v63) : *(id *)(v63 + 8 * v65 + 32);
        v68 = v67;
        type metadata accessor for CanvasElementPDFAnnotation();
        v69 = swift_dynamicCastClass();
        if (v69)
          break;

LABEL_6:
        if (v66 == ++v65)
          goto LABEL_66;
      }
      v70 = (PDFAnnotation *)v69;
      v71 = v68;
      v72 = -[PDFAnnotation sourceDictionary](v70, sel_sourceDictionary);
      if (!v72)
      {
        v78 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56);
        v78(v55, 1, 1, v56);
        goto LABEL_25;
      }
      value = 0;
      *(_OWORD *)key = v141;
      CGPDFDictionaryGetDictionary(v72, key, &value);
      v73 = value;
      if (value)
      {
        *(_QWORD *)key = 0;
        if (CGPDFDictionaryGetString(value, "PPKID", (CGPDFStringRef *)key)
          && *(_QWORD *)key
          && (v74 = CGPDFStringCopyTextString(*(CGPDFStringRef *)key)) != 0)
        {
          v75 = (__CFString *)v74;
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          Data.init(base64Encoded:options:)();
          v77 = v76;
          swift_bridgeObjectRelease();
          if (v77 >> 60 != 15)
          {
LABEL_63:
            v55 = v155;
            CRKeyPath.init(rawValue:)();
            v78 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56);
            v78(v55, 0, 1, v56);
LABEL_24:
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56) != 1)
            {
              (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v61, v55, v56);
LABEL_27:
              v82 = (uint64_t)v144;
              (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v144, v61, v56);
              v78((char *)v82, 0, 1, v56);
              v83 = (uint64_t)v70 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId;
              swift_beginAccess();
              outlined assign with take of Date?(v82, v83, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
              swift_endAccess();
              v84 = v147;
              specialized CanvasElementPDFAnnotation.decodeImportedElement<A>(in:assetManager:from:)(v152, v149, v148, v147);
              v85 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v154 + 48);
              if (v85((uint64_t)v84, 1, v151) == 1)
              {
                outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v84, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
                v86 = PDFAnnotation.shouldMirrorAsPDFAnnotationElement()();
                v55 = v155;
                if (v86)
                {
                  v87 = v71;
                  v88 = v138;
                  PDFAnnotationElement.init(_:)(v70, v138);
                  specialized addPDFAnnotationElement #1 <A>(_:) in static AnnotationImporter._importAnnotations<A>(from:in:assetManager:scale:mediaBox:)(v88, v152, (uint64_t)v61, &v157);

                  v89 = v88;
                  v90 = type metadata accessor for PDFAnnotationElement;
LABEL_36:
                  outlined destroy of PKStrokeProperties(v89, (uint64_t (*)(_QWORD))v90);
                  (*(void (**)(char *, uint64_t))(v57 + 8))(v61, v56);
LABEL_37:
                  v63 = v143;
                  v66 = v150;
                  goto LABEL_6;
                }
                v97 = *(Class *)((char *)&v70->super.isa
                               + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation__akAnnotation);
                if (!v97)
                {
                  (*(void (**)(char *, uint64_t))(v57 + 8))(v61, v56);

                  goto LABEL_37;
                }
                v139 = v71;
                v98 = v97;
                v99 = v140;
                specialized static AnnotationImporter.importElement<A>(_:from:in:id:scale:mediaBox:)(v98, v70, v152, (uint64_t)v61, v140, a4, a6, a8);
                v100 = (uint64_t)v137;
                outlined init with copy of Ref<PKStrokeInheritedProperties>?(v99, (uint64_t)v137, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
                v101 = v151;
                if (v85(v100, 1, v151) != 1)
                {
                  v102 = v100;
                  v103 = (uint64_t)v129;
                  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v102, (uint64_t)v129, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
                  if (swift_getEnumCaseMultiPayload() == 1)
                  {
                    outlined destroy of PKStrokeProperties(v103, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
                  }
                  else
                  {
                    (*(void (**)(char *, uint64_t, uint64_t))(v130 + 32))(v131, v103, v132);
                    objc_opt_self();
                    if (swift_dynamicCastObjCClass()
                      || (objc_opt_self(), swift_dynamicCastObjCClass())
                      || (objc_opt_self(), swift_dynamicCastObjCClass())
                      || (objc_opt_self(), swift_dynamicCastObjCClass()))
                    {
                      v104 = 1;
                    }
                    else
                    {
                      objc_opt_self();
                      v104 = swift_dynamicCastObjCClass() != 0;
                    }
                    objc_opt_self();
                    if (swift_dynamicCastObjCClass()
                      || ((objc_opt_self(), !swift_dynamicCastObjCClass()) ? (v105 = v104) : (v105 = 0), !v105))
                    {
                      v126 = 128;
                      v127 = (void (*)(char *, _QWORD))SharedTagged_9.subscript.modify();
                      v107 = *(_QWORD *)(v106 + 24);
                      v108 = *(_QWORD *)(v106 + 32);
                      __swift_mutable_project_boxed_opaque_existential_1(v106, v107);
                      v109 = *(uint64_t (**)(CGPDFDictionaryRef *, uint64_t, uint64_t))(v108 + 80);
                      v110 = v107;
                      v101 = v151;
                      v111 = v108;
                      v55 = v155;
                      v112 = (void (*)(CGPDFDictionaryRef *, _QWORD))v109(&value, v110, v111);
                      *v113 |= v126 | 8;
                      v112(&value, 0);
                      v127(key, 0);
                    }
                    (*(void (**)(char *, uint64_t))(v130 + 8))(v131, v132);
                  }
                  v100 = (uint64_t)v137;
                }
                v114 = v98;
                v115 = v101;
                v116 = (uint64_t)v133;
                outlined init with take of (key: Int, value: AnyCRValue)?(v140, (uint64_t)v133, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
                outlined destroy of StocksKitCurrencyCache.Provider?(v100, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
                v117 = v139;

                if (v85(v116, 1, v115) == 1)
                {
                  v118 = v134;
                  (*(void (**)(char *, uint64_t))(v57 + 8))(v134, v56);

                  v61 = v118;
                  outlined destroy of StocksKitCurrencyCache.Provider?(v116, &demangling cache variable for type metadata for AnnotationImporter.ImportedElement?);
                  goto LABEL_37;
                }
                v119 = v135;
                outlined init with take of PKStrokeStruct(v116, v135, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
                outlined init with copy of PKStrokeProperties(v119, v136, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
                swift_beginAccess();
                v120 = v157;
                v121 = v114;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v120 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v120 + 16) + 1, 1, v120, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<AnnotationImporter.ImportedElement>, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
                v61 = v134;
                v123 = *(_QWORD *)(v120 + 16);
                v122 = *(_QWORD *)(v120 + 24);
                if (v123 >= v122 >> 1)
                  v120 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v122 > 1, v123 + 1, 1, v120, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<AnnotationImporter.ImportedElement>, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
                *(_QWORD *)(v120 + 16) = v123 + 1;
                outlined init with take of PKStrokeStruct(v136, v120+ ((*(unsigned __int8 *)(v154 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v154 + 80))+ *(_QWORD *)(v154 + 72) * v123, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
                v157 = v120;
                swift_endAccess();
                v124 = v139;

                v96 = (uint64_t *)&v161;
              }
              else
              {
                v91 = v145;
                outlined init with take of PKStrokeStruct((uint64_t)v84, v145, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
                outlined init with copy of PKStrokeProperties(v91, v146, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
                swift_beginAccess();
                v92 = v157;
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v55 = v155;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v92 + 16) + 1, 1, v92, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<AnnotationImporter.ImportedElement>, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
                v95 = *(_QWORD *)(v92 + 16);
                v94 = *(_QWORD *)(v92 + 24);
                if (v95 >= v94 >> 1)
                  v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v94 > 1, v95 + 1, 1, v92, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<AnnotationImporter.ImportedElement>, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
                *(_QWORD *)(v92 + 16) = v95 + 1;
                outlined init with take of PKStrokeStruct(v146, v92+ ((*(unsigned __int8 *)(v154 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v154 + 80))+ *(_QWORD *)(v154 + 72) * v95, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
                v157 = v92;
                swift_endAccess();

                v96 = &v163;
              }
              v89 = *(v96 - 32);
              v90 = type metadata accessor for AnnotationImporter.ImportedElement;
              goto LABEL_36;
            }
LABEL_25:
            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v55, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
            v81 = -[PDFAnnotation pdfAnnotationUUID](v70, sel_pdfAnnotationUUID);
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            CRKeyPath.init(_:)();
            goto LABEL_27;
          }
        }
        else
        {
          v158 = 0;
          if (CGPDFDictionaryGetStream(v73, "PPKID", &v158))
          {
            if (v158)
            {
              format = CGPDFDataFormatRaw;
              v79 = CGPDFStreamCopyData(v158, &format);
              if (v79)
              {
                v80 = v79;
                *(_OWORD *)key = v128;
                static Data._conditionallyBridgeFromObjectiveC(_:result:)();

                if (*(_QWORD *)&key[8] >> 60 != 15)
                  goto LABEL_63;
              }
            }
          }
        }
      }
      v78 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v57 + 56);
      v55 = v155;
      v78(v155, 1, 1, v56);
      goto LABEL_24;
    }
  }
LABEL_66:
  swift_bridgeObjectRelease();
  swift_beginAccess();
  return v157;
}

uint64_t specialized CanvasElementPDFAnnotation.decodeImportedElement<A>(in:assetManager:from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  Swift::String_optional v50;
  char v51;
  uint64_t *v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;

  v71 = a3;
  v84 = a2;
  v89 = a1;
  v87 = a4;
  v78 = type metadata accessor for CRKeyPath();
  v77 = *(_QWORD *)(v78 - 8);
  MEMORY[0x1E0C80A78](v78, v5);
  v82 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v7, v8);
  v74 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v76 = (char *)&v64 - v12;
  v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<UnknownCanvasElement>);
  v80 = *(_QWORD *)(v81 - 8);
  MEMORY[0x1E0C80A78](v81, v13);
  v79 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x1E0C80A78](v70, v15);
  v69 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v68 = (char *)&v64 - v19;
  v73 = type metadata accessor for UnknownCanvasElement();
  MEMORY[0x1E0C80A78](v73, v20);
  v72 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v75 = (char *)&v64 - v24;
  v86 = type metadata accessor for CRCodingError();
  v83 = *(_QWORD *)(v86 - 8);
  MEMORY[0x1E0C80A78](v86, v25);
  v85 = (char *)&v64 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v27, v28);
  v67 = (char *)&v64 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v65 = *(_QWORD *)(v66 - 8);
  MEMORY[0x1E0C80A78](v66, v30);
  v64 = (char *)&v64 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v64 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v37 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36, v38);
  v40 = (char *)&v64 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>?);
  MEMORY[0x1E0C80A78](v41, v42);
  v44 = (char *)&v64 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
  v46 = *(_QWORD *)(v45 - 8);
  MEMORY[0x1E0C80A78](v45, v47);
  v49 = (char *)&v64 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = v4;
  v50 = CanvasElementPDFAnnotation.decodePaperKitType()();
  if (v50.value._object)
  {
    if (v50.value._countAndFlagsBits == 2002874980 && v50.value._object == (void *)0xE400000000000000)
    {
      swift_bridgeObjectRelease();
LABEL_6:
      specialized CanvasElementPDFAnnotation.decodePaperKit<A, B>(type:checkHash:in:)(0, v89, &demangling cache variable for type metadata for Capsule<CRRegister<Ref<PKDrawingStruct>?>>, &demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>, (unint64_t *)&lazy protocol witness table cache variable for type CRRegister<Ref<PKDrawingStruct>?> and conformance CRRegister<A>, (uint64_t)v44);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45) == 1)
      {
        v52 = &demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>?;
        v53 = (uint64_t)v44;
LABEL_13:
        outlined destroy of StocksKitCurrencyCache.Provider?(v53, v52);
        v59 = type metadata accessor for AnnotationImporter.ImportedElement();
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v87, 1, 1, v59);
      }
      (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v49, v44, v45);
      v56 = v67;
      CRRegister.value.getter();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v49, v45);
      v57 = v65;
      v58 = v66;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v56, 1, v66) == 1)
      {
        v52 = (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?;
        v53 = (uint64_t)v56;
        goto LABEL_13;
      }
      v62 = *(void (**)(char *, char *, uint64_t))(v57 + 32);
      v63 = v64;
      v62(v64, v56, v58);
      v55 = v87;
      v62(v87, v63, v58);
      v61 = type metadata accessor for AnnotationImporter.ImportedElement();
      goto LABEL_14;
    }
    v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v51 & 1) != 0)
      goto LABEL_6;
  }
  specialized CanvasElementPDFAnnotation.decodeCanvasElement<A>(in:assetManager:)(v89, v84, (uint64_t)v35);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36) == 1)
  {
    v52 = (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?;
    v53 = (uint64_t)v35;
    goto LABEL_13;
  }
  v54 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
  v54(v40, v35, v36);
  v55 = v87;
  v54(v87, v40, v36);
  v61 = type metadata accessor for AnnotationImporter.ImportedElement();
LABEL_14:
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v55, 0, 1, v61);
}

uint64_t specialized PaperKitPDFDocument.updatePDFPages<A>(in:use:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  id v65;
  uint64_t v66;
  _QWORD v67[10];
  uint64_t v68;
  _QWORD v69[3];
  uint64_t v70;
  uint64_t v71;

  v55 = a3;
  v54 = a2;
  v53 = type metadata accessor for CRKeyPath();
  v52 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53, v5);
  v51 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakRef<PaperDocumentPage>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v62 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PaperDocumentPage?);
  MEMORY[0x1E0C80A78](v10, v11);
  v59 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v66 = *(_QWORD *)(v21 - 8);
  v23 = MEMORY[0x1E0C80A78](v21, v22);
  v63 = (char *)&v51 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = v3;
  result = (uint64_t)objc_msgSend(v3, sel_pageCount, v23);
  if (result < 0)
    goto LABEL_24;
  v26 = result;
  v64 = v16;
  v61 = a1;
  if (result)
  {
    v27 = 0;
    v28 = &demangling cache variable for type metadata for PageId?;
    v58 = v20;
    do
    {
      if (v26 == v27)
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
        return result;
      }
      v29 = v28;
      result = (uint64_t)objc_msgSend(v65, sel_pageAtIndex_, v27);
      if (!result)
        goto LABEL_25;
      v30 = (void *)result;
      type metadata accessor for PaperKitPDFPage(0);
      v31 = swift_dynamicCastClassUnconditional();
      v32 = v31 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
      swift_beginAccess();
      v33 = (uint64_t)v64;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v32, (uint64_t)v64, v28);
      v34 = type metadata accessor for PageId(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v33, 1, v34))
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v33, v28);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v66 + 56))(v20, 1, 1, v21);
      }
      else
      {
        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v33 + *(int *)(v34 + 20), (uint64_t)v20, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v33, v28);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v20, 1, v21) != 1)
        {
          (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v63, v20, v21);
          v35 = v62;
          v36 = v21;
          WeakTagged_3.tagged3.getter();
          v37 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for WeakRef<PaperDocumentPage>);
          v38 = *(_QWORD *)(v37 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v35, 1, v37) == 1)
          {
            v39 = (uint64_t)v62;
            v40 = &demangling cache variable for type metadata for WeakRef<PaperDocumentPage>?;
            goto LABEL_15;
          }
          type metadata accessor for PaperDocument(0);
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
          v41 = v59;
          v42 = v62;
          WeakRef.subscript.getter();
          (*(void (**)(char *, uint64_t))(v38 + 8))(v42, v37);
          v43 = type metadata accessor for PaperDocumentPage();
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 48))(v41, 1, v43) == 1)
          {
            v39 = (uint64_t)v59;
            v40 = &demangling cache variable for type metadata for PaperDocumentPage?;
LABEL_15:
            outlined destroy of StocksKitCurrencyCache.Provider?(v39, v40);
LABEL_16:
            v44 = type metadata accessor for PaperDocument(0);
            v21 = v36;
            v60 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
            v45 = v63;
            WeakTagged_3.subscript.getter();
            v46 = v70;
            if (v70)
            {
              v57 = v44;
              v47 = v71;
              v56 = __swift_project_boxed_opaque_existential_1(v69, v70);
              v48 = v51;
              MEMORY[0x1DF0E3078](v21);
              v68 = v54;
              outlined init with take of (key: Int, value: AnyCRValue)?(v55, (uint64_t)v67, &demangling cache variable for type metadata for PaperRenderableOptions?);
              (*(void (**)(uint64_t, char *, uint64_t *, uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 128))(v31, v48, &v68, v61, v67, v57, v60, v46, v47);

              (*(void (**)(char *, uint64_t))(v52 + 8))(v48, v53);
              (*(void (**)(char *, uint64_t))(v66 + 8))(v63, v21);
              result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v66 + 8))(v45, v36);

              result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v69, &demangling cache variable for type metadata for PaperPage?);
            }
          }
          else
          {
            v49 = (uint64_t)v59;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
            CRRegister.wrappedValue.getter();
            v50 = v67[0];
            outlined destroy of PKStrokeProperties(v49, (uint64_t (*)(_QWORD))type metadata accessor for PaperDocumentPage);
            if ((v50 & 0x20) == 0)
              goto LABEL_16;

            v21 = v36;
            result = (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v63, v36);
          }
          v20 = v58;
          v28 = v29;
          goto LABEL_6;
        }
      }

      result = outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v20, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
LABEL_6:
      ++v27;
    }
    while (v26 != v27);
  }
  return result;
}

uint64_t specialized PaperDocument.init<A>(pdfDocument:asset:in:assetManager:useProxyPages:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[2];
  void *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v32 = a5;
  v35 = a6;
  v36 = a4;
  v30 = a2;
  v31 = a3;
  v29 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v28 - v12;
  v14 = type metadata accessor for PaperDocument(0);
  v34 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, MEMORY[0x1E0D12270]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, MEMORY[0x1E0D12278]);
  CROrderedSet.init()();
  v18 = &v17[*(int *)(v14 + 20)];
  v19 = type metadata accessor for CRAsset();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
  v21(v13, 1, 1, v19);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v13, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  lazy protocol witness table accessor for type CRAsset? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type CRAsset? and conformance <A> A?, (uint64_t *)&demangling cache variable for type metadata for CRAsset?, MEMORY[0x1E0D12950], MEMORY[0x1E0D12D70]);
  v28[1] = v18;
  v22 = v30;
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  v33 = v14;
  *(_QWORD *)&v17[*(int *)(v14 + 24)] = MEMORY[0x1E0DEE9E0];
  v23 = v29;
  if ((specialized PaperDocument.appendDocument<A>(_:asset:in:assetManager:useProxyPages:)(v29, v22, v31, v36, v32) & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v13, v22, v19);
    v21(v13, 0, 1, v19);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v13, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAsset?>);
    CRRegister.wrappedValue.setter();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);

    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v19);
    v24 = v35;
    outlined init with take of PKStrokeStruct((uint64_t)v17, v35, type metadata accessor for PaperDocument);
    v25 = 0;
    v26 = v24;
  }
  else
  {

    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v19);
    outlined destroy of PKStrokeProperties((uint64_t)v17, type metadata accessor for PaperDocument);
    v25 = 1;
    v26 = v35;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v26, v25, 1, v33);
}

uint64_t PaperDocumentView.__allocating_init(context:document:editingMode:toolPicker:)(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  objc_class *v4;
  _QWORD *v5;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, _BYTE *, uint64_t);

  v5[2] = a1;
  v5[3] = a4;
  objc_allocWithZone(v4);
  v12 = (uint64_t (*)(uint64_t, uint64_t, _BYTE *, uint64_t))((char *)&async function pointer to specialized PaperDocumentView.init(context:document:editingMode:toolPicker:)
                                                                   + async function pointer to specialized PaperDocumentView.init(context:document:editingMode:toolPicker:));
  v10 = (_QWORD *)swift_task_alloc();
  v5[4] = v10;
  *v10 = v5;
  v10[1] = PaperDocumentView.__allocating_init(context:document:editingMode:toolPicker:);
  return v12(a1, a2, a3, a4);
}

uint64_t PaperDocumentView.__allocating_init(context:document:editingMode:toolPicker:)(uint64_t a1)
{
  uint64_t *v1;
  void *v3;
  void *v4;
  uint64_t v6;

  v3 = *(void **)(*v1 + 24);
  v4 = *(void **)(*v1 + 16);
  v6 = *v1;
  swift_task_dealloc();

  return (*(uint64_t (**)(uint64_t))(v6 + 8))(a1);
}

uint64_t specialized static PaperDocumentPage.create<A>(pdfPage:pageID:in:assetManager:importedElements:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  id v46;
  double v47;
  CGFloat v48;
  double v49;
  CGFloat v50;
  double v51;
  CGFloat v52;
  double v53;
  CGFloat v54;
  CGFloat v55;
  CGFloat v56;
  CGFloat v57;
  CGFloat v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(char *, uint64_t, uint64_t, uint64_t);
  char *v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __C::CGRect v93;
  __C::CGRect v94;

  v80 = a4;
  v79 = a3;
  v89 = a1;
  v90 = a2;
  v86 = a5;
  v81 = type metadata accessor for CRKeyPath();
  v83 = *(_QWORD *)(v81 - 8);
  MEMORY[0x1E0C80A78](v81, v5);
  v76 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v7, v8);
  v84 = (uint64_t)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v10, v11);
  v77 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PaperDocumentPage>);
  v85 = *(_QWORD *)(v82 - 8);
  MEMORY[0x1E0C80A78](v82, v13);
  v78 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v74, v15);
  v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v70 - v20;
  v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x1E0C80A78](v71, v22);
  v87 = (uint64_t)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v70 - v26;
  v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v70 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v70 - v34;
  v36 = (int *)type metadata accessor for PaperDocumentPage();
  MEMORY[0x1E0C80A78](v36, v37);
  v75 = (uint64_t)&v70 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v39, v40);
  v42 = (char *)&v70 - v41;
  type metadata accessor for CGRect(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  v91 = 0u;
  v92 = 0u;
  CRRegister.init(wrappedValue:)();
  v91 = 0u;
  v92 = 0u;
  CRRegister.init(wrappedValue:)();
  v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v35, 1, 1, v43);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v35, (uint64_t)v31, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v35, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  *(_QWORD *)&v91 = 0;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  CRRegister.init(wrappedValue:)();
  v73 = &v42[v36[8]];
  v72 = type metadata accessor for PDFPageID();
  v88 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56);
  v88(v27, 1, 1, v72);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v27, v87, &demangling cache variable for type metadata for PDFPageID?);
  lazy protocol witness table accessor for type PDFPageID? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, &demangling cache variable for type metadata for PDFPageID?);
  v44 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v21, 1, 1, v44);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v21, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
  CRRegister.init(wrappedValue:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  *(_QWORD *)&v91 = 0;
  lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
  CRRegister.init(wrappedValue:)();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12350]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12358]);
  CROrderedSet.init()();
  v45 = &v42[v36[12]];
  *(_QWORD *)&v91 = MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
  lazy protocol witness table accessor for type CRAsset? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type [CRKeyPath] and conformance <A> [A], &demangling cache variable for type metadata for [CRKeyPath], MEMORY[0x1E0D12C68], MEMORY[0x1E0D12D28]);
  v74 = (uint64_t)v45;
  CRRegister.init(wrappedValue:)();
  *(_QWORD *)&v42[v36[13]] = MEMORY[0x1E0DEE9E0];
  v46 = v89;
  objc_msgSend(v89, sel_boundsForBox_, 1);
  v48 = v47;
  v50 = v49;
  v52 = v51;
  v54 = v53;
  objc_msgSend(v46, sel_boundsForBox_, 0);
  v94.origin.x = v55;
  v94.origin.y = v56;
  v94.size.width = v57;
  v94.size.height = v58;
  v93.origin.x = v48;
  v93.origin.y = v50;
  v93.size.width = v52;
  v93.size.height = v54;
  PaperDocumentPage.setContentsBounds(_:fullBounds:)(v93, v94);
  specialized PaperPage.axisAlignedRotationInDegrees.setter((uint64_t)objc_msgSend(v46, sel_rotation));
  outlined init with copy of PKStrokeProperties(v90, (uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
  v59 = v72;
  v88(v27, 0, 1, v72);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v27, v87, &demangling cache variable for type metadata for PDFPageID?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
  CRRegister.wrappedValue.setter();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, &demangling cache variable for type metadata for PDFPageID?);
  specialized ContainerCanvasElement.importElements<A>(_:in:)(v80, v79);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v60 = v81;
  *(_QWORD *)&v91 = CROrderedSet.map<A>(_:)();
  v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<[CRKeyPath]>);
  CRRegister.wrappedValue.setter();
  outlined init with copy of PKStrokeProperties((uint64_t)v42, v75, (uint64_t (*)(_QWORD))type metadata accessor for PaperDocumentPage);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v83 + 56))(v77, 1, 1, v60);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
  swift_retain();
  v61 = v78;
  v62 = v82;
  Ref.init<A>(_:_:identity:)();
  v63 = v84;
  outlined init with copy of PKStrokeProperties(v90, v84, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
  v88((char *)v63, 0, 1, v59);
  v64 = type metadata accessor for PageId(0);
  v65 = v63 + *(int *)(v64 + 20);
  LOBYTE(v91) = 2;
  Ref.id.getter();
  lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
  WeakTagged_3.init(_:id:)();
  v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v65, 0, 1, v66);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v63, 0, 1, v64);
  v67 = v89;
  v68 = &v89[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId];
  swift_beginAccess();
  outlined assign with take of Date?(v63, (uint64_t)v68, &demangling cache variable for type metadata for PageId?);
  swift_endAccess();
  CRRegister.wrappedValue.getter();
  if (*(_QWORD *)&v67[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState])
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    *(_QWORD *)&v67[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_annotationIDState] = v91;
    outlined consume of PaperKitPDFPage.AnnotationIDState(0);
  }
  LOBYTE(v91) = 2;
  Ref.id.getter();
  SharedTagged_3.init(_:id:)();
  (*(void (**)(char *, uint64_t))(v85 + 8))(v61, v62);
  return outlined destroy of PKStrokeProperties((uint64_t)v42, (uint64_t (*)(_QWORD))type metadata accessor for PaperDocumentPage);
}

void specialized ContainerCanvasElement.importElements<A>(_:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void (*v54)(char *, _QWORD);
  void (*v55)(char *, uint64_t);
  char *v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char v79[40];

  v3 = v2;
  v67 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>);
  v65 = *(_QWORD *)(v5 - 8);
  v66 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v64 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for PKDrawingStruct();
  MEMORY[0x1E0C80A78](v63, v8);
  v62 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v10, v11);
  v61 = (uint64_t)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v60 = (char *)&v58 - v15;
  MEMORY[0x1E0C80A78](v16, v17);
  v77 = (char *)&v58 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v21);
  v70 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)&v58 - v25;
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v72 = *(_QWORD *)(v27 - 8);
  v73 = v27;
  MEMORY[0x1E0C80A78](v27, v28);
  v71 = (char *)&v58 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for AnnotationImporter.ImportedElement();
  MEMORY[0x1E0C80A78](v78, v30);
  v32 = (char *)&v58 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v37 = (char *)&v58 - v36;
  v38 = *(_QWORD *)(a1 + 16);
  if (v38)
  {
    v39 = a1 + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80));
    v76 = *(_QWORD *)(v35 + 72);
    v58 = a1;
    swift_bridgeObjectRetain();
    v68 = v26;
    v69 = v3;
    v74 = v37;
    v75 = v32;
    v59 = v20;
    do
    {
      outlined init with copy of PKStrokeProperties(v39, (uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
      outlined init with copy of PKStrokeProperties((uint64_t)v37, (uint64_t)v32, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v46 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
        v46(v26, v32, v19);
        type metadata accessor for PaperDocumentPage();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
        v47 = (uint64_t)v77;
        CRRegister.wrappedValue.getter();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v47, 1, v19) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v77, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
          v48 = (uint64_t)v60;
          (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v60, v26, v19);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(v48, 0, 1, v19);
          outlined init with copy of Ref<PKStrokeInheritedProperties>?(v48, v61, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
          v26 = v68;
          CRRegister.wrappedValue.setter();
          outlined destroy of StocksKitCurrencyCache.Provider?(v48, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
          (*(void (**)(char *, uint64_t))(v20 + 8))(v26, v19);
        }
        else
        {
          v46(v70, v77, v19);
          v49 = (uint64_t)v62;
          Ref.subscript.getter();
          v50 = v64;
          v51 = v65;
          v52 = v66;
          (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v64, v49 + *(int *)(v63 + 20), v66);
          outlined destroy of PKStrokeProperties(v49, (uint64_t (*)(_QWORD))type metadata accessor for PKDrawingStruct);
          v53 = v70;
          v54 = (void (*)(char *, _QWORD))Ref.subscript.modify();
          v37 = v74;
          lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>> and conformance CROrderedSet<A>, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<Ref<CRRegister<SharedTagged_2<TaggedStroke>>>>, MEMORY[0x1E0D11DC0]);
          CROrderedSet.append<A>(contentsOf:)();
          v55 = *(void (**)(char *, uint64_t))(v51 + 8);
          v26 = v68;
          v56 = v50;
          v20 = v59;
          v55(v56, v52);
          v54(v79, 0);
          v57 = *(void (**)(char *, uint64_t))(v20 + 8);
          v57(v53, v19);
          v57(v26, v19);
        }
        v32 = v75;
      }
      else
      {
        v40 = v71;
        v41 = v72;
        v42 = v32;
        v43 = v73;
        (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v71, v42, v73);
        type metadata accessor for PaperDocumentPage();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
        CROrderedSet.append(_:)();
        v44 = v40;
        v45 = v43;
        v37 = v74;
        v32 = v75;
        (*(void (**)(char *, uint64_t))(v41 + 8))(v44, v45);
      }
      outlined destroy of PKStrokeProperties((uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
      v39 += v76;
      --v38;
    }
    while (v38);
    swift_bridgeObjectRelease();
  }
}

uint64_t specialized PaperPage<>.updateAnnotations<A>(in:use:capsule:options:)(char *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  id v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  void (*v121)(char *);
  char *v122;
  char *v123;
  char *v124;
  unint64_t v125;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  _BOOL8 v130;
  uint64_t v131;
  unint64_t v132;
  char v133;
  _QWORD *v134;
  unint64_t v135;
  uint64_t v136;
  BOOL v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  id v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  id v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  id v177;
  void *v178;
  uint64_t v179;
  char *v180;
  unint64_t v181;
  int v182;
  uint64_t v183;
  char **v184;
  char *v185;
  _QWORD *v186;
  char *v187;
  void (*v188)(_QWORD **, _QWORD);
  uint64_t v189;
  char *v190;
  unint64_t *v191;
  int EnumCaseMultiPayload;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  char *v201;
  uint64_t v202;
  char v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  id v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unsigned int (*v219)(uint64_t, uint64_t, uint64_t);
  uint64_t v220;
  char *v221;
  char v222;
  void (*v223)(uint64_t, uint64_t);
  char *v224;
  uint64_t v225;
  double v226;
  double v227;
  double v228;
  double v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  void (*v235)(char *, char *, uint64_t);
  uint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t result;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  char *v251;
  char *v252;
  uint64_t v253;
  char *v254;
  char *v255;
  uint64_t v256;
  char *v257;
  char *v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  char *v266;
  char *v267;
  char *v268;
  uint64_t v269;
  char *v270;
  char *v271;
  char *v272;
  uint64_t v273;
  void (*v274)(char *, char *, uint64_t);
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  char *v282;
  uint64_t v283;
  unint64_t *v284;
  unint64_t v285;
  uint64_t (*v286)(char *, uint64_t, uint64_t);
  uint64_t v287;
  void *v288;
  char *v289;
  char *v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  char *v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  char v303;
  _QWORD *v304;
  double v305;
  double v306;
  double v307;
  double v308;
  _QWORD *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  _QWORD v313[4];
  char v314;

  v264 = a4;
  v275 = a3;
  v280 = a2;
  v288 = a1;
  v291 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
  MEMORY[0x1E0C80A78](v291, v5);
  v297 = (uint64_t)&v242 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)&v242 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11, v12);
  v277 = (uint64_t)&v242 - v13;
  MEMORY[0x1E0C80A78](v14, v15);
  v298 = (uint64_t)&v242 - v16;
  MEMORY[0x1E0C80A78](v17, v18);
  v300 = (uint64_t)&v242 - v19;
  MEMORY[0x1E0C80A78](v20, v21);
  v254 = (char *)&v242 - v22;
  v253 = type metadata accessor for PDFAnnotationElement();
  MEMORY[0x1E0C80A78](v253, v23);
  v252 = (char *)&v242 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v263 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (SharedTagged_9<TaggedCanvasElement>, PDFAnnotation));
  MEMORY[0x1E0C80A78](v263, v25);
  v262 = (char *)&v242 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v246 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v28);
  v247 = (char *)&v242 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<CROrderedSet<SharedTagged_9<TaggedCanvasElement>>, [PDFAnnotation]>);
  MEMORY[0x1E0C80A78](v30, v31);
  v244 = (char *)&v242 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v245 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Zip2Sequence<CROrderedSet<SharedTagged_9<TaggedCanvasElement>>, [PDFAnnotation]>.Iterator);
  MEMORY[0x1E0C80A78](v245, v33);
  v267 = (char *)&v242 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v273 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<CRKeyPath>.Change);
  MEMORY[0x1E0C80A78](v273, v35);
  v284 = (unint64_t *)((char *)&v242 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v37, v38);
  v272 = (char *)&v242 - v39;
  v256 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<CRKeyPath>>);
  MEMORY[0x1E0C80A78](v256, v40);
  v255 = (char *)&v242 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v42, v43);
  v276 = (uint64_t)&v242 - v44;
  v279 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<CRKeyPath>);
  v278 = *(_QWORD *)(v279 - 8);
  MEMORY[0x1E0C80A78](v279, v45);
  v271 = (char *)&v242 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v47, v48);
  v250 = (char *)&v242 - v49;
  v50 = type metadata accessor for CRKeyPath();
  v301 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50, v51);
  v294 = (char *)&v242 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v53, v54);
  v260 = (char *)&v242 - v55;
  MEMORY[0x1E0C80A78](v56, v57);
  v296 = (char *)&v242 - v58;
  MEMORY[0x1E0C80A78](v59, v60);
  v293 = (uint64_t)&v242 - v61;
  v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<PDFAnnotationElement>?);
  MEMORY[0x1E0C80A78](v62, v63);
  v258 = (char *)&v242 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v65, v66);
  v68 = (char *)&v242 - v67;
  v69 = (char *)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PDFAnnotationElement>);
  v283 = *((_QWORD *)v69 - 1);
  MEMORY[0x1E0C80A78](v69, v70);
  v251 = (char *)&v242 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v72, v73);
  v290 = (char *)&v242 - v74;
  MEMORY[0x1E0C80A78](v75, v76);
  v289 = (char *)&v242 - v77;
  v78 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v79 = *(_QWORD *)(v78 - 8);
  MEMORY[0x1E0C80A78](v78, v80);
  v282 = (char *)&v242 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v82, v83);
  v265 = (char *)&v242 - v84;
  MEMORY[0x1E0C80A78](v85, v86);
  v270 = (char *)&v242 - v87;
  v88 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v88, v89);
  v268 = (char *)&v242 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v91, v92);
  v266 = (char *)&v242 - v93;
  MEMORY[0x1E0C80A78](v94, v95);
  v97 = (char *)&v242 - v96;
  v287 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  v269 = *(_QWORD *)(v287 - 8);
  MEMORY[0x1E0C80A78](v287, v98);
  v100 = (char *)&v242 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0);
  v285 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v101 = v4 + *(int *)(type metadata accessor for PaperDocumentPage() + 44);
  v299 = v50;
  v249 = CROrderedSet.map<A>(_:)();
  v248 = v27;
  v243 = v101;
  CROrderedSet.makeIterator()();
  v292 = v100;
  CROrderedSet.Iterator.next()();
  v286 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v79 + 48);
  v102 = v286(v97, 1, v78);
  v295 = v78;
  v281 = v79;
  if (v102 != 1)
  {
    v274 = *(void (**)(char *, char *, uint64_t))(v79 + 32);
    v103 = v297;
    v117 = v283;
    v118 = v270;
    v274(v270, v97, v78);
    while (1)
    {
      SharedTagged_9.tagged9.getter();
      if ((*(unsigned int (**)(char *, uint64_t, char *))(v117 + 48))(v68, 1, v69) == 1)
      {
        (*(void (**)(char *, uint64_t))(v79 + 8))(v118, v78);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v68, &demangling cache variable for type metadata for Ref<PDFAnnotationElement>?);
      }
      else
      {
        v119 = v97;
        v120 = v68;
        v105 = (unint64_t)v10;
        v121 = *(void (**)(char *))(v117 + 32);
        v122 = v289;
        v123 = v120;
        v121(v289);
        v103 = v293;
        MEMORY[0x1DF0E3408](v78);
        v124 = v122;
        v10 = v69;
        (*(void (**)(char *, char *, char *))(v117 + 16))(v290, v124, v69);
        v125 = v285;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v304 = (_QWORD *)v125;
        v128 = specialized __RawDictionaryStorage.find<A>(_:)(v103);
        v129 = *(_QWORD *)(v125 + 16);
        v130 = (v127 & 1) == 0;
        v131 = v129 + v130;
        if (__OFADD__(v129, v130))
          goto LABEL_111;
        v103 = v127;
        if (*(_QWORD *)(v125 + 24) >= v131)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            specialized _NativeDictionary.copy()();
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v131, isUniquelyReferenced_nonNull_native);
          v132 = specialized __RawDictionaryStorage.find<A>(_:)(v293);
          if ((v103 & 1) != (v133 & 1))
            goto LABEL_117;
          v128 = v132;
        }
        v78 = v295;
        v134 = v304;
        v10 = (char *)v105;
        if ((v103 & 1) != 0)
        {
          v285 = (unint64_t)v304;
          v135 = v304[7] + *(_QWORD *)(v283 + 72) * v128;
          v117 = v283;
          (*(void (**)(unint64_t, char *, char *))(v283 + 40))(v135, v290, v69);
          v68 = v123;
        }
        else
        {
          v304[(v128 >> 6) + 8] |= 1 << v128;
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v301 + 16))(v134[6] + *(_QWORD *)(v301 + 72) * v128, v293, v299);
          ((void (*)(unint64_t, char *, char *))v121)(v134[7] + *(_QWORD *)(v283 + 72) * v128, v290, v69);
          v136 = v134[2];
          v137 = __OFADD__(v136, 1);
          v138 = v136 + 1;
          if (v137)
            goto LABEL_114;
          v68 = v123;
          v134[2] = v138;
          v285 = (unint64_t)v304;
          v117 = v283;
        }
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v301 + 8))(v293, v299);
        (*(void (**)(char *, char *))(v117 + 8))(v289, v69);
        v79 = v281;
        v139 = v270;
        (*(void (**)(char *, uint64_t))(v281 + 8))(v270, v78);
        v103 = v297;
        v97 = v119;
        v118 = v139;
      }
      CROrderedSet.Iterator.next()();
      if (v286(v97, 1, v78) == 1)
        goto LABEL_3;
      v274(v118, v97, v78);
    }
  }
  v103 = v297;
LABEL_3:
  (*(void (**)(char *, uint64_t))(v269 + 8))(v292, v287);
  v104 = objc_msgSend(v288, sel_annotations);
  v261 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for PDFAnnotation);
  v105 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v105 >> 62)
    goto LABEL_115;
  v106 = *(_QWORD *)((v105 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_5:
  v107 = v279;
  if (v106)
  {
    v304 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v106 & ~(v106 >> 63), 0);
    if (v106 < 0)
    {
      __break(1u);
LABEL_117:
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    v108 = 0;
    while (1)
    {
      v109 = (v105 & 0xC000000000000001) != 0
           ? (id)MEMORY[0x1DF0E4D64](v108, v105)
           : *(id *)(v105 + 8 * v108 + 32);
      v110 = v109;
      v111 = v301;
      type metadata accessor for CanvasElementPDFAnnotation();
      v112 = swift_dynamicCastClass();
      if (!v112)
        break;
      v113 = v112 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId;
      swift_beginAccess();
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v113, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v111 + 48))(v10, 1, v299) == 1)
        goto LABEL_15;
      (*(void (**)(char *, char *, uint64_t))(v111 + 32))(v294, v10, v299);
LABEL_16:

      v114 = v304;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v114[2] + 1, 1);
        v114 = v304;
      }
      v116 = v114[2];
      v115 = v114[3];
      if (v116 >= v115 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v115 > 1, v116 + 1, 1);
        v114 = v304;
      }
      ++v108;
      v114[2] = v116 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v301 + 32))((unint64_t)v114+ ((*(unsigned __int8 *)(v301 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v301 + 80))+ *(_QWORD *)(v301 + 72) * v116, v294, v299);
      v304 = v114;
      v103 = v297;
      if (v106 == v108)
      {
        swift_bridgeObjectRelease();
        v107 = v279;
        goto LABEL_39;
      }
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v111 + 56))(v10, 1, 1, v299);
LABEL_15:
    static CRKeyPath.unique.getter();
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
    goto LABEL_16;
  }
  swift_bridgeObjectRelease();
  v114 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_39:
  v304 = (_QWORD *)v249;
  v309 = v114;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [CRKeyPath] and conformance [A], &demangling cache variable for type metadata for [CRKeyPath], MEMORY[0x1E0DEAF20]);
  v140 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CRKeyPath and conformance CRKeyPath, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12C70], MEMORY[0x1E0D12C90]);
  v141 = v250;
  v259 = v140;
  BidirectionalCollection<>.difference<A>(from:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v142 = v255;
  v274 = *(void (**)(char *, char *, uint64_t))(v278 + 16);
  v274(v255, v141, v107);
  v143 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CollectionDifference<CRKeyPath> and conformance CollectionDifference<A>, &demangling cache variable for type metadata for CollectionDifference<CRKeyPath>, MEMORY[0x1E0DECE10]);
  dispatch thunk of Collection.startIndex.getter();
  v144 = v256;
  *(_QWORD *)&v142[*(int *)(v256 + 36)] = v304;
  v145 = (uint64_t)v142;
  v146 = v143;
  v147 = v276;
  outlined init with take of (key: Int, value: AnyCRValue)?(v145, v276, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<CRKeyPath>>);
  v10 = (char *)(v147 + *(int *)(v144 + 36));
  v255 = (char *)OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_appearanceStreamAnnotations;
  v148 = *(_QWORD **)v10;
  dispatch thunk of Collection.endIndex.getter();
  v149 = v301;
  if (v148 != v304)
  {
    v257 = v69;
    v269 = v146;
    v289 = v10;
    while (2)
    {
      v187 = v69;
      v188 = (void (*)(_QWORD **, _QWORD))dispatch thunk of Collection.subscript.read();
      v69 = v272;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v189, (uint64_t)v272, &demangling cache variable for type metadata for CollectionDifference<CRKeyPath>.Change);
      v188(&v304, 0);
      v190 = v271;
      v274(v271, (char *)v147, v107);
      dispatch thunk of Collection.formIndex(after:)();
      (*(void (**)(char *, uint64_t))(v278 + 8))(v190, v107);
      v191 = v284;
      outlined init with take of (key: Int, value: AnyCRValue)?((uint64_t)v69, (uint64_t)v284, &demangling cache variable for type metadata for CollectionDifference<CRKeyPath>.Change);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      v193 = *v191;
      if (EnumCaseMultiPayload == 1)
      {
        v105 = (unint64_t)objc_msgSend(v288, sel_annotations);
        v194 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if ((v194 & 0xC000000000000001) != 0)
        {
          v105 = MEMORY[0x1DF0E4D64](v193, v194);
          v147 = v276;
          v10 = v289;
          v69 = v187;
        }
        else
        {
          v147 = v276;
          v10 = v289;
          if ((v193 & 0x8000000000000000) != 0)
            goto LABEL_112;
          if (v193 >= *(_QWORD *)((v194 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_113;
          v69 = v187;
          v105 = (unint64_t)*(id *)(v194 + 8 * v193 + 32);
        }
        swift_bridgeObjectRelease();
        v195 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: CRKeyPath, associatedWith: Int?));
        v185 = (char *)v284 + *(int *)(v195 + 48);
        v184 = &selRef_removeAnnotation_atIndex_;
        goto LABEL_61;
      }
      v196 = (char *)v191
           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: CRKeyPath, associatedWith: Int?))
                    + 48);
      v197 = (uint64_t)v296;
      v198 = v299;
      v270 = *(char **)(v149 + 32);
      ((void (*)(char *, char *, uint64_t))v270)(v296, v196, v299);
      v199 = v285;
      if (*(_QWORD *)(v285 + 16))
      {
        v200 = specialized __RawDictionaryStorage.find<A>(_:)(v197);
        v201 = v187;
        v202 = v295;
        if ((v203 & 1) != 0)
        {
          v204 = (uint64_t)v258;
          v205 = v201;
          (*(void (**)(char *, unint64_t))(v283 + 16))(v258, *(_QWORD *)(v199 + 56) + *(_QWORD *)(v283 + 72) * v200);
          v206 = 0;
        }
        else
        {
          v205 = v201;
          v206 = 1;
          v204 = (uint64_t)v258;
        }
      }
      else
      {
        v205 = v187;
        v206 = 1;
        v204 = (uint64_t)v258;
        v202 = v295;
      }
      v207 = v283;
      (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(v283 + 56))(v204, v206, 1, v205);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, char *))(v207 + 48))(v204, 1, v205))
      {
        v224 = v251;
        (*(void (**)(char *, uint64_t, char *))(v207 + 16))(v251, v204, v205);
        outlined destroy of StocksKitCurrencyCache.Provider?(v204, &demangling cache variable for type metadata for Ref<PDFAnnotationElement>?);
        type metadata accessor for PaperDocument(0);
        lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
        v225 = (uint64_t)v252;
        Ref.subscript.getter();
        (*(void (**)(char *, char *))(v207 + 8))(v224, v205);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<PDFAnnotationElement.AnnotationShape>);
        CRRegister.wrappedValue.getter();
        v226 = v305;
        v227 = v306;
        v228 = v307;
        v229 = v308;
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<String>);
        CRRegister.wrappedValue.getter();
        v230 = (void *)MEMORY[0x1DF0E41AC](v309, v310);
        swift_bridgeObjectRelease();
        v105 = (unint64_t)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CanvasElementPDFAnnotation()), sel_initWithBounds_forType_withProperties_, v230, 0, v226, v227, v228, v229);

        v231 = (uint64_t)v268;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v281 + 56))(v268, 1, 1, v202);
        specialized PDFAnnotationElement.update<A>(use:ref:pdfAnnotation:capsule:options:)(0x8000000000000000, v231, (void *)v105);
        v232 = v231;
        v103 = v297;
        outlined destroy of StocksKitCurrencyCache.Provider?(v232, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
        outlined destroy of PKStrokeProperties(v225, (uint64_t (*)(_QWORD))type metadata accessor for PDFAnnotationElement);
        v69 = v205;
        v10 = v289;
        goto LABEL_97;
      }
      outlined destroy of StocksKitCurrencyCache.Provider?(v204, &demangling cache variable for type metadata for Ref<PDFAnnotationElement>?);
      v208 = *(_QWORD *)&v255[(_QWORD)v288];
      v69 = v205;
      v10 = v289;
      if (!v208)
        goto LABEL_96;
      v256 = v193;
      if (v208 >> 62)
      {
        swift_bridgeObjectRetain_n();
        v209 = _CocoaArrayWrapper.endIndex.getter();
      }
      else
      {
        v209 = *(_QWORD *)((v208 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
      }
      v69 = (char *)&demangling cache variable for type metadata for CRKeyPath?;
      if (!v209)
      {
LABEL_95:
        swift_bridgeObjectRelease_n();
        v69 = v257;
        v193 = v256;
LABEL_96:
        v105 = (unint64_t)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for CanvasElementPDFAnnotation()), sel_init);
        goto LABEL_97;
      }
      v294 = (char *)(v208 & 0xC000000000000001);
      v210 = 4;
      v293 = v208;
      v292 = (char *)v209;
      while (1)
      {
        if (v294)
          v211 = (id)MEMORY[0x1DF0E4D64](v210 - 4, v208);
        else
          v211 = *(id *)(v208 + 8 * v210);
        v105 = (unint64_t)v211;
        v212 = v210 - 3;
        if (__OFADD__(v210 - 4, 1))
        {
          __break(1u);
LABEL_108:
          __break(1u);
LABEL_109:
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          swift_bridgeObjectRetain();
          v106 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          goto LABEL_5;
        }
        v213 = type metadata accessor for CanvasElementPDFAnnotation();
        v214 = swift_dynamicCastClass();
        v290 = (char *)v213;
        if (v214)
        {
          v215 = v214 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId;
          swift_beginAccess();
          outlined init with copy of Ref<PKStrokeInheritedProperties>?(v215, v300, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v149 + 56))(v300, 1, 1, v198);
        }
        v216 = v298;
        (*(void (**)(uint64_t, char *, uint64_t))(v149 + 16))(v298, v296, v198);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v149 + 56))(v216, 0, 1, v198);
        v217 = v103 + *(int *)(v291 + 48);
        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v300, v103, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v216, v217, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        v218 = v103;
        v219 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v149 + 48);
        if (v219(v218, 1, v198) == 1)
          break;
        v220 = v277;
        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v218, v277, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        if (v219(v217, 1, v198) == 1)
        {
          (*(void (**)(uint64_t, uint64_t))(v301 + 8))(v220, v198);
          v10 = v289;
LABEL_80:
          v103 = v297;
          outlined destroy of StocksKitCurrencyCache.Provider?(v297, (uint64_t *)&demangling cache variable for type metadata for (CRKeyPath?, CRKeyPath?));
          v69 = (char *)&demangling cache variable for type metadata for CRKeyPath?;
          outlined destroy of StocksKitCurrencyCache.Provider?(v298, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
          outlined destroy of StocksKitCurrencyCache.Provider?(v300, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
          v208 = v293;
          goto LABEL_81;
        }
        v221 = v260;
        ((void (*)(char *, uint64_t, uint64_t))v270)(v260, v217, v198);
        v222 = dispatch thunk of static Equatable.== infix(_:_:)();
        v223 = *(void (**)(uint64_t, uint64_t))(v301 + 8);
        v223(v220, v198);
        v223((uint64_t)v221, v198);
        outlined destroy of StocksKitCurrencyCache.Provider?(v218, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v298, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v300, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        v103 = v218;
        v10 = v289;
        v208 = v293;
        if ((v222 & 1) != 0)
          goto LABEL_100;
LABEL_81:

        ++v210;
        v149 = v301;
        if ((char *)v212 == v292)
          goto LABEL_95;
      }
      if (v219(v217, 1, v198) == 1)
      {
        v103 = v297;
        outlined destroy of StocksKitCurrencyCache.Provider?(v297, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v298, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
        outlined destroy of StocksKitCurrencyCache.Provider?(v300, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
LABEL_100:
        swift_bridgeObjectRelease_n();
        v149 = v301;
        v69 = v257;
        v193 = v256;
LABEL_97:
        type metadata accessor for CanvasElementPDFAnnotation();
        v233 = swift_dynamicCastClass();
        if (v233)
        {
          v234 = v233;
          v235 = *(void (**)(char *, char *, uint64_t))(v149 + 16);
          v236 = (uint64_t)v254;
          v237 = v296;
          v238 = v299;
          v235(v254, v296, v299);
          v239 = v238;
          v149 = v301;
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v301 + 56))(v236, 0, 1, v239);
          v240 = v234 + OBJC_IVAR____TtC8PaperKit26CanvasElementPDFAnnotation_subelementId;
          swift_beginAccess();
          v105 = (unint64_t)(id)v105;
          outlined assign with take of Date?(v236, v240, (uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
          swift_endAccess();

          v184 = &selRef_insertAnnotation_atIndex_;
          v185 = v237;
          v69 = v257;
        }
        else
        {
          v184 = &selRef_insertAnnotation_atIndex_;
          v185 = v296;
        }
        v147 = v276;
LABEL_61:
        objc_msgSend(v288, *v184, v105, v193);

        (*(void (**)(char *, uint64_t))(v149 + 8))(v185, v299);
        v186 = *(_QWORD **)v10;
        v107 = v279;
        dispatch thunk of Collection.endIndex.getter();
        if (v186 == v304)
          break;
        continue;
      }
      goto LABEL_80;
    }
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(v147, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<CRKeyPath>>);
  v150 = v288;
  objc_msgSend(v288, sel_boundsForBox_, 0);
  v152 = v151;
  v154 = v153;
  v156 = v155;
  v158 = v157;
  v159 = objc_msgSend(v150, sel_annotations);
  v160 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v161 = v246;
  v162 = v244;
  v163 = v248;
  (*(void (**)(char *, uint64_t, uint64_t))(v246 + 16))(v244, v243, v248);
  (*(void (**)(char *, char *, uint64_t))(v161 + 32))(v247, v162, v163);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>, MEMORY[0x1E0D11DC0]);
  v164 = (uint64_t)v267;
  dispatch thunk of Sequence.makeIterator()();
  v165 = v245;
  v103 = v164 + *(int *)(v245 + 52);
  *(_QWORD *)v103 = v160;
  *(_QWORD *)(v103 + 8) = 0;
  v300 = *(int *)(v165 + 56);
  *(_BYTE *)(v164 + v300) = 0;
  v301 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator and conformance CROrderedSet<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator, MEMORY[0x1E0D11D70]);
  v166 = v281;
  v167 = v295;
  v299 = v103;
  while (1)
  {
    v174 = (uint64_t)v266;
    dispatch thunk of IteratorProtocol.next()();
    if (v286((char *)v174, 1, v167) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v174, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
      goto LABEL_105;
    }
    v69 = *(char **)(v166 + 32);
    v105 = (unint64_t)v265;
    ((void (*)(char *, uint64_t, uint64_t))v69)(v265, v174, v167);
    v176 = *(_QWORD *)v103;
    v175 = *(_QWORD *)(v103 + 8);
    if (*(_QWORD *)v103 >> 62)
      break;
    if (v175 == *(_QWORD *)((v176 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_104;
LABEL_47:
    if ((v176 & 0xC000000000000001) != 0)
    {
      v177 = (id)MEMORY[0x1DF0E4D64](v175, v176);
    }
    else
    {
      if ((v175 & 0x8000000000000000) != 0)
        goto LABEL_108;
      if (v175 >= *(_QWORD *)((v176 & 0xFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_110;
      v177 = *(id *)(v176 + 8 * v175 + 32);
    }
    v178 = v177;
    if (__OFADD__(v175, 1))
      goto LABEL_109;
    *(_QWORD *)(v103 + 8) = v175 + 1;
    v179 = *(int *)(v263 + 48);
    v180 = v262;
    ((void (*)(char *, unint64_t, uint64_t))v69)(v262, v105, v167);
    *(_QWORD *)&v180[v179] = v178;
    ((void (*)(char *, char *, uint64_t))v69)(v282, v180, v167);
    v181 = v280;
    if (v280 == 0x8000000000000000)
    {
      outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
      outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
      if (!PDFAnnotation.shouldMirrorAsPDFAnnotationElement()())
      {
        SharedTagged_9.tag.getter();
        v309 = v304;
        LOBYTE(v310) = LOBYTE(v305);
        v302 = 8;
        v303 = 0;
        lazy protocol witness table accessor for type TaggedCanvasElement.Enum and conformance TaggedCanvasElement.Enum();
        v182 = static CRExtensible.== infix(_:_:)();
        if (((v182 ^ objc_msgSend(v178, sel_shouldDisplay)) & 1) != 0)
          objc_msgSend(v178, sel_setShouldDisplay_, v182 & 1);
      }
    }
    else
    {
      outlined copy of PaperDocument.PDFDocumentUse(v280);
      outlined consume of PaperDocument.PDFDocumentUse(v181);
      outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
    }
    v10 = (char *)type metadata accessor for PaperDocument(0);
    v168 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
    v169 = v275;
    v170 = v282;
    SharedTagged_9.subscript.getter();
    v171 = v311;
    v172 = v312;
    __swift_project_boxed_opaque_existential_1(&v309, v311);
    v302 = v280;
    v166 = v281;
    v173 = (uint64_t)v268;
    (*(void (**)(char *, char *, uint64_t))(v281 + 16))(v268, v170, v295);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v166 + 56))(v173, 0, 1, v295);
    v313[0] = v152;
    v313[1] = v154;
    v313[2] = v156;
    v313[3] = v158;
    v314 = 0;
    outlined init with take of (key: Int, value: AnyCRValue)?(v264, (uint64_t)&v304, &demangling cache variable for type metadata for PaperRenderableOptions?);
    v167 = v295;
    (*(void (**)(unint64_t *, uint64_t, void *, _QWORD *, uint64_t, _QWORD **, char *, uint64_t, uint64_t, uint64_t))(v172 + 96))(&v302, v173, v178, v313, v169, &v304, v10, v168, v171, v172);

    outlined destroy of StocksKitCurrencyCache.Provider?(v173, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
    (*(void (**)(char *, uint64_t))(v166 + 8))(v170, v167);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v309);
    v164 = (uint64_t)v267;
    v103 = v299;
    if ((v267[v300] & 1) != 0)
      goto LABEL_106;
  }
  swift_bridgeObjectRetain();
  v183 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v175 != v183)
    goto LABEL_47;
LABEL_104:
  (*(void (**)(unint64_t, uint64_t))(v281 + 8))(v105, v167);
  v164 = (uint64_t)v267;
LABEL_105:
  *(_BYTE *)(v164 + v300) = 1;
LABEL_106:
  outlined destroy of StocksKitCurrencyCache.Provider?(v164, &demangling cache variable for type metadata for Zip2Sequence<CROrderedSet<SharedTagged_9<TaggedCanvasElement>>, [PDFAnnotation]>.Iterator);
  (*(void (**)(char *, uint64_t))(v278 + 8))(v250, v279);
  return swift_bridgeObjectRelease();
}

uint64_t specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[107] = v3;
  v4[106] = a3;
  v4[105] = a2;
  v4[104] = a1;
  v5 = type metadata accessor for PKDrawing();
  v4[108] = v5;
  v4[109] = *(_QWORD *)(v5 - 8);
  v4[110] = swift_task_alloc();
  v4[111] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  v4[112] = swift_task_alloc();
  v4[113] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v4[114] = v6;
  v4[115] = *(_QWORD *)(v6 - 8);
  v4[116] = swift_task_alloc();
  v7 = type metadata accessor for CRKeyPath();
  v4[117] = v7;
  v4[118] = *(_QWORD *)(v7 - 8);
  v4[119] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  v4[120] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v4[121] = v8;
  v4[122] = *(_QWORD *)(v8 - 8);
  v4[123] = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v4[124] = v9;
  v4[125] = *(_QWORD *)(v9 - 8);
  v4[126] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  v4[127] = swift_task_alloc();
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  v4[128] = v10;
  v4[129] = *(_QWORD *)(v10 - 8);
  v4[130] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[103] = v3;
  v4[102] = a3;
  v4[101] = a2;
  v4[100] = a1;
  v5 = type metadata accessor for PKDrawing();
  v4[104] = v5;
  v4[105] = *(_QWORD *)(v5 - 8);
  v4[106] = swift_task_alloc();
  v4[107] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  v4[108] = swift_task_alloc();
  v4[109] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v4[110] = v6;
  v4[111] = *(_QWORD *)(v6 - 8);
  v4[112] = swift_task_alloc();
  v7 = type metadata accessor for CRKeyPath();
  v4[113] = v7;
  v4[114] = *(_QWORD *)(v7 - 8);
  v4[115] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  v4[116] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v4[117] = v8;
  v4[118] = *(_QWORD *)(v8 - 8);
  v4[119] = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v4[120] = v9;
  v4[121] = *(_QWORD *)(v9 - 8);
  v4[122] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  v4[123] = swift_task_alloc();
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  v4[124] = v10;
  v4[125] = *(_QWORD *)(v10 - 8);
  v4[126] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[103] = v3;
  v4[102] = a3;
  v4[101] = a2;
  v4[100] = a1;
  v5 = type metadata accessor for PKDrawing();
  v4[104] = v5;
  v4[105] = *(_QWORD *)(v5 - 8);
  v4[106] = swift_task_alloc();
  v4[107] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PKDrawing?);
  v4[108] = swift_task_alloc();
  v4[109] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PKDrawingStruct>);
  v4[110] = v6;
  v4[111] = *(_QWORD *)(v6 - 8);
  v4[112] = swift_task_alloc();
  v7 = type metadata accessor for CRKeyPath();
  v4[113] = v7;
  v4[114] = *(_QWORD *)(v7 - 8);
  v4[115] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  v4[116] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
  v4[117] = v8;
  v4[118] = *(_QWORD *)(v8 - 8);
  v4[119] = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v4[120] = v9;
  v4[121] = *(_QWORD *)(v9 - 8);
  v4[122] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  v4[123] = swift_task_alloc();
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  v4[124] = v10;
  v4[125] = *(_QWORD *)(v10 - 8);
  v4[126] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:)()
{
  uint64_t v0;
  uint64_t v1;
  double Width;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat MinX;
  CGFloat MinY;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  CGContext *v13;
  CGAffineTransform *v14;
  CGContext *v15;
  CGFloat v16;
  double v17;
  double v18;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  CGFloat x;
  CGFloat y;
  CGFloat v34;
  CGFloat height;
  void *v36;
  void *v37;
  id v38;
  id v39;
  unsigned int (*v40)(uint64_t, uint64_t, uint64_t);
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  CGFloat v49;
  double v50;
  CGFloat v51;
  double v52;
  CGFloat v53;
  double v54;
  CGFloat v55;
  unsigned int (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  objc_class *v70;
  id v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  void *v77;
  void *v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  id v84;
  _QWORD *v85;
  char v86;
  char v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  char v91;
  CGAffineTransform *t2;
  CGAffineTransform *t2a;
  CGContext *v94;
  CGFloat v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t (*v101)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v102;
  CGAffineTransform v103;
  CGRect v104;
  CGRect v105;
  CGRect ClipBoundingBox;
  CGRect v107;
  CGRect v108;

  v1 = *(_QWORD *)(v0 + 848);
  CGContextSaveGState(*(CGContextRef *)(v0 + 832));
  LOBYTE(v1) = *(_BYTE *)(v1 + 16);
  v98 = type metadata accessor for Paper();
  if ((v1 & 1) != 0)
  {
    v15 = *(CGContext **)(v0 + 832);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    v16 = *(double *)(v0 + 824);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    v17 = *(double *)(v0 + 680);
    v18 = *(double *)(v0 + 688);
    t2 = *(CGAffineTransform **)(v0 + 704);
    v95 = *(double *)(v0 + 696);
    CGAffineTransformMakeRotation(&v103, v16);
    a = v103.a;
    b = v103.b;
    c = v103.c;
    d = v103.d;
    *(CGFloat *)(v0 + 192) = v103.a;
    tx = v103.tx;
    ty = v103.ty;
    *(CGFloat *)(v0 + 200) = b;
    *(CGFloat *)(v0 + 208) = c;
    *(CGFloat *)(v0 + 216) = d;
    *(CGFloat *)(v0 + 224) = tx;
    *(CGFloat *)(v0 + 232) = ty;
    v104.origin.x = v17;
    v104.origin.y = v18;
    *(_QWORD *)&v104.size.height = t2;
    v104.size.width = v95;
    v105 = CGRectApplyAffineTransform(v104, (CGAffineTransform *)(v0 + 192));
    CGAffineTransformMakeTranslation(&v103, v17 - v105.origin.x, v18 - v105.origin.y);
    v25 = *(_OWORD *)&v103.c;
    v26 = *(_OWORD *)&v103.tx;
    *(_OWORD *)(v0 + 96) = *(_OWORD *)&v103.a;
    *(CGFloat *)(v0 + 144) = a;
    *(CGFloat *)(v0 + 152) = b;
    *(CGFloat *)(v0 + 160) = c;
    *(CGFloat *)(v0 + 168) = d;
    *(CGFloat *)(v0 + 176) = tx;
    *(CGFloat *)(v0 + 184) = ty;
    *(_OWORD *)(v0 + 112) = v25;
    *(_OWORD *)(v0 + 128) = v26;
    CGAffineTransformConcat(&v103, (CGAffineTransform *)(v0 + 144), (CGAffineTransform *)(v0 + 96));
    v27 = *(_OWORD *)&v103.c;
    v28 = *(_OWORD *)&v103.tx;
    *(_OWORD *)(v0 + 240) = *(_OWORD *)&v103.a;
    *(_OWORD *)(v0 + 256) = v27;
    *(_OWORD *)(v0 + 272) = v28;
    v13 = v15;
    v14 = (CGAffineTransform *)(v0 + 240);
  }
  else
  {
    v94 = *(CGContext **)(v0 + 832);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    Width = CGRectGetWidth(*(CGRect *)(v0 + 648));
    CRRegister.wrappedValue.getter();
    v3 = CGRectGetWidth(*(CGRect *)(v0 + 744));
    CGAffineTransformMakeScale(&v103, Width / v3, Width / v3);
    v88 = *(_OWORD *)&v103.c;
    v90 = *(_OWORD *)&v103.a;
    v4 = v103.tx;
    v5 = v103.ty;
    CRRegister.wrappedValue.getter();
    MinX = CGRectGetMinX(*(CGRect *)(v0 + 712));
    CRRegister.wrappedValue.getter();
    MinY = CGRectGetMinY(*(CGRect *)(v0 + 616));
    CGAffineTransformMakeTranslation(&v103, MinX, MinY);
    v8 = *(_OWORD *)&v103.a;
    v9 = *(_OWORD *)&v103.c;
    v10 = *(_OWORD *)&v103.tx;
    *(_OWORD *)(v0 + 288) = v90;
    *(_OWORD *)(v0 + 304) = v88;
    *(CGFloat *)(v0 + 320) = v4;
    *(CGFloat *)(v0 + 328) = v5;
    *(_OWORD *)(v0 + 336) = v8;
    *(_OWORD *)(v0 + 352) = v9;
    *(_OWORD *)(v0 + 368) = v10;
    CGAffineTransformConcat(&v103, (CGAffineTransform *)(v0 + 288), (CGAffineTransform *)(v0 + 336));
    v11 = *(_OWORD *)&v103.c;
    v12 = *(_OWORD *)&v103.tx;
    *(_OWORD *)(v0 + 384) = *(_OWORD *)&v103.a;
    *(_OWORD *)(v0 + 400) = v11;
    *(_OWORD *)(v0 + 416) = v12;
    v13 = v94;
    v14 = (CGAffineTransform *)(v0 + 384);
  }
  CGContextConcatCTM(v13, v14);
  v29 = *(_QWORD *)(v0 + 1016);
  v30 = *(_QWORD *)(v0 + 1000);
  v96 = *(_QWORD *)(v0 + 992);
  v31 = *(_QWORD *)(v0 + 848);
  ClipBoundingBox = CGContextGetClipBoundingBox((CGContextRef)*(_QWORD *)(v0 + 832));
  x = ClipBoundingBox.origin.x;
  y = ClipBoundingBox.origin.y;
  v34 = ClipBoundingBox.size.width;
  height = ClipBoundingBox.size.height;
  *(CGRect *)(v0 + 1048) = ClipBoundingBox;
  *(_BYTE *)(v0 + 91) = *(_BYTE *)v31;
  *(_BYTE *)(v0 + 92) = *(_BYTE *)(v31 + 1);
  *(_BYTE *)(v0 + 93) = *(_BYTE *)(v31 + 2);
  v36 = *(void **)(v31 + 8);
  *(_QWORD *)(v0 + 1080) = v36;
  v37 = *(void **)(v31 + 64);
  *(_QWORD *)(v0 + 1088) = v37;
  *(_BYTE *)(v0 + 94) = *(_BYTE *)(v31 + 72);
  *(_BYTE *)(v0 + 95) = *(_BYTE *)(v31 + 73);
  *(_BYTE *)(v0 + 545) = *(_BYTE *)(v31 + 74);
  outlined retain of PaperRenderableOptions(v31);
  v38 = v37;
  v39 = v36;
  *(_QWORD *)(v0 + 1096) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  *(_OWORD *)(v0 + 1104) = *(_OWORD *)(v0 + 584);
  *(_OWORD *)(v0 + 1120) = *(_OWORD *)(v0 + 600);
  *(_QWORD *)(v0 + 1136) = v98;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  CROrderedSet.makeIterator()();
  CROrderedSet.Iterator.next()();
  v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
  *(_QWORD *)(v0 + 1144) = v40;
  if (v40(v29, 1, v96) == 1)
  {
LABEL_8:
    v59 = *(void **)(v0 + 1088);
    v60 = *(void **)(v0 + 1080);
    v61 = *(_QWORD *)(v0 + 976);
    v62 = *(_QWORD *)(v0 + 968);
    v63 = *(_QWORD *)(v0 + 960);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1032) + 8))(*(_QWORD *)(v0 + 1040), *(_QWORD *)(v0 + 1024));

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
    CRRegister.wrappedValue.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v63, 1, v62) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 960), (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      v64 = *(void **)(v0 + 1088);
      v65 = *(void **)(v0 + 1080);
      CGContextRestoreGState(*(CGContextRef *)(v0 + 832));

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v67 = *(_QWORD *)(v0 + 928);
      v68 = *(_QWORD *)(v0 + 920);
      v69 = *(_QWORD *)(v0 + 912);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 976) + 32))(*(_QWORD *)(v0 + 984), *(_QWORD *)(v0 + 960), *(_QWORD *)(v0 + 968));
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>, MEMORY[0x1E0D12878]);
      Capsule.encapsulateTransient<A>(_:)();
      v70 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
      v71 = objc_allocWithZone(v70);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 16))((uint64_t)v71 + OBJC_IVAR___PKDrawingCoherence_model, v67, v69);
      *(_QWORD *)(v0 + 808) = v71;
      *(_QWORD *)(v0 + 816) = v70;
      v72 = objc_msgSendSuper2((objc_super *)(v0 + 808), sel_init);
      *(_QWORD *)(v0 + 1168) = v72;
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
      v73 = swift_task_alloc();
      *(_QWORD *)(v0 + 1176) = v73;
      *(_QWORD *)v73 = v0;
      *(_QWORD *)(v73 + 8) = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
      v74 = *(_QWORD *)(v0 + 832);
      v75 = *(_OWORD *)(v0 + 1048);
      v76 = *(_OWORD *)(v0 + 1064);
      *(int8x16_t *)(v73 + 104) = vextq_s8(*(int8x16_t *)(v0 + 848), *(int8x16_t *)(v0 + 848), 8uLL);
      *(_QWORD *)(v73 + 96) = v74;
      *(_OWORD *)(v73 + 64) = v75;
      *(_OWORD *)(v73 + 80) = v76;
      *(_QWORD *)(v73 + 56) = v72;
      return swift_task_switch();
    }
  }
  else
  {
    *(_QWORD *)(v0 + 1152) = *(_QWORD *)(*(_QWORD *)(v0 + 1000) + 32);
    *(CGFloat *)(v0 + 776) = x;
    *(CGFloat *)(v0 + 784) = y;
    *(CGFloat *)(v0 + 792) = v34;
    *(CGFloat *)(v0 + 800) = height;
    while (1)
    {
      v41 = *(double *)(v0 + 776);
      v42 = *(double *)(v0 + 784);
      v43 = *(double *)(v0 + 792);
      v44 = *(double *)(v0 + 800);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1152))(*(_QWORD *)(v0 + 1008), *(_QWORD *)(v0 + 1016), *(_QWORD *)(v0 + 992));
      v45 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
      SharedTagged_9.subscript.getter();
      v46 = *(_QWORD *)(v0 + 456);
      v47 = *(_QWORD *)(v0 + 464);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 432), v46);
      CRRegister.wrappedValue.getter();
      v48 = *(_OWORD *)(v0 + 568);
      *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 552);
      *(_OWORD *)(v0 + 528) = v48;
      *(_BYTE *)(v0 + 544) = 0;
      v49 = (*(double (**)(uint64_t, uint64_t, uint64_t))(v47 + 112))(v0 + 512, v46, v47);
      v51 = v50;
      v53 = v52;
      v55 = v54;
      __swift_destroy_boxed_opaque_existential_1(v0 + 432);
      v107.origin.x = v49;
      v107.origin.y = v51;
      v107.size.width = v53;
      v107.size.height = v55;
      v108.origin.x = v41;
      v108.origin.y = v42;
      v108.size.width = v43;
      v108.size.height = v44;
      if (CGRectIntersectsRect(v107, v108))
        break;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1000) + 8))(*(_QWORD *)(v0 + 1008), *(_QWORD *)(v0 + 992));
      v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1144);
      v57 = *(_QWORD *)(v0 + 1016);
      v58 = *(_QWORD *)(v0 + 992);
      CROrderedSet.Iterator.next()();
      if (v56(v57, 1, v58) == 1)
        goto LABEL_8;
    }
    v99 = *(_QWORD *)(v0 + 1128);
    t2a = *(CGAffineTransform **)(v0 + 1120);
    v89 = *(_OWORD *)(v0 + 1104);
    v100 = *(_BYTE *)(v0 + 545);
    v97 = *(_BYTE *)(v0 + 95);
    v91 = *(_BYTE *)(v0 + 94);
    v77 = *(void **)(v0 + 1088);
    v78 = *(void **)(v0 + 1080);
    v86 = *(_BYTE *)(v0 + 92);
    v87 = *(_BYTE *)(v0 + 93);
    v79 = *(_BYTE *)(v0 + 91);
    v80 = *(_QWORD *)(v0 + 992);
    SharedTagged_9.subscript.getter();
    v81 = *(_QWORD *)(v0 + 504);
    v102 = *(_QWORD *)(v0 + 496);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 472), v102);
    MEMORY[0x1DF0E3408](v80);
    *(_BYTE *)(v0 + 16) = v79;
    *(_BYTE *)(v0 + 17) = v86;
    *(_BYTE *)(v0 + 18) = v87;
    *(_QWORD *)(v0 + 24) = v78;
    *(_BYTE *)(v0 + 32) = 0;
    *(_OWORD *)(v0 + 40) = v89;
    *(_QWORD *)(v0 + 56) = t2a;
    *(_QWORD *)(v0 + 64) = v99;
    *(_BYTE *)(v0 + 72) = 0;
    *(_QWORD *)(v0 + 80) = v77;
    *(_BYTE *)(v0 + 88) = v91;
    *(_BYTE *)(v0 + 89) = v97;
    *(_BYTE *)(v0 + 90) = v100;
    v82 = *(_QWORD *)(v81 + 8);
    v101 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(**(int **)(v82 + 16) + *(_QWORD *)(v82 + 16));
    v83 = v78;
    v84 = v77;
    v85 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1160) = v85;
    *v85 = v0;
    v85[1] = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
    return v101(*(_QWORD *)(v0 + 832), *(_QWORD *)(v0 + 952), *(_QWORD *)(v0 + 840), v0 + 16, *(_QWORD *)(v0 + 1136), v45, v102, v82);
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(*(_QWORD *)v0 + 1088);
  v2 = *(void **)(*(_QWORD *)v0 + 1080);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 952);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 944);
  v5 = *(_QWORD *)(*(_QWORD *)v0 + 936);
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  return swift_task_switch();
}

{
  uint64_t v0;
  unsigned int (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  objc_class *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  void *v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  id v48;
  _QWORD *v49;
  char v50;
  void *v51;
  __int128 v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t (*v58)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t);
  CGRect v59;
  CGRect v60;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1000) + 8))(*(_QWORD *)(v0 + 1008), *(_QWORD *)(v0 + 992));
  __swift_destroy_boxed_opaque_existential_1(v0 + 472);
  v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1144);
  v2 = *(_QWORD *)(v0 + 1016);
  v3 = *(_QWORD *)(v0 + 992);
  CROrderedSet.Iterator.next()();
  if (v1(v2, 1, v3) == 1)
  {
LABEL_4:
    v22 = *(void **)(v0 + 1088);
    v23 = *(void **)(v0 + 1080);
    v24 = *(_QWORD *)(v0 + 976);
    v25 = *(_QWORD *)(v0 + 968);
    v26 = *(_QWORD *)(v0 + 960);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1032) + 8))(*(_QWORD *)(v0 + 1040), *(_QWORD *)(v0 + 1024));

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
    CRRegister.wrappedValue.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v26, 1, v25) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 960), (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      v27 = *(void **)(v0 + 1088);
      v28 = *(void **)(v0 + 1080);
      CGContextRestoreGState(*(CGContextRef *)(v0 + 832));

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v30 = *(_QWORD *)(v0 + 928);
      v31 = *(_QWORD *)(v0 + 920);
      v32 = *(_QWORD *)(v0 + 912);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 976) + 32))(*(_QWORD *)(v0 + 984), *(_QWORD *)(v0 + 960), *(_QWORD *)(v0 + 968));
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<Paper>);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>, MEMORY[0x1E0D12878]);
      Capsule.encapsulateTransient<A>(_:)();
      v33 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
      v34 = objc_allocWithZone(v33);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))((uint64_t)v34 + OBJC_IVAR___PKDrawingCoherence_model, v30, v32);
      *(_QWORD *)(v0 + 808) = v34;
      *(_QWORD *)(v0 + 816) = v33;
      v35 = objc_msgSendSuper2((objc_super *)(v0 + 808), sel_init);
      *(_QWORD *)(v0 + 1168) = v35;
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
      v36 = swift_task_alloc();
      *(_QWORD *)(v0 + 1176) = v36;
      *(_QWORD *)v36 = v0;
      *(_QWORD *)(v36 + 8) = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
      v37 = *(_QWORD *)(v0 + 832);
      v38 = *(_OWORD *)(v0 + 1048);
      v39 = *(_OWORD *)(v0 + 1064);
      *(int8x16_t *)(v36 + 104) = vextq_s8(*(int8x16_t *)(v0 + 848), *(int8x16_t *)(v0 + 848), 8uLL);
      *(_QWORD *)(v36 + 96) = v37;
      *(_OWORD *)(v36 + 64) = v38;
      *(_OWORD *)(v36 + 80) = v39;
      *(_QWORD *)(v36 + 56) = v35;
      return swift_task_switch();
    }
  }
  else
  {
    while (1)
    {
      v4 = *(double *)(v0 + 776);
      v5 = *(double *)(v0 + 784);
      v6 = *(double *)(v0 + 792);
      v7 = *(double *)(v0 + 800);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1152))(*(_QWORD *)(v0 + 1008), *(_QWORD *)(v0 + 1016), *(_QWORD *)(v0 + 992));
      v8 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Paper and conformance Paper, (uint64_t (*)(uint64_t))type metadata accessor for Paper, (uint64_t)&protocol conformance descriptor for Paper);
      SharedTagged_9.subscript.getter();
      v9 = *(_QWORD *)(v0 + 456);
      v10 = *(_QWORD *)(v0 + 464);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 432), v9);
      CRRegister.wrappedValue.getter();
      v11 = *(_OWORD *)(v0 + 568);
      *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 552);
      *(_OWORD *)(v0 + 528) = v11;
      *(_BYTE *)(v0 + 544) = 0;
      v12 = (*(double (**)(uint64_t, uint64_t, uint64_t))(v10 + 112))(v0 + 512, v9, v10);
      v14 = v13;
      v16 = v15;
      v18 = v17;
      __swift_destroy_boxed_opaque_existential_1(v0 + 432);
      v59.origin.x = v12;
      v59.origin.y = v14;
      v59.size.width = v16;
      v59.size.height = v18;
      v60.origin.x = v4;
      v60.origin.y = v5;
      v60.size.width = v6;
      v60.size.height = v7;
      if (CGRectIntersectsRect(v59, v60))
        break;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1000) + 8))(*(_QWORD *)(v0 + 1008), *(_QWORD *)(v0 + 992));
      v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1144);
      v20 = *(_QWORD *)(v0 + 1016);
      v21 = *(_QWORD *)(v0 + 992);
      CROrderedSet.Iterator.next()();
      if (v19(v20, 1, v21) == 1)
        goto LABEL_4;
    }
    v56 = *(_QWORD *)(v0 + 1128);
    v54 = *(_QWORD *)(v0 + 1120);
    v52 = *(_OWORD *)(v0 + 1104);
    v57 = *(_BYTE *)(v0 + 545);
    v55 = *(_BYTE *)(v0 + 95);
    v53 = *(_BYTE *)(v0 + 94);
    v51 = *(void **)(v0 + 1088);
    v40 = *(void **)(v0 + 1080);
    v50 = *(_BYTE *)(v0 + 93);
    v41 = *(_BYTE *)(v0 + 92);
    v42 = *(_BYTE *)(v0 + 91);
    v43 = *(_QWORD *)(v0 + 992);
    SharedTagged_9.subscript.getter();
    v44 = *(_QWORD *)(v0 + 504);
    v45 = *(_QWORD *)(v0 + 496);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 472), v45);
    MEMORY[0x1DF0E3408](v43);
    *(_BYTE *)(v0 + 16) = v42;
    *(_BYTE *)(v0 + 17) = v41;
    *(_BYTE *)(v0 + 18) = v50;
    *(_QWORD *)(v0 + 24) = v40;
    *(_BYTE *)(v0 + 32) = 0;
    *(_OWORD *)(v0 + 40) = v52;
    *(_QWORD *)(v0 + 56) = v54;
    *(_QWORD *)(v0 + 64) = v56;
    *(_BYTE *)(v0 + 72) = 0;
    *(_QWORD *)(v0 + 80) = v51;
    *(_BYTE *)(v0 + 88) = v53;
    *(_BYTE *)(v0 + 89) = v55;
    *(_BYTE *)(v0 + 90) = v57;
    v46 = *(_QWORD *)(v44 + 8);
    v58 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(**(int **)(v46 + 16) + *(_QWORD *)(v46 + 16));
    v47 = v40;
    v48 = v51;
    v49 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1160) = v49;
    *v49 = v0;
    v49[1] = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
    return v58(*(_QWORD *)(v0 + 832), *(_QWORD *)(v0 + 952), *(_QWORD *)(v0 + 840), v0 + 16, *(_QWORD *)(v0 + 1136), v8, v45, v46);
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = v0[146];
  v2 = v0[106];
  v3 = objc_msgSend((id)objc_opt_self(), sel_sharedCache);
  v0[148] = v3;
  v4 = (_QWORD *)swift_task_alloc();
  v0[149] = v4;
  v4[2] = v3;
  v4[3] = v1;
  v4[4] = v2;
  v5 = (_QWORD *)swift_task_alloc();
  v0[150] = v5;
  *v5 = v0;
  v5[1] = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  PKDrawing *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;

  v1 = *(_QWORD *)(v0 + 896);
  v2 = *(_QWORD *)(v0 + 872);
  v3 = *(_QWORD *)(v0 + 864);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(*(_QWORD *)(v0 + 904), v1, &demangling cache variable for type metadata for PKDrawing?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    v4 = *(void **)(v0 + 1168);
    v5 = *(_QWORD *)(v0 + 984);
    v6 = *(_QWORD *)(v0 + 976);
    v7 = *(_QWORD *)(v0 + 968);
    v8 = *(_QWORD *)(v0 + 904);
    v9 = *(_QWORD *)(v0 + 896);

    outlined destroy of StocksKitCurrencyCache.Provider?(v8, &demangling cache variable for type metadata for PKDrawing?);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    outlined destroy of StocksKitCurrencyCache.Provider?(v9, &demangling cache variable for type metadata for PKDrawing?);
    v10 = *(void **)(v0 + 1088);
    v11 = *(void **)(v0 + 1080);
    CGContextRestoreGState(*(CGContextRef *)(v0 + 832));

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 872) + 32))(*(_QWORD *)(v0 + 880), *(_QWORD *)(v0 + 896), *(_QWORD *)(v0 + 864));
    PKDrawing._bridgeToObjectiveC()(v13);
    v15 = v14;
    *(_QWORD *)(v0 + 1208) = v14;
    v16 = swift_task_alloc();
    *(_QWORD *)(v0 + 1216) = v16;
    *(_QWORD *)v16 = v0;
    *(_QWORD *)(v16 + 8) = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
    v17 = *(_QWORD *)(v0 + 832);
    v18 = *(_OWORD *)(v0 + 1048);
    v19 = *(_OWORD *)(v0 + 1064);
    *(int8x16_t *)(v16 + 104) = vextq_s8(*(int8x16_t *)(v0 + 848), *(int8x16_t *)(v0 + 848), 8uLL);
    *(_QWORD *)(v16 + 96) = v17;
    *(_OWORD *)(v16 + 64) = v18;
    *(_OWORD *)(v16 + 80) = v19;
    *(_QWORD *)(v16 + 56) = v15;
    return swift_task_switch();
  }
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 1208);
  swift_task_dealloc();

  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v1 = *(void **)(v0 + 1168);
  v2 = *(_QWORD *)(v0 + 984);
  v3 = *(_QWORD *)(v0 + 976);
  v4 = *(_QWORD *)(v0 + 968);
  v5 = *(_QWORD *)(v0 + 904);
  v6 = *(_QWORD *)(v0 + 880);
  v7 = *(_QWORD *)(v0 + 872);
  v8 = *(_QWORD *)(v0 + 864);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  outlined destroy of StocksKitCurrencyCache.Provider?(v5, &demangling cache variable for type metadata for PKDrawing?);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v9 = *(void **)(v0 + 1088);
  v10 = *(void **)(v0 + 1080);
  CGContextRestoreGState(*(CGContextRef *)(v0 + 832));

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  double Width;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat MinX;
  CGFloat MinY;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  CGContext *v13;
  CGAffineTransform *v14;
  CGContext *v15;
  CGFloat v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  CGAffineTransform *v22;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  CGFloat x;
  CGFloat y;
  CGFloat v38;
  CGFloat height;
  void *v40;
  void *v41;
  id v42;
  id v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  CGFloat v45;
  CGFloat v46;
  CGFloat v47;
  CGFloat v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  CGFloat v53;
  double v54;
  CGFloat v55;
  double v56;
  CGFloat v57;
  double v58;
  CGFloat v59;
  unsigned int (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  void *v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  objc_class *v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  void *v81;
  void *v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  id v88;
  _QWORD *v89;
  char v90;
  char v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  char v95;
  CGAffineTransform *t2;
  CGAffineTransform *t2a;
  CGContext *v98;
  CGFloat v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t (*v105)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v106;
  CGAffineTransform v107;
  CGRect v108;
  CGRect v109;
  CGRect ClipBoundingBox;
  CGRect v111;
  CGRect v112;

  v1 = *(_QWORD *)(v0 + 816);
  CGContextSaveGState(*(CGContextRef *)(v0 + 800));
  LOBYTE(v1) = *(_BYTE *)(v1 + 16);
  v102 = type metadata accessor for Image();
  if ((v1 & 1) != 0)
  {
    v15 = *(CGContext **)(v0 + 800);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    v16 = *(double *)(v0 + 792);
    Image.pdfContentsBounds.getter();
    v18 = v17;
    v20 = v19;
    t2 = v22;
    v99 = v21;
    CGAffineTransformMakeRotation(&v107, v16);
    a = v107.a;
    b = v107.b;
    c = v107.c;
    d = v107.d;
    *(CGFloat *)(v0 + 192) = v107.a;
    tx = v107.tx;
    ty = v107.ty;
    *(CGFloat *)(v0 + 200) = b;
    *(CGFloat *)(v0 + 208) = c;
    *(CGFloat *)(v0 + 216) = d;
    *(CGFloat *)(v0 + 224) = tx;
    *(CGFloat *)(v0 + 232) = ty;
    v108.origin.x = v18;
    v108.origin.y = v20;
    *(_QWORD *)&v108.size.height = t2;
    v108.size.width = v99;
    v109 = CGRectApplyAffineTransform(v108, (CGAffineTransform *)(v0 + 192));
    CGAffineTransformMakeTranslation(&v107, v18 - v109.origin.x, v20 - v109.origin.y);
    v29 = *(_OWORD *)&v107.c;
    v30 = *(_OWORD *)&v107.tx;
    *(_OWORD *)(v0 + 96) = *(_OWORD *)&v107.a;
    *(CGFloat *)(v0 + 144) = a;
    *(CGFloat *)(v0 + 152) = b;
    *(CGFloat *)(v0 + 160) = c;
    *(CGFloat *)(v0 + 168) = d;
    *(CGFloat *)(v0 + 176) = tx;
    *(CGFloat *)(v0 + 184) = ty;
    *(_OWORD *)(v0 + 112) = v29;
    *(_OWORD *)(v0 + 128) = v30;
    CGAffineTransformConcat(&v107, (CGAffineTransform *)(v0 + 144), (CGAffineTransform *)(v0 + 96));
    v31 = *(_OWORD *)&v107.c;
    v32 = *(_OWORD *)&v107.tx;
    *(_OWORD *)(v0 + 240) = *(_OWORD *)&v107.a;
    *(_OWORD *)(v0 + 256) = v31;
    *(_OWORD *)(v0 + 272) = v32;
    v13 = v15;
    v14 = (CGAffineTransform *)(v0 + 240);
  }
  else
  {
    v98 = *(CGContext **)(v0 + 800);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    Width = CGRectGetWidth(*(CGRect *)(v0 + 648));
    CRRegister.wrappedValue.getter();
    v3 = CGRectGetWidth(*(CGRect *)(v0 + 712));
    CGAffineTransformMakeScale(&v107, Width / v3, Width / v3);
    v92 = *(_OWORD *)&v107.c;
    v94 = *(_OWORD *)&v107.a;
    v4 = v107.tx;
    v5 = v107.ty;
    CRRegister.wrappedValue.getter();
    MinX = CGRectGetMinX(*(CGRect *)(v0 + 680));
    CRRegister.wrappedValue.getter();
    MinY = CGRectGetMinY(*(CGRect *)(v0 + 616));
    CGAffineTransformMakeTranslation(&v107, MinX, MinY);
    v8 = *(_OWORD *)&v107.a;
    v9 = *(_OWORD *)&v107.c;
    v10 = *(_OWORD *)&v107.tx;
    *(_OWORD *)(v0 + 288) = v94;
    *(_OWORD *)(v0 + 304) = v92;
    *(CGFloat *)(v0 + 320) = v4;
    *(CGFloat *)(v0 + 328) = v5;
    *(_OWORD *)(v0 + 336) = v8;
    *(_OWORD *)(v0 + 352) = v9;
    *(_OWORD *)(v0 + 368) = v10;
    CGAffineTransformConcat(&v107, (CGAffineTransform *)(v0 + 288), (CGAffineTransform *)(v0 + 336));
    v11 = *(_OWORD *)&v107.c;
    v12 = *(_OWORD *)&v107.tx;
    *(_OWORD *)(v0 + 384) = *(_OWORD *)&v107.a;
    *(_OWORD *)(v0 + 400) = v11;
    *(_OWORD *)(v0 + 416) = v12;
    v13 = v98;
    v14 = (CGAffineTransform *)(v0 + 384);
  }
  CGContextConcatCTM(v13, v14);
  v33 = *(_QWORD *)(v0 + 984);
  v34 = *(_QWORD *)(v0 + 968);
  v100 = *(_QWORD *)(v0 + 960);
  v35 = *(_QWORD *)(v0 + 816);
  ClipBoundingBox = CGContextGetClipBoundingBox((CGContextRef)*(_QWORD *)(v0 + 800));
  x = ClipBoundingBox.origin.x;
  y = ClipBoundingBox.origin.y;
  v38 = ClipBoundingBox.size.width;
  height = ClipBoundingBox.size.height;
  *(CGRect *)(v0 + 1016) = ClipBoundingBox;
  *(_BYTE *)(v0 + 91) = *(_BYTE *)v35;
  *(_BYTE *)(v0 + 92) = *(_BYTE *)(v35 + 1);
  *(_BYTE *)(v0 + 93) = *(_BYTE *)(v35 + 2);
  v40 = *(void **)(v35 + 8);
  *(_QWORD *)(v0 + 1048) = v40;
  v41 = *(void **)(v35 + 64);
  *(_QWORD *)(v0 + 1056) = v41;
  *(_BYTE *)(v0 + 94) = *(_BYTE *)(v35 + 72);
  *(_BYTE *)(v0 + 95) = *(_BYTE *)(v35 + 73);
  *(_BYTE *)(v0 + 545) = *(_BYTE *)(v35 + 74);
  outlined retain of PaperRenderableOptions(v35);
  v42 = v41;
  v43 = v40;
  *(_QWORD *)(v0 + 1064) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  *(_OWORD *)(v0 + 1072) = *(_OWORD *)(v0 + 584);
  *(_OWORD *)(v0 + 1088) = *(_OWORD *)(v0 + 600);
  *(_QWORD *)(v0 + 1104) = v102;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  CROrderedSet.makeIterator()();
  CROrderedSet.Iterator.next()();
  v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  *(_QWORD *)(v0 + 1112) = v44;
  if (v44(v33, 1, v100) == 1)
  {
LABEL_8:
    v63 = *(void **)(v0 + 1056);
    v64 = *(void **)(v0 + 1048);
    v65 = *(_QWORD *)(v0 + 944);
    v66 = *(_QWORD *)(v0 + 936);
    v67 = *(_QWORD *)(v0 + 928);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1000) + 8))(*(_QWORD *)(v0 + 1008), *(_QWORD *)(v0 + 992));

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
    CRRegister.wrappedValue.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v67, 1, v66) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 928), (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      v68 = *(void **)(v0 + 1056);
      v69 = *(void **)(v0 + 1048);
      CGContextRestoreGState(*(CGContextRef *)(v0 + 800));

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v71 = *(_QWORD *)(v0 + 896);
      v72 = *(_QWORD *)(v0 + 888);
      v73 = *(_QWORD *)(v0 + 880);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 944) + 32))(*(_QWORD *)(v0 + 952), *(_QWORD *)(v0 + 928), *(_QWORD *)(v0 + 936));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>, MEMORY[0x1E0D12878]);
      Capsule.encapsulateTransient<A>(_:)();
      v74 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
      v75 = objc_allocWithZone(v74);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 16))((uint64_t)v75 + OBJC_IVAR___PKDrawingCoherence_model, v71, v73);
      *(_QWORD *)(v0 + 776) = v75;
      *(_QWORD *)(v0 + 784) = v74;
      v76 = objc_msgSendSuper2((objc_super *)(v0 + 776), sel_init);
      *(_QWORD *)(v0 + 1136) = v76;
      (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v71, v73);
      v77 = swift_task_alloc();
      *(_QWORD *)(v0 + 1144) = v77;
      *(_QWORD *)v77 = v0;
      *(_QWORD *)(v77 + 8) = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
      v78 = *(_QWORD *)(v0 + 800);
      v79 = *(_OWORD *)(v0 + 1016);
      v80 = *(_OWORD *)(v0 + 1032);
      *(int8x16_t *)(v77 + 104) = vextq_s8(*(int8x16_t *)(v0 + 816), *(int8x16_t *)(v0 + 816), 8uLL);
      *(_QWORD *)(v77 + 96) = v78;
      *(_OWORD *)(v77 + 64) = v79;
      *(_OWORD *)(v77 + 80) = v80;
      *(_QWORD *)(v77 + 56) = v76;
      return swift_task_switch();
    }
  }
  else
  {
    *(_QWORD *)(v0 + 1120) = *(_QWORD *)(*(_QWORD *)(v0 + 968) + 32);
    *(CGFloat *)(v0 + 744) = x;
    *(CGFloat *)(v0 + 752) = y;
    *(CGFloat *)(v0 + 760) = v38;
    *(CGFloat *)(v0 + 768) = height;
    while (1)
    {
      v45 = *(double *)(v0 + 744);
      v46 = *(double *)(v0 + 752);
      v47 = *(double *)(v0 + 760);
      v48 = *(double *)(v0 + 768);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1120))(*(_QWORD *)(v0 + 976), *(_QWORD *)(v0 + 984), *(_QWORD *)(v0 + 960));
      v49 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
      SharedTagged_9.subscript.getter();
      v50 = *(_QWORD *)(v0 + 496);
      v51 = *(_QWORD *)(v0 + 504);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 472), v50);
      CRRegister.wrappedValue.getter();
      v52 = *(_OWORD *)(v0 + 568);
      *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 552);
      *(_OWORD *)(v0 + 528) = v52;
      *(_BYTE *)(v0 + 544) = 0;
      v53 = (*(double (**)(uint64_t, uint64_t, uint64_t))(v51 + 112))(v0 + 512, v50, v51);
      v55 = v54;
      v57 = v56;
      v59 = v58;
      __swift_destroy_boxed_opaque_existential_1(v0 + 472);
      v111.origin.x = v53;
      v111.origin.y = v55;
      v111.size.width = v57;
      v111.size.height = v59;
      v112.origin.x = v45;
      v112.origin.y = v46;
      v112.size.width = v47;
      v112.size.height = v48;
      if (CGRectIntersectsRect(v111, v112))
        break;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 968) + 8))(*(_QWORD *)(v0 + 976), *(_QWORD *)(v0 + 960));
      v60 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1112);
      v61 = *(_QWORD *)(v0 + 984);
      v62 = *(_QWORD *)(v0 + 960);
      CROrderedSet.Iterator.next()();
      if (v60(v61, 1, v62) == 1)
        goto LABEL_8;
    }
    v103 = *(_QWORD *)(v0 + 1096);
    t2a = *(CGAffineTransform **)(v0 + 1088);
    v93 = *(_OWORD *)(v0 + 1072);
    v104 = *(_BYTE *)(v0 + 545);
    v101 = *(_BYTE *)(v0 + 95);
    v95 = *(_BYTE *)(v0 + 94);
    v81 = *(void **)(v0 + 1056);
    v82 = *(void **)(v0 + 1048);
    v90 = *(_BYTE *)(v0 + 92);
    v91 = *(_BYTE *)(v0 + 93);
    v83 = *(_BYTE *)(v0 + 91);
    v84 = *(_QWORD *)(v0 + 960);
    SharedTagged_9.subscript.getter();
    v85 = *(_QWORD *)(v0 + 464);
    v106 = *(_QWORD *)(v0 + 456);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 432), v106);
    MEMORY[0x1DF0E3408](v84);
    *(_BYTE *)(v0 + 16) = v83;
    *(_BYTE *)(v0 + 17) = v90;
    *(_BYTE *)(v0 + 18) = v91;
    *(_QWORD *)(v0 + 24) = v82;
    *(_BYTE *)(v0 + 32) = 0;
    *(_OWORD *)(v0 + 40) = v93;
    *(_QWORD *)(v0 + 56) = t2a;
    *(_QWORD *)(v0 + 64) = v103;
    *(_BYTE *)(v0 + 72) = 0;
    *(_QWORD *)(v0 + 80) = v81;
    *(_BYTE *)(v0 + 88) = v95;
    *(_BYTE *)(v0 + 89) = v101;
    *(_BYTE *)(v0 + 90) = v104;
    v86 = *(_QWORD *)(v85 + 8);
    v105 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(**(int **)(v86 + 16) + *(_QWORD *)(v86 + 16));
    v87 = v82;
    v88 = v81;
    v89 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1128) = v89;
    *v89 = v0;
    v89[1] = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
    return v105(*(_QWORD *)(v0 + 800), *(_QWORD *)(v0 + 920), *(_QWORD *)(v0 + 808), v0 + 16, *(_QWORD *)(v0 + 1104), v49, v106, v86);
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(*(_QWORD *)v0 + 1056);
  v2 = *(void **)(*(_QWORD *)v0 + 1048);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 920);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 912);
  v5 = *(_QWORD *)(*(_QWORD *)v0 + 904);
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  return swift_task_switch();
}

{
  uint64_t v0;
  unsigned int (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  objc_class *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  void *v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  id v48;
  _QWORD *v49;
  char v50;
  void *v51;
  __int128 v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t (*v58)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t);
  CGRect v59;
  CGRect v60;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 968) + 8))(*(_QWORD *)(v0 + 976), *(_QWORD *)(v0 + 960));
  __swift_destroy_boxed_opaque_existential_1(v0 + 432);
  v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1112);
  v2 = *(_QWORD *)(v0 + 984);
  v3 = *(_QWORD *)(v0 + 960);
  CROrderedSet.Iterator.next()();
  if (v1(v2, 1, v3) == 1)
  {
LABEL_4:
    v22 = *(void **)(v0 + 1056);
    v23 = *(void **)(v0 + 1048);
    v24 = *(_QWORD *)(v0 + 944);
    v25 = *(_QWORD *)(v0 + 936);
    v26 = *(_QWORD *)(v0 + 928);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1000) + 8))(*(_QWORD *)(v0 + 1008), *(_QWORD *)(v0 + 992));

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
    CRRegister.wrappedValue.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v26, 1, v25) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 928), (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      v27 = *(void **)(v0 + 1056);
      v28 = *(void **)(v0 + 1048);
      CGContextRestoreGState(*(CGContextRef *)(v0 + 800));

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v30 = *(_QWORD *)(v0 + 896);
      v31 = *(_QWORD *)(v0 + 888);
      v32 = *(_QWORD *)(v0 + 880);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 944) + 32))(*(_QWORD *)(v0 + 952), *(_QWORD *)(v0 + 928), *(_QWORD *)(v0 + 936));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<Image>);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>, MEMORY[0x1E0D12878]);
      Capsule.encapsulateTransient<A>(_:)();
      v33 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
      v34 = objc_allocWithZone(v33);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))((uint64_t)v34 + OBJC_IVAR___PKDrawingCoherence_model, v30, v32);
      *(_QWORD *)(v0 + 776) = v34;
      *(_QWORD *)(v0 + 784) = v33;
      v35 = objc_msgSendSuper2((objc_super *)(v0 + 776), sel_init);
      *(_QWORD *)(v0 + 1136) = v35;
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
      v36 = swift_task_alloc();
      *(_QWORD *)(v0 + 1144) = v36;
      *(_QWORD *)v36 = v0;
      *(_QWORD *)(v36 + 8) = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
      v37 = *(_QWORD *)(v0 + 800);
      v38 = *(_OWORD *)(v0 + 1016);
      v39 = *(_OWORD *)(v0 + 1032);
      *(int8x16_t *)(v36 + 104) = vextq_s8(*(int8x16_t *)(v0 + 816), *(int8x16_t *)(v0 + 816), 8uLL);
      *(_QWORD *)(v36 + 96) = v37;
      *(_OWORD *)(v36 + 64) = v38;
      *(_OWORD *)(v36 + 80) = v39;
      *(_QWORD *)(v36 + 56) = v35;
      return swift_task_switch();
    }
  }
  else
  {
    while (1)
    {
      v4 = *(double *)(v0 + 744);
      v5 = *(double *)(v0 + 752);
      v6 = *(double *)(v0 + 760);
      v7 = *(double *)(v0 + 768);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1120))(*(_QWORD *)(v0 + 976), *(_QWORD *)(v0 + 984), *(_QWORD *)(v0 + 960));
      v8 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
      SharedTagged_9.subscript.getter();
      v9 = *(_QWORD *)(v0 + 496);
      v10 = *(_QWORD *)(v0 + 504);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 472), v9);
      CRRegister.wrappedValue.getter();
      v11 = *(_OWORD *)(v0 + 568);
      *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 552);
      *(_OWORD *)(v0 + 528) = v11;
      *(_BYTE *)(v0 + 544) = 0;
      v12 = (*(double (**)(uint64_t, uint64_t, uint64_t))(v10 + 112))(v0 + 512, v9, v10);
      v14 = v13;
      v16 = v15;
      v18 = v17;
      __swift_destroy_boxed_opaque_existential_1(v0 + 472);
      v59.origin.x = v12;
      v59.origin.y = v14;
      v59.size.width = v16;
      v59.size.height = v18;
      v60.origin.x = v4;
      v60.origin.y = v5;
      v60.size.width = v6;
      v60.size.height = v7;
      if (CGRectIntersectsRect(v59, v60))
        break;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 968) + 8))(*(_QWORD *)(v0 + 976), *(_QWORD *)(v0 + 960));
      v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1112);
      v20 = *(_QWORD *)(v0 + 984);
      v21 = *(_QWORD *)(v0 + 960);
      CROrderedSet.Iterator.next()();
      if (v19(v20, 1, v21) == 1)
        goto LABEL_4;
    }
    v56 = *(_QWORD *)(v0 + 1096);
    v54 = *(_QWORD *)(v0 + 1088);
    v52 = *(_OWORD *)(v0 + 1072);
    v57 = *(_BYTE *)(v0 + 545);
    v55 = *(_BYTE *)(v0 + 95);
    v53 = *(_BYTE *)(v0 + 94);
    v51 = *(void **)(v0 + 1056);
    v40 = *(void **)(v0 + 1048);
    v50 = *(_BYTE *)(v0 + 93);
    v41 = *(_BYTE *)(v0 + 92);
    v42 = *(_BYTE *)(v0 + 91);
    v43 = *(_QWORD *)(v0 + 960);
    SharedTagged_9.subscript.getter();
    v44 = *(_QWORD *)(v0 + 464);
    v45 = *(_QWORD *)(v0 + 456);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 432), v45);
    MEMORY[0x1DF0E3408](v43);
    *(_BYTE *)(v0 + 16) = v42;
    *(_BYTE *)(v0 + 17) = v41;
    *(_BYTE *)(v0 + 18) = v50;
    *(_QWORD *)(v0 + 24) = v40;
    *(_BYTE *)(v0 + 32) = 0;
    *(_OWORD *)(v0 + 40) = v52;
    *(_QWORD *)(v0 + 56) = v54;
    *(_QWORD *)(v0 + 64) = v56;
    *(_BYTE *)(v0 + 72) = 0;
    *(_QWORD *)(v0 + 80) = v51;
    *(_BYTE *)(v0 + 88) = v53;
    *(_BYTE *)(v0 + 89) = v55;
    *(_BYTE *)(v0 + 90) = v57;
    v46 = *(_QWORD *)(v44 + 8);
    v58 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(**(int **)(v46 + 16) + *(_QWORD *)(v46 + 16));
    v47 = v40;
    v48 = v51;
    v49 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1128) = v49;
    *v49 = v0;
    v49[1] = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
    return v58(*(_QWORD *)(v0 + 800), *(_QWORD *)(v0 + 920), *(_QWORD *)(v0 + 808), v0 + 16, *(_QWORD *)(v0 + 1104), v8, v45, v46);
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = v0[142];
  v2 = v0[102];
  v3 = objc_msgSend((id)objc_opt_self(), sel_sharedCache);
  v0[144] = v3;
  v4 = (_QWORD *)swift_task_alloc();
  v0[145] = v4;
  v4[2] = v3;
  v4[3] = v1;
  v4[4] = v2;
  v5 = (_QWORD *)swift_task_alloc();
  v0[146] = v5;
  *v5 = v0;
  v5[1] = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  PKDrawing *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;

  v1 = *(_QWORD *)(v0 + 864);
  v2 = *(_QWORD *)(v0 + 840);
  v3 = *(_QWORD *)(v0 + 832);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(*(_QWORD *)(v0 + 872), v1, &demangling cache variable for type metadata for PKDrawing?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    v4 = *(void **)(v0 + 1136);
    v5 = *(_QWORD *)(v0 + 952);
    v6 = *(_QWORD *)(v0 + 944);
    v7 = *(_QWORD *)(v0 + 936);
    v8 = *(_QWORD *)(v0 + 872);
    v9 = *(_QWORD *)(v0 + 864);

    outlined destroy of StocksKitCurrencyCache.Provider?(v8, &demangling cache variable for type metadata for PKDrawing?);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    outlined destroy of StocksKitCurrencyCache.Provider?(v9, &demangling cache variable for type metadata for PKDrawing?);
    v10 = *(void **)(v0 + 1056);
    v11 = *(void **)(v0 + 1048);
    CGContextRestoreGState(*(CGContextRef *)(v0 + 800));

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 840) + 32))(*(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 864), *(_QWORD *)(v0 + 832));
    PKDrawing._bridgeToObjectiveC()(v13);
    v15 = v14;
    *(_QWORD *)(v0 + 1176) = v14;
    v16 = swift_task_alloc();
    *(_QWORD *)(v0 + 1184) = v16;
    *(_QWORD *)v16 = v0;
    *(_QWORD *)(v16 + 8) = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
    v17 = *(_QWORD *)(v0 + 800);
    v18 = *(_OWORD *)(v0 + 1016);
    v19 = *(_OWORD *)(v0 + 1032);
    *(int8x16_t *)(v16 + 104) = vextq_s8(*(int8x16_t *)(v0 + 816), *(int8x16_t *)(v0 + 816), 8uLL);
    *(_QWORD *)(v16 + 96) = v17;
    *(_OWORD *)(v16 + 64) = v18;
    *(_OWORD *)(v16 + 80) = v19;
    *(_QWORD *)(v16 + 56) = v15;
    return swift_task_switch();
  }
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 1176);
  swift_task_dealloc();

  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  double Width;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat MinX;
  CGFloat MinY;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  CGContext *v13;
  CGAffineTransform *v14;
  CGContext *v15;
  CGFloat v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  CGAffineTransform *v22;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  CGFloat x;
  CGFloat y;
  CGFloat v38;
  CGFloat height;
  void *v40;
  void *v41;
  id v42;
  id v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  CGFloat v45;
  CGFloat v46;
  CGFloat v47;
  CGFloat v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  CGFloat v54;
  double v55;
  CGFloat v56;
  double v57;
  CGFloat v58;
  double v59;
  CGFloat v60;
  unsigned int (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  objc_class *v75;
  id v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  void *v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  id v88;
  _QWORD *v89;
  char v90;
  char v91;
  void *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  char v96;
  CGAffineTransform *t2;
  CGAffineTransform *t2a;
  CGContext *v99;
  CGFloat v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t (*v106)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v107;
  CGAffineTransform v108;
  CGRect v109;
  CGRect v110;
  CGRect ClipBoundingBox;
  CGRect v112;
  CGRect v113;

  v1 = *(_QWORD *)(v0 + 816);
  CGContextSaveGState(*(CGContextRef *)(v0 + 800));
  LOBYTE(v1) = *(_BYTE *)(v1 + 16);
  v103 = type metadata accessor for Image();
  if ((v1 & 1) != 0)
  {
    v15 = *(CGContext **)(v0 + 800);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
    CRRegister.wrappedValue.getter();
    v16 = *(double *)(v0 + 792);
    Image.pdfContentsBounds.getter();
    v18 = v17;
    v20 = v19;
    t2 = v22;
    v100 = v21;
    CGAffineTransformMakeRotation(&v108, v16);
    a = v108.a;
    b = v108.b;
    c = v108.c;
    d = v108.d;
    *(CGFloat *)(v0 + 192) = v108.a;
    tx = v108.tx;
    ty = v108.ty;
    *(CGFloat *)(v0 + 200) = b;
    *(CGFloat *)(v0 + 208) = c;
    *(CGFloat *)(v0 + 216) = d;
    *(CGFloat *)(v0 + 224) = tx;
    *(CGFloat *)(v0 + 232) = ty;
    v109.origin.x = v18;
    v109.origin.y = v20;
    *(_QWORD *)&v109.size.height = t2;
    v109.size.width = v100;
    v110 = CGRectApplyAffineTransform(v109, (CGAffineTransform *)(v0 + 192));
    CGAffineTransformMakeTranslation(&v108, v18 - v110.origin.x, v20 - v110.origin.y);
    v29 = *(_OWORD *)&v108.c;
    v30 = *(_OWORD *)&v108.tx;
    *(_OWORD *)(v0 + 96) = *(_OWORD *)&v108.a;
    *(CGFloat *)(v0 + 144) = a;
    *(CGFloat *)(v0 + 152) = b;
    *(CGFloat *)(v0 + 160) = c;
    *(CGFloat *)(v0 + 168) = d;
    *(CGFloat *)(v0 + 176) = tx;
    *(CGFloat *)(v0 + 184) = ty;
    *(_OWORD *)(v0 + 112) = v29;
    *(_OWORD *)(v0 + 128) = v30;
    CGAffineTransformConcat(&v108, (CGAffineTransform *)(v0 + 144), (CGAffineTransform *)(v0 + 96));
    v31 = *(_OWORD *)&v108.c;
    v32 = *(_OWORD *)&v108.tx;
    *(_OWORD *)(v0 + 240) = *(_OWORD *)&v108.a;
    *(_OWORD *)(v0 + 256) = v31;
    *(_OWORD *)(v0 + 272) = v32;
    v13 = v15;
    v14 = (CGAffineTransform *)(v0 + 240);
  }
  else
  {
    v99 = *(CGContext **)(v0 + 800);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    Width = CGRectGetWidth(*(CGRect *)(v0 + 648));
    CRRegister.wrappedValue.getter();
    v3 = CGRectGetWidth(*(CGRect *)(v0 + 712));
    CGAffineTransformMakeScale(&v108, Width / v3, Width / v3);
    v93 = *(_OWORD *)&v108.c;
    v95 = *(_OWORD *)&v108.a;
    v4 = v108.tx;
    v5 = v108.ty;
    CRRegister.wrappedValue.getter();
    MinX = CGRectGetMinX(*(CGRect *)(v0 + 680));
    CRRegister.wrappedValue.getter();
    MinY = CGRectGetMinY(*(CGRect *)(v0 + 616));
    CGAffineTransformMakeTranslation(&v108, MinX, MinY);
    v8 = *(_OWORD *)&v108.a;
    v9 = *(_OWORD *)&v108.c;
    v10 = *(_OWORD *)&v108.tx;
    *(_OWORD *)(v0 + 288) = v95;
    *(_OWORD *)(v0 + 304) = v93;
    *(CGFloat *)(v0 + 320) = v4;
    *(CGFloat *)(v0 + 328) = v5;
    *(_OWORD *)(v0 + 336) = v8;
    *(_OWORD *)(v0 + 352) = v9;
    *(_OWORD *)(v0 + 368) = v10;
    CGAffineTransformConcat(&v108, (CGAffineTransform *)(v0 + 288), (CGAffineTransform *)(v0 + 336));
    v11 = *(_OWORD *)&v108.c;
    v12 = *(_OWORD *)&v108.tx;
    *(_OWORD *)(v0 + 384) = *(_OWORD *)&v108.a;
    *(_OWORD *)(v0 + 400) = v11;
    *(_OWORD *)(v0 + 416) = v12;
    v13 = v99;
    v14 = (CGAffineTransform *)(v0 + 384);
  }
  CGContextConcatCTM(v13, v14);
  v33 = *(_QWORD *)(v0 + 984);
  v34 = *(_QWORD *)(v0 + 968);
  v101 = *(_QWORD *)(v0 + 960);
  v35 = *(_QWORD *)(v0 + 816);
  ClipBoundingBox = CGContextGetClipBoundingBox((CGContextRef)*(_QWORD *)(v0 + 800));
  x = ClipBoundingBox.origin.x;
  y = ClipBoundingBox.origin.y;
  v38 = ClipBoundingBox.size.width;
  height = ClipBoundingBox.size.height;
  *(CGRect *)(v0 + 1016) = ClipBoundingBox;
  *(_BYTE *)(v0 + 91) = *(_BYTE *)v35;
  *(_BYTE *)(v0 + 92) = *(_BYTE *)(v35 + 1);
  *(_BYTE *)(v0 + 93) = *(_BYTE *)(v35 + 2);
  v40 = *(void **)(v35 + 8);
  *(_QWORD *)(v0 + 1048) = v40;
  v41 = *(void **)(v35 + 64);
  *(_QWORD *)(v0 + 1056) = v41;
  *(_BYTE *)(v0 + 94) = *(_BYTE *)(v35 + 72);
  *(_BYTE *)(v0 + 95) = *(_BYTE *)(v35 + 73);
  *(_BYTE *)(v0 + 545) = *(_BYTE *)(v35 + 74);
  outlined retain of PaperRenderableOptions(v35);
  v42 = v41;
  v43 = v40;
  *(_QWORD *)(v0 + 1064) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
  CRRegister.wrappedValue.getter();
  *(_OWORD *)(v0 + 1072) = *(_OWORD *)(v0 + 584);
  *(_OWORD *)(v0 + 1088) = *(_OWORD *)(v0 + 600);
  *(_QWORD *)(v0 + 1104) = v103;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  CROrderedSet.makeIterator()();
  CROrderedSet.Iterator.next()();
  v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  *(_QWORD *)(v0 + 1112) = v44;
  if (v44(v33, 1, v101) == 1)
  {
LABEL_8:
    v64 = *(void **)(v0 + 1056);
    v65 = *(void **)(v0 + 1048);
    v66 = *(_QWORD *)(v0 + 944);
    v67 = *(_QWORD *)(v0 + 936);
    v68 = *(_QWORD *)(v0 + 928);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1000) + 8))(*(_QWORD *)(v0 + 1008), *(_QWORD *)(v0 + 992));

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
    CRRegister.wrappedValue.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v68, 1, v67) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 928), (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      v69 = *(void **)(v0 + 1056);
      v70 = *(void **)(v0 + 1048);
      CGContextRestoreGState(*(CGContextRef *)(v0 + 800));

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v72 = *(_QWORD *)(v0 + 896);
      v73 = *(_QWORD *)(v0 + 888);
      v74 = *(_QWORD *)(v0 + 880);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 944) + 32))(*(_QWORD *)(v0 + 952), *(_QWORD *)(v0 + 928), *(_QWORD *)(v0 + 936));
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>, MEMORY[0x1E0D12878]);
      Capsule.encapsulateTransient<A>(_:)();
      v75 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
      v76 = objc_allocWithZone(v75);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16))((uint64_t)v76 + OBJC_IVAR___PKDrawingCoherence_model, v72, v74);
      *(_QWORD *)(v0 + 776) = v76;
      *(_QWORD *)(v0 + 784) = v75;
      v77 = objc_msgSendSuper2((objc_super *)(v0 + 776), sel_init);
      *(_QWORD *)(v0 + 1136) = v77;
      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v72, v74);
      v78 = swift_task_alloc();
      *(_QWORD *)(v0 + 1144) = v78;
      *(_QWORD *)v78 = v0;
      *(_QWORD *)(v78 + 8) = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
      v79 = *(_QWORD *)(v0 + 800);
      v80 = *(_OWORD *)(v0 + 1016);
      v81 = *(_OWORD *)(v0 + 1032);
      *(int8x16_t *)(v78 + 104) = vextq_s8(*(int8x16_t *)(v0 + 816), *(int8x16_t *)(v0 + 816), 8uLL);
      *(_QWORD *)(v78 + 96) = v79;
      *(_OWORD *)(v78 + 64) = v80;
      *(_OWORD *)(v78 + 80) = v81;
      *(_QWORD *)(v78 + 56) = v77;
      return swift_task_switch();
    }
  }
  else
  {
    *(_QWORD *)(v0 + 1120) = *(_QWORD *)(*(_QWORD *)(v0 + 968) + 32);
    *(CGFloat *)(v0 + 744) = x;
    *(CGFloat *)(v0 + 752) = y;
    *(CGFloat *)(v0 + 760) = v38;
    *(CGFloat *)(v0 + 768) = height;
    while (1)
    {
      v45 = *(double *)(v0 + 744);
      v46 = *(double *)(v0 + 752);
      v47 = *(double *)(v0 + 760);
      v48 = *(double *)(v0 + 768);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1120))(*(_QWORD *)(v0 + 976), *(_QWORD *)(v0 + 984), *(_QWORD *)(v0 + 960));
      v49 = type metadata accessor for PaperDocument(0);
      v50 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
      SharedTagged_9.subscript.getter();
      v51 = *(_QWORD *)(v0 + 496);
      v52 = *(_QWORD *)(v0 + 504);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 472), v51);
      CRRegister.wrappedValue.getter();
      v53 = *(_OWORD *)(v0 + 568);
      *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 552);
      *(_OWORD *)(v0 + 528) = v53;
      *(_BYTE *)(v0 + 544) = 0;
      v54 = (*(double (**)(uint64_t, uint64_t, uint64_t))(v52 + 112))(v0 + 512, v51, v52);
      v56 = v55;
      v58 = v57;
      v60 = v59;
      __swift_destroy_boxed_opaque_existential_1(v0 + 472);
      v112.origin.x = v54;
      v112.origin.y = v56;
      v112.size.width = v58;
      v112.size.height = v60;
      v113.origin.x = v45;
      v113.origin.y = v46;
      v113.size.width = v47;
      v113.size.height = v48;
      if (CGRectIntersectsRect(v112, v113))
        break;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 968) + 8))(*(_QWORD *)(v0 + 976), *(_QWORD *)(v0 + 960));
      v61 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1112);
      v62 = *(_QWORD *)(v0 + 984);
      v63 = *(_QWORD *)(v0 + 960);
      CROrderedSet.Iterator.next()();
      if (v61(v62, 1, v63) == 1)
        goto LABEL_8;
    }
    v104 = *(_QWORD *)(v0 + 1096);
    t2a = *(CGAffineTransform **)(v0 + 1088);
    v94 = *(_OWORD *)(v0 + 1072);
    v105 = *(_BYTE *)(v0 + 545);
    v102 = *(_BYTE *)(v0 + 95);
    v96 = *(_BYTE *)(v0 + 94);
    v92 = *(void **)(v0 + 1056);
    v82 = *(void **)(v0 + 1048);
    v90 = *(_BYTE *)(v0 + 92);
    v91 = *(_BYTE *)(v0 + 93);
    v83 = *(_BYTE *)(v0 + 91);
    v84 = *(_QWORD *)(v0 + 960);
    SharedTagged_9.subscript.getter();
    v85 = *(_QWORD *)(v0 + 464);
    v107 = *(_QWORD *)(v0 + 456);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 432), v107);
    MEMORY[0x1DF0E3408](v84);
    *(_BYTE *)(v0 + 16) = v83;
    *(_BYTE *)(v0 + 17) = v90;
    *(_BYTE *)(v0 + 18) = v91;
    *(_QWORD *)(v0 + 24) = v82;
    *(_BYTE *)(v0 + 32) = 0;
    *(_OWORD *)(v0 + 40) = v94;
    *(_QWORD *)(v0 + 56) = t2a;
    *(_QWORD *)(v0 + 64) = v104;
    *(_BYTE *)(v0 + 72) = 0;
    *(_QWORD *)(v0 + 80) = v92;
    *(_BYTE *)(v0 + 88) = v96;
    *(_BYTE *)(v0 + 89) = v102;
    *(_BYTE *)(v0 + 90) = v105;
    v86 = *(_QWORD *)(v85 + 8);
    v106 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v86 + 16) + *(_QWORD *)(v86 + 16));
    v87 = v82;
    v88 = v92;
    v89 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1128) = v89;
    *v89 = v0;
    v89[1] = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
    return v106(*(_QWORD *)(v0 + 800), *(_QWORD *)(v0 + 920), *(_QWORD *)(v0 + 808), v0 + 16, v49, v50, v107, v86);
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(*(_QWORD *)v0 + 1056);
  v2 = *(void **)(*(_QWORD *)v0 + 1048);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 920);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 912);
  v5 = *(_QWORD *)(*(_QWORD *)v0 + 904);
  swift_task_dealloc();

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  return swift_task_switch();
}

{
  uint64_t v0;
  unsigned int (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  objc_class *v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  void *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  id v48;
  _QWORD *v49;
  char v50;
  char v51;
  void *v52;
  __int128 v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t (*v59)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  CGRect v60;
  CGRect v61;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 968) + 8))(*(_QWORD *)(v0 + 976), *(_QWORD *)(v0 + 960));
  __swift_destroy_boxed_opaque_existential_1(v0 + 432);
  v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1112);
  v2 = *(_QWORD *)(v0 + 984);
  v3 = *(_QWORD *)(v0 + 960);
  CROrderedSet.Iterator.next()();
  if (v1(v2, 1, v3) == 1)
  {
LABEL_4:
    v23 = *(void **)(v0 + 1056);
    v24 = *(void **)(v0 + 1048);
    v25 = *(_QWORD *)(v0 + 944);
    v26 = *(_QWORD *)(v0 + 936);
    v27 = *(_QWORD *)(v0 + 928);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1000) + 8))(*(_QWORD *)(v0 + 1008), *(_QWORD *)(v0 + 992));

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<Ref<PKDrawingStruct>?>);
    CRRegister.wrappedValue.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v27, 1, v26) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 928), (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      v28 = *(void **)(v0 + 1056);
      v29 = *(void **)(v0 + 1048);
      CGContextRestoreGState(*(CGContextRef *)(v0 + 800));

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v31 = *(_QWORD *)(v0 + 896);
      v32 = *(_QWORD *)(v0 + 888);
      v33 = *(_QWORD *)(v0 + 880);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 944) + 32))(*(_QWORD *)(v0 + 952), *(_QWORD *)(v0 + 928), *(_QWORD *)(v0 + 936));
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Ref<PKDrawingStruct> and conformance Ref<A>, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>, MEMORY[0x1E0D12878]);
      Capsule.encapsulateTransient<A>(_:)();
      v34 = (objc_class *)type metadata accessor for PKDrawingCoherence(0);
      v35 = objc_allocWithZone(v34);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))((uint64_t)v35 + OBJC_IVAR___PKDrawingCoherence_model, v31, v33);
      *(_QWORD *)(v0 + 776) = v35;
      *(_QWORD *)(v0 + 784) = v34;
      v36 = objc_msgSendSuper2((objc_super *)(v0 + 776), sel_init);
      *(_QWORD *)(v0 + 1136) = v36;
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
      v37 = swift_task_alloc();
      *(_QWORD *)(v0 + 1144) = v37;
      *(_QWORD *)v37 = v0;
      *(_QWORD *)(v37 + 8) = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
      v38 = *(_QWORD *)(v0 + 800);
      v39 = *(_OWORD *)(v0 + 1016);
      v40 = *(_OWORD *)(v0 + 1032);
      *(int8x16_t *)(v37 + 104) = vextq_s8(*(int8x16_t *)(v0 + 816), *(int8x16_t *)(v0 + 816), 8uLL);
      *(_QWORD *)(v37 + 96) = v38;
      *(_OWORD *)(v37 + 64) = v39;
      *(_OWORD *)(v37 + 80) = v40;
      *(_QWORD *)(v37 + 56) = v36;
      return swift_task_switch();
    }
  }
  else
  {
    while (1)
    {
      v4 = *(double *)(v0 + 744);
      v5 = *(double *)(v0 + 752);
      v6 = *(double *)(v0 + 760);
      v7 = *(double *)(v0 + 768);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1120))(*(_QWORD *)(v0 + 976), *(_QWORD *)(v0 + 984), *(_QWORD *)(v0 + 960));
      v8 = type metadata accessor for PaperDocument(0);
      v9 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
      SharedTagged_9.subscript.getter();
      v10 = *(_QWORD *)(v0 + 496);
      v11 = *(_QWORD *)(v0 + 504);
      __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 472), v10);
      CRRegister.wrappedValue.getter();
      v12 = *(_OWORD *)(v0 + 568);
      *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 552);
      *(_OWORD *)(v0 + 528) = v12;
      *(_BYTE *)(v0 + 544) = 0;
      v13 = (*(double (**)(uint64_t, uint64_t, uint64_t))(v11 + 112))(v0 + 512, v10, v11);
      v15 = v14;
      v17 = v16;
      v19 = v18;
      __swift_destroy_boxed_opaque_existential_1(v0 + 472);
      v60.origin.x = v13;
      v60.origin.y = v15;
      v60.size.width = v17;
      v60.size.height = v19;
      v61.origin.x = v4;
      v61.origin.y = v5;
      v61.size.width = v6;
      v61.size.height = v7;
      if (CGRectIntersectsRect(v60, v61))
        break;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 968) + 8))(*(_QWORD *)(v0 + 976), *(_QWORD *)(v0 + 960));
      v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1112);
      v21 = *(_QWORD *)(v0 + 984);
      v22 = *(_QWORD *)(v0 + 960);
      CROrderedSet.Iterator.next()();
      if (v20(v21, 1, v22) == 1)
        goto LABEL_4;
    }
    v57 = *(_QWORD *)(v0 + 1096);
    v55 = *(_QWORD *)(v0 + 1088);
    v53 = *(_OWORD *)(v0 + 1072);
    v58 = *(_BYTE *)(v0 + 545);
    v56 = *(_BYTE *)(v0 + 95);
    v54 = *(_BYTE *)(v0 + 94);
    v52 = *(void **)(v0 + 1056);
    v41 = *(void **)(v0 + 1048);
    v50 = *(_BYTE *)(v0 + 92);
    v51 = *(_BYTE *)(v0 + 93);
    v42 = *(_BYTE *)(v0 + 91);
    v43 = *(_QWORD *)(v0 + 960);
    SharedTagged_9.subscript.getter();
    v44 = *(_QWORD *)(v0 + 464);
    v45 = *(_QWORD *)(v0 + 456);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 432), v45);
    MEMORY[0x1DF0E3408](v43);
    *(_BYTE *)(v0 + 16) = v42;
    *(_BYTE *)(v0 + 17) = v50;
    *(_BYTE *)(v0 + 18) = v51;
    *(_QWORD *)(v0 + 24) = v41;
    *(_BYTE *)(v0 + 32) = 0;
    *(_OWORD *)(v0 + 40) = v53;
    *(_QWORD *)(v0 + 56) = v55;
    *(_QWORD *)(v0 + 64) = v57;
    *(_BYTE *)(v0 + 72) = 0;
    *(_QWORD *)(v0 + 80) = v52;
    *(_BYTE *)(v0 + 88) = v54;
    *(_BYTE *)(v0 + 89) = v56;
    *(_BYTE *)(v0 + 90) = v58;
    v46 = *(_QWORD *)(v44 + 8);
    v59 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v46 + 16) + *(_QWORD *)(v46 + 16));
    v47 = v41;
    v48 = v52;
    v49 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 1128) = v49;
    *v49 = v0;
    v49[1] = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
    return v59(*(_QWORD *)(v0 + 800), *(_QWORD *)(v0 + 920), *(_QWORD *)(v0 + 808), v0 + 16, v8, v9, v45, v46);
  }
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = v0[142];
  v2 = v0[102];
  v3 = objc_msgSend((id)objc_opt_self(), sel_sharedCache);
  v0[144] = v3;
  v4 = (_QWORD *)swift_task_alloc();
  v0[145] = v4;
  v4[2] = v3;
  v4[3] = v1;
  v4[4] = v2;
  v5 = (_QWORD *)swift_task_alloc();
  v0[146] = v5;
  *v5 = v0;
  v5[1] = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  PKDrawing *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;

  v1 = *(_QWORD *)(v0 + 864);
  v2 = *(_QWORD *)(v0 + 840);
  v3 = *(_QWORD *)(v0 + 832);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(*(_QWORD *)(v0 + 872), v1, &demangling cache variable for type metadata for PKDrawing?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    v4 = *(void **)(v0 + 1136);
    v5 = *(_QWORD *)(v0 + 952);
    v6 = *(_QWORD *)(v0 + 944);
    v7 = *(_QWORD *)(v0 + 936);
    v8 = *(_QWORD *)(v0 + 872);
    v9 = *(_QWORD *)(v0 + 864);

    outlined destroy of StocksKitCurrencyCache.Provider?(v8, &demangling cache variable for type metadata for PKDrawing?);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    outlined destroy of StocksKitCurrencyCache.Provider?(v9, &demangling cache variable for type metadata for PKDrawing?);
    v10 = *(void **)(v0 + 1056);
    v11 = *(void **)(v0 + 1048);
    CGContextRestoreGState(*(CGContextRef *)(v0 + 800));

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 840) + 32))(*(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 864), *(_QWORD *)(v0 + 832));
    PKDrawing._bridgeToObjectiveC()(v13);
    v15 = v14;
    *(_QWORD *)(v0 + 1176) = v14;
    v16 = swift_task_alloc();
    *(_QWORD *)(v0 + 1184) = v16;
    *(_QWORD *)v16 = v0;
    *(_QWORD *)(v16 + 8) = specialized ContainerCanvasElement.renderSubelements<A>(in:capsule:options:);
    v17 = *(_QWORD *)(v0 + 800);
    v18 = *(_OWORD *)(v0 + 1016);
    v19 = *(_OWORD *)(v0 + 1032);
    *(int8x16_t *)(v16 + 104) = vextq_s8(*(int8x16_t *)(v0 + 816), *(int8x16_t *)(v0 + 816), 8uLL);
    *(_QWORD *)(v16 + 96) = v17;
    *(_OWORD *)(v16 + 64) = v18;
    *(_OWORD *)(v16 + 80) = v19;
    *(_QWORD *)(v16 + 56) = v15;
    return swift_task_switch();
  }
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 1176);
  swift_task_dealloc();

  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v1 = *(void **)(v0 + 1136);
  v2 = *(_QWORD *)(v0 + 952);
  v3 = *(_QWORD *)(v0 + 944);
  v4 = *(_QWORD *)(v0 + 936);
  v5 = *(_QWORD *)(v0 + 872);
  v6 = *(_QWORD *)(v0 + 848);
  v7 = *(_QWORD *)(v0 + 840);
  v8 = *(_QWORD *)(v0 + 832);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  outlined destroy of StocksKitCurrencyCache.Provider?(v5, &demangling cache variable for type metadata for PKDrawing?);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v9 = *(void **)(v0 + 1056);
  v10 = *(void **)(v0 + 1048);
  CGContextRestoreGState(*(CGContextRef *)(v0 + 800));

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void specialized Data.append<A>(contentsOf:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v3[3] = MEMORY[0x1E0CB0338];
  v3[4] = MEMORY[0x1E0CB0318];
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_1DDDD14D0
     + dword_1DDDD1674[__swift_project_boxed_opaque_existential_1(v3, MEMORY[0x1E0CB0338])[1] >> 62];
  __asm { BR              X10 }
}

uint64_t sub_1DDDD14E0()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v3;

  outlined copy of Data._Representation(v1, v0);
  Data._Representation.append(contentsOf:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v3);
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1, (unint64_t *)type metadata accessor for AnyCanvas, &lazy protocol witness table cache variable for type [AnyCanvas] and conformance [A], &demangling cache variable for type metadata for [AnyCanvas], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (unint64_t *)type metadata accessor for AnyCanvasElementView, (unint64_t *)&lazy protocol witness table cache variable for type [AnyCanvasElementView] and conformance [A], &demangling cache variable for type metadata for [AnyCanvasElementView], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (unint64_t *)type metadata accessor for CanvasElementResizeHandle, &lazy protocol witness table cache variable for type [CanvasElementResizeHandle] and conformance [A], &demangling cache variable for type metadata for [CanvasElementResizeHandle], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (unint64_t *)type metadata accessor for CanvasElementPDFAnnotation, &lazy protocol witness table cache variable for type [CanvasElementPDFAnnotation] and conformance [A], &demangling cache variable for type metadata for [CanvasElementPDFAnnotation], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x1DF0E4D70](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = specialized Array._copyContents(initializing:)(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (unint64_t *)type metadata accessor for SynapseLinkItem, (unint64_t *)&lazy protocol witness table cache variable for type [SynapseLinkItem] and conformance [A], &demangling cache variable for type metadata for [SynapseLinkItem], (uint64_t *)specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t *a1)
{
  unint64_t *v1;
  unint64_t *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t *v26;
  uint64_t v27;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  char *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  int64_t v48;
  uint64_t *v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  char *v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  _QWORD v56[2];
  unint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  char *v66;
  uint64_t v67;
  char *v68;

  v2 = v1;
  v62 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v4 = *(char **)(v62 - 8);
  MEMORY[0x1E0C80A78](v62, v5);
  v58 = (char *)v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v60 = (char *)v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v59 = (uint64_t)v56 - v12;
  MEMORY[0x1E0C80A78](v13, v14);
  v63 = (uint64_t)v56 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v18);
  v20 = (char *)v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator);
  v64 = *(_QWORD *)(v67 - 8);
  MEMORY[0x1E0C80A78](v67, v21);
  v68 = (char *)v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>, MEMORY[0x1E0D11DC0]);
  v65 = a1;
  v23 = dispatch thunk of Sequence.underestimatedCount.getter();
  v24 = *v1;
  v25 = *(_QWORD *)(*v2 + 16);
  v26 = (unint64_t *)(v25 + v23);
  if (__OFADD__(v25, v23))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v27 = v23;
  v66 = v4;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v2 = v24;
  if (!isUniquelyReferenced_nonNull_native || (v29 = *(_QWORD *)(v24 + 24) >> 1, v29 < (uint64_t)v26))
  {
    if (v25 <= (uint64_t)v26)
      v30 = (int64_t)v26;
    else
      v30 = v25;
    v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v30, 1, v24, &demangling cache variable for type metadata for _ContiguousArrayStorage<SharedTagged_9<TaggedCanvasElement>>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
    *v2 = v24;
    v29 = *(_QWORD *)(v24 + 24) >> 1;
  }
  v4 = v68;
  v26 = v65;
  v31 = *((_QWORD *)v66 + 9);
  v32 = v29 - *(_QWORD *)(v24 + 16);
  v57 = (v66[80] + 32) & ~(unint64_t)v66[80];
  v61 = v31;
  (*(void (**)(char *, unint64_t *, uint64_t))(v17 + 16))(v20, v65, v16);
  v33 = dispatch thunk of Sequence._copyContents(initializing:)();
  (*(void (**)(unint64_t *, uint64_t))(v17 + 8))(v26, v16);
  if (v33 < v27)
    goto LABEL_15;
  v26 = v2;
  if (v33 >= 1)
  {
    v34 = *(_QWORD *)(*v2 + 16);
    v35 = __OFADD__(v34, v33);
    v36 = v34 + v33;
    if (v35)
    {
      __break(1u);
LABEL_19:
      v42 = (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?;
      v43 = v58;
      v44 = v63;
      do
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v27, v42);
        v46 = *v26;
        v47 = *(_QWORD *)(*v26 + 24);
        v48 = v47 >> 1;
        v49 = v42;
        if ((uint64_t)(v47 >> 1) < (uint64_t)(v20 + 1))
        {
          v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, (int64_t)(v20 + 1), 1, *v26, &demangling cache variable for type metadata for _ContiguousArrayStorage<SharedTagged_9<TaggedCanvasElement>>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
          *v26 = v46;
          v48 = *(_QWORD *)(v46 + 24) >> 1;
        }
        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v63, v32, v42);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v65)(v32, 1, v62) == 1)
        {
          v50 = v62;
          v32 = (uint64_t)v60;
LABEL_32:
          outlined destroy of StocksKitCurrencyCache.Provider?(v32, v49);
          v52 = v20;
        }
        else
        {
          v51 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v66 + 4);
          if ((uint64_t)v20 <= v48)
            v52 = (char *)v48;
          else
            v52 = v20;
          v53 = v46 + v57;
          v50 = v62;
          v54 = v53 + v61 * (_QWORD)v20;
          v32 = (uint64_t)v60;
          while (1)
          {
            v51(v43, v32, v50);
            if (v52 == v20)
              break;
            outlined destroy of StocksKitCurrencyCache.Provider?(v44, v49);
            v51((char *)v54, (uint64_t)v43, v50);
            ++v20;
            dispatch thunk of IteratorProtocol.next()();
            v50 = v62;
            outlined init with copy of Ref<PKStrokeInheritedProperties>?(v44, v32, v49);
            v55 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v65)(v32, 1, v50);
            v54 += v61;
            if (v55 == 1)
              goto LABEL_32;
          }
          (*((void (**)(char *, uint64_t))v66 + 1))(v43, v50);
          v20 = v52;
        }
        *(_QWORD *)(*v26 + 16) = v52;
        v27 = v59;
        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v63, v59, v49);
        v45 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v65)(v27, 1, v50);
        v42 = v49;
        v4 = v68;
      }
      while (v45 != 1);
      goto LABEL_17;
    }
    *(_QWORD *)(*v2 + 16) = v36;
  }
  if (v33 != v32)
    return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v4, v67);
LABEL_16:
  v20 = *(char **)(*v26 + 16);
  v38 = lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator and conformance CROrderedSet<A>.Iterator, (uint64_t *)&demangling cache variable for type metadata for CROrderedSet<SharedTagged_9<TaggedCanvasElement>>.Iterator, MEMORY[0x1E0D11D70]);
  v39 = v63;
  v56[1] = v38;
  dispatch thunk of IteratorProtocol.next()();
  v40 = v39;
  v27 = v59;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v40, v59, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  v65 = (unint64_t *)*((_QWORD *)v66 + 6);
  v41 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v65)(v27, 1, v62);
  v32 = (uint64_t)v60;
  if (v41 != 1)
    goto LABEL_19;
LABEL_17:
  outlined destroy of StocksKitCurrencyCache.Provider?(v63, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v4, v67);
  return outlined destroy of StocksKitCurrencyCache.Provider?(v27, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t *v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  int64_t v35;
  int64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;
  int64_t v40;
  unint64_t v41;

  v3 = *(_QWORD *)(result + 16);
  v4 = *(_QWORD **)v1;
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v7 = result;
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v9 = v4[3] >> 1, v9 < v6))
  {
    if (v5 <= v6)
      v10 = v5 + v3;
    else
      v10 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v10, 1, v4);
    v9 = v4[3] >> 1;
  }
  v11 = v4[2];
  v12 = v9 - v11;
  result = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v38, &v4[2 * v11 + 4], v9 - v11, v7);
  if (result < v3)
    goto LABEL_15;
  if (result)
  {
    v14 = v4[2];
    v15 = __OFADD__(v14, result);
    v16 = v14 + result;
    if (v15)
    {
      __break(1u);
      goto LABEL_48;
    }
    v4[2] = v16;
  }
  if (result != v12)
  {
LABEL_13:
    result = outlined consume of [AnyHashable : Any].Iterator._Variant();
    *(_QWORD *)v1 = v4;
    return result;
  }
LABEL_16:
  v2 = v4[2];
  v3 = v38[0];
  v37 = v38[1];
  v13 = v39;
  v6 = v40;
  if (v41)
  {
    v17 = (v41 - 1) & v41;
    v18 = __clz(__rbit64(v41)) | (v40 << 6);
    v36 = (unint64_t)(v39 + 64) >> 6;
    goto LABEL_18;
  }
LABEL_48:
  v32 = v6 + 1;
  if (__OFADD__(v6, 1))
    goto LABEL_66;
  v36 = (unint64_t)(v13 + 64) >> 6;
  if (v32 >= v36)
    goto LABEL_13;
  v33 = *(_QWORD *)(v37 + 8 * v32);
  v34 = v6 + 1;
  if (!v33)
  {
    v34 = v6 + 2;
    if (v6 + 2 >= v36)
      goto LABEL_13;
    v33 = *(_QWORD *)(v37 + 8 * v34);
    if (!v33)
    {
      v34 = v6 + 3;
      if (v6 + 3 >= v36)
        goto LABEL_13;
      v33 = *(_QWORD *)(v37 + 8 * v34);
      if (!v33)
      {
        v34 = v6 + 4;
        if (v6 + 4 >= v36)
          goto LABEL_13;
        v33 = *(_QWORD *)(v37 + 8 * v34);
        if (!v33)
        {
          v34 = v6 + 5;
          if (v6 + 5 >= v36)
            goto LABEL_13;
          v33 = *(_QWORD *)(v37 + 8 * v34);
          if (!v33)
          {
            v35 = v6 + 6;
            do
            {
              if (v36 == v35)
                goto LABEL_13;
              v33 = *(_QWORD *)(v37 + 8 * v35++);
            }
            while (!v33);
            v34 = v35 - 1;
          }
        }
      }
    }
  }
  v17 = (v33 - 1) & v33;
  v18 = __clz(__rbit64(v33)) + (v34 << 6);
  v6 = v34;
LABEL_18:
  v19 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v18);
  v21 = *v19;
  v20 = v19[1];
  result = swift_bridgeObjectRetain();
  while (1)
  {
    v22 = v4[3];
    v23 = v22 >> 1;
    if ((uint64_t)(v22 >> 1) < v2 + 1)
      break;
    if (v2 < v23)
      goto LABEL_23;
LABEL_20:
    v4[2] = v2;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v2 + 1, 1, v4);
  v4 = (_QWORD *)result;
  v23 = *(_QWORD *)(result + 24) >> 1;
  if (v2 >= v23)
    goto LABEL_20;
  while (1)
  {
LABEL_23:
    v24 = &v4[2 * v2 + 4];
    *v24 = v21;
    v24[1] = v20;
    ++v2;
    if (v17)
    {
      v25 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v26 = v25 | (v6 << 6);
      goto LABEL_41;
    }
    v27 = v6 + 1;
    if (__OFADD__(v6, 1))
      break;
    if (v27 >= v36)
      goto LABEL_45;
    v28 = *(_QWORD *)(v37 + 8 * v27);
    v29 = v6 + 1;
    if (!v28)
    {
      v29 = v6 + 2;
      if (v6 + 2 >= v36)
        goto LABEL_45;
      v28 = *(_QWORD *)(v37 + 8 * v29);
      if (!v28)
      {
        v29 = v6 + 3;
        if (v6 + 3 >= v36)
          goto LABEL_45;
        v28 = *(_QWORD *)(v37 + 8 * v29);
        if (!v28)
        {
          v29 = v6 + 4;
          if (v6 + 4 >= v36)
            goto LABEL_45;
          v28 = *(_QWORD *)(v37 + 8 * v29);
          if (!v28)
          {
            v29 = v6 + 5;
            if (v6 + 5 >= v36)
              goto LABEL_45;
            v28 = *(_QWORD *)(v37 + 8 * v29);
            if (!v28)
            {
              v30 = v6 + 6;
              while (v36 != v30)
              {
                v28 = *(_QWORD *)(v37 + 8 * v30++);
                if (v28)
                {
                  v29 = v30 - 1;
                  goto LABEL_40;
                }
              }
LABEL_45:
              v4[2] = v2;
              goto LABEL_13;
            }
          }
        }
      }
    }
LABEL_40:
    v17 = (v28 - 1) & v28;
    v26 = __clz(__rbit64(v28)) + (v29 << 6);
    v6 = v29;
LABEL_41:
    v31 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v26);
    v21 = *v31;
    v20 = v31[1];
    if (v2 >= v23)
    {
      result = swift_bridgeObjectRetain();
      goto LABEL_20;
    }
    result = swift_bridgeObjectRetain();
  }
  __break(1u);
LABEL_66:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  id v19;
  int64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  BOOL v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;
  int64_t v40;
  unint64_t v41;

  v3 = *(_QWORD *)(result + 16);
  v4 = *(_QWORD **)v1;
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v7 = result;
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v9 = v4[3] >> 1, v9 < v6))
  {
    if (v5 <= v6)
      v10 = v5 + v3;
    else
      v10 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v10, 1, v4);
    v9 = v4[3] >> 1;
  }
  v11 = v4[2];
  v12 = v9 - v11;
  result = (uint64_t)specialized Sequence._copySequenceContents(initializing:)(v38, &v4[v11 + 4], v9 - v11, v7);
  if (result < v3)
    goto LABEL_15;
  if (result)
  {
    v13 = v4[2];
    v14 = __OFADD__(v13, result);
    v15 = v13 + result;
    if (v14)
    {
      __break(1u);
      goto LABEL_51;
    }
    v4[2] = v15;
  }
  if (result != v12)
    goto LABEL_13;
LABEL_16:
  v2 = v4[2];
  v7 = v38[0];
  v3 = v39;
  v6 = v40;
  v36 = v39;
  v37 = v38[1];
  if (!v41)
  {
LABEL_51:
    v29 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      return result;
    }
    v20 = (unint64_t)(v3 + 64) >> 6;
    if (v29 >= v20)
      goto LABEL_13;
    v33 = *(_QWORD *)(v37 + 8 * v29);
    if (!v33)
    {
      v34 = v6 + 2;
      if (v6 + 2 >= v20)
        goto LABEL_13;
      v33 = *(_QWORD *)(v37 + 8 * v34);
      if (v33)
      {
LABEL_59:
        v29 = v34;
      }
      else
      {
        if (v6 + 3 >= v20)
          goto LABEL_13;
        v33 = *(_QWORD *)(v37 + 8 * (v6 + 3));
        if (!v33)
          goto LABEL_65;
        v29 = v6 + 3;
      }
    }
LABEL_54:
    v16 = (v33 - 1) & v33;
    v17 = __clz(__rbit64(v33)) + (v29 << 6);
    v6 = v29;
    v3 = v36;
    goto LABEL_18;
  }
  v16 = (v41 - 1) & v41;
  v17 = __clz(__rbit64(v41)) | (v40 << 6);
LABEL_18:
  v18 = *(void **)(*(_QWORD *)(v7 + 48) + 8 * v17);
  v19 = v18;
  if (!v18)
    goto LABEL_13;
  v21 = v19;
  v22 = (unint64_t)(v3 + 64) >> 6;
  while (1)
  {
    v23 = v4[3];
    v24 = v23 >> 1;
    if ((uint64_t)(v23 >> 1) < v2 + 1)
    {
      v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v2 + 1, 1, v4);
      v24 = v4[3] >> 1;
    }
    if (v2 < v24)
      break;
LABEL_20:
    v4[2] = v2;
    if (!v21)
      goto LABEL_13;
  }
  while (1)
  {
    v4[v2++ + 4] = v21;
    if (!v16)
      break;
    v25 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    v26 = v25 | (v6 << 6);
LABEL_26:
    v21 = *(void **)(*(_QWORD *)(v7 + 48) + 8 * v26);
    v27 = v21;
    if (v21)
      v28 = v2 < v24;
    else
      v28 = 0;
    if (!v28)
      goto LABEL_20;
  }
  v29 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v29 >= v22)
      goto LABEL_55;
    v30 = *(_QWORD *)(v37 + 8 * v29);
    if (v30)
      goto LABEL_41;
    v31 = v6 + 2;
    if (v6 + 2 >= v22)
      goto LABEL_55;
    v30 = *(_QWORD *)(v37 + 8 * v31);
    if (!v30)
    {
      if (v6 + 3 >= v22)
        goto LABEL_55;
      v30 = *(_QWORD *)(v37 + 8 * (v6 + 3));
      if (v30)
      {
        v29 = v6 + 3;
        goto LABEL_41;
      }
      v31 = v6 + 4;
      if (v6 + 4 >= v22)
        goto LABEL_55;
      v30 = *(_QWORD *)(v37 + 8 * v31);
      if (!v30)
      {
        v29 = v6 + 5;
        if (v6 + 5 >= v22)
          goto LABEL_55;
        v30 = *(_QWORD *)(v37 + 8 * v29);
        if (!v30)
        {
          v32 = v6 + 6;
          while (v22 != v32)
          {
            v30 = *(_QWORD *)(v37 + 8 * v32++);
            if (v30)
            {
              v29 = v32 - 1;
              goto LABEL_41;
            }
          }
LABEL_55:
          v4[2] = v2;
          goto LABEL_13;
        }
        goto LABEL_41;
      }
    }
    v29 = v31;
LABEL_41:
    v16 = (v30 - 1) & v30;
    v26 = __clz(__rbit64(v30)) + (v29 << 6);
    v6 = v29;
    goto LABEL_26;
  }
  __break(1u);
LABEL_65:
  v34 = v29 + 3;
  if (v29 + 3 < v20)
  {
    v33 = *(_QWORD *)(v37 + 8 * v34);
    if (v33)
      goto LABEL_59;
    v29 += 4;
    if (v29 >= v20)
      goto LABEL_13;
    v33 = *(_QWORD *)(v37 + 8 * v29);
    if (!v33)
    {
      v35 = v6 + 6;
      while (v20 != v35)
      {
        v33 = *(_QWORD *)(v37 + 8 * v35++);
        if (v33)
        {
          v29 = v35 - 1;
          goto LABEL_54;
        }
      }
      goto LABEL_13;
    }
    goto LABEL_54;
  }
LABEL_13:
  result = outlined consume of [AnyHashable : Any].Iterator._Variant();
  *(_QWORD *)v1 = v4;
  return result;
}

{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t *v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  int64_t v35;
  int64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;
  int64_t v40;
  unint64_t v41;

  v3 = *(_QWORD *)(result + 16);
  v4 = *(_QWORD **)v1;
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v7 = result;
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v9 = v4[3] >> 1, v9 < v6))
  {
    if (v5 <= v6)
      v10 = v5 + v3;
    else
      v10 = v5;
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v10, 1, v4);
    v9 = v4[3] >> 1;
  }
  v11 = v4[2];
  v12 = v9 - v11;
  result = specialized Sequence._copySequenceContents(initializing:)((uint64_t)v38, &v4[2 * v11 + 4], v9 - v11, v7);
  if (result < v3)
    goto LABEL_15;
  if (result)
  {
    v14 = v4[2];
    v15 = __OFADD__(v14, result);
    v16 = v14 + result;
    if (v15)
    {
      __break(1u);
      goto LABEL_48;
    }
    v4[2] = v16;
  }
  if (result != v12)
  {
LABEL_13:
    result = outlined consume of [AnyHashable : Any].Iterator._Variant();
    *(_QWORD *)v1 = v4;
    return result;
  }
LABEL_16:
  v2 = v4[2];
  v3 = v38[0];
  v37 = v38[1];
  v13 = v39;
  v6 = v40;
  if (v41)
  {
    v17 = (v41 - 1) & v41;
    v18 = __clz(__rbit64(v41)) | (v40 << 6);
    v36 = (unint64_t)(v39 + 64) >> 6;
    goto LABEL_18;
  }
LABEL_48:
  v32 = v6 + 1;
  if (__OFADD__(v6, 1))
    goto LABEL_66;
  v36 = (unint64_t)(v13 + 64) >> 6;
  if (v32 >= v36)
    goto LABEL_13;
  v33 = *(_QWORD *)(v37 + 8 * v32);
  v34 = v6 + 1;
  if (!v33)
  {
    v34 = v6 + 2;
    if (v6 + 2 >= v36)
      goto LABEL_13;
    v33 = *(_QWORD *)(v37 + 8 * v34);
    if (!v33)
    {
      v34 = v6 + 3;
      if (v6 + 3 >= v36)
        goto LABEL_13;
      v33 = *(_QWORD *)(v37 + 8 * v34);
      if (!v33)
      {
        v34 = v6 + 4;
        if (v6 + 4 >= v36)
          goto LABEL_13;
        v33 = *(_QWORD *)(v37 + 8 * v34);
        if (!v33)
        {
          v34 = v6 + 5;
          if (v6 + 5 >= v36)
            goto LABEL_13;
          v33 = *(_QWORD *)(v37 + 8 * v34);
          if (!v33)
          {
            v35 = v6 + 6;
            do
            {
              if (v36 == v35)
                goto LABEL_13;
              v33 = *(_QWORD *)(v37 + 8 * v35++);
            }
            while (!v33);
            v34 = v35 - 1;
          }
        }
      }
    }
  }
  v17 = (v33 - 1) & v33;
  v18 = __clz(__rbit64(v33)) + (v34 << 6);
  v6 = v34;
LABEL_18:
  v19 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v18);
  v21 = *v19;
  v20 = v19[1];
  result = swift_bridgeObjectRetain();
  while (1)
  {
    v22 = v4[3];
    v23 = v22 >> 1;
    if ((uint64_t)(v22 >> 1) < v2 + 1)
      break;
    if (v2 < v23)
      goto LABEL_23;
LABEL_20:
    v4[2] = v2;
  }
  result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v22 > 1), v2 + 1, 1, v4);
  v4 = (_QWORD *)result;
  v23 = *(_QWORD *)(result + 24) >> 1;
  if (v2 >= v23)
    goto LABEL_20;
  while (1)
  {
LABEL_23:
    v24 = &v4[2 * v2 + 4];
    *v24 = v21;
    v24[1] = v20;
    ++v2;
    if (v17)
    {
      v25 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v26 = v25 | (v6 << 6);
      goto LABEL_41;
    }
    v27 = v6 + 1;
    if (__OFADD__(v6, 1))
      break;
    if (v27 >= v36)
      goto LABEL_45;
    v28 = *(_QWORD *)(v37 + 8 * v27);
    v29 = v6 + 1;
    if (!v28)
    {
      v29 = v6 + 2;
      if (v6 + 2 >= v36)
        goto LABEL_45;
      v28 = *(_QWORD *)(v37 + 8 * v29);
      if (!v28)
      {
        v29 = v6 + 3;
        if (v6 + 3 >= v36)
          goto LABEL_45;
        v28 = *(_QWORD *)(v37 + 8 * v29);
        if (!v28)
        {
          v29 = v6 + 4;
          if (v6 + 4 >= v36)
            goto LABEL_45;
          v28 = *(_QWORD *)(v37 + 8 * v29);
          if (!v28)
          {
            v29 = v6 + 5;
            if (v6 + 5 >= v36)
              goto LABEL_45;
            v28 = *(_QWORD *)(v37 + 8 * v29);
            if (!v28)
            {
              v30 = v6 + 6;
              while (v36 != v30)
              {
                v28 = *(_QWORD *)(v37 + 8 * v30++);
                if (v28)
                {
                  v29 = v30 - 1;
                  goto LABEL_40;
                }
              }
LABEL_45:
              v4[2] = v2;
              goto LABEL_13;
            }
          }
        }
      }
    }
LABEL_40:
    v17 = (v28 - 1) & v28;
    v26 = __clz(__rbit64(v28)) + (v29 << 6);
    v6 = v29;
LABEL_41:
    v31 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v26);
    v21 = *v31;
    v20 = v31[1];
    if (v2 >= v23)
    {
      result = swift_bridgeObjectRetain();
      goto LABEL_20;
    }
    result = swift_bridgeObjectRetain();
  }
  __break(1u);
LABEL_66:
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  char **v1;
  uint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  int v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  char *v35;
  int64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v6 = a1;
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v8 = *((_QWORD *)v3 + 3) >> 1, v8 < v5))
  {
    if (v4 <= v5)
      v9 = v4 + v2;
    else
      v9 = v4;
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 1, v3);
    v8 = *((_QWORD *)v3 + 3) >> 1;
  }
  v10 = *((_QWORD *)v3 + 2);
  v11 = v8 - v10;
  result = (uint64_t)specialized Sequence._copySequenceContents(initializing:)(v43, &v3[4 * v10 + 32], v8 - v10, v6);
  if (result < v2)
    goto LABEL_15;
  if (result)
  {
    v16 = *((_QWORD *)v3 + 2);
    v17 = __OFADD__(v16, result);
    v18 = v16 + result;
    if (v17)
    {
      __break(1u);
      goto LABEL_47;
    }
    *((_QWORD *)v3 + 2) = v18;
  }
  if (result != v11)
  {
LABEL_13:
    result = outlined consume of [AnyHashable : Any].Iterator._Variant();
    *v1 = v3;
    return result;
  }
LABEL_16:
  v6 = *((_QWORD *)v3 + 2);
  result = v43[0];
  v13 = v43[1];
  v14 = v44;
  v15 = v45;
  if (v46)
  {
    v19 = (v46 - 1) & v46;
    v20 = __clz(__rbit64(v46)) | (v45 << 6);
    v21 = (unint64_t)(v44 + 64) >> 6;
    goto LABEL_18;
  }
LABEL_47:
  v36 = v15 + 1;
  if (__OFADD__(v15, 1))
    goto LABEL_65;
  v21 = (unint64_t)(v14 + 64) >> 6;
  if (v36 >= v21)
    goto LABEL_13;
  v37 = *(_QWORD *)(v13 + 8 * v36);
  v38 = v15 + 1;
  if (!v37)
  {
    v38 = v15 + 2;
    if (v15 + 2 >= v21)
      goto LABEL_13;
    v37 = *(_QWORD *)(v13 + 8 * v38);
    if (!v37)
    {
      v38 = v15 + 3;
      if (v15 + 3 >= v21)
        goto LABEL_13;
      v37 = *(_QWORD *)(v13 + 8 * v38);
      if (!v37)
      {
        v38 = v15 + 4;
        if (v15 + 4 >= v21)
          goto LABEL_13;
        v37 = *(_QWORD *)(v13 + 8 * v38);
        if (!v37)
        {
          v38 = v15 + 5;
          if (v15 + 5 >= v21)
            goto LABEL_13;
          v37 = *(_QWORD *)(v13 + 8 * v38);
          if (!v37)
          {
            v39 = v15 + 6;
            do
            {
              if (v21 == v39)
                goto LABEL_13;
              v37 = *(_QWORD *)(v13 + 8 * v39++);
            }
            while (!v37);
            v38 = v39 - 1;
          }
        }
      }
    }
  }
  v19 = (v37 - 1) & v37;
  v20 = __clz(__rbit64(v37)) + (v38 << 6);
  v15 = v38;
LABEL_18:
  v22 = *(_DWORD *)(*(_QWORD *)(result + 48) + 4 * v20);
  while (1)
  {
    v23 = *((_QWORD *)v3 + 3);
    v24 = v23 >> 1;
    if ((uint64_t)(v23 >> 1) < v6 + 1)
      break;
    if (v6 < v24)
      goto LABEL_25;
LABEL_19:
    *((_QWORD *)v3 + 2) = v6;
  }
  v41 = v13;
  v42 = result;
  v31 = v14;
  v32 = v15;
  v33 = v3;
  v34 = v19;
  v40 = v22;
  v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v6 + 1, 1, v33);
  v22 = v40;
  v19 = v34;
  v15 = v32;
  v14 = v31;
  v3 = v35;
  v13 = v41;
  result = v42;
  v24 = *((_QWORD *)v3 + 3) >> 1;
  if (v6 >= v24)
    goto LABEL_19;
  while (1)
  {
LABEL_25:
    *(_DWORD *)&v3[4 * v6++ + 32] = v22;
    if (v19)
    {
      v25 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v26 = v25 | (v15 << 6);
      goto LABEL_24;
    }
    v27 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v27 >= v21)
      goto LABEL_44;
    v28 = *(_QWORD *)(v13 + 8 * v27);
    v29 = v15 + 1;
    if (!v28)
    {
      v29 = v15 + 2;
      if (v15 + 2 >= v21)
        goto LABEL_44;
      v28 = *(_QWORD *)(v13 + 8 * v29);
      if (!v28)
      {
        v29 = v15 + 3;
        if (v15 + 3 >= v21)
          goto LABEL_44;
        v28 = *(_QWORD *)(v13 + 8 * v29);
        if (!v28)
        {
          v29 = v15 + 4;
          if (v15 + 4 >= v21)
            goto LABEL_44;
          v28 = *(_QWORD *)(v13 + 8 * v29);
          if (!v28)
          {
            v29 = v15 + 5;
            if (v15 + 5 >= v21)
              goto LABEL_44;
            v28 = *(_QWORD *)(v13 + 8 * v29);
            if (!v28)
            {
              v30 = v15 + 6;
              while (v21 != v30)
              {
                v28 = *(_QWORD *)(v13 + 8 * v30++);
                if (v28)
                {
                  v29 = v30 - 1;
                  goto LABEL_41;
                }
              }
LABEL_44:
              *((_QWORD *)v3 + 2) = v6;
              goto LABEL_13;
            }
          }
        }
      }
    }
LABEL_41:
    v19 = (v28 - 1) & v28;
    v26 = __clz(__rbit64(v28)) + (v29 << 6);
    v15 = v29;
LABEL_24:
    v22 = *(_DWORD *)(*(_QWORD *)(result + 48) + 4 * v26);
    if (v6 >= v24)
      goto LABEL_19;
  }
  __break(1u);
LABEL_65:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  int64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v6 = a1;
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v8 = v3[3] >> 1, v8 < v5))
  {
    if (v4 <= v5)
      v9 = v4 + v2;
    else
      v9 = v4;
    v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 1, v3);
    v8 = v3[3] >> 1;
  }
  v10 = v3[2];
  v11 = v8 - v10;
  result = (uint64_t)specialized Sequence._copySequenceContents(initializing:)(v42, &v3[v10 + 4], v8 - v10, v6);
  if (result < v2)
    goto LABEL_15;
  if (result)
  {
    v16 = v3[2];
    v17 = __OFADD__(v16, result);
    v18 = v16 + result;
    if (v17)
    {
      __break(1u);
      goto LABEL_47;
    }
    v3[2] = v18;
  }
  if (result != v11)
  {
LABEL_13:
    result = outlined consume of [AnyHashable : Any].Iterator._Variant();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_16:
  v6 = v3[2];
  result = v42[0];
  v13 = v42[1];
  v14 = v43;
  v15 = v44;
  if (v45)
  {
    v19 = (v45 - 1) & v45;
    v20 = __clz(__rbit64(v45)) | (v44 << 6);
    v21 = (unint64_t)(v43 + 64) >> 6;
    goto LABEL_18;
  }
LABEL_47:
  v35 = v15 + 1;
  if (__OFADD__(v15, 1))
    goto LABEL_65;
  v21 = (unint64_t)(v14 + 64) >> 6;
  if (v35 >= v21)
    goto LABEL_13;
  v36 = *(_QWORD *)(v13 + 8 * v35);
  v37 = v15 + 1;
  if (!v36)
  {
    v37 = v15 + 2;
    if (v15 + 2 >= v21)
      goto LABEL_13;
    v36 = *(_QWORD *)(v13 + 8 * v37);
    if (!v36)
    {
      v37 = v15 + 3;
      if (v15 + 3 >= v21)
        goto LABEL_13;
      v36 = *(_QWORD *)(v13 + 8 * v37);
      if (!v36)
      {
        v37 = v15 + 4;
        if (v15 + 4 >= v21)
          goto LABEL_13;
        v36 = *(_QWORD *)(v13 + 8 * v37);
        if (!v36)
        {
          v37 = v15 + 5;
          if (v15 + 5 >= v21)
            goto LABEL_13;
          v36 = *(_QWORD *)(v13 + 8 * v37);
          if (!v36)
          {
            v38 = v15 + 6;
            do
            {
              if (v21 == v38)
                goto LABEL_13;
              v36 = *(_QWORD *)(v13 + 8 * v38++);
            }
            while (!v36);
            v37 = v38 - 1;
          }
        }
      }
    }
  }
  v19 = (v36 - 1) & v36;
  v20 = __clz(__rbit64(v36)) + (v37 << 6);
  v15 = v37;
LABEL_18:
  v22 = *(_QWORD *)(*(_QWORD *)(result + 48) + 8 * v20);
  while (1)
  {
    v23 = v3[3];
    v24 = v23 >> 1;
    if ((uint64_t)(v23 >> 1) < v6 + 1)
      break;
    if (v6 < v24)
      goto LABEL_25;
LABEL_19:
    v3[2] = v6;
  }
  v40 = v13;
  v41 = result;
  v39 = v14;
  v31 = v15;
  v32 = v3;
  v33 = v19;
  v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v6 + 1, 1, v32);
  v19 = v33;
  v15 = v31;
  v14 = v39;
  v13 = v40;
  v3 = v34;
  result = v41;
  v24 = v3[3] >> 1;
  if (v6 >= v24)
    goto LABEL_19;
  while (1)
  {
LABEL_25:
    v3[v6++ + 4] = v22;
    if (v19)
    {
      v25 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v26 = v25 | (v15 << 6);
      goto LABEL_24;
    }
    v27 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v27 >= v21)
      goto LABEL_44;
    v28 = *(_QWORD *)(v13 + 8 * v27);
    v29 = v15 + 1;
    if (!v28)
    {
      v29 = v15 + 2;
      if (v15 + 2 >= v21)
        goto LABEL_44;
      v28 = *(_QWORD *)(v13 + 8 * v29);
      if (!v28)
      {
        v29 = v15 + 3;
        if (v15 + 3 >= v21)
          goto LABEL_44;
        v28 = *(_QWORD *)(v13 + 8 * v29);
        if (!v28)
        {
          v29 = v15 + 4;
          if (v15 + 4 >= v21)
            goto LABEL_44;
          v28 = *(_QWORD *)(v13 + 8 * v29);
          if (!v28)
          {
            v29 = v15 + 5;
            if (v15 + 5 >= v21)
              goto LABEL_44;
            v28 = *(_QWORD *)(v13 + 8 * v29);
            if (!v28)
            {
              v30 = v15 + 6;
              while (v21 != v30)
              {
                v28 = *(_QWORD *)(v13 + 8 * v30++);
                if (v28)
                {
                  v29 = v30 - 1;
                  goto LABEL_41;
                }
              }
LABEL_44:
              v3[2] = v6;
              goto LABEL_13;
            }
          }
        }
      }
    }
LABEL_41:
    v19 = (v28 - 1) & v28;
    v26 = __clz(__rbit64(v28)) + (v29 << 6);
    v15 = v29;
LABEL_24:
    v22 = *(_QWORD *)(*(_QWORD *)(result + 48) + 8 * v26);
    if (v6 >= v24)
      goto LABEL_19;
  }
  __break(1u);
LABEL_65:
  __break(1u);
  return result;
}

{
  char **v1;
  unint64_t v2;
  char *v3;
  int64_t v4;
  int64_t v5;
  char *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *((_QWORD *)*v1 + 2);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= *((_QWORD *)v3 + 3) >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = *((_QWORD *)v3 + 2);
  if ((*((_QWORD *)v3 + 3) >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = &v3[2 * v9 + 32];
  if (a1 + 32 < (unint64_t)&v10[2 * v8] && (unint64_t)v10 < a1 + 32 + 2 * v8)
    goto LABEL_24;
  memcpy(v10, (const void *)(a1 + 32), 2 * v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = *((_QWORD *)v3 + 2);
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    *((_QWORD *)v3 + 2) = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[5 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[5 * v2] && (unint64_t)v9 < a1 + 32 + 40 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 40 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[6 * v8 + 4];
  if (a1 + 32 < v9 + 48 * v2 && v9 < a1 + 32 + 48 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[4 * v9 + 4];
  if (a1 + 32 < v10 + 32 * v8 && v10 < a1 + 32 + 32 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v23 = v4 + v2;
  else
    v23 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v23, 1, v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<PKStroke>, (uint64_t (*)(_QWORD))MEMORY[0x1E0CD10B8]);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *(_QWORD *)(v3 + 16);
  v9 = (*(_QWORD *)(v3 + 24) >> 1) - v8;
  v10 = type metadata accessor for PKStroke();
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 72);
  v14 = v3 + v12 + v13 * v8;
  v15 = a1 + v12;
  v16 = v13 * v2;
  v17 = v14 + v16;
  v18 = v15 + v16;
  if (v15 < v17 && v14 < v18)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v20 = *(_QWORD *)(v3 + 16);
  v21 = __OFADD__(v20, v2);
  v22 = v20 + v2;
  if (!v21)
  {
    *(_QWORD *)(v3 + 16) = v22;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_20;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v1 = v3;
  if ((_DWORD)isUniquelyReferenced_nonNull_native)
  {
    v8 = *(_QWORD *)(v3 + 24) >> 1;
    if (v8 >= v5)
    {
      v9 = *(_QWORD *)(a1 + 16);
      if (v9)
        goto LABEL_5;
LABEL_17:
      if (!v2)
        goto LABEL_18;
      goto LABEL_20;
    }
  }
  if (v4 <= v5)
    v4 += v2;
  swift_bridgeObjectRetain();
  v3 = MEMORY[0x1DF0E4D70](isUniquelyReferenced_nonNull_native, v4, 1, v3);
  swift_bridgeObjectRelease();
  *v1 = v3;
  v8 = *(_QWORD *)(v3 + 24) >> 1;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_17;
LABEL_5:
  v10 = *(_QWORD *)(v3 + 16);
  if (v8 - v10 < (uint64_t)v9)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v11 = v3 + 8 * v10 + 32;
  if (a1 + 32 < v11 + 8 * v9 && v11 < a1 + 32 + 8 * v9)
    goto LABEL_23;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UIMenuElement?);
  swift_arrayInitWithCopy();
  if (v9 < v2)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v13 = *(_QWORD *)(*v1 + 16);
  v14 = __OFADD__(v13, v9);
  v15 = v13 + v9;
  if (!v14)
  {
    *(_QWORD *)(*v1 + 16) = v15;
LABEL_18:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
LABEL_22:
  __break(1u);
LABEL_23:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[4 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[4 * v2] && (unint64_t)v9 < a1 + 32 + 32 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 32 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[3 * v8 + 4];
  if (a1 + 32 < v9 + 24 * v2 && v9 < a1 + 32 + 24 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  unint64_t *v5;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v12 = *v5;
  if (*v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v14 = v13 + v11;
    if (!__OFADD__(v13, v11))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  v14 = v13 + v11;
  if (__OFADD__(v13, v11))
    goto LABEL_23;
LABEL_5:
  v12 = *v5;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v5 = v12;
  v13 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v12 & 0x8000000000000000) == 0
    && (v12 & 0x4000000000000000) == 0)
  {
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    if (v14 <= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v13 = 1;
  }
  v23 = v11;
  v11 = (uint64_t)a2;
  a2 = a3;
  a3 = (unint64_t *)a4;
  a4 = a5;
  if (v12 >> 62)
    goto LABEL_25;
  v17 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v17 <= v14)
      v17 = v14;
    swift_bridgeObjectRetain();
    v12 = MEMORY[0x1DF0E4D70](v13, v17, 1, v12);
    swift_bridgeObjectRelease();
    *v5 = v12;
    v16 = v12 & 0xFFFFFFFFFFFFFF8;
    a5 = a4;
    a4 = (uint64_t *)a3;
    a3 = a2;
    a2 = (unint64_t *)v11;
    v11 = v23;
LABEL_15:
    result = specialized Array._copyContents(initializing:)(v16 + 8 * *(_QWORD *)(v16 + 16) + 32, (*(_QWORD *)(v16 + 24) >> 1) - *(_QWORD *)(v16 + 16), a1, (void (*)(_QWORD))a2, a3, a4, (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))a5);
    if (v19 >= v11)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v19 < 1)
    goto LABEL_19;
  v20 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v21 = __OFADD__(v20, v19);
  v22 = v20 + v19;
  if (!v21)
  {
    *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v22;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, unint64_t))
{
  unint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = *v2;
  if (*v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v8 = v7 + v5;
    if (!__OFADD__(v7, v5))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  v8 = v7 + v5;
  if (__OFADD__(v7, v5))
    goto LABEL_23;
LABEL_5:
  v6 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v6;
  v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v7 = 1;
  }
  if (v6 >> 62)
    goto LABEL_25;
  v11 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v11 <= v8)
      v11 = v8;
    swift_bridgeObjectRetain();
    v6 = MEMORY[0x1DF0E4D70](v7, v11, 1, v6);
    swift_bridgeObjectRelease();
    *v2 = v6;
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = a2(v10 + 8 * *(_QWORD *)(v10 + 16) + 32, (*(_QWORD *)(v10 + 24) >> 1) - *(_QWORD *)(v10 + 16), a1);
    if (v13 >= v5)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 < 1)
    goto LABEL_19;
  v14 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v15 = __OFADD__(v14, v13);
  v16 = v14 + v13;
  if (!v15)
  {
    *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

uint64_t thunk for @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<Bool>) -> ()(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned OpaquePointer, @unowned UnsafeMutablePointer<Bool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(a2, a3);
}

uint64_t specialized Image.fullResolutionJPEGData<A>(compressionQuality:in:)(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v3 + 408) = a1;
  *(_QWORD *)(v3 + 416) = v2;
  *(double *)(v3 + 400) = a2;
  v4 = type metadata accessor for UTType();
  *(_QWORD *)(v3 + 424) = v4;
  *(_QWORD *)(v3 + 432) = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 440) = swift_task_alloc();
  *(_QWORD *)(v3 + 448) = type metadata accessor for RendererOutput();
  *(_QWORD *)(v3 + 456) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRAssetOrData?);
  *(_QWORD *)(v3 + 464) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized Image.fullResolutionJPEGData<A>(compressionQuality:in:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CGFloat v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  CGFloat b;
  CGFloat a;
  CGFloat c;
  CGFloat d;
  CGFloat tx;
  CGFloat ty;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v31;
  CGFloat v32;
  CGFloat v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, double, double, double, double);
  CGAffineTransform v39;
  CGRect v40;
  CGRect v41;

  v1 = *(_QWORD *)(v0 + 464);
  Image.pdfContentsBounds.getter();
  v36 = v3;
  v37 = v2;
  v34 = v5;
  v35 = v4;
  type metadata accessor for Image();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGFloat>);
  CRRegister.wrappedValue.getter();
  v6 = *(double *)(v0 + 392);
  Image.pdfContentsBounds.getter();
  v8 = v7;
  v10 = v9;
  v32 = v12;
  v33 = v11;
  CGAffineTransformMakeRotation(&v39, v6);
  a = v39.a;
  b = v39.b;
  c = v39.c;
  d = v39.d;
  *(CGFloat *)(v0 + 88) = v39.a;
  tx = v39.tx;
  ty = v39.ty;
  *(CGFloat *)(v0 + 96) = b;
  *(CGFloat *)(v0 + 104) = c;
  *(CGFloat *)(v0 + 112) = d;
  *(CGFloat *)(v0 + 120) = tx;
  *(CGFloat *)(v0 + 128) = ty;
  v40.origin.x = v8;
  v40.origin.y = v10;
  v40.size.height = v32;
  v40.size.width = v33;
  v41 = CGRectApplyAffineTransform(v40, (CGAffineTransform *)(v0 + 88));
  CGAffineTransformMakeTranslation(&v39, v8 - v41.origin.x, v10 - v41.origin.y);
  v19 = *(_OWORD *)&v39.c;
  v20 = *(_OWORD *)&v39.tx;
  *(_OWORD *)(v0 + 184) = *(_OWORD *)&v39.a;
  *(CGFloat *)(v0 + 136) = a;
  *(CGFloat *)(v0 + 144) = b;
  *(CGFloat *)(v0 + 152) = c;
  *(CGFloat *)(v0 + 160) = d;
  *(CGFloat *)(v0 + 168) = tx;
  *(CGFloat *)(v0 + 176) = ty;
  *(_OWORD *)(v0 + 200) = v19;
  *(_OWORD *)(v0 + 216) = v20;
  CGAffineTransformConcat(&v39, (CGAffineTransform *)(v0 + 136), (CGAffineTransform *)(v0 + 184));
  v21 = *(_OWORD *)&v39.c;
  v22 = *(_OWORD *)&v39.tx;
  *(_OWORD *)(v0 + 232) = *(_OWORD *)&v39.a;
  *(_OWORD *)(v0 + 248) = v21;
  *(_OWORD *)(v0 + 264) = v22;
  *(_QWORD *)&v21 = v36;
  v23 = v37;
  v24 = v34;
  *(_QWORD *)&v22 = v35;
  *(CGRect *)(v0 + 472) = CGRectApplyAffineTransform(*(CGRect *)((char *)&v21 - 8), (CGAffineTransform *)(v0 + 232));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CRAssetOrData?>);
  CRRegister.wrappedValue.getter();
  v25 = type metadata accessor for CRAssetOrData();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v1, 1, v25) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(*(_QWORD *)(v0 + 464), &demangling cache variable for type metadata for CRAssetOrData?);
    v27 = *(_QWORD *)(v0 + 488);
    v26 = *(_QWORD *)(v0 + 496);
    type metadata accessor for ImageRenderer();
    v28 = (_QWORD *)swift_allocObject();
    v28[2] = v27;
    v28[3] = v26;
    v28[4] = 0x3FF0000000000000;
    *(_QWORD *)(v0 + 520) = specialized CanvasElementImageRenderer.__allocating_init(renderer:)((uint64_t)v28);
    swift_storeEnumTagMultiPayload();
    v38 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, double, double, double, double))((char *)&async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:) + async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:));
    v29 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 528) = v29;
    *v29 = v0;
    v29[1] = specialized Image.fullResolutionJPEGData<A>(compressionQuality:in:);
    return v38(v0 + 320, *(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 408), 0, 0, *(_QWORD *)(v0 + 456), *(double *)(v0 + 472), *(double *)(v0 + 480), *(double *)(v0 + 488), *(double *)(v0 + 496));
  }
  else
  {
    v31 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 504) = v31;
    *v31 = v0;
    v31[1] = specialized Image.fullResolutionJPEGData<A>(compressionQuality:in:);
    return CRAssetOrData.loadImage(maxDimensionInPixels:waitIfUnavailable:isHDRAllowed:)(0x7FFFFFFFFFFFFFFFLL, 0, 0);
  }
}

{
  uint64_t v0;
  void *v1;
  double Width;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, double, double, double, double);

  v1 = *(void **)(v0 + 512);
  if (v1)
  {
    Width = (double)(uint64_t)CGImageGetWidth(*(CGImageRef *)(v0 + 512));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CGRect>);
    CRRegister.wrappedValue.getter();
    v3 = CGRectGetWidth(*(CGRect *)(v0 + 360));

    v4 = Width / v3;
  }
  else
  {
    v4 = 1.0;
  }
  v6 = *(_QWORD *)(v0 + 488);
  v5 = *(_QWORD *)(v0 + 496);
  type metadata accessor for ImageRenderer();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v5;
  *(double *)(v7 + 32) = v4;
  *(_QWORD *)(v0 + 520) = specialized CanvasElementImageRenderer.__allocating_init(renderer:)(v7);
  swift_storeEnumTagMultiPayload();
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char, char, uint64_t, double, double, double, double))((char *)&async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:) + async function pointer to specialized CanvasElementRenderer.render<A, B>(_:in:bounds:darkMode:isRTL:output:));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 528) = v8;
  *v8 = v0;
  v8[1] = specialized Image.fullResolutionJPEGData<A>(compressionQuality:in:);
  return v10(v0 + 320, *(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 408), 0, 0, *(_QWORD *)(v0 + 456), *(double *)(v0 + 472), *(double *)(v0 + 480), *(double *)(v0 + 488), *(double *)(v0 + 496));
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 456);
  swift_task_dealloc();
  outlined destroy of PKStrokeProperties(v1, (uint64_t (*)(_QWORD))type metadata accessor for RendererOutput);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  void *v10;
  id v11;
  __CFData *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __CFString *v16;
  CGImageDestination *v17;
  const __CFDictionary *isa;
  __CFData *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;

  if (!*(_QWORD *)(v0 + 344))
  {
    swift_release();
    outlined destroy of StocksKitCurrencyCache.Provider?(v0 + 320, &demangling cache variable for type metadata for RendererContext?);
LABEL_10:
    v20 = 0;
    v22 = 0xF000000000000000;
    goto LABEL_13;
  }
  outlined init with take of FindResult((__int128 *)(v0 + 320), v0 + 280);
  v1 = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 312);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 280), v1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
  if (!v3)
  {
    swift_release();
LABEL_9:
    __swift_destroy_boxed_opaque_existential_1(v0 + 280);
    goto LABEL_10;
  }
  v4 = (void *)v3;
  v6 = *(_QWORD *)(v0 + 432);
  v5 = *(_QWORD *)(v0 + 440);
  v7 = *(_QWORD *)(v0 + 424);
  v8 = *(_QWORD *)(v0 + 400);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CFStringRef, Any)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1DDF32CF0;
  v10 = (void *)*MEMORY[0x1E0CBC780];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0CBC780];
  *(_QWORD *)(inited + 64) = MEMORY[0x1E0DEF040];
  *(_QWORD *)(inited + 40) = v8;
  v11 = v10;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  v12 = (__CFData *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99DF0]), sel_init);
  static UTType.jpeg.getter();
  v13 = UTType.identifier.getter();
  v15 = v14;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v16 = (__CFString *)MEMORY[0x1DF0E41AC](v13, v15);
  swift_bridgeObjectRelease();
  v17 = CGImageDestinationCreateWithData(v12, v16, 1uLL, 0);

  if (!v17)
  {
    swift_release();

    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  type metadata accessor for CFStringRef(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CFStringRef and conformance CFStringRef, (uint64_t (*)(uint64_t))type metadata accessor for CFStringRef, (uint64_t)&protocol conformance descriptor for CFStringRef);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  CGImageDestinationAddImage(v17, (CGImageRef)v4, isa);

  if (CGImageDestinationFinalize(v17))
  {
    v19 = v12;
    v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v22 = v21;

    swift_release();
  }
  else
  {

    swift_release();
    v20 = 0;
    v22 = 0xF000000000000000;
  }
  __swift_destroy_boxed_opaque_existential_1(v0 + 280);
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v20, v22);
}

uint64_t specialized Image.fullResolutionJPEGData<A>(compressionQuality:in:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 464);
  *(_QWORD *)(*(_QWORD *)v1 + 512) = a1;
  swift_task_dealloc();
  outlined destroy of PKStrokeProperties(v2, (uint64_t (*)(_QWORD))type metadata accessor for CRAssetOrData);
  return swift_task_switch();
}

uint64_t specialized PaperDocument.appendDocument<A>(_:asset:in:assetManager:useProxyPages:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  id v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  os_unfair_lock_s *v15;
  void *v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[6];
  uint64_t v24;
  uint64_t v25;
  __int128 v26;

  v11 = objc_msgSend(a1, sel_isLocked);
  if (!(_DWORD)v11)
    goto LABEL_5;
  if (one-time initialization token for shared != -1)
    goto LABEL_9;
  while (1)
  {
    MEMORY[0x1E0C80A78](v11, v12);
    v24 = v13;
    v25 = a2;
    v15 = v14 + 4;
    os_unfair_lock_lock(v14 + 4);
    specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)((void (*)(__int128 *__return_ptr))partial apply for closure #1 in PasswordManager.password(for:), &v26);
    os_unfair_lock_unlock(v15);
    if (!*((_QWORD *)&v26 + 1))
      break;
    v16 = (void *)MEMORY[0x1DF0E41AC](v26, *((_QWORD *)&v26 + 1));
    swift_bridgeObjectRelease();
    v17 = objc_msgSend(a1, sel_unlockWithPassword_, v16);

    if (!v17)
      break;
LABEL_5:
    v18 = (unint64_t)objc_msgSend(a1, sel_pageCount);
    if ((v18 & 0x8000000000000000) == 0)
    {
      MEMORY[0x1E0C80A78](v18, v19);
      v23[2] = v5;
      v23[3] = a1;
      v23[4] = a2;
      v23[5] = a3;
      v24 = a4;
      LOBYTE(v25) = a5 & 1;
      specialized Sequence.compactMap<A>(_:)((void (*)(_QWORD, __n128))partial apply for specialized closure #1 in PaperDocument.appendPages<A>(_:_:_:assetManager:useProxyPages:), (uint64_t)v23, 0, v20);
      *(_QWORD *)&v26 = v21;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SharedTagged_3<TaggedPaperPage>]);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type [SharedTagged_3<TaggedPaperPage>] and conformance [A], &demangling cache variable for type metadata for [SharedTagged_3<TaggedPaperPage>], MEMORY[0x1E0DEAF38]);
      CROrderedSet.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
      return 1;
    }
    __break(1u);
LABEL_9:
    v11 = (id)swift_once();
  }
  return 0;
}

void specialized PaperDocument.insert<A>(scan:at:in:assetManager:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  char *v33;
  id v34;
  void *v35;
  CGFloat a;
  CGFloat b;
  CGFloat c;
  CGFloat d;
  double width;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  _QWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  id v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  id v68;
  __int128 v69;
  CGAffineTransform v70;
  CGRect v71;
  CGRect v72;

  v9 = type metadata accessor for CRKeyPath();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v55 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56, v14);
  v61 = (char *)v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v16, v17);
  v54 = (char *)v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<Image>);
  v53 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60, v19);
  v64 = (char *)v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Image?);
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for Image();
  v65 = *(_QWORD *)(v67 - 8);
  MEMORY[0x1E0C80A78](v67, v25);
  v59 = (uint64_t)v46 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27, v28);
  v58 = (uint64_t)v46 - v29;
  v63 = type metadata accessor for NSFastEnumerationIterator();
  v62 = *(_QWORD *)(v63 - 8);
  v31 = MEMORY[0x1E0C80A78](v63, v30);
  v33 = (char *)v46 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = a1;
  v34 = objc_msgSend(a1, sel_docInfos, v31);
  if (v34)
  {
    v35 = v34;
    v51 = v13;
    v47 = v10;
    v48 = v9;
    v57 = a2;
    v49 = a3;
    v50 = v4;
    specialized PaperDocument.pageGeometryForInserting<A>(at:in:)(a2, a3, &v70.a);
    a = v70.a;
    b = v70.b;
    c = v70.c;
    d = v70.d;
    CGAffineTransformMakeRotation(&v70, v70.tx);
    v71.origin.x = a;
    v71.origin.y = b;
    v71.size.width = c;
    v71.size.height = d;
    v72 = CGRectApplyAffineTransform(v71, &v70);
    width = v72.size.width;
    v41 = *(_QWORD *)&v72.size.height;
    v52 = v35;
    NSArray.makeIterator()();
    while (1)
    {
      NSFastEnumerationIterator.next()();
      if (!*(_QWORD *)&v70.d)
        break;
      outlined init with take of Any(&v70, &v69);
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for ICDocCamDocumentInfo);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v42 = v68;
        v43 = v66;
        swift_retain();
        Image.init(docCamInfo:inScan:targetPageSize:assetManager:)(v42, v43, width, v41, 0, a4, (uint64_t)v24);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v24, 1, v67) == 1)
        {

          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, &demangling cache variable for type metadata for Image?);
        }
        else
        {
          v44 = v58;
          outlined init with take of PKStrokeStruct((uint64_t)v24, v58, (uint64_t (*)(_QWORD))type metadata accessor for Image);
          outlined init with copy of PKStrokeProperties(v44, v59, (uint64_t (*)(_QWORD))type metadata accessor for Image);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(v54, 1, 1, v48);
          v46[1] = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type Image and conformance Image, (uint64_t (*)(uint64_t))type metadata accessor for Image, (uint64_t)&protocol conformance descriptor for Image);
          swift_retain();
          Ref.init<A>(_:_:identity:)();
          LOBYTE(v69) = 1;
          Ref.id.getter();
          lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
          SharedTagged_3.init(_:id:)();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
          CROrderedSet.insert(_:at:)();

          (*(void (**)(char *, uint64_t))(v55 + 8))(v61, v56);
          (*(void (**)(char *, uint64_t))(v53 + 8))(v64, v60);
          outlined destroy of PKStrokeProperties(v58, (uint64_t (*)(_QWORD))type metadata accessor for Image);
          if (__OFADD__(v57++, 1))
          {
            __break(1u);
            break;
          }
        }
      }
    }
    (*(void (**)(char *, uint64_t))(v62 + 8))(v33, v63);

  }
}

uint64_t specialized PaperDocument.pageGeometryForInserting<A>(at:in:)@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v23[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >= 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
LABEL_4:
    CROrderedSet.subscript.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type Capsule<PaperDocument> and conformance Capsule<A>, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>, MEMORY[0x1E0D12B28]);
    SharedTagged_3.subscript.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v10 = v24;
    v11 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    v12 = (*(double (**)(uint64_t, uint64_t))(v11 + 56))(v10, v11);
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v19 = v24;
    v20 = v25;
    __swift_project_boxed_opaque_existential_1(v23, v24);
    v21 = (*(double (**)(uint64_t, uint64_t))(v20 + 64))(v19, v20);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    goto LABEL_5;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  result = CROrderedSet.count.getter();
  if (a1 + 1 < result)
    goto LABEL_4;
  if (one-time initialization token for defaultPageBounds != -1)
    result = swift_once();
  v12 = *(double *)&static UIConstants.defaultPageBounds;
  v14 = *(_QWORD *)algn_1F042F058;
  v18 = *((_QWORD *)&xmmword_1F042F060 + 1);
  v16 = xmmword_1F042F060;
  v21 = 0.0;
LABEL_5:
  *a2 = v12;
  *((_QWORD *)a2 + 1) = v14;
  *((_QWORD *)a2 + 2) = v16;
  *((_QWORD *)a2 + 3) = v18;
  a2[4] = v21;
  return result;
}

uint64_t specialized PaperDocument.pageGeometryForInserting<A>(at:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = a2;
  if (a1 >= 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
LABEL_4:
    CROrderedSet.subscript.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<PaperDocument>.Ref);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type Capsule<PaperDocument>.Ref and conformance Capsule<A>.Ref, &demangling cache variable for type metadata for Capsule<PaperDocument>.Ref, MEMORY[0x1E0D12A88]);
    SharedTagged_3.subscript.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v12 = v25;
    v13 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    v14 = (*(double (**)(uint64_t, uint64_t))(v13 + 56))(v12, v13);
    v16 = v15;
    v18 = v17;
    v20 = v19;
    v21 = v25;
    v22 = v26;
    __swift_project_boxed_opaque_existential_1(v24, v25);
    v23 = (*(double (**)(uint64_t, uint64_t))(v22 + 64))(v21, v22);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
    goto LABEL_5;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  result = CROrderedSet.count.getter();
  if (a1 + 1 < result)
    goto LABEL_4;
  if (one-time initialization token for defaultPageBounds != -1)
    result = swift_once();
  v14 = *(double *)&static UIConstants.defaultPageBounds;
  v16 = *(_QWORD *)algn_1F042F058;
  v20 = *((_QWORD *)&xmmword_1F042F060 + 1);
  v18 = xmmword_1F042F060;
  v23 = 0.0;
LABEL_5:
  *a3 = v14;
  *((_QWORD *)a3 + 1) = v16;
  *((_QWORD *)a3 + 2) = v18;
  *((_QWORD *)a3 + 3) = v20;
  a3[4] = v23;
  return result;
}

id specialized PaperDocument.create<A>(page:fromDocument:asset:in:assetManager:useProxyPages:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  id result;
  void *v55;
  void *v56;
  double v57;
  CGFloat v58;
  double v59;
  CGFloat v60;
  double v61;
  CGFloat v62;
  double v63;
  CGFloat v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  __int128 v103;
  __int128 v104;
  __C::CGRect v105;
  __C::CGRect v106;

  LODWORD(v101) = a6;
  v80 = a5;
  v96 = a4;
  v102 = a2;
  v100 = a7;
  v93 = type metadata accessor for CRKeyPath();
  v90 = *(_QWORD *)(v93 - 8);
  MEMORY[0x1E0C80A78](v93, v9);
  v94 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRKeyPath?);
  MEMORY[0x1E0C80A78](v11, v12);
  v89 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PaperDocumentPage>);
  v91 = *(_QWORD *)(v14 - 8);
  v92 = v14;
  MEMORY[0x1E0C80A78](v14, v15);
  v88 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
  MEMORY[0x1E0C80A78](v85, v17);
  v84 = (uint64_t)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19, v20);
  v83 = (char *)&v79 - v21;
  v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x1E0C80A78](v82, v22);
  v86 = (uint64_t)&v79 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v79 - v26;
  v81 = (void (*)(char *, uint64_t, uint64_t, uint64_t))__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
  MEMORY[0x1E0C80A78](v81, v28);
  v30 = (char *)&v79 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v79 - v33;
  v35 = type metadata accessor for PaperDocumentPage();
  MEMORY[0x1E0C80A78](v35, v36);
  v87 = (uint64_t)&v79 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v38, v39);
  v41 = (char *)&v79 - v40;
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v98 = *(_QWORD *)(v42 - 8);
  v99 = v42;
  MEMORY[0x1E0C80A78](v42, v43);
  v95 = (uint64_t)&v79 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for PDFPageID();
  v46 = *(_QWORD *)(v45 - 8);
  MEMORY[0x1E0C80A78](v45, v47);
  v49 = (uint64_t *)((char *)&v79 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  v97 = v50;
  v51 = (char *)v49 + *(int *)(v50 + 20);
  v52 = type metadata accessor for CRAsset();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v51, a3, v52);
  *v49 = a1;
  if ((v101 & 1) == 0)
  {
    v73 = objc_msgSend(v102, sel_pageAtIndex_, a1);
    if (v73)
    {
      v74 = v73;
      type metadata accessor for PaperKitPDFPage(0);
      if (swift_dynamicCastClass())
      {
        v71 = v95;
        specialized PaperKitPDFPage.decodePaperPage<A>(pageID:in:assetManager:)((uint64_t)v49, v96, v80, v95);

        v72 = (uint64_t)v49;
        goto LABEL_8;
      }

    }
    outlined destroy of PKStrokeProperties((uint64_t)v49, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
    v78 = 1;
    v75 = v99;
    v77 = v100;
    v76 = v98;
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 56))(v77, v78, 1, v75);
  }
  v53 = v102;
  result = objc_msgSend(v102, sel_pageAtIndex_, 0);
  if (result)
  {
    v55 = result;
    v101 = (uint64_t)objc_msgSend(result, sel_rotation);

    result = objc_msgSend(v53, sel_pageAtIndex_, 0);
    if (result)
    {
      v56 = result;
      objc_msgSend(result, sel_boundsForBox_, 0);
      v58 = v57;
      v60 = v59;
      v62 = v61;
      v64 = v63;

      type metadata accessor for CGRect(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type CGRect and conformance CGRect, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
      v103 = 0u;
      v104 = 0u;
      CRRegister.init(wrappedValue:)();
      v103 = 0u;
      v104 = 0u;
      CRRegister.init(wrappedValue:)();
      v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v34, 1, 1, v65);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v34, (uint64_t)v30, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      lazy protocol witness table accessor for type TaggedValue_2<CGRect, Quad>? and conformance <A> A?();
      CRRegister.init(wrappedValue:)();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for TaggedValue_2<CGRect, Quad>?);
      *(_QWORD *)&v103 = 0;
      lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
      CRRegister.init(wrappedValue:)();
      v102 = &v41[*(int *)(v35 + 32)];
      v81 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56);
      v81(v27, 1, 1, v97);
      v66 = v86;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v27, v86, &demangling cache variable for type metadata for PDFPageID?);
      lazy protocol witness table accessor for type PDFPageID? and conformance <A> A?();
      CRRegister.init(wrappedValue:)();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, &demangling cache variable for type metadata for PDFPageID?);
      v67 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>);
      v68 = (uint64_t)v83;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v83, 1, 1, v67);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v68, v84, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      lazy protocol witness table accessor for type Ref<PKDrawingStruct>? and conformance <A> A?();
      CRRegister.init(wrappedValue:)();
      outlined destroy of StocksKitCurrencyCache.Provider?(v68, (uint64_t *)&demangling cache variable for type metadata for Ref<PKDrawingStruct>?);
      *(_QWORD *)&v103 = 0;
      lazy protocol witness table accessor for type CanvasElementFlags and conformance CanvasElementFlags();
      CRRegister.init(wrappedValue:)();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12350]);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_9<TaggedCanvasElement> and conformance SharedTagged_9<A>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>, MEMORY[0x1E0D12358]);
      CROrderedSet.init()();
      *(_QWORD *)&v103 = MEMORY[0x1E0DEE9D8];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CRKeyPath]);
      lazy protocol witness table accessor for type CRAsset? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type [CRKeyPath] and conformance <A> [A], &demangling cache variable for type metadata for [CRKeyPath], MEMORY[0x1E0D12C68], MEMORY[0x1E0D12D28]);
      CRRegister.init(wrappedValue:)();
      *(_QWORD *)&v41[*(int *)(v35 + 52)] = MEMORY[0x1E0DEE9E0];
      v105.origin.x = v58;
      v105.origin.y = v60;
      v105.size.width = v62;
      v105.size.height = v64;
      v106.origin.x = v58;
      v106.origin.y = v60;
      v106.size.width = v62;
      v106.size.height = v64;
      PaperDocumentPage.setContentsBounds(_:fullBounds:)(v105, v106);
      outlined init with copy of PKStrokeProperties((uint64_t)v49, (uint64_t)v27, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      v81(v27, 0, 1, v97);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v27, v66, &demangling cache variable for type metadata for PDFPageID?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<PDFPageID?>);
      CRRegister.wrappedValue.setter();
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v27, &demangling cache variable for type metadata for PDFPageID?);
      specialized PaperPage.axisAlignedRotationInDegrees.setter(v101);
      *(_QWORD *)&v103 = 32;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<CanvasElementFlags>);
      CRRegister.wrappedValue.setter();
      LOBYTE(v103) = 2;
      outlined init with copy of PKStrokeProperties((uint64_t)v41, v87, (uint64_t (*)(_QWORD))type metadata accessor for PaperDocumentPage);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v90 + 56))(v89, 1, 1, v93);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocumentPage and conformance PaperDocumentPage, (uint64_t (*)(uint64_t))type metadata accessor for PaperDocumentPage, (uint64_t)&protocol conformance descriptor for PaperDocumentPage);
      swift_retain();
      v69 = v88;
      Ref.init<A>(_:_:identity:)();
      v70 = v92;
      Ref.id.getter();
      (*(void (**)(char *, uint64_t))(v91 + 8))(v69, v70);
      lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
      v71 = v95;
      SharedTagged_3.init(_:id:)();
      outlined destroy of PKStrokeProperties((uint64_t)v41, (uint64_t (*)(_QWORD))type metadata accessor for PaperDocumentPage);
      v72 = (uint64_t)v49;
LABEL_8:
      outlined destroy of PKStrokeProperties(v72, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      v76 = v98;
      v75 = v99;
      v77 = v100;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v98 + 32))(v100, v71, v99);
      v78 = 0;
      return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v76 + 56))(v77, v78, 1, v75);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized PaperKitPDFPage.decodePaperPage<A>(pageID:in:assetManager:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  char *v47;
  double v48;
  double v49;
  double v50;
  double v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  char *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void (*v66)(char *, unint64_t, uint64_t);
  char *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  void *v71;
  char *v72;
  id v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  void *v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  uint8_t *v99;
  char *v101;
  char *v102;
  void (*v103)(_QWORD *, _QWORD);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  void (*v112)(_QWORD *, _QWORD);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  _QWORD v152[5];

  v140 = a1;
  v136 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v7, v8);
  v126 = (uint64_t)&v124 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_3<TaggedPaperPage>>);
  v130 = *(_QWORD *)(v134 - 8);
  MEMORY[0x1E0C80A78](v134, v10);
  v129 = (char *)&v124 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v128 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v125 = (char *)&v124 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15, v16);
  v131 = (char *)&v124 - v17;
  v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_3<TaggedPaperPage>>>);
  v127 = *(_QWORD *)(v132 - 8);
  MEMORY[0x1E0C80A78](v132, v18);
  v135 = (char *)&v124 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<UnknownCanvasElement>?);
  MEMORY[0x1E0C80A78](v20, v21);
  v144 = (char *)&v124 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
  MEMORY[0x1E0C80A78](v23, v24);
  v145 = (char *)&v124 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v149 = (uint64_t)&v124 - v28;
  v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29, v31);
  v143 = (char *)&v124 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33, v34);
  v148 = (char *)&v124 - v35;
  MEMORY[0x1E0C80A78](v36, v37);
  v142 = (char *)&v124 - v38;
  v150 = type metadata accessor for AnnotationImporter.ImportedElement();
  v39 = *(_QWORD *)(v150 - 8);
  MEMORY[0x1E0C80A78](v150, v40);
  v42 = (char *)&v124 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = MEMORY[0x1E0C80A78](v43, v44);
  v47 = (char *)&v124 - v46;
  objc_msgSend(v4, sel_boundsForBox_, 0, v45);
  v141 = (char *)v4;
  v137 = a3;
  v138 = a2;
  v52 = specialized static AnnotationImporter._importAnnotations<A>(from:in:assetManager:scale:mediaBox:)(v4, a2, a3, 1.0, v48, v49, v50, v51);
  v53 = *(_QWORD *)(v52 + 16);
  v133 = v12;
  v139 = v52;
  if (v53)
  {
    v54 = v52 + ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80));
    v147 = *(_QWORD *)(v39 + 72);
    v151 = MEMORY[0x1E0DEE9D8];
    v55 = (uint64_t)v145;
    v146 = v42;
    do
    {
      outlined init with copy of PKStrokeProperties(v54, (uint64_t)v47, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
      outlined init with copy of PKStrokeProperties((uint64_t)v47, (uint64_t)v42, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v55, 1, 1, v29);
        outlined destroy of PKStrokeProperties((uint64_t)v42, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
      }
      else
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v55, v42, v29);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56))(v55, 0, 1, v29);
      }
      v56 = v149;
      outlined init with take of (key: Int, value: AnyCRValue)?(v55, v149, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
      outlined destroy of PKStrokeProperties((uint64_t)v47, (uint64_t (*)(_QWORD))type metadata accessor for AnnotationImporter.ImportedElement);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v56, 1, v29) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v56, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>?);
        v42 = v146;
      }
      else
      {
        v57 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 32);
        v58 = v142;
        v57(v142, v56, v29);
        v57(v148, (uint64_t)v58, v29);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          v59 = v151;
        else
          v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v151 + 16) + 1, 1, v151, &demangling cache variable for type metadata for _ContiguousArrayStorage<SharedTagged_9<TaggedCanvasElement>>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
        v42 = v146;
        v61 = *(_QWORD *)(v59 + 16);
        v60 = *(_QWORD *)(v59 + 24);
        if (v61 >= v60 >> 1)
          v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v60 > 1, v61 + 1, 1, v59, &demangling cache variable for type metadata for _ContiguousArrayStorage<SharedTagged_9<TaggedCanvasElement>>, (uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
        *(_QWORD *)(v59 + 16) = v61 + 1;
        v62 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
        v151 = v59;
        v57((char *)(v59 + v62 + *(_QWORD *)(v30 + 72) * v61), (uint64_t)v148, v29);
        v55 = (uint64_t)v145;
      }
      v54 += v147;
      --v53;
    }
    while (v53);
  }
  else
  {
    v151 = MEMORY[0x1E0DEE9D8];
  }
  v63 = *(_QWORD *)(v151 + 16);
  if (v63)
  {
    v64 = v151 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
    v65 = *(_QWORD *)(v30 + 72);
    v66 = *(void (**)(char *, unint64_t, uint64_t))(v30 + 16);
    swift_bridgeObjectRetain();
    v67 = v143;
    v68 = (uint64_t)v144;
    while (1)
    {
      v66(v67, v64, v29);
      SharedTagged_9.unknown.getter();
      v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Ref<UnknownCanvasElement>);
      v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 48))(v68, 1, v69);
      outlined destroy of StocksKitCurrencyCache.Provider?(v68, &demangling cache variable for type metadata for Ref<UnknownCanvasElement>?);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v67, v29);
      if (v70 != 1)
        break;
      v64 += v65;
      if (!--v63)
      {
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
    swift_bridgeObjectRelease_n();
    v95 = v136;
    v72 = v141;
    goto LABEL_28;
  }
LABEL_21:
  v71 = (void *)MEMORY[0x1DF0E41AC](4935760, 0xE300000000000000);
  v72 = v141;
  v73 = objc_msgSend(v141, sel_applicationDataWithName_, v71);

  if (!v73)
  {
    swift_bridgeObjectRelease();
    v95 = v136;
LABEL_28:
    v79 = v140;
    v80 = v138;
LABEL_39:
    specialized static PaperDocumentPage.create<A>(pdfPage:pageID:in:assetManager:importedElements:)(v72, v79, v80, v139, v95);
    return swift_bridgeObjectRelease();
  }
  v74 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v76 = v75;

  v77 = (void *)MEMORY[0x1DF0E41AC](0x687361484B5050, 0xE700000000000000);
  v78 = objc_msgSend(v72, sel_applicationDataWithName_, v77);

  v79 = v140;
  v80 = v138;
  if (!v78)
  {
    swift_bridgeObjectRelease();
LABEL_33:
    if (one-time initialization token for logger != -1)
      swift_once();
    v96 = type metadata accessor for Logger();
    __swift_project_value_buffer(v96, (uint64_t)logger);
    v97 = Logger.logObject.getter();
    v98 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v97, v98))
    {
      v99 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v99 = 0;
      _os_log_impl(&dword_1DDB0F000, v97, v98, "Importing PaperKit page skipped due to hash difference.", v99, 2u);
      MEMORY[0x1DF0E6558](v99, -1, -1);

      outlined consume of Data._Representation(v74, v76);
    }
    else
    {
      outlined consume of Data._Representation(v74, v76);

    }
    goto LABEL_38;
  }
  v81 = v138;
  v82 = v76;
  v83 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v85 = v84;

  Data.paperKitHashVersion.getter(v83, v85);
  if ((v86 & 0x100) != 0)
  {
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v83, v85);
LABEL_32:
    v76 = v82;
    v80 = v81;
    v72 = v141;
    goto LABEL_33;
  }
  specialized PaperKitPDFPage.paperKitHash<A, B>(version:elements:in:)(v86, v151, v81);
  v88 = v87;
  v90 = v89;
  swift_bridgeObjectRelease();
  specialized static Data.== infix(_:_:)(v83, v85);
  v91 = v85;
  v93 = v92;
  outlined consume of Data._Representation(v88, v90);
  if ((v93 & 1) == 0)
  {
    outlined consume of Data._Representation(v83, v91);
    v79 = v140;
    goto LABEL_32;
  }
  v149 = v83;
  v150 = v91;
  outlined copy of Data._Representation(v74, v82);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_3<TaggedPaperPage>> and conformance CRRegister<A>, &demangling cache variable for type metadata for CRRegister<SharedTagged_3<TaggedPaperPage>>, MEMORY[0x1E0D117A8]);
  v151 = v74;
  v94 = v134;
  Capsule<>.init(serializedData:allowedAppFormats:)();
  v148 = (char *)v82;
  v80 = v81;
  Capsule.Ref.import<A>(_:)();
  v101 = v129;
  Capsule<>.root.getter();
  v102 = v131;
  CRRegister.value.getter();
  (*(void (**)(char *, uint64_t))(v130 + 8))(v101, v94);
  v103 = (void (*)(_QWORD *, _QWORD))SharedTagged_3.subscript.modify();
  v105 = *(_QWORD *)(v104 + 24);
  v106 = *(_QWORD *)(v104 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v104, v105);
  v107 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v106 + 104);
  v108 = type metadata accessor for PaperDocument(0);
  v109 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  v107(v139, v81, v108, v109, v105, v106);
  v110 = v102;
  v111 = v133;
  v103(v152, 0);
  v112 = (void (*)(_QWORD *, _QWORD))SharedTagged_3.subscript.modify();
  v114 = *(_QWORD *)(v113 + 24);
  v115 = *(_QWORD *)(v113 + 32);
  __swift_mutable_project_boxed_opaque_existential_1(v113, v114);
  v79 = v140;
  v72 = v141;
  v116 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v115 + 168))(v141, v140, v137, v114, v115);
  v112(v152, 0);
  if ((v116 & 1) == 0)
  {
    outlined consume of Data._Representation(v149, v150);
    outlined consume of Data._Representation(v151, (unint64_t)v148);
    (*(void (**)(char *, uint64_t))(v128 + 8))(v110, v111);
    (*(void (**)(char *, uint64_t))(v127 + 8))(v135, v132);
LABEL_38:
    v95 = v136;
    goto LABEL_39;
  }
  swift_bridgeObjectRelease();
  v117 = v126;
  outlined init with copy of PKStrokeProperties(v79, v126, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
  v118 = type metadata accessor for PDFPageID();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v118 - 8) + 56))(v117, 0, 1, v118);
  v119 = type metadata accessor for PageId(0);
  v120 = v117 + *(int *)(v119 + 20);
  v121 = v128;
  (*(void (**)(char *, char *, uint64_t))(v128 + 16))(v125, v110, v111);
  lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
  WeakTagged_3.init(_:)();
  v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v122 - 8) + 56))(v120, 0, 1, v122);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v119 - 8) + 56))(v117, 0, 1, v119);
  v123 = (uint64_t)&v72[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId];
  swift_beginAccess();
  outlined assign with take of Date?(v117, v123, &demangling cache variable for type metadata for PageId?);
  swift_endAccess();
  outlined consume of Data._Representation(v149, v150);
  outlined consume of Data._Representation(v151, (unint64_t)v148);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v135, v132);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v121 + 32))(v136, v110, v111);
}

id specialized PaperDocument.update<A>(_:in:otherDocuments:use:)(char *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  double v140;
  uint64_t v141;
  char *v142;
  void (*v143)(char *, uint64_t, uint64_t, double);
  void (*v144)(char *, uint64_t);
  char *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  os_unfair_lock_s *v151;
  char *v152;
  uint64_t v153;
  unsigned int (*v154)(char *, uint64_t, uint64_t);
  id result;
  void *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  char *v166;
  char *v167;
  unint64_t v168;
  unint64_t v169;
  char *v170;
  uint64_t v171;
  char *v172;
  void (*v173)(char *, char *, uint64_t);
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t (**v177)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  BOOL (**v178)(uint64_t);
  uint64_t (**v179)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  unint64_t v188;
  char v189;
  unint64_t v190;
  os_unfair_lock_s *v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  unsigned int (*v195)(uint64_t, uint64_t, uint64_t);
  uint64_t v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int (*v214)(uint64_t, uint64_t, char *);
  Swift::UInt *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unsigned int v220;
  uint64_t *v221;
  uint64_t v222;
  void (*v223)(char *, uint64_t);
  uint64_t v224;
  _QWORD *v225;
  unsigned int v226;
  _QWORD *v227;
  char v228;
  void (*v229)(char *, char *, uint64_t);
  uint64_t v230;
  Swift::UInt *v231;
  char *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  unint64_t v237;
  char v238;
  void (*v239)(char *, char *, uint64_t);
  uint64_t v240;
  uint64_t v241;
  void (*v242)(char *, char *, uint64_t);
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  void (*v247)(uint64_t, uint64_t);
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  char v252;
  char v253;
  char *v254;
  Swift::UInt *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  char v262;
  void *v263;
  uint64_t v264;
  char isUniquelyReferenced_nonNull_native;
  void (*v266)(uint64_t, uint64_t);
  void *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  void (*v275)(uint64_t *, _QWORD);
  uint64_t v276;
  uint64_t v277;
  char *v278;
  uint64_t *v279;
  int EnumCaseMultiPayload;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  BOOL v286;
  Swift::UInt *v287;
  unint64_t v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  void (*v294)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  void (*v298)(uint64_t, uint64_t, uint64_t);
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  char *v318;
  char *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  char *v323;
  char *v324;
  char *v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  _QWORD *v330;
  uint64_t v331;
  uint64_t v332;
  char *v333;
  char *v334;
  uint64_t v335;
  char *v336;
  _QWORD *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  char *v342;
  char *v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  Swift::UInt *v350;
  uint64_t v351;
  char *v352;
  char *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  char *v360;
  uint64_t v361;
  uint64_t *v362;
  char *v363;
  char *v364;
  char *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  void (*v369)(uint64_t, _QWORD, uint64_t, char *);
  char *v370;
  char **v371;
  char **v372;
  char *v373;
  uint64_t v374;
  Swift::UInt *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  char *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  void (*v383)(char *, char *, uint64_t);
  uint64_t v384;
  uint64_t v385;
  char *v386;
  uint64_t v387;
  char *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;

  v5 = v4;
  v344 = a4;
  v384 = a3;
  v386 = a1;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v7, v8);
  v381 = (uint64_t)&v318 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v391 = type metadata accessor for PageId(0);
  v387 = *(_QWORD *)(v391 - 8);
  MEMORY[0x1E0C80A78](v391, v10);
  v12 = (uint64_t *)((char *)&v318 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v345 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change);
  MEMORY[0x1E0C80A78](v345, v13);
  v362 = (uint64_t *)((char *)&v318 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v15, v16);
  v361 = (uint64_t)&v318 - v17;
  v327 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<CollectionDifference<PaperDocument.PDFPageAndPaperPage>>);
  MEMORY[0x1E0C80A78](v327, v18);
  v326 = (char *)&v318 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v363 = (char *)&v318 - v22;
  v23 = type metadata accessor for PaperDocument.PDFPageAndPaperPage(0);
  v377 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v24);
  v373 = (char *)&v318 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26, v27);
  v372 = (char **)((char *)&v318 - v28);
  MEMORY[0x1E0C80A78](v29, v30);
  v371 = (char **)((char *)&v318 - v31);
  MEMORY[0x1E0C80A78](v32, v33);
  v354 = (uint64_t)&v318 - v34;
  MEMORY[0x1E0C80A78](v35, v36);
  v349 = (uint64_t)&v318 - v37;
  v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v389 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38, v39);
  v370 = (char *)&v318 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v41, v42);
  v342 = (char *)&v318 - v43;
  v347 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (PDFPageID?, PDFPageID?));
  MEMORY[0x1E0C80A78](v347, v44);
  v356 = (uint64_t)&v318 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v380 = type metadata accessor for PDFPageID();
  v382 = *(_QWORD *)(v380 - 8);
  MEMORY[0x1E0C80A78](v380, v46);
  v350 = (Swift::UInt *)((char *)&v318 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v48, v49);
  v330 = (char **)((char *)&v318 - v50);
  MEMORY[0x1E0C80A78](v51, v52);
  v375 = (Swift::UInt *)((char *)&v318 - v53);
  v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LazySequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>>);
  MEMORY[0x1E0C80A78](v54, v55);
  v323 = (char *)&v318 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v322 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>, CRAsset>);
  MEMORY[0x1E0C80A78](v322, v57);
  v324 = (char *)&v318 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x1E0C80A78](v59, v60);
  v325 = (char *)&v318 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  v339 = type metadata accessor for CRAsset();
  v338 = *(_QWORD *)(v339 - 8);
  MEMORY[0x1E0C80A78](v339, v62);
  v318 = (char *)&v318 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v64, v65);
  v336 = (char *)&v318 - v66;
  MEMORY[0x1E0C80A78](v67, v68);
  v335 = (uint64_t)&v318 - v69;
  MEMORY[0x1E0C80A78](v70, v71);
  v319 = (char *)&v318 - v72;
  v332 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>);
  v367 = *(_QWORD *)(v332 - 8);
  MEMORY[0x1E0C80A78](v332, v73);
  v360 = (char *)&v318 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v75, v76);
  v333 = (char *)&v318 - v77;
  v368 = type metadata accessor for CRKeyPath();
  v358 = *(_QWORD *)(v368 - 8);
  MEMORY[0x1E0C80A78](v368, v78);
  v352 = (char *)&v318 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v80, v81);
  v334 = (char *)&v318 - v82;
  MEMORY[0x1E0C80A78](v83, v84);
  v379 = (char *)&v318 - v85;
  v86 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v86, v87);
  v351 = (uint64_t)&v318 - ((v88 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v89, v90);
  v92 = (char *)&v318 - v91;
  MEMORY[0x1E0C80A78](v93, v94);
  v343 = (char *)&v318 - v95;
  MEMORY[0x1E0C80A78](v96, v97);
  v331 = (uint64_t)&v318 - v98;
  MEMORY[0x1E0C80A78](v99, v100);
  v340 = (uint64_t)&v318 - v101;
  MEMORY[0x1E0C80A78](v102, v103);
  v374 = (uint64_t)&v318 - v104;
  v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PDFPageID?);
  MEMORY[0x1E0C80A78](v105, v106);
  v348 = (uint64_t)&v318 - ((v107 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v108, v109);
  v341 = (uint64_t)&v318 - v110;
  MEMORY[0x1E0C80A78](v111, v112);
  v337 = (char **)((char *)&v318 - v113);
  MEMORY[0x1E0C80A78](v114, v115);
  v355 = (uint64_t)&v318 - v116;
  MEMORY[0x1E0C80A78](v117, v118);
  v357 = (uint64_t)&v318 - v119;
  MEMORY[0x1E0C80A78](v120, v121);
  v378 = (uint64_t)&v318 - v122;
  MEMORY[0x1E0C80A78](v123, v124);
  v388 = (char *)&v318 - v125;
  v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v376 = *(_QWORD *)(v126 - 8);
  MEMORY[0x1E0C80A78](v126, v127);
  v353 = (char *)&v318 - ((v128 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v129, v130);
  v383 = (void (*)(char *, char *, uint64_t))((char *)&v318 - v131);
  v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v132, v133);
  v364 = (char *)&v318 - ((v134 + 15) & 0xFFFFFFFFFFFFFFF0);
  v366 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
  v320 = *(_QWORD *)(v366 - 8);
  MEMORY[0x1E0C80A78](v366, v135);
  v365 = (char *)&v318 - ((v136 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  v138 = *(_QWORD *)(v137 - 8);
  v140 = MEMORY[0x1E0C80A78](v137, v139);
  v142 = (char *)&v318 - ((v141 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = *(void (**)(char *, uint64_t, uint64_t, double))(v138 + 16);
  v329 = v5;
  v143(v142, v5, v137, v140);
  v359 = a2;
  v392 = a2;
  v385 = v23;
  v321 = CROrderedSet.map<A>(_:)();
  v390 = 0;
  v144 = *(void (**)(char *, uint64_t))(v138 + 8);
  v145 = v386;
  v328 = v137;
  v144(v142, v137);
  v398 = v384;
  swift_bridgeObjectRetain();
  v146 = (uint64_t)objc_msgSend(v145, sel_pageCount);
  if (v146 < 0)
  {
LABEL_118:
    __break(1u);
    goto LABEL_119;
  }
  v137 = v146;
  v384 = v38;
  if (!v146)
  {
    v148 = MEMORY[0x1E0DEE9D8];
    v149 = v388;
LABEL_26:
    v397 = MEMORY[0x1E0DEE9E8];
    CROrderedSet.makeIterator()();
    v373 = &v386[OBJC_IVAR____TtC8PaperKit19PaperKitPDFDocument_pageIdMap];
    swift_beginAccess();
    v170 = v364;
    CROrderedSet.Iterator.next()();
    v171 = v376;
    v371 = *(char ***)(v376 + 48);
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v371)(v170, 1, v126) == 1)
    {
LABEL_27:
      (*(void (**)(char *, uint64_t))(v320 + 8))(v365, v366);
      v393 = v321;
      v396 = v148;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [PaperDocument.PDFPageAndPaperPage]);
      lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type [PaperDocument.PDFPageAndPaperPage] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [PaperDocument.PDFPageAndPaperPage], MEMORY[0x1E0DEAF20]);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument.PDFPageAndPaperPage and conformance PaperDocument.PDFPageAndPaperPage, type metadata accessor for PaperDocument.PDFPageAndPaperPage, (uint64_t)&protocol conformance descriptor for PaperDocument.PDFPageAndPaperPage);
      v172 = v333;
      BidirectionalCollection<>.difference<A>(from:)();
      swift_bridgeObjectRelease();
      v173 = *(void (**)(char *, char *, uint64_t))(v367 + 16);
      v174 = (uint64_t)v323;
      v175 = v332;
      v173(v323, v172, v332);
      v176 = v324;
      v383 = v173;
      v173(v324, (char *)v174, v175);
      v177 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))&v176[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>)
                                                                                    + 44)];
      *v177 = closure #3 in PaperDocument.update<A>(_:in:otherDocuments:use:);
      v177[1] = 0;
      v178 = (BOOL (**)(uint64_t))&v176[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>)
                                                         + 36)];
      *v178 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
      v178[1] = 0;
      v179 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))&v176[*(int *)(v322 + 44)];
      *v179 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
      v179[1] = 0;
      outlined destroy of StocksKitCurrencyCache.Provider?(v174, (uint64_t *)&demangling cache variable for type metadata for LazySequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>>);
      v180 = v386;
      v181 = v325;
      v388 = v180;
      specialized Sequence.first(where:)(v176, &v398, v180, v325);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v176, (uint64_t *)&demangling cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<CollectionDifference<PaperDocument.PDFPageAndPaperPage>, CRAsset?>>, CRAsset>);
      swift_bridgeObjectRelease();
      v182 = v338;
      v183 = v339;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v338 + 48))(v181, 1, v339) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v181, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
        v184 = (uint64_t)v363;
LABEL_87:
        v268 = (uint64_t)v326;
        v383(v326, v333, v175);
        lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CollectionDifference<PaperDocument.PDFPageAndPaperPage> and conformance CollectionDifference<A>, &demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>, MEMORY[0x1E0DECE10]);
        dispatch thunk of Collection.startIndex.getter();
        v269 = v327;
        *(_QWORD *)(v268 + *(int *)(v327 + 36)) = v393;
        outlined init with take of (key: Int, value: AnyCRValue)?(v268, v184, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<PaperDocument.PDFPageAndPaperPage>>);
        v270 = (uint64_t *)(v184 + *(int *)(v269 + 36));
        v271 = *v270;
        dispatch thunk of Collection.endIndex.getter();
        v272 = v389;
        if (v271 != v393)
        {
          do
          {
            v275 = (void (*)(uint64_t *, _QWORD))dispatch thunk of Collection.subscript.read();
            v276 = v361;
            outlined init with copy of Ref<PKStrokeInheritedProperties>?(v277, v361, (uint64_t *)&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change);
            v275(&v393, 0);
            v278 = v360;
            v383(v360, (char *)v184, v175);
            dispatch thunk of Collection.formIndex(after:)();
            (*(void (**)(char *, uint64_t))(v367 + 8))(v278, v175);
            v279 = v362;
            outlined init with take of (key: Int, value: AnyCRValue)?(v276, (uint64_t)v362, (uint64_t *)&demangling cache variable for type metadata for CollectionDifference<PaperDocument.PDFPageAndPaperPage>.Change);
            EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
            v281 = *v279;
            v282 = (uint64_t)v279
                 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: PaperDocument.PDFPageAndPaperPage, associatedWith: Int?))
                          + 48);
            if (EnumCaseMultiPayload == 1)
            {
              objc_msgSend(v388, sel_removePageAtIndex_, v281);
            }
            else
            {
              v390 = v281;
              v283 = v354;
              outlined init with take of PKStrokeStruct(v282, v354, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
              v284 = v348;
              outlined init with copy of Ref<PKStrokeInheritedProperties>?(v283, v348, &demangling cache variable for type metadata for PDFPageID?);
              v285 = v382;
              v286 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v382 + 48))(v284, 1, v380) == 1;
              v287 = v350;
              if (v286)
              {
                outlined destroy of StocksKitCurrencyCache.Provider?(v284, &demangling cache variable for type metadata for PDFPageID?);
                v288 = v344;
                if (v344 == 0x8000000000000000)
                {
                  outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
                  outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
                  type metadata accessor for PaperKitPDFPage(0);
                  if (one-time initialization token for blankPageImage != -1)
                    swift_once();
                  result = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithImage_, static PaperKitPDFPage.blankPageImage);
                  v283 = v354;
                  if (!result)
                    goto LABEL_122;
                }
                else
                {
                  outlined copy of PaperDocument.PDFDocumentUse(v344);
                  outlined consume of PaperDocument.PDFDocumentUse(v288);
                  outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
                  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperKitPDFPage(0)), sel_init);
                }
                v293 = one-time initialization token for defaultPageBounds;
                v292 = (char *)result;
                if (v293 != -1)
                  swift_once();
                objc_msgSend(v292, sel_setBounds_forBox_, 0, *(double *)&static UIConstants.defaultPageBounds, *(double *)algn_1F042F058, xmmword_1F042F060);
                v294 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v285 + 56);
                v295 = (uint64_t)v343;
                v294(v343, 1, 1, v380);
                v296 = v391;
                v297 = v295 + *(int *)(v391 + 20);
                v298 = *(void (**)(uint64_t, uint64_t, uint64_t))(v272 + 16);
                v299 = v384;
                v298(v297, v283 + *(int *)(v385 + 20), v384);
                v300 = v299;
                v272 = v389;
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v389 + 56))(v297, 0, 1, v300);
                (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v387 + 56))(v295, 0, 1, v296);
                v301 = (uint64_t)&v292[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId];
                swift_beginAccess();
                outlined assign with take of Date?(v295, v301, &demangling cache variable for type metadata for PageId?);
                swift_endAccess();

              }
              else
              {
                outlined init with take of PKStrokeStruct(v284, (uint64_t)v350, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
                v289 = v283 + *(int *)(v385 + 20);
                v290 = specialized closure #2 in PaperDocument.update<A>(_:in:otherDocuments:use:)(v287, v289, v388, &v398);
                if (v290)
                {
                  v291 = (uint64_t)v287;
                  v292 = v290;
                  outlined destroy of PKStrokeProperties(v291, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
                }
                else
                {
                  v302 = v344;
                  if (v344 == 0x8000000000000000)
                  {
                    outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
                    outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
                    type metadata accessor for PaperKitPDFPage(0);
                    if (one-time initialization token for blankPageImage != -1)
                      swift_once();
                    result = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithImage_, static PaperKitPDFPage.blankPageImage);
                    if (!result)
                      goto LABEL_123;
                  }
                  else
                  {
                    outlined copy of PaperDocument.PDFDocumentUse(v344);
                    outlined consume of PaperDocument.PDFDocumentUse(v302);
                    outlined consume of PaperDocument.PDFDocumentUse(0x8000000000000000);
                    result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PaperKitPDFPage(0)), sel_init);
                  }
                  v303 = v272;
                  v304 = one-time initialization token for defaultPageBounds;
                  v292 = (char *)result;
                  if (v304 != -1)
                    swift_once();
                  objc_msgSend(v292, sel_setBounds_forBox_, 0, *(double *)&static UIConstants.defaultPageBounds, *(double *)algn_1F042F058, xmmword_1F042F060);
                  v305 = (uint64_t)v343;
                  v306 = v380;
                  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v382 + 56))(v343, 1, 1, v380);
                  v307 = v391;
                  v308 = v305 + *(int *)(v391 + 20);
                  v309 = v289;
                  v310 = v384;
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(v303 + 16))(v308, v309, v384);
                  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v303 + 56))(v308, 0, 1, v310);
                  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v387 + 56))(v305, 0, 1, v307);
                  v311 = (uint64_t)&v292[OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId];
                  swift_beginAccess();
                  outlined assign with take of Date?(v305, v311, &demangling cache variable for type metadata for PageId?);
                  swift_endAccess();

                  v312 = (uint64_t)v350;
                  v313 = v338;
                  v314 = v336;
                  v315 = v339;
                  (*(void (**)(char *, uint64_t, uint64_t))(v338 + 16))(v336, (uint64_t)v350 + *(int *)(v306 + 20), v339);
                  v316 = v335;
                  specialized Set._Variant.insert(_:)(v335, v314);
                  v317 = v316;
                  v272 = v303;
                  (*(void (**)(uint64_t, uint64_t))(v313 + 8))(v317, v315);
                  outlined destroy of PKStrokeProperties(v312, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
                  v283 = v354;
                  v175 = v332;
                }
              }
              objc_msgSend(v388, sel_insertPage_atIndex_, v292, v390);

              v282 = v283;
            }
            outlined destroy of PKStrokeProperties(v282, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
            v274 = *v270;
            v184 = (uint64_t)v363;
            dispatch thunk of Collection.endIndex.getter();
          }
          while (v274 != v393);
        }
        outlined destroy of StocksKitCurrencyCache.Provider?(v184, &demangling cache variable for type metadata for IndexingIterator<CollectionDifference<PaperDocument.PDFPageAndPaperPage>>);
        (*(void (**)(char *, uint64_t))(v367 + 8))(v333, v175);
        v273 = v397;
        swift_bridgeObjectRelease();
        return (id)v273;
      }
      v258 = (uint64_t)v319;
      (*(void (**)(char *, char *, uint64_t))(v182 + 32))(v319, v181, v183);
      v259 = (uint64_t)v318;
      (*(void (**)(char *, uint64_t, uint64_t))(v182 + 16))(v318, v258, v183);
      swift_beginAccess();
      v260 = v398;
      v184 = (uint64_t)v363;
      if (*(_QWORD *)(v398 + 16) && (v261 = specialized __RawDictionaryStorage.find<A>(_:)(v258), (v262 & 1) != 0))
      {
        v263 = *(void **)(*(_QWORD *)(v260 + 56) + 8 * v261);
        swift_endAccess();
        objc_msgSend(v263, sel_copy);
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        type metadata accessor for PaperKitPDFDocument();
        if ((swift_dynamicCast() & 1) != 0)
        {
          v264 = v396;
          swift_beginAccess();
          if (v264)
          {
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v396 = v398;
            v398 = 0x8000000000000000;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v264, v259, isUniquelyReferenced_nonNull_native);
            v398 = v396;
            swift_bridgeObjectRelease();
            v266 = *(void (**)(uint64_t, uint64_t))(v182 + 8);
            v266(v259, v183);
LABEL_86:
            swift_endAccess();
            v266(v258, v183);
            goto LABEL_87;
          }
LABEL_85:
          v267 = (void *)specialized Dictionary._Variant.removeValue(forKey:)(v259);
          v266 = *(void (**)(uint64_t, uint64_t))(v182 + 8);
          v266(v259, v183);

          goto LABEL_86;
        }
      }
      else
      {
        swift_endAccess();
      }
      swift_beginAccess();
      goto LABEL_85;
    }
    v370 = *(char **)(v171 + 32);
    v92 = (char *)v380;
    v185 = (uint64_t)v379;
    v346 = v126;
    ((void (*)(_QWORD, char *, uint64_t))v370)(v383, v364, v126);
    while (1)
    {
      MEMORY[0x1DF0E3390](v126);
      v187 = *(_QWORD *)v373;
      if (!*(_QWORD *)(*(_QWORD *)v373 + 16))
        goto LABEL_42;
      swift_bridgeObjectRetain();
      v188 = specialized __RawDictionaryStorage.find<A>(_:)(v185);
      if ((v189 & 1) == 0)
        break;
      v190 = *(_QWORD *)(*(_QWORD *)(v187 + 56) + 8 * v188);
      swift_bridgeObjectRelease();
      if (one-time initialization token for lock != -1)
        swift_once();
      v191 = (os_unfair_lock_s *)(static PaperKitPDFDocument.lock + 16);
      os_unfair_lock_lock((os_unfair_lock_t)(static PaperKitPDFDocument.lock + 16));
      v192 = v340;
      v193 = v386;
      v194 = v390;
      closure #1 in PaperKitPDFDocument.subscript.getter((uint64_t)v386, v190, v340);
      v390 = v194;
      os_unfair_lock_unlock(v191);
      v195 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v387 + 48);
      v196 = v391;
      if (v195(v192, 1, v391) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v192, &demangling cache variable for type metadata for PageId?);
        result = objc_msgSend(v193, sel_pageAtIndex_, v190);
        v197 = v384;
        if (!result)
          goto LABEL_121;
        v198 = result;
        type metadata accessor for PaperKitPDFPage(0);
        v199 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
        swift_beginAccess();
        v200 = v199;
        v201 = v331;
        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v200, v331, &demangling cache variable for type metadata for PageId?);

        if (v195(v201, 1, v196) == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?(v201, &demangling cache variable for type metadata for PageId?);
          v202 = v374;
          (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(v382 + 56))(v374, 1, 1, v92);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v389 + 56))(v202 + *(int *)(v196 + 20), 1, 1, v197);
        }
        else
        {
          outlined init with take of PKStrokeStruct(v201, v374, type metadata accessor for PageId);
        }
        v203 = 0;
        v149 = v388;
      }
      else
      {
        outlined init with take of PKStrokeStruct(v192, v374, type metadata accessor for PageId);
        v203 = 0;
        v149 = v388;
      }
      v185 = (uint64_t)v379;
LABEL_47:
      v381 = v148;
      v204 = v387;
      v205 = v374;
      v206 = v391;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v387 + 56))(v374, v203, 1, v391);
      v372 = *(char ***)(v358 + 8);
      ((void (*)(uint64_t, uint64_t))v372)(v185, v368);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v204 + 48))(v205, 1, v206) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v205, &demangling cache variable for type metadata for PageId?);
        v207 = v382;
        (*(void (**)(char *, uint64_t, uint64_t, char *))(v382 + 56))(v149, 1, 1, v92);
        v208 = v92;
      }
      else
      {
        outlined init with copy of Ref<PKStrokeInheritedProperties>?(v205, (uint64_t)v149, &demangling cache variable for type metadata for PDFPageID?);
        outlined destroy of PKStrokeProperties(v205, type metadata accessor for PageId);
        v208 = v92;
        v207 = v382;
      }
      type metadata accessor for PaperDocument(0);
      lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
      v209 = (char *)v383;
      SharedTagged_3.subscript.getter();
      v210 = v394;
      v211 = v395;
      __swift_project_boxed_opaque_existential_1(&v393, v394);
      v212 = v378;
      (*(void (**)(uint64_t, uint64_t))(v211 + 88))(v210, v211);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v393);
      v213 = v357;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v212, v357, &demangling cache variable for type metadata for PDFPageID?);
      v214 = *(unsigned int (**)(uint64_t, uint64_t, char *))(v207 + 48);
      v92 = v208;
      if (v214(v213, 1, v208) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v212, &demangling cache variable for type metadata for PDFPageID?);
        v149 = v388;
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v388, &demangling cache variable for type metadata for PDFPageID?);
        (*(void (**)(char *, uint64_t))(v376 + 8))(v209, v126);
        outlined destroy of StocksKitCurrencyCache.Provider?(v213, &demangling cache variable for type metadata for PDFPageID?);
        v148 = v381;
        v185 = (uint64_t)v379;
        goto LABEL_31;
      }
      v215 = v375;
      outlined init with take of PKStrokeStruct(v213, (uint64_t)v375, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      v216 = (uint64_t)v215;
      v217 = v355;
      outlined init with copy of PKStrokeProperties(v216, v355, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      v369 = *(void (**)(uint64_t, _QWORD, uint64_t, char *))(v207 + 56);
      v369(v217, 0, 1, v208);
      v218 = v356;
      v219 = v356 + *(int *)(v347 + 48);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v217, v356, &demangling cache variable for type metadata for PDFPageID?);
      v149 = v388;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v388, v219, &demangling cache variable for type metadata for PDFPageID?);
      if (v214(v218, 1, v92) == 1)
      {
        outlined destroy of StocksKitCurrencyCache.Provider?(v217, &demangling cache variable for type metadata for PDFPageID?);
        v220 = v214(v219, 1, v92);
        v221 = (uint64_t *)&demangling cache variable for type metadata for (PDFPageID?, PDFPageID?);
        v185 = (uint64_t)v379;
        v222 = v376;
        if (v220 == 1)
        {
          outlined destroy of StocksKitCurrencyCache.Provider?(v218, &demangling cache variable for type metadata for PDFPageID?);
          v148 = v381;
LABEL_54:
          outlined destroy of PKStrokeProperties((uint64_t)v375, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
          outlined destroy of StocksKitCurrencyCache.Provider?(v378, &demangling cache variable for type metadata for PDFPageID?);
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v149, &demangling cache variable for type metadata for PDFPageID?);
          v223 = *(void (**)(char *, uint64_t))(v222 + 8);
LABEL_76:
          v209 = (char *)v383;
          v223((char *)v383, v126);
          goto LABEL_31;
        }
        goto LABEL_61;
      }
      v224 = v218;
      v225 = v337;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v224, (uint64_t)v337, &demangling cache variable for type metadata for PDFPageID?);
      v226 = v214(v219, 1, v92);
      v221 = (uint64_t *)&demangling cache variable for type metadata for (PDFPageID?, PDFPageID?);
      v185 = (uint64_t)v379;
      v222 = v376;
      if (v226 == 1)
        goto LABEL_60;
      v227 = v330;
      outlined init with take of PKStrokeStruct(v219, (uint64_t)v330, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      if (*v225 != *v227)
      {
        outlined destroy of PKStrokeProperties((uint64_t)v227, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
        v221 = &demangling cache variable for type metadata for PDFPageID?;
LABEL_60:
        outlined destroy of StocksKitCurrencyCache.Provider?(v355, &demangling cache variable for type metadata for PDFPageID?);
        outlined destroy of PKStrokeProperties((uint64_t)v225, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
        v218 = v356;
LABEL_61:
        outlined destroy of StocksKitCurrencyCache.Provider?(v218, v221);
        goto LABEL_62;
      }
      v228 = static CRAsset.== infix(_:_:)();
      outlined destroy of PKStrokeProperties((uint64_t)v227, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      outlined destroy of StocksKitCurrencyCache.Provider?(v355, &demangling cache variable for type metadata for PDFPageID?);
      outlined destroy of PKStrokeProperties((uint64_t)v225, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      outlined destroy of StocksKitCurrencyCache.Provider?(v356, &demangling cache variable for type metadata for PDFPageID?);
      v149 = v388;
      v148 = v381;
      if ((v228 & 1) != 0)
        goto LABEL_54;
LABEL_62:
      v229 = *(void (**)(char *, char *, uint64_t))(v222 + 16);
      v229(v353, (char *)v383, v126);
      lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
      v230 = (uint64_t)v342;
      WeakTagged_3.init(_:)();
      v231 = v375;
      v232 = v386;
      v233 = specialized closure #2 in PaperDocument.update<A>(_:in:otherDocuments:use:)(v375, v230, v386, &v398);
      (*(void (**)(uint64_t, uint64_t))(v389 + 8))(v230, v384);
      if (!v233)
      {
        v242 = v229;
        v243 = v338;
        v244 = v336;
        v245 = v339;
        (*(void (**)(char *, char *, uint64_t))(v338 + 16))(v336, (char *)v231 + *(int *)(v380 + 20), v339);
        v246 = v335;
        specialized Set._Variant.insert(_:)(v335, v244);
        v247 = *(void (**)(uint64_t, uint64_t))(v243 + 8);
        v229 = v242;
        v247(v246, v245);
        v236 = v388;
        goto LABEL_70;
      }
      v234 = (uint64_t)v334;
      MEMORY[0x1DF0E3390](v126);
      v235 = *(_QWORD *)v373;
      v236 = v388;
      if (!*(_QWORD *)(*(_QWORD *)v373 + 16))
        goto LABEL_68;
      swift_bridgeObjectRetain();
      v237 = specialized __RawDictionaryStorage.find<A>(_:)(v234);
      if ((v238 & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_68:
        ((void (*)(uint64_t, uint64_t))v372)(v234, v368);
        goto LABEL_69;
      }
      v239 = v229;
      v240 = *(_QWORD *)(*(_QWORD *)(v235 + 56) + 8 * v237);
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v372)(v234, v368);
      objc_msgSend(v232, sel_removePageAtIndex_, v240);
      v241 = v240;
      v229 = v239;
      objc_msgSend(v232, sel_insertPage_atIndex_, v233, v241);
LABEL_69:

LABEL_70:
      v248 = (uint64_t)v236;
      v249 = (uint64_t)v236;
      v250 = v349;
      v12 = &demangling cache variable for type metadata for PDFPageID?;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v248, v349, &demangling cache variable for type metadata for PDFPageID?);
      v137 = (uint64_t)v383;
      v126 = v346;
      v229(v353, (char *)v383, v346);
      WeakTagged_3.init(_:)();
      v148 = v381;
      swift_bridgeObjectRetain();
      v251 = specialized Collection<>.firstIndex(of:)(v250, v148);
      v253 = v252;
      swift_bridgeObjectRelease();
      v254 = v379;
      if ((v253 & 1) == 0)
      {
        v255 = v375;
        v256 = v341;
        outlined init with copy of PKStrokeProperties((uint64_t)v375, v341, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
        v369(v256, 0, 1, (char *)v380);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v148 = specialized _ArrayBuffer._consumeAndCreateNew()(v148);
        v126 = v346;
        v185 = (uint64_t)v254;
        v257 = v376;
        v92 = (char *)v380;
        if ((v251 & 0x8000000000000000) != 0)
          goto LABEL_116;
        if (v251 >= *(_QWORD *)(v148 + 16))
          goto LABEL_117;
        outlined assign with take of Date?(v341, v148+ ((*(unsigned __int8 *)(v377 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v377 + 80))+ *(_QWORD *)(v377 + 72) * v251, &demangling cache variable for type metadata for PDFPageID?);
        outlined destroy of PKStrokeProperties(v349, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
        outlined destroy of PKStrokeProperties((uint64_t)v255, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
        outlined destroy of StocksKitCurrencyCache.Provider?(v378, &demangling cache variable for type metadata for PDFPageID?);
        v149 = v388;
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v388, &demangling cache variable for type metadata for PDFPageID?);
        v223 = *(void (**)(char *, uint64_t))(v257 + 8);
        goto LABEL_76;
      }
      outlined destroy of PKStrokeProperties(v250, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
      outlined destroy of PKStrokeProperties((uint64_t)v375, (uint64_t (*)(_QWORD))type metadata accessor for PDFPageID);
      outlined destroy of StocksKitCurrencyCache.Provider?(v378, &demangling cache variable for type metadata for PDFPageID?);
      outlined destroy of StocksKitCurrencyCache.Provider?(v249, &demangling cache variable for type metadata for PDFPageID?);
      (*(void (**)(uint64_t, uint64_t))(v376 + 8))(v137, v126);
      v149 = (char *)v249;
      v209 = (char *)v137;
      v185 = (uint64_t)v254;
      v92 = (char *)v380;
LABEL_31:
      v186 = v364;
      CROrderedSet.Iterator.next()();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v371)(v186, 1, v126) == 1)
        goto LABEL_27;
      ((void (*)(char *, char *, uint64_t))v370)(v209, v186, v126);
    }
    swift_bridgeObjectRelease();
LABEL_42:
    v203 = 1;
    goto LABEL_47;
  }
  if (one-time initialization token for lock != -1)
LABEL_119:
    swift_once();
  v147 = 0;
  v148 = MEMORY[0x1E0DEE9D8];
  v369 = (void (*)(uint64_t, _QWORD, uint64_t, char *))v137;
  while (1)
  {
    if (v137 == v147)
    {
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
    v150 = v148;
    v151 = (os_unfair_lock_s *)(static PaperKitPDFDocument.lock + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(static PaperKitPDFDocument.lock + 16));
    v152 = v386;
    v153 = v390;
    closure #1 in PaperKitPDFDocument.subscript.getter((uint64_t)v386, v147, (uint64_t)v92);
    v390 = v153;
    os_unfair_lock_unlock(v151);
    v154 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v387 + 48);
    if (v154(v92, 1, v391) == 1)
      break;
    outlined init with take of PKStrokeStruct((uint64_t)v92, (uint64_t)v12, type metadata accessor for PageId);
    v161 = v384;
    v148 = v150;
LABEL_15:
    v162 = v381;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v12 + *(int *)(v391 + 20), v381, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    v163 = v389;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v389 + 48))(v162, 1, v161) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v162, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v12, (uint64_t)v373, &demangling cache variable for type metadata for PDFPageID?);
      LOBYTE(v393) = 2;
      static CRKeyPath.unique.getter();
      lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
      WeakTagged_3.init(_:id:)();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v148 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v148 + 16) + 1, 1, v148, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<PaperDocument.PDFPageAndPaperPage>, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
      v165 = *(_QWORD *)(v148 + 16);
      v164 = *(_QWORD *)(v148 + 24);
      if (v165 >= v164 >> 1)
        v148 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v164 > 1, v165 + 1, 1, v148, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<PaperDocument.PDFPageAndPaperPage>, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
      *(_QWORD *)(v148 + 16) = v165 + 1;
      outlined init with take of PKStrokeStruct((uint64_t)v373, v148+ ((*(unsigned __int8 *)(v377 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v377 + 80))+ *(_QWORD *)(v377 + 72) * v165, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
    }
    else
    {
      v166 = v370;
      (*(void (**)(char *, uint64_t, uint64_t))(v163 + 32))(v370, v162, v161);
      v167 = (char *)v371;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v12, (uint64_t)v371, &demangling cache variable for type metadata for PDFPageID?);
      (*(void (**)(char *, char *, uint64_t))(v163 + 16))(&v167[*(int *)(v385 + 20)], v166, v161);
      outlined init with copy of PKStrokeProperties((uint64_t)v167, (uint64_t)v372, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v148 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v148 + 16) + 1, 1, v148, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<PaperDocument.PDFPageAndPaperPage>, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
      v137 = (uint64_t)v369;
      v169 = *(_QWORD *)(v148 + 16);
      v168 = *(_QWORD *)(v148 + 24);
      if (v169 >= v168 >> 1)
        v148 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v168 > 1, v169 + 1, 1, v148, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<PaperDocument.PDFPageAndPaperPage>, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
      *(_QWORD *)(v148 + 16) = v169 + 1;
      outlined init with take of PKStrokeStruct((uint64_t)v372, v148+ ((*(unsigned __int8 *)(v377 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v377 + 80))+ *(_QWORD *)(v377 + 72) * v169, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
      outlined destroy of PKStrokeProperties((uint64_t)v371, type metadata accessor for PaperDocument.PDFPageAndPaperPage);
      (*(void (**)(char *, uint64_t))(v389 + 8))(v370, v161);
    }
    ++v147;
    outlined destroy of PKStrokeProperties((uint64_t)v12, type metadata accessor for PageId);
    v149 = v388;
    if (v137 == v147)
      goto LABEL_26;
  }
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v92, &demangling cache variable for type metadata for PageId?);
  result = objc_msgSend(v152, sel_pageAtIndex_, v147);
  if (result)
  {
    v156 = result;
    type metadata accessor for PaperKitPDFPage(0);
    v157 = swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
    swift_beginAccess();
    v158 = v157;
    v159 = v351;
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v158, v351, &demangling cache variable for type metadata for PageId?);

    v160 = v391;
    v148 = v150;
    if (v154((char *)v159, 1, v391) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v159, &demangling cache variable for type metadata for PageId?);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v382 + 56))(v12, 1, 1, v380);
      v161 = v384;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v389 + 56))((char *)v12 + *(int *)(v160 + 20), 1, 1, v384);
    }
    else
    {
      outlined init with take of PKStrokeStruct(v159, (uint64_t)v12, type metadata accessor for PageId);
      v161 = v384;
    }
    v137 = (uint64_t)v369;
    goto LABEL_15;
  }
  __break(1u);
LABEL_121:
  __break(1u);
LABEL_122:
  __break(1u);
LABEL_123:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in PaperDocument.update<A>(_:in:otherDocuments:use:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v4);
  v6 = (char *)&v11[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PaperDocument(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  SharedTagged_3.subscript.getter();
  v7 = v12;
  v8 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  (*(void (**)(uint64_t, uint64_t))(v8 + 88))(v7, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
  type metadata accessor for PaperDocument.PDFPageAndPaperPage(0);
  lazy protocol witness table accessor for type TaggedPaperPage and conformance TaggedPaperPage();
  WeakTagged_3.init(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

id specialized CanvasElementPDFAnnotation.decodePaperKit<A, B>(type:checkHash:in:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, unint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  void *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  CGPDFDictionary *v23;
  CGPDFDictionary *v24;
  CFStringRef v25;
  __CFString *v26;
  CGPDFDictionaryRef v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  id result;
  CFDataRef v32;
  CFDataRef v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  CFStringRef v48;
  __CFString *v49;
  CGPDFDictionaryRef v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  _BOOL4 Stream;
  CFDataRef v56;
  CFDataRef v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  BOOL v71;
  uint64_t v72;
  uint8_t *v73;
  uint64_t v74;
  id v75;
  CGPDFDictionaryRef v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t *v82;
  char *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  CGPDFDataFormat format;
  CGPDFDictionaryRef value[2];
  CGPDFStreamRef v89[2];

  v82 = a5;
  v78 = a2;
  v89[1] = *(CGPDFStreamRef *)MEMORY[0x1E0C80C00];
  v10 = __swift_instantiateConcreteTypeFromMangledName(a3);
  v79 = *(_QWORD *)(v10 - 8);
  v80 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v83 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SHA256Digest();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for SHA256();
  v18 = *(_QWORD *)(v81 - 8);
  v20 = MEMORY[0x1E0C80A78](v81, v19);
  v22 = (char *)&v74 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (CGPDFDictionary *)objc_msgSend(v6, sel_sourceDictionary, v20);
  if (!v23)
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(a4);
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(a6, 1, 1, v30);
  }
  v84 = a6;
  v85 = a4;
  value[0] = 0;
  if (!CGPDFDictionaryGetDictionary(v23, "AAPL:AKExtras", value))
    goto LABEL_15;
  v24 = value[0];
  if (!value[0])
    goto LABEL_15;
  if ((a1 & 1) == 0)
    goto LABEL_21;
  value[0] = 0;
  if (CGPDFDictionaryGetString(v24, "PPKHash", value))
  {
    if (value[0])
    {
      v25 = CGPDFStringCopyTextString(value[0]);
      if (v25)
      {
        v26 = (__CFString *)v25;
        v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();

        v27 = (CGPDFDictionaryRef)Data.init(base64Encoded:options:)();
        v29 = v28;
        swift_bridgeObjectRelease();
        if (v29 >> 60 != 15)
          goto LABEL_17;
LABEL_15:
        v34 = __swift_instantiateConcreteTypeFromMangledName(v85);
        return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v84, 1, 1, v34);
      }
    }
  }
  v89[0] = 0;
  if (!CGPDFDictionaryGetStream(v24, "PPKHash", v89))
    goto LABEL_15;
  if (!v89[0])
    goto LABEL_15;
  format = CGPDFDataFormatRaw;
  v32 = CGPDFStreamCopyData(v89[0], &format);
  if (!v32)
    goto LABEL_15;
  v33 = v32;
  *(_OWORD *)value = xmmword_1DDF33630;
  static Data._conditionallyBridgeFromObjectiveC(_:result:)();

  v29 = (unint64_t)value[1];
  if ((unint64_t)value[1] >> 60 == 15)
    goto LABEL_15;
  v27 = value[0];
LABEL_17:
  Data.paperKitHashVersion.getter((uint64_t)v27, v29);
  if ((v35 & 0x100) != 0)
  {
    v61 = __swift_instantiateConcreteTypeFromMangledName(v85);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v84, 1, 1, v61);
    return (id)outlined consume of Data?((uint64_t)v27, v29);
  }
  LODWORD(v77) = v35;
  v76 = v27;
  result = objc_msgSend(objc_retainAutorelease(v6), sel_dictionaryRef);
  if (!result)
  {
    __break(1u);
    return result;
  }
  v75 = result;
  SHA256.init()();
  value[0] = (CGPDFDictionaryRef)MEMORY[0x1E0DEE9E8];
  NSDictionary.paperKitHashInto(_:version:includeAPPL:visited:)((uint64_t)v22, v77, 0, (uint64_t)value);
  swift_bridgeObjectRelease();
  SHA256.finalize()();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest, (uint64_t (*)(uint64_t))MEMORY[0x1E0CA92F8], MEMORY[0x1E0CA92F0]);
  v36 = Digest.makeIterator()();
  v38 = v37;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  v39 = specialized _copySequenceToContiguousArray<A>(_:)(v36, v38);
  swift_bridgeObjectRelease();
  v40 = specialized Data.init<A>(_:)(v39);
  v42 = v41;
  swift_release();
  v43 = specialized Data.init(paperKitHash:version:)(v40, v42, v77);
  v45 = v44;
  (*(void (**)(char *, uint64_t))(v18 + 8))(v22, v81);

  v46 = (uint64_t)v76;
  specialized static Data.== infix(_:_:)((uint64_t)v76, v29);
  if ((v47 & 1) == 0)
  {
    v67 = v29;
    if (one-time initialization token for logger != -1)
      swift_once();
    v68 = type metadata accessor for Logger();
    __swift_project_value_buffer(v68, (uint64_t)logger);
    v69 = Logger.logObject.getter();
    v70 = static os_log_type_t.default.getter();
    v71 = os_log_type_enabled(v69, v70);
    v72 = v84;
    if (v71)
    {
      v73 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v73 = 0;
      _os_log_impl(&dword_1DDB0F000, v69, v70, "Importing PaperKit element from annotation skipped due to hash difference.", v73, 2u);
      MEMORY[0x1DF0E6558](v73, -1, -1);
    }
    outlined consume of Data?(v46, v67);
    outlined consume of Data._Representation(v43, v45);

    v58 = __swift_instantiateConcreteTypeFromMangledName(v85);
    v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56);
    v60 = v72;
    return (id)v59(v60, 1, 1, v58);
  }
  outlined consume of Data._Representation(v43, v45);
  outlined consume of Data?(v46, v29);
LABEL_21:
  value[0] = 0;
  if (CGPDFDictionaryGetString(v24, "PPK", value))
  {
    if (value[0])
    {
      v48 = CGPDFStringCopyTextString(value[0]);
      if (v48)
      {
        v49 = (__CFString *)v48;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        v50 = (CGPDFDictionaryRef)Data.init(base64Encoded:options:)();
        v52 = v51;
        swift_bridgeObjectRelease();
        v54 = v85;
        v53 = v86;
        if (v52 >> 60 != 15)
          goto LABEL_34;
        goto LABEL_30;
      }
    }
  }
  v89[0] = 0;
  Stream = CGPDFDictionaryGetStream(v24, "PPK", v89);
  v54 = v85;
  v53 = v86;
  if (!Stream
    || !v89[0]
    || (format = CGPDFDataFormatRaw, (v56 = CGPDFStreamCopyData(v89[0], &format)) == 0)
    || (v57 = v56,
        *(_OWORD *)value = xmmword_1DDF33630,
        static Data._conditionallyBridgeFromObjectiveC(_:result:)(),
        v57,
        v52 = (unint64_t)value[1],
        (unint64_t)value[1] >> 60 == 15))
  {
LABEL_30:
    v58 = __swift_instantiateConcreteTypeFromMangledName(v54);
    v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56);
    v60 = v84;
    return (id)v59(v60, 1, 1, v58);
  }
  v50 = value[0];
LABEL_34:
  outlined copy of Data?((uint64_t)v50, v52);
  if (one-time initialization token for allReadableFileFormatVersions != -1)
    swift_once();
  swift_bridgeObjectRetain();
  v62 = __swift_instantiateConcreteTypeFromMangledName(v54);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(v82, v54, MEMORY[0x1E0D117A8]);
  v63 = v83;
  Capsule<>.init(serializedData:allowedAppFormats:)();
  if (v53)
    return (id)outlined consume of Data?((uint64_t)v50, v52);
  Capsule.Ref.import<A>(_:)();
  v64 = v63;
  v65 = v84;
  v66 = v80;
  Capsule<>.root.getter();
  outlined consume of Data?((uint64_t)v50, v52);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v64, v66);
  return (id)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v65, 0, 1, v62);
}

id specialized CanvasElementPDFAnnotation.decodeCanvasElement<A>(in:assetManager:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  id result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void (*v26)(char *, _QWORD);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35[32];
  uint64_t v36;

  v32 = a2;
  v33 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SharedTagged_9<TaggedCanvasElement>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>?);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>);
  v34 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (char *)v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = v36;
  result = specialized CanvasElementPDFAnnotation.decodePaperKit<A, B>(type:checkHash:in:)(1, a1, &demangling cache variable for type metadata for Capsule<CRRegister<SharedTagged_9<TaggedCanvasElement>>>, (uint64_t *)&demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>, (unint64_t *)&lazy protocol witness table cache variable for type CRRegister<SharedTagged_9<TaggedCanvasElement>> and conformance CRRegister<A>, (uint64_t)v13);
  if (!v18)
  {
    v30[1] = a1;
    v31 = v3;
    v36 = v6;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v13, 1, v14) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v13, &demangling cache variable for type metadata for CRRegister<SharedTagged_9<TaggedCanvasElement>>?);
      v20 = 1;
      v21 = v33;
      v22 = v5;
      v23 = v36;
    }
    else
    {
      v24 = v17;
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v17, v13, v14);
      v25 = v9;
      CRRegister.value.getter();
      v22 = v5;
      v26 = (void (*)(char *, _QWORD))SharedTagged_9.subscript.modify();
      v28 = *(_QWORD *)(v27 + 24);
      v29 = *(_QWORD *)(v27 + 32);
      __swift_mutable_project_boxed_opaque_existential_1(v27, v28);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 136))(v31, v32, v28, v29);
      v26(v35, 0);
      v23 = v36;
      (*(void (**)(char *, uint64_t))(v36 + 8))(v25, v22);
      v21 = v33;
      CRRegister.value.getter();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v24, v14);
      v20 = 0;
    }
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v21, v20, 1, v22);
  }
  return result;
}

void key path setter for PaperDocumentView.editingMode : PaperDocumentView(unsigned __int8 *a1, _QWORD *a2)
{
  unsigned __int8 v2;
  unsigned __int8 *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v2 = *a1;
  v3 = (unsigned __int8 *)(*a2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode);
  swift_beginAccess();
  v4 = *v3;
  *v3 = v2;
  v5 = v4;
  PaperDocumentView.editingMode.didset(&v5);
}

void PaperDocumentView.editingMode.didset(unsigned __int8 *a1)
{
  void *v1;
  int v2;
  char *v3;
  uint64_t v4;
  char *v5;
  int v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  void *v13;
  id *v14;
  int v15;
  id v16;
  void *v17;
  _OWORD v18[2];
  uint64_t v19;

  v2 = *a1;
  PaperDocumentView.updateToolPicker()();
  PaperDocumentView.tiledViewUpdateEditingState()();
  swift_beginAccess();
  v3 = v1;
  v4 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v4, (uint64_t)v3);
  swift_bridgeObjectRelease();

  v5 = &v3[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode];
  swift_beginAccess();
  v6 = *v5;
  if (v2 != 1 && v6 == 1)
  {
    v7 = PaperDocumentView.currentPageCanvas.getter();
    if (v7)
    {
      v8 = v7;
      v9 = (void *)(*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v7) + 0x2F8))();
      v11 = v10;

      ObjectType = swift_getObjectType();
      v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 144))(ObjectType, v11);

      if (v13)
      {
        v19 = 0;
        memset(v18, 0, sizeof(v18));
        FormFillingView.focusNextField(from:direction:)((uint64_t)v18, 0);

        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v18, &demangling cache variable for type metadata for AnyHashable?);
      }
    }
    v6 = *v5;
  }
  v14 = (id *)&v3[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
  swift_beginAccess();
  if (!*v14)
  {
    __break(1u);
    goto LABEL_20;
  }
  objc_msgSend(*v14, sel_setInMarkupMode_, v6 == 3);
  if (!*v14)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v15 = *v5;
  objc_msgSend(*v14, sel_setAnnotationEditingEnabled_, *v5 != 0);
  if (!*v14)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (objc_msgSend(*v14, sel_respondsToSelector_, sel_setFormDetectionEnabled_))
  {
    if (*v14)
    {
      objc_msgSend(*v14, sel_setFormDetectionEnabled_, v15 != 0);
      goto LABEL_13;
    }
LABEL_22:
    __break(1u);
    return;
  }
LABEL_13:
  if (*v5 == 1)
    *(_BYTE *)(*(_QWORD *)&v3[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_formAnalytics] + 19) = 51;
  if (v6 != 3)
  {
    v16 = PaperDocumentView.currentPageCanvas.getter();
    if (v16)
    {
      v17 = v16;
      AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);

    }
  }
}

uint64_t PaperDocumentView.editingMode.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode);
  result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

void PaperDocumentView.editingMode.setter(unsigned __int8 *a1)
{
  uint64_t v1;
  unsigned __int8 v2;
  unsigned __int8 *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v2 = *a1;
  v3 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode);
  swift_beginAccess();
  v4 = *v3;
  *v3 = v2;
  v5 = v4;
  PaperDocumentView.editingMode.didset(&v5);
}

void (*PaperDocumentView.editingMode.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode;
  v3[3] = v1;
  v3[4] = v4;
  v5 = (_BYTE *)(v1 + v4);
  swift_beginAccess();
  *((_BYTE *)v3 + 40) = *v5;
  return PaperDocumentView.editingMode.modify;
}

void PaperDocumentView.editingMode.modify(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  unsigned __int8 *v6;
  char v7;
  char v8;

  v2 = *(void **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v5 = *(_BYTE *)(v4 + v3);
  *(_BYTE *)(v4 + v3) = *(_BYTE *)(*(_QWORD *)a1 + 40);
  if ((a2 & 1) != 0)
  {
    v7 = v5;
    v6 = (unsigned __int8 *)&v7;
  }
  else
  {
    v8 = v5;
    v6 = (unsigned __int8 *)&v8;
  }
  PaperDocumentView.editingMode.didset(v6);
  free(v2);
}

void key path setter for PaperDocumentView.pdfView : PaperDocumentView(void **a1, _QWORD *a2)
{
  void *v2;
  void **v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = (void **)(*a2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  v4 = *v3;
  *v3 = v2;
  v5 = v2;

}

void *PaperDocumentView.pdfView.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void PaperDocumentView.pdfView.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;

  v3 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*PaperDocumentView.pdfView.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.backgroundColor.modify;
}

void key path setter for PaperDocumentView.viewControllerForPresenting : PaperDocumentView(void **a1)
{
  void *v1;
  id v2;

  v1 = *a1;
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  v2 = v1;
  PaperDocumentView.viewControllerForPresentingUI.didset();

}

uint64_t PaperDocumentView.viewControllerForPresenting.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI;
  swift_beginAccess();
  return MEMORY[0x1DF0E666C](v1);
}

void PaperDocumentView.viewControllerForPresenting.setter(void *a1)
{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  PaperDocumentView.viewControllerForPresentingUI.didset();

}

void (*PaperDocumentView.viewControllerForPresenting.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x1DF0E666C](v5);
  return PaperDocumentView.viewControllerForPresenting.modify;
}

void PaperDocumentView.viewControllerForPresenting.modify(void **a1, char a2)
{
  void *v3;
  void *v4;
  void **v5;
  id v6;

  v3 = *a1;
  v5 = (void **)((char *)*a1 + 24);
  v4 = *v5;
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    v6 = v4;
    PaperDocumentView.viewControllerForPresentingUI.didset();

    v4 = *v5;
  }
  else
  {
    PaperDocumentView.viewControllerForPresentingUI.didset();
  }

  free(v3);
}

void PaperDocumentView.viewControllerForPresentingUI.didset()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  id v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  v2 = *v1;
  v21 = v2 + 64;
  v3 = 1 << *(_BYTE *)(v2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v2 + 64);
  v6 = v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  v7 = 0;
  v8 = (unint64_t)(v3 + 63) >> 6;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v7 << 6);
      goto LABEL_5;
    }
    v18 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v8)
      goto LABEL_23;
    v19 = *(_QWORD *)(v21 + 8 * v18);
    ++v7;
    if (!v19)
    {
      v7 = v18 + 1;
      if (v18 + 1 >= v8)
        goto LABEL_23;
      v19 = *(_QWORD *)(v21 + 8 * v7);
      if (!v19)
      {
        v7 = v18 + 2;
        if (v18 + 2 >= v8)
          goto LABEL_23;
        v19 = *(_QWORD *)(v21 + 8 * v7);
        if (!v19)
        {
          v7 = v18 + 3;
          if (v18 + 3 >= v8)
            goto LABEL_23;
          v19 = *(_QWORD *)(v21 + 8 * v7);
          if (!v19)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v19 - 1) & v19;
    v10 = __clz(__rbit64(v19)) + (v7 << 6);
LABEL_5:
    v11 = *(_QWORD *)(v2 + 56) + 16 * v10;
    v12 = *(void **)v11;
    v13 = *(_QWORD *)(v11 + 8);
    ObjectType = swift_getObjectType();
    v15 = MEMORY[0x1DF0E666C](v6);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 224);
    v17 = v12;
    v16(v15, ObjectType, v13);

  }
  v20 = v18 + 4;
  if (v20 >= v8)
  {
LABEL_23:
    swift_release();
    return;
  }
  v19 = *(_QWORD *)(v21 + 8 * v20);
  if (v19)
  {
    v7 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v7 >= v8)
      goto LABEL_23;
    v19 = *(_QWORD *)(v21 + 8 * v7);
    ++v20;
    if (v19)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t PaperDocumentView.viewControllerForPresentingUI.getter()
{
  return PaperDocumentView.viewControllerForPresentingUI.getter(&OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI);
}

void (*PaperDocumentView.viewControllerForPresentingUI.modify(_QWORD *a1))(id **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_viewControllerForPresentingUI;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x1DF0E666C](v5);
  return PaperDocumentView.viewControllerForPresentingUI.modify;
}

void PaperDocumentView.viewControllerForPresentingUI.modify(id **a1, char a2)
{
  id *v3;
  id v4;

  v3 = *a1;
  v4 = (*a1)[3];
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {

    swift_endAccess();
  }
  else
  {
    swift_endAccess();

    PaperDocumentView.viewControllerForPresentingUI.didset();
  }
  free(v3);
}

uint64_t PaperDocumentView.pageOverlayViewProvider.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t i;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t ObjectType;
  void (*v30)(void *, uint64_t, uint64_t);
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v5, v6);
  v49 = (uint64_t)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v51 = *(_QWORD *)(v8 - 8);
  v52 = v8;
  MEMORY[0x1E0C80A78](v8, v9);
  v46 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  v12 = *v11;
  v13 = *(_QWORD *)(*v11 + 64);
  v47 = *v11 + 64;
  v14 = 1 << *(_BYTE *)(v12 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v43 = v0;
  v45 = v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider;
  v50 = v12;
  swift_bridgeObjectRetain();
  result = swift_beginAccess();
  v18 = 0;
  v48 = (unint64_t)(v14 + 63) >> 6;
  v44 = v4;
  if (v16)
    goto LABEL_7;
LABEL_8:
  while (2)
  {
    v22 = v18 + 1;
    if (!__OFADD__(v18, 1))
    {
      if (v22 < v48)
      {
        v23 = *(_QWORD *)(v47 + 8 * v22);
        ++v18;
        if (v23)
          goto LABEL_21;
        v18 = v22 + 1;
        if (v22 + 1 >= v48)
          return swift_release();
        v23 = *(_QWORD *)(v47 + 8 * v18);
        if (v23)
          goto LABEL_21;
        v18 = v22 + 2;
        if (v22 + 2 >= v48)
          return swift_release();
        v23 = *(_QWORD *)(v47 + 8 * v18);
        if (v23)
        {
LABEL_21:
          v16 = (v23 - 1) & v23;
          for (i = __clz(__rbit64(v23)) + (v18 << 6); ; i = v20 | (v18 << 6))
          {
            v25 = *(void **)(*(_QWORD *)(v50 + 48) + 8 * i);
            v26 = *(_QWORD *)(v50 + 56) + 16 * i;
            v27 = *(void **)v26;
            v28 = *(_QWORD *)(v26 + 8);
            ObjectType = swift_getObjectType();
            v30 = *(void (**)(void *, uint64_t, uint64_t))(v28 + 16);
            v31 = v25;
            v32 = v27;
            v30(0, ObjectType, v28);
            v33 = (uint64_t)v31 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
            swift_beginAccess();
            outlined init with copy of Ref<PKStrokeInheritedProperties>?(v33, (uint64_t)v4, &demangling cache variable for type metadata for PageId?);
            v34 = type metadata accessor for PageId(0);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 48))(v4, 1, v34))
              break;
            v35 = (uint64_t)&v4[*(int *)(v34 + 20)];
            v19 = v49;
            outlined init with copy of Ref<PKStrokeInheritedProperties>?(v35, v49, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
            outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for PageId?);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v19, 1, v52) == 1)
              goto LABEL_6;
            (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(v46, v19, v52);
            v36 = v45;
            if (MEMORY[0x1DF0E666C](v45))
            {
              v37 = *(_QWORD *)(v36 + 8);
              v38 = swift_getObjectType();
              v39 = (void *)(*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v37 + 8))(v43, v46, v38, v37);
              swift_unknownObjectRelease();
              if (v39)
              {
                if (MEMORY[0x1DF0E666C](v36))
                {
                  v40 = *(_QWORD *)(v36 + 8);
                  v41 = swift_getObjectType();
                  (*(void (**)(uint64_t, void *, char *, uint64_t, uint64_t))(v40 + 16))(v43, v39, v46, v41, v40);
                  swift_unknownObjectRelease();
                }
                v42 = v39;
                v30(v39, ObjectType, v28);

              }
            }

            result = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v46, v52);
            v4 = v44;
            if (!v16)
              goto LABEL_8;
LABEL_7:
            v20 = __clz(__rbit64(v16));
            v16 &= v16 - 1;
          }
          outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for PageId?);
          v19 = v49;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56))(v49, 1, 1, v52);
LABEL_6:

          result = outlined destroy of StocksKitCurrencyCache.Provider?(v19, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
          if (!v16)
            continue;
          goto LABEL_7;
        }
        v24 = v22 + 3;
        if (v24 < v48)
        {
          v23 = *(_QWORD *)(v47 + 8 * v24);
          if (v23)
          {
            v18 = v24;
            goto LABEL_21;
          }
          while (1)
          {
            v18 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_33;
            if (v18 >= v48)
              return swift_release();
            v23 = *(_QWORD *)(v47 + 8 * v18);
            ++v24;
            if (v23)
              goto LABEL_21;
          }
        }
      }
      return swift_release();
    }
    break;
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t PaperDocumentView.pageOverlayViewProvider.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider);
}

uint64_t PaperDocumentView.pageOverlayViewProvider.setter(uint64_t a1, uint64_t a2)
{
  return PaperDocumentView.pageOverlayViewProvider.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider, (void (*)(uint64_t))PaperDocumentView.pageOverlayViewProvider.didset);
}

void (*PaperDocumentView.pageOverlayViewProvider.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageOverlayViewProvider;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return PaperDocumentView.pageOverlayViewProvider.modify;
}

void PaperDocumentView.pageOverlayViewProvider.modify(uint64_t a1, char a2)
{
  PaperDocumentView.pageOverlayViewProvider.modify(a1, a2, (void (*)(uint64_t))PaperDocumentView.pageOverlayViewProvider.didset);
}

id key path getter for PaperDocumentView.contentSnapshottingView : PaperDocumentView@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = *(id *)(*a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (result)
  {
    result = objc_msgSend(result, sel_contentSnapshottingView);
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id PaperDocumentView.contentSnapshottingView.getter()
{
  uint64_t v0;
  id result;

  result = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (result)
    return objc_msgSend(result, sel_contentSnapshottingView);
  __break(1u);
  return result;
}

void PaperDocumentView.contentSnapshottingView.setter(void *a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v3, sel_setContentSnapshottingView_, a1);

  }
  else
  {
    __break(1u);
  }
}

void (*PaperDocumentView.contentSnapshottingView.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v3;
  void (*result)(uint64_t, char);

  v3 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView;
  a1[1] = v1;
  a1[2] = v3;
  result = *(void (**)(uint64_t, char))(v1 + v3);
  if (result)
  {
    *a1 = objc_msgSend(result, sel_contentSnapshottingView);
    return PaperDocumentView.contentSnapshottingView.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void PaperDocumentView.contentSnapshottingView.modify(uint64_t a1, char a2)
{
  void *v3;
  id v4;
  id v5;

  v3 = *(void **)(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16));
  if ((a2 & 1) != 0)
  {
    if (v3)
    {
      v5 = *(id *)a1;
      objc_msgSend(v3, sel_setContentSnapshottingView_);
LABEL_6:

      return;
    }
    __break(1u);
  }
  else if (v3)
  {
    v4 = *(id *)a1;
    v5 = v3;
    objc_msgSend(v5, sel_setContentSnapshottingView_, v4);

    goto LABEL_6;
  }
  __break(1u);
}

void key path setter for PaperDocumentView.allowsDocumentStructureEditing : PaperDocumentView(_BYTE *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;

  v2 = *a2;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing) = *a1;
  v3 = MEMORY[0x1DF0E666C](v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_thumbnailView);
  if (v3)
  {
    v4 = (id)v3;
    PaperDocumentThumbnailView.allowsDocumentStructureEditingChanged()();

  }
}

id PaperDocumentView.allowsDocumentStructureEditing.getter()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing) == 1)
    return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument), sel_allowsDocumentAssembly);
  else
    return 0;
}

void PaperDocumentView.allowsDocumentStructureEditing.setter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  *(_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing) = a1;
  v2 = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_thumbnailView);
  if (v2)
  {
    v3 = (id)v2;
    PaperDocumentThumbnailView.allowsDocumentStructureEditingChanged()();

  }
}

void (*PaperDocumentView.allowsDocumentStructureEditing.modify(_QWORD *a1))(uint64_t *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = (unsigned __int8 *)(a1 + 2);
  v3 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView__allowsDocumentStructureEditing;
  *a1 = v1;
  a1[1] = v3;
  if (*(_BYTE *)(v1 + v3) == 1)
    v4 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument), sel_allowsDocumentAssembly);
  else
    v4 = 0;
  *v2 = v4;
  return PaperDocumentView.allowsDocumentStructureEditing.modify;
}

void PaperDocumentView.allowsDocumentStructureEditing.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;

  v1 = *a1;
  *(_BYTE *)(v1 + a1[1]) = *((_BYTE *)a1 + 16);
  v2 = MEMORY[0x1DF0E666C](v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_thumbnailView);
  if (v2)
  {
    v3 = (id)v2;
    PaperDocumentThumbnailView.allowsDocumentStructureEditingChanged()();

  }
}

uint64_t PaperDocumentView.allowsDocumentStructureCopying.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_allowsDocumentStructureCopying);
  swift_beginAccess();
  return *v1;
}

uint64_t PaperDocumentView.allowsDocumentStructureCopying.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_allowsDocumentStructureCopying);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*PaperDocumentView.allowsDocumentStructureCopying.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.tintColor.modify;
}

uint64_t PaperDocumentView.delegate.getter()
{
  return PaperDocumentViewController.delegate.getter(&OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate);
}

uint64_t PaperDocumentView.delegate.setter(uint64_t a1, uint64_t a2)
{
  return AnyCanvas.delegate.setter(a1, a2, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate);
}

uint64_t (*PaperDocumentView.delegate.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1DF0E666C](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return SynapseLinkItem.delegate.modify;
}

uint64_t (*PaperDocumentView.dataModel.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.tintColor.modify;
}

double PaperDocumentView.vellumOpacity.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_vellumOpacity;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t PaperDocumentView.vellumOpacity.setter(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  double *v9;
  uint64_t result;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[16];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = (double *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_vellumOpacity);
  result = swift_beginAccess();
  v11 = *v9;
  *v9 = a1;
  if (v11 != a1)
  {
    v12 = v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    v13 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v8, v12, v4);
    MEMORY[0x1E0C80A78](v13, v14);
    *(double *)&v15[-16] = a1;
    Capsule.callAsFunction<A>(_:)();
    specialized PaperDocumentView.merge<A>(_:from:)((uint64_t)v8, 3u);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

void (*PaperDocumentView.vellumOpacity.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = malloc(0x78uLL);
  *a1 = v3;
  v3[10] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v3[11] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[12] = v5;
  v6 = malloc(*(_QWORD *)(v5 + 64));
  v7 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_vellumOpacity;
  v3[13] = v6;
  v3[14] = v7;
  v8 = (_QWORD *)(v1 + v7);
  swift_beginAccess();
  v3[9] = *v8;
  return PaperDocumentView.vellumOpacity.modify;
}

void PaperDocumentView.vellumOpacity.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD **)a1;
  v3 = *(double *)(*(_QWORD *)a1 + 72);
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 112);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  v6 = *(double *)(v5 + v4);
  *(double *)(v5 + v4) = v3;
  if ((a2 & 1) != 0)
  {
    if (v6 != v3)
      goto LABEL_5;
  }
  else if (v6 != v3)
  {
LABEL_5:
    v8 = v2[12];
    v7 = v2[13];
    v9 = v2[11];
    v10 = v2[10] + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v10, v9);
    MEMORY[0x1E0C80A78](v11, v12);
    Capsule.callAsFunction<A>(_:)();
    specialized PaperDocumentView.merge<A>(_:from:)(v7, 3u);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  free((void *)v2[13]);
  free(v2);
}

void PaperDocumentView.canEditVellumOpacity.didset()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  char *v3;
  char v4;
  void *v5;
  _BYTE *v6;
  id v7;
  char *v8;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (v1)
  {
    v2 = *(_BYTE **)(v1 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController);
    v3 = (char *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_canEditVellumOpacity);
    swift_beginAccess();
    v4 = *v3;
    v2[OBJC_IVAR____TtC8PaperKit23CanvasElementController_canEditVellumOpacity] = *v3;
    v5 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit23CanvasElementController_toolPickerController];
    if (v5)
    {
      v6 = v2;
      v7 = v5;
      v8 = ToolPickerController.textToolListViewController.getter();
      v8[OBJC_IVAR____TtC8PaperKit26TextToolListViewController_opacityItemVisible] = v4;
      TextToolListViewController.updateUI()();

    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t PaperDocumentView.canEditVellumOpacity.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_canEditVellumOpacity);
  swift_beginAccess();
  return *v1;
}

uint64_t PaperDocumentView.canEditVellumOpacity.setter(char a1)
{
  return MarkupContainerViewController.annotationEditingEnabled.setter(a1, &OBJC_IVAR____TtC8PaperKit17PaperDocumentView_canEditVellumOpacity, (uint64_t (*)(uint64_t))PaperDocumentView.canEditVellumOpacity.didset);
}

uint64_t (*PaperDocumentView.canEditVellumOpacity.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return PaperDocumentView.canEditVellumOpacity.modify;
}

uint64_t PaperDocumentView.canEditVellumOpacity.modify(uint64_t a1, char a2)
{
  return MiniMenuState._fontName.modify(a1, a2, (uint64_t (*)(uint64_t))PaperDocumentView.canEditVellumOpacity.didset);
}

uint64_t PaperDocumentView.shouldDeselectElementsWhenToolPickerIsHidden.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (v1)
    return *(unsigned __int8 *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController)
                              + OBJC_IVAR____TtC8PaperKit23CanvasElementController_shouldDeselectElementsWhenToolPickerIsHidden);
  __break(1u);
  return result;
}

uint64_t PaperDocumentView.shouldDeselectElementsWhenToolPickerIsHidden.setter(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (v2)
    *(_BYTE *)(*(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController)
             + OBJC_IVAR____TtC8PaperKit23CanvasElementController_shouldDeselectElementsWhenToolPickerIsHidden) = result & 1;
  else
    __break(1u);
  return result;
}

uint64_t (*PaperDocumentView.shouldDeselectElementsWhenToolPickerIsHidden.modify(uint64_t (*result)(uint64_t result, char a2)))(uint64_t result, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView;
  *(_QWORD *)result = v1;
  *((_QWORD *)result + 1) = v2;
  v3 = *(_QWORD *)(v1 + v2);
  if (v3)
  {
    *((_BYTE *)result + 16) = *(_BYTE *)(*(_QWORD *)(v3
                                                   + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController)
                                       + OBJC_IVAR____TtC8PaperKit23CanvasElementController_shouldDeselectElementsWhenToolPickerIsHidden);
    return PaperDocumentView.shouldDeselectElementsWhenToolPickerIsHidden.modify;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t PaperDocumentView.shouldDeselectElementsWhenToolPickerIsHidden.modify(uint64_t result, char a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)result + *(_QWORD *)(result + 8));
  if ((a2 & 1) != 0)
  {
    if (v2)
    {
LABEL_5:
      *(_BYTE *)(*(_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit17TiledDocumentView_canvasElementController)
               + OBJC_IVAR____TtC8PaperKit23CanvasElementController_shouldDeselectElementsWhenToolPickerIsHidden) = *(_BYTE *)(result + 16);
      return result;
    }
    __break(1u);
  }
  if (v2)
    goto LABEL_5;
  __break(1u);
  return result;
}

double PaperDocumentView.PaperDocumentViewProxy.textualContext(for:)@<D0>(_OWORD *a1@<X8>)
{
  char *Strong;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  double result;
  _QWORD v9[5];

  Strong = (char *)swift_unknownObjectUnownedLoadStrong();
  v3 = &Strong[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_textualContextProvider];
  swift_beginAccess();
  v4 = MEMORY[0x1DF0E666C](v3);
  v5 = *((_QWORD *)v3 + 1);

  if (v4)
  {
    ObjectType = swift_getObjectType();
    v7 = swift_unknownObjectUnownedLoadStrong();
    v9[3] = type metadata accessor for PaperDocumentView();
    v9[4] = &protocol witness table for PaperDocumentView;
    v9[0] = v7;
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v5 + 8))(v9, ObjectType, v5);
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  }
  else
  {
    result = 0.0;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

id PaperDocumentView.paperDocumentViewProxy.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  objc_class *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  objc_super v10;

  v1 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView____lazy_storage___paperDocumentViewProxy;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView____lazy_storage___paperDocumentViewProxy);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView____lazy_storage___paperDocumentViewProxy);
  }
  else
  {
    v4 = (objc_class *)type metadata accessor for PaperDocumentView.PaperDocumentViewProxy();
    v5 = objc_allocWithZone(v4);
    swift_unknownObjectUnownedInit();
    v10.receiver = v5;
    v10.super_class = v4;
    v6 = objc_msgSendSuper2(&v10, sel_init);
    v7 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v6;
    v3 = v6;

    v2 = 0;
  }
  v8 = v2;
  return v3;
}

void key path setter for PaperDocumentView.toolPicker : PaperDocumentView(void **a1, _QWORD *a2)
{
  void *v2;
  void **v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = (void **)(*a2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker);
  swift_beginAccess();
  v4 = *v3;
  *v3 = v2;
  v5 = v2;
  PaperDocumentView.toolPicker.didset(v4);

}

void PaperDocumentView.toolPicker.didset(void *a1)
{
  void *v1;
  id v3;
  char *v4;
  uint64_t v5;
  id *v6;
  id v7;
  id v8;

  if (a1)
  {
    objc_msgSend(a1, sel_removeObserver_, v1);
    v3 = PaperDocumentView.paperDocumentViewProxy.getter();
    objc_msgSend(a1, sel_removeObserver_, v3);

  }
  swift_beginAccess();
  v4 = v1;
  v5 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v5, (uint64_t)v4);
  swift_bridgeObjectRelease();

  v6 = (id *)&v4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker];
  swift_beginAccess();
  if (*v6)
  {
    v7 = *v6;
    objc_msgSend(v7, sel_addObserver_, v4);
    v8 = PaperDocumentView.paperDocumentViewProxy.getter();
    objc_msgSend(v7, sel_addObserver_, v8);

    PaperDocumentView.updateTiledViewInk(for:)(v7);
    PaperDocumentView.updateToolPicker()();

  }
}

void *PaperDocumentView.toolPicker.getter()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

void PaperDocumentView.toolPicker.setter(void *a1)
{
  char *v1;
  id *v3;
  id v4;
  id v5;
  id v6;
  char *v7;
  uint64_t v8;
  id v9;
  id v10;

  v3 = (id *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker];
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;
  v5 = a1;
  if (v4)
  {
    objc_msgSend(v4, sel_removeObserver_, v1);
    v6 = PaperDocumentView.paperDocumentViewProxy.getter();
    objc_msgSend(v4, sel_removeObserver_, v6);

  }
  swift_beginAccess();
  v7 = v1;
  v8 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v8, (uint64_t)v7);

  swift_bridgeObjectRelease();
  if (*v3)
  {
    v9 = *v3;
    objc_msgSend(v9, sel_addObserver_, v7);
    v10 = PaperDocumentView.paperDocumentViewProxy.getter();
    objc_msgSend(v9, sel_addObserver_, v10);

    PaperDocumentView.updateTiledViewInk(for:)(v9);
    PaperDocumentView.updateToolPicker()();

  }
}

void (*PaperDocumentView.toolPicker.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  id v7;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker;
  v3[10] = v1;
  v3[11] = v4;
  v5 = (void **)(v1 + v4);
  swift_beginAccess();
  v6 = *v5;
  v3[9] = *v5;
  v7 = v6;
  return PaperDocumentView.toolPicker.modify;
}

void PaperDocumentView.toolPicker.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  void *v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  id v27;

  v2 = *(_QWORD **)a1;
  v4 = (void **)(*(_QWORD *)a1 + 72);
  v3 = *v4;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v7 = *(void **)(v6 + v5);
  *(_QWORD *)(v6 + v5) = *v4;
  if ((a2 & 1) != 0)
  {
    v8 = v3;
    if (v7)
    {
      objc_msgSend(v7, sel_removeObserver_, v2[10]);
      v9 = PaperDocumentView.paperDocumentViewProxy.getter();
      objc_msgSend(v7, sel_removeObserver_, v9);

    }
    v11 = (char *)v2[10];
    v10 = v2[11];
    swift_beginAccess();
    v12 = v11;
    v13 = swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v13, (uint64_t)v12);
    swift_bridgeObjectRelease();

    v14 = *(void **)&v11[v10];
    if (v14)
    {
      v15 = v2[10];
      v16 = v14;
      objc_msgSend(v16, sel_addObserver_, v15);
      v17 = PaperDocumentView.paperDocumentViewProxy.getter();
      objc_msgSend(v16, sel_addObserver_, v17);

      PaperDocumentView.updateTiledViewInk(for:)(v16);
      PaperDocumentView.updateToolPicker()();

    }
    v7 = *v4;
  }
  else
  {
    v18 = v3;
    if (v7)
    {
      objc_msgSend(v7, sel_removeObserver_, v2[10]);
      v19 = PaperDocumentView.paperDocumentViewProxy.getter();
      objc_msgSend(v7, sel_removeObserver_, v19);

    }
    v21 = (char *)v2[10];
    v20 = v2[11];
    swift_beginAccess();
    v22 = v21;
    v23 = swift_bridgeObjectRetain();
    specialized Sequence.forEach(_:)(v23, (uint64_t)v22);
    swift_bridgeObjectRelease();

    v24 = *(void **)&v21[v20];
    if (v24)
    {
      v25 = v2[10];
      v26 = v24;
      objc_msgSend(v26, sel_addObserver_, v25);
      v27 = PaperDocumentView.paperDocumentViewProxy.getter();
      objc_msgSend(v26, sel_addObserver_, v27);

      PaperDocumentView.updateTiledViewInk(for:)(v26);
      PaperDocumentView.updateToolPicker()();

    }
  }

  free(v2);
}

uint64_t key path getter for PaperDocumentView.paperDocument : PaperDocumentView@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  swift_beginAccess();
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v3, v4);
}

uint64_t key path setter for PaperDocumentView.paperDocument : PaperDocumentView(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t, uint64_t, double);
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v13 = (char *)&v18 - v12;
  v14 = *(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16);
  v14((char *)&v18 - v12, a1, v4, v11);
  v15 = *a2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 24))(v15, v13, v4);
  swift_endAccess();
  ((void (*)(char *, uint64_t, uint64_t))v14)(v8, v15, v4);
  specialized PaperDocumentView.merge<A>(_:from:)((uint64_t)v8, 3u);
  v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v8, v4);
  return ((uint64_t (*)(char *, uint64_t))v16)(v13, v4);
}

uint64_t PaperDocumentView.paperDocument.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  swift_beginAccess();
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

void (*PaperDocumentView.paperDocument.modify(_QWORD *a1))(_QWORD *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[7] = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v3[8] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[9] = v5;
  v3[10] = malloc(*(_QWORD *)(v5 + 64));
  v3[11] = PaperDocumentView.dataModel.modify();
  return PaperDocumentView.paperDocument.modify;
}

void PaperDocumentView.paperDocument.modify(_QWORD *a1, char a2)
{
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (_QWORD *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 88))(*a1, 0);
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v3[10];
  }
  else
  {
    v5 = v3[9];
    v4 = (void *)v3[10];
    v6 = v3[8];
    v7 = v3[7] + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    (*(void (**)(void *, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
    specialized PaperDocumentView.merge<A>(_:from:)((uint64_t)v4, 3u);
    (*(void (**)(void *, uint64_t))(v5 + 8))(v4, v6);
  }
  free(v4);
  free(v3);
}

uint64_t PaperDocumentView.paperDocument.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  uint64_t v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v8, a1, v3);
  swift_endAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v8, v3);
  specialized PaperDocumentView.merge<A>(_:from:)((uint64_t)v7, 3u);
  v9 = *(void (**)(char *, uint64_t))(v4 + 8);
  v9(v7, v3);
  return ((uint64_t (*)(uint64_t, uint64_t))v9)(a1, v3);
}

void PaperDocumentView.merge<A>(_:forward:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v4;
  unsigned __int8 v5;

  if ((a2 & 1) != 0)
    v4 = 3;
  else
    v4 = 0;
  v5 = v4;
  PaperDocumentView.merge<A>(_:from:)(a1, &v5, a3, a4);
}

uint64_t PaperDocumentView.init(context:document:editingMode:toolPicker:)(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, _BYTE *, uint64_t);

  v4[2] = a1;
  v4[3] = a4;
  v11 = (uint64_t (*)(uint64_t, uint64_t, _BYTE *, uint64_t))((char *)&async function pointer to specialized PaperDocumentView.init(context:document:editingMode:toolPicker:)
                                                                   + async function pointer to specialized PaperDocumentView.init(context:document:editingMode:toolPicker:));
  v9 = (_QWORD *)swift_task_alloc();
  v4[4] = v9;
  *v9 = v4;
  v9[1] = PaperDocumentView.init(context:document:editingMode:toolPicker:);
  return v11(a1, a2, a3, a4);
}

id PaperDocumentView.__deallocating_deinit()
{
  char *v0;
  id result;
  objc_super v2;
  char v3;

  result = *(id *)&v0[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView];
  if (result)
  {
    objc_msgSend(result, sel_removeFromSuperview);
    PassthroughSubject.send(completion:)();
    v3 = 1;
    PassthroughSubject.send(completion:)();
    v2.receiver = v0;
    v2.super_class = (Class)type metadata accessor for PaperDocumentView();
    return objc_msgSendSuper2(&v2, sel_dealloc);
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall PaperDocumentView.deselectAll()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v1, v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  PaperDocumentView.currentPage.getter((uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v4, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v4, v5);
    v10 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
    v11 = swift_beginAccess();
    v12 = *v10;
    MEMORY[0x1E0C80A78](v11, v13);
    *(&v18 - 2) = (uint64_t)v9;
    swift_bridgeObjectRetain();
    specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.canvas(for:), (uint64_t)(&v18 - 4), v12);
    v15 = v14;
    v17 = v16;
    swift_bridgeObjectRelease();
    if (v15)
    {

      type metadata accessor for AnyCanvas();
      if (swift_dynamicCastClass())
        AnyCanvas.selection.setter(MEMORY[0x1E0DEE9E8], MEMORY[0x1E0DEE9E8], 6, 0);

    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
}

Swift::Void __swiftcall PaperDocumentView.layoutSubviews()()
{
  char *v0;
  id *v1;
  id v2;
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  char v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v33;
  objc_super v34;

  v34.receiver = v0;
  v34.super_class = (Class)type metadata accessor for PaperDocumentView();
  objc_msgSendSuper2(&v34, sel_layoutSubviews);
  v1 = (id *)&v0[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
  swift_beginAccess();
  if (!*v1)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v2 = *v1;
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v2, sel_setFrame_);

  if (!*v1)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v3 = *v1;
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v3, sel_setBounds_, 0.0, 0.0);

  v4 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyApplySafeAreaInsetsToAxes;
  if (!*(_QWORD *)(*(_QWORD *)&v0[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyApplySafeAreaInsetsToAxes]
                  + 16))
    goto LABEL_35;
  if (!*v1)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v5 = objc_msgSend(*v1, sel_documentScrollView);
  if (!v5)
  {
LABEL_35:
    PaperDocumentView.adjustScaleFactorIfNecessary()();
    return;
  }
  v6 = v5;
  objc_msgSend(v0, sel_safeAreaInsets);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;
  objc_msgSend(v6, sel_contentInset);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v23 = *(_QWORD *)&v0[v4];
  v24 = specialized Sequence<>.contains(_:)(0, v23);
  if ((v24 & 1) != 0)
    v25 = v14;
  else
    v25 = v22;
  if ((v24 & 1) != 0)
    v26 = v10;
  else
    v26 = v18;
  v27 = *(_QWORD *)(v23 + 16);
  if (!v27)
    goto LABEL_19;
  if ((*(_BYTE *)(v23 + 32) & 1) == 0)
  {
    if (v27 != 1)
    {
      v28 = 33;
      while (1)
      {
        v29 = v28 - 31;
        if (__OFADD__(v28 - 32, 1))
          break;
        if ((*(_BYTE *)(v23 + v28) & 1) != 0)
          goto LABEL_20;
        ++v28;
        if (v29 == v27)
          goto LABEL_19;
      }
      __break(1u);
      goto LABEL_37;
    }
LABEL_19:
    v12 = v20;
    v8 = v16;
  }
LABEL_20:
  if (v8 == v16 && v26 == v18 && v12 == v20 && v25 == v22)
    goto LABEL_34;
  objc_msgSend(v6, sel_setContentInset_, v8, v26, v12, v25);
  if (!*v1)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (!objc_msgSend(*v1, sel_autoScales))
    goto LABEL_34;
  if (*v1)
  {
    v33 = *v1;
    objc_msgSend(v33, sel_setAutoScales_, 1);

LABEL_34:
    goto LABEL_35;
  }
LABEL_41:
  __break(1u);
}

uint64_t PaperDocumentView.automaticallyAdjustScaleFactor.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyAdjustScaleFactor);
  swift_beginAccess();
  return *v1;
}

uint64_t PaperDocumentView.automaticallyAdjustScaleFactor.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyAdjustScaleFactor);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*PaperDocumentView.automaticallyAdjustScaleFactor.modify())()
{
  swift_beginAccess();
  return CanvasElementRenderer.tintColor.modify;
}

void PaperDocumentView.adjustScaleFactorIfNecessary()()
{
  uint64_t v0;
  _BYTE *v1;
  id *v2;
  id v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v1 = (_BYTE *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_automaticallyAdjustScaleFactor);
  swift_beginAccess();
  if (*v1 != 1)
    return;
  v2 = (id *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  if (!*v2)
  {
    __break(1u);
    goto LABEL_12;
  }
  objc_msgSend(*v2, sel_setMinScaleFactor_, 0.1);
  if (!*v2)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  objc_msgSend(*v2, sel_setMaxScaleFactor_, 5.0);
  if (!*v2)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v3 = objc_msgSend(*v2, sel_documentScrollView);
  if (!v3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v4 = v3;
  objc_msgSend(v3, sel_contentOffset);
  if (!*v2)
  {
LABEL_15:
    __break(1u);
    return;
  }
  v7 = v5;
  v8 = v6;
  objc_msgSend(*v2, sel_setAutoScales_, 1);
  if (v8 < 10.0)
  {
    objc_msgSend(v4, sel_adjustedContentInset);
    objc_msgSend(v4, sel_setContentOffset_, v7, -v9);
  }

}

Swift::Void __swiftcall PaperDocumentView.toolPickerIsRulerActiveDidChange(_:)(PKToolPicker a1)
{
  uint64_t v1;
  void *v2;
  id v4;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (v2)
  {
    v4 = v2;
    objc_msgSend(v4, sel_setRulerEnabled_, -[objc_class isRulerActive](a1.super.isa, sel_isRulerActive));

  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall PaperDocumentView.toolPickerVisibilityDidChange(_:)(PKToolPicker a1)
{
  uint64_t v1;
  void *v2;

  if ((-[objc_class isVisible](a1.super.isa, sel_isVisible) & 1) == 0)
  {
    v2 = *(void **)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
    if (v2)
      objc_msgSend(v2, sel_setRulerEnabled_, 0);
    else
      __break(1u);
  }
}

id PaperDocumentView.currentPageCanvas.getter()
{
  uint64_t v0;
  id *v1;
  id result;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  id v10;

  v1 = (id *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  result = *v1;
  if (!*v1)
  {
    __break(1u);
    return result;
  }
  result = objc_msgSend(result, sel_currentPage);
  if (result)
  {
    v3 = result;
    type metadata accessor for PaperKitPDFPage(0);
    v4 = swift_dynamicCastClass();
    if (v4)
    {
      v5 = v4;
      v6 = (uint64_t *)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
      swift_beginAccess();
      v7 = *v6;
      if (*(_QWORD *)(v7 + 16))
      {
        v3 = v3;
        swift_bridgeObjectRetain();
        v8 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
        if ((v9 & 1) != 0)
        {
          v10 = *(id *)(*(_QWORD *)(v7 + 56) + 16 * v8);
          swift_bridgeObjectRelease();

          type metadata accessor for AnyCanvas();
          result = (id)swift_dynamicCastClass();
          if (result)
            return result;

          return 0;
        }
        swift_bridgeObjectRelease();

      }
    }

    return 0;
  }
  return result;
}

uint64_t closure #1 in PaperDocumentView.updateVellumWithOpacity(_:)(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double);
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  void (*v45)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double);
  uint64_t v46;
  char v47[32];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v43 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  v13 = *(_QWORD *)(v12 - 8);
  v45 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double))v12;
  v46 = v13;
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>.Iterator);
  v40 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  Capsule.Ref<>.subscript.getter();
  v21 = v17;
  swift_release();
  v22 = v45;
  CROrderedSet.makeIterator()();
  (*(void (**)(char *, void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double)))(v46 + 8))(v16, v22);
  CROrderedSet.Iterator.next()();
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48);
  if (v23(v11, 1, v4) != 1)
  {
    v41 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
    v42 = v23;
    do
    {
      v41(v7, v11, v4);
      v46 = SharedTagged_3.subscript.modify();
      v24 = a1;
      v27 = *(_QWORD *)(v25 + 24);
      v26 = *(_QWORD *)(v25 + 32);
      v28 = __swift_mutable_project_boxed_opaque_existential_1(v25, v27);
      v29 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double))(v26 + 96);
      v44 = v28;
      v45 = v29;
      v30 = v20;
      v31 = v21;
      v32 = v4;
      v33 = v11;
      v34 = v7;
      v35 = type metadata accessor for PaperDocument(0);
      v36 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
      v37 = v35;
      v7 = v34;
      v11 = v33;
      v4 = v32;
      v21 = v31;
      v20 = v30;
      v38 = v26;
      a1 = v24;
      v45(v24, v37, v36, v27, v38, a2);
      ((void (*)(char *, _QWORD))v46)(v47, 0);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v7, v4);
      CROrderedSet.Iterator.next()();
    }
    while (v42(v11, 1, v4) != 1);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v20, v21);
}

void PaperDocumentView.updateTiledViewInk(for:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  Class isa;
  void *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  void *v29;
  id v30;
  uint64_t v31;

  v2 = v1;
  v4 = type metadata accessor for PKInk();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView;
  v10 = *(void **)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (!v10)
    goto LABEL_29;
  v11 = v10;
  v12 = objc_msgSend(a1, sel_selectedToolItem);
  PKToolPickerItem.ink.getter((uint64_t)v8);

  isa = PKInk._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  objc_msgSend(v11, sel_setInk_, isa);

  v14 = *(void **)(v2 + v9);
  if (v14)
  {
    if (objc_msgSend(v14, sel_allowsFingerDrawing))
    {
      v15 = (uint64_t *)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
      swift_beginAccess();
      v16 = *v15;
      v17 = v16 + 64;
      v18 = 1 << *(_BYTE *)(v16 + 32);
      v19 = -1;
      if (v18 < 64)
        v19 = ~(-1 << v18);
      v20 = v19 & *(_QWORD *)(v16 + 64);
      v21 = (unint64_t)(v18 + 63) >> 6;
      swift_bridgeObjectRetain();
      v22 = 0;
      v23 = MEMORY[0x1E0DEE9E8];
      while (1)
      {
        if (v20)
        {
          v24 = __clz(__rbit64(v20));
          v20 &= v20 - 1;
          v25 = v24 | (v22 << 6);
        }
        else
        {
          v26 = v22 + 1;
          if (__OFADD__(v22, 1))
          {
            __break(1u);
            goto LABEL_28;
          }
          if (v26 >= v21)
            goto LABEL_25;
          v27 = *(_QWORD *)(v17 + 8 * v26);
          ++v22;
          if (!v27)
          {
            v22 = v26 + 1;
            if (v26 + 1 >= v21)
              goto LABEL_25;
            v27 = *(_QWORD *)(v17 + 8 * v22);
            if (!v27)
            {
              v22 = v26 + 2;
              if (v26 + 2 >= v21)
                goto LABEL_25;
              v27 = *(_QWORD *)(v17 + 8 * v22);
              if (!v27)
              {
                v28 = v26 + 3;
                if (v28 >= v21)
                {
LABEL_25:
                  swift_release();
                  return;
                }
                v27 = *(_QWORD *)(v17 + 8 * v28);
                if (!v27)
                {
                  while (1)
                  {
                    v22 = v28 + 1;
                    if (__OFADD__(v28, 1))
                      break;
                    if (v22 >= v21)
                      goto LABEL_25;
                    v27 = *(_QWORD *)(v17 + 8 * v22);
                    ++v28;
                    if (v27)
                      goto LABEL_22;
                  }
LABEL_28:
                  __break(1u);
LABEL_29:
                  __break(1u);
                  goto LABEL_30;
                }
                v22 = v28;
              }
            }
          }
LABEL_22:
          v20 = (v27 - 1) & v27;
          v25 = __clz(__rbit64(v27)) + (v22 << 6);
        }
        v29 = *(void **)(*(_QWORD *)(v16 + 56) + 16 * v25);
        type metadata accessor for AnyCanvas();
        if (swift_dynamicCastClass())
        {
          v30 = v29;
          AnyCanvas.selection.setter(v23, v23, 6, 0);

        }
      }
    }
  }
  else
  {
LABEL_30:
    __break(1u);
  }
}

Swift::Void __swiftcall PaperDocumentView.updateToolPicker()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  void **v3;
  void *v4;
  void *v5;
  id v6;
  char *v7;
  void *v8;
  unsigned __int8 *v9;
  int v10;
  id v11;
  id *v12;
  id v13;
  void *v14;
  id v15;
  unint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;

  v1 = v0;
  v2 = *(char **)(v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_tiledView);
  if (!v2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v3 = (void **)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_toolPicker);
  swift_beginAccess();
  v4 = *v3;
  v5 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit17TiledDocumentView_toolPicker];
  *(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit17TiledDocumentView_toolPicker] = *v3;
  v6 = v4;
  v7 = v2;

  CanvasElementController.updateToolPickerContextualEditingView()();
  v8 = *v3;
  if (*v3)
  {
    v9 = (unsigned __int8 *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_editingMode);
    swift_beginAccess();
    v10 = *v9;
    v11 = v8;
    objc_msgSend(v11, sel_setVisible_forFirstResponder_, v10 == 3, v1);
    v12 = (id *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
    swift_beginAccess();
    if (!*v12)
    {
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    objc_msgSend(v11, sel_setVisible_forFirstResponder_, v10 == 3);
    if (!*v12)
    {
LABEL_20:
      __break(1u);
      return;
    }
    v13 = objc_msgSend(*v12, sel_documentScrollView);
    if (!v13)
    {
LABEL_12:

      return;
    }
    v14 = v13;
    v15 = objc_msgSend(v13, sel_subviews);

    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v16 >> 62)
    {
      swift_bridgeObjectRetain();
      v19 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v19)
        goto LABEL_8;
    }
    else if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_8:
      if ((v16 & 0xC000000000000001) != 0)
      {
        v17 = (id)MEMORY[0x1DF0E4D64](0, v16);
        goto LABEL_11;
      }
      if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v17 = *(id *)(v16 + 32);
LABEL_11:
        v18 = v17;
        swift_bridgeObjectRelease();
        objc_msgSend(v11, sel_setVisible_forFirstResponder_, v10 == 3, v18);

        goto LABEL_12;
      }
      __break(1u);
      goto LABEL_18;
    }

    swift_bridgeObjectRelease();
  }
}

uint64_t PaperDocumentView.publisher.getter()
{
  return PaperDocumentView.publisher.getter();
}

{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<Capsule<PaperDocument>, Never>);
  lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type PassthroughSubject<Capsule<PaperDocument>, Never> and conformance PassthroughSubject<A, B>, (uint64_t *)&demangling cache variable for type metadata for PassthroughSubject<Capsule<PaperDocument>, Never>, MEMORY[0x1E0C95F48]);
  return Publisher.eraseToAnyPublisher()();
}

uint64_t PaperDocumentView.livePublisher.getter()
{
  return PaperDocumentView.publisher.getter();
}

Swift::Void __swiftcall PaperDocumentView.updatePDFDocument(otherDocuments:)(Swift::OpaquePointer otherDocuments)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  void (*v40)(char *, char *, uint64_t);
  void (*v41)(char *, uint64_t);
  void *v42;
  char *v43;
  id v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(uint64_t, uint64_t, uint64_t);
  _QWORD *v51;
  _BYTE *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  void (*v58)(char *, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, char *, uint64_t);
  char *v96;
  void (*v97)(uint64_t, uint64_t);
  char *v98;
  uint64_t v99;
  char *rawValue;
  uint64_t v101;
  _OWORD v102[5];

  v2 = v1;
  rawValue = (char *)otherDocuments._rawValue;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v3, v4);
  v84 = (uint64_t)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for CRAsset();
  v101 = *(_QWORD *)(v91 - 8);
  MEMORY[0x1E0C80A78](v91, v6);
  v88 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = v7;
  MEMORY[0x1E0C80A78](v8, v9);
  v85 = (char *)&v82 - v10;
  v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CRAsset?, CRAsset?));
  MEMORY[0x1E0C80A78](v90, v11);
  v89 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  MEMORY[0x1E0C80A78](v13, v14);
  v93 = (uint64_t)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v87 = (uint64_t)&v82 - v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v86 = (uint64_t)&v82 - v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v82 - v24;
  v26 = type metadata accessor for PaperDocument(0);
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v82 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v32);
  v34 = (char *)&v82 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35, v36);
  v38 = (char *)&v82 - v37;
  v99 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_isUpdatingPDFDocument;
  v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_isUpdatingPDFDocument] = 1;
  v39 = &v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
  swift_beginAccess();
  v40 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
  v40(v38, v39, v30);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  Capsule<>.root.getter();
  v41 = *(void (**)(char *, uint64_t))(v31 + 8);
  v98 = v38;
  v41(v38, v30);
  v94 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument;
  v42 = *(void **)&v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument];
  v96 = v39;
  v95 = v40;
  v40(v34, v39, v30);
  v43 = v42;
  v44 = specialized PaperDocument.update<A>(_:in:otherDocuments:use:)(v43, (uint64_t)v34, (uint64_t)rawValue, 0x8000000000000000);

  v45 = v34;
  v46 = v91;
  v92 = v30;
  v97 = (void (*)(uint64_t, uint64_t))v41;
  v41(v45, v30);
  v47 = (uint64_t)v89;
  outlined destroy of PKStrokeProperties((uint64_t)v29, type metadata accessor for PaperDocument);
  specialized Collection.first.getter((uint64_t)v44, (uint64_t)v25);
  rawValue = v2;
  v48 = (uint64_t)&v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_updateDocAsset];
  swift_beginAccess();
  v49 = v47 + *(int *)(v90 + 48);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v25, v47, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v48, v49, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v101 + 48);
  v51 = &unk_1EDB80000;
  if (v50(v47, 1, v46) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
    if (v50(v49, 1, v46) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v47, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
      swift_bridgeObjectRelease();
      v52 = rawValue;
      goto LABEL_12;
    }
    goto LABEL_6;
  }
  v53 = v44;
  v54 = v86;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v47, v86, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  if (v50(v49, 1, v46) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
    (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v54, v46);
    v44 = v53;
LABEL_6:
    v55 = v46;
    outlined destroy of StocksKitCurrencyCache.Provider?(v47, &demangling cache variable for type metadata for (CRAsset?, CRAsset?));
    goto LABEL_9;
  }
  v56 = v101;
  v57 = v85;
  (*(void (**)(char *, uint64_t, uint64_t))(v101 + 32))(v85, v49, v46);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type CRAsset and conformance CRAsset, (uint64_t (*)(uint64_t))MEMORY[0x1E0D12958], MEMORY[0x1E0D12978]);
  LODWORD(v90) = dispatch thunk of static Equatable.== infix(_:_:)();
  v58 = *(void (**)(char *, uint64_t))(v56 + 8);
  v59 = v57;
  v51 = (_QWORD *)&unk_1EDB80000;
  v58(v59, v46);
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  v55 = v46;
  v58((char *)v54, v46);
  outlined destroy of StocksKitCurrencyCache.Provider?(v47, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  v44 = v53;
  if ((v90 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v52 = rawValue;
    goto LABEL_12;
  }
LABEL_9:
  v60 = v51[266];
  if (*(_QWORD *)&rawValue[v60])
  {
    v61 = swift_retain();
    MEMORY[0x1DF0E453C](v61, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
    swift_release();
  }
  v62 = v87;
  specialized Collection.first.getter((uint64_t)v44, v87);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  outlined assign with take of Date?(v62, v48, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  swift_endAccess();
  v52 = rawValue;
  *(_QWORD *)&rawValue[v60] = 0;
  swift_release();
  v46 = v55;
LABEL_12:
  v63 = v93;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v48, v93, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  if (v50(v63, 1, v46) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v63, (uint64_t *)&demangling cache variable for type metadata for CRAsset?);
  }
  else
  {
    v64 = v101;
    v65 = *(void (**)(char *, uint64_t, uint64_t))(v101 + 32);
    v66 = v88;
    v65(v88, v63, v46);
    v67 = v51[266];
    if (*(_QWORD *)&v52[v67])
    {
      (*(void (**)(char *, uint64_t))(v64 + 8))(v66, v46);
    }
    else
    {
      v68 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v84, 1, 1, v68);
      v69 = v46;
      v70 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v71 = v85;
      (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v85, v66, v69);
      type metadata accessor for MainActor();
      swift_retain();
      v72 = static MainActor.shared.getter();
      v73 = (*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
      v74 = (v83 + v73 + 7) & 0xFFFFFFFFFFFFFFF8;
      v75 = swift_allocObject();
      v76 = MEMORY[0x1E0DF06E8];
      *(_QWORD *)(v75 + 16) = v72;
      *(_QWORD *)(v75 + 24) = v76;
      v65((char *)(v75 + v73), (uint64_t)v71, v69);
      *(_QWORD *)(v75 + v74) = v70;
      swift_release();
      v77 = v75;
      v52 = rawValue;
      *(_QWORD *)&v52[v67] = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v84, (uint64_t)&async function pointer to partial apply for closure #1 in PaperDocumentView.updatePDFDocument(otherDocuments:), v77);
      swift_release();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v88, v69);
    }
  }
  v78 = *(void **)&v52[v94];
  v79 = (uint64_t)v98;
  v80 = v92;
  v95(v98, v96, v92);
  v102[0] = xmmword_1DDF32D00;
  memset(&v102[1], 0, 59);
  v81 = v78;
  specialized PaperKitPDFDocument.updatePDFPages<A>(in:use:options:)(v79, 0x8000000000000000, (uint64_t)v102);

  v97(v79, v80);
  v52[v99] = 0;
}

uint64_t closure #1 in PaperDocumentView.updatePDFDocument(otherDocuments:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[5] = a4;
  v5[6] = a5;
  type metadata accessor for MainActor();
  v5[7] = static MainActor.shared.getter();
  v5[8] = dispatch thunk of Actor.unownedExecutor.getter();
  v5[9] = v6;
  return swift_task_switch();
}

uint64_t closure #1 in PaperDocumentView.updatePDFDocument(otherDocuments:)()
{
  uint64_t v0;
  _QWORD *v2;
  uint64_t (*v3)(uint64_t);

  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    swift_release();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v3 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static PaperKitPDFDocument._load(_:)
                                         + async function pointer to specialized static PaperKitPDFDocument._load(_:));
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 80) = v2;
    *v2 = v0;
    v2[1] = closure #1 in PaperDocumentView.updatePDFDocument(otherDocuments:);
    return v3(*(_QWORD *)(v0 + 40));
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  unint64_t v15;

  v1 = *(_QWORD *)(v0 + 88);
  swift_release();
  if (v1)
  {
    v2 = *(void **)(v0 + 88);
    v3 = *(_QWORD *)(v0 + 48) + 16;
    swift_beginAccess();
    v4 = MEMORY[0x1DF0E666C](v3);
    if (v4)
    {
      v5 = (void *)v4;
      v6 = *(_QWORD *)(v0 + 40);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(CRAsset, PaperKitPDFDocument)>);
      v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CRAsset, PaperKitPDFDocument));
      v8 = *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80);
      v9 = (v8 + 32) & ~v8;
      v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_1DDF32CF0;
      v11 = v10 + v9;
      v12 = *(int *)(v7 + 48);
      v13 = type metadata accessor for CRAsset();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v6, v13);
      *(_QWORD *)(v11 + v12) = v2;
      v14 = v2;
      v15 = specialized Dictionary.init(dictionaryLiteral:)(v10);
      PaperDocumentView.updatePDFDocument(otherDocuments:)((Swift::OpaquePointer)v15);
      swift_bridgeObjectRelease();

      v2 = v5;
    }

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in PaperDocumentView.updatePDFDocument(otherDocuments:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

void specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(int a1, int a2, uint64_t a3, char *a4, void *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  id *v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t ObjectType;
  char *v64;
  void (*v65)(char *, char *, uint64_t);
  void (*v66)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  char *v71;
  void (*v72)(char *, uint64_t);
  char *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  char *v77;
  id v78;
  char *v79;
  void *v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  int v93;
  int v94;
  char *v95;
  id v96;
  uint64_t v97;
  void (*v98)(char *, char *, uint64_t);
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char v111[9];

  v106 = a3;
  v94 = a2;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v10, v11);
  v100 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for CapsuleUndoAction();
  v105 = *(_QWORD *)(v108 - 8);
  MEMORY[0x1E0C80A78](v108, v13);
  v92 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v101 = (char *)&v87 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  v88 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v90 = (uint64_t)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = v20;
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v87 - v23;
  v104 = (_QWORD *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v103 = *(v104 - 1);
  MEMORY[0x1E0C80A78](v104, v25);
  v95 = (char *)&v87 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v29);
  v31 = (char *)&v87 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v87 - v34;
  v109 = a4;
  v36 = &a4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
  swift_beginAccess();
  v97 = v28;
  v37 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
  v107 = v35;
  v99 = v36;
  v98 = v37;
  v37(v35, v36, v27);
  v102 = a6;
  v110 = a6;
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  v38 = v106;
  swift_endAccess();
  v93 = a1;
  if ((a1 & 1) != 0)
  {
    v39 = v38;
    v40 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v41 = v109;
    PaperDocumentView.updatePDFDocument(otherDocuments:)((Swift::OpaquePointer)v40);
    swift_bridgeObjectRelease();
    v42 = (id *)&v41[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
    swift_beginAccess();
    if (*v42)
    {
      objc_msgSend(*v42, sel_layoutDocumentView);
      v43 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
      v44 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000014, 0x80000001DDF58930);
      if (*v42)
      {
        v45 = objc_msgSend(*v42, sel_document);
        objc_msgSend(v43, sel_postNotificationName_object_, v44, v45);

        v38 = v39;
        goto LABEL_5;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
LABEL_5:
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v38, (uint64_t)v24, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  v46 = v103;
  v47 = v104;
  v48 = (*(uint64_t (**)(char *, uint64_t, _QWORD *))(v103 + 48))(v24, 1, v104);
  v96 = a5;
  if (v48 == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    v49 = v105;
    v50 = v100;
LABEL_10:
    v64 = v99;
    v65 = v98;
    v69 = v97;
    goto LABEL_11;
  }
  v51 = v95;
  (*(void (**)(char *, char *, _QWORD *))(v46 + 32))(v95, v24, v47);
  v52 = (uint64_t *)&v109[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap];
  v53 = swift_beginAccess();
  v54 = *v52;
  MEMORY[0x1E0C80A78](v53, v55);
  *(&v87 - 2) = (uint64_t)v51;
  swift_bridgeObjectRetain();
  specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.convert(_:from:), (uint64_t)(&v87 - 4), v54);
  v57 = v56;
  v59 = v58;
  v61 = v60;
  swift_bridgeObjectRelease();
  v62 = v46;
  v50 = v100;
  if (!v57)
  {
    (*(void (**)(char *, _QWORD *))(v62 + 8))(v51, v47);
    v49 = v105;
    goto LABEL_10;
  }

  ObjectType = swift_getObjectType();
  v64 = v99;
  v65 = v98;
  v98(v31, v99, v27);
  v111[0] = 3;
  v66 = *(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 88);
  v67 = type metadata accessor for PaperDocument(0);
  v68 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  v66(v31, v111, v67, v68, ObjectType, v61);

  v69 = v97;
  (*(void (**)(char *, uint64_t))(v97 + 8))(v31, v27);
  (*(void (**)(char *, _QWORD *))(v103 + 8))(v95, v104);
  v49 = v105;
LABEL_11:
  v65(v31, v64, v27);
  v70 = v65;
  v71 = v107;
  Capsule.actionUndoingDifference(from:)();
  v72 = *(void (**)(char *, uint64_t))(v69 + 8);
  v72(v31, v27);
  v73 = v50;
  v74 = (uint64_t)v50;
  v75 = v108;
  v76 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48))(v73, 1, v108);
  v77 = v109;
  if (v76 == 1)
  {
    v72(v71, v27);
    outlined destroy of StocksKitCurrencyCache.Provider?(v74, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  }
  else
  {
    v104 = *(_QWORD **)(v49 + 32);
    ((void (*)(char *, uint64_t, uint64_t))v104)(v101, v74, v75);
    v70(v31, v64, v27);
    PassthroughSubject.send(_:)();
    v72(v31, v27);
    if (*(_QWORD *)&v77[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection])
    {
      v70(v31, v64, v27);
      swift_retain();
      CRMulticastSyncManager.sync(_:sendDelta:)();
      swift_release();
      v72(v31, v27);
    }
    v78 = objc_msgSend(v77, sel_undoManager);
    v79 = v101;
    if (v78)
    {
      v80 = v78;
      v81 = v90;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v106, v90, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      v82 = v92;
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v92, v79, v108);
      v83 = (*(unsigned __int8 *)(v88 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80);
      v84 = (v89 + *(unsigned __int8 *)(v49 + 80) + v83) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
      v85 = swift_allocObject();
      *(_BYTE *)(v85 + 16) = v93 & 1;
      *(_BYTE *)(v85 + 17) = v94 & 1;
      v86 = v81;
      v75 = v108;
      outlined init with take of (key: Int, value: AnyCRValue)?(v86, v85 + v83, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      ((void (*)(unint64_t, char *, uint64_t))v104)(v85 + v84, v82, v75);
      type metadata accessor for PaperDocumentView();
      NSUndoManager.registerUndo<A>(withTarget:handler:)();
      v49 = v105;
      swift_release();

    }
    (*(void (**)(char *, uint64_t))(v49 + 8))(v79, v75);
    v72(v107, v27);
  }
  swift_bridgeObjectRelease();

}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  id *v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t ObjectType;
  char *v64;
  char *v65;
  void (*v66)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  char *v71;
  void (*v72)(char *, uint64_t);
  char *v73;
  id v74;
  char *v75;
  void *v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  int v88;
  int v89;
  char *v90;
  id v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char v105[9];

  v99 = a3;
  v89 = a2;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v10, v11);
  v94 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = type metadata accessor for CapsuleUndoAction();
  v98 = *(_QWORD *)(v103 - 8);
  MEMORY[0x1E0C80A78](v103, v13);
  v87 = (char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v95 = (char *)&v83 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  v83 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v85 = (uint64_t)&v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = v20;
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&v83 - v23;
  v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v100 = *(_QWORD *)(v96 - 8);
  MEMORY[0x1E0C80A78](v96, v25);
  v90 = (char *)&v83 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v28 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v29);
  v31 = (char *)&v83 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v83 - v34;
  v102 = a4;
  v36 = &a4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
  swift_beginAccess();
  v92 = v28;
  v37 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
  v101 = v35;
  v93 = v36;
  v97 = v37;
  v37(v35, v36, v27);
  v104 = a6;
  swift_beginAccess();
  Capsule.callAsFunction<A>(_:)();
  v38 = v99;
  swift_endAccess();
  v88 = a1;
  if ((a1 & 1) != 0)
  {
    v39 = v38;
    v40 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v41 = v102;
    PaperDocumentView.updatePDFDocument(otherDocuments:)((Swift::OpaquePointer)v40);
    swift_bridgeObjectRelease();
    v42 = (id *)&v41[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
    swift_beginAccess();
    if (*v42)
    {
      objc_msgSend(*v42, sel_layoutDocumentView);
      v43 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
      v44 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000014, 0x80000001DDF58930);
      if (*v42)
      {
        v45 = objc_msgSend(*v42, sel_document);
        objc_msgSend(v43, sel_postNotificationName_object_, v44, v45);

        v38 = v39;
        goto LABEL_5;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
LABEL_5:
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v38, (uint64_t)v24, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  v46 = v100;
  v47 = v96;
  v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v100 + 48))(v24, 1, v96);
  v91 = a5;
  if (v48 == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    v49 = v103;
    v50 = v98;
    v51 = (uint64_t)v94;
LABEL_10:
    v65 = v93;
    v69 = v92;
    goto LABEL_11;
  }
  v52 = v90;
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v90, v24, v47);
  v53 = (uint64_t *)&v102[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap];
  v54 = swift_beginAccess();
  v55 = *v53;
  MEMORY[0x1E0C80A78](v54, v56);
  *(&v83 - 2) = (uint64_t)v52;
  swift_bridgeObjectRetain();
  specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.convert(_:from:), (uint64_t)(&v83 - 4), v55);
  v58 = v57;
  v60 = v59;
  v62 = v61;
  swift_bridgeObjectRelease();
  v51 = (uint64_t)v94;
  if (!v58)
  {
    (*(void (**)(char *, uint64_t))(v100 + 8))(v52, v47);
    v49 = v103;
    v50 = v98;
    goto LABEL_10;
  }

  ObjectType = swift_getObjectType();
  v64 = v52;
  v65 = v93;
  v97(v31, v93, v27);
  v105[0] = 3;
  v66 = *(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 88);
  v67 = type metadata accessor for PaperDocument(0);
  v68 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  v66(v31, v105, v67, v68, ObjectType, v62);

  v69 = v92;
  (*(void (**)(char *, uint64_t))(v92 + 8))(v31, v27);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v64, v96);
  v49 = v103;
  v50 = v98;
LABEL_11:
  v70 = v97;
  v97(v31, v65, v27);
  v71 = v101;
  Capsule.actionUndoingDifference(from:)();
  v72 = *(void (**)(char *, uint64_t))(v69 + 8);
  v72(v31, v27);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v51, 1, v49) == 1)
  {
    v72(v71, v27);
    outlined destroy of StocksKitCurrencyCache.Provider?(v51, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  }
  else
  {
    v100 = *(_QWORD *)(v50 + 32);
    ((void (*)(char *, uint64_t, uint64_t))v100)(v95, v51, v49);
    v73 = v102;
    v70(v31, v65, v27);
    PassthroughSubject.send(_:)();
    v72(v31, v27);
    if (*(_QWORD *)&v73[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection])
    {
      v70(v31, v65, v27);
      swift_retain();
      CRMulticastSyncManager.sync(_:sendDelta:)();
      swift_release();
      v72(v31, v27);
    }
    v74 = objc_msgSend(v73, sel_undoManager);
    v75 = v95;
    if (v74)
    {
      v76 = v74;
      v77 = v85;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v99, v85, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      v78 = v87;
      (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v87, v75, v103);
      v79 = (*(unsigned __int8 *)(v83 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
      v80 = (v84 + *(unsigned __int8 *)(v50 + 80) + v79) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
      v81 = swift_allocObject();
      *(_BYTE *)(v81 + 16) = v88 & 1;
      *(_BYTE *)(v81 + 17) = v89 & 1;
      v82 = v77;
      v49 = v103;
      outlined init with take of (key: Int, value: AnyCRValue)?(v82, v81 + v79, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      ((void (*)(unint64_t, char *, uint64_t))v100)(v81 + v80, v78, v49);
      type metadata accessor for PaperDocumentView();
      NSUndoManager.registerUndo<A>(withTarget:handler:)();
      v50 = v98;
      swift_release();

    }
    (*(void (**)(char *, uint64_t))(v50 + 8))(v75, v49);
    v72(v101, v27);
  }

}

void *specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(int a1, int a2, uint64_t a3, void (*a4)(uint64_t))
{
  char *v4;
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  unint64_t v40;
  char *v41;
  void **v42;
  void *result;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t ObjectType;
  void (*v61)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  id v70;
  void *v71;
  uint64_t v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  int v84;
  int v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t, uint64_t);
  char v96[9];

  v5 = v4;
  v90 = a3;
  v85 = a2;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v8, v9);
  v95 = (void (*)(char *, uint64_t, uint64_t))((char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v88 = type metadata accessor for CapsuleUndoAction();
  v92 = *(_QWORD *)(v88 - 8);
  MEMORY[0x1E0C80A78](v88, v11);
  v83 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = v12;
  MEMORY[0x1E0C80A78](v13, v14);
  v91 = (char *)&v77 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  v79 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v81 = (uint64_t)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v77 - v21;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v93 = *(_QWORD *)(v23 - 8);
  v94 = v23;
  MEMORY[0x1E0C80A78](v23, v24);
  v86 = (char *)&v77 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v28);
  v30 = (char *)&v77 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v77 - v33;
  v35 = &v4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
  swift_beginAccess();
  v87 = v27;
  v36 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
  v89 = v34;
  v37 = v34;
  v38 = v36;
  v39 = ((uint64_t (*)(char *, char *, uint64_t))v36)(v37, v35, v26);
  a4(v39);
  v84 = a1;
  if ((a1 & 1) != 0)
  {
    v40 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    PaperDocumentView.updatePDFDocument(otherDocuments:)((Swift::OpaquePointer)v40);
    swift_bridgeObjectRelease();
    v41 = v4;
    v42 = (void **)&v4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
    swift_beginAccess();
    result = *v42;
    if (*v42)
    {
      objc_msgSend(result, sel_layoutDocumentView);
      v44 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
      v45 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000014, 0x80000001DDF58930);
      result = *v42;
      if (*v42)
      {
        v46 = objc_msgSend(result, sel_document);
        objc_msgSend(v44, sel_postNotificationName_object_, v45, v46);

        v5 = v41;
        goto LABEL_5;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
LABEL_5:
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v90, (uint64_t)v22, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  v48 = v93;
  v47 = v94;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v22, 1, v94) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  }
  else
  {
    v49 = v86;
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v86, v22, v47);
    v78 = v5;
    v50 = (uint64_t *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap];
    v51 = swift_beginAccess();
    v52 = *v50;
    MEMORY[0x1E0C80A78](v51, v53);
    *(&v77 - 2) = (uint64_t)v49;
    swift_bridgeObjectRetain();
    specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.convert(_:from:), (uint64_t)(&v77 - 4), v52);
    v55 = v54;
    v57 = v56;
    v59 = v58;
    swift_bridgeObjectRelease();
    if (v55)
    {

      ObjectType = swift_getObjectType();
      v38(v30, v35, v26);
      v96[0] = 3;
      v61 = *(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 88);
      v62 = type metadata accessor for PaperDocument(0);
      v63 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
      v61(v30, v96, v62, v63, ObjectType, v59);

      v64 = v87;
      (*(void (**)(char *, uint64_t))(v87 + 8))(v30, v26);
      (*(void (**)(char *, uint64_t))(v93 + 8))(v49, v94);
      v5 = v78;
      goto LABEL_11;
    }
    (*(void (**)(char *, uint64_t))(v93 + 8))(v49, v94);
    v5 = v78;
  }
  v64 = v87;
LABEL_11:
  v38(v30, v35, v26);
  v65 = v89;
  Capsule.actionUndoingDifference(from:)();
  v66 = (uint64_t)v95;
  v67 = *(void (**)(char *, uint64_t))(v64 + 8);
  v67(v30, v26);
  v68 = v92;
  v69 = v88;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48))(v66, 1, v88) == 1)
  {
    v67(v65, v26);
    return (void *)outlined destroy of StocksKitCurrencyCache.Provider?(v66, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  }
  else
  {
    v95 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 32);
    v95(v91, v66, v69);
    v38(v30, v35, v26);
    PassthroughSubject.send(_:)();
    v67(v30, v26);
    if (*(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection])
    {
      v38(v30, v35, v26);
      swift_retain();
      CRMulticastSyncManager.sync(_:sendDelta:)();
      swift_release();
      v67(v30, v26);
    }
    v70 = objc_msgSend(v5, sel_undoManager);
    if (v70)
    {
      v71 = v70;
      v72 = v81;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v90, v81, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      v73 = v83;
      (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v83, v91, v69);
      v74 = (*(unsigned __int8 *)(v79 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80);
      v75 = (v80 + *(unsigned __int8 *)(v68 + 80) + v74) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80);
      v76 = swift_allocObject();
      *(_BYTE *)(v76 + 16) = v84 & 1;
      *(_BYTE *)(v76 + 17) = v85 & 1;
      outlined init with take of (key: Int, value: AnyCRValue)?(v72, v76 + v74, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      v65 = v89;
      v95((char *)(v76 + v75), (uint64_t)v73, v69);
      type metadata accessor for PaperDocumentView();
      NSUndoManager.registerUndo<A>(withTarget:handler:)();
      v68 = v92;
      swift_release();

    }
    (*(void (**)(char *, uint64_t))(v68 + 8))(v91, v69);
    return (void *)((uint64_t (*)(char *, uint64_t))v67)(v65, v26);
  }
}

void specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, char *a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  unint64_t v43;
  char *v44;
  id *v45;
  id v46;
  void *v47;
  id v48;
  void (*v49)(_QWORD, _QWORD, _QWORD);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  char *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  void (*v67)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  char *v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  char *v74;
  id v75;
  void *v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t ObjectType;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  int v90;
  char *v91;
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t);
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  void (*v107)(_QWORD, _QWORD, _QWORD);
  char *v108;
  uint64_t v109;
  id v110;
  char v111;

  v100 = a7;
  v99 = a6;
  v102 = a3;
  v90 = a2;
  v105 = a1;
  v98 = a8;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v10, v11);
  v94 = (char *)&ObjectType - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = type metadata accessor for CapsuleUndoAction();
  v104 = *(_QWORD *)(v97 - 8);
  MEMORY[0x1E0C80A78](v97, v13);
  v89 = (char *)&ObjectType - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v103 = (char *)&ObjectType - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  v85 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v87 = (uint64_t)&ObjectType - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = v20;
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&ObjectType - v23;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v106 = *(_QWORD *)(v25 - 8);
  v107 = (void (*)(_QWORD, _QWORD, _QWORD))v25;
  MEMORY[0x1E0C80A78](v25, v26);
  v91 = (char *)&ObjectType - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v96 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&ObjectType - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v33 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32, v34);
  v36 = (char *)&ObjectType - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37, v38);
  v40 = (char *)&ObjectType - v39;
  v108 = a4;
  v41 = &a4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
  swift_beginAccess();
  v92 = v33;
  v42 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
  v101 = v40;
  v93 = v42;
  v42(v40, v41, v32);
  v109 = v99;
  v110 = v100;
  v100 = a5;
  swift_beginAccess();
  v95 = v31;
  v99 = v28;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  if ((v105 & 1) == 0)
    goto LABEL_5;
  v43 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v44 = v108;
  PaperDocumentView.updatePDFDocument(otherDocuments:)((Swift::OpaquePointer)v43);
  swift_bridgeObjectRelease();
  v45 = (id *)&v44[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
  swift_beginAccess();
  if (!*v45)
  {
    __break(1u);
    goto LABEL_20;
  }
  objc_msgSend(*v45, sel_layoutDocumentView);
  v46 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  v47 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000014, 0x80000001DDF58930);
  if (!*v45)
  {
LABEL_20:
    __break(1u);
    return;
  }
  v48 = objc_msgSend(*v45, sel_document);
  objc_msgSend(v46, sel_postNotificationName_object_, v47, v48);

LABEL_5:
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v102, (uint64_t)v24, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  v50 = v106;
  v49 = v107;
  if ((*(unsigned int (**)(char *, uint64_t, _QWORD))(v106 + 48))(v24, 1, v107) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    v51 = v101;
    v52 = (uint64_t)v94;
    v53 = v93;
    v54 = v92;
    v93(v36, v41, v32);
  }
  else
  {
    v84 = v41;
    v55 = v91;
    (*(void (**)(char *, char *, _QWORD))(v50 + 32))(v91, v24, v49);
    v56 = (uint64_t *)&v108[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap];
    v57 = swift_beginAccess();
    v58 = *v56;
    MEMORY[0x1E0C80A78](v57, v59);
    *(&ObjectType - 2) = (uint64_t)v55;
    swift_bridgeObjectRetain();
    specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.convert(_:from:), (uint64_t)(&ObjectType - 4), v58);
    v61 = v60;
    v63 = v62;
    v65 = v64;
    swift_bridgeObjectRelease();
    v52 = (uint64_t)v94;
    v53 = v93;
    if (v61)
    {

      ObjectType = swift_getObjectType();
      v66 = v84;
      v53(v36, v84, v32);
      v111 = 3;
      v67 = *(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 88);
      v68 = type metadata accessor for PaperDocument(0);
      v69 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
      v67(v36, &v111, v68, v69, ObjectType, v65);

      v54 = v92;
      (*(void (**)(char *, uint64_t))(v92 + 8))(v36, v32);
      v70 = v55;
      v41 = v66;
      (*(void (**)(char *, void (*)(_QWORD, _QWORD, _QWORD)))(v106 + 8))(v70, v107);
      v51 = v101;
    }
    else
    {
      (*(void (**)(char *, void (*)(_QWORD, _QWORD, _QWORD)))(v106 + 8))(v55, v107);
      v51 = v101;
      v54 = v92;
      v41 = v84;
    }
    v53(v36, v41, v32);
  }
  Capsule.actionUndoingDifference(from:)();
  v71 = *(void (**)(char *, uint64_t))(v54 + 8);
  v71(v36, v32);
  v72 = v104;
  v73 = v97;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v104 + 48))(v52, 1, v97) == 1)
  {
    v71(v51, v32);
    outlined destroy of StocksKitCurrencyCache.Provider?(v52, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  }
  else
  {
    v107 = *(void (**)(_QWORD, _QWORD, _QWORD))(v72 + 32);
    v107(v103, v52, v73);
    v74 = v108;
    v53(v36, v41, v32);
    PassthroughSubject.send(_:)();
    v71(v36, v32);
    if (*(_QWORD *)&v74[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection])
    {
      v53(v36, v41, v32);
      swift_retain();
      CRMulticastSyncManager.sync(_:sendDelta:)();
      swift_release();
      v71(v36, v32);
    }
    v75 = objc_msgSend(v74, sel_undoManager);
    if (v75)
    {
      v76 = v75;
      v77 = v87;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v102, v87, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      v78 = v89;
      (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v89, v103, v73);
      v79 = (*(unsigned __int8 *)(v85 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80);
      v80 = (v86 + *(unsigned __int8 *)(v72 + 80) + v79) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
      v81 = swift_allocObject();
      *(_BYTE *)(v81 + 16) = v105 & 1;
      *(_BYTE *)(v81 + 17) = v90 & 1;
      outlined init with take of (key: Int, value: AnyCRValue)?(v77, v81 + v79, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      v82 = v78;
      v51 = v101;
      v107(v81 + v80, v82, v73);
      type metadata accessor for PaperDocumentView();
      NSUndoManager.registerUndo<A>(withTarget:handler:)();
      v72 = v104;
      swift_release();

    }
    (*(void (**)(char *, uint64_t))(v72 + 8))(v103, v73);
    v71(v51, v32);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v96 + 32))(v98, v95, v99);

}

void specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, char *a4@<X3>, void *a5@<X4>, __int128 *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  void (*v41)(_QWORD, _QWORD, _QWORD);
  char *v42;
  void (*v43)(_QWORD, _QWORD, _QWORD);
  unint64_t v44;
  char *v45;
  id *v46;
  id v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(_QWORD, _QWORD, _QWORD);
  void (*v66)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  id v75;
  void *v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t ObjectType;
  void (*v84)(_QWORD, _QWORD, _QWORD);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  int v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  id v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  char v113;

  v99 = a7;
  v108 = a5;
  v103 = a3;
  v90 = a2;
  v106 = a1;
  v96 = a8;
  v98 = *a6;
  v97 = a6[1];
  v9 = *((_QWORD *)a6 + 4);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v10, v11);
  v93 = (char *)&ObjectType - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for CapsuleUndoAction();
  v105 = *(_QWORD *)(v95 - 8);
  MEMORY[0x1E0C80A78](v95, v13);
  v89 = (char *)&ObjectType - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v104 = (char *)&ObjectType - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  v85 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v19);
  v87 = (uint64_t)&ObjectType - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = v20;
  MEMORY[0x1E0C80A78](v21, v22);
  v24 = (char *)&ObjectType - v23;
  v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v107 = *(_QWORD *)(v92 - 8);
  MEMORY[0x1E0C80A78](v92, v25);
  v91 = (char *)&ObjectType - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v94 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&ObjectType - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v32 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v33);
  v35 = (char *)&ObjectType - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v36, v37);
  v39 = (char *)&ObjectType - v38;
  v40 = &a4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
  swift_beginAccess();
  v100 = v32;
  v41 = *(void (**)(_QWORD, _QWORD, _QWORD))(v32 + 16);
  v102 = v39;
  v101 = v40;
  v42 = v40;
  v43 = v41;
  v41(v39, v42, v31);
  v109 = v98;
  v110 = v97;
  v111 = v9;
  v112 = v99;
  swift_beginAccess();
  *(_QWORD *)&v98 = v30;
  v99 = v27;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  if ((v106 & 1) != 0)
  {
    v44 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    PaperDocumentView.updatePDFDocument(otherDocuments:)((Swift::OpaquePointer)v44);
    swift_bridgeObjectRelease();
    v45 = a4;
    v46 = (id *)&a4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
    swift_beginAccess();
    if (*v46)
    {
      objc_msgSend(*v46, sel_layoutDocumentView);
      v47 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
      v48 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000014, 0x80000001DDF58930);
      if (*v46)
      {
        v49 = objc_msgSend(*v46, sel_document);
        objc_msgSend(v47, sel_postNotificationName_object_, v48, v49);

        a4 = v45;
        goto LABEL_5;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
LABEL_5:
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v103, (uint64_t)v24, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  v50 = v107;
  v51 = v92;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48))(v24, 1, v92) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v24, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    v52 = v105;
    v53 = (uint64_t)v93;
  }
  else
  {
    v84 = v43;
    v54 = v91;
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v91, v24, v51);
    *(_QWORD *)&v97 = a4;
    v55 = (uint64_t *)&a4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap];
    v56 = swift_beginAccess();
    v57 = *v55;
    MEMORY[0x1E0C80A78](v56, v58);
    *(&ObjectType - 2) = (uint64_t)v54;
    swift_bridgeObjectRetain();
    specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.convert(_:from:), (uint64_t)(&ObjectType - 4), v57);
    v60 = v59;
    v62 = v61;
    v64 = v63;
    swift_bridgeObjectRelease();
    v53 = (uint64_t)v93;
    if (v60)
    {

      ObjectType = swift_getObjectType();
      v65 = v84;
      v84(v35, v101, v31);
      v113 = 3;
      v66 = *(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 88);
      v67 = type metadata accessor for PaperDocument(0);
      v68 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
      v66(v35, &v113, v67, v68, ObjectType, v64);

      (*(void (**)(char *, uint64_t))(v100 + 8))(v35, v31);
      v69 = v54;
      v43 = v65;
      (*(void (**)(char *, uint64_t))(v107 + 8))(v69, v51);
      a4 = (char *)v97;
      v52 = v105;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v107 + 8))(v54, v51);
      a4 = (char *)v97;
      v52 = v105;
      v43 = v84;
    }
  }
  v70 = v101;
  v43(v35, v101, v31);
  v71 = v102;
  Capsule.actionUndoingDifference(from:)();
  v72 = *(void (**)(char *, uint64_t))(v100 + 8);
  v72(v35, v31);
  v73 = v95;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v53, 1, v95) == 1)
  {
    v72(v71, v31);
    outlined destroy of StocksKitCurrencyCache.Provider?(v53, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  }
  else
  {
    v107 = *(_QWORD *)(v52 + 32);
    ((void (*)(char *, uint64_t, uint64_t))v107)(v104, v53, v73);
    v43(v35, v70, v31);
    PassthroughSubject.send(_:)();
    v72(v35, v31);
    if (*(_QWORD *)&a4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection])
    {
      v43(v35, v70, v31);
      swift_retain();
      CRMulticastSyncManager.sync(_:sendDelta:)();
      swift_release();
      v72(v35, v31);
    }
    v74 = v72;
    v75 = objc_msgSend(a4, sel_undoManager);
    if (v75)
    {
      v76 = v75;
      v77 = v87;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v103, v87, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      v78 = v89;
      (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v89, v104, v73);
      v79 = (*(unsigned __int8 *)(v85 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80);
      v80 = (v86 + *(unsigned __int8 *)(v52 + 80) + v79) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
      v81 = swift_allocObject();
      *(_BYTE *)(v81 + 16) = v106 & 1;
      *(_BYTE *)(v81 + 17) = v90 & 1;
      outlined init with take of (key: Int, value: AnyCRValue)?(v77, v81 + v79, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      v82 = v78;
      v71 = v102;
      ((void (*)(unint64_t, char *, uint64_t))v107)(v81 + v80, v82, v73);
      type metadata accessor for PaperDocumentView();
      NSUndoManager.registerUndo<A>(withTarget:handler:)();
      v52 = v105;
      swift_release();

    }
    (*(void (**)(char *, uint64_t))(v52 + 8))(v104, v73);
    v74(v71, v31);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v94 + 32))(v96, v98, v99);

}

void specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, char *a4@<X3>, void *a5@<X4>, void *a6@<X5>, void *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  void (*v41)(char *, char *, uint64_t);
  unint64_t v42;
  char *v43;
  id *v44;
  id v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  char *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  void (*v67)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  char *v74;
  id v75;
  char *v76;
  void *v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  int v92;
  char *v93;
  uint64_t ObjectType;
  uint64_t v95;
  void (*v96)(char *, char *, uint64_t);
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  id v103;
  id v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  char *v112;
  void *v113;
  id v114;
  void *v115;
  char v116;

  v104 = a7;
  v107 = a3;
  v92 = a2;
  v110 = a1;
  v102 = a8;
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v11, v12);
  v97 = (char *)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for CapsuleUndoAction();
  v108 = *(_QWORD *)(v109 - 8);
  MEMORY[0x1E0C80A78](v109, v14);
  v91 = (char *)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = v15;
  MEMORY[0x1E0C80A78](v16, v17);
  v101 = (char *)&v85 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  v87 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v89 = (uint64_t)&v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = v21;
  MEMORY[0x1E0C80A78](v22, v23);
  ObjectType = (uint64_t)&v85 - v24;
  v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v111 = *(_QWORD *)(v105 - 8);
  MEMORY[0x1E0C80A78](v105, v25);
  v93 = (char *)&v85 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v99 = *(_QWORD *)(v27 - 8);
  MEMORY[0x1E0C80A78](v27, v28);
  v30 = (char *)&v85 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v32 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31, v33);
  v35 = (char *)&v85 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v36, v37);
  v39 = (char *)&v85 - v38;
  v112 = a4;
  v40 = &a4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
  swift_beginAccess();
  v95 = v32;
  v41 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
  v106 = v39;
  v96 = v41;
  v41(v39, v40, v31);
  v103 = a6;
  v113 = a6;
  v114 = v104;
  v115 = a5;
  v104 = a5;
  swift_beginAccess();
  v98 = v30;
  v100 = v27;
  Capsule.callAsFunction<A>(_:)();
  swift_endAccess();
  if ((v110 & 1) != 0)
  {
    v42 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v43 = v112;
    PaperDocumentView.updatePDFDocument(otherDocuments:)((Swift::OpaquePointer)v42);
    swift_bridgeObjectRelease();
    v44 = (id *)&v43[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
    swift_beginAccess();
    if (*v44)
    {
      objc_msgSend(*v44, sel_layoutDocumentView);
      v45 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
      v46 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000014, 0x80000001DDF58930);
      if (*v44)
      {
        v47 = objc_msgSend(*v44, sel_document);
        objc_msgSend(v45, sel_postNotificationName_object_, v46, v47);

        goto LABEL_5;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
LABEL_5:
  v48 = ObjectType;
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v107, ObjectType, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  v49 = v111;
  v50 = v105;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 48))(v48, 1, v105) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?(v48, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    v51 = v109;
    v52 = (uint64_t)v97;
    v53 = v96;
    v54 = v95;
    v96(v35, v40, v31);
  }
  else
  {
    v86 = v40;
    v55 = v93;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 32))(v93, v48, v50);
    v56 = (uint64_t *)&v112[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap];
    v57 = swift_beginAccess();
    v58 = *v56;
    MEMORY[0x1E0C80A78](v57, v59);
    *(&v85 - 2) = (uint64_t)v55;
    swift_bridgeObjectRetain();
    specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.convert(_:from:), (uint64_t)(&v85 - 4), v58);
    v61 = v60;
    v63 = v62;
    v65 = v64;
    swift_bridgeObjectRelease();
    v52 = (uint64_t)v97;
    if (v61)
    {

      ObjectType = swift_getObjectType();
      v66 = v86;
      v53 = v96;
      v96(v35, v86, v31);
      v116 = 3;
      v67 = *(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 88);
      v68 = type metadata accessor for PaperDocument(0);
      v69 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
      v67(v35, &v116, v68, v69, ObjectType, v65);

      v54 = v95;
      (*(void (**)(char *, uint64_t))(v95 + 8))(v35, v31);
      v70 = v55;
      v40 = v66;
      (*(void (**)(char *, uint64_t))(v111 + 8))(v70, v105);
      v51 = v109;
      v53(v35, v66, v31);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v111 + 8))(v55, v50);
      v51 = v109;
      v53 = v96;
      v54 = v95;
      v40 = v86;
      v96(v35, v86, v31);
    }
  }
  v71 = v106;
  Capsule.actionUndoingDifference(from:)();
  v72 = *(void (**)(char *, uint64_t))(v54 + 8);
  v72(v35, v31);
  v73 = v108;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v108 + 48))(v52, 1, v51) == 1)
  {
    v72(v71, v31);
    outlined destroy of StocksKitCurrencyCache.Provider?(v52, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  }
  else
  {
    v111 = *(_QWORD *)(v73 + 32);
    ((void (*)(char *, uint64_t, uint64_t))v111)(v101, v52, v51);
    v74 = v112;
    v53(v35, v40, v31);
    PassthroughSubject.send(_:)();
    v72(v35, v31);
    if (*(_QWORD *)&v74[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection])
    {
      v53(v35, v40, v31);
      swift_retain();
      CRMulticastSyncManager.sync(_:sendDelta:)();
      swift_release();
      v72(v35, v31);
    }
    v75 = objc_msgSend(v74, sel_undoManager);
    v76 = v101;
    if (v75)
    {
      v77 = v75;
      v78 = v89;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v107, v89, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      v79 = v91;
      (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v91, v76, v51);
      v80 = (*(unsigned __int8 *)(v87 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80);
      v81 = (v88 + *(unsigned __int8 *)(v73 + 80) + v80) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
      v82 = swift_allocObject();
      *(_BYTE *)(v82 + 16) = v110 & 1;
      *(_BYTE *)(v82 + 17) = v92 & 1;
      v83 = v78;
      v71 = v106;
      outlined init with take of (key: Int, value: AnyCRValue)?(v83, v82 + v80, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      v84 = v82 + v81;
      v51 = v109;
      ((void (*)(unint64_t, char *, uint64_t))v111)(v84, v79, v109);
      type metadata accessor for PaperDocumentView();
      NSUndoManager.registerUndo<A>(withTarget:handler:)();
      v73 = v108;
      swift_release();

    }
    (*(void (**)(char *, uint64_t))(v73 + 8))(v76, v51);
    v72(v71, v31);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v99 + 32))(v102, v98, v100);

}

void *specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(int a1, int a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr, uint64_t))
{
  char *v4;
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  unint64_t v40;
  char *v41;
  void **v42;
  void *result;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t ObjectType;
  void (*v61)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  id v70;
  void *v71;
  uint64_t v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  int v83;
  int v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t, uint64_t);
  char v95[9];
  uint64_t v96;

  v5 = v4;
  v89 = a3;
  v84 = a2;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v8, v9);
  v94 = (void (*)(char *, uint64_t, uint64_t))((char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v87 = type metadata accessor for CapsuleUndoAction();
  v91 = *(_QWORD *)(v87 - 8);
  MEMORY[0x1E0C80A78](v87, v11);
  v82 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = v12;
  MEMORY[0x1E0C80A78](v13, v14);
  v90 = (char *)&v77 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  v78 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v80 = (uint64_t)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v77 - v21;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v92 = *(_QWORD *)(v23 - 8);
  v93 = v23;
  MEMORY[0x1E0C80A78](v23, v24);
  v85 = (char *)&v77 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v28);
  v30 = (char *)&v77 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v77 - v33;
  v35 = &v4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
  swift_beginAccess();
  v86 = v27;
  v36 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
  v88 = v34;
  v37 = v34;
  v38 = v36;
  v39 = ((uint64_t (*)(char *, char *, uint64_t))v36)(v37, v35, v26);
  a4(&v96, v39);
  v83 = a1;
  if ((a1 & 1) != 0)
  {
    v40 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    PaperDocumentView.updatePDFDocument(otherDocuments:)((Swift::OpaquePointer)v40);
    swift_bridgeObjectRelease();
    v41 = v4;
    v42 = (void **)&v4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
    swift_beginAccess();
    result = *v42;
    if (*v42)
    {
      objc_msgSend(result, sel_layoutDocumentView);
      v44 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
      v45 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000014, 0x80000001DDF58930);
      result = *v42;
      if (*v42)
      {
        v46 = objc_msgSend(result, sel_document);
        objc_msgSend(v44, sel_postNotificationName_object_, v45, v46);

        v5 = v41;
        goto LABEL_5;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
LABEL_5:
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v89, (uint64_t)v22, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  v48 = v92;
  v47 = v93;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v22, 1, v93) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
LABEL_10:
    v64 = v86;
    goto LABEL_11;
  }
  v49 = v85;
  (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v85, v22, v47);
  v77 = v5;
  v50 = (uint64_t *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap];
  v51 = swift_beginAccess();
  v52 = *v50;
  MEMORY[0x1E0C80A78](v51, v53);
  *(&v77 - 2) = v49;
  swift_bridgeObjectRetain();
  specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.convert(_:from:), (uint64_t)(&v77 - 4), v52);
  v55 = v54;
  v57 = v56;
  v59 = v58;
  swift_bridgeObjectRelease();
  if (!v55)
  {
    (*(void (**)(char *, uint64_t))(v92 + 8))(v49, v93);
    v5 = v77;
    goto LABEL_10;
  }

  ObjectType = swift_getObjectType();
  v38(v30, v35, v26);
  v95[0] = 3;
  v61 = *(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 88);
  v62 = type metadata accessor for PaperDocument(0);
  v63 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  v61(v30, v95, v62, v63, ObjectType, v59);

  v64 = v86;
  (*(void (**)(char *, uint64_t))(v86 + 8))(v30, v26);
  (*(void (**)(char *, uint64_t))(v92 + 8))(v49, v93);
  v5 = v77;
LABEL_11:
  v38(v30, v35, v26);
  v65 = v88;
  Capsule.actionUndoingDifference(from:)();
  v66 = (uint64_t)v94;
  v67 = *(void (**)(char *, uint64_t))(v64 + 8);
  v67(v30, v26);
  v68 = v91;
  v69 = v87;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v91 + 48))(v66, 1, v87) == 1)
  {
    v67(v65, v26);
    outlined destroy of StocksKitCurrencyCache.Provider?(v66, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  }
  else
  {
    v94 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 32);
    v94(v90, v66, v69);
    v38(v30, v35, v26);
    PassthroughSubject.send(_:)();
    v67(v30, v26);
    if (*(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection])
    {
      v38(v30, v35, v26);
      swift_retain();
      CRMulticastSyncManager.sync(_:sendDelta:)();
      swift_release();
      v67(v30, v26);
    }
    v70 = objc_msgSend(v5, sel_undoManager);
    if (v70)
    {
      v71 = v70;
      v72 = v80;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v89, v80, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      v73 = v82;
      (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v82, v90, v69);
      v74 = (*(unsigned __int8 *)(v78 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
      v75 = (v79 + *(unsigned __int8 *)(v68 + 80) + v74) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80);
      v76 = swift_allocObject();
      *(_BYTE *)(v76 + 16) = v83 & 1;
      *(_BYTE *)(v76 + 17) = v84 & 1;
      outlined init with take of (key: Int, value: AnyCRValue)?(v72, v76 + v74, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      v65 = v88;
      v94((char *)(v76 + v75), (uint64_t)v73, v69);
      type metadata accessor for PaperDocumentView();
      NSUndoManager.registerUndo<A>(withTarget:handler:)();
      v68 = v91;
      swift_release();

    }
    (*(void (**)(char *, uint64_t))(v68 + 8))(v90, v69);
    v67(v65, v26);
  }
  return (void *)v96;
}

{
  char *v4;
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  unint64_t v40;
  char *v41;
  void **v42;
  void *result;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t ObjectType;
  void (*v61)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  id v70;
  void *v71;
  uint64_t v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  int v83;
  int v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t, uint64_t);
  char v95[9];
  uint64_t v96;

  v5 = v4;
  v89 = a3;
  v84 = a2;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v8, v9);
  v94 = (void (*)(char *, uint64_t, uint64_t))((char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v87 = type metadata accessor for CapsuleUndoAction();
  v91 = *(_QWORD *)(v87 - 8);
  MEMORY[0x1E0C80A78](v87, v11);
  v82 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = v12;
  MEMORY[0x1E0C80A78](v13, v14);
  v90 = (char *)&v77 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  v78 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16, v17);
  v80 = (uint64_t)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v77 - v21;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v92 = *(_QWORD *)(v23 - 8);
  v93 = v23;
  MEMORY[0x1E0C80A78](v23, v24);
  v85 = (char *)&v77 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v28);
  v30 = (char *)&v77 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31, v32);
  v34 = (char *)&v77 - v33;
  v35 = &v4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
  swift_beginAccess();
  v86 = v27;
  v36 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
  v88 = v34;
  v37 = v34;
  v38 = v36;
  v39 = ((uint64_t (*)(char *, char *, uint64_t))v36)(v37, v35, v26);
  a4(&v96, v39);
  v83 = a1;
  if ((a1 & 1) != 0)
  {
    v40 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    PaperDocumentView.updatePDFDocument(otherDocuments:)((Swift::OpaquePointer)v40);
    swift_bridgeObjectRelease();
    v41 = v4;
    v42 = (void **)&v4[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
    swift_beginAccess();
    result = *v42;
    if (*v42)
    {
      objc_msgSend(result, sel_layoutDocumentView);
      v44 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
      v45 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000014, 0x80000001DDF58930);
      result = *v42;
      if (*v42)
      {
        v46 = objc_msgSend(result, sel_document);
        objc_msgSend(v44, sel_postNotificationName_object_, v45, v46);

        v5 = v41;
        goto LABEL_5;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return result;
  }
LABEL_5:
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v89, (uint64_t)v22, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  v48 = v92;
  v47 = v93;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v22, 1, v93) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v22, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
LABEL_10:
    v64 = v86;
    goto LABEL_11;
  }
  v49 = v85;
  (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v85, v22, v47);
  v77 = v5;
  v50 = (uint64_t *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap];
  v51 = swift_beginAccess();
  v52 = *v50;
  MEMORY[0x1E0C80A78](v51, v53);
  *(&v77 - 2) = v49;
  swift_bridgeObjectRetain();
  specialized Sequence.first(where:)((uint64_t (*)(id *))partial apply for closure #1 in PaperDocumentView.convert(_:from:), (uint64_t)(&v77 - 4), v52);
  v55 = v54;
  v57 = v56;
  v59 = v58;
  swift_bridgeObjectRelease();
  if (!v55)
  {
    (*(void (**)(char *, uint64_t))(v92 + 8))(v49, v93);
    v5 = v77;
    goto LABEL_10;
  }

  ObjectType = swift_getObjectType();
  v38(v30, v35, v26);
  v95[0] = 3;
  v61 = *(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 88);
  v62 = type metadata accessor for PaperDocument(0);
  v63 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
  v61(v30, v95, v62, v63, ObjectType, v59);

  v64 = v86;
  (*(void (**)(char *, uint64_t))(v86 + 8))(v30, v26);
  (*(void (**)(char *, uint64_t))(v92 + 8))(v49, v93);
  v5 = v77;
LABEL_11:
  v38(v30, v35, v26);
  v65 = v88;
  Capsule.actionUndoingDifference(from:)();
  v66 = (uint64_t)v94;
  v67 = *(void (**)(char *, uint64_t))(v64 + 8);
  v67(v30, v26);
  v68 = v91;
  v69 = v87;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v91 + 48))(v66, 1, v87) == 1)
  {
    v67(v65, v26);
    outlined destroy of StocksKitCurrencyCache.Provider?(v66, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  }
  else
  {
    v94 = *(void (**)(char *, uint64_t, uint64_t))(v68 + 32);
    v94(v90, v66, v69);
    v38(v30, v35, v26);
    PassthroughSubject.send(_:)();
    v67(v30, v26);
    if (*(_QWORD *)&v5[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection])
    {
      v38(v30, v35, v26);
      swift_retain();
      CRMulticastSyncManager.sync(_:sendDelta:)();
      swift_release();
      v67(v30, v26);
    }
    v70 = objc_msgSend(v5, sel_undoManager);
    if (v70)
    {
      v71 = v70;
      v72 = v80;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v89, v80, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      v73 = v82;
      (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v82, v90, v69);
      v74 = (*(unsigned __int8 *)(v78 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
      v75 = (v79 + *(unsigned __int8 *)(v68 + 80) + v74) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80);
      v76 = swift_allocObject();
      *(_BYTE *)(v76 + 16) = v83 & 1;
      *(_BYTE *)(v76 + 17) = v84 & 1;
      outlined init with take of (key: Int, value: AnyCRValue)?(v72, v76 + v74, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      v65 = v88;
      v94((char *)(v76 + v75), (uint64_t)v73, v69);
      type metadata accessor for PaperDocumentView();
      NSUndoManager.registerUndo<A>(withTarget:handler:)();
      v68 = v91;
      swift_release();

    }
    (*(void (**)(char *, uint64_t))(v68 + 8))(v90, v69);
    v67(v65, v26);
  }
  return (void *)v96;
}

void *specialized PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(int a1, int a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t (*a6)(id *), uint64_t a7, uint64_t a8)
{
  char *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  void (*v39)(_QWORD, _QWORD, _QWORD);
  char *v40;
  char *v41;
  void (*v42)(_QWORD, _QWORD, _QWORD);
  uint64_t v43;
  unint64_t v44;
  char *v45;
  void **v46;
  void *result;
  id v48;
  void *v49;
  id v50;
  void (*v51)(_QWORD, _QWORD, _QWORD);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(_QWORD, _QWORD, _QWORD);
  void (*v68)(char *, char *, uint64_t, uint64_t, uint64_t (*)(id *), uint64_t);
  uint64_t v69;
  uint64_t v70;
  char *v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  char *v75;
  id v76;
  void *v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  void (*v84)(_QWORD, _QWORD, _QWORD);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  char *v94;
  uint64_t (*ObjectType)(id *);
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(_QWORD, _QWORD, _QWORD);
  char *v105;
  char v106[9];

  v93 = a8;
  v91 = a7;
  ObjectType = a6;
  v100 = a3;
  v92 = a2;
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v11, v12);
  v97 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for CapsuleUndoAction();
  v102 = *(_QWORD *)(v98 - 8);
  MEMORY[0x1E0C80A78](v98, v14);
  v89 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = v15;
  MEMORY[0x1E0C80A78](v16, v17);
  v101 = (char *)&v84 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  v85 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19, v20);
  v87 = (uint64_t)&v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = v21;
  MEMORY[0x1E0C80A78](v22, v23);
  v25 = (char *)&v84 - v24;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v103 = *(_QWORD *)(v26 - 8);
  v104 = (void (*)(_QWORD, _QWORD, _QWORD))v26;
  MEMORY[0x1E0C80A78](v26, v27);
  v94 = (char *)&v84 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29, v31);
  v33 = (char *)&v84 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34, v35);
  v37 = (char *)&v84 - v36;
  v105 = v8;
  v38 = &v8[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel];
  swift_beginAccess();
  v96 = v30;
  v39 = *(void (**)(_QWORD, _QWORD, _QWORD))(v30 + 16);
  v40 = v38;
  v99 = v37;
  v41 = v37;
  v42 = v39;
  v43 = ((uint64_t (*)(char *, char *, uint64_t))v39)(v41, v38, v29);
  a4(v43);
  v90 = a1;
  if ((a1 & 1) == 0)
    goto LABEL_5;
  v44 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v45 = v105;
  PaperDocumentView.updatePDFDocument(otherDocuments:)((Swift::OpaquePointer)v44);
  swift_bridgeObjectRelease();
  v46 = (void **)&v45[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
  swift_beginAccess();
  result = *v46;
  if (!*v46)
  {
    __break(1u);
    goto LABEL_19;
  }
  objc_msgSend(result, sel_layoutDocumentView);
  v48 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  v49 = (void *)MEMORY[0x1DF0E41AC](0xD000000000000014, 0x80000001DDF58930);
  result = *v46;
  if (!*v46)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  v50 = objc_msgSend(result, sel_document);
  objc_msgSend(v48, sel_postNotificationName_object_, v49, v50);

LABEL_5:
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v100, (uint64_t)v25, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  v52 = v103;
  v51 = v104;
  if ((*(unsigned int (**)(char *, uint64_t, _QWORD))(v103 + 48))(v25, 1, v104) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v25, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    v53 = v99;
    v54 = v96;
    v55 = (uint64_t)v97;
  }
  else
  {
    v84 = v42;
    v56 = v94;
    (*(void (**)(char *, char *, _QWORD))(v52 + 32))(v94, v25, v51);
    v57 = (uint64_t *)&v105[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap];
    v58 = swift_beginAccess();
    v59 = *v57;
    MEMORY[0x1E0C80A78](v58, v60);
    *(&v84 - 2) = (void (*)(_QWORD, _QWORD, _QWORD))v56;
    swift_bridgeObjectRetain();
    specialized Sequence.first(where:)(ObjectType, (uint64_t)(&v84 - 4), v59);
    v62 = v61;
    v64 = v63;
    v66 = v65;
    swift_bridgeObjectRelease();
    v55 = (uint64_t)v97;
    if (v62)
    {

      ObjectType = (uint64_t (*)(id *))swift_getObjectType();
      v67 = v84;
      v84(v33, v40, v29);
      v106[0] = 3;
      v68 = *(void (**)(char *, char *, uint64_t, uint64_t, uint64_t (*)(id *), uint64_t))(v66 + 88);
      v69 = type metadata accessor for PaperDocument(0);
      v70 = lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
      v68(v33, v106, v69, v70, ObjectType, v66);

      v54 = v96;
      (*(void (**)(char *, uint64_t))(v96 + 8))(v33, v29);
      v71 = v56;
      v42 = v67;
      (*(void (**)(char *, void (*)(_QWORD, _QWORD, _QWORD)))(v103 + 8))(v71, v104);
      v53 = v99;
    }
    else
    {
      (*(void (**)(char *, void (*)(_QWORD, _QWORD, _QWORD)))(v103 + 8))(v56, v104);
      v53 = v99;
      v54 = v96;
      v42 = v84;
    }
  }
  v42(v33, v40, v29);
  Capsule.actionUndoingDifference(from:)();
  v72 = *(void (**)(char *, uint64_t))(v54 + 8);
  v72(v33, v29);
  v73 = v102;
  v74 = v98;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v102 + 48))(v55, 1, v98) == 1)
  {
    v72(v53, v29);
    return (void *)outlined destroy of StocksKitCurrencyCache.Provider?(v55, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  }
  else
  {
    v104 = *(void (**)(_QWORD, _QWORD, _QWORD))(v73 + 32);
    v104(v101, v55, v74);
    v75 = v105;
    v42(v33, v40, v29);
    PassthroughSubject.send(_:)();
    v72(v33, v29);
    if (*(_QWORD *)&v75[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection])
    {
      v42(v33, v40, v29);
      swift_retain();
      CRMulticastSyncManager.sync(_:sendDelta:)();
      swift_release();
      v72(v33, v29);
    }
    v76 = objc_msgSend(v75, sel_undoManager);
    if (v76)
    {
      v77 = v76;
      v78 = v87;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v100, v87, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      v79 = v89;
      (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v89, v101, v74);
      v80 = (*(unsigned __int8 *)(v85 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80);
      v81 = (v86 + *(unsigned __int8 *)(v73 + 80) + v80) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
      v82 = swift_allocObject();
      *(_BYTE *)(v82 + 16) = v90 & 1;
      *(_BYTE *)(v82 + 17) = v92 & 1;
      outlined init with take of (key: Int, value: AnyCRValue)?(v78, v82 + v80, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      v83 = v79;
      v53 = v99;
      v104(v82 + v81, v83, v74);
      type metadata accessor for PaperDocumentView();
      NSUndoManager.registerUndo<A>(withTarget:handler:)();
      v73 = v102;
      swift_release();

    }
    (*(void (**)(char *, uint64_t))(v73 + 8))(v101, v74);
    return (void *)((uint64_t (*)(char *, uint64_t))v72)(v53, v29);
  }
}

uint64_t closure #1 in closure #2 in PaperDocumentView.undoable<A>(updatePDF:updatePDFOnUndo:updatePage:action:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CapsuleUndoAction();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a2, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  Capsule.apply(_:)();
  outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  return swift_endAccess();
}

void PaperDocumentView.merge<A>(_:from:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t ObjectType;
  void (*v30)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  id v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  int v47;
  char v48;

  v5 = v4;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = *a2;
  if (!v47 && *(_QWORD *)(v5 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection))
  {
    swift_retain();
    CRMulticastSyncManager.merge<A>(_:sendDelta:)();
    swift_release();
  }
  v15 = v5 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  swift_beginAccess();
  v44 = v15;
  Capsule.merge<A>(_:)();
  swift_endAccess();
  if (v47 != 4)
  {
    v40 = v14;
    v42 = v11;
    v43 = v10;
    v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    PaperDocumentView.updatePDFDocument(otherDocuments:)((Swift::OpaquePointer)v16);
    swift_bridgeObjectRelease();
    v41 = v5;
    v17 = (uint64_t *)(v5 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
    swift_beginAccess();
    v18 = *v17;
    v19 = *(_QWORD *)(*v17 + 64);
    v45 = *v17 + 64;
    v20 = 1 << *(_BYTE *)(v18 + 32);
    v21 = -1;
    if (v20 < 64)
      v21 = ~(-1 << v20);
    v22 = v21 & v19;
    v46 = (unint64_t)(v20 + 63) >> 6;
    swift_bridgeObjectRetain();
    v23 = 0;
    while (1)
    {
      if (v22)
      {
        v24 = __clz(__rbit64(v22));
        v22 &= v22 - 1;
        v25 = v24 | (v23 << 6);
      }
      else
      {
        v32 = v23 + 1;
        if (__OFADD__(v23, 1))
        {
          __break(1u);
LABEL_37:
          __break(1u);
          return;
        }
        if (v32 >= v46)
          goto LABEL_25;
        v33 = *(_QWORD *)(v45 + 8 * v32);
        ++v23;
        if (!v33)
        {
          v23 = v32 + 1;
          if (v32 + 1 >= v46)
            goto LABEL_25;
          v33 = *(_QWORD *)(v45 + 8 * v23);
          if (!v33)
          {
            v23 = v32 + 2;
            if (v32 + 2 >= v46)
              goto LABEL_25;
            v33 = *(_QWORD *)(v45 + 8 * v23);
            if (!v33)
            {
              v34 = v32 + 3;
              if (v34 >= v46)
              {
LABEL_25:
                swift_release();
                v11 = v42;
                v10 = v43;
                v14 = v40;
                v5 = v41;
                if ((v47 - 3) > 1)
                  return;
                break;
              }
              v33 = *(_QWORD *)(v45 + 8 * v34);
              if (!v33)
              {
                while (1)
                {
                  v23 = v34 + 1;
                  if (__OFADD__(v34, 1))
                    goto LABEL_37;
                  if (v23 >= v46)
                    goto LABEL_25;
                  v33 = *(_QWORD *)(v45 + 8 * v23);
                  ++v34;
                  if (v33)
                    goto LABEL_24;
                }
              }
              v23 = v34;
            }
          }
        }
LABEL_24:
        v22 = (v33 - 1) & v33;
        v25 = __clz(__rbit64(v33)) + (v23 << 6);
      }
      v26 = *(_QWORD *)(v18 + 56) + 16 * v25;
      v27 = *(void **)v26;
      v28 = *(_QWORD *)(v26 + 8);
      ObjectType = swift_getObjectType();
      v48 = v47;
      v30 = *(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 88);
      v31 = v27;
      v30(a1, &v48, a3, a4, ObjectType, v28);

    }
  }
  v35 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection;
  if (*(_QWORD *)(v5 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v44, v10);
    swift_retain();
    CRMulticastSyncManager.sync(_:sendDelta:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  if (v47 == 4)
  {
    if (PaperDocumentView.isLiveEditing()())
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v44, v10);
    }
    else
    {
      v36 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
      v37 = v44;
      v36(v14, v44, v10);
      PassthroughSubject.send(_:)();
      v38 = *(void (**)(char *, uint64_t))(v11 + 8);
      v38(v14, v10);
      if (*(_QWORD *)(v5 + v35))
      {
        v36(v14, v37, v10);
        swift_retain();
        CRMulticastSyncManager.sync(_:sendDelta:)();
        swift_release();
        v38(v14, v10);
      }
      v36(v14, v37, v10);
    }
    PassthroughSubject.send(_:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
}

void PaperDocumentView.merge<A>(_:from:page:)(uint64_t a1, _BYTE *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  id v22;
  void (*v23)(char *, uint64_t);
  uint64_t *v24;
  uint64_t v25;
  id v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t ObjectType;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  _OWORD v39[5];

  v6 = v5;
  v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12, v14);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a2;
  if (!*a2 && *(_QWORD *)(v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection))
  {
    swift_retain();
    CRMulticastSyncManager.merge<A>(_:sendDelta:)();
    swift_release();
  }
  v18 = a4;
  v19 = v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  swift_beginAccess();
  v36 = v18;
  v37 = a5;
  Capsule.merge<A>(_:)();
  swift_endAccess();
  v20 = *(void **)(v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfDocument);
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v21(v16, v19, v12);
  v39[0] = xmmword_1DDF32D00;
  memset(&v39[1], 0, 59);
  v22 = v20;
  specialized PaperKitPDFDocument.updatePDFPage<A>(in:use:options:page:)((uint64_t)v16, 0x8000000000000000, (uint64_t)v39, (uint64_t)a3);

  v23 = *(void (**)(char *, uint64_t))(v13 + 8);
  v23(v16, v12);
  if (v17 == 4)
    goto LABEL_10;
  v24 = (uint64_t *)(v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pageToOverlayMap);
  swift_beginAccess();
  v25 = *v24;
  if (*(_QWORD *)(v25 + 16))
  {
    v26 = a3;
    swift_bridgeObjectRetain();
    v27 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v26);
    if ((v28 & 1) != 0)
    {
      v29 = *(_QWORD *)(v25 + 56) + 16 * v27;
      v30 = *(void **)v29;
      v35 = *(_QWORD *)(v29 + 8);
      v34 = v30;

      swift_bridgeObjectRelease();
      v31 = v34;
      ObjectType = swift_getObjectType();
      v38 = v17;
      (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t))(v35 + 88))(a1, &v38, v36, v37, ObjectType);

    }
    else
    {

      swift_bridgeObjectRelease();
    }
  }
  if ((v17 - 3) <= 1)
  {
LABEL_10:
    v33 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection;
    if (*(_QWORD *)(v6 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_multipeerConnection))
    {
      v21(v16, v19, v12);
      swift_retain();
      CRMulticastSyncManager.sync(_:sendDelta:)();
      swift_release();
      v23(v16, v12);
    }
    if (v17 == 4)
    {
      if (!PaperDocumentView.isLiveEditing()())
      {
        v21(v16, v19, v12);
        PassthroughSubject.send(_:)();
        v23(v16, v12);
        if (*(_QWORD *)(v6 + v33))
        {
          v21(v16, v19, v12);
          swift_retain();
          CRMulticastSyncManager.sync(_:sendDelta:)();
          swift_release();
          v23(v16, v12);
        }
      }
      v21(v16, v19, v12);
      PassthroughSubject.send(_:)();
      v23(v16, v12);
    }
  }
}

uint64_t PaperDocumentView.didChange(page:)(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  ObjectType = swift_getObjectType();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14, v15);
  v18 = (char *)&v26 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v13, a1, v9, v16);
  swift_beginAccess();
  specialized Set._Variant.insert(_:)((uint64_t)v18, v13);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v9);
  result = swift_endAccess();
  v20 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_changedPagesTask;
  if (!*(_QWORD *)&v2[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_changedPagesTask])
  {
    v21 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v8, 1, 1, v21);
    type metadata accessor for MainActor();
    v22 = v2;
    v23 = static MainActor.shared.getter();
    v24 = (_QWORD *)swift_allocObject();
    v25 = MEMORY[0x1E0DF06E8];
    v24[2] = v23;
    v24[3] = v25;
    v24[4] = v22;
    v24[5] = ObjectType;
    *(_QWORD *)&v2[v20] = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in PaperDocumentView.didChange(page:), (uint64_t)v24);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in PaperDocumentView.didChange(page:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[25] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>);
  v4[26] = v5;
  v4[27] = *(_QWORD *)(v5 - 8);
  v4[28] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v4[29] = v6;
  v4[30] = *(_QWORD *)(v6 - 8);
  v4[31] = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>);
  v4[32] = v7;
  v4[33] = *(_QWORD *)(v7 - 8);
  v4[34] = swift_task_alloc();
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  v8 = type metadata accessor for ContinuousClock();
  v4[37] = v8;
  v4[38] = *(_QWORD *)(v8 - 8);
  v4[39] = swift_task_alloc();
  v9 = type metadata accessor for ContinuousClock.Instant();
  v4[40] = v9;
  v4[41] = *(_QWORD *)(v9 - 8);
  v4[42] = swift_task_alloc();
  v4[43] = swift_task_alloc();
  v4[44] = swift_task_alloc();
  type metadata accessor for MainActor();
  v4[45] = static MainActor.shared.getter();
  v4[46] = dispatch thunk of Actor.unownedExecutor.getter();
  v4[47] = v10;
  return swift_task_switch();
}

uint64_t closure #1 in PaperDocumentView.didChange(page:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 352);
  v2 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 200);
  v5 = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_changedDeadline;
  *(_QWORD *)(v0 + 384) = OBJC_IVAR____TtC8PaperKit17PaperDocumentView_changedDeadline;
  v6 = v4 + v5;
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v6, v2);
  *(_QWORD *)(v0 + 152) = 0;
  *(_QWORD *)(v0 + 144) = 0;
  *(_BYTE *)(v0 + 160) = 1;
  ContinuousClock.init()();
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 392) = v7;
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey(&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0BA0], MEMORY[0x1E0DF0BB0]);
  *v7 = v0;
  v7[1] = closure #1 in PaperDocumentView.didChange(page:);
  return static Task<>.sleep<A>(until:tolerance:clock:)();
}

{
  void *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  v2 = (_QWORD *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    v3 = v2[44];
    v4 = v2[40];
    v5 = v2[41];
    v7 = v2[38];
    v6 = v2[39];
    v8 = v2[37];

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v2[51] = v9;
    v9(v3, v4);
  }
  else
  {
    v10 = v2[44];
    v11 = v2[40];
    v12 = v2[41];
    (*(void (**)(_QWORD, _QWORD))(v2[38] + 8))(v2[39], v2[37]);
    v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v2[50] = v13;
    v13(v10, v11);
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, unint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, _QWORD);
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  _QWORD *v48;
  uint64_t v49;

  v48 = (_QWORD *)(v0 + 184);
  v1 = (uint64_t *)(v0 + 192);
  swift_release();
  v38 = *(void (**)(uint64_t, uint64_t))(v0 + 400);
  v49 = *(_QWORD *)(v0 + 264);
  v44 = *(_QWORD *)(v0 + 240);
  v42 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_changedPages);
  swift_beginAccess();
  v37 = v3;
  v4 = *v3;
  v40 = *v3 + 56;
  v5 = -1 << *(_BYTE *)(*v3 + 32);
  if (-v5 < 64)
    v6 = ~(-1 << -(char)v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(*v3 + 56);
  v8 = v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  v39 = v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_thumbnailView;
  v45 = v4;
  swift_bridgeObjectRetain();
  v43 = v8;
  result = swift_beginAccess();
  v10 = 0;
  v41 = (unint64_t)(63 - v5) >> 6;
  while (1)
  {
    if (v7)
    {
      v46 = (v7 - 1) & v7;
      v47 = v10;
      v11 = __clz(__rbit64(v7)) | (v10 << 6);
      goto LABEL_23;
    }
    v12 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v12 >= v41)
      goto LABEL_33;
    v13 = *(_QWORD *)(v40 + 8 * v12);
    v14 = v10 + 1;
    if (!v13)
    {
      v14 = v10 + 2;
      if (v10 + 2 >= v41)
        goto LABEL_33;
      v13 = *(_QWORD *)(v40 + 8 * v14);
      if (!v13)
      {
        v14 = v10 + 3;
        if (v10 + 3 >= v41)
          goto LABEL_33;
        v13 = *(_QWORD *)(v40 + 8 * v14);
        if (!v13)
          break;
      }
    }
LABEL_22:
    v46 = (v13 - 1) & v13;
    v47 = v14;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_23:
    v17 = *(_QWORD *)(v0 + 280);
    v16 = *(_QWORD *)(v0 + 288);
    v18 = *(_QWORD *)(v0 + 248);
    v19 = *(_QWORD *)(v0 + 256);
    v20 = *(_QWORD *)(v0 + 232);
    v21 = *(void (**)(uint64_t, unint64_t, uint64_t))(v49 + 16);
    v21(v16, *(_QWORD *)(v45 + 48) + *(_QWORD *)(v49 + 72) * v11, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32))(v17, v16, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v18, v43, v20);
    swift_getKeyPath();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v18, v20);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>, MEMORY[0x1E0D11DC8]);
    dispatch thunk of Collection._customIndexOfEquatableElement(_:)();
    if (*(_BYTE *)(v0 + 177) == 1)
    {
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of Collection.endIndex.getter();
      if (*v1 == *v48)
      {
LABEL_5:
        (*(void (**)(_QWORD, _QWORD))(v42 + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 208));
        v7 = v46;
        v10 = v47;
        goto LABEL_6;
      }
      while (1)
      {
        v22 = *(_QWORD *)(v0 + 272);
        v23 = *(_QWORD *)(v0 + 256);
        v24 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read();
        ((void (*)(uint64_t))v21)(v22);
        v24(v0 + 16, 0);
        lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, MEMORY[0x1E0D12280]);
        v25 = dispatch thunk of static Equatable.== infix(_:_:)();
        (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v22, v23);
        if ((v25 & 1) != 0)
          break;
        dispatch thunk of Collection.formIndex(after:)();
        dispatch thunk of Collection.endIndex.getter();
        if (*v1 == *v48)
          goto LABEL_5;
      }
      v27 = *v1;
      (*(void (**)(_QWORD, _QWORD))(v42 + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 208));
      v7 = v46;
      v10 = v47;
    }
    else
    {
      v26 = *(_BYTE *)(v0 + 176);
      v27 = *(_QWORD *)(v0 + 168);
      (*(void (**)(_QWORD, _QWORD))(v42 + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 208));
      v7 = v46;
      v10 = v47;
      if ((v26 & 1) != 0)
        goto LABEL_6;
    }
    v28 = MEMORY[0x1DF0E666C](v39);
    if (v28)
    {
      v29 = (void *)v28;
      v30 = *(id *)(v28 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView);

      objc_msgSend(v30, sel_reloadPageAt_, v27);
    }
LABEL_6:
    result = (*(uint64_t (**)(_QWORD, _QWORD))(v49 + 8))(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 256));
  }
  v15 = v10 + 4;
  if (v10 + 4 >= v41)
  {
LABEL_33:
    swift_release();
    v31 = *(_QWORD *)(v0 + 344);
    v33 = *(_QWORD *)(v0 + 328);
    v32 = *(_QWORD *)(v0 + 336);
    v34 = *(_QWORD *)(v0 + 320);
    v35 = *(_QWORD *)(v0 + 200);
    v36 = v35 + *(_QWORD *)(v0 + 384);
    *v37 = MEMORY[0x1E0DEE9E8];
    swift_bridgeObjectRelease();
    static ContinuousClock.Instant.now.getter();
    MEMORY[0x1DF0E4E18](2000000000000000000, 0);
    v38(v32, v34);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 40))(v36, v31, v34);
    swift_endAccess();
    *(_QWORD *)(v35 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_changedPagesTask) = 0;
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v13 = *(_QWORD *)(v40 + 8 * v15);
  if (v13)
  {
    v14 = v10 + 4;
    goto LABEL_22;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v41)
      goto LABEL_33;
    v13 = *(_QWORD *)(v40 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_22;
  }
LABEL_35:
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, unint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, _QWORD);
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  _QWORD *v48;
  uint64_t v49;

  v48 = (_QWORD *)(v0 + 184);
  v1 = (uint64_t *)(v0 + 192);
  swift_release();
  v38 = *(void (**)(uint64_t, uint64_t))(v0 + 408);
  v49 = *(_QWORD *)(v0 + 264);
  v44 = *(_QWORD *)(v0 + 240);
  v42 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = (_QWORD *)(v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_changedPages);
  swift_beginAccess();
  v37 = v3;
  v4 = *v3;
  v40 = *v3 + 56;
  v5 = -1 << *(_BYTE *)(*v3 + 32);
  if (-v5 < 64)
    v6 = ~(-1 << -(char)v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(*v3 + 56);
  v8 = v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
  v39 = v2 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_thumbnailView;
  v45 = v4;
  swift_bridgeObjectRetain();
  v43 = v8;
  result = swift_beginAccess();
  v10 = 0;
  v41 = (unint64_t)(63 - v5) >> 6;
  while (1)
  {
    if (v7)
    {
      v46 = (v7 - 1) & v7;
      v47 = v10;
      v11 = __clz(__rbit64(v7)) | (v10 << 6);
      goto LABEL_23;
    }
    v12 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v12 >= v41)
      goto LABEL_33;
    v13 = *(_QWORD *)(v40 + 8 * v12);
    v14 = v10 + 1;
    if (!v13)
    {
      v14 = v10 + 2;
      if (v10 + 2 >= v41)
        goto LABEL_33;
      v13 = *(_QWORD *)(v40 + 8 * v14);
      if (!v13)
      {
        v14 = v10 + 3;
        if (v10 + 3 >= v41)
          goto LABEL_33;
        v13 = *(_QWORD *)(v40 + 8 * v14);
        if (!v13)
          break;
      }
    }
LABEL_22:
    v46 = (v13 - 1) & v13;
    v47 = v14;
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_23:
    v17 = *(_QWORD *)(v0 + 280);
    v16 = *(_QWORD *)(v0 + 288);
    v18 = *(_QWORD *)(v0 + 248);
    v19 = *(_QWORD *)(v0 + 256);
    v20 = *(_QWORD *)(v0 + 232);
    v21 = *(void (**)(uint64_t, unint64_t, uint64_t))(v49 + 16);
    v21(v16, *(_QWORD *)(v45 + 48) + *(_QWORD *)(v49 + 72) * v11, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32))(v17, v16, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v18, v43, v20);
    swift_getKeyPath();
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey((unint64_t *)&lazy protocol witness table cache variable for type PaperDocument and conformance PaperDocument, type metadata accessor for PaperDocument, (uint64_t)&protocol conformance descriptor for PaperDocument);
    Capsule<>.subscript.getter();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v18, v20);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type CROrderedSet<SharedTagged_3<TaggedPaperPage>> and conformance CROrderedSet<A>, &demangling cache variable for type metadata for CROrderedSet<SharedTagged_3<TaggedPaperPage>>, MEMORY[0x1E0D11DC8]);
    dispatch thunk of Collection._customIndexOfEquatableElement(_:)();
    if (*(_BYTE *)(v0 + 177) == 1)
    {
      dispatch thunk of Collection.startIndex.getter();
      dispatch thunk of Collection.endIndex.getter();
      if (*v1 == *v48)
      {
LABEL_5:
        (*(void (**)(_QWORD, _QWORD))(v42 + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 208));
        v7 = v46;
        v10 = v47;
        goto LABEL_6;
      }
      while (1)
      {
        v22 = *(_QWORD *)(v0 + 272);
        v23 = *(_QWORD *)(v0 + 256);
        v24 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read();
        ((void (*)(uint64_t))v21)(v22);
        v24(v0 + 16, 0);
        lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>((unint64_t *)&lazy protocol witness table cache variable for type SharedTagged_3<TaggedPaperPage> and conformance SharedTagged_3<A>, &demangling cache variable for type metadata for SharedTagged_3<TaggedPaperPage>, MEMORY[0x1E0D12280]);
        v25 = dispatch thunk of static Equatable.== infix(_:_:)();
        (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v22, v23);
        if ((v25 & 1) != 0)
          break;
        dispatch thunk of Collection.formIndex(after:)();
        dispatch thunk of Collection.endIndex.getter();
        if (*v1 == *v48)
          goto LABEL_5;
      }
      v27 = *v1;
      (*(void (**)(_QWORD, _QWORD))(v42 + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 208));
      v7 = v46;
      v10 = v47;
    }
    else
    {
      v26 = *(_BYTE *)(v0 + 176);
      v27 = *(_QWORD *)(v0 + 168);
      (*(void (**)(_QWORD, _QWORD))(v42 + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 208));
      v7 = v46;
      v10 = v47;
      if ((v26 & 1) != 0)
        goto LABEL_6;
    }
    v28 = MEMORY[0x1DF0E666C](v39);
    if (v28)
    {
      v29 = (void *)v28;
      v30 = *(id *)(v28 + OBJC_IVAR____TtC8PaperKit26PaperDocumentThumbnailView_pdfThumbnailView);

      objc_msgSend(v30, sel_reloadPageAt_, v27);
    }
LABEL_6:
    result = (*(uint64_t (**)(_QWORD, _QWORD))(v49 + 8))(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 256));
  }
  v15 = v10 + 4;
  if (v10 + 4 >= v41)
  {
LABEL_33:
    swift_release();
    v31 = *(_QWORD *)(v0 + 344);
    v33 = *(_QWORD *)(v0 + 328);
    v32 = *(_QWORD *)(v0 + 336);
    v34 = *(_QWORD *)(v0 + 320);
    v35 = *(_QWORD *)(v0 + 200);
    v36 = v35 + *(_QWORD *)(v0 + 384);
    *v37 = MEMORY[0x1E0DEE9E8];
    swift_bridgeObjectRelease();
    static ContinuousClock.Instant.now.getter();
    MEMORY[0x1DF0E4E18](2000000000000000000, 0);
    v38(v32, v34);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 40))(v36, v31, v34);
    swift_endAccess();
    *(_QWORD *)(v35 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_changedPagesTask) = 0;
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v13 = *(_QWORD *)(v40 + 8 * v15);
  if (v13)
  {
    v14 = v10 + 4;
    goto LABEL_22;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v41)
      goto LABEL_33;
    v13 = *(_QWORD *)(v40 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_22;
  }
LABEL_35:
  __break(1u);
  return result;
}

Swift::Void __swiftcall PaperDocumentView.revertAllChanges()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;

  v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
  MEMORY[0x1E0C80A78](v1, v2);
  v31 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v30 - v6;
  v33 = type metadata accessor for CapsuleUndoAction();
  v8 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33, v9);
  v32 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)&v30 - v22;
  v34 = v0;
  v24 = v0 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModelInitialState;
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v24, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Capsule<PaperDocument>?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v23, v14, v15);
    v25 = v34 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_dataModel;
    swift_beginAccess();
    v30 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    v30(v19, v25, v15);
    Capsule.actionUndoingDifference(from:)();
    v26 = *(void (**)(char *, uint64_t))(v16 + 8);
    v26(v19, v15);
    v27 = v33;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v33) == 1)
    {
      v26(v23, v15);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
    }
    else
    {
      v28 = v32;
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v32, v7, v27);
      v29 = (uint64_t)v31;
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v31, v28, v27);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v29, 0, 1, v27);
      swift_beginAccess();
      Capsule.apply(_:)();
      outlined destroy of StocksKitCurrencyCache.Provider?(v29, (uint64_t *)&demangling cache variable for type metadata for CapsuleUndoAction?);
      swift_endAccess();
      v30(v19, v25, v15);
      specialized PaperDocumentView.merge<A>(_:from:)((uint64_t)v19, 3u);
      v26(v19, v15);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v28, v27);
      v26(v23, v15);
    }
  }
}

id PaperDocumentView.scrollViewForAvoidingKeyboard.getter()
{
  void *v0;
  char *v1;
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  id *v10;
  id result;

  type metadata accessor for PaperDocumentInlineView();
  v1 = v0;
  v2 = swift_dynamicCastClass();
  if (v2)
  {
    v3 = (id)v2;
    v4 = v1;
LABEL_7:

    v7 = v4;
    objc_opt_self();
    v8 = swift_dynamicCastObjCClass();
    if (v8)
    {
LABEL_10:
      v9 = (id)v8;

    }
    else
    {
      while (1)
      {
        v9 = objc_msgSend(v3, sel_superview);

        if (!v9)
          break;
        v3 = v9;
        objc_opt_self();
        v8 = swift_dynamicCastObjCClass();
        if (v8)
          goto LABEL_10;
      }

    }
    return v9;
  }
  v4 = v1;
  while (1)
  {
    v5 = objc_msgSend(v4, sel_superview);

    if (!v5)
      break;
    v4 = v5;
    v6 = swift_dynamicCastClass();
    if (v6)
    {
      v3 = (id)v6;
      goto LABEL_7;
    }
  }
  v10 = (id *)&v1[OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView];
  swift_beginAccess();
  result = *v10;
  if (*v10)
    return objc_msgSend(result, sel_documentScrollView);
  __break(1u);
  return result;
}

void PaperDocumentView.currentPage.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  id *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = (id *)(v1 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  if (!*v7)
  {
    __break(1u);
    return;
  }
  v8 = objc_msgSend(*v7, sel_currentPage);
  if (!v8)
  {
LABEL_7:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a1, 1, 1, v14);
    return;
  }
  v9 = v8;
  type metadata accessor for PaperKitPDFPage(0);
  v10 = swift_dynamicCastClass();
  if (!v10)
  {

    goto LABEL_7;
  }
  v11 = v10 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
  swift_beginAccess();
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v11, (uint64_t)v6, &demangling cache variable for type metadata for PageId?);
  v12 = type metadata accessor for PageId(0);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v6, 1, v12))
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for PageId?);
    v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
  else
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v6[*(int *)(v12 + 20)], a1, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v6, &demangling cache variable for type metadata for PageId?);
  }

}

id PaperDocumentView.canGoToNextPage.getter()
{
  return PaperDocumentView.canGoToNextPage.getter((SEL *)&selRef_canGoToNextPage);
}

Swift::Void __swiftcall PaperDocumentView.goToNextPage()()
{
  PaperDocumentView.goToNextPage()((SEL *)&selRef_goToNextPage_);
}

void PaperDocumentView.goToPage(_:hint:)(uint64_t a1, void *a2, char a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  id *v36;
  id v37;
  void *v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  __objc2_prot_list **p_base_prots;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  unsigned int (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t, uint64_t);
  uint64_t v62;
  char *v63;
  void (*v64)(char *, uint64_t);
  char *v65;
  id v66;
  char *v67;
  char v68;
  void (*v69)(char *, uint64_t);
  id v70;
  id v71;
  id *v72;
  char *v73;
  id *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  id v81;

  v80 = a1;
  v81 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v73 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (WeakTagged_3<TaggedPaperPage>?, WeakTagged_3<TaggedPaperPage>?));
  MEMORY[0x1E0C80A78](v79, v9);
  v11 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v77 = (uint64_t)&v72 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PageId?);
  MEMORY[0x1E0C80A78](v15, v16);
  v74 = (id *)((char *)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v72 - v20;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  MEMORY[0x1E0C80A78](v22, v23);
  v75 = (uint64_t)&v72 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25, v26);
  v76 = (uint64_t)&v72 - v27;
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (uint64_t *)((char *)&v72 - v30);
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v72 - v34;
  v36 = (id *)(v3 + OBJC_IVAR____TtC8PaperKit17PaperDocumentView_pdfView);
  swift_beginAccess();
  if (!*v36)
    goto LABEL_46;
  v37 = objc_msgSend(*v36, sel_document);
  if (!v37)
    return;
  v38 = v37;
  v78 = v37;
  if ((a3 & 1) != 0)
    goto LABEL_17;
  v39 = objc_msgSend(v37, sel_pageAtIndex_, v81);
  if (!v39)
    goto LABEL_17;
  v40 = v39;
  type metadata accessor for PaperKitPDFPage(0);
  v81 = v40;
  v41 = swift_dynamicCastClass();
  if (v41)
  {
    v42 = v41 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
    swift_beginAccess();
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v42, (uint64_t)v21, &demangling cache variable for type metadata for PageId?);
    v43 = type metadata accessor for PageId(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 48))(v21, 1, v43))
    {
      v44 = v81;
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for PageId?);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v35, 1, 1, v5);

    }
    else
    {
      outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)&v21[*(int *)(v43 + 20)], (uint64_t)v35, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v21, &demangling cache variable for type metadata for PageId?);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v35, 1, 1, v5);
  }
  v45 = v77;
  v46 = v77 + *(int *)(v79 + 48);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v35, v77, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  outlined init with copy of Ref<PKStrokeInheritedProperties>?(v80, v46, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v47(v45, 1, v5) == 1)
  {
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v35, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    if (v47(v46, 1, v5) == 1)
    {
      outlined destroy of StocksKitCurrencyCache.Provider?(v77, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      goto LABEL_40;
    }
  }
  else
  {
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v45, (uint64_t)v31, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    if (v47(v46, 1, v5) != 1)
      goto LABEL_39;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v35, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(v31, v5);
  }
  outlined destroy of StocksKitCurrencyCache.Provider?(v77, &demangling cache variable for type metadata for (WeakTagged_3<TaggedPaperPage>?, WeakTagged_3<TaggedPaperPage>?));
  do
  {

LABEL_17:
    v48 = (uint64_t)objc_msgSend(v38, sel_pageCount, v72);
    if (v48 < 0)
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    v49 = v48;
    v72 = v36;
    v36 = v74;
    v45 = v76;
    p_base_prots = &MiniMenuController.base_prots;
    if (!v48)
      goto LABEL_42;
    v35 = 0;
    v77 = v48;
    while (1)
    {
      if ((char *)v49 == v35)
      {
        __break(1u);
        goto LABEL_45;
      }
      v51 = objc_msgSend(v38, (SEL)p_base_prots[407], v35);
      if (v51)
        break;
LABEL_23:
      if ((char *)v49 == ++v35)
        goto LABEL_42;
    }
    v52 = v51;
    type metadata accessor for PaperKitPDFPage(0);
    v81 = v52;
    v53 = swift_dynamicCastClass();
    if (v53)
    {
      v54 = v53 + OBJC_IVAR____TtC8PaperKit15PaperKitPDFPage_pageId;
      swift_beginAccess();
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v54, (uint64_t)v36, &demangling cache variable for type metadata for PageId?);
      v55 = type metadata accessor for PageId(0);
      v31 = &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?;
      if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 48))(v36, 1, v55))
      {
        v56 = v81;
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v36, &demangling cache variable for type metadata for PageId?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v45, 1, 1, v5);

      }
      else
      {
        outlined init with copy of Ref<PKStrokeInheritedProperties>?((uint64_t)v36 + *(int *)(v55 + 20), v45, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v36, &demangling cache variable for type metadata for PageId?);
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v45, 1, 1, v5);
      v31 = &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?;
    }
    v46 = (uint64_t)&v11[*(int *)(v79 + 48)];
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v45, (uint64_t)v11, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    outlined init with copy of Ref<PKStrokeInheritedProperties>?(v80, v46, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    if (v57((uint64_t)v11, 1, v5) != 1)
    {
      v58 = (uint64_t)v11;
      v59 = (uint64_t)v11;
      v60 = v75;
      outlined init with copy of Ref<PKStrokeInheritedProperties>?(v58, v75, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
      if (v57(v46, 1, v5) == 1)
      {
        v45 = v76;
        outlined destroy of StocksKitCurrencyCache.Provider?(v76, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v60, v5);
        v11 = (char *)v59;
        p_base_prots = (__objc2_prot_list **)(&MiniMenuController + 40);
LABEL_21:
        outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for (WeakTagged_3<TaggedPaperPage>?, WeakTagged_3<TaggedPaperPage>?));
        v38 = v78;
      }
      else
      {
        v61 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 32);
        v62 = v6;
        v63 = v73;
        v61(v73, v46, v5);
        lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakTagged_3<TaggedPaperPage> and conformance WeakTagged_3<A>, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>, MEMORY[0x1E0D11E48]);
        v46 = dispatch thunk of static Equatable.== infix(_:_:)();
        v64 = *(void (**)(char *, uint64_t))(v62 + 8);
        v65 = v63;
        v6 = v62;
        v36 = v74;
        v64(v65, v5);
        v45 = v76;
        outlined destroy of StocksKitCurrencyCache.Provider?(v76, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
        v64((char *)v60, v5);
        outlined destroy of StocksKitCurrencyCache.Provider?(v59, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
        v38 = v78;
        v11 = (char *)v59;
        p_base_prots = (__objc2_prot_list **)(&MiniMenuController + 40);
        if ((v46 & 1) != 0)
          goto LABEL_37;
      }

      v49 = v77;
      goto LABEL_23;
    }
    outlined destroy of StocksKitCurrencyCache.Provider?(v45, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    if (v57(v46, 1, v5) != 1)
      goto LABEL_21;
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v11, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    v38 = v78;
LABEL_37:
    v66 = *v72;
    if (*v72)
      goto LABEL_41;
    __break(1u);
LABEL_39:
    v67 = v73;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v73, v46, v5);
    lazy protocol witness table accessor for type Ref<PKStrokePathStruct> and conformance Ref<A>(&lazy protocol witness table cache variable for type WeakTagged_3<TaggedPaperPage> and conformance WeakTagged_3<A>, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>, MEMORY[0x1E0D11E48]);
    v68 = dispatch thunk of static Equatable.== infix(_:_:)();
    v69 = *(void (**)(char *, uint64_t))(v6 + 8);
    v69(v67, v5);
    outlined destroy of StocksKitCurrencyCache.Provider?((uint64_t)v35, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
    v69((char *)v31, v5);
    v38 = v78;
    outlined destroy of StocksKitCurrencyCache.Provider?(v45, &demangling cache variable for type metadata for WeakTagged_3<TaggedPaperPage>?);
  }
  while ((v68 & 1) == 0);
LABEL_40:
  v66 = *v36;
  if (!*v36)
  {
LABEL_47:
    __break(1u);
    return;
  }
LABEL_41:
  v70 = v66;
  v71 = v81;
  objc_msgSend(v70, sel_goToPage_, v81);

LABEL_42:
}

